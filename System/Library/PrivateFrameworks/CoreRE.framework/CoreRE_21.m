void **re::BlendShapeModelBuilder::addBlendShapeGroup(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6, char a7, char a8)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void **result;
  uint64_t v24;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD **)v9;
  if (*(_QWORD *)(*(_QWORD *)v9 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_8;
  }
  v13 = *(_QWORD *)(a5 + 8);
  v14 = v10[3];
  if (*(_DWORD *)(a3 + 12) < 0xCu)
  {
    v21 = 0;
    v20 = 0;
  }
  else
  {
    v17 = a4;
    v18 = (char *)objc_msgSend(*(id *)a3, sel_contents);
    a4 = v17;
    v19 = &v18[*(unsigned int *)(a3 + 8)];
    v20 = *(_QWORD *)v19;
    v21 = *((_DWORD *)v19 + 2);
  }
  if (v10[8] <= a2)
  {
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v22 = v14 + 168 * a2;
  v24 = v20;
  re::StringID::operator=((unint64_t *)(v10[9] + 16 * a2), a4);
  *(_QWORD *)v22 = v13;
  *(_QWORD *)(v22 + 8) = v24;
  *(_DWORD *)(v22 + 16) = v21;
  re::FixedArray<re::StringID>::operator=((unint64_t *)(v22 + 24), a5);
  *(_BYTE *)(v22 + 48) = a6;
  *(_BYTE *)(v22 + 49) = a7;
  *(_BYTE *)(v22 + 50) = a8;
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v22 + 72), (void **)(a3 + 16));
  *(_QWORD *)(v22 + 80) = *(_QWORD *)(a3 + 24);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v22 + 88), (void **)a3);
  *(_QWORD *)(v22 + 96) = *(_QWORD *)(a3 + 8);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v22 + 104), (void **)(a3 + 32));
  *(_QWORD *)(v22 + 112) = *(_QWORD *)(a3 + 40);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v22 + 120), (void **)(a3 + 48));
  *(_QWORD *)(v22 + 128) = *(_QWORD *)(a3 + 56);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v22 + 136), (void **)(a3 + 64));
  *(_QWORD *)(v22 + 144) = *(_QWORD *)(a3 + 72);
  result = NS::SharedPtr<MTL::Texture>::operator=((void **)(v22 + 152), (void **)(a3 + 80));
  *(_QWORD *)(v22 + 160) = *(_QWORD *)(a3 + 88);
  return result;
}

void **re::BlendShapeDeformer::init(void **this, id *a2)
{
  void **v3;
  int v4;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  void **ComputePipelineState;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  char v17[8];
  uint64_t v18;
  char v19;
  _QWORD v20[4];
  _QWORD v21[3];
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28[8];
  uint64_t v29;
  char v30;
  _QWORD v31[4];
  _QWORD v32[3];
  int v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  char v38;
  char v39[8];
  uint64_t v40;
  char v41;
  _QWORD v42[4];
  _QWORD v43[3];
  int v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  char v49;
  char v50[8];
  uint64_t v51;
  char v52;
  _QWORD v53[4];
  _QWORD v54[3];
  int v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  char v60;
  char v61[8];
  uint64_t v62;
  char v63;
  _QWORD v64[4];
  _QWORD v65[3];
  int v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  char v71;
  char v72[8];
  void **v73;
  char v74;
  _QWORD v75[4];
  _QWORD v76[3];
  int v77;
  uint64_t v78;
  char v79;
  char v80;
  uint64_t v81;
  char v82;

  if (!*((_BYTE *)this + 56))
  {
    v3 = this;
    *((_BYTE *)this + 56) = 1;
    v4 = *((unsigned __int8 *)a2 + 257);
    this = (void **)objc_msgSend(a2[23], "supportsFamily:", 1004);
    if (v4 && (_DWORD)this != 0)
    {
      v72[0] = 0;
      v78 = 0;
      memset(v76, 0, sizeof(v76));
      v77 = 0;
      v79 = 0;
      v80 = 0;
      v81 = 0;
      v82 = 0;
      v61[0] = 0;
      v67 = 0;
      memset(v65, 0, sizeof(v65));
      v66 = 0;
      v68 = 0;
      v69 = 0;
      v70 = 0;
      v71 = 0;
      v50[0] = 0;
      v56 = 0;
      memset(v54, 0, sizeof(v54));
      v55 = 0;
      v57 = 0;
      v58 = 0;
      v59 = 0;
      v60 = 0;
      v39[0] = 0;
      v45 = 0;
      memset(v43, 0, sizeof(v43));
      v44 = 0;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      v49 = 0;
      v28[0] = 0;
      v34 = 0;
      memset(v32, 0, sizeof(v32));
      v33 = 0;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v38 = 0;
      v17[0] = 0;
      v23 = 0;
      memset(v21, 0, sizeof(v21));
      v22 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      ComputePipelineState = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v72);
      NS::SharedPtr<MTL::Texture>::operator=(v3 + 1, ComputePipelineState);
      v12 = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v61);
      NS::SharedPtr<MTL::Texture>::operator=(v3 + 2, v12);
      v13 = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v50);
      NS::SharedPtr<MTL::Texture>::operator=(v3 + 3, v13);
      v14 = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v39);
      NS::SharedPtr<MTL::Texture>::operator=(v3 + 4, v14);
      v15 = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v28);
      NS::SharedPtr<MTL::Texture>::operator=(v3 + 5, v15);
      v16 = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v17);
      NS::SharedPtr<MTL::Texture>::operator=(v3 + 6, v16);
      *((_BYTE *)v3 + 57) = 1;
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v21);
      if (v20[0])
      {
        if ((v20[1] & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v20[0] + 40))();
        memset(v20, 0, sizeof(v20));
      }
      if (v17[0] && v18 && (v19 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v18 + 40))();
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v32);
      if (v31[0])
      {
        if ((v31[1] & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v31[0] + 40))();
        memset(v31, 0, sizeof(v31));
      }
      if (v28[0] && v29 && (v30 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v29 + 40))();
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v43);
      if (v42[0])
      {
        if ((v42[1] & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v42[0] + 40))();
        memset(v42, 0, sizeof(v42));
      }
      if (v39[0] && v40 && (v41 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v40 + 40))();
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v54);
      if (v53[0])
      {
        if ((v53[1] & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v53[0] + 40))();
        memset(v53, 0, sizeof(v53));
      }
      if (v50[0] && v51 && (v52 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v51 + 40))();
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v65);
      if (v64[0])
      {
        if ((v64[1] & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v64[0] + 40))();
        memset(v64, 0, sizeof(v64));
      }
      if (v61[0] && v62 && (v63 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v62 + 40))();
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v76);
      this = (void **)v75[0];
      if (v75[0])
      {
        if ((v75[1] & 1) != 0)
          this = (void **)(*(uint64_t (**)(void))(*(_QWORD *)v75[0] + 40))();
        memset(v75, 0, sizeof(v75));
      }
      if (v72[0])
      {
        this = v73;
        if (v73)
        {
          if ((v74 & 1) != 0)
            return (void **)(*((uint64_t (**)(void))*v73 + 5))();
        }
      }
    }
  }
  return this;
}

uint64_t re::BlendShapeDeformer::addDeformationInstance@<X0>(uint64_t this@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = 6;
  if (!a2[1])
    v3 = 2;
  v4 = *a2;
  v5 = v3 | (8 * a2[2]) | (16 * a2[3]);
  v6 = *(_BYTE *)(this + 57) ^ 1;
  *(_QWORD *)a3 = 0xFFFFFFFFLL;
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)(a3 + 16) = v5;
  *(_BYTE *)(a3 + 24) = (v6 | v4) ^ 1;
  *(_QWORD *)(a3 + 32) = -1;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  return this;
}

uint64_t *re::BlendShapeDeformer::allocateBuffers(re *a1, uint64_t *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t *v48;
  int32x2_t v49;
  double v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  __int32 *v55;
  unint64_t v56;
  __int32 v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  re::FrameContext *v72;
  unsigned int v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  const char *v83;
  __int16 v84;
  int v85;
  __int16 v86;
  unint64_t v87;
  __int16 v88;
  unint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;

  v5 = a4;
  v95 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)a4;
  v71 = *(_QWORD *)(*(_QWORD *)a4 + 48);
  re::globalAllocators(a1);
  v9 = a2[3];
  v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, 48, 8);
  *(_OWORD *)v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  v11 = re::globalAllocators(v10)[2];
  *(_QWORD *)&v90 = &off_24ED76950;
  *((_QWORD *)&v91 + 1) = v11;
  *(_QWORD *)&v92 = &v90;
  v74 = (uint64_t *)(*(uint64_t (**)(uint64_t, re *, __int128 *))(*(_QWORD *)v9 + 16))(v9, v10, &v90);
  if ((_QWORD)v92)
  {
    (**(void (***)(_QWORD))v92)(v92);
    if ((__int128 *)v92 != &v90)
      (*(void (**)(_QWORD))(**((_QWORD **)&v91 + 1) + 40))(*((_QWORD *)&v91 + 1));
  }
  v72 = (re::FrameContext *)a2;
  v12 = a2[3];
  v13 = v74;
  v14 = v71;
  re::FixedArray<re::Slice<unsigned int>>::init<>(v74, v12, v71);
  re::FixedArray<re::FrameContextBuffer>::init<>(v74 + 3, v12, v71);
  if (v71)
  {
    v15 = 0;
    v69 = v5;
    v70 = v8 + 8;
    v73 = a3;
    do
    {
      v16 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v70, v15);
      v18 = *(_QWORD *)(v16 + 8);
      v19 = *(_QWORD *)(v5 + 48);
      if (v19 <= v18)
        goto LABEL_54;
      v14 = v16;
      v20 = *(_QWORD *)(v5 + 40);
      v21 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](*(_QWORD *)(v5 + 8), v18);
      a3 = *(unsigned __int8 *)(v14 + 16);
      v23 = *(_QWORD *)(v21 + 336);
      if (v23 <= a3)
        goto LABEL_55;
      v24 = **(_QWORD ***)(v21 + 344);
      v8 = *(unsigned __int16 *)(v21 + 392);
      v14 = v24[5];
      if (v14 <= v8)
        goto LABEL_56;
      v8 = *(unsigned int *)(v24[6] + 4 * v8);
      v14 = v24[2];
      if (v14 <= v8)
        goto LABEL_57;
      v25 = v20 + 312 * v18;
      v26 = *(_QWORD *)(v21 + 328);
      v5 = *(_QWORD *)(*(_QWORD *)(v21 + 352) + 24);
      v77 = v24[3];
      LOBYTE(v90) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized(v25, 1u);
      v76 = v20;
      v27 = (_QWORD *)(v25 + 56);
      v28 = (_QWORD *)(v25 + 64);
      v79 = *(unsigned int *)(*(_QWORD *)(v25 + 64)
                            + 32
                            * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(v25 + 56), (unsigned __int8 *)&v90)+ 20);
      v30 = v26 + (a3 << 6);
      v33 = *(_QWORD *)(v30 + 16);
      v32 = (uint64_t *)(v30 + 16);
      LOBYTE(v31) = v33;
      if ((v33 & 4) != 0)
      {
        LOBYTE(v90) = 2;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v25, 2u);
        v34 = *(unsigned int *)(*v28
                              + 32
                              * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v27, (unsigned __int8 *)&v90)+ 20);
        v31 = *v32;
      }
      else
      {
        v34 = 0;
      }
      v80 = v34;
      if ((v31 & 8) != 0)
      {
        LOBYTE(v90) = 3;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v25, 3u);
        v35 = *(unsigned int *)(*v28
                              + 32
                              * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v27, (unsigned __int8 *)&v90)+ 20);
        v31 = *v32;
      }
      else
      {
        v35 = 0;
      }
      a3 = v73;
      v81 = v35;
      if ((v31 & 0x10) != 0)
      {
        LOBYTE(v90) = 4;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v25, 4u);
        v37 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v27, (unsigned __int8 *)&v90);
        v35 = v81;
        v36 = *(unsigned int *)(*v28 + 32 * v37 + 20);
      }
      else
      {
        v36 = 0;
      }
      v14 = 20;
      if (v5)
      {
        v14 = v13[1];
        if (v14 <= v15)
          goto LABEL_59;
        *(_OWORD *)(v13[2] + 16 * v15) = *(_OWORD *)v5;
        v14 = 20;
      }
      v5 = v13[1];
      if (v5 <= v15)
        goto LABEL_58;
      v38 = (*(_QWORD *)(v77 + 168 * v8) + 3) & 0xFFFFFFFFFFFFFFFCLL;
      if (*(_QWORD *)(v13[2] + 16 * v15 + 8) != v38)
      {
        v14 = 4 * v38;
        if (v38)
        {
          if (v38 >> 62 || v14 >= 0xFFFFFFFFFFFFFFF0)
            goto LABEL_64;
          v39 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**((_QWORD **)v72 + 3) + 32))(*((_QWORD *)v72 + 3), (v14 + 16) | 3, 0);
          v40 = (_QWORD *)((v39 + 19) & 0xFFFFFFFFFFFFFFFCLL);
          *(v40 - 2) = v38;
          *(v40 - 1) = v39;
          bzero(v40, 4 * v38);
          v5 = v13[1];
        }
        else
        {
          v40 = 0;
        }
        if (v5 <= v15)
          goto LABEL_60;
        v41 = v13[2] + 16 * v15;
        v42 = *(_QWORD *)(v41 + 8);
        if (4 * v42 >= 4 * v38)
          v43 = 4 * v38;
        else
          v43 = 4 * v42;
        memcpy(v40, *(const void **)v41, v43);
        bzero((char *)v40 + v43, v14 - v43);
        v14 = v13[1];
        if (v14 <= v15)
          goto LABEL_62;
        v44 = (_QWORD *)(v13[2] + 16 * v15);
        *v44 = v40;
        v44[1] = v38;
        v14 = 20;
        v35 = v81;
      }
      v5 = (v79 + 15) & 0x1FFFFFFF0;
      v45 = ((v35 + 15) & 0x1FFFFFFF0) + ((v36 + 15) & 0x1FFFFFFF0) + ((v80 + 15) & 0x1FFFFFFF0) + v5;
      v75 = v36;
      v78 = (v35 + 15) & 0xFFFFFFF0;
      if (v73 == 1)
      {
        LODWORD(a3) = (_DWORD)v13;
        re::FrameContext::perFrameAllocTail(v72, v45, 0x10uLL, (uint64_t)&v90);
        v14 = v13[1];
        if (v14 <= v15)
          goto LABEL_61;
        v46 = v90;
        v47 = DWORD2(v90);
        v8 = v91;
        v48 = (unint64_t *)(v13[2] + 16 * v15);
        a3 = *v48;
        v14 = v48[1];
        *(int32x2_t *)&v50 = re::FrameContext::perFrameAlloc(v72, 4 * v14, 4uLL, (uint64_t)&v90);
        v51 = v90;
        v52 = DWORD2(v90);
        v53 = HIDWORD(v90);
        v54 = v91;
        if (v14)
        {
          v55 = (__int32 *)(v90 + DWORD2(v90));
          v56 = (unint64_t)HIDWORD(v90) >> 2;
          while (v56)
          {
            v57 = *(_DWORD *)a3;
            a3 += 4;
            LODWORD(v50) = v57;
            *v55++ = v57;
            --v56;
            if (!--v14)
              goto LABEL_43;
          }
          re::internal::assertLog((re::internal *)6, *(_QWORD *)&v49, v50, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v53 >> 2, v53 >> 2);
          _os_crash();
          __break(1u);
LABEL_54:
          re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v18, v19);
          _os_crash();
          __break(1u);
LABEL_55:
          re::internal::assertLog((re::internal *)6, v22, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a3, v23);
          _os_crash();
          __break(1u);
LABEL_56:
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v90 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v82 = 136315906;
          v83 = "operator[]";
          v84 = 1024;
          v85 = 476;
          v86 = 2048;
          v87 = v8;
          v88 = 2048;
          v89 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_57:
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v90 = 0u;
          v15 = MEMORY[0x24BDACB70];
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v82 = 136315906;
          v83 = "operator[]";
          v84 = 1024;
          v85 = 476;
          v86 = 2048;
          v87 = v8;
          v88 = 2048;
          v89 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_58:
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v90 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v82 = 136315906;
          v83 = "operator[]";
          v84 = 1024;
          v85 = 468;
          v86 = 2048;
          v87 = v15;
          v88 = 2048;
          v89 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_59:
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v90 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v82 = 136315906;
          v83 = "operator[]";
          v84 = 1024;
          v85 = 468;
          v86 = 2048;
          v87 = v15;
          v88 = 2048;
          v89 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_60:
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v90 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v82 = 136315906;
          v83 = "operator[]";
          v84 = 1024;
          v85 = 468;
          v86 = 2048;
          v87 = v15;
          v88 = 2048;
          v89 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_61:
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v90 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v82 = 136315906;
          v83 = "operator[]";
          v84 = 1024;
          v85 = 468;
          v86 = 2048;
          v87 = v15;
          v88 = 2048;
          v89 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_62:
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v90 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v82 = 136315906;
          v83 = "operator[]";
          v84 = 1024;
          v85 = 468;
          v86 = 2048;
          v87 = v15;
          v88 = 2048;
          v89 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_63:
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v90 = 0u;
          v38 = MEMORY[0x24BDACB70];
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v82 = 136315906;
          v83 = "operator[]";
          v84 = 1024;
          v85 = 468;
          v86 = 2048;
          v87 = v15;
          v88 = 2048;
          v89 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_64:
          re::internal::assertLog((re::internal *)6, v29, "assertion failure: '%s' (%s:line %i) Size overflow in allocateArray. Element size = %zu, count = %zu", "!overflow", "allocateArray", 61, 4, v38);
          _os_crash();
          __break(1u);
LABEL_65:
          re::internal::assertLog((re::internal *)5, v45, "assertion failure: '%s' (%s:line %i) Unknown execution mode: %u.", "!\"Unreachable code\"", "allocateBuffers", 1140, a3);
          _os_crash();
          __break(1u);
        }
LABEL_43:
        v14 = v74[4];
        a3 = v73;
        if (v14 <= v15)
          goto LABEL_63;
        v58 = v74[5] + 24 * v15;
        *(_QWORD *)v58 = v51;
        *(_DWORD *)(v58 + 8) = v52;
        *(_DWORD *)(v58 + 12) = v53;
        *(_QWORD *)(v58 + 16) = v54;
        v14 = 20;
      }
      else
      {
        if (v73)
          goto LABEL_65;
        re::FrameContext::perFrameAlloc(v72, v45, 0x10uLL, (uint64_t)&v90);
        v46 = v90;
        v47 = DWORD2(v90);
        v8 = v91;
      }
      *(_QWORD *)&v90 = v46;
      *((_QWORD *)&v90 + 1) = __PAIR64__(v79, v47);
      *(_QWORD *)&v91 = v8;
      LOBYTE(v82) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized(v25, 1u);
      v59 = v76 + 312 * v18;
      v60 = (_QWORD *)(v59 + 120);
      v61 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(v59 + 120), (unsigned __int8 *)&v82);
      v63 = *(_QWORD *)(v59 + 128);
      v62 = (_QWORD *)(v59 + 128);
      re::DeformationVertexBufferState::setOutputBuffer(v25, 1u, a3, (uint64_t)&v90, v63 + 20 * v61 + 4);
      if (v80)
      {
        *(_QWORD *)&v90 = v46;
        DWORD2(v90) = v47 + v5;
        HIDWORD(v90) = v80;
        *(_QWORD *)&v91 = v8;
        LOBYTE(v82) = 2;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v25, 2u);
        v64 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v60, (unsigned __int8 *)&v82);
        re::DeformationVertexBufferState::setOutputBuffer(v25, 2u, a3, (uint64_t)&v90, *v62 + 20 * v64 + 4);
        LODWORD(v5) = ((v80 + 15) & 0xFFFFFFF0) + v5;
      }
      if (v81)
      {
        *(_QWORD *)&v90 = v46;
        DWORD2(v90) = v47 + v5;
        HIDWORD(v90) = v81;
        *(_QWORD *)&v91 = v8;
        LOBYTE(v82) = 3;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v25, 3u);
        v65 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v60, (unsigned __int8 *)&v82);
        re::DeformationVertexBufferState::setOutputBuffer(v25, 3u, a3, (uint64_t)&v90, *v62 + 20 * v65 + 4);
        LODWORD(v5) = v5 + v78;
      }
      if (v75)
      {
        *(_QWORD *)&v90 = v46;
        DWORD2(v90) = v47 + v5;
        HIDWORD(v90) = v75;
        *(_QWORD *)&v91 = v8;
        LOBYTE(v82) = 4;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v25, 4u);
        v66 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v60, (unsigned __int8 *)&v82);
        re::DeformationVertexBufferState::setOutputBuffer(v25, 4u, a3, (uint64_t)&v90, *v62 + 20 * v66 + 4);
      }
      ++v15;
      v5 = v69;
      v13 = v74;
    }
    while (v15 != v71);
  }
  *(_QWORD *)a5 |= 0x1EuLL;
  *(_DWORD *)(a5 + 9) = 16843009;
  return v13;
}

uint64_t re::BlendShapeDeformer::deformGPU(uint64_t a1, uint64_t a2, void **this, uint64_t *a4)
{
  _DWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  unsigned int *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  void *v47;
  unsigned int v48;
  uint64_t v49;
  void *v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[28];
  __int16 v63;
  _DWORD *v64;
  _OWORD v65[2];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v6 = a4;
  v69 = *MEMORY[0x24BDAC8D0];
  v10 = *a4;
  re::mtl::ComputeCommandEncoder::pushDebugGroup(this, (re::ns *)"Perform Blend Shapes");
  v58 = a1;
  v11 = objc_msgSend(*(id *)(a1 + 8), sel_threadExecutionWidth);
  v57 = *(_QWORD *)(v10 + 48);
  if (v57)
  {
    v12 = 0;
    v13 = 0;
    v55 = v6;
    v56 = v10 + 8;
    v60 = v11;
    v54 = a2;
    do
    {
      v14 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v56, v13);
      v16 = *(_QWORD *)(v14 + 8);
      v17 = v6[6];
      if (v17 <= v16)
      {
        re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, *(_QWORD *)(v14 + 8), v17);
        _os_crash();
        __break(1u);
LABEL_16:
        v67 = 0u;
        v68 = 0u;
        v66 = 0u;
        memset(v65, 0, sizeof(v65));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v62 = 136315906;
        *(_QWORD *)&v62[4] = "operator[]";
        *(_WORD *)&v62[12] = 1024;
        *(_DWORD *)&v62[14] = 476;
        *(_WORD *)&v62[18] = 2048;
        *(_QWORD *)&v62[20] = v10;
        v63 = 2048;
        v64 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_17:
        v67 = 0u;
        v68 = 0u;
        v66 = 0u;
        memset(v65, 0, sizeof(v65));
        v13 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v62 = 136315906;
        *(_QWORD *)&v62[4] = "operator[]";
        *(_WORD *)&v62[12] = 1024;
        *(_DWORD *)&v62[14] = 476;
        *(_WORD *)&v62[18] = 2048;
        *(_QWORD *)&v62[20] = v5;
        v63 = 2048;
        v64 = (_DWORD *)v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_18:
        v67 = 0u;
        v68 = 0u;
        v66 = 0u;
        memset(v65, 0, sizeof(v65));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v62 = 136315906;
        *(_QWORD *)&v62[4] = "operator[]";
        *(_WORD *)&v62[12] = 1024;
        *(_DWORD *)&v62[14] = 468;
        *(_WORD *)&v62[18] = 2048;
        *(_QWORD *)&v62[20] = v13;
        v63 = 2048;
        v64 = (_DWORD *)v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v18 = v6[5];
      v19 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](v6[1], v16);
      v20 = **(_QWORD ***)(v19 + 344);
      v10 = *(unsigned __int16 *)(v19 + 392);
      v4 = (_DWORD *)v20[5];
      if ((unint64_t)v4 <= v10)
        goto LABEL_16;
      v5 = (_QWORD *)*(unsigned int *)(v20[6] + 4 * v10);
      v10 = v20[2];
      if (v10 <= (unint64_t)v5)
        goto LABEL_17;
      v10 = *(_QWORD *)(a2 + 32);
      if (v10 <= v13)
        goto LABEL_18;
      v61 = v18 + 312 * v16;
      v21 = v20[3];
      v22 = *(_QWORD *)(a2 + 40);
      v23 = v21 + 168 * v5;
      v25 = *(_DWORD *)(v23 + 116);
      v24 = (unsigned int *)(v23 + 116);
      if (v25)
      {
        v26 = *(unsigned int *)v20;
        v27 = v21 + 168 * v5;
        v59 = re::BlendShapeDeformer::deformGPU(void *,re::mtl::ComputeCommandEncoder const&,re::DeformationParameters const&)::kIndexTypeSizes[v26];
        v52 = v21;
        v53 = v58 + 8 * v26;
        objc_msgSend(*this, "setComputePipelineState:", *(_QWORD *)(v53 + 8));
        objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v27 + 136), *(unsigned int *)(v27 + 144), 0);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v22 + v12 + 16), *(unsigned int *)(v22 + v12 + 8), 1);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v27 + 104), *(unsigned int *)(v27 + 112), 2);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v27 + 120), *(unsigned int *)(v27 + 128), 3);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v27 + 72), *(unsigned int *)(v27 + 80), 4);
        v10 = 1;
        LOBYTE(v65[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v61, 1u);
        v28 = v18 + 312 * v16;
        v29 = (_QWORD *)(v28 + 184);
        v30 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(v28 + 184), (unsigned __int8 *)v65);
        v32 = *(_QWORD *)(v28 + 192);
        v31 = (_QWORD *)(v28 + 192);
        v33 = *(_QWORD *)(v32 + 32 * v30 + 24);
        LOBYTE(v65[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v61, 1u);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", v33, *(unsigned int *)(*v31+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v29, (unsigned __int8 *)v65)+ 16), 5);
        v34 = *v24;
        v4 = (_DWORD *)v59;
        v35 = *this;
        *(_QWORD *)&v65[0] = v34 / v59;
        *(int64x2_t *)((char *)v65 + 8) = vdupq_n_s64(1uLL);
        *(_QWORD *)v62 = v60;
        *(_OWORD *)&v62[8] = *(_OWORD *)((char *)v65 + 8);
        objc_msgSend(v35, "dispatchThreads:threadsPerThreadgroup:", v65, v62);
        LODWORD(v32) = *(_DWORD *)(v27 + 164);
        v36 = (unsigned int *)(v27 + 164);
        if ((_DWORD)v32)
        {
          objc_msgSend(*this, "setComputePipelineState:", *(_QWORD *)(v53 + 24));
          objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v52 + 168 * v5 + 152), *(unsigned int *)(v52 + 168 * v5 + 160), 0);
          LOBYTE(v65[0]) = 1;
          v10 = v61;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized(v61, 1u);
          v37 = *(_QWORD *)(*v31
                          + 32
                          * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v29, (unsigned __int8 *)v65)+ 24);
          LOBYTE(v65[0]) = 1;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized(v61, 1u);
          objc_msgSend(*this, "setBuffer:offset:atIndex:", v37, *(unsigned int *)(*v31+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v29, (unsigned __int8 *)v65)+ 16), 1);
          v38 = *v36 / v59;
LABEL_12:
          v50 = *this;
          *(_QWORD *)&v65[0] = v38;
          *(int64x2_t *)((char *)v65 + 8) = vdupq_n_s64(1uLL);
          *(_QWORD *)v62 = v60;
          *(_OWORD *)&v62[8] = *(_OWORD *)((char *)v65 + 8);
          objc_msgSend(v50, "dispatchThreads:threadsPerThreadgroup:", v65, v62);
        }
      }
      else
      {
        objc_msgSend(*this, "setComputePipelineState:", *(_QWORD *)(v58 + 40));
        v39 = v21 + 168 * v5;
        v10 = v39 + 88;
        v40 = (unsigned int *)(v39 + 96);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v39 + 88), *(unsigned int *)(v39 + 96), 0);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v22 + v12 + 16), *(unsigned int *)(v22 + v12 + 8), 1);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v39 + 72), *(unsigned int *)(v39 + 80), 2);
        LOBYTE(v65[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v61, 1u);
        v41 = v18 + 312 * v16;
        v42 = (_QWORD *)(v41 + 184);
        v43 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(v41 + 184), (unsigned __int8 *)v65);
        v44 = *(_QWORD *)(v41 + 192);
        v5 = (_QWORD *)(v41 + 192);
        v45 = *(_QWORD *)(v44 + 32 * v43 + 24);
        LOBYTE(v65[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v61, 1u);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", v45, *(unsigned int *)(*v5+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v42, (unsigned __int8 *)v65)+ 16), 3);
        v47 = *this;
        *(_QWORD *)&v65[0] = *(unsigned int *)(v39 + 84) / (16 * (unint64_t)*(unsigned int *)(v39 + 8));
        v46 = v65[0];
        *(int64x2_t *)((char *)v65 + 8) = vdupq_n_s64(1uLL);
        *(_QWORD *)v62 = v60;
        *(_OWORD *)&v62[8] = *(_OWORD *)((char *)v65 + 8);
        objc_msgSend(v47, "dispatchThreads:threadsPerThreadgroup:", v65, v62);
        LODWORD(v44) = *(_DWORD *)(v39 + 12);
        v4 = (_DWORD *)(v39 + 12);
        v48 = v46 / v44;
        if (v48 >= 2)
        {
          objc_msgSend(*this, "setComputePipelineState:", *(_QWORD *)(v58 + 48));
          objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)v10, *v40, 0);
          LOBYTE(v65[0]) = 1;
          v10 = v61;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized(v61, 1u);
          v49 = *(_QWORD *)(*v5
                          + 32
                          * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v42, (unsigned __int8 *)v65)+ 24);
          LOBYTE(v65[0]) = 1;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized(v61, 1u);
          objc_msgSend(*this, "setBuffer:offset:atIndex:", v49, *(unsigned int *)(*v5+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v42, (unsigned __int8 *)v65)+ 16), 1);
          LODWORD(v38) = *v4 / 3u * (v48 - 1);
          goto LABEL_12;
        }
      }
      ++v13;
      v12 += 24;
      a2 = v54;
      v6 = v55;
    }
    while (v57 != v13);
  }
  return objc_msgSend(*this, "popDebugGroup");
}

void re::BlendShapeDeformer::deformCPU(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  char *v28;
  unint64_t v29;
  unsigned __int16 v30;
  uint64_t v31;
  int v32;
  float32x4_t v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int16 v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  float32x4_t v43;
  char *v44;
  float32x4_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  int32x4_t v51;
  float32x2_t v52;
  float32x2_t v53;
  uint64_t v54;
  unint64_t v55;
  re *v56;
  uint64_t v57;
  float32x4_t v58;
  unsigned int *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  float32x4_t **v67;
  float32x4_t *v68;
  float32x4_t *v69;
  unint64_t v70;
  uint64_t v71;
  float32x4_t *v72;
  float32x4_t *v73;
  uint64_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int32x4_t v82;
  float32x2_t v83;
  float32x2_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t *v91;
  char *v92;
  unint64_t v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  float32x4_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  float32x4_t v104;
  char *v105;
  float32x4_t v106;
  unint64_t v107;
  char *v108;
  unint64_t v109;
  unsigned int v110;
  uint64_t v111;
  __int32 *v112;
  int32x4_t v113;
  float32x2_t v114;
  float32x2_t v115;
  NSObject *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v124;
  uint64_t v125;
  uint8_t buf[4];
  const char *v128;
  __int16 v129;
  int v130;
  __int16 v131;
  unint64_t v132;
  __int16 v133;
  unint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;

  v140 = *MEMORY[0x24BDAC8D0];
  v124 = *(_QWORD *)(*a3 + 48);
  if (v124)
  {
    v6 = a3;
    v7 = 0;
    v125 = *a3 + 8;
    do
    {
      v8 = *(_QWORD *)(re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v125, v7) + 8);
      v9 = v6[6];
      if (v9 <= v8)
        goto LABEL_70;
      v10 = v6[5] + 312 * v8;
      v11 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](v6[1], v8);
      LOBYTE(v135) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized(v10, 1u);
      v12 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(v10 + 184), (unsigned __int8 *)&v135);
      v14 = **(_QWORD ***)(v11 + 344);
      v4 = *(unsigned __int16 *)(v11 + 392);
      v3 = v14[5];
      if (v3 <= v4)
        goto LABEL_71;
      v5 = *(unsigned int *)(v14[6] + 4 * v4);
      v3 = v14[2];
      if (v3 <= v5)
        goto LABEL_72;
      v15 = *(_QWORD *)(*(_QWORD *)(v10 + 192) + 32 * v12 + 8)
          + *(unsigned int *)(*(_QWORD *)(v10 + 192) + 32 * v12 + 16);
      v16 = v14[3];
      v17 = v16 + 168 * v5;
      v18 = *(unsigned int *)(v17 + 116);
      if ((_DWORD)v18)
      {
        v19 = (id *)(v17 + 104);
        v20 = *(unsigned int *)v14;
        if ((_DWORD)v20 == 1)
        {
          v4 = *(_QWORD *)(a2 + 8);
          if (v4 <= v7)
            goto LABEL_75;
          v122 = *(_QWORD *)(a2 + 16);
          v85 = (char *)objc_msgSend(*v19, sel_contents);
          v3 = v16 + 168 * v5;
          v118 = *(unsigned int *)(v3 + 112);
          v120 = v85;
          v86 = (char *)objc_msgSend(*(id *)(v3 + 120), (SEL)&selRef_stringFromDate_);
          v87 = *(unsigned int *)(v3 + 128);
          v88 = (char *)objc_msgSend(*(id *)(v3 + 72), (SEL)&selRef_stringFromDate_);
          v4 = *(unsigned int *)(v3 + 80);
          v89 = (char *)objc_msgSend(*(id *)(v3 + 136), (SEL)&selRef_stringFromDate_);
          if (v18 >= 4)
          {
            v90 = 0;
            v91 = (uint64_t *)(v122 + 16 * v7);
            v92 = &v89[*(unsigned int *)(v3 + 144)];
            v93 = v91[1];
            v94 = *(_DWORD *)&v86[v87];
            while (1)
            {
              v95 = *(unsigned int *)&v120[4 * v90++ + v118];
              v96 = *(_DWORD *)&v86[4 * v90 + v87];
              v97 = 0uLL;
              v98 = v96 - v94;
              if (v96 != v94)
                break;
LABEL_51:
              *(float *)(v15 + 4 * v95) = *(float *)(v15 + 4 * v95)
                                        + vaddv_f32(vadd_f32(*(float32x2_t *)v97.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL)));
              v94 = v96;
              if (v90 == v18 >> 2)
                goto LABEL_52;
            }
            v99 = 0;
            v100 = *v91;
            while (1)
            {
              v101 = *(unsigned int *)&v92[4 * v94 + 4 * v99];
              if (v93 <= v101)
                break;
              v102 = *(unsigned int *)&v92[4 * v94 + 4 + 4 * v99];
              if (v93 <= v102)
                goto LABEL_64;
              v3 = v94 + v99;
              v103 = *(unsigned int *)&v92[4 * (v3 + 2)];
              if (v93 <= v103)
                goto LABEL_66;
              v3 = *(unsigned int *)&v92[4 * (v3 + 3)];
              if (v93 <= v3)
                goto LABEL_68;
              v104.i32[0] = *(_DWORD *)(v100 + 4 * v101);
              v104.i32[1] = *(_DWORD *)(v100 + 4 * v102);
              v104.i32[2] = *(_DWORD *)(v100 + 4 * v103);
              v104.i32[3] = *(_DWORD *)(v100 + 4 * v3);
              v97 = vmlaq_f32(v97, v104, *(float32x4_t *)&v88[16 * (v94 >> 2) + 16 * (v99 >> 2) + v4]);
              v99 += 4;
              if (v99 >= v98)
                goto LABEL_51;
            }
LABEL_62:
            re::internal::assertLog((re::internal *)6, v98, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v101, v93);
            _os_crash();
            __break(1u);
LABEL_63:
            re::internal::assertLog((re::internal *)6, v36, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v41, v29);
            _os_crash();
            __break(1u);
LABEL_64:
            re::internal::assertLog((re::internal *)6, v98, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v102, v93);
            _os_crash();
            __break(1u);
LABEL_65:
            re::internal::assertLog((re::internal *)6, v36, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v42, v29);
            _os_crash();
            __break(1u);
LABEL_66:
            re::internal::assertLog((re::internal *)6, v98, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v103, v93);
            _os_crash();
            __break(1u);
LABEL_67:
            re::internal::assertLog((re::internal *)6, v36, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v3, v29);
            _os_crash();
            __break(1u);
LABEL_68:
            re::internal::assertLog((re::internal *)6, v98, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v3, v93);
            _os_crash();
            __break(1u);
LABEL_69:
            re::internal::assertLog((re::internal *)6, v57, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v70, v70);
            _os_crash();
            __break(1u);
LABEL_70:
            re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v8, v9);
            _os_crash();
            __break(1u);
LABEL_71:
            v138 = 0u;
            v139 = 0u;
            v136 = 0u;
            v137 = 0u;
            v135 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136315906;
            v128 = "operator[]";
            v129 = 1024;
            v130 = 476;
            v131 = 2048;
            v132 = v4;
            v133 = 2048;
            v134 = v3;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_72:
            v138 = 0u;
            v139 = 0u;
            v136 = 0u;
            v137 = 0u;
            v135 = 0u;
            v7 = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136315906;
            v128 = "operator[]";
            v129 = 1024;
            v130 = 476;
            v131 = 2048;
            v132 = v5;
            v133 = 2048;
            v134 = v3;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_73:
            v138 = 0u;
            v139 = 0u;
            v136 = 0u;
            v137 = 0u;
            v135 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136315906;
            v128 = "operator[]";
            v129 = 1024;
            v130 = 468;
            v131 = 2048;
            v132 = v7;
            v133 = 2048;
            v134 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_74:
            v138 = 0u;
            v139 = 0u;
            v136 = 0u;
            v137 = 0u;
            v135 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136315906;
            v128 = "operator[]";
            v129 = 1024;
            v130 = 468;
            v131 = 2048;
            v132 = v7;
            v133 = 2048;
            v134 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_75:
            v138 = 0u;
            v139 = 0u;
            v136 = 0u;
            v137 = 0u;
            v135 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136315906;
            v128 = "operator[]";
            v129 = 1024;
            v130 = 468;
            v131 = 2048;
            v132 = v7;
            v133 = 2048;
            v134 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_76:
            re::internal::assertLog((re::internal *)5, v13, "assertion failure: '%s' (%s:line %i) Invalid blend shape index type: %u.", "!\"Unreachable code\"", "deformCPU", 1332, v20);
            _os_crash();
            __break(1u);
          }
LABEL_52:
          v3 = v16 + 168 * v5;
          v105 = (char *)objc_msgSend(*(id *)(v3 + 152), sel_contents);
          v107 = *(unsigned int *)(v3 + 164);
          v6 = a3;
          if (v107 >= 4)
          {
            v108 = &v105[*(unsigned int *)(v3 + 160)];
            v109 = v107 >> 2;
            do
            {
              v110 = *(unsigned __int16 *)v108;
              v108 += 4;
              v111 = 4 * v110;
              v106.i64[0] = *(_QWORD *)(v15 + v111);
              v112 = (__int32 *)(v15 + 4 * (v110 + 2));
              v106.i32[2] = *v112;
              v113 = (int32x4_t)vmulq_f32(v106, v106);
              v113.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v113, 2), vadd_f32(*(float32x2_t *)v113.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v113.i8, 1))).u32[0];
              v114 = vrsqrte_f32((float32x2_t)v113.u32[0]);
              v115 = vmul_f32(v114, vrsqrts_f32((float32x2_t)v113.u32[0], vmul_f32(v114, v114)));
              v106 = vmulq_n_f32(v106, vmul_f32(v115, vrsqrts_f32((float32x2_t)v113.u32[0], vmul_f32(v115, v115))).f32[0]);
              *(_QWORD *)(v15 + v111) = v106.i64[0];
              *v112 = v106.i32[2];
              --v109;
            }
            while (v109);
          }
        }
        else
        {
          if ((_DWORD)v20)
            goto LABEL_76;
          v4 = *(_QWORD *)(a2 + 8);
          if (v4 <= v7)
            goto LABEL_74;
          v121 = *(_QWORD *)(a2 + 16);
          v21 = (char *)objc_msgSend(*v19, sel_contents);
          v3 = v16 + 168 * v5;
          v117 = *(unsigned int *)(v3 + 112);
          v119 = v21;
          v22 = (char *)objc_msgSend(*(id *)(v3 + 120), (SEL)&selRef_stringFromDate_);
          v23 = *(unsigned int *)(v3 + 128);
          v24 = (char *)objc_msgSend(*(id *)(v3 + 72), (SEL)&selRef_stringFromDate_);
          v4 = *(unsigned int *)(v3 + 80);
          v25 = (char *)objc_msgSend(*(id *)(v3 + 136), (SEL)&selRef_stringFromDate_);
          if (v18 >= 2)
          {
            v26 = 0;
            v27 = (uint64_t *)(v121 + 16 * v7);
            v28 = &v25[*(unsigned int *)(v3 + 144)];
            v29 = v27[1];
            v30 = *(_WORD *)&v22[v23];
            while (1)
            {
              v31 = *(unsigned __int16 *)&v119[2 * v26++ + v117];
              v32 = *(unsigned __int16 *)&v22[2 * v26 + v23];
              v33 = 0uLL;
              if (v32 != v30)
                break;
LABEL_19:
              *(float *)(v15 + 4 * v31) = *(float *)(v15 + 4 * v31)
                                        + vaddv_f32(vadd_f32(*(float32x2_t *)v33.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL)));
              v30 = v32;
              if (v26 == v18 >> 1)
                goto LABEL_20;
            }
            v34 = 0;
            v35 = 0;
            v36 = v30 >> 2;
            v37 = (unsigned __int16)(v32 - v30);
            v38 = *v27;
            while (1)
            {
              v39 = v30 + v35;
              v40 = *(unsigned __int16 *)&v28[2 * (unsigned __int16)(v30 + v35)];
              if (v29 <= v40)
                break;
              v3 = v39;
              v41 = *(unsigned __int16 *)&v28[2 * v39 + 2];
              if (v29 <= v41)
                goto LABEL_63;
              v42 = *(unsigned __int16 *)&v28[2 * (v3 + 2)];
              if (v29 <= v42)
                goto LABEL_65;
              v3 = *(unsigned __int16 *)&v28[2 * (v3 + 3)];
              if (v29 <= v3)
                goto LABEL_67;
              v43.i32[0] = *(_DWORD *)(v38 + 4 * v40);
              v43.i32[1] = *(_DWORD *)(v38 + 4 * v41);
              v43.i32[2] = *(_DWORD *)(v38 + 4 * v42);
              v43.i32[3] = *(_DWORD *)(v38 + 4 * v3);
              v33 = vmlaq_f32(v33, v43, *(float32x4_t *)&v24[16 * (unsigned __int16)(v36 + (v34 >> 2)) + v4]);
              v35 = v34 + 4;
              v34 = (unsigned __int16)(v34 + 4);
              if (v34 >= v37)
                goto LABEL_19;
            }
            re::internal::assertLog((re::internal *)6, v36, v34, v37, v38, *(double *)v33.i64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v40, v29);
            _os_crash();
            __break(1u);
            goto LABEL_62;
          }
LABEL_20:
          v3 = v16 + 168 * v5;
          v44 = (char *)objc_msgSend(*(id *)(v3 + 152), sel_contents);
          v46 = *(unsigned int *)(v3 + 164);
          v6 = a3;
          if (v46 >= 2)
          {
            v47 = &v44[*(unsigned int *)(v3 + 160)];
            v48 = v46 >> 1;
            do
            {
              v49 = *(unsigned __int16 *)v47;
              v47 += 2;
              v50 = v15 + 4 * v49;
              v45.i64[0] = *(_QWORD *)v50;
              v45.i32[2] = *(_DWORD *)(v50 + 8);
              v51 = (int32x4_t)vmulq_f32(v45, v45);
              v51.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v51, 2), vadd_f32(*(float32x2_t *)v51.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v51.i8, 1))).u32[0];
              v52 = vrsqrte_f32((float32x2_t)v51.u32[0]);
              v53 = vmul_f32(v52, vrsqrts_f32((float32x2_t)v51.u32[0], vmul_f32(v52, v52)));
              v45 = vmulq_n_f32(v45, vmul_f32(v53, vrsqrts_f32((float32x2_t)v51.u32[0], vmul_f32(v53, v53))).f32[0]);
              *(_QWORD *)v50 = v45.i64[0];
              *(_DWORD *)(v50 + 8) = v45.i32[2];
              --v48;
            }
            while (v48);
          }
        }
      }
      else
      {
        LOBYTE(v135) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v10, 1u);
        v54 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(v10 + 184), (unsigned __int8 *)&v135);
        v4 = *(_QWORD *)(a2 + 8);
        if (v4 <= v7)
          goto LABEL_73;
        v55 = *(unsigned int *)(*(_QWORD *)(v10 + 192) + 32 * v54 + 20);
        v3 = *(_QWORD *)(a2 + 16);
        re::ReadOnlyCPUAccessibleBufferSliceContent::make((_QWORD *)(v16 + 168 * v5 + 72), (uint64_t)&v135);
        if ((_BYTE)v135)
        {
          v59 = (unsigned int *)(v16 + 168 * v5);
          v61 = v59[2];
          v60 = v59[3];
          v62 = v59[4];
          v63 = v59[21];
          v64 = 4 * (4 * v61);
          v65 = v63 / v64;
          if (v64 <= v63)
          {
            v66 = 0;
            v67 = (float32x4_t **)(v3 + 16 * v7);
            v68 = (float32x4_t *)*((_QWORD *)&v135 + 1);
            v69 = *v67;
            v70 = (uint64_t)v67[1] >> 2;
            if (v65 <= 1)
              v71 = 1;
            else
              v71 = v65;
            do
            {
              if ((_DWORD)v61)
              {
                if (v70 <= (v61 - 1))
                  goto LABEL_69;
                v58 = 0uLL;
                v72 = v68;
                v73 = v69;
                v74 = v61;
                do
                {
                  v75 = *v72++;
                  v76 = v75;
                  v77 = *v73++;
                  v58 = vmlaq_f32(v58, v77, v76);
                  --v74;
                }
                while (v74);
              }
              else
              {
                v58 = 0uLL;
              }
              v57 = v66 % v60 + v66 / v60 * v62;
              *(float *)(v15 + 4 * v57) = *(float *)(v15 + 4 * v57)
                                        + vaddv_f32(vadd_f32(*(float32x2_t *)v58.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL)));
              ++v66;
              v68 += v61;
            }
            while (v66 != v71);
          }
          v78 = v55 >> 2;
          v79 = v65 - (v55 >> 2);
          if (v79 >= 3)
          {
            v80 = v79 / 3;
            do
            {
              v81 = v15 + 4 * (v78 % v60 + v78 / v60 * v62);
              v58.i64[0] = *(_QWORD *)v81;
              v58.i32[2] = *(_DWORD *)(v81 + 8);
              v82 = (int32x4_t)vmulq_f32(v58, v58);
              v82.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v82, 2), vadd_f32(*(float32x2_t *)v82.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v82.i8, 1))).u32[0];
              v83 = vrsqrte_f32((float32x2_t)v82.u32[0]);
              v84 = vmul_f32(v83, vrsqrts_f32((float32x2_t)v82.u32[0], vmul_f32(v83, v83)));
              v58 = vmulq_n_f32(v58, vmul_f32(v84, vrsqrts_f32((float32x2_t)v82.u32[0], vmul_f32(v84, v84))).f32[0]);
              *(_QWORD *)v81 = v58.i64[0];
              *(_DWORD *)(v81 + 8) = v58.i32[2];
              v78 += 3;
              --v80;
            }
            while (v80);
          }
        }
        else
        {
          v116 = *re::graphicsLogObjects(v56);
          if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_224FE9000, v116, OS_LOG_TYPE_DEFAULT, "Failure: Read metal buffer", buf, 2u);
          }
        }
        re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)&v135);
        v6 = a3;
      }
      ++v7;
    }
    while (v7 != v124);
  }
}

uint64_t re::BlendShapeModelUtil::blendShapeTargetCountForGroup(re::BlendShapeModelUtil *this, const DeformationModelData *a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)this;
  if (!*(_QWORD *)this || v2[8] <= (unint64_t)a2)
    return 0;
  if (v2[2] <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(v2[3] + 168 * a2);
}

re::StringID *re::BlendShapeModelUtil::blendShapeTargetName@<X0>(re::BlendShapeModelUtil *this@<X0>, const DeformationModelData *a2@<X1>, unint64_t a3@<X2>, re::StringID *a4@<X8>)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)this;
  if (!*(_QWORD *)this || v4[8] <= (unint64_t)a2)
    return re::StringID::invalid(a4);
  if (v4[2] <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5 = v4[3];
  if (*(_QWORD *)(v5 + 168 * a2 + 32) > a3)
    return re::StringID::StringID(a4, (const StringID *)(*(_QWORD *)(v5 + 168 * a2 + 40) + 16 * a3));
  else
    return re::StringID::invalid(a4);
}

uint64_t re::BlendShapeModelUtil::DEPRECATED_blendShapeTargetNameDoNotUse(re::BlendShapeModelUtil *this, const DeformationModelData *a2, unint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)this;
  if (!*(_QWORD *)this || v3[8] <= (unint64_t)a2)
    return 0;
  if (v3[2] <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = v3[3];
  if (*(_QWORD *)(v4 + 168 * a2 + 32) > a3)
    return *(_QWORD *)(*(_QWORD *)(v4 + 168 * a2 + 40) + 16 * a3 + 8);
  else
    return 0;
}

re::DynamicString *re::BlendShapeModelUtil::makeBlendShapeGroupDefinitionFromGroup@<X0>(re::BlendShapeModelUtil *this@<X0>, const DeformationModelData *a2@<X1>, unint64_t *a3@<X8>)
{
  _DWORD *v3;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v11;
  _DWORD *v12;
  unint64_t *v13;
  int v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _anonymous_namespace_ *v20;
  unint64_t v21;
  _anonymous_namespace_ *v22;
  const char *v23;
  re::DynamicString *result;
  __int128 v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  _anonymous_namespace_ *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _DWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _DWORD *v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  uint64_t v58;
  unint64_t *v59;
  int v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  unint64_t *v64;
  _anonymous_namespace_ *v65;
  unint64_t v66;
  _anonymous_namespace_ *v67;
  const char *v68;
  __int128 v69;
  __int128 v70;
  _anonymous_namespace_ *v71;
  __int128 v72;
  __int128 v73;
  _anonymous_namespace_ *v74;
  __int128 v75;
  __int128 v76;
  _anonymous_namespace_ *v77;
  __int128 v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _DWORD *v90;
  _BYTE *v91;
  char v92;
  char v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  int v104;
  unint64_t v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  float v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  uint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unsigned int *v122;
  unsigned int v123;
  unint64_t *v124;
  unint64_t v125;
  unsigned int v126;
  BOOL v127;
  uint64_t v128;
  _BYTE *v129;
  _DWORD *v130;
  unint64_t *v131;
  unsigned int *v132;
  unint64_t v133;
  unsigned int v134;
  unint64_t *v135;
  unint64_t v136;
  _anonymous_namespace_ *v137;
  _anonymous_namespace_ *v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  unsigned int *v143;
  unsigned int v144;
  int *v145;
  int v146;
  unsigned int **v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t *v150;
  unsigned int v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  unint64_t *v160;
  _QWORD *v161;
  unint64_t *v162;
  _QWORD *v163;
  unint64_t *v164;
  _QWORD *v165;
  unint64_t *v166;
  _QWORD *v167;
  unsigned int *v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  __int128 v173;
  _QWORD *v174;
  uint64_t v175;
  __n128 v176;
  uint64_t v177;
  _BYTE *v178;
  char v179;
  char v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  _anonymous_namespace_ *v189;
  __int128 v190;
  __int128 v191;
  unint64_t v192;
  int v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unsigned __int16 *v198;
  float v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t *v206;
  uint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  _DWORD *v211;
  unsigned int v212;
  unint64_t *v213;
  unint64_t v214;
  unsigned int v215;
  BOOL v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t *v220;
  unsigned int *v221;
  unint64_t v222;
  unsigned int v223;
  unint64_t *v224;
  unint64_t v225;
  _anonymous_namespace_ *v226;
  _anonymous_namespace_ *v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t *v230;
  uint64_t v231;
  unsigned int *v232;
  unsigned int v233;
  uint64_t v234;
  int *v235;
  int v236;
  unsigned int **v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t *v240;
  unsigned int v241;
  unint64_t v242;
  unint64_t v243;
  unsigned int v244;
  unsigned int v245;
  unint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  _QWORD *v249;
  unint64_t *v250;
  _QWORD *v251;
  unint64_t *v252;
  _QWORD *v253;
  unint64_t *v254;
  _QWORD *v255;
  unint64_t *v256;
  _QWORD *v257;
  unsigned int *v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  __int128 v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  _anonymous_namespace_ *v267;
  __int128 v268;
  __int128 v269;
  _anonymous_namespace_ *v270;
  __int128 v271;
  __int128 v272;
  _DWORD *v273;
  unint64_t v274;
  unint64_t v275;
  _BYTE *v276;
  int v277;
  unsigned int v278;
  _BYTE *v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t *v283;
  uint64_t v284;
  _BYTE *v285;
  _BYTE *v286;
  _BYTE *v287;
  _BYTE *v288;
  _BYTE *v289;
  _BYTE *v290;
  _DWORD *v291;
  _DWORD *v292;
  _BYTE *v293;
  unint64_t v294;
  _BYTE *v295;
  unint64_t v296;
  _QWORD *v297;
  unint64_t v298;
  _QWORD *v299;
  _DWORD *v300;
  _DWORD *v301;
  unint64_t *v302;
  unint64_t *v303;
  _QWORD *v304;
  uint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t *v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  _BYTE v314[16];
  uint64_t v315;
  _BYTE v316[24];
  unint64_t v317;
  unint64_t v318;
  unint64_t v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  uint64_t v323;
  unint64_t v324;
  __int128 v325;
  unint64_t *v326;
  unint64_t v327;
  unint64_t v328;
  uint64_t v329;
  _BYTE v330[28];
  __int16 v331;
  _BYTE v332[10];
  _OWORD v333[3];
  uint64_t v334;
  _BYTE v335[12];
  __int16 v336;
  int v337;
  __int16 v338;
  unint64_t v339;
  __int16 v340;
  unint64_t v341;
  int v342;
  _DWORD *v343;
  unint64_t v344;
  __int16 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  uint64_t v351;

  v351 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD **)this;
  if (!*(_QWORD *)this)
  {
    v22 = (_anonymous_namespace_ *)std::system_category();
    v23 = "Deformation model does not contain blendshape data";
LABEL_21:
    v25 = v346;
    v26 = v347;
    *(_BYTE *)a3 = 0;
    a3[1] = 0;
    a3[2] = (unint64_t)v22;
    *(_OWORD *)(a3 + 3) = v25;
    *(_OWORD *)(a3 + 5) = v26;
    return result;
  }
  v6 = v5[2];
  if (v6 != v5[8])
  {
    v22 = (_anonymous_namespace_ *)std::system_category();
    v23 = "Deformation model has mismatched buffer and name counts";
    goto LABEL_21;
  }
  v7 = (unint64_t)&v342;
  v8 = &v324;
  v9 = a2;
  if (v6 <= a2)
  {
LABEL_364:
    v324 = 0;
    v349 = 0u;
    v350 = 0u;
    v347 = 0u;
    v348 = 0u;
    v346 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v342 = 136315906;
    *(unint64_t *)((char *)v8 + 236) = (unint64_t)"operator[]";
    WORD2(v343) = 1024;
    *(_DWORD *)((char *)v8 + 246) = 476;
    WORD1(v344) = 2048;
    *(unint64_t *)((char *)v8 + 252) = v9;
    v345 = 2048;
    *(_QWORD *)(v7 + 30) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_365:
    *(_QWORD *)v335 = 0;
    v349 = 0u;
    v350 = 0u;
    v347 = 0u;
    v348 = 0u;
    v346 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v330 = 136315906;
    *(_QWORD *)&v330[4] = "operator[]";
    *(_WORD *)&v330[12] = 1024;
    *(_DWORD *)&v330[14] = 468;
    *(_WORD *)&v330[18] = 2048;
    *(_QWORD *)&v330[20] = v7;
    v331 = 2048;
    *(_QWORD *)v332 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_366:
    *(_QWORD *)v335 = 0;
    v349 = 0u;
    v350 = 0u;
    v347 = 0u;
    v348 = 0u;
    v346 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v330 = 136315906;
    *(_QWORD *)&v330[4] = "operator[]";
    *(_WORD *)&v330[12] = 1024;
    *(_DWORD *)&v330[14] = 476;
    *(_WORD *)&v330[18] = 2048;
    *(_QWORD *)&v330[20] = v7;
    v331 = 2048;
    *(_QWORD *)v332 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_367:
    *(_QWORD *)v335 = 0;
    v349 = 0u;
    v350 = 0u;
    v347 = 0u;
    v348 = 0u;
    v346 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v330 = 136315906;
    *(_QWORD *)&v330[4] = "operator[]";
    *(_WORD *)&v330[12] = 1024;
    *(_DWORD *)&v330[14] = 468;
    *(_WORD *)&v330[18] = 2048;
    *(_QWORD *)&v330[20] = v7;
    v331 = 2048;
    *(_QWORD *)v332 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_368:
    *(_QWORD *)v335 = 0;
    v349 = 0u;
    v350 = 0u;
    v347 = 0u;
    v348 = 0u;
    v346 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v330 = 136315906;
    *(_QWORD *)&v330[4] = "operator[]";
    *(_WORD *)&v330[12] = 1024;
    *(_DWORD *)&v330[14] = 476;
    *(_WORD *)&v330[18] = 2048;
    *(_QWORD *)&v330[20] = v7;
    v331 = 2048;
    *(_QWORD *)v332 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_369:
    v324 = 0;
    v349 = 0u;
    v350 = 0u;
    v347 = 0u;
    v348 = 0u;
    v346 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v342 = 136315906;
    *(_QWORD *)(v7 + 4) = "operator[]";
    WORD2(v343) = 1024;
    *(_DWORD *)(v7 + 14) = 476;
    WORD1(v344) = 2048;
    *(_QWORD *)(v7 + 20) = v9;
    v345 = 2048;
    *(_QWORD *)(v7 + 30) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_370:
    *(_QWORD *)&v320 = 0;
    v349 = 0u;
    v350 = 0u;
    v347 = 0u;
    v348 = 0u;
    v346 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v333[0]) = 136315906;
    *(_QWORD *)((char *)v333 + 4) = "operator[]";
    WORD6(v333[0]) = 1024;
    *(_DWORD *)((char *)v333 + 14) = 476;
    WORD1(v333[1]) = 2048;
    *(_QWORD *)((char *)&v333[1] + 4) = v9;
    WORD6(v333[1]) = 2048;
    *(_QWORD *)((char *)&v333[1] + 14) = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_371:
    v324 = 0;
    v349 = 0u;
    v350 = 0u;
    v347 = 0u;
    v348 = 0u;
    v346 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v342 = 136315906;
    *(_QWORD *)(v7 + 4) = "operator[]";
    WORD2(v343) = 1024;
    *(_DWORD *)(v7 + 14) = 476;
    WORD1(v344) = 2048;
    *(_QWORD *)(v7 + 20) = v9;
    v345 = 2048;
    *(_QWORD *)(v7 + 30) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_372;
  }
  re::ReadOnlyCPUAccessibleBufferSliceContent::make((_QWORD *)(v5[3] + 168 * a2 + 104), (uint64_t)v314);
  if (v314[0] && v315)
  {
    v11 = *(_QWORD **)this;
    if (*(_DWORD *)v5 == 1)
    {
      if (v11)
      {
        v6 = v11[2];
        if (v6 == v11[8])
        {
          if (v6 > v9)
          {
            v12 = (_DWORD *)v11[3];
            v13 = (unint64_t *)&v12[42 * v9];
            re::ReadOnlyCPUAccessibleBufferSliceContent::make(v13 + 13, (uint64_t)&v342);
            v14 = v342;
            v15 = v344;
            re::ReadOnlyCPUAccessibleBufferSliceContent::make(v13 + 9, (uint64_t)&v324);
            if ((_BYTE)v324)
            {
              v334 = 0;
              memset(v333, 0, sizeof(v333));
              v323 = 0;
              v321 = 0u;
              v322 = 0u;
              v16 = 2;
              v320 = 0u;
              if (!v14 || !v15)
              {
LABEL_16:
                v17 = *v13;
                *(_QWORD *)v316 = 0;
                *(_QWORD *)&v316[8] = &str_110;
                HIDWORD(v319) = 0;
                v317 = 0;
                v318 = 0;
                *(_QWORD *)&v316[16] = 0;
                LOBYTE(v319) = 0;
                v6 = v11[8];
                if (v6 > v9)
                {
                  v18 = re::StringID::operator=((unint64_t *)v316, (uint64_t *)(v11[9] + 16 * v9));
                  v313 = v17;
                  LOBYTE(v319) = v16;
                  LODWORD(v293) = v12[42 * v9 + 3];
                  HIDWORD(v319) = v293 / 3;
                  v304 = (_QWORD *)v320;
                  if (*((_QWORD *)&v320 + 1) >> 2 == 1)
                  {
                    v21 = 0;
                  }
                  else
                  {
                    v21 = 0;
                    v81 = 4 * (*((_QWORD *)&v320 + 1) >> 2) - 4;
                    while (*(_DWORD *)(v320 + 4 * v21) < *(_DWORD *)(v320 + 4 * v21 + 4))
                    {
                      ++v21;
                      v81 -= 4;
                      if (!v81)
                      {
                        v21 = ((unint64_t)(*((_QWORD *)&v320 + 1) - 8) >> 2) + 1;
                        break;
                      }
                    }
                  }
                  v30 = v325;
                  v284 = *(_QWORD *)&v333[0];
                  v300 = v343;
                  v276 = &v316[16];
                  if (v344 >> 2 == 1)
                  {
                    v82 = 1;
                    goto LABEL_94;
                  }
                  v86 = 0;
                  v82 = ((v344 - 8) >> 2) + 2;
                  v87 = 4 * (v344 >> 2) - 4;
                  while (v343[v86] < v343[v86 + 1])
                  {
                    ++v86;
                    v87 -= 4;
                    if (!v87)
                      goto LABEL_96;
                  }
LABEL_93:
                  v82 = v86 + 1;
LABEL_94:
                  if (v82 == 1 && !v21)
                    goto LABEL_97;
LABEL_96:
                  if (v21 == v82)
                  {
LABEL_97:
                    v296 = v21;
                    v90 = &v12[42 * v9];
                    v93 = *((_BYTE *)v90 + 48);
                    v91 = v90 + 12;
                    v92 = v93;
                    v279 = v91;
                    v94 = *((_DWORD *)v91 - 8);
                    v291 = v91 - 32;
                    if (v91[1])
                      v95 = *((unsigned int *)v91 - 8);
                    else
                      v95 = 0;
                    v286 = v91 + 2;
                    v288 = v91 + 1;
                    if (v91[2])
                      v96 = *((unsigned int *)v91 - 8);
                    else
                      v96 = 0;
                    v98 = v313;
                    v283 = a3;
                    v277 = v9;
                    v273 = v12;
                    if (!v313)
                    {
                      v8 = 0;
LABEL_111:
                      if (!v296)
                      {
LABEL_149:
                        v129 = v279;
                        if (v98)
                        {
                          v7 = 0;
                          v130 = &v273[42 * v277];
                          v297 = v130 + 10;
                          v302 = (unint64_t *)(v130 + 8);
                          v6 = 40;
                          do
                          {
                            v3 = (_DWORD *)v317;
                            if (v317 <= v7)
                              goto LABEL_365;
                            v3 = (_DWORD *)*v302;
                            if (*v302 <= v7)
                              goto LABEL_366;
                            v30 = v318;
                            v131 = &v8[6 * v7];
                            v134 = *((_DWORD *)v131 + 7);
                            v132 = (unsigned int *)v131 + 7;
                            v133 = v134;
                            v135 = re::StringID::operator=((unint64_t *)(v318 + 136 * v7), (uint64_t *)(*v297 + 16 * v7));
                            if (v134)
                            {
                              v136 = v30 + 136 * v7;
                              if (*v129)
                              {
                              }
                              v306 = v30;
                              if (*v288)
                              {
                              }
                              if (*v286)
                              {
                              }
                              *(_QWORD *)&v332[2] = 0;
                              memset(v330, 0, sizeof(v330));
                              v139 = *v132;
                              if ((_DWORD)v139)
                                v138 = (_anonymous_namespace_ *)re::DynamicArray<re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*>::setCapacity(v330, v139);
                              v140 = v7;
                              v141 = &v8[6 * v7];
                              v144 = *((_DWORD *)v141 + 8);
                              v143 = (unsigned int *)(v141 + 4);
                              v142 = v144;
                              v310 = v140;
                              v9 = 0;
                              if (v144)
                              {
                                v145 = (int *)(v8[6 * v140 + 2] + 8);
                                while (1)
                                {
                                  v146 = *v145;
                                  v145 += 10;
                                  if (v146 < 0)
                                    break;
                                  if (v142 == ++v9)
                                  {
                                    v9 = v142;
                                    break;
                                  }
                                }
                              }
                              if ((_DWORD)v142 == (_DWORD)v9)
                              {
                                v147 = *(unsigned int ***)&v332[2];
                                v148 = *(_QWORD *)&v330[16];
                              }
                              else
                              {
                                v149 = v9;
                                v150 = &v8[6 * v310 + 2];
                                v148 = *(_QWORD *)&v330[16];
                                v151 = v142;
                                do
                                {
                                  v30 = *v150;
                                  if (v148 >= *(_QWORD *)&v330[8])
                                  {
                                    if (*(_QWORD *)&v330[8] < v148 + 1)
                                    {
                                      if (*(_QWORD *)v330)
                                      {
                                        v152 = 2 * *(_QWORD *)&v330[8];
                                        if (!*(_QWORD *)&v330[8])
                                          v152 = 8;
                                        if (v152 <= v148 + 1)
                                          v153 = v148 + 1;
                                        else
                                          v153 = v152;
                                        v138 = (_anonymous_namespace_ *)re::DynamicArray<re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*>::setCapacity(v330, v153);
                                      }
                                      else
                                      {
                                        v138 = (_anonymous_namespace_ *)re::DynamicArray<re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*>::setCapacity(v330, v148 + 1);
                                        ++*(_DWORD *)&v330[24];
                                      }
                                    }
                                    v148 = *(_QWORD *)&v330[16];
                                    v151 = *v143;
                                  }
                                  v147 = *(unsigned int ***)&v332[2];
                                  *(_QWORD *)(*(_QWORD *)&v332[2] + 8 * v148++) = v30 + 40 * v149 + 16;
                                  *(_QWORD *)&v330[16] = v148;
                                  ++*(_DWORD *)&v330[24];
                                  if (v151 <= (int)v9 + 1)
                                    v154 = (v9 + 1);
                                  else
                                    v154 = v151;
                                  while (1)
                                  {
                                    v149 = (v9 + 1);
                                    if ((_DWORD)v154 - 1 == (_DWORD)v9)
                                      break;
                                    LODWORD(v9) = v9 + 1;
                                    v155 = v149;
                                    if ((*(_DWORD *)(*v150 + 40 * v149 + 8) & 0x80000000) != 0)
                                      goto LABEL_188;
                                  }
                                  v155 = v154;
LABEL_188:
                                  v9 = v155;
                                }
                                while ((_DWORD)v142 != (_DWORD)v155);
                              }
                              v156 = 126 - 2 * __clz(v148);
                              if (v148)
                                v157 = v156;
                              else
                                v157 = 0;
                              std::__introsort<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**,false>(v147, &v147[v148], v157, 1);
                              v129 = v279;
                              if (v148)
                              {
                                v7 = 0;
                                v158 = (_QWORD *)(v306 + 136 * v310);
                                v159 = v158 + 4;
                                v3 = (_DWORD *)v158[3];
                                v160 = v158 + 6;
                                v161 = v158 + 7;
                                v162 = v158 + 9;
                                v163 = v158 + 10;
                                v164 = v158 + 12;
                                v165 = v158 + 13;
                                v166 = v158 + 15;
                                v167 = v158 + 16;
                                while (v3 != (_DWORD *)v7)
                                {
                                  v168 = v147[v7];
                                  *(_DWORD *)(*v159 + 4 * v7) = *v168;
                                  v9 = *v160;
                                  if (*v160 <= v7)
                                    goto LABEL_354;
                                  *(_DWORD *)(*v161 + 4 * v7) = v168[1];
                                  if (*v279)
                                  {
                                    v9 = *v162;
                                    if (*v162 <= v7)
                                      goto LABEL_356;
                                    *(_DWORD *)(*v163 + 4 * v7) = v168[2];
                                  }
                                  if (*v288)
                                  {
                                    v9 = *v164;
                                    if (*v164 <= v7)
                                      goto LABEL_358;
                                    *(_DWORD *)(*v165 + 4 * v7) = v168[3];
                                  }
                                  if (*v286)
                                  {
                                    v9 = *v166;
                                    if (*v166 <= v7)
                                      goto LABEL_360;
                                    *(_DWORD *)(*v167 + 4 * v7) = v168[4];
                                  }
                                  if (v148 == ++v7)
                                    goto LABEL_206;
                                }
                                v329 = 0;
                                v349 = 0u;
                                v350 = 0u;
                                v347 = 0u;
                                v348 = 0u;
                                v346 = 0u;
                                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                *(_DWORD *)v335 = 136315906;
                                *(_QWORD *)&v335[4] = "operator[]";
                                v336 = 1024;
                                v337 = 468;
                                v338 = 2048;
                                v339 = (unint64_t)v3;
                                v340 = 2048;
                                v341 = (unint64_t)v3;
                                _os_log_send_and_compose_impl();
                                _os_crash_msg();
                                __break(1u);
LABEL_353:
                                v329 = 0;
                                v349 = 0u;
                                v350 = 0u;
                                v347 = 0u;
                                v348 = 0u;
                                v346 = 0u;
                                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                *(_DWORD *)v335 = 136315906;
                                *(_QWORD *)&v335[4] = "operator[]";
                                v336 = 1024;
                                v337 = 468;
                                v338 = 2048;
                                v339 = (unint64_t)v3;
                                v340 = 2048;
                                v341 = (unint64_t)v3;
                                _os_log_send_and_compose_impl();
                                _os_crash_msg();
                                __break(1u);
LABEL_354:
                                v329 = 0;
                                v349 = 0u;
                                v350 = 0u;
                                v347 = 0u;
                                v348 = 0u;
                                v346 = 0u;
                                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                *(_DWORD *)v335 = 136315906;
                                *(_QWORD *)&v335[4] = "operator[]";
                                v336 = 1024;
                                v337 = 468;
                                v338 = 2048;
                                v339 = v7;
                                v340 = 2048;
                                v341 = v9;
                                _os_log_send_and_compose_impl();
                                _os_crash_msg();
                                __break(1u);
                                goto LABEL_355;
                              }
LABEL_206:
                              if (v147 && *(_QWORD *)v330)
                                (*(void (**)(_QWORD, unsigned int **, _BYTE *, _BYTE *))(**(_QWORD **)v330
                                                                                                  + 40))(*(_QWORD *)v330, v147, v288, v286);
                              v7 = v310;
                            }
                            ++v7;
                          }
                          while (v7 != v313);
                        }
                        v169 = *(_QWORD *)v316;
                        v170 = v317;
                        v171 = v318;
                        v172 = v319;
                        *(_BYTE *)v283 = 1;
                        v283[1] = v169;
                        *(_QWORD *)&v346 = 0;
                        *((_QWORD *)&v346 + 1) = &str_110;
                        v173 = *(_OWORD *)&v316[8];
                        *(_QWORD *)v316 = 0;
                        *(_QWORD *)&v316[8] = &str_110;
                        v317 = 0;
                        v318 = 0;
                        *(_QWORD *)&v316[16] = 0;
                        *((_OWORD *)v283 + 1) = v173;
                        v347 = 0uLL;
                        v283[4] = v170;
                        v283[5] = v171;
                        *(_QWORD *)&v348 = 0;
                        *((_QWORD *)&v348 + 1) = v172;
                        v283[6] = v172;
                        re::FixedArray<re::BlendShapeDefinition>::deinit(&v347);
                        re::StringID::destroyString((re::StringID *)&v346);
                        goto LABEL_212;
                      }
                      v103 = 0;
                      v104 = 0;
                      v282 = (v94 << v92);
                      v274 = v95 + v282 + v96;
                      while (1)
                      {
                        v105 = v300[v103];
                        v106 = v105 % *v291;
                        LODWORD(v329) = v106;
                        v107 = *((unsigned int *)v304 + v103);
                        v108 = *((unsigned int *)v304 + (v104 + 1));
                        v309 = (v104 + 1);
                        if (v105 >= v293)
                        {
                          if (v105 >= v282)
                          {
                            if (v95 + v282 <= v105)
                            {
                              if (v274 <= v105)
                                goto LABEL_350;
                              v19 = 3;
                            }
                            else
                            {
                              v19 = 2;
                            }
                          }
                          else
                          {
                            v19 = 1;
                          }
                        }
                        else
                        {
                          v19 = 0;
                        }
                        if (v107 < v108)
                          break;
LABEL_148:
                        v103 = v309;
                        v104 = v309;
                        if (v296 <= v309)
                          goto LABEL_149;
                      }
                      v9 = v284 + 4 * v107;
                      v109 = *(unsigned int *)v9;
                      while (1)
                      {
                        v110 = *(float *)(v30 + 4 * v107);
                        if (v110 != 0.0)
                          break;
LABEL_137:
                        v126 = *(_DWORD *)(v9 + 4);
                        v9 += 4;
                        v125 = v126;
                        v127 = v126 <= v109 || ++v107 >= v108;
                        v109 = v125;
                        if (v127)
                          goto LABEL_148;
                      }
                      if (v98 <= v109)
                        goto LABEL_348;
                      v111 = &v8[6 * v109];
                      v112 = 0xBF58476D1CE4E5B9 * (v106 ^ ((unint64_t)v106 >> 30));
                      v113 = (0x94D049BB133111EBLL * (v112 ^ (v112 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                              * (v112 ^ (v112 >> 27))) >> 31);
                      if (*v111)
                      {
                        v114 = &v8[6 * v109];
                        v115 = v113 % *((unsigned int *)v114 + 6);
                        v116 = *(unsigned int *)(v114[1] + 4 * v115);
                        if ((_DWORD)v116 != 0x7FFFFFFF)
                        {
                          v117 = &v8[6 * v109];
                          v120 = v117[2];
                          v118 = (uint64_t *)(v117 + 2);
                          v119 = v120;
                          v121 = v116;
                          if (*(_DWORD *)(v120 + 40 * v116 + 12) == v106)
                          {
                            LODWORD(v121) = v116;
LABEL_131:
                            v122 = (unsigned int *)(v119 + 40 * v121 + 16);
                            goto LABEL_136;
                          }
                          while (1)
                          {
                            LODWORD(v121) = *(_DWORD *)(v119 + 40 * v121 + 8) & 0x7FFFFFFF;
                            if ((_DWORD)v121 == 0x7FFFFFFF)
                              break;
                            if (*(_DWORD *)(v119 + 40 * v121 + 12) == v106)
                              goto LABEL_131;
                          }
                          v346 = 0uLL;
                          LODWORD(v347) = 0;
                          v128 = *v118;
                          while (*(_DWORD *)(v128 + 40 * v116 + 12) != v106)
                          {
                            LODWORD(v116) = *(_DWORD *)(v128 + 40 * v116 + 8) & 0x7FFFFFFF;
                            if ((_DWORD)v116 == 0x7FFFFFFF)
                              goto LABEL_134;
                          }
                          v122 = (unsigned int *)(v128 + 40 * v116 + 16);
LABEL_135:
                          *v122 = v106;
                          v109 = *(unsigned int *)v9;
LABEL_136:
                          *(float *)&v122[v19 + 1] = v110;
                          goto LABEL_137;
                        }
                      }
                      else
                      {
                        LODWORD(v115) = 0;
                      }
                      v346 = 0uLL;
                      LODWORD(v347) = 0;
LABEL_134:
                      v123 = re::HashTable<unsigned int,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove((uint64_t)v111, v115, v113, &v329, &v346);
                      v124 = &v8[6 * v109];
                      ++*((_DWORD *)v124 + 10);
                      v122 = (unsigned int *)(v124[2] + 40 * v123 + 16);
                      v106 = v329;
                      v98 = v313;
                      goto LABEL_135;
                    }
                    if (v313 <= 0x555555555555555)
                    {
                      v99 = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t))(*(_QWORD *)v19 + 32))(v19, 48 * v313, 8);
                      if (v99)
                      {
                        v8 = (unint64_t *)v99;
                        v101 = v99;
                        v102 = v313 - 1;
                        v98 = v313;
                        if (v313 != 1)
                        {
                          v101 = v99;
                          do
                          {
                            *(_OWORD *)(v101 + 16) = 0uLL;
                            *(_OWORD *)(v101 + 32) = 0uLL;
                            *(_OWORD *)v101 = 0uLL;
                            *(_DWORD *)(v101 + 36) = 0x7FFFFFFF;
                            v101 += 48;
                            --v102;
                          }
                          while (v102);
                        }
                        *(_OWORD *)(v101 + 16) = 0u;
                        *(_OWORD *)(v101 + 32) = 0u;
                        *(_OWORD *)v101 = 0u;
                        *(_DWORD *)(v101 + 36) = 0x7FFFFFFF;
                        goto LABEL_111;
                      }
                      goto LABEL_376;
                    }
LABEL_375:
                    re::internal::assertLog((re::internal *)6, v97, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 48, v98);
                    _os_crash();
                    __break(1u);
LABEL_376:
                    re::internal::assertLog((re::internal *)4, v100, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
                    _os_crash();
                    __break(1u);
                    goto LABEL_377;
                  }
LABEL_233:
                  v189 = (_anonymous_namespace_ *)std::system_category();
                  v190 = v346;
                  v191 = v347;
                  *(_BYTE *)a3 = 0;
                  a3[1] = 0;
                  a3[2] = (unint64_t)v189;
                  *(_OWORD *)(a3 + 3) = v190;
                  *(_OWORD *)(a3 + 5) = v191;
                  v174 = v276;
                  goto LABEL_340;
                }
                goto LABEL_373;
              }
              re::ReadOnlyCPUAccessibleBufferSliceContent::make(&v12[42 * v9 + 34], (uint64_t)&v346);
              if ((_BYTE)v346)
              {
                re::ReadOnlyCPUAccessibleBufferSliceContent::operator=((uint64_t *)v333, (uint64_t *)&v346 + 1);
                re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)&v346);
                re::ReadOnlyCPUAccessibleBufferSliceContent::make(&v12[42 * v9 + 30], (uint64_t)&v346);
                if ((_BYTE)v346)
                {
                  re::ReadOnlyCPUAccessibleBufferSliceContent::operator=((uint64_t *)&v320, (uint64_t *)&v346 + 1);
                  re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)&v346);
                  v16 = 1;
                  goto LABEL_16;
                }
              }
LABEL_71:
              v77 = (_anonymous_namespace_ *)std::system_category();
              v78 = *(_OWORD *)v316;
              v79 = *(_QWORD *)&v316[16];
              v80 = v317;
              *(_BYTE *)a3 = 0;
              a3[1] = 0;
              a3[2] = (unint64_t)v77;
              *(_OWORD *)(a3 + 3) = v78;
              a3[5] = v79;
              a3[6] = v80;
              re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)&v346);
              goto LABEL_341;
            }
LABEL_70:
            v74 = (_anonymous_namespace_ *)std::system_category();
            v75 = v346;
            v76 = v347;
            *(_BYTE *)a3 = 0;
            a3[1] = 0;
            a3[2] = (unint64_t)v74;
            *(_OWORD *)(a3 + 3) = v75;
            *(_OWORD *)(a3 + 5) = v76;
            goto LABEL_342;
          }
          goto LABEL_371;
        }
        goto LABEL_67;
      }
LABEL_66:
      v67 = (_anonymous_namespace_ *)std::system_category();
      v68 = "Deformation model does not contain blendshape data";
LABEL_68:
      v69 = v346;
      v70 = v347;
      *(_BYTE *)a3 = 0;
      a3[1] = 0;
      a3[2] = (unint64_t)v67;
      *(_OWORD *)(a3 + 3) = v69;
      *(_OWORD *)(a3 + 5) = v70;
      return (re::DynamicString *)re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)v314);
    }
    if (!v11)
      goto LABEL_66;
    v6 = v11[2];
    if (v6 == v11[8])
    {
      if (v6 <= v9)
      {
LABEL_372:
        v324 = 0;
        v349 = 0u;
        v350 = 0u;
        v347 = 0u;
        v348 = 0u;
        v346 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v342 = 136315906;
        *(_QWORD *)(v7 + 4) = "operator[]";
        WORD2(v343) = 1024;
        *(_DWORD *)(v7 + 14) = 476;
        WORD1(v344) = 2048;
        *(_QWORD *)(v7 + 20) = v9;
        v345 = 2048;
        *(_QWORD *)(v7 + 30) = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_373:
        *(_QWORD *)v335 = 0;
        v349 = 0u;
        v350 = 0u;
        v347 = 0u;
        v348 = 0u;
        v346 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v330 = 136315906;
        *(_QWORD *)&v330[4] = "operator[]";
        *(_WORD *)&v330[12] = 1024;
        *(_DWORD *)&v330[14] = 476;
        *(_WORD *)&v330[18] = 2048;
        *(_QWORD *)&v330[20] = v9;
        v331 = 2048;
        *(_QWORD *)v332 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_374;
      }
      v58 = v11[3];
      v59 = (unint64_t *)(v58 + 168 * v9);
      re::ReadOnlyCPUAccessibleBufferSliceContent::make(v59 + 13, (uint64_t)&v342);
      v60 = v342;
      v61 = v344;
      re::ReadOnlyCPUAccessibleBufferSliceContent::make(v59 + 9, (uint64_t)&v324);
      if (!(_BYTE)v324)
        goto LABEL_70;
      v334 = 0;
      memset(v333, 0, sizeof(v333));
      v323 = 0;
      v321 = 0u;
      v322 = 0u;
      v62 = 2;
      v320 = 0u;
      if (v60 && v61)
      {
        re::ReadOnlyCPUAccessibleBufferSliceContent::make((_QWORD *)(v58 + 168 * v9 + 136), (uint64_t)&v346);
        if (!(_BYTE)v346)
          goto LABEL_71;
        re::ReadOnlyCPUAccessibleBufferSliceContent::operator=((uint64_t *)v333, (uint64_t *)&v346 + 1);
        re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)&v346);
        re::ReadOnlyCPUAccessibleBufferSliceContent::make((_QWORD *)(v58 + 168 * v9 + 120), (uint64_t)&v346);
        if (!(_BYTE)v346)
          goto LABEL_71;
        re::ReadOnlyCPUAccessibleBufferSliceContent::operator=((uint64_t *)&v320, (uint64_t *)&v346 + 1);
        re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)&v346);
        v62 = 1;
      }
      v63 = *v59;
      *(_QWORD *)v316 = 0;
      *(_QWORD *)&v316[8] = &str_110;
      HIDWORD(v319) = 0;
      v317 = 0;
      v318 = 0;
      *(_QWORD *)&v316[16] = 0;
      LOBYTE(v319) = 0;
      v6 = v11[8];
      if (v6 <= v9)
      {
LABEL_374:
        *(_QWORD *)v335 = 0;
        v349 = 0u;
        v350 = 0u;
        v347 = 0u;
        v348 = 0u;
        v346 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v330 = 136315906;
        *(_QWORD *)&v330[4] = "operator[]";
        *(_WORD *)&v330[12] = 1024;
        *(_DWORD *)&v330[14] = 476;
        *(_WORD *)&v330[18] = 2048;
        *(_QWORD *)&v330[20] = v9;
        v331 = 2048;
        *(_QWORD *)v332 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_375;
      }
      v64 = re::StringID::operator=((unint64_t *)v316, (uint64_t *)(v11[9] + 16 * v9));
      v276 = &v316[16];
      v313 = v63;
      LOBYTE(v319) = v62;
      v294 = *(unsigned int *)(v58 + 168 * v9 + 12);
      HIDWORD(v319) = (*(unsigned int *)(v58 + 168 * v9 + 12) * (unsigned __int128)0x5555555555555556uLL) >> 64;
      v305 = v320;
      if (*((_QWORD *)&v320 + 1) >> 1 == 1)
      {
        v66 = 0;
      }
      else
      {
        v66 = 0;
        v83 = 2 * (*((_QWORD *)&v320 + 1) >> 1) - 2;
        while (*(unsigned __int16 *)(v320 + 2 * v66) < *(unsigned __int16 *)(v320 + 2 * v66 + 2))
        {
          ++v66;
          v83 -= 2;
          if (!v83)
          {
            v66 = ((unint64_t)(*((_QWORD *)&v320 + 1) - 4) >> 1) + 1;
            break;
          }
        }
      }
      v84 = v325;
      v281 = *(_QWORD *)&v333[0];
      v301 = v343;
      if (v344 >> 1 == 1)
      {
        v85 = 1;
      }
      else
      {
        v88 = 0;
        v85 = ((v344 - 4) >> 1) + 2;
        v89 = 2 * (v344 >> 1) - 2;
        while (*((unsigned __int16 *)v343 + v88) < *((unsigned __int16 *)v343 + v88 + 1))
        {
          ++v88;
          v89 -= 2;
          if (!v89)
            goto LABEL_219;
        }
        v85 = v88 + 1;
      }
      if (v85 != 1 || v66)
      {
LABEL_219:
        if (v66 != v85)
          goto LABEL_233;
      }
      v298 = v66;
      v177 = v58 + 168 * v9;
      v180 = *(_BYTE *)(v177 + 48);
      v178 = (_BYTE *)(v177 + 48);
      v179 = v180;
      v181 = *((_DWORD *)v178 - 8);
      v289 = v178;
      v292 = v178 - 32;
      if (v178[1])
        v182 = *((unsigned int *)v178 - 8);
      else
        v182 = 0;
      v285 = v178 + 2;
      v287 = v178 + 1;
      if (v178[2])
        v6 = *((unsigned int *)v178 - 8);
      else
        v6 = 0;
      v184 = v63;
      v283 = a3;
      v278 = v9;
      if (v63)
      {
        if (v63 > 0x555555555555555)
        {
LABEL_377:
          re::internal::assertLog((re::internal *)6, v183, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 48, v184);
          _os_crash();
          __break(1u);
LABEL_378:
          re::internal::assertLog((re::internal *)4, v186, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
          _os_crash();
          __break(1u);
        }
        if (!v185)
          goto LABEL_378;
        v8 = (unint64_t *)v185;
        v187 = v185;
        v188 = v313 - 1;
        v184 = v313;
        if (v313 != 1)
        {
          v187 = v185;
          do
          {
            *(_OWORD *)(v187 + 16) = 0uLL;
            *(_OWORD *)(v187 + 32) = 0uLL;
            *(_OWORD *)v187 = 0uLL;
            *(_DWORD *)(v187 + 36) = 0x7FFFFFFF;
            v187 += 48;
            --v188;
          }
          while (v188);
        }
        *(_OWORD *)(v187 + 16) = 0u;
        *(_OWORD *)(v187 + 32) = 0u;
        *(_OWORD *)v187 = 0u;
        *(_DWORD *)(v187 + 36) = 0x7FFFFFFF;
      }
      else
      {
        v8 = 0;
      }
      if (v298)
      {
        v192 = 0;
        v193 = 0;
        v280 = (v181 << v179);
        v275 = v182 + v280 + v6;
        do
        {
          v194 = *((unsigned __int16 *)v301 + v192);
          v195 = v194 - *((unsigned __int16 *)v301 + v192) / *v292 * (unint64_t)*v292;
          LODWORD(v329) = *((unsigned __int16 *)v301 + v192) % *v292;
          v6 = *(unsigned __int16 *)(v305 + 2 * v192);
          v196 = *(unsigned __int16 *)(v305 + 2 * (v193 + 1));
          v311 = (v193 + 1);
          if (v294 <= v194)
          {
            if (v194 >= v280)
            {
              if (v182 + v280 <= v194)
              {
                if (v275 <= v194)
                {
                  v270 = (_anonymous_namespace_ *)std::system_category();
                  v271 = v346;
                  v272 = v347;
                  *(_BYTE *)v283 = 0;
                  v283[1] = 0;
                  v283[2] = (unint64_t)v270;
                  *(_OWORD *)(v283 + 3) = v271;
                  *(_OWORD *)(v283 + 5) = v272;
                  v174 = &v316[16];
                  goto LABEL_336;
                }
                v197 = 3;
              }
              else
              {
                v197 = 2;
              }
            }
            else
            {
              v197 = 1;
            }
          }
          else
          {
            v197 = 0;
          }
          if (v6 < v196)
          {
            v198 = (unsigned __int16 *)(v281 + 2 * v6);
            v19 = *v198;
            while (1)
            {
              v199 = *(float *)(v84 + 4 * v6);
              if (v199 != 0.0)
                break;
LABEL_261:
              v215 = v198[1];
              ++v198;
              v214 = v215;
              v216 = v215 <= v19 || ++v6 >= v196;
              v19 = v214;
              if (v216)
                goto LABEL_272;
            }
            if (v184 <= v19)
              goto LABEL_349;
            v200 = &v8[6 * v19];
            v201 = 0x94D049BB133111EBLL
                 * ((0xBF58476D1CE4E5B9 * (v195 ^ (v195 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v195 ^ (v195 >> 30))) >> 27));
            v202 = v201 ^ (v201 >> 31);
            if (*v200)
            {
              v203 = &v8[6 * v19];
              v204 = v202 % *((unsigned int *)v203 + 6);
              v205 = *(unsigned int *)(v203[1] + 4 * v204);
              if ((_DWORD)v205 != 0x7FFFFFFF)
              {
                v206 = &v8[6 * v19];
                v209 = v206[2];
                v207 = (uint64_t *)(v206 + 2);
                v208 = v209;
                v210 = v205;
                if (*(_DWORD *)(v209 + 40 * v205 + 12) == v195)
                {
                  LODWORD(v210) = v205;
LABEL_255:
                  v211 = (_DWORD *)(v208 + 40 * v210 + 16);
                  goto LABEL_260;
                }
                while (1)
                {
                  LODWORD(v210) = *(_DWORD *)(v208 + 40 * v210 + 8) & 0x7FFFFFFF;
                  if ((_DWORD)v210 == 0x7FFFFFFF)
                    break;
                  if (*(_DWORD *)(v208 + 40 * v210 + 12) == v195)
                    goto LABEL_255;
                }
                v346 = 0uLL;
                LODWORD(v347) = 0;
                v217 = *v207;
                while (*(_DWORD *)(v217 + 40 * v205 + 12) != v195)
                {
                  LODWORD(v205) = *(_DWORD *)(v217 + 40 * v205 + 8) & 0x7FFFFFFF;
                  if ((_DWORD)v205 == 0x7FFFFFFF)
                    goto LABEL_258;
                }
                v211 = (_DWORD *)(v217 + 40 * v205 + 16);
LABEL_259:
                *v211 = v195;
LABEL_260:
                *(float *)&v211[v197 + 1] = v199;
                goto LABEL_261;
              }
            }
            else
            {
              LODWORD(v204) = 0;
            }
            v346 = 0uLL;
            LODWORD(v347) = 0;
LABEL_258:
            v212 = re::HashTable<unsigned int,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove((uint64_t)v200, v204, v202, &v329, &v346);
            v213 = &v8[6 * v19];
            ++*((_DWORD *)v213 + 10);
            v211 = (_DWORD *)(v213[2] + 40 * v212 + 16);
            v19 = *v198;
            v195 = v329;
            v184 = v313;
            goto LABEL_259;
          }
LABEL_272:
          v192 = v311;
          v193 = v311;
        }
        while (v298 > v311);
      }
      if (v184)
      {
        v7 = 0;
        v218 = v58 + 168 * v278;
        v299 = (_QWORD *)(v218 + 40);
        v303 = (unint64_t *)(v218 + 32);
        v9 = 136;
        v30 = 40;
        do
        {
          v3 = (_DWORD *)v317;
          if (v317 <= v7)
            goto LABEL_367;
          v3 = (_DWORD *)*v303;
          if (*v303 <= v7)
            goto LABEL_368;
          v219 = v318;
          v220 = &v8[6 * v7];
          v223 = *((_DWORD *)v220 + 7);
          v221 = (unsigned int *)v220 + 7;
          v222 = v223;
          v224 = re::StringID::operator=((unint64_t *)(v318 + 136 * v7), (uint64_t *)(*v299 + 16 * v7));
          if (v223)
          {
            v225 = v219 + 136 * v7;
            v6 = 136;
            if (*v289)
            {
            }
            v307 = v219;
            if (*v287)
            {
            }
            if (*v285)
            {
            }
            *(_QWORD *)&v332[2] = 0;
            memset(v330, 0, sizeof(v330));
            v228 = *v221;
            if ((_DWORD)v228)
              v227 = (_anonymous_namespace_ *)re::DynamicArray<re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*>::setCapacity(v330, v228);
            v229 = v7;
            v230 = &v8[6 * v7];
            v233 = *((_DWORD *)v230 + 8);
            v232 = (unsigned int *)(v230 + 4);
            v231 = v233;
            v312 = v229;
            v234 = 0;
            if (v233)
            {
              v235 = (int *)(v8[6 * v229 + 2] + 8);
              while (1)
              {
                v236 = *v235;
                v235 += 10;
                if (v236 < 0)
                  break;
                if (v231 == ++v234)
                {
                  LODWORD(v234) = v231;
                  break;
                }
              }
            }
            if ((_DWORD)v231 == (_DWORD)v234)
            {
              v237 = *(unsigned int ***)&v332[2];
              v238 = *(_QWORD *)&v330[16];
            }
            else
            {
              v239 = v234;
              v240 = &v8[6 * v312 + 2];
              v238 = *(_QWORD *)&v330[16];
              v241 = v231;
              do
              {
                v6 = *v240;
                if (v238 >= *(_QWORD *)&v330[8])
                {
                  if (*(_QWORD *)&v330[8] < v238 + 1)
                  {
                    if (*(_QWORD *)v330)
                    {
                      v242 = 2 * *(_QWORD *)&v330[8];
                      if (!*(_QWORD *)&v330[8])
                        v242 = 8;
                      if (v242 <= v238 + 1)
                        v243 = v238 + 1;
                      else
                        v243 = v242;
                      v227 = (_anonymous_namespace_ *)re::DynamicArray<re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*>::setCapacity(v330, v243);
                    }
                    else
                    {
                      v227 = (_anonymous_namespace_ *)re::DynamicArray<re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*>::setCapacity(v330, v238 + 1);
                      ++*(_DWORD *)&v330[24];
                    }
                  }
                  v238 = *(_QWORD *)&v330[16];
                  v241 = *v232;
                }
                v237 = *(unsigned int ***)&v332[2];
                *(_QWORD *)(*(_QWORD *)&v332[2] + 8 * v238++) = v6 + 40 * v239 + 16;
                *(_QWORD *)&v330[16] = v238;
                ++*(_DWORD *)&v330[24];
                if (v241 <= (int)v234 + 1)
                  v244 = v234 + 1;
                else
                  v244 = v241;
                while (1)
                {
                  v239 = (v234 + 1);
                  if (v244 - 1 == (_DWORD)v234)
                    break;
                  LODWORD(v234) = v234 + 1;
                  v245 = v239;
                  if ((*(_DWORD *)(*v240 + 40 * v239 + 8) & 0x80000000) != 0)
                    goto LABEL_312;
                }
                v245 = v244;
LABEL_312:
                LODWORD(v234) = v245;
              }
              while ((_DWORD)v231 != v245);
            }
            v246 = 126 - 2 * __clz(v238);
            if (v238)
              v247 = v246;
            else
              v247 = 0;
            std::__introsort<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const**,false>(v237, &v237[v238], v247, 1);
            v9 = 136;
            if (v238)
            {
              v7 = 0;
              v248 = (_QWORD *)(v307 + 136 * v312);
              v249 = v248 + 4;
              v3 = (_DWORD *)v248[3];
              v250 = v248 + 6;
              v251 = v248 + 7;
              v252 = v248 + 9;
              v253 = v248 + 10;
              v254 = v248 + 12;
              v255 = v248 + 13;
              v256 = v248 + 15;
              v257 = v248 + 16;
              while (1)
              {
                if (v3 == (_DWORD *)v7)
                  goto LABEL_353;
                v258 = v237[v7];
                *(_DWORD *)(*v249 + 4 * v7) = *v258;
                v6 = *v250;
                if (*v250 <= v7)
                  break;
                *(_DWORD *)(*v251 + 4 * v7) = v258[1];
                if (*v289)
                {
                  v6 = *v252;
                  if (*v252 <= v7)
                    goto LABEL_357;
                  *(_DWORD *)(*v253 + 4 * v7) = v258[2];
                }
                if (*v287)
                {
                  v6 = *v254;
                  if (*v254 <= v7)
                    goto LABEL_359;
                  *(_DWORD *)(*v255 + 4 * v7) = v258[3];
                }
                if (*v285)
                {
                  v6 = *v256;
                  if (*v256 <= v7)
                    goto LABEL_361;
                  *(_DWORD *)(*v257 + 4 * v7) = v258[4];
                }
                if (v238 == ++v7)
                  goto LABEL_330;
              }
LABEL_355:
              v329 = 0;
              v349 = 0u;
              v350 = 0u;
              v347 = 0u;
              v348 = 0u;
              v346 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v335 = 136315906;
              *(_QWORD *)&v335[4] = "operator[]";
              v336 = 1024;
              v337 = 468;
              v338 = 2048;
              v339 = v7;
              v340 = 2048;
              v341 = v6;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_356:
              v329 = 0;
              v349 = 0u;
              v350 = 0u;
              v347 = 0u;
              v348 = 0u;
              v346 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v335 = 136315906;
              *(_QWORD *)&v335[4] = "operator[]";
              v336 = 1024;
              v337 = 468;
              v338 = 2048;
              v339 = v7;
              v340 = 2048;
              v341 = v9;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_357:
              v329 = 0;
              v349 = 0u;
              v350 = 0u;
              v347 = 0u;
              v348 = 0u;
              v346 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v335 = 136315906;
              *(_QWORD *)&v335[4] = "operator[]";
              v336 = 1024;
              v337 = 468;
              v338 = 2048;
              v339 = v7;
              v340 = 2048;
              v341 = v6;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_358:
              v329 = 0;
              v349 = 0u;
              v350 = 0u;
              v347 = 0u;
              v348 = 0u;
              v346 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v335 = 136315906;
              *(_QWORD *)&v335[4] = "operator[]";
              v336 = 1024;
              v337 = 468;
              v338 = 2048;
              v339 = v7;
              v340 = 2048;
              v341 = v9;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_359:
              v329 = 0;
              v349 = 0u;
              v350 = 0u;
              v347 = 0u;
              v348 = 0u;
              v346 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v335 = 136315906;
              *(_QWORD *)&v335[4] = "operator[]";
              v336 = 1024;
              v337 = 468;
              v338 = 2048;
              v339 = v7;
              v340 = 2048;
              v341 = v6;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_360:
              v329 = 0;
              v349 = 0u;
              v350 = 0u;
              v347 = 0u;
              v348 = 0u;
              v346 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v335 = 136315906;
              *(_QWORD *)&v335[4] = "operator[]";
              v336 = 1024;
              v337 = 468;
              v338 = 2048;
              v339 = v7;
              v340 = 2048;
              v341 = v9;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_361:
              v329 = 0;
              v349 = 0u;
              v350 = 0u;
              v347 = 0u;
              v348 = 0u;
              v346 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v335 = 136315906;
              *(_QWORD *)&v335[4] = "operator[]";
              v336 = 1024;
              v337 = 468;
              v338 = 2048;
              v339 = v7;
              v340 = 2048;
              v341 = v6;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_362:
              *(_QWORD *)&v320 = 0;
              v349 = 0u;
              v350 = 0u;
              v347 = 0u;
              v348 = 0u;
              v346 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v333[0]) = 136315906;
              *(_QWORD *)((char *)v333 + 4) = "operator[]";
              WORD6(v333[0]) = 1024;
              *(_DWORD *)((char *)v333 + 14) = 468;
              WORD1(v333[1]) = 2048;
              *(_QWORD *)((char *)&v333[1] + 4) = v30;
              WORD6(v333[1]) = 2048;
              *(_QWORD *)((char *)&v333[1] + 14) = v8;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_363;
            }
LABEL_330:
            if (v237 && *(_QWORD *)v330)
              (*(void (**)(_QWORD, unsigned int **, _BYTE *, _BYTE *, _BYTE *))(**(_QWORD **)v330 + 40))(*(_QWORD *)v330, v237, v289, v287, v285);
            v7 = v312;
          }
          ++v7;
        }
        while (v7 != v313);
      }
      v259 = *(_QWORD *)v316;
      v260 = v317;
      v261 = v318;
      v262 = v319;
      *(_BYTE *)v283 = 1;
      v283[1] = v259;
      *(_QWORD *)&v346 = 0;
      *((_QWORD *)&v346 + 1) = &str_110;
      v263 = *(_OWORD *)&v316[8];
      *(_QWORD *)v316 = 0;
      *(_QWORD *)&v316[8] = &str_110;
      v317 = 0;
      v318 = 0;
      *(_QWORD *)&v316[16] = 0;
      *((_OWORD *)v283 + 1) = v263;
      v347 = 0uLL;
      v283[4] = v260;
      v283[5] = v261;
      *(_QWORD *)&v348 = 0;
      *((_QWORD *)&v348 + 1) = v262;
      v283[6] = v262;
      re::FixedArray<re::BlendShapeDefinition>::deinit(&v347);
      re::StringID::destroyString((re::StringID *)&v346);
      v174 = &v316[16];
LABEL_336:
      if (v313)
      {
        v264 = 0;
        do
        {
          v176.n128_f64[0] = re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)&v8[v264]);
          v264 += 6;
        }
        while (6 * v313 != v264);
LABEL_339:
      }
      goto LABEL_340;
    }
LABEL_67:
    v67 = (_anonymous_namespace_ *)std::system_category();
    v68 = "Deformation model has mismatched buffer and name counts";
    goto LABEL_68;
  }
  v27 = *(_QWORD **)this;
  if (!v27)
    goto LABEL_66;
  v6 = v27[2];
  if (v6 != v27[8])
    goto LABEL_67;
  if (v6 <= v9)
    goto LABEL_369;
  v28 = v27[3];
  re::ReadOnlyCPUAccessibleBufferSliceContent::make((_QWORD *)(v28 + 168 * v9 + 72), (uint64_t)&v342);
  if (!(_BYTE)v342)
  {
    v71 = (_anonymous_namespace_ *)std::system_category();
    v72 = v346;
    v73 = v347;
    *(_BYTE *)a3 = 0;
    a3[1] = 0;
    a3[2] = (unint64_t)v71;
    *(_OWORD *)(a3 + 3) = v72;
    *(_OWORD *)(a3 + 5) = v73;
    goto LABEL_343;
  }
  v283 = a3;
  v19 = *(_QWORD *)(v28 + 168 * v9);
  v324 = 0;
  *(_QWORD *)&v325 = &str_110;
  HIDWORD(v328) = 0;
  v326 = 0;
  v327 = 0;
  *((_QWORD *)&v325 + 1) = 0;
  LOBYTE(v328) = 0;
  v7 = v27[8];
  if (v7 <= v9)
    goto LABEL_370;
  v29 = re::StringID::operator=(&v324, (uint64_t *)(v27[9] + 16 * v9));
  LOBYTE(v328) = 2;
  v6 = *(unsigned int *)(v28 + 168 * v9 + 12);
  HIDWORD(v328) = v6 / 3;
  if (!v19)
  {
LABEL_53:
    v53 = v324;
    v54 = v326;
    v55 = v327;
    v56 = v328;
    *(_BYTE *)v283 = 1;
    v283[1] = v53;
    *(_QWORD *)&v346 = 0;
    *((_QWORD *)&v346 + 1) = &str_110;
    v57 = v325;
    v324 = 0;
    *(_QWORD *)&v325 = &str_110;
    v326 = 0;
    v327 = 0;
    *((_QWORD *)&v325 + 1) = 0;
    *((_OWORD *)v283 + 1) = v57;
    v347 = 0uLL;
    v283[4] = (unint64_t)v54;
    v283[5] = v55;
    *(_QWORD *)&v348 = 0;
    *((_QWORD *)&v348 + 1) = v56;
    v283[6] = v56;
    re::FixedArray<re::BlendShapeDefinition>::deinit(&v347);
    re::StringID::destroyString((re::StringID *)&v346);
    re::FixedArray<re::BlendShapeDefinition>::deinit((_QWORD *)&v325 + 1);
    re::StringID::destroyString((re::StringID *)&v324);
    goto LABEL_343;
  }
  v30 = 0;
  v12 = v343;
  v31 = v28 + 168 * v9;
  v308 = (unint64_t *)(v31 + 32);
  v313 = ((v19 + 3) & 0x3FFFFFFFFFFFFFFCLL) * v6;
  v300 = v343;
  v304 = (_QWORD *)(v31 + 40);
  v293 = (_BYTE *)(v31 + 49);
  v295 = (_BYTE *)(v31 + 48);
  v290 = (_BYTE *)(v31 + 50);
  v32 = (v19 + 3) >> 2;
  v9 = 16 * v32;
  v3 = &v343[4 * v6 * v32];
  v7 = 136;
  while (1)
  {
    v8 = v326;
    if ((unint64_t)v326 <= v30)
      goto LABEL_362;
    v8 = (unint64_t *)*v308;
    if (*v308 <= v30)
    {
LABEL_363:
      *(_QWORD *)&v320 = 0;
      v349 = 0u;
      v350 = 0u;
      v347 = 0u;
      v348 = 0u;
      v346 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v333[0]) = 136315906;
      *(_QWORD *)((char *)v333 + 4) = "operator[]";
      WORD6(v333[0]) = 1024;
      *(_DWORD *)((char *)v333 + 14) = 476;
      WORD1(v333[1]) = 2048;
      *(_QWORD *)((char *)&v333[1] + 4) = v30;
      WORD6(v333[1]) = 2048;
      *(_QWORD *)((char *)&v333[1] + 14) = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_364;
    }
    v33 = v327;
    v34 = re::StringID::operator=((unint64_t *)(v327 + 136 * v30), (uint64_t *)(*v304 + 16 * v30));
    a3 = v34 + 5;
    if ((_DWORD)v6)
    {
      v36 = 0;
      v37 = v33 + 136 * v30;
      v38 = *(_QWORD *)(v37 + 48);
      v39 = (_QWORD *)(v37 + 56);
      v40 = v12;
      while (v38 != v36)
      {
        *(_DWORD *)(*v39 + 4 * v36++) = *v40;
        v40 = (_DWORD *)((char *)v40 + v9);
        if (v6 == v36)
          goto LABEL_35;
      }
      *(_QWORD *)&v320 = 0;
      v349 = 0u;
      v350 = 0u;
      v347 = 0u;
      v348 = 0u;
      v346 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v333[0]) = 136315906;
      *(_QWORD *)((char *)v333 + 4) = "operator[]";
      WORD6(v333[0]) = 1024;
      *(_DWORD *)((char *)v333 + 14) = 468;
      WORD1(v333[1]) = 2048;
      *(_QWORD *)((char *)&v333[1] + 4) = v38;
      WORD6(v333[1]) = 2048;
      *(_QWORD *)((char *)&v333[1] + 14) = v38;
      _os_log_send_and_compose_impl();
      v20 = (_anonymous_namespace_ *)_os_crash_msg();
      __break(1u);
      goto LABEL_93;
    }
LABEL_35:
    v8 = (unint64_t *)&v300[v30 + v313];
    if (*v295)
    {
      if ((_DWORD)v6)
      {
        v41 = 0;
        v42 = v33 + 136 * v30;
        v43 = *(_QWORD *)(v42 + 72);
        v44 = (_QWORD *)(v42 + 80);
        v45 = v3;
        while (v43 != v41)
        {
          *(_DWORD *)(*v44 + 4 * v41++) = *v45;
          v45 = (_DWORD *)((char *)v45 + v9);
          if (v6 == v41)
            goto LABEL_40;
        }
        *(_QWORD *)&v320 = 0;
        v349 = 0u;
        v350 = 0u;
        v347 = 0u;
        v348 = 0u;
        v346 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v333[0]) = 136315906;
        *(_QWORD *)((char *)v333 + 4) = "operator[]";
        WORD6(v333[0]) = 1024;
        *(_DWORD *)((char *)v333 + 14) = 468;
        WORD1(v333[1]) = 2048;
        *(_QWORD *)((char *)&v333[1] + 4) = v43;
        WORD6(v333[1]) = 2048;
        *(_QWORD *)((char *)&v333[1] + 14) = v43;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_346;
      }
LABEL_40:
      v8 = (unint64_t *)((char *)v8 + 4 * v313);
    }
    if (*v293)
    {
      if ((_DWORD)v6)
      {
        v46 = 0;
        v47 = v33 + 136 * v30;
        v43 = *(_QWORD *)(v47 + 96);
        v48 = (_QWORD *)(v47 + 104);
        v49 = v8;
        while (v43 != v46)
        {
          *(_DWORD *)(*v48 + 4 * v46++) = *(_DWORD *)v49;
          v49 = (unint64_t *)((char *)v49 + v9);
          if (v6 == v46)
            goto LABEL_46;
        }
LABEL_346:
        *(_QWORD *)&v320 = 0;
        v349 = 0u;
        v350 = 0u;
        v347 = 0u;
        v348 = 0u;
        v346 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v333[0]) = 136315906;
        *(_QWORD *)((char *)v333 + 4) = "operator[]";
        WORD6(v333[0]) = 1024;
        *(_DWORD *)((char *)v333 + 14) = 468;
        WORD1(v333[1]) = 2048;
        *(_QWORD *)((char *)&v333[1] + 4) = v43;
        WORD6(v333[1]) = 2048;
        *(_QWORD *)((char *)&v333[1] + 14) = v43;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_347;
      }
LABEL_46:
      v8 = (unint64_t *)((char *)v8 + 4 * v313);
    }
    if (*v290)
    {
      if ((_DWORD)v6)
        break;
    }
LABEL_52:
    ++v30;
    ++v12;
    ++v3;
    if (v30 == v19)
      goto LABEL_53;
  }
  v50 = 0;
  v51 = v33 + 136 * v30;
  v43 = *(_QWORD *)(v51 + 120);
  v52 = (_QWORD *)(v51 + 128);
  while (v43 != v50)
  {
    *(_DWORD *)(*v52 + 4 * v50++) = *(_DWORD *)v8;
    v8 = (unint64_t *)((char *)v8 + v9);
    if (v6 == v50)
      goto LABEL_52;
  }
LABEL_347:
  *(_QWORD *)&v320 = 0;
  v349 = 0u;
  v350 = 0u;
  v347 = 0u;
  v348 = 0u;
  v346 = 0u;
  v109 = MEMORY[0x24BDACB70];
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  LODWORD(v333[0]) = 136315906;
  *(_QWORD *)((char *)v333 + 4) = "operator[]";
  WORD6(v333[0]) = 1024;
  *(_DWORD *)((char *)v333 + 14) = 468;
  WORD1(v333[1]) = 2048;
  *(_QWORD *)((char *)&v333[1] + 4) = v43;
  WORD6(v333[1]) = 2048;
  *(_QWORD *)((char *)&v333[1] + 14) = v43;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_348:
  *(_QWORD *)v335 = 0;
  v349 = 0u;
  v350 = 0u;
  v347 = 0u;
  v348 = 0u;
  v346 = 0u;
  v265 = v98;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  *(_DWORD *)v330 = 136315906;
  *(_QWORD *)&v330[4] = "operator[]";
  *(_WORD *)&v330[12] = 1024;
  *(_DWORD *)&v330[14] = 468;
  *(_WORD *)&v330[18] = 2048;
  *(_QWORD *)&v330[20] = v109;
  v331 = 2048;
  *(_QWORD *)v332 = v265;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_349:
  *(_QWORD *)v335 = 0;
  v349 = 0u;
  v350 = 0u;
  v347 = 0u;
  v348 = 0u;
  v346 = 0u;
  v266 = v184;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  *(_DWORD *)v330 = 136315906;
  *(_QWORD *)&v330[4] = "operator[]";
  *(_WORD *)&v330[12] = 1024;
  *(_DWORD *)&v330[14] = 468;
  *(_WORD *)&v330[18] = 2048;
  *(_QWORD *)&v330[20] = v19;
  v331 = 2048;
  *(_QWORD *)v332 = v266;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_350:
  v267 = (_anonymous_namespace_ *)std::system_category();
  v268 = v346;
  v269 = v347;
  *(_BYTE *)v283 = 0;
  v283[1] = 0;
  v283[2] = (unint64_t)v267;
  *(_OWORD *)(v283 + 3) = v268;
  *(_OWORD *)(v283 + 5) = v269;
LABEL_212:
  v174 = v276;
  if (v313)
  {
    v175 = 0;
    do
    {
      v176.n128_f64[0] = re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)&v8[v175]);
      v175 += 6;
    }
    while (6 * v313 != v175);
    goto LABEL_339;
  }
LABEL_340:
  re::FixedArray<re::BlendShapeDefinition>::deinit(v174);
  re::StringID::destroyString((re::StringID *)v316);
LABEL_341:
  re::ReadOnlyCPUAccessibleBufferSliceContent::~ReadOnlyCPUAccessibleBufferSliceContent((re::ReadOnlyCPUAccessibleBufferSliceContent *)&v320);
  re::ReadOnlyCPUAccessibleBufferSliceContent::~ReadOnlyCPUAccessibleBufferSliceContent((re::ReadOnlyCPUAccessibleBufferSliceContent *)v333);
LABEL_342:
  re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)&v324);
LABEL_343:
  re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)&v342);
  return (re::DynamicString *)re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)v314);
}

uint64_t re::BlendShapeModelUtil::computeBlendShapeModelSizeExcludingMetalBuffers(re::BlendShapeModelUtil *this, const DeformationModelData *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char **v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  const char **v12;
  size_t v13;

  v2 = *(_QWORD **)this;
  if (!*(_QWORD *)this)
    return 0;
  v3 = v2[2];
  v4 = 168 * v3 + 80;
  if (v3)
  {
    v5 = 0;
    v6 = v2[3];
    do
    {
      v7 = *(_QWORD *)(v6 + 168 * v5 + 32);
      v4 += 16 * v7;
      if (v7)
      {
        v8 = (const char **)(*(_QWORD *)(v6 + 168 * v5 + 40) + 8);
        do
        {
          if ((*(_BYTE *)(v8 - 1) & 1) != 0)
            v9 = strlen(*v8) + 1;
          else
            v9 = 0;
          v4 += v9;
          v8 += 2;
          --v7;
        }
        while (v7);
      }
      ++v5;
    }
    while (v5 != v3);
  }
  v10 = v2[8];
  v11 = v4 + 4 * v2[5] + 16 * v10;
  if (v10)
  {
    v12 = (const char **)(v2[9] + 8);
    do
    {
      if ((*(_BYTE *)(v12 - 1) & 1) != 0)
        v13 = strlen(*v12) + 1;
      else
        v13 = 0;
      v11 += v13;
      v12 += 2;
      --v10;
    }
    while (v10);
  }
  return v11;
}

void re::BlendShapeDeformer::~BlendShapeDeformer(re::BlendShapeDeformer *this)
{
  re::BlendShapeDeformer::~BlendShapeDeformer(this);
  JUMPOUT(0x2276933B8);
}

{
  void *v2;
  void *v3;
  uint64_t i;
  void *v5;
  void *v6;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {

    *((_QWORD *)this + 6) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 5);
  if (v3)
  {

    *((_QWORD *)this + 5) = 0;
  }
  for (i = 32; i != 16; i -= 8)
  {
    v5 = *(void **)((char *)this + i);
    if (v5)
    {

      *(_QWORD *)((char *)this + i) = 0;
    }
  }
  do
  {
    v6 = *(void **)((char *)this + i);
    if (v6)
    {

      *(_QWORD *)((char *)this + i) = 0;
    }
    i -= 8;
  }
  while (i);
}

void re::`anonymous namespace'::allocateBlendShapeBufferData(void *a1, uint64_t a2, unint64_t a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *v6;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64x2_t v13;
  id v14;
  uint64_t v15;
  id *v16;
  unsigned int *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  re *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[18];
  __int16 v55;
  unint64_t v56;
  __int16 v57;
  unint64_t v58;
  id v59[2];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  v6 = a6;
  v65 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v10 = *(_QWORD *)(a2 + 16);
    if (v10 > a3)
    {
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = *(_QWORD *)(a2 + 24);
      do
      {
        if (v30 == 1)
          v31 += a6[1];
        else
          v32 += a6[v30];
        ++v30;
      }
      while (v30 != 6);
      v34 = (_QWORD *)(v33 + 184 * a3);
      v35 = re::globalAllocators(0);
      re::FixedArray<BOOL>::init<>(v34 + 5, v35[2], v31);
      v37 = re::globalAllocators(v36);
      re::FixedArray<BOOL>::init<>(v34 + 8, v37[2], v32);
      v38 = 0;
      v39 = 0;
      v40 = 0;
      v41 = v6;
      do
      {
        v43 = *a5++;
        v42 = v43;
        if (v43)
        {
          if (v38 == 2)
          {
            a4[2] = v34[7] + v40;
            a4[3] = v42;
            v40 += v6[1];
          }
          else
          {
            v45 = &a4[v38];
            *v45 = v34[10] + v39;
            v45[1] = v42;
            v39 += *v41;
          }
        }
        else
        {
          v44 = &a4[v38];
          *v44 = 0;
          v44[1] = 0;
        }
        v38 += 2;
        ++v41;
      }
      while (v38 != 12);
      v46 = a4[1];
      v47 = (_QWORD *)(v33 + 184 * a3);
      v47[13] = *a4;
      v47[14] = v46;
      v48 = a4[3];
      v47[11] = a4[2];
      v47[12] = v48;
      v49 = a4[5];
      v47[15] = a4[4];
      v47[16] = v49;
      v50 = a4[7];
      v47[17] = a4[6];
      v47[18] = v50;
      v51 = a4[9];
      v47[19] = a4[8];
      v47[20] = v51;
      v52 = a4[11];
      v47[21] = a4[10];
      v47[22] = v52;
      return;
    }
LABEL_35:
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    *(_OWORD *)v59 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v54 = 136315906;
    *(_QWORD *)&v54[4] = "operator[]";
    *(_WORD *)&v54[12] = 1024;
    *(_DWORD *)&v54[14] = 468;
    v55 = 2048;
    v56 = a3;
    v57 = 2048;
    v58 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v10 = *(_QWORD *)(a2 + 16);
  if (v10 <= a3)
  {
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    *(_OWORD *)v59 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v54 = 136315906;
    *(_QWORD *)&v54[4] = "operator[]";
    *(_WORD *)&v54[12] = 1024;
    *(_DWORD *)&v54[14] = 468;
    v55 = 2048;
    v56 = a3;
    v57 = 2048;
    v58 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_35;
  }
  v11 = 0;
  v12 = *(_QWORD *)(a2 + 24);
  v13 = 0uLL;
  do
  {
    v13 = vaddq_s64(*(int64x2_t *)&a6[v11], v13);
    v11 += 2;
  }
  while (v11 != 6);
  v14 = objc_msgSend(a1, sel_newBufferWithLength_options_, vaddvq_s64(v13), 0);
  v59[0] = v14;
  LODWORD(v59[1]) = 0;
  HIDWORD(v59[1]) = objc_msgSend(v14, sel_length);
  v53 = v12;
  v15 = v12 + 168 * a3;
  v16 = (id *)(v15 + 56);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v15 + 56), v59);
  *(id *)(v15 + 64) = v59[1];
  v17 = (unsigned int *)(v15 + 64);
  if (v59[0])
  {

    v59[0] = 0;
  }
  if (v14)

  v18 = *v17;
  v19 = *v16;
  v20 = 0;
  v21 = (char *)objc_msgSend(*v16, sel_contents) + *v17;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  *(_OWORD *)v59 = 0u;
  v60 = 0u;
  do
  {
    v22 = *a5;
    *(_QWORD *)v54 = v19;
    *(_QWORD *)&v54[8] = __PAIR64__(v22, v18);
    NS::SharedPtr<MTL::Texture>::operator=(&v59[v20], (void **)v54);
    v23 = *(void **)v54;
    v59[v20 + 1] = *(id *)&v54[8];
    if (v23)

    v24 = *a5++;
    v25 = &a4[v20];
    *v25 = &v21[v18];
    v25[1] = v24;
    v26 = *v6++;
    v18 += v26;
    v20 += 2;
  }
  while (v20 != 12);
  v27 = v53 + 168 * a3;
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v27 + 88), v59);
  *(id *)(v27 + 96) = v59[1];
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v27 + 72), (void **)&v60);
  *(_QWORD *)(v27 + 80) = *((_QWORD *)&v60 + 1);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v27 + 104), (void **)&v61);
  *(_QWORD *)(v27 + 112) = *((_QWORD *)&v61 + 1);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v27 + 120), (void **)&v62);
  *(_QWORD *)(v27 + 128) = *((_QWORD *)&v62 + 1);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v27 + 136), (void **)&v63);
  *(_QWORD *)(v27 + 144) = *((_QWORD *)&v63 + 1);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v27 + 152), (void **)&v64);
  *(_QWORD *)(v27 + 160) = *((_QWORD *)&v64 + 1);
  for (i = 10; i != -2; i -= 2)
  {
    v29 = v59[i];
    if (v29)
    {

      v59[i] = 0;
    }
  }
  if (v19)

}

void re::internal::Callable<re::BlendShapeDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::BlendShapeDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a2;
  v3 = (*a2)[3];
  if (v3)
  {
    if (v2[4])
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v2[5]);
      v2[4] = 0;
      v2[5] = 0;
    }
    v2[3] = 0;
  }
  result = *v2;
  if (*v2)
  {
    if (v2[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v2[2]);
      v2[1] = 0;
      v2[2] = 0;
    }
    *v2 = 0;
  }
  return result;
}

_QWORD *re::internal::Callable<re::BlendShapeDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED76950;
  return result;
}

_QWORD *re::internal::Callable<re::BlendShapeDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED76950;
  return result;
}

uint64_t re::internal::Callable<re::BlendShapeDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::size()
{
  return 16;
}

void re::FixedArray<re::FrameContextBuffer>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >= 0xAAAAAAAAAAAAAABLL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 24, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 24 * a3;
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 24 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 24);
    v8 = (_QWORD *)((char *)v8 + v5 - 24);
  }
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
}

void _ZNSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_18BlendShapeDeformerENS2_22BlendShapeModelPayloadEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EED0Ev()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_18BlendShapeDeformerENS2_22BlendShapeModelPayloadEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED769A8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_18BlendShapeDeformerENS2_22BlendShapeModelPayloadEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE7__cloneEPNS0_6__baseISI_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED769A8;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_18BlendShapeDeformerENS2_22BlendShapeModelPayloadEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EEclEOSE_(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(result + 8);
    re::FixedArray<re::StringID>::deinit((_QWORD *)(v2 + 56));
    v4 = *(_QWORD *)(v2 + 32);
    if (v4)
    {
      if (*(_QWORD *)(v2 + 40))
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(v2 + 48));
        *(_QWORD *)(v2 + 40) = 0;
        *(_QWORD *)(v2 + 48) = 0;
      }
      *(_QWORD *)(v2 + 32) = 0;
    }
    if (*(_QWORD *)(v2 + 8))
    {
      v5 = *(_QWORD *)(v2 + 16);
      if (v5)
      {
        v6 = 184 * v5;
        v7 = (_QWORD *)(*(_QWORD *)(v2 + 24) + 40);
        do
        {
          v8 = v7[3];
          if (v8)
          {
            if (v7[4])
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, v7[5]);
              v7[4] = 0;
              v7[5] = 0;
            }
            v7[3] = 0;
          }
          if (*v7)
          {
            if (v7[1])
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v7 + 40))(*v7, v7[2]);
              v7[1] = 0;
              v7[2] = 0;
            }
            *v7 = 0;
          }
          re::FixedArray<re::StringID>::deinit(v7 - 3);
          v7 += 23;
          v6 -= 184;
        }
        while (v6);
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 8) + 40))(*(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 24));
        *(_QWORD *)(v2 + 16) = 0;
        *(_QWORD *)(v2 + 24) = 0;
      }
      *(_QWORD *)(v2 + 8) = 0;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_18BlendShapeDeformerENS2_22BlendShapeModelPayloadEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_18BlendShapeDeformerENS2_22BlendShapeModelPayloadEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE11target_typeEv()
{
}

void _ZNSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_18BlendShapeDeformerENS2_12_GLOBAL__N_115BlendShapeModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISG_EEFvSF_EED0Ev()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_18BlendShapeDeformerENS2_12_GLOBAL__N_115BlendShapeModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISG_EEFvSF_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED76A28;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_18BlendShapeDeformerENS2_12_GLOBAL__N_115BlendShapeModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISG_EEFvSF_EE7__cloneEPNS0_6__baseISJ_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED76A28;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_18BlendShapeDeformerENS2_12_GLOBAL__N_115BlendShapeModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISG_EEFvSF_EEclEOSF_(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(result + 8);
    re::FixedArray<re::StringID>::deinit((_QWORD *)(v2 + 56));
    v4 = *(_QWORD *)(v2 + 32);
    if (v4)
    {
      if (*(_QWORD *)(v2 + 40))
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(v2 + 48));
        *(_QWORD *)(v2 + 40) = 0;
        *(_QWORD *)(v2 + 48) = 0;
      }
      *(_QWORD *)(v2 + 32) = 0;
    }
    if (*(_QWORD *)(v2 + 8))
    {
      v5 = *(_QWORD *)(v2 + 16);
      if (v5)
      {
        v6 = 168 * v5;
        v7 = *(_QWORD *)(v2 + 24) + 88;
        do
        {
          v8 = *(void **)(v7 + 64);
          if (v8)
          {

            *(_QWORD *)(v7 + 64) = 0;
          }
          v9 = *(void **)(v7 + 48);
          if (v9)
          {

            *(_QWORD *)(v7 + 48) = 0;
          }
          v10 = *(void **)(v7 + 32);
          if (v10)
          {

            *(_QWORD *)(v7 + 32) = 0;
          }
          v11 = *(void **)(v7 + 16);
          if (v11)
          {

            *(_QWORD *)(v7 + 16) = 0;
          }
          if (*(_QWORD *)v7)
          {

            *(_QWORD *)v7 = 0;
          }
          v12 = *(void **)(v7 - 16);
          if (v12)
          {

            *(_QWORD *)(v7 - 16) = 0;
          }
          v13 = *(void **)(v7 - 32);
          if (v13)
          {

            *(_QWORD *)(v7 - 32) = 0;
          }
          re::FixedArray<re::StringID>::deinit((_QWORD *)(v7 - 64));
          v7 += 168;
          v6 -= 168;
        }
        while (v6);
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 8) + 40))(*(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 24));
        *(_QWORD *)(v2 + 16) = 0;
        *(_QWORD *)(v2 + 24) = 0;
      }
      *(_QWORD *)(v2 + 8) = 0;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_18BlendShapeDeformerENS2_12_GLOBAL__N_115BlendShapeModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISG_EEFvSF_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_18BlendShapeDeformerENS2_12_GLOBAL__N_115BlendShapeModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISG_EEFvSF_EE11target_typeEv()
{
}

_anonymous_namespace_ *re::DynamicArray<void re::`anonymous namespace'::buildSparseBlendShape<unsigned int>(re::mtl::Device const&,re::BlendShapeGroupDefinition const&,re::DeformationModelData &,unsigned long)::ComponentInfluence>::add(_anonymous_namespace_ *result, _QWORD *a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  v5 = *((_QWORD *)result + 2);
  v6 = v5 + 1;
  if (v5 >= v4 && v4 < v6)
  {
    if (*(_QWORD *)result)
    {
      v8 = 2 * v4;
      v9 = v4 == 0;
      v10 = 8;
      if (!v9)
        v10 = v8;
      if (v10 <= v6)
        v11 = v6;
      else
        v11 = v10;
    }
    else
    {
      ++*((_DWORD *)v3 + 6);
    }
  }
  *(_QWORD *)(*((_QWORD *)v3 + 4) + 8 * (*((_QWORD *)v3 + 2))++) = *a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::DynamicArray<void re::`anonymous namespace'::buildSparseBlendShape<unsigned int>(re::mtl::Device const&,re::BlendShapeGroupDefinition const&,re::DeformationModelData &,unsigned long)::ComponentInfluence>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 61)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 8, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 8 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 8 * a2, 4);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 8 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned int,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _DWORD *a4, __int128 *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  __int128 v26;
  _BYTE v28[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(_QWORD *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned int,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::init((uint64_t)v28, v13, v12);
          v15 = *(_OWORD *)v28;
          *(_OWORD *)v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v28[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v28[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned int,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21 - 4, v21);
              v21 += 40;
              --v20;
            }
            while (v20);
          }
          re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 40 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 40 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 40 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9) = a3;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 12) = *a4;
  v25 = *(_QWORD *)(a1 + 16) + 40 * v9;
  v26 = *a5;
  *(_DWORD *)(v25 + 32) = *((_DWORD *)a5 + 4);
  *(_OWORD *)(v25 + 16) = v26;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned int,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 40 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

_QWORD *re::DynamicArray<re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 61)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 8, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 8 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 8 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 8 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

unsigned int **std::__introsort<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**,false>(unsigned int **result, unsigned int **a2, uint64_t a3, char a4)
{
  unsigned int **v7;
  unsigned int **v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int **v18;
  unsigned int **v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int **v23;
  unsigned int **v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int **v27;
  BOOL v28;
  unsigned int *v29;
  unsigned int **v30;
  unsigned int **v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int **v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int **v40;
  BOOL v42;
  uint64_t v43;
  unsigned int **v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int **v49;
  int64_t v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  unsigned int **v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int **v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int **v69;
  unsigned int **v70;
  unsigned int **v71;
  unsigned int *v72;
  unsigned int *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  unsigned int **v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int **v83;
  unsigned int *v85;
  unsigned int *v86;
  unsigned int v87;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v38 = *(a2 - 1);
        v39 = *v8;
        if (*v38 < **v8)
        {
          *v8 = v38;
          *(a2 - 1) = v39;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v8, v8 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 <= 191)
        {
          v40 = v8 + 1;
          v42 = v8 == a2 || v40 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v42)
            {
              v43 = 0;
              v44 = v8;
              do
              {
                v46 = *v44;
                v45 = v44[1];
                v44 = v40;
                v47 = *v45;
                if (*v45 < *v46)
                {
                  v48 = v43;
                  while (1)
                  {
                    *(unsigned int **)((char *)v8 + v48 + 8) = v46;
                    if (!v48)
                      break;
                    v46 = *(unsigned int **)((char *)v8 + v48 - 8);
                    v48 -= 8;
                    if (v47 >= *v46)
                    {
                      v49 = (unsigned int **)((char *)v8 + v48 + 8);
                      goto LABEL_75;
                    }
                  }
                  v49 = v8;
LABEL_75:
                  *v49 = v45;
                }
                v40 = v44 + 1;
                v43 += 8;
              }
              while (v44 + 1 != a2);
            }
          }
          else if (!v42)
          {
            do
            {
              v86 = *v7;
              v85 = v7[1];
              v7 = v40;
              v87 = *v85;
              if (*v85 < *v86)
              {
                do
                {
                  *v40 = v86;
                  v86 = *(v40 - 2);
                  --v40;
                }
                while (v87 < *v86);
                *v40 = v85;
              }
              v40 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v50 = (v10 - 2) >> 1;
            v51 = v50;
            do
            {
              v52 = v51;
              if (v50 >= v51)
              {
                v53 = (2 * v51) | 1;
                v54 = &v8[v53];
                v55 = *v54;
                if (2 * v52 + 2 >= (uint64_t)v10)
                {
                  v56 = *v55;
                }
                else
                {
                  v56 = *v55;
                  v57 = *v54[1];
                  if (*v55 <= v57)
                    v56 = *v54[1];
                  if (*v55 < v57)
                  {
                    v55 = v54[1];
                    ++v54;
                    v53 = 2 * v52 + 2;
                  }
                }
                result = &v8[v52];
                v58 = *result;
                v59 = **result;
                if (v56 >= v59)
                {
                  do
                  {
                    v60 = v54;
                    *result = v55;
                    if (v50 < v53)
                      break;
                    v61 = (2 * v53) | 1;
                    v54 = &v8[v61];
                    v53 = 2 * v53 + 2;
                    v55 = *v54;
                    if (v53 >= (uint64_t)v10)
                    {
                      v62 = *v55;
                      v53 = v61;
                    }
                    else
                    {
                      v62 = *v55;
                      v63 = *v54[1];
                      if (*v55 <= v63)
                        v62 = *v54[1];
                      if (*v55 >= v63)
                      {
                        v53 = v61;
                      }
                      else
                      {
                        v55 = v54[1];
                        ++v54;
                      }
                    }
                    result = v60;
                  }
                  while (v62 >= v59);
                  *v60 = v58;
                }
              }
              v51 = v52 - 1;
            }
            while (v52);
            v64 = (unint64_t)v9 >> 3;
            do
            {
              v65 = 0;
              v66 = *v8;
              v67 = v64 - 2;
              if (v64 < 2)
                v67 = v64 - 1;
              v68 = v67 >> 1;
              v69 = v8;
              do
              {
                v70 = &v69[v65];
                v73 = v70[1];
                v71 = v70 + 1;
                v72 = v73;
                v74 = (2 * v65) | 1;
                v75 = 2 * v65 + 2;
                if (v75 < v64)
                {
                  result = (unsigned int **)v71[1];
                  v76 = *v72;
                  if (*v72 < *(_DWORD *)result)
                  {
                    v72 = v71[1];
                    ++v71;
                  }
                  if (v76 < *(_DWORD *)result)
                    v74 = v75;
                }
                *v69 = v72;
                v69 = v71;
                v65 = v74;
              }
              while (v74 <= v68);
              if (v71 == --a2)
              {
                *v71 = v66;
              }
              else
              {
                *v71 = *a2;
                *a2 = v66;
                v77 = (char *)v71 - (char *)v8 + 8;
                if (v77 >= 9)
                {
                  v78 = (((unint64_t)v77 >> 3) - 2) >> 1;
                  v79 = &v8[v78];
                  v80 = *v79;
                  v81 = *v71;
                  v82 = **v71;
                  if (**v79 < v82)
                  {
                    do
                    {
                      v83 = v79;
                      *v71 = v80;
                      if (!v78)
                        break;
                      v78 = (v78 - 1) >> 1;
                      v79 = &v8[v78];
                      v80 = *v79;
                      v71 = v83;
                    }
                    while (**v79 < v82);
                    *v83 = v81;
                  }
                }
              }
            }
            while (v64-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v7, &v7[v10 >> 1], a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v7 + 1, v12 - 1, a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        v15 = **v7;
        if ((a4 & 1) == 0 && **(v7 - 1) >= v15)
        {
          if (v15 >= **(a2 - 1))
          {
            v30 = v7 + 1;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              ++v30;
            }
            while (v15 >= **v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = v8[1];
              ++v8;
            }
            while (v15 >= *v29);
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
              v32 = *--v31;
            while (v15 < *v32);
          }
          if (v8 < v31)
          {
            v33 = *v8;
            v34 = *v31;
            do
            {
              *v8 = v34;
              *v31 = v33;
              do
              {
                v35 = v8[1];
                ++v8;
                v33 = v35;
              }
              while (v15 >= *v35);
              do
              {
                v36 = *--v31;
                v34 = v36;
              }
              while (v15 < *v36);
            }
            while (v8 < v31);
          }
          v37 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v37;
          a4 = 0;
          *v37 = v14;
          continue;
        }
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*v17 < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*v21 >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*v20 >= v15);
        }
        if (v18 >= v19)
        {
          v27 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = &v7[v16];
          v24 = v19;
          do
          {
            *v23 = v22;
            *v24 = v17;
            do
            {
              v25 = v23[1];
              ++v23;
              v17 = v25;
            }
            while (*v25 < v15);
            do
            {
              v26 = *--v24;
              v22 = v26;
            }
            while (*v26 >= v15);
          }
          while (v23 < v24);
          v27 = v23 - 1;
        }
        if (v27 != v7)
          *v7 = *v27;
        *v27 = v14;
        if (v18 < v19)
        {
LABEL_32:
          result = (unsigned int **)std::__introsort<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**,false>(v7, v27, a3, a4 & 1);
          a4 = 0;
          v8 = v27 + 1;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v7, v27);
        v8 = v27 + 1;
        result = (unsigned int **)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v27 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_32;
        }
        a2 = v27;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

unsigned int **std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(unsigned int **result, unsigned int **a2, unsigned int **a3)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;

  v3 = *a2;
  v4 = *result;
  v5 = **a2;
  v6 = **result;
  v7 = *a3;
  v8 = **a3;
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (**a2 < **result)
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (**a3 >= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(unsigned int **a1, unsigned int **a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int **v8;
  unsigned int **v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int **v17;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*v6 < **a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = **v9;
    if (v14 < **v8)
    {
      v15 = v11;
      while (1)
      {
        *(unsigned int **)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(unsigned int **)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *v13)
        {
          v17 = (unsigned int **)((char *)a1 + v16);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

unsigned int **std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(unsigned int **a1, unsigned int **a2, unsigned int **a3, unsigned int **a4)
{
  unsigned int **result;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(a1, a2, a3);
  v9 = *a3;
  if (**a4 < **a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (**a3 < **a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (**a2 < **a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

unsigned int **std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(unsigned int **a1, unsigned int **a2, unsigned int **a3, unsigned int **a4, unsigned int **a5)
{
  unsigned int **result;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(a1, a2, a3, a4);
  v11 = *a4;
  if (**a5 < **a4)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (**a4 < **a3)
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (**a3 < **a2)
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *a1;
        if (**a2 < **a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

unsigned int **std::__introsort<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const**,false>(unsigned int **result, unsigned int **a2, uint64_t a3, char a4)
{
  unsigned int **v7;
  unsigned int **v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int **v18;
  unsigned int **v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int **v23;
  unsigned int **v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int **v27;
  BOOL v28;
  unsigned int *v29;
  unsigned int **v30;
  unsigned int **v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int **v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int **v40;
  BOOL v42;
  uint64_t v43;
  unsigned int **v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int **v49;
  int64_t v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  unsigned int **v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int **v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int **v69;
  unsigned int **v70;
  unsigned int **v71;
  unsigned int *v72;
  unsigned int *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  unsigned int **v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int **v83;
  unsigned int *v85;
  unsigned int *v86;
  unsigned int v87;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v38 = *(a2 - 1);
        v39 = *v8;
        if (*v38 < **v8)
        {
          *v8 = v38;
          *(a2 - 1) = v39;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v8, v8 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 <= 191)
        {
          v40 = v8 + 1;
          v42 = v8 == a2 || v40 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v42)
            {
              v43 = 0;
              v44 = v8;
              do
              {
                v46 = *v44;
                v45 = v44[1];
                v44 = v40;
                v47 = *v45;
                if (*v45 < *v46)
                {
                  v48 = v43;
                  while (1)
                  {
                    *(unsigned int **)((char *)v8 + v48 + 8) = v46;
                    if (!v48)
                      break;
                    v46 = *(unsigned int **)((char *)v8 + v48 - 8);
                    v48 -= 8;
                    if (v47 >= *v46)
                    {
                      v49 = (unsigned int **)((char *)v8 + v48 + 8);
                      goto LABEL_75;
                    }
                  }
                  v49 = v8;
LABEL_75:
                  *v49 = v45;
                }
                v40 = v44 + 1;
                v43 += 8;
              }
              while (v44 + 1 != a2);
            }
          }
          else if (!v42)
          {
            do
            {
              v86 = *v7;
              v85 = v7[1];
              v7 = v40;
              v87 = *v85;
              if (*v85 < *v86)
              {
                do
                {
                  *v40 = v86;
                  v86 = *(v40 - 2);
                  --v40;
                }
                while (v87 < *v86);
                *v40 = v85;
              }
              v40 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v50 = (v10 - 2) >> 1;
            v51 = v50;
            do
            {
              v52 = v51;
              if (v50 >= v51)
              {
                v53 = (2 * v51) | 1;
                v54 = &v8[v53];
                v55 = *v54;
                if (2 * v52 + 2 >= (uint64_t)v10)
                {
                  v56 = *v55;
                }
                else
                {
                  v56 = *v55;
                  v57 = *v54[1];
                  if (*v55 <= v57)
                    v56 = *v54[1];
                  if (*v55 < v57)
                  {
                    v55 = v54[1];
                    ++v54;
                    v53 = 2 * v52 + 2;
                  }
                }
                result = &v8[v52];
                v58 = *result;
                v59 = **result;
                if (v56 >= v59)
                {
                  do
                  {
                    v60 = v54;
                    *result = v55;
                    if (v50 < v53)
                      break;
                    v61 = (2 * v53) | 1;
                    v54 = &v8[v61];
                    v53 = 2 * v53 + 2;
                    v55 = *v54;
                    if (v53 >= (uint64_t)v10)
                    {
                      v62 = *v55;
                      v53 = v61;
                    }
                    else
                    {
                      v62 = *v55;
                      v63 = *v54[1];
                      if (*v55 <= v63)
                        v62 = *v54[1];
                      if (*v55 >= v63)
                      {
                        v53 = v61;
                      }
                      else
                      {
                        v55 = v54[1];
                        ++v54;
                      }
                    }
                    result = v60;
                  }
                  while (v62 >= v59);
                  *v60 = v58;
                }
              }
              v51 = v52 - 1;
            }
            while (v52);
            v64 = (unint64_t)v9 >> 3;
            do
            {
              v65 = 0;
              v66 = *v8;
              v67 = v64 - 2;
              if (v64 < 2)
                v67 = v64 - 1;
              v68 = v67 >> 1;
              v69 = v8;
              do
              {
                v70 = &v69[v65];
                v73 = v70[1];
                v71 = v70 + 1;
                v72 = v73;
                v74 = (2 * v65) | 1;
                v75 = 2 * v65 + 2;
                if (v75 < v64)
                {
                  result = (unsigned int **)v71[1];
                  v76 = *v72;
                  if (*v72 < *(_DWORD *)result)
                  {
                    v72 = v71[1];
                    ++v71;
                  }
                  if (v76 < *(_DWORD *)result)
                    v74 = v75;
                }
                *v69 = v72;
                v69 = v71;
                v65 = v74;
              }
              while (v74 <= v68);
              if (v71 == --a2)
              {
                *v71 = v66;
              }
              else
              {
                *v71 = *a2;
                *a2 = v66;
                v77 = (char *)v71 - (char *)v8 + 8;
                if (v77 >= 9)
                {
                  v78 = (((unint64_t)v77 >> 3) - 2) >> 1;
                  v79 = &v8[v78];
                  v80 = *v79;
                  v81 = *v71;
                  v82 = **v71;
                  if (**v79 < v82)
                  {
                    do
                    {
                      v83 = v79;
                      *v71 = v80;
                      if (!v78)
                        break;
                      v78 = (v78 - 1) >> 1;
                      v79 = &v8[v78];
                      v80 = *v79;
                      v71 = v83;
                    }
                    while (**v79 < v82);
                    *v83 = v81;
                  }
                }
              }
            }
            while (v64-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v7, &v7[v10 >> 1], a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v7 + 1, v12 - 1, a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        v15 = **v7;
        if ((a4 & 1) == 0 && **(v7 - 1) >= v15)
        {
          if (v15 >= **(a2 - 1))
          {
            v30 = v7 + 1;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              ++v30;
            }
            while (v15 >= **v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = v8[1];
              ++v8;
            }
            while (v15 >= *v29);
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
              v32 = *--v31;
            while (v15 < *v32);
          }
          if (v8 < v31)
          {
            v33 = *v8;
            v34 = *v31;
            do
            {
              *v8 = v34;
              *v31 = v33;
              do
              {
                v35 = v8[1];
                ++v8;
                v33 = v35;
              }
              while (v15 >= *v35);
              do
              {
                v36 = *--v31;
                v34 = v36;
              }
              while (v15 < *v36);
            }
            while (v8 < v31);
          }
          v37 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v37;
          a4 = 0;
          *v37 = v14;
          continue;
        }
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*v17 < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*v21 >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*v20 >= v15);
        }
        if (v18 >= v19)
        {
          v27 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = &v7[v16];
          v24 = v19;
          do
          {
            *v23 = v22;
            *v24 = v17;
            do
            {
              v25 = v23[1];
              ++v23;
              v17 = v25;
            }
            while (*v25 < v15);
            do
            {
              v26 = *--v24;
              v22 = v26;
            }
            while (*v26 >= v15);
          }
          while (v23 < v24);
          v27 = v23 - 1;
        }
        if (v27 != v7)
          *v7 = *v27;
        *v27 = v14;
        if (v18 < v19)
        {
LABEL_32:
          result = (unsigned int **)std::__introsort<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const**,false>(v7, v27, a3, a4 & 1);
          a4 = 0;
          v8 = v27 + 1;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v7, v27);
        v8 = v27 + 1;
        result = (unsigned int **)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(v27 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_32;
        }
        a2 = v27;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned short>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(unsigned int **a1, unsigned int **a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int **v8;
  unsigned int **v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int **v17;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*v6 < **a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::{lambda(re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const*)#1} &,re::Result<re::BlendShapeGroupDefinition,re::DetailedError> re::makeSparseBlendShapeGroupDefinitionFromGroup<unsigned int>(re::DeformationModelData const&,unsigned int)::DeltaValues const**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = **v9;
    if (v14 < **v8)
    {
      v15 = v11;
      while (1)
      {
        *(unsigned int **)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(unsigned int **)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *v13)
        {
          v17 = (unsigned int **)((char *)a1 + v16);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

_anonymous_namespace_ *re::MaterialManager::init(re::MaterialManager *this, re::RenderManager *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,__int128 a31,__int128 a32,__int128 a33,__int128 a34,__int128 a35,__int128 a36,__int128 a37,__int128 a38,__int128 a39,__int128 a40,__int128 a41,__int128 a42,__int128 a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,__int128 a48,__int128 a49,__int128 a50,__int128 a51,__int128 a52,__int128 a53)
{
  id *v53;
  id *v54;
  re::MaterialManager *v55;
  re::MaterialManager *v56;
  unint64_t *v57;
  uint64_t v58;
  _anonymous_namespace_ *BufferTableForName;
  unint64_t v60;
  re::DynamicString *v61;
  re::DynamicString *v62;
  re::DynamicString *v63;
  re::DynamicString *v64;
  re::DynamicString *v65;
  re::DynamicString *v66;
  re::DynamicString *v67;
  re::DynamicString *v68;
  re::DynamicString *v69;
  re::DynamicString *v70;
  re::DynamicString *v71;
  re::DynamicString *v72;
  re::DynamicString *v73;
  re::DynamicString *v74;
  id *v75;
  id *v81;
  id *v82;
  id *v83;
  void *v84;
  re::BufferTable *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  _BYTE *v89;
  char v90;
  unsigned __int8 *v91;
  int v92;
  uint64_t v93;
  re::BufferTable *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  _BYTE *v98;
  char v99;
  unsigned __int8 *v100;
  int v101;
  uint64_t v102;
  re::BufferTable *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  _BYTE *v107;
  char v108;
  unsigned __int8 *v109;
  int v110;
  uint64_t v111;
  re::BufferTable *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  _BYTE *v116;
  char v117;
  unsigned __int8 *v118;
  int v119;
  uint64_t v120;
  re::BufferTable *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  _BYTE *v125;
  char v126;
  unsigned __int8 *v127;
  int v128;
  uint64_t v129;
  unint64_t *v130;
  re::BufferTable *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  _BYTE *v135;
  char v136;
  unsigned __int8 *v137;
  int v138;
  uint64_t v139;
  re::BufferTable *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  _BYTE *v144;
  char v145;
  unsigned __int8 *v146;
  int v147;
  uint64_t v148;
  re::BufferTable *v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  _BYTE *v153;
  char v154;
  unsigned __int8 *v155;
  int v156;
  uint64_t v157;
  re::BufferTable *v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  _BYTE *v162;
  char v163;
  unsigned __int8 *v164;
  int v165;
  uint64_t v166;
  re::BufferTable *v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  _BYTE *v171;
  char v172;
  unsigned __int8 *v173;
  int v174;
  uint64_t v175;
  re::BufferTable *v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  _BYTE *v180;
  char v181;
  unsigned __int8 *v182;
  int v183;
  uint64_t v184;
  re::BufferTable *v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  _BYTE *v189;
  char v190;
  unsigned __int8 *v191;
  int v192;
  uint64_t v193;
  re::BufferTable *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  _BYTE *v198;
  char v199;
  unsigned __int8 *v200;
  int v201;
  uint64_t v202;
  re::BufferTable *v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  _BYTE *v207;
  char v208;
  unsigned __int8 *v209;
  int v210;
  uint64_t v211;
  _anonymous_namespace_ *v212;
  _anonymous_namespace_ *v213;
  _anonymous_namespace_ *v214;
  _anonymous_namespace_ *v215;
  _anonymous_namespace_ *v216;
  _anonymous_namespace_ *v217;
  re::BufferTable *v218;
  re::BufferTable *v219;
  re::BufferTable *v220;
  void *v221;
  uint64_t v222;
  _QWORD *v223;
  _QWORD *v224;
  _QWORD *v225;
  re *v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t *v229;
  re *v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  _anonymous_namespace_ *v240;
  char ***v241;
  char ***v242;
  char **v243;
  uint64_t v244;
  int v245;
  char *v246;
  char *v247;
  char *v248;
  uint64_t v249;
  char v250;
  unsigned __int8 *v251;
  int v252;
  int v253;
  int v254;
  _anonymous_namespace_ *v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t *v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  __int128 *v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  __int128 v279;
  _anonymous_namespace_ *v280;
  uint64_t v282;
  unsigned int v283;
  id *v284;
  id *v285;
  id *v286;
  id *v287;
  id *v288;
  id *v289;
  id *v290;
  id *v291;
  id *v292;

  MEMORY[0x24BDAC7A8](this);
  v54 = v53;
  v56 = v55;
  v57 = &STACK[0xBF0];
  v58 = (uint64_t)&a38;
  STACK[0x10F8] = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)v55 + 112) = v53;
  *((_QWORD *)v55 + 83) = re::MaterialManager::createTextureTableForName(v55, "fallback");
  *((_QWORD *)v56 + 81) = re::MaterialManager::createTextureTableForName(v56, "light");
  *((_QWORD *)v56 + 82) = re::MaterialManager::createTextureTableForName(v56, "global");
  *((_QWORD *)v56 + 80) = re::MaterialManager::createTextureTableForName(v56, "brdf");
  BufferTableForName = (_anonymous_namespace_ *)re::MaterialManager::createBufferTableForName(v56, "fallback");
  *((_QWORD *)v56 + 91) = BufferTableForName;
  v60 = (unint64_t)v56 + 736;
  if (!*((_QWORD *)v56 + 93))
  {
LABEL_320:
    *(_QWORD *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 0;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_321;
  }
  v61 = (re::DynamicString *)*((_QWORD *)v56 + 94);
  STACK[0x3F0] = (unint64_t)"zeros";
  STACK[0x3F8] = 5;
  re::DynamicString::operator=(v61, (uint64_t)&STACK[0x3F0]);
  v60 = *((_QWORD *)v56 + 93);
  if (v60 <= 1)
  {
LABEL_321:
    *(_QWORD *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 1;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = v60;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_322;
  }
  v62 = (re::DynamicString *)(*((_QWORD *)v56 + 94) + 32);
  STACK[0x3F0] = (unint64_t)"ones";
  STACK[0x3F8] = 4;
  re::DynamicString::operator=(v62, (uint64_t)&STACK[0x3F0]);
  v60 = *((_QWORD *)v56 + 93);
  if (v60 <= 2)
  {
LABEL_322:
    *(_QWORD *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 2;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = v60;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_323;
  }
  v63 = (re::DynamicString *)(*((_QWORD *)v56 + 94) + 64);
  STACK[0x3F0] = (unint64_t)"xDir";
  STACK[0x3F8] = 4;
  re::DynamicString::operator=(v63, (uint64_t)&STACK[0x3F0]);
  v60 = *((_QWORD *)v56 + 93);
  if (v60 <= 3)
  {
LABEL_323:
    *(_QWORD *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 3;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = v60;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_324;
  }
  v64 = (re::DynamicString *)(*((_QWORD *)v56 + 94) + 96);
  STACK[0x3F0] = (unint64_t)"yDir";
  STACK[0x3F8] = 4;
  re::DynamicString::operator=(v64, (uint64_t)&STACK[0x3F0]);
  v60 = *((_QWORD *)v56 + 93);
  if (v60 <= 4)
  {
LABEL_324:
    *(_QWORD *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 4;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = v60;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_325;
  }
  v65 = (re::DynamicString *)(*((_QWORD *)v56 + 94) + 128);
  STACK[0x3F0] = (unint64_t)"zDir";
  STACK[0x3F8] = 4;
  re::DynamicString::operator=(v65, (uint64_t)&STACK[0x3F0]);
  v60 = *((_QWORD *)v56 + 93);
  if (v60 <= 5)
  {
LABEL_325:
    *(_QWORD *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 5;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = v60;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_326;
  }
  v66 = (re::DynamicString *)(*((_QWORD *)v56 + 94) + 160);
  STACK[0x3F0] = (unint64_t)"origin";
  STACK[0x3F8] = 6;
  re::DynamicString::operator=(v66, (uint64_t)&STACK[0x3F0]);
  v60 = *((_QWORD *)v56 + 93);
  if (v60 <= 6)
  {
LABEL_326:
    *(_QWORD *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 6;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = v60;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_327;
  }
  v67 = (re::DynamicString *)(*((_QWORD *)v56 + 94) + 192);
  STACK[0x3F0] = (unint64_t)"xUnit";
  STACK[0x3F8] = 5;
  re::DynamicString::operator=(v67, (uint64_t)&STACK[0x3F0]);
  v60 = *((_QWORD *)v56 + 93);
  if (v60 <= 7)
  {
LABEL_327:
    *(_QWORD *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 7;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = v60;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_328;
  }
  v68 = (re::DynamicString *)(*((_QWORD *)v56 + 94) + 224);
  STACK[0x3F0] = (unint64_t)"yUnit";
  STACK[0x3F8] = 5;
  re::DynamicString::operator=(v68, (uint64_t)&STACK[0x3F0]);
  v60 = *((_QWORD *)v56 + 93);
  if (v60 <= 8)
  {
LABEL_328:
    *(_QWORD *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 8;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = v60;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_329;
  }
  v69 = (re::DynamicString *)(*((_QWORD *)v56 + 94) + 256);
  STACK[0x3F0] = (unint64_t)"zUnit";
  STACK[0x3F8] = 5;
  re::DynamicString::operator=(v69, (uint64_t)&STACK[0x3F0]);
  v60 = *((_QWORD *)v56 + 93);
  if (v60 <= 9)
  {
LABEL_329:
    *(_QWORD *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 9;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = v60;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_330;
  }
  v70 = (re::DynamicString *)(*((_QWORD *)v56 + 94) + 288);
  STACK[0x3F0] = (unint64_t)"gray";
  STACK[0x3F8] = 4;
  re::DynamicString::operator=(v70, (uint64_t)&STACK[0x3F0]);
  v60 = *((_QWORD *)v56 + 93);
  if (v60 <= 0xA)
  {
LABEL_330:
    *(_QWORD *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 10;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = v60;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_331;
  }
  v71 = (re::DynamicString *)(*((_QWORD *)v56 + 94) + 320);
  STACK[0x3F0] = (unint64_t)"identityMatrix";
  STACK[0x3F8] = 14;
  re::DynamicString::operator=(v71, (uint64_t)&STACK[0x3F0]);
  v60 = *((_QWORD *)v56 + 93);
  if (v60 <= 0xB)
  {
LABEL_331:
    *(_QWORD *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 11;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = v60;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_332;
  }
  v72 = (re::DynamicString *)(*((_QWORD *)v56 + 94) + 352);
  STACK[0x3F0] = (unint64_t)"zeros128bytes";
  STACK[0x3F8] = 13;
  re::DynamicString::operator=(v72, (uint64_t)&STACK[0x3F0]);
  v60 = *((_QWORD *)v56 + 93);
  if (v60 <= 0xC)
  {
LABEL_332:
    *(_QWORD *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 12;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = v60;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_333;
  }
  v73 = (re::DynamicString *)(*((_QWORD *)v56 + 94) + 384);
  STACK[0x3F0] = (unint64_t)"zeros1024bytes";
  STACK[0x3F8] = 14;
  re::DynamicString::operator=(v73, (uint64_t)&STACK[0x3F0]);
  v60 = *((_QWORD *)v56 + 93);
  if (v60 <= 0xD)
  {
LABEL_333:
    *(_QWORD *)&a48 = 0;
    *(_OWORD *)(v58 + 672) = 0u;
    *(_OWORD *)(v58 + 688) = 0u;
    *(_OWORD *)(v58 + 640) = 0u;
    *(_OWORD *)(v58 + 656) = 0u;
    *(_OWORD *)(v58 + 624) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xBF0]) = 136315906;
    *(unint64_t *)((char *)v57 + 4) = (unint64_t)"operator[]";
    LOWORD(STACK[0xBFC]) = 1024;
    *(_DWORD *)((char *)v57 + 14) = 468;
    LOWORD(STACK[0xC02]) = 2048;
    *(unint64_t *)((char *)v57 + 20) = 13;
    LOWORD(STACK[0xC0C]) = 2048;
    *(unint64_t *)((char *)v57 + 30) = v60;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_334:
    a47 = 0;
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 0;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_335:
    a47 = 0;
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 1;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = (unint64_t)v54;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_336:
    a47 = 0;
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 2;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = (unint64_t)v54;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_337:
    a47 = 0;
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 3;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = (unint64_t)v54;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_338:
    a47 = 0;
    v130 = &STACK[0x1070];
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 4;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = (unint64_t)v57;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_339:
    a47 = 0;
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 5;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = (unint64_t)v130;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_340:
    a47 = 0;
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 6;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = (unint64_t)v130;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_341:
    a47 = 0;
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 7;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = (unint64_t)v130;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_342:
    a47 = 0;
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 8;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = (unint64_t)v130;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_343:
    a47 = 0;
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 9;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = (unint64_t)v130;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_344:
    a47 = 0;
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 10;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = (unint64_t)v130;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_345:
    a47 = 0;
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 11;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = (unint64_t)v130;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_346:
    a47 = 0;
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 12;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = (unint64_t)v130;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_347;
  }
  v74 = (re::DynamicString *)(*((_QWORD *)v56 + 94) + 416);
  STACK[0x3F0] = (unint64_t)"zeros2048bytes";
  STACK[0x3F8] = 14;
  re::DynamicString::operator=(v74, (uint64_t)&STACK[0x3F0]);
  a44 = 0;
  a45 = 0;
  STACK[0x3F0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &a44, 16, 0);
  v75 = (id *)((char *)v56 + 760);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 95, (void **)&STACK[0x3F0]);
  if (STACK[0x3F0])

  objc_msgSend(*((id *)v56 + 95), sel_setLabel_, CFSTR("fallback.zeros"));
  __asm { FMOV            V0.4S, #1.0 }
  a43 = _Q0;
  STACK[0x3F0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &a43, 16, 0);
  v81 = (id *)((char *)v56 + 768);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 96, (void **)&STACK[0x3F0]);
  if (STACK[0x3F0])

  objc_msgSend(*((id *)v56 + 96), sel_setLabel_, CFSTR("fallback.ones"));
  a42 = xmmword_2260E5F10;
  STACK[0x3F0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &a42, 16, 0);
  v82 = (id *)((char *)v56 + 776);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 97, (void **)&STACK[0x3F0]);
  if (STACK[0x3F0])

  objc_msgSend(*((id *)v56 + 97), sel_setLabel_, CFSTR("fallback.xDir"));
  a41 = xmmword_2260E5F20;
  STACK[0x3F0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &a41, 16, 0);
  v57 = (unint64_t *)((char *)v56 + 784);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 98, (void **)&STACK[0x3F0]);
  if (STACK[0x3F0])

  objc_msgSend(*((id *)v56 + 98), sel_setLabel_, CFSTR("fallback.yDir"));
  a40 = xmmword_2260E5F40;
  STACK[0x3F0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &a40, 16, 0);
  v83 = (id *)((char *)v56 + 792);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 99, (void **)&STACK[0x3F0]);
  if (STACK[0x3F0])

  objc_msgSend(*((id *)v56 + 99), sel_setLabel_, CFSTR("fallback.zDir"));
  a39 = xmmword_2260E5D70;
  STACK[0x3F0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &a39, 16, 0);
  v292 = (id *)((char *)v56 + 800);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 100, (void **)&STACK[0x3F0]);
  if (STACK[0x3F0])

  objc_msgSend(*((id *)v56 + 100), sel_setLabel_, CFSTR("fallback.origin"));
  a38 = xmmword_226104350;
  STACK[0x3F0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &a38, 16, 0);
  v291 = (id *)((char *)v56 + 808);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 101, (void **)&STACK[0x3F0]);
  if (STACK[0x3F0])

  objc_msgSend(*((id *)v56 + 101), sel_setLabel_, CFSTR("fallback.xUnit"));
  a37 = xmmword_22610BBE0;
  STACK[0x3F0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &a37, 16, 0);
  v290 = (id *)((char *)v56 + 816);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 102, (void **)&STACK[0x3F0]);
  if (STACK[0x3F0])

  objc_msgSend(*((id *)v56 + 102), sel_setLabel_, CFSTR("fallback.yUnit"));
  a36 = xmmword_22610BC10;
  STACK[0x3F0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &a36, 16, 0);
  v289 = (id *)((char *)v56 + 824);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 103, (void **)&STACK[0x3F0]);
  if (STACK[0x3F0])

  objc_msgSend(*((id *)v56 + 103), sel_setLabel_, CFSTR("fallback.zUnit"));
  a35 = xmmword_226146650;
  STACK[0x3F0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &a35, 16, 0);
  v288 = (id *)((char *)v56 + 832);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 104, (void **)&STACK[0x3F0]);
  if (STACK[0x3F0])

  objc_msgSend(*((id *)v56 + 104), sel_setLabel_, CFSTR("fallback.gray"));
  a31 = 0u;
  a32 = 0u;
  a33 = 0u;
  a34 = 0u;
  LODWORD(a31) = 1065353216;
  DWORD1(a32) = 1065353216;
  DWORD2(a33) = 1065353216;
  HIDWORD(a34) = 1065353216;
  STACK[0x3F0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &a31, 64, 0);
  v287 = (id *)((char *)v56 + 840);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 105, (void **)&STACK[0x3F0]);
  if (STACK[0x3F0])

  objc_msgSend(*((id *)v56 + 105), sel_setLabel_, CFSTR("fallback.identityMatrix"));
  *(_OWORD *)&STACK[0x1060] = 0u;
  *(_OWORD *)&STACK[0x1050] = 0u;
  *(_OWORD *)&STACK[0x1040] = 0u;
  *(_OWORD *)&STACK[0x1030] = 0u;
  *(_OWORD *)&STACK[0x1020] = 0u;
  *(_OWORD *)&STACK[0x1010] = 0u;
  *(_OWORD *)&STACK[0x1000] = 0u;
  *(_OWORD *)&STACK[0xFF0] = 0u;
  STACK[0x3F0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &STACK[0xFF0], 128, 0);
  v286 = (id *)((char *)v56 + 848);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 106, (void **)&STACK[0x3F0]);
  if (STACK[0x3F0])

  objc_msgSend(*((id *)v56 + 106), sel_setLabel_, CFSTR("fallback.zeros128bytes"));
  bzero(&STACK[0xBF0], 0x400uLL);
  STACK[0x3F0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &STACK[0xBF0], 1024, 0);
  v285 = (id *)((char *)v56 + 856);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 107, (void **)&STACK[0x3F0]);
  if (STACK[0x3F0])

  objc_msgSend(*((id *)v56 + 107), sel_setLabel_, CFSTR("fallback.zeros1024bytes"));
  bzero(&STACK[0x3F0], 0x800uLL);
  *(_QWORD *)&a48 = objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &STACK[0x3F0], 2048, 0);
  v284 = (id *)((char *)v56 + 864);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 108, (void **)&a48);
  if ((_QWORD)a48)

  objc_msgSend(*((id *)v56 + 108), sel_setLabel_, CFSTR("fallback.zeros2048bytes"));
  *(_QWORD *)&a48 = objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &re::GammaLUTHelper::gammaLUTData(void)::s_luts, 0x20000, 0);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 109, (void **)&a48);
  if ((_QWORD)a48)

  objc_msgSend(*((id *)v56 + 109), sel_setLabel_, CFSTR("gammaLUTs"));
  a48 = xmmword_2260E5F10;
  a49 = xmmword_2260E5F20;
  a50 = xmmword_2260E5F40;
  a51 = xmmword_2260E5D70;
  a52 = xmmword_2260E5F10;
  a53 = xmmword_2260E5F20;
  *(_OWORD *)&STACK[0x260] = xmmword_2260E5F40;
  *(_OWORD *)&STACK[0x270] = xmmword_2260E5D70;
  *(_OWORD *)&STACK[0x280] = xmmword_2260E5F10;
  *(_OWORD *)&STACK[0x290] = xmmword_2260E5F20;
  *(_OWORD *)&STACK[0x2A0] = xmmword_2260E5F40;
  *(_OWORD *)&STACK[0x2B0] = xmmword_2260E5F10;
  *(_OWORD *)&STACK[0x2C0] = xmmword_2260E5F20;
  *(_OWORD *)&STACK[0x2D0] = xmmword_2260E5F40;
  STACK[0x10A0] = (unint64_t)objc_msgSend(v54[23], sel_newBufferWithBytes_length_options_, &a48, 256, 0);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v56 + 110, (void **)&STACK[0x10A0]);
  v84 = (void *)STACK[0x10A0];
  if (STACK[0x10A0])

  v54 = (id *)*((_QWORD *)v56 + 91);
  if (!*((_QWORD *)v56 + 93))
    goto LABEL_334;
  v85 = (re::BufferTable *)*((_QWORD *)v56 + 91);
  v86 = *((_QWORD *)v56 + 94);
  v87 = *(_QWORD *)(v86 + 8);
  if ((v87 & 1) != 0)
  {
    v89 = *(_BYTE **)(v86 + 16);
    if (!v89)
    {
      v93 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_59;
    }
    LOBYTE(v86) = *v89;
  }
  else
  {
    v88 = v87 >> 8;
    v89 = (_BYTE *)(v86 + 9);
    LOBYTE(v86) = v88;
  }
  if ((_BYTE)v86)
  {
    v86 = (char)v86;
    v90 = v89[1];
    if (v90)
    {
      v91 = v89 + 2;
      do
      {
        v86 = 31 * v86 + v90;
        v92 = *v91++;
        v90 = v92;
      }
      while (v92);
    }
    v93 = v86 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v93 = 0;
  }
LABEL_59:
  STACK[0x1070] = v93;
  STACK[0x10A0] = (unint64_t)*v75;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*v75, sel_length);
  re::BufferTable::setBuffer(v85, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0])

  v54 = (id *)*((_QWORD *)v56 + 93);
  if ((unint64_t)v54 <= 1)
    goto LABEL_335;
  v94 = (re::BufferTable *)*((_QWORD *)v56 + 91);
  v95 = *((_QWORD *)v56 + 94);
  v96 = *(_QWORD *)(v95 + 40);
  if ((v96 & 1) != 0)
  {
    v98 = *(_BYTE **)(v95 + 48);
    if (!v98)
    {
      v102 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_73;
    }
    LOBYTE(v95) = *v98;
  }
  else
  {
    v97 = v96 >> 8;
    v98 = (_BYTE *)(v95 + 41);
    LOBYTE(v95) = v97;
  }
  if ((_BYTE)v95)
  {
    v95 = (char)v95;
    v99 = v98[1];
    if (v99)
    {
      v100 = v98 + 2;
      do
      {
        v95 = 31 * v95 + v99;
        v101 = *v100++;
        v99 = v101;
      }
      while (v101);
    }
    v102 = v95 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v102 = 0;
  }
LABEL_73:
  STACK[0x1070] = v102;
  STACK[0x10A0] = (unint64_t)*v81;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*v81, sel_length);
  re::BufferTable::setBuffer(v94, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0])

  v54 = (id *)*((_QWORD *)v56 + 93);
  if ((unint64_t)v54 <= 2)
    goto LABEL_336;
  v103 = (re::BufferTable *)*((_QWORD *)v56 + 91);
  v104 = *((_QWORD *)v56 + 94);
  v105 = *(_QWORD *)(v104 + 72);
  if ((v105 & 1) != 0)
  {
    v107 = *(_BYTE **)(v104 + 80);
    if (!v107)
    {
      v111 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_87;
    }
    LOBYTE(v104) = *v107;
  }
  else
  {
    v106 = v105 >> 8;
    v107 = (_BYTE *)(v104 + 73);
    LOBYTE(v104) = v106;
  }
  if ((_BYTE)v104)
  {
    v104 = (char)v104;
    v108 = v107[1];
    if (v108)
    {
      v109 = v107 + 2;
      do
      {
        v104 = 31 * v104 + v108;
        v110 = *v109++;
        v108 = v110;
      }
      while (v110);
    }
    v111 = v104 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v111 = 0;
  }
LABEL_87:
  STACK[0x1070] = v111;
  STACK[0x10A0] = (unint64_t)*v82;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*v82, sel_length);
  re::BufferTable::setBuffer(v103, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0])

  v54 = (id *)*((_QWORD *)v56 + 93);
  if ((unint64_t)v54 <= 3)
    goto LABEL_337;
  v112 = (re::BufferTable *)*((_QWORD *)v56 + 91);
  v113 = *((_QWORD *)v56 + 94);
  v114 = *(_QWORD *)(v113 + 104);
  if ((v114 & 1) != 0)
  {
    v116 = *(_BYTE **)(v113 + 112);
    if (!v116)
    {
      v120 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_101;
    }
    LOBYTE(v113) = *v116;
  }
  else
  {
    v115 = v114 >> 8;
    v116 = (_BYTE *)(v113 + 105);
    LOBYTE(v113) = v115;
  }
  if ((_BYTE)v113)
  {
    v113 = (char)v113;
    v117 = v116[1];
    if (v117)
    {
      v118 = v116 + 2;
      do
      {
        v113 = 31 * v113 + v117;
        v119 = *v118++;
        v117 = v119;
      }
      while (v119);
    }
    v120 = v113 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v120 = 0;
  }
LABEL_101:
  STACK[0x1070] = v120;
  STACK[0x10A0] = (unint64_t)(id)*v57;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend((id)*v57, sel_length);
  re::BufferTable::setBuffer(v112, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0])

  v57 = (unint64_t *)*((_QWORD *)v56 + 93);
  if ((unint64_t)v57 <= 4)
    goto LABEL_338;
  v121 = (re::BufferTable *)*((_QWORD *)v56 + 91);
  v122 = *((_QWORD *)v56 + 94);
  v123 = *(_QWORD *)(v122 + 136);
  if ((v123 & 1) != 0)
  {
    v125 = *(_BYTE **)(v122 + 144);
    if (!v125)
    {
      v129 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_115;
    }
    LOBYTE(v122) = *v125;
  }
  else
  {
    v124 = v123 >> 8;
    v125 = (_BYTE *)(v122 + 137);
    LOBYTE(v122) = v124;
  }
  if ((_BYTE)v122)
  {
    v122 = (char)v122;
    v126 = v125[1];
    if (v126)
    {
      v127 = v125 + 2;
      do
      {
        v122 = 31 * v122 + v126;
        v128 = *v127++;
        v126 = v128;
      }
      while (v128);
    }
    v129 = v122 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v129 = 0;
  }
LABEL_115:
  STACK[0x1070] = v129;
  STACK[0x10A0] = (unint64_t)*v83;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*v83, sel_length);
  re::BufferTable::setBuffer(v121, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0])

  v130 = (unint64_t *)*((_QWORD *)v56 + 93);
  if ((unint64_t)v130 <= 5)
    goto LABEL_339;
  v131 = (re::BufferTable *)*((_QWORD *)v56 + 91);
  v132 = *((_QWORD *)v56 + 94);
  v133 = *(_QWORD *)(v132 + 168);
  if ((v133 & 1) != 0)
  {
    v135 = *(_BYTE **)(v132 + 176);
    if (!v135)
    {
      v139 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_129;
    }
    LOBYTE(v132) = *v135;
  }
  else
  {
    v134 = v133 >> 8;
    v135 = (_BYTE *)(v132 + 169);
    LOBYTE(v132) = v134;
  }
  if ((_BYTE)v132)
  {
    v132 = (char)v132;
    v136 = v135[1];
    if (v136)
    {
      v137 = v135 + 2;
      do
      {
        v132 = 31 * v132 + v136;
        v138 = *v137++;
        v136 = v138;
      }
      while (v138);
    }
    v139 = v132 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v139 = 0;
  }
LABEL_129:
  STACK[0x1070] = v139;
  STACK[0x10A0] = (unint64_t)*v292;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*v292, sel_length);
  re::BufferTable::setBuffer(v131, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0])

  v130 = (unint64_t *)*((_QWORD *)v56 + 93);
  if ((unint64_t)v130 <= 6)
    goto LABEL_340;
  v140 = (re::BufferTable *)*((_QWORD *)v56 + 91);
  v141 = *((_QWORD *)v56 + 94);
  v142 = *(_QWORD *)(v141 + 200);
  if ((v142 & 1) != 0)
  {
    v144 = *(_BYTE **)(v141 + 208);
    if (!v144)
    {
      v148 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_143;
    }
    LOBYTE(v141) = *v144;
  }
  else
  {
    v143 = v142 >> 8;
    v144 = (_BYTE *)(v141 + 201);
    LOBYTE(v141) = v143;
  }
  if ((_BYTE)v141)
  {
    v141 = (char)v141;
    v145 = v144[1];
    if (v145)
    {
      v146 = v144 + 2;
      do
      {
        v141 = 31 * v141 + v145;
        v147 = *v146++;
        v145 = v147;
      }
      while (v147);
    }
    v148 = v141 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v148 = 0;
  }
LABEL_143:
  STACK[0x1070] = v148;
  STACK[0x10A0] = (unint64_t)*v291;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*v291, sel_length);
  re::BufferTable::setBuffer(v140, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0])

  v130 = (unint64_t *)*((_QWORD *)v56 + 93);
  if ((unint64_t)v130 <= 7)
    goto LABEL_341;
  v149 = (re::BufferTable *)*((_QWORD *)v56 + 91);
  v150 = *((_QWORD *)v56 + 94);
  v151 = *(_QWORD *)(v150 + 232);
  if ((v151 & 1) != 0)
  {
    v153 = *(_BYTE **)(v150 + 240);
    if (!v153)
    {
      v157 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_157;
    }
    LOBYTE(v150) = *v153;
  }
  else
  {
    v152 = v151 >> 8;
    v153 = (_BYTE *)(v150 + 233);
    LOBYTE(v150) = v152;
  }
  if ((_BYTE)v150)
  {
    v150 = (char)v150;
    v154 = v153[1];
    if (v154)
    {
      v155 = v153 + 2;
      do
      {
        v150 = 31 * v150 + v154;
        v156 = *v155++;
        v154 = v156;
      }
      while (v156);
    }
    v157 = v150 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v157 = 0;
  }
LABEL_157:
  STACK[0x1070] = v157;
  STACK[0x10A0] = (unint64_t)*v290;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*v290, sel_length);
  re::BufferTable::setBuffer(v149, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0])

  v130 = (unint64_t *)*((_QWORD *)v56 + 93);
  if ((unint64_t)v130 <= 8)
    goto LABEL_342;
  v158 = (re::BufferTable *)*((_QWORD *)v56 + 91);
  v159 = *((_QWORD *)v56 + 94);
  v160 = *(_QWORD *)(v159 + 264);
  if ((v160 & 1) != 0)
  {
    v162 = *(_BYTE **)(v159 + 272);
    if (!v162)
    {
      v166 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_171;
    }
    LOBYTE(v159) = *v162;
  }
  else
  {
    v161 = v160 >> 8;
    v162 = (_BYTE *)(v159 + 265);
    LOBYTE(v159) = v161;
  }
  if ((_BYTE)v159)
  {
    v159 = (char)v159;
    v163 = v162[1];
    if (v163)
    {
      v164 = v162 + 2;
      do
      {
        v159 = 31 * v159 + v163;
        v165 = *v164++;
        v163 = v165;
      }
      while (v165);
    }
    v166 = v159 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v166 = 0;
  }
LABEL_171:
  STACK[0x1070] = v166;
  STACK[0x10A0] = (unint64_t)*v289;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*v289, sel_length);
  re::BufferTable::setBuffer(v158, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0])

  v130 = (unint64_t *)*((_QWORD *)v56 + 93);
  if ((unint64_t)v130 <= 9)
    goto LABEL_343;
  v167 = (re::BufferTable *)*((_QWORD *)v56 + 91);
  v168 = *((_QWORD *)v56 + 94);
  v169 = *(_QWORD *)(v168 + 296);
  if ((v169 & 1) != 0)
  {
    v171 = *(_BYTE **)(v168 + 304);
    if (!v171)
    {
      v175 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_185;
    }
    LOBYTE(v168) = *v171;
  }
  else
  {
    v170 = v169 >> 8;
    v171 = (_BYTE *)(v168 + 297);
    LOBYTE(v168) = v170;
  }
  if ((_BYTE)v168)
  {
    v168 = (char)v168;
    v172 = v171[1];
    if (v172)
    {
      v173 = v171 + 2;
      do
      {
        v168 = 31 * v168 + v172;
        v174 = *v173++;
        v172 = v174;
      }
      while (v174);
    }
    v175 = v168 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v175 = 0;
  }
LABEL_185:
  STACK[0x1070] = v175;
  STACK[0x10A0] = (unint64_t)*v288;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*v288, sel_length);
  re::BufferTable::setBuffer(v167, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0])

  v130 = (unint64_t *)*((_QWORD *)v56 + 93);
  if ((unint64_t)v130 <= 0xA)
    goto LABEL_344;
  v176 = (re::BufferTable *)*((_QWORD *)v56 + 91);
  v177 = *((_QWORD *)v56 + 94);
  v178 = *(_QWORD *)(v177 + 328);
  if ((v178 & 1) != 0)
  {
    v180 = *(_BYTE **)(v177 + 336);
    if (!v180)
    {
      v184 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_199;
    }
    LOBYTE(v177) = *v180;
  }
  else
  {
    v179 = v178 >> 8;
    v180 = (_BYTE *)(v177 + 329);
    LOBYTE(v177) = v179;
  }
  if ((_BYTE)v177)
  {
    v177 = (char)v177;
    v181 = v180[1];
    if (v181)
    {
      v182 = v180 + 2;
      do
      {
        v177 = 31 * v177 + v181;
        v183 = *v182++;
        v181 = v183;
      }
      while (v183);
    }
    v184 = v177 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v184 = 0;
  }
LABEL_199:
  STACK[0x1070] = v184;
  STACK[0x10A0] = (unint64_t)*v287;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*v287, sel_length);
  re::BufferTable::setBuffer(v176, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0])

  v130 = (unint64_t *)*((_QWORD *)v56 + 93);
  if ((unint64_t)v130 <= 0xB)
    goto LABEL_345;
  v185 = (re::BufferTable *)*((_QWORD *)v56 + 91);
  v186 = *((_QWORD *)v56 + 94);
  v187 = *(_QWORD *)(v186 + 360);
  if ((v187 & 1) != 0)
  {
    v189 = *(_BYTE **)(v186 + 368);
    if (!v189)
    {
      v193 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_213;
    }
    LOBYTE(v186) = *v189;
  }
  else
  {
    v188 = v187 >> 8;
    v189 = (_BYTE *)(v186 + 361);
    LOBYTE(v186) = v188;
  }
  if ((_BYTE)v186)
  {
    v186 = (char)v186;
    v190 = v189[1];
    if (v190)
    {
      v191 = v189 + 2;
      do
      {
        v186 = 31 * v186 + v190;
        v192 = *v191++;
        v190 = v192;
      }
      while (v192);
    }
    v193 = v186 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v193 = 0;
  }
LABEL_213:
  STACK[0x1070] = v193;
  STACK[0x10A0] = (unint64_t)*v286;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*v286, sel_length);
  re::BufferTable::setBuffer(v185, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0])

  v130 = (unint64_t *)*((_QWORD *)v56 + 93);
  if ((unint64_t)v130 <= 0xC)
    goto LABEL_346;
  v194 = (re::BufferTable *)*((_QWORD *)v56 + 91);
  v195 = *((_QWORD *)v56 + 94);
  v196 = *(_QWORD *)(v195 + 392);
  if ((v196 & 1) != 0)
  {
    v198 = *(_BYTE **)(v195 + 400);
    if (!v198)
    {
      v202 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_227;
    }
    LOBYTE(v195) = *v198;
  }
  else
  {
    v197 = v196 >> 8;
    v198 = (_BYTE *)(v195 + 393);
    LOBYTE(v195) = v197;
  }
  if ((_BYTE)v195)
  {
    v195 = (char)v195;
    v199 = v198[1];
    if (v199)
    {
      v200 = v198 + 2;
      do
      {
        v195 = 31 * v195 + v199;
        v201 = *v200++;
        v199 = v201;
      }
      while (v201);
    }
    v202 = v195 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v202 = 0;
  }
LABEL_227:
  STACK[0x1070] = v202;
  STACK[0x10A0] = (unint64_t)*v285;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*v285, sel_length);
  re::BufferTable::setBuffer(v194, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0])

  v130 = (unint64_t *)*((_QWORD *)v56 + 93);
  if ((unint64_t)v130 <= 0xD)
  {
LABEL_347:
    a47 = 0;
    *(_OWORD *)&STACK[0x10D0] = 0u;
    *(_OWORD *)&STACK[0x10E0] = 0u;
    *(_OWORD *)&STACK[0x10B0] = 0u;
    *(_OWORD *)&STACK[0x10C0] = 0u;
    *(_OWORD *)&STACK[0x10A0] = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1070]) = 136315906;
    STACK[0x1074] = (unint64_t)"operator[]";
    LOWORD(STACK[0x107C]) = 1024;
    LODWORD(STACK[0x107E]) = 468;
    LOWORD(STACK[0x1082]) = 2048;
    STACK[0x1084] = 13;
    LOWORD(STACK[0x108C]) = 2048;
    STACK[0x108E] = (unint64_t)v130;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v203 = (re::BufferTable *)*((_QWORD *)v56 + 91);
  v204 = *((_QWORD *)v56 + 94);
  v205 = *(_QWORD *)(v204 + 424);
  if ((v205 & 1) != 0)
  {
    v207 = *(_BYTE **)(v204 + 432);
    if (!v207)
    {
      v211 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_241;
    }
    LOBYTE(v204) = *v207;
  }
  else
  {
    v206 = v205 >> 8;
    v207 = (_BYTE *)(v204 + 425);
    LOBYTE(v204) = v206;
  }
  if ((_BYTE)v204)
  {
    v204 = (char)v204;
    v208 = v207[1];
    if (v208)
    {
      v209 = v207 + 2;
      do
      {
        v204 = 31 * v204 + v208;
        v210 = *v209++;
        v208 = v210;
      }
      while (v210);
    }
    v211 = v204 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v211 = 0;
  }
LABEL_241:
  STACK[0x1070] = v211;
  STACK[0x10A0] = (unint64_t)*v284;
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*v284, sel_length);
  re::BufferTable::setBuffer(v203, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0])

  v212 = (_anonymous_namespace_ *)re::MaterialManager::createBufferTableForName(v56, "brdf");
  *((_QWORD *)v56 + 89) = v212;
  v213 = (_anonymous_namespace_ *)*((_QWORD *)v56 + 89);
  STACK[0x10A0] = 0x2803BD43311CF958;
  LOBYTE(STACK[0x1070]) = 0;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v213, &STACK[0x10A0], (char *)&STACK[0x1070]);
  if (!*((_DWORD *)v213 + 70))
    *((_DWORD *)v213 + 70) = 1;
  v214 = (_anonymous_namespace_ *)re::MaterialManager::createBufferTableForName(v56, "global");
  *((_QWORD *)v56 + 90) = v214;
  v215 = (_anonymous_namespace_ *)*((_QWORD *)v56 + 90);
  STACK[0x10A0] = 0x1C6D7B14F4E32CD0;
  LOBYTE(STACK[0x1070]) = 0;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v215, &STACK[0x10A0], (char *)&STACK[0x1070]);
  if (!*((_DWORD *)v215 + 70))
    *((_DWORD *)v215 + 70) = 1;
  v216 = (_anonymous_namespace_ *)*((_QWORD *)v56 + 90);
  STACK[0x10A0] = 0x526A495CDE0FLL;
  LOBYTE(STACK[0x1070]) = 1;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v216, &STACK[0x10A0], (char *)&STACK[0x1070]);
  if (*((_DWORD *)v216 + 70) <= 1u)
    *((_DWORD *)v216 + 70) = 2;
  v217 = (_anonymous_namespace_ *)*((_QWORD *)v56 + 90);
  STACK[0x10A0] = 0x478674A22C6B2A1ALL;
  LOBYTE(STACK[0x1070]) = 2;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v217, &STACK[0x10A0], (char *)&STACK[0x1070]);
  if (*((_DWORD *)v217 + 70) <= 2u)
    *((_DWORD *)v217 + 70) = 3;
  v218 = (re::BufferTable *)*((_QWORD *)v56 + 90);
  STACK[0x1070] = 0x1C6D62426C554CB0;
  STACK[0x10A0] = (unint64_t)*((id *)v56 + 107);
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*((id *)v56 + 107), sel_length);
  re::BufferTable::setBuffer(v218, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0])

  v219 = (re::BufferTable *)*((_QWORD *)v56 + 90);
  STACK[0x1070] = 0x526A495CDE0FLL;
  STACK[0x10A0] = (unint64_t)*((id *)v56 + 109);
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*((id *)v56 + 109), sel_length);
  re::BufferTable::setBuffer(v219, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  if (STACK[0x10A0])

  v220 = (re::BufferTable *)*((_QWORD *)v56 + 90);
  STACK[0x1070] = 0x478674A22C6B2A1ALL;
  STACK[0x10A0] = (unint64_t)*((id *)v56 + 110);
  LODWORD(STACK[0x10A8]) = 0;
  LODWORD(STACK[0x10AC]) = objc_msgSend(*((id *)v56 + 110), sel_length);
  re::BufferTable::setBuffer(v220, (const re::WeakStringID *)&STACK[0x1070], (uint64_t)&STACK[0x10A0]);
  v221 = (void *)STACK[0x10A0];
  if (STACK[0x10A0])

  v222 = *((_QWORD *)v56 + 82);
  v222 += 72;
  re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::setCapacity((_QWORD *)v222, 5uLL);
  ++*(_DWORD *)(v222 + 24);
  v223 = (_QWORD *)*((_QWORD *)v56 + 82);
  a30 = 0xB3E5B3C154101;
  STACK[0x10A0] = 0;
  re::TextureTable::setTexture(v223, &a30, (id *)&STACK[0x10A0]);
  if (STACK[0x10A0])

  v224 = (_QWORD *)*((_QWORD *)v56 + 82);
  a29 = 0x645EADD8982CBD05;
  a30 = 0;
  STACK[0x10A0] = 0;
  re::TextureTable::setTexture(v224, &a29, (id *)&STACK[0x10A0]);
  if (STACK[0x10A0])

  v225 = (_QWORD *)*((_QWORD *)v56 + 82);
  a28 = 0x259D0C231F804627;
  a29 = 0;
  STACK[0x10A0] = 0;
  re::TextureTable::setTexture(v225, &a28, (id *)&STACK[0x10A0]);
  if (STACK[0x10A0])

  a28 = 0;
  v226 = (re *)MurmurHash3_x64_128((uint64_t)"fallback", 8, 0, &STACK[0x10A0]);
  v227 = (STACK[0x10A8] + (STACK[0x10A0] << 6) + (STACK[0x10A0] >> 2) - 0x61C8864680B583E9) ^ STACK[0x10A0];
  if (*((_QWORD *)v56 + 74))
  {
    v228 = *(unsigned int *)(*((_QWORD *)v56 + 75) + 4 * (v227 % *((unsigned int *)v56 + 154)));
    if ((_DWORD)v228 != 0x7FFFFFFF)
    {
      v237 = *((_QWORD *)v56 + 76);
      if (*(_QWORD *)(v237 + 24 * v228 + 8) == v227)
      {
LABEL_272:
        v230 = *(re **)(v237 + 24 * v228 + 16);
        goto LABEL_275;
      }
      while (1)
      {
        v283 = *(_DWORD *)(v237
                         + 24 * *(unsigned int *)(*((_QWORD *)v56 + 75) + 4 * (v227 % *((unsigned int *)v56 + 154)))) & 0x7FFFFFFF;
        if (v283 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v237 + 24 * v283 + 8) == v227)
        {
          while (1)
          {
            LODWORD(v228) = *(_DWORD *)(v237 + 24 * v228) & 0x7FFFFFFF;
            if ((_DWORD)v228 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v237 + 24 * v228 + 8) == v227)
              goto LABEL_272;
          }
          LODWORD(v228) = 0x7FFFFFFF;
          goto LABEL_272;
        }
      }
    }
  }
  v229 = re::globalAllocators(v226);
  v226 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v229[2] + 32))(v229[2], 112, 8);
  v230 = v226;
  *(_OWORD *)v226 = 0u;
  *((_OWORD *)v226 + 1) = 0u;
  *((_OWORD *)v226 + 2) = 0u;
  *((_OWORD *)v226 + 3) = 0u;
  *((_OWORD *)v226 + 4) = 0u;
  *((_OWORD *)v226 + 5) = 0u;
  *((_OWORD *)v226 + 6) = 0u;
  v231 = *((_QWORD *)v56 + 74);
  if (v231)
  {
    v231 = v227 % *((unsigned int *)v56 + 154);
    v232 = *(unsigned int *)(*((_QWORD *)v56 + 75) + 4 * v231);
    if ((_DWORD)v232 != 0x7FFFFFFF)
    {
      v282 = *((_QWORD *)v56 + 76);
      if (*(_QWORD *)(v282 + 24 * v232 + 8) == v227)
        goto LABEL_275;
      while (1)
      {
        LODWORD(v232) = *(_DWORD *)(v282 + 24 * v232) & 0x7FFFFFFF;
        if ((_DWORD)v232 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v282 + 24 * v232 + 8) == v227)
          goto LABEL_275;
      }
    }
  }
  v233 = *((unsigned int *)v56 + 157);
  if ((_DWORD)v233 == 0x7FFFFFFF)
  {
    v233 = *((unsigned int *)v56 + 156);
    v234 = v233;
    if ((_DWORD)v233 == *((_DWORD *)v56 + 154))
    {
      re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v56 + 592, 2 * *((_DWORD *)v56 + 155));
      LODWORD(v231) = v227 % *((unsigned int *)v56 + 154);
      v234 = *((_DWORD *)v56 + 156);
    }
    *((_DWORD *)v56 + 156) = v234 + 1;
    v235 = *((_QWORD *)v56 + 76);
    v236 = *(_DWORD *)(v235 + 24 * v233);
  }
  else
  {
    v235 = *((_QWORD *)v56 + 76);
    v236 = *(_DWORD *)(v235 + 24 * v233);
    *((_DWORD *)v56 + 157) = v236 & 0x7FFFFFFF;
  }
  v238 = 24 * v233;
  *(_DWORD *)(v235 + v238) = v236 | 0x80000000;
  *(_DWORD *)(*((_QWORD *)v56 + 76) + v238) = *(_DWORD *)(*((_QWORD *)v56 + 76) + 24 * v233) & 0x80000000 | *(_DWORD *)(*((_QWORD *)v56 + 75) + 4 * v231);
  *(_QWORD *)(*((_QWORD *)v56 + 76) + 24 * v233 + 8) = v227;
  *(_QWORD *)(*((_QWORD *)v56 + 76) + 24 * v233 + 16) = v230;
  *(_DWORD *)(*((_QWORD *)v56 + 75) + 4 * v231) = v233;
  ++*((_DWORD *)v56 + 155);
  ++*((_DWORD *)v56 + 158);
LABEL_275:
  *((_QWORD *)v56 + 111) = v230;
  *((_QWORD *)v56 + 118) = 0x1515151515151515;
  *((_QWORD *)v56 + 119) = 0x1515151515151515;
  *(_QWORD *)((char *)v56 + 957) = 0x1515151515151515;
  v57 = (unint64_t *)((char *)v56 + 904);
  v239 = re::s_constantValueTableLayoutCount;
  v240 = (_anonymous_namespace_ *)re::DynamicArray<re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>>::setCapacity((_QWORD *)v56 + 113, v239);
  ++*((_DWORD *)v56 + 232);
  if (re::s_constantValueTableLayoutCount)
  {
    v241 = re::s_constantValueTableLayouts;
    v242 = &re::s_constantValueTableLayouts[re::s_constantValueTableLayoutCount];
    v58 = 24;
    do
    {
      v243 = *v241;
      if (*v241)
      {
        v244 = *((unsigned int *)v243 + 4);
        *(_OWORD *)&STACK[0x10C0] = 0u;
        *(_OWORD *)&STACK[0x10D0] = 0u;
        *(_OWORD *)&STACK[0x10A0] = 0u;
        *(_OWORD *)&STACK[0x10B0] = 0u;
        v245 = *((_DWORD *)v243 + 4);
        if (v245)
        {
          v246 = v243[3];
          v247 = &v246[24 * v245];
          do
          {
            v248 = (char *)*((_QWORD *)v246 + 2);
            if (v248)
            {
              v249 = *v248;
              if (*v248)
              {
                v250 = v248[1];
                if (v250)
                {
                  v251 = (unsigned __int8 *)(v248 + 2);
                  do
                  {
                    v249 = 31 * v249 + v250;
                    v252 = *v251++;
                    v250 = v252;
                  }
                  while (v252);
                }
                v249 &= ~0x8000000000000000;
              }
            }
            else
            {
              v249 = 0x7FFFFFFFFFFFFFFFLL;
            }
            STACK[0x1070] = v249;
            v253 = *(_DWORD *)v246;
            v254 = *((_DWORD *)v246 + 1);
            v246 += 24;
            LOWORD(a47) = v253;
            WORD1(a47) = v254;
            re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::addNew((_anonymous_namespace_ *)&STACK[0x10A0], &STACK[0x1070], (int *)&a47);
          }
          while (v246 != v247);
        }
        v60 = 0;
        v54 = (id *)*v243;
        while (1)
        {
          v255 = (_anonymous_namespace_ *)strcmp(re::s_materialTableIDMappings[v60], (const char *)v54);
          if (!(_DWORD)v255)
            break;
          if (++v60 == 168)
          {
            v60 = 0;
            goto LABEL_293;
          }
        }
        if (v60 >= 0x15u)
        {
          re::internal::assertLog((re::internal *)6, v256, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v60, 21);
          _os_crash();
          __break(1u);
          goto LABEL_320;
        }
LABEL_293:
        v257 = *((_QWORD *)v56 + 115);
        *((_BYTE *)v56 + v60 + 944) = v257;
        v258 = *((_QWORD *)v56 + 114);
        if (v257 >= v258)
        {
          v259 = v257 + 1;
          if (v258 < v257 + 1)
          {
            if (*v57)
            {
              v260 = 2 * v258;
              _ZF = v258 == 0;
              v261 = 8;
              if (!_ZF)
                v261 = v260;
              if (v261 <= v259)
                v262 = v259;
              else
                v262 = v261;
              re::DynamicArray<re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>>::setCapacity((_QWORD *)v56 + 113, v262);
            }
            else
            {
              re::DynamicArray<re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>>::setCapacity((_QWORD *)v56 + 113, v259);
              ++*((_DWORD *)v56 + 232);
            }
          }
          v257 = *((_QWORD *)v56 + 115);
        }
        v263 = (unint64_t *)(*((_QWORD *)v56 + 117) + (v257 << 6));
        *((_OWORD *)v263 + 2) = 0u;
        *((_OWORD *)v263 + 3) = 0u;
        *(_OWORD *)v263 = 0u;
        *((_OWORD *)v263 + 1) = 0u;
        v264 = v263[7];
        v263[7] = STACK[0x10D8];
        STACK[0x10D8] = v264;
        v265 = *v263;
        *v263 = STACK[0x10A0];
        STACK[0x10A0] = v265;
        v266 = v263[1];
        v263[1] = STACK[0x10A8];
        STACK[0x10A8] = v266;
        v267 = v263[2];
        v263[2] = STACK[0x10B0];
        STACK[0x10B0] = v267;
        v268 = v263[5];
        v263[5] = STACK[0x10C8];
        STACK[0x10C8] = v268;
        v269 = v263[6];
        v263[6] = STACK[0x10D0];
        STACK[0x10D0] = v269;
        v270 = v263[3];
        v263[3] = STACK[0x10B8];
        STACK[0x10B8] = v270;
        v271 = v263[4];
        v263[4] = STACK[0x10C0];
        STACK[0x10C0] = v271;
        ++*((_QWORD *)v56 + 115);
        ++*((_DWORD *)v56 + 232);
        re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)&STACK[0x10A0]);
      }
      ++v241;
    }
    while (v241 != v242);
  }
  v272 = (__int128 *)((char *)v56 + 968);
  re::MaterialManager::getDefaultVariations((re::MaterialManager *)*(unsigned __int8 *)(*((_QWORD *)v56 + 112) + 305), 0, 0, *(unsigned __int8 *)(*((_QWORD *)v56 + 112) + 309), (__int128 *)&STACK[0x10A0]);
  if ((unint64_t *)((char *)v56 + 968) != &STACK[0x10A0])
  {
    v273 = *(_OWORD *)&STACK[0x10B0];
    v274 = *v272;
    v275 = *(_OWORD *)((char *)v56 + 984);
    *v272 = *(_OWORD *)&STACK[0x10A0];
    *(_OWORD *)((char *)v56 + 984) = v273;
    v276 = *((_QWORD *)v56 + 128);
    v277 = STACK[0x10D0];
    *((_QWORD *)v56 + 128) = STACK[0x10D8];
    v278 = *((_QWORD *)v56 + 127);
    *((_QWORD *)v56 + 127) = v277;
    STACK[0x10D8] = v276;
    STACK[0x10D0] = v278;
    *(_OWORD *)&STACK[0x10A0] = v274;
    *(_OWORD *)&STACK[0x10B0] = v275;
    v279 = *(_OWORD *)((char *)v56 + 1000);
    *(_OWORD *)((char *)v56 + 1000) = *(_OWORD *)&STACK[0x10C0];
    *(_OWORD *)&STACK[0x10C0] = v279;
  }
  re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::deinit((uint64_t)&STACK[0x10A0]);
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)v56 + 135, 0);
  ++*((_DWORD *)v56 + 276);
  *((_DWORD *)v56 + 281) = 8;
  return re::DataArray<re::MaterialParameterBlock>::allocBlock((_QWORD *)v56 + 135);
}

uint64_t re::MaterialManager::createTextureTableForName(re::MaterialManager *this, const char *__s)
{
  size_t v4;
  unint64_t v5;
  _BOOL8 v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v4 = strlen(__s);
  if (v4)
  {
    MurmurHash3_x64_128((uint64_t)__s, v4, 0, (unint64_t *)v14);
    v5 = (v14[1] + (v14[0] << 6) + ((unint64_t)v14[0] >> 2) - 0x61C8864680B583E9) ^ v14[0];
  }
  else
  {
    v5 = 0;
  }
  v14[0] = v5;
  v6 = re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey((uint64_t)this + 496, v14);
  if (v6)
  {
    v7 = 0x7FFFFFFF;
    if (*((_QWORD *)this + 62))
    {
      v8 = *(_DWORD *)(*((_QWORD *)this + 63) + 4 * (v14[0] % (unint64_t)*((unsigned int *)this + 130)));
      if (v8 != 0x7FFFFFFF)
      {
        v9 = *((_QWORD *)this + 64);
        v7 = *(_DWORD *)(*((_QWORD *)this + 63) + 4 * (v14[0] % (unint64_t)*((unsigned int *)this + 130)));
        if (*(_QWORD *)(v9 + 24 * v8 + 8) != v14[0])
        {
          while (1)
          {
            v7 = *(_DWORD *)(v9
                           + 24
                           * *(unsigned int *)(*((_QWORD *)this + 63)
                                             + 4 * (v14[0] % (unint64_t)*((unsigned int *)this + 130)))) & 0x7FFFFFFF;
            if (v7 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v9 + 24 * v7 + 8) == v14[0])
              return *(_QWORD *)(*((_QWORD *)this + 64) + 24 * v7 + 16);
          }
          v7 = 0x7FFFFFFF;
        }
      }
    }
    return *(_QWORD *)(*((_QWORD *)this + 64) + 24 * v7 + 16);
  }
  else
  {
    v10 = re::globalAllocators((re *)v6);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10[2] + 32))(v10[2], 112, 8);
    *(_OWORD *)(v11 + 8) = 0u;
    *(_OWORD *)(v11 + 24) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_QWORD *)(v11 + 104) = 0;
    *(_QWORD *)v11 = off_24ED76C78;
    v13 = v11;
    re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::TextureTable *&>((uint64_t)this + 496, (unint64_t *)v14, &v13);
    return v13;
  }
}

uint64_t re::MaterialManager::createBufferTableForName(re::MaterialManager *this, const char *__s)
{
  size_t v4;
  unint64_t v5;
  _QWORD *v6;
  _BOOL8 v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  v4 = strlen(__s);
  if (v4)
  {
    MurmurHash3_x64_128((uint64_t)__s, v4, 0, v15);
    v5 = (v15[1] + (v15[0] << 6) + (v15[0] >> 2) - 0x61C8864680B583E9) ^ v15[0];
  }
  else
  {
    v5 = 0;
  }
  v15[0] = v5;
  v6 = (_QWORD *)((char *)this + 544);
  v7 = re::HashTable<unsigned long,re::BufferTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey((uint64_t)this + 544, v5);
  if (v7)
  {
    v8 = 0x7FFFFFFF;
    if (*v6)
    {
      v9 = *(_DWORD *)(*((_QWORD *)this + 69) + 4 * (v5 % *((unsigned int *)this + 142)));
      if (v9 != 0x7FFFFFFF)
      {
        v10 = *((_QWORD *)this + 70);
        v8 = *(_DWORD *)(*((_QWORD *)this + 69) + 4 * (v5 % *((unsigned int *)this + 142)));
        if (*(_QWORD *)(v10 + 24 * v9 + 8) != v5)
        {
          while (1)
          {
            v8 = *(_DWORD *)(v10
                           + 24 * *(unsigned int *)(*((_QWORD *)this + 69) + 4 * (v5 % *((unsigned int *)this + 142)))) & 0x7FFFFFFF;
            if (v8 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v10 + 24 * v8 + 8) == v5)
              return *(_QWORD *)(*((_QWORD *)this + 70) + 24 * v8 + 16);
          }
          v8 = 0x7FFFFFFF;
        }
      }
    }
    return *(_QWORD *)(*((_QWORD *)this + 70) + 24 * v8 + 16);
  }
  else
  {
    v11 = re::globalAllocators((re *)v7);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11[2] + 32))(v11[2], 288, 8);
    *(_OWORD *)v12 = 0u;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_OWORD *)(v12 + 48) = 0u;
    *(_OWORD *)(v12 + 64) = 0u;
    *(_OWORD *)(v12 + 80) = 0u;
    *(_OWORD *)(v12 + 96) = 0u;
    *(_OWORD *)(v12 + 112) = 0u;
    *(_OWORD *)(v12 + 128) = 0u;
    *(_OWORD *)(v12 + 144) = 0u;
    *(_OWORD *)(v12 + 160) = 0u;
    *(_OWORD *)(v12 + 176) = 0u;
    *(_OWORD *)(v12 + 192) = 0u;
    *(_OWORD *)(v12 + 208) = 0u;
    *(_OWORD *)(v12 + 224) = 0u;
    *(_OWORD *)(v12 + 240) = 0u;
    *(_OWORD *)(v12 + 256) = 0u;
    *(_OWORD *)(v12 + 272) = 0u;
    *(_DWORD *)(v12 + 160) = 1;
    *(_QWORD *)(v12 + 176) = 0;
    *(_QWORD *)(v12 + 184) = 0;
    *(_QWORD *)(v12 + 168) = 0;
    *(_DWORD *)(v12 + 192) = 0;
    *(_QWORD *)(v12 + 208) = 0;
    *(_QWORD *)(v12 + 216) = 0;
    *(_QWORD *)(v12 + 200) = 0;
    *(_DWORD *)(v12 + 224) = 0;
    *(_OWORD *)(v12 + 232) = 0u;
    *(_OWORD *)(v12 + 248) = 0u;
    *(_DWORD *)(v12 + 264) = 0;
    v14 = v12;
    re::HashTable<unsigned long,re::BufferTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::BufferTable *&>((uint64_t)v6, v15, &v14);
  }
  return v12;
}

double re::MaterialManager::getDefaultVariations@<D0>(re::MaterialManager *this@<X0>, int a2@<W1>, int a3@<W2>, unsigned int a4@<W3>, __int128 *a5@<X8>)
{
  unsigned int v8;
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;
  _anonymous_namespace_ *v12;
  _anonymous_namespace_ *v13;
  uint64_t v14;
  _anonymous_namespace_ *v15;
  _anonymous_namespace_ *v16;
  uint64_t v17;
  _anonymous_namespace_ *v18;
  _anonymous_namespace_ *v19;
  _anonymous_namespace_ *v20;
  _anonymous_namespace_ *v21;
  _anonymous_namespace_ *v22;
  _anonymous_namespace_ *v23;
  _anonymous_namespace_ *v24;
  _anonymous_namespace_ *v25;
  _anonymous_namespace_ *v26;
  _anonymous_namespace_ *v27;
  unint64_t v28;
  _anonymous_namespace_ *v29;
  _anonymous_namespace_ *v30;
  _anonymous_namespace_ *v31;
  _anonymous_namespace_ *v32;
  _anonymous_namespace_ *v33;
  _anonymous_namespace_ *v34;
  uint64_t v35;
  _anonymous_namespace_ *v36;
  _anonymous_namespace_ *v37;
  _anonymous_namespace_ *v38;
  _anonymous_namespace_ *v39;
  uint64_t v40;
  _anonymous_namespace_ *v41;
  _anonymous_namespace_ *v42;
  _anonymous_namespace_ *v43;
  _anonymous_namespace_ *v44;
  _anonymous_namespace_ *v45;
  _anonymous_namespace_ *v46;
  _anonymous_namespace_ *v47;
  _anonymous_namespace_ *v48;
  _anonymous_namespace_ *v49;
  uint64_t v50;
  _anonymous_namespace_ *v51;
  _anonymous_namespace_ *v52;
  _anonymous_namespace_ *v53;
  _anonymous_namespace_ *v54;
  _anonymous_namespace_ *v55;
  _anonymous_namespace_ *v56;
  _anonymous_namespace_ *v57;
  _anonymous_namespace_ *v58;
  _anonymous_namespace_ *v59;
  _anonymous_namespace_ *v60;
  _anonymous_namespace_ *v61;
  _anonymous_namespace_ *v62;
  _anonymous_namespace_ *v63;
  _anonymous_namespace_ *v64;
  _anonymous_namespace_ *v65;
  _anonymous_namespace_ *v66;
  _anonymous_namespace_ *v67;
  _anonymous_namespace_ *v68;
  _anonymous_namespace_ *v69;
  _anonymous_namespace_ *v70;
  _anonymous_namespace_ *v71;
  _anonymous_namespace_ *v72;
  _anonymous_namespace_ *v73;
  _anonymous_namespace_ *v74;
  _anonymous_namespace_ *v75;
  _anonymous_namespace_ *v76;
  _anonymous_namespace_ *v77;
  _anonymous_namespace_ *v78;
  _anonymous_namespace_ *v79;
  _anonymous_namespace_ *v80;
  _anonymous_namespace_ *v81;
  _anonymous_namespace_ *v82;
  uint64_t v83;
  _anonymous_namespace_ *v84;
  _anonymous_namespace_ *v85;
  _anonymous_namespace_ *v86;
  _anonymous_namespace_ *v87;
  _anonymous_namespace_ *v88;
  uint64_t v89;
  _anonymous_namespace_ *v90;
  _anonymous_namespace_ *v91;
  _anonymous_namespace_ *v92;
  _anonymous_namespace_ *v93;
  _anonymous_namespace_ *v94;
  uint64_t v95;
  _anonymous_namespace_ *v96;
  _anonymous_namespace_ *v97;
  uint64_t v98;
  _anonymous_namespace_ *v99;
  _anonymous_namespace_ *v100;
  _anonymous_namespace_ *v101;
  _anonymous_namespace_ *v102;
  _anonymous_namespace_ *v103;
  _anonymous_namespace_ *v104;
  _anonymous_namespace_ *v105;
  _anonymous_namespace_ *v106;
  _anonymous_namespace_ *v107;
  _anonymous_namespace_ *v108;
  _anonymous_namespace_ *v109;
  _anonymous_namespace_ *v110;
  _anonymous_namespace_ *v111;
  _anonymous_namespace_ *v112;
  _anonymous_namespace_ *v113;
  _anonymous_namespace_ *v114;
  _anonymous_namespace_ *v115;
  _anonymous_namespace_ *v116;
  _anonymous_namespace_ *v117;
  uint64_t v118;
  _anonymous_namespace_ *v119;
  _anonymous_namespace_ *v120;
  _anonymous_namespace_ *v121;
  _anonymous_namespace_ *v122;
  _anonymous_namespace_ *v123;
  _anonymous_namespace_ *v124;
  _anonymous_namespace_ *v125;
  uint64_t v126;
  _anonymous_namespace_ *v127;
  _anonymous_namespace_ *v128;
  _anonymous_namespace_ *v129;
  _anonymous_namespace_ *v130;
  _anonymous_namespace_ *v131;
  _anonymous_namespace_ *v132;
  _anonymous_namespace_ *v133;
  _anonymous_namespace_ *v134;
  _anonymous_namespace_ *v135;
  _anonymous_namespace_ *v136;
  _anonymous_namespace_ *v137;
  _anonymous_namespace_ *v138;
  _anonymous_namespace_ *v139;
  _anonymous_namespace_ *v140;
  _anonymous_namespace_ *v141;
  unint64_t v142;
  _anonymous_namespace_ *v143;
  _anonymous_namespace_ *v144;
  _anonymous_namespace_ *v145;
  _anonymous_namespace_ *v146;
  _anonymous_namespace_ *v147;
  _anonymous_namespace_ *v148;
  _anonymous_namespace_ *v149;
  _anonymous_namespace_ *v150;
  unint64_t v151;
  _anonymous_namespace_ *v152;
  _anonymous_namespace_ *v153;
  _anonymous_namespace_ *v154;
  _anonymous_namespace_ *v155;
  unint64_t v156;
  _anonymous_namespace_ *v157;
  _anonymous_namespace_ *v158;
  unint64_t v159;
  _anonymous_namespace_ *v160;
  _anonymous_namespace_ *v161;
  _anonymous_namespace_ *v162;
  _anonymous_namespace_ *v163;
  _anonymous_namespace_ *v164;
  _anonymous_namespace_ *v165;
  _anonymous_namespace_ *v166;
  _anonymous_namespace_ *v167;
  _anonymous_namespace_ *v168;
  _anonymous_namespace_ *v169;
  _anonymous_namespace_ *v170;
  _anonymous_namespace_ *v171;
  _anonymous_namespace_ *v172;
  uint64_t v173;
  _anonymous_namespace_ *v174;
  _anonymous_namespace_ *v175;
  uint64_t v176;
  _anonymous_namespace_ *v177;
  _anonymous_namespace_ *v178;
  _anonymous_namespace_ *v179;
  _anonymous_namespace_ *v180;
  _anonymous_namespace_ *v181;
  _anonymous_namespace_ *v182;
  _anonymous_namespace_ *v183;
  uint64_t v185;
  char v186;
  _OWORD v187[4];
  uint64_t v188;
  unint64_t v189;
  _QWORD v190[3];
  int v191;
  uint64_t v192;
  uint64_t v193;
  __int16 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;

  v8 = this;
  v219 = *MEMORY[0x24BDAC8D0];
  a5[2] = 0u;
  a5[3] = 0u;
  *a5 = 0u;
  a5[1] = 0u;
  memset(v187, 0, sizeof(v187));
  v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((_QWORD *)&v217 + 1) = 0;
  *(_QWORD *)&v218 = 0;
  LODWORD(v215) = 1179701;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v215 + 1, 2uLL);
  LODWORD(v217) = v217 + 1;
  *(_QWORD *)&v207 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
  *(_QWORD *)&v207 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
  BYTE9(v218) = 1;
  *(_QWORD *)&v218 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((_QWORD *)&v215 + 1) && *((_QWORD *)&v217 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v215 + 1) + 40))(*((_QWORD *)&v215 + 1));
  v12 = (_anonymous_namespace_ *)v211;
  if ((_QWORD)v211 && (BYTE8(v211) & 1) != 0)
    v12 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v211 + 40))(v211, v212);
  v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((_QWORD *)&v217 + 1) = 0;
  *(_QWORD *)&v218 = 0;
  LODWORD(v215) = 6750237;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v215 + 1, 5uLL);
  v14 = 0;
  LODWORD(v217) = v217 + 1;
  do
  {
    *(_QWORD *)&v207 = v14;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
    ++v14;
  }
  while (v14 != 5);
  BYTE9(v218) = 1;
  *(_QWORD *)&v218 = 4;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((_QWORD *)&v215 + 1) && *((_QWORD *)&v217 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v215 + 1) + 40))(*((_QWORD *)&v215 + 1));
  v15 = (_anonymous_namespace_ *)v211;
  if ((_QWORD)v211 && (BYTE8(v211) & 1) != 0)
    v15 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v211 + 40))(v211, v212);
  v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((_QWORD *)&v217 + 1) = 0;
  *(_QWORD *)&v218 = 0;
  LODWORD(v215) = 6684701;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v215 + 1, 4uLL);
  v17 = 0;
  LODWORD(v217) = v217 + 1;
  do
  {
    *(_QWORD *)&v207 = v17;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
    ++v17;
  }
  while (v17 != 4);
  BYTE9(v218) = 1;
  *(_QWORD *)&v218 = 3;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((_QWORD *)&v215 + 1) && *((_QWORD *)&v217 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v215 + 1) + 40))(*((_QWORD *)&v215 + 1));
  v18 = (_anonymous_namespace_ *)v211;
  if ((_QWORD)v211 && (BYTE8(v211) & 1) != 0)
    v18 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v211 + 40))(v211, v212);
  v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((_QWORD *)&v217 + 1) = 0;
  *(_QWORD *)&v218 = 0;
  LODWORD(v215) = 786485;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v215 + 1, 2uLL);
  LODWORD(v217) = v217 + 1;
  *(_QWORD *)&v207 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
  *(_QWORD *)&v207 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
  BYTE9(v218) = 1;
  *(_QWORD *)&v218 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((_QWORD *)&v215 + 1) && *((_QWORD *)&v217 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v215 + 1) + 40))(*((_QWORD *)&v215 + 1));
  v20 = (_anonymous_namespace_ *)v211;
  if ((_QWORD)v211 && (BYTE8(v211) & 1) != 0)
    v20 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v211 + 40))(v211, v212);
  v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((_QWORD *)&v217 + 1) = 0;
  *(_QWORD *)&v218 = 0;
  LODWORD(v215) = 6815797;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v215 + 1, 2uLL);
  LODWORD(v217) = v217 + 1;
  *(_QWORD *)&v207 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
  *(_QWORD *)&v207 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
  BYTE9(v218) = 1;
  *(_QWORD *)&v218 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((_QWORD *)&v215 + 1) && *((_QWORD *)&v217 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v215 + 1) + 40))(*((_QWORD *)&v215 + 1));
  v22 = (_anonymous_namespace_ *)v211;
  if ((_QWORD)v211 && (BYTE8(v211) & 1) != 0)
    v22 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v211 + 40))(v211, v212);
  v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((_QWORD *)&v217 + 1) = 0;
  *(_QWORD *)&v218 = 0;
  LODWORD(v215) = 65589;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v215 + 1, 2uLL);
  LODWORD(v217) = v217 + 1;
  *(_QWORD *)&v207 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
  *(_QWORD *)&v207 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
  BYTE9(v218) = 1;
  *(_QWORD *)&v218 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((_QWORD *)&v215 + 1) && *((_QWORD *)&v217 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v215 + 1) + 40))(*((_QWORD *)&v215 + 1));
  v24 = (_anonymous_namespace_ *)v211;
  if ((_QWORD)v211 && (BYTE8(v211) & 1) != 0)
    v24 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v211 + 40))(v211, v212);
  v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((_QWORD *)&v217 + 1) = 0;
  *(_QWORD *)&v218 = 0;
  LODWORD(v215) = 2293813;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v215 + 1, 2uLL);
  LODWORD(v217) = v217 + 1;
  *(_QWORD *)&v207 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
  *(_QWORD *)&v207 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
  BYTE9(v218) = 1;
  *(_QWORD *)&v218 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((_QWORD *)&v215 + 1) && *((_QWORD *)&v217 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v215 + 1) + 40))(*((_QWORD *)&v215 + 1));
  v26 = (_anonymous_namespace_ *)v211;
  if ((_QWORD)v211 && (BYTE8(v211) & 1) != 0)
    v26 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v211 + 40))(v211, v212);
  v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((_QWORD *)&v217 + 1) = 0;
  *(_QWORD *)&v218 = 0;
  LODWORD(v215) = 3735605;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v215 + 1, 1uLL);
  LODWORD(v217) = v217 + 1;
  v28 = v8;
  *(_QWORD *)&v207 = v8;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
  BYTE9(v218) = 1;
  *(_QWORD *)&v218 = v8;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((_QWORD *)&v215 + 1) && *((_QWORD *)&v217 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v215 + 1) + 40))(*((_QWORD *)&v215 + 1));
  v29 = (_anonymous_namespace_ *)v211;
  if ((_QWORD)v211 && (BYTE8(v211) & 1) != 0)
    v29 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v211 + 40))(v211, v212);
  v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((_QWORD *)&v217 + 1) = 0;
  *(_QWORD *)&v218 = 0;
  LODWORD(v215) = 6488117;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v215 + 1, 2uLL);
  LODWORD(v217) = v217 + 1;
  *(_QWORD *)&v207 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
  *(_QWORD *)&v207 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
  BYTE9(v218) = 1;
  *(_QWORD *)&v218 = 0;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((_QWORD *)&v215 + 1) && *((_QWORD *)&v217 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v215 + 1) + 40))(*((_QWORD *)&v215 + 1));
  v31 = (_anonymous_namespace_ *)v211;
  if ((_QWORD)v211 && (BYTE8(v211) & 1) != 0)
    v31 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v211 + 40))(v211, v212);
  if (a2)
  {
    v216 = 0uLL;
    LODWORD(v217) = 0;
    WORD4(v218) = 1;
    *((_QWORD *)&v217 + 1) = 0;
    *(_QWORD *)&v218 = 0;
    LODWORD(v215) = 5636149;
    re::DynamicArray<float *>::setCapacity((_QWORD *)&v215 + 1, 2uLL);
    LODWORD(v217) = v217 + 1;
    *(_QWORD *)&v207 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
    *(_QWORD *)&v207 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
    BYTE9(v218) = 1;
    *(_QWORD *)&v218 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
    if (*((_QWORD *)&v215 + 1) && *((_QWORD *)&v217 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v215 + 1) + 40))(*((_QWORD *)&v215 + 1));
    v31 = (_anonymous_namespace_ *)v211;
    if ((_QWORD)v211 && (BYTE8(v211) & 1) != 0)
      v31 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v211 + 40))(v211, v212);
  }
  if (a3)
  {
    v216 = 0uLL;
    LODWORD(v217) = 0;
    WORD4(v218) = 1;
    *((_QWORD *)&v217 + 1) = 0;
    *(_QWORD *)&v218 = 0;
    LODWORD(v215) = 7209013;
    re::DynamicArray<float *>::setCapacity((_QWORD *)&v215 + 1, 2uLL);
    LODWORD(v217) = v217 + 1;
    *(_QWORD *)&v207 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
    *(_QWORD *)&v207 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
    BYTE9(v218) = 1;
    *(_QWORD *)&v218 = 0;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
    if (*((_QWORD *)&v215 + 1) && *((_QWORD *)&v217 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v215 + 1) + 40))(*((_QWORD *)&v215 + 1));
    v31 = (_anonymous_namespace_ *)v211;
    if ((_QWORD)v211 && (BYTE8(v211) & 1) != 0)
      v31 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v211 + 40))(v211, v212);
  }
  v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((_QWORD *)&v217 + 1) = 0;
  *(_QWORD *)&v218 = 0;
  LODWORD(v215) = 8323101;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v215 + 1, 3uLL);
  v35 = 0;
  LODWORD(v217) = v217 + 1;
  do
  {
    *(_QWORD *)&v207 = v35;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
    ++v35;
  }
  while (v35 != 3);
  BYTE9(v218) = 1;
  *(_QWORD *)&v218 = 0;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((_QWORD *)&v215 + 1) && *((_QWORD *)&v217 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v215 + 1) + 40))(*((_QWORD *)&v215 + 1));
  v36 = (_anonymous_namespace_ *)v211;
  if ((_QWORD)v211 && (BYTE8(v211) & 1) != 0)
    v36 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v211 + 40))(v211, v212);
  v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((_QWORD *)&v217 + 1) = 0;
  *(_QWORD *)&v218 = 0;
  LODWORD(v215) = 4522037;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v215 + 1, 2uLL);
  LODWORD(v217) = v217 + 1;
  *(_QWORD *)&v207 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
  *(_QWORD *)&v207 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
  BYTE9(v218) = 1;
  *(_QWORD *)&v218 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((_QWORD *)&v215 + 1) && *((_QWORD *)&v217 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v215 + 1) + 40))(*((_QWORD *)&v215 + 1));
  v38 = (_anonymous_namespace_ *)v211;
  if ((_QWORD)v211 && (BYTE8(v211) & 1) != 0)
    v38 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v211 + 40))(v211, v212);
  v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((_QWORD *)&v217 + 1) = 0;
  *(_QWORD *)&v218 = 0;
  LODWORD(v215) = 7012381;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v215 + 1, 4uLL);
  v40 = 0;
  LODWORD(v217) = v217 + 1;
  do
  {
    *(_QWORD *)&v207 = v40;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
    ++v40;
  }
  while (v40 != 4);
  BYTE9(v218) = 1;
  *(_QWORD *)&v218 = 0;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((_QWORD *)&v215 + 1) && *((_QWORD *)&v217 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v215 + 1) + 40))(*((_QWORD *)&v215 + 1));
  v41 = (_anonymous_namespace_ *)v211;
  if ((_QWORD)v211 && (BYTE8(v211) & 1) != 0)
    v41 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v211 + 40))(v211, v212);
  v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((_QWORD *)&v217 + 1) = 0;
  *(_QWORD *)&v218 = 0;
  LODWORD(v215) = 9044021;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v215 + 1, 2uLL);
  LODWORD(v217) = v217 + 1;
  *(_QWORD *)&v207 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
  *(_QWORD *)&v207 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
  BYTE9(v218) = 1;
  *(_QWORD *)&v218 = a4;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((_QWORD *)&v215 + 1) && *((_QWORD *)&v217 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v215 + 1) + 40))(*((_QWORD *)&v215 + 1));
  v43 = (_anonymous_namespace_ *)v211;
  if ((_QWORD)v211 && (BYTE8(v211) & 1) != 0)
    v43 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v211 + 40))(v211, v212);
  v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((_QWORD *)&v217 + 1) = 0;
  *(_QWORD *)&v218 = 0;
  LODWORD(v215) = 9699381;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v215 + 1, 2uLL);
  LODWORD(v217) = v217 + 1;
  *(_QWORD *)&v207 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
  *(_QWORD *)&v207 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
  BYTE9(v218) = 1;
  *(_QWORD *)&v218 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((_QWORD *)&v215 + 1) && *((_QWORD *)&v217 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v215 + 1) + 40))(*((_QWORD *)&v215 + 1));
  v45 = (_anonymous_namespace_ *)v211;
  if ((_QWORD)v211 && (BYTE8(v211) & 1) != 0)
    v45 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v211 + 40))(v211, v212);
  v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((_QWORD *)&v217 + 1) = 0;
  *(_QWORD *)&v218 = 0;
  LODWORD(v215) = 4128821;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v215 + 1, 2uLL);
  LODWORD(v217) = v217 + 1;
  *(_QWORD *)&v207 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
  *(_QWORD *)&v207 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
  BYTE9(v218) = 1;
  *(_QWORD *)&v218 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((_QWORD *)&v215 + 1) && *((_QWORD *)&v217 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v215 + 1) + 40))(*((_QWORD *)&v215 + 1));
  v47 = (_anonymous_namespace_ *)v211;
  if ((_QWORD)v211 && (BYTE8(v211) & 1) != 0)
    v47 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v211 + 40))(v211, v212);
  v216 = 0uLL;
  LODWORD(v217) = 0;
  WORD4(v218) = 1;
  *((_QWORD *)&v217 + 1) = 0;
  *(_QWORD *)&v218 = 0;
  LODWORD(v215) = 9240629;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v215 + 1, 2uLL);
  LODWORD(v217) = v217 + 1;
  *(_QWORD *)&v207 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
  *(_QWORD *)&v207 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v215 + 1, &v207);
  BYTE9(v218) = 1;
  *(_QWORD *)&v218 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v187, (const re::DynamicString *)&v211, (uint64_t)&v215);
  if (*((_QWORD *)&v215 + 1) && *((_QWORD *)&v217 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v215 + 1) + 40))(*((_QWORD *)&v215 + 1));
  if ((_QWORD)v211 && (BYTE8(v211) & 1) != 0)
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v211 + 40))(v211, v212);
  MurmurHash3_x64_128((uint64_t)"OpaqueCommon", 12, 0, (unint64_t *)&v215);
  *(_QWORD *)&v215 = (*((_QWORD *)&v215 + 1) + ((_QWORD)v215 << 6) + ((unint64_t)v215 >> 2) - 0x61C8864680B583E9) ^ v215;
  re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::addNew(a5, (uint64_t *)&v215, (uint64_t *)v187);
  v217 = 0u;
  v218 = 0u;
  if (a4)
    v50 = 16;
  else
    v50 = 0;
  v215 = 0uLL;
  v216 = 0uLL;
  if (a4)
  {
    v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((_QWORD *)&v213 + 1) = 0;
    *(_QWORD *)&v214 = 0;
    LODWORD(v211) = 1310773;
    re::DynamicArray<float *>::setCapacity((_QWORD *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(_QWORD *)&v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    *(_QWORD *)&v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(_QWORD *)&v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((_QWORD *)&v211 + 1) && *((_QWORD *)&v213 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v211 + 1) + 40))(*((_QWORD *)&v211 + 1));
    v53 = (_anonymous_namespace_ *)v207;
    if ((_QWORD)v207 && (BYTE8(v207) & 1) != 0)
      v53 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v207 + 40))();
    v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((_QWORD *)&v213 + 1) = 0;
    *(_QWORD *)&v214 = 0;
    LODWORD(v211) = 131125;
    re::DynamicArray<float *>::setCapacity((_QWORD *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(_QWORD *)&v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    *(_QWORD *)&v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(_QWORD *)&v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((_QWORD *)&v211 + 1) && *((_QWORD *)&v213 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v211 + 1) + 40))(*((_QWORD *)&v211 + 1));
    v55 = (_anonymous_namespace_ *)v207;
    if ((_QWORD)v207 && (BYTE8(v207) & 1) != 0)
      v55 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v207 + 40))();
    v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((_QWORD *)&v213 + 1) = 0;
    *(_QWORD *)&v214 = 0;
    LODWORD(v211) = 1376309;
    re::DynamicArray<float *>::setCapacity((_QWORD *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(_QWORD *)&v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    *(_QWORD *)&v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(_QWORD *)&v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((_QWORD *)&v211 + 1) && *((_QWORD *)&v213 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v211 + 1) + 40))(*((_QWORD *)&v211 + 1));
    v57 = (_anonymous_namespace_ *)v207;
    if ((_QWORD)v207 && (BYTE8(v207) & 1) != 0)
      v57 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v207 + 40))();
    v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((_QWORD *)&v213 + 1) = 0;
    *(_QWORD *)&v214 = 0;
    LODWORD(v211) = 1441845;
    re::DynamicArray<float *>::setCapacity((_QWORD *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(_QWORD *)&v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    *(_QWORD *)&v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(_QWORD *)&v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((_QWORD *)&v211 + 1) && *((_QWORD *)&v213 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v211 + 1) + 40))(*((_QWORD *)&v211 + 1));
    v59 = (_anonymous_namespace_ *)v207;
    if ((_QWORD)v207 && (BYTE8(v207) & 1) != 0)
      v59 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v207 + 40))();
    v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((_QWORD *)&v213 + 1) = 0;
    *(_QWORD *)&v214 = 0;
    LODWORD(v211) = 1507381;
    re::DynamicArray<float *>::setCapacity((_QWORD *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(_QWORD *)&v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    *(_QWORD *)&v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(_QWORD *)&v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((_QWORD *)&v211 + 1) && *((_QWORD *)&v213 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v211 + 1) + 40))(*((_QWORD *)&v211 + 1));
    v61 = (_anonymous_namespace_ *)v207;
    if ((_QWORD)v207 && (BYTE8(v207) & 1) != 0)
      v61 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v207 + 40))();
    v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((_QWORD *)&v213 + 1) = 0;
    *(_QWORD *)&v214 = 0;
    LODWORD(v211) = 1572917;
    re::DynamicArray<float *>::setCapacity((_QWORD *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(_QWORD *)&v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    *(_QWORD *)&v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(_QWORD *)&v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((_QWORD *)&v211 + 1) && *((_QWORD *)&v213 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v211 + 1) + 40))(*((_QWORD *)&v211 + 1));
    v63 = (_anonymous_namespace_ *)v207;
    if ((_QWORD)v207 && (BYTE8(v207) & 1) != 0)
      v63 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v207 + 40))();
    v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((_QWORD *)&v213 + 1) = 0;
    *(_QWORD *)&v214 = 0;
    LODWORD(v211) = 1638453;
    re::DynamicArray<float *>::setCapacity((_QWORD *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(_QWORD *)&v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    *(_QWORD *)&v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(_QWORD *)&v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((_QWORD *)&v211 + 1) && *((_QWORD *)&v213 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v211 + 1) + 40))(*((_QWORD *)&v211 + 1));
    v65 = (_anonymous_namespace_ *)v207;
    if ((_QWORD)v207 && (BYTE8(v207) & 1) != 0)
      v65 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v207 + 40))();
    v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((_QWORD *)&v213 + 1) = 0;
    *(_QWORD *)&v214 = 0;
    LODWORD(v211) = 1966133;
    re::DynamicArray<float *>::setCapacity((_QWORD *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(_QWORD *)&v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    *(_QWORD *)&v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(_QWORD *)&v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((_QWORD *)&v211 + 1) && *((_QWORD *)&v213 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v211 + 1) + 40))(*((_QWORD *)&v211 + 1));
    v67 = (_anonymous_namespace_ *)v207;
    if ((_QWORD)v207 && (BYTE8(v207) & 1) != 0)
      v67 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v207 + 40))();
    v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((_QWORD *)&v213 + 1) = 0;
    *(_QWORD *)&v214 = 0;
    LODWORD(v211) = 1703989;
    re::DynamicArray<float *>::setCapacity((_QWORD *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(_QWORD *)&v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    *(_QWORD *)&v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(_QWORD *)&v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((_QWORD *)&v211 + 1) && *((_QWORD *)&v213 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v211 + 1) + 40))(*((_QWORD *)&v211 + 1));
    v69 = (_anonymous_namespace_ *)v207;
    if ((_QWORD)v207 && (BYTE8(v207) & 1) != 0)
      v69 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v207 + 40))();
    v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((_QWORD *)&v213 + 1) = 0;
    *(_QWORD *)&v214 = 0;
    LODWORD(v211) = 9175093;
    re::DynamicArray<float *>::setCapacity((_QWORD *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(_QWORD *)&v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    *(_QWORD *)&v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(_QWORD *)&v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((_QWORD *)&v211 + 1) && *((_QWORD *)&v213 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v211 + 1) + 40))(*((_QWORD *)&v211 + 1));
    v71 = (_anonymous_namespace_ *)v207;
    if ((_QWORD)v207 && (BYTE8(v207) & 1) != 0)
      v71 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v207 + 40))();
    v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((_QWORD *)&v213 + 1) = 0;
    *(_QWORD *)&v214 = 0;
    LODWORD(v211) = 589877;
    re::DynamicArray<float *>::setCapacity((_QWORD *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(_QWORD *)&v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    *(_QWORD *)&v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(_QWORD *)&v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((_QWORD *)&v211 + 1) && *((_QWORD *)&v213 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v211 + 1) + 40))(*((_QWORD *)&v211 + 1));
    v73 = (_anonymous_namespace_ *)v207;
    if ((_QWORD)v207 && (BYTE8(v207) & 1) != 0)
      v73 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v207 + 40))();
    v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((_QWORD *)&v213 + 1) = 0;
    *(_QWORD *)&v214 = 0;
    LODWORD(v211) = 2031669;
    re::DynamicArray<float *>::setCapacity((_QWORD *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(_QWORD *)&v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    *(_QWORD *)&v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(_QWORD *)&v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((_QWORD *)&v211 + 1) && *((_QWORD *)&v213 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v211 + 1) + 40))(*((_QWORD *)&v211 + 1));
    v75 = (_anonymous_namespace_ *)v207;
    if ((_QWORD)v207 && (BYTE8(v207) & 1) != 0)
      v75 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v207 + 40))();
    v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((_QWORD *)&v213 + 1) = 0;
    *(_QWORD *)&v214 = 0;
    LODWORD(v211) = 2162741;
    re::DynamicArray<float *>::setCapacity((_QWORD *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(_QWORD *)&v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    *(_QWORD *)&v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(_QWORD *)&v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((_QWORD *)&v211 + 1) && *((_QWORD *)&v213 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v211 + 1) + 40))(*((_QWORD *)&v211 + 1));
    v77 = (_anonymous_namespace_ *)v207;
    if ((_QWORD)v207 && (BYTE8(v207) & 1) != 0)
      v77 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v207 + 40))();
    v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((_QWORD *)&v213 + 1) = 0;
    *(_QWORD *)&v214 = 0;
    LODWORD(v211) = 3276853;
    re::DynamicArray<float *>::setCapacity((_QWORD *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(_QWORD *)&v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    *(_QWORD *)&v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(_QWORD *)&v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((_QWORD *)&v211 + 1) && *((_QWORD *)&v213 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v211 + 1) + 40))(*((_QWORD *)&v211 + 1));
    v79 = (_anonymous_namespace_ *)v207;
    if ((_QWORD)v207 && (BYTE8(v207) & 1) != 0)
      v79 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v207 + 40))();
    v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((_QWORD *)&v213 + 1) = 0;
    *(_QWORD *)&v214 = 0;
    LODWORD(v211) = 1769525;
    re::DynamicArray<float *>::setCapacity((_QWORD *)&v211 + 1, 2uLL);
    LODWORD(v213) = v213 + 1;
    *(_QWORD *)&v203 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    *(_QWORD *)&v203 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
    BYTE9(v214) = 1;
    *(_QWORD *)&v214 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((_QWORD *)&v211 + 1) && *((_QWORD *)&v213 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v211 + 1) + 40))(*((_QWORD *)&v211 + 1));
    v81 = (_anonymous_namespace_ *)v207;
    if ((_QWORD)v207 && (BYTE8(v207) & 1) != 0)
      v81 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v207 + 40))();
    v212 = 0uLL;
    LODWORD(v213) = 0;
    WORD4(v214) = 1;
    *((_QWORD *)&v213 + 1) = 0;
    *(_QWORD *)&v214 = 0;
    LODWORD(v211) = 1835037;
    re::DynamicArray<float *>::setCapacity((_QWORD *)&v211 + 1, 3uLL);
    v83 = 0;
    LODWORD(v213) = v213 + 1;
    do
    {
      *(_QWORD *)&v203 = v83;
      re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v211 + 1, &v203);
      ++v83;
    }
    while (v83 != 3);
    BYTE9(v214) = 1;
    *(_QWORD *)&v214 = 2;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v215, (const re::DynamicString *)&v207, (uint64_t)&v211);
    if (*((_QWORD *)&v211 + 1) && *((_QWORD *)&v213 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v211 + 1) + 40))(*((_QWORD *)&v211 + 1));
    if ((_QWORD)v207 && (BYTE8(v207) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v207 + 40))();
  }
  MurmurHash3_x64_128((uint64_t)"TextureCommon", 13, 0, (unint64_t *)&v211);
  *(_QWORD *)&v211 = (*((_QWORD *)&v211 + 1) - 0x61C8864680B583E9 + ((_QWORD)v211 << 6) + ((unint64_t)v211 >> 2)) ^ v211;
  re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::addNew(a5, (uint64_t *)&v211, (uint64_t *)&v215);
  v213 = 0u;
  v214 = 0u;
  v211 = 0u;
  v212 = 0u;
  v208 = 0uLL;
  LODWORD(v209) = 0;
  *((_QWORD *)&v209 + 1) = 0;
  *(_QWORD *)&v210 = 0;
  LODWORD(v207) = 2293813;
  WORD4(v210) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v207 + 1, 2uLL);
  LODWORD(v209) = v209 + 1;
  *(_QWORD *)&v199 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v207 + 1, &v199);
  *(_QWORD *)&v199 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v207 + 1, &v199);
  BYTE9(v210) = 1;
  *(_QWORD *)&v210 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v211, (const re::DynamicString *)&v203, (uint64_t)&v207);
  if (*((_QWORD *)&v207 + 1) && *((_QWORD *)&v209 + 1))
    (*(void (**)(void))(**((_QWORD **)&v207 + 1) + 40))();
  v87 = (_anonymous_namespace_ *)v203;
  if ((_QWORD)v203 && (BYTE8(v203) & 1) != 0)
    v87 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v203 + 40))();
  v208 = 0uLL;
  LODWORD(v209) = 0;
  *((_QWORD *)&v209 + 1) = 0;
  *(_QWORD *)&v210 = 0;
  LODWORD(v207) = 8323101;
  WORD4(v210) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v207 + 1, 3uLL);
  v89 = 0;
  LODWORD(v209) = v209 + 1;
  do
  {
    *(_QWORD *)&v199 = v89;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v207 + 1, &v199);
    ++v89;
  }
  while (v89 != 3);
  BYTE9(v210) = 1;
  *(_QWORD *)&v210 = 0;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v211, (const re::DynamicString *)&v203, (uint64_t)&v207);
  if (*((_QWORD *)&v207 + 1) && *((_QWORD *)&v209 + 1))
    (*(void (**)(void))(**((_QWORD **)&v207 + 1) + 40))();
  if ((_QWORD)v203 && (BYTE8(v203) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v203 + 40))();
  MurmurHash3_x64_128((uint64_t)"ShadowCommon", 12, 0, (unint64_t *)&v207);
  *(_QWORD *)&v207 = (*((_QWORD *)&v207 + 1) - 0x61C8864680B583E9 + ((_QWORD)v207 << 6) + ((unint64_t)v207 >> 2)) ^ v207;
  re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::addNew(a5, (uint64_t *)&v207, (uint64_t *)&v211);
  v209 = 0u;
  v210 = 0u;
  v207 = 0u;
  v208 = 0u;
  v204 = 0uLL;
  LODWORD(v205) = 0;
  *((_QWORD *)&v205 + 1) = 0;
  *(_QWORD *)&v206 = 0;
  LODWORD(v203) = 1179701;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v203 + 1, 2uLL);
  LODWORD(v205) = v205 + 1;
  *(_QWORD *)&v195 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
  *(_QWORD *)&v195 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
  BYTE9(v206) = 1;
  *(_QWORD *)&v206 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((_QWORD *)&v203 + 1) && *((_QWORD *)&v205 + 1))
    (*(void (**)(void))(**((_QWORD **)&v203 + 1) + 40))();
  v93 = (_anonymous_namespace_ *)v199;
  if ((_QWORD)v199 && (BYTE8(v199) & 1) != 0)
    v93 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v199 + 40))();
  v204 = 0uLL;
  LODWORD(v205) = 0;
  *((_QWORD *)&v205 + 1) = 0;
  *(_QWORD *)&v206 = 0;
  LODWORD(v203) = 6750237;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v203 + 1, 5uLL);
  v95 = 0;
  LODWORD(v205) = v205 + 1;
  do
  {
    *(_QWORD *)&v195 = v95;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
    ++v95;
  }
  while (v95 != 5);
  BYTE9(v206) = 1;
  *(_QWORD *)&v206 = 4;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((_QWORD *)&v203 + 1) && *((_QWORD *)&v205 + 1))
    (*(void (**)(void))(**((_QWORD **)&v203 + 1) + 40))();
  v96 = (_anonymous_namespace_ *)v199;
  if ((_QWORD)v199 && (BYTE8(v199) & 1) != 0)
    v96 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v199 + 40))();
  v204 = 0uLL;
  LODWORD(v205) = 0;
  *((_QWORD *)&v205 + 1) = 0;
  *(_QWORD *)&v206 = 0;
  LODWORD(v203) = 6684701;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v203 + 1, 4uLL);
  v98 = 0;
  LODWORD(v205) = v205 + 1;
  do
  {
    *(_QWORD *)&v195 = v98;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
    ++v98;
  }
  while (v98 != 4);
  BYTE9(v206) = 1;
  *(_QWORD *)&v206 = 3;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((_QWORD *)&v203 + 1) && *((_QWORD *)&v205 + 1))
    (*(void (**)(void))(**((_QWORD **)&v203 + 1) + 40))();
  v99 = (_anonymous_namespace_ *)v199;
  if ((_QWORD)v199 && (BYTE8(v199) & 1) != 0)
    v99 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v199 + 40))();
  v204 = 0uLL;
  LODWORD(v205) = 0;
  *((_QWORD *)&v205 + 1) = 0;
  *(_QWORD *)&v206 = 0;
  LODWORD(v203) = 786485;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v203 + 1, 2uLL);
  LODWORD(v205) = v205 + 1;
  *(_QWORD *)&v195 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
  *(_QWORD *)&v195 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
  BYTE9(v206) = 1;
  *(_QWORD *)&v206 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((_QWORD *)&v203 + 1) && *((_QWORD *)&v205 + 1))
    (*(void (**)(void))(**((_QWORD **)&v203 + 1) + 40))();
  v101 = (_anonymous_namespace_ *)v199;
  if ((_QWORD)v199 && (BYTE8(v199) & 1) != 0)
    v101 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v199 + 40))();
  v204 = 0uLL;
  LODWORD(v205) = 0;
  *((_QWORD *)&v205 + 1) = 0;
  *(_QWORD *)&v206 = 0;
  LODWORD(v203) = 4522037;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v203 + 1, 2uLL);
  LODWORD(v205) = v205 + 1;
  *(_QWORD *)&v195 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
  *(_QWORD *)&v195 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
  BYTE9(v206) = 1;
  *(_QWORD *)&v206 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((_QWORD *)&v203 + 1) && *((_QWORD *)&v205 + 1))
    (*(void (**)(void))(**((_QWORD **)&v203 + 1) + 40))();
  v103 = (_anonymous_namespace_ *)v199;
  if ((_QWORD)v199 && (BYTE8(v199) & 1) != 0)
    v103 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v199 + 40))();
  v204 = 0uLL;
  LODWORD(v205) = 0;
  *((_QWORD *)&v205 + 1) = 0;
  *(_QWORD *)&v206 = 0;
  LODWORD(v203) = 6815797;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v203 + 1, 2uLL);
  LODWORD(v205) = v205 + 1;
  *(_QWORD *)&v195 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
  *(_QWORD *)&v195 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
  BYTE9(v206) = 1;
  *(_QWORD *)&v206 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((_QWORD *)&v203 + 1) && *((_QWORD *)&v205 + 1))
    (*(void (**)(void))(**((_QWORD **)&v203 + 1) + 40))();
  v105 = (_anonymous_namespace_ *)v199;
  if ((_QWORD)v199 && (BYTE8(v199) & 1) != 0)
    v105 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v199 + 40))();
  v204 = 0uLL;
  LODWORD(v205) = 0;
  *((_QWORD *)&v205 + 1) = 0;
  *(_QWORD *)&v206 = 0;
  LODWORD(v203) = 65589;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v203 + 1, 2uLL);
  LODWORD(v205) = v205 + 1;
  *(_QWORD *)&v195 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
  *(_QWORD *)&v195 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
  BYTE9(v206) = 1;
  *(_QWORD *)&v206 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((_QWORD *)&v203 + 1) && *((_QWORD *)&v205 + 1))
    (*(void (**)(void))(**((_QWORD **)&v203 + 1) + 40))();
  v107 = (_anonymous_namespace_ *)v199;
  if ((_QWORD)v199 && (BYTE8(v199) & 1) != 0)
    v107 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v199 + 40))();
  v204 = 0uLL;
  LODWORD(v205) = 0;
  *((_QWORD *)&v205 + 1) = 0;
  *(_QWORD *)&v206 = 0;
  LODWORD(v203) = 2293813;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v203 + 1, 2uLL);
  LODWORD(v205) = v205 + 1;
  *(_QWORD *)&v195 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
  *(_QWORD *)&v195 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
  BYTE9(v206) = 1;
  *(_QWORD *)&v206 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((_QWORD *)&v203 + 1) && *((_QWORD *)&v205 + 1))
    (*(void (**)(void))(**((_QWORD **)&v203 + 1) + 40))();
  v109 = (_anonymous_namespace_ *)v199;
  if ((_QWORD)v199 && (BYTE8(v199) & 1) != 0)
    v109 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v199 + 40))();
  v204 = 0uLL;
  LODWORD(v205) = 0;
  *((_QWORD *)&v205 + 1) = 0;
  *(_QWORD *)&v206 = 0;
  LODWORD(v203) = 3604533;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v203 + 1, 1uLL);
  LODWORD(v205) = v205 + 1;
  *(_QWORD *)&v195 = v28;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
  BYTE9(v206) = 1;
  *(_QWORD *)&v206 = v28;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((_QWORD *)&v203 + 1) && *((_QWORD *)&v205 + 1))
    (*(void (**)(void))(**((_QWORD **)&v203 + 1) + 40))();
  v111 = (_anonymous_namespace_ *)v199;
  if ((_QWORD)v199 && (BYTE8(v199) & 1) != 0)
    v111 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v199 + 40))();
  v204 = 0uLL;
  LODWORD(v205) = 0;
  *((_QWORD *)&v205 + 1) = 0;
  *(_QWORD *)&v206 = 0;
  LODWORD(v203) = 3735605;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v203 + 1, 1uLL);
  LODWORD(v205) = v205 + 1;
  *(_QWORD *)&v195 = v28;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
  BYTE9(v206) = 1;
  *(_QWORD *)&v206 = v28;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((_QWORD *)&v203 + 1) && *((_QWORD *)&v205 + 1))
    (*(void (**)(void))(**((_QWORD **)&v203 + 1) + 40))();
  v113 = (_anonymous_namespace_ *)v199;
  if ((_QWORD)v199 && (BYTE8(v199) & 1) != 0)
    v113 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v199 + 40))();
  v204 = 0uLL;
  LODWORD(v205) = 0;
  *((_QWORD *)&v205 + 1) = 0;
  *(_QWORD *)&v206 = 0;
  LODWORD(v203) = 6488117;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v203 + 1, 2uLL);
  LODWORD(v205) = v205 + 1;
  *(_QWORD *)&v195 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
  *(_QWORD *)&v195 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
  BYTE9(v206) = 1;
  *(_QWORD *)&v206 = 0;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((_QWORD *)&v203 + 1) && *((_QWORD *)&v205 + 1))
    (*(void (**)(void))(**((_QWORD **)&v203 + 1) + 40))();
  v115 = (_anonymous_namespace_ *)v199;
  if ((_QWORD)v199 && (BYTE8(v199) & 1) != 0)
    v115 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v199 + 40))();
  if (a2)
  {
    v204 = 0uLL;
    LODWORD(v205) = 0;
    *((_QWORD *)&v205 + 1) = 0;
    *(_QWORD *)&v206 = 0;
    LODWORD(v203) = 5636149;
    WORD4(v206) = 1;
    re::DynamicArray<float *>::setCapacity((_QWORD *)&v203 + 1, 2uLL);
    LODWORD(v205) = v205 + 1;
    *(_QWORD *)&v195 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
    *(_QWORD *)&v195 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
    BYTE9(v206) = 1;
    *(_QWORD *)&v206 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
    if (*((_QWORD *)&v203 + 1) && *((_QWORD *)&v205 + 1))
      (*(void (**)(void))(**((_QWORD **)&v203 + 1) + 40))();
    v115 = (_anonymous_namespace_ *)v199;
    if ((_QWORD)v199 && (BYTE8(v199) & 1) != 0)
      v115 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v199 + 40))();
  }
  v204 = 0uLL;
  LODWORD(v205) = 0;
  *((_QWORD *)&v205 + 1) = 0;
  *(_QWORD *)&v206 = 0;
  LODWORD(v203) = 8323101;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v203 + 1, 3uLL);
  v118 = 0;
  LODWORD(v205) = v205 + 1;
  do
  {
    *(_QWORD *)&v195 = v118;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
    ++v118;
  }
  while (v118 != 3);
  BYTE9(v206) = 1;
  *(_QWORD *)&v206 = 0;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((_QWORD *)&v203 + 1) && *((_QWORD *)&v205 + 1))
    (*(void (**)(void))(**((_QWORD **)&v203 + 1) + 40))();
  v119 = (_anonymous_namespace_ *)v199;
  if ((_QWORD)v199 && (BYTE8(v199) & 1) != 0)
    v119 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v199 + 40))();
  if (a3)
  {
    v204 = 0uLL;
    LODWORD(v205) = 0;
    *((_QWORD *)&v205 + 1) = 0;
    *(_QWORD *)&v206 = 0;
    LODWORD(v203) = 5701685;
    WORD4(v206) = 1;
    re::DynamicArray<float *>::setCapacity((_QWORD *)&v203 + 1, 2uLL);
    LODWORD(v205) = v205 + 1;
    *(_QWORD *)&v195 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
    *(_QWORD *)&v195 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
    BYTE9(v206) = 1;
    *(_QWORD *)&v206 = 0;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
    if (*((_QWORD *)&v203 + 1) && *((_QWORD *)&v205 + 1))
      (*(void (**)(void))(**((_QWORD **)&v203 + 1) + 40))();
    v121 = (_anonymous_namespace_ *)v199;
    if ((_QWORD)v199 && (BYTE8(v199) & 1) != 0)
      v121 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v199 + 40))();
    v204 = 0uLL;
    LODWORD(v205) = 0;
    *((_QWORD *)&v205 + 1) = 0;
    *(_QWORD *)&v206 = 0;
    LODWORD(v203) = 6553653;
    WORD4(v206) = 1;
    re::DynamicArray<float *>::setCapacity((_QWORD *)&v203 + 1, 2uLL);
    LODWORD(v205) = v205 + 1;
    *(_QWORD *)&v195 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
    *(_QWORD *)&v195 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
    BYTE9(v206) = 1;
    *(_QWORD *)&v206 = 0;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
    if (*((_QWORD *)&v203 + 1) && *((_QWORD *)&v205 + 1))
      (*(void (**)(void))(**((_QWORD **)&v203 + 1) + 40))();
    v123 = (_anonymous_namespace_ *)v199;
    if ((_QWORD)v199 && (BYTE8(v199) & 1) != 0)
      v123 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v199 + 40))();
    v204 = 0uLL;
    LODWORD(v205) = 0;
    *((_QWORD *)&v205 + 1) = 0;
    *(_QWORD *)&v206 = 0;
    LODWORD(v203) = 7209013;
    WORD4(v206) = 1;
    re::DynamicArray<float *>::setCapacity((_QWORD *)&v203 + 1, 2uLL);
    LODWORD(v205) = v205 + 1;
    *(_QWORD *)&v195 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
    *(_QWORD *)&v195 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
    BYTE9(v206) = 1;
    *(_QWORD *)&v206 = 0;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
    if (*((_QWORD *)&v203 + 1) && *((_QWORD *)&v205 + 1))
      (*(void (**)(void))(**((_QWORD **)&v203 + 1) + 40))();
    v119 = (_anonymous_namespace_ *)v199;
    if ((_QWORD)v199 && (BYTE8(v199) & 1) != 0)
      v119 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v199 + 40))();
  }
  v204 = 0uLL;
  LODWORD(v205) = 0;
  *((_QWORD *)&v205 + 1) = 0;
  *(_QWORD *)&v206 = 0;
  LODWORD(v203) = 7012381;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v203 + 1, 4uLL);
  v126 = 0;
  LODWORD(v205) = v205 + 1;
  do
  {
    *(_QWORD *)&v195 = v126;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
    ++v126;
  }
  while (v126 != 4);
  BYTE9(v206) = 1;
  *(_QWORD *)&v206 = 0;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((_QWORD *)&v203 + 1) && *((_QWORD *)&v205 + 1))
    (*(void (**)(void))(**((_QWORD **)&v203 + 1) + 40))();
  v127 = (_anonymous_namespace_ *)v199;
  if ((_QWORD)v199 && (BYTE8(v199) & 1) != 0)
    v127 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v199 + 40))();
  v204 = 0uLL;
  LODWORD(v205) = 0;
  *((_QWORD *)&v205 + 1) = 0;
  *(_QWORD *)&v206 = 0;
  LODWORD(v203) = 9044021;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v203 + 1, 2uLL);
  LODWORD(v205) = v205 + 1;
  *(_QWORD *)&v195 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
  *(_QWORD *)&v195 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
  BYTE9(v206) = 1;
  *(_QWORD *)&v206 = a4;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((_QWORD *)&v203 + 1) && *((_QWORD *)&v205 + 1))
    (*(void (**)(void))(**((_QWORD **)&v203 + 1) + 40))();
  v129 = (_anonymous_namespace_ *)v199;
  if ((_QWORD)v199 && (BYTE8(v199) & 1) != 0)
    v129 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v199 + 40))();
  v204 = 0uLL;
  LODWORD(v205) = 0;
  *((_QWORD *)&v205 + 1) = 0;
  *(_QWORD *)&v206 = 0;
  LODWORD(v203) = 9699381;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v203 + 1, 2uLL);
  LODWORD(v205) = v205 + 1;
  *(_QWORD *)&v195 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
  *(_QWORD *)&v195 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
  BYTE9(v206) = 1;
  *(_QWORD *)&v206 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((_QWORD *)&v203 + 1) && *((_QWORD *)&v205 + 1))
    (*(void (**)(void))(**((_QWORD **)&v203 + 1) + 40))();
  v131 = (_anonymous_namespace_ *)v199;
  if ((_QWORD)v199 && (BYTE8(v199) & 1) != 0)
    v131 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v199 + 40))();
  v204 = 0uLL;
  LODWORD(v205) = 0;
  *((_QWORD *)&v205 + 1) = 0;
  *(_QWORD *)&v206 = 0;
  LODWORD(v203) = 4128821;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v203 + 1, 2uLL);
  LODWORD(v205) = v205 + 1;
  *(_QWORD *)&v195 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
  *(_QWORD *)&v195 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
  BYTE9(v206) = 1;
  *(_QWORD *)&v206 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((_QWORD *)&v203 + 1) && *((_QWORD *)&v205 + 1))
    (*(void (**)(void))(**((_QWORD **)&v203 + 1) + 40))();
  v133 = (_anonymous_namespace_ *)v199;
  if ((_QWORD)v199 && (BYTE8(v199) & 1) != 0)
    v133 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v199 + 40))();
  v204 = 0uLL;
  LODWORD(v205) = 0;
  *((_QWORD *)&v205 + 1) = 0;
  *(_QWORD *)&v206 = 0;
  LODWORD(v203) = 9240629;
  WORD4(v206) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v203 + 1, 2uLL);
  LODWORD(v205) = v205 + 1;
  *(_QWORD *)&v195 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
  *(_QWORD *)&v195 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v203 + 1, &v195);
  BYTE9(v206) = 1;
  *(_QWORD *)&v206 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v207, (const re::DynamicString *)&v199, (uint64_t)&v203);
  if (*((_QWORD *)&v203 + 1) && *((_QWORD *)&v205 + 1))
    (*(void (**)(void))(**((_QWORD **)&v203 + 1) + 40))();
  if ((_QWORD)v199 && (BYTE8(v199) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v199 + 40))();
  MurmurHash3_x64_128((uint64_t)"TransparentCommon", 17, 0, (unint64_t *)&v203);
  *(_QWORD *)&v203 = (*((_QWORD *)&v203 + 1) - 0x61C8864680B583E9 + ((_QWORD)v203 << 6) + ((unint64_t)v203 >> 2)) ^ v203;
  re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::addNew(a5, (uint64_t *)&v203, (uint64_t *)&v207);
  v205 = 0u;
  v206 = 0u;
  v203 = 0u;
  v204 = 0u;
  v200 = 0uLL;
  LODWORD(v201) = 0;
  *((_QWORD *)&v201 + 1) = 0;
  *(_QWORD *)&v202 = 0;
  LODWORD(v199) = 2293813;
  WORD4(v202) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v199 + 1, 2uLL);
  LODWORD(v201) = v201 + 1;
  v189 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v199 + 1, &v189);
  v189 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v199 + 1, &v189);
  BYTE9(v202) = 1;
  *(_QWORD *)&v202 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
  if (*((_QWORD *)&v199 + 1) && *((_QWORD *)&v201 + 1))
    (*(void (**)(void))(**((_QWORD **)&v199 + 1) + 40))();
  v138 = (_anonymous_namespace_ *)v195;
  if ((_QWORD)v195 && (BYTE8(v195) & 1) != 0)
    v138 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v195 + 40))();
  v200 = 0uLL;
  LODWORD(v201) = 0;
  *((_QWORD *)&v201 + 1) = 0;
  *(_QWORD *)&v202 = 0;
  LODWORD(v199) = 6488117;
  WORD4(v202) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v199 + 1, 2uLL);
  LODWORD(v201) = v201 + 1;
  v189 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v199 + 1, &v189);
  v189 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v199 + 1, &v189);
  BYTE9(v202) = 1;
  *(_QWORD *)&v202 = 0;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
  if (*((_QWORD *)&v199 + 1) && *((_QWORD *)&v201 + 1))
    (*(void (**)(void))(**((_QWORD **)&v199 + 1) + 40))();
  v140 = (_anonymous_namespace_ *)v195;
  if ((_QWORD)v195 && (BYTE8(v195) & 1) != 0)
    v140 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v195 + 40))();
  v200 = 0uLL;
  LODWORD(v201) = 0;
  *((_QWORD *)&v201 + 1) = 0;
  *(_QWORD *)&v202 = 0;
  LODWORD(v199) = 8323101;
  WORD4(v202) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v199 + 1, 3uLL);
  v142 = 0;
  LODWORD(v201) = v201 + 1;
  do
  {
    v189 = v142;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v199 + 1, &v189);
    ++v142;
  }
  while (v142 != 3);
  BYTE9(v202) = 1;
  *(_QWORD *)&v202 = 0;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
  if (*((_QWORD *)&v199 + 1) && *((_QWORD *)&v201 + 1))
    (*(void (**)(void))(**((_QWORD **)&v199 + 1) + 40))();
  v143 = (_anonymous_namespace_ *)v195;
  if ((_QWORD)v195 && (BYTE8(v195) & 1) != 0)
    v143 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v195 + 40))();
  if (a2)
  {
    v200 = 0uLL;
    LODWORD(v201) = 0;
    *((_QWORD *)&v201 + 1) = 0;
    *(_QWORD *)&v202 = 0;
    LODWORD(v199) = 5636149;
    WORD4(v202) = 1;
    re::DynamicArray<float *>::setCapacity((_QWORD *)&v199 + 1, 2uLL);
    LODWORD(v201) = v201 + 1;
    v189 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v199 + 1, &v189);
    v189 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v199 + 1, &v189);
    BYTE9(v202) = 1;
    *(_QWORD *)&v202 = 1;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
    if (*((_QWORD *)&v199 + 1) && *((_QWORD *)&v201 + 1))
      (*(void (**)(void))(**((_QWORD **)&v199 + 1) + 40))();
    v143 = (_anonymous_namespace_ *)v195;
    if ((_QWORD)v195 && (BYTE8(v195) & 1) != 0)
      v143 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v195 + 40))();
  }
  if (a3)
  {
    v200 = 0uLL;
    LODWORD(v201) = 0;
    *((_QWORD *)&v201 + 1) = 0;
    *(_QWORD *)&v202 = 0;
    LODWORD(v199) = 5701685;
    WORD4(v202) = 1;
    re::DynamicArray<float *>::setCapacity((_QWORD *)&v199 + 1, 2uLL);
    LODWORD(v201) = v201 + 1;
    v189 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v199 + 1, &v189);
    v189 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v199 + 1, &v189);
    BYTE9(v202) = 1;
    *(_QWORD *)&v202 = 0;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
    if (*((_QWORD *)&v199 + 1) && *((_QWORD *)&v201 + 1))
      (*(void (**)(void))(**((_QWORD **)&v199 + 1) + 40))();
    v146 = (_anonymous_namespace_ *)v195;
    if ((_QWORD)v195 && (BYTE8(v195) & 1) != 0)
      v146 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v195 + 40))();
    v200 = 0uLL;
    LODWORD(v201) = 0;
    *((_QWORD *)&v201 + 1) = 0;
    *(_QWORD *)&v202 = 0;
    LODWORD(v199) = 6553653;
    WORD4(v202) = 1;
    re::DynamicArray<float *>::setCapacity((_QWORD *)&v199 + 1, 2uLL);
    LODWORD(v201) = v201 + 1;
    v189 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v199 + 1, &v189);
    v189 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v199 + 1, &v189);
    BYTE9(v202) = 1;
    *(_QWORD *)&v202 = 0;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
    if (*((_QWORD *)&v199 + 1) && *((_QWORD *)&v201 + 1))
      (*(void (**)(void))(**((_QWORD **)&v199 + 1) + 40))();
    v148 = (_anonymous_namespace_ *)v195;
    if ((_QWORD)v195 && (BYTE8(v195) & 1) != 0)
      v148 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v195 + 40))();
    v200 = 0uLL;
    LODWORD(v201) = 0;
    *((_QWORD *)&v201 + 1) = 0;
    *(_QWORD *)&v202 = 0;
    LODWORD(v199) = 7209013;
    WORD4(v202) = 1;
    re::DynamicArray<float *>::setCapacity((_QWORD *)&v199 + 1, 2uLL);
    LODWORD(v201) = v201 + 1;
    v189 = 0;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v199 + 1, &v189);
    v189 = 1;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v199 + 1, &v189);
    BYTE9(v202) = 1;
    *(_QWORD *)&v202 = 0;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
    if (*((_QWORD *)&v199 + 1) && *((_QWORD *)&v201 + 1))
      (*(void (**)(void))(**((_QWORD **)&v199 + 1) + 40))();
    v143 = (_anonymous_namespace_ *)v195;
    if ((_QWORD)v195 && (BYTE8(v195) & 1) != 0)
      v143 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v195 + 40))();
  }
  v200 = 0uLL;
  LODWORD(v201) = 0;
  *((_QWORD *)&v201 + 1) = 0;
  *(_QWORD *)&v202 = 0;
  LODWORD(v199) = 7012381;
  WORD4(v202) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v199 + 1, 4uLL);
  v151 = 0;
  LODWORD(v201) = v201 + 1;
  do
  {
    v189 = v151;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v199 + 1, &v189);
    ++v151;
  }
  while (v151 != 4);
  BYTE9(v202) = 1;
  *(_QWORD *)&v202 = 0;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
  if (*((_QWORD *)&v199 + 1) && *((_QWORD *)&v201 + 1))
    (*(void (**)(void))(**((_QWORD **)&v199 + 1) + 40))();
  v152 = (_anonymous_namespace_ *)v195;
  if ((_QWORD)v195 && (BYTE8(v195) & 1) != 0)
    v152 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v195 + 40))();
  v200 = 0uLL;
  LODWORD(v201) = 0;
  *((_QWORD *)&v201 + 1) = 0;
  *(_QWORD *)&v202 = 0;
  LODWORD(v199) = 65589;
  WORD4(v202) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v199 + 1, 2uLL);
  LODWORD(v201) = v201 + 1;
  v189 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v199 + 1, &v189);
  v189 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v199 + 1, &v189);
  BYTE9(v202) = 1;
  *(_QWORD *)&v202 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
  if (*((_QWORD *)&v199 + 1) && *((_QWORD *)&v201 + 1))
    (*(void (**)(void))(**((_QWORD **)&v199 + 1) + 40))();
  v154 = (_anonymous_namespace_ *)v195;
  if ((_QWORD)v195 && (BYTE8(v195) & 1) != 0)
    v154 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v195 + 40))();
  v200 = 0uLL;
  LODWORD(v201) = 0;
  *((_QWORD *)&v201 + 1) = 0;
  *(_QWORD *)&v202 = 0;
  LODWORD(v199) = 6750237;
  WORD4(v202) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v199 + 1, 5uLL);
  v156 = 0;
  LODWORD(v201) = v201 + 1;
  do
  {
    v189 = v156;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v199 + 1, &v189);
    ++v156;
  }
  while (v156 != 5);
  BYTE9(v202) = 1;
  *(_QWORD *)&v202 = 4;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
  if (*((_QWORD *)&v199 + 1) && *((_QWORD *)&v201 + 1))
    (*(void (**)(void))(**((_QWORD **)&v199 + 1) + 40))();
  v157 = (_anonymous_namespace_ *)v195;
  if ((_QWORD)v195 && (BYTE8(v195) & 1) != 0)
    v157 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v195 + 40))();
  v200 = 0uLL;
  LODWORD(v201) = 0;
  *((_QWORD *)&v201 + 1) = 0;
  *(_QWORD *)&v202 = 0;
  LODWORD(v199) = 6684701;
  WORD4(v202) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v199 + 1, 4uLL);
  v159 = 0;
  LODWORD(v201) = v201 + 1;
  do
  {
    v189 = v159;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v199 + 1, &v189);
    ++v159;
  }
  while (v159 != 4);
  BYTE9(v202) = 1;
  *(_QWORD *)&v202 = 3;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
  if (*((_QWORD *)&v199 + 1) && *((_QWORD *)&v201 + 1))
    (*(void (**)(void))(**((_QWORD **)&v199 + 1) + 40))();
  v160 = (_anonymous_namespace_ *)v195;
  if ((_QWORD)v195 && (BYTE8(v195) & 1) != 0)
    v160 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v195 + 40))();
  v200 = 0uLL;
  LODWORD(v201) = 0;
  *((_QWORD *)&v201 + 1) = 0;
  *(_QWORD *)&v202 = 0;
  LODWORD(v199) = 4128821;
  WORD4(v202) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v199 + 1, 2uLL);
  LODWORD(v201) = v201 + 1;
  v189 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v199 + 1, &v189);
  v189 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v199 + 1, &v189);
  BYTE9(v202) = 1;
  *(_QWORD *)&v202 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
  if (*((_QWORD *)&v199 + 1) && *((_QWORD *)&v201 + 1))
    (*(void (**)(void))(**((_QWORD **)&v199 + 1) + 40))();
  v162 = (_anonymous_namespace_ *)v195;
  if ((_QWORD)v195 && (BYTE8(v195) & 1) != 0)
    v162 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v195 + 40))();
  v200 = 0uLL;
  LODWORD(v201) = 0;
  *((_QWORD *)&v201 + 1) = 0;
  *(_QWORD *)&v202 = 0;
  LODWORD(v199) = 9240629;
  WORD4(v202) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v199 + 1, 2uLL);
  LODWORD(v201) = v201 + 1;
  v189 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v199 + 1, &v189);
  v189 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v199 + 1, &v189);
  BYTE9(v202) = 1;
  *(_QWORD *)&v202 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
  if (*((_QWORD *)&v199 + 1) && *((_QWORD *)&v201 + 1))
    (*(void (**)(void))(**((_QWORD **)&v199 + 1) + 40))();
  v164 = (_anonymous_namespace_ *)v195;
  if ((_QWORD)v195 && (BYTE8(v195) & 1) != 0)
    v164 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v195 + 40))();
  v200 = 0uLL;
  LODWORD(v201) = 0;
  *((_QWORD *)&v201 + 1) = 0;
  *(_QWORD *)&v202 = 0;
  LODWORD(v199) = 3735605;
  WORD4(v202) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v199 + 1, 1uLL);
  LODWORD(v201) = v201 + 1;
  v189 = v28;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v199 + 1, &v189);
  BYTE9(v202) = 1;
  *(_QWORD *)&v202 = v28;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
  if (*((_QWORD *)&v199 + 1) && *((_QWORD *)&v201 + 1))
    (*(void (**)(void))(**((_QWORD **)&v199 + 1) + 40))();
  v166 = (_anonymous_namespace_ *)v195;
  if ((_QWORD)v195 && (BYTE8(v195) & 1) != 0)
    v166 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v195 + 40))();
  v200 = 0uLL;
  LODWORD(v201) = 0;
  *((_QWORD *)&v201 + 1) = 0;
  *(_QWORD *)&v202 = 0;
  LODWORD(v199) = 9699381;
  WORD4(v202) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v199 + 1, 2uLL);
  LODWORD(v201) = v201 + 1;
  v189 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v199 + 1, &v189);
  v189 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v199 + 1, &v189);
  BYTE9(v202) = 1;
  *(_QWORD *)&v202 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v203, (const re::DynamicString *)&v195, (uint64_t)&v199);
  if (*((_QWORD *)&v199 + 1) && *((_QWORD *)&v201 + 1))
    (*(void (**)(void))(**((_QWORD **)&v199 + 1) + 40))();
  if ((_QWORD)v195 && (BYTE8(v195) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v195 + 40))();
  MurmurHash3_x64_128((uint64_t)"UnlitCommon", 11, 0, (unint64_t *)&v199);
  *(_QWORD *)&v199 = (*((_QWORD *)&v199 + 1) - 0x61C8864680B583E9 + ((_QWORD)v199 << 6) + ((unint64_t)v199 >> 2)) ^ v199;
  re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::addNew(a5, (uint64_t *)&v199, (uint64_t *)&v203);
  v201 = 0u;
  v202 = 0u;
  v199 = 0u;
  v200 = 0u;
  v196 = 0uLL;
  LODWORD(v197) = 0;
  *((_QWORD *)&v197 + 1) = 0;
  *(_QWORD *)&v198 = 0;
  LODWORD(v195) = 1179701;
  WORD4(v198) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v195 + 1, 2uLL);
  LODWORD(v197) = v197 + 1;
  v185 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v195 + 1, &v185);
  v185 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v195 + 1, &v185);
  BYTE9(v198) = 1;
  *(_QWORD *)&v198 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v199, (const re::DynamicString *)&v189, (uint64_t)&v195);
  if (*((_QWORD *)&v195 + 1) && *((_QWORD *)&v197 + 1))
    (*(void (**)(void))(**((_QWORD **)&v195 + 1) + 40))();
  v171 = (_anonymous_namespace_ *)v189;
  if (v189 && (v190[0] & 1) != 0)
    v171 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v189 + 40))();
  v196 = 0uLL;
  LODWORD(v197) = 0;
  *((_QWORD *)&v197 + 1) = 0;
  *(_QWORD *)&v198 = 0;
  LODWORD(v195) = 6750237;
  WORD4(v198) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v195 + 1, 5uLL);
  v173 = 0;
  LODWORD(v197) = v197 + 1;
  do
  {
    v185 = v173;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v195 + 1, &v185);
    ++v173;
  }
  while (v173 != 5);
  BYTE9(v198) = 1;
  *(_QWORD *)&v198 = 4;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v199, (const re::DynamicString *)&v189, (uint64_t)&v195);
  if (*((_QWORD *)&v195 + 1) && *((_QWORD *)&v197 + 1))
    (*(void (**)(void))(**((_QWORD **)&v195 + 1) + 40))();
  v174 = (_anonymous_namespace_ *)v189;
  if (v189 && (v190[0] & 1) != 0)
    v174 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v189 + 40))();
  v196 = 0uLL;
  LODWORD(v197) = 0;
  *((_QWORD *)&v197 + 1) = 0;
  *(_QWORD *)&v198 = 0;
  LODWORD(v195) = 6684701;
  WORD4(v198) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v195 + 1, 4uLL);
  v176 = 0;
  LODWORD(v197) = v197 + 1;
  do
  {
    v185 = v176;
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v195 + 1, &v185);
    ++v176;
  }
  while (v176 != 4);
  BYTE9(v198) = 1;
  *(_QWORD *)&v198 = 3;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v199, (const re::DynamicString *)&v189, (uint64_t)&v195);
  if (*((_QWORD *)&v195 + 1) && *((_QWORD *)&v197 + 1))
    (*(void (**)(void))(**((_QWORD **)&v195 + 1) + 40))();
  v177 = (_anonymous_namespace_ *)v189;
  if (v189 && (v190[0] & 1) != 0)
    v177 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v189 + 40))();
  v196 = 0uLL;
  LODWORD(v197) = 0;
  *((_QWORD *)&v197 + 1) = 0;
  *(_QWORD *)&v198 = 0;
  LODWORD(v195) = 6815797;
  WORD4(v198) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v195 + 1, 2uLL);
  LODWORD(v197) = v197 + 1;
  v185 = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v195 + 1, &v185);
  v185 = 1;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v195 + 1, &v185);
  BYTE9(v198) = 1;
  *(_QWORD *)&v198 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v199, (const re::DynamicString *)&v189, (uint64_t)&v195);
  if (*((_QWORD *)&v195 + 1) && *((_QWORD *)&v197 + 1))
    (*(void (**)(void))(**((_QWORD **)&v195 + 1) + 40))();
  v179 = (_anonymous_namespace_ *)v189;
  if (v189 && (v190[0] & 1) != 0)
    v179 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v189 + 40))();
  v196 = 0uLL;
  LODWORD(v197) = 0;
  *((_QWORD *)&v197 + 1) = 0;
  *(_QWORD *)&v198 = 0;
  LODWORD(v195) = 3604533;
  WORD4(v198) = 1;
  re::DynamicArray<float *>::setCapacity((_QWORD *)&v195 + 1, 1uLL);
  LODWORD(v197) = v197 + 1;
  v185 = v28;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v195 + 1, &v185);
  BYTE9(v198) = 1;
  *(_QWORD *)&v198 = v28;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v199, (const re::DynamicString *)&v189, (uint64_t)&v195);
  if (*((_QWORD *)&v195 + 1) && *((_QWORD *)&v197 + 1))
    (*(void (**)(void))(**((_QWORD **)&v195 + 1) + 40))();
  if (v189 && (v190[0] & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v189 + 40))();
  MurmurHash3_x64_128((uint64_t)"ARBackwardsCompatibility", 24, 0, (unint64_t *)&v195);
  *(_QWORD *)&v195 = (*((_QWORD *)&v195 + 1) - 0x61C8864680B583E9 + ((_QWORD)v195 << 6) + ((unint64_t)v195 >> 2)) ^ v195;
  re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::addNew(a5, (uint64_t *)&v195, (uint64_t *)&v199);
  v197 = 0u;
  v198 = 0u;
  v195 = 0u;
  v196 = 0u;
  v190[1] = 0;
  v190[2] = 0;
  v191 = 0;
  v192 = 0;
  v193 = 0;
  LODWORD(v189) = 786485;
  v194 = 1;
  re::DynamicArray<float *>::setCapacity(v190, 2uLL);
  ++v191;
  v188 = 0;
  re::DynamicArray<re::TransitionCondition *>::add(v190, &v188);
  v188 = 1;
  re::DynamicArray<re::TransitionCondition *>::add(v190, &v188);
  HIBYTE(v194) = 1;
  v193 = 1;
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)&v195, (const re::DynamicString *)&v185, (uint64_t)&v189);
  if (v190[0] && v192)
    (*(void (**)(void))(*(_QWORD *)v190[0] + 40))();
  if (v185 && (v186 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v185 + 40))();
  MurmurHash3_x64_128((uint64_t)"DynamicLightingBackwardsCompatibility", 37, 0, &v189);
  v189 ^= v190[0] - 0x61C8864680B583E9 + (v189 << 6) + (v189 >> 2);
  re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::addNew(a5, (uint64_t *)&v189, (uint64_t *)&v195);
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)&v195);
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)&v199);
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)&v203);
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)&v207);
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)&v211);
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)&v215);
  return re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)v187);
}

void re::MaterialManager::addDefaultVariationFallbackValues(re::MaterialManager *this, re::TechniqueDefinitionBuilder *a2)
{
  uint64_t v2;
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  _anonymous_namespace_ *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  _DWORD *v12;
  _anonymous_namespace_ *TypeSize;
  uint64_t v14;
  void *v15;
  int v16;
  _QWORD *v17;
  uint64_t *v18;
  _OWORD v19[2];
  int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t i;
  _QWORD v27[2];
  unint64_t v28;
  uint64_t v29;

  v2 = *((_QWORD *)a2 + 57);
  if (v2)
  {
    v4 = (uint64_t *)*((_QWORD *)a2 + 59);
    v17 = (_QWORD *)((char *)this + 968);
    v18 = &v4[v2];
    v5 = (char *)a2 + 584;
    do
    {
      v29 = *v4;
      v6 = re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::find(v17, &v29);
      v7 = (_anonymous_namespace_ *)re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::HashBrown((uint64_t)v27, (uint64_t *)(*((_QWORD *)this + 122) + 72 * v6 + 8));
      v24 = v27;
      v25 = 0;
      if (v28 >= 0x10)
      {
        v8 = 0;
        v9 = v28 >> 4;
        while (1)
        {
          v10 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v27[0] + v8)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
          v25 = (unsigned __int16)~v10;
          if (v10 != 0xFFFF)
            break;
          v8 += 16;
          if (!--v9)
            goto LABEL_17;
        }
        v11 = __clz(__rbit64((unsigned __int16)~v10)) + v8;
        for (i = v11; i != -1; v11 = i)
        {
          v12 = (_DWORD *)(v24[1] + 96 * v11);
          memset(v19, 0, sizeof(v19));
          re::DynamicString::setCapacity(v19, 0);
          v21 = 0;
          v22 = 0;
          v23 = 0;
          re::DynamicString::operator=((re::DynamicString *)v19, (re::DynamicString *)v12);
          v20 = v12[8];
          TypeSize = (_anonymous_namespace_ *)re::mtl::getTypeSize((unsigned __int16)v20);
          v14 = (int)TypeSize;
          v15 = v23;
          v16 = re::mtl::getTypeSize((unsigned __int16)v20);
          memcpy(v15, v12 + 20, v16);
          re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::TechniqueFunctionConstant&>((uint64_t)v5, (re::DynamicString *)v12, 2, (uint64_t)v19);
          if (v21)
          {
            if (v22)
            {
              (*(void (**)(void))(*(_QWORD *)v21 + 40))();
              v22 = 0;
              v23 = 0;
            }
            v21 = 0;
          }
          if (*(_QWORD *)&v19[0])
          {
            if ((BYTE8(v19[0]) & 1) != 0)
              (*(void (**)(void))(**(_QWORD **)&v19[0] + 40))();
          }
          v7 = (_anonymous_namespace_ *)re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v24);
        }
      }
LABEL_17:
      re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)v27);
      ++v4;
    }
    while (v4 != v18);
  }
}

void re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::addNew(__int128 *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::find(a1, a2) == -1)
  {
    if (!*((_QWORD *)a1 + 7))
    {
    }
    v7 = *((_QWORD *)a1 + 4);
    if (!v7 || (v8 = *((_QWORD *)a1 + 2), v8 > 8 * v7))
    {
      re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize(a1);
      v8 = *((_QWORD *)a1 + 2);
    }
    v9 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
    v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
    v11 = v8 >> 4;
    v12 = *(_QWORD *)a1;
    v13 = v10 % v11;
    while (1)
    {
      v14 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v13)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
      if (v14 <= 0x3F)
        break;
      if (v13 + 1 == v11)
        v13 = 0;
      else
        ++v13;
      if (v13 == v10 % v11)
      {
        re::internal::assertLog((re::internal *)4, v6, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
        _os_crash();
        __break(1u);
        break;
      }
    }
    v15 = v12 + 16 * v13;
    v16 = *(unsigned __int8 *)(v15 + v14);
    *(_BYTE *)(v15 + v14) = v10 & 0x7F;
    v17 = v14 + 16 * v13;
    v33 = *a2;
    v18 = re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::HashBrown((uint64_t)&v34, a3);
    v19 = *((_QWORD *)a1 + 1);
    v20 = (uint64_t *)(v19 + 72 * v17);
    *v20 = v33;
    if (v20 != &v33)
    {
      v21 = (_QWORD *)(v19 + 72 * v17);
      v22 = v21[8];
      v21[8] = v41;
      v41 = v22;
      v23 = v21[1];
      v21[1] = v34;
      v34 = v23;
      v24 = v21[2];
      v21[2] = v35;
      v35 = v24;
      v25 = v21[3];
      v21[3] = v36;
      v36 = v25;
      v26 = v21[6];
      v21[6] = v39;
      v39 = v26;
      v27 = v21[7];
      v21[7] = v40;
      v40 = v27;
      v28 = v21[4];
      v21[4] = v37;
      v37 = v28;
      v29 = v21[5];
      v21[5] = v38;
      v38 = v29;
    }
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit(v18);
    v30 = *((_QWORD *)a1 + 4) - (v16 == 255);
    ++*((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 4) = v30;
    v31 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 72 * v17);
    v32 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v31 ^ (v31 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v31 ^ (v31 >> 30))) >> 27));
    *((_QWORD *)a1 + 5) ^= (v32 >> 31) ^ v32;
  }
}

uint64_t re::MaterialManager::createPerSceneBufferTableForName(re::MaterialManager *this, const char *__s, uint64_t a3)
{
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _BOOL8 v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v6 = strlen(__s);
  if (v6)
  {
    MurmurHash3_x64_128((uint64_t)__s, v6, 0, v18);
    v7 = (v18[1] - 0x61C8864680B583E9 + (v18[0] << 6) + (v18[0] >> 2)) ^ v18[0];
  }
  else
  {
    v7 = 0;
  }
  v8 = (a3 - 0x61C8864680B583E9 + (v7 << 6) + (v7 >> 2)) ^ v7;
  v18[0] = v8;
  v9 = (_QWORD *)((char *)this + 544);
  v10 = re::HashTable<unsigned long,re::BufferTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey((uint64_t)this + 544, v8);
  if (v10)
  {
    v11 = 0x7FFFFFFF;
    if (*v9)
    {
      v12 = *(_DWORD *)(*((_QWORD *)this + 69) + 4 * (v8 % *((unsigned int *)this + 142)));
      if (v12 != 0x7FFFFFFF)
      {
        v13 = *((_QWORD *)this + 70);
        v11 = *(_DWORD *)(*((_QWORD *)this + 69) + 4 * (v8 % *((unsigned int *)this + 142)));
        if (*(_QWORD *)(v13 + 24 * v12 + 8) != v8)
        {
          while (1)
          {
            v11 = *(_DWORD *)(v13
                            + 24
                            * *(unsigned int *)(*((_QWORD *)this + 69) + 4 * (v8 % *((unsigned int *)this + 142)))) & 0x7FFFFFFF;
            if (v11 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v13 + 24 * v11 + 8) == v8)
              return *(_QWORD *)(*((_QWORD *)this + 70) + 24 * v11 + 16);
          }
          v11 = 0x7FFFFFFF;
        }
      }
    }
    return *(_QWORD *)(*((_QWORD *)this + 70) + 24 * v11 + 16);
  }
  else
  {
    v14 = re::globalAllocators((re *)v10);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14[2] + 32))(v14[2], 288, 8);
    *(_OWORD *)v15 = 0u;
    *(_OWORD *)(v15 + 16) = 0u;
    *(_OWORD *)(v15 + 32) = 0u;
    *(_OWORD *)(v15 + 48) = 0u;
    *(_OWORD *)(v15 + 64) = 0u;
    *(_OWORD *)(v15 + 80) = 0u;
    *(_OWORD *)(v15 + 96) = 0u;
    *(_OWORD *)(v15 + 112) = 0u;
    *(_OWORD *)(v15 + 128) = 0u;
    *(_OWORD *)(v15 + 144) = 0u;
    *(_OWORD *)(v15 + 160) = 0u;
    *(_OWORD *)(v15 + 176) = 0u;
    *(_OWORD *)(v15 + 192) = 0u;
    *(_OWORD *)(v15 + 208) = 0u;
    *(_OWORD *)(v15 + 224) = 0u;
    *(_OWORD *)(v15 + 240) = 0u;
    *(_OWORD *)(v15 + 256) = 0u;
    *(_OWORD *)(v15 + 272) = 0u;
    *(_DWORD *)(v15 + 160) = 1;
    *(_QWORD *)(v15 + 176) = 0;
    *(_QWORD *)(v15 + 184) = 0;
    *(_QWORD *)(v15 + 168) = 0;
    *(_DWORD *)(v15 + 192) = 0;
    *(_QWORD *)(v15 + 208) = 0;
    *(_QWORD *)(v15 + 216) = 0;
    *(_QWORD *)(v15 + 200) = 0;
    *(_DWORD *)(v15 + 224) = 0;
    *(_OWORD *)(v15 + 232) = 0u;
    *(_OWORD *)(v15 + 248) = 0u;
    *(_DWORD *)(v15 + 264) = 0;
    v17 = v15;
    re::HashTable<unsigned long,re::BufferTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::BufferTable *&>((uint64_t)v9, v18, &v17);
  }
  return v15;
}

uint64_t re::MaterialManager::deinit(re::MaterialManager *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  re *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  re::SamplerTable *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;

  v2 = (uint64_t *)((char *)this + 544);
  v3 = *((unsigned int *)this + 144);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = (int *)*((_QWORD *)this + 70);
    while (1)
    {
      v6 = *v5;
      v5 += 6;
      if (v6 < 0)
        break;
      if (v3 == ++v4)
      {
        LODWORD(v4) = *((_DWORD *)this + 144);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if ((_DWORD)v3 != (_DWORD)v4)
  {
    v7 = v4;
    do
    {
      re::internal::destroyPersistent<re::BufferTable>(*(re **)(*((_QWORD *)this + 70) + 24 * v7 + 16));
      if (*((_DWORD *)this + 144) <= (v4 + 1))
        v8 = v4 + 1;
      else
        v8 = *((_DWORD *)this + 144);
      v9 = v4;
      while (1)
      {
        v7 = (v9 + 1);
        if (v8 - 1 == v9)
          break;
        ++v9;
        LODWORD(v4) = v7;
        if ((*(_DWORD *)(*((_QWORD *)this + 70) + 24 * v7) & 0x80000000) != 0)
          goto LABEL_17;
      }
      LODWORD(v4) = v8;
LABEL_17:
      ;
    }
    while ((_DWORD)v3 != (_DWORD)v4);
  }
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit(v2);
  v10 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v10)
  {
    v11 = (id *)*((_QWORD *)this + 54);
    v12 = 8 * v10;
    do
    {
      objc_destroyWeak(v11);
      *v11++ = 0;
      v12 -= 8;
    }
    while (v12);
  }
  ++*((_DWORD *)this + 106);
  re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::deinit((uint64_t)this + 400);
  os_unfair_lock_lock((os_unfair_lock_t)this + 122);
  re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 55);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 122);
  v13 = *((unsigned int *)this + 132);
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = (int *)*((_QWORD *)this + 64);
    while (1)
    {
      v16 = *v15;
      v15 += 6;
      if (v16 < 0)
        break;
      if (v13 == ++v14)
      {
        LODWORD(v14) = *((_DWORD *)this + 132);
        break;
      }
    }
  }
  else
  {
    LODWORD(v14) = 0;
  }
  if ((_DWORD)v13 != (_DWORD)v14)
  {
    v17 = v14;
    do
    {
      re::internal::destroyPersistent<re::TextureTable>(*(re **)(*((_QWORD *)this + 64) + 24 * v17 + 16));
      if (*((_DWORD *)this + 132) <= (v14 + 1))
        v18 = v14 + 1;
      else
        v18 = *((_DWORD *)this + 132);
      v19 = v14;
      while (1)
      {
        v17 = (v19 + 1);
        if (v18 - 1 == v19)
          break;
        ++v19;
        LODWORD(v14) = v17;
        if ((*(_DWORD *)(*((_QWORD *)this + 64) + 24 * v17) & 0x80000000) != 0)
          goto LABEL_37;
      }
      LODWORD(v14) = v18;
LABEL_37:
      ;
    }
    while ((_DWORD)v13 != (_DWORD)v14);
  }
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 62);
  v21 = *((unsigned int *)this + 156);
  if ((_DWORD)v21)
  {
    v22 = 0;
    v23 = (int *)*((_QWORD *)this + 76);
    while (1)
    {
      v24 = *v23;
      v23 += 6;
      if (v24 < 0)
        break;
      if (v21 == ++v22)
      {
        LODWORD(v22) = *((_DWORD *)this + 156);
        break;
      }
    }
  }
  else
  {
    LODWORD(v22) = 0;
  }
  if ((_DWORD)v21 != (_DWORD)v22)
  {
    v25 = v22;
    v26 = *((_DWORD *)this + 156);
    do
    {
      v27 = *(re::SamplerTable **)(*((_QWORD *)this + 76) + 24 * v25 + 16);
      if (v27)
      {
        v28 = re::globalAllocators(v20)[2];
        re::SamplerTable::~SamplerTable(v27);
        v20 = (re *)(*(uint64_t (**)(uint64_t, re::SamplerTable *))(*(_QWORD *)v28 + 40))(v28, v27);
        v26 = *((_DWORD *)this + 156);
      }
      if (v26 <= (int)v22 + 1)
        v29 = v22 + 1;
      else
        v29 = v26;
      while (1)
      {
        v25 = (v22 + 1);
        if (v29 - 1 == (_DWORD)v22)
          break;
        LODWORD(v22) = v22 + 1;
        v30 = v25;
        if ((*(_DWORD *)(*((_QWORD *)this + 76) + 24 * v25) & 0x80000000) != 0)
          goto LABEL_55;
      }
      v30 = v29;
LABEL_55:
      LODWORD(v22) = v30;
    }
    while ((_DWORD)v21 != v30);
  }
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 74);
  v31 = *((unsigned int *)this + 44);
  if ((_DWORD)v31)
  {
    v32 = 0;
    v33 = (int *)*((_QWORD *)this + 20);
    while (1)
    {
      v34 = *v33;
      v33 += 6;
      if (v34 < 0)
        break;
      if (v31 == ++v32)
      {
        LODWORD(v32) = *((_DWORD *)this + 44);
        break;
      }
    }
  }
  else
  {
    LODWORD(v32) = 0;
  }
  if ((_DWORD)v31 != (_DWORD)v32)
  {
    v35 = v32;
    do
    {
      re::internal::destroyPersistent<re::TechniqueResolutions<re::AttributeResolution>>(*(re **)(*((_QWORD *)this + 20)
                                                                                                + 24 * v35
                                                                                                + 16));
      if (*((_DWORD *)this + 44) <= (v32 + 1))
        v36 = v32 + 1;
      else
        v36 = *((_DWORD *)this + 44);
      v37 = v32;
      while (1)
      {
        v35 = (v37 + 1);
        if (v36 - 1 == v37)
          break;
        ++v37;
        LODWORD(v32) = v35;
        if ((*(_DWORD *)(*((_QWORD *)this + 20) + 24 * v35) & 0x80000000) != 0)
          goto LABEL_72;
      }
      LODWORD(v32) = v36;
LABEL_72:
      ;
    }
    while ((_DWORD)v31 != (_DWORD)v32);
  }
  v38 = *((unsigned int *)this + 32);
  if ((_DWORD)v38)
  {
    v39 = 0;
    v40 = (int *)*((_QWORD *)this + 14);
    while (1)
    {
      v41 = *v40;
      v40 += 6;
      if (v41 < 0)
        break;
      if (v38 == ++v39)
      {
        LODWORD(v39) = *((_DWORD *)this + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v39) = 0;
  }
  if ((_DWORD)v38 != (_DWORD)v39)
  {
    v42 = v39;
    do
    {
      re::internal::destroyPersistent<re::TechniqueResolutions<re::BufferResolution>>(*(re **)(*((_QWORD *)this + 14)
                                                                                             + 24 * v42
                                                                                             + 16));
      if (*((_DWORD *)this + 32) <= (v39 + 1))
        v43 = v39 + 1;
      else
        v43 = *((_DWORD *)this + 32);
      v44 = v39;
      while (1)
      {
        v42 = (v44 + 1);
        if (v43 - 1 == v44)
          break;
        ++v44;
        LODWORD(v39) = v42;
        if ((*(_DWORD *)(*((_QWORD *)this + 14) + 24 * v42) & 0x80000000) != 0)
          goto LABEL_89;
      }
      LODWORD(v39) = v43;
LABEL_89:
      ;
    }
    while ((_DWORD)v38 != (_DWORD)v39);
  }
  v45 = *((unsigned int *)this + 20);
  if ((_DWORD)v45)
  {
    v46 = 0;
    v47 = (int *)*((_QWORD *)this + 8);
    while (1)
    {
      v48 = *v47;
      v47 += 6;
      if (v48 < 0)
        break;
      if (v45 == ++v46)
      {
        LODWORD(v46) = *((_DWORD *)this + 20);
        break;
      }
    }
  }
  else
  {
    LODWORD(v46) = 0;
  }
  if ((_DWORD)v45 != (_DWORD)v46)
  {
    v49 = v46;
    do
    {
      re::internal::destroyPersistent<re::TechniqueResolutions<re::BufferResolution>>(*(re **)(*((_QWORD *)this + 8)
                                                                                             + 24 * v49
                                                                                             + 16));
      if (*((_DWORD *)this + 20) <= (v46 + 1))
        v50 = v46 + 1;
      else
        v50 = *((_DWORD *)this + 20);
      v51 = v46;
      while (1)
      {
        v49 = (v51 + 1);
        if (v50 - 1 == v51)
          break;
        ++v51;
        LODWORD(v46) = v49;
        if ((*(_DWORD *)(*((_QWORD *)this + 8) + 24 * v49) & 0x80000000) != 0)
          goto LABEL_106;
      }
      LODWORD(v46) = v50;
LABEL_106:
      ;
    }
    while ((_DWORD)v45 != (_DWORD)v46);
  }
  v52 = *((unsigned int *)this + 8);
  if ((_DWORD)v52)
  {
    v53 = 0;
    v54 = (int *)*((_QWORD *)this + 2);
    while (1)
    {
      v55 = *v54;
      v54 += 6;
      if (v55 < 0)
        break;
      if (v52 == ++v53)
      {
        LODWORD(v53) = *((_DWORD *)this + 8);
        break;
      }
    }
  }
  else
  {
    LODWORD(v53) = 0;
  }
  if ((_DWORD)v52 != (_DWORD)v53)
  {
    v56 = v53;
    do
    {
      re::internal::destroyPersistent<re::TechniqueResolutions<re::ConstantResolution>>(*(re **)(*((_QWORD *)this + 2)
                                                                                               + 24 * v56
                                                                                               + 16));
      if (*((_DWORD *)this + 8) <= (v53 + 1))
        v57 = v53 + 1;
      else
        v57 = *((_DWORD *)this + 8);
      v58 = v53;
      while (1)
      {
        v56 = (v58 + 1);
        if (v57 - 1 == v58)
          break;
        ++v58;
        LODWORD(v53) = v56;
        if ((*(_DWORD *)(*((_QWORD *)this + 2) + 24 * v56) & 0x80000000) != 0)
          goto LABEL_123;
      }
      LODWORD(v53) = v57;
LABEL_123:
      ;
    }
    while ((_DWORD)v52 != (_DWORD)v53);
  }
  v59 = *((unsigned int *)this + 56);
  if ((_DWORD)v59)
  {
    v60 = 0;
    v61 = (int *)*((_QWORD *)this + 26);
    while (1)
    {
      v62 = *v61;
      v61 += 6;
      if (v62 < 0)
        break;
      if (v59 == ++v60)
      {
        LODWORD(v60) = *((_DWORD *)this + 56);
        break;
      }
    }
  }
  else
  {
    LODWORD(v60) = 0;
  }
  if ((_DWORD)v59 != (_DWORD)v60)
  {
    v63 = v60;
    do
    {
      re::internal::destroyPersistent<re::TechniqueResolutions<re::BufferResolution>>(*(re **)(*((_QWORD *)this + 26)
                                                                                             + 24 * v63
                                                                                             + 16));
      if (*((_DWORD *)this + 56) <= (v60 + 1))
        v64 = v60 + 1;
      else
        v64 = *((_DWORD *)this + 56);
      v65 = v60;
      while (1)
      {
        v63 = (v65 + 1);
        if (v64 - 1 == v65)
          break;
        ++v65;
        LODWORD(v60) = v63;
        if ((*(_DWORD *)(*((_QWORD *)this + 26) + 24 * v63) & 0x80000000) != 0)
          goto LABEL_140;
      }
      LODWORD(v60) = v64;
LABEL_140:
      ;
    }
    while ((_DWORD)v59 != (_DWORD)v60);
  }
  v66 = *((unsigned int *)this + 68);
  if ((_DWORD)v66)
  {
    v67 = 0;
    v68 = (int *)*((_QWORD *)this + 32);
    while (1)
    {
      v69 = *v68;
      v68 += 6;
      if (v69 < 0)
        break;
      if (v66 == ++v67)
      {
        LODWORD(v67) = *((_DWORD *)this + 68);
        break;
      }
    }
  }
  else
  {
    LODWORD(v67) = 0;
  }
  if ((_DWORD)v66 != (_DWORD)v67)
  {
    v70 = v67;
    do
    {
      re::internal::destroyPersistent<re::TechniqueResolutions<re::BufferResolution>>(*(re **)(*((_QWORD *)this + 32)
                                                                                             + 24 * v70
                                                                                             + 16));
      if (*((_DWORD *)this + 68) <= (v67 + 1))
        v71 = v67 + 1;
      else
        v71 = *((_DWORD *)this + 68);
      v72 = v67;
      while (1)
      {
        v70 = (v72 + 1);
        if (v71 - 1 == v72)
          break;
        ++v72;
        LODWORD(v67) = v70;
        if ((*(_DWORD *)(*((_QWORD *)this + 32) + 24 * v70) & 0x80000000) != 0)
          goto LABEL_157;
      }
      LODWORD(v67) = v71;
LABEL_157:
      ;
    }
    while ((_DWORD)v66 != (_DWORD)v67);
  }
  if (*((_DWORD *)this + 265))
  {
    v73 = *((unsigned int *)this + 264);
    if ((_DWORD)v73)
      memset_pattern16(*((void **)this + 130), &memset_pattern_238, 4 * v73);
    v74 = *((unsigned int *)this + 266);
    if ((_DWORD)v74)
    {
      v75 = 0;
      v76 = 32 * v74;
      do
      {
        v77 = *((_QWORD *)this + 131) + v75;
        v78 = *(_DWORD *)(v77 + 8);
        if (v78 < 0)
          *(_DWORD *)(v77 + 8) = v78 & 0x7FFFFFFF;
        v75 += 32;
      }
      while (v76 != v75);
    }
    *((_DWORD *)this + 267) = 0x7FFFFFFF;
    *(_QWORD *)((char *)this + 1060) = 0;
    ++*((_DWORD *)this + 268);
  }
  return re::DataArray<re::MaterialParameterBlock>::deinit((uint64_t)this + 1080);
}

re *re::internal::destroyPersistent<re::BufferTable>(re *result)
{
  re::BufferTable *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = re::globalAllocators(result)[2];
    re::BufferTable::~BufferTable(v1);
    return (re *)(*(uint64_t (**)(uint64_t, re::BufferTable *))(*(_QWORD *)v2 + 40))(v2, v1);
  }
  return result;
}

re *re::internal::destroyPersistent<re::TextureTable>(re *result)
{
  re *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = re::globalAllocators(result)[2];
    re::TextureTableImpl<NS::SharedPtr<MTL::Texture>>::~TextureTableImpl(v1);
    return (re *)(*(uint64_t (**)(uint64_t, re *))(*(_QWORD *)v2 + 40))(v2, v1);
  }
  return result;
}

re *re::internal::destroyPersistent<re::TechniqueResolutions<re::AttributeResolution>>(re *result)
{
  re *v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    v2 = re::globalAllocators(result)[2];
    v3 = *((_QWORD *)v1 + 1);
    if (v3)
    {
      if (*((_QWORD *)v1 + 5))
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
      *((_QWORD *)v1 + 5) = 0;
      *((_QWORD *)v1 + 2) = 0;
      *((_QWORD *)v1 + 3) = 0;
      *((_QWORD *)v1 + 1) = 0;
      ++*((_DWORD *)v1 + 8);
    }
    return (re *)(*(uint64_t (**)(uint64_t, re *))(*(_QWORD *)v2 + 40))(v2, v1);
  }
  return result;
}

re *re::internal::destroyPersistent<re::TechniqueResolutions<re::BufferResolution>>(re *result)
{
  re *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v1 = result;
    v2 = re::globalAllocators(result)[2];
    v3 = *((_QWORD *)v1 + 6);
    if (v3)
    {
      if (*((_QWORD *)v1 + 10))
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
      *((_QWORD *)v1 + 10) = 0;
      *((_QWORD *)v1 + 7) = 0;
      *((_QWORD *)v1 + 8) = 0;
      *((_QWORD *)v1 + 6) = 0;
      ++*((_DWORD *)v1 + 18);
    }
    v4 = *((_QWORD *)v1 + 1);
    if (v4)
    {
      if (*((_QWORD *)v1 + 5))
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
      *((_QWORD *)v1 + 5) = 0;
      *((_QWORD *)v1 + 2) = 0;
      *((_QWORD *)v1 + 3) = 0;
      *((_QWORD *)v1 + 1) = 0;
      ++*((_DWORD *)v1 + 8);
    }
    return (re *)(*(uint64_t (**)(uint64_t, re *))(*(_QWORD *)v2 + 40))(v2, v1);
  }
  return result;
}

re *re::internal::destroyPersistent<re::TechniqueResolutions<re::ConstantResolution>>(re *result)
{
  re *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = re::globalAllocators(result)[2];
    re::DynamicArray<re::ConstantResolution>::deinit((uint64_t)v1 + 48);
    re::DynamicArray<re::ConstantResolution>::deinit((uint64_t)v1 + 8);
    return (re *)(*(uint64_t (**)(uint64_t, re *))(*(_QWORD *)v2 + 40))(v2, v1);
  }
  return result;
}

uint64_t re::DataArray<re::MaterialParameterBlock>::deinit(uint64_t result)
{
  uint64_t *v1;
  double v2;
  _QWORD *v3;

  if (*(_DWORD *)(result + 44))
  {
    v1 = (uint64_t *)result;
    v2 = re::DataArray<re::MaterialParameterBlock>::clear((_QWORD *)result);
    if (!v1[2])
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v3 = (_QWORD *)v1[4];
    (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)*v1 + 40))(*v1, *v3, v2);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v3[1]);
    result = *v1;
    if (*v1)
    {
      if (v1[4])
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
      v1[4] = 0;
      v1[1] = 0;
      v1[2] = 0;
      *v1 = 0;
      ++*((_DWORD *)v1 + 6);
    }
    *((_DWORD *)v1 + 11) = 0;
  }
  return result;
}

uint64_t re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::TextureTable *&>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  v6 = *a2;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  v7 = v6 % *(unsigned int *)(a1 + 24);
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v7);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addEmplace<re::TextureTable *&>(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 16) + 24 * v11;
    return v10 + 16;
  }
  v9 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v9 + 24 * v8 + 8) != v6)
  {
    LODWORD(v8) = *(_DWORD *)(v9 + 24 * v8) & 0x7FFFFFFF;
    if ((_DWORD)v8 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v10 = v9 + 24 * v8;
  return v10 + 16;
}

BOOL re::HashTable<unsigned long,re::BufferTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (a2 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v2 == 0x7FFFFFFF)
    return 0;
  v4 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v4 + 24 * v2 + 8) == a2)
    return 1;
  do
  {
    LODWORD(v2) = *(_DWORD *)(v4 + 24 * v2) & 0x7FFFFFFF;
    result = (_DWORD)v2 != 0x7FFFFFFF;
  }
  while ((_DWORD)v2 != 0x7FFFFFFF && *(_QWORD *)(v4 + 24 * v2 + 8) != a2);
  return result;
}

void re::HashTable<unsigned long,re::BufferTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::BufferTable *&>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *a2;
  v7 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v7 = v6 % *(unsigned int *)(a1 + 24);
    v8 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v7);
    if ((_DWORD)v8 != 0x7FFFFFFF)
    {
      v13 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(v13 + 24 * v8 + 8) == v6)
        return;
      while (1)
      {
        LODWORD(v8) = *(_DWORD *)(v13 + 24 * v8) & 0x7FFFFFFF;
        if ((_DWORD)v8 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v13 + 24 * v8 + 8) == v6)
          return;
      }
    }
  }
  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v7) = v6 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
      v6 = *a2;
    }
    else
    {
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v9);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v9);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v14 = 24 * v9;
  *(_DWORD *)(v11 + v14) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9 + 8) = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9 + 16) = *a3;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v7) = v9;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
}

uint64_t re::MaterialManager::findTextureTableByName(re::MaterialManager *this, const char *__s)
{
  char *v3;
  size_t v4;
  unint64_t v5;
  uint64_t v6;
  NSObject *v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = (char *)this + 496;
  v4 = strlen(__s);
  if (v4)
  {
    MurmurHash3_x64_128((uint64_t)__s, v4, 0, (unint64_t *)&v9);
    v5 = (*((_QWORD *)&v9 + 1) + ((_QWORD)v9 << 6) + ((unint64_t)v9 >> 2) - 0x61C8864680B583E9) ^ v9;
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)&v9 = v5;
  v6 = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)v3, (uint64_t *)&v9);
  if (v6)
    return *(_QWORD *)v6;
  v8 = *re::graphicsLogObjects(0);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v9) = 136315138;
    *(_QWORD *)((char *)&v9 + 4) = __s;
    _os_log_impl(&dword_224FE9000, v8, OS_LOG_TYPE_DEFAULT, "Texture table %s not found. Returning null.", (uint8_t *)&v9, 0xCu);
  }
  return 0;
}

uint64_t re::MaterialManager::findSamplerTableByName(re::MaterialManager *this, const char *__s)
{
  re *v4;
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = (re *)strlen(__s);
  if (v4)
  {
    v4 = (re *)MurmurHash3_x64_128((uint64_t)__s, (int)v4, 0, (unint64_t *)&v10);
    v5 = (*((_QWORD *)&v10 + 1) + ((_QWORD)v10 << 6) + ((unint64_t)v10 >> 2) - 0x61C8864680B583E9) ^ v10;
  }
  else
  {
    v5 = 0;
  }
  if (*((_QWORD *)this + 74))
  {
    v6 = *(unsigned int *)(*((_QWORD *)this + 75) + 4 * (v5 % *((unsigned int *)this + 154)));
    if ((_DWORD)v6 != 0x7FFFFFFF)
    {
      v9 = *((_QWORD *)this + 76);
      if (*(_QWORD *)(v9 + 24 * v6 + 8) == v5)
        return *(_QWORD *)(v9 + 24 * v6 + 16);
      while (1)
      {
        LODWORD(v6) = *(_DWORD *)(v9 + 24 * v6) & 0x7FFFFFFF;
        if ((_DWORD)v6 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v9 + 24 * v6 + 8) == v5)
          return *(_QWORD *)(v9 + 24 * v6 + 16);
      }
    }
  }
  v7 = *re::graphicsLogObjects(v4);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v10) = 136315138;
    *(_QWORD *)((char *)&v10 + 4) = __s;
    _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, "Sampler table %s not found. Returning null.", (uint8_t *)&v10, 0xCu);
  }
  return 0;
}

uint64_t re::MaterialManager::findPerSceneTextureTableByName(re::MaterialManager *this, const char *__s, uint64_t a3)
{
  char *v5;
  size_t v6;
  unint64_t v7;
  uint64_t v8;
  NSObject *v10;
  _BYTE v11[22];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v5 = (char *)this + 496;
  v6 = strlen(__s);
  if (v6)
  {
    MurmurHash3_x64_128((uint64_t)__s, v6, 0, (unint64_t *)v11);
    v7 = (*(_QWORD *)&v11[8] - 0x61C8864680B583E9 + (*(_QWORD *)v11 << 6) + (*(_QWORD *)v11 >> 2)) ^ *(_QWORD *)v11;
  }
  else
  {
    v7 = 0;
  }
  *(_QWORD *)v11 = (a3 - 0x61C8864680B583E9 + (v7 << 6) + (v7 >> 2)) ^ v7;
  v8 = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)v5, (uint64_t *)v11);
  if (v8)
    return *(_QWORD *)v8;
  v10 = *re::graphicsLogObjects(0);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v11 = 136315394;
    *(_QWORD *)&v11[4] = __s;
    *(_WORD *)&v11[12] = 2048;
    *(_QWORD *)&v11[14] = a3;
    _os_log_impl(&dword_224FE9000, v10, OS_LOG_TYPE_DEFAULT, "Texture table %s for scene index %zu not found. Returning null.", v11, 0x16u);
  }
  return 0;
}

uint64_t re::MaterialManager::findOrCreateTextureTableForName(re::MaterialManager *this, const char *__s)
{
  size_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  v4 = strlen(__s);
  if (v4)
  {
    MurmurHash3_x64_128((uint64_t)__s, v4, 0, (unint64_t *)v12);
    v5 = (v12[1] + (v12[0] << 6) + ((unint64_t)v12[0] >> 2) - 0x61C8864680B583E9) ^ v12[0];
  }
  else
  {
    v5 = 0;
  }
  v12[0] = v5;
  v6 = (char *)this + 496;
  v7 = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)v6, v12);
  if (v7)
    return *(_QWORD *)v7;
  v9 = re::globalAllocators(0);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9[2] + 32))(v9[2], 112, 8);
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_QWORD *)(v10 + 104) = 0;
  *(_QWORD *)v10 = off_24ED76C78;
  v11 = v10;
  re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::TextureTable *&>((uint64_t)v6, (unint64_t *)v12, &v11);
  return v11;
}

void re::MaterialManager::resizeScenes(re::MaterialManager *this, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD **v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  id v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _anonymous_namespace_ *PerSceneBufferTableForName;
  re::BufferTable **v55;
  _anonymous_namespace_ *v56;
  _anonymous_namespace_ *v57;
  _anonymous_namespace_ *v58;
  _anonymous_namespace_ *v59;
  re::BufferTable *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  _anonymous_namespace_ *v65;
  re::BufferTable **v66;
  _anonymous_namespace_ *v67;
  _anonymous_namespace_ *v68;
  _anonymous_namespace_ *v69;
  _anonymous_namespace_ *v70;
  _anonymous_namespace_ *v71;
  _anonymous_namespace_ *v72;
  _anonymous_namespace_ *v73;
  _anonymous_namespace_ *v74;
  _anonymous_namespace_ *v75;
  _anonymous_namespace_ *v76;
  _anonymous_namespace_ *v77;
  _anonymous_namespace_ *v78;
  _anonymous_namespace_ *v79;
  _anonymous_namespace_ *v80;
  _anonymous_namespace_ *v81;
  _anonymous_namespace_ *v82;
  _anonymous_namespace_ *v83;
  _anonymous_namespace_ *v84;
  re::BufferTable *v85;
  const char *v86;
  const char *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE v101[12];
  __int16 v102;
  int v103;
  __int16 v104;
  unint64_t v105;
  __int16 v106;
  unint64_t v107;
  id v108[2];
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  if (a2 <= 4)
    v3 = 4;
  else
    v3 = a2;
  v4 = *((_QWORD *)this + 86);
  v5 = v4;
  if (v3 < v4)
  {
    v6 = v3;
    do
    {
      v7 = *((_QWORD *)this + 86);
      if (v7 <= v6)
      {
        v100 = 0;
        v111 = 0u;
        v112 = 0u;
        v109 = 0u;
        v110 = 0u;
        *(_OWORD *)v108 = 0u;
        v4 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v101 = 136315906;
        *(_QWORD *)&v101[4] = "operator[]";
        v102 = 1024;
        v103 = 789;
        v104 = 2048;
        v105 = v6;
        v106 = 2048;
        v107 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_119:
        v100 = 0;
        v111 = 0u;
        v112 = 0u;
        v109 = 0u;
        v110 = 0u;
        *(_OWORD *)v108 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v101 = 136315906;
        *(_QWORD *)&v101[4] = "operator[]";
        v102 = 1024;
        v103 = 789;
        v104 = 2048;
        v105 = v4;
        v106 = 2048;
        v107 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v8 = *((_QWORD *)this + 88) + (v6 << 6);
      re::internal::destroyPersistent<re::TextureTable>(*(re **)(v8 + 24));
      re::internal::destroyPersistent<re::BufferTable>(*(re **)(v8 + 32));
      re::internal::destroyPersistent<re::BufferTable>(*(re **)(v8 + 40));
      if (*((_QWORD *)this + 62))
      {
        v9 = *(_QWORD *)v8;
        v10 = *(_QWORD *)v8 % (unint64_t)*((unsigned int *)this + 130);
        v11 = *((_QWORD *)this + 63);
        v12 = *(unsigned int *)(v11 + 4 * v10);
        if ((_DWORD)v12 != 0x7FFFFFFF)
        {
          v13 = *((_QWORD *)this + 64);
          if (*(_QWORD *)(v13 + 24 * v12 + 8) == v9)
          {
            *(_DWORD *)(v11 + 4 * v10) = *(_DWORD *)(v13 + 24 * v12) & 0x7FFFFFFF;
LABEL_14:
            v15 = *((_QWORD *)this + 64);
            v16 = (int *)(v15 + 24 * v12);
            v17 = *v16;
            if (*v16 < 0)
            {
              *v16 = v17 & 0x7FFFFFFF;
              v15 = *((_QWORD *)this + 64);
              v17 = *(_DWORD *)(v15 + 24 * v12);
            }
            *(_DWORD *)(v15 + 24 * v12) = *((_DWORD *)this + 133) | v17 & 0x80000000;
            *((_DWORD *)this + 133) = v12;
            --*((_DWORD *)this + 131);
            ++*((_DWORD *)this + 134);
          }
          else
          {
            while (1)
            {
              v14 = v12;
              v12 = *(_DWORD *)(v13 + 24 * v12) & 0x7FFFFFFF;
              if (v12 == 0x7FFFFFFF)
                break;
              if (*(_QWORD *)(v13 + 24 * v12 + 8) == v9)
              {
                *(_DWORD *)(v13 + 24 * v14) = *(_DWORD *)(v13 + 24 * v14) & 0x80000000 | *(_DWORD *)(v13 + 24 * v12) & 0x7FFFFFFF;
                goto LABEL_14;
              }
            }
          }
        }
      }
      re::HashTable<unsigned long,re::BufferTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove((uint64_t)this + 544, *(_QWORD *)(v8 + 8));
      re::HashTable<unsigned long,re::BufferTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove((uint64_t)this + 544, *(_QWORD *)(v8 + 16));
      ++v6;
    }
    while (v6 != v4);
    v5 = *((_QWORD *)this + 86);
  }
  if (v5 >= v3)
  {
    if (v5 <= v3)
      goto LABEL_27;
  }
  else
  {
    if (*((_QWORD *)this + 85) < v3)
    {
      re::DynamicArray<re::MaterialManager::PerSceneTables>::setCapacity((_QWORD *)this + 84, v3);
      v5 = *((_QWORD *)this + 86);
    }
    if (v5 < v3)
    {
      v18 = (void *)(*((_QWORD *)this + 88) + (v5 << 6));
      v19 = (v3 << 6) - (v5 << 6);
      if (v19 >= 1)
        bzero(v18, ((((unint64_t)v19 >> 6) - ((unint64_t)v19 > 0x3F)) << 6) + 64);
    }
  }
  *((_QWORD *)this + 86) = v3;
  ++*((_DWORD *)this + 174);
LABEL_27:
  if (v4 < v3)
  {
    v88 = v3;
    do
    {
      v6 = *((_QWORD *)this + 86);
      if (v6 <= v4)
        goto LABEL_119;
      v20 = *((_QWORD *)this + 88);
      v21 = atomic_load((unsigned __int8 *)&qword_25411A000);
      if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_25411A000))
      {
        _MergedGlobals_384 = re::hashString((re *)"scene", v86);
        __cxa_guard_release(&qword_25411A000);
      }
      v22 = v4 - 0x61C8864680B583E9;
      *(_QWORD *)(v20 + (v4 << 6)) = (v4
                                    - 0x61C8864680B583E9
                                    + (_MergedGlobals_384 << 6)
                                    + ((unint64_t)_MergedGlobals_384 >> 2)) ^ _MergedGlobals_384;
      MurmurHash3_x64_128((uint64_t)"scene", 5, 0, (unint64_t *)v108);
      v23 = ((uint64_t)v108[1] + 64 * (uint64_t)v108[0] + ((unint64_t)v108[0] >> 2) - 0x61C8864680B583E9) ^ (uint64_t)v108[0];
      v108[0] = (id)((v4 - 0x61C8864680B583E9 + (v23 << 6) + (v23 >> 2)) ^ v23);
      v24 = re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey((uint64_t)this + 496, (uint64_t *)v108);
      if (!(_DWORD)v24)
      {
        v27 = re::globalAllocators((re *)v24);
        v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27[2] + 32))(v27[2], 112, 8);
        *(_OWORD *)(v28 + 8) = 0u;
        *(_OWORD *)(v28 + 24) = 0u;
        *(_OWORD *)(v28 + 40) = 0u;
        *(_OWORD *)(v28 + 56) = 0u;
        *(_OWORD *)(v28 + 72) = 0u;
        *(_OWORD *)(v28 + 88) = 0u;
        *(_QWORD *)(v28 + 104) = 0;
        *(_QWORD *)v28 = off_24ED76C78;
        *(_QWORD *)v101 = v28;
        v24 = re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::TextureTable *&>((uint64_t)this + 496, (unint64_t *)v108, v101);
        v29 = *(_QWORD *)v101;
        goto LABEL_41;
      }
      if (*((_QWORD *)this + 62))
      {
        v25 = *((_QWORD *)this + 64);
        v26 = *(unsigned int *)(*((_QWORD *)this + 63) + 4 * ((unint64_t)v108[0] % *((unsigned int *)this + 130)));
        if ((_DWORD)v26 != 0x7FFFFFFF)
        {
          while (*(id *)(v25 + 24 * v26 + 8) != v108[0])
          {
            v26 = *(_DWORD *)(v25 + 24 * v26) & 0x7FFFFFFF;
            if (v26 == 0x7FFFFFFF)
              goto LABEL_39;
          }
          goto LABEL_40;
        }
      }
      else
      {
        v25 = *((_QWORD *)this + 64);
      }
LABEL_39:
      LODWORD(v26) = 0x7FFFFFFF;
LABEL_40:
      v29 = *(_QWORD *)(v25 + 24 * v26 + 16);
LABEL_41:
      v30 = v20 + (v4 << 6);
      *(_QWORD *)(v30 + 24) = v29;
      v31 = (_QWORD **)(v30 + 24);
      v32 = v29 + 72;
      re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::setCapacity((_QWORD *)v32, 0xAuLL);
      ++*(_DWORD *)(v32 + 24);
      v33 = *v31;
      *(_QWORD *)v101 = 0x51D6CB770EC4;
      re::TextureTable::setTexture(v33, (uint64_t *)v101, (id *)(*(_QWORD *)(*((_QWORD *)this + 112) + 64) + 48));
      *(_QWORD *)v101 = 0;
      v34 = *v31;
      v100 = 0x5BE38A6CA01CLL;
      re::TextureTable::setTexture(v34, &v100, (id *)(*(_QWORD *)(*((_QWORD *)this + 112) + 64) + 24));
      v100 = 0;
      v35 = *v31;
      v99 = 0xE459D7324435E49;
      re::TextureTable::setTexture(v35, &v99, (id *)(*(_QWORD *)(*((_QWORD *)this + 112) + 64) + 88));
      v99 = 0;
      v36 = *v31;
      v98 = 0xC0489AC946E8FF4;
      re::TextureTable::setTexture(v36, &v98, (id *)(*(_QWORD *)(*((_QWORD *)this + 112) + 64) + 88));
      v98 = 0;
      v37 = *v31;
      v97 = 0x74B9011688CA44FFLL;
      re::TextureTable::setTexture(v37, &v97, (id *)(*(_QWORD *)(*((_QWORD *)this + 112) + 64) + 88));
      v97 = 0;
      v38 = *v31;
      v96 = 0x23C1563FB78C78B1;
      re::TextureTable::setTexture(v38, &v96, (id *)(*(_QWORD *)(*((_QWORD *)this + 112) + 64) + 88));
      v96 = 0;
      v39 = *v31;
      v95 = 0x5495C6E7C96973E2;
      re::TextureTable::setTexture(v39, &v95, (id *)(*(_QWORD *)(*((_QWORD *)this + 112) + 64) + 88));
      v95 = 0;
      v40 = *v31;
      v94 = 0x4DB123A4BB1CD2C0;
      re::TextureTable::setTexture(v40, &v94, (id *)(*(_QWORD *)(*((_QWORD *)this + 112) + 104) + 776));
      v94 = 0;
      v41 = *v31;
      v93 = 0x564C767D75CDLL;
      v108[0] = 0;
      re::TextureTable::setTexture(v41, &v93, v108);
      if (v108[0])

      v93 = 0;
      v42 = *v31;
      v92 = 0x143F50BFF6F9E46;
      v108[0] = 0;
      re::TextureTable::setTexture(v42, &v92, v108);
      if (v108[0])

      v92 = 0;
      v43 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 112) + 104) + 320) + 80), sel_textureType);
      if (v43 == (id)5)
      {
        v48 = *v31;
        v91 = 0x24E8D221D19BF998;
        v49 = *(_QWORD *)(*((_QWORD *)this + 112) + 104);
        if (v49)
          v49 = *(_QWORD *)(v49 + 320);
        re::TextureTable::setTexture(v48, &v91, (id *)(v49 + 80));
        v91 = 0;
        v46 = *v31;
        v47 = 0x319D4D8796A12B1FLL;
      }
      else
      {
        if (v43 != (id)6)
        {
          v51 = *v31;
          v91 = 0x1AA47CB53A9AC861;
          v52 = *(_QWORD *)(*((_QWORD *)this + 112) + 104);
          if (v52)
            v52 = *(_QWORD *)(v52 + 320);
          re::TextureTable::setTexture(v51, &v91, (id *)(v52 + 80));
          v91 = 0;
          goto LABEL_59;
        }
        v44 = *v31;
        v91 = 0x3F800981E521C7A1;
        v45 = *(_QWORD *)(*((_QWORD *)this + 112) + 104);
        if (v45)
          v45 = *(_QWORD *)(v45 + 320);
        re::TextureTable::setTexture(v44, &v91, (id *)(v45 + 80));
        v91 = 0;
        v46 = *v31;
        v47 = 0x150A18CBFF11727ALL;
      }
      v90 = v47;
      v50 = *(_QWORD *)(*((_QWORD *)this + 112) + 104);
      if (v50)
        v50 = *(_QWORD *)(v50 + 320);
      re::TextureTable::setTexture(v46, &v90, (id *)(v50 + 88));
      v90 = 0;
LABEL_59:
      v53 = v20 + (v4 << 6);
      *(_QWORD *)(v53 + 8) = (v22 + (_MergedGlobals_384 << 6) + ((unint64_t)_MergedGlobals_384 >> 2)) ^ _MergedGlobals_384;
      PerSceneBufferTableForName = (_anonymous_namespace_ *)re::MaterialManager::createPerSceneBufferTableForName(this, "scene", v4);
      *(_QWORD *)(v53 + 32) = PerSceneBufferTableForName;
      v55 = (re::BufferTable **)(v53 + 32);
      v56 = *v55;
      v108[0] = (id)0x29136C0FCC2;
      LOBYTE(v89) = 0;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v56, v108, (char *)&v89);
      if (!*((_DWORD *)v56 + 70))
        *((_DWORD *)v56 + 70) = 1;
      v57 = *v55;
      v108[0] = (id)0x7831721862C9B2CBLL;
      LOBYTE(v89) = 1;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v57, v108, (char *)&v89);
      if (*((_DWORD *)v57 + 70) <= 1u)
        *((_DWORD *)v57 + 70) = 2;
      v58 = *v55;
      v108[0] = (id)0xDFC20BDF4EDA5B3;
      LOBYTE(v89) = 2;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v58, v108, (char *)&v89);
      if (*((_DWORD *)v58 + 70) <= 2u)
        *((_DWORD *)v58 + 70) = 3;
      v59 = *v55;
      v108[0] = (id)0x441AC0ECAF42AD04;
      LOBYTE(v89) = 3;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v59, v108, (char *)&v89);
      if (*((_DWORD *)v59 + 70) <= 3u)
        *((_DWORD *)v59 + 70) = 4;
      v60 = *v55;
      v89 = 0x7831721862C9B2CBLL;
      v61 = *(_QWORD *)(*((_QWORD *)this + 112) + 104);
      if (v61)
        v62 = *(_QWORD *)(v61 + 320);
      else
        v62 = 0;
      v108[0] = *(id *)(v62 + 128);
      LODWORD(v108[1]) = 0;
      HIDWORD(v108[1]) = objc_msgSend(*(id *)(v62 + 128), sel_length);
      re::BufferTable::setBuffer(v60, (const re::WeakStringID *)&v89, (uint64_t)v108);
      if (v108[0])

      v63 = atomic_load((unsigned __int8 *)&qword_25411A010);
      if ((v63 & 1) == 0 && __cxa_guard_acquire(&qword_25411A010))
      {
        qword_25411A008 = re::hashString((re *)"light", v87);
        __cxa_guard_release(&qword_25411A010);
      }
      v64 = v20 + (v4 << 6);
      *(_QWORD *)(v64 + 16) = (v22 + (qword_25411A008 << 6) + ((unint64_t)qword_25411A008 >> 2)) ^ qword_25411A008;
      v65 = (_anonymous_namespace_ *)re::MaterialManager::createPerSceneBufferTableForName(this, "light", v4);
      *(_QWORD *)(v64 + 40) = v65;
      v66 = (re::BufferTable **)(v64 + 40);
      v67 = *v66;
      v108[0] = (id)0x144ABD64D310CF6;
      LOBYTE(v89) = 0;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v67, v108, (char *)&v89);
      if (!*((_DWORD *)v67 + 70))
        *((_DWORD *)v67 + 70) = 1;
      v68 = *v66;
      v108[0] = (id)0x5437C2365207957;
      LOBYTE(v89) = 1;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v68, v108, (char *)&v89);
      if (*((_DWORD *)v68 + 70) <= 1u)
        *((_DWORD *)v68 + 70) = 2;
      v69 = *v66;
      v108[0] = (id)0x3D6DAF04080D176CLL;
      LOBYTE(v89) = 2;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v69, v108, (char *)&v89);
      if (*((_DWORD *)v69 + 70) <= 2u)
        *((_DWORD *)v69 + 70) = 3;
      v70 = *v66;
      v108[0] = (id)0x63A3BE6348A3B8F4;
      LOBYTE(v89) = 3;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v70, v108, (char *)&v89);
      if (*((_DWORD *)v70 + 70) <= 3u)
        *((_DWORD *)v70 + 70) = 4;
      v71 = *v66;
      v108[0] = (id)0x4FADF8C267199512;
      LOBYTE(v89) = 4;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v71, v108, (char *)&v89);
      if (*((_DWORD *)v71 + 70) <= 4u)
        *((_DWORD *)v71 + 70) = 5;
      v72 = *v66;
      v108[0] = (id)0xA7927F2BBEE1ALL;
      LOBYTE(v89) = 5;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v72, v108, (char *)&v89);
      if (*((_DWORD *)v72 + 70) <= 5u)
        *((_DWORD *)v72 + 70) = 6;
      v73 = *v66;
      v108[0] = (id)0x5294D280395580B0;
      LOBYTE(v89) = 6;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v73, v108, (char *)&v89);
      if (*((_DWORD *)v73 + 70) <= 6u)
        *((_DWORD *)v73 + 70) = 7;
      v74 = *v66;
      v108[0] = (id)0x567D28DE2738;
      LOBYTE(v89) = 7;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v74, v108, (char *)&v89);
      if (*((_DWORD *)v74 + 70) <= 7u)
        *((_DWORD *)v74 + 70) = 8;
      v75 = *v66;
      v108[0] = (id)0x2750CEF3162C90A2;
      LOBYTE(v89) = 8;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v75, v108, (char *)&v89);
      if (*((_DWORD *)v75 + 70) <= 8u)
        *((_DWORD *)v75 + 70) = 9;
      v76 = *v66;
      v108[0] = (id)0x1658EB831E3FF0F9;
      LOBYTE(v89) = 9;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v76, v108, (char *)&v89);
      if (*((_DWORD *)v76 + 70) <= 9u)
        *((_DWORD *)v76 + 70) = 10;
      v77 = *v66;
      v108[0] = (id)0x273A81CF18ED4F0;
      LOBYTE(v89) = 10;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v77, v108, (char *)&v89);
      if (*((_DWORD *)v77 + 70) <= 0xAu)
        *((_DWORD *)v77 + 70) = 11;
      v78 = *v66;
      v108[0] = (id)0x3C5E7C1C007EE27;
      LOBYTE(v89) = 11;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v78, v108, (char *)&v89);
      if (*((_DWORD *)v78 + 70) <= 0xBu)
        *((_DWORD *)v78 + 70) = 12;
      v79 = *v66;
      v108[0] = (id)0x16323C0B1F9DAD6FLL;
      LOBYTE(v89) = 12;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v79, v108, (char *)&v89);
      if (*((_DWORD *)v79 + 70) <= 0xCu)
        *((_DWORD *)v79 + 70) = 13;
      v80 = *v66;
      v108[0] = (id)0x3A27078604AA8089;
      LOBYTE(v89) = 13;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v80, v108, (char *)&v89);
      if (*((_DWORD *)v80 + 70) <= 0xDu)
        *((_DWORD *)v80 + 70) = 14;
      v81 = *v66;
      v108[0] = (id)0xEDE14EC8EBF7251;
      LOBYTE(v89) = 14;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v81, v108, (char *)&v89);
      if (*((_DWORD *)v81 + 70) <= 0xEu)
        *((_DWORD *)v81 + 70) = 15;
      v82 = *v66;
      v108[0] = (id)0x262DF9A294ABAC1CLL;
      LOBYTE(v89) = 15;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v82, v108, (char *)&v89);
      if (*((_DWORD *)v82 + 70) <= 0xFu)
        *((_DWORD *)v82 + 70) = 16;
      v83 = *v66;
      v108[0] = (id)0x6C67F4CE96CFCB6ALL;
      LOBYTE(v89) = 16;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v83, v108, (char *)&v89);
      if (*((_DWORD *)v83 + 70) <= 0x10u)
        *((_DWORD *)v83 + 70) = 17;
      v84 = *v66;
      v108[0] = (id)0x458FBDFDF334653DLL;
      LOBYTE(v89) = 17;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew(v84, v108, (char *)&v89);
      if (*((_DWORD *)v84 + 70) <= 0x11u)
        *((_DWORD *)v84 + 70) = 18;
      v85 = *v66;
      v89 = 0x458FBDFDF334653DLL;
      v108[0] = *((id *)this + 106);
      LODWORD(v108[1]) = 0;
      HIDWORD(v108[1]) = objc_msgSend(*((id *)this + 106), sel_length);
      re::BufferTable::setBuffer(v85, (const re::WeakStringID *)&v89, (uint64_t)v108);
      if (v108[0])

      ++v4;
    }
    while (v4 != v88);
  }
}

uint64_t re::HashTable<unsigned long,re::BufferTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;

  if (*(_QWORD *)result)
  {
    v2 = a2 % *(unsigned int *)(result + 24);
    v3 = *(_QWORD *)(result + 8);
    v4 = *(unsigned int *)(v3 + 4 * v2);
    if ((_DWORD)v4 != 0x7FFFFFFF)
    {
      v5 = *(_QWORD *)(result + 16);
      if (*(_QWORD *)(v5 + 24 * v4 + 8) == a2)
      {
        *(_DWORD *)(v3 + 4 * v2) = *(_DWORD *)(v5 + 24 * v4) & 0x7FFFFFFF;
LABEL_8:
        v7 = *(_QWORD *)(result + 16);
        v8 = (int *)(v7 + 24 * v4);
        v9 = *v8;
        if (*v8 < 0)
        {
          *v8 = v9 & 0x7FFFFFFF;
          v7 = *(_QWORD *)(result + 16);
          v9 = *(_DWORD *)(v7 + 24 * v4);
        }
        v10 = *(_DWORD *)(result + 40);
        *(_DWORD *)(v7 + 24 * v4) = *(_DWORD *)(result + 36) | v9 & 0x80000000;
        --*(_DWORD *)(result + 28);
        *(_DWORD *)(result + 36) = v4;
        *(_DWORD *)(result + 40) = v10 + 1;
      }
      else
      {
        while (1)
        {
          v6 = v4;
          LODWORD(v4) = *(_DWORD *)(v5 + 24 * v4) & 0x7FFFFFFF;
          if ((_DWORD)v4 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v5 + 24 * v4 + 8) == a2)
          {
            *(_DWORD *)(v5 + 24 * v6) = *(_DWORD *)(v5 + 24 * v6) & 0x80000000 | *(_DWORD *)(v5
                                                                                               + 24 * v4) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
  return result;
}

uint64_t re::MaterialManager::sceneTextures(re::MaterialManager *this, unint64_t a2)
{
  NSObject *v4;
  int v5;
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 86) > a2)
    return *(_QWORD *)(*((_QWORD *)this + 88) + (a2 << 6) + 24);
  v4 = *re::graphicsLogObjects(this);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 134217984;
    v6 = a2;
    _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEFAULT, "Scene index %zu for scene texture table is out of range. Returning null.", (uint8_t *)&v5, 0xCu);
  }
  return 0;
}

uint64_t re::MaterialManager::lightBuffers(re::MaterialManager *this, unint64_t a2)
{
  NSObject *v4;
  int v5;
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 86) > a2)
    return *(_QWORD *)(*((_QWORD *)this + 88) + (a2 << 6) + 40);
  v4 = *re::graphicsLogObjects(this);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 134217984;
    v6 = a2;
    _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEFAULT, "Scene index %zu for light buffer table is out of range. Returning null.", (uint8_t *)&v5, 0xCu);
  }
  return 0;
}

uint64_t re::MaterialManager::sceneBuffers(re::MaterialManager *this, unint64_t a2)
{
  NSObject *v4;
  int v5;
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 86) > a2)
    return *(_QWORD *)(*((_QWORD *)this + 88) + (a2 << 6) + 32);
  v4 = *re::graphicsLogObjects(this);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 134217984;
    v6 = a2;
    _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEFAULT, "Scene index %zu for scene buffer table is out of range. Returning null.", (uint8_t *)&v5, 0xCu);
  }
  return 0;
}

unint64_t re::MaterialManager::sceneConstants(re::MaterialManager *this, unint64_t a2)
{
  NSObject *v4;
  int v5;
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 86) > a2)
    return *((_QWORD *)this + 88) + (a2 << 6) + 48;
  v4 = *re::graphicsLogObjects(this);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 134217984;
    v6 = a2;
    _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEFAULT, "Scene index %zu for scene buffer table is out of range. Returning null.", (uint8_t *)&v5, 0xCu);
  }
  return 0;
}

uint64_t *re::MaterialManager::generateDebugTechnique(re::MaterialManager *this, const re::MaterialInstance *a2, unint64_t a3)
{
  re::MaterialManager *v5;
  _anonymous_namespace_ *v6;
  uint64_t *v7;
  _anonymous_namespace_ *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::DynamicString *v16;
  re::DynamicString *v17;
  uint64_t v18;
  uint64_t v19;
  re *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  re::DynamicString *v27;
  _QWORD v28[2];
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  const char *v57;
  __int16 v58;
  int v59;
  __int16 v60;
  unint64_t v61;
  __int16 v62;
  re::MaterialManager *v63;
  _OWORD v64[5];
  uint64_t v65;

  v5 = this;
  v65 = *MEMORY[0x24BDAC8D0];
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v32, 0);
  v7 = &v37;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  re::DynamicString::operator=((re::DynamicString *)&v32, (re::DynamicString *)&v44);
  v8 = (_anonymous_namespace_ *)v44;
  if ((_QWORD)v44 && (BYTE8(v44) & 1) != 0)
    v8 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v44 + 40))();
  v9 = 1;
  if (!v38)
  {
    v41 = 0;
    v45 = 0u;
    memset(v46, 0, sizeof(v46));
    v44 = 0u;
    a3 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v64[0]) = 136315906;
    *(_QWORD *)((char *)v64 + 4) = "operator[]";
    WORD6(v64[0]) = 1024;
    *(_DWORD *)((char *)v64 + 14) = 468;
    WORD1(v64[1]) = 2048;
    *(_QWORD *)((char *)&v64[1] + 4) = 0;
    WORD6(v64[1]) = 2048;
    *(_QWORD *)((char *)&v64[1] + 14) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_41;
  }
  *v39 = 1;
  v36 = 2687029;
  v7 = (uint64_t *)*((_QWORD *)a2 + 13);
  if ((unint64_t)v7 <= a3)
  {
LABEL_41:
    v41 = 0;
    v45 = 0u;
    memset(v46, 0, sizeof(v46));
    v44 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v64[0]) = 136315906;
    *(_QWORD *)((char *)v64 + 4) = "operator[]";
    WORD6(v64[0]) = 1024;
    *(_DWORD *)((char *)v64 + 14) = 468;
    WORD1(v64[1]) = 2048;
    *(_QWORD *)((char *)&v64[1] + 4) = a3;
    WORD6(v64[1]) = 2048;
    *(_QWORD *)((char *)&v64[1] + 14) = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_42:
    v41 = 0;
    v45 = 0u;
    memset(v46, 0, sizeof(v46));
    v44 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v64[0]) = 136315906;
    *(_QWORD *)((char *)v64 + 4) = "operator[]";
    WORD6(v64[0]) = 1024;
    *(_DWORD *)((char *)v64 + 14) = 468;
    WORD1(v64[1]) = 2048;
    *(_QWORD *)((char *)&v64[1] + 4) = a3;
    WORD6(v64[1]) = 2048;
    *(_QWORD *)((char *)&v64[1] + 14) = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_43:
    v41 = 0;
    v45 = 0u;
    memset(v46, 0, sizeof(v46));
    v44 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v64[0]) = 136315906;
    *(_QWORD *)((char *)v64 + 4) = "operator[]";
    WORD6(v64[0]) = 1024;
    *(_DWORD *)((char *)v64 + 14) = 476;
    WORD1(v64[1]) = 2048;
    *(_QWORD *)((char *)&v64[1] + 4) = a3;
    WORD6(v64[1]) = 2048;
    *(_QWORD *)((char *)&v64[1] + 14) = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_44:
    v41 = 0;
    v45 = 0u;
    memset(v46, 0, sizeof(v46));
    v44 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v64[0]) = 136315906;
    *(_QWORD *)((char *)v64 + 4) = "operator[]";
    WORD6(v64[0]) = 1024;
    *(_DWORD *)((char *)v64 + 14) = 476;
    WORD1(v64[1]) = 2048;
    *(_QWORD *)((char *)&v64[1] + 4) = a3;
    WORD6(v64[1]) = 2048;
    *(_QWORD *)((char *)&v64[1] + 14) = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_45;
  }
  v10 = (uint64_t *)(*((_QWORD *)a2 + 14) + 40 * a3);
  if (*v10)
    goto LABEL_32;
  v11 = *((_QWORD *)a2 + 2);
  v7 = *(uint64_t **)(v11 + 120);
  if ((unint64_t)v7 <= a3)
    goto LABEL_42;
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 128) + 8 * a3);
  if (!v12)
  {
    std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100](v10, 0);
    goto LABEL_32;
  }
  v31 = 0;
  v28[1] = 0;
  v29 = 0;
  v28[0] = 0;
  v30 = 0;
  v9 = *((_QWORD *)a2 + 10);
  if (v9 <= a3)
    goto LABEL_43;
  v13 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 40 * a3);
  v26 = 0;
  v27 = 0;
  v15 = v13 + 16;
  v14 = *(_QWORD *)(v13 + 16);
  v25 = 0;
  if (v14)
  {
    re::FixedArray<re::TechniqueFunctionConstant>::init<>(&v25, v14, *(_QWORD *)(v13 + 24));
    re::FixedArray<re::TechniqueFunctionConstant>::copy((uint64_t)&v25, v15);
    if (v26)
    {
      v16 = v27;
      v17 = (re::DynamicString *)((char *)v27 + 64 * v26);
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)&v44, v16);
        LODWORD(v46[0]) = *((_DWORD *)v16 + 8);
        re::FixedArray<unsigned char>::FixedArray((_QWORD *)v46 + 1, (uint64_t *)v16 + 5);
        re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v28, (re::DynamicString *)&v44);
        if (*((_QWORD *)&v46[0] + 1))
        {
          if (*(_QWORD *)&v46[1])
          {
            (*(void (**)(void))(**((_QWORD **)&v46[0] + 1) + 40))();
            v46[1] = 0uLL;
          }
          *((_QWORD *)&v46[0] + 1) = 0;
        }
        if ((_QWORD)v44 && (BYTE8(v44) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v44 + 40))();
        v16 = (re::DynamicString *)((char *)v16 + 64);
      }
      while (v16 != v17);
    }
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v28, (re::DynamicString *)&v32);
  v9 = *((_QWORD *)a2 + 10);
  if (v9 <= a3)
    goto LABEL_44;
  v18 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 40 * a3);
  if (*(_BYTE *)(v18 + 40))
    v19 = v18 + 48;
  else
    v19 = *(_QWORD *)v18 + 8;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)&v44, 0);
  *(_QWORD *)&v44 = &off_24ED73208;
  v45 = 0u;
  memset(v46, 0, 28);
  *(_QWORD *)((char *)&v46[1] + 12) = 0x7FFFFFFFLL;
  v50 = 0;
  v47 = 0;
  v48 = 0;
  *((_QWORD *)&v46[2] + 1) = 0;
  v49 = 0;
  v51 = 0;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v20 = (re *)*((_QWORD *)v5 + 112);
  v24 = 0;
  re::MaterialBuilder::generateTechnique(v20, v12, (uint64_t)a2, v31, v29, v19, (uint64_t)&v41, &v24, 0, 0);
  if (v24)
  {

    v24 = 0;
  }
  if (!(_BYTE)v41)
    goto LABEL_31;
  v5 = (re::MaterialManager *)*((_QWORD *)a2 + 13);
  if ((unint64_t)v5 <= a3)
  {
LABEL_45:
    v40 = 0;
    memset(v64, 0, sizeof(v64));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v56 = 136315906;
    v57 = "operator[]";
    v58 = 1024;
    v59 = 468;
    v60 = 2048;
    v61 = a3;
    v62 = 2048;
    v63 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v21 = (uint64_t *)(*((_QWORD *)a2 + 14) + 40 * a3);
  v22 = v42;
  v42 = 0;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100](v21, v22);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100](v21 + 1, (uint64_t)&v43);
LABEL_31:
  re::Result<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>,re::DynamicString>::~Result((uint64_t)&v41);
  re::FunctionReflectionCache::~FunctionReflectionCache((re::FunctionReflectionCache *)&v44);
  re::FixedArray<re::TechniqueFunctionConstant>::deinit(&v25);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v28);
LABEL_32:
  if (v37)
  {
    if (v38)
    {
      (*(void (**)(void))(*(_QWORD *)v37 + 40))();
      v38 = 0;
      v39 = 0;
    }
    v37 = 0;
  }
  result = v32;
  if (v32)
  {
    if ((v33 & 1) != 0)
      return (uint64_t *)(*(uint64_t (**)(void))(*v32 + 40))();
  }
  return result;
}

void re::MaterialManager::createMaterial(uint64_t a1@<X0>, re::MaterialBuilder *a2@<X1>, _QWORD *a3@<X8>)
{
  re *v5;
  uint64_t v6;
  id v7;
  void *v8;
  _anonymous_namespace_ *inited;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  NSObject *v17;
  NSObject *v18;
  id *v19;
  _BYTE *v20;
  uint8_t v21[8];
  uint64_t v22;
  char v23;
  _BYTE v24[31];
  id location[4];

  location[3] = *(id *)MEMORY[0x24BDAC8D0];
  if ((*((_DWORD *)a2 + 286) & 0xFFFFFFFE) == 6)
  {
    re::MaterialBuilder::result(a2, *(re::RenderManager **)(a1 + 896), (uint64_t)v21);
    if (v21[0])
    {
      v6 = v22;
      *a3 = v22;
      if (v6)
      {
        v7 = (id)(v6 + 8);
        v8 = (void *)(v6 + 8);
      }
      else
      {
        v8 = 0;
      }
      inited = (_anonymous_namespace_ *)objc_initWeak(location, v8);
      v10 = *(_QWORD *)(a1 + 408);
      v11 = *(_QWORD *)(a1 + 416);
      if (v11 >= v10)
      {
        v12 = v11 + 1;
        if (v10 < v11 + 1)
        {
          if (*(_QWORD *)(a1 + 400))
          {
            v13 = 2 * v10;
            v14 = v10 == 0;
            v15 = 8;
            if (!v14)
              v15 = v13;
            if (v15 <= v12)
              v16 = v12;
            else
              v16 = v15;
            re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::setCapacity((_QWORD *)(a1 + 400), v16);
          }
          else
          {
            re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::setCapacity((_QWORD *)(a1 + 400), v12);
            ++*(_DWORD *)(a1 + 424);
          }
        }
        v11 = *(_QWORD *)(a1 + 416);
      }
      v19 = (id *)(*(_QWORD *)(a1 + 432) + 8 * v11);
      *v19 = 0;
      objc_moveWeak(v19, location);
      ++*(_QWORD *)(a1 + 416);
      ++*(_DWORD *)(a1 + 424);
      objc_destroyWeak(location);
    }
    else
    {
      v18 = *re::graphicsLogObjects(v5);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        if ((v23 & 1) != 0)
          v20 = *(_BYTE **)&v24[7];
        else
          v20 = v24;
        LODWORD(location[0]) = 136315138;
        *(id *)((char *)location + 4) = v20;
        _os_log_error_impl(&dword_224FE9000, v18, OS_LOG_TYPE_ERROR, "Failed to build material: %s.", (uint8_t *)location, 0xCu);
      }
      *a3 = 0;
    }
    if (v21[0])
    {
      if (v22)

    }
    else if (v22 && (v23 & 1) != 0)
    {
      (*(void (**)(void))(*(_QWORD *)v22 + 40))();
    }
  }
  else
  {
    v17 = *re::graphicsLogObjects((re *)a1);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v21 = 0;
      _os_log_error_impl(&dword_224FE9000, v17, OS_LOG_TYPE_ERROR, "Failed to build material. Builder not finished.", v21, 2u);
    }
    *a3 = 0;
  }
}

_QWORD *re::MaterialManager::destroyMaterial(_anonymous_namespace_ *a1, uint64_t a2, __int128 *a3)
{
  _opaque_pthread_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  _QWORD v11[3];
  __int128 v12;
  _BYTE v13[24];
  uint64_t *v14;
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v6 = (_opaque_pthread_t *)*((_QWORD *)a1 + 112);
  v10 = *a3;
  v7 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)&v12 = a2;
  *(_QWORD *)v8 = &off_24ED76BD8;
  *(_QWORD *)(v8 + 8) = a1;
  *(_OWORD *)(v8 + 16) = v10;
  v11[0] = 0;
  v11[1] = 0;
  *(_QWORD *)(v8 + 32) = v7;
  v11[2] = 0;
  *(_OWORD *)(v8 + 40) = v12;
  v15 = (_BYTE *)v8;
  re::RenderManager::addDelayedDestructorToRenderThread(v6, (uint64_t)v13);
  if (v15)
  {
    (**(void (***)(_BYTE *))v15)(v15);
    if (v15 != v13)
      (*(void (**)(uint64_t *))(*v14 + 40))(v14);
    v15 = 0;
  }
  return re::FixedArray<std::unique_ptr<CoreIKRig,std::function<void ()(CoreIKRig*)>>>::deinit(v11);
}

void re::MaterialManager::createMaterialDefinition(uint64_t a1@<X0>, re::MaterialDefinitionBuilder *a2@<X1>, _QWORD *a3@<X8>)
{
  re *v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  _BYTE *v8;
  _BYTE v9[8];
  uint64_t v10;
  char v11;
  _BYTE v12[23];
  uint8_t buf[4];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  re::MaterialDefinitionBuilder::result(a2, *(id **)(a1 + 896), (uint64_t)v9);
  if (v9[0])
  {
    v5 = v10;
    *a3 = v10;
    if (v5)
      v6 = (id)(v5 + 8);
  }
  else
  {
    v7 = *re::graphicsLogObjects(v4);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      if ((v11 & 1) != 0)
        v8 = *(_BYTE **)&v12[7];
      else
        v8 = v12;
      *(_DWORD *)buf = 136315138;
      v14 = v8;
      _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "Failed to build material definition : %s.", buf, 0xCu);
    }
    *a3 = 0;
  }
  if (v9[0])
  {
    if (v10)

  }
  else if (v10 && (v11 & 1) != 0)
  {
    (*(void (**)(void))(*(_QWORD *)v10 + 40))();
  }
}

void re::MaterialManager::tryGetMaterialPipelineData(os_unfair_lock_s *this@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  os_unfair_lock_s *v5;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;

  v9 = a2;
  v5 = this + 122;
  os_unfair_lock_lock(this + 122);
  v6 = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)&this[110], &v9);
  if (v6)
  {
    v7 = *v6;
    *a3 = *v6;
    if (v7)
      v8 = (id)(v7 + 8);
  }
  else
  {
    *a3 = 0;
  }
  os_unfair_lock_unlock(v5);
}

void re::MaterialManager::installMaterialPipelineData(os_unfair_lock_s *a1, uint64_t *a2)
{
  os_unfair_lock_s *v4;

  v4 = a1 + 122;
  os_unfair_lock_lock(a1 + 122);
  re::HashTable<unsigned long,re::SharedPtr<re::MaterialPipelineData>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add((uint64_t)&a1[110], (unint64_t *)(*a2 + 152), a2);
  os_unfair_lock_unlock(v4);
}

uint64_t re::HashTable<unsigned long,re::SharedPtr<re::MaterialPipelineData>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  v6 = *a2;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  v7 = v6 % *(unsigned int *)(a1 + 24);
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v7);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<unsigned long,re::SharedPtr<re::MaterialPipelineData>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsCopy(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 16) + 24 * v11;
    return v10 + 16;
  }
  v9 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v9 + 24 * v8 + 8) != v6)
  {
    LODWORD(v8) = *(_DWORD *)(v9 + 24 * v8) & 0x7FFFFFFF;
    if ((_DWORD)v8 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v10 = v9 + 24 * v8;
  return v10 + 16;
}

uint64_t re::MaterialManager::addSupportConstantsToArray(_anonymous_namespace_ *a1, int a2, int a3, int a4, int a5, uint64_t a6)
{
  const char *v11;
  uint64_t result;
  const char *v13;
  _anonymous_namespace_ *v14;
  char v15;

  if ((_DWORD)a1)
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[5]>(a6, (re::DynamicString *)&v14, 2, "true");
    a1 = v14;
    if (v14)
    {
      if ((v15 & 1) != 0)
        a1 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v14 + 40))();
    }
  }
  if (a4)
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[5]>(a6, (re::DynamicString *)&v14, 2, "true");
    a1 = v14;
    if (v14)
    {
      if ((v15 & 1) != 0)
        a1 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v14 + 40))();
    }
  }
  if (a3)
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[5]>(a6, (re::DynamicString *)&v14, 2, "true");
    a1 = v14;
    if (v14)
    {
      if ((v15 & 1) != 0)
        a1 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v14 + 40))();
    }
  }
  if (a5)
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[5]>(a6, (re::DynamicString *)&v14, 2, "true");
    a1 = v14;
    if (v14)
    {
      if ((v15 & 1) != 0)
        a1 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v14 + 40))();
    }
  }
  v11 = "false";
  if (a2)
    v11 = "true";
  v13 = v11;
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const*>(a6, (re::DynamicString *)&v14, 2, &v13);
  result = (uint64_t)v14;
  if (v14)
  {
    if ((v15 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v14 + 40))();
  }
  return result;
}

uint64_t re::MaterialManager::removeSystemMaterialParameterBlock(re::MaterialManager *this, uint64_t a2)
{
  char *v3;
  unint64_t *v4;
  uint64_t v6;

  v6 = a2;
  v3 = (char *)this + 1032;
  v4 = (unint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 1032, &v6);
  if (v4)
    re::DataArray<re::MaterialParameterBlock>::destroy((uint64_t)this + 1080, *v4);
  return re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)v3, &v6);
}

uint64_t (***re::DataArray<re::MaterialParameterBlock>::destroy(uint64_t a1, unint64_t a2))(_QWORD)
{
  int v2;
  unint64_t v4;
  uint64_t (***result)(_QWORD);
  _DWORD *v6;

  v2 = a2;
  v4 = a2 >> 16;
  result = (uint64_t (***)(_QWORD))re::DataArray<re::MaterialParameterBlock>::tryGet(a1, a2 & 0xFFFFFFFF00000000 | ((unint64_t)WORD1(a2) << 16) | (unsigned __int16)a2);
  if (result)
  {
    v6 = result;
    result = (uint64_t (***)(_QWORD))(**result)(result);
    if (*(_QWORD *)(a1 + 16) <= (unint64_t)HIWORD(v2))
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * HIWORD(v2) + 8) + 4 * (unsigned __int16)v2) = 0;
    *v6 = *(_DWORD *)(a1 + 52);
    *(_WORD *)(a1 + 52) = v2;
    *(_WORD *)(a1 + 54) = v4;
    --*(_DWORD *)(a1 + 40);
  }
  return result;
}

uint64_t *re::MaterialManager::getSystemMaterialParameterBlock(re::MaterialManager *this, uint64_t a2)
{
  uint64_t *result;
  uint64_t v4;

  v4 = a2;
  result = (uint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 1032, &v4);
  if (result)
    return (uint64_t *)re::DataArray<re::MaterialParameterBlock>::tryGet((uint64_t)this + 1080, *result);
  return result;
}

uint64_t re::DataArray<re::MaterialParameterBlock>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  BOOL v6;

  v2 = *(_QWORD *)(a1 + 16);
  if (WORD1(a2) < v2
    && ((unsigned __int16)(v2 - 1) != WORD1(a2) ? (v3 = *(_DWORD *)(a1 + 44)) : (v3 = *(_DWORD *)(a1 + 48)),
        (unsigned __int16)a2 < v3
     && ((v4 = *(_QWORD *)(a1 + 32),
          (v5 = *(_DWORD *)(*(_QWORD *)(v4 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2)) != 0)
       ? (v6 = v5 == (HIDWORD(a2) & 0xFFFFFF))
       : (v6 = 0),
         v6)))
  {
    return *(_QWORD *)(v4 + 16 * WORD1(a2)) + 1008 * (unsigned __int16)a2;
  }
  else
  {
    return 0;
  }
}

uint64_t re::MaterialManager::getOrAddSystemMaterialParameterBlock(re::RenderManager **this, uint64_t a2)
{
  char *v3;
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;

  v7 = a2;
  v3 = (char *)(this + 129);
  v4 = (uint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)(this + 129), &v7);
  if (!v4)
  {
    v6 = re::DataArray<re::MaterialParameterBlock>::create<re::RenderManager *&>((uint64_t)(this + 135), this + 112);
    re::HashTable<unsigned long long,re::DataArrayHandle<re::MaterialParameterBlock>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew<re::DataArrayHandle<re::MaterialParameterBlock>&>((uint64_t)v3, &v7, &v6);
    v4 = (uint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)v3, &v7);
  }
  return re::DataArray<re::MaterialParameterBlock>::tryGet((uint64_t)(this + 135), *v4);
}

unint64_t re::DataArray<re::MaterialParameterBlock>::create<re::RenderManager *&>(uint64_t a1, re::RenderManager **a2)
{
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v9;
  re::MaterialParameterBlock *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  __int128 v15;

  v4 = *(_DWORD *)(a1 + 56);
  if ((v4 + 1) >> 24)
    v5 = 1;
  else
    v5 = v4 + 1;
  *(_DWORD *)(a1 + 56) = v5;
  v6 = *(unsigned __int16 *)(a1 + 52);
  v7 = *(unsigned __int16 *)(a1 + 54);
  if (v6 == 0xFFFF && (_DWORD)v7 == 0xFFFF)
  {
    if (*(_DWORD *)(a1 + 48) >= *(_DWORD *)(a1 + 44))
      re::DataArray<re::MaterialParameterBlock>::allocBlock((_QWORD *)a1);
    v11 = *(_QWORD *)(a1 + 16);
    v7 = (unsigned __int16)(v11 - 1);
    if (v11)
    {
      v6 = *(unsigned int *)(a1 + 48);
      if (v6 < 0x10000)
      {
        v12 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v7);
        *(_DWORD *)(a1 + 48) = v6 + 1;
        *(_DWORD *)(v12[1] + 4 * v6) = *(_DWORD *)(a1 + 56);
        v10 = (re::MaterialParameterBlock *)(*v12 + 1008 * v6);
        goto LABEL_15;
      }
LABEL_18:
      re::internal::assertLog((re::internal *)5, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v6, v14, v15);
      _os_crash();
      __break(1u);
    }
LABEL_17:
    v14 = 0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v15) = 136315906;
    *(_QWORD *)((char *)&v15 + 4) = "operator[]";
    WORD6(v15) = 1024;
    HIWORD(v15) = 789;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_18;
  }
  if (*(_QWORD *)(a1 + 16) <= v7)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  v9 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v7);
  *(_DWORD *)(v9[1] + 4 * v6) = v5;
  v10 = (re::MaterialParameterBlock *)(*v9 + 1008 * v6);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)v10;
LABEL_15:
  ++*(_DWORD *)(a1 + 40);
  re::MaterialParameterBlock::MaterialParameterBlock(v10, *a2);
  return (v7 << 16) | ((unint64_t)(*(_DWORD *)(a1 + 56) & 0xFFFFFF) << 32) | v6;
}

uint64_t re::HashTable<unsigned long long,re::DataArrayHandle<re::MaterialParameterBlock>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew<re::DataArrayHandle<re::MaterialParameterBlock>&>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned long long,re::DataArrayHandle<re::MaterialParameterBlock>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<re::DataArrayHandle<re::MaterialParameterBlock>&>(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 32 * v10 + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 32 * v10;
  return v12 + 24;
}

void re::MaterialManager::startFrame(re::MaterialManager *this)
{
  char *v2;
  re::MaterialParameterBlock *v3;
  char *v6;
  uint64_t v7;

  if (re::GraphicsFeatureFlags::systemMaterialParametersDirtyTracking(void)::onceToken != -1)
    dispatch_once(&re::GraphicsFeatureFlags::systemMaterialParametersDirtyTracking(void)::onceToken, &__block_literal_global_35);
  if (!re::GraphicsFeatureFlags::systemMaterialParametersDirtyTracking(void)::gSystemMaterialParametersDirtyTracking)
  {
    v2 = (char *)this + 1080;
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v6, (uint64_t)v2, 0);
    if (v2 != v6 || (unsigned __int16)v7 != 0xFFFFLL || (v7 & 0xFFFF0000) != 0xFFFF0000)
    {
      do
      {
        v3 = (re::MaterialParameterBlock *)re::DataArray<re::MaterialParameterBlock>::DataArrayIterator<re::MaterialParameterBlock,re::MaterialParameterBlock&>::operator*((unsigned __int16 *)&v6);
        re::MaterialParameterBlock::clear(v3);
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v6);
      }
      while (v6 != v2 || (unsigned __int16)v7 != 0xFFFF || WORD1(v7) != 0xFFFF);
    }
  }
}

uint64_t re::DataArray<re::MaterialParameterBlock>::DataArrayIterator<re::MaterialParameterBlock,re::MaterialParameterBlock&>::operator*(unsigned __int16 *a1)
{
  unint64_t v1;

  v1 = a1[5];
  if (*(_QWORD *)(*(_QWORD *)a1 + 16) <= v1)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 16 * v1) + 1008 * a1[4];
}

char *re::MaterialManager::getEngineShaderMetadata@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  id v6;
  char *result;
  char v8;
  uint64_t v9[6];

  v5 = a1 + 1144;
  if (!*(_DWORD *)(a1 + 1172))
  {
    v6 = *(id *)(*(_QWORD *)(a1 + 896) + 184);
    objc_msgSend(v6, "supportsFamily:", 5001);
    objc_msgSend(v6, "supportsFamily:", 1006);
    re::createMaterialSystemShaderMetadata((uint64_t)v9);
    re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(v5, v9);
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v9);

  }
  result = (char *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v5, a2);
  if (result)
  {
    a3[1] = *result;
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  *a3 = v8;
  return result;
}

uint64_t re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(_QWORD *)a1 || *(_QWORD *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
    }
  }
  return a1;
}

BOOL re::MaterialManager::isEngineDefinedTextureTable(re::MaterialManager *this, const char *a2)
{
  unint64_t v3;
  const char **v4;
  unint64_t v5;
  const char *v6;
  int v7;

  if (!strcmp((const char *)this, "fallback"))
    return 1;
  v3 = 0;
  v4 = (const char **)&off_24ED76D30;
  do
  {
    v5 = v3;
    if (v3 == 11)
      break;
    v6 = *v4;
    v4 += 2;
    v7 = strcmp((const char *)this, v6);
    v3 = v5 + 1;
  }
  while (v7);
  return v5 < 0xB;
}

BOOL re::MaterialManager::isEngineDefinedConstantBufferTable(re::MaterialManager *this, const char *a2)
{
  unint64_t v3;
  const char **v4;
  unint64_t v5;
  const char *v6;
  int v7;

  if (!strcmp((const char *)this, "global"))
    return 1;
  v3 = 0;
  v4 = (const char **)&off_24ED76B00;
  do
  {
    v5 = v3;
    if (v3 == 13)
      break;
    v6 = *v4;
    v4 += 2;
    v7 = strcmp((const char *)this, v6);
    v3 = v5 + 1;
  }
  while (v7);
  return v5 < 0xD;
}

BOOL re::MaterialManager::isEngineDefinedBufferTable(re::MaterialManager *this, const char *a2)
{
  unint64_t v3;
  const char **v4;
  unint64_t v5;
  const char *v6;
  int v7;

  if (!strcmp((const char *)this, "geometry"))
    return 1;
  v3 = 0;
  v4 = (const char **)&off_24ED76DF0;
  do
  {
    v5 = v3;
    if (v3 == 12)
      break;
    v6 = *v4;
    v4 += 2;
    v7 = strcmp((const char *)this, v6);
    v3 = v5 + 1;
  }
  while (v7);
  return v5 < 0xC;
}

uint64_t re::HashSetBase<re::UnresolvedArgumentBufferEntry,re::UnresolvedArgumentBufferEntry,re::internal::ValueAsKey<re::UnresolvedArgumentBufferEntry>,re::Hash<re::UnresolvedArgumentBufferEntry>,re::EqualTo<re::UnresolvedArgumentBufferEntry>,true,false>::add(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  v4 = *a2;
  v5 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v5)
  {
    LODWORD(v6) = 0;
    goto LABEL_8;
  }
  v6 = v4 % v5;
  v7 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % v5));
  if ((_DWORD)v7 == 0x7FFFFFFF)
  {
LABEL_8:
    v10 = re::HashSetBase<re::UnresolvedArgumentBufferEntry,re::UnresolvedArgumentBufferEntry,re::internal::ValueAsKey<re::UnresolvedArgumentBufferEntry>,re::Hash<re::UnresolvedArgumentBufferEntry>,re::EqualTo<re::UnresolvedArgumentBufferEntry>,true,false>::addAsMove(a1, v6, v4, (uint64_t)a2, (uint64_t)a2);
    ++*(_DWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 16) + 56 * v10;
    return v9 + 16;
  }
  v8 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v8 + 56 * v7 + 16) != v4)
  {
    LODWORD(v7) = *(_DWORD *)(v8 + 56 * v7 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v7 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v9 = v8 + 56 * v7;
  return v9 + 16;
}

void re::MaterialManager::resolveArgumentBuffers(re::MaterialManager *this)
{
  re::MaterialManager *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  id v18;
  id v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t i;
  uint64_t v25;
  int v26;
  uint64_t v27;
  id v28;
  uint8_t buf[8];

  v1 = this;
  v2 = *((unsigned int *)this + 306);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = (int *)(*((_QWORD *)this + 151) + 8);
    while (1)
    {
      v5 = *v4;
      v4 += 14;
      if (v5 < 0)
        break;
      if (v2 == ++v3)
      {
        LODWORD(v3) = *((_DWORD *)this + 306);
        break;
      }
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if ((_DWORD)v2 == (_DWORD)v3)
  {
    v6 = *((_DWORD *)this + 306);
    goto LABEL_33;
  }
  v7 = v3;
  v6 = *((_DWORD *)this + 306);
  v27 = v6;
  do
  {
    v8 = *((_QWORD *)v1 + 151);
    v9 = (_QWORD *)(v8 + 56 * v7);
    v10 = v9[5];
    if (!v10)
      goto LABEL_25;
    v11 = v9 + 2;
    v12 = v9[6];
    v13 = (_QWORD *)(v8 + 56 * v7 + 24);
    v14 = 32 * v10;
    do
    {
      v15 = *(_QWORD *)(v12 + 16);
      if ((unint64_t)(v15 + 8) > *v13)
      {
        v16 = *re::graphicsLogObjects(this);
        this = (re::MaterialManager *)os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
        if ((_DWORD)this)
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_224FE9000, v16, OS_LOG_TYPE_ERROR, "Unable to reencode texture resourceID reference, the argument buffer is not large enough!", buf, 2u);
        }
        goto LABEL_23;
      }
      v17 = *v11;
      re::ArgumentBufferTextureRecord::getRenderThreadTexture((id *)v12, buf);
      if (!*(_QWORD *)buf)
      {
        LODWORD(v19) = *(_DWORD *)(v12 + 24);
LABEL_19:
        re::TextureManager::stockTextureForType(*(re **)(*((_QWORD *)v1 + 112) + 64), (int)v19, &v28);
        NS::SharedPtr<MTL::Texture>::operator=((void **)buf, &v28);
        if (v28)

        goto LABEL_21;
      }
      v18 = objc_msgSend(*(id *)buf, sel_textureType);
      v19 = (id)*(int *)(v12 + 24);
      if (v18 != v19)
        goto LABEL_19;
LABEL_21:
      *(_QWORD *)(v17 + v15) = objc_msgSend(*(id *)buf, sel_gpuResourceID, v27);
      this = *(re::MaterialManager **)buf;
      if (*(_QWORD *)buf)

LABEL_23:
      v12 += 32;
      v14 -= 32;
    }
    while (v14);
    v6 = *((_DWORD *)v1 + 306);
    LODWORD(v2) = v27;
LABEL_25:
    if (v6 <= (int)v3 + 1)
      v20 = v3 + 1;
    else
      v20 = v6;
    while (1)
    {
      v7 = (v3 + 1);
      if (v20 - 1 == (_DWORD)v3)
        break;
      LODWORD(v3) = v3 + 1;
      v21 = v7;
      if ((*(_DWORD *)(*((_QWORD *)v1 + 151) + 56 * v7 + 8) & 0x80000000) != 0)
        goto LABEL_32;
    }
    v21 = v20;
LABEL_32:
    LODWORD(v3) = v21;
  }
  while ((_DWORD)v2 != v21);
LABEL_33:
  if (*((_DWORD *)v1 + 305))
  {
    v22 = *((unsigned int *)v1 + 304);
    if ((_DWORD)v22)
    {
      memset_pattern16(*((void **)v1 + 150), &memset_pattern_238, 4 * v22);
      v6 = *((_DWORD *)v1 + 306);
    }
    if (v6)
    {
      v23 = 0;
      for (i = 0; i < v6; ++i)
      {
        v25 = *((_QWORD *)v1 + 151) + v23;
        v26 = *(_DWORD *)(v25 + 8);
        if (v26 < 0)
        {
          *(_DWORD *)(v25 + 8) = v26 & 0x7FFFFFFF;
          re::FixedArray<re::ArgumentBufferTextureRecord>::deinit((_QWORD *)(v25 + 32));
          v6 = *((_DWORD *)v1 + 306);
        }
        v23 += 56;
      }
    }
    *((_DWORD *)v1 + 307) = 0x7FFFFFFF;
    *(_QWORD *)((char *)v1 + 1220) = 0;
    ++*((_DWORD *)v1 + 308);
  }
}

uint64_t re::TextureTableImpl<NS::SharedPtr<MTL::Texture>>::lookup@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v6;

  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 8), a2);
  if (result == -1)
  {
    v6 = 0;
  }
  else
  {
    *(_WORD *)(a3 + 1) = *(_WORD *)(*(_QWORD *)(a1 + 16) + 16 * result + 8);
    v6 = 1;
  }
  *(_BYTE *)a3 = v6;
  return result;
}

uint64_t re::TextureTableImpl<NS::SharedPtr<MTL::Texture>>::layoutHash(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t re::TextureTableImpl<NS::SharedPtr<MTL::Texture>>::size(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

id re::TextureTable::textureAt@<X0>(re::TextureTable *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id result;

  if (*((_QWORD *)this + 11) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  result = *(id *)(*((_QWORD *)this + 13) + 32 * a2);
  *a3 = result;
  return result;
}

_QWORD *re::internal::MoveOnlyCallable<re::MaterialManager::destroyMaterial(unsigned long,re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>> &&)::$_0,void ()(void)>::~MoveOnlyCallable(_QWORD *a1)
{
  *a1 = &off_24ED76BD8;
  re::FixedArray<std::unique_ptr<CoreIKRig,std::function<void ()(CoreIKRig*)>>>::deinit(a1 + 2);
  return a1;
}

void re::internal::MoveOnlyCallable<re::MaterialManager::destroyMaterial(unsigned long,re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>> &&)::$_0,void ()(void)>::~MoveOnlyCallable(_QWORD *a1)
{
  *a1 = &off_24ED76BD8;
  re::FixedArray<std::unique_ptr<CoreIKRig,std::function<void ()(CoreIKRig*)>>>::deinit(a1 + 2);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::internal::MoveOnlyCallable<re::MaterialManager::destroyMaterial(unsigned long,re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>> &&)::$_0,void ()(void)>::operator()(re *a1)
{
  re *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;

  v1 = a1;
  v34 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)a1 + 1);
  v3 = *(_QWORD *)(v2 + 896);
  v4 = *(_QWORD *)(v3 + 104);
  if (v4)
  {
    v5 = *((_QWORD *)a1 + 6);
    v33 = 0;
    v30[1] = 0;
    v31 = 0;
    LODWORD(v32) = 0;
    v30[0] = v5;
    re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::setCapacity(v30, 0);
    LODWORD(v32) = v32 + 1;
    v27 = v4 + 104;
    v28 = 0;
    v6 = *(_QWORD *)(v4 + 120);
    if (v6 < 0x10)
    {
LABEL_6:
      i = -1;
    }
    else
    {
      v7 = 0;
      v8 = *(_QWORD *)(v4 + 104);
      v9 = v6 >> 4;
      while (1)
      {
        v10 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + v7)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
        v28 = (unsigned __int16)~v10;
        if (v10 != 0xFFFF)
          break;
        v7 += 16;
        if (!--v9)
          goto LABEL_6;
      }
      v18 = __clz(__rbit64((unsigned __int16)~v10)) + v7;
      for (i = v18; i != -1; v18 = i)
      {
        v19 = v27;
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v27);
        v20 = *(_QWORD *)(v19 + 8);
        v21 = v20 + 48 * v18;
        if (*(_QWORD *)(v21 + 16) == *((_QWORD *)v1 + 5))
        {
          v22 = *(id **)(v20 + 48 * v18 + 40);

          *v22 = 0;
          v22[1] = 0;
          re::internal::destroyPersistent<re::CachedArgumentBuffer>((re *)"destroyCachedArgumentBuffer", 171, (uint64_t)v22);
          re::DynamicArray<re::Pair<BOOL,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription,true>>::add((_anonymous_namespace_ *)v30, v21);
        }
      }
    }
    if (v31)
    {
      v11 = v33;
      v12 = 40 * v31;
      do
      {
        v13 = *(_OWORD *)v11;
        v14 = *((_OWORD *)v11 + 1);
        v26 = v11[4];
        v24 = v13;
        v25 = v14;
        re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::remove((uint64_t *)(v4 + 104), &v24);
        v11 += 5;
        v12 -= 40;
      }
      while (v12);
    }
    a1 = (re *)v30[0];
    if (v30[0] && v33)
      a1 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v30[0] + 40))();
    v3 = *(_QWORD *)(v2 + 896);
  }
  v23 = *((_OWORD *)v1 + 1);
  v15 = *((_QWORD *)v1 + 4);
  *((_QWORD *)v1 + 3) = 0;
  *((_QWORD *)v1 + 4) = 0;
  *((_QWORD *)v1 + 2) = 0;
  *(_QWORD *)&v24 = v2;
  v26 = v4;
  v32 = re::globalAllocators(a1)[2];
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, 48, 0);
  *(_QWORD *)v16 = &off_24ED76C28;
  *(_QWORD *)(v16 + 8) = v2;
  *(_OWORD *)(v16 + 16) = v23;
  *((_QWORD *)&v24 + 1) = 0;
  v25 = 0uLL;
  *(_QWORD *)(v16 + 32) = v15;
  *(_QWORD *)(v16 + 40) = v4;
  v33 = (_QWORD *)v16;
  re::FrameManager::addDelayedDestructor(*(_QWORD *)(v3 + 136), (uint64_t)v30);
  if (v33)
  {
    (*(void (**)(_QWORD *))*v33)(v33);
    if (v33 != v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
    v33 = 0;
  }
  return re::FixedArray<std::unique_ptr<CoreIKRig,std::function<void ()(CoreIKRig*)>>>::deinit((_QWORD *)&v24 + 1);
}

uint64_t re::internal::MoveOnlyCallable<re::MaterialManager::destroyMaterial(unsigned long,re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>> &&)::$_0,void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED76BD8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  return a2;
}

uint64_t re::internal::MoveOnlyCallable<re::MaterialManager::destroyMaterial(unsigned long,re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>> &&)::$_0,void ()(void)>::size()
{
  return 56;
}

BOOL re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int8x16_t *v5;
  int8x16_t v6;
  int8x8_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::find(a1, a2);
  v4 = v3;
  if (v3 != -1)
  {
    v5 = (int8x16_t *)(*a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v5, v6), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    if (v7)
      v8 = -1;
    else
      v8 = 0x80;
    v5->i8[v3 & 0xF] = v8;
    re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::updateHashes((uint64_t)a1, (_QWORD *)(a1[1] + 48 * v3));
    if (v7)
      v9 = a1[4] + 1;
    else
      v9 = a1[4];
    v10 = a1[2];
    v11 = a1[3] - 1;
    a1[3] = v11;
    a1[4] = v9;
    if (v10 >= 0x11 && v11 < v10 >> 2)
      re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::resize(a1, 0);
  }
  return v4 != -1;
}

re *re::internal::destroyPersistent<re::CachedArgumentBuffer>(re *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t i;
  void *v6;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit(a3 + 16);
    for (i = 8; i != -8; i -= 8)
    {
      v6 = *(void **)(a3 + i);
      if (v6)
      {

        *(_QWORD *)(a3 + i) = 0;
      }
    }
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

uint64_t re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::find(uint64_t *a1, _QWORD *a2)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int8x16_t v9;
  unint64_t v10;
  unint64_t v11;
  int8x16_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;
  unint64_t v16;

  if (!a1[7])
    return -1;
  v3 = a1[2];
  if (v3 < 0x10 || !a1[3])
    return -1;
  v5 = (a2[2] + (*a2 << 6) + (*a2 >> 2) - 0x61C8864680B583E9) ^ *a2;
  v6 = (((v5 << 6)
       + (v5 >> 2)
       + ((a2[4] + (a2[3] << 6) + (a2[3] >> 2) - 0x61C8864680B583E9) ^ a2[3])
       - 0x61C8864680B583E9) ^ v5)
     % (v3 >> 4);
  while (1)
  {
    v7 = *a1;
    v8 = re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::h2((uint64_t)a1, (uint64_t)a2);
    v9 = *(int8x16_t *)(v7 + 16 * v6);
    v10 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(vdupq_n_s8(v8), v9), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    v11 = __clz(__rbit64(v10));
    v12.i64[0] = -1;
    v12.i64[1] = -1;
    if (v11 <= 0x3F)
      break;
LABEL_13:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v9, v12), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (++v6 == (unint64_t)a1[2] >> 4)
      v6 = 0;
    v16 = re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::h1((uint64_t)a1, a2)% ((unint64_t)a1[2] >> 4);
    result = -1;
    if (v6 == v16)
      return result;
  }
  v13 = 16 * v6;
  while (1)
  {
    result = v11 + v13;
    v15 = (_QWORD *)(a1[1] + 48 * (v11 + v13));
    if (a2[2] == v15[2] && a2[3] == v15[3] && a2[4] == v15[4] && a2[1] == v15[1])
      return result;
    if (v11 <= 0x3E)
    {
      v11 = __clz(__rbit64((-2 << v11) & v10));
      if (v11 < 0x40)
        continue;
    }
    goto LABEL_13;
  }
}

uint64_t re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::updateHashes(uint64_t result, _QWORD *a2)
{
  unint64_t v2;

  v2 = (a2[2] + (*a2 << 6) + (*a2 >> 2) - 0x61C8864680B583E9) ^ *a2;
  *(_QWORD *)(result + 40) ^= v2 ^ ((v2 << 6)
                                  + (v2 >> 2)
                                  + ((a2[4] + (a2[3] << 6) + (a2[3] >> 2) - 0x61C8864680B583E9) ^ a2[3])
                                  - 0x61C8864680B583E9);
  return result;
}

uint64_t re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[3] + a2;
  v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    v5 = 3 * v2;
    v6 = v5 << 6;
    v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7)
      v4 = v7;
    v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::doResize(a1, v3);
}

uint64_t re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::h1(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;

  v2 = (a2[2] + (*a2 << 6) + (*a2 >> 2) - 0x61C8864680B583E9) ^ *a2;
  return ((v2 << 6)
        + (v2 >> 2)
        + ((a2[4] + (a2[3] << 6) + (a2[3] >> 2) - 0x61C8864680B583E9) ^ a2[3])
        - 0x61C8864680B583E9) ^ v2;
}

uint64_t re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::h2(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  v2 = (*(_DWORD *)(a2 + 16) + 2135587863 + (*(_QWORD *)a2 << 6) + (*(_QWORD *)a2 >> 2)) ^ *(_QWORD *)a2;
  return (((v2 >> 2)
         + (v2 << 6)
         + ((*(_DWORD *)(a2 + 32)
           + 2135587863
           + (*(_QWORD *)(a2 + 24) << 6)
           + (*(_QWORD *)(a2 + 24) >> 2)) ^ *(_QWORD *)(a2 + 24))
         + 23) ^ v2) & 0x7F;
}

uint64_t re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD v20[2];
  uint64_t v21;
  _OWORD v22[4];

  v4 = a1[7];
  memset(v22, 0, sizeof(v22));
  re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::init(v22, v4, a2);
  v20[0] = a1;
  v5 = a1[2];
  if (v5 >= 0x10)
  {
    v6 = 0;
    v7 = *a1;
    v8 = v5 >> 4;
    while (1)
    {
      v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v20[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF)
        break;
      v6 += 16;
      if (!--v8)
        goto LABEL_9;
    }
    v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    v21 = v10;
    if (v10 != -1)
    {
      do
      {
        re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::internalAdd((_anonymous_namespace_ *)v22, (_QWORD *)(*(_QWORD *)(v20[0] + 8) + 48 * v10), (uint64_t *)(*(_QWORD *)(v20[0] + 8) + 48 * v10 + 40));
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v20);
        v10 = v21;
      }
      while (v21 != -1);
      v5 = a1[2];
    }
  }
LABEL_9:
  v12 = *((_QWORD *)&v22[3] + 1);
  *((_QWORD *)&v22[3] + 1) = a1[7];
  result = *((_QWORD *)&v22[3] + 1);
  v13 = v22[0];
  v14 = v22[1];
  *(_QWORD *)&v22[1] = v5;
  v15 = *a1;
  v16 = a1[1];
  *(_QWORD *)&v22[0] = *a1;
  *((_QWORD *)&v22[0] + 1) = v16;
  v17 = v22[2];
  v18 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v22[3];
  a1[7] = v12;
  *(_OWORD *)((char *)&v22[2] + 8) = v18;
  v19 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v13;
  *((_OWORD *)a1 + 1) = v14;
  *((_OWORD *)a1 + 2) = v17;
  *(_OWORD *)((char *)&v22[1] + 8) = v19;
  if (result)
  {
    if (v16)
      *((_QWORD *)&v22[0] + 1) = 0;
    if (v15)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

uint64_t re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::internalAdd(_anonymous_namespace_ *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::resize(a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = (a2[2] + (*a2 << 6) + (*a2 >> 2) - 0x61C8864680B583E9) ^ *a2;
  v9 = (((v8 << 6)
       + (v8 >> 2)
       + ((a2[4] + (a2[3] << 6) + (a2[3] >> 2) - 0x61C8864680B583E9) ^ a2[3])
       - 0x61C8864680B583E9) ^ v8)
     % (v7 >> 4);
  while (1)
  {
    v10 = *(_QWORD *)a1;
    v11 = re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::h2((uint64_t)a1, (uint64_t)a2);
    v12 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v10 + 16 * v9)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    if (v12 < 0x40)
      break;
    if (v9 + 1 == *((_QWORD *)a1 + 2) >> 4)
      v9 = 0;
    else
      ++v9;
  }
  v13 = v10 + 16 * v9;
  v14 = *(unsigned __int8 *)(v13 + v12) == 255;
  *(_BYTE *)(v13 + v12) = v11;
  v15 = *a3;
  v16 = 3 * (v12 + 16 * v9);
  v17 = *((_QWORD *)a1 + 1) + 48 * (v12 + 16 * v9);
  v18 = *((_OWORD *)a2 + 1);
  v19 = a2[4];
  *(_OWORD *)v17 = *(_OWORD *)a2;
  *(_OWORD *)(v17 + 16) = v18;
  *(_QWORD *)(v17 + 32) = v19;
  *(_QWORD *)(v17 + 40) = v15;
  v20 = *((_QWORD *)a1 + 4) - v14;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v20;
  re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::updateHashes((uint64_t)a1, (_QWORD *)(*((_QWORD *)a1 + 1) + 16 * v16));
  return *((_QWORD *)a1 + 1) + 16 * v16 + 40;
}

_QWORD *re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::init(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t i;
  _OWORD *v12;

  v3 = result;
  result[7] = a2;
  v4 = 151 * a3;
  v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  v6 = v5 & 0x3FFFFFFFFFFFFF0;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    v7 = v5 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 49 * v6, 16);
    *v3 = result;
    if (v4 >= 0x80)
    {
      v8 = 0;
      *(_QWORD *)&v9 = -1;
      *((_QWORD *)&v9 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v8++) = v9;
      while (v7 != v8);
      result = (_QWORD *)*v3;
    }
    v3[1] = &result[2 * v7];
    v6 = v3[2];
    if (v6)
    {
      v10 = 0;
      for (i = 0; i < v6; ++i)
      {
        v12 = (_OWORD *)(v3[1] + v10);
        v12[1] = 0uLL;
        v12[2] = 0uLL;
        *v12 = 0uLL;
        v6 = v3[2];
        v10 += 48;
      }
    }
  }
  else
  {
    *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v6;
  return result;
}

_QWORD *re::internal::MoveOnlyCallable<re::MaterialManager::destroyMaterial(unsigned long,re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>> &&)::$_0::operator()(void)::{lambda(void)#1},void ()(void)>::~MoveOnlyCallable(_QWORD *a1)
{
  *a1 = &off_24ED76C28;
  re::FixedArray<std::unique_ptr<CoreIKRig,std::function<void ()(CoreIKRig*)>>>::deinit(a1 + 2);
  return a1;
}

void re::internal::MoveOnlyCallable<re::MaterialManager::destroyMaterial(unsigned long,re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>> &&)::$_0::operator()(void)::{lambda(void)#1},void ()(void)>::~MoveOnlyCallable(_QWORD *a1)
{
  *a1 = &off_24ED76C28;
  re::FixedArray<std::unique_ptr<CoreIKRig,std::function<void ()(CoreIKRig*)>>>::deinit(a1 + 2);
  JUMPOUT(0x2276933B8);
}

void re::internal::MoveOnlyCallable<re::MaterialManager::destroyMaterial(unsigned long,re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>> &&)::$_0::operator()(void)::{lambda(void)#1},void ()(void)>::operator()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  re::DrawingManager *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  re *v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  re *v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  re *v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  re *v82;
  int v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  int v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int *v97;
  int v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  re *v103;
  int v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int *v111;
  int v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  int *v118;
  int v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  re *v124;
  int v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int *v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  int *v138;
  int v139;
  uint64_t v140;
  unint64_t v141;
  re *v142;
  uint64_t v143;
  uint64_t v144;
  int *v145;
  int v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int *v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  unint64_t v161;
  id WeakRetained;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  id *v166;
  id *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int *v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _DWORD *v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  int v187;
  int v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v192;
  uint64_t v193;

  v1 = a1[1];
  v2 = a1[3];
  if (v2)
  {
    v189 = a1[4] + 40 * v2;
    v3 = (_QWORD *)a1[4];
    while (1)
    {
      v190 = v3;
      v4 = *v3;
      if (*v3)
      {
        v193 = *(unsigned int *)(v4 + 120);
        v5 = 0;
        if ((_DWORD)v193)
        {
          v6 = (int *)(*(_QWORD *)(v4 + 104) + 8);
          while (1)
          {
            v7 = *v6;
            v6 += 8;
            if (v7 < 0)
              break;
            if (v193 == ++v5)
            {
              LODWORD(v5) = *(_DWORD *)(v4 + 120);
              break;
            }
          }
        }
        if ((_DWORD)v193 != (_DWORD)v5)
          break;
      }
LABEL_265:
      v3 = v190 + 5;
      if (v190 + 5 == (_QWORD *)v189)
        goto LABEL_266;
    }
    v8 = v5;
    v192 = v4;
    while (1)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v4 + 104) + 32 * v8 + 24);
      v10 = (re::DrawingManager *)a1[5];
      if (v10)
        re::MaterialTechniqueVariant::releasePipelineStates((re::MaterialTechniqueVariant *)v9, *(_opaque_pthread_t **)(v1 + 896), v10);
      v11 = *(unsigned int *)(v9 + 248);
      v12 = 0;
      if ((_DWORD)v11)
      {
        v13 = *(int **)(v9 + 232);
        while (1)
        {
          v14 = *v13;
          v13 += 4;
          if (v14 < 0)
            break;
          if (v11 == ++v12)
          {
            LODWORD(v12) = *(_DWORD *)(v9 + 248);
            break;
          }
        }
      }
      if ((_DWORD)v11 != (_DWORD)v12)
      {
        v15 = v12;
        do
        {
          v16 = *(_QWORD *)(*(_QWORD *)(v9 + 232) + 16 * v15 + 8);
          re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove(v9 + 216, v16);
          if (*(_QWORD *)(v1 + 144))
          {
            v17 = *(_QWORD *)(v1 + 160);
            v18 = *(unsigned int *)(*(_QWORD *)(v1 + 152) + 4 * (v16 % *(unsigned int *)(v1 + 168)));
            if ((_DWORD)v18 != 0x7FFFFFFF)
            {
              while (*(_QWORD *)(v17 + 24 * v18 + 8) != v16)
              {
                v18 = *(_DWORD *)(v17 + 24 * v18) & 0x7FFFFFFF;
                if (v18 == 0x7FFFFFFF)
                  goto LABEL_26;
              }
              goto LABEL_27;
            }
          }
          else
          {
            v17 = *(_QWORD *)(v1 + 160);
          }
LABEL_26:
          LODWORD(v18) = 0x7FFFFFFF;
LABEL_27:
          v19 = *(re **)(v17 + 24 * v18 + 16);
          if (!*(_DWORD *)v19 || (v20 = *(_DWORD *)v19 - 1, (*(_DWORD *)v19 = v20) == 0))
          {
            re::internal::destroyPersistent<re::TechniqueResolutions<re::AttributeResolution>>(v19);
            if (*(_QWORD *)(v1 + 144))
            {
              v21 = v16 % *(unsigned int *)(v1 + 168);
              v22 = *(_QWORD *)(v1 + 152);
              v23 = *(unsigned int *)(v22 + 4 * v21);
              if ((_DWORD)v23 != 0x7FFFFFFF)
              {
                v24 = *(_QWORD *)(v1 + 160);
                if (*(_QWORD *)(v24 + 24 * v23 + 8) == v16)
                {
                  *(_DWORD *)(v22 + 4 * v21) = *(_DWORD *)(v24 + 24 * v23) & 0x7FFFFFFF;
LABEL_36:
                  v26 = *(_QWORD *)(v1 + 160);
                  v27 = (int *)(v26 + 24 * v23);
                  v28 = *v27;
                  if (*v27 < 0)
                  {
                    *v27 = v28 & 0x7FFFFFFF;
                    v26 = *(_QWORD *)(v1 + 160);
                    v28 = *(_DWORD *)(v26 + 24 * v23);
                  }
                  *(_DWORD *)(v26 + 24 * v23) = *(_DWORD *)(v1 + 180) | v28 & 0x80000000;
                  --*(_DWORD *)(v1 + 172);
                  v29 = *(_DWORD *)(v1 + 184) + 1;
                  *(_DWORD *)(v1 + 180) = v23;
                  *(_DWORD *)(v1 + 184) = v29;
                }
                else
                {
                  while (1)
                  {
                    v25 = v23;
                    v23 = *(_DWORD *)(v24 + 24 * v23) & 0x7FFFFFFF;
                    if (v23 == 0x7FFFFFFF)
                      break;
                    if (*(_QWORD *)(v24 + 24 * v23 + 8) == v16)
                    {
                      *(_DWORD *)(v24 + 24 * v25) = *(_DWORD *)(v24 + 24 * v25) & 0x80000000 | *(_DWORD *)(v24 + 24 * v23) & 0x7FFFFFFF;
                      goto LABEL_36;
                    }
                  }
                }
              }
            }
          }
          if (*(_DWORD *)(v9 + 248) <= (v12 + 1))
            v30 = v12 + 1;
          else
            v30 = *(_DWORD *)(v9 + 248);
          while (1)
          {
            v15 = (v12 + 1);
            if (v30 - 1 == (_DWORD)v12)
              break;
            LODWORD(v12) = v12 + 1;
            v31 = v15;
            if ((*(_DWORD *)(*(_QWORD *)(v9 + 232) + 16 * v15) & 0x80000000) != 0)
              goto LABEL_46;
          }
          v31 = v30;
LABEL_46:
          LODWORD(v12) = v31;
        }
        while ((_DWORD)v11 != v31);
      }
      v32 = *(unsigned int *)(v9 + 200);
      if ((_DWORD)v32)
      {
        v33 = 0;
        v34 = *(int **)(v9 + 184);
        while (1)
        {
          v35 = *v34;
          v34 += 4;
          if (v35 < 0)
            break;
          if (v32 == ++v33)
          {
            LODWORD(v33) = *(_DWORD *)(v9 + 200);
            break;
          }
        }
      }
      else
      {
        LODWORD(v33) = 0;
      }
      if ((_DWORD)v32 != (_DWORD)v33)
      {
        v36 = v33;
        do
        {
          v37 = *(_QWORD *)(*(_QWORD *)(v9 + 184) + 16 * v36 + 8);
          re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove(v9 + 168, v37);
          if (*(_QWORD *)(v1 + 96))
          {
            v38 = *(_QWORD *)(v1 + 112);
            v39 = *(unsigned int *)(*(_QWORD *)(v1 + 104) + 4 * (v37 % *(unsigned int *)(v1 + 120)));
            if ((_DWORD)v39 != 0x7FFFFFFF)
            {
              while (*(_QWORD *)(v38 + 24 * v39 + 8) != v37)
              {
                v39 = *(_DWORD *)(v38 + 24 * v39) & 0x7FFFFFFF;
                if (v39 == 0x7FFFFFFF)
                  goto LABEL_61;
              }
              goto LABEL_62;
            }
          }
          else
          {
            v38 = *(_QWORD *)(v1 + 112);
          }
LABEL_61:
          LODWORD(v39) = 0x7FFFFFFF;
LABEL_62:
          v40 = *(re **)(v38 + 24 * v39 + 16);
          if (!*(_DWORD *)v40 || (v41 = *(_DWORD *)v40 - 1, (*(_DWORD *)v40 = v41) == 0))
          {
            re::internal::destroyPersistent<re::TechniqueResolutions<re::BufferResolution>>(v40);
            if (*(_QWORD *)(v1 + 96))
            {
              v42 = v37 % *(unsigned int *)(v1 + 120);
              v43 = *(_QWORD *)(v1 + 104);
              v44 = *(unsigned int *)(v43 + 4 * v42);
              if ((_DWORD)v44 != 0x7FFFFFFF)
              {
                v45 = *(_QWORD *)(v1 + 112);
                if (*(_QWORD *)(v45 + 24 * v44 + 8) == v37)
                {
                  *(_DWORD *)(v43 + 4 * v42) = *(_DWORD *)(v45 + 24 * v44) & 0x7FFFFFFF;
LABEL_71:
                  v47 = *(_QWORD *)(v1 + 112);
                  v48 = (int *)(v47 + 24 * v44);
                  v49 = *v48;
                  if (*v48 < 0)
                  {
                    *v48 = v49 & 0x7FFFFFFF;
                    v47 = *(_QWORD *)(v1 + 112);
                    v49 = *(_DWORD *)(v47 + 24 * v44);
                  }
                  *(_DWORD *)(v47 + 24 * v44) = *(_DWORD *)(v1 + 132) | v49 & 0x80000000;
                  --*(_DWORD *)(v1 + 124);
                  v50 = *(_DWORD *)(v1 + 136) + 1;
                  *(_DWORD *)(v1 + 132) = v44;
                  *(_DWORD *)(v1 + 136) = v50;
                }
                else
                {
                  while (1)
                  {
                    v46 = v44;
                    v44 = *(_DWORD *)(v45 + 24 * v44) & 0x7FFFFFFF;
                    if (v44 == 0x7FFFFFFF)
                      break;
                    if (*(_QWORD *)(v45 + 24 * v44 + 8) == v37)
                    {
                      *(_DWORD *)(v45 + 24 * v46) = *(_DWORD *)(v45 + 24 * v46) & 0x80000000 | *(_DWORD *)(v45 + 24 * v44) & 0x7FFFFFFF;
                      goto LABEL_71;
                    }
                  }
                }
              }
            }
          }
          if (*(_DWORD *)(v9 + 200) <= (v33 + 1))
            v51 = v33 + 1;
          else
            v51 = *(_DWORD *)(v9 + 200);
          while (1)
          {
            v36 = (v33 + 1);
            if (v51 - 1 == (_DWORD)v33)
              break;
            LODWORD(v33) = v33 + 1;
            v52 = v36;
            if ((*(_DWORD *)(*(_QWORD *)(v9 + 184) + 16 * v36) & 0x80000000) != 0)
              goto LABEL_81;
          }
          v52 = v51;
LABEL_81:
          LODWORD(v33) = v52;
        }
        while ((_DWORD)v32 != v52);
      }
      v53 = *(unsigned int *)(v9 + 104);
      if ((_DWORD)v53)
      {
        v54 = 0;
        v55 = *(int **)(v9 + 88);
        while (1)
        {
          v56 = *v55;
          v55 += 4;
          if (v56 < 0)
            break;
          if (v53 == ++v54)
          {
            LODWORD(v54) = *(_DWORD *)(v9 + 104);
            break;
          }
        }
      }
      else
      {
        LODWORD(v54) = 0;
      }
      if ((_DWORD)v53 != (_DWORD)v54)
      {
        v57 = v54;
        do
        {
          v58 = *(_QWORD *)(*(_QWORD *)(v9 + 88) + 16 * v57 + 8);
          re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove(v9 + 72, v58);
          if (*(_QWORD *)v1)
          {
            v59 = *(_QWORD *)(v1 + 16);
            v60 = *(unsigned int *)(*(_QWORD *)(v1 + 8) + 4 * (v58 % *(unsigned int *)(v1 + 24)));
            if ((_DWORD)v60 != 0x7FFFFFFF)
            {
              while (*(_QWORD *)(v59 + 24 * v60 + 8) != v58)
              {
                v60 = *(_DWORD *)(v59 + 24 * v60) & 0x7FFFFFFF;
                if (v60 == 0x7FFFFFFF)
                  goto LABEL_96;
              }
              goto LABEL_97;
            }
          }
          else
          {
            v59 = *(_QWORD *)(v1 + 16);
          }
LABEL_96:
          LODWORD(v60) = 0x7FFFFFFF;
LABEL_97:
          v61 = *(re **)(v59 + 24 * v60 + 16);
          if (!*(_DWORD *)v61 || (v62 = *(_DWORD *)v61 - 1, (*(_DWORD *)v61 = v62) == 0))
          {
            re::internal::destroyPersistent<re::TechniqueResolutions<re::ConstantResolution>>(v61);
            if (*(_QWORD *)v1)
            {
              v63 = v58 % *(unsigned int *)(v1 + 24);
              v64 = *(_QWORD *)(v1 + 8);
              v65 = *(unsigned int *)(v64 + 4 * v63);
              if ((_DWORD)v65 != 0x7FFFFFFF)
              {
                v66 = *(_QWORD *)(v1 + 16);
                if (*(_QWORD *)(v66 + 24 * v65 + 8) == v58)
                {
                  *(_DWORD *)(v64 + 4 * v63) = *(_DWORD *)(v66 + 24 * v65) & 0x7FFFFFFF;
LABEL_106:
                  v68 = *(_QWORD *)(v1 + 16);
                  v69 = (int *)(v68 + 24 * v65);
                  v70 = *v69;
                  if (*v69 < 0)
                  {
                    *v69 = v70 & 0x7FFFFFFF;
                    v68 = *(_QWORD *)(v1 + 16);
                    v70 = *(_DWORD *)(v68 + 24 * v65);
                  }
                  *(_DWORD *)(v68 + 24 * v65) = *(_DWORD *)(v1 + 36) | v70 & 0x80000000;
                  --*(_DWORD *)(v1 + 28);
                  v71 = *(_DWORD *)(v1 + 40) + 1;
                  *(_DWORD *)(v1 + 36) = v65;
                  *(_DWORD *)(v1 + 40) = v71;
                }
                else
                {
                  while (1)
                  {
                    v67 = v65;
                    v65 = *(_DWORD *)(v66 + 24 * v65) & 0x7FFFFFFF;
                    if (v65 == 0x7FFFFFFF)
                      break;
                    if (*(_QWORD *)(v66 + 24 * v65 + 8) == v58)
                    {
                      *(_DWORD *)(v66 + 24 * v67) = *(_DWORD *)(v66 + 24 * v67) & 0x80000000 | *(_DWORD *)(v66 + 24 * v65) & 0x7FFFFFFF;
                      goto LABEL_106;
                    }
                  }
                }
              }
            }
          }
          if (*(_DWORD *)(v9 + 104) <= (v54 + 1))
            v72 = v54 + 1;
          else
            v72 = *(_DWORD *)(v9 + 104);
          while (1)
          {
            v57 = (v54 + 1);
            if (v72 - 1 == (_DWORD)v54)
              break;
            LODWORD(v54) = v54 + 1;
            v73 = v57;
            if ((*(_DWORD *)(*(_QWORD *)(v9 + 88) + 16 * v57) & 0x80000000) != 0)
              goto LABEL_116;
          }
          v73 = v72;
LABEL_116:
          LODWORD(v54) = v73;
        }
        while ((_DWORD)v53 != v73);
      }
      v74 = *(unsigned int *)(v9 + 152);
      if ((_DWORD)v74)
      {
        v75 = 0;
        v76 = *(int **)(v9 + 136);
        while (1)
        {
          v77 = *v76;
          v76 += 4;
          if (v77 < 0)
            break;
          if (v74 == ++v75)
          {
            LODWORD(v75) = *(_DWORD *)(v9 + 152);
            break;
          }
        }
      }
      else
      {
        LODWORD(v75) = 0;
      }
      if ((_DWORD)v74 != (_DWORD)v75)
      {
        v78 = v75;
        do
        {
          v79 = *(_QWORD *)(*(_QWORD *)(v9 + 136) + 16 * v78 + 8);
          re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove(v9 + 120, v79);
          if (*(_QWORD *)(v1 + 48))
          {
            v80 = *(_QWORD *)(v1 + 64);
            v81 = *(unsigned int *)(*(_QWORD *)(v1 + 56) + 4 * (v79 % *(unsigned int *)(v1 + 72)));
            if ((_DWORD)v81 != 0x7FFFFFFF)
            {
              while (*(_QWORD *)(v80 + 24 * v81 + 8) != v79)
              {
                v81 = *(_DWORD *)(v80 + 24 * v81) & 0x7FFFFFFF;
                if (v81 == 0x7FFFFFFF)
                  goto LABEL_131;
              }
              goto LABEL_132;
            }
          }
          else
          {
            v80 = *(_QWORD *)(v1 + 64);
          }
LABEL_131:
          LODWORD(v81) = 0x7FFFFFFF;
LABEL_132:
          v82 = *(re **)(v80 + 24 * v81 + 16);
          if (!*(_DWORD *)v82 || (v83 = *(_DWORD *)v82 - 1, (*(_DWORD *)v82 = v83) == 0))
          {
            re::internal::destroyPersistent<re::TechniqueResolutions<re::BufferResolution>>(v82);
            if (*(_QWORD *)(v1 + 48))
            {
              v84 = v79 % *(unsigned int *)(v1 + 72);
              v85 = *(_QWORD *)(v1 + 56);
              v86 = *(unsigned int *)(v85 + 4 * v84);
              if ((_DWORD)v86 != 0x7FFFFFFF)
              {
                v87 = *(_QWORD *)(v1 + 64);
                if (*(_QWORD *)(v87 + 24 * v86 + 8) == v79)
                {
                  *(_DWORD *)(v85 + 4 * v84) = *(_DWORD *)(v87 + 24 * v86) & 0x7FFFFFFF;
LABEL_141:
                  v89 = *(_QWORD *)(v1 + 64);
                  v90 = (int *)(v89 + 24 * v86);
                  v91 = *v90;
                  if (*v90 < 0)
                  {
                    *v90 = v91 & 0x7FFFFFFF;
                    v89 = *(_QWORD *)(v1 + 64);
                    v91 = *(_DWORD *)(v89 + 24 * v86);
                  }
                  *(_DWORD *)(v89 + 24 * v86) = *(_DWORD *)(v1 + 84) | v91 & 0x80000000;
                  --*(_DWORD *)(v1 + 76);
                  v92 = *(_DWORD *)(v1 + 88) + 1;
                  *(_DWORD *)(v1 + 84) = v86;
                  *(_DWORD *)(v1 + 88) = v92;
                }
                else
                {
                  while (1)
                  {
                    v88 = v86;
                    v86 = *(_DWORD *)(v87 + 24 * v86) & 0x7FFFFFFF;
                    if (v86 == 0x7FFFFFFF)
                      break;
                    if (*(_QWORD *)(v87 + 24 * v86 + 8) == v79)
                    {
                      *(_DWORD *)(v87 + 24 * v88) = *(_DWORD *)(v87 + 24 * v88) & 0x80000000 | *(_DWORD *)(v87 + 24 * v86) & 0x7FFFFFFF;
                      goto LABEL_141;
                    }
                  }
                }
              }
            }
          }
          if (*(_DWORD *)(v9 + 152) <= (v75 + 1))
            v93 = v75 + 1;
          else
            v93 = *(_DWORD *)(v9 + 152);
          while (1)
          {
            v78 = (v75 + 1);
            if (v93 - 1 == (_DWORD)v75)
              break;
            LODWORD(v75) = v75 + 1;
            v94 = v78;
            if ((*(_DWORD *)(*(_QWORD *)(v9 + 136) + 16 * v78) & 0x80000000) != 0)
              goto LABEL_151;
          }
          v94 = v93;
LABEL_151:
          LODWORD(v75) = v94;
        }
        while ((_DWORD)v74 != v94);
      }
      v95 = *(unsigned int *)(v9 + 296);
      if ((_DWORD)v95)
      {
        v96 = 0;
        v97 = *(int **)(v9 + 280);
        while (1)
        {
          v98 = *v97;
          v97 += 4;
          if (v98 < 0)
            break;
          if (v95 == ++v96)
          {
            LODWORD(v96) = *(_DWORD *)(v9 + 296);
            break;
          }
        }
      }
      else
      {
        LODWORD(v96) = 0;
      }
      if ((_DWORD)v95 != (_DWORD)v96)
      {
        v99 = v96;
        do
        {
          v100 = *(_QWORD *)(*(_QWORD *)(v9 + 280) + 16 * v99 + 8);
          re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove(v9 + 264, v100);
          if (*(_QWORD *)(v1 + 192))
          {
            v101 = *(_QWORD *)(v1 + 208);
            v102 = *(unsigned int *)(*(_QWORD *)(v1 + 200) + 4 * (v100 % *(unsigned int *)(v1 + 216)));
            if ((_DWORD)v102 != 0x7FFFFFFF)
            {
              while (*(_QWORD *)(v101 + 24 * v102 + 8) != v100)
              {
                v102 = *(_DWORD *)(v101 + 24 * v102) & 0x7FFFFFFF;
                if (v102 == 0x7FFFFFFF)
                  goto LABEL_166;
              }
              goto LABEL_167;
            }
          }
          else
          {
            v101 = *(_QWORD *)(v1 + 208);
          }
LABEL_166:
          LODWORD(v102) = 0x7FFFFFFF;
LABEL_167:
          v103 = *(re **)(v101 + 24 * v102 + 16);
          if (!*(_DWORD *)v103 || (v104 = *(_DWORD *)v103 - 1, (*(_DWORD *)v103 = v104) == 0))
          {
            re::internal::destroyPersistent<re::TechniqueResolutions<re::BufferResolution>>(v103);
            if (*(_QWORD *)(v1 + 192))
            {
              v105 = v100 % *(unsigned int *)(v1 + 216);
              v106 = *(_QWORD *)(v1 + 200);
              v107 = *(unsigned int *)(v106 + 4 * v105);
              if ((_DWORD)v107 != 0x7FFFFFFF)
              {
                v108 = *(_QWORD *)(v1 + 208);
                if (*(_QWORD *)(v108 + 24 * v107 + 8) == v100)
                {
                  *(_DWORD *)(v106 + 4 * v105) = *(_DWORD *)(v108 + 24 * v107) & 0x7FFFFFFF;
LABEL_176:
                  v110 = *(_QWORD *)(v1 + 208);
                  v111 = (int *)(v110 + 24 * v107);
                  v112 = *v111;
                  if (*v111 < 0)
                  {
                    *v111 = v112 & 0x7FFFFFFF;
                    v110 = *(_QWORD *)(v1 + 208);
                    v112 = *(_DWORD *)(v110 + 24 * v107);
                  }
                  *(_DWORD *)(v110 + 24 * v107) = *(_DWORD *)(v1 + 228) | v112 & 0x80000000;
                  --*(_DWORD *)(v1 + 220);
                  v113 = *(_DWORD *)(v1 + 232) + 1;
                  *(_DWORD *)(v1 + 228) = v107;
                  *(_DWORD *)(v1 + 232) = v113;
                }
                else
                {
                  while (1)
                  {
                    v109 = v107;
                    v107 = *(_DWORD *)(v108 + 24 * v107) & 0x7FFFFFFF;
                    if (v107 == 0x7FFFFFFF)
                      break;
                    if (*(_QWORD *)(v108 + 24 * v107 + 8) == v100)
                    {
                      *(_DWORD *)(v108 + 24 * v109) = *(_DWORD *)(v108 + 24 * v109) & 0x80000000 | *(_DWORD *)(v108 + 24 * v107) & 0x7FFFFFFF;
                      goto LABEL_176;
                    }
                  }
                }
              }
            }
          }
          if (*(_DWORD *)(v9 + 296) <= (v96 + 1))
            v114 = v96 + 1;
          else
            v114 = *(_DWORD *)(v9 + 296);
          while (1)
          {
            v99 = (v96 + 1);
            if (v114 - 1 == (_DWORD)v96)
              break;
            LODWORD(v96) = v96 + 1;
            v115 = v99;
            if ((*(_DWORD *)(*(_QWORD *)(v9 + 280) + 16 * v99) & 0x80000000) != 0)
              goto LABEL_186;
          }
          v115 = v114;
LABEL_186:
          LODWORD(v96) = v115;
        }
        while ((_DWORD)v95 != v115);
      }
      v116 = *(unsigned int *)(v9 + 344);
      if ((_DWORD)v116)
      {
        v117 = 0;
        v118 = *(int **)(v9 + 328);
        while (1)
        {
          v119 = *v118;
          v118 += 4;
          if (v119 < 0)
            break;
          if (v116 == ++v117)
          {
            LODWORD(v117) = *(_DWORD *)(v9 + 344);
            break;
          }
        }
      }
      else
      {
        LODWORD(v117) = 0;
      }
      if ((_DWORD)v116 != (_DWORD)v117)
      {
        v120 = v117;
        do
        {
          v121 = *(_QWORD *)(*(_QWORD *)(v9 + 328) + 16 * v120 + 8);
          re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove(v9 + 312, v121);
          if (*(_QWORD *)(v1 + 240))
          {
            v122 = *(_QWORD *)(v1 + 256);
            v123 = *(unsigned int *)(*(_QWORD *)(v1 + 248) + 4 * (v121 % *(unsigned int *)(v1 + 264)));
            if ((_DWORD)v123 != 0x7FFFFFFF)
            {
              while (*(_QWORD *)(v122 + 24 * v123 + 8) != v121)
              {
                v123 = *(_DWORD *)(v122 + 24 * v123) & 0x7FFFFFFF;
                if (v123 == 0x7FFFFFFF)
                  goto LABEL_201;
              }
              goto LABEL_202;
            }
          }
          else
          {
            v122 = *(_QWORD *)(v1 + 256);
          }
LABEL_201:
          LODWORD(v123) = 0x7FFFFFFF;
LABEL_202:
          v124 = *(re **)(v122 + 24 * v123 + 16);
          if (!*(_DWORD *)v124 || (v125 = *(_DWORD *)v124 - 1, (*(_DWORD *)v124 = v125) == 0))
          {
            re::internal::destroyPersistent<re::TechniqueResolutions<re::BufferResolution>>(v124);
            if (*(_QWORD *)(v1 + 240))
            {
              v126 = v121 % *(unsigned int *)(v1 + 264);
              v127 = *(_QWORD *)(v1 + 248);
              v128 = *(unsigned int *)(v127 + 4 * v126);
              if ((_DWORD)v128 != 0x7FFFFFFF)
              {
                v129 = *(_QWORD *)(v1 + 256);
                if (*(_QWORD *)(v129 + 24 * v128 + 8) == v121)
                {
                  *(_DWORD *)(v127 + 4 * v126) = *(_DWORD *)(v129 + 24 * v128) & 0x7FFFFFFF;
LABEL_211:
                  v131 = *(_QWORD *)(v1 + 256);
                  v132 = (int *)(v131 + 24 * v128);
                  v133 = *v132;
                  if (*v132 < 0)
                  {
                    *v132 = v133 & 0x7FFFFFFF;
                    v131 = *(_QWORD *)(v1 + 256);
                    v133 = *(_DWORD *)(v131 + 24 * v128);
                  }
                  *(_DWORD *)(v131 + 24 * v128) = *(_DWORD *)(v1 + 276) | v133 & 0x80000000;
                  *(_DWORD *)(v1 + 276) = v128;
                  --*(_DWORD *)(v1 + 268);
                  ++*(_DWORD *)(v1 + 280);
                }
                else
                {
                  while (1)
                  {
                    v130 = v128;
                    v128 = *(_DWORD *)(v129 + 24 * v128) & 0x7FFFFFFF;
                    if (v128 == 0x7FFFFFFF)
                      break;
                    if (*(_QWORD *)(v129 + 24 * v128 + 8) == v121)
                    {
                      *(_DWORD *)(v129 + 24 * v130) = *(_DWORD *)(v129 + 24 * v130) & 0x80000000 | *(_DWORD *)(v129 + 24 * v128) & 0x7FFFFFFF;
                      goto LABEL_211;
                    }
                  }
                }
              }
            }
          }
          if (*(_DWORD *)(v9 + 344) <= (v117 + 1))
            v134 = v117 + 1;
          else
            v134 = *(_DWORD *)(v9 + 344);
          while (1)
          {
            v120 = (v117 + 1);
            if (v134 - 1 == (_DWORD)v117)
              break;
            LODWORD(v117) = v117 + 1;
            v135 = v120;
            if ((*(_DWORD *)(*(_QWORD *)(v9 + 328) + 16 * v120) & 0x80000000) != 0)
              goto LABEL_221;
          }
          v135 = v134;
LABEL_221:
          LODWORD(v117) = v135;
        }
        while ((_DWORD)v116 != v135);
      }
      v136 = *(unsigned int *)(v9 + 392);
      if ((_DWORD)v136)
      {
        v137 = 0;
        v138 = *(int **)(v9 + 376);
        while (1)
        {
          v139 = *v138;
          v138 += 4;
          if (v139 < 0)
            break;
          if (v136 == ++v137)
          {
            LODWORD(v137) = *(_DWORD *)(v9 + 392);
            break;
          }
        }
      }
      else
      {
        LODWORD(v137) = 0;
      }
      if ((_DWORD)v136 != (_DWORD)v137)
        break;
LABEL_257:
      v4 = v192;
      v158 = v5;
      if (*(_DWORD *)(v192 + 120) <= (v5 + 1))
        v159 = v5 + 1;
      else
        v159 = *(_DWORD *)(v192 + 120);
      while (1)
      {
        v8 = (v158 + 1);
        if (v159 - 1 == v158)
          break;
        ++v158;
        v160 = v8;
        if ((*(_DWORD *)(*(_QWORD *)(v192 + 104) + 32 * v8 + 8) & 0x80000000) != 0)
          goto LABEL_264;
      }
      v160 = v159;
LABEL_264:
      LODWORD(v5) = v160;
      if ((_DWORD)v193 == v160)
        goto LABEL_265;
    }
    v140 = v137;
    while (1)
    {
      v141 = *(_QWORD *)(*(_QWORD *)(v9 + 376) + 16 * v140 + 8);
      v142 = (re *)re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove(v9 + 360, v141);
      if (*(_QWORD *)(v1 + 288))
      {
        v143 = *(_QWORD *)(v1 + 304);
        v144 = *(unsigned int *)(*(_QWORD *)(v1 + 296) + 4 * (v141 % *(unsigned int *)(v1 + 312)));
        if ((_DWORD)v144 != 0x7FFFFFFF)
        {
          while (*(_QWORD *)(v143 + 24 * v144 + 8) != v141)
          {
            v144 = *(_DWORD *)(v143 + 24 * v144) & 0x7FFFFFFF;
            if (v144 == 0x7FFFFFFF)
              goto LABEL_236;
          }
          goto LABEL_237;
        }
      }
      else
      {
        v143 = *(_QWORD *)(v1 + 304);
      }
LABEL_236:
      LODWORD(v144) = 0x7FFFFFFF;
LABEL_237:
      v145 = *(int **)(v143 + 24 * v144 + 16);
      if (!*v145 || (v146 = *v145 - 1, (*v145 = v146) == 0))
      {
        v147 = re::globalAllocators(v142)[2];
        re::DynamicArray<re::ArgumentBufferResolution>::deinit((uint64_t)(v145 + 12));
        re::DynamicArray<re::ArgumentBufferResolution>::deinit((uint64_t)(v145 + 2));
        (*(void (**)(uint64_t, int *))(*(_QWORD *)v147 + 40))(v147, v145);
        if (*(_QWORD *)(v1 + 288))
        {
          v148 = v141 % *(unsigned int *)(v1 + 312);
          v149 = *(_QWORD *)(v1 + 296);
          v150 = *(unsigned int *)(v149 + 4 * v148);
          if ((_DWORD)v150 != 0x7FFFFFFF)
          {
            v151 = *(_QWORD *)(v1 + 304);
            if (*(_QWORD *)(v151 + 24 * v150 + 8) == v141)
            {
              *(_DWORD *)(v149 + 4 * v148) = *(_DWORD *)(v151 + 24 * v150) & 0x7FFFFFFF;
LABEL_246:
              v153 = *(_QWORD *)(v1 + 304);
              v154 = (int *)(v153 + 24 * v150);
              v155 = *v154;
              if (*v154 < 0)
              {
                *v154 = v155 & 0x7FFFFFFF;
                v153 = *(_QWORD *)(v1 + 304);
                v155 = *(_DWORD *)(v153 + 24 * v150);
              }
              *(_DWORD *)(v153 + 24 * v150) = *(_DWORD *)(v1 + 324) | v155 & 0x80000000;
              *(_DWORD *)(v1 + 324) = v150;
              --*(_DWORD *)(v1 + 316);
              ++*(_DWORD *)(v1 + 328);
            }
            else
            {
              while (1)
              {
                v152 = v150;
                v150 = *(_DWORD *)(v151 + 24 * v150) & 0x7FFFFFFF;
                if (v150 == 0x7FFFFFFF)
                  break;
                if (*(_QWORD *)(v151 + 24 * v150 + 8) == v141)
                {
                  *(_DWORD *)(v151 + 24 * v152) = *(_DWORD *)(v151 + 24 * v152) & 0x80000000 | *(_DWORD *)(v151 + 24 * v150) & 0x7FFFFFFF;
                  goto LABEL_246;
                }
              }
            }
          }
        }
      }
      if (*(_DWORD *)(v9 + 392) <= (v137 + 1))
        v156 = v137 + 1;
      else
        v156 = *(_DWORD *)(v9 + 392);
      while (1)
      {
        v140 = (v137 + 1);
        if (v156 - 1 == (_DWORD)v137)
          break;
        LODWORD(v137) = v137 + 1;
        v157 = v140;
        if ((*(_DWORD *)(*(_QWORD *)(v9 + 376) + 16 * v140) & 0x80000000) != 0)
          goto LABEL_256;
      }
      v157 = v156;
LABEL_256:
      LODWORD(v137) = v157;
      if ((_DWORD)v136 == v157)
        goto LABEL_257;
    }
  }
LABEL_266:
  if (*(_QWORD *)(v1 + 416))
  {
    v161 = 0;
    do
    {
      WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(v1 + 432) + 8 * v161));
      if (WeakRetained)
      {

        ++v161;
        v163 = *(_QWORD *)(v1 + 416);
      }
      else
      {
        v164 = *(_QWORD *)(v1 + 416);
        if (v164 <= v161)
        {
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v165 = *(_QWORD *)(v1 + 432);
        if (v164 - 1 > v161)
        {
          v166 = (id *)(v165 + 8 * v164 - 8);
          v167 = (id *)(v165 + 8 * v161);
          if (v166 != v167)
          {
            objc_destroyWeak((id *)(v165 + 8 * v161));
            *v167 = 0;
            objc_moveWeak(v167, v166);
            v164 = *(_QWORD *)(v1 + 416);
            v165 = *(_QWORD *)(v1 + 432);
          }
        }
        v168 = v165 + 8 * v164;
        objc_destroyWeak((id *)(v168 - 8));
        *(_QWORD *)(v168 - 8) = 0;
        v163 = *(_QWORD *)(v1 + 416) - 1;
        *(_QWORD *)(v1 + 416) = v163;
        ++*(_DWORD *)(v1 + 424);
      }
    }
    while (v161 < v163);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 488));
  v169 = *(unsigned int *)(v1 + 472);
  if ((_DWORD)v169)
  {
    v170 = 0;
    v171 = *(int **)(v1 + 456);
    while (1)
    {
      v172 = *v171;
      v171 += 6;
      if (v172 < 0)
        break;
      if (v169 == ++v170)
      {
        LODWORD(v170) = *(_DWORD *)(v1 + 472);
        break;
      }
    }
  }
  else
  {
    LODWORD(v170) = 0;
  }
  if ((_DWORD)v169 != (_DWORD)v170)
  {
    v173 = v170;
    do
    {
      v174 = *(_QWORD *)(v1 + 456) + 24 * v173 + 16;
      if (objc_isUniquelyReferenced())
      {
        if (*(_QWORD *)v174)
        {

          *(_QWORD *)v174 = 0;
        }
        if (*(_QWORD *)(v1 + 440))
        {
          v175 = *(_QWORD *)(v174 - 8);
          v176 = v175 % *(unsigned int *)(v1 + 464);
          v177 = *(_QWORD *)(v1 + 448);
          v178 = *(unsigned int *)(v177 + 4 * v176);
          if ((_DWORD)v178 != 0x7FFFFFFF)
          {
            v179 = *(_QWORD *)(v1 + 456);
            if (*(_QWORD *)(v179 + 24 * v178 + 8) == v175)
            {
              *(_DWORD *)(v177 + 4 * v176) = *(_DWORD *)(v179 + 24 * v178) & 0x7FFFFFFF;
LABEL_294:
              v181 = *(_QWORD *)(v1 + 456);
              v182 = (_DWORD *)(v181 + 24 * v178);
              if ((*v182 & 0x80000000) != 0)
              {
                *v182 &= ~0x80000000;
                v183 = v181 + 24 * v178;
                v186 = *(_QWORD *)(v183 + 16);
                v185 = (_QWORD *)(v183 + 16);
                v184 = v186;
                if (v186)
                {

                  *v185 = 0;
                }
              }
              *(_DWORD *)(*(_QWORD *)(v1 + 456) + 24 * v178) = *(_DWORD *)(*(_QWORD *)(v1 + 456)
                                                                                         + 24 * v178) & 0x80000000 | *(_DWORD *)(v1 + 476);
              *(_DWORD *)(v1 + 476) = v178;
              --*(_DWORD *)(v1 + 468);
              ++*(_DWORD *)(v1 + 480);
            }
            else
            {
              while (1)
              {
                v180 = v178;
                v178 = *(_DWORD *)(v179 + 24 * v178) & 0x7FFFFFFF;
                if (v178 == 0x7FFFFFFF)
                  break;
                if (*(_QWORD *)(v179 + 24 * v178 + 8) == v175)
                {
                  *(_DWORD *)(v179 + 24 * v180) = *(_DWORD *)(v179 + 24 * v180) & 0x80000000 | *(_DWORD *)(v179 + 24 * v178) & 0x7FFFFFFF;
                  goto LABEL_294;
                }
              }
            }
          }
        }
      }
      if (*(_DWORD *)(v1 + 472) <= (v170 + 1))
        v187 = v170 + 1;
      else
        v187 = *(_DWORD *)(v1 + 472);
      while (1)
      {
        v173 = (v170 + 1);
        if (v187 - 1 == (_DWORD)v170)
          break;
        LODWORD(v170) = v170 + 1;
        v188 = v173;
        if ((*(_DWORD *)(*(_QWORD *)(v1 + 456) + 24 * v173) & 0x80000000) != 0)
          goto LABEL_305;
      }
      v188 = v187;
LABEL_305:
      LODWORD(v170) = v188;
    }
    while ((_DWORD)v169 != v188);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 488));
}

_QWORD *re::internal::MoveOnlyCallable<re::MaterialManager::destroyMaterial(unsigned long,re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>> &&)::$_0::operator()(void)::{lambda(void)#1},void ()(void)>::moveInto(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  *a2 = &off_24ED76C28;
  a2[1] = v2;
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = 0;
  v3 = a1[3];
  a2[2] = a1[2];
  a2[3] = v3;
  a1[2] = 0;
  a1[3] = 0;
  v4 = a2[4];
  a2[4] = a1[4];
  a1[4] = v4;
  a2[5] = a1[5];
  return a2;
}

uint64_t re::internal::MoveOnlyCallable<re::MaterialManager::destroyMaterial(unsigned long,re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>> &&)::$_0::operator()(void)::{lambda(void)#1},void ()(void)>::size()
{
  return 48;
}

uint64_t re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int *v9;
  int v10;
  int v11;

  v2 = *(unsigned int *)(result + 24);
  if ((_DWORD)v2)
  {
    v3 = a2 % v2;
    v4 = *(_QWORD *)(result + 8);
    v5 = *(unsigned int *)(v4 + 4 * (a2 % v2));
    if ((_DWORD)v5 != 0x7FFFFFFF)
    {
      v6 = *(_QWORD *)(result + 16);
      if (*(_QWORD *)(v6 + 16 * v5 + 8) == a2)
      {
        *(_DWORD *)(v4 + 4 * v3) = *(_DWORD *)(v6 + 16 * v5) & 0x7FFFFFFF;
LABEL_8:
        v8 = *(_QWORD *)(result + 16);
        v9 = (int *)(v8 + 16 * v5);
        v10 = *v9;
        if (*v9 < 0)
        {
          *v9 = v10 & 0x7FFFFFFF;
          v8 = *(_QWORD *)(result + 16);
          v10 = *(_DWORD *)(v8 + 16 * v5);
        }
        v11 = *(_DWORD *)(result + 40);
        *(_DWORD *)(v8 + 16 * v5) = *(_DWORD *)(result + 36) | v10 & 0x80000000;
        --*(_DWORD *)(result + 28);
        *(_DWORD *)(result + 36) = v5;
        *(_DWORD *)(result + 40) = v11 + 1;
      }
      else
      {
        while (1)
        {
          v7 = v5;
          v5 = *(_DWORD *)(v6 + 16 * v5) & 0x7FFFFFFF;
          if ((_DWORD)v5 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v6 + 16 * v5 + 8) == a2)
          {
            *(_DWORD *)(v6 + 16 * v7) = *(_DWORD *)(v6 + 16 * v7) & 0x80000000 | *(_DWORD *)(v6 + 16 * v5) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::ArgumentBufferResolution>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 144 * v4;
        v6 = v3 + 64;
        do
        {
          v7 = *(void **)(v6 + 56);
          if (v7)
          {

            *(_QWORD *)(v6 + 56) = 0;
          }
          re::DynamicArray<re::ConstantResolution>::deinit(v6 + 16);
          v8 = *(_QWORD *)(v6 - 24);
          if (v8)
          {
            if (*(_QWORD *)(v6 + 8))
              (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
            *(_QWORD *)(v6 + 8) = 0;
            *(_QWORD *)(v6 - 16) = 0;
            *(_QWORD *)(v6 - 8) = 0;
            *(_QWORD *)(v6 - 24) = 0;
            ++*(_DWORD *)v6;
          }
          v9 = *(_QWORD *)(v6 - 64);
          if (v9)
          {
            if (*(_QWORD *)(v6 - 32))
              (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
            *(_QWORD *)(v6 - 32) = 0;
            *(_QWORD *)(v6 - 56) = 0;
            *(_QWORD *)(v6 - 48) = 0;
            *(_QWORD *)(v6 - 64) = 0;
            ++*(_DWORD *)(v6 - 40);
          }
          v6 += 144;
          v5 -= 144;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::ConstantResolution>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 112 * v4;
        v6 = (_QWORD *)(v3 + 56);
        do
        {
          if (*v6)
          {
            if (v6[4])
              (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 40))(*v6);
            v6[4] = 0;
            v6[1] = 0;
            v6[2] = 0;
            *v6 = 0;
            ++*((_DWORD *)v6 + 6);
          }
          v7 = *(v6 - 6);
          if (v7)
          {
            if (*(v6 - 2))
              (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
            *(v6 - 2) = 0;
            *(v6 - 5) = 0;
            *(v6 - 4) = 0;
            *(v6 - 6) = 0;
            ++*((_DWORD *)v6 - 6);
          }
          v6 += 14;
          v5 -= 112;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::DynamicArray<re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 6;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v9 << 6;
        v11 = v7;
        do
        {
          *((_OWORD *)v11 + 2) = 0u;
          *((_OWORD *)v11 + 3) = 0u;
          *(_OWORD *)v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap(v11, v8);
          re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)v8);
          v8 += 8;
          v11 += 8;
          v10 -= 64;
        }
        while (v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_anonymous_namespace_ *re::DataArray<re::MaterialParameterBlock>::allocBlock(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _anonymous_namespace_ *result;
  uint64_t v8;
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;

  v3 = 1008 * *((unsigned int *)a1 + 11);
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v3, 0);
  if (!v4)
  {
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v3, *(_QWORD *)(*a1 + 8));
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  v6 = v4;
  v1 = 4 * *((unsigned int *)a1 + 11);
  result = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v1, 0);
  if (!result)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v1, *(_QWORD *)(*a1 + 8));
    result = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
    return result;
  }
  v9 = result;
  v11 = a1[1];
  v10 = a1[2];
  if (v10 >= v11)
  {
    v12 = v10 + 1;
    if (v11 < v10 + 1)
    {
      if (*a1)
      {
        v13 = 2 * v11;
        if (!v11)
          v13 = 8;
        if (v13 <= v12)
          v14 = v12;
        else
          v14 = v13;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v14);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v12);
        ++*((_DWORD *)a1 + 6);
      }
    }
    v10 = a1[2];
  }
  v15 = (uint64_t *)(a1[4] + 16 * v10);
  *v15 = v6;
  v15[1] = (uint64_t)v9;
  a1[2] = v10 + 1;
  ++*((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 12) = 0;
  return result;
}

void re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize(__int128 *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _anonymous_namespace_ *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int8x16_t v13;
  unsigned __int16 v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[48];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v3 = *((_QWORD *)a1 + 2);
  v2 = *((_QWORD *)a1 + 3);
  v4 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v5 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v4 > (192 * v3) >> 7)
    v5 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v6 = (v5 << 7) / 0x97;
  v7 = *((_QWORD *)a1 + 7);
  v66 = 0u;
  *(_OWORD *)v67 = 0u;
  if (v4 <= v3)
    v8 = v2 + 1;
  else
    v8 = v6;
  memset(&v67[16], 0, 32);
  v9 = (_anonymous_namespace_ *)re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::init(&v66, v7, v8);
  v10 = *((_QWORD *)a1 + 2);
  if (v10 >= 0x10)
  {
    v11 = 0;
    v12 = v10 >> 4;
    v13 = (int8x16_t)xmmword_2260EE390;
    while (1)
    {
      v14 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v15 = (unsigned __int16)~v14;
      if (v14 != 0xFFFF)
        break;
      v11 += 16;
      if (!--v12)
        goto LABEL_12;
    }
    v16 = __clz(__rbit64(v15)) + v11;
    while (v16 != -1)
    {
      v23 = *((_QWORD *)a1 + 1);
      if (*(_QWORD *)&v67[40])
      {
        v24 = *(_QWORD *)&v67[16];
        if (*(_QWORD *)&v67[16])
          goto LABEL_15;
      }
      else
      {
        *(_QWORD *)v67 = 16;
        *(_QWORD *)&v65 = -1;
        *((_QWORD *)&v65 + 1) = -1;
        *(_OWORD *)v66 = v65;
        v24 = *(_QWORD *)v67;
        *((_QWORD *)&v66 + 1) = v66 + 16;
        if (*(_QWORD *)v67)
          bzero((void *)(v66 + 16), 72 * *(_QWORD *)v67);
        *(_QWORD *)&v67[32] = 0;
        *(_QWORD *)&v67[8] = 0;
        *(_OWORD *)&v67[16] = v24;
        v13 = (int8x16_t)xmmword_2260EE390;
        if (v24)
        {
LABEL_15:
          v25 = *(_QWORD *)v67;
          if (*(_QWORD *)v67 <= 8 * v24)
            goto LABEL_16;
        }
      }
      re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize(&v66);
      v13 = (int8x16_t)xmmword_2260EE390;
      v25 = *(_QWORD *)v67;
LABEL_16:
      v26 = (uint64_t *)(v23 + 72 * v16);
      v27 = 0xBF58476D1CE4E5B9 * (*v26 ^ ((unint64_t)*v26 >> 30));
      v28 = (0x94D049BB133111EBLL * (v27 ^ (v27 >> 27))) ^ ((0x94D049BB133111EBLL * (v27 ^ (v27 >> 27))) >> 31);
      v29 = v25 >> 4;
      v30 = v28 % (v25 >> 4);
      v31 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v66 + 16 * v30)), v13)))), (int8x8_t)0x3830282018100800)));
      if (v31 >= 0x40)
      {
        do
        {
          if (v30 + 1 == v29)
            v30 = 0;
          else
            ++v30;
          v31 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v66 + 16 * v30)), v13)))), (int8x8_t)0x3830282018100800)));
        }
        while (v31 > 0x3F);
      }
      v32 = v26 + 1;
      v33 = v66 + 16 * v30;
      v34 = v28 & 0x7F;
      v35 = *(unsigned __int8 *)(v33 + v31);
      *(_BYTE *)(v33 + v31) = v34;
      v36 = v31 + 16 * v30;
      v68 = *v26;
      v37 = v68;
      v38 = (_QWORD *)(v23 + 72 * v16);
      v39 = v38[8];
      v76 = v39;
      v38[8] = 0;
      v40 = *v32;
      v69 = *v32;
      *v32 = 0;
      v41 = v38[2];
      v70 = v41;
      v38[2] = 0;
      v42 = v38[3];
      v71 = v42;
      v38[3] = 0;
      v43 = v38[6];
      v74 = v43;
      v38[6] = 0;
      v44 = v38[7];
      v75 = v44;
      v38[7] = 0;
      v45 = v38[4];
      v72 = v45;
      v38[4] = 0;
      v46 = v38[5];
      v73 = v46;
      v38[5] = 0;
      v47 = *((_QWORD *)&v66 + 1);
      v48 = (uint64_t *)(*((_QWORD *)&v66 + 1) + 72 * v36);
      *v48 = v37;
      if (v48 != &v68)
      {
        v49 = (_QWORD *)(v47 + 72 * v36);
        v50 = v49[8];
        v49[8] = v39;
        v76 = v50;
        v51 = v49[1];
        v49[1] = v40;
        v69 = v51;
        v52 = v49[2];
        v49[2] = v41;
        v70 = v52;
        v53 = v49[3];
        v49[3] = v42;
        v71 = v53;
        v54 = v49[6];
        v49[6] = v43;
        v74 = v54;
        v55 = v49[7];
        v49[7] = v44;
        v75 = v55;
        v56 = v49[4];
        v49[4] = v45;
        v72 = v56;
        v57 = v49[5];
        v49[5] = v46;
        v73 = v57;
      }
      v58 = v35 == 255;
      re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)&v69);
      ++*(_QWORD *)&v67[8];
      *(_QWORD *)&v67[16] -= v58;
      v59 = 0xBF58476D1CE4E5B9
          * (*(_QWORD *)(*((_QWORD *)&v66 + 1) + 72 * v36) ^ (*(_QWORD *)(*((_QWORD *)&v66 + 1) + 72 * v36) >> 30));
      *(_QWORD *)&v67[24] ^= ((0x94D049BB133111EBLL * (v59 ^ (v59 >> 27))) >> 31) ^ (0x94D049BB133111EBLL
                                                                                   * (v59 ^ (v59 >> 27)));
      v60 = v16 >> 4;
      v10 = *((_QWORD *)a1 + 2);
      if (v16 >> 4 >= v10 >> 4)
        break;
      v61 = __clz(__rbit64((-2 << (v16 & 0xF)) & v15));
      if (v61 >= 0x40)
      {
        v62 = 16 * v60;
        v63 = ~v60 + (v10 >> 4);
        v13 = (int8x16_t)xmmword_2260EE390;
        while (v63)
        {
          v15 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + v62 + 16)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
          v64 = __clz(__rbit64(v15));
          v62 += 16;
          --v63;
          if (v64 <= 0x3F)
          {
            v16 = v64 + v62;
            goto LABEL_26;
          }
        }
        break;
      }
      v16 = v61 + (v16 & 0xFFFFFFFFFFFFFFF0);
      v13 = (int8x16_t)xmmword_2260EE390;
LABEL_26:
      ;
    }
  }
LABEL_12:
  v17 = *(_QWORD *)&v67[40];
  *(_QWORD *)&v67[40] = *((_QWORD *)a1 + 7);
  v18 = v66;
  v19 = *(_OWORD *)v67;
  v66 = *a1;
  *(_QWORD *)v67 = v10;
  v20 = *(_OWORD *)&v67[16];
  v21 = *(__int128 *)((char *)a1 + 40);
  *((_QWORD *)a1 + 6) = *(_QWORD *)&v67[32];
  *((_QWORD *)a1 + 7) = v17;
  *(_OWORD *)&v67[24] = v21;
  v22 = *(__int128 *)((char *)a1 + 24);
  *a1 = v18;
  a1[1] = v19;
  a1[2] = v20;
  *(_OWORD *)&v67[8] = v22;
  re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::deinit((uint64_t)&v66);
}

_QWORD *re::TextureTableImpl<NS::SharedPtr<MTL::Texture>>::~TextureTableImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_24ED76CE8;
  v2 = (uint64_t)(a1 + 1);
  v3 = (uint64_t)(a1 + 9);
  re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::deinit((uint64_t)(a1 + 9));
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit(v2);
  re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::deinit(v3);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit(v2);
  return a1;
}

uint64_t re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  void *v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 32 * v4;
        v6 = (id *)(v3 + 16);
        do
        {
          if (*((_BYTE *)v6 - 8) && *v6)
          {

            *v6 = 0;
          }
          v7 = *(v6 - 2);
          if (v7)
          {

            *(v6 - 2) = 0;
          }
          v6 += 4;
          v5 -= 32;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double re::DataArray<re::MaterialParameterBlock>::clear(_QWORD *a1)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  _OWORD v12[5];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v12, (uint64_t)a1, 0);
  if (*(_QWORD **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFFLL || (DWORD2(v12[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v4 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)v12);
      re::DataArray<re::MaterialParameterBlock>::destroy((uint64_t)a1, v4);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(v12);
    }
    while (*(_QWORD **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFF || WORD5(v12[0]) != 0xFFFF);
  }
  v7 = a1[2];
  v8 = v7 - 1;
  if (v7 != 1)
  {
    v9 = 16 * v7;
    do
    {
      if (a1[2] <= v8)
      {
        memset(v12, 0, sizeof(v12));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v10 = a1[4] + v9;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *(_QWORD *)(v10 - 16));
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *(_QWORD *)(v10 - 8));
      re::DynamicArray<re::DataArray<re::RigGraphOperatorDefinition>::ElementBlock>::removeAt((uint64_t)a1, v8);
      v9 -= 16;
      --v8;
    }
    while (v8);
  }
  result = NAN;
  a1[6] = 0xFFFFFFFF00000000;
  return result;
}

uint64_t re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addEmplace<re::TextureTable *&>(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 24 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  signed int v23;
  _BYTE v24[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(_QWORD *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init((uint64_t)v24, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v24;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)v24 = v5;
      *(_QWORD *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = (unint64_t *)(v6 + 8);
        do
        {
          if ((*(_DWORD *)(v14 - 1) & 0x80000000) != 0)
          {
            v15 = *v14;
            v16 = *(unsigned int *)(a1 + 24);
            v17 = *v14 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
                v15 = *v14;
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 24 * v18);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 24 * v18);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            v22 = 24 * v18;
            *(_DWORD *)(v20 + v22) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + v22) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18 + 8) = v15;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18 + 16) = v14[1];
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 3;
        }
        while (v11 < v10);
      }
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2)
      v23 = a2;
    else
      v23 = 3;
  }
}

void re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_238, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

_QWORD *re::DynamicArray<re::MaterialManager::PerSceneTables>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  if (result[1] == a2)
    return result;
  v4 = result;
  if (result[2] > a2)
    return result;
  v5 = *result;
  if (!*v4)
  {
    result = (_QWORD *)re::DynamicArray<re::MaterialManager::PerSceneTables>::setCapacity(v4, a2);
    ++*((_DWORD *)v4 + 6);
    return result;
  }
  if (a2 >> 58)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  v2 = a2 << 6;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, a2 << 6, 16);
  if (!result)
  {
LABEL_12:
    re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v4 + 8));
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v7 = result;
  if (v4[1])
  {
    memcpy(result, (const void *)v4[4], v4[2] << 6);
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
  }
  v4[4] = v7;
  v4[1] = a2;
  return result;
}

uint64_t re::HashTable<unsigned long,re::SharedPtr<re::MaterialPipelineData>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::SharedPtr<re::MaterialPipelineData>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 24 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  v14 = a2;
  v15 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8) & 0x80000000 | *(_DWORD *)(v15 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) = *a4;
  v16 = *a5;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 16) = *a5;
  if (v16)
  {
    v17 = (id)(v16 + 8);
    v15 = *(_QWORD *)(a1 + 8);
  }
  *(_DWORD *)(v15 + 4 * v14) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<unsigned long,re::SharedPtr<re::MaterialPipelineData>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  signed int v23;
  _BYTE v24[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(_QWORD *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::TextureTable *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init((uint64_t)v24, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v24;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)v24 = v5;
      *(_QWORD *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = v7;
        v13 = DWORD1(v9);
        v14 = (_QWORD *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v14 - 2) & 0x80000000) != 0)
          {
            v15 = *(v14 - 1);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashTable<unsigned long,re::SharedPtr<re::MaterialPipelineData>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, (2 * v13));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
                v15 = *(v14 - 1);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 24 * v18);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 24 * v18);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            v22 = 24 * v18;
            *(_DWORD *)(v20 + v22) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + v22) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18) & 0x80000000 | *(_DWORD *)(v12 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18 + 8) = v15;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18 + 16) = *v14;
            *v14 = 0;
            *(_DWORD *)(v12 + 4 * v17) = v18;
            v13 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v13;
            v10 = *(_DWORD *)&v24[32];
          }
          ++v11;
          v14 += 3;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2)
      v23 = a2;
    else
      v23 = 3;
  }
}

uint64_t re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const*>(uint64_t a1, re::DynamicString *a2, int a3, const char **a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v16;
  _anonymous_namespace_ *v17;
  _OWORD *v18;
  _anonymous_namespace_ *v19;
  const char *v20;
  char v21;

  v8 = re::Hash<re::DynamicString>::operator()((uint64_t)&v21, (uint64_t)a2);
  v9 = v8;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v10) = 0;
    goto LABEL_8;
  }
  v10 = v8 % *(unsigned int *)(a1 + 24);
  v11 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v10);
  if ((_DWORD)v11 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<char const*&>(a1, v10, v9, a2, a4);
    ++*(_DWORD *)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 16) + 80 * v13;
    return v14 + 48;
  }
  v12 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v12 + 80 * v11 + 16, (uint64_t)a2))
  {
    v11 = *(_DWORD *)(v12 + 80 * v11 + 8) & 0x7FFFFFFF;
    if (v11 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  switch(a3)
  {
    case 0:
    case 1:
      v14 = v12 + 80 * v11;
      break;
    case 2:
    case 3:
      v16 = v12 + 80 * v11;
      v19 = *(_anonymous_namespace_ **)(v16 + 48);
      v18 = (_OWORD *)(v16 + 48);
      v17 = v19;
      if (v19)
      {
        if ((*(_BYTE *)(v12 + 80 * v11 + 56) & 1) != 0)
          v17 = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, _QWORD))(*(_QWORD *)v17 + 40))(v17, *(_QWORD *)(v12 + 80 * v11 + 64));
        *v18 = 0u;
        v18[1] = 0u;
        v12 = *(_QWORD *)(a1 + 16);
      }
      v20 = *a4;
      ++*(_DWORD *)(a1 + 40);
      v14 = *(_QWORD *)(a1 + 16) + 80 * v11;
      break;
    default:
      goto LABEL_8;
  }
  return v14 + 48;
}

uint64_t re::HashTable<unsigned long long,re::DataArrayHandle<re::MaterialParameterBlock>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<re::DataArrayHandle<re::MaterialParameterBlock>&>(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::DataArrayHandle<re::MaterialParameterBlock>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,re::DataArrayHandle<re::MaterialParameterBlock>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  signed int v22;
  _BYTE v23[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(_QWORD *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::DataArrayHandle<re::MaterialParameterBlock>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v23, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v23;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)v23 = v5;
      *(_QWORD *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = (_QWORD *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v14 - 1) & 0x80000000) != 0)
          {
            v15 = *(v14 - 2);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashTable<unsigned long long,re::DataArrayHandle<re::MaterialParameterBlock>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 32 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 32 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 32 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v18 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v18) = v15;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v18 + 16) = *v14;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v18 + 24) = v14[1];
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 4;
        }
        while (v11 < v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2)
      v22 = a2;
    else
      v22 = 3;
  }
}

void re::HashTable<unsigned long long,re::DataArrayHandle<re::MaterialParameterBlock>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_238, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_238, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          re::StringID::destroyString((re::StringID *)(v6 + v4 + 8));
          v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 32;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

void re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        v9 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(v8 + v6 + 8) >> 31) ^ (*(_QWORD *)(v8 + v6 + 8) >> 1));
        v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
        re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v10 % *(unsigned int *)(a1 + 24), v10, (StringID *)(v8 + v6 + 8), (_BYTE *)(v8 + v6 + 24));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 32;
    }
  }
}

uint64_t re::HashSetBase<re::UnresolvedArgumentBufferEntry,re::UnresolvedArgumentBufferEntry,re::internal::ValueAsKey<re::UnresolvedArgumentBufferEntry>,re::Hash<re::UnresolvedArgumentBufferEntry>,re::EqualTo<re::UnresolvedArgumentBufferEntry>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  int v10;
  signed int v11;
  uint64_t v12;
  BOOL v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v28[44];

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      v10 = *(_DWORD *)(a1 + 28);
      v11 = 2 * v10;
      v12 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v11)
          v13 = (_DWORD)v8 == v11;
        else
          v13 = 1;
        if (!v13 && (v10 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(_QWORD *)&v28[36] = 0x7FFFFFFFLL;
          re::HashSetBase<re::UnresolvedArgumentBufferEntry,re::UnresolvedArgumentBufferEntry,re::internal::ValueAsKey<re::UnresolvedArgumentBufferEntry>,re::Hash<re::UnresolvedArgumentBufferEntry>,re::EqualTo<re::UnresolvedArgumentBufferEntry>,true,false>::init((uint64_t)v28, v12, v11);
          v14 = *(_OWORD *)v28;
          *(_OWORD *)v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v14;
          v15 = *(_QWORD *)&v28[16];
          v16 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v28[16] = v16;
          *(_QWORD *)(a1 + 16) = v15;
          v18 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          v17 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v18;
          v19 = v17;
          if (v17)
          {
            v20 = 0;
            v21 = v16 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashSetBase<re::UnresolvedArgumentBufferEntry,re::UnresolvedArgumentBufferEntry,re::internal::ValueAsKey<re::UnresolvedArgumentBufferEntry>,re::Hash<re::UnresolvedArgumentBufferEntry>,re::EqualTo<re::UnresolvedArgumentBufferEntry>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21);
              ++v20;
              v21 += 56;
            }
            while (v20 < v19);
          }
          re::HashSetBase<re::UnresolvedArgumentBufferEntry,re::UnresolvedArgumentBufferEntry,re::internal::ValueAsKey<re::UnresolvedArgumentBufferEntry>,re::Hash<re::UnresolvedArgumentBufferEntry>,re::EqualTo<re::UnresolvedArgumentBufferEntry>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v11)
          v24 = v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 56 * v8 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 56 * v8 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 56 * v8 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v8 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v8 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v8) = a3;
  v25 = *(_QWORD *)(a1 + 16) + 56 * v8;
  *(_OWORD *)(v25 + 16) = *(_OWORD *)a5;
  *(_QWORD *)(v25 + 40) = 0;
  *(_QWORD *)(v25 + 48) = 0;
  *(_QWORD *)(v25 + 32) = 0;
  *(_QWORD *)(v25 + 32) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(v25 + 40) = *(_QWORD *)(a5 + 24);
  *(_QWORD *)(a5 + 24) = 0;
  v26 = *(_QWORD *)(v25 + 48);
  *(_QWORD *)(v25 + 48) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v26;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashSetBase<re::UnresolvedArgumentBufferEntry,re::UnresolvedArgumentBufferEntry,re::internal::ValueAsKey<re::UnresolvedArgumentBufferEntry>,re::Hash<re::UnresolvedArgumentBufferEntry>,re::EqualTo<re::UnresolvedArgumentBufferEntry>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 56 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_238, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 600);
    _os_crash();
    __break(1u);
  }
}

double re::HashSetBase<re::UnresolvedArgumentBufferEntry,re::UnresolvedArgumentBufferEntry,re::internal::ValueAsKey<re::UnresolvedArgumentBufferEntry>,re::Hash<re::UnresolvedArgumentBufferEntry>,re::EqualTo<re::UnresolvedArgumentBufferEntry>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::FixedArray<re::ArgumentBufferTextureRecord>::deinit((_QWORD *)(v6 + 32));
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 56;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void ___ZN2re20GraphicsFeatureFlags37systemMaterialParametersDirtyTrackingEv_block_invoke(uint64_t a1, const char *a2)
{
  re *v2;
  NSObject *v3;
  const char *v4;
  char v5[2];
  uint8_t buf[4];
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  re::Defaults::BOOLValue((re::Defaults *)"GraphicsSystemMaterialParametersDirtyTracking", a2, v5);
  if (v5[0])
    re::GraphicsFeatureFlags::systemMaterialParametersDirtyTracking(void)::gSystemMaterialParametersDirtyTracking = v5[1];
  v3 = *re::graphicsLogObjects(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (re::GraphicsFeatureFlags::systemMaterialParametersDirtyTracking(void)::gSystemMaterialParametersDirtyTracking)
      v4 = "enabled";
    else
      v4 = "disabled";
    *(_DWORD *)buf = 136315138;
    v7 = v4;
    _os_log_impl(&dword_224FE9000, v3, OS_LOG_TYPE_DEFAULT, "Dirty tracking of SystemMaterialPrameterBlock parameters is %s.", buf, 0xCu);
  }
}

void ___ZN2re20GraphicsFeatureFlags20mergeComputeEncodersEv_block_invoke(uint64_t a1, const char *a2)
{
  re *v2;
  NSObject *v3;
  const char *v4;
  char v5[2];
  uint8_t buf[4];
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  re::Defaults::BOOLValue((re::Defaults *)"GraphicsMergeComputeEncoders", a2, v5);
  if (v5[0])
    re::GraphicsFeatureFlags::mergeComputeEncoders(void)::gMergeComputeEncoders = v5[1];
  v3 = *re::graphicsLogObjects(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (re::GraphicsFeatureFlags::mergeComputeEncoders(void)::gMergeComputeEncoders)
      v4 = "enabled";
    else
      v4 = "disabled";
    *(_DWORD *)buf = 136315138;
    v7 = v4;
    _os_log_impl(&dword_224FE9000, v3, OS_LOG_TYPE_DEFAULT, "Merging Compute Encoders is %s.", buf, 0xCu);
  }
}

void ___ZN2re20GraphicsFeatureFlags16enableDepthPatchEv_block_invoke(uint64_t a1, const char *a2)
{
  re *v2;
  NSObject *v3;
  const char *v4;
  char v5[2];
  uint8_t buf[4];
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  re::Defaults::BOOLValue((re::Defaults *)"enableDepthPatch", a2, v5);
  if (v5[0])
    re::GraphicsFeatureFlags::enableDepthPatch(void)::gEnableDepthPatch = v5[1];
  v3 = *re::graphicsLogObjects(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (re::GraphicsFeatureFlags::enableDepthPatch(void)::gEnableDepthPatch)
      v4 = "enabled";
    else
      v4 = "disabled";
    *(_DWORD *)buf = 136315138;
    v7 = v4;
    _os_log_impl(&dword_224FE9000, v3, OS_LOG_TYPE_DEFAULT, "Depth Patch is %s.", buf, 0xCu);
  }
}

uint64_t re::REAnalyticsEventShaderCompilationRequest(re *this, const char *a2, const char *a3, const char *a4, const char *a5, const char *a6, uint64_t a7, unsigned int *a8, unsigned int a9, unsigned int a10, uint64_t a11, const char *a12, uint64_t a13, char a14)
{
  int v14;
  int v16;
  void *v19;
  _anonymous_namespace_ *v20;
  const char *v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  _anonymous_namespace_ *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t result;
  int v30;
  _QWORD v31[8];
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  char v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  v14 = (int)a8;
  v16 = (int)a6;
  if (!a4)
  {
    v22 = a14;
    goto LABEL_19;
  }
  v30 = (int)a8;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", a4, 4);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = (_anonymous_namespace_ *)objc_msgSend(v19, "hasPrefix:", CFSTR("snapshotCamera"));
  if (!(_DWORD)v20)
  {
    if (objc_msgSend(v19, "hasPrefix:", CFSTR("Reality Simulation Default Camera")))
    {
      v23 = objc_msgSend(v19, "rangeOfString:options:", CFSTR("_"), 4);
      if (!v23 || (v24 = v23, v23 >= objc_msgSend(v19, "length")))
      {
        re::DynamicString::format((re::DynamicString *)"RSCamera_%s", (re::DynamicString *)&v38, "");
        goto LABEL_18;
      }
      objc_msgSend(v19, "substringFromIndex:", v24 + 1);
      v25 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      re::DynamicString::format((re::DynamicString *)"RSCamera_%s", (re::DynamicString *)&v38, objc_msgSend(v25, "cStringUsingEncoding:", 4));
    }
    else
    {
      v26 = (_anonymous_namespace_ *)objc_msgSend(v19, "hasPrefix:", CFSTR("rOS Shared Scene"));
      if (!(_DWORD)v26)
      {
        v21 = a4;
        goto LABEL_4;
      }
      v27 = objc_msgSend(v19, "rangeOfString:options:", CFSTR("_"), 4);
      if (!v27 || (v28 = v27, v27 >= objc_msgSend(v19, "length")))
      {
        re::DynamicString::format((re::DynamicString *)"SharedScene_%s", (re::DynamicString *)&v38, "");
        goto LABEL_18;
      }
      objc_msgSend(v19, "substringFromIndex:", v28 + 1);
      v25 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      re::DynamicString::format((re::DynamicString *)"SharedScene_%s", (re::DynamicString *)&v38, objc_msgSend(v25, "cStringUsingEncoding:", 4));
    }

    goto LABEL_18;
  }
  v21 = "snapshotCamera";
LABEL_4:
LABEL_18:
  v22 = a14;

  v14 = v30;
LABEL_19:
  re::DynamicString::DynamicString((re::DynamicString *)v31, (const re::DynamicString *)&v38);
  v31[4] = a5;
  v31[5] = a7;
  v32 = v16;
  v33 = v14;
  v34 = a9;
  v35 = a10;
  v36 = (char)a12;
  v31[6] = a11;
  v31[7] = a13;
  v37 = v22;
  AnalyticsSendEventLazy();
  if (v31[0])
  {
    if ((v31[1] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v31[0] + 40))();
    memset(v31, 0, 32);
  }
  result = v38;
  if (v38)
  {
    if ((v39 & 1) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 40))(v38, v40);
  }
  return result;
}

id ___ZN2re40REAnalyticsEventShaderCompilationRequestEPKcS1_S1_S1_S1_jPjjjjS1_bmb_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  unsigned int *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD v20[14];
  _QWORD v21[16];

  v21[14] = *MEMORY[0x24BDAC8D0];
  v20[0] = CFSTR("MaterialName");
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", *(_QWORD *)(a1 + 32));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v21[0] = v19;
  v20[1] = CFSTR("TechniqueName");
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", *(_QWORD *)(a1 + 40));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v21[1] = v18;
  v20[2] = CFSTR("NodeName");
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", *(_QWORD *)(a1 + 48));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v21[2] = v17;
  v20[3] = CFSTR("GraphScope");
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
    v2 = *(_QWORD *)(a1 + 72);
  else
    v2 = a1 + 65;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v2);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v21[3] = v16;
  v20[4] = CFSTR("TypeScope");
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", *(_QWORD *)(a1 + 88));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v21[4] = v15;
  v20[5] = CFSTR("SampleCount");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", *(unsigned int *)(a1 + 120));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v21[5] = v3;
  v20[6] = CFSTR("PixelFormats");
  v4 = *(unsigned int **)(a1 + 96);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%u %u %u %u %u %u %u %u"), *v4, v4[1], v4[2], v4[3], v4[4], v4[5], v4[6], v4[7]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v21[6] = v5;
  v20[7] = CFSTR("DepthFormat");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", *(unsigned int *)(a1 + 124));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v21[7] = v6;
  v20[8] = CFSTR("StencilFormat");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", *(unsigned int *)(a1 + 128));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v21[8] = v7;
  v20[9] = CFSTR("TechniqueStateOverrideFlags");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", *(unsigned int *)(a1 + 132));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v21[9] = v8;
  v20[10] = CFSTR("VertexDescriptor");
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", *(_QWORD *)(a1 + 104));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v21[10] = v9;
  v20[11] = CFSTR("CompiledInAssetRegistration");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", *(unsigned __int8 *)(a1 + 136));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v21[11] = v10;
  v20[12] = CFSTR("CompilationHash");
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%zu"), *(_QWORD *)(a1 + 112));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v21[12] = v11;
  v20[13] = CFSTR("IsFallback");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", *(unsigned __int8 *)(a1 + 137));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v21[13] = v12;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v21, v20, 14);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

re::DynamicString *__copy_helper_block_a8_56c24_ZTSN2re13DynamicStringE(uint64_t a1, uint64_t a2)
{
  return re::DynamicString::DynamicString((re::DynamicString *)(a1 + 56), (const re::DynamicString *)(a2 + 56));
}

double __destroy_helper_block_a8_56c24_ZTSN2re13DynamicStringE(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  double result;

  v3 = (_OWORD *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 64) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 72));
    result = 0.0;
    *v3 = 0u;
    v3[1] = 0u;
  }
  return result;
}

uint64_t re::REAnalyticsEventShaderCompilationDuration(re *this, const char *a2, const char *a3)
{
  return AnalyticsSendEventLazy();
}

id ___ZN2re41REAnalyticsEventShaderCompilationDurationEPKcS1_ib_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  v8[0] = CFSTR("MaterialName");
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", *(_QWORD *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = v2;
  v8[1] = CFSTR("TechniqueName");
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v9[1] = v3;
  v8[2] = CFSTR("Duration");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", *(unsigned int *)(a1 + 48));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v9[2] = v4;
  v8[3] = CFSTR("IsFallback");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", *(unsigned __int8 *)(a1 + 52));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[3] = v5;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v9, v8, 4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

uint64_t re::REAnalyticsEventRenderGraphCacheState(re *this)
{
  return AnalyticsSendEventLazy();
}

id ___ZN2re37REAnalyticsEventRenderGraphCacheStateEjjjj_block_invoke(unsigned int *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  v8[0] = CFSTR("GraphEmitCount");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a1[8]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = v2;
  v8[1] = CFSTR("CacheHitCount");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a1[9]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v9[1] = v3;
  v8[2] = CFSTR("CacheMissCount");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a1[10]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v9[2] = v4;
  v8[3] = CFSTR("BuildErrorCount");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a1[11]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[3] = v5;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v9, v8, 4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

uint64_t re::REAnalyticsEventShaderPermutationsForCustomClear(re *this, const char *a2)
{
  return AnalyticsSendEventLazy();
}

id ___ZN2re48REAnalyticsEventShaderPermutationsForCustomClearEPKc_block_invoke(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x24BDAC8D0];
  v4 = CFSTR("ShaderPermutation");
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", *(_QWORD *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = v1;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v5, &v4, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t re::REAnalyticsEventShaderPermutationsForPerformSkinning(re *this, const char *a2)
{
  return AnalyticsSendEventLazy();
}

id ___ZN2re52REAnalyticsEventShaderPermutationsForPerformSkinningEPKc_block_invoke(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x24BDAC8D0];
  v4 = CFSTR("ShaderPermutation");
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", *(_QWORD *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = v1;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v5, &v4, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t re::RenderGraphContext::RenderGraphContext(uint64_t a1, uint64_t a2, re::RenderManager *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  __int128 v15;
  _QWORD *v16;
  uint64_t *v17;
  re *v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  char v22;
  signed int v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t i;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  _anonymous_namespace_ *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  re::RenderManager *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t *v54;
  _DWORD *v55;
  _DWORD *v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t result;
  uint64_t v62;
  re::RenderManager *v63;
  re::RenderManager *v64;
  uint64_t *v65;
  uint64_t v67;
  _QWORD v68[2];
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  _QWORD v73[2];
  char v74;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a7;
  *(_BYTE *)(a1 + 52) = a11;
  *(_QWORD *)&v15 = 0x7F0000007FLL;
  *((_QWORD *)&v15 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(a1 + 64) = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v65 = (uint64_t *)(a1 + 112);
  *(_DWORD *)(a1 + 120) = 0;
  v16 = (_QWORD *)(a1 + 1024);
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_DWORD *)(a1 + 1056) = 0;
  *(_QWORD *)(a1 + 1060) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_DWORD *)(a1 + 1104) = 0;
  *(_QWORD *)(a1 + 1108) = 0x7FFFFFFFLL;
  *(_BYTE *)(a1 + 1120) = 0;
  *(_QWORD *)(a1 + 1160) = 0;
  *(_QWORD *)(a1 + 1144) = 0;
  *(_DWORD *)(a1 + 1152) = 0;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_QWORD *)(a1 + 1168) = a6;
  *(_QWORD *)(a1 + 1176) = a8;
  *(_DWORD *)(a1 + 1184) = 4;
  *(_QWORD *)(a1 + 1192) = 0;
  v17 = re::globalAllocators((re *)a1);
  v18 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17[2] + 32))(v17[2], 16, 8);
  *(_QWORD *)v18 = 0;
  v19 = re::globalAllocators(v18);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19[2] + 32))(v19[2], 264, 8);
  *(_OWORD *)v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  *(_OWORD *)(v20 + 32) = 0u;
  *(_OWORD *)(v20 + 48) = 0u;
  *(_OWORD *)(v20 + 64) = 0u;
  *(_OWORD *)(v20 + 80) = 0u;
  *(_OWORD *)(v20 + 96) = 0u;
  *(_OWORD *)(v20 + 112) = 0u;
  *(_OWORD *)(v20 + 128) = 0u;
  *(_OWORD *)(v20 + 144) = 0u;
  *(_OWORD *)(v20 + 160) = 0u;
  *(_OWORD *)(v20 + 176) = 0u;
  *(_OWORD *)(v20 + 192) = 0u;
  *(_OWORD *)(v20 + 208) = 0u;
  *(_OWORD *)(v20 + 224) = 0u;
  *(_OWORD *)(v20 + 240) = 0u;
  *(_QWORD *)(v20 + 256) = 0;
  *((_QWORD *)v18 + 1) = v20;
  *(_QWORD *)(a1 + 1200) = v18;
  *(_DWORD *)(a1 + 1232) = 0;
  *(_QWORD *)(a1 + 1224) = 0;
  *(_QWORD *)(a1 + 1216) = 0;
  *(_QWORD *)(a1 + 1208) = 0;
  *(_DWORD *)(a1 + 1312) = 0;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_QWORD *)(a1 + 1301) = 0;
  *(_QWORD *)(a1 + 1316) = 134217472;
  *(_QWORD *)(a1 + 1324) = 134217472;
  *(_BYTE *)(a1 + 1332) = 0;
  v62 = a2;
  v63 = a3;
  if (*((_BYTE *)a3 + 307))
    v21 = *(_BYTE *)a3 == 0;
  else
    v21 = 1;
  v22 = !v21;
  re::DrawCallRecorder::DrawCallRecorder(a1 + 1336, (_QWORD *)(a2 + 32), v22, *(_QWORD *)(a2 + 24));
  *(_QWORD *)(a1 + 1496) = a9;
  *(_QWORD *)(a1 + 1504) = a10;
  *(_QWORD *)(a1 + 1552) = 0;
  *(_DWORD *)(a1 + 1544) = 0;
  *(_QWORD *)(a1 + 1536) = 0;
  *(_QWORD *)(a1 + 1528) = 0;
  *(_QWORD *)(a1 + 1520) = 0;
  *(_BYTE *)(a1 + 1560) = 0;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_DWORD *)(a1 + 1600) = 0;
  *(_QWORD *)(a1 + 1604) = 0x7FFFFFFFLL;
  if (*(_QWORD *)a12)
  {
    if (*(_DWORD *)(a12 + 28) <= 3u)
      v23 = 3;
    else
      v23 = *(_DWORD *)(a12 + 28);
    re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init(a1 + 1568, *(_QWORD *)a12, v23);
    re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear(a1 + 1568);
    v24 = *(_DWORD *)(a12 + 28);
    if (*(_DWORD *)(a1 + 1592) < v24)
      re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1 + 1568, v24);
    v25 = *(unsigned int *)(a12 + 32);
    if ((_DWORD)v25)
    {
      v26 = 0;
      for (i = 0; i < v25; ++i)
      {
        v28 = *(_QWORD *)(a12 + 16);
        if ((*(_DWORD *)(v28 + v26) & 0x80000000) != 0)
        {
          v29 = v28 + v26;
          v30 = *(_QWORD *)(v28 + v26 + 8);
          v31 = *(unsigned int *)(a1 + 1592);
          v32 = v30 % v31;
          v33 = *(unsigned int *)(a1 + 1604);
          if ((_DWORD)v33 == 0x7FFFFFFF)
          {
            v33 = *(unsigned int *)(a1 + 1600);
            v34 = v33;
            if ((_DWORD)v33 == (_DWORD)v31)
            {
              re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1 + 1568, 2 * *(_DWORD *)(a1 + 1596));
              v32 = v30 % *(unsigned int *)(a1 + 1592);
              v34 = *(_DWORD *)(a1 + 1600);
              v30 = *(_QWORD *)(v29 + 8);
            }
            *(_DWORD *)(a1 + 1600) = v34 + 1;
            v35 = *(_QWORD *)(a1 + 1584);
            v36 = *(_DWORD *)(v35 + 24 * v33);
          }
          else
          {
            v35 = *(_QWORD *)(a1 + 1584);
            v36 = *(_DWORD *)(v35 + 24 * v33);
            *(_DWORD *)(a1 + 1604) = v36 & 0x7FFFFFFF;
          }
          v37 = 24 * v33;
          *(_DWORD *)(v35 + v37) = v36 | 0x80000000;
          v38 = *(_QWORD *)(a1 + 1576);
          *(_DWORD *)(*(_QWORD *)(a1 + 1584) + v37) = *(_DWORD *)(*(_QWORD *)(a1 + 1584) + 24 * v33) & 0x80000000 | *(_DWORD *)(v38 + 4 * v32);
          *(_QWORD *)(*(_QWORD *)(a1 + 1584) + 24 * v33 + 8) = v30;
          v39 = *(_QWORD *)(v29 + 16);
          *(_QWORD *)(*(_QWORD *)(a1 + 1584) + 24 * v33 + 16) = v39;
          if (v39)
          {
            v40 = (id)(v39 + 8);
            v38 = *(_QWORD *)(a1 + 1576);
          }
          *(_DWORD *)(v38 + 4 * v32) = v33;
          ++*(_DWORD *)(a1 + 1596);
          v25 = *(unsigned int *)(a12 + 32);
        }
        v26 += 24;
      }
    }
  }
  v41 = *(_QWORD *)(v62 + 440);
  *(_DWORD *)(a1 + 1648) = 0;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_QWORD *)(a1 + 1652) = 0x7FFFFFFFLL;
  re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(a1 + 1616, v41, 3);
  v42 = *(_QWORD *)(v62 + 440);
  *(_QWORD *)(a1 + 1672) = 0;
  *(_DWORD *)(a1 + 1680) = 1;
  *(_QWORD *)(a1 + 1696) = 0;
  *(_QWORD *)(a1 + 1688) = 0;
  *(_QWORD *)(a1 + 1664) = v42;
  re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::setCapacity((uint64_t *)(a1 + 1664), 0);
  *(_DWORD *)(a1 + 1680) += 2;
  v43 = (_anonymous_namespace_ *)re::DrawCallRecorder::drawCallRecordingEnabled((re::DrawCallRecorder *)(a1 + 1336), v63);
  *(_BYTE *)(a1 + 1332) = (_BYTE)v43;
  v44 = v65;
  v45 = *(_QWORD *)(a8 + 136);
  v46 = *(_QWORD *)(v45 + 352);
  if (!v46)
    return a1;
  v47 = *(re::RenderManager **)(v45 + 368);
  v64 = (re::RenderManager *)((char *)v47 + 192 * v46);
  v67 = a1 + 128;
  while (1)
  {
    v48 = *((_QWORD *)v47 + 7);
    if (v48)
      break;
LABEL_53:
    v47 = (re::RenderManager *)((char *)v47 + 192);
    if (v47 == v64)
      return a1;
  }
  v49 = *((_QWORD *)v47 + 9);
  v50 = v49 + (v48 << 6);
  while (*(_DWORD *)(v49 + 4) != 12)
  {
LABEL_52:
    v49 += 64;
    if (v49 == v50)
      goto LABEL_53;
  }
  v68[0] = 0;
  v68[1] = 0;
  v69 = 1;
  v70 = 0;
  v71 = 0;
  if (*(_DWORD *)(a1 + 1052))
  {
LABEL_31:
    re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::add((uint64_t)v16, (_DWORD *)(v49 + 52), (uint64_t)v68);
LABEL_49:
    v43 = (_anonymous_namespace_ *)v68[0];
    if (v68[0])
    {
      if ((v69 & 1) == 0)
        v43 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v68[0] + 40))();
    }
    goto LABEL_52;
  }
  v51 = *v44;
  if (*v44)
  {
    v52 = 112 * v51;
    v53 = (_DWORD *)(a1 + 128);
    while (*v53 != *(_DWORD *)(v49 + 52))
    {
      v53 += 28;
      v52 -= 112;
      if (!v52)
      {
        if ((v51 & 0xFFFFFFF8) == 0)
          goto LABEL_44;
        if (*v16)
          goto LABEL_41;
        v54 = *(uint64_t **)(a1 + 96);
        if (!v54)
        {
        }
        re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::init((uint64_t)v16, (uint64_t)v54, 16);
        v51 = *v65;
        if (*v65)
        {
LABEL_41:
          v55 = (_DWORD *)(a1 + 128);
          v56 = (_DWORD *)(v67 + 112 * v51);
          do
          {
            re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::add((uint64_t)v16, v55, (uint64_t)(v55 + 4));
            v55 += 28;
          }
          while (v55 != v56);
        }
        v44 = v65;
        re::DynamicInlineArray<re::KeyValuePair<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>>,8ul>::clear(v65);
        goto LABEL_31;
      }
    }
    goto LABEL_49;
  }
LABEL_44:
  v72 = *(_DWORD *)(v49 + 52);
  re::DynamicOverflowArray<re::AABB,2ul>::DynamicOverflowArray((uint64_t)v73, (uint64_t)v68);
  if ((unint64_t)*v44 >= 8)
    goto LABEL_56;
  v58 = (_DWORD *)(v67 + 112 * *v44);
  *v58 = v72;
  re::DynamicOverflowArray<re::AABB,2ul>::DynamicOverflowArray((uint64_t)(v58 + 4), (uint64_t)v73);
  v60 = *(_QWORD *)(a1 + 112) + 1;
  *(_QWORD *)(a1 + 112) = v60;
  ++*(_DWORD *)(a1 + 120);
  if (v73[0] && (v74 & 1) == 0)
  {
    (*(void (**)(void))(*(_QWORD *)v73[0] + 40))();
    v60 = *v44;
  }
  if (v60)
    goto LABEL_49;
  re::internal::assertLog((re::internal *)6, v59, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, -1, 0);
  _os_crash();
  __break(1u);
LABEL_56:
  re::internal::assertLog((re::internal *)4, v57, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::RenderGraphContext::~RenderGraphContext(re::RenderGraphContext *this)
{
  void *v2;
  void *v3;
  double v4;
  uint64_t v5;

  re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::deinit((uint64_t)this + 1664);
  re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 202);
  re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 196);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)this + 1520);
  re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 179);
  re::HashTable<unsigned long long,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 173);
  re::DynamicArray<re::DrawCallRecorderGroup>::deinit((uint64_t)this + 1344);
  v2 = (void *)*((_QWORD *)this + 157);
  if (v2)
  {

    *((_QWORD *)this + 157) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 156);
  if (v3)
  {

    *((_QWORD *)this + 156) = 0;
  }
  re::DynamicArray<re::mtl::RenderCommandEncoder>::deinit((uint64_t)this + 1208);
  re::internal::destroyPersistent<re::mtl::RenderCommandEncoder>((re *)"~CommandEncoder", 544, *((re::mtl::RenderCommandEncoder **)this + 150));
  *((_QWORD *)this + 150) = 0;
  v5 = *((_QWORD *)this + 141);
  if (v5)
  {
    if (*((_QWORD *)this + 145))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *((_QWORD *)this + 145) = 0;
    *((_QWORD *)this + 142) = 0;
    *((_QWORD *)this + 143) = 0;
    *((_QWORD *)this + 141) = 0;
    ++*((_DWORD *)this + 288);
  }
  re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 134, v4);
  re::SmallHashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,8ul,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false>::~SmallHashTable((uint64_t)this + 96);
}

void re::RenderGraphContext::selectViewport(unint64_t a1, uint64_t a2, uint64_t a3, _anonymous_namespace_ *a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  float32x4_t *v7;
  unint64_t v8;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *i;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64x2_t v32;
  uint64x2_t v33;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  float64x2_t v41;
  float32x4_t *v42;
  __int32 *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  float64x2_t v48;
  float32x4_t v49;
  float32x4_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64x2_t v53;
  uint64x2_t v54;
  uint64x2_t v55;
  uint64x2_t v56;
  _QWORD v57[2];
  uint64_t v58;
  int v59;
  const char *v60;
  __int16 v61;
  int v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  uint64x2_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (*(_QWORD *)(a3 + 8))
    {
      v11 = *(_QWORD *)(a3 + 16);
      v12 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(a2 + 24);
      *(_OWORD *)v11 = v12;
      if (*((_QWORD *)a4 + 1))
      {
        *(_OWORD *)*((_QWORD *)a4 + 2) = xmmword_22610BC10;
        return;
      }
LABEL_58:
      v57[0] = 0;
      v71 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = 0;
      v65 = 2048;
      v66 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_59;
    }
LABEL_57:
    v57[0] = 0;
    v71 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v59 = 136315906;
    v60 = "operator[]";
    v61 = 1024;
    v62 = 468;
    v63 = 2048;
    v64 = 0;
    v65 = 2048;
    v66 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_58;
  }
  v5 = a1;
  v13 = *(_QWORD **)(*(_QWORD *)(a1 + 1176) + 136);
  v8 = *(unsigned int *)(v5 + 48);
  v7 = (float32x4_t *)v13[44];
  if ((unint64_t)v7 <= v8)
    goto LABEL_61;
  v14 = v13[46];
  v15 = v14 + 192 * v8;
  v16 = *(_QWORD *)(v15 + 56);
  if (!v16)
    return;
  v6 = a5;
  v17 = *(_QWORD *)(v15 + 72);
  v18 = v13[37];
  v19 = v16 << 6;
  v7 = *(float32x4_t **)(v18 + 16);
  for (i = (unsigned int *)(v17 + 52); ; i += 16)
  {
    v21 = *i;
    if ((unint64_t)v7 <= v21)
    {
      v57[0] = 0;
      v71 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 789;
      v63 = 2048;
      v64 = v21;
      v65 = 2048;
      v66 = (uint64_t)v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_57;
    }
    v22 = *(_QWORD *)(v18 + 32);
    if (*(_DWORD *)(v22 + 48 * v21) != 1)
    {
      v23 = *(i - 12);
      v24 = v23 > 8;
      v25 = (1 << v23) & 0x1CE;
      if (!v24 && v25 != 0)
        break;
    }
    v19 -= 64;
    if (!v19)
      return;
  }
  v27 = v22 + 48 * v21;
  v67.i64[0] = *(_QWORD *)(v27 + 8) >> 1;
  v67.i64[1] = *(_QWORD *)(v27 + 24);
  re::RenderGraphResourceDescriptions::targetDescriptionSource((uint64_t)v13, (uint64_t)&v67, (uint64_t)v57);
  v28 = re::RenderGraphExecutable::targetDescription(*(_QWORD *)(v5 + 1176), (uint64_t)v57);
  v7 = (float32x4_t *)re::RenderGraphDataStore::tryGet<re::ViewportPercentData>(*(_QWORD *)(v5 + 1168), *(_QWORD *)(*(_QWORD *)(v5 + 40) + 48));
  v29 = re::RenderGraphDataStore::tryGet<re::VRRData>(*(_QWORD *)(v5 + 1168), *(_QWORD *)(*(_QWORD *)(v5 + 40) + 48));
  v31 = *(_QWORD *)(v28 + 12);
  v32.i64[0] = v31;
  v32.i64[1] = HIDWORD(v31);
  v33 = v32;
  if (v29)
  {
    if (*(_BYTE *)(v29 + 12) && *(_BYTE *)(v14 + 192 * v8 + 171) != 0)
    {
      v53 = v33;
      v35 = *(_QWORD *)(v5 + 1176);
      v36 = *(unsigned int *)(v29 + 8);
      v37 = *(_QWORD *)(v35 + 104);
      if (v37 > v36)
      {
        v38 = *(id *)(*(_QWORD *)(v35 + 96) + 8 * v36);
        v33 = v53;
        if (v38)
        {
          v39 = v38;
          v67 = 0uLL;
          *(_QWORD *)&v68 = 0;
          objc_msgSend(v38, sel_screenSize);
          v54 = v67;

          v33 = v54;
        }
        goto LABEL_26;
      }
LABEL_66:
      re::internal::assertLog((re::internal *)6, v30, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v36, v37);
      _os_crash();
      __break(1u);
LABEL_67:
      re::internal::assertLog((re::internal *)6, v30, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
      _os_crash();
      __break(1u);
      goto LABEL_68;
    }
  }
LABEL_26:
  if (*(_QWORD *)(a3 + 8) >= 2uLL && (v6 & 1) == 0)
  {
    if (v7)
    {
      v40 = v7[1].i64[0];
      v67.i64[0] = (uint64_t)&v7[2];
      v67.i64[1] = v40;
      v55 = v33;
      re::FixedArray<re::Vector4<float>>::operator=(a4, (uint64_t)&v67);
      v33 = v55;
      goto LABEL_47;
    }
    if (*((_QWORD *)a4 + 1))
    {
      *(_OWORD *)*((_QWORD *)a4 + 2) = xmmword_22610BC10;
      v5 = *((_QWORD *)a4 + 1);
      if (v5 > 1)
      {
        *(_OWORD *)(*((_QWORD *)a4 + 2) + 16) = xmmword_22610BC10;
LABEL_47:
        v46 = *((_QWORD *)a4 + 1);
        if (v46)
        {
          v47 = *(_QWORD *)(a3 + 8);
          if (v47)
          {
            v48 = vcvtq_f64_u64(v33);
            v49 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v48), v48);
            v50 = (float32x4_t *)*((_QWORD *)a4 + 2);
            v51 = *(_QWORD *)(a3 + 16);
            *(float32x4_t *)v51 = vrndaq_f32(vmulq_f32(*v50, v49));
            *(_QWORD *)(v51 + 16) = 0x3F80000000000000;
            if (v46 > 1)
            {
              if (v47 > 1)
              {
                *(float32x4_t *)(v51 + 24) = vrndaq_f32(vmulq_f32(v50[1], v49));
                *(_DWORD *)(v51 + 40) = 0;
                v43 = (__int32 *)(v51 + 44);
                goto LABEL_55;
              }
LABEL_65:
              v58 = 0;
              v71 = 0u;
              v69 = 0u;
              v70 = 0u;
              v67 = 0u;
              v68 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v59 = 136315906;
              v60 = "operator[]";
              v61 = 1024;
              v62 = 468;
              v63 = 2048;
              v64 = 1;
              v65 = 2048;
              v66 = 1;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_66;
            }
LABEL_64:
            v58 = 0;
            v71 = 0u;
            v69 = 0u;
            v70 = 0u;
            v67 = 0u;
            v68 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v59 = 136315906;
            v60 = "operator[]";
            v61 = 1024;
            v62 = 468;
            v63 = 2048;
            v64 = 1;
            v65 = 2048;
            v66 = 1;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_65;
          }
LABEL_63:
          v58 = 0;
          v71 = 0u;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v59 = 136315906;
          v60 = "operator[]";
          v61 = 1024;
          v62 = 468;
          v63 = 2048;
          v64 = 0;
          v65 = 2048;
          v66 = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_64;
        }
LABEL_62:
        v58 = 0;
        v71 = 0u;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v59 = 136315906;
        v60 = "operator[]";
        v61 = 1024;
        v62 = 468;
        v63 = 2048;
        v64 = 0;
        v65 = 2048;
        v66 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_63;
      }
LABEL_72:
      v58 = 0;
      v71 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = 1;
      v65 = 2048;
      v66 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_73:
      v58 = 0;
      v71 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = 0;
      v65 = 2048;
      v66 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_74;
    }
LABEL_71:
    v58 = 0;
    v71 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v59 = 136315906;
    v60 = "operator[]";
    v61 = 1024;
    v62 = 468;
    v63 = 2048;
    v64 = 0;
    v65 = 2048;
    v66 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_72;
  }
  if (v7 && (v6 & 1) == 0)
  {
    if (!v7[1].i64[0])
      goto LABEL_67;
    if (*((_QWORD *)a4 + 1))
    {
      *(float32x4_t *)*((_QWORD *)a4 + 2) = v7[2];
      if (v7[1].i64[0])
      {
        if (*(_QWORD *)(a3 + 8))
        {
          v41 = vcvtq_f64_u64(v33);
          v42 = *(float32x4_t **)(a3 + 16);
          *v42 = vrndaq_f32(vmulq_f32(v7[2], vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v41), v41)));
          v42[1].i32[0] = 0;
          v43 = &v42[1].i32[1];
          goto LABEL_55;
        }
        goto LABEL_70;
      }
    }
    else
    {
LABEL_68:
      v58 = 0;
      v71 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = 0;
      v65 = 2048;
      v66 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::internal::assertLog((re::internal *)6, v30, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
    _os_crash();
    __break(1u);
LABEL_70:
    v58 = 0;
    v71 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v59 = 136315906;
    v60 = "operator[]";
    v61 = 1024;
    v62 = 468;
    v63 = 2048;
    v64 = 0;
    v65 = 2048;
    v66 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_71;
  }
  v56 = v33;
  if (re::RenderManager::isProtoStereoRenderingEnabled(*(re::RenderManager **)(v5 + 8)))
  {
    if (*(_QWORD *)(a3 + 8))
    {
      v44 = 0;
      v5 = 0;
      while (1)
      {
        v6 = *((_QWORD *)a4 + 1);
        if (v6 <= v5)
          break;
        *(_OWORD *)(*((_QWORD *)a4 + 2) + 16 * v5) = xmmword_22610BC10;
        v6 = *(_QWORD *)(a3 + 8);
        if (v6 <= v5)
          goto LABEL_60;
        v45 = *(_QWORD *)(a3 + 16) + v44;
        *(_QWORD *)v45 = 0;
        *(float *)(v45 + 8) = (float)v56.u64[0];
        *(float *)(v45 + 12) = (float)v56.u64[1];
        *(_QWORD *)(v45 + 16) = 0x3F80000000000000;
        ++v5;
        v44 += 24;
        if (v6 <= v5)
          return;
      }
LABEL_59:
      v58 = 0;
      v71 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v5;
      v65 = 2048;
      v66 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_60:
      v58 = 0;
      v71 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v5;
      v65 = 2048;
      v66 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_61:
      v57[0] = 0;
      v71 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 789;
      v63 = 2048;
      v64 = v8;
      v65 = 2048;
      v66 = (uint64_t)v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_62;
    }
  }
  else
  {
    if (!*((_QWORD *)a4 + 1))
      goto LABEL_73;
    *(_OWORD *)*((_QWORD *)a4 + 2) = xmmword_22610BC10;
    if (!*(_QWORD *)(a3 + 8))
    {
LABEL_74:
      v58 = 0;
      v71 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = 0;
      v65 = 2048;
      v66 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v52 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)v52 = 0;
    *(float *)(v52 + 8) = (float)v56.u64[0];
    *(float *)(v52 + 12) = (float)v56.u64[1];
    *(_DWORD *)(v52 + 16) = 0;
    v43 = (__int32 *)(v52 + 20);
LABEL_55:
    *v43 = 1065353216;
  }
}

uint64_t re::RenderGraphContext::getRateMap(re::RenderGraphContext *this, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;

  v2 = *((_QWORD *)this + 147);
  v3 = *(_QWORD *)(v2 + 104);
  if (v3 > a2)
    return *(_QWORD *)(v2 + 96) + 8 * a2;
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, a2, v3);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs@<X0>(re::RenderGraphContext *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t PipelineCompilationData;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  PipelineCompilationData = re::RenderGraphContext::tryGetPipelineCompilationData(this, *(_QWORD *)(*((_QWORD *)this + 5) + 48));
  v5 = re::RenderGraphDataStore::tryGet<re::SceneScope>(*((_QWORD *)this + 146), *(_QWORD *)(*((_QWORD *)this + 5) + 48));
  v6 = re::RenderGraphDataStore::tryGet<re::SceneIndexData>(*((_QWORD *)this + 146), *(_QWORD *)(*((_QWORD *)this + 5) + 48));
  v7 = re::RenderGraphDataStore::tryGet<re::StencilInfoData>(*((_QWORD *)this + 146), *(_QWORD *)(*((_QWORD *)this + 5) + 48));
  v8 = re::RenderGraphDataStore::tryGet<re::ViewportData>(*((_QWORD *)this + 146), *(_QWORD *)(*((_QWORD *)this + 5) + 48));
  v9 = re::RenderGraphDataStore::tryGet<re::ViewportPercentData>(*((_QWORD *)this + 146), *(_QWORD *)(*((_QWORD *)this + 5) + 48));
  v10 = re::RenderGraphDataStore::tryGet<re::TintContextData>(*((_QWORD *)this + 146), *(_QWORD *)(*((_QWORD *)this + 5) + 48));
  v11 = re::RenderGraphDataStore::tryGet<re::VRRData>(*((_QWORD *)this + 146), *(_QWORD *)(*((_QWORD *)this + 5) + 48));
  result = re::RenderGraphDataStore::tryGet<re::TriangleFillModeData>(*((_QWORD *)this + 146), *(_QWORD *)(*((_QWORD *)this + 5) + 48));
  *a2 = PipelineCompilationData;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  a2[4] = v8;
  a2[5] = v9;
  a2[6] = v10;
  a2[7] = v11;
  a2[8] = result;
  return result;
}

uint64_t re::RenderGraphContext::tryGetPipelineCompilationData(re::RenderGraphContext *this, uint64_t a2)
{
  uint64_t result;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  const char *v7;

  result = re::RenderGraphDataStore::tryGet<re::PipelineCompilationData>(*((_QWORD *)this + 146), a2);
  if (!result)
  {
    v5 = &unk_255829000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_255829000;
      if (v6)
      {
        re::RenderGraphContext::tryGetPipelineCompilationData(unsigned long long)const::kPipelineCompilationDataScopeHash = re::hashString((re *)"PipelineCompilationData", v7);
        v5 = (_QWORD *)&unk_255829000;
      }
    }
    return re::RenderGraphDataStore::tryGet<re::PipelineCompilationData>(*((_QWORD *)this + 146), v5[256]);
  }
  return result;
}

#error "225A03324: call analysis failed (funcsize=913)"

uint64_t re::RenderGraphContext::rtResolution(re::RenderGraphContext *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[18];
  __int16 v20;
  unint64_t v21;
  __int16 v22;
  unsigned int *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*((_QWORD *)this + 147) + 136);
  LODWORD(v3) = 0x7FFFFFFF;
  if (*(_QWORD *)(v2 + 656))
  {
    v4 = *((_QWORD *)this + 5);
    v5 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v4 ^ (v4 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v4 ^ (v4 >> 30))) >> 27));
    v6 = *(unsigned int *)(*(_QWORD *)(v2 + 664) + 4 * ((v5 ^ (v5 >> 31)) % *(unsigned int *)(v2 + 680)));
    if ((_DWORD)v6 != 0x7FFFFFFF)
    {
      v7 = *(_QWORD *)(v2 + 672);
      if (*(_QWORD *)(v7 + 32 * v6 + 16) == v4)
      {
        LODWORD(v3) = v6;
      }
      else
      {
        v3 = v6;
        while (1)
        {
          v3 = *(_DWORD *)(v7 + 32 * v3 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v3 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v7 + 32 * v3 + 16) == v4)
            goto LABEL_10;
        }
        LODWORD(v3) = 0x7FFFFFFF;
      }
    }
  }
LABEL_10:
  v8 = *(unsigned int *)(*(_QWORD *)(v2 + 672) + 32 * v3 + 24);
  i = *(unsigned int **)(v2 + 352);
  if ((unint64_t)i <= v8)
  {
LABEL_20:
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v24 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v19 = 136315906;
    *(_QWORD *)&v19[4] = "operator[]";
    *(_WORD *)&v19[12] = 1024;
    *(_DWORD *)&v19[14] = 789;
    v20 = 2048;
    v21 = v8;
    v22 = 2048;
    v23 = i;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v10 = *(_QWORD *)(v2 + 368) + 192 * v8;
  v11 = *(_QWORD *)(v10 + 56);
  if (!v11)
    return 0x100000001;
  v8 = v11 << 6;
  for (i = (unsigned int *)(*(_QWORD *)(v10 + 72) + 52); ; i += 16)
  {
    v12 = *(_QWORD *)(*((_QWORD *)this + 147) + 136);
    v13 = *(_QWORD *)(v12 + 296);
    v14 = *i;
    v15 = *(unsigned int **)(v13 + 16);
    if ((unint64_t)v15 <= v14)
    {
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v24 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v19 = 136315906;
      *(_QWORD *)&v19[4] = "operator[]";
      *(_WORD *)&v19[12] = 1024;
      *(_DWORD *)&v19[14] = 789;
      v20 = 2048;
      v21 = v14;
      v22 = 2048;
      v23 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_20;
    }
    v16 = *(_QWORD *)(v13 + 32);
    if (!*(_DWORD *)(v16 + 48 * v14))
    {
      v17 = v16 + 48 * v14;
      *(_QWORD *)v19 = *(_QWORD *)(v17 + 8) >> 1;
      *(_QWORD *)&v19[8] = *(_QWORD *)(v17 + 24);
      re::RenderGraphResourceDescriptions::targetDescriptionSource(v12, (uint64_t)v19, (uint64_t)&v24);
      if (*(i - 12) - 1 <= 2)
        break;
    }
    v8 -= 64;
    if (!v8)
      return 0x100000001;
  }
  return *(_QWORD *)(re::RenderGraphExecutable::targetDescription(*((_QWORD *)this + 147), (uint64_t)&v24) + 12);
}

uint64_t re::MeshStats::setCurrentCategory(uint64_t result, int a2)
{
  uint64_t v2;

  if (*(unsigned __int8 *)(result + 120) != a2)
  {
    *(_BYTE *)(result + 120) = a2;
    switch(a2)
    {
      case 1:
        *(_QWORD *)(result + 96) = result + 32;
        *(_QWORD *)(result + 104) = result + 36;
        v2 = result + 40;
        goto LABEL_9;
      case 2:
        *(_QWORD *)(result + 96) = result + 44;
        *(_QWORD *)(result + 104) = result + 48;
        v2 = result + 52;
        goto LABEL_9;
      case 3:
        *(_QWORD *)(result + 96) = result + 56;
        *(_QWORD *)(result + 104) = result + 60;
        v2 = result + 64;
        goto LABEL_9;
      case 4:
        *(_QWORD *)(result + 96) = result + 68;
        *(_QWORD *)(result + 104) = result + 72;
        v2 = result + 76;
        goto LABEL_9;
      case 5:
        *(_QWORD *)(result + 96) = result + 80;
        *(_QWORD *)(result + 104) = result + 84;
        v2 = result + 88;
LABEL_9:
        *(_QWORD *)(result + 112) = v2;
        break;
      default:
        *(_QWORD *)(result + 96) = 0;
        *(_QWORD *)(result + 104) = 0;
        *(_BYTE *)(result + 120) = 0;
        *(_QWORD *)(result + 112) = 0;
        break;
    }
  }
  return result;
}

#error "225A0406C: call analysis failed (funcsize=578)"

void re::RenderGraphContext::acquireManagedBlitEncoder(uint64_t a1@<X0>, uint64_t a2@<X1>, re::RenderGraphNodeBase *a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  id v9;
  int v10;
  int v12;
  _anonymous_namespace_ *v13;
  uint64_t QueuedCommandBuffer;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char **v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  char **v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  id v41;
  uint64_t v42;
  _BYTE v43[18];
  __int16 v44;
  char **v45;
  __int16 v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v9 = *(id *)(a2 + 16);
  v41 = v9;
  v10 = *(_DWORD *)(a1 + 1184);
  if (v10 == 1)
  {
    v12 = 0;
LABEL_11:
    re::RenderGraphContext::releaseManagedEncoder((re::RenderGraphContext *)a1, v12);
    goto LABEL_12;
  }
  if (v10 != 2 && v10 != 4)
  {
    re::RenderGraphExecutable::addError(*(_QWORD *)(a1 + 1176), (uint64_t)&v48);
    if ((_QWORD)v48 && (BYTE8(v48) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v48 + 40))();
    v12 = 1;
    goto LABEL_11;
  }
LABEL_12:
  v13 = (_anonymous_namespace_ *)re::RenderGraphContext::setupUsesCustomEncoders((re::RenderGraphContext *)a1);
  if ((_DWORD)v13)
  {
    re::RenderGraphExecutable::addError(*(_QWORD *)(a1 + 1176), (uint64_t)&v48);
    if ((_QWORD)v48)
    {
      if ((BYTE8(v48) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v48 + 40))();
    }
  }
  if (*(_DWORD *)(a1 + 1184) == 4)
  {
    if (re::RenderManager::splitCommandBuffersForDebugging(*(re::RenderManager **)(a1 + 8)))
    {
      QueuedCommandBuffer = re::DrawingManager::createQueuedCommandBuffer(*(re::DrawingManager **)(*(_QWORD *)(a1 + 8)
                                                                                                 + 104));
      re::ObjCObject::operator=(&v41, (id *)(QueuedCommandBuffer + 16));
      v15 = v41;
      objc_msgSend(v15, "setLabel:", *re::RenderGraphNodeBase::getEncoderLabel(a3));

      v16 = v41;
      objc_msgSend(v16, "addCompletedHandler:", &__block_literal_global_30);

    }
    *(_DWORD *)(a1 + 1184) = 2;
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 1176) + 136);
    LODWORD(v18) = 0x7FFFFFFF;
    if (*(_QWORD *)(v17 + 656))
    {
      v19 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((unint64_t)a3 ^ ((unint64_t)a3 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                              * ((unint64_t)a3 ^ ((unint64_t)a3 >> 30))) >> 27));
      v20 = *(unsigned int *)(*(_QWORD *)(v17 + 664) + 4 * ((v19 ^ (v19 >> 31)) % *(unsigned int *)(v17 + 680)));
      if ((_DWORD)v20 != 0x7FFFFFFF)
      {
        v21 = *(_QWORD *)(v17 + 672);
        if (*(re::RenderGraphNodeBase **)(v21 + 32 * v20 + 16) == a3)
        {
          LODWORD(v18) = v20;
        }
        else
        {
          v18 = v20;
          while (1)
          {
            v18 = *(_DWORD *)(v21 + 32 * v18 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v18 == 0x7FFFFFFF)
              break;
            if (*(re::RenderGraphNodeBase **)(v21 + 32 * v18 + 16) == a3)
              goto LABEL_28;
          }
          LODWORD(v18) = 0x7FFFFFFF;
        }
      }
    }
LABEL_28:
    v22 = (char **)*(unsigned int *)(*(_QWORD *)(v17 + 672) + 32 * v18 + 24);
    v23 = *(_QWORD *)(v17 + 352);
    if (v23 <= (unint64_t)v22)
      goto LABEL_51;
    v40 = a4;
    v24 = *(_QWORD *)(v17 + 368) + 192 * v22;
    v25 = *(_QWORD *)(v24 + 56);
    if (v25)
    {
      v23 = 0;
      v26 = v25 << 6;
      v27 = (unsigned int *)(*(_QWORD *)(v24 + 72) + 52);
      v22 = &selRef_newBufferWithBytes_length_options_;
      while (1)
      {
        if (*(v27 - 12) == 4)
        {
          v28 = *(_QWORD *)(*(_QWORD *)(a1 + 1176) + 136);
          v29 = *(_QWORD *)(v28 + 296);
          v30 = (char **)*v27;
          v31 = *(_QWORD *)(v29 + 16);
          if (v31 <= (unint64_t)v30)
          {
            v42 = 0;
            v51 = 0u;
            v52 = 0u;
            v49 = 0u;
            v50 = 0u;
            v48 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v43 = 136315906;
            *(_QWORD *)&v43[4] = "operator[]";
            *(_WORD *)&v43[12] = 1024;
            *(_DWORD *)&v43[14] = 789;
            v44 = 2048;
            v45 = v30;
            v46 = 2048;
            v47 = v31;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_51:
            v42 = 0;
            v51 = 0u;
            v52 = 0u;
            v49 = 0u;
            v50 = 0u;
            v48 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v43 = 136315906;
            *(_QWORD *)&v43[4] = "operator[]";
            *(_WORD *)&v43[12] = 1024;
            *(_DWORD *)&v43[14] = 789;
            v44 = 2048;
            v45 = v22;
            v46 = 2048;
            v47 = v23;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          v32 = *(_QWORD *)(v29 + 32);
          v33 = *(_DWORD *)(v32 + 48 * v30);
          if (v33 == 1)
          {
            v36 = v32 + 48 * v30;
            *(_QWORD *)v43 = *(_QWORD *)(v36 + 8) >> 1;
            *(_QWORD *)&v43[8] = *(_QWORD *)(v36 + 24);
            re::RenderGraphResourceDescriptions::bufferDescriptionSource(v28, (uint64_t)v43, (uint64_t)&v48);
            v23 |= (unint64_t)objc_msgSend(*(id *)re::RenderGraphContext::metalBuffer(a1, (uint64_t)&v48), sel_protectionOptions);
          }
          else if (!v33)
          {
            v34 = v32 + 48 * v30;
            *(_QWORD *)v43 = *(_QWORD *)(v34 + 8) >> 1;
            *(_QWORD *)&v43[8] = *(_QWORD *)(v34 + 24);
            re::RenderGraphResourceDescriptions::targetDescriptionSource(v28, (uint64_t)v43, (uint64_t)&v48);
            *(_DWORD *)(re::RenderGraphExecutable::targetDescription(*(_QWORD *)(a1 + 1176), (uint64_t)&v48) + 60) = 1;
            re::RenderGraphContext::metalTexture(a1, (uint64_t)&v48, 0, 0, (id *)v43);
            v35 = (unint64_t)objc_msgSend(*(id *)v43, sel_protectionOptions);
            if (*(_QWORD *)v43)

            v23 |= v35;
          }
        }
        v27 += 16;
        v26 -= 64;
        if (!v26)
          goto LABEL_42;
      }
    }
    v23 = 0;
LABEL_42:
    if (objc_msgSend(v41, "protectionOptions") != v23)
      objc_msgSend(v41, "setProtectionOptions:", v23);
    re::mtl::CommandBuffer::makeBlitCommandEncoder(&v41, &v48);
    v37 = *(__int128 **)(a1 + 1200);
    a4 = v40;
    if (v37 != &v48)
    {
      v38 = v48;
      *(_QWORD *)&v48 = 0;
      v39 = *(void **)v37;
      *(_QWORD *)v37 = v38;

    }
    objc_msgSend(**(id **)(a1 + 1200), "setLabel:", *re::RenderGraphNodeBase::getEncoderLabel(a3));
    *(_QWORD *)(a1 + 1192) = v23;
    re::RenderGraphResourceAllocationManager::onAcquireEncoder<re::mtl::BlitCommandEncoder>(*(_QWORD *)(a1 + 32), *(id **)(a1 + 1200));
  }
  if (a4)
    *a4 = *(_QWORD *)(a1 + 1192);
  *a5 = **(id **)(a1 + 1200);

}

void re::RenderGraphContext::acquireManagedComputeEncoder(uint64_t a1@<X0>, id *a2@<X1>, re::RenderGraphNodeBase *a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  id v9;
  id v10;
  int v11;
  _anonymous_namespace_ *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t QueuedCommandBuffer;
  id v38;
  id v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  _QWORD *v45;
  _QWORD *v46;
  id v47;
  __int128 v48;
  id v49;
  uint64_t v50;
  _BYTE v51[18];
  __int16 v52;
  unint64_t v53;
  __int16 v54;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v48 = *(_OWORD *)a2;
  v9 = a2[2];
  v10 = v9;
  v49 = v9;
  v11 = *(_DWORD *)(a1 + 1184);
  if (v11 != 1 && v11 != 4)
  {
    re::RenderGraphExecutable::addError(*(_QWORD *)(a1 + 1176), (uint64_t)&v56);
    if ((_QWORD)v56 && (BYTE8(v56) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v56 + 40))();
    re::RenderGraphContext::releaseManagedEncoder((re::RenderGraphContext *)a1, 1);
  }
  v13 = (_anonymous_namespace_ *)re::RenderGraphContext::setupUsesCustomEncoders((re::RenderGraphContext *)a1);
  if ((_DWORD)v13)
  {
    re::RenderGraphExecutable::addError(*(_QWORD *)(a1 + 1176), (uint64_t)&v56);
    if ((_QWORD)v56)
    {
      if ((BYTE8(v56) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v56 + 40))();
    }
  }
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 1176) + 136);
  LODWORD(v15) = 0x7FFFFFFF;
  if (*(_QWORD *)(v14 + 656))
  {
    v16 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * ((unint64_t)a3 ^ ((unint64_t)a3 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                            * ((unint64_t)a3 ^ ((unint64_t)a3 >> 30))) >> 27));
    v17 = *(unsigned int *)(*(_QWORD *)(v14 + 664) + 4 * ((v16 ^ (v16 >> 31)) % *(unsigned int *)(v14 + 680)));
    if ((_DWORD)v17 != 0x7FFFFFFF)
    {
      v18 = *(_QWORD *)(v14 + 672);
      if (*(re::RenderGraphNodeBase **)(v18 + 32 * v17 + 16) == a3)
      {
        LODWORD(v15) = v17;
      }
      else
      {
        v15 = v17;
        while (1)
        {
          v15 = *(_DWORD *)(v18 + 32 * v15 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v15 == 0x7FFFFFFF)
            break;
          if (*(re::RenderGraphNodeBase **)(v18 + 32 * v15 + 16) == a3)
            goto LABEL_22;
        }
        LODWORD(v15) = 0x7FFFFFFF;
      }
    }
  }
LABEL_22:
  v19 = &v56;
  v20 = *(unsigned int *)(*(_QWORD *)(v14 + 672) + 32 * v15 + 24);
  v21 = *(_QWORD *)(v14 + 352);
  if (v21 <= v20)
    goto LABEL_51;
  v44 = v10;
  v45 = a4;
  v46 = a5;
  v22 = *(_QWORD *)(v14 + 368) + 192 * v20;
  v23 = *(_QWORD *)(v22 + 56);
  if (v23)
  {
    v21 = 0;
    v24 = v23 << 6;
    v25 = (unsigned int *)(*(_QWORD *)(v22 + 72) + 52);
    v20 = 1;
    while (1)
    {
      if (*(v25 - 12) == 5)
      {
        v26 = *(_QWORD *)(*(_QWORD *)(a1 + 1176) + 136);
        v27 = *(_QWORD *)(v26 + 296);
        v28 = *v25;
        v29 = *(_QWORD *)(v27 + 16);
        if (v29 <= v28)
        {
          v50 = 0;
          v59 = 0u;
          v60 = 0u;
          v57 = 0u;
          v58 = 0u;
          v56 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v51 = 136315906;
          *(_QWORD *)&v51[4] = "operator[]";
          *(_WORD *)&v51[12] = 1024;
          *(_DWORD *)&v51[14] = 789;
          v52 = 2048;
          v53 = v28;
          v54 = 2048;
          v55 = v29;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_51:
          v50 = 0;
          v19[3] = 0u;
          v19[4] = 0u;
          v57 = 0u;
          v58 = 0u;
          v56 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v51 = 136315906;
          *(_QWORD *)&v51[4] = "operator[]";
          *(_WORD *)&v51[12] = 1024;
          *(_DWORD *)&v51[14] = 789;
          v52 = 2048;
          v53 = v20;
          v54 = 2048;
          v55 = v21;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v30 = *(_QWORD *)(v27 + 32);
        v31 = *(_DWORD *)(v30 + 48 * v28);
        if (v31 == 1)
        {
          v34 = v30 + 48 * v28;
          *(_QWORD *)v51 = *(_QWORD *)(v34 + 8) >> 1;
          *(_QWORD *)&v51[8] = *(_QWORD *)(v34 + 24);
          re::RenderGraphResourceDescriptions::bufferDescriptionSource(v26, (uint64_t)v51, (uint64_t)&v56);
          v21 |= (unint64_t)objc_msgSend(*(id *)re::RenderGraphContext::metalBuffer(a1, (uint64_t)&v56), sel_protectionOptions);
        }
        else if (!v31)
        {
          v32 = v30 + 48 * v28;
          *(_QWORD *)v51 = *(_QWORD *)(v32 + 8) >> 1;
          *(_QWORD *)&v51[8] = *(_QWORD *)(v32 + 24);
          re::RenderGraphResourceDescriptions::targetDescriptionSource(v26, (uint64_t)v51, (uint64_t)&v56);
          *(_DWORD *)(re::RenderGraphExecutable::targetDescription(*(_QWORD *)(a1 + 1176), (uint64_t)&v56) + 60) = 1;
          re::RenderGraphContext::metalTexture(a1, (uint64_t)&v56, 0, 0, (id *)v51);
          v33 = (unint64_t)objc_msgSend(*(id *)v51, sel_protectionOptions);
          if (*(_QWORD *)v51)

          v21 |= v33;
        }
      }
      v25 += 16;
      v24 -= 64;
      if (!v24)
        goto LABEL_36;
    }
  }
  v21 = 0;
LABEL_36:
  v35 = v44;
  if (objc_msgSend(v44, "protectionOptions") != v21)
  {
    if (*(_DWORD *)(a1 + 1184) != 4)
      re::RenderGraphContext::releaseManagedEncoder((re::RenderGraphContext *)a1, 0);
    objc_msgSend(v44, "setProtectionOptions:", v21);
  }
  if (*(_DWORD *)(a1 + 1184) != 4)
  {
    re::RenderGraphResourceAllocationManager::waitForFence<re::mtl::ComputeCommandEncoder>(*(_QWORD **)(a1 + 32), *(id **)(a1 + 1200));
    if (!v45)
      goto LABEL_49;
LABEL_48:
    *v45 = *(_QWORD *)(a1 + 1192);
    goto LABEL_49;
  }
  if (re::RenderManager::splitCommandBuffersForDebugging(*(re::RenderManager **)(a1 + 8)))
  {
    v36 = objc_msgSend(v44, "protectionOptions");
    QueuedCommandBuffer = re::DrawingManager::createQueuedCommandBuffer(*(re::DrawingManager **)(*(_QWORD *)(a1 + 8)
                                                                                               + 104));
    v48 = *(_OWORD *)QueuedCommandBuffer;
    re::ObjCObject::operator=(&v49, (id *)(QueuedCommandBuffer + 16));
    v38 = v49;
    objc_msgSend(v38, "setLabel:", *re::RenderGraphNodeBase::getEncoderLabel(a3));

    v39 = v49;
    objc_msgSend(v39, "addCompletedHandler:", &__block_literal_global_30);

    objc_msgSend(v49, "setProtectionOptions:", v36);
    v35 = v49;
  }
  *(_DWORD *)(a1 + 1184) = 1;
  v40 = *(_QWORD *)(a1 + 8);
  v47 = v35;
  re::RenderManager::makeComputeCommandEncoderWithMTLCounterSampling(v40, &v47, 1u, &v56);
  v41 = *(__int128 **)(a1 + 1200);
  if (v41 != &v56)
  {
    v42 = v56;
    *(_QWORD *)&v56 = 0;
    v43 = *(void **)v41;
    *(_QWORD *)v41 = v42;

  }
  objc_msgSend(**(id **)(a1 + 1200), "setLabel:", *re::RenderGraphNodeBase::getEncoderLabel(a3));
  *(_QWORD *)(a1 + 1192) = v21;
  re::RenderGraphResourceAllocationManager::onAcquireEncoder<re::mtl::ComputeCommandEncoder>(*(_QWORD *)(a1 + 32), *(id **)(a1 + 1200));
  if (v45)
    goto LABEL_48;
LABEL_49:
  *v46 = **(id **)(a1 + 1200);

}

void re::RenderGraphContext::metalTexture(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, id *a5@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  id v10;
  id v11;
  id v12[2];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 1176);
  v7 = *(unsigned int *)(a2 + 12);
  if (*(_QWORD *)(v6 + 56) <= v7)
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    *(_OWORD *)v12 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v10 = *(id *)(*(_QWORD *)(v6 + 64) + 8 * v7);
  *a5 = v10;
  if (a3)
  {
    if (objc_msgSend(v10, sel_pixelFormat) == (id)260)
    {
      v11 = objc_msgSend(*a5, sel_newTextureViewWithPixelFormat_, 261);
    }
    else
    {
      if (objc_msgSend(*a5, sel_pixelFormat) != (id)255)
        goto LABEL_9;
      v11 = objc_msgSend(*a5, sel_newTextureViewWithPixelFormat_, 262);
    }
    v12[0] = v11;
    NS::SharedPtr<MTL::Texture>::operator=(a5, v12);
    if (v12[0])

  }
LABEL_9:
  if (!a4)
    return;
  if (objc_msgSend(*a5, sel_textureType))
  {
    if (objc_msgSend(*a5, sel_textureType) == (id)2)
    {
      re::makeView2DTo2DArray(a5, v12);
    }
    else
    {
      if (objc_msgSend(*a5, sel_textureType) != (id)4)
        return;
      re::makeView2DMultisampleTo2DMultisampleArray(a5, v12);
    }
  }
  else
  {
    re::makeView1DTo1DArray(a5, v12);
  }
  NS::SharedPtr<MTL::Texture>::operator=(a5, v12);
  if (v12[0])

}

uint64_t re::RenderGraphContext::metalBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 1176);
  v3 = *(unsigned int *)(a2 + 12);
  if (*(_QWORD *)(v2 + 80) <= v3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(v2 + 88) + 16 * v3;
}

uint64_t re::RenderGraphContext::isSetupParallel(re::RenderGraphContext *this)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 147) + 136);
  v2 = *((unsigned int *)this + 12);
  if (*(_QWORD *)(v1 + 352) <= v2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned __int8 *)(*(_QWORD *)(v1 + 368) + 192 * v2 + 170);
}

void re::RenderGraphContext::rtAttachmentHandles(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *i;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  uint64_t v24;
  _anonymous_namespace_ *v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _BYTE v36[18];
  __int16 v37;
  unint64_t *v38;
  __int16 v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) += 2;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 1176) + 136);
  LODWORD(v6) = 0x7FFFFFFF;
  if (*(_QWORD *)(v5 + 656))
  {
    v7 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    v8 = *(unsigned int *)(*(_QWORD *)(v5 + 664) + 4 * ((v7 ^ (v7 >> 31)) % *(unsigned int *)(v5 + 680)));
    if ((_DWORD)v8 != 0x7FFFFFFF)
    {
      v9 = *(_QWORD *)(v5 + 672);
      if (*(_QWORD *)(v9 + 32 * v8 + 16) == a2)
      {
        LODWORD(v6) = v8;
      }
      else
      {
        v6 = v8;
        while (1)
        {
          v6 = *(_DWORD *)(v9 + 32 * v6 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v6 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v9 + 32 * v6 + 16) == a2)
            goto LABEL_10;
        }
        LODWORD(v6) = 0x7FFFFFFF;
      }
    }
  }
LABEL_10:
  v10 = (unint64_t *)*(unsigned int *)(*(_QWORD *)(v5 + 672) + 32 * v6 + 24);
  v11 = *(_QWORD *)(v5 + 352);
  if (v11 <= (unint64_t)v10)
    goto LABEL_37;
  v12 = *(_QWORD *)(v5 + 368) + 192 * v10;
  v13 = *(_QWORD *)(v12 + 56);
  if (v13)
  {
    v10 = (unint64_t *)(a3 + 24);
    v11 = v13 << 6;
    for (i = (unsigned int *)(*(_QWORD *)(v12 + 72) + 52); ; i += 16)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 1176) + 136);
      v16 = *(_QWORD *)(v15 + 296);
      v17 = (unint64_t *)*i;
      v18 = *(_QWORD *)(v16 + 16);
      if (v18 <= (unint64_t)v17)
      {
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v41 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v36 = 136315906;
        *(_QWORD *)&v36[4] = "operator[]";
        *(_WORD *)&v36[12] = 1024;
        *(_DWORD *)&v36[14] = 789;
        v37 = 2048;
        v38 = v17;
        v39 = 2048;
        v40 = v18;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_37:
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v41 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v36 = 136315906;
        *(_QWORD *)&v36[4] = "operator[]";
        *(_WORD *)&v36[12] = 1024;
        *(_DWORD *)&v36[14] = 789;
        v37 = 2048;
        v38 = v10;
        v39 = 2048;
        v40 = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v19 = *(_QWORD *)(v16 + 32);
      if (!*(_DWORD *)(v19 + 48 * v17))
      {
        v20 = *(i - 12);
        v21 = v20 > 6;
        v22 = (1 << v20) & 0x4E;
        if (!v21 && v22 != 0)
          break;
      }
LABEL_34:
      v11 -= 64;
      if (!v11)
        return;
    }
    v24 = v19 + 48 * v17;
    *(_QWORD *)v36 = *(_QWORD *)(v24 + 8) >> 1;
    *(_QWORD *)&v36[8] = *(_QWORD *)(v24 + 24);
    re::RenderGraphResourceDescriptions::targetDescriptionSource(v15, (uint64_t)v36, (uint64_t)&v41);
    if (*(_QWORD *)a3)
    {
      v26 = *(_QWORD *)(a3 + 8);
      v27 = *(_DWORD *)(a3 + 16);
      if ((v27 & 1) != 0)
      {
        if (v26 - 8 < 0xFFFFFFFFFFFFFFF7)
        {
          v29 = v26 + 1;
          v30 = 16;
          goto LABEL_27;
        }
      }
      else
      {
        v28 = *v10;
        if (v26 >= *v10)
        {
          v29 = v26 + 1;
          if (v28 < v29)
          {
            v30 = 2 * v28;
LABEL_27:
            if (v30 <= v29)
              v32 = v29;
            else
              v32 = v30;
            re::DynamicOverflowArray<re::RenderGraphTargetHandle,8ul>::setCapacity((uint64_t *)a3, v32);
            v27 = *(_DWORD *)(a3 + 16);
          }
        }
      }
    }
    else
    {
      v31 = *(_QWORD *)(a3 + 8) + 1;
      re::DynamicOverflowArray<re::RenderGraphTargetHandle,8ul>::setCapacity((uint64_t *)a3, v31);
      v27 = *(_DWORD *)(a3 + 16) + 2;
      *(_DWORD *)(a3 + 16) = v27;
    }
    v33 = a3 + 24;
    if ((v27 & 1) == 0)
      v33 = *(_QWORD *)(a3 + 32);
    v34 = *(_QWORD *)(a3 + 8);
    v35 = (_QWORD *)(v33 + 16 * v34);
    *v35 = 0;
    v35[1] = -1;
    *(_OWORD *)v35 = v41;
    *(_QWORD *)(a3 + 8) = v34 + 1;
    *(_DWORD *)(a3 + 16) += 2;
    goto LABEL_34;
  }
}

void re::RenderGraphContext::rtInfo(re::RenderGraphContext *this@<X0>, re::RenderGraphNodeBase *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  _BOOL4 v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  _BYTE v30[18];
  __int16 v31;
  unint64_t v32;
  __int16 v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(*((_QWORD *)this + 147) + 136);
  LODWORD(v7) = 0x7FFFFFFF;
  if (*(_QWORD *)(v6 + 656))
  {
    v8 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                           * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) >> 27));
    v9 = *(unsigned int *)(*(_QWORD *)(v6 + 664) + 4 * ((v8 ^ (v8 >> 31)) % *(unsigned int *)(v6 + 680)));
    if ((_DWORD)v9 != 0x7FFFFFFF)
    {
      v10 = *(_QWORD *)(v6 + 672);
      if (*(re::RenderGraphNodeBase **)(v10 + 32 * v9 + 16) == a2)
      {
        LODWORD(v7) = v9;
      }
      else
      {
        v7 = v9;
        while (1)
        {
          v7 = *(_DWORD *)(v10 + 32 * v7 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v7 == 0x7FFFFFFF)
            break;
          if (*(re::RenderGraphNodeBase **)(v10 + 32 * v7 + 16) == a2)
            goto LABEL_10;
        }
        LODWORD(v7) = 0x7FFFFFFF;
      }
    }
  }
LABEL_10:
  v11 = *(unsigned int *)(*(_QWORD *)(v6 + 672) + 32 * v7 + 24);
  v12 = *(_QWORD *)(v6 + 352);
  if (v12 <= v11)
  {
LABEL_44:
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v35 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v30 = 136315906;
    *(_QWORD *)&v30[4] = "operator[]";
    *(_WORD *)&v30[12] = 1024;
    *(_DWORD *)&v30[14] = 789;
    v31 = 2048;
    v32 = v11;
    v33 = 2048;
    v34 = v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v13 = *(_QWORD *)(v6 + 368);
  *(_DWORD *)(a3 + 48) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 29) = 0u;
  v14 = v13 + 192 * v11;
  v15 = *(_QWORD *)(v14 + 56);
  if (v15)
  {
    v16 = *(unsigned int **)(v14 + 72);
    v17 = v15 << 6;
    while (1)
    {
      v18 = *(_QWORD *)(*((_QWORD *)this + 147) + 136);
      v19 = *(_QWORD *)(v18 + 296);
      v12 = v16[13];
      v20 = *(_QWORD *)(v19 + 16);
      if (v20 <= v12)
        break;
      v21 = *(_QWORD *)(v19 + 32);
      if (!*(_DWORD *)(v21 + 48 * v12))
      {
        v22 = v21 + 48 * v12;
        *(_QWORD *)v30 = *(_QWORD *)(v22 + 8) >> 1;
        *(_QWORD *)&v30[8] = *(_QWORD *)(v22 + 24);
        re::RenderGraphResourceDescriptions::targetDescriptionSource(v18, (uint64_t)v30, (uint64_t)&v35);
        v23 = v16[1];
        switch(v23)
        {
          case 3u:
            v27 = *(_DWORD *)(re::RenderGraphExecutable::targetDescription(*((_QWORD *)this + 147), (uint64_t)&v35) + 20);
            if (v27 == -1)
            {
              re::RenderGraphContext::metalTexture((uint64_t)this, (uint64_t)&v35, 0, 0, (id *)v30);
              v27 = objc_msgSend(*(id *)v30, sel_sampleCount);
              if (*(_QWORD *)v30)

            }
            *(_DWORD *)a3 = v27;
            *(_DWORD *)(a3 + 40) = *(_DWORD *)(re::RenderGraphExecutable::targetDescription(*((_QWORD *)this + 147), (uint64_t)&v35)+ 4);
            break;
          case 2u:
            v28 = *(_DWORD *)(re::RenderGraphExecutable::targetDescription(*((_QWORD *)this + 147), (uint64_t)&v35) + 20);
            if (v28 == -1)
            {
              re::RenderGraphContext::metalTexture((uint64_t)this, (uint64_t)&v35, 0, 0, (id *)v30);
              v28 = objc_msgSend(*(id *)v30, sel_sampleCount);
              if (*(_QWORD *)v30)

            }
            *(_DWORD *)a3 = v28;
            *(_DWORD *)(a3 + 36) = *(_DWORD *)(re::RenderGraphExecutable::targetDescription(*((_QWORD *)this + 147), (uint64_t)&v35)+ 4);
            break;
          case 1u:
            v24 = re::RenderGraphExecutable::targetDescription(*((_QWORD *)this + 147), (uint64_t)&v35);
            v25 = *(_DWORD *)(v24 + 20);
            if (v25 == -1)
            {
              re::RenderGraphContext::metalTexture((uint64_t)this, (uint64_t)&v35, 0, 0, (id *)v30);
              v25 = objc_msgSend(*(id *)v30, sel_sampleCount);
              if (*(_QWORD *)v30)

            }
            *(_DWORD *)a3 = v25;
            re::RenderGraphContext::metalTexture((uint64_t)this, (uint64_t)&v35, 0, 0, (id *)v30);
            *(_DWORD *)(a3 + 4 * *v16 + 4) = objc_msgSend(*(id *)v30, sel_pixelFormat);
            if (*(_QWORD *)v30)

            v26 = *(_DWORD *)(v24 + 32) && !*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 1) + 152) + 64)
               || *(_BYTE *)(*((_QWORD *)this + 2) + 66) != 0;
            *(_DWORD *)(a3 + 48) = v26;
            break;
        }
      }
      v16 += 16;
      v17 -= 64;
      if (!v17)
        goto LABEL_38;
    }
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v35 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v30 = 136315906;
    *(_QWORD *)&v30[4] = "operator[]";
    *(_WORD *)&v30[12] = 1024;
    *(_DWORD *)&v30[14] = 789;
    v31 = 2048;
    v32 = v12;
    v33 = 2048;
    v34 = v20;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_44;
  }
LABEL_38:
  if (*(_BYTE *)(v13 + 192 * v11 + 171))
  {
    v29 = re::RenderGraphDataStore::tryGet<re::VRRData>(*((_QWORD *)this + 146), *((_QWORD *)a2 + 6));
    if (v29)
    {
      if (*(_BYTE *)(v29 + 12))
        *(_BYTE *)(a3 + 44) = 1;
    }
  }
}

void re::RenderGraphContext::allocateRenderTargetsBeforeSetup(re::RenderGraphContext *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  const re::RenderGraphBufferDescription *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  re::RenderGraphResourceAllocationManager *v26;
  unint64_t v27;
  uint64_t v28;
  re::RenderGraphResourceAllocationManager *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  id v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  id v38;
  int v39;
  const char *v40;
  __int16 v41;
  int v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  const re::RenderGraphBufferDescription *v46;
  id v47[2];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*((_QWORD *)this + 147) + 136);
  v4 = *((unsigned int *)this + 12);
  v5 = *(const re::RenderGraphBufferDescription **)(v3 + 352);
  if ((unint64_t)v5 <= v4)
  {
LABEL_42:
    v36 = 0;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    *(_OWORD *)v47 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v39 = 136315906;
    v40 = "operator[]";
    v41 = 1024;
    v42 = 789;
    v43 = 2048;
    v44 = v4;
    v45 = 2048;
    v46 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_43:
    v32[0] = 0;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    *(_OWORD *)v47 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v39 = 136315906;
    v40 = "operator[]";
    v41 = 1024;
    v42 = 468;
    v43 = 2048;
    v44 = v4;
    v45 = 2048;
    v46 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_44:
    v32[0] = 0;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    *(_OWORD *)v47 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v39 = 136315906;
    v40 = "operator[]";
    v41 = 1024;
    v42 = 468;
    v43 = 2048;
    v44 = v4;
    v45 = 2048;
    v46 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v6 = *(_QWORD *)(v3 + 368);
  v7 = v6 + 192 * v4;
  v9 = *(_QWORD *)(v7 + 56);
  v8 = (unint64_t *)(v7 + 56);
  if (v9)
  {
    v11 = 0;
    v12 = (_QWORD *)(v6 + 192 * v4 + 72);
    v13 = 52;
    do
    {
      v14 = *((_QWORD *)this + 147);
      v15 = *(_QWORD *)(v14 + 136);
      v16 = *(_QWORD *)(v15 + 296);
      v4 = *(unsigned int *)(*v12 + v13);
      v5 = *(const re::RenderGraphBufferDescription **)(v16 + 16);
      if ((unint64_t)v5 <= v4)
      {
        v36 = 0;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        *(_OWORD *)v47 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v39 = 136315906;
        v40 = "operator[]";
        v41 = 1024;
        v42 = 789;
        v43 = 2048;
        v44 = v4;
        v45 = 2048;
        v46 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_38:
        v32[0] = 0;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        *(_OWORD *)v47 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v39 = 136315906;
        v40 = "operator[]";
        v41 = 1024;
        v42 = 468;
        v43 = 2048;
        v44 = v1;
        v45 = 2048;
        v46 = (const re::RenderGraphBufferDescription *)v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_39:
        v38 = 0;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        *(_OWORD *)v47 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v39 = 136315906;
        v40 = "operator[]";
        v41 = 1024;
        v42 = 468;
        v43 = 2048;
        v44 = v1;
        v45 = 2048;
        v46 = (const re::RenderGraphBufferDescription *)v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_40:
        v32[0] = 0;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        *(_OWORD *)v47 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v39 = 136315906;
        v40 = "operator[]";
        v41 = 1024;
        v42 = 468;
        v43 = 2048;
        v44 = v4;
        v45 = 2048;
        v46 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_41:
        v32[0] = 0;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        *(_OWORD *)v47 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v39 = 136315906;
        v40 = "operator[]";
        v41 = 1024;
        v42 = 468;
        v43 = 2048;
        v44 = v4;
        v45 = 2048;
        v46 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_42;
      }
      v17 = *(_QWORD *)(v16 + 32);
      if (*(_DWORD *)(v17 + 48 * v4 + 32) == *((_DWORD *)this + 12))
      {
        v18 = *(_DWORD *)(v17 + 48 * v4);
        if (v18 == 1)
        {
          v22 = v17 + 48 * v4;
          v23 = *(_QWORD *)(v22 + 8);
          v4 = v22 + 8;
          v36 = v23 >> 1;
          v37 = *(_QWORD *)(v4 + 16);
          v5 = (const re::RenderGraphBufferDescription *)re::RenderGraphExecutable::bufferDescription(v14, (uint64_t)&v36);
          if (*(_QWORD *)re::RenderGraphContext::metalBuffer((uint64_t)this, (uint64_t)&v36))
          {
            if (*(_DWORD *)v5 != 2 || *((_BYTE *)v5 + 16) == 0)
              goto LABEL_35;
            v1 = *(_QWORD *)this;
            re::StringID::StringID((re::StringID *)&v34, (const StringID *)v4);
            v38 = (id)((unint64_t)v34 >> 1);
            v25 = *((_QWORD *)this + 147);
            v4 = HIDWORD(v37);
            v5 = *(const re::RenderGraphBufferDescription **)(v25 + 80);
            if ((unint64_t)v5 <= HIDWORD(v37))
              goto LABEL_41;
          }
          else
          {
            v29 = (re::RenderGraphResourceAllocationManager *)*((_QWORD *)this + 4);
            v30 = HIDWORD(v37);
            re::StringID::StringID((re::StringID *)v32, (const StringID *)v4);
            re::RenderGraphResourceAllocationManager::makeBuffer(v29, v5, (const re::StringID *)v32, v30, &v33);
            v34 = v33;
            LODWORD(v35) = 0;
            HIDWORD(v35) = objc_msgSend(v33, sel_length);
            v31 = *((_QWORD *)this + 147);
            v1 = HIDWORD(v37);
            v2 = *(_QWORD *)(v31 + 80);
            if (v2 <= HIDWORD(v37))
              goto LABEL_39;
            v1 = *(_QWORD *)(v31 + 88) + 16 * HIDWORD(v37);
            NS::SharedPtr<MTL::Texture>::operator=((void **)v1, &v34);
            *(_QWORD *)(v1 + 8) = v35;
            if (v34)
            {

              v34 = 0;
            }
            if (v33)
            {

              v33 = 0;
            }
            re::StringID::destroyString((re::StringID *)v32);
            if (!*((_BYTE *)v5 + 16))
              goto LABEL_35;
            v1 = *(_QWORD *)this;
            re::StringID::StringID((re::StringID *)&v34, (const StringID *)v4);
            v38 = (id)((unint64_t)v34 >> 1);
            v25 = *((_QWORD *)this + 147);
            v4 = HIDWORD(v37);
            v5 = *(const re::RenderGraphBufferDescription **)(v25 + 80);
            if ((unint64_t)v5 <= HIDWORD(v37))
              goto LABEL_44;
          }
          re::BufferTable::setBuffer((re::BufferTable *)(v1 + 480), (const re::WeakStringID *)&v38, *(_QWORD *)(v25 + 88) + 16 * v4);
LABEL_34:
          v38 = 0;
          re::StringID::destroyString((re::StringID *)&v34);
          goto LABEL_35;
        }
        if (!v18)
        {
          v19 = v17 + 48 * v4;
          v20 = *(_QWORD *)(v19 + 8);
          v4 = v19 + 8;
          v47[0] = (id)(v20 >> 1);
          v47[1] = *(id *)(v4 + 16);
          re::RenderGraphResourceDescriptions::targetDescriptionSource(v15, (uint64_t)v47, (uint64_t)&v36);
          v5 = (const re::RenderGraphBufferDescription *)re::RenderGraphExecutable::targetDescription(*((_QWORD *)this + 147), (uint64_t)&v36);
          re::RenderGraphContext::metalTexture((uint64_t)this, (uint64_t)&v36, 0, 0, v47);
          if (v47[0])
          {

            if (*(_DWORD *)v5 != 2 || !*((_BYTE *)v5 + 36))
              goto LABEL_35;
            v1 = *(_QWORD *)this;
            re::StringID::StringID((re::StringID *)&v34, (const StringID *)v4);
            v38 = (id)((unint64_t)v34 >> 1);
            v21 = *((_QWORD *)this + 147);
            v4 = HIDWORD(v37);
            v5 = *(const re::RenderGraphBufferDescription **)(v21 + 56);
            if ((unint64_t)v5 <= HIDWORD(v37))
              goto LABEL_40;
          }
          else
          {
            v26 = (re::RenderGraphResourceAllocationManager *)*((_QWORD *)this + 4);
            v27 = HIDWORD(v37);
            re::StringID::StringID((re::StringID *)&v34, (const StringID *)v4);
            re::RenderGraphResourceAllocationManager::makeTexture(v26, v5, (const re::StringID *)&v34, v27, (unint64_t)&v38);
            v28 = *((_QWORD *)this + 147);
            v1 = HIDWORD(v37);
            v2 = *(_QWORD *)(v28 + 56);
            if (v2 <= HIDWORD(v37))
              goto LABEL_38;
            NS::SharedPtr<MTL::Texture>::operator=((void **)(*(_QWORD *)(v28 + 64) + 8 * HIDWORD(v37)), &v38);
            if (v38)
            {

              v38 = 0;
            }
            re::StringID::destroyString((re::StringID *)&v34);
            if (!*((_BYTE *)v5 + 36))
              goto LABEL_35;
            v1 = *(_QWORD *)this;
            re::StringID::StringID((re::StringID *)&v34, (const StringID *)v4);
            v38 = (id)((unint64_t)v34 >> 1);
            v21 = *((_QWORD *)this + 147);
            v4 = HIDWORD(v37);
            v5 = *(const re::RenderGraphBufferDescription **)(v21 + 56);
            if ((unint64_t)v5 <= HIDWORD(v37))
              goto LABEL_43;
          }
          re::DynamicTextureTableAdd((_QWORD *)(v1 + 368), &v38, (id *)(*(_QWORD *)(v21 + 64) + 8 * v4));
          goto LABEL_34;
        }
      }
LABEL_35:
      ++v11;
      v13 += 64;
    }
    while (*v8 > v11);
  }
}

_anonymous_namespace_ *re::RenderGraphContext::checkForReadAfterWriteDependenciesWait(re::RenderGraphContext *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  int v23;
  _QWORD *v24;
  int v25;
  _QWORD *v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(*((_QWORD *)this + 147) + 136);
  v2 = *((unsigned int *)this + 12);
  if (*(_QWORD *)(v1 + 352) <= v2)
  {
LABEL_24:
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v28 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = *(_QWORD *)(v1 + 368);
  v5 = v4 + 192 * v2;
  v7 = *(_QWORD *)(v5 + 56);
  v6 = (unint64_t *)(v5 + 56);
  if (v7)
  {
    v8 = 0;
    v9 = 0;
    v10 = (uint64_t *)(v4 + 192 * v2 + 72);
    while (1)
    {
      v11 = *v10;
      v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 147) + 136) + 296);
      v13 = *v10 + v8;
      v14 = *(unsigned int *)(v13 + 52);
      if (*(_QWORD *)(v12 + 16) <= v14)
      {
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v28 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_24;
      }
      v15 = *(_QWORD *)(v12 + 32);
      v16 = (int *)(v15 + 48 * v14);
      v17 = *(_DWORD *)(v13 + 4);
      if ((v17 - 1) >= 8 && v17 != 11)
      {
        if (!v17)
        {
          v22 = *v16;
          if (v22 == 1)
          {
            v25 = *(_DWORD *)(v11 + v8 + 44);
            v26 = (_QWORD *)(*((_QWORD *)this + 4) + 1368);
            LODWORD(v28) = *(_DWORD *)(v15 + 48 * v14 + 28);
            DWORD1(v28) = v25;
            re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureIndexAndStage>::add(v26, &v28);
          }
          else if (!v22)
          {
            v23 = *(_DWORD *)(v11 + v8 + 44);
            v24 = (_QWORD *)(*((_QWORD *)this + 4) + 1328);
            LODWORD(v28) = *(_DWORD *)(v15 + 48 * v14 + 28);
            DWORD1(v28) = v23;
            re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureIndexAndStage>::add(v24, &v28);
          }
        }
        goto LABEL_15;
      }
      if (*v16 == 1)
        break;
      if (!*v16)
      {
        v19 = *((_QWORD *)this + 4);
        LODWORD(v28) = *(_DWORD *)(v15 + 48 * v14 + 28);
        v20 = (_QWORD *)(v19 + 1408);
LABEL_14:
        re::DynamicArray<int>::add(v20, &v28);
      }
LABEL_15:
      ++v9;
      v8 += 64;
      if (*v6 <= v9)
        return re::RenderGraphResourceAllocationManager::processResourceHazards(*((_anonymous_namespace_ **)this + 4));
    }
    v21 = *((_QWORD *)this + 4);
    LODWORD(v28) = *(_DWORD *)(v15 + 48 * v14 + 28);
    v20 = (_QWORD *)(v21 + 1448);
    goto LABEL_14;
  }
  return re::RenderGraphResourceAllocationManager::processResourceHazards(*((_anonymous_namespace_ **)this + 4));
}

void re::RenderGraphContext::handleManagedForceClear(re::RenderGraphContext *this)
{
  __int128 *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v22;
  _QWORD v23[2];
  uint64_t v24;
  _BYTE v25[18];
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v1 = &v30;
  v35 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*((_QWORD *)this + 147) + 136);
  v3 = *((unsigned int *)this + 12);
  v4 = *(_QWORD *)(v2 + 352);
  if (v4 <= v3)
  {
LABEL_22:
    v24 = 0;
    v1[4] = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v25 = 136315906;
    *(_QWORD *)&v25[4] = "operator[]";
    *(_WORD *)&v25[12] = 1024;
    *(_DWORD *)&v25[14] = 789;
    v26 = 2048;
    v27 = v3;
    v28 = 2048;
    v29 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v6 = *(_QWORD *)(v2 + 368);
  if ((re::RenderGraphContext::setupUsesCustomEncoders(this) & 1) == 0)
  {
    v7 = v6 + 192 * v3;
    v10 = *(_QWORD *)(v7 + 56);
    v9 = (unint64_t *)(v7 + 56);
    v8 = v10;
    if (v10)
    {
      v11 = 0;
      v12 = 0;
      v3 = v6 + 192 * v3 + 72;
      while (1)
      {
        v13 = *(_QWORD *)v3;
        v14 = *(_QWORD *)(*((_QWORD *)this + 147) + 136);
        v15 = *(_QWORD *)(v14 + 296);
        v4 = *(unsigned int *)(*(_QWORD *)v3 + v11 + 52);
        v16 = *(_QWORD *)(v15 + 16);
        if (v16 <= v4)
        {
          v24 = 0;
          v34 = 0u;
          v32 = 0u;
          v33 = 0u;
          v30 = 0u;
          v31 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v25 = 136315906;
          *(_QWORD *)&v25[4] = "operator[]";
          *(_WORD *)&v25[12] = 1024;
          *(_DWORD *)&v25[14] = 789;
          v26 = 2048;
          v27 = v4;
          v28 = 2048;
          v29 = v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_22;
        }
        v17 = *(_QWORD *)(v15 + 32);
        if (!*(_DWORD *)(v17 + 48 * v4))
          break;
LABEL_17:
        ++v12;
        v11 += 64;
        if (v8 <= v12)
          return;
      }
      v18 = v17 + 48 * v4;
      *(_QWORD *)v25 = *(_QWORD *)(v18 + 8) >> 1;
      *(_QWORD *)&v25[8] = *(_QWORD *)(v18 + 24);
      re::RenderGraphResourceDescriptions::targetDescriptionSource(v14, (uint64_t)v25, (uint64_t)&v30);
      v19 = re::RenderGraphExecutable::targetDescription(*((_QWORD *)this + 147), (uint64_t)&v30);
      v20 = *(_DWORD *)(v13 + v11 + 4);
      if (v20 == 3)
      {
        if ((*(_DWORD *)(v19 + 4) - 253) <= 9 && ((1 << (*(_BYTE *)(v19 + 4) + 3)) & 0x385) != 0)
        {
LABEL_15:
          if (*(_BYTE *)(v13 + v11 + 32))
          {
            v22 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)this + 1) + 104));
            re::RenderGraphContext::acquireManagedRenderEncoder(v23, this, v22, 0);
            re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)v23);
            return;
          }
        }
      }
      else if ((v20 - 1) < 2)
      {
        goto LABEL_15;
      }
      v8 = *v9;
      goto LABEL_17;
    }
  }
}

uint64_t re::RenderGraphContext::setupUsesCustomEncoders(re::RenderGraphContext *this)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 147) + 136);
  v2 = *((unsigned int *)this + 12);
  if (*(_QWORD *)(v1 + 352) <= v2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned __int8 *)(*(_QWORD *)(v1 + 368) + 192 * v2 + 169);
}

uint64_t re::RenderGraphContext::encodeDrawBasedClear(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,re::DynamicString *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,uint64_t a39,uint64_t a40,int a41,uint64_t a42,uint64_t a43,int a44,uint64_t a45,id a46,int a47,uint64_t a48,__int128 a49,__int128 a50,__int128 a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,unint64_t a58,uint64_t a59,__int128 a60,__int128 a61,__int128 a62,__int128 a63)
{
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unint64_t v69;
  uint64_t v70;
  _anonymous_namespace_ *v71;
  _anonymous_namespace_ *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  uint64_t v76;
  unsigned int v77;
  BOOL v78;
  int v79;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  id v93;
  id v94;
  id v95;
  unint64_t *v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  _anonymous_namespace_ *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *RenderPipelineState;
  uint8x8_t v109;
  _QWORD *DepthStencilState;
  const RenderCommandEncoder *v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t *v146;
  uint64_t *v147;
  __int128 *v148;
  _OWORD *v149;
  uint64_t v150;
  uint64_t result;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 vars0;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  _BOOL4 v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  re::DynamicString *v165;
  unsigned int v166;
  uint64_t v167;
  BOOL v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  unint64_t v176;

  STACK[0xA48] = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)&STACK[0x9B0] = 0u;
  *(_OWORD *)&STACK[0x9A0] = 0u;
  *(_OWORD *)&STACK[0x990] = 0u;
  *(_OWORD *)&STACK[0x980] = 0u;
  *(_OWORD *)&STACK[0x970] = 0u;
  *(_OWORD *)&STACK[0x960] = 0u;
  *(_OWORD *)&STACK[0x950] = 0u;
  *(_OWORD *)&STACK[0x940] = 0u;
  v66 = *(_QWORD *)(*a1 + 24);
  a58 = 0;
  a57 = 0;
  a59 = 0;
  a54 = 0;
  a55 = 0;
  a56 = 0;
  v67 = re::RenderGraphDataStore::tryGet<re::ViewportPercentData>(a1[146], *(_QWORD *)(a1[5] + 48));
  v161 = a3;
  if (v67)
  {
    v160 = *(_BYTE *)(v67 + 65) != 0;
    v68 = *(unsigned __int8 *)(v67 + 64);
  }
  else
  {
    v160 = 0;
    v68 = 1;
  }
  v166 = v68;
  v69 = v68;
  re::FixedArray<re::mtl::Viewport>::init<>(&a57, v66, v68);
  re::FixedArray<re::Vector4<float>>::init<>(&a54, v66, v69);
  v70 = re::RenderGraphDataStore::tryGet<re::ViewportData>(a1[146], *(_QWORD *)(a1[5] + 48));
  re::RenderGraphContext::selectViewport((unint64_t)a1, v70, (uint64_t)&a57, (_anonymous_namespace_ *)&a54, 0);
  STACK[0x938] = 0;
  *(_OWORD *)&STACK[0x910] = 0u;
  *(_OWORD *)&STACK[0x920] = 0u;
  *(_OWORD *)&STACK[0x8F0] = 0u;
  *(_OWORD *)&STACK[0x900] = 0u;
  *(_OWORD *)&STACK[0x8D0] = 0u;
  *(_OWORD *)&STACK[0x8E0] = 0u;
  LOBYTE(STACK[0x7A0]) = 0;
  LOBYTE(STACK[0x7C8]) = 0;
  *(_OWORD *)&STACK[0x7F0] = 0u;
  *(_OWORD *)&STACK[0x800] = 0u;
  v72 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&STACK[0x7F0], 0);
  *(_OWORD *)&STACK[0x810] = 0u;
  *(_OWORD *)&STACK[0x820] = 0u;
  re::DynamicString::setCapacity(&STACK[0x810], 0);
  STACK[0x850] = 0;
  STACK[0x840] = 0;
  STACK[0x830] = 0;
  STACK[0x838] = 0;
  LODWORD(STACK[0x848]) = 0;
  v73 = 208;
  LOBYTE(STACK[0x860]) = 0;
  do
  {
    *((_BYTE *)&STACK[0x7A0] + v73) = 0;
    v73 += 8;
  }
  while (v73 != 272);
  LOBYTE(STACK[0x8B0]) = 0;
  LOBYTE(STACK[0x8B8]) = 0;
  LOBYTE(STACK[0x8C0]) = 0;
  LOBYTE(a49) = 0;
  *((_QWORD *)&a51 + 1) = 0x700000007;
  *(_DWORD *)((char *)&a52 + 1) = -1;
  HIWORD(a52) = 0;
  v74 = *(_QWORD *)(a2 + 56);
  if (v74)
  {
    v162 = 0;
    v168 = 0;
    v176 = 0;
    v172 = 0;
    v174 = 0;
    v75 = *(unsigned int **)(a2 + 72);
    v76 = v74 << 6;
    v170 = 0;
    while (1)
    {
      v77 = v75[1];
      v78 = v77 > 0xB;
      v79 = (1 << v77) & 0xE31;
      if (v78 || v79 == 0)
        break;
LABEL_12:
      v75 += 16;
      v76 -= 64;
      if (!v76)
        goto LABEL_80;
    }
    a46 = 0;
    v81 = *(_QWORD *)(*(_QWORD *)(a1[147] + 136) + 296);
    v82 = (char *)v75[13];
    v83 = *(_QWORD *)(v81 + 16);
    if (v83 <= (unint64_t)v82)
      goto LABEL_136;
    v84 = *(_QWORD *)(v81 + 32) + 48 * v82;
    STACK[0x9F0] = *(_QWORD *)(v84 + 8) >> 1;
    STACK[0x9F8] = *(_QWORD *)(v84 + 24);
    re::RenderGraphContext::metalTexture((uint64_t)a1, (uint64_t)&STACK[0x9F0], 0, 0, (id *)&a60);
    NS::SharedPtr<MTL::Texture>::operator=(&a46, (void **)&a60);
    if ((_QWORD)a60)

    v85 = (unsigned int *)re::RenderGraphCompiled::targetDescription(*(_QWORD *)(a1[147] + 136), (uint64_t)&STACK[0x9F0]);
    v87 = v85[5];
    v86 = v85[6];
    v88 = v85[20];
    *(_QWORD *)&a60 = 0;
    v89 = v75[1];
    if (v89 - 6 <= 2)
    {
      v90 = *(_QWORD *)(*(_QWORD *)(a1[147] + 136) + 296);
      if (*(_QWORD *)(v90 + 16) > v88)
      {
        v91 = *(_QWORD *)(v90 + 32) + 48 * v88;
        STACK[0x9F0] = *(_QWORD *)(v91 + 8) >> 1;
        STACK[0x9F8] = *(_QWORD *)(v91 + 24);
        re::RenderGraphContext::metalTexture((uint64_t)a1, (uint64_t)&STACK[0x9F0], 0, 0, (id *)&STACK[0x9C0]);
        NS::SharedPtr<MTL::Texture>::operator=((void **)&a60, (void **)&STACK[0x9C0]);
        if (STACK[0x9C0])

        re::RenderGraphCompiled::targetDescription(*(_QWORD *)(a1[147] + 136), (uint64_t)&STACK[0x9F0]);
        v89 = v75[1];
      }
    }
    if (v89 - 6 < 3)
    {
      v92 = (id)a60;
      if (!(_QWORD)a60)
      {
        v87 = 4;
        goto LABEL_29;
      }
    }
    else
    {
      if (v89 - 1 > 2)
      {
LABEL_30:
        if (v89 - 1 <= 2)
        {
          if (a46)
          {
            v176 = (unint64_t)objc_msgSend(a46, sel_arrayLength);
            v89 = v75[1];
          }
          else
          {
            v176 = v86;
          }
        }
        switch(v89)
        {
          case 1u:
            *((_OWORD *)&STACK[0x940] + *v75) = *((_OWORD *)v75 + 1);
            v93 = a46;
            if (!a46)
              goto LABEL_44;
            goto LABEL_43;
          case 2u:
            v170 = v75[4];
            v94 = a46;
            if (a46)
              goto LABEL_51;
            goto LABEL_52;
          case 3u:
            v162 = v75[4];
            v95 = a46;
            if (a46)
              goto LABEL_57;
            goto LABEL_58;
          case 6u:
            v93 = (id)a60;
            if (!(_QWORD)a60)
              v93 = a46;
LABEL_43:
            LODWORD(v93) = objc_msgSend(v93, sel_pixelFormat);
LABEL_44:
            v96 = &STACK[0x7A0] + *v75;
            if (!*((_BYTE *)v96 + 208))
              *((_BYTE *)v96 + 208) = 1;
            *((_DWORD *)v96 + 53) = (_DWORD)v93;
            v97 = *((_BYTE *)v75 + 48);
            v98 = *v75;
            *((_BYTE *)&STACK[0x938] + v98) = v97;
            v99 = 88;
            if ((int)v93 <= 52)
            {
              switch((int)v93)
              {
                case 1:
                case 10:
                case 11:
                case 12:
                case 20:
                case 22:
                case 25:
LABEL_62:
                  v99 = 64;
                  break;
                case 13:
                case 23:
LABEL_67:
                  v99 = 32;
                  break;
                case 14:
                case 24:
LABEL_68:
                  v99 = 0;
                  break;
                case 30:
                case 31:
                case 32:
LABEL_65:
                  v99 = 72;
                  break;
                case 33:
LABEL_64:
                  v99 = 40;
                  break;
                case 34:
LABEL_66:
                  v99 = 8;
                  break;
                default:
                  break;
              }
            }
            else if ((int)v93 > 102)
            {
              switch((int)v93)
              {
                case 'g':
                  goto LABEL_64;
                case 'h':
                  goto LABEL_66;
                case 'i':
                  goto LABEL_65;
                case 'j':
                case 'k':
                case 'l':
                case 'm':
                case 'n':
                case 'o':
                case 'p':
                  break;
                case 'q':
                  goto LABEL_73;
                case 'r':
                  goto LABEL_71;
                default:
                  if ((_DWORD)v93 == 123)
                  {
LABEL_73:
                    v99 = 56;
                  }
                  else if ((_DWORD)v93 == 124)
                  {
LABEL_71:
                    v99 = 24;
                  }
                  break;
              }
            }
            else
            {
              switch((int)v93)
              {
                case '5':
                  goto LABEL_67;
                case '6':
                  goto LABEL_68;
                case '7':
                  goto LABEL_62;
                case '8':
                case '9':
                case ':':
                case ';':
                case '=':
                case 'B':
                case 'C':
                case 'D':
                case 'E':
                case 'F':
                case 'G':
                case 'H':
                  break;
                case '<':
                case '>':
                case 'A':
                  goto LABEL_65;
                case '?':
                  goto LABEL_64;
                case '@':
                  goto LABEL_66;
                case 'I':
                  goto LABEL_73;
                case 'J':
                  goto LABEL_71;
                default:
                  if ((_DWORD)v93 == 91)
                    goto LABEL_73;
                  break;
              }
            }
            *((_BYTE *)&STACK[0x8D0] + v99 + v98) = v97;
            break;
          case 7u:
            v94 = (id)a60;
            if (!(_QWORD)a60)
              v94 = a46;
LABEL_51:
            LODWORD(v94) = objc_msgSend(v94, sel_pixelFormat);
LABEL_52:
            if (!LOBYTE(STACK[0x8B0]))
              LOBYTE(STACK[0x8B0]) = 1;
            LODWORD(STACK[0x8B4]) = (_DWORD)v94;
            BYTE5(a52) = (((_DWORD)v94 - 250) < 0xB) & (0x425u >> ((_BYTE)v94 + 6));
            LOBYTE(a52) = 7;
            v172 = 1;
            break;
          case 8u:
            v95 = (id)a60;
            if (!(_QWORD)a60)
              v95 = a46;
LABEL_57:
            LODWORD(v95) = objc_msgSend(v95, sel_pixelFormat);
LABEL_58:
            if (!LOBYTE(STACK[0x8B8]))
              LOBYTE(STACK[0x8B8]) = 1;
            LODWORD(STACK[0x8BC]) = (_DWORD)v95;
            *((_QWORD *)&a51 + 1) = 0x200000702000007;
            v168 = *((_BYTE *)v75 + 48) != 0;
            v174 = 1;
            break;
          default:
            break;
        }
        if ((_QWORD)a60)

        if (a46)
        goto LABEL_12;
      }
      v92 = a46;
      if (!a46)
      {
LABEL_29:
        STACK[0x858] = v87;
        v89 = v75[1];
        goto LABEL_30;
      }
    }
    v87 = (unint64_t)objc_msgSend(v92, sel_sampleCount);
    goto LABEL_29;
  }
  v174 = 0;
  v172 = 0;
  v176 = 0;
  v168 = 0;
  v162 = 0;
  v170 = 0;
LABEL_80:
  STACK[0x830] = v66;
  v100 = (_anonymous_namespace_ *)re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity(&STACK[0x830], 0x60uLL);
  v101 = 0;
  ++LODWORD(STACK[0x848]);
  v82 = (char *)&a62 + 8;
  do
  {
    a60 = 0u;
    a61 = 0u;
    re::DynamicString::setCapacity(&a60, 0);
    *((_QWORD *)&a62 + 1) = 0;
    a63 = 0uLL;
    re::FixedArray<BOOL>::init<>((_QWORD *)&a62 + 1, v66, 1);
    if (!(_QWORD)a63)
    {
      a46 = 0;
      *(_OWORD *)&STACK[0xA30] = 0u;
      *(_OWORD *)&STACK[0xA20] = 0u;
      *(_OWORD *)&STACK[0xA10] = 0u;
      *(_OWORD *)&STACK[0xA00] = 0u;
      *(_OWORD *)&STACK[0x9F0] = 0u;
      v83 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(STACK[0x9C0]) = 136315906;
      STACK[0x9C4] = (unint64_t)"operator[]";
      LOWORD(STACK[0x9CC]) = 1024;
      LODWORD(STACK[0x9CE]) = 468;
      LOWORD(STACK[0x9D2]) = 2048;
      STACK[0x9D4] = 0;
      LOWORD(STACK[0x9DC]) = 2048;
      STACK[0x9DE] = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_136:
      STACK[0x9C0] = 0;
      *(_OWORD *)&STACK[0xA30] = 0u;
      *(_OWORD *)&STACK[0xA20] = 0u;
      *(_OWORD *)&STACK[0xA10] = 0u;
      *(_OWORD *)&STACK[0xA00] = 0u;
      *(_OWORD *)&STACK[0x9F0] = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(a60) = 136315906;
      *(_QWORD *)((char *)&a60 + 4) = "operator[]";
      WORD6(a60) = 1024;
      *(_DWORD *)((char *)&a60 + 14) = 789;
      WORD1(a61) = 2048;
      *(_QWORD *)((char *)&a61 + 4) = v82;
      WORD6(a61) = 2048;
      *(_QWORD *)((char *)&a61 + 14) = v83;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    **((_BYTE **)&a63 + 1) = *((_BYTE *)&STACK[0x8D0] + v101);
    LOWORD(a62) = 53;
    WORD1(a62) = v101;
    v102 = STACK[0x840];
    if (STACK[0x840] >= STACK[0x838])
    {
      re::DynamicArray<re::TechniqueFunctionConstant>::growCapacity(&STACK[0x830], v102 + 1);
      v102 = STACK[0x840];
    }
    v103 = STACK[0x850] + (v102 << 6);
    *(_OWORD *)v103 = 0u;
    *(_OWORD *)(v103 + 16) = 0u;
    *(_QWORD *)v103 = a60;
    *(_QWORD *)&a60 = 0;
    v104 = *(_QWORD *)(v103 + 16);
    *(_QWORD *)(v103 + 16) = a61;
    *(_QWORD *)&a61 = v104;
    *(_QWORD *)(v103 + 24) = *((_QWORD *)&a61 + 1);
    *((_QWORD *)&a61 + 1) = 0;
    v105 = *(_QWORD *)(v103 + 8);
    *(_QWORD *)(v103 + 8) = *((_QWORD *)&a60 + 1);
    *((_QWORD *)&a60 + 1) = v105;
    *(_DWORD *)(v103 + 32) = a62;
    *(_QWORD *)(v103 + 48) = 0;
    *(_QWORD *)(v103 + 56) = 0;
    *(_QWORD *)(v103 + 40) = 0;
    *(_QWORD *)(v103 + 40) = *((_QWORD *)&a62 + 1);
    *((_QWORD *)&a62 + 1) = 0;
    *(_QWORD *)(v103 + 48) = a63;
    *(_QWORD *)&a63 = 0;
    v106 = *(_QWORD *)(v103 + 56);
    *(_QWORD *)(v103 + 56) = *((_QWORD *)&a63 + 1);
    *((_QWORD *)&a63 + 1) = v106;
    ++STACK[0x840];
    ++LODWORD(STACK[0x848]);
    if (*((_QWORD *)&a62 + 1))
      *((_QWORD *)&a62 + 1) = 0;
    v100 = (_anonymous_namespace_ *)a60;
    if ((_QWORD)a60 && (BYTE8(a60) & 1) != 0)
      v100 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)a60 + 40))();
    ++v101;
  }
  while (v101 != 96);
  if (*(_BYTE *)(a1[1] + 302))
  {
    if (!LOBYTE(STACK[0x860]))
      LOBYTE(STACK[0x860]) = 1;
    STACK[0x868] = 2;
  }
  STACK[0x7F0] = v66;
  re::DynamicString::setCapacity(&STACK[0x7F0], 0);
  STACK[0x9F0] = (unint64_t)"vertexShaderClearAll";
  STACK[0x9F8] = 20;
  re::DynamicString::operator=((re::DynamicString *)&STACK[0x7F0], (uint64_t)&STACK[0x9F0]);
  v107 = 0;
  while (!*((_BYTE *)&STACK[0x938] + v107))
  {
    if (++v107 == 8)
      goto LABEL_99;
  }
  STACK[0x810] = v66;
  re::DynamicString::setCapacity(&STACK[0x810], 0);
  STACK[0x9F0] = (unint64_t)"fragmentShaderClearAll";
  STACK[0x9F8] = 22;
  re::DynamicString::operator=((re::DynamicString *)&STACK[0x810], (uint64_t)&STACK[0x9F0]);
LABEL_99:
  LOBYTE(STACK[0x8C0]) = 1;
  RenderPipelineState = (_QWORD *)re::getOrCreateRenderPipelineState(a1[1], (uint64_t)&STACK[0x7A0]);
  (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v161 + 8) + 56))(**(_QWORD **)(v161 + 8), sel_setRenderPipelineState_, *RenderPipelineState);
  if (((v172 | v174) & 1) != 0)
  {
    DepthStencilState = (_QWORD *)re::getOrCreateDepthStencilState(a1[1], a1[3], (uint64_t)&a49, v109);
    (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v161 + 8) + 112))(**(_QWORD **)(v161 + 8), sel_setDepthStencilState_, *DepthStencilState);
    if (v168)
      (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v161 + 8) + 120))(**(_QWORD **)(v161 + 8), sel_setStencilReferenceValue_, v162);
  }
  if ((_BYTE)a49 && *((_QWORD *)&a49 + 1) && (a50 & 1) != 0)
    (*(void (**)(void))(**((_QWORD **)&a49 + 1) + 40))();
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&STACK[0x830]);
  if (STACK[0x810])
  {
    if ((STACK[0x818] & 1) != 0)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0x810] + 40))(STACK[0x810], STACK[0x820]);
    *(_OWORD *)&STACK[0x810] = 0u;
    *(_OWORD *)&STACK[0x820] = 0u;
  }
  if (STACK[0x7F0])
  {
    if ((STACK[0x7F8] & 1) != 0)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0x7F0] + 40))(STACK[0x7F0], STACK[0x800]);
    *(_OWORD *)&STACK[0x7F0] = 0u;
    *(_OWORD *)&STACK[0x800] = 0u;
  }
  if (LOBYTE(STACK[0x7C8]) && STACK[0x7D0])
  {
    if ((STACK[0x7D8] & 1) != 0)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0x7D0] + 40))(STACK[0x7D0], STACK[0x7E0]);
    *(_OWORD *)&STACK[0x7D0] = 0u;
    *(_OWORD *)&STACK[0x7E0] = 0u;
  }
  if (LOBYTE(STACK[0x7A0]) && STACK[0x7A8] && (STACK[0x7B0] & 1) != 0)
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0x7A8] + 40))(STACK[0x7A8], STACK[0x7B8]);
  (*(void (**)(_QWORD, char *, uint64_t))(*(_QWORD *)(v161 + 8) + 64))(**(_QWORD **)(v161 + 8), sel_setCullMode_, 2);
  (*(void (**)(_QWORD, char *, uint64_t))(*(_QWORD *)(v161 + 8) + 136))(**(_QWORD **)(v161 + 8), sel_setFrontFacingWinding_, 1);
  re::mtl::RenderCommandEncoder::setViewports(v161);
  re::setVertexAmplificationCount((_anonymous_namespace_ *)*(unsigned __int8 *)(a1[1] + 302), v160, a58, 0xFFFF, v161, v111);
  *(_QWORD *)&v112 = __PAIR64__(1.0, -1.0);
  LODWORD(v113) = -1.0;
  *((_QWORD *)&v112 + 1) = __PAIR64__(1.0, v170);
  *(_QWORD *)&v114 = __PAIR64__(-1.0, 1.0);
  DWORD1(v113) = -1.0;
  *((_QWORD *)&v113 + 1) = __PAIR64__(1.0, v170);
  *(_OWORD *)&STACK[0x9F0] = v112;
  *(_OWORD *)&STACK[0xA00] = v113;
  *((_QWORD *)&v114 + 1) = __PAIR64__(1.0, v170);
  __asm { FMOV            V0.4S, #1.0 }
  DWORD2(_Q0) = v170;
  *(_OWORD *)&STACK[0xA10] = v114;
  *(_OWORD *)&STACK[0xA20] = _Q0;
  (*(void (**)(_QWORD, char *, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)(v161 + 8) + 8))(**(_QWORD **)(v161 + 8), sel_setVertexBytes_length_atIndex_, &STACK[0x9F0], 64, 0);
  a62 = 0u;
  a63 = 0u;
  a61 = 0u;
  re::FrameContext::perFrameAlloc((re::FrameContext *)*a1, 0x80uLL, 0x80uLL, (uint64_t)&STACK[0x7A0]);
  v119 = STACK[0x7B0];
  v120 = STACK[0x7A0] + LODWORD(STACK[0x7A8]);
  *(_DWORD *)(v120 + 16) = 0;
  *(_DWORD *)(v120 + 28) = 1;
  *(_OWORD *)(v120 + 32) = a60;
  *(_OWORD *)(v120 + 48) = a61;
  *(_OWORD *)(v120 + 64) = a62;
  *(_OWORD *)(v120 + 80) = a63;
  (*(void (**)(_QWORD, char *, unint64_t))(*(_QWORD *)(v161 + 8) + 16))(**(_QWORD **)(v161 + 8), sel_setVertexBuffer_offset_atIndex_, v119);
  a50 = 0u;
  a51 = 0u;
  re::FrameContext::perFrameAlloc((re::FrameContext *)*a1, 0x400uLL, 0x100uLL, (uint64_t)&STACK[0x7A0]);
  v121 = STACK[0x7B0];
  v122 = STACK[0x7A0] + LODWORD(STACK[0x7A8]);
  *(_OWORD *)v122 = xmmword_2260E5F10;
  *(_OWORD *)(v122 + 16) = xmmword_2260E5F20;
  *(_OWORD *)(v122 + 32) = xmmword_2260E5F40;
  *(_OWORD *)(v122 + 48) = xmmword_2260E5D70;
  *(_OWORD *)(v122 + 64) = xmmword_2260E5F10;
  *(_OWORD *)(v122 + 80) = xmmword_2260E5F20;
  *(_OWORD *)(v122 + 96) = xmmword_2260E5F40;
  *(_OWORD *)(v122 + 112) = xmmword_2260E5D70;
  *(_OWORD *)(v122 + 128) = xmmword_2260E5F10;
  *(_OWORD *)(v122 + 144) = xmmword_2260E5F20;
  *(_OWORD *)(v122 + 160) = xmmword_2260E5F40;
  *(_OWORD *)(v122 + 176) = xmmword_2260E5D70;
  *(_OWORD *)(v122 + 192) = xmmword_2260E5F10;
  *(_OWORD *)(v122 + 208) = xmmword_2260E5F20;
  *(_OWORD *)(v122 + 224) = xmmword_2260E5F40;
  *(_OWORD *)(v122 + 240) = xmmword_2260E5D70;
  *(_OWORD *)(v122 + 256) = xmmword_2260E5F10;
  *(_OWORD *)(v122 + 272) = xmmword_2260E5F20;
  *(_OWORD *)(v122 + 288) = xmmword_2260E5F40;
  *(_OWORD *)(v122 + 304) = xmmword_2260E5D70;
  *(_OWORD *)(v122 + 320) = xmmword_2260E5F10;
  *(_OWORD *)(v122 + 336) = xmmword_2260E5F20;
  *(_OWORD *)(v122 + 352) = xmmword_2260E5F40;
  *(_OWORD *)(v122 + 368) = xmmword_2260E5D70;
  *(_OWORD *)(v122 + 384) = xmmword_2260E5F10;
  *(_OWORD *)(v122 + 400) = xmmword_2260E5F20;
  *(_OWORD *)(v122 + 416) = xmmword_2260E5F40;
  *(_OWORD *)(v122 + 432) = xmmword_2260E5D70;
  *(_OWORD *)(v122 + 448) = xmmword_2260E5F10;
  *(_OWORD *)(v122 + 464) = xmmword_2260E5F20;
  *(_OWORD *)(v122 + 480) = xmmword_2260E5F40;
  *(_OWORD *)(v122 + 496) = xmmword_2260E5D70;
  *(_OWORD *)(v122 + 512) = xmmword_2260E5F10;
  *(_OWORD *)(v122 + 528) = xmmword_2260E5F20;
  *(_OWORD *)(v122 + 544) = xmmword_2260E5F40;
  *(_OWORD *)(v122 + 560) = xmmword_2260E5D70;
  *(_OWORD *)(v122 + 576) = xmmword_2260E5F10;
  *(_OWORD *)(v122 + 592) = xmmword_2260E5F20;
  *(_OWORD *)(v122 + 608) = xmmword_2260E5F40;
  *(_OWORD *)(v122 + 624) = xmmword_2260E5D70;
  *(_OWORD *)(v122 + 640) = xmmword_2260E5F10;
  *(_OWORD *)(v122 + 656) = xmmword_2260E5F20;
  *(_OWORD *)(v122 + 672) = xmmword_2260E5F40;
  *(_OWORD *)(v122 + 688) = xmmword_2260E5D70;
  *(_OWORD *)(v122 + 704) = xmmword_2260E5F10;
  *(_OWORD *)(v122 + 720) = xmmword_2260E5F20;
  *(_OWORD *)(v122 + 736) = xmmword_2260E5F40;
  *(_OWORD *)(v122 + 752) = xmmword_2260E5D70;
  *(_OWORD *)(v122 + 880) = 0u;
  *(_OWORD *)(v122 + 896) = 0u;
  *(_OWORD *)(v122 + 848) = 0u;
  *(_OWORD *)(v122 + 864) = 0u;
  *(_OWORD *)(v122 + 816) = 0u;
  *(_OWORD *)(v122 + 832) = 0u;
  *(_OWORD *)(v122 + 784) = 0u;
  *(_OWORD *)(v122 + 800) = 0u;
  *(_OWORD *)(v122 + 768) = 0u;
  *(_DWORD *)(v122 + 940) = v166;
  *(_DWORD *)(v122 + 944) = v160;
  *(_OWORD *)(v122 + 960) = 0u;
  *(_OWORD *)(v122 + 1008) = a51;
  *(_OWORD *)(v122 + 976) = a49;
  *(_OWORD *)(v122 + 992) = a50;
  (*(void (**)(_QWORD, char *, unint64_t))(*(_QWORD *)(v161 + 8) + 16))(**(_QWORD **)(v161 + 8), sel_setVertexBuffer_offset_atIndex_, v121);
  re::FrameContext::perFrameAlloc((re::FrameContext *)*a1, 0xCuLL, 0x10uLL, (uint64_t)&STACK[0x9C0]);
  v123 = LODWORD(STACK[0x9C8]);
  v124 = STACK[0x9C0] + v123;
  *(_QWORD *)v124 = 0x200010000;
  *(_QWORD *)&v125 = STACK[0x940];
  *(_QWORD *)&v126 = STACK[0x950];
  v173 = STACK[0x950];
  v175 = STACK[0x940];
  *(_QWORD *)&v127 = STACK[0x960];
  *(_QWORD *)&v128 = STACK[0x970];
  v169 = STACK[0x970];
  v171 = STACK[0x960];
  *(_QWORD *)&v129 = STACK[0x980];
  *(_QWORD *)&v130 = STACK[0x990];
  v165 = (re::DynamicString *)STACK[0x990];
  v167 = STACK[0x980];
  *(_QWORD *)&v131 = STACK[0x9A0];
  v164 = STACK[0x9A0];
  DWORD2(v125) = STACK[0x948];
  v159 = v125;
  v132 = v126;
  DWORD2(v132) = STACK[0x958];
  v158 = v132;
  v133 = v127;
  DWORD2(v133) = STACK[0x968];
  v157 = v133;
  v134 = v128;
  DWORD2(v134) = STACK[0x978];
  v156 = v134;
  v135 = v129;
  DWORD2(v135) = STACK[0x988];
  vars0 = v135;
  v136 = v130;
  DWORD2(v136) = STACK[0x998];
  v154 = v136;
  v137 = v131;
  DWORD2(v137) = STACK[0x9A8];
  v153 = v137;
  *(_QWORD *)&v137 = STACK[0x9B0];
  v163 = STACK[0x9B0];
  DWORD2(v137) = STACK[0x9B8];
  v152 = v137;
  *(_DWORD *)(v124 + 8) = 196610;
  v138 = *(_OWORD *)&STACK[0x950];
  *(_OWORD *)&STACK[0x7A0] = *(_OWORD *)&STACK[0x940];
  *(_OWORD *)&STACK[0x7B0] = v138;
  v139 = *(_OWORD *)&STACK[0x970];
  *(_OWORD *)&STACK[0x7C0] = *(_OWORD *)&STACK[0x960];
  *(_OWORD *)&STACK[0x7D0] = v139;
  v140 = *(_OWORD *)&STACK[0x990];
  *(_OWORD *)&STACK[0x7E0] = *(_OWORD *)&STACK[0x980];
  *(_OWORD *)&STACK[0x7F0] = v140;
  v141 = *(_OWORD *)&STACK[0x9B0];
  *(_OWORD *)&STACK[0x800] = *(_OWORD *)&STACK[0x9A0];
  *(_OWORD *)&STACK[0x810] = v141;
  re::FrameContext::perFrameAlloc((re::FrameContext *)*a1, 0x20uLL, 0x10uLL, (uint64_t)&a46);
  v142.i64[0] = v171;
  v142.i64[1] = v169;
  v143.i64[0] = v175;
  v143.i64[1] = v173;
  v144 = vuzp1q_s32(v143, v142);
  v143.i64[0] = v164;
  v143.i64[1] = v163;
  v145.i64[0] = v167;
  v145.i64[1] = (uint64_t)v165;
  v146 = (int32x4_t *)((char *)a46 + a47);
  *v146 = v144;
  v146[1] = vuzp1q_s32(v145, v143);
  (*(void (**)(_QWORD, char *, uint64_t))(*(_QWORD *)(v161 + 8) + 88))(**(_QWORD **)(v161 + 8), sel_setFragmentBuffer_offset_atIndex_, a48);
  re::FrameContext::perFrameAlloc((re::FrameContext *)*a1, 0x40uLL, 0x10uLL, (uint64_t)&a43);
  v147 = (uint64_t *)(a43 + a44);
  *v147 = v175;
  v147[1] = v173;
  v147[2] = v171;
  v147[3] = v169;
  v147[4] = v167;
  v147[5] = (uint64_t)v165;
  v147[6] = v164;
  v147[7] = v163;
  (*(void (**)(_QWORD, char *, uint64_t))(*(_QWORD *)(v161 + 8) + 88))(**(_QWORD **)(v161 + 8), sel_setFragmentBuffer_offset_atIndex_, a45);
  re::FrameContext::perFrameAlloc((re::FrameContext *)*a1, 0x80uLL, 0x10uLL, (uint64_t)&a40);
  v148 = (__int128 *)(a40 + a41);
  *v148 = v159;
  v148[1] = v158;
  v148[2] = v157;
  v148[3] = v156;
  v148[4] = vars0;
  v148[5] = v154;
  v148[6] = v153;
  v148[7] = v152;
  (*(void (**)(_QWORD, char *, uint64_t))(*(_QWORD *)(v161 + 8) + 88))(**(_QWORD **)(v161 + 8), sel_setFragmentBuffer_offset_atIndex_, a42);
  re::FrameContext::perFrameAlloc((re::FrameContext *)*a1, 0x80uLL, 0x10uLL, (uint64_t)&a37);
  v149 = (_OWORD *)(a37 + a38);
  v149[3] = *(_OWORD *)&STACK[0x7D0];
  v149[2] = *(_OWORD *)&STACK[0x7C0];
  v149[1] = *(_OWORD *)&STACK[0x7B0];
  *v149 = *(_OWORD *)&STACK[0x7A0];
  v149[7] = *(_OWORD *)&STACK[0x810];
  v149[6] = *(_OWORD *)&STACK[0x800];
  v149[5] = *(_OWORD *)&STACK[0x7F0];
  v149[4] = *(_OWORD *)&STACK[0x7E0];
  (*(void (**)(_QWORD, char *, uint64_t))(*(_QWORD *)(v161 + 8) + 88))(**(_QWORD **)(v161 + 8), sel_setFragmentBuffer_offset_atIndex_, a39);
  if (v160)
  {
    if (v176 / a58 <= 1)
      v150 = 1;
    else
      v150 = v176 / a58;
  }
  else
  {
    v150 = v176;
  }
  (*(void (**)(_QWORD, char *, uint64_t, uint64_t, _QWORD, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v161 + 8) + 232))(**(_QWORD **)(v161 + 8), sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_baseVertex_baseInstance_, 3, 6, 0, STACK[0x9D0], v123, v150);
  if (a54 && a55)
    (*(void (**)(void))(*(_QWORD *)a54 + 40))();
  result = a57;
  if (a57)
  {
    if (a58)
      return (*(uint64_t (**)(void))(*(_QWORD *)a57 + 40))();
  }
  return result;
}

_QWORD *re::FixedArray<re::mtl::Viewport>::init<>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;

  *result = a2;
  result[1] = a3;
  if (!a3)
    return result;
  if (a3 >= 0xAAAAAAAAAAAAAABLL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 24, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 24 * a3, 4);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *result = 0;
      result[1] = 0;
      result[2] = 0x3F80000000000000;
      result += 3;
      --v6;
    }
    while (v6);
  }
  *result = 0;
  result[1] = 0;
  result[2] = 0x3F80000000000000;
  return result;
}

void re::RenderGraphContext::releaseRenderTargetsAfterSetup(re::RenderGraphContext *this)
{
  unint64_t v1;
  unint64_t v2;
  char **v3;
  uint64_t v4;
  unint64_t v5;
  re::BufferTable *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  const re::WeakStringID *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[12];
  __int16 v33;
  int v34;
  __int16 v35;
  unint64_t v36;
  __int16 v37;
  re::BufferTable *v38;
  char *v39[2];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v3 = v39;
  v44 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*((_QWORD *)this + 147) + 136);
  v5 = *((unsigned int *)this + 12);
  v6 = *(re::BufferTable **)(v4 + 352);
  if ((unint64_t)v6 <= v5)
    goto LABEL_23;
  v7 = *(_QWORD *)(v4 + 368);
  v8 = v7 + 192 * v5;
  v10 = *(_QWORD *)(v8 + 56);
  v9 = (unint64_t *)(v8 + 56);
  if (v10)
  {
    v12 = 0;
    v13 = (_QWORD *)(v7 + 192 * v5 + 72);
    v14 = 52;
    v28 = v13;
    do
    {
      v15 = *((_QWORD *)this + 147);
      v16 = *(_QWORD *)(v15 + 136);
      v17 = *(_QWORD *)(v16 + 296);
      v18 = *(unsigned int *)(*v13 + v14);
      v5 = *(_QWORD *)(v17 + 16);
      if (v5 <= v18)
      {
        v29 = 0;
        v43 = 0u;
        v41 = 0u;
        v42 = 0u;
        *(_OWORD *)v39 = 0u;
        v40 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v32 = 136315906;
        *(_QWORD *)&v32[4] = "operator[]";
        v33 = 1024;
        v34 = 789;
        v35 = 2048;
        v36 = v18;
        v37 = 2048;
        v38 = (re::BufferTable *)v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_21:
        v31 = 0;
        v43 = 0u;
        v41 = 0u;
        v42 = 0u;
        *(_OWORD *)v39 = 0u;
        v40 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v32 = 136315906;
        *(_QWORD *)&v32[4] = "operator[]";
        v33 = 1024;
        v34 = 468;
        v35 = 2048;
        v36 = v1;
        v37 = 2048;
        v38 = (re::BufferTable *)v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_22:
        v31 = 0;
        v43 = 0u;
        v41 = 0u;
        v42 = 0u;
        *(_OWORD *)v39 = 0u;
        v40 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v32 = 136315906;
        *(_QWORD *)&v32[4] = "operator[]";
        v33 = 1024;
        v34 = 468;
        v35 = 2048;
        v36 = v1;
        v37 = 2048;
        v38 = (re::BufferTable *)v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_23:
        v29 = 0;
        *((_OWORD *)v3 + 4) = 0u;
        v41 = 0u;
        v42 = 0u;
        *(_OWORD *)v39 = 0u;
        v40 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v32 = 136315906;
        *(_QWORD *)&v32[4] = "operator[]";
        v33 = 1024;
        v34 = 789;
        v35 = 2048;
        v36 = v5;
        v37 = 2048;
        v38 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v19 = *(_QWORD *)(v17 + 32);
      if (*(_DWORD *)(v19 + 48 * v18 + 36) == *((_DWORD *)this + 12))
      {
        v20 = *(_DWORD *)(v19 + 48 * v18);
        if (v20 == 1)
        {
          v25 = v19 + 48 * v18;
          v26 = *(_QWORD *)(v25 + 8);
          v5 = v25 + 8;
          v29 = v26 >> 1;
          v30 = *(_QWORD *)(v5 + 16);
          v6 = (re::BufferTable *)re::RenderGraphExecutable::bufferDescription(v15, (uint64_t)&v29);
          v1 = *((_QWORD *)this + 4);
          v2 = HIDWORD(v30);
          re::StringID::StringID((re::StringID *)v39, (const StringID *)v5);
          re::RenderGraphResourceAllocationManager::releaseBuffer((_anonymous_namespace_ *)v1, v2, v39[1]);
          re::StringID::destroyString((re::StringID *)v39);
          if (*(_DWORD *)v6 != 2)
          {
            v27 = *((_QWORD *)this + 147);
            v1 = *(unsigned int *)(v19 + 48 * v18 + 28);
            v2 = *(_QWORD *)(v27 + 80);
            if (v2 <= v1)
              goto LABEL_22;
            v1 = *(_QWORD *)(v27 + 88) + 16 * v1;

            *(_QWORD *)v1 = 0;
            *(_QWORD *)(v1 + 8) = 0;
            if (*((_BYTE *)v6 + 16))
            {
              v6 = (re::BufferTable *)(*(_QWORD *)this + 480);
              re::StringID::StringID((re::StringID *)v39, (const StringID *)v5);
              *(_QWORD *)v32 = (unint64_t)v39[0] >> 1;
              re::BufferTable::removeBuffer(v6, (const re::WeakStringID *)v32);
LABEL_16:
              *(_QWORD *)v32 = 0;
              re::StringID::destroyString((re::StringID *)v39);
            }
          }
LABEL_17:
          v13 = v28;
          goto LABEL_18;
        }
        if (!v20)
        {
          v21 = v19 + 48 * v18;
          v22 = *(_QWORD *)(v21 + 8);
          v5 = v21 + 8;
          v39[0] = (char *)(v22 >> 1);
          v39[1] = *(char **)(v5 + 16);
          re::RenderGraphResourceDescriptions::targetDescriptionSource(v16, (uint64_t)v39, (uint64_t)&v29);
          v6 = (re::BufferTable *)re::RenderGraphExecutable::targetDescription(*((_QWORD *)this + 147), (uint64_t)&v29);
          v1 = *((_QWORD *)this + 4);
          v2 = HIDWORD(v30);
          re::StringID::StringID((re::StringID *)v39, (const StringID *)v5);
          re::RenderGraphResourceAllocationManager::releaseTexture((_anonymous_namespace_ *)v1, v2, v39[1]);
          re::StringID::destroyString((re::StringID *)v39);
          if (*(_DWORD *)v6 != 2)
          {
            v23 = *((_QWORD *)this + 147);
            v1 = *(unsigned int *)(v19 + 48 * v18 + 28);
            v2 = *(_QWORD *)(v23 + 56);
            if (v2 <= v1)
              goto LABEL_21;
            v2 = *(_QWORD *)(v23 + 64);

            *(_QWORD *)(v2 + 8 * v1) = 0;
            if (*((_BYTE *)v6 + 36))
            {
              v6 = (re::BufferTable *)(*(_QWORD *)this + 368);
              re::StringID::StringID((re::StringID *)v39, (const StringID *)v5);
              *(_QWORD *)v32 = (unint64_t)v39[0] >> 1;
              re::DynamicTextureTableRemove(v6, (re::TextureTable *)v32, v24);
              goto LABEL_16;
            }
          }
          goto LABEL_17;
        }
      }
LABEL_18:
      ++v12;
      v14 += 64;
    }
    while (*v9 > v12);
  }
}

void re::RenderGraphContext::renderPassDescriptor(id *this, unint64_t *a2, _QWORD *a3)
{
  unsigned int *v3;
  int *v4;
  uint64_t v5;
  unsigned int *v6;
  unint64_t v7;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char **v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  id v26;
  id v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  id v31;
  BOOL v32;
  id v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  id v37;
  BOOL v38;
  unint64_t v39;
  id v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  id v44;
  int v45;
  id v46;
  BOOL v47;
  int v48;
  uint64_t v50;
  uint64_t v51;
  re *v52;
  unsigned __int8 v53;
  NSObject *v54;
  int v55;
  NSObject *v56;
  const char *v57;
  int v58;
  int v59;
  uint64_t v61;
  re *v62;
  unsigned __int8 v63;
  NSObject *v64;
  int v65;
  uint64_t v66;
  re *v67;
  unsigned __int8 v68;
  NSObject *v69;
  int v70;
  unsigned int *v71;
  unsigned int *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  _DWORD *v78;
  unsigned int v79;
  _BOOL4 v81;
  id v82;
  id v83;
  id v84;
  const char *v85;
  uint64_t v86;
  BOOL v87;
  _BOOL4 v89;
  re *v90;
  id v91;
  id v92;
  id v93;
  uint64_t v94;
  BOOL v95;
  _BOOL4 v97;
  re *v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unsigned __int8 v113;
  NSObject *v114;
  NSObject *v115;
  const char *v116;
  unsigned __int8 v117;
  NSObject *v118;
  id v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  id v130;
  unsigned int **v131;
  _QWORD *v132;
  uint64_t v134;
  unsigned int v135;
  int v136;
  re::RenderGraphContext *v137;
  int v138;
  uint64_t v139;
  id v140;
  id v141;
  char v142[8];
  uint64_t v143;
  uint64_t v144;
  _BYTE buf[40];
  uint64_t v146;
  _BYTE v147[18];
  __int16 v148;
  unint64_t v149;
  __int16 v150;
  unint64_t v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;

  v157 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a2[147] + 136);
  v6 = (unsigned int *)*((unsigned int *)a2 + 12);
  v7 = *(_QWORD *)(v5 + 352);
  if (v7 <= (unint64_t)v6)
  {
LABEL_246:
    *(_QWORD *)v147 = 0;
    v155 = 0u;
    v156 = 0u;
    v153 = 0u;
    v154 = 0u;
    v152 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "operator[]";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 789;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = v6;
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_247:
    *(_QWORD *)v147 = 0;
    v155 = 0u;
    v156 = 0u;
    v153 = 0u;
    v154 = 0u;
    v152 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "operator[]";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 789;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = v6;
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_248;
  }
  v10 = *(_QWORD *)(v5 + 368);
  v11 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD690], sel_alloc), sel_init);
  *this = v11;
  if (*(_BYTE *)(v10 + 192 * v6 + 186))
    objc_msgSend(v11, sel_setSkipEmptyTilesOnClearEnabled_, 1);
  v134 = v10;
  v135 = v6;
  v12 = v10 + 192 * v6;
  v15 = *(_QWORD *)(v12 + 56);
  v14 = v12 + 56;
  v13 = v15;
  v137 = (re::RenderGraphContext *)this;
  if (!v15)
  {
    v139 = 0;
    goto LABEL_230;
  }
  v139 = 0;
  v132 = (_QWORD *)v14;
  v3 = *(unsigned int **)(v14 + 16);
  v131 = (unsigned int **)(v14 + 16);
  v6 = &v3[16 * v13];
  v138 = *(unsigned __int8 *)(a2[1] + 304);
  v136 = *((_DWORD *)a2 + 12);
  v16 = &selRef_newBufferWithBytes_length_options_;
  v17 = 0x1F2ECC000uLL;
  do
  {
    v18 = *(_QWORD *)(a2[147] + 136);
    v19 = *(_QWORD *)(v18 + 296);
    v20 = v3[13];
    v7 = *(_QWORD *)(v19 + 16);
    if (v7 <= v20)
    {
      *(_QWORD *)v147 = 0;
      v155 = 0u;
      v156 = 0u;
      v153 = 0u;
      v154 = 0u;
      v152 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "operator[]";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 789;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v20;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_242:
      *(_QWORD *)v147 = 0;
      v155 = 0u;
      v156 = 0u;
      v153 = 0u;
      v154 = 0u;
      v152 = 0u;
      v106 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "operator[]";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 789;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v7;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_243:
      v144 = 0;
      v155 = 0u;
      v156 = 0u;
      v153 = 0u;
      v154 = 0u;
      v152 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v147 = 136315906;
      *(_QWORD *)&v147[4] = "operator[]";
      *(_WORD *)&v147[12] = 1024;
      *(_DWORD *)&v147[14] = 789;
      v148 = 2048;
      v149 = v20;
      v150 = 2048;
      v151 = v106;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_244:
      v144 = 0;
      v155 = 0u;
      v156 = 0u;
      v153 = 0u;
      v154 = 0u;
      v152 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v147 = 136315906;
      *(_QWORD *)&v147[4] = "operator[]";
      *(_WORD *)&v147[12] = 1024;
      *(_DWORD *)&v147[14] = 789;
      v148 = 2048;
      v149 = v20;
      v150 = 2048;
      v151 = v106;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_245:
      v144 = 0;
      v155 = 0u;
      v156 = 0u;
      v153 = 0u;
      v154 = 0u;
      v152 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v147 = 136315906;
      *(_QWORD *)&v147[4] = "operator[]";
      *(_WORD *)&v147[12] = 1024;
      *(_DWORD *)&v147[14] = 789;
      v148 = 2048;
      v149 = v20;
      v150 = 2048;
      v151 = v106;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_246;
    }
    v21 = *(_QWORD *)(v19 + 32);
    if (*(_DWORD *)(v21 + 48 * v20) == 1)
    {
      if (v3[1] == 9)
      {
        v22 = v21 + 48 * v20;
        *(_QWORD *)&v152 = *(_QWORD *)(v22 + 8) >> 1;
        *((_QWORD *)&v152 + 1) = *(_QWORD *)(v22 + 24);
        v4 = (int *)*(id *)re::RenderGraphContext::metalBuffer((uint64_t)a2, (uint64_t)&v152);
        objc_msgSend(*this, sel_setVisibilityResultBuffer_, v4);
        if (v4)

      }
    }
    else
    {
      v23 = v21 + 48 * v20;
      *(_QWORD *)&v152 = *(_QWORD *)(v23 + 8) >> 1;
      *((_QWORD *)&v152 + 1) = *(_QWORD *)(v23 + 24);
      re::RenderGraphResourceDescriptions::targetDescriptionSource(v18, (uint64_t)&v152, (uint64_t)v147);
      v24 = re::RenderGraphExecutable::targetDescription(a2[147], (uint64_t)v147);
      v4 = (int *)v24;
      v25 = v3[1];
      switch(v25)
      {
        case 3u:
          v32 = (*(_DWORD *)(v24 + 4) - 253) > 9 || ((1 << (*(_BYTE *)(v24 + 4) + 3)) & 0x385) == 0;
          if (!v32 || !*((_BYTE *)v3 + 33))
          {
            v26 = *this;
            v33 = objc_msgSend(*this, v16[213]);
            re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)v147, 0, 0, (id *)&v152);
            objc_msgSend(v33, sel_setTexture_, (_QWORD)v152);
            if ((_QWORD)v152)

            re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)v147, 0, 0, (id *)&v152);
            v34 = (unint64_t)objc_msgSend((id)v152, sel_protectionOptions);
            if ((_QWORD)v152)

            v139 |= v34;
            if (*v4 != 4 && *v4 != 3)
            {
              v35 = *(_DWORD *)(v21 + 48 * v20 + 36);
              if (*((_BYTE *)v3 + 32))
                v36 = 2;
              else
                v36 = v4[15];
              v20 = (unint64_t)&selRef_newBufferWithBytes_length_options_;
              objc_msgSend(objc_msgSend(v26, sel_stencilAttachment), sel_setLoadAction_, v36);
              if ((v4[17] & 0x70) == 0x30)
              {
                objc_msgSend(objc_msgSend(v26, sel_stencilAttachment), sel_setStoreAction_, 0);
                v16 = &selRef_newBufferWithBytes_length_options_;
                v37 = objc_msgSend(v26, (SEL)&selRef_updateOnQueue);
              }
              else
              {
                v45 = *v4;
                v46 = objc_msgSend(v26, sel_stencilAttachment);
                v47 = v136 != v35 || v45 == 2;
                v16 = &selRef_newBufferWithBytes_length_options_;
                v66 = v47;
                objc_msgSend(v46, sel_setStoreAction_, v66);
                v37 = objc_msgSend(v26, (SEL)&selRef_updateOnQueue);
              }
              objc_msgSend(v37, sel_setClearStencil_, v3[4]);
              v51 = v4[6];
              if (!v138)
              {
                if ((_DWORD)v51 == 1)
                  goto LABEL_107;
                if ((_DWORD)v51)
                {
                  v67 = (re *)objc_msgSend(v26, sel_setRenderTargetArrayLength_);
                  do
                    v68 = __ldaxr((unsigned __int8 *)&unk_25411A01B);
                  while (__stlxr(1u, (unsigned __int8 *)&unk_25411A01B));
                  if ((v68 & 1) == 0)
                  {
                    v69 = *re::graphicsLogObjects(v67);
                    if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
                    {
                      re::RenderGraphContext::resourceFromIndex((re::RenderGraphContext *)a2, *(unsigned int *)&v147[8], (uint64_t)&v152);
                      re::StringID::StringID((re::StringID *)v142, (const StringID *)((char *)&v152 + 8));
                      v70 = v4[6];
                      *(_DWORD *)buf = 136315394;
                      *(_QWORD *)&buf[4] = v143;
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = v70;
                      v56 = v69;
                      v57 = "Stencil target (%s) has arrayLength of %d, but device does not support Layered Rendering.";
LABEL_118:
                      _os_log_impl(&dword_224FE9000, v56, OS_LOG_TYPE_DEFAULT, v57, buf, 0x12u);
                      re::StringID::destroyString((re::StringID *)v142);
                      re::StringID::destroyString((re::StringID *)((char *)&v152 + 8));
                    }
                  }
LABEL_107:
                  this = (id *)v137;
                  v17 = 0x1F2ECC000;
                  break;
                }
LABEL_112:
                objc_msgSend(v26, sel_setRenderTargetArrayLength_, 0);
                goto LABEL_107;
              }
LABEL_106:
              objc_msgSend(v26, sel_setRenderTargetArrayLength_, v51);
              goto LABEL_107;
            }
LABEL_51:
            v4 = (int *)a2[147];
            re::DynamicString::format((re::DynamicString *)"TargetHandle in use reached the end of the frame without being specified.", (re::DynamicString *)&v152);
            re::RenderGraphExecutable::addError((uint64_t)v4, (uint64_t)&v152);
            v16 = &selRef_newBufferWithBytes_length_options_;
            if ((_QWORD)v152 && (BYTE8(v152) & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v152 + 40))(v152, v153);
            goto LABEL_107;
          }
          break;
        case 2u:
          v38 = (*(_DWORD *)(v24 + 4) - 250) > 0xA || ((1 << (*(_BYTE *)(v24 + 4) + 6)) & 0x425) == 0;
          if (!v38 || !*((_BYTE *)v3 + 33))
          {
            v39 = v17;
            v26 = *this;
            v40 = objc_msgSend(*this, (SEL)(v39 + 3656));
            re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)v147, 0, 0, (id *)&v152);
            objc_msgSend(v40, sel_setTexture_, (_QWORD)v152);
            if ((_QWORD)v152)

            re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)v147, 0, 0, (id *)&v152);
            v41 = (unint64_t)objc_msgSend((id)v152, sel_protectionOptions);
            if ((_QWORD)v152)

            v139 |= v41;
            if (*v4 == 4 || *v4 == 3)
              goto LABEL_51;
            v42 = *(_DWORD *)(v21 + 48 * v20 + 36);
            if (*((_BYTE *)v3 + 32))
              v43 = 2;
            else
              v43 = v4[15];
            v20 = (unint64_t)&selRef_setRate_;
            objc_msgSend(objc_msgSend(v26, sel_depthAttachment), sel_setLoadAction_, v43);
            if ((v4[17] & 0x70) == 0x30)
            {
              v44 = objc_msgSend(v26, sel_depthAttachment);
              goto LABEL_80;
            }
            v48 = *v4;
            v44 = objc_msgSend(v26, sel_depthAttachment);
            if (v136 != v42 || v48 == 2)
              v50 = 1;
            else
LABEL_80:
              v50 = 0;
            objc_msgSend(v44, sel_setStoreAction_, v50);
            v16 = &selRef_newBufferWithBytes_length_options_;
            objc_msgSend(objc_msgSend(v26, sel_depthAttachment), sel_setClearDepth_, *((float *)v3 + 4));
            v51 = v4[6];
            if (!v138)
            {
              if ((_DWORD)v51 == 1)
                goto LABEL_107;
              if ((_DWORD)v51)
              {
                v52 = (re *)objc_msgSend(v26, sel_setRenderTargetArrayLength_);
                do
                  v53 = __ldaxr((unsigned __int8 *)&unk_25411A01A);
                while (__stlxr(1u, (unsigned __int8 *)&unk_25411A01A));
                if ((v53 & 1) == 0)
                {
                  v54 = *re::graphicsLogObjects(v52);
                  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
                  {
                    re::RenderGraphContext::resourceFromIndex((re::RenderGraphContext *)a2, *(unsigned int *)&v147[8], (uint64_t)&v152);
                    re::StringID::StringID((re::StringID *)v142, (const StringID *)((char *)&v152 + 8));
                    v55 = v4[6];
                    *(_DWORD *)buf = 136315394;
                    *(_QWORD *)&buf[4] = v143;
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v55;
                    v56 = v54;
                    v57 = "Depth target (%s) has arrayLength of %d, but device does not support Layered Rendering.";
                    goto LABEL_118;
                  }
                }
                goto LABEL_107;
              }
              goto LABEL_112;
            }
            goto LABEL_106;
          }
          break;
        case 1u:
          re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)v147, 0, 0, (id *)&v152);
          if ((_QWORD)v152)
          {

            v26 = *this;
            v27 = objc_msgSend(objc_msgSend(*this, sel_colorAttachments), sel_objectAtIndexedSubscript_, *v3);
            re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)v147, 0, 0, (id *)&v152);
            objc_msgSend(v27, sel_setTexture_, (_QWORD)v152);
            if ((_QWORD)v152)

            re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)v147, 0, 0, (id *)&v152);
            v28 = (unint64_t)objc_msgSend((id)v152, sel_protectionOptions);
            if ((_QWORD)v152)

            v139 |= v28;
            if (*v4 != 4 && *v4 != 3)
            {
              v29 = *(_DWORD *)(v21 + 48 * v20 + 36);
              if (*((_BYTE *)v3 + 32))
                v30 = 2;
              else
                v30 = v4[15];
              v20 = (unint64_t)&selRef_setRate_;
              objc_msgSend(objc_msgSend(objc_msgSend(v26, sel_colorAttachments), sel_objectAtIndexedSubscript_, *v3), sel_setLoadAction_, v30);
              if ((v4[17] & 0x70) == 0x30)
              {
                v31 = objc_msgSend(objc_msgSend(v26, sel_colorAttachments), sel_objectAtIndexedSubscript_, *v3);
                goto LABEL_95;
              }
              v58 = v29;
              v59 = *v4;
              v31 = objc_msgSend(objc_msgSend(v26, sel_colorAttachments), sel_objectAtIndexedSubscript_, *v3);
              if (v136 != v58 || v59 == 2)
                v61 = 1;
              else
LABEL_95:
                v61 = 0;
              objc_msgSend(v31, sel_setStoreAction_, v61);
              v16 = &selRef_newBufferWithBytes_length_options_;
              objc_msgSend(objc_msgSend(objc_msgSend(v26, sel_colorAttachments), sel_objectAtIndexedSubscript_, *v3), sel_setClearColor_, *((float *)v3 + 4), *((float *)v3 + 5), *((float *)v3 + 6), *((float *)v3 + 7));
              v51 = v4[6];
              if (!v138)
              {
                if ((_DWORD)v51 == 1)
                  goto LABEL_107;
                if ((_DWORD)v51)
                {
                  v62 = (re *)objc_msgSend(v26, sel_setRenderTargetArrayLength_);
                  do
                    v63 = __ldaxr((unsigned __int8 *)&unk_25411A019);
                  while (__stlxr(1u, (unsigned __int8 *)&unk_25411A019));
                  if ((v63 & 1) == 0)
                  {
                    v64 = *re::graphicsLogObjects(v62);
                    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
                    {
                      re::RenderGraphContext::resourceFromIndex((re::RenderGraphContext *)a2, *(unsigned int *)&v147[8], (uint64_t)&v152);
                      re::StringID::StringID((re::StringID *)v142, (const StringID *)((char *)&v152 + 8));
                      v65 = v4[6];
                      *(_DWORD *)buf = 136315394;
                      *(_QWORD *)&buf[4] = v143;
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = v65;
                      v56 = v64;
                      v57 = "Color target (%s) has arrayLength of %d, but device does not support Layered Rendering.";
                      goto LABEL_118;
                    }
                  }
                  goto LABEL_107;
                }
                goto LABEL_112;
              }
              goto LABEL_106;
            }
            goto LABEL_51;
          }
          v4 = (int *)a2[147];
          re::RenderGraphContext::resourceFromIndex((re::RenderGraphContext *)a2, *(unsigned int *)&v147[8], (uint64_t)&v152);
          re::StringID::StringID((re::StringID *)v142, (const StringID *)((char *)&v152 + 8));
          re::DynamicString::format((re::DynamicString *)"Target (%s) used to create renderPassDescriptor is not valid.", (re::DynamicString *)buf, v143);
          re::RenderGraphExecutable::addError((uint64_t)v4, (uint64_t)buf);
          if (*(_QWORD *)buf)
          {
            if ((buf[8] & 1) != 0)
              (*(void (**)(void))(**(_QWORD **)buf + 40))();
            memset(buf, 0, 32);
          }
          re::StringID::destroyString((re::StringID *)v142);
          re::StringID::destroyString((re::StringID *)((char *)&v152 + 8));
          break;
        default:
          break;
      }
    }
    v3 += 16;
  }
  while (v3 != v6);
  if (*v132)
  {
    v71 = *v131;
    v72 = &(*v131)[16 * *v132];
    v3 = (unsigned int *)byte_25411A01D;
    v6 = (unsigned int *)&unk_25411A01C;
    while (1)
    {
      v73 = *(_QWORD *)(*(_QWORD *)(a2[147] + 136) + 296);
      v7 = v71[13];
      v4 = *(int **)(v73 + 16);
      if ((unint64_t)v4 <= v7)
        goto LABEL_242;
      v74 = *(_QWORD *)(v73 + 32);
      if (!*(_DWORD *)(v74 + 48 * v7))
        break;
LABEL_214:
      v71 += 16;
      if (v71 == v72)
        goto LABEL_230;
    }
    v20 = 1;
    *(_DWORD *)buf = 0;
    v75 = v74 + 48 * v7;
    re::StringID::StringID((re::StringID *)&buf[8], (const StringID *)(v75 + 8));
    v76 = *(_OWORD *)(v75 + 24);
    v146 = *(_QWORD *)(v75 + 40);
    *(_OWORD *)&buf[24] = v76;
    *(_QWORD *)&v152 = *(_QWORD *)&buf[8] >> 1;
    *((_QWORD *)&v152 + 1) = v76;
    re::RenderGraphResourceDescriptions::targetDescriptionSource(*(_QWORD *)(a2[147] + 136), (uint64_t)&v152, (uint64_t)v142);
    v77 = re::RenderGraphExecutable::targetDescription(a2[147], (uint64_t)v142);
    v78 = (_DWORD *)v77;
    v79 = v71[1];
    switch(v79)
    {
      case 8u:
        v87 = (*(_DWORD *)(v77 + 4) - 253) > 9 || ((1 << (*(_BYTE *)(v77 + 4) + 3)) & 0x385) == 0;
        if (v87 && *((_BYTE *)v71 + 33))
          goto LABEL_213;
        re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)v142, 0, 0, &v141);
        if (!v141)
        {
          v107 = a2[147];
          v108 = *(_QWORD **)(v107 + 136);
          if (v108[54])
          {
            v7 = 0;
            do
            {
              v20 = v71[13];
              if ((_DWORD)v20 == *(_DWORD *)(v108[56] + 4 * v7))
              {
                v109 = v108[37];
                v106 = *(_QWORD *)(v109 + 16);
                if (v106 <= v20)
                  goto LABEL_244;
                re::StringID::StringID((re::StringID *)v147, (const StringID *)(*(_QWORD *)(v109 + 32) + 48 * v20 + 8));
                re::DynamicString::format((re::DynamicString *)"Invalid texture (%s) set to resolve stencil", (re::DynamicString *)&v152, *(_QWORD *)&v147[8]);
                re::RenderGraphExecutable::addError(v107, (uint64_t)&v152);
                if ((_QWORD)v152)
                {
                  if ((BYTE8(v152) & 1) != 0)
                    (*(void (**)(void))(*(_QWORD *)v152 + 40))();
                  v152 = 0u;
                  v153 = 0u;
                }
                re::StringID::destroyString((re::StringID *)v147);
                v107 = a2[147];
              }
              ++v7;
              v108 = *(_QWORD **)(v107 + 136);
            }
            while (v108[54] > v7);
          }
          goto LABEL_211;
        }
        v89 = v136 != *(_DWORD *)&buf[36] || *v78 == 2;
        if ((v78[17] & 0x70) == 0x30 || !v89)
          goto LABEL_211;
        if ((objc_msgSend(*(id *)(a2[1] + 184), "supportsFamily:", 1005) & 1) != 0
          || (v90 = (re *)objc_msgSend(*(id *)(a2[1] + 184), "supportsFamily:", 2002), (v90 & 1) != 0))
        {
          v91 = *(id *)v137;
          v92 = objc_msgSend(*(id *)v137, sel_stencilAttachment);
          objc_msgSend(v92, sel_setResolveTexture_, v141);
          v139 |= (unint64_t)objc_msgSend(v141, sel_protectionOptions);
          v20 = (unint64_t)objc_msgSend(objc_msgSend(v91, sel_stencilAttachment), sel_storeAction);
          v93 = objc_msgSend(v91, sel_stencilAttachment);
          if (v20)
            v94 = 3;
          else
            v94 = 2;
          objc_msgSend(v93, sel_setStoreAction_, v94);
          objc_msgSend(objc_msgSend(v91, sel_stencilAttachment), sel_setStencilResolveFilter_, (int)v71[10]);
          goto LABEL_211;
        }
        do
          v113 = __ldaxr(byte_25411A01D);
        while (__stlxr(1u, byte_25411A01D));
        if ((v113 & 1) != 0)
          goto LABEL_211;
        v114 = *re::graphicsLogObjects(v90);
        if (!os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
          goto LABEL_211;
        LOWORD(v152) = 0;
        v115 = v114;
        v116 = "Tried to resolve multisampled stencil, but device does not support Stencil Resolve.";
        break;
      case 7u:
        v95 = (*(_DWORD *)(v77 + 4) - 250) > 0xA || ((1 << (*(_BYTE *)(v77 + 4) + 6)) & 0x425) == 0;
        if (v95 && *((_BYTE *)v71 + 33))
          goto LABEL_213;
        re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)v142, 0, 0, &v141);
        if (!v141)
        {
          v110 = a2[147];
          v111 = *(_QWORD **)(v110 + 136);
          if (v111[54])
          {
            v7 = 0;
            do
            {
              v20 = v71[13];
              if ((_DWORD)v20 == *(_DWORD *)(v111[56] + 4 * v7))
              {
                v112 = v111[37];
                v106 = *(_QWORD *)(v112 + 16);
                if (v106 <= v20)
                  goto LABEL_245;
                re::StringID::StringID((re::StringID *)v147, (const StringID *)(*(_QWORD *)(v112 + 32) + 48 * v20 + 8));
                re::DynamicString::format((re::DynamicString *)"Invalid texture (%s) set to resolve depth", (re::DynamicString *)&v152, *(_QWORD *)&v147[8]);
                re::RenderGraphExecutable::addError(v110, (uint64_t)&v152);
                if ((_QWORD)v152)
                {
                  if ((BYTE8(v152) & 1) != 0)
                    (*(void (**)(void))(*(_QWORD *)v152 + 40))();
                  v152 = 0u;
                  v153 = 0u;
                }
                re::StringID::destroyString((re::StringID *)v147);
                v110 = a2[147];
              }
              ++v7;
              v111 = *(_QWORD **)(v110 + 136);
            }
            while (v111[54] > v7);
          }
          goto LABEL_211;
        }
        v97 = v136 != *(_DWORD *)&buf[36] || *v78 == 2;
        if ((v78[17] & 0x70) == 0x30 || !v97)
          goto LABEL_211;
        if ((objc_msgSend(*(id *)(a2[1] + 184), "supportsFamily:", 1003) & 1) != 0
          || (v98 = (re *)objc_msgSend(*(id *)(a2[1] + 184), "supportsFamily:", 2002), (v98 & 1) != 0))
        {
          v99 = *(id *)v137;
          v100 = objc_msgSend(*(id *)v137, sel_depthAttachment);
          objc_msgSend(v100, sel_setResolveTexture_, v141);
          v139 |= (unint64_t)objc_msgSend(v141, sel_protectionOptions);
          v20 = (unint64_t)objc_msgSend(objc_msgSend(v99, sel_depthAttachment), sel_storeAction);
          v101 = objc_msgSend(v99, sel_depthAttachment);
          if (v20)
            v102 = 3;
          else
            v102 = 2;
          objc_msgSend(v101, sel_setStoreAction_, v102);
          v84 = objc_msgSend(v99, sel_depthAttachment);
          v86 = (int)v71[9];
          v85 = sel_setDepthResolveFilter_;
          goto LABEL_178;
        }
        do
          v117 = __ldaxr((unsigned __int8 *)&unk_25411A01C);
        while (__stlxr(1u, (unsigned __int8 *)&unk_25411A01C));
        if ((v117 & 1) != 0
          || (v118 = *re::graphicsLogObjects(v98), !os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT)))
        {
LABEL_211:
          if (v141)

          goto LABEL_213;
        }
        LOWORD(v152) = 0;
        v115 = v118;
        v116 = "Tried to resolve multisampled depth, but device does not support Depth Resolve.";
        break;
      case 6u:
        re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)v142, 0, 0, &v141);
        if (v141)
        {
          v81 = v136 != *(_DWORD *)&buf[36] || *v78 == 2;
          if ((v78[17] & 0x70) != 0x30 && v81)
          {
            v82 = *(id *)v137;
            v83 = objc_msgSend(objc_msgSend(*(id *)v137, sel_colorAttachments), sel_objectAtIndexedSubscript_, *v71);
            re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)v142, 0, 0, (id *)&v152);
            objc_msgSend(v83, sel_setResolveTexture_, (_QWORD)v152);
            if ((_QWORD)v152)

            v139 |= (unint64_t)objc_msgSend(v141, sel_protectionOptions);
            v20 = (unint64_t)objc_msgSend(objc_msgSend(objc_msgSend(v82, sel_colorAttachments), sel_objectAtIndexedSubscript_, *v71), sel_storeAction);
            v84 = objc_msgSend(objc_msgSend(v82, sel_colorAttachments), sel_objectAtIndexedSubscript_, *v71);
            v85 = sel_setStoreAction_;
            if (v20)
              v86 = 3;
            else
              v86 = 2;
LABEL_178:
            objc_msgSend(v84, v85, v86);
          }
        }
        else
        {
          v103 = a2[147];
          v104 = *(_QWORD **)(v103 + 136);
          if (v104[54])
          {
            v7 = 0;
            do
            {
              v20 = v71[13];
              if ((_DWORD)v20 == *(_DWORD *)(v104[56] + 4 * v7))
              {
                v105 = v104[37];
                v106 = *(_QWORD *)(v105 + 16);
                if (v106 <= v20)
                  goto LABEL_243;
                re::StringID::StringID((re::StringID *)v147, (const StringID *)(*(_QWORD *)(v105 + 32) + 48 * v20 + 8));
                re::DynamicString::format((re::DynamicString *)"Invalid texture (%s) set to resolve color attachment %d", (re::DynamicString *)&v152, *(_QWORD *)&v147[8], *v71);
                re::RenderGraphExecutable::addError(v103, (uint64_t)&v152);
                if ((_QWORD)v152)
                {
                  if ((BYTE8(v152) & 1) != 0)
                    (*(void (**)(void))(*(_QWORD *)v152 + 40))();
                  v152 = 0u;
                  v153 = 0u;
                }
                re::StringID::destroyString((re::StringID *)v147);
                v103 = a2[147];
              }
              ++v7;
              v104 = *(_QWORD **)(v103 + 136);
            }
            while (v104[54] > v7);
          }
        }
        goto LABEL_211;
      default:
LABEL_213:
        re::StringID::destroyString((re::StringID *)&buf[8]);
        goto LABEL_214;
    }
    _os_log_impl(&dword_224FE9000, v115, OS_LOG_TYPE_DEFAULT, v116, (uint8_t *)&v152, 2u);
    goto LABEL_211;
  }
LABEL_230:
  v119 = *(id *)v137;
  v120 = v134 + 192 * v135;
  objc_msgSend(*(id *)v137, sel_setThreadgroupMemoryLength_, *(_QWORD *)(v120 + 176));
  v121 = *(unsigned __int8 *)(v120 + 184) - 1;
  if (v121 < 3)
  {
    v122 = qword_2261470B8[(char)v121];
    objc_msgSend(v119, sel_setTileWidth_, *(_QWORD *)&asc_2261470A0[8 * (char)v121]);
    objc_msgSend(v119, sel_setTileHeight_, v122);
  }
  v123 = *(_QWORD *)(a2[147] + 136);
  v6 = (unsigned int *)*((unsigned int *)a2 + 12);
  v3 = *(unsigned int **)(v123 + 352);
  if (v3 <= v6)
    goto LABEL_247;
  if (*(_BYTE *)(*(_QWORD *)(v123 + 368) + 192 * v6 + 171))
  {
    v124 = re::RenderGraphDataStore::tryGet<re::VRRData>(a2[146], *(_QWORD *)(a2[5] + 48));
    if (v124)
    {
      if (*(_BYTE *)(v124 + 12))
      {
        v126 = a2[147];
        v127 = *(unsigned int *)(v124 + 8);
        v128 = *(_QWORD *)(v126 + 104);
        if (v128 > v127)
        {
          objc_msgSend(v119, sel_setRasterizationRateMap_, *(_QWORD *)(*(_QWORD *)(v126 + 96) + 8 * v127));
          goto LABEL_238;
        }
LABEL_248:
        re::internal::assertLog((re::internal *)6, v125, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v127, v128);
        _os_crash();
        __break(1u);
      }
    }
  }
LABEL_238:
  v129 = a2[1];
  v130 = v119;
  v140 = v130;
  re::RenderManager::enableMTLCounterSamplingOnRenderPassDescriptor(v129, &v140, 1u);
  if (v130)

  *a3 = v139;
}

uint64_t re::RenderGraphExecutable::addError(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_ *v2;
  __n128 v3;
  uint64_t result;
  __n128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v2 = *(_anonymous_namespace_ **)(a1 + 128);
  v5.n128_u64[0] = 2000;
  v5.n128_u64[1] = (unint64_t)&re::GraphicsErrorCategory(void)::instance;
  v6 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 24);
  v7 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = re::DynamicArray<re::DetailedError>::add(v2, &v5);
  result = v6;
  if (v6)
  {
    if ((v7 & 1) != 0)
      return (*(uint64_t (**)(__n128))(*(_QWORD *)v6 + 40))(v3);
  }
  return result;
}

__n128 re::RenderGraphContext::resourceFromIndex@<Q0>(re::RenderGraphContext *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 147) + 136) + 296);
  if (*(_QWORD *)(v4 + 16) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5 = *(_QWORD *)(v4 + 32) + 48 * a2;
  *(_DWORD *)a3 = *(_DWORD *)v5;
  re::StringID::StringID((re::StringID *)(a3 + 8), (const StringID *)(v5 + 8));
  result = *(__n128 *)(v5 + 24);
  *(_QWORD *)(a3 + 40) = *(_QWORD *)(v5 + 40);
  *(__n128 *)(a3 + 24) = result;
  return result;
}

_BYTE *re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::add(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *result;

  re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::ensureCapacity(a1);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = (_BYTE *)(v4 + 472 * *(_QWORD *)(a1 + 8));
  v5[464] = 1;
  result = re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>::operator=(v5, a2);
  ++*(_QWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

void re::RenderGraphContext::encodeWaitsForFencesIfNeeded(re::RenderGraphContext *this, const RenderCommandEncoder *a2)
{
  uint64_t v3;
  id *v5;
  uint64_t v6;
  id v7;

  if (!*((_BYTE *)this + 1560))
  {
    v3 = *((_QWORD *)this + 192);
    if (v3)
    {
      v5 = (id *)*((_QWORD *)this + 194);
      v6 = 8 * v3;
      do
      {
        v7 = *v5;
        -[m_impCache waitForFence:beforeStages:](a2->m_object, sel_waitForFence_beforeStages_, v7, 1);
        if (v7)

        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
    *((_BYTE *)this + 1560) = 1;
  }
}

void re::RenderGraphContext::releaseManagedEncoder(re::RenderGraphContext *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  id *v5;
  id v6;
  uint64_t v7;
  char v8;

  if (a2 && !re::RenderGraphContext::isLastNodeAccessingEncoder(this, *((re::RenderGraphNodeBase **)this + 5)))
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 104);
    v4 = v3 ? re::RenderFrameBox::get(v3 + 344, *(_QWORD *)(*(_QWORD *)this + 32)) : 0;
    re::DynamicString::format((re::DynamicString *)"Node %s attempting to release encoder before all nodes have finished encoding", (re::DynamicString *)&v7, *(_QWORD *)(*((_QWORD *)this + 5) + 16));
    re::RenderFrame::addError(v4, (uint64_t)&v7);
    if (v7)
    {
      if ((v8 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v7 + 40))();
    }
  }
  switch(*((_DWORD *)this + 296))
  {
    case 0:
      re::RenderGraphContext::finishEncoding<re::mtl::RenderCommandEncoder &>((uint64_t)this, *((_QWORD *)this + 150));
      break;
    case 1:
      re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder &>((uint64_t)this, *((id **)this + 150));
      break;
    case 2:
      re::RenderGraphContext::finishEncoding<re::mtl::BlitCommandEncoder &>((uint64_t)this, *((id **)this + 150));
      break;
    case 3:
      v5 = (id *)*((_QWORD *)this + 150);
      if (*v5)
      {
        objc_msgSend(*v5, "endEncoding");
        v6 = *v5;
        *v5 = 0;

      }
      break;
    default:
      break;
  }
  *((_DWORD *)this + 296) = 4;
}

void re::RenderGraphContext::makeComputeCommandEncoder(re::RenderGraphContext *this@<X0>, uint64_t a2@<X1>, id *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[18];
  __int16 v18;
  unint64_t v19;
  __int16 v20;
  unsigned int *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)this + 1) + 104)) + 16), "setProtectionOptions:", a2);
  v5 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)this + 1) + 104));
  ++*(_QWORD *)(v5 + 8);
  re::mtl::CommandBuffer::makeComputeCommandEncoder((id *)(v5 + 16), a3);
  objc_msgSend(*a3, "setLabel:", *re::RenderGraphNodeBase::getEncoderLabel(*((re::RenderGraphNodeBase **)this + 5)));
  v6 = *(_QWORD *)(*((_QWORD *)this + 147) + 136);
  v7 = *((unsigned int *)this + 12);
  v8 = *(unsigned int **)(v6 + 352);
  if ((unint64_t)v8 <= v7)
  {
LABEL_11:
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v17 = 136315906;
    *(_QWORD *)&v17[4] = "operator[]";
    *(_WORD *)&v17[12] = 1024;
    *(_DWORD *)&v17[14] = 789;
    v18 = 2048;
    v19 = v7;
    v20 = 2048;
    v21 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v9 = *(_QWORD *)(v6 + 368) + 192 * v7;
  v10 = *(_QWORD *)(v9 + 56);
  if (v10)
  {
    v7 = v10 << 6;
    v8 = (unsigned int *)(*(_QWORD *)(v9 + 72) + 52);
    do
    {
      if (*(v8 - 12) == 5)
      {
        v11 = *(_QWORD *)(*((_QWORD *)this + 147) + 136);
        v12 = *(_QWORD *)(v11 + 296);
        v13 = *v8;
        v14 = *(unsigned int **)(v12 + 16);
        if ((unint64_t)v14 <= v13)
        {
          v25 = 0u;
          v26 = 0u;
          v23 = 0u;
          v24 = 0u;
          v22 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v17 = 136315906;
          *(_QWORD *)&v17[4] = "operator[]";
          *(_WORD *)&v17[12] = 1024;
          *(_DWORD *)&v17[14] = 789;
          v18 = 2048;
          v19 = v13;
          v20 = 2048;
          v21 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_11;
        }
        v15 = *(_QWORD *)(v12 + 32);
        if (!*(_DWORD *)(v15 + 48 * v13))
        {
          v16 = v15 + 48 * v13;
          *(_QWORD *)v17 = *(_QWORD *)(v16 + 8) >> 1;
          *(_QWORD *)&v17[8] = *(_QWORD *)(v16 + 24);
          re::RenderGraphResourceDescriptions::targetDescriptionSource(v11, (uint64_t)v17, (uint64_t)&v22);
          *(_DWORD *)(re::RenderGraphExecutable::targetDescription(*((_QWORD *)this + 147), (uint64_t)&v22) + 60) = 1;
        }
      }
      v8 += 16;
      v7 -= 64;
    }
    while (v7);
  }
  re::RenderGraphResourceAllocationManager::onAcquireEncoder<re::mtl::ComputeCommandEncoder>(*((_QWORD *)this + 4), a3);
}

void re::RenderGraphContext::makeBlitCommandEncoder(re::RenderGraphContext *this@<X0>, uint64_t a2@<X1>, id *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[18];
  __int16 v18;
  unint64_t v19;
  __int16 v20;
  unsigned int *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*(id *)(re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)this + 1) + 104)) + 16), "setProtectionOptions:", a2);
  v5 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)this + 1) + 104));
  ++*(_QWORD *)(v5 + 8);
  re::mtl::CommandBuffer::makeBlitCommandEncoder((id *)(v5 + 16), a3);
  objc_msgSend(*a3, "setLabel:", *re::RenderGraphNodeBase::getEncoderLabel(*((re::RenderGraphNodeBase **)this + 5)));
  v6 = *(_QWORD *)(*((_QWORD *)this + 147) + 136);
  v7 = *((unsigned int *)this + 12);
  v8 = *(unsigned int **)(v6 + 352);
  if ((unint64_t)v8 <= v7)
  {
LABEL_11:
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v17 = 136315906;
    *(_QWORD *)&v17[4] = "operator[]";
    *(_WORD *)&v17[12] = 1024;
    *(_DWORD *)&v17[14] = 789;
    v18 = 2048;
    v19 = v7;
    v20 = 2048;
    v21 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v9 = *(_QWORD *)(v6 + 368) + 192 * v7;
  v10 = *(_QWORD *)(v9 + 56);
  if (v10)
  {
    v7 = v10 << 6;
    v8 = (unsigned int *)(*(_QWORD *)(v9 + 72) + 52);
    do
    {
      if (*(v8 - 12) == 4)
      {
        v11 = *(_QWORD *)(*((_QWORD *)this + 147) + 136);
        v12 = *(_QWORD *)(v11 + 296);
        v13 = *v8;
        v14 = *(unsigned int **)(v12 + 16);
        if ((unint64_t)v14 <= v13)
        {
          v25 = 0u;
          v26 = 0u;
          v23 = 0u;
          v24 = 0u;
          v22 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v17 = 136315906;
          *(_QWORD *)&v17[4] = "operator[]";
          *(_WORD *)&v17[12] = 1024;
          *(_DWORD *)&v17[14] = 789;
          v18 = 2048;
          v19 = v13;
          v20 = 2048;
          v21 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_11;
        }
        v15 = *(_QWORD *)(v12 + 32);
        if (!*(_DWORD *)(v15 + 48 * v13))
        {
          v16 = v15 + 48 * v13;
          *(_QWORD *)v17 = *(_QWORD *)(v16 + 8) >> 1;
          *(_QWORD *)&v17[8] = *(_QWORD *)(v16 + 24);
          re::RenderGraphResourceDescriptions::targetDescriptionSource(v11, (uint64_t)v17, (uint64_t)&v22);
          *(_DWORD *)(re::RenderGraphExecutable::targetDescription(*((_QWORD *)this + 147), (uint64_t)&v22) + 60) = 1;
        }
      }
      v8 += 16;
      v7 -= 64;
    }
    while (v7);
  }
  re::RenderGraphResourceAllocationManager::onAcquireEncoder<re::mtl::BlitCommandEncoder>(*((_QWORD *)this + 4), a3);
}

BOOL re::RenderGraphContext::isLastNodeAccessingEncoder(re::RenderGraphContext *this, re::RenderGraphNodeBase *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*((_QWORD *)this + 147) + 136);
  LODWORD(v3) = 0x7FFFFFFF;
  if (*(_QWORD *)(v2 + 656))
  {
    v4 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                           * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) >> 27));
    v5 = *(unsigned int *)(*(_QWORD *)(v2 + 664) + 4 * ((v4 ^ (v4 >> 31)) % *(unsigned int *)(v2 + 680)));
    if ((_DWORD)v5 != 0x7FFFFFFF)
    {
      v6 = *(_QWORD *)(v2 + 672);
      if (*(re::RenderGraphNodeBase **)(v6 + 32 * v5 + 16) == a2)
      {
        LODWORD(v3) = v5;
      }
      else
      {
        v3 = v5;
        while (1)
        {
          v3 = *(_DWORD *)(v6 + 32 * v3 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v3 == 0x7FFFFFFF)
            break;
          if (*(re::RenderGraphNodeBase **)(v6 + 32 * v3 + 16) == a2)
            goto LABEL_10;
        }
        LODWORD(v3) = 0x7FFFFFFF;
      }
    }
  }
LABEL_10:
  v7 = *(_QWORD *)(v2 + 672) + 32 * v3;
  v10 = *(_DWORD *)(v7 + 24);
  v8 = v7 + 24;
  v9 = v10;
  if (*(_QWORD *)(v2 + 352) <= (unint64_t)v10)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(v2 + 368) + 192 * v9 + 16) - 1 == *(unsigned int *)(v8 + 4);
}

uint64_t re::RenderGraphContext::releaseManagedRenderEncodersFromParallelEncoder(re::RenderGraphContext *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  result = re::RenderGraphContext::isSetupParallel(this);
  if ((result & 1) != 0)
  {
    if (*((_DWORD *)this + 296) == 3)
    {
      v3 = *((_QWORD *)this + 153);
      if (v3)
      {
        v4 = *((_QWORD *)this + 155);
        v5 = 16 * v3;
        do
        {
          re::RenderGraphContext::finishEncoding<re::mtl::RenderCommandEncoder &>((uint64_t)this, v4);
          v4 += 16;
          v5 -= 16;
        }
        while (v5);
      }
      return (uint64_t)re::DynamicArray<re::mtl::RenderCommandEncoder>::clear((re::RenderGraphContext *)((char *)this + 1208));
    }
  }
  else
  {
    v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 104);
    if (v6)
      v7 = re::RenderFrameBox::get(v6 + 344, *(_QWORD *)(*(_QWORD *)this + 32));
    else
      v7 = 0;
    re::DynamicString::format((re::DynamicString *)"Node %s called releaseManagedRenderEncodersFromParallelEncoder(). This function is only meant to be called on nodes marked as parallel (e.g. RenderGraphBuilder::setNodeIsParallel(true)) after their execute() function. ", (re::DynamicString *)&v8, *(_QWORD *)(*((_QWORD *)this + 5) + 16));
    re::RenderFrame::addError(v7, (uint64_t)&v8);
    result = v8;
    if (v8 && (v9 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v8 + 40))();
  }
  return result;
}

void re::RenderGraphContext::finishEncoding<re::mtl::RenderCommandEncoder &>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  if (*(_QWORD *)a2)
  {
    re::RenderGraphResourceAllocationManager::onReleaseEncoder<re::mtl::RenderCommandEncoder>(*(_QWORD **)(a1 + 32), (_QWORD **)a2);
    (*(void (**)(_QWORD, char *))(*(_QWORD *)(a2 + 8) + 256))(**(_QWORD **)(a2 + 8), sel_endEncoding);
    v3 = *(_QWORD **)a2;
    *(_QWORD *)a2 = 0;

  }
}

re::mtl::RenderCommandEncoder *re::DynamicArray<re::mtl::RenderCommandEncoder>::clear(re::mtl::RenderCommandEncoder *result)
{
  re::mtl::RenderCommandEncoder *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  v2 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = 0;
  if (v2)
  {
    result = (re::mtl::RenderCommandEncoder *)*((_QWORD *)result + 4);
    v3 = 16 * v2;
    do
    {
      re::mtl::RenderCommandEncoder::~RenderCommandEncoder(result);
      result = (re::mtl::RenderCommandEncoder *)(v4 + 16);
      v3 -= 16;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

void re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder &>(uint64_t a1, id *a2)
{
  _QWORD *v3;

  if (*a2)
  {
    re::RenderGraphResourceAllocationManager::onReleaseEncoder<re::mtl::ComputeCommandEncoder>(*(_QWORD **)(a1 + 32), (_QWORD **)a2);
    objc_msgSend(*a2, "endEncoding");
    v3 = *a2;
    *a2 = 0;

  }
}

void re::RenderGraphContext::finishEncoding<re::mtl::BlitCommandEncoder &>(uint64_t a1, id *a2)
{
  _QWORD *v3;

  if (*a2)
  {
    re::RenderGraphResourceAllocationManager::onReleaseEncoder<re::mtl::BlitCommandEncoder>(*(_QWORD **)(a1 + 32), (_QWORD **)a2);
    objc_msgSend(*a2, "endEncoding");
    v3 = *a2;
    *a2 = 0;

  }
}

int32x2_t re::RenderGraphContext::makeFullscreenDrawCall@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, int32x2_t *a7@<X8>)
{
  uint64_t v14;
  int32x2_t *v20;
  __int16 v21;
  int32x2_t result;

  v14 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*a1 + 24) + 32))(*(_QWORD *)(*a1 + 24), 224, 16);
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_OWORD *)(v14 + 144) = 0u;
  *(_OWORD *)(v14 + 160) = 0u;
  *(_OWORD *)(v14 + 176) = 0u;
  *(_OWORD *)(v14 + 192) = 0u;
  *(_OWORD *)(v14 + 208) = 0u;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v14 + 152) = _D0;
  *(_DWORD *)(v14 + 160) = 1065353216;
  re::DrawCall::DrawCall((re::DrawCall *)a7);
  a7[8] = (int32x2_t)v14;
  v20 = (int32x2_t *)a1[187];
  v21 = a7->i16[0] & 0xFFF0 | 7;
  a7->i16[0] = v21;
  result = vrev64_s32(v20[58]);
  a7[2] = result;
  a7->i8[2] = v20[59].i8[4];
  a7[7] = (int32x2_t)v20;
  a7->i16[0] = v21 & 0xEF77;
  *(_QWORD *)(v14 + 40) = a2;
  *(_QWORD *)(v14 + 48) = a3;
  *(_QWORD *)(v14 + 56) = a4;
  *(_QWORD *)(v14 + 72) = a5;
  *(_QWORD *)(v14 + 88) = 0;
  *(_QWORD *)(v14 + 96) = a6;
  *(_QWORD *)(v14 + 104) = 0;
  *(_BYTE *)(v14 + 112) = 0;
  a7[9].i32[1] = 0;
  return result;
}

re *re::internal::destroyPersistent<re::mtl::RenderCommandEncoder>(re *result, uint64_t a2, re::mtl::RenderCommandEncoder *a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::mtl::RenderCommandEncoder::~RenderCommandEncoder(a3);
    return (re *)(*(uint64_t (**)(uint64_t, re::mtl::RenderCommandEncoder *))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

double re::DrawCall::DrawCall(re::DrawCall *this)
{
  double result;

  *(_WORD *)this = *(_WORD *)this & 0xFCB0 | 0x107;
  *(_DWORD *)((char *)this + 2) = 0x1000000;
  *(_QWORD *)((char *)this + 6) = 0xFFFF0000FFFFLL;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0xFFFFFFFF00000000;
  *((_BYTE *)this + 48) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_BYTE *)this + 72) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 24) = 0;
  *(_DWORD *)((char *)this + 91) = 0;
  *(_QWORD *)((char *)this + 76) = 0;
  *(_QWORD *)((char *)this + 84) = 0;
  result = -5.48612423e303;
  *((_QWORD *)this + 14) = 0xFF00000007FFFFFFLL;
  *((_QWORD *)this + 15) = 0;
  return result;
}

void re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10 + 8) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10 + 8), (_QWORD *)(*(_QWORD *)&v13[16] + v10 + 8), (_QWORD *)(*(_QWORD *)&v13[16] + v10 + 16));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 24;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 24 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  v14 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8) & 0x80000000 | *(_DWORD *)(v14 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *a5 = 0;
  *(_DWORD *)(v14 + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

uint64_t re::SmallHashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,8ul,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false>::~SmallHashTable(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)(a1 + 16);
  re::DynamicInlineArray<re::KeyValuePair<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>>,8ul>::clear((_QWORD *)(a1 + 16));
  re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::deinit((uint64_t *)(a1 + 928));
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::deinit((uint64_t *)(a1 + 928));
  re::DynamicInlineArray<re::KeyValuePair<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>>,8ul>::clear(v2);
  return a1;
}

_QWORD *re::DynamicInlineArray<re::KeyValuePair<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>>,8ul>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  if (*result)
  {
    v2 = 112 * *result;
    v3 = (uint64_t)(result + 4);
    do
    {
      v3 += 112;
      v2 -= 112;
    }
    while (v2);
  }
  *v1 = 0;
  ++*((_DWORD *)v1 + 2);
  return result;
}

double re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 112;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::DynamicArray<re::mtl::RenderCommandEncoder>::deinit(uint64_t a1)
{
  uint64_t result;
  re::mtl::RenderCommandEncoder *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(re::mtl::RenderCommandEncoder **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 16 * v4;
        do
        {
          re::mtl::RenderCommandEncoder::~RenderCommandEncoder(v3);
          v3 = (re::mtl::RenderCommandEncoder *)((char *)v3 + 16);
          v5 -= 16;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(re::mtl::RenderCommandEncoder **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::mtl::RenderCommandEncoder *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::add(uint64_t result, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  v6 = *a2;
  v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
  v8 = v7 ^ (v7 >> 31);
  if (*(_QWORD *)result)
  {
    v9 = v8 % *(unsigned int *)(result + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(result + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = *(_QWORD *)(result + 16);
      if (*(_DWORD *)(v11 + 112 * v10 + 4) == (_DWORD)v6)
        return result;
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v11 + 112 * v10) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_DWORD *)(v11 + 112 * v10 + 4) == (_DWORD)v6)
          return result;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  result = re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::addAsMove(result, v9, v8, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

void re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 112 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  signed int v28;
  uint64_t v29;
  _BYTE v31[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v9 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v31, 0, 36);
          *(_QWORD *)&v31[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::init((uint64_t)v31, v14, v13);
          v16 = *(_OWORD *)v31;
          *(_OWORD *)v31 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v31[16];
          v18 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v31[16] = v18;
          *(_QWORD *)(a1 + 16) = v17;
          v20 = *(_OWORD *)&v31[24];
          *(_OWORD *)&v31[24] = *(_OWORD *)(a1 + 24);
          v19 = *(_DWORD *)&v31[32];
          *(_OWORD *)(a1 + 24) = v20;
          v21 = v19;
          if (v19)
          {
            v22 = 0;
            v23 = v18 + 16;
            do
            {
              if ((*(_DWORD *)(v23 - 16) & 0x80000000) != 0)
              {
                v24 = 0xBF58476D1CE4E5B9
                    * (*(unsigned int *)(v23 - 12) ^ ((unint64_t)*(unsigned int *)(v23 - 12) >> 30));
                v25 = (0x94D049BB133111EBLL * (v24 ^ (v24 >> 27))) ^ ((0x94D049BB133111EBLL * (v24 ^ (v24 >> 27))) >> 31);
                re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::addAsMove(a1, v25 % *(unsigned int *)(a1 + 24), v25, v23 - 12, v23);
              }
              ++v22;
              v23 += 112;
            }
            while (v22 < v21);
          }
          re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::deinit((uint64_t *)v31);
        }
      }
      else
      {
        if (v13)
          v28 = 2 * v12;
        else
          v28 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v26 = *(_QWORD *)(a1 + 16);
    v27 = *(_DWORD *)(v26 + 112 * v9);
  }
  else
  {
    v26 = *(_QWORD *)(a1 + 16);
    v27 = *(_DWORD *)(v26 + 112 * v9);
    *(_DWORD *)(a1 + 36) = v27 & 0x7FFFFFFF;
  }
  v29 = 112 * v9;
  *(_DWORD *)(v26 + v29) = v27 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v29) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 112 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 112 * v9 + 4) = *a4;
  re::DynamicOverflowArray<re::AABB,2ul>::DynamicOverflowArray(*(_QWORD *)(a1 + 16) + 112 * v9 + 16, a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::DynamicOverflowArray<re::AABB,2ul>::DynamicOverflowArray(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;
  int v14;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  v4 = (char *)(a1 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  if ((*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    *(_DWORD *)(a1 + 16) = 3;
    v5 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = v6;
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a2 + 16) & 0xFFFFFFFE | *(_DWORD *)(a1 + 16) & 1;
    *(_DWORD *)(a1 + 16) &= ~1u;
    v7 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = v7;
LABEL_18:
    v14 = 2;
    goto LABEL_19;
  }
  v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    goto LABEL_18;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  re::DynamicOverflowArray<re::AABB,2ul>::setCapacity((_QWORD *)a1, v8);
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    v9 = (const void *)(a2 + 32);
  else
    v9 = *(const void **)(a2 + 40);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_DWORD *)(a1 + 16);
  v12 = v4;
  if ((v11 & 1) == 0)
    v12 = *(void **)(a1 + 40);
  if (v10)
  {
    memmove(v12, v9, 32 * v10);
    v11 = *(_DWORD *)(a1 + 16);
  }
  if ((v11 & 1) == 0)
    v4 = *(char **)(a1 + 40);
  if ((*(_DWORD *)(a2 + 16) & 1) != 0)
    v13 = a2 + 32;
  else
    v13 = *(_QWORD *)(a2 + 40);
  memcpy(&v4[32 * *(_QWORD *)(a1 + 8)], (const void *)(v13 + 32 * *(_QWORD *)(a1 + 8)), 32 * v8 - 32 * *(_QWORD *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a2 + 8) = 0;
  v14 = 4;
LABEL_19:
  *(_DWORD *)(a2 + 16) = ((*(_DWORD *)(a2 + 16) & 0xFFFFFFFE) + v14) | *(_DWORD *)(a2 + 16) & 1;
  *(_DWORD *)(a1 + 16) += 2;
  return a1;
}

_QWORD *re::DynamicOverflowArray<re::AABB,2ul>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  int v17;

  v4 = result;
  v5 = *result;
  if (a2 && !v5)
  {
    result = (_QWORD *)re::DynamicOverflowArray<re::AABB,2ul>::setCapacity(v4, a2);
    v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)result + 4);
  if ((v7 & 1) != 0)
    v8 = 2;
  else
    v8 = result[4];
  if (v8 != a2)
  {
    v9 = result[1];
    if (v9 <= a2 && (a2 > 2 || (v7 & 1) == 0))
    {
      if (a2 < 3)
      {
        v14 = result + 4;
        v15 = v4[5];
        if ((v7 & 1) != 0)
          v16 = v4 + 4;
        else
          v16 = (const void *)v4[5];
        memcpy(v14, v16, 32 * v9);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v15);
        v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 59)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 32, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        v2 = 32 * a2;
        v10 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(*result, 32 * a2, 16);
        if (v10)
        {
          v12 = v10;
          if ((v4[2] & 1) != 0)
            v13 = v4 + 4;
          else
            v13 = (const void *)v4[5];
          result = memcpy(v10, v13, 32 * v4[1]);
          v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[5]);
            v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[4] = a2;
          v4[5] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*v4 + 8));
      result = (_QWORD *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::CameraMatrices>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  size_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  if ((v4 & 1) == 0
  {
    re::introspect<re::CameraMatrices>(void)::info = (_UNKNOWN *)re::introspect_CameraMatrices(0);
  }
  v5 = strlen(*((const char **)re::introspect<re::CameraMatrices>(void)::info + 6));
  if (v5)
  {
    MurmurHash3_x64_128(*((_QWORD *)re::introspect<re::CameraMatrices>(void)::info + 6), v5, 0, (unint64_t *)v8);
    v6 = (v8[1] - 0x61C8864680B583E9 + (v8[0] << 6) + ((unint64_t)v8[0] >> 2)) ^ v8[0];
  }
  else
  {
    v6 = 0;
  }
  v8[0] = (a2 - 0x61C8864680B583E9 + (v6 << 6) + (v6 >> 2)) ^ v6;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, v8);
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::ViewportPercentData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;

  v2 = (unint64_t)"N2re19ViewportPercentDataE";
  if (((unint64_t)"N2re19ViewportPercentDataE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re19ViewportPercentDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::VRRData>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  size_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  if ((v4 & 1) == 0
  {
    re::introspect<re::VRRData>(void)::info = (_UNKNOWN *)re::introspect_VRRData(0);
  }
  v5 = strlen(*((const char **)re::introspect<re::VRRData>(void)::info + 6));
  if (v5)
  {
    MurmurHash3_x64_128(*((_QWORD *)re::introspect<re::VRRData>(void)::info + 6), v5, 0, (unint64_t *)v8);
    v6 = (v8[1] - 0x61C8864680B583E9 + (v8[0] << 6) + ((unint64_t)v8[0] >> 2)) ^ v8[0];
  }
  else
  {
    v6 = 0;
  }
  v8[0] = (a2 - 0x61C8864680B583E9 + (v6 << 6) + (v6 >> 2)) ^ v6;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, v8);
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::SceneScope>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;

  v2 = (unint64_t)"N2re10SceneScopeE";
  if (((unint64_t)"N2re10SceneScopeE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re10SceneScopeE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::SceneIndexData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;

  v2 = (unint64_t)"N2re14SceneIndexDataE";
  if (((unint64_t)"N2re14SceneIndexDataE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re14SceneIndexDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::StencilInfoData>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  size_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  if ((v4 & 1) == 0
  {
    re::introspect<re::StencilInfoData>(void)::info = (_UNKNOWN *)re::introspect_StencilInfoData(0);
  }
  v5 = strlen(*((const char **)re::introspect<re::StencilInfoData>(void)::info + 6));
  if (v5)
  {
    MurmurHash3_x64_128(*((_QWORD *)re::introspect<re::StencilInfoData>(void)::info + 6), v5, 0, (unint64_t *)v8);
    v6 = (v8[1] - 0x61C8864680B583E9 + (v8[0] << 6) + ((unint64_t)v8[0] >> 2)) ^ v8[0];
  }
  else
  {
    v6 = 0;
  }
  v8[0] = (a2 - 0x61C8864680B583E9 + (v6 << 6) + (v6 >> 2)) ^ v6;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, v8);
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::ViewportData>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  size_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  if ((v4 & 1) == 0
  {
    re::introspect<re::ViewportData>(void)::info = (_UNKNOWN *)re::introspect_ViewportData(0);
  }
  v5 = strlen(*((const char **)re::introspect<re::ViewportData>(void)::info + 6));
  if (v5)
  {
    MurmurHash3_x64_128(*((_QWORD *)re::introspect<re::ViewportData>(void)::info + 6), v5, 0, (unint64_t *)v8);
    v6 = (v8[1] - 0x61C8864680B583E9 + (v8[0] << 6) + ((unint64_t)v8[0] >> 2)) ^ v8[0];
  }
  else
  {
    v6 = 0;
  }
  v8[0] = (a2 - 0x61C8864680B583E9 + (v6 << 6) + (v6 >> 2)) ^ v6;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, v8);
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::TintContextData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;

  v2 = (unint64_t)"N2re15TintContextDataE";
  if (((unint64_t)"N2re15TintContextDataE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re15TintContextDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::TriangleFillModeData>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  size_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  if ((v4 & 1) == 0
  {
    re::introspect<re::TriangleFillModeData>(void)::info = (_UNKNOWN *)re::introspect_TriangleFillModeData(0);
  }
  v5 = strlen(*((const char **)re::introspect<re::TriangleFillModeData>(void)::info + 6));
  if (v5)
  {
    MurmurHash3_x64_128(*((_QWORD *)re::introspect<re::TriangleFillModeData>(void)::info + 6), v5, 0, (unint64_t *)v8);
    v6 = (v8[1] - 0x61C8864680B583E9 + (v8[0] << 6) + ((unint64_t)v8[0] >> 2)) ^ v8[0];
  }
  else
  {
    v6 = 0;
  }
  v8[0] = (a2 - 0x61C8864680B583E9 + (v6 << 6) + (v6 >> 2)) ^ v6;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, v8);
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::PipelineCompilationData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;

  v2 = (unint64_t)"N2re23PipelineCompilationDataE";
  if (((unint64_t)"N2re23PipelineCompilationDataE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re23PipelineCompilationDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t re::ProfilerTimeGuard<(re::ProfilerStatistic)79>::end(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  int64x2_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64x2_t v7;

  if (*(_QWORD *)result && *(_QWORD *)(*(_QWORD *)result + 152))
  {
    v1 = (_QWORD *)result;
    result = mach_absolute_time();
    v2 = *v1;
    v3 = *(int64x2_t **)(*v1 + 152);
    if (v3)
    {
      v4 = result - v1[1];
      v5 = v3[320].u64[0];
      if (v5 >= v4)
        v5 = result - v1[1];
      v3[320].i64[0] = v5;
      v6 = v3[320].u64[1];
      if (v6 <= v4)
        v6 = v4;
      v3[320].i64[1] = v6;
      v7 = vdupq_n_s64(1uLL);
      v7.i64[0] = v4;
      v3[321] = vaddq_s64(v3[321], v7);
      *(_BYTE *)(v2 + 184) = 0;
    }
    *v1 = 0;
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::CameraData>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  size_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  if ((v4 & 1) == 0
  {
    re::introspect<re::CameraData>(void)::info = (_UNKNOWN *)re::introspect_CameraData(0);
  }
  v5 = strlen(*((const char **)re::introspect<re::CameraData>(void)::info + 6));
  if (v5)
  {
    MurmurHash3_x64_128(*((_QWORD *)re::introspect<re::CameraData>(void)::info + 6), v5, 0, (unint64_t *)v8);
    v6 = (v8[1] - 0x61C8864680B583E9 + (v8[0] << 6) + ((unint64_t)v8[0] >> 2)) ^ v8[0];
  }
  else
  {
    v6 = 0;
  }
  v8[0] = (a2 - 0x61C8864680B583E9 + (v6 << 6) + (v6 >> 2)) ^ v6;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, v8);
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t re::DynamicOverflowArray<re::RenderGraphTargetHandle,8ul>::setCapacity(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;

  result = *a1;
  if (a2 && !result)
  {
    result = re::DynamicOverflowArray<re::RenderGraphTargetHandle,8ul>::setCapacity(a1, a2);
    v6 = *((_DWORD *)a1 + 4) + 2;
LABEL_4:
    *((_DWORD *)a1 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)a1 + 4);
  if ((v7 & 1) != 0)
    v8 = 8;
  else
    v8 = a1[3];
  if (v8 != a2)
  {
    v9 = a1[1];
    if (v9 <= a2 && (a2 > 8 || (v7 & 1) == 0))
    {
      if (a2 < 9)
      {
        v14 = a1 + 3;
        if ((v7 & 1) != 0)
          v15 = a1 + 3;
        else
          v15 = (_QWORD *)a1[4];
        if (v9)
        {
          v16 = &v15[2 * v9];
          do
          {
            *v14 = 0;
            v14[1] = -1;
            *v14 = *v15;
            v14[1] = v15[1];
            v15 += 2;
            v14 += 2;
          }
          while (v15 != v16);
        }
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
        v6 = *((_DWORD *)a1 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 60)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 16, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        v2 = 16 * a2;
        result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)result + 32))(result, 16 * a2, 8);
        if (result)
        {
          v11 = result;
          v12 = *((_DWORD *)a1 + 4);
          if ((v12 & 1) != 0)
            v13 = a1 + 3;
          else
            v13 = (_QWORD *)a1[4];
          v17 = a1[1];
          if (v17)
          {
            v18 = &v13[2 * v17];
            v19 = (_QWORD *)result;
            do
            {
              *v19 = 0;
              v19[1] = -1;
              *v19 = *v13;
              v19[1] = v13[1];
              v13 += 2;
              v19 += 2;
            }
            while (v13 != v18);
            v12 = *((_DWORD *)a1 + 4);
          }
          if ((v12 & 1) == 0)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a1[4]);
            v12 = *((_DWORD *)a1 + 4);
          }
          *((_DWORD *)a1 + 4) = v12 & 0xFFFFFFFE;
          a1[3] = a2;
          a1[4] = v11;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*a1 + 8));
      result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::ensureCapacity(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = result;
  if (*(_QWORD *)result)
  {
    v2 = *(_QWORD *)(result + 8);
    if ((*(_BYTE *)(result + 16) & 1) != 0)
      v3 = 5;
    else
      v3 = *(_QWORD *)(result + 24);
    if (v2 >= v3)
      return re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::growCapacity(result, v2 + 1);
  }
  else
  {
    v4 = *(_QWORD *)(v1 + 8) + 1;
    result = re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::setCapacity((uint64_t *)v1, v4);
    *(_DWORD *)(v1 + 16) += 2;
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::growCapacity(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = a2;
  v3 = result;
  if (!*(_QWORD *)result)
  {
    result = re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::setCapacity((uint64_t *)v3, v2);
    *(_DWORD *)(v3 + 16) += 2;
    return result;
  }
  if ((*(_BYTE *)(result + 16) & 1) != 0)
  {
    if (a2 <= 5)
      return result;
    v5 = 10;
  }
  else
  {
    v4 = *(_QWORD *)(result + 24);
    if (v4 >= a2)
      return result;
    v5 = 2 * v4;
  }
  if (v5 > a2)
    a2 = v5;
  return re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::setCapacity((uint64_t *)result, a2);
}

_QWORD *re::DynamicArray<re::mtl::RenderCommandEncoder>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _OWORD *v7;
  re::mtl::RenderCommandEncoder *v8;
  uint64_t v9;
  re::mtl::RenderCommandEncoder *v10;
  _OWORD *v11;
  __int128 v12;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::mtl::RenderCommandEncoder>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 16 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (re::mtl::RenderCommandEncoder *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (re::mtl::RenderCommandEncoder *)((char *)v8 + 16 * v9);
        v11 = v7;
        do
        {
          v12 = *(_OWORD *)v8;
          *(_QWORD *)v8 = 0;
          *v11++ = v12;
          *((_QWORD *)v8 + 1) = 0;
          re::mtl::RenderCommandEncoder::~RenderCommandEncoder(v8);
          v8 = (re::mtl::RenderCommandEncoder *)((char *)v8 + 16);
        }
        while (v8 != v10);
        v8 = (re::mtl::RenderCommandEncoder *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, re::mtl::RenderCommandEncoder *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

double re::unpackHalf3Data(re *this, const void *a2, float16x4_t a3)
{
  char *v3;
  double result;

  v3 = (char *)this + 8 * (_QWORD)a2;
  a3.i32[0] = *(_DWORD *)v3;
  *(_QWORD *)&result = vcvtq_f32_f16(a3).u64[0];
  _H1 = *((_WORD *)v3 + 2);
  __asm { FCVT            S1, H1 }
  return result;
}

{
  char *v3;
  double result;

  v3 = (char *)this + 8 * (_QWORD)a2;
  a3.i32[0] = *(_DWORD *)v3;
  *(_QWORD *)&result = vcvtq_f32_f16(a3).u64[0];
  _H1 = *((_WORD *)v3 + 2);
  __asm { FCVT            S1, H1 }
  return result;
}

int8x8_t re::unpackChar3NormalizedData(re *this, const void *a2)
{
  char *v2;
  int32x2_t v3;
  float32x2_t v4;

  v2 = (char *)this + 4 * (_QWORD)a2;
  v3.i32[0] = *v2;
  v3.i32[1] = v2[1];
  v4 = vdiv_f32(vcvt_f32_s32(v3), (float32x2_t)vdup_n_s32(0x42FE0000u));
  __asm { FMOV            V1.2S, #1.0 }
  return vbsl_s8((int8x8_t)vcgt_f32(v4, _D1), (int8x8_t)_D1, (int8x8_t)v4);
}

{
  char *v2;
  int32x2_t v3;
  float32x2_t v4;

  v2 = (char *)this + 4 * (_QWORD)a2;
  v3.i32[0] = *v2;
  v3.i32[1] = v2[1];
  v4 = vdiv_f32(vcvt_f32_s32(v3), (float32x2_t)vdup_n_s32(0x42FE0000u));
  __asm { FMOV            V1.2S, #1.0 }
  return vbsl_s8((int8x8_t)vcgt_f32(v4, _D1), (int8x8_t)_D1, (int8x8_t)v4);
}

float32x2_t re::unpackUChar3NormalizedData(re *this, const void *a2)
{
  unsigned __int8 *v2;
  uint32x2_t v3;

  v2 = (unsigned __int8 *)this + 4 * (_QWORD)a2;
  v3.i32[0] = *v2;
  v3.i32[1] = v2[1];
  return vdiv_f32(vcvt_f32_u32(v3), (float32x2_t)vdup_n_s32(0x437F0000u));
}

{
  unsigned __int8 *v2;
  uint32x2_t v3;

  v2 = (unsigned __int8 *)this + 4 * (_QWORD)a2;
  v3.i32[0] = *v2;
  v3.i32[1] = v2[1];
  return vdiv_f32(vcvt_f32_u32(v3), (float32x2_t)vdup_n_s32(0x437F0000u));
}

uint64_t re::unpackFloat3Data(re *this, const void *a2)
{
  return *(_QWORD *)((char *)this + 12 * (_QWORD)a2);
}

{
  return *(_QWORD *)((char *)this + 12 * (_QWORD)a2);
}

uint64_t re::RenormalizationDeformer::init(uint64_t this, re::RenderManager *a2)
{
  uint64_t v3;
  uint64_t i;
  _anonymous_namespace_ *v5;
  int v6;
  _anonymous_namespace_ *v7;
  void **ComputePipelineState;
  _OWORD v9[2];
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[8];
  uint64_t v16;
  char v17;
  _QWORD v18[4];
  _BYTE v19[24];
  int v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;

  if (!*(_BYTE *)(this + 8))
  {
    v3 = this;
    *(_BYTE *)(this + 8) = 1;
    *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 4);
    if (*((_BYTE *)a2 + 258))
    {
      for (i = 0; i != 16; ++i)
      {
        v15[0] = 0;
        v6 = 0;
        v21 = 0;
        memset(v19, 0, sizeof(v19));
        v20 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0;
        do
        {
          memset(v9, 0, sizeof(v9));
          v7 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v9, 0);
          v12 = 0;
          v13 = 0;
          v14 = 0;
          re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v9, (i >> v6) & 1);
          v10 = 53;
          v11 = v6;
          re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v19, (re::DynamicString *)v9);
          if (v12)
          {
            if (v13)
            {
              (*(void (**)(void))(*(_QWORD *)v12 + 40))();
              v13 = 0;
              v14 = 0;
            }
            v12 = 0;
          }
          v5 = *(_anonymous_namespace_ **)&v9[0];
          if (*(_QWORD *)&v9[0] && (BYTE8(v9[0]) & 1) != 0)
            v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)&v9[0] + 40))();
          ++v6;
        }
        while (v6 != 4);
        ComputePipelineState = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v15);
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v3 + 8 * i + 24), ComputePipelineState);
        re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v19);
        this = v18[0];
        if (v18[0])
        {
          if ((v18[1] & 1) != 0)
            this = (*(uint64_t (**)(void))(*(_QWORD *)v18[0] + 40))();
          memset(v18, 0, sizeof(v18));
        }
        if (v15[0])
        {
          this = v16;
          if (v16)
          {
            if ((v17 & 1) != 0)
              this = (*(uint64_t (**)(void))(*(_QWORD *)v16 + 40))();
          }
        }
      }
      *(_BYTE *)(v3 + 9) = 1;
    }
  }
  return this;
}

double re::RenormalizationDeformer::addDeformationInstance@<D0>(re::RenormalizationDeformer *this@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  char v3;
  uint64_t v4;
  double result;

  if (*a2)
  {
    v3 = 0;
  }
  else if (!*((_BYTE *)this + 8) || (v3 = *((_BYTE *)this + 9)) != 0)
  {
    v3 = 1;
    v4 = 28;
    goto LABEL_7;
  }
  v4 = 4;
LABEL_7:
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)a3 = 0xFFFFFFFFLL;
  *(_QWORD *)(a3 + 8) = 3;
  *(_QWORD *)(a3 + 16) = v4;
  *(_BYTE *)(a3 + 24) = v3;
  *(_QWORD *)(a3 + 32) = -1;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  return result;
}

uint64_t re::RenormalizationDeformer::allocateBuffers(re *a1, unint64_t a2, unsigned int a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  re::AttributeTable *v29;
  re::AttributeTable *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  re::AttributeTable *v46;
  re::AttributeTable *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unsigned int v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  _QWORD *v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v75;
  re::FrameContext *v76;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  re::AttributeTable *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  _BYTE *v85;
  int v86;
  __int16 v87;
  int v88;
  char v89;
  int v90;
  __int16 v91;
  int v92;
  char v93;
  int v94;
  __int16 v95;
  int v96;
  char v97;
  uint64_t v98;
  int v99;
  const char *v100;
  __int16 v101;
  int v102;
  __int16 v103;
  unint64_t v104;
  __int16 v105;
  unint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;

  v4 = a4;
  v112 = *MEMORY[0x24BDAC8D0];
  v7 = *a4;
  v8 = *(_QWORD *)(*a4 + 48);
  re::globalAllocators(a1);
  v9 = *(_QWORD *)(a2 + 24);
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, 24, 8);
  v76 = (re::FrameContext *)a2;
  v12 = *(void **)(a2 + 24);
  v11[1] = v8;
  v11[2] = 0;
  *v11 = v12;
  if (v8)
  {
    if (v8 >= 0x492492492492493)
    {
LABEL_49:
      re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 56, v8);
      _os_crash();
      __break(1u);
      goto LABEL_50;
    }
    v12 = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*(_QWORD *)v12 + 32))(v12, 56 * v8, 8);
    v11[2] = v12;
    if (!v12)
    {
LABEL_50:
      re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
LABEL_51:
      re::internal::assertLog((re::internal *)5, v42, "assertion failure: '%s' (%s:line %i) Invalid deformation execution mode: %u.", "!\"Unreachable code\"", "allocateBuffers", 224, v45);
      _os_crash();
      __break(1u);
    }
    a2 = (unint64_t)v12;
    if (v8 != 1)
    {
      bzero(v12, 56 * v8 - 56);
      a2 += 56 * v8 - 56;
    }
    *(_QWORD *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  v75 = a3;
  v14 = (unint64_t)&v107;
  *((_QWORD *)&v108 + 1) = re::globalAllocators((re *)v12)[2];
  *(_QWORD *)&v109 = &v107;
  *(_QWORD *)&v107 = &off_24ED770C8;
  v79 = (*(uint64_t (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)v9 + 16))(v9, v11, &v107);
  if ((_QWORD)v109)
  {
    (**(void (***)(_QWORD))v109)(v109);
    if ((__int128 *)v109 != &v107)
      (*(void (**)(_QWORD))(**((_QWORD **)&v108 + 1) + 40))(*((_QWORD *)&v108 + 1));
  }
  if (v8)
  {
    v15 = 0;
    v83 = v7 + 8;
    v84 = v4;
    v82 = v8;
    while (1)
    {
      v16 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v83, v15);
      v18 = *(_QWORD *)(v16 + 8);
      v19 = v4[6];
      if (v19 <= v18)
        break;
      v20 = v16;
      v21 = v4[5];
      v22 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](v4[1], v18);
      v85 = (_BYTE *)(v21 + 312 * v18);
      if ((*v85 & 4) != 0)
      {
        v23 = v22;
        v24 = re::DataArray<re::MeshModel>::get(*((_QWORD *)a1 + 2) + 8, *(_QWORD *)(*(_QWORD *)(v22 + 368) + 16));
        v80 = v23;
        v14 = *(unsigned __int16 *)(v23 + 392);
        a2 = *(_QWORD *)(v24 + 56);
        if (a2 <= v14)
          goto LABEL_44;
        a2 = *(_QWORD *)(v79 + 8);
        if (a2 <= v15)
          goto LABEL_45;
        v25 = *(_QWORD *)(v24 + 64);
        v26 = *(_QWORD *)(v79 + 16);
        v78 = (_QWORD *)(v26 + 56 * v15);
        v27 = v25 + 560 * v14;
        do
        {
          a2 = v27;
          v27 = *(_QWORD *)(v27 + 8);
        }
        while (v27 && !*(_QWORD *)(a2 + 72));
        *(_QWORD *)&v107 = 0x66739F42610D3BC2;
        v28 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a2 + 48), &v107);
        v8 = v28 == -1 ? 0 : *(_QWORD *)(a2 + 56) + 16 * v28 + 8;
        v81 = (re::AttributeTable *)(v25 + 560 * v14);
        v29 = v81;
        do
        {
          v30 = v29;
          v29 = (re::AttributeTable *)*((_QWORD *)v29 + 1);
        }
        while (v29 && !*((_QWORD *)v30 + 9));
        *(_QWORD *)&v107 = 0x535FC835C0260B06;
        v31 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v30 + 6, &v107);
        if (v31 != -1)
        {
          if (v8)
          {
            v32 = v31;
            v33 = *((_QWORD *)v30 + 7);
            *(_QWORD *)(v26 + 56 * v15 + 24) = *(unsigned int *)(v25 + 560 * v14 + 464);
            v34 = re::AttributeTable::buffers(v81);
            v36 = *(unsigned __int8 *)v8;
            if (v35 <= v36)
              goto LABEL_46;
            *(_QWORD *)(v26 + 56 * v15 + 32) = v34 + 16 * v36;
            v37 = re::AttributeTable::buffers(v81);
            v39 = *(unsigned __int8 *)(v33 + 16 * v32 + 8);
            if (v38 <= v39)
              goto LABEL_47;
            v40 = v26;
            *(_QWORD *)(v26 + 56 * v15 + 40) = v37 + 16 * v39;
            a2 = 1;
            LOBYTE(v107) = 1;
            re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v85, 1u);
            v14 = v21 + 312 * v18;
            v41 = *(_DWORD *)(*(_QWORD *)(v14 + 64)
                            + 32
                            * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(v14 + 56), (unsigned __int8 *)&v107)+ 20);
            LOBYTE(v107) = 1;
            re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v85, 1u);
            v43 = v41
                / *(unsigned __int16 *)(*(_QWORD *)(v14 + 128)
                                      + 20
                                      * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(v14 + 120), (unsigned __int8 *)&v107)+ 4);
            v44 = 12 * v43;
            v45 = v75;
            if (v75)
            {
              v46 = v81;
              if (v75 != 1)
                goto LABEL_51;
              do
              {
                v47 = v46;
                v46 = (re::AttributeTable *)*((_QWORD *)v46 + 1);
              }
              while (v46 && !*((_QWORD *)v47 + 9));
              *(_QWORD *)&v107 = 0x30989BAE345;
              v48 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v47 + 6, &v107);
              if (v48 == -1)
                v14 = 0;
              else
                v14 = *((_QWORD *)v47 + 7) + 16 * v48 + 8;
              v49 = *(_QWORD **)(v80 + 360);
              v50 = v84[2];
              v95 = 257;
              v94 = 65548;
              v97 = 30;
              v96 = 0;
              v51 = re::DeformationBufferAllocator::alloc(v49, v50, 2, (uint64_t)&v94, *(unsigned __int8 *)(v20 + 16), 12 * v43);
              a2 = re::DeformationBufferAllocator::allocationData(*(re::DeformationBufferAllocator **)(v80 + 360), *(unsigned __int8 *)(v20 + 16), v51);
              LOWORD(v100) = 257;
              v99 = 65548;
              LOBYTE(v101) = 30;
              HIDWORD(v100) = 0;
              v52 = objc_msgSend(*(id *)(a2 + 24), sel_contents);
              v53 = *(_QWORD *)(a2 + 24);
              *(_QWORD *)&v107 = v52;
              *((_QWORD *)&v107 + 1) = *(_QWORD *)(a2 + 32);
              *(_QWORD *)&v108 = v53;
              v8 = (unint64_t)v85;
              re::DeformationVertexBufferState::setOutputBuffer((uint64_t)v85, 2u, 1, (uint64_t)&v107, (uint64_t)&v99);
              if (v14)
              {
                v54 = re::AttributeTable::buffers(v81);
                v56 = *(unsigned __int8 *)v14;
                if (v55 <= v56)
                  goto LABEL_48;
                *(_QWORD *)(v40 + 56 * v15 + 48) = v54 + 16 * v56;
                v57 = *(_QWORD **)(v80 + 360);
                v58 = v84[2];
                v14 = 257;
                v91 = 257;
                a2 = 65548;
                v90 = 65548;
                v93 = 30;
                v92 = 0;
                v59 = v43;
                v60 = re::DeformationBufferAllocator::alloc(v57, v58, 3, (uint64_t)&v90, *(unsigned __int8 *)(v20 + 16), 12 * v43);
                v61 = *(_QWORD **)(v80 + 360);
                v62 = v84[2];
                v87 = 257;
                v86 = 65548;
                v89 = 30;
                v88 = 0;
                v63 = re::DeformationBufferAllocator::alloc(v61, v62, 4, (uint64_t)&v86, *(unsigned __int8 *)(v20 + 16), v44);
                v64 = re::DeformationBufferAllocator::allocationData(*(re::DeformationBufferAllocator **)(v80 + 360), *(unsigned __int8 *)(v20 + 16), v60);
                v65 = re::DeformationBufferAllocator::allocationData(*(re::DeformationBufferAllocator **)(v80 + 360), *(unsigned __int8 *)(v20 + 16), v63);
                LOWORD(v100) = 257;
                v99 = 65548;
                LOBYTE(v101) = 30;
                HIDWORD(v100) = 0;
                v66 = objc_msgSend(*(id *)(v64 + 24), sel_contents);
                v67 = *(_QWORD *)(v64 + 24);
                *(_QWORD *)&v107 = v66;
                v68 = *(_QWORD *)(v64 + 32);
                v43 = v59;
                *((_QWORD *)&v107 + 1) = v68;
                *(_QWORD *)&v108 = v67;
                re::DeformationVertexBufferState::setOutputBuffer((uint64_t)v85, 3u, 1, (uint64_t)&v107, (uint64_t)&v99);
                LOWORD(v100) = 257;
                v99 = 65548;
                LOBYTE(v101) = 30;
                HIDWORD(v100) = 0;
                v69 = objc_msgSend(*(id *)(v65 + 24), sel_contents);
                v70 = *(_QWORD *)(v65 + 24);
                *(_QWORD *)&v107 = v69;
                *((_QWORD *)&v107 + 1) = *(_QWORD *)(v65 + 32);
                *(_QWORD *)&v108 = v70;
                re::DeformationVertexBufferState::setOutputBuffer((uint64_t)v85, 4u, 1, (uint64_t)&v107, (uint64_t)&v99);
              }
              re::FrameContext::perFrameAlloc(v76, 4uLL, 4uLL, (uint64_t)&v107);
              v71 = v107;
              v72 = v108;
              v73 = *((_QWORD *)&v107 + 1);
              *(_DWORD *)(v107 + DWORD2(v107)) = v43;
              *v78 = v71;
              v78[1] = v73;
              v78[2] = v72;
            }
            else
            {
              re::FrameContext::perFrameAlloc(v76, 12 * v43, 0x10uLL, (uint64_t)&v107);
              LOWORD(v100) = 257;
              v99 = 65548;
              LOBYTE(v101) = 30;
              HIDWORD(v100) = 0;
              re::DeformationVertexBufferState::setOutputBuffer((uint64_t)v85, 2u, 0, (uint64_t)&v107, (uint64_t)&v99);
            }
          }
        }
      }
      ++v15;
      v8 = v82;
      v4 = v84;
      if (v15 == v82)
        return v79;
    }
    re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, *(_QWORD *)(v16 + 8), v19);
    _os_crash();
    __break(1u);
LABEL_44:
    v98 = 0;
    v110 = 0u;
    v111 = 0u;
    v109 = 0u;
    v107 = 0u;
    v108 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v99 = 136315906;
    v100 = "operator[]";
    v101 = 1024;
    v102 = 476;
    v103 = 2048;
    v104 = v14;
    v105 = 2048;
    v106 = a2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_45:
    v98 = 0;
    v110 = 0u;
    v111 = 0u;
    v109 = 0u;
    v107 = 0u;
    v108 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v99 = 136315906;
    v100 = "operator[]";
    v101 = 1024;
    v102 = 468;
    v103 = 2048;
    v104 = v15;
    v105 = 2048;
    v106 = a2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_46:
    re::internal::assertLog((re::internal *)6, v35, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v36, v35);
    _os_crash();
    __break(1u);
LABEL_47:
    re::internal::assertLog((re::internal *)6, v38, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v39, v38);
    _os_crash();
    __break(1u);
LABEL_48:
    re::internal::assertLog((re::internal *)6, v55, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v56, v55);
    _os_crash();
    __break(1u);
    goto LABEL_49;
  }
  return v79;
}

uint64_t re::RenormalizationDeformer::deformGPU(uint64_t a1, uint64_t a2, void **this, _QWORD *a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  int64x2_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v46;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  _BYTE v53[28];
  __int16 v54;
  unint64_t v55;
  _OWORD v56[5];
  uint64_t v57;

  v5 = a4;
  v57 = *MEMORY[0x24BDAC8D0];
  v7 = *a4;
  re::mtl::ComputeCommandEncoder::pushDebugGroup(this, (re::ns *)"Perform Renormalization");
  v8 = *(_QWORD *)(v7 + 48);
  if (v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = v7 + 8;
    v43 = a2;
    v44 = v5;
    v41 = v7 + 8;
    v42 = *(_QWORD *)(v7 + 48);
    do
    {
      v12 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v11, v10);
      v14 = *(_QWORD *)(a2 + 8);
      if (v14 <= v10)
      {
        memset(v56, 0, sizeof(v56));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v53 = 136315906;
        *(_QWORD *)&v53[4] = "operator[]";
        *(_WORD *)&v53[12] = 1024;
        *(_DWORD *)&v53[14] = 468;
        *(_WORD *)&v53[18] = 2048;
        *(_QWORD *)&v53[20] = v10;
        v54 = 2048;
        v55 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_20:
        re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v4, v16);
        _os_crash();
        __break(1u);
      }
      v15 = *(_QWORD *)(a2 + 16);
      if (*(_QWORD *)(v15 + v9 + 32) && *(_QWORD *)(v15 + v9 + 40))
      {
        v4 = *(_QWORD *)(v12 + 8);
        v16 = v5[6];
        if (v16 <= v4)
          goto LABEL_20;
        v52 = v15 + v9;
        v48 = v5[5];
        v17 = (_QWORD *)(v48 + 312 * v4);
        LOBYTE(v56[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 1u);
        v50 = v17 + 7;
        v49 = v17 + 8;
        v18 = *(_DWORD *)(v17[8]
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 7, (unsigned __int8 *)v56)+ 20);
        LOBYTE(v56[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 1u);
        v19 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 15, (unsigned __int8 *)v56);
        v20 = v17 + 16;
        v51 = v15 + v9;
        v21 = *(_QWORD *)(v15 + v9 + 48);
        v22 = v18 / *(unsigned __int16 *)(v17[16] + 20 * v19 + 4) - 1;
        if (v21)
        {
          LOBYTE(v56[0]) = 0;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 0);
          if (*(_BYTE *)(*v20
                        + 20
                        * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 15, (unsigned __int8 *)v56)+ 16) == 36)v23 = 144;
          else
            v23 = 80;
          v24 = objc_msgSend(*(id *)(a1 + v23), sel_maxTotalThreadsPerThreadgroup);
          objc_msgSend(*this, "setComputePipelineState:", *(_QWORD *)(a1 + v23));
          LOBYTE(v56[0]) = 2;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 2u);
          v25 = v48 + 312 * v4;
          v26 = *(_QWORD *)(*(_QWORD *)(v25 + 192)
                          + 32
                          * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 23, (unsigned __int8 *)v56)+ 24);
          LOBYTE(v56[0]) = 2;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 2u);
          objc_msgSend(*this, "setBuffer:offset:atIndex:", v26, *(unsigned int *)(*(_QWORD *)(v25 + 192)+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 23, (unsigned __int8 *)v56)+ 16), 0);
          LOBYTE(v56[0]) = 3;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 3u);
          v27 = *(_QWORD *)(*(_QWORD *)(v25 + 192)
                          + 32
                          * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 23, (unsigned __int8 *)v56)+ 24);
          LOBYTE(v56[0]) = 3;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 3u);
          objc_msgSend(*this, "setBuffer:offset:atIndex:", v27, *(unsigned int *)(*(_QWORD *)(v25 + 192)+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 23, (unsigned __int8 *)v56)+ 16), 1);
          LOBYTE(v56[0]) = 4;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 4u);
          v28 = *(_QWORD *)(*(_QWORD *)(v25 + 192)
                          + 32
                          * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 23, (unsigned __int8 *)v56)+ 24);
          LOBYTE(v56[0]) = 4;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 4u);
          objc_msgSend(*this, "setBuffer:offset:atIndex:", v28, *(unsigned int *)(*(_QWORD *)(v25 + 192)+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 23, (unsigned __int8 *)v56)+ 16), 2);
          LOBYTE(v56[0]) = 0;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 0);
          v29 = *(_QWORD *)(*v49
                          + 32
                          * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v50, (unsigned __int8 *)v56)+ 24);
          LOBYTE(v56[0]) = 0;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 0);
          objc_msgSend(*this, "setBuffer:offset:atIndex:", v29, *(unsigned int *)(*v49+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v50, (unsigned __int8 *)v56)+ 16), 3);
          LOBYTE(v56[0]) = 1;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 1u);
          v30 = *(_QWORD *)(*v49
                          + 32
                          * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v50, (unsigned __int8 *)v56)+ 24);
          LOBYTE(v56[0]) = 1;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 1u);
          objc_msgSend(*this, "setBuffer:offset:atIndex:", v30, *(unsigned int *)(*v49+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v50, (unsigned __int8 *)v56)+ 16), 4);
          v4 = v51;
          objc_msgSend(*this, "setBuffer:offset:atIndex:", **(_QWORD **)(v51 + 48), *(unsigned int *)(*(_QWORD *)(v51 + 48) + 8), 5);
          objc_msgSend(*this, "setBuffer:offset:atIndex:", **(_QWORD **)(v52 + 32), *(unsigned int *)(*(_QWORD *)(v52 + 32) + 8), 6);
          objc_msgSend(*this, "setBuffer:offset:atIndex:", **(_QWORD **)(v52 + 40), *(unsigned int *)(*(_QWORD *)(v52 + 40) + 8), 7);
          objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v4 + 16), *(unsigned int *)(v4 + 8), 8);
          v31 = v24;
          v32 = *this;
          *(_QWORD *)&v56[0] = (v22 + v24) / v24;
          v33 = vdupq_n_s64(1uLL);
        }
        else
        {
          LOBYTE(v56[0]) = 0;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 0);
          if (*(_BYTE *)(*v20
                        + 20
                        * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 15, (unsigned __int8 *)v56)+ 16) == 36)v34 = 96;
          else
            v34 = 32;
          v35 = objc_msgSend(*(id *)(a1 + v34), sel_maxTotalThreadsPerThreadgroup);
          v46 = (v22 + v35) / v35;
          v36 = v35;
          objc_msgSend(*this, "setComputePipelineState:", *(_QWORD *)(a1 + v34));
          LOBYTE(v56[0]) = 2;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 2u);
          v37 = v48 + 312 * v4;
          v38 = *(_QWORD *)(*(_QWORD *)(v37 + 192)
                          + 32
                          * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 23, (unsigned __int8 *)v56)+ 24);
          LOBYTE(v56[0]) = 2;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 2u);
          objc_msgSend(*this, "setBuffer:offset:atIndex:", v38, *(unsigned int *)(*(_QWORD *)(v37 + 192)+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v17 + 23, (unsigned __int8 *)v56)+ 16), 0);
          LOBYTE(v56[0]) = 0;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 0);
          v39 = *(_QWORD *)(*v49
                          + 32
                          * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v50, (unsigned __int8 *)v56)+ 24);
          LOBYTE(v56[0]) = 0;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 0);
          objc_msgSend(*this, "setBuffer:offset:atIndex:", v39, *(unsigned int *)(*v49+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v50, (unsigned __int8 *)v56)+ 16), 3);
          LOBYTE(v56[0]) = 1;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 1u);
          v4 = *(_QWORD *)(*v49
                         + 32
                         * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v50, (unsigned __int8 *)v56)+ 24);
          LOBYTE(v56[0]) = 1;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v17, 1u);
          objc_msgSend(*this, "setBuffer:offset:atIndex:", v4, *(unsigned int *)(*v49+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v50, (unsigned __int8 *)v56)+ 16), 4);
          objc_msgSend(*this, "setBuffer:offset:atIndex:", **(_QWORD **)(v52 + 32), *(unsigned int *)(*(_QWORD *)(v52 + 32) + 8), 6);
          objc_msgSend(*this, "setBuffer:offset:atIndex:", **(_QWORD **)(v52 + 40), *(unsigned int *)(*(_QWORD *)(v52 + 40) + 8), 7);
          objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v51 + 16), *(unsigned int *)(v51 + 8), 8);
          v31 = v36;
          v32 = *this;
          *(_QWORD *)&v56[0] = v46;
          v33 = vdupq_n_s64(1uLL);
        }
        *(int64x2_t *)((char *)v56 + 8) = v33;
        *(_QWORD *)v53 = v31;
        *(int64x2_t *)&v53[8] = v33;
        objc_msgSend(v32, "dispatchThreadgroups:threadsPerThreadgroup:", v56, v53);
        a2 = v43;
        v5 = v44;
        v11 = v41;
        v8 = v42;
      }
      ++v10;
      v9 += 56;
    }
    while (v8 != v10);
  }
  return objc_msgSend(*this, "popDebugGroup");
}

void re::RenormalizationDeformer::deformCPU(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id **v13;
  uint64_t v14;
  uint64_t v15;
  id **v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  double (*v28)(re *, const void *, float16x4_t);
  uint64_t v29;
  re *v30;
  uint64_t v31;
  uint64_t v32;
  float16x4_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  float16x4_t v42;
  uint64_t v43;
  char *v44;
  float32x4_t v45;
  uint64_t v46;
  float32x4_t v47;
  uint64_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  int8x16_t v52;
  uint64_t v53;
  uint64_t v54;
  float16x4_t v55;
  uint64_t v56;
  unsigned __int16 *v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  float16x4_t v64;
  uint64_t v65;
  char *v66;
  float32x4_t v67;
  unsigned int v68;
  uint64_t v69;
  float32x4_t v70;
  uint64_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int8x16_t v74;
  int8x16_t v75;
  id *v76;
  char *v77;
  uint64_t v78;
  id *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  float32x4_t v96;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x4_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v108;
  unsigned int v109;
  id **v110;
  id **v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  const char *v127;
  __int16 v128;
  int v129;
  __int16 v130;
  unint64_t v131;
  __int16 v132;
  unint64_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;

  v139 = *MEMORY[0x24BDAC8D0];
  v3 = *a3;
  v124 = 0;
  v121 = 0;
  v122 = 0;
  v120 = 0;
  v123 = 0;
  v4 = *(_QWORD *)(v3 + 48);
  if (!v4)
    return;
  v5 = a3;
  v6 = a2;
  v7 = 0;
  v114 = v3 + 8;
  v105 = *(_QWORD *)(v3 + 48);
  do
  {
    v8 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v114, v7);
    v10 = *(_QWORD *)(v6 + 8);
    if (v10 <= v7)
      goto LABEL_58;
    v11 = *(_QWORD *)(v6 + 16);
    v12 = v11 + 56 * v7;
    v14 = *(_QWORD *)(v12 + 32);
    v13 = (id **)(v12 + 32);
    if (v14)
    {
      v15 = v11 + 56 * v7;
      v17 = *(_QWORD *)(v15 + 40);
      v16 = (id **)(v15 + 40);
      if (v17)
      {
        v18 = *(_QWORD *)(v8 + 8);
        v19 = v5[6];
        if (v19 <= v18)
          goto LABEL_59;
        v110 = v13;
        v111 = v16;
        v112 = v5[5];
        v113 = *(_QWORD *)(v8 + 8);
        v20 = (_QWORD *)(v112 + 312 * v18);
        v21 = *(_QWORD *)(v11 + 56 * v7 + 24);
        LOBYTE(v134) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v20, 1u);
        v22 = v20 + 8;
        v109 = *(_DWORD *)(v20[8]
                         + 32
                         * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v20 + 7, (unsigned __int8 *)&v134)+ 20);
        LOBYTE(v134) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v20, 1u);
        v23 = v20 + 15;
        v24 = v20 + 16;
        v108 = *(unsigned __int16 *)(v20[16]
                                   + 20
                                   * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v20 + 15, (unsigned __int8 *)&v134)+ 4);
        LOBYTE(v134) = 1;
        v115 = (uint64_t)v20;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v20, 1u);
        v26 = *(unsigned __int8 *)(v20[16]
                                 + 20
                                 * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v20 + 15, (unsigned __int8 *)&v134)+ 16);
        if (v26 > 0x19)
        {
          v28 = re::unpackHalf3Data;
          v27 = v20 + 7;
          if ((_DWORD)v26 != 26)
          {
            if ((_DWORD)v26 != 30)
              goto LABEL_60;
            v28 = (double (*)(re *, const void *, float16x4_t))re::unpackFloat3Data;
          }
        }
        else if ((_DWORD)v26 == 8)
        {
          v28 = (double (*)(re *, const void *, float16x4_t))re::unpackUChar3NormalizedData;
          v27 = v20 + 7;
        }
        else
        {
          if ((_DWORD)v26 != 11)
            goto LABEL_60;
          v27 = v20 + 7;
          v28 = (double (*)(re *, const void *, float16x4_t))re::unpackChar3NormalizedData;
        }
        v122 = 0;
        ++v123;
        if (v121 < v21 / 3)
          re::DynamicArray<re::MeshLodLevelInfo>::setCapacity(&v120, v21 / 3);
        LOBYTE(v134) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v115, 1u);
        v29 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v27, (unsigned __int8 *)&v134);
        v30 = (re *)(*(_QWORD *)(*v22 + 32 * v29 + 8) + *(unsigned int *)(*v22 + 32 * v29 + 16));
        LOBYTE(v134) = 0;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v115, 0);
        if (*(_BYTE *)(*v24
                      + 20
                      * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v23, (unsigned __int8 *)&v134)+ 16) == 36)
        {
          LOBYTE(v134) = 0;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized(v115, 0);
          v31 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v27, (unsigned __int8 *)&v134);
          if (v21)
          {
            v5 = 0;
            v34 = *v22 + 32 * v31;
            v10 = (unint64_t)*(unsigned int *)(v34 + 20) >> 2;
            v35 = (unsigned int *)(*(_QWORD *)(v34 + 8) + *(unsigned int *)(v34 + 16) + 4);
            while ((unint64_t)v5 < v10)
            {
              v38 = v28(v30, (const void *)*(v35 - 1), v33);
              v39 = (char *)v5 + 1;
              if ((unint64_t)v5 + 1 >= v10)
                goto LABEL_54;
              v40 = v36;
              v41 = v37;
              v28(v30, (const void *)*v35, *(float16x4_t *)&v38);
              v44 = (char *)v5 + 2;
              if ((unint64_t)v5 + 2 >= v10)
                goto LABEL_56;
              v45.i64[0] = v40;
              v45.i64[1] = v41;
              v118 = v45;
              *(float16x4_t *)v45.f32 = v42;
              v45.i64[1] = v43;
              v116 = v45;
              v28(v30, (const void *)v35[1], v42);
              v47.i64[0] = v46;
              v47.i64[1] = v48;
              v49 = vsubq_f32(v116, v118);
              v50 = vsubq_f32(v47, v118);
              v51 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), (int8x16_t)v50, 0xCuLL), vnegq_f32(v49)), v50, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL));
              v52 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), v51, 0xCuLL);
              *(_QWORD *)&v134 = v52.i64[0];
              DWORD2(v134) = v52.i32[2];
              re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((_anonymous_namespace_ *)&v120, (uint64_t *)&v134);
              v5 = (_QWORD *)((char *)v5 + 3);
              v35 += 3;
              if ((unint64_t)v5 >= v21)
                goto LABEL_31;
            }
            goto LABEL_52;
          }
        }
        else
        {
          LOBYTE(v134) = 0;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized(v115, 0);
          v53 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v27, (unsigned __int8 *)&v134);
          if (v21)
          {
            v5 = 0;
            v56 = *v22 + 32 * v53;
            v10 = (unint64_t)*(unsigned int *)(v56 + 20) >> 1;
            v57 = (unsigned __int16 *)(*(_QWORD *)(v56 + 8) + *(unsigned int *)(v56 + 16) + 4);
            while ((unint64_t)v5 < v10)
            {
              v60 = v28(v30, (const void *)*(v57 - 2), v55);
              v61 = (char *)v5 + 1;
              if ((unint64_t)v5 + 1 >= v10)
                goto LABEL_55;
              v62 = v58;
              v63 = v59;
              v28(v30, (const void *)*(v57 - 1), *(float16x4_t *)&v60);
              v66 = (char *)v5 + 2;
              if ((unint64_t)v5 + 2 >= v10)
                goto LABEL_57;
              v67.i64[0] = v62;
              v67.i64[1] = v63;
              v119 = v67;
              *(float16x4_t *)v67.f32 = v64;
              v67.i64[1] = v65;
              v117 = v67;
              v68 = *v57;
              v57 += 3;
              v28(v30, (const void *)v68, v64);
              v70.i64[0] = v69;
              v70.i64[1] = v71;
              v72 = vsubq_f32(v117, v119);
              v73 = vsubq_f32(v70, v119);
              v74 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v73, (int32x4_t)v73), (int8x16_t)v73, 0xCuLL), vnegq_f32(v72)), v73, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v72, (int32x4_t)v72), (int8x16_t)v72, 0xCuLL));
              v75 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v74, (int32x4_t)v74), v74, 0xCuLL);
              *(_QWORD *)&v134 = v75.i64[0];
              DWORD2(v134) = v75.i32[2];
              re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((_anonymous_namespace_ *)&v120, (uint64_t *)&v134);
              v5 = (_QWORD *)((char *)v5 + 3);
              if ((unint64_t)v5 >= v21)
                goto LABEL_31;
            }
            goto LABEL_53;
          }
        }
LABEL_31:
        v76 = *v110;
        v77 = (char *)objc_msgSend(**v110, sel_contents);
        v78 = *((unsigned int *)v76 + 2);
        v79 = *v111;
        v80 = (char *)objc_msgSend(**v111, sel_contents);
        v10 = *((unsigned int *)v79 + 2);
        LOBYTE(v134) = 2;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v115, 2u);
        v81 = v112 + 312 * v113;
        v82 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(v81 + 184), (unsigned __int8 *)&v134);
        v6 = a2;
        v5 = a3;
        v4 = v105;
        if (v109 >= v108)
        {
          v85 = 0;
          LODWORD(v86) = v109 / v108;
          v87 = &v77[v78];
          v88 = &v80[v10];
          v89 = *(_QWORD *)(v81 + 192) + 32 * v82;
          v90 = *(_QWORD *)(v89 + 8) + *(unsigned int *)(v89 + 16);
          v91 = *(unsigned int *)(v89 + 20) / 0xCuLL;
          if (v109 / v108 <= 1)
            v86 = 1;
          else
            v86 = v86;
          v92 = v122;
          v93 = v124;
          while (1)
          {
            v94 = v85 ? *(_DWORD *)&v88[4 * v85 - 4] : 0;
            v95 = *(int *)&v88[4 * v85];
            v96 = 0uLL;
            if (v94 < (int)v95)
              break;
LABEL_43:
            if (v85 == v91)
              goto LABEL_51;
            v84 = vmulq_f32(v96, v96);
            v84.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v84, 2), vadd_f32(*(float32x2_t *)v84.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v84.f32, 1))).u32[0];
            v101 = vrsqrte_f32((float32x2_t)v84.u32[0]);
            v102 = vmul_f32(v101, vrsqrts_f32((float32x2_t)v84.u32[0], vmul_f32(v101, v101)));
            v103 = vmulq_n_f32(v96, vmul_f32(v102, vrsqrts_f32((float32x2_t)v84.u32[0], vmul_f32(v102, v102))).f32[0]);
            v104 = v90 + 12 * v85;
            *(_QWORD *)v104 = v103.i64[0];
            *(_DWORD *)(v104 + 8) = v103.i32[2];
            if (++v85 == v86)
              goto LABEL_45;
          }
          v97 = v95 - v94;
          v98 = &v87[4 * v94];
          while (1)
          {
            v99 = *(int *)v98;
            v98 += 4;
            v10 = v99;
            if (v92 <= v99)
              break;
            v100 = v93 + 12 * (int)v10;
            v84.i64[0] = *(_QWORD *)v100;
            v84.i32[2] = *(_DWORD *)(v100 + 8);
            v96 = vaddq_f32(v96, v84);
            if (!--v97)
              goto LABEL_43;
          }
          v125 = 0;
          v137 = 0u;
          v138 = 0u;
          v135 = 0u;
          v136 = 0u;
          v134 = 0u;
          v7 = MEMORY[0x24BDACB70];
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v126 = 136315906;
          v127 = "operator[]";
          v128 = 1024;
          v129 = 789;
          v130 = 2048;
          v131 = v10;
          v132 = 2048;
          v133 = v92;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_51:
          re::internal::assertLog((re::internal *)6, v83, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v91, v91);
          _os_crash();
          __break(1u);
LABEL_52:
          re::internal::assertLog((re::internal *)6, v32, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v5, v10);
          _os_crash();
          __break(1u);
LABEL_53:
          re::internal::assertLog((re::internal *)6, v54, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v5, v10);
          _os_crash();
          __break(1u);
LABEL_54:
          re::internal::assertLog((re::internal *)6, v37, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v39, v10);
          _os_crash();
          __break(1u);
LABEL_55:
          re::internal::assertLog((re::internal *)6, v59, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v61, v10);
          _os_crash();
          __break(1u);
LABEL_56:
          re::internal::assertLog((re::internal *)6, v43, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v44, v10);
          _os_crash();
          __break(1u);
LABEL_57:
          re::internal::assertLog((re::internal *)6, v65, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v66, v10);
          _os_crash();
          __break(1u);
LABEL_58:
          v125 = 0;
          v137 = 0u;
          v138 = 0u;
          v135 = 0u;
          v136 = 0u;
          v134 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v126 = 136315906;
          v127 = "operator[]";
          v128 = 1024;
          v129 = 468;
          v130 = 2048;
          v131 = v7;
          v132 = 2048;
          v133 = v10;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_59:
          re::internal::assertLog((re::internal *)6, v9, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v18, v19);
          _os_crash();
          __break(1u);
LABEL_60:
          re::internal::assertLog((re::internal *)5, v25, "assertion failure: '%s' (%s:line %i) Unsupported packed vertex format: %u.", "!\"Unreachable code\"", "vertexUnpackFunctionForFormat", 45, v26);
          _os_crash();
          __break(1u);
        }
      }
    }
LABEL_45:
    ++v7;
  }
  while (v7 != v4);
  if (v120)
  {
    if (v124)
      (*(void (**)(void))(*(_QWORD *)v120 + 40))();
  }
}

void re::RenormalizationDeformer::~RenormalizationDeformer(re::RenormalizationDeformer *this)
{
  uint64_t i;
  void *v3;

  for (i = 144; i != 16; i -= 8)
  {
    v3 = *(void **)((char *)this + i);
    if (v3)
    {

      *(_QWORD *)((char *)this + i) = 0;
    }
  }
}

{
  uint64_t v2;
  void *v3;

  v2 = 144;
  while (1)
  {
    v3 = *(void **)((char *)this + v2);
    if (v3)
    {

      *(_QWORD *)((char *)this + v2) = 0;
    }
    v2 -= 8;
    if (v2 == 16)
      JUMPOUT(0x2276933B8);
  }
}

void re::internal::Callable<re::RenormalizationDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::RenormalizationDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t result;

  v2 = *a2;
  result = **a2;
  if (result)
  {
    if (v2[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v2[2]);
      v2[1] = 0;
      v2[2] = 0;
    }
    *v2 = 0;
  }
  return result;
}

_QWORD *re::internal::Callable<re::RenormalizationDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED770C8;
  return result;
}

_QWORD *re::internal::Callable<re::RenormalizationDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED770C8;
  return result;
}

uint64_t re::internal::Callable<re::RenormalizationDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::size()
{
  return 16;
}

double re::TextManager::deinit(re::TextManager *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)this + 112) = 0;
  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    re::internal::destroyPersistent<re::TextRenderData>((re *)"deinit", 165, v2);
    *((_QWORD *)this + 13) = 0;
  }
  v3 = *((unsigned int *)this + 22);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = (int *)(*((_QWORD *)this + 9) + 8);
    while (1)
    {
      v6 = *v5;
      v5 += 10;
      if (v6 < 0)
        break;
      if (v3 == ++v4)
      {
        LODWORD(v4) = *((_DWORD *)this + 22);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if ((_DWORD)v3 != (_DWORD)v4)
  {
    v7 = v4;
    do
    {
      re::internal::destroyPersistent<re::FontAssetInternal>((re *)"deinit", 170, *(id **)(*((_QWORD *)this + 9) + 40 * v7 + 32));
      v8 = *((_DWORD *)this + 22);
      if (v8 <= (int)v4 + 1)
        v9 = v4 + 1;
      else
        v9 = *((_DWORD *)this + 22);
      v10 = v4;
      while (1)
      {
        v7 = (v10 + 1);
        if (v9 - 1 == v10)
          break;
        ++v10;
        LODWORD(v4) = v7;
        if ((*(_DWORD *)(*((_QWORD *)this + 9) + 40 * v7 + 8) & 0x80000000) != 0)
          goto LABEL_19;
      }
      LODWORD(v4) = v9;
LABEL_19:
      ;
    }
    while (v8 != (_DWORD)v4);
  }
  re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::deinit((uint64_t *)this + 7);
  v11.n128_f64[0] = re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 1);
  *(_QWORD *)this = 0;
  if (*((_QWORD *)this + 21))
  {
    v12 = *((_QWORD *)this + 23);
    if (v12)
    {
      do
      {
        v13 = *(_QWORD *)(v12 + 8);
        (*(void (**)(_QWORD, __n128))(**((_QWORD **)this + 22) + 40))(*((_QWORD *)this + 22), v11);
        v12 = v13;
      }
      while (v13);
    }
    *((_QWORD *)this + 24) = 0;
    v11.n128_u64[0] = 0;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 9) = 0u;
  }
  return v11.n128_f64[0];
}

re *re::internal::destroyPersistent<re::TextRenderData>(re *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __n128 v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    v5.n128_f64[0] = re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::deinit((uint64_t *)(a3 + 320));
    v6 = *(void **)(a3 + 312);
    if (v6)
    {

      *(_QWORD *)(a3 + 312) = 0;
    }
    if (*(_BYTE *)(a3 + 256))
    {
      v7 = *(_QWORD *)(a3 + 264);
      if (v7)
      {
        if ((*(_BYTE *)(a3 + 272) & 1) != 0)
          (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(a3 + 280), v5);
        v5 = 0uLL;
        *(_OWORD *)(a3 + 264) = 0u;
        *(_OWORD *)(a3 + 280) = 0u;
      }
    }
    if (*(_BYTE *)(a3 + 200))
    {
      v8 = *(_QWORD *)(a3 + 208);
      if (v8)
      {
        if ((*(_BYTE *)(a3 + 216) & 1) != 0)
          (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(a3 + 224), v5);
        *(_OWORD *)(a3 + 208) = 0u;
        *(_OWORD *)(a3 + 224) = 0u;
      }
    }
    re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)(a3 + 152));
    re::TextRenderGroupData::~TextRenderGroupData((re::TextRenderGroupData *)(a3 + 8));
    if (*(_QWORD *)a3)
    {

      *(_QWORD *)a3 = 0;
    }
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

re *re::internal::destroyPersistent<re::FontAssetInternal>(re *result, uint64_t a2, id *a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    if (*a3)
    {

      *a3 = 0;
    }
    return (re *)(*(uint64_t (**)(uint64_t, id *))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

double re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8;
      do
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v5);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v5) = v7 & 0x7FFFFFFF;
          re::StringID::destroyString((re::StringID *)(v6 + v5 + 8));
          v3 = *((unsigned int *)a1 + 8);
        }
        ++v4;
        v5 += 40;
      }
      while (v4 < v3);
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

BOOL re::HashSetBase<re::FontID,re::FontID,re::internal::ValueAsKey<re::FontID>,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::contains(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v2)
    return 0;
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((*a2 >> 1) % v2));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  do
  {
    v7 = v6 + 32 * v4;
    result = re::StringID::operator==((_QWORD *)(v7 + 16), a2);
    if (result)
      break;
    v4 = *(_DWORD *)(v7 + 8) & 0x7FFFFFFF;
  }
  while (v4 != 0x7FFFFFFF);
  return result;
}

BOOL re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::containsKey(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = 0x7FFFFFFFLL;
  if (*(_QWORD *)a1)
  {
    v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((*a2 >> 1) % (unint64_t)*(unsigned int *)(a1 + 24)));
    if ((_DWORD)v4 != 0x7FFFFFFF)
    {
      v5 = *(_QWORD *)(a1 + 16);
      v2 = 0x7FFFFFFFLL;
      while (!re::StringID::operator==((_QWORD *)(v5 + 40 * v4 + 16), a2))
      {
        v4 = *(_DWORD *)(v5 + 40 * v4 + 8) & 0x7FFFFFFF;
        if (v4 == 0x7FFFFFFF)
          return v2 != 0x7FFFFFFF;
      }
      v2 = v4;
    }
  }
  return v2 != 0x7FFFFFFF;
}

void re::TextManager::addFont(uint64_t a1, StringID *a2, void **a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  _BOOL8 v20;
  NSObject *v21;
  char *var1;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v8 = re::globalAllocators((re *)a1);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 16, 8);
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  NS::SharedPtr<MTL::Texture>::operator=((void **)v9, a3);
  *(_QWORD *)(v9 + 8) = a4;
  v10 = *(_QWORD *)&a2->var0 >> 1;
  v11 = *(unsigned int *)(a1 + 32);
  if (!(_DWORD)v11)
  {
    LODWORD(v12) = 0;
    goto LABEL_8;
  }
  v12 = v10 % v11;
  v13 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * (v10 % v11));
  if ((_DWORD)v13 == 0x7FFFFFFF)
  {
LABEL_8:
    v16 = *(unsigned int *)(a1 + 44);
    if ((_DWORD)v16 == 0x7FFFFFFF)
    {
      v16 = *(unsigned int *)(a1 + 40);
      v17 = v16;
      if ((_DWORD)v16 == (_DWORD)v11)
      {
        re::HashSetBase<re::FontID,re::FontID,re::internal::ValueAsKey<re::FontID>,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::setCapacity(a1 + 8, 2 * *(_DWORD *)(a1 + 36));
        LODWORD(v12) = v10 % *(unsigned int *)(a1 + 32);
        v17 = *(_DWORD *)(a1 + 40);
      }
      *(_DWORD *)(a1 + 40) = v17 + 1;
      v18 = *(_QWORD *)(a1 + 24);
      v19 = *(_DWORD *)(v18 + 32 * v16 + 8);
    }
    else
    {
      v18 = *(_QWORD *)(a1 + 24);
      v19 = *(_DWORD *)(v18 + 32 * v16 + 8);
      *(_DWORD *)(a1 + 44) = v19 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v18 + 32 * v16 + 8) = v19 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 24) + 32 * v16 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 32 * v16 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v12);
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32 * v16) = v10;
    re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 24) + 32 * v16 + 16), a2);
    *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v12) = v16;
    ++*(_DWORD *)(a1 + 36);
    ++*(_DWORD *)(a1 + 48);
    goto LABEL_14;
  }
  v14 = *(_QWORD *)(a1 + 24);
  while (1)
  {
    v15 = v14 + 32 * v13;
    if (re::StringID::operator==((_QWORD *)(v15 + 16), a2))
      break;
    v13 = *(_DWORD *)(v15 + 8) & 0x7FFFFFFF;
    if (v13 == 0x7FFFFFFF)
      goto LABEL_8;
  }
LABEL_14:
  v20 = re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::containsKey(a1 + 56, a2);
  if (v20)
  {
    v21 = *re::graphicsLogObjects((re *)v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      var1 = a2->var1;
      v31 = 136315138;
      v32 = var1;
      _os_log_error_impl(&dword_224FE9000, v21, OS_LOG_TYPE_ERROR, "%s font already added to TextManager. Why is this being added again?", (uint8_t *)&v31, 0xCu);
    }
    return;
  }
  v23 = *(_QWORD *)&a2->var0 >> 1;
  if (!*(_QWORD *)(a1 + 56))
  {
    LODWORD(v24) = 0;
    goto LABEL_24;
  }
  v24 = v23 % *(unsigned int *)(a1 + 80);
  v25 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * v24);
  if ((_DWORD)v25 == 0x7FFFFFFF)
  {
LABEL_24:
    v27 = *(unsigned int *)(a1 + 92);
    if ((_DWORD)v27 == 0x7FFFFFFF)
    {
      v27 = *(unsigned int *)(a1 + 88);
      v28 = v27;
      if ((_DWORD)v27 == *(_DWORD *)(a1 + 80))
      {
        re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::setCapacity(a1 + 56, 2 * *(_DWORD *)(a1 + 84));
        LODWORD(v24) = v23 % *(unsigned int *)(a1 + 80);
        v28 = *(_DWORD *)(a1 + 88);
      }
      *(_DWORD *)(a1 + 88) = v28 + 1;
      v29 = *(_QWORD *)(a1 + 72);
      v30 = *(_DWORD *)(v29 + 40 * v27 + 8);
    }
    else
    {
      v29 = *(_QWORD *)(a1 + 72);
      v30 = *(_DWORD *)(v29 + 40 * v27 + 8);
      *(_DWORD *)(a1 + 92) = v30 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v29 + 40 * v27 + 8) = v30 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 72) + 40 * v27 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 40 * v27 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v24);
    *(_QWORD *)(*(_QWORD *)(a1 + 72) + 40 * v27) = v23;
    re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 72) + 40 * v27 + 16), a2);
    *(_QWORD *)(*(_QWORD *)(a1 + 72) + 40 * v27 + 32) = v9;
    *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v24) = v27;
    ++*(_DWORD *)(a1 + 84);
    ++*(_DWORD *)(a1 + 96);
    return;
  }
  v26 = *(_QWORD *)(a1 + 72);
  while (!re::StringID::operator==((_QWORD *)(v26 + 40 * v25 + 16), a2))
  {
    v25 = *(_DWORD *)(v26 + 40 * v25 + 8) & 0x7FFFFFFF;
    if (v25 == 0x7FFFFFFF)
      goto LABEL_24;
  }
}

uint64_t re::TextManager::removeFont(re::TextManager *this, const re::FontID *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = re::HashSetBase<re::FontID,re::FontID,re::internal::ValueAsKey<re::FontID>,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::contains((uint64_t)this + 8, a2);
  if ((_DWORD)result)
  {
    result = re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::containsKey((uint64_t)this + 56, a2);
    if ((_DWORD)result)
    {
      v5 = 0x7FFFFFFFLL;
      if (*((_QWORD *)this + 7))
      {
        v6 = *(unsigned int *)(*((_QWORD *)this + 8)
                             + 4 * ((*(_QWORD *)a2 >> 1) % (unint64_t)*((unsigned int *)this + 20)));
        if ((_DWORD)v6 != 0x7FFFFFFF)
        {
          v7 = *((_QWORD *)this + 9);
          v5 = 0x7FFFFFFFLL;
          while (!re::StringID::operator==((_QWORD *)(v7 + 40 * v6 + 16), a2))
          {
            v6 = *(_DWORD *)(v7 + 40 * v6 + 8) & 0x7FFFFFFF;
            if (v6 == 0x7FFFFFFF)
              goto LABEL_11;
          }
          v5 = v6;
        }
      }
LABEL_11:
      re::internal::destroyPersistent<re::FontAssetInternal>((re *)"removeFont", 210, *(id **)(*((_QWORD *)this + 9) + 40 * v5 + 32));
      return re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::remove((uint64_t)this + 56, a2);
    }
  }
  return result;
}

uint64_t re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::remove(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int *v14;
  int v15;
  int v16;

  if (!*(_QWORD *)a1)
    return 0;
  v4 = (*a2 >> 1) % (unint64_t)*(unsigned int *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(v5 + 4 * v4);
  if ((_DWORD)v6 == 0x7FFFFFFF)
    return 0;
  v8 = *(_QWORD *)(a1 + 16);
  if (!re::StringID::operator==((_QWORD *)(v8 + 40 * v6 + 16), a2))
  {
    while (1)
    {
      v9 = v6;
      v10 = *(_DWORD *)(v8 + 40 * v6 + 8);
      v6 = v10 & 0x7FFFFFFF;
      if ((v10 & 0x7FFFFFFF) == 0x7FFFFFFF)
        return 0;
      if (re::StringID::operator==((_QWORD *)(v8 + 40 * v6 + 16), a2))
      {
        *(_DWORD *)(v8 + 40 * v9 + 8) = *(_DWORD *)(v8 + 40 * v9 + 8) & 0x80000000 | *(_DWORD *)(v8 + 40 * v6 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v5 + 4 * v4) = *(_DWORD *)(v8 + 40 * v6 + 8) & 0x7FFFFFFF;
LABEL_9:
  v11 = *(_QWORD *)(a1 + 16);
  v12 = v11 + 40 * v6;
  v15 = *(_DWORD *)(v12 + 8);
  v14 = (int *)(v12 + 8);
  v13 = v15;
  if (v15 < 0)
  {
    *v14 = v13 & 0x7FFFFFFF;
    re::StringID::destroyString((re::StringID *)(v11 + 40 * v6 + 16));
    v11 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v11 + 40 * v6 + 8);
  }
  v16 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v11 + 40 * v6 + 8) = *(_DWORD *)(a1 + 36) | v13 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v6;
  *(_DWORD *)(a1 + 40) = v16 + 1;
  return 1;
}

uint64_t re::TextManager::addStringToGroup(re *a1, uint64_t a2, char *__src, size_t __len, uint64_t a5)
{
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v13;
  unint64_t *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  size_t v24;
  uint8_t buf[32];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 80) >= 0x400uLL)
  {
    v6 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v7;
      v8 = "String count of text group %p exceeds maximum (%lu).";
LABEL_9:
      _os_log_impl(&dword_224FE9000, v6, OS_LOG_TYPE_DEFAULT, v8, buf, 0x16u);
      return 0;
    }
    return 0;
  }
  if (*(_QWORD *)(a2 + 88) >= 0x4000uLL)
  {
    v6 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 23;
      if ((*(_QWORD *)(a2 + 56) & 1) != 0)
        v9 = *(_QWORD *)(a2 + 72);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v9;
      v8 = "Glyph count of text group %p exceeds maximum (%lu).";
      goto LABEL_9;
    }
    return 0;
  }
  re::DynamicString::append((re::DynamicString *)(a2 + 48), __src, __len);
  v13 = *(_QWORD *)(a2 + 80);
  if (*(_QWORD *)(a2 + 8) <= v13)
  {
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_16:
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v14 = re::StringID::operator=((unint64_t *)(*(_QWORD *)(a2 + 16) + 144 * v13), (uint64_t *)a5);
  v15 = *(_OWORD *)(a5 + 16);
  v16 = *(_OWORD *)(a5 + 32);
  v17 = *(_OWORD *)(a5 + 64);
  *((_OWORD *)v14 + 3) = *(_OWORD *)(a5 + 48);
  *((_OWORD *)v14 + 4) = v17;
  *((_OWORD *)v14 + 1) = v15;
  *((_OWORD *)v14 + 2) = v16;
  v18 = *(_OWORD *)(a5 + 80);
  v19 = *(_OWORD *)(a5 + 96);
  v20 = *(_OWORD *)(a5 + 112);
  v14[16] = *(_QWORD *)(a5 + 128);
  *((_OWORD *)v14 + 6) = v19;
  *((_OWORD *)v14 + 7) = v20;
  *((_OWORD *)v14 + 5) = v18;
  v21 = *(_QWORD *)(a2 + 80);
  if (*(_QWORD *)(a2 + 8) <= v21)
    goto LABEL_16;
  v22 = (_QWORD *)(*(_QWORD *)(a2 + 16) + 144 * v21);
  v22[13] = *(_QWORD *)(a2 + 88);
  v22[14] = __len;
  result = *(int *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = result + 1;
  v23 = *(_QWORD *)(a2 + 136);
  v22[15] = result;
  v22[16] = v23;
  v24 = *(_QWORD *)(a2 + 88) + __len;
  ++*(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 88) = v24;
  *(_BYTE *)(a2 + 128) = 1;
  return result;
}

void *re::TextManager::drawDynamicText(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  const void *v14;
  void *result;

  re::StringID::operator=((unint64_t *)a2, (uint64_t *)a4);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a4 + 16);
  v8 = *(_OWORD *)(a4 + 80);
  v10 = *(_OWORD *)(a4 + 32);
  v9 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(a2 + 80) = v8;
  *(_OWORD *)(a2 + 32) = v10;
  *(_OWORD *)(a2 + 48) = v9;
  v11 = a3[1];
  if ((v11 & 1) != 0)
    v12 = v11 >> 1;
  else
    v12 = v11 >> 1;
  *(_QWORD *)(a2 + 104) = v12;
  v13 = (void *)re::GrowableLinearAllocator::alloc((re::GrowableLinearAllocator *)(a1 + 120), v12 + 1, 0);
  *(_QWORD *)(a2 + 96) = v13;
  if ((a3[1] & 1) != 0)
    v14 = (const void *)a3[2];
  else
    v14 = (char *)a3 + 9;
  result = memcpy(v13, v14, *(_QWORD *)(a2 + 104) + 1);
  *(_QWORD *)(a2 + 112) = -1;
  return result;
}

uint64_t re::TextManager::addStaticText(re::TextManager *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  re *v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  size_t v15;
  _OWORD v17[3];
  _OWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v6 = re::TextManager::renderData(a1);
  v7 = (re *)re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v6 + 152, (uint64_t *)(a3 + 96));
  v8 = v7;
  if (!v7)
  {
    memset(v18, 0, sizeof(v18));
    memset(v17, 0, sizeof(v17));
    re::DynamicString::setCapacity(v18, 0);
    v19 = 0;
    v20 = 0;
    v21 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    v25 = 0;
    v26 = -1;
    v9 = re::TextManager::renderData(a1);
    re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<re::TextRenderGroupData&>(v9 + 152, (uint64_t *)(a3 + 96), (uint64_t)v17);
    v10 = re::TextManager::renderData(a1);
    v8 = (_anonymous_namespace_ *)re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v10 + 152, (uint64_t *)(a3 + 96));
    *((_QWORD *)v8 + 17) = *(_QWORD *)(a3 + 96);
    re::TextRenderGroupData::~TextRenderGroupData((re::TextRenderGroupData *)v17);
  }
  v11 = *(_QWORD *)(a2 + 8);
  if ((v11 & 1) != 0)
    v12 = *(char **)(a2 + 16);
  else
    v12 = (char *)(a2 + 9);
  v13 = v11 >> 1;
  v14 = v11 >> 1;
  if ((*(_QWORD *)(a2 + 8) & 1) != 0)
    v15 = v13;
  else
    v15 = v14;
  return re::TextManager::addStringToGroup(v7, (uint64_t)v8, v12, v15, a3);
}

uint64_t re::TextManager::renderData(re::TextManager *this)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t v4;
  id v5;
  uint64_t *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _BYTE *v11;
  void *v12;
  id v13;
  id v14;

  result = *((_QWORD *)this + 13);
  if (!result)
  {
    v3 = re::globalAllocators(0);
    v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 368, 8);
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_QWORD *)(v4 + 80) = 0;
    re::DynamicString::setCapacity((_QWORD *)(v4 + 56), 0);
    *(_QWORD *)(v4 + 88) = 0;
    *(_QWORD *)(v4 + 96) = 0;
    *(_DWORD *)(v4 + 104) = 1;
    *(_QWORD *)(v4 + 120) = 0;
    *(_QWORD *)(v4 + 128) = 0;
    *(_QWORD *)(v4 + 112) = 0;
    *(_BYTE *)(v4 + 136) = 0;
    *(_QWORD *)(v4 + 144) = -1;
    *(_OWORD *)(v4 + 152) = 0u;
    *(_OWORD *)(v4 + 168) = 0u;
    *(_DWORD *)(v4 + 184) = 0;
    *(_QWORD *)(v4 + 188) = 0x7FFFFFFFLL;
    *(_BYTE *)(v4 + 200) = 0;
    *(_QWORD *)(v4 + 240) = 0x700000007;
    *(_DWORD *)(v4 + 249) = -1;
    *(_WORD *)(v4 + 254) = 0;
    *(_BYTE *)(v4 + 256) = 0;
    *(_QWORD *)(v4 + 296) = 0x700000007;
    *(_DWORD *)(v4 + 305) = -1;
    *(_OWORD *)(v4 + 340) = 0u;
    *(_OWORD *)(v4 + 326) = 0u;
    *(_OWORD *)(v4 + 310) = 0u;
    *(_QWORD *)(v4 + 356) = 0x7FFFFFFFLL;
    *((_QWORD *)this + 13) = v4;
    v5 = *(id *)(*(_QWORD *)this + 184);
    v6 = *(uint64_t **)(*(_QWORD *)this + 56);
    v14 = objc_msgSend(v5, sel_newBufferWithLength_options_, 192, 0);
    NS::SharedPtr<MTL::Texture>::operator=(*((void ***)this + 13), &v14);
    if (v14)

    re::ShaderManager::makeFunction(v6, v6[32], (re::ns *)"fsSdfFont", 0, &v14);
    re::ShaderManager::makeFunction(v6, v6[32], (re::ns *)"vsSdfFont", 0, &v13);
    v7 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD770], sel_alloc), sel_init);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_attributes), sel_objectAtIndexedSubscript_, 0), sel_setFormat_, 31);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_attributes), sel_objectAtIndexedSubscript_, 0), sel_setBufferIndex_, 0);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_attributes), sel_objectAtIndexedSubscript_, 0), sel_setOffset_, 0);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_attributes), sel_objectAtIndexedSubscript_, 1), sel_setFormat_, 29);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_attributes), sel_objectAtIndexedSubscript_, 1), sel_setBufferIndex_, 0);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_attributes), sel_objectAtIndexedSubscript_, 1), sel_setOffset_, 16);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_layouts), sel_objectAtIndexedSubscript_, 0), sel_setStride_, 32);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_layouts), sel_objectAtIndexedSubscript_, 0), sel_setStepFunction_, 1);
    re::ShaderManager::makeRenderPipelineDescriptor((re::ShaderManager *)v6, &v12);
    v8 = *((_QWORD *)this + 13);
    v9 = *(void **)(v8 + 312);
    v10 = v12;
    if (v9 == v12)
    {

    }
    else
    {
      if (v9)
      {

        v10 = v12;
      }
      *(_QWORD *)(v8 + 312) = v10;
    }
    objc_msgSend(*(id *)(*((_QWORD *)this + 13) + 312), sel_setLabel_, CFSTR("Text Rendering Pipeline"));
    objc_msgSend(*(id *)(*((_QWORD *)this + 13) + 312), sel_setVertexFunction_, v13);
    objc_msgSend(*(id *)(*((_QWORD *)this + 13) + 312), sel_setFragmentFunction_, v14);
    objc_msgSend(*(id *)(*((_QWORD *)this + 13) + 312), sel_setVertexDescriptor_, v7);
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*((_QWORD *)this + 13) + 312), sel_colorAttachments), sel_objectAtIndexedSubscript_, 0), sel_setBlendingEnabled_, 1);
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*((_QWORD *)this + 13) + 312), sel_colorAttachments), sel_objectAtIndexedSubscript_, 0), sel_setRgbBlendOperation_, 0);
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*((_QWORD *)this + 13) + 312), sel_colorAttachments), sel_objectAtIndexedSubscript_, 0), sel_setSourceRGBBlendFactor_, 4);
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*((_QWORD *)this + 13) + 312), sel_colorAttachments), sel_objectAtIndexedSubscript_, 0), sel_setDestinationRGBBlendFactor_, 5);
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*((_QWORD *)this + 13) + 312), sel_colorAttachments), sel_objectAtIndexedSubscript_, 0), sel_setAlphaBlendOperation_, 0);
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*((_QWORD *)this + 13) + 312), sel_colorAttachments), sel_objectAtIndexedSubscript_, 0), sel_setSourceAlphaBlendFactor_, 1);
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*((_QWORD *)this + 13) + 312), sel_colorAttachments), sel_objectAtIndexedSubscript_, 0), sel_setDestinationAlphaBlendFactor_, 5);
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*((_QWORD *)this + 13) + 312), sel_colorAttachments), sel_objectAtIndexedSubscript_, 0), sel_setWriteMask_, 15);
    v11 = (_BYTE *)*((_QWORD *)this + 13);
    v11[248] = 4;
    v11[253] = 1;
    v11[304] = 7;
    v11[309] = 0;
    if (v7)

    if (v13)
    if (v14)

    return *((_QWORD *)this + 13);
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + 168 * v4 + 16) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 168 * v4 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v4 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v6 + 168 * v4 + 16) == v2)
        return v6 + 168 * v4 + 24;
    }
    return 0;
  }
  return v6 + 168 * v4 + 24;
}

uint64_t re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<re::TextRenderGroupData&>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<re::TextRenderGroupData&>(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 168 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 168 * v10 + 16) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 168 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 168 * v10;
  return v12 + 24;
}

_QWORD *`anonymous namespace'::initTextRenderGroup(_anonymous_namespace_ *this, re::TextRenderGroupData *a2, unint64_t a3)
{
  _anonymous_namespace_ *v5;
  uint64_t *v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _QWORD *result;

  v5 = this;
  v6 = (uint64_t *)((char *)this + 104);
  v5 = (_anonymous_namespace_ *)((char *)v5 + 48);
  result = re::DynamicString::setCapacity(v5, (size_t)a2);
  *((_QWORD *)v5 + 4) = 0;
  *((_QWORD *)v5 + 11) = -1;
  return result;
}

uint64_t re::TextManager::findStaticTextParam(re::TextManager *a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v14[2];
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v14[0] = a3;
  v7 = re::TextManager::renderData(a1);
  result = re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v7 + 152, v14);
  if (result)
  {
    v9 = *(_QWORD *)(result + 80);
    if (v9)
    {
      v10 = 0;
      v11 = *(_QWORD *)(result + 8);
      for (i = 120; ; i += 144)
      {
        if (v11 == v10)
        {
          v14[1] = 0;
          v26 = 0u;
          v27 = 0u;
          v24 = 0u;
          v25 = 0u;
          v23 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v15 = 136315906;
          v16 = "operator[]";
          v17 = 1024;
          v18 = 468;
          v19 = 2048;
          v20 = v11;
          v21 = 2048;
          v22 = v11;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        if (*(_QWORD *)(*(_QWORD *)(result + 16) + i) == a2)
          break;
        if (v9 == ++v10)
          return 0;
      }
      *a4 = result;
      *a5 = v10;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t re::TextManager::staticTextParam(re::TextManager *a1, uint64_t a2, uint64_t a3)
{
  int StaticTextParam;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8[2];
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  __int16 v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v7 = 0;
  v8[0] = 0;
  StaticTextParam = re::TextManager::findStaticTextParam(a1, a2, a3, v8, &v7);
  result = 0;
  if (StaticTextParam)
  {
    v5 = v7;
    v6 = *(_QWORD *)(v8[0] + 8);
    if (v6 <= v7)
    {
      v8[1] = 0;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v17 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v9 = 136315906;
      v10 = "operator[]";
      v11 = 1024;
      v12 = 468;
      v13 = 2048;
      v14 = v5;
      v15 = 2048;
      v16 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    return *(_QWORD *)(v8[0] + 16) + 144 * v7;
  }
  return result;
}

uint64_t re::TextManager::removeStaticText(re::TextManager *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  unint64_t v29;
  __int16 v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v3 = a3;
  v4 = a2;
  v37 = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  v22 = 0;
  result = re::TextManager::findStaticTextParam(a1, a2, a3, &v22, &v21);
  if ((result & 1) == 0)
  {
LABEL_15:
    re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) Invalid string render handle %llu:%lu.", "!\"Unreachable code\"", "removeStaticText", 305, v3, v4);
    _os_crash();
    __break(1u);
  }
  v7 = v21;
  v8 = v22;
  v4 = *(_QWORD *)(v22 + 8);
  if (v4 <= v21)
  {
LABEL_14:
    v23 = 0;
    v36 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v3 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v24 = 136315906;
    v25 = "operator[]";
    v26 = 1024;
    v27 = 468;
    v28 = 2048;
    v29 = v7;
    v30 = 2048;
    v31 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v9 = *(_QWORD *)(v22 + 16) + 144 * v21;
  v10 = *(_QWORD *)(v9 + 112);
  if (v10)
  {
    v11 = *(_QWORD *)(v9 + 104);
    v12 = *(_QWORD *)(v9 + 112);
    do
    {
      result = re::DynamicString::removeAt((re::DynamicString *)(v8 + 48), v11);
      --v12;
    }
    while (v12);
  }
  v13 = *(_QWORD *)(v8 + 80);
  *(_QWORD *)(v8 + 88) -= v10;
  if (v7 + 1 < v13)
  {
    v14 = 144 * v7;
    while (1)
    {
      v4 = *(_QWORD *)(v8 + 8);
      if (v4 <= v7 + 1)
        break;
      v15 = (_QWORD *)(*(_QWORD *)(v8 + 16) + v14);
      v15[31] -= v10;
      if (v4 <= v7)
        goto LABEL_13;
      result = (uint64_t)re::StringID::operator=(v15, v15 + 18);
      v16 = *(_OWORD *)(result + 176);
      *(_OWORD *)(result + 16) = *(_OWORD *)(result + 160);
      *(_OWORD *)(result + 32) = v16;
      v17 = *(_OWORD *)(result + 208);
      *(_OWORD *)(result + 48) = *(_OWORD *)(result + 192);
      *(_OWORD *)(result + 64) = v17;
      *(_QWORD *)(result + 128) = *(_QWORD *)(result + 272);
      v18 = *(_OWORD *)(result + 256);
      v19 = *(_OWORD *)(result + 224);
      *(_OWORD *)(result + 96) = *(_OWORD *)(result + 240);
      *(_OWORD *)(result + 112) = v18;
      *(_OWORD *)(result + 80) = v19;
      v13 = *(_QWORD *)(v8 + 80);
      v20 = v7 + 2;
      ++v7;
      v14 += 144;
      if (v20 >= v13)
        goto LABEL_11;
    }
    v23 = 0;
    v36 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v24 = 136315906;
    v25 = "operator[]";
    v26 = 1024;
    v27 = 468;
    v28 = 2048;
    v29 = v7 + 1;
    v30 = 2048;
    v31 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    v23 = 0;
    v36 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v24 = 136315906;
    v25 = "operator[]";
    v26 = 1024;
    v27 = 468;
    v28 = 2048;
    v29 = v7;
    v30 = 2048;
    v31 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_14;
  }
LABEL_11:
  *(_QWORD *)(v8 + 80) = v13 - 1;
  *(_BYTE *)(v8 + 128) = 1;
  return result;
}

uint64_t re::TextManager::modifyStaticTextColor(re::TextManager *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v10;

  result = re::TextManager::staticTextParam(a1, a2, a3);
  if (result)
  {
    *(_QWORD *)(result + 16) = a4;
    *(_QWORD *)(result + 24) = a5;
  }
  else
  {
    re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Invalid string render handle %llu:%lu.", "!\"Unreachable code\"", "modifyStaticTextColor", 337, a3, a2);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

_OWORD *re::TextManager::modifyStaticTextWorldMatrix(re::TextManager *a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  _OWORD *result;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  result = (_OWORD *)re::TextManager::staticTextParam(a1, a2, a3);
  if (result)
  {
    v9 = *a4;
    v10 = a4[1];
    v11 = a4[3];
    result[4] = a4[2];
    result[5] = v11;
    result[2] = v9;
    result[3] = v10;
  }
  else
  {
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Invalid string render handle %llu:%lu.", "!\"Unreachable code\"", "modifyStaticTextWorldMatrix", 347, a3, a2);
    result = (_OWORD *)_os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TextManager::computeSize(_BOOL8 this, const re::DynamicString *a2, const re::FontID *a3, double a4, double a5, __n128 a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  _BYTE *v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  _QWORD *v28;
  float32x2_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  NSObject *v37;
  uint64_t v38;
  __n128 v39;
  uint8_t buf[16];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v8 = this;
  v45 = *MEMORY[0x24BDAC8D0];
  v9 = 0x7FFFFFFFLL;
  if (*(_QWORD *)(this + 56))
  {
    v10 = *(unsigned int *)(*(_QWORD *)(this + 64)
                          + 4 * ((*(_QWORD *)a3 >> 1) % (unint64_t)*(unsigned int *)(this + 80)));
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = *(_QWORD *)(this + 72);
      v9 = 0x7FFFFFFFLL;
      while (1)
      {
        this = re::StringID::operator==((_QWORD *)(v11 + 40 * v10 + 16), a3);
        if (this)
          break;
        v10 = *(_DWORD *)(v11 + 40 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF)
          goto LABEL_8;
      }
      v9 = v10;
    }
  }
LABEL_8:
  v12 = *(_QWORD *)(*(_QWORD *)(v8 + 72) + 40 * v9 + 32);
  if (!v12)
  {
    v37 = *re::graphicsLogObjects((re *)this);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      v38 = *((_QWORD *)a3 + 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v38;
      _os_log_impl(&dword_224FE9000, v37, OS_LOG_TYPE_DEFAULT, "Invalid font %s, returning empty bound", buf, 0xCu);
    }
    return 0;
  }
  v13 = *((_QWORD *)a2 + 1);
  if ((v13 & 1) != 0)
    v14 = v13 >> 1;
  else
    v14 = v13 >> 1;
  if (!v14)
    return 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0.0;
  v19 = 1;
  v20 = MEMORY[0x24BDAC740];
  a6.n128_u64[0] = 0;
  v21 = 1;
  do
  {
    v39 = a6;
    v22 = (_BYTE *)re::DynamicString::operator[]((uint64_t)a2, v15);
    v23 = *v22;
    if (*v22)
    {
      if (v23 == 10)
      {
        v24 = *(_QWORD *)(v12 + 8);
        if ((v21 & 1) != 0)
        {
          a6 = v39;
        }
        else
        {
          a6 = v39;
          if (*(_QWORD *)(v24 + 24) <= v16)
            goto LABEL_49;
          a6.n128_f32[0] = v39.n128_f32[0]
                         + (float)(*(float *)(*(_QWORD *)(v24 + 40) + 16 * v16 + 8)
                                 - *(float *)(*(_QWORD *)(v24 + 40) + 16 * v16));
        }
        if (v18 < a6.n128_f32[0])
          v18 = a6.n128_f32[0];
        a6.n128_u32[0] = 0;
        a6.n128_f32[1] = a6.n128_f32[1] - *(float *)v24;
        ++v17;
        v21 = 1;
      }
      else
      {
        v25 = (char)v23;
        if ((char)v23 < 0)
          v26 = __maskrune((char)v23, 0x40000uLL);
        else
          v26 = *(_DWORD *)(v20 + 4 * (char)v23 + 60) & 0x40000;
        a6 = v39;
        if (v26)
        {
          v27 = v25 - 32;
          v28 = *(_QWORD **)(v12 + 8);
          if (v28[3] <= v27)
          {
            v43 = 0u;
            v44 = 0u;
            v41 = 0u;
            v42 = 0u;
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_49:
            v43 = 0u;
            v44 = 0u;
            v41 = 0u;
            v42 = 0u;
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_50:
            v43 = 0u;
            v44 = 0u;
            v41 = 0u;
            v42 = 0u;
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_51;
          }
          if ((v21 & 1) != 0)
          {
            v21 = 0;
            v29 = *(float32x2_t *)(v28[5] + 16 * v27);
          }
          else
          {
            v30 = v27 + 95 * v16;
            if (v28[8] <= v30)
              goto LABEL_50;
            v21 = 0;
            v29 = *(float32x2_t *)(v28[10] + 8 * v30);
          }
          a6.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)v39.n128_u64[0], v29);
          v16 = v27;
        }
      }
    }
    else
    {
      a6 = v39;
    }
    v15 = v19;
    v31 = *((_QWORD *)a2 + 1);
    if ((v31 & 1) != 0)
      v32 = v31 >> 1;
    else
      v32 = v31 >> 1;
  }
  while (v32 > v19++);
  v34 = *(_QWORD *)(v12 + 8);
  if ((v21 & 1) != 0)
    goto LABEL_41;
  if (*(_QWORD *)(v34 + 24) <= v16)
  {
LABEL_51:
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  a6.n128_f32[0] = a6.n128_f32[0]
                 + (float)(*(float *)(*(_QWORD *)(v34 + 40) + 16 * v16 + 8)
                         - *(float *)(*(_QWORD *)(v34 + 40) + 16 * v16));
LABEL_41:
  if (v18 >= a6.n128_f32[0])
    *(float *)&v35 = v18;
  else
    *(float *)&v35 = a6.n128_f32[0];
  *((float *)&v35 + 1) = *(float *)v34 * (float)(unint64_t)(v17 + 1);
  return v35;
}

uint64_t re::TextManager::sortAndFillInstanceUniforms(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  char v26;
  int v27;
  int v28;
  unint64_t v29;
  _QWORD *v30;
  float32x2_t *v31;
  float32x2_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;

  v4 = a2;
  v6 = a2[10];
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = a2[1];
    v10 = a2[4];
    do
    {
      if (v9 == v8)
        goto LABEL_46;
      if (v10 == v8)
      {
LABEL_47:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_48:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_QWORD *)(a2[5] + 8 * v8++) = a2[2] + v7;
      v7 += 144;
    }
    while (v6 != v8);
  }
  v11 = 126 - 2 * __clz(v6);
  if (v6)
    v12 = v11;
  else
    v12 = 0;
  result = std::__introsort<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **,false>(a2[5], (uint64_t *)(a2[5] + 8 * v6), v12, 1);
  v15 = v4[10];
  if (v15)
  {
    v40 = a3;
    v41 = 0;
    v16 = 0;
    v17 = (uint64_t)(v4 + 6);
    v38 = a1;
    v39 = v4;
    while (1)
    {
      if (v4[4] <= v16)
        goto LABEL_48;
      v18 = *(_QWORD **)(v4[5] + 8 * v16);
      if (!*(_QWORD *)(a1 + 56))
        break;
      v19 = *(_QWORD *)(a1 + 72);
      v20 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * ((*v18 >> 1) % (unint64_t)*(unsigned int *)(a1 + 80)));
      if ((_DWORD)v20 == 0x7FFFFFFF)
        goto LABEL_20;
      v42 = v15;
      while (1)
      {
        result = re::StringID::operator==((_QWORD *)(v19 + 40 * v20 + 16), v18);
        if ((result & 1) != 0)
          break;
        v20 = *(_DWORD *)(v19 + 40 * v20 + 8) & 0x7FFFFFFF;
        if (v20 == 0x7FFFFFFF)
        {
          v20 = 0x7FFFFFFFLL;
          break;
        }
      }
      v15 = v42;
LABEL_21:
      if (v18[14])
      {
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = *(_QWORD *)(v19 + 40 * v20 + 32);
        LODWORD(v14) = 0;
        *((float *)&v14 + 1) = *(float *)(*(_QWORD *)(v24 + 8) + 4) - **(float **)(v24 + 8);
        v43 = v14;
        v25 = 1;
        v26 = 1;
        while (1)
        {
          result = re::DynamicString::operator[](v17, v18[13] + v21);
          v27 = *(unsigned __int8 *)result;
          if (*(_BYTE *)result)
          {
            if (v27 == 10)
            {
              *((_QWORD *)&v14 + 1) = *((_QWORD *)&v43 + 1);
              LODWORD(v14) = 0;
              *((float *)&v14 + 1) = *((float *)&v43 + 1) - **(float **)(v24 + 8);
              v43 = v14;
              v26 = 1;
            }
            else
            {
              v28 = (char)v27;
              if ((char)v27 < 0)
              {
                result = __maskrune((char)v27, 0x40000uLL);
                if (!(_DWORD)result)
                  goto LABEL_36;
              }
              else
              {
                result = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * (char)v27 + 60) & 0x40000;
                if (!(_DWORD)result)
                  goto LABEL_36;
              }
              v29 = v28 - 32;
              v30 = *(_QWORD **)(v24 + 8);
              if (v30[3] <= v29)
              {
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_44:
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_45:
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_46:
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
                goto LABEL_47;
              }
              v31 = (float32x2_t *)(v30[5] + 16 * v29);
              v32 = *v31;
              if ((v26 & 1) == 0)
              {
                v33 = v29 + 95 * v23;
                if (v30[8] <= v33)
                  goto LABEL_45;
                v32 = *(float32x2_t *)(v30[10] + 8 * v33);
              }
              v34 = *((_QWORD *)&v43 + 1);
              *(float32x2_t *)&v14 = vadd_f32(*(float32x2_t *)&v43, v32);
              v43 = v14;
              *((float32x2_t *)&v14 + 1) = vadd_f32(vsub_f32(v31[1], *v31), *(float32x2_t *)&v14);
              *(_OWORD *)(v40 + 48 * (v22 + v41)) = v14;
              v35 = *(_QWORD *)(v24 + 8);
              if (*(_QWORD *)(v35 + 104) <= v29)
                goto LABEL_44;
              v26 = 0;
              v36 = v40 + 48 * (v22 + v41);
              *(_OWORD *)(v36 + 16) = *(_OWORD *)(*(_QWORD *)(v35 + 120) + 16 * v29);
              *(_DWORD *)(v36 + 32) = v16;
              ++v22;
              v23 = v29;
            }
          }
LABEL_36:
          v21 = v25;
          if (v18[14] <= (unint64_t)v25++)
          {
            v4 = v39;
            v15 = v39[10];
            a1 = v38;
            goto LABEL_39;
          }
        }
      }
      v22 = 0;
LABEL_39:
      v18[14] = v22;
      v41 += v22;
      if (++v16 >= v15)
        goto LABEL_42;
    }
    v19 = *(_QWORD *)(a1 + 72);
LABEL_20:
    v20 = 0x7FFFFFFFLL;
    goto LABEL_21;
  }
  v41 = 0;
LABEL_42:
  v4[11] = v41;
  return result;
}

void re::TextManager::renderTextGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, re::FrameContext *a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, uint64_t a18, uint64_t a19, __int128 a20,re::FrameContext *a21,unint64_t a22,char *__s2,uint64_t a24,char *__s1,uint64_t a26,__int128 a27,__int128 a28,__int128 a29,__int128 a30,__int128 a31,__int128 a32,uint64_t a33,uint64_t a34,__int128 a35,__int128 a36,__int128 a37,__int128 a38,__int128 a39,uint64_t a40,uint64_t a41)
{
  unint64_t v42;
  unint64_t v43;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  float32x4_t *v56;
  __int128 *v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  unint64_t v73;
  __int128 *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _OWORD *v80;
  unint64_t v81;
  _OWORD *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;

  a41 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a7 + 80))
    return;
  v42 = *(_QWORD *)(a7 + 56);
  v43 = (v42 & 1) != 0 ? v42 >> 1 : v42 >> 1;
  if (!v43)
    return;
  re::FrameContext::perFrameAlloc(a6, 48 * v43, 0x10uLL, (uint64_t)&a35);
  v49 = DWORD2(a35);
  v50 = a36;
  v51 = (void *)(a35 + DWORD2(a35));
  if (a8)
  {
    if (*(_BYTE *)(a7 + 128))
    {
      *(_BYTE *)(a7 + 128) = 0;
      re::TextManager::sortAndFillInstanceUniforms(a1, (_QWORD *)a7, *(_QWORD *)(a7 + 120));
    }
    memcpy(v51, *(const void **)(a7 + 120), 48 * *(_QWORD *)(a7 + 88));
  }
  else
  {
    re::TextManager::sortAndFillInstanceUniforms(a1, (_QWORD *)a7, a35 + DWORD2(a35));
  }
  v52 = *(_QWORD *)(a4 + 16);
  if (!v52)
  {
LABEL_67:
    *(_QWORD *)&a31 = 0;
    a38 = 0u;
    a39 = 0u;
    a36 = 0u;
    a37 = 0u;
    a35 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(a27) = 136315906;
    *(_QWORD *)((char *)&a27 + 4) = "operator[]";
    WORD6(a27) = 1024;
    *(_DWORD *)((char *)&a27 + 14) = 797;
    WORD1(a28) = 2048;
    *(_QWORD *)((char *)&a28 + 4) = 0;
    WORD6(a28) = 2048;
    *(_QWORD *)((char *)&a28 + 14) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_68;
  }
  v53 = *(_QWORD *)(a3 + 16);
  if (!v53)
  {
LABEL_68:
    *(_QWORD *)&a31 = 0;
    a38 = 0u;
    a39 = 0u;
    a36 = 0u;
    a37 = 0u;
    a35 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(a27) = 136315906;
    *(_QWORD *)((char *)&a27 + 4) = "operator[]";
    WORD6(a27) = 1024;
    *(_DWORD *)((char *)&a27 + 14) = 797;
    WORD1(a28) = 2048;
    *(_QWORD *)((char *)&a28 + 4) = 0;
    WORD6(a28) = 2048;
    *(_QWORD *)((char *)&a28 + 14) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  v54 = 0;
  v55 = a9;
  v56 = *(float32x4_t **)(a4 + 32);
  v57 = *(__int128 **)(a3 + 32);
  v58 = *v56;
  v59 = v56[1];
  v60 = v56[2];
  v61 = v56[3];
  v62 = v57[1];
  v63 = v57[2];
  v64 = v57[3];
  a27 = *v57;
  a28 = v62;
  a29 = v63;
  a30 = v64;
  do
  {
    *(__int128 *)((char *)&a35 + v54) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v58, COERCE_FLOAT(*(__int128 *)((char *)&a27 + v54))), v59, *(float32x2_t *)((char *)&a27 + v54), 1), v60, *(float32x4_t *)((char *)&a27 + v54), 2), v61, *(float32x4_t *)((char *)&a27 + v54), 3);
    v54 += 16;
  }
  while (v54 != 64);
  v114 = v50;
  v115 = v49;
  v124 = a35;
  v121 = a37;
  v122 = a36;
  v120 = a38;
  if (*a5 == 2)
  {
    if (v52 <= 1)
    {
LABEL_70:
      *(_QWORD *)&a31 = 0;
      a38 = 0u;
      a39 = 0u;
      a36 = 0u;
      a37 = 0u;
      a35 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(a27) = 136315906;
      *(_QWORD *)((char *)&a27 + 4) = "operator[]";
      WORD6(a27) = 1024;
      *(_DWORD *)((char *)&a27 + 14) = 797;
      WORD1(a28) = 2048;
      *(_QWORD *)((char *)&a28 + 4) = 1;
      WORD6(a28) = 2048;
      *(_QWORD *)((char *)&a28 + 14) = 1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_71:
      *(_QWORD *)&a31 = 0;
      a38 = 0u;
      a39 = 0u;
      a36 = 0u;
      a37 = 0u;
      a35 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(a27) = 136315906;
      *(_QWORD *)((char *)&a27 + 4) = "operator[]";
      WORD6(a27) = 1024;
      *(_DWORD *)((char *)&a27 + 14) = 797;
      WORD1(a28) = 2048;
      *(_QWORD *)((char *)&a28 + 4) = 1;
      WORD6(a28) = 2048;
      *(_QWORD *)((char *)&a28 + 14) = 1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v53 <= 1)
      goto LABEL_71;
    v65 = 0;
    v66 = v56[4];
    v67 = v56[5];
    v68 = v56[6];
    v69 = v56[7];
    v70 = v57[5];
    v71 = v57[6];
    v72 = v57[7];
    a27 = v57[4];
    a28 = v70;
    a29 = v71;
    a30 = v72;
    do
    {
      *(__int128 *)((char *)&a35 + v65) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v66, COERCE_FLOAT(*(__int128 *)((char *)&a27 + v65))), v67, *(float32x2_t *)((char *)&a27 + v65), 1), v68, *(float32x4_t *)((char *)&a27 + v65), 2), v69, *(float32x4_t *)((char *)&a27 + v65), 3);
      v65 += 16;
    }
    while (v65 != 64);
    v73 = (unint64_t)&off_2260E5000;
    v116 = a35;
    v117 = a36;
    v118 = a37;
    v119 = a38;
  }
  else
  {
    v119 = xmmword_2260E5D70;
    v118 = xmmword_2260E5F40;
    v73 = (unint64_t)&off_2260E5000;
    v117 = xmmword_2260E5F20;
    v116 = xmmword_2260E5F10;
  }
  re::FrameContext::perFrameAlloc(a6, 0x80uLL, 0x10uLL, (uint64_t)&a35);
  vars0 = DWORD2(a35);
  vars8 = a36;
  v74 = (__int128 *)(a35 + DWORD2(a35));
  *v74 = v124;
  v74[1] = v122;
  v74[2] = v121;
  v74[3] = v120;
  v74[4] = v116;
  v74[5] = v117;
  v74[6] = v118;
  v74[7] = v119;
  re::FrameContext::perFrameAlloc(a6, 80 * *(_QWORD *)(a7 + 80), 0x10uLL, (uint64_t)&a35);
  v76 = DWORD2(a35);
  v77 = a36;
  if (*(_QWORD *)(a7 + 80))
  {
    v78 = 0;
    v79 = HIDWORD(a35) / 0x50uLL;
    v80 = (_OWORD *)(DWORD2(a35) + (_QWORD)a35 + 64);
    while (1)
    {
      v81 = *(_QWORD *)(a7 + 32);
      if (v81 <= v78)
        break;
      if (v79 == v78)
        goto LABEL_64;
      v82 = *(_OWORD **)(*(_QWORD *)(a7 + 40) + 8 * v78);
      v83 = v82[2];
      v84 = v82[3];
      v85 = v82[5];
      *(v80 - 2) = v82[4];
      *(v80 - 1) = v85;
      *(v80 - 4) = v83;
      *(v80 - 3) = v84;
      *v80 = v82[1];
      v80 += 5;
      if (++v78 >= *(_QWORD *)(a7 + 80))
        goto LABEL_27;
    }
    *(_QWORD *)&a31 = 0;
    a38 = 0u;
    a39 = 0u;
    a36 = 0u;
    a37 = 0u;
    a35 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(a27) = 136315906;
    *(_QWORD *)((char *)&a27 + 4) = "operator[]";
    WORD6(a27) = 1024;
    *(_DWORD *)((char *)&a27 + 14) = 468;
    WORD1(a28) = 2048;
    *(_QWORD *)((char *)&a28 + 4) = v78;
    WORD6(a28) = 2048;
    *(_QWORD *)((char *)&a28 + 14) = v81;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_64:
    re::internal::assertLog((re::internal *)6, v75, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v79, v79);
    _os_crash();
    __break(1u);
LABEL_65:
    a22 = 0;
    a38 = 0u;
    a39 = 0u;
    a36 = 0u;
    a37 = 0u;
    a35 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(a31) = 136315906;
    *(_QWORD *)((char *)&a31 + 4) = "operator[]";
    WORD6(a31) = 1024;
    *(_DWORD *)((char *)&a31 + 14) = 468;
    WORD1(a32) = 2048;
    *(_QWORD *)((char *)&a32 + 4) = v73;
    WORD6(a32) = 2048;
    *(_QWORD *)((char *)&a32 + 14) = v81;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_66:
    a26 = 0;
    a38 = 0u;
    a39 = 0u;
    a36 = 0u;
    a37 = 0u;
    a35 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(a31) = 136315906;
    *(_QWORD *)((char *)&a31 + 4) = "operator[]";
    WORD6(a31) = 1024;
    *(_DWORD *)((char *)&a31 + 14) = 468;
    WORD1(a32) = 2048;
    *(_QWORD *)((char *)&a32 + 4) = v73;
    WORD6(a32) = 2048;
    *(_QWORD *)((char *)&a32 + 14) = v81;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_67;
  }
LABEL_27:
  a28 = 0u;
  a29 = 0u;
  v86 = *a5;
  v87 = v76;
  re::FrameContext::perFrameAlloc(a6, 0x400uLL, 0x100uLL, (uint64_t)&a35);
  v88 = DWORD2(a35);
  v125 = a36;
  v89 = a35 + DWORD2(a35);
  *(_OWORD *)v89 = xmmword_2260E5F10;
  *(_OWORD *)(v89 + 16) = xmmword_2260E5F20;
  *(_OWORD *)(v89 + 32) = xmmword_2260E5F40;
  *(_OWORD *)(v89 + 48) = xmmword_2260E5D70;
  *(_OWORD *)(v89 + 64) = xmmword_2260E5F10;
  *(_OWORD *)(v89 + 80) = xmmword_2260E5F20;
  *(_OWORD *)(v89 + 96) = xmmword_2260E5F40;
  *(_OWORD *)(v89 + 112) = xmmword_2260E5D70;
  *(_OWORD *)(v89 + 128) = xmmword_2260E5F10;
  *(_OWORD *)(v89 + 144) = xmmword_2260E5F20;
  *(_OWORD *)(v89 + 160) = xmmword_2260E5F40;
  *(_OWORD *)(v89 + 176) = xmmword_2260E5D70;
  *(_OWORD *)(v89 + 192) = xmmword_2260E5F10;
  *(_OWORD *)(v89 + 208) = xmmword_2260E5F20;
  *(_OWORD *)(v89 + 224) = xmmword_2260E5F40;
  *(_OWORD *)(v89 + 240) = xmmword_2260E5D70;
  *(_OWORD *)(v89 + 256) = xmmword_2260E5F10;
  *(_OWORD *)(v89 + 272) = xmmword_2260E5F20;
  *(_OWORD *)(v89 + 288) = xmmword_2260E5F40;
  *(_OWORD *)(v89 + 304) = xmmword_2260E5D70;
  *(_OWORD *)(v89 + 320) = xmmword_2260E5F10;
  *(_OWORD *)(v89 + 336) = xmmword_2260E5F20;
  *(_OWORD *)(v89 + 352) = xmmword_2260E5F40;
  *(_OWORD *)(v89 + 368) = xmmword_2260E5D70;
  *(_OWORD *)(v89 + 384) = xmmword_2260E5F10;
  *(_OWORD *)(v89 + 400) = xmmword_2260E5F20;
  *(_OWORD *)(v89 + 416) = xmmword_2260E5F40;
  *(_OWORD *)(v89 + 432) = xmmword_2260E5D70;
  *(_OWORD *)(v89 + 448) = xmmword_2260E5F10;
  *(_OWORD *)(v89 + 464) = xmmword_2260E5F20;
  *(_OWORD *)(v89 + 480) = xmmword_2260E5F40;
  *(_OWORD *)(v89 + 496) = xmmword_2260E5D70;
  *(_OWORD *)(v89 + 512) = xmmword_2260E5F10;
  *(_OWORD *)(v89 + 528) = xmmword_2260E5F20;
  *(_OWORD *)(v89 + 544) = xmmword_2260E5F40;
  *(_OWORD *)(v89 + 560) = xmmword_2260E5D70;
  *(_OWORD *)(v89 + 576) = xmmword_2260E5F10;
  *(_OWORD *)(v89 + 592) = xmmword_2260E5F20;
  *(_OWORD *)(v89 + 608) = xmmword_2260E5F40;
  *(_OWORD *)(v89 + 624) = xmmword_2260E5D70;
  *(_OWORD *)(v89 + 640) = xmmword_2260E5F10;
  *(_OWORD *)(v89 + 656) = xmmword_2260E5F20;
  *(_OWORD *)(v89 + 672) = xmmword_2260E5F40;
  *(_OWORD *)(v89 + 688) = xmmword_2260E5D70;
  *(_OWORD *)(v89 + 704) = xmmword_2260E5F10;
  *(_OWORD *)(v89 + 720) = xmmword_2260E5F20;
  *(_OWORD *)(v89 + 736) = xmmword_2260E5F40;
  *(_OWORD *)(v89 + 752) = xmmword_2260E5D70;
  *(_OWORD *)(v89 + 880) = 0u;
  *(_OWORD *)(v89 + 896) = 0u;
  *(_OWORD *)(v89 + 848) = 0u;
  *(_OWORD *)(v89 + 864) = 0u;
  *(_OWORD *)(v89 + 816) = 0u;
  *(_OWORD *)(v89 + 832) = 0u;
  *(_OWORD *)(v89 + 784) = 0u;
  *(_OWORD *)(v89 + 800) = 0u;
  *(_OWORD *)(v89 + 768) = 0u;
  *(_DWORD *)(v89 + 940) = v86;
  *(_DWORD *)(v89 + 944) = v55;
  *(_OWORD *)(v89 + 960) = 0u;
  *(_OWORD *)(v89 + 976) = a27;
  *(_OWORD *)(v89 + 992) = a28;
  *(_OWORD *)(v89 + 1008) = a29;
  v90 = (_QWORD *)re::TextManager::renderData((re::TextManager *)a1);
  v91 = a2;
  (*(void (**)(_QWORD, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a2 + 8) + 16))(**(_QWORD **)(a2 + 8), sel_setVertexBuffer_offset_atIndex_, *v90, 0, 0);
  (*(void (**)(_QWORD, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 + 8) + 16))(**(_QWORD **)(v91 + 8), sel_setVertexBuffer_offset_atIndex_, v114, v115, 1);
  (*(void (**)(_QWORD, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 + 8) + 16))(**(_QWORD **)(v91 + 8), sel_setVertexBuffer_offset_atIndex_, v77, v87, 2);
  (*(void (**)(_QWORD, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 + 8) + 16))(**(_QWORD **)(v91 + 8), sel_setVertexBuffer_offset_atIndex_, vars8, vars0, 3);
  (*(void (**)(_QWORD, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 + 8) + 16))(**(_QWORD **)(v91 + 8), sel_setVertexBuffer_offset_atIndex_, v125, v88, 5);
  re::StringID::invalid((re::StringID *)&a24);
  if (!*(_QWORD *)(a7 + 32))
  {
LABEL_69:
    a22 = 0;
    a38 = 0u;
    a39 = 0u;
    a36 = 0u;
    a37 = 0u;
    a35 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(a31) = 136315906;
    *(_QWORD *)((char *)&a31 + 4) = "operator[]";
    WORD6(a31) = 1024;
    *(_DWORD *)((char *)&a31 + 14) = 468;
    WORD1(a32) = 2048;
    *(_QWORD *)((char *)&a32 + 4) = 0;
    WORD6(a32) = 2048;
    *(_QWORD *)((char *)&a32 + 14) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_70;
  }
  v92 = 0x7FFFFFFFLL;
  v126 = a1;
  if (*(_QWORD *)(a1 + 56))
  {
    v93 = **(_QWORD ***)(a7 + 40);
    v94 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * ((*v93 >> 1) % (unint64_t)*(unsigned int *)(a1 + 80)));
    v95 = a2;
    if ((_DWORD)v94 != 0x7FFFFFFF)
    {
      v96 = *(_QWORD *)(a1 + 72);
      v92 = 0x7FFFFFFFLL;
      while (!re::StringID::operator==((_QWORD *)(v96 + 40 * v94 + 16), v93))
      {
        v94 = *(_DWORD *)(v96 + 40 * v94 + 8) & 0x7FFFFFFF;
        if (v94 == 0x7FFFFFFF)
          goto LABEL_36;
      }
      v92 = v94;
    }
  }
  else
  {
    v95 = a2;
  }
LABEL_36:
  v97 = v126;
  (*(void (**)(_QWORD, char *, _QWORD, _QWORD))(*(_QWORD *)(v95 + 8) + 104))(**(_QWORD **)(v95 + 8), sel_setFragmentTexture_atIndex_, **(_QWORD **)(*(_QWORD *)(v126 + 72) + 40 * v92 + 32), 0);
  if (!*(_QWORD *)(a7 + 80))
    goto LABEL_61;
  v73 = 0;
  v98 = 0;
  v99 = 0;
  do
  {
    v81 = *(_QWORD *)(a7 + 32);
    if (v81 <= v73)
      goto LABEL_65;
    re::StringID::StringID((re::StringID *)&a22, *(const StringID **)(*(_QWORD *)(a7 + 40) + 8 * v73));
    if (((a22 ^ a24) > 1 || __s1 != __s2 && strcmp(__s1, __s2)) && re::FontID::isValid((re::FontID *)&a24))
    {
      if (v98)
      {
        *(_OWORD *)(((unint64_t)&a35 | 0x10) + 0x10) = 0u;
        *(_OWORD *)(((unint64_t)&a35 | 0x10) + 0x20) = 0u;
        *(_OWORD *)((unint64_t)&a35 | 0x10) = 0u;
        re::FrameContext::perFrameAlloc(a6, 0x80uLL, 0x80uLL, (uint64_t)&a31);
        v100 = a32;
        v101 = a31 + DWORD2(a31);
        *(_DWORD *)(v101 + 16) = 0;
        *(_DWORD *)(v101 + 28) = v98;
        *(_OWORD *)(v101 + 32) = a35;
        *(_OWORD *)(v101 + 48) = a36;
        *(_OWORD *)(v101 + 64) = a37;
        *(_OWORD *)(v101 + 80) = a38;
        (*(void (**)(_QWORD, char *, uint64_t))(*(_QWORD *)(v95 + 8) + 16))(**(_QWORD **)(v95 + 8), sel_setVertexBuffer_offset_atIndex_, v100);
        (*(void (**)(_QWORD, char *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 + 8) + 224))(**(_QWORD **)(v95 + 8), sel_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance_, 3, 0, 6, v98, v99);
      }
      re::StringID::operator=((unint64_t *)&a24, (uint64_t *)&a22);
      if (*(_QWORD *)(v97 + 56))
      {
        v102 = a22;
        v103 = *(_QWORD *)(v97 + 72);
        v104 = *(unsigned int *)(*(_QWORD *)(v97 + 64) + 4 * ((a22 >> 1) % *(unsigned int *)(v97 + 80)));
        if ((_DWORD)v104 != 0x7FFFFFFF)
        {
          v105 = __s2;
          while (1)
          {
            v106 = v103 + 40 * v104;
            v108 = *(_QWORD *)(v106 + 16);
            v107 = v106 + 16;
            if ((v108 ^ v102) <= 1)
            {
              v109 = *(const char **)(v107 + 8);
              if (v109 == v105 || !strcmp(v109, v105))
                break;
            }
            v104 = *(_DWORD *)(v103 + 40 * v104 + 8) & 0x7FFFFFFF;
            if (v104 == 0x7FFFFFFF)
            {
              v104 = 0x7FFFFFFFLL;
              break;
            }
          }
          v95 = a2;
          goto LABEL_56;
        }
      }
      else
      {
        v103 = *(_QWORD *)(v97 + 72);
      }
      v104 = 0x7FFFFFFFLL;
LABEL_56:
      v99 += v98;
      (*(void (**)(_QWORD, char *, _QWORD, _QWORD))(*(_QWORD *)(v95 + 8) + 104))(**(_QWORD **)(v95 + 8), sel_setFragmentTexture_atIndex_, **(_QWORD **)(v103 + 40 * v104 + 32), 0);
      v98 = 0;
      v97 = v126;
    }
    v81 = *(_QWORD *)(a7 + 32);
    if (v81 <= v73)
      goto LABEL_66;
    v98 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a7 + 40) + 8 * v73) + 112);
    re::StringID::destroyString((re::StringID *)&a22);
    ++v73;
  }
  while (v73 < *(_QWORD *)(a7 + 80));
  if (v98)
  {
    a37 = 0u;
    a38 = 0u;
    a36 = 0u;
    re::FrameContext::perFrameAlloc(a6, 0x80uLL, 0x80uLL, (uint64_t)&a31);
    v110 = a32;
    v111 = a31 + DWORD2(a31);
    *(_DWORD *)(v111 + 16) = 0;
    *(_DWORD *)(v111 + 28) = v98;
    *(_OWORD *)(v111 + 32) = a35;
    *(_OWORD *)(v111 + 48) = a36;
    *(_OWORD *)(v111 + 64) = a37;
    *(_OWORD *)(v111 + 80) = a38;
    (*(void (**)(_QWORD, char *, uint64_t))(*(_QWORD *)(v95 + 8) + 16))(**(_QWORD **)(v95 + 8), sel_setVertexBuffer_offset_atIndex_, v110);
    (*(void (**)(_QWORD, char *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 + 8) + 224))(**(_QWORD **)(v95 + 8), sel_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance_, 3, 0, 6, v98, v99);
  }
LABEL_61:
  re::StringID::destroyString((re::StringID *)&a24);
}

uint64_t re::TextManager::render(re::TextManager *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 a6, _BYTE *a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8x8_t v25;
  uint8x8_t v26;
  uint16x8_t v27;
  uint64_t v28;
  _QWORD *DepthStencilState;
  uint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  const RenderCommandEncoder *v33;
  _anonymous_namespace_ *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48[2];
  __int128 v49;
  __int128 v50;
  re::FrameContext *v51;
  uint64_t v52;
  char *__s2;
  uint64_t v54;
  char *__s1;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61[2];
  uint64_t v62[2];
  uint64_t v63;
  uint64_t v64;
  __int128 v65[2];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;

  *(_QWORD *)&v45 = a5;
  *((_QWORD *)&v45 + 1) = a8;
  *(_QWORD *)&v66 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD, char *, id))(*(_QWORD *)(a4 + 8) + 152))(**(_QWORD **)(a4 + 8), sel_pushDebugGroup_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, "Text Rendering", 4));
  (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(a4 + 8) + 64))(**(_QWORD **)(a4 + 8), sel_setCullMode_, 0);
  (*(void (**)(_QWORD, char *, uint64_t))(*(_QWORD *)(a4 + 8) + 136))(**(_QWORD **)(a4 + 8), sel_setFrontFacingWinding_, 1);
  v15 = re::TextManager::renderData(a1);
  v16 = *(_QWORD *)a1;
  v17 = v15 + 320;
  v18 = re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::tryGet(v15 + 320, a2);
  if (!v18)
  {
    v42 = v16;
    *(_QWORD *)&v43 = a7;
    HIDWORD(v43) = a10;
    do
    {
      objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(v15 + 312), sel_colorAttachments), sel_objectAtIndexedSubscript_, v18), sel_setPixelFormat_, (int)a2[v18 + 1]);
      ++v18;
    }
    while (v18 != 8);
    objc_msgSend(*(id *)(v15 + 312), sel_setRasterSampleCount_, *a2);
    objc_msgSend(*(id *)(v15 + 312), sel_setDepthAttachmentPixelFormat_);
    objc_msgSend(*(id *)(v15 + 312), sel_setStencilAttachmentPixelFormat_);
    if (*(_BYTE *)(v16 + 302))
      objc_msgSend(*(id *)(v15 + 312), sel_setMaxVertexAmplificationCount_, 2);
    *(_QWORD *)&v46 = *(id *)(v16 + 184);
    re::mtl::Device::makeRenderPipelineState((id *)&v46, *(_QWORD *)(v15 + 312), &v57);
    re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::add<NS::SharedPtr<MTL::RenderPipelineState>&>(v17, (uint64_t)a2, (id *)&v57);
    v18 = re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::tryGet(v17, a2);
    if ((_QWORD)v57)

  }
  (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(a4 + 8) + 56))(**(_QWORD **)(a4 + 8), sel_setRenderPipelineState_, *(_QWORD *)v18);
  v19 = (a2[9] - 250 < 0xB) & (0x425u >> (*((_BYTE *)a2 + 36) + 6));
  if (a10)
  {
    v20 = re::TextManager::renderData(a1);
    v22 = 256;
    if (v19)
    {
      v22 = 200;
      v23 = v20 + 200;
    }
    else
    {
      v23 = v20 + 256;
    }
    LOBYTE(v46) = *(_BYTE *)(v20 + v22);
    v24 = a8;
    if ((_BYTE)v46)
      re::DynamicString::DynamicString((re::DynamicString *)((char *)&v46 + 8), (const re::DynamicString *)(v23 + 8));
    *(__int128 *)((char *)v48 + 8) = *(_OWORD *)(v23 + 40);
    v25.i32[1] = HIDWORD(v48[0]);
    BYTE6(v48[1]) = *(_BYTE *)a3;
    v25.i32[0] = *(_DWORD *)(a3 + 3);
    v26 = (uint8x8_t)vmovl_u8(v25).u64[0];
    *(_WORD *)((char *)&v48[1] + 1) = *(_WORD *)(a3 + 1);
    BYTE7(v48[1]) = *(_BYTE *)(a3 + 8);
    v21.i32[0] = *(_DWORD *)(a3 + 11);
    v27 = vmovl_u8(v21);
    LOBYTE(v28) = v26.i8[0];
    BYTE1(v28) = v26.i8[4];
    BYTE2(v28) = v26.i8[2];
    BYTE3(v28) = v26.i8[6];
    BYTE4(v28) = v27.i8[0];
    BYTE5(v28) = v27.i8[4];
    BYTE6(v28) = v27.i8[2];
    HIBYTE(v28) = v27.i8[6];
    *((_QWORD *)&v48[0] + 1) = v28;
    *(_WORD *)((char *)&v48[1] + 3) = *(_WORD *)(a3 + 9);
    DepthStencilState = (_QWORD *)re::getOrCreateDepthStencilState(*(_QWORD *)a1, *(_QWORD *)(*(_QWORD *)a1 + 104), (uint64_t)&v46, v26);
    if ((_BYTE)v46 && *((_QWORD *)&v46 + 1) && (v47 & 1) != 0)
      (*(void (**)(void))(**((_QWORD **)&v46 + 1) + 40))();
  }
  else
  {
    v30 = re::TextManager::renderData(a1);
    v32 = 256;
    if (v19)
      v32 = 200;
    DepthStencilState = (_QWORD *)re::getOrCreateDepthStencilState(*(_QWORD *)a1, *(_QWORD *)(*(_QWORD *)a1 + 104), v30 + v32, v31);
    v24 = a8;
  }
  (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(a4 + 8) + 112))(**(_QWORD **)(a4 + 8), sel_setDepthStencilState_, *DepthStencilState);
  (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(a4 + 8) + 120))(**(_QWORD **)(a4 + 8), sel_setStencilReferenceValue_, *(unsigned __int8 *)(a3 + 16));
  v34 = re::setVertexAmplificationCount((_anonymous_namespace_ *)*(unsigned __int8 *)(*(_QWORD *)a1 + 302), a9, *a7, 0xFFFF, a4, v33);
  if (*(_QWORD *)(v24 + 112) == -1)
  {
    v49 = 0u;
    v47 = 0u;
    memset(v48, 0, sizeof(v48));
    v46 = 0u;
    re::DynamicString::setCapacity(&v48[1], 0);
    v50 = 0uLL;
    LODWORD(v51) = 1;
    __s2 = 0;
    v54 = 0;
    v52 = 0;
    LOBYTE(__s1) = 0;
    v56 = -1;
    re::StringID::invalid((re::StringID *)&v57);
    *(_QWORD *)&v58 = 0x3F8000003F800000;
    *((_QWORD *)&v58 + 1) = 0x3F8000003F800000;
    v59 = 0u;
    v60 = 0u;
    *(_OWORD *)v61 = 0u;
    *(_OWORD *)v62 = 0u;
    v64 = 0;
    *(_QWORD *)&v65[0] = 0;
    v63 = -1;
    *(__int128 *)((char *)v65 + 8) = re::kInvalidStringRenderHandle;
    v37 = re::StringID::operator=((unint64_t *)&v57, (uint64_t *)v24);
    v38 = *(_OWORD *)(v24 + 32);
    v58 = *(_OWORD *)(v24 + 16);
    v59 = v38;
    v39 = *(_OWORD *)(v24 + 64);
    v60 = *(_OWORD *)(v24 + 48);
    *(_OWORD *)v61 = v39;
    *(_OWORD *)v62 = *(_OWORD *)(v24 + 80);
    re::TextManager::addStringToGroup((re *)v37, (uint64_t)&v46, *(char **)(v24 + 96), *(_QWORD *)(v24 + 104), (uint64_t)&v57);
    LOBYTE(v41) = a9;
    re::TextManager::renderTextGroup((uint64_t)a1, a4, a6, *((uint64_t *)&a6 + 1), a7, (re::FrameContext *)v45, (uint64_t)&v46, 0, v41, v42, v43, a6, v45, v46, v47, v48[0], v48[1], v49, *((uint64_t *)&v49 + 1),
      v50,
      v51,
      v52,
      __s2,
      v54,
      __s1,
      v56,
      v57,
      v58,
      v59,
      v60,
      *(__int128 *)v61,
      *(__int128 *)v62,
      v63,
      v64,
      v65[0],
      v65[1],
      v66,
      v67,
      v68,
      v69,
      v70);
    re::StringID::destroyString((re::StringID *)&v57);
    re::TextRenderGroupData::~TextRenderGroupData((re::TextRenderGroupData *)&v46);
  }
  else
  {
    v35 = re::TextManager::renderData(a1);
    v36 = re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v35 + 152, (uint64_t *)(v24 + 112));
    if (v36)
    {
      LOBYTE(v41) = a9;
      re::TextManager::renderTextGroup((uint64_t)a1, a4, a6, *((uint64_t *)&a6 + 1), a7, (re::FrameContext *)v45, v36, 1, v41, v42, v43, a6, v45, v46, v47, v48[0], v48[1], v49, *((uint64_t *)&v49 + 1),
        v50,
        v51,
        v52,
        __s2,
        v54,
        __s1,
        v56,
        v57,
        v58,
        v59,
        v60,
        *(__int128 *)v61,
        *(__int128 *)v62,
        v63,
        v64,
        v65[0],
        v65[1],
        v66,
        v67,
        v68,
        v69,
        v70);
    }
  }
  return (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)(a4 + 8) + 160))(**(_QWORD **)(a4 + 8), sel_popDebugGroup);
}

void re::FixedArray<TextRenderPerGlyphData>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >= 0x555555555555556)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 48, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 48 * a3;
  v6 = (_OWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 48 * a3, 16);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 48);
    v8 = (_OWORD *)((char *)v8 + v5 - 48);
  }
  v8[1] = 0u;
  v8[2] = 0u;
  *v8 = 0u;
}

_QWORD *re::FixedArray<re::StringRenderParam>::init<>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;

  *result = a2;
  result[1] = a3;
  if (!a3)
    return result;
  if (a3 >= 0x1C71C71C71C71C8)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 144, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  v5 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 144 * a3, 16);
  v4[2] = v5;
  if (!v5)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v7 = v5;
  for (i = a3 - 1; i; --i)
  {
    *(_OWORD *)(v7 + 112) = 0u;
    *(_OWORD *)(v7 + 128) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_OWORD *)(v7 + 96) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)v7 = 0u;
    re::StringID::invalid((re::StringID *)v7);
    *(_QWORD *)(v7 + 16) = 0x3F8000003F800000;
    *(_QWORD *)(v7 + 24) = 0x3F8000003F800000;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_QWORD *)(v7 + 104) = 0;
    *(_QWORD *)(v7 + 112) = 0;
    *(_QWORD *)(v7 + 96) = -1;
    *(_OWORD *)(v7 + 120) = re::kInvalidStringRenderHandle;
    v7 += 144;
  }
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)v7 = 0u;
  result = re::StringID::invalid((re::StringID *)v7);
  *(_QWORD *)(v7 + 16) = 0x3F8000003F800000;
  *(_QWORD *)(v7 + 24) = 0x3F8000003F800000;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)(v7 + 112) = 0;
  *(_QWORD *)(v7 + 96) = -1;
  *(_OWORD *)(v7 + 120) = re::kInvalidStringRenderHandle;
  return result;
}

void re::FixedArray<re::StringRenderParam *>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 8 * a3;
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 8 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 8);
    v8 = (_QWORD *)((char *)v8 + v5 - 8);
  }
  *v8 = 0;
}

void re::TextRenderGroupData::~TextRenderGroupData(re::TextRenderGroupData *this)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  re::FixedArray<re::StringRenderParam>::deinit(this);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if (*((_QWORD *)this + 4))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 5));
      *((_QWORD *)this + 4) = 0;
      *((_QWORD *)this + 5) = 0;
    }
    *((_QWORD *)this + 3) = 0;
  }
  v4 = (_OWORD *)((char *)this + 48);
  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    if ((*((_BYTE *)this + 56) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 8));
    *v4 = 0u;
    *((_OWORD *)this + 4) = 0u;
  }
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  v5 = *((_QWORD *)this + 13);
  if (v5)
  {
    if (*((_QWORD *)this + 14))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 15));
      *((_QWORD *)this + 14) = 0;
      *((_QWORD *)this + 15) = 0;
      v6 = *((_QWORD *)this + 6);
      *((_QWORD *)this + 13) = 0;
      if (v6)
      {
        if ((*((_BYTE *)this + 56) & 1) != 0)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 8));
        *v4 = 0u;
        *((_OWORD *)this + 4) = 0u;
      }
    }
    else
    {
      *((_QWORD *)this + 13) = 0;
    }
  }
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    if (*((_QWORD *)this + 4))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *((_QWORD *)this + 5));
      *((_QWORD *)this + 4) = 0;
      *((_QWORD *)this + 5) = 0;
    }
    *((_QWORD *)this + 3) = 0;
  }
  re::FixedArray<re::StringRenderParam>::deinit(this);
}

_QWORD *re::FixedArray<re::StringRenderParam>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  re::StringID *v4;
  uint64_t v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = (re::StringID *)result[2];
      v5 = 144 * v2;
      do
      {
        re::StringID::destroyString(v4);
        v4 = (re::StringID *)((char *)v4 + 144);
        v5 -= 144;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

uint64_t re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::tryGet(uint64_t a1, _OWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  _OWORD v9[3];
  int v10;
  unint64_t v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  v4 = a2[1];
  v9[0] = *a2;
  v9[1] = v4;
  v9[2] = a2[2];
  v10 = *((_DWORD *)a2 + 12);
  MurmurHash3_x64_128((uint64_t)v9, 44, 0, v11);
  if (!*(_QWORD *)a1)
    return 0;
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((v11[1] + (v11[0] << 6) + (v11[0] >> 2) - 0x61C8864680B583E9) ^ v11[0])
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v7 = re::EqualTo<re::RenderTargetInfo>::operator()((int)v9, (void *)(v6 + 72 * v5 + 12), a2);
    v6 = *(_QWORD *)(a1 + 16);
    if (v7)
      break;
    v5 = *(_DWORD *)(v6 + 72 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF)
      return 0;
  }
  return v6 + 72 * v5 + 64;
}

uint64_t re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::add<NS::SharedPtr<MTL::RenderPipelineState>&>(uint64_t a1, uint64_t a2, id *a3)
{
  __int128 v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  _OWORD v15[3];
  int v16;
  unint64_t v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  v6 = *(_OWORD *)(a2 + 16);
  v15[0] = *(_OWORD *)a2;
  v15[1] = v6;
  v15[2] = *(_OWORD *)(a2 + 32);
  v16 = *(_DWORD *)(a2 + 48);
  MurmurHash3_x64_128((uint64_t)v15, 44, 0, v17);
  v7 = (v17[1] + (v17[0] << 6) + (v17[0] >> 2) - 0x61C8864680B583E9) ^ v17[0];
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::addEmplace<NS::SharedPtr<MTL::RenderPipelineState>&>(a1, v8, v7, (__int128 *)a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 16) + 72 * v12;
    return v13 + 64;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = re::EqualTo<re::RenderTargetInfo>::operator()((int)v15, (void *)(v10 + 72 * v9 + 12), (void *)a2);
    v10 = *(_QWORD *)(a1 + 16);
    if (v11)
      break;
    v9 = *(_DWORD *)(v10 + 72 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v13 = v10 + 72 * v9;
  return v13 + 64;
}

BOOL re::EqualTo<re::RenderTargetInfo>::operator()(int a1, void *__s1, void *__s2)
{
  return memcmp(__s1, __s2, 0x2CuLL) == 0;
}

uint64_t re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::addEmplace<NS::SharedPtr<MTL::RenderPipelineState>&>(uint64_t a1, unsigned int a2, unint64_t a3, __int128 *a4, id *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 72 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10) = a3;
  v14 = *(_QWORD *)(a1 + 16) + 72 * v10;
  v15 = *a4;
  v16 = a4[1];
  v17 = a4[2];
  *(_DWORD *)(v14 + 60) = *((_DWORD *)a4 + 12);
  *(_OWORD *)(v14 + 44) = v17;
  *(_OWORD *)(v14 + 28) = v16;
  *(_OWORD *)(v14 + 12) = v15;
  v18 = *(_QWORD *)(a1 + 16) + 72 * v10;
  *(_QWORD *)(v18 + 64) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (__int128 *)(*(_QWORD *)&v13[16] + v10 + 12), (_QWORD *)(*(_QWORD *)&v13[16] + v10 + 64));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 72;
        }
        while (v11 < v9);
      }
      re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, __int128 *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 72 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 72 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 72 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9) = a3;
  v13 = *(_QWORD *)(a1 + 16) + 72 * v9;
  v14 = *a4;
  v15 = a4[1];
  v16 = a4[2];
  *(_DWORD *)(v13 + 60) = *((_DWORD *)a4 + 12);
  *(_OWORD *)(v13 + 44) = v16;
  *(_OWORD *)(v13 + 28) = v15;
  *(_OWORD *)(v13 + 12) = v14;
  v17 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9 + 64) = *a5;
  *a5 = 0;
  *(_DWORD *)(v17 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 72 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  void *v8;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          v8 = *(void **)(v6 + 64);
          if (v8)
          {

            *(_QWORD *)(v6 + 64) = 0;
            v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 72;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::TextRenderGroupData::~TextRenderGroupData((re::TextRenderGroupData *)(v6 + 24));
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 168;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashSetBase<re::FontID,re::FontID,re::internal::ValueAsKey<re::FontID>,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  signed int v24;
  _BYTE v25[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v25, 0, 36);
      *(_QWORD *)&v25[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::FontID,re::FontID,re::internal::ValueAsKey<re::FontID>,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::init((uint64_t)v25, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v25;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v25[8];
      *(_OWORD *)v25 = v5;
      *(_QWORD *)&v25[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v25[24];
      *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v25[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = (uint64_t *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v14 - 1) & 0x80000000) != 0)
          {
            v15 = *(v14 - 2);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashSetBase<re::FontID,re::FontID,re::internal::ValueAsKey<re::FontID>,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 32 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 32 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 32 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v18 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v18) = v15;
            v22 = *(_QWORD *)(a1 + 16) + 32 * v18;
            v23 = *v14;
            *(_QWORD *)(v22 + 16) = *(_QWORD *)(v22 + 16) & 0xFFFFFFFFFFFFFFFELL | *v14 & 1;
            *(_QWORD *)(v22 + 16) = *v14 & 0xFFFFFFFFFFFFFFFELL | v23 & 1;
            *(_QWORD *)(v22 + 24) = v14[1];
            *v14 = 0;
            v14[1] = (uint64_t)&str_110;
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 4;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)v25);
    }
  }
  else
  {
    if (a2)
      v24 = a2;
    else
      v24 = 3;
  }
}

void re::HashSetBase<re::FontID,re::FontID,re::internal::ValueAsKey<re::FontID>,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 600);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  signed int v22;
  _BYTE v23[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(_QWORD *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::init((uint64_t)v23, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v23;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)v23 = v5;
      *(_QWORD *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = v6 + 16;
        do
        {
          if ((*(_DWORD *)(v14 - 8) & 0x80000000) != 0)
          {
            v15 = *(_QWORD *)(v14 - 16);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 40 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 40 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 40 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v18 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v18) = v15;
            re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 40 * v18 + 16), (const StringID *)v14);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v18 + 32) = *(_QWORD *)(v14 + 16);
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 40;
        }
        while (v11 < v10);
      }
      re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2)
      v22 = a2;
    else
      v22 = 3;
  }
}

void re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 40 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<re::TextRenderGroupData&>(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 168 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 168 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 168 * v10;
  *(_DWORD *)(v12 + v14 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v14) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v14 + 16) = *a4;
  v15 = *(_QWORD *)(a1 + 16) + v14;
  re::FixedArray<re::StringRenderParam>::FixedArray((_QWORD *)(v15 + 24), (uint64_t *)a5);
  re::FixedArray<re::StringRenderParam *>::FixedArray(v15 + 48, a5 + 24);
  re::DynamicString::DynamicString((re::DynamicString *)(v15 + 72), (const re::DynamicString *)(a5 + 48));
  v16 = *(_OWORD *)(a5 + 80);
  *(_DWORD *)(v15 + 120) = *(_DWORD *)(a5 + 96);
  *(_OWORD *)(v15 + 104) = v16;
  re::FixedArray<TextRenderPerGlyphData>::FixedArray(v15 + 128, a5 + 104);
  *(_OWORD *)(v15 + 152) = *(_OWORD *)(a5 + 128);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::FixedArray<re::StringRenderParam>::FixedArray(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *a2;
  if (!v4)
    return (uint64_t)a1;
  re::FixedArray<re::StringRenderParam>::init<>(a1, v4, a2[1]);
  v6 = a2[1];
  if (a1[1] == v6)
  {
    if (v6)
    {
      v7 = a2[2];
      v8 = (unint64_t *)a1[2];
      v9 = 144 * v6;
      do
      {
        v10 = re::StringID::operator=(v8, (uint64_t *)v7);
        v11 = *(_OWORD *)(v7 + 16);
        v12 = *(_OWORD *)(v7 + 32);
        v13 = *(_OWORD *)(v7 + 64);
        *((_OWORD *)v10 + 3) = *(_OWORD *)(v7 + 48);
        *((_OWORD *)v10 + 4) = v13;
        *((_OWORD *)v10 + 1) = v11;
        *((_OWORD *)v10 + 2) = v12;
        v14 = *(_OWORD *)(v7 + 80);
        v15 = *(_OWORD *)(v7 + 96);
        v16 = *(_OWORD *)(v7 + 112);
        v10[16] = *(_QWORD *)(v7 + 128);
        *((_OWORD *)v10 + 6) = v15;
        *((_OWORD *)v10 + 7) = v16;
        *((_OWORD *)v10 + 5) = v14;
        v7 += 144;
        v8 = v10 + 18;
        v9 -= 144;
      }
      while (v9);
    }
    return (uint64_t)a1;
  }
  re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::FixedArray<re::StringRenderParam *>::FixedArray(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *(_QWORD *)a2;
  if (!v4)
    return a1;
  re::FixedArray<re::StringRenderParam *>::init<>((uint64_t *)a1, v4, *(_QWORD *)(a2 + 8));
  v6 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8) == v6)
  {
    if (v6)
      memmove(*(void **)(a1 + 16), *(const void **)(a2 + 16), 8 * v6);
    return a1;
  }
  re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::FixedArray<TextRenderPerGlyphData>::FixedArray(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *(_QWORD *)a2;
  if (!v4)
    return a1;
  re::FixedArray<TextRenderPerGlyphData>::init<>((uint64_t *)a1, v4, *(_QWORD *)(a2 + 8));
  v6 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8) == v6)
  {
    if (v6)
      memmove(*(void **)(a1 + 16), *(const void **)(a2 + 16), 48 * v6);
    return a1;
  }
  re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  _OWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  signed int v25;
  _BYTE v26[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v26, 0, 36);
      *(_QWORD *)&v26[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v26, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v26;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v26[8];
      *(_OWORD *)v26 = v5;
      *(_QWORD *)&v26[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v26[24];
      *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v26[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = (_OWORD *)(v6 + 152);
        do
        {
          if ((*(_DWORD *)(v14 - 9) & 0x80000000) != 0)
          {
            v15 = *((_QWORD *)v14 - 19);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(_DWORD *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              v18 = *(_DWORD *)(a1 + 32);
              v19 = v18;
              if (v18 == (_DWORD)v16)
              {
                re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 168 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 168 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 168 * v18 + 8) = v21 | 0x80000000;
            v22 = *(_QWORD *)(a1 + 16) + 168 * v18;
            *(_DWORD *)(v22 + 8) = *(_DWORD *)(v22 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 168 * v18) = v15;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 168 * v18 + 16) = *((_QWORD *)v14 - 17);
            v23 = *(_QWORD *)(a1 + 16) + 168 * v18;
            re::FixedArray<re::StringRenderParam>::FixedArray((_QWORD *)(v23 + 24), (uint64_t *)v14 - 16);
            re::FixedArray<re::StringRenderParam *>::FixedArray(v23 + 48, (uint64_t)v14 - 104);
            re::DynamicString::DynamicString((re::DynamicString *)(v23 + 72), (const re::DynamicString *)(v14 - 5));
            v24 = *(v14 - 3);
            *(_DWORD *)(v23 + 120) = *((_DWORD *)v14 - 8);
            *(_OWORD *)(v23 + 104) = v24;
            re::FixedArray<TextRenderPerGlyphData>::FixedArray(v23 + 128, (uint64_t)v14 - 24);
            *(_OWORD *)(v23 + 152) = *v14;
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          v14 = (_OWORD *)((char *)v14 + 168);
          ++v11;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v26);
    }
  }
  else
  {
    if (a2)
      v25 = a2;
    else
      v25 = 3;
  }
}

void re::HashTable<unsigned long long,re::TextRenderGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 168 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  BOOL v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  int64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t *v94;
  int64_t v95;
  uint64_t *v96;
  uint64_t v97;
  int64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t *v102;

  v6 = (uint64_t *)result;
LABEL_2:
  v94 = a2 - 2;
  v96 = a2 - 1;
  v93 = a2 - 3;
  v7 = v6;
  v101 = a2;
  while (2)
  {
    v6 = v7;
    v8 = (char *)a2 - (char *)v7;
    v9 = a2 - v7;
    switch(v9)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v39 = *(a2 - 1);
        v40 = *v6;
        result = strcmp(*(const char **)(v39 + 8), *(const char **)(*v6 + 8));
        if ((result & 0x80000000) != 0)
        {
          *v6 = v39;
          *(a2 - 1) = v40;
        }
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(v6, v6 + 1, v96);
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(v6, v6 + 1, v6 + 2, v96);
      case 5:
        v41 = v6 + 2;
        v42 = v6 + 3;
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(v6, v6 + 1, v6 + 2, v6 + 3);
        v43 = *(a2 - 1);
        v44 = v6[3];
        result = strcmp(*(const char **)(v43 + 8), *(const char **)(v44 + 8));
        if ((result & 0x80000000) != 0)
        {
          *v42 = v43;
          *(a2 - 1) = v44;
          v45 = *v42;
          v46 = *v41;
          result = strcmp(*(const char **)(*v42 + 8), *(const char **)(*v41 + 8));
          if ((result & 0x80000000) != 0)
          {
            *v41 = v45;
            *v42 = v46;
            v47 = v6[1];
            result = strcmp(*(const char **)(v45 + 8), *(const char **)(v47 + 8));
            if ((result & 0x80000000) != 0)
            {
              v6[1] = v45;
              v6[2] = v47;
              v48 = *v6;
              result = strcmp(*(const char **)(v45 + 8), *(const char **)(*v6 + 8));
              if ((result & 0x80000000) != 0)
              {
                *v6 = v45;
                v6[1] = v48;
              }
            }
          }
        }
        return result;
      default:
        if (v8 <= 191)
        {
          v49 = v6 + 1;
          v51 = v6 == a2 || v49 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v51)
            {
              v52 = 0;
              v53 = v6;
              do
              {
                v55 = *v53;
                v54 = v53[1];
                v53 = v49;
                result = strcmp(*(const char **)(v54 + 8), *(const char **)(v55 + 8));
                if ((result & 0x80000000) != 0)
                {
                  v56 = v52;
                  while (1)
                  {
                    *(uint64_t *)((char *)v6 + v56 + 8) = v55;
                    if (!v56)
                      break;
                    v55 = *(uint64_t *)((char *)v6 + v56 - 8);
                    result = strcmp(*(const char **)(v54 + 8), *(const char **)(v55 + 8));
                    v56 -= 8;
                    if ((result & 0x80000000) == 0)
                    {
                      v57 = (uint64_t *)((char *)v6 + v56 + 8);
                      goto LABEL_80;
                    }
                  }
                  v57 = v6;
LABEL_80:
                  *v57 = v54;
                }
                v49 = v53 + 1;
                v52 += 8;
              }
              while (v53 + 1 != a2);
            }
          }
          else if (!v51)
          {
            do
            {
              v91 = *v6;
              v90 = v6[1];
              v6 = v49;
              result = strcmp(*(const char **)(v90 + 8), *(const char **)(v91 + 8));
              if ((result & 0x80000000) != 0)
              {
                v92 = v6;
                do
                {
                  *v92 = v91;
                  v91 = *(v92 - 2);
                  result = strcmp(*(const char **)(v90 + 8), *(const char **)(v91 + 8));
                  --v92;
                }
                while ((result & 0x80000000) != 0);
                *v92 = v90;
              }
              v49 = v6 + 1;
            }
            while (v6 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v6 != a2)
          {
            v58 = (unint64_t)(v9 - 2) >> 1;
            v99 = v58;
            do
            {
              v59 = v58;
              if (v99 >= v58)
              {
                v60 = (2 * v58) | 1;
                v61 = &v6[v60];
                v62 = *v61;
                if (2 * v58 + 2 < v9)
                {
                  v63 = v61[1];
                  v64 = strcmp(*(const char **)(v62 + 8), *(const char **)(v63 + 8));
                  if (v64 < 0)
                    v62 = v63;
                  a2 = v101;
                  if (v64 < 0)
                  {
                    ++v61;
                    v60 = 2 * v59 + 2;
                  }
                }
                v65 = &v6[v59];
                v66 = *v65;
                result = strcmp(*(const char **)(v62 + 8), *(const char **)(*v65 + 8));
                if ((result & 0x80000000) == 0)
                {
                  v95 = v59;
                  v97 = v66;
                  do
                  {
                    v67 = v61;
                    *v65 = v62;
                    if (v99 < v60)
                      break;
                    v68 = (2 * v60) | 1;
                    v61 = &v6[v68];
                    v62 = *v61;
                    if (2 * v60 + 2 < v9)
                    {
                      v69 = v61[1];
                      v70 = strcmp(*(const char **)(v62 + 8), *(const char **)(v69 + 8));
                      if (v70 < 0)
                        v62 = v69;
                      a2 = v101;
                      if (v70 < 0)
                      {
                        ++v61;
                        v68 = 2 * v60 + 2;
                      }
                    }
                    result = strcmp(*(const char **)(v62 + 8), *(const char **)(v97 + 8));
                    v65 = v67;
                    v60 = v68;
                  }
                  while ((result & 0x80000000) == 0);
                  v59 = v95;
                  *v67 = v97;
                }
              }
              v58 = v59 - 1;
            }
            while (v59);
            v71 = (unint64_t)v8 >> 3;
            do
            {
              v72 = 0;
              v100 = *v6;
              v102 = a2;
              v73 = v6;
              do
              {
                v74 = &v73[v72];
                v77 = v74[1];
                v75 = v74 + 1;
                v76 = v77;
                v78 = (2 * v72) | 1;
                v79 = 2 * v72 + 2;
                if (v79 < v71)
                {
                  v80 = v75[1];
                  result = strcmp(*(const char **)(v76 + 8), *(const char **)(v80 + 8));
                  if ((int)result < 0)
                  {
                    v76 = v80;
                    ++v75;
                    v78 = v79;
                  }
                }
                *v73 = v76;
                v73 = v75;
                v72 = v78;
              }
              while (v78 <= (uint64_t)((unint64_t)(v71 - 2) >> 1));
              v81 = v102 - 1;
              if (v75 == v102 - 1)
              {
                v82 = v102 - 1;
                *v75 = v100;
              }
              else
              {
                *v75 = *v81;
                v82 = v102 - 1;
                *v81 = v100;
                v83 = (char *)v75 - (char *)v6 + 8;
                if (v83 >= 9)
                {
                  v84 = (((unint64_t)v83 >> 3) - 2) >> 1;
                  v85 = &v6[v84];
                  v86 = *v85;
                  v87 = *v75;
                  result = strcmp(*(const char **)(*v85 + 8), *(const char **)(*v75 + 8));
                  if ((result & 0x80000000) != 0)
                  {
                    do
                    {
                      v88 = v85;
                      *v75 = v86;
                      if (!v84)
                        break;
                      v84 = (v84 - 1) >> 1;
                      v85 = &v6[v84];
                      v86 = *v85;
                      result = strcmp(*(const char **)(*v85 + 8), *(const char **)(v87 + 8));
                      v75 = v88;
                    }
                    while ((result & 0x80000000) != 0);
                    *v88 = v87;
                  }
                }
              }
              v89 = v71-- <= 2;
              a2 = v82;
            }
            while (!v89);
          }
          return result;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = &v6[(unint64_t)v9 >> 1];
        if ((unint64_t)v8 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(v11, v6, v96);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(v6, v11, v96);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(v6 + 1, v11 - 1, v94);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(v6 + 2, &v6[v10 + 1], v93);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(v11 - 1, v11, &v6[v10 + 1]);
          v12 = *v6;
          *v6 = *v11;
          *v11 = v12;
        }
        --a3;
        v13 = *v6;
        if ((a4 & 1) == 0)
        {
          v14 = *(const char **)(v13 + 8);
          if (strcmp(*(const char **)(*(v6 - 1) + 8), v14) < 0)
            goto LABEL_12;
          result = strcmp(v14, *(const char **)(*v96 + 8));
          if ((result & 0x80000000) != 0)
          {
            v7 = v6;
            do
            {
              v29 = v7[1];
              ++v7;
              result = strcmp(v14, *(const char **)(v29 + 8));
            }
            while ((result & 0x80000000) == 0);
          }
          else
          {
            v30 = v6 + 1;
            do
            {
              v7 = v30;
              if (v30 >= a2)
                break;
              ++v30;
              result = strcmp(v14, *(const char **)(*v7 + 8));
            }
            while ((result & 0x80000000) == 0);
          }
          v31 = a2;
          if (v7 < a2)
          {
            v31 = a2;
            do
            {
              v32 = *--v31;
              result = strcmp(v14, *(const char **)(v32 + 8));
            }
            while ((result & 0x80000000) != 0);
          }
          if (v7 < v31)
          {
            v33 = *v7;
            v34 = *v31;
            do
            {
              *v7 = v34;
              *v31 = v33;
              v35 = *(const char **)(v13 + 8);
              do
              {
                v36 = v7[1];
                ++v7;
                v33 = v36;
              }
              while ((strcmp(v35, *(const char **)(v36 + 8)) & 0x80000000) == 0);
              do
              {
                v37 = *--v31;
                v34 = v37;
                result = strcmp(v35, *(const char **)(v37 + 8));
              }
              while ((result & 0x80000000) != 0);
            }
            while (v7 < v31);
          }
          v38 = v7 - 1;
          if (v7 - 1 != v6)
            *v6 = *v38;
          a4 = 0;
          *v38 = v13;
          a2 = v101;
          continue;
        }
        v14 = *(const char **)(v13 + 8);
LABEL_12:
        v15 = 0;
        do
          v16 = v6[++v15];
        while (strcmp(*(const char **)(v16 + 8), v14) < 0);
        v17 = &v6[v15];
        v18 = a2;
        if (v15 == 1)
        {
          v18 = a2;
          do
          {
            if (v17 >= v18)
              break;
            v20 = *--v18;
          }
          while ((strcmp(*(const char **)(v20 + 8), v14) & 0x80000000) == 0);
        }
        else
        {
          do
            v19 = *--v18;
          while ((strcmp(*(const char **)(v19 + 8), v14) & 0x80000000) == 0);
        }
        if (v17 >= v18)
        {
          v27 = v17 - 1;
        }
        else
        {
          v21 = *v18;
          v22 = &v6[v15];
          v23 = v18;
          do
          {
            *v22 = v21;
            *v23 = v16;
            v24 = *(const char **)(v13 + 8);
            do
            {
              v25 = v22[1];
              ++v22;
              v16 = v25;
            }
            while (strcmp(*(const char **)(v25 + 8), v24) < 0);
            do
            {
              v26 = *--v23;
              v21 = v26;
            }
            while ((strcmp(*(const char **)(v26 + 8), v24) & 0x80000000) == 0);
          }
          while (v22 < v23);
          v27 = v22 - 1;
          a2 = v101;
        }
        if (v27 != v6)
          *v6 = *v27;
        *v27 = v13;
        if (v17 < v18)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **,false>(v6, v27, a3, a4 & 1);
          a4 = 0;
          v7 = v27 + 1;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(v6, v27);
        v7 = v27 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(v27 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_33;
        }
        a2 = v27;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *a2;
  v7 = *a1;
  v8 = *(const char **)(*a2 + 8);
  v9 = strcmp(v8, *(const char **)(*a1 + 8));
  v10 = *a3;
  result = strcmp(*(const char **)(*a3 + 8), v8);
  if (v9 < 0)
  {
    if ((result & 0x80000000) != 0)
    {
      *a1 = v10;
    }
    else
    {
      *a1 = v6;
      *a2 = v7;
      v14 = *a3;
      result = strcmp(*(const char **)(*a3 + 8), *(const char **)(v7 + 8));
      if ((result & 0x80000000) == 0)
        return result;
      *a2 = v14;
    }
    *a3 = v7;
  }
  else if ((result & 0x80000000) != 0)
  {
    *a2 = v10;
    *a3 = v6;
    v12 = *a2;
    v13 = *a1;
    result = strcmp(*(const char **)(*a2 + 8), *(const char **)(*a1 + 8));
    if ((result & 0x80000000) != 0)
    {
      *a1 = v12;
      *a2 = v13;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (strcmp(*(const char **)(v6 + 8), *(const char **)(*a1 + 8)) < 0)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 2;
      v19 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(a1, a1 + 1, a1 + 2, a1 + 3);
      v20 = *(a2 - 1);
      v21 = a1[3];
      if (strcmp(*(const char **)(v20 + 8), *(const char **)(v21 + 8)) < 0)
      {
        *v19 = v20;
        *(a2 - 1) = v21;
        v22 = *v19;
        v23 = *v18;
        if (strcmp(*(const char **)(*v19 + 8), *(const char **)(*v18 + 8)) < 0)
        {
          *v18 = v22;
          *v19 = v23;
          v24 = a1[1];
          if (strcmp(*(const char **)(v22 + 8), *(const char **)(v24 + 8)) < 0)
          {
            a1[1] = v22;
            a1[2] = v24;
            v25 = *a1;
            if (strcmp(*(const char **)(v22 + 8), *(const char **)(*a1 + 8)) < 0)
            {
              *a1 = v22;
              a1[1] = v25;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (strcmp(*(const char **)(*v9 + 8), *(const char **)(v13 + 8)) < 0)
    {
      v14 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v14 - 16);
        v16 = strcmp(*(const char **)(v12 + 8), *(const char **)(v13 + 8));
        v14 = v15;
        if ((v16 & 0x80000000) == 0)
        {
          v17 = (uint64_t *)((char *)a1 + v15);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::TextManager::sortAndFillInstanceUniforms(re::TextRenderGroupData &,TextRenderPerGlyphData *)::$_0 &,re::StringRenderParam **>(a1, a2, a3);
  v8 = *a4;
  v9 = *a3;
  result = strcmp(*(const char **)(*a4 + 8), *(const char **)(*a3 + 8));
  if ((result & 0x80000000) != 0)
  {
    *a3 = v8;
    *a4 = v9;
    v11 = *a3;
    v12 = *a2;
    result = strcmp(*(const char **)(*a3 + 8), *(const char **)(*a2 + 8));
    if ((result & 0x80000000) != 0)
    {
      *a2 = v11;
      *a3 = v12;
      v13 = *a2;
      v14 = *a1;
      result = strcmp(*(const char **)(*a2 + 8), *(const char **)(*a1 + 8));
      if ((result & 0x80000000) != 0)
      {
        *a1 = v13;
        *a2 = v14;
      }
    }
  }
  return result;
}

void re::uploadDataToTexture(id *a1, void **a2, uint64_t *a3, id *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  void *v27;

  if (objc_msgSend(*a4, sel_storageMode) == (id)2)
  {
    v17 = objc_msgSend(*a1, sel_newBufferWithBytes_length_options_, a8, a9, 0);
    v27 = v17;
    v18 = *a4;
    v23 = 0uLL;
    v24 = 0;
    re::mtl::BlitCommandEncoder::copyFromBufferToTexture(a2, &v27, a3, (__int128 *)a5, (uint64_t)v18, a7, a6, &v23);
    if (v17)

  }
  else
  {
    v19 = *a4;
    v20 = *(_QWORD *)(a5 + 16);
    v21 = a3[1];
    v22 = a3[2];
    v23 = 0uLL;
    v24 = 0;
    v25 = *(_OWORD *)a5;
    v26 = v20;
    objc_msgSend(v19, sel_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_, &v23, a6, a7, a8, v21, v22);
  }
}

void re::makeTextureColor1D(id *a1, id *a2, id *a3, void **a4, float *a5)
{
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  __int8 *v17;
  int64x2_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  int v22;

  v10 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  objc_msgSend(v10, sel_setStorageMode_, objc_msgSend(*a3, sel_storageMode));
  objc_msgSend(v10, sel_setTextureType_, 0);
  objc_msgSend(v10, sel_setWidth_, 1);
  objc_msgSend(v10, sel_setPixelFormat_, 70);
  objc_msgSend(v10, sel_setStorageMode_, objc_msgSend(*a3, sel_storageMode));
  v11 = objc_msgSend(*a3, sel_newTextureWithDescriptor_, v10);
  v12 = (int)(float)(*a5 * 255.0);
  v13 = (int)(float)(a5[1] * 255.0);
  v14 = a5[3];
  v15 = (int)(float)(a5[2] * 255.0);
  *a1 = v11;
  v16 = (int)(float)(v14 * 255.0);
  v22 = ((_DWORD)v13 << 8) | ((_DWORD)v15 << 16) | ((_DWORD)v16 << 24) | v12;
  v20 = xmmword_226104390;
  v21 = 4;
  v18 = vdupq_n_s64(1uLL);
  v19 = 1;
  re::uploadDataToTexture(a2, a4, (uint64_t *)&v20, a1, (uint64_t)&v18, 0, 0, (uint64_t)&v22, 4);
  re::DynamicString::format((re::DynamicString *)"Color1D-(%i,%i,%i,%i)", (re::DynamicString *)&v18, v12, v13, v15, v16);
  if ((v18.i8[8] & 1) != 0)
    v17 = (__int8 *)v19;
  else
    v17 = &v18.i8[9];
  objc_msgSend(v11, sel_setLabel_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, v17, 4));
  if (v18.i64[0] && (v18.i8[8] & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v18.i64[0] + 40))();
  if (v10)

}

void re::makeTextureColor1x1(id *a1, id *a2, id *a3, void **a4, float *a5, char a6, unsigned int a7)
{
  uint64_t v11;
  id v12;
  uint64_t TextureCompressionType;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  __int8 *v22;
  int64x2_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  id v29;
  uint64_t v30;
  uint64_t v31;

  if (a6)
    v11 = a7;
  else
    v11 = 0;
  v30 = 70;
  v31 = v11;
  v12 = objc_msgSend(*a3, sel_storageMode);
  v29 = v12;
  TextureCompressionType = re::mtl::getTextureCompressionType(a2, &v29, &v30, &v31);
  v14 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  objc_msgSend(v14, sel_setStorageMode_, v12);
  if ((objc_msgSend(v14, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
    || objc_msgSend(v14, sel_methodSignatureForSelector_, sel_setCompressionType_))
  {
    objc_msgSend(v14, sel_setCompressionType_, TextureCompressionType);
  }
  objc_msgSend(v14, sel_setWidth_, 1);
  objc_msgSend(v14, sel_setHeight_, 1);
  objc_msgSend(v14, sel_setPixelFormat_, 70);
  objc_msgSend(v14, sel_setUsage_, v11);
  objc_msgSend(v14, sel_setStorageMode_, objc_msgSend(*a3, sel_storageMode));
  v15 = objc_msgSend(*a3, sel_newTextureWithDescriptor_, v14);
  v16 = (int)(float)(*a5 * 255.0);
  v17 = (int)(float)(a5[1] * 255.0);
  v18 = a5[3];
  v19 = (int)(float)(a5[2] * 255.0);
  *a1 = v15;
  v20 = (int)(float)(v18 * 255.0);
  v28 = ((_DWORD)v17 << 8) | ((_DWORD)v19 << 16) | ((_DWORD)v20 << 24) | v16;
  v26 = xmmword_226104390;
  v27 = 4;
  v24 = vdupq_n_s64(1uLL);
  v25 = 1;
  re::uploadDataToTexture(a2, a4, (uint64_t *)&v26, a1, (uint64_t)&v24, 0, 0, (uint64_t)&v28, 4);
  v21 = "_writable";
  if ((v11 & 2) == 0)
    v21 = "";
  re::DynamicString::format((re::DynamicString *)"Color1x1-(%i,%i,%i,%i)%s", (re::DynamicString *)&v24, v16, v17, v19, v20, v21);
  if ((v24.i8[8] & 1) != 0)
    v22 = (__int8 *)v25;
  else
    v22 = &v24.i8[9];
  objc_msgSend(v15, sel_setLabel_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, v22, 4));
  if (v24.i64[0] && (v24.i8[8] & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v24.i64[0] + 40))();
  if (v14)

}

void re::makeTextureColor1x1x1(id *a1, id *a2, id *a3, void **a4, float *a5)
{
  id v10;
  uint64_t TextureCompressionType;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  __int8 *v19;
  int64x2_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  id v25;
  uint64_t v26;

  v26 = 70;
  v10 = objc_msgSend(*a3, sel_storageMode);
  v25 = v10;
  v20.i64[0] = 0;
  TextureCompressionType = re::mtl::getTextureCompressionType(a2, &v25, &v26, &v20);
  v12 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  objc_msgSend(v12, sel_setStorageMode_, v10);
  if ((objc_msgSend(v12, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
    || objc_msgSend(v12, sel_methodSignatureForSelector_, sel_setCompressionType_))
  {
    objc_msgSend(v12, sel_setCompressionType_, TextureCompressionType);
  }
  objc_msgSend(v12, sel_setTextureType_, 7);
  objc_msgSend(v12, sel_setWidth_, 1);
  objc_msgSend(v12, sel_setHeight_, 1);
  objc_msgSend(v12, sel_setDepth_, 1);
  objc_msgSend(v12, sel_setPixelFormat_, 70);
  objc_msgSend(v12, sel_setStorageMode_, objc_msgSend(*a3, sel_storageMode));
  v13 = objc_msgSend(*a3, sel_newTextureWithDescriptor_, v12);
  v14 = (int)(float)(*a5 * 255.0);
  v15 = (int)(float)(a5[1] * 255.0);
  v16 = a5[3];
  v17 = (int)(float)(a5[2] * 255.0);
  *a1 = v13;
  v18 = (int)(float)(v16 * 255.0);
  v24 = ((_DWORD)v15 << 8) | ((_DWORD)v17 << 16) | ((_DWORD)v18 << 24) | v14;
  v22 = xmmword_226104390;
  v23 = 4;
  v20 = vdupq_n_s64(1uLL);
  v21 = 1;
  re::uploadDataToTexture(a2, a4, (uint64_t *)&v22, a1, (uint64_t)&v20, 0, 0, (uint64_t)&v24, 4);
  re::DynamicString::format((re::DynamicString *)"Color1x1x1-(%i,%i,%i,%i)", (re::DynamicString *)&v20, v14, v15, v17, v18);
  if ((v20.i8[8] & 1) != 0)
    v19 = (__int8 *)v21;
  else
    v19 = &v20.i8[9];
  objc_msgSend(v13, sel_setLabel_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, v19, 4));
  if (v20.i64[0] && (v20.i8[8] & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v20.i64[0] + 40))();
  if (v12)

}

void re::makeTexture2DArrayColor1x1(id *a1, id *a2, id *a3, void **a4, float32x4_t *a5)
{
  id v10;
  uint64_t TextureCompressionType;
  id v12;
  id v13;
  __int8 *v14;
  int64x2_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x24BDAC8D0];
  v20 = 115;
  v10 = objc_msgSend(*a3, sel_storageMode);
  v19 = v10;
  v15.i64[0] = 0;
  TextureCompressionType = re::mtl::getTextureCompressionType(a2, &v19, &v20, &v15);
  v12 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  objc_msgSend(v12, sel_setStorageMode_, v10);
  if ((objc_msgSend(v12, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
    || objc_msgSend(v12, sel_methodSignatureForSelector_, sel_setCompressionType_))
  {
    objc_msgSend(v12, sel_setCompressionType_, TextureCompressionType);
  }
  objc_msgSend(v12, sel_setTextureType_, 3);
  objc_msgSend(v12, sel_setWidth_, 1);
  objc_msgSend(v12, sel_setHeight_, 1);
  objc_msgSend(v12, sel_setArrayLength_, 1);
  objc_msgSend(v12, sel_setPixelFormat_, 115);
  objc_msgSend(v12, sel_setStorageMode_, objc_msgSend(*a3, sel_storageMode));
  v13 = objc_msgSend(*a3, sel_newTextureWithDescriptor_, v12);
  *a1 = v13;
  v21[0] = vcvt_f16_f32(*a5);
  v17 = xmmword_226147220;
  v18 = 8;
  v15 = vdupq_n_s64(1uLL);
  v16 = 1;
  re::uploadDataToTexture(a2, a4, (uint64_t *)&v17, a1, (uint64_t)&v15, 0, 0, (uint64_t)v21, 8);
  re::DynamicString::format((re::DynamicString *)"Texture2DArray1x1x1-(%f,%f,%f,%f)", (re::DynamicString *)&v15, a5->f32[0], a5->f32[1], a5->f32[2], a5->f32[3]);
  if ((v15.i8[8] & 1) != 0)
    v14 = (__int8 *)v16;
  else
    v14 = &v15.i8[9];
  objc_msgSend(v13, sel_setLabel_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, v14, 4));
  if (v15.i64[0] && (v15.i8[8] & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v15.i64[0] + 40))();
  if (v12)

}

void re::makeStockEnvMapColor(id *a1, id *a2, id *a3, void **a4, float32x4_t *a5)
{
  id v10;
  uint64_t TextureCompressionType;
  id v12;
  id v13;
  uint64_t v14;
  __int8 *v15;
  int64x2_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x24BDAC8D0];
  v21 = 115;
  v10 = objc_msgSend(*a3, sel_storageMode);
  v20 = v10;
  v16.i64[0] = 0;
  TextureCompressionType = re::mtl::getTextureCompressionType(a2, &v20, &v21, &v16);
  v12 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  objc_msgSend(v12, sel_setStorageMode_, v10);
  if ((objc_msgSend(v12, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
    || objc_msgSend(v12, sel_methodSignatureForSelector_, sel_setCompressionType_))
  {
    objc_msgSend(v12, sel_setCompressionType_, TextureCompressionType);
  }
  objc_msgSend(v12, sel_setTextureType_, 5);
  objc_msgSend(v12, sel_setWidth_, 1);
  objc_msgSend(v12, sel_setHeight_, 1);
  objc_msgSend(v12, sel_setPixelFormat_, 115);
  objc_msgSend(v12, sel_setStorageMode_, objc_msgSend(*a3, sel_storageMode));
  v13 = objc_msgSend(*a3, sel_newTextureWithDescriptor_, v12);
  v14 = 0;
  *a1 = v13;
  v22[0] = vcvt_f16_f32(*a5);
  v18 = xmmword_226147220;
  v19 = 8;
  do
  {
    v16 = vdupq_n_s64(1uLL);
    v17 = 1;
    re::uploadDataToTexture(a2, a4, (uint64_t *)&v18, a1, (uint64_t)&v16, 0, v14++, (uint64_t)v22, 8);
  }
  while (v14 != 6);
  re::DynamicString::format((re::DynamicString *)"EnvMap1x1x6-(%f,%f,%f,%f)", (re::DynamicString *)&v16, a5->f32[0], a5->f32[1], a5->f32[2], a5->f32[3]);
  if ((v16.i8[8] & 1) != 0)
    v15 = (__int8 *)v17;
  else
    v15 = &v16.i8[9];
  objc_msgSend(v13, sel_setLabel_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, v15, 4));
  if (v16.i64[0] && (v16.i8[8] & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v16.i64[0] + 40))();
  if (v12)

}

void re::TextureManager::~TextureManager(re::TextureManager *this)
{
  _QWORD *v2;
  double v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t i;
  uint64_t v11;
  int v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;

  re::DynamicArray<re::VirtualEnvironmentProbeSource>::deinit((uint64_t)this + 440);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)this + 392);
  v2 = (_QWORD *)((char *)this + 320);
  if (*((_DWORD *)this + 91))
  {
    v3 = re::DataArray<re::Texture>::clear((_QWORD *)this + 40);
    if (!*((_QWORD *)this + 42))
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v4 = (_QWORD *)*((_QWORD *)this + 44);
    (*(void (**)(_QWORD, _QWORD, double))(**((_QWORD **)this + 40) + 40))(*((_QWORD *)this + 40), *v4, v3);
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 40) + 40))(*((_QWORD *)this + 40), v4[1]);
    v5 = *((_QWORD *)this + 40);
    if (v5)
    {
      if (*((_QWORD *)this + 44))
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      *((_QWORD *)this + 44) = 0;
      *((_QWORD *)this + 41) = 0;
      *((_QWORD *)this + 42) = 0;
      *v2 = 0;
      ++*((_DWORD *)this + 86);
    }
    *((_DWORD *)this + 91) = 0;
  }
  else if (*v2)
  {
    if (*((_QWORD *)this + 44))
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 40))(*v2);
    *((_QWORD *)this + 44) = 0;
    *((_QWORD *)this + 41) = 0;
    *((_QWORD *)this + 42) = 0;
    *v2 = 0;
    ++*((_DWORD *)this + 86);
  }
  v6 = *((_QWORD *)this + 33);
  if (v6)
  {
    v7 = (uint64_t *)((char *)this + 264);
    v8 = *((unsigned int *)this + 74);
    if ((_DWORD)v8)
    {
      v9 = 0;
      for (i = 0; i < v8; ++i)
      {
        v11 = *((_QWORD *)this + 35) + v9;
        v12 = *(_DWORD *)(v11 + 8);
        if (v12 < 0)
        {
          *(_DWORD *)(v11 + 8) = v12 & 0x7FFFFFFF;
          re::TextureHandle::invalidate((re::TextureHandle *)(v11 + 24));
          v8 = *((unsigned int *)this + 74);
        }
        v9 += 40;
      }
      v6 = *v7;
    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 34));
    *((_DWORD *)this + 74) = 0;
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)((char *)this + 280) = 0u;
    *(_QWORD *)((char *)this + 300) = 0x7FFFFFFFLL;
  }
  v13 = (void *)*((_QWORD *)this + 32);
  if (v13)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::FixedArray<re::DynamicString>::deinit((_QWORD *)this + 29);
  v14 = (void *)*((_QWORD *)this + 27);
  if (v14)
  {

    *((_QWORD *)this + 27) = 0;
  }
  v15 = (void *)*((_QWORD *)this + 26);
  if (v15)
  {

    *((_QWORD *)this + 26) = 0;
  }
  v16 = (void *)*((_QWORD *)this + 25);
  if (v16)
  {

    *((_QWORD *)this + 25) = 0;
  }
  v17 = (void *)*((_QWORD *)this + 24);
  if (v17)
  {

    *((_QWORD *)this + 24) = 0;
  }
  v18 = (void *)*((_QWORD *)this + 23);
  if (v18)
  {

    *((_QWORD *)this + 23) = 0;
  }
  v19 = (void *)*((_QWORD *)this + 22);
  if (v19)
  {

    *((_QWORD *)this + 22) = 0;
  }
  v20 = (void *)*((_QWORD *)this + 21);
  if (v20)
  {

    *((_QWORD *)this + 21) = 0;
  }
  v21 = (void *)*((_QWORD *)this + 20);
  if (v21)
  {

    *((_QWORD *)this + 20) = 0;
  }
  v22 = (void *)*((_QWORD *)this + 19);
  if (v22)
  {

    *((_QWORD *)this + 19) = 0;
  }
  v23 = (void *)*((_QWORD *)this + 18);
  if (v23)
  {

    *((_QWORD *)this + 18) = 0;
  }
  v24 = (void *)*((_QWORD *)this + 17);
  if (v24)
  {

    *((_QWORD *)this + 17) = 0;
  }
  v25 = (void *)*((_QWORD *)this + 16);
  if (v25)
  {

    *((_QWORD *)this + 16) = 0;
  }
  v26 = (void *)*((_QWORD *)this + 15);
  if (v26)
  {

    *((_QWORD *)this + 15) = 0;
  }
  v27 = (void *)*((_QWORD *)this + 14);
  if (v27)
  {

    *((_QWORD *)this + 14) = 0;
  }
  v28 = (void *)*((_QWORD *)this + 13);
  if (v28)
  {

    *((_QWORD *)this + 13) = 0;
  }
  v29 = (void *)*((_QWORD *)this + 12);
  if (v29)
  {

    *((_QWORD *)this + 12) = 0;
  }
  v30 = (void *)*((_QWORD *)this + 11);
  if (v30)
  {

    *((_QWORD *)this + 11) = 0;
  }
  v31 = (void *)*((_QWORD *)this + 10);
  if (v31)
  {

    *((_QWORD *)this + 10) = 0;
  }
  v32 = (void *)*((_QWORD *)this + 9);
  if (v32)
  {

    *((_QWORD *)this + 9) = 0;
  }
  v33 = (void *)*((_QWORD *)this + 8);
  if (v33)
  {

    *((_QWORD *)this + 8) = 0;
  }
  v34 = (void *)*((_QWORD *)this + 7);
  if (v34)
  {

    *((_QWORD *)this + 7) = 0;
  }
  v35 = (void *)*((_QWORD *)this + 6);
  if (v35)
  {

    *((_QWORD *)this + 6) = 0;
  }
  v36 = (void *)*((_QWORD *)this + 5);
  if (v36)
  {

    *((_QWORD *)this + 5) = 0;
  }
  v37 = (void *)*((_QWORD *)this + 4);
  if (v37)
  {

    *((_QWORD *)this + 4) = 0;
  }
  v38 = (void *)*((_QWORD *)this + 3);
  if (v38)
  {

    *((_QWORD *)this + 3) = 0;
  }
  v39 = (void *)*((_QWORD *)this + 2);
  if (v39)
  {

    *((_QWORD *)this + 2) = 0;
  }
  v40 = (void *)*((_QWORD *)this + 1);
  if (v40)
  {

    *((_QWORD *)this + 1) = 0;
  }

}

BOOL re::TextureManager::init(id *this, id *a2)
{
  id *v4;
  unint64_t v5;
  re::DynamicString *v6;
  re::DynamicString *v7;
  re::DynamicString *v8;
  re::DynamicString *v9;
  re::DynamicString *v10;
  re::DynamicString *v11;
  re::DynamicString *v12;
  re::DynamicString *v13;
  re::DynamicString *v14;
  re::DynamicString *v15;
  re::DynamicString *v16;
  re::DynamicString *v17;
  re::DynamicString *v18;
  re::DynamicString *v19;
  re::DynamicString *v20;
  re::DynamicString *v21;
  re::DynamicString *v22;
  re::DynamicString *v23;
  re::DynamicString *v24;
  re::DynamicString *v25;
  re::DynamicString *v26;
  re::DynamicString *v27;
  re::DynamicString *v28;
  re::DynamicString *v29;
  re::DynamicString *v30;
  re::DynamicString *v31;
  re::DynamicString *v32;
  re::DynamicString *v33;
  id v34;
  id *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  char **v47;
  char **v48;
  id v49;
  uint64_t TextureCompressionType;
  id v51;
  id v52;
  uint64_t v53;
  __int8 *v54;
  id v55;
  uint64_t v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint8x8_t v63;
  uint64_t v64;
  uint64_t v65;
  int16x8_t v66;
  _DWORD *v67;
  uint64_t *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  id v72;
  id v73;
  __int8 *v74;
  id v75;
  id v76;
  __int8 *v77;
  id v78;
  uint64_t v79;
  id v80;
  id v81;
  __int8 *v82;
  _QWORD *TextureTableForName;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  _BYTE *v88;
  id *v89;
  char v90;
  unsigned __int8 *v91;
  int v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  _BYTE *v98;
  char v99;
  unsigned __int8 *v100;
  int v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  _BYTE *v107;
  id *v108;
  char v109;
  unsigned __int8 *v110;
  int v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  _BYTE *v117;
  char v118;
  unsigned __int8 *v119;
  int v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  _BYTE *v126;
  id *v127;
  char v128;
  unsigned __int8 *v129;
  int v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  _BYTE *v136;
  char v137;
  unsigned __int8 *v138;
  int v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  _BYTE *v145;
  char v146;
  unsigned __int8 *v147;
  int v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  _BYTE *v154;
  id *v155;
  char v156;
  unsigned __int8 *v157;
  int v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  _BYTE *v164;
  id *v165;
  char v166;
  unsigned __int8 *v167;
  int v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  _BYTE *v174;
  id *v175;
  char v176;
  unsigned __int8 *v177;
  int v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  _BYTE *v184;
  id *v185;
  char v186;
  unsigned __int8 *v187;
  int v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  _BYTE *v194;
  id *v195;
  char v196;
  unsigned __int8 *v197;
  int v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  _BYTE *v204;
  id *v205;
  char v206;
  unsigned __int8 *v207;
  int v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  _BYTE *v214;
  id *v215;
  char v216;
  unsigned __int8 *v217;
  int v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  _BYTE *v224;
  id *v225;
  char v226;
  unsigned __int8 *v227;
  int v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  _BYTE *v234;
  char v235;
  unsigned __int8 *v236;
  int v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  _BYTE *v243;
  char v244;
  unsigned __int8 *v245;
  int v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  _BYTE *v252;
  id *v253;
  char v254;
  unsigned __int8 *v255;
  int v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  _BYTE *v262;
  char v263;
  unsigned __int8 *v264;
  int v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  _BYTE *v271;
  id *v272;
  char v273;
  unsigned __int8 *v274;
  int v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  unint64_t v279;
  unint64_t v280;
  _BYTE *v281;
  char v282;
  unsigned __int8 *v283;
  int v284;
  uint64_t v285;
  _QWORD *v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  _BYTE *v290;
  id *v291;
  char v292;
  unsigned __int8 *v293;
  int v294;
  uint64_t v295;
  _QWORD *v296;
  uint64_t v297;
  unint64_t v298;
  unint64_t v299;
  _BYTE *v300;
  char v301;
  unsigned __int8 *v302;
  int v303;
  uint64_t v304;
  _QWORD *v305;
  uint64_t v306;
  unint64_t v307;
  unint64_t v308;
  _BYTE *v309;
  char v310;
  unsigned __int8 *v311;
  int v312;
  uint64_t v313;
  _QWORD *v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  _BYTE *v318;
  id *v319;
  char v320;
  unsigned __int8 *v321;
  int v322;
  uint64_t v323;
  _QWORD *v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  _BYTE *v328;
  char v329;
  unsigned __int8 *v330;
  int v331;
  uint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  unint64_t v335;
  unint64_t v336;
  _BYTE *v337;
  char v338;
  unsigned __int8 *v339;
  int v340;
  uint64_t v341;
  _QWORD *v342;
  uint64_t v343;
  unint64_t v344;
  unint64_t v345;
  _BYTE *v346;
  id *v347;
  char v348;
  unsigned __int8 *v349;
  int v350;
  uint64_t v351;
  _anonymous_namespace_ *v352;
  id v353;
  id v355;
  id *v356;
  id *v357;
  int32x4_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  id v387;
  void *v388;
  id v389;
  uint64_t v390;
  _BYTE v391[28];
  __int16 v392;
  unint64_t v393;
  int32x4_t v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  void *v399[4];

  v399[1] = *(void **)MEMORY[0x24BDAC8D0];
  v4 = re::ObjCObject::operator=(this, a2 + 23);
  v5 = (unint64_t)(v4 + 29);
  if (!this[30])
  {
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 0;
    v392 = 2048;
    v393 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_479;
  }
  v6 = (re::DynamicString *)this[31];
  v394.i64[0] = (uint64_t)"black";
  v394.i64[1] = 5;
  re::DynamicString::operator=(v6, (uint64_t)&v394);
  v5 = (unint64_t)this[30];
  if (v5 <= 1)
  {
LABEL_479:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 1;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_480;
  }
  v7 = (re::DynamicString *)((char *)this[31] + 32);
  v394.i64[0] = (uint64_t)"white";
  v394.i64[1] = 5;
  re::DynamicString::operator=(v7, (uint64_t)&v394);
  v5 = (unint64_t)this[30];
  if (v5 <= 2)
  {
LABEL_480:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 2;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_481;
  }
  v8 = (re::DynamicString *)((char *)this[31] + 64);
  v394.i64[0] = (uint64_t)"gray";
  v394.i64[1] = 4;
  re::DynamicString::operator=(v8, (uint64_t)&v394);
  v5 = (unint64_t)this[30];
  if (v5 <= 3)
  {
LABEL_481:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 3;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_482;
  }
  v9 = (re::DynamicString *)((char *)this[31] + 96);
  v394.i64[0] = (uint64_t)"graySrgb";
  v394.i64[1] = 8;
  re::DynamicString::operator=(v9, (uint64_t)&v394);
  v5 = (unint64_t)this[30];
  if (v5 <= 4)
  {
LABEL_482:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 4;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_483;
  }
  v10 = (re::DynamicString *)((char *)this[31] + 128);
  v394.i64[0] = (uint64_t)"lightBlue";
  v394.i64[1] = 9;
  re::DynamicString::operator=(v10, (uint64_t)&v394);
  v5 = (unint64_t)this[30];
  if (v5 <= 5)
  {
LABEL_483:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 5;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_484;
  }
  v11 = (re::DynamicString *)((char *)this[31] + 160);
  v394.i64[0] = (uint64_t)"transparentBlank";
  v394.i64[1] = 16;
  re::DynamicString::operator=(v11, (uint64_t)&v394);
  v5 = (unint64_t)this[30];
  if (v5 <= 6)
  {
LABEL_484:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 6;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_485;
  }
  v12 = (re::DynamicString *)((char *)this[31] + 192);
  v394.i64[0] = (uint64_t)"stockEnvMap";
  v394.i64[1] = 11;
  re::DynamicString::operator=(v12, (uint64_t)&v394);
  v5 = (unint64_t)this[30];
  if (v5 <= 7)
  {
LABEL_485:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 7;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_486;
  }
  v13 = (re::DynamicString *)((char *)this[31] + 224);
  v394.i64[0] = (uint64_t)"stockEnvMapGraySrgb";
  v394.i64[1] = 19;
  re::DynamicString::operator=(v13, (uint64_t)&v394);
  v5 = (unint64_t)this[30];
  if (v5 <= 0x10)
  {
LABEL_486:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 16;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_487;
  }
  v14 = (re::DynamicString *)((char *)this[31] + 512);
  v394.i64[0] = (uint64_t)"stockEnvMapArray";
  v394.i64[1] = 16;
  re::DynamicString::operator=(v14, (uint64_t)&v394);
  v5 = (unint64_t)this[30];
  if (v5 <= 8)
  {
LABEL_487:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 8;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_488;
  }
  v15 = (re::DynamicString *)((char *)this[31] + 256);
  v394.i64[0] = (uint64_t)"black3D";
  v394.i64[1] = 7;
  re::DynamicString::operator=(v15, (uint64_t)&v394);
  v5 = (unint64_t)this[30];
  if (v5 <= 9)
  {
LABEL_488:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 9;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_489;
  }
  v16 = (re::DynamicString *)((char *)this[31] + 288);
  v394.i64[0] = (uint64_t)"white3D";
  v394.i64[1] = 7;
  re::DynamicString::operator=(v16, (uint64_t)&v394);
  v5 = (unint64_t)this[30];
  if (v5 <= 0xA)
  {
LABEL_489:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 10;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_490;
  }
  v17 = (re::DynamicString *)((char *)this[31] + 320);
  v394.i64[0] = (uint64_t)"mipmapGradient";
  v394.i64[1] = 14;
  re::DynamicString::operator=(v17, (uint64_t)&v394);
  v5 = (unint64_t)this[30];
  if (v5 <= 0xB)
  {
LABEL_490:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 11;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_491;
  }
  v18 = (re::DynamicString *)((char *)this[31] + 352);
  v394.i64[0] = (uint64_t)"red";
  v394.i64[1] = 3;
  re::DynamicString::operator=(v18, (uint64_t)&v394);
  v5 = (unint64_t)this[30];
  if (v5 <= 0xC)
  {
LABEL_491:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 12;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_492;
  }
  v19 = (re::DynamicString *)((char *)this[31] + 384);
  v394.i64[0] = (uint64_t)"green";
  v394.i64[1] = 5;
  re::DynamicString::operator=(v19, (uint64_t)&v394);
  v5 = (unint64_t)this[30];
  if (v5 <= 0xD)
  {
LABEL_492:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 13;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_493;
  }
  v20 = (re::DynamicString *)((char *)this[31] + 416);
  v394.i64[0] = (uint64_t)"cyan";
  v394.i64[1] = 4;
  re::DynamicString::operator=(v20, (uint64_t)&v394);
  v5 = (unint64_t)this[30];
  if (v5 <= 0xE)
  {
LABEL_493:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 14;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_494;
  }
  v21 = (re::DynamicString *)((char *)this[31] + 448);
  v394.i64[0] = (uint64_t)"blackArray";
  v394.i64[1] = 10;
  re::DynamicString::operator=(v21, (uint64_t)&v394);
  v5 = (unint64_t)this[30];
  if (v5 <= 0xF)
  {
LABEL_494:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 15;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_495;
  }
  v22 = (re::DynamicString *)((char *)this[31] + 480);
  v394.i64[0] = (uint64_t)"transparentBlankArray";
  v394.i64[1] = 21;
  re::DynamicString::operator=(v22, (uint64_t)&v394);
  v5 = (unint64_t)this[30];
  if (v5 <= 0x11)
  {
LABEL_495:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 17;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_496;
  }
  v23 = (re::DynamicString *)((char *)this[31] + 544);
  v394.i64[0] = (uint64_t)"black1D";
  v394.i64[1] = 7;
  re::DynamicString::operator=(v23, (uint64_t)&v394);
  v5 = (unint64_t)this[30];
  if (v5 <= 0x12)
  {
LABEL_496:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 18;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_497;
  }
  v24 = (re::DynamicString *)((char *)this[31] + 576);
  v394.i64[0] = (uint64_t)"black1DArray";
  v394.i64[1] = 12;
  re::DynamicString::operator=(v24, (uint64_t)&v394);
  v5 = (unint64_t)this[30];
  if (v5 <= 0x13)
  {
LABEL_497:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 19;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_498;
  }
  v25 = (re::DynamicString *)((char *)this[31] + 608);
  v394.i64[0] = (uint64_t)"stockTextureBuffer";
  v394.i64[1] = 18;
  re::DynamicString::operator=(v25, (uint64_t)&v394);
  v5 = (unint64_t)this[30];
  if (v5 <= 0x14)
  {
LABEL_498:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 20;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_499;
  }
  v26 = (re::DynamicString *)((char *)this[31] + 640);
  v394.i64[0] = (uint64_t)"whiteArray";
  v394.i64[1] = 10;
  re::DynamicString::operator=(v26, (uint64_t)&v394);
  v5 = (unint64_t)this[30];
  if (v5 <= 0x15)
  {
LABEL_499:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 21;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_500;
  }
  v27 = (re::DynamicString *)((char *)this[31] + 672);
  v394.i64[0] = (uint64_t)"white1D";
  v394.i64[1] = 7;
  re::DynamicString::operator=(v27, (uint64_t)&v394);
  v5 = (unint64_t)this[30];
  if (v5 <= 0x16)
  {
LABEL_500:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 22;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_501;
  }
  v28 = (re::DynamicString *)((char *)this[31] + 704);
  v394.i64[0] = (uint64_t)"missingUITexture";
  v394.i64[1] = 16;
  re::DynamicString::operator=(v28, (uint64_t)&v394);
  v5 = (unint64_t)this[30];
  if (v5 <= 0x17)
  {
LABEL_501:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 23;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_502;
  }
  v29 = (re::DynamicString *)((char *)this[31] + 736);
  v394.i64[0] = (uint64_t)"writableWhiteTexture";
  v394.i64[1] = 20;
  re::DynamicString::operator=(v29, (uint64_t)&v394);
  v5 = (unint64_t)this[30];
  if (v5 <= 0x18)
  {
LABEL_502:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 24;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_503;
  }
  v30 = (re::DynamicString *)((char *)this[31] + 768);
  v394.i64[0] = (uint64_t)"grayArray";
  v394.i64[1] = 9;
  re::DynamicString::operator=(v30, (uint64_t)&v394);
  v5 = (unint64_t)this[30];
  if (v5 <= 0x19)
  {
LABEL_503:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 25;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_504;
  }
  v31 = (re::DynamicString *)((char *)this[31] + 800);
  v394.i64[0] = (uint64_t)"graySrgbArray";
  v394.i64[1] = 13;
  re::DynamicString::operator=(v31, (uint64_t)&v394);
  v5 = (unint64_t)this[30];
  if (v5 <= 0x1A)
  {
LABEL_504:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 26;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_505;
  }
  v32 = (re::DynamicString *)((char *)this[31] + 832);
  v394.i64[0] = (uint64_t)"infinity";
  v394.i64[1] = 8;
  re::DynamicString::operator=(v32, (uint64_t)&v394);
  v5 = (unint64_t)this[30];
  if (v5 <= 0x1B)
  {
LABEL_505:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 27;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_506:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 0;
    v392 = 2048;
    v393 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_507;
  }
  v33 = (re::DynamicString *)((char *)this[31] + 864);
  v394.i64[0] = (uint64_t)"infinityArray";
  v394.i64[1] = 13;
  re::DynamicString::operator=(v33, (uint64_t)&v394);
  v34 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD5F0], sel_alloc), sel_init);
  objc_msgSend(v34, sel_setSize_, 0x100000);
  objc_msgSend(v34, sel_setHazardTrackingMode_, 1);
  objc_msgSend(v34, sel_setStorageMode_, 0);
  v388 = 0;
  v355 = v34;
  v394.i64[0] = (uint64_t)objc_msgSend(*this, sel_newHeapWithDescriptor_, v34);
  v35 = this + 1;
  NS::SharedPtr<MTL::Texture>::operator=(this + 1, (void **)&v394);
  if (v394.i64[0])

  v394 = (int32x4_t)xmmword_2260E5D70;
  re::makeTextureColor1x1((id *)v391, this, this + 1, &v388, (float *)v394.i32, 0, v36);
  NS::SharedPtr<MTL::Texture>::operator=(this + 2, (void **)v391);
  if (*(_QWORD *)v391)

  __asm { FMOV            V0.4S, #1.0 }
  v358 = _Q0;
  v394 = _Q0;
  re::makeTextureColor1x1((id *)v391, this, this + 1, &v388, (float *)v394.i32, 0, v37);
  NS::SharedPtr<MTL::Texture>::operator=(this + 3, (void **)v391);
  if (*(_QWORD *)v391)

  v394 = (int32x4_t)xmmword_226146650;
  re::makeTextureColor1x1((id *)v391, this, this + 1, &v388, (float *)v394.i32, 0, v43);
  NS::SharedPtr<MTL::Texture>::operator=(this + 4, (void **)v391);
  if (*(_QWORD *)v391)

  v394 = (int32x4_t)xmmword_226147230;
  re::makeTextureColor1x1((id *)v391, this, this + 1, &v388, (float *)v394.i32, 0, v44);
  NS::SharedPtr<MTL::Texture>::operator=(this + 5, (void **)v391);
  if (*(_QWORD *)v391)

  v394 = (int32x4_t)xmmword_226147240;
  re::makeTextureColor1x1((id *)v391, this, this + 1, &v388, (float *)v394.i32, 0, v45);
  NS::SharedPtr<MTL::Texture>::operator=(this + 6, (void **)v391);
  if (*(_QWORD *)v391)

  v394 = 0uLL;
  re::makeTextureColor1x1((id *)v391, this, this + 1, &v388, (float *)v394.i32, 0, v46);
  NS::SharedPtr<MTL::Texture>::operator=(this + 7, (void **)v391);
  if (*(_QWORD *)v391)

  v47 = &selRef_newBufferWithBytes_length_options_;
  v48 = &selRef_newBufferWithBytes_length_options_;
  v356 = a2;
  if (*((_BYTE *)a2 + 305))
  {
    v390 = 115;
    v49 = objc_msgSend(this[1], sel_storageMode);
    v389 = v49;
    v394.i64[0] = 0;
    TextureCompressionType = re::mtl::getTextureCompressionType(this, &v389, &v390, &v394);
    v51 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
    objc_msgSend(v51, sel_setStorageMode_, v49);
    if ((objc_msgSend(v51, sel_respondsToSelector_, 0x1F2E64208uLL) & 1) != 0
      || objc_msgSend(v51, sel_methodSignatureForSelector_, 0x1F2E64208uLL))
    {
      objc_msgSend(v51, (SEL)0x1F2E64208, TextureCompressionType);
    }
    objc_msgSend(v51, sel_setTextureType_, 6);
    objc_msgSend(v51, sel_setArrayLength_, 1);
    objc_msgSend(v51, sel_setWidth_, 1);
    objc_msgSend(v51, sel_setHeight_, 1);
    objc_msgSend(v51, sel_setPixelFormat_, 115);
    objc_msgSend(v51, sel_setStorageMode_, objc_msgSend(*v35, sel_storageMode));
    v52 = objc_msgSend(*v35, sel_newTextureWithDescriptor_, v51);
    v53 = 0;
    v387 = v52;
    v399[0] = (void *)0x3C00000000000000;
    *(_OWORD *)v391 = xmmword_226147220;
    *(_QWORD *)&v391[16] = 8;
    do
    {
      v394 = (int32x4_t)vdupq_n_s64(1uLL);
      *(_QWORD *)&v395 = 1;
      re::uploadDataToTexture(this, &v388, (uint64_t *)v391, &v387, (uint64_t)&v394, 0, v53++, (uint64_t)v399, 8);
    }
    while (v53 != 6);
    re::DynamicString::format((re::DynamicString *)"CubeArray1x1x6x1-(%f,%f,%f,%f)", (re::DynamicString *)&v394, 0, 0, 0, 0x3FF0000000000000);
    if ((v394.i8[8] & 1) != 0)
      v54 = (__int8 *)v395;
    else
      v54 = &v394.i8[9];
    objc_msgSend(v52, sel_setLabel_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, v54, 4));
    if (v394.i64[0] && (v394.i8[8] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v394.i64[0] + 40))();
    v47 = &selRef_newBufferWithBytes_length_options_;
    v48 = &selRef_newBufferWithBytes_length_options_;
    if (v51)

  }
  else
  {
    v394 = (int32x4_t)xmmword_2260E5D70;
    re::makeStockEnvMapColor(&v387, this, this + 1, &v388, (float32x4_t *)&v394);
  }
  NS::SharedPtr<MTL::Texture>::operator=(this + 8, &v387);
  if (v387)

  v394 = (int32x4_t)xmmword_2260E5D70;
  re::makeTexture2DArrayColor1x1((id *)v391, this, this + 1, &v388, (float32x4_t *)&v394);
  NS::SharedPtr<MTL::Texture>::operator=(this + 9, (void **)v391);
  if (*(_QWORD *)v391)

  v394 = 0uLL;
  re::makeTexture2DArrayColor1x1((id *)v391, this, this + 1, &v388, (float32x4_t *)&v394);
  NS::SharedPtr<MTL::Texture>::operator=(this + 10, (void **)v391);
  if (*(_QWORD *)v391)

  v394 = (int32x4_t)xmmword_2260E5D70;
  re::makeStockEnvMapColor((id *)v391, this, this + 1, &v388, (float32x4_t *)&v394);
  NS::SharedPtr<MTL::Texture>::operator=(this + 11, (void **)v391);
  if (*(_QWORD *)v391)

  v394 = (int32x4_t)xmmword_226147230;
  re::makeStockEnvMapColor((id *)v391, this, this + 1, &v388, (float32x4_t *)&v394);
  NS::SharedPtr<MTL::Texture>::operator=(this + 12, (void **)v391);
  if (*(_QWORD *)v391)

  v394 = (int32x4_t)xmmword_2260E5D70;
  re::makeTextureColor1x1x1((id *)v391, this, this + 1, &v388, (float *)v394.i32);
  NS::SharedPtr<MTL::Texture>::operator=(this + 13, (void **)v391);
  if (*(_QWORD *)v391)

  v394 = v358;
  re::makeTextureColor1x1x1((id *)v391, this, this + 1, &v388, (float *)v394.i32);
  NS::SharedPtr<MTL::Texture>::operator=(this + 14, (void **)v391);
  if (*(_QWORD *)v391)

  v357 = this + 7;
  v390 = 70;
  v55 = objc_msgSend(this[1], v47[215]);
  v389 = v55;
  v394.i64[0] = 0;
  v56 = re::mtl::getTextureCompressionType(this, &v389, &v390, &v394);
  v57 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  objc_msgSend(v57, sel_setStorageMode_, v55);
  if ((objc_msgSend(v57, v48[260], sel_setCompressionType_) & 1) != 0
    || objc_msgSend(v57, sel_methodSignatureForSelector_, sel_setCompressionType_))
  {
    objc_msgSend(v57, sel_setCompressionType_, v56);
  }
  objc_msgSend(v57, sel_setWidth_, 64);
  objc_msgSend(v57, sel_setHeight_, 64);
  objc_msgSend(v57, sel_setPixelFormat_, 70);
  objc_msgSend(v57, sel_setMipmapLevelCount_, 7);
  objc_msgSend(v57, sel_setStorageMode_, objc_msgSend(*v35, v47[215]));
  v58 = objc_msgSend(*v35, sel_newTextureWithDescriptor_, v57);
  v59 = 0;
  v399[0] = v58;
  do
  {
    v60 = (1 << v59);
    v61 = re::globalAllocators((re *)v58);
    v62 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61[2] + 32))(v61[2], v60 << (v59 + 2), 0);
    v64 = v62;
    v65 = v60 << v59;
    if (v60 << v59)
    {
      v63.i32[0] = algn_226147262[v59];
      v66 = (int16x8_t)vmovl_u8(v63);
      v67 = (_DWORD *)v62;
      do
      {
        *v67++ = vmovn_s16(v66).u32[0];
        --v65;
      }
      while (v65);
    }
    v394.i64[0] = 0;
    v394.i64[1] = 4 * (1 << v59);
    *(_QWORD *)&v395 = v60 << (v59 + 2);
    *(_QWORD *)v391 = (1 << v59);
    *(_QWORD *)&v391[8] = *(_QWORD *)v391;
    *(_QWORD *)&v391[16] = 1;
    re::uploadDataToTexture(this, &v388, v394.i64, v399, (uint64_t)v391, 6 - v59, 0, v62, v395);
    if (v64)
    {
      v68 = re::globalAllocators((re *)v58);
      v58 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v68[2] + 40))(v68[2], v64);
    }
    ++v59;
  }
  while (v59 != 7);
  if (v57)

  NS::SharedPtr<MTL::Texture>::operator=(this + 32, v399);
  if (v399[0])

  v394 = (int32x4_t)xmmword_226104350;
  re::makeTextureColor1x1((id *)v391, this, this + 1, &v388, (float *)v394.i32, 0, v69);
  NS::SharedPtr<MTL::Texture>::operator=(this + 15, (void **)v391);
  if (*(_QWORD *)v391)

  v394 = (int32x4_t)xmmword_22610BBE0;
  re::makeTextureColor1x1((id *)v391, this, this + 1, &v388, (float *)v394.i32, 0, v70);
  NS::SharedPtr<MTL::Texture>::operator=(this + 16, (void **)v391);
  if (*(_QWORD *)v391)

  v394 = (int32x4_t)xmmword_2260F8390;
  re::makeTextureColor1x1((id *)v391, this, this + 1, &v388, (float *)v394.i32, 0, v71);
  NS::SharedPtr<MTL::Texture>::operator=(this + 17, (void **)v391);
  if (*(_QWORD *)v391)

  v394 = (int32x4_t)xmmword_2260E5D70;
  re::makeTextureColor1D((id *)v391, this, this + 1, &v388, (float *)v394.i32);
  NS::SharedPtr<MTL::Texture>::operator=(this + 18, (void **)v391);
  if (*(_QWORD *)v391)

  v72 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  objc_msgSend(v72, sel_setStorageMode_, objc_msgSend(this[1], sel_storageMode));
  objc_msgSend(v72, sel_setTextureType_, 1);
  objc_msgSend(v72, sel_setWidth_, 1);
  objc_msgSend(v72, sel_setPixelFormat_, 70);
  objc_msgSend(v72, sel_setStorageMode_, objc_msgSend(this[1], sel_storageMode));
  v73 = objc_msgSend(this[1], sel_newTextureWithDescriptor_, v72);
  v390 = (uint64_t)v73;
  LODWORD(v389) = -16777216;
  *(_OWORD *)v391 = xmmword_226104390;
  *(_QWORD *)&v391[16] = 4;
  v394 = (int32x4_t)vdupq_n_s64(1uLL);
  *(_QWORD *)&v395 = 1;
  re::uploadDataToTexture(this, &v388, (uint64_t *)v391, (id *)&v390, (uint64_t)&v394, 0, 0, (uint64_t)&v389, 4);
  re::DynamicString::format((re::DynamicString *)"Color1DArray-(%i,%i,%i,%i)", (re::DynamicString *)&v394, 0, 0, 0, 255);
  if ((v394.i8[8] & 1) != 0)
    v74 = (__int8 *)v395;
  else
    v74 = &v394.i8[9];
  objc_msgSend(v73, sel_setLabel_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, v74, 4));
  if (v394.i64[0] && (v394.i8[8] & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v394.i64[0] + 40))();
  if (v72)

  NS::SharedPtr<MTL::Texture>::operator=(this + 19, (void **)&v390);
  if (v390)

  v75 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  objc_msgSend(v75, sel_setStorageMode_, objc_msgSend(this[1], sel_storageMode));
  objc_msgSend(v75, sel_setTextureType_, 9);
  objc_msgSend(v75, sel_setWidth_, 1);
  objc_msgSend(v75, sel_setPixelFormat_, 70);
  objc_msgSend(v75, sel_setStorageMode_, objc_msgSend(this[1], sel_storageMode));
  v76 = objc_msgSend(this[1], sel_newTextureWithDescriptor_, v75);
  v390 = (uint64_t)v76;
  LODWORD(v389) = 0;
  *(_OWORD *)v391 = xmmword_226104390;
  *(_QWORD *)&v391[16] = 4;
  v394 = (int32x4_t)vdupq_n_s64(1uLL);
  *(_QWORD *)&v395 = 1;
  re::uploadDataToTexture(this, &v388, (uint64_t *)v391, (id *)&v390, (uint64_t)&v394, 0, 0, (uint64_t)&v389, 4);
  re::DynamicString::format((re::DynamicString *)"TextureBuffer-(%i,%i,%i,%i)", (re::DynamicString *)&v394, 0, 0, 0, 0);
  if ((v394.i8[8] & 1) != 0)
    v77 = (__int8 *)v395;
  else
    v77 = &v394.i8[9];
  objc_msgSend(v76, sel_setLabel_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, v77, 4));
  if (v394.i64[0] && (v394.i8[8] & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v394.i64[0] + 40))();
  if (v75)

  NS::SharedPtr<MTL::Texture>::operator=(this + 20, (void **)&v390);
  if (v390)

  v394 = v358;
  re::makeTexture2DArrayColor1x1((id *)v391, this, this + 1, &v388, (float32x4_t *)&v394);
  NS::SharedPtr<MTL::Texture>::operator=(this + 21, (void **)v391);
  if (*(_QWORD *)v391)

  v394 = v358;
  re::makeTextureColor1D((id *)v391, this, this + 1, &v388, (float *)v394.i32);
  NS::SharedPtr<MTL::Texture>::operator=(this + 22, (void **)v391);
  if (*(_QWORD *)v391)

  v394 = v358;
  re::makeTextureColor1x1((id *)v391, this, this + 1, &v388, (float *)v394.i32, 1, 3u);
  NS::SharedPtr<MTL::Texture>::operator=(this + 23, (void **)v391);
  if (*(_QWORD *)v391)

  v394 = (int32x4_t)xmmword_226146650;
  re::makeTexture2DArrayColor1x1((id *)v391, this, this + 1, &v388, (float32x4_t *)&v394);
  NS::SharedPtr<MTL::Texture>::operator=(this + 24, (void **)v391);
  if (*(_QWORD *)v391)

  v394 = (int32x4_t)xmmword_226147230;
  re::makeTexture2DArrayColor1x1((id *)v391, this, this + 1, &v388, (float32x4_t *)&v394);
  NS::SharedPtr<MTL::Texture>::operator=(this + 25, (void **)v391);
  if (*(_QWORD *)v391)

  v390 = 115;
  v78 = objc_msgSend(this[1], sel_storageMode);
  v389 = v78;
  v394.i64[0] = 0;
  v79 = re::mtl::getTextureCompressionType(this, &v389, &v390, &v394);
  v80 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  objc_msgSend(v80, sel_setStorageMode_, v78);
  if ((objc_msgSend(v80, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
    || objc_msgSend(v80, sel_methodSignatureForSelector_, sel_setCompressionType_))
  {
    objc_msgSend(v80, sel_setCompressionType_, v79);
  }
  objc_msgSend(v80, sel_setTextureType_, 2);
  objc_msgSend(v80, sel_setWidth_, 1);
  objc_msgSend(v80, sel_setHeight_, 1);
  objc_msgSend(v80, sel_setArrayLength_, 1);
  objc_msgSend(v80, sel_setPixelFormat_, 115);
  objc_msgSend(v80, sel_setStorageMode_, objc_msgSend(this[1], sel_storageMode));
  v81 = objc_msgSend(this[1], sel_newTextureWithDescriptor_, v80);
  v387 = v81;
  v399[0] = (void *)0x7C007C007C007C00;
  *(_OWORD *)v391 = xmmword_226147220;
  *(_QWORD *)&v391[16] = 8;
  v394 = (int32x4_t)vdupq_n_s64(1uLL);
  *(_QWORD *)&v395 = 1;
  re::uploadDataToTexture(this, &v388, (uint64_t *)v391, &v387, (uint64_t)&v394, 0, 0, (uint64_t)v399, 8);
  re::DynamicString::format((re::DynamicString *)"Color1x1_Float16-(%f,%f,%f,%f)", (re::DynamicString *)&v394, 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000, 0x7FF0000000000000);
  if ((v394.i8[8] & 1) != 0)
    v82 = (__int8 *)v395;
  else
    v82 = &v394.i8[9];
  objc_msgSend(v81, sel_setLabel_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, v82, 4));
  if (v394.i64[0] && (v394.i8[8] & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v394.i64[0] + 40))();
  if (v80)

  NS::SharedPtr<MTL::Texture>::operator=(this + 26, &v387);
  if (v387)

  v394 = vdupq_n_s32(0x7F800000u);
  re::makeTexture2DArrayColor1x1((id *)v391, this, this + 1, &v388, (float32x4_t *)&v394);
  NS::SharedPtr<MTL::Texture>::operator=(this + 27, (void **)v391);
  if (*(_QWORD *)v391)

  TextureTableForName = (_QWORD *)re::MaterialManager::findOrCreateTextureTableForName((re::MaterialManager *)v356[3], "fallback");
  this[28] = TextureTableForName;
  v5 = (unint64_t)(TextureTableForName + 9);
  re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::setCapacity((_QWORD *)v5, 0x1CuLL);
  ++*(_DWORD *)(v5 + 24);
  if (!this[30])
    goto LABEL_506;
  v84 = this[28];
  v85 = (uint64_t)this[31];
  v86 = *(_QWORD *)(v85 + 8);
  if ((v86 & 1) != 0)
  {
    v88 = *(_BYTE **)(v85 + 16);
    v89 = this + 2;
    if (!v88)
    {
      v93 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_151;
    }
    LOBYTE(v85) = *v88;
  }
  else
  {
    v87 = v86 >> 8;
    v88 = (_BYTE *)(v85 + 9);
    LOBYTE(v85) = v87;
    v89 = this + 2;
  }
  if ((_BYTE)v85)
  {
    v85 = (char)v85;
    v90 = v88[1];
    if (v90)
    {
      v91 = v88 + 2;
      do
      {
        v85 = 31 * v85 + v90;
        v92 = *v91++;
        v90 = v92;
      }
      while (v92);
    }
    v93 = v85 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v93 = 0;
  }
LABEL_151:
  v386 = v93;
  re::TextureTable::setTexture(v84, &v386, v89);
  v386 = 0;
  v5 = (unint64_t)this[30];
  if (v5 <= 1)
  {
LABEL_507:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 1;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_508;
  }
  v94 = this[28];
  v95 = (uint64_t)this[31];
  v96 = *(_QWORD *)(v95 + 40);
  if ((v96 & 1) != 0)
  {
    v98 = *(_BYTE **)(v95 + 48);
    if (!v98)
    {
      v102 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_163;
    }
    LOBYTE(v95) = *v98;
  }
  else
  {
    v97 = v96 >> 8;
    v98 = (_BYTE *)(v95 + 41);
    LOBYTE(v95) = v97;
  }
  if ((_BYTE)v95)
  {
    v95 = (char)v95;
    v99 = v98[1];
    if (v99)
    {
      v100 = v98 + 2;
      do
      {
        v95 = 31 * v95 + v99;
        v101 = *v100++;
        v99 = v101;
      }
      while (v101);
    }
    v102 = v95 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v102 = 0;
  }
LABEL_163:
  v385 = v102;
  re::TextureTable::setTexture(v94, &v385, this + 3);
  v385 = 0;
  v5 = (unint64_t)this[30];
  if (v5 <= 2)
  {
LABEL_508:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 2;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_509;
  }
  v103 = this[28];
  v104 = (uint64_t)this[31];
  v105 = *(_QWORD *)(v104 + 72);
  if ((v105 & 1) != 0)
  {
    v107 = *(_BYTE **)(v104 + 80);
    v108 = this + 4;
    if (!v107)
    {
      v112 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_175;
    }
    LOBYTE(v104) = *v107;
  }
  else
  {
    v106 = v105 >> 8;
    v107 = (_BYTE *)(v104 + 73);
    LOBYTE(v104) = v106;
    v108 = this + 4;
  }
  if ((_BYTE)v104)
  {
    v104 = (char)v104;
    v109 = v107[1];
    if (v109)
    {
      v110 = v107 + 2;
      do
      {
        v104 = 31 * v104 + v109;
        v111 = *v110++;
        v109 = v111;
      }
      while (v111);
    }
    v112 = v104 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v112 = 0;
  }
LABEL_175:
  v384 = v112;
  re::TextureTable::setTexture(v103, &v384, v108);
  v384 = 0;
  v5 = (unint64_t)this[30];
  if (v5 <= 3)
  {
LABEL_509:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 3;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_510;
  }
  v113 = this[28];
  v114 = (uint64_t)this[31];
  v115 = *(_QWORD *)(v114 + 104);
  if ((v115 & 1) != 0)
  {
    v117 = *(_BYTE **)(v114 + 112);
    if (!v117)
    {
      v121 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_187;
    }
    LOBYTE(v114) = *v117;
  }
  else
  {
    v116 = v115 >> 8;
    v117 = (_BYTE *)(v114 + 105);
    LOBYTE(v114) = v116;
  }
  if ((_BYTE)v114)
  {
    v114 = (char)v114;
    v118 = v117[1];
    if (v118)
    {
      v119 = v117 + 2;
      do
      {
        v114 = 31 * v114 + v118;
        v120 = *v119++;
        v118 = v120;
      }
      while (v120);
    }
    v121 = v114 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v121 = 0;
  }
LABEL_187:
  v383 = v121;
  re::TextureTable::setTexture(v113, &v383, this + 5);
  v383 = 0;
  v5 = (unint64_t)this[30];
  if (v5 <= 4)
  {
LABEL_510:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 4;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_511;
  }
  v122 = this[28];
  v123 = (uint64_t)this[31];
  v124 = *(_QWORD *)(v123 + 136);
  if ((v124 & 1) != 0)
  {
    v126 = *(_BYTE **)(v123 + 144);
    v127 = this + 6;
    if (!v126)
    {
      v131 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_199;
    }
    LOBYTE(v123) = *v126;
  }
  else
  {
    v125 = v124 >> 8;
    v126 = (_BYTE *)(v123 + 137);
    LOBYTE(v123) = v125;
    v127 = this + 6;
  }
  if ((_BYTE)v123)
  {
    v123 = (char)v123;
    v128 = v126[1];
    if (v128)
    {
      v129 = v126 + 2;
      do
      {
        v123 = 31 * v123 + v128;
        v130 = *v129++;
        v128 = v130;
      }
      while (v130);
    }
    v131 = v123 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v131 = 0;
  }
LABEL_199:
  v382 = v131;
  re::TextureTable::setTexture(v122, &v382, v127);
  v382 = 0;
  v5 = (unint64_t)this[30];
  if (v5 <= 5)
  {
LABEL_511:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 5;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_512;
  }
  v132 = this[28];
  v133 = (uint64_t)this[31];
  v134 = *(_QWORD *)(v133 + 168);
  if ((v134 & 1) != 0)
  {
    v136 = *(_BYTE **)(v133 + 176);
    if (!v136)
    {
      v140 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_211;
    }
    LOBYTE(v133) = *v136;
  }
  else
  {
    v135 = v134 >> 8;
    v136 = (_BYTE *)(v133 + 169);
    LOBYTE(v133) = v135;
  }
  if ((_BYTE)v133)
  {
    v133 = (char)v133;
    v137 = v136[1];
    if (v137)
    {
      v138 = v136 + 2;
      do
      {
        v133 = 31 * v133 + v137;
        v139 = *v138++;
        v137 = v139;
      }
      while (v139);
    }
    v140 = v133 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v140 = 0;
  }
LABEL_211:
  v381 = v140;
  re::TextureTable::setTexture(v132, &v381, v357);
  v381 = 0;
  v5 = (unint64_t)this[30];
  if (v5 <= 6)
  {
LABEL_512:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 6;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_513;
  }
  v141 = this[28];
  v142 = (uint64_t)this[31];
  v143 = *(_QWORD *)(v142 + 200);
  if ((v143 & 1) != 0)
  {
    v145 = *(_BYTE **)(v142 + 208);
    if (!v145)
    {
      v149 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_223;
    }
    LOBYTE(v142) = *v145;
  }
  else
  {
    v144 = v143 >> 8;
    v145 = (_BYTE *)(v142 + 201);
    LOBYTE(v142) = v144;
  }
  if ((_BYTE)v142)
  {
    v142 = (char)v142;
    v146 = v145[1];
    if (v146)
    {
      v147 = v145 + 2;
      do
      {
        v142 = 31 * v142 + v146;
        v148 = *v147++;
        v146 = v148;
      }
      while (v148);
    }
    v149 = v142 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v149 = 0;
  }
LABEL_223:
  v380 = v149;
  re::TextureTable::setTexture(v141, &v380, this + 11);
  v380 = 0;
  v5 = (unint64_t)this[30];
  if (v5 <= 7)
  {
LABEL_513:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 7;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_514;
  }
  v150 = this[28];
  v151 = (uint64_t)this[31];
  v152 = *(_QWORD *)(v151 + 232);
  if ((v152 & 1) != 0)
  {
    v154 = *(_BYTE **)(v151 + 240);
    v155 = this + 12;
    if (!v154)
    {
      v159 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_235;
    }
    LOBYTE(v151) = *v154;
  }
  else
  {
    v153 = v152 >> 8;
    v154 = (_BYTE *)(v151 + 233);
    LOBYTE(v151) = v153;
    v155 = this + 12;
  }
  if ((_BYTE)v151)
  {
    v151 = (char)v151;
    v156 = v154[1];
    if (v156)
    {
      v157 = v154 + 2;
      do
      {
        v151 = 31 * v151 + v156;
        v158 = *v157++;
        v156 = v158;
      }
      while (v158);
    }
    v159 = v151 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v159 = 0;
  }
LABEL_235:
  v379 = v159;
  re::TextureTable::setTexture(v150, &v379, v155);
  v379 = 0;
  v5 = (unint64_t)this[30];
  if (v5 <= 0x10)
  {
LABEL_514:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 16;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_515;
  }
  v160 = this[28];
  v161 = (uint64_t)this[31];
  v162 = *(_QWORD *)(v161 + 520);
  if ((v162 & 1) != 0)
  {
    v164 = *(_BYTE **)(v161 + 528);
    v165 = this + 8;
    if (!v164)
    {
      v169 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_247;
    }
    LOBYTE(v161) = *v164;
  }
  else
  {
    v163 = v162 >> 8;
    v164 = (_BYTE *)(v161 + 521);
    LOBYTE(v161) = v163;
    v165 = this + 8;
  }
  if ((_BYTE)v161)
  {
    v161 = (char)v161;
    v166 = v164[1];
    if (v166)
    {
      v167 = v164 + 2;
      do
      {
        v161 = 31 * v161 + v166;
        v168 = *v167++;
        v166 = v168;
      }
      while (v168);
    }
    v169 = v161 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v169 = 0;
  }
LABEL_247:
  v378 = v169;
  re::TextureTable::setTexture(v160, &v378, v165);
  v378 = 0;
  v5 = (unint64_t)this[30];
  if (v5 <= 8)
  {
LABEL_515:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 8;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_516;
  }
  v170 = this[28];
  v171 = (uint64_t)this[31];
  v172 = *(_QWORD *)(v171 + 264);
  if ((v172 & 1) != 0)
  {
    v174 = *(_BYTE **)(v171 + 272);
    v175 = this + 13;
    if (!v174)
    {
      v179 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_259;
    }
    LOBYTE(v171) = *v174;
  }
  else
  {
    v173 = v172 >> 8;
    v174 = (_BYTE *)(v171 + 265);
    LOBYTE(v171) = v173;
    v175 = this + 13;
  }
  if ((_BYTE)v171)
  {
    v171 = (char)v171;
    v176 = v174[1];
    if (v176)
    {
      v177 = v174 + 2;
      do
      {
        v171 = 31 * v171 + v176;
        v178 = *v177++;
        v176 = v178;
      }
      while (v178);
    }
    v179 = v171 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v179 = 0;
  }
LABEL_259:
  v377 = v179;
  re::TextureTable::setTexture(v170, &v377, v175);
  v377 = 0;
  v5 = (unint64_t)this[30];
  if (v5 <= 9)
  {
LABEL_516:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 9;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_517;
  }
  v180 = this[28];
  v181 = (uint64_t)this[31];
  v182 = *(_QWORD *)(v181 + 296);
  if ((v182 & 1) != 0)
  {
    v184 = *(_BYTE **)(v181 + 304);
    v185 = this + 14;
    if (!v184)
    {
      v189 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_271;
    }
    LOBYTE(v181) = *v184;
  }
  else
  {
    v183 = v182 >> 8;
    v184 = (_BYTE *)(v181 + 297);
    LOBYTE(v181) = v183;
    v185 = this + 14;
  }
  if ((_BYTE)v181)
  {
    v181 = (char)v181;
    v186 = v184[1];
    if (v186)
    {
      v187 = v184 + 2;
      do
      {
        v181 = 31 * v181 + v186;
        v188 = *v187++;
        v186 = v188;
      }
      while (v188);
    }
    v189 = v181 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v189 = 0;
  }
LABEL_271:
  v376 = v189;
  re::TextureTable::setTexture(v180, &v376, v185);
  v376 = 0;
  v5 = (unint64_t)this[30];
  if (v5 <= 0xA)
  {
LABEL_517:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 10;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_518;
  }
  v190 = this[28];
  v191 = (uint64_t)this[31];
  v192 = *(_QWORD *)(v191 + 328);
  if ((v192 & 1) != 0)
  {
    v194 = *(_BYTE **)(v191 + 336);
    v195 = this + 32;
    if (!v194)
    {
      v199 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_283;
    }
    LOBYTE(v191) = *v194;
  }
  else
  {
    v193 = v192 >> 8;
    v194 = (_BYTE *)(v191 + 329);
    LOBYTE(v191) = v193;
    v195 = this + 32;
  }
  if ((_BYTE)v191)
  {
    v191 = (char)v191;
    v196 = v194[1];
    if (v196)
    {
      v197 = v194 + 2;
      do
      {
        v191 = 31 * v191 + v196;
        v198 = *v197++;
        v196 = v198;
      }
      while (v198);
    }
    v199 = v191 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v199 = 0;
  }
LABEL_283:
  v375 = v199;
  re::TextureTable::setTexture(v190, &v375, v195);
  v375 = 0;
  v5 = (unint64_t)this[30];
  if (v5 <= 0xB)
  {
LABEL_518:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 11;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_519;
  }
  v200 = this[28];
  v201 = (uint64_t)this[31];
  v202 = *(_QWORD *)(v201 + 360);
  if ((v202 & 1) != 0)
  {
    v204 = *(_BYTE **)(v201 + 368);
    v205 = this + 15;
    if (!v204)
    {
      v209 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_295;
    }
    LOBYTE(v201) = *v204;
  }
  else
  {
    v203 = v202 >> 8;
    v204 = (_BYTE *)(v201 + 361);
    LOBYTE(v201) = v203;
    v205 = this + 15;
  }
  if ((_BYTE)v201)
  {
    v201 = (char)v201;
    v206 = v204[1];
    if (v206)
    {
      v207 = v204 + 2;
      do
      {
        v201 = 31 * v201 + v206;
        v208 = *v207++;
        v206 = v208;
      }
      while (v208);
    }
    v209 = v201 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v209 = 0;
  }
LABEL_295:
  v374 = v209;
  re::TextureTable::setTexture(v200, &v374, v205);
  v374 = 0;
  v5 = (unint64_t)this[30];
  if (v5 <= 0xC)
  {
LABEL_519:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 12;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_520;
  }
  v210 = this[28];
  v211 = (uint64_t)this[31];
  v212 = *(_QWORD *)(v211 + 392);
  if ((v212 & 1) != 0)
  {
    v214 = *(_BYTE **)(v211 + 400);
    v215 = this + 16;
    if (!v214)
    {
      v219 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_307;
    }
    LOBYTE(v211) = *v214;
  }
  else
  {
    v213 = v212 >> 8;
    v214 = (_BYTE *)(v211 + 393);
    LOBYTE(v211) = v213;
    v215 = this + 16;
  }
  if ((_BYTE)v211)
  {
    v211 = (char)v211;
    v216 = v214[1];
    if (v216)
    {
      v217 = v214 + 2;
      do
      {
        v211 = 31 * v211 + v216;
        v218 = *v217++;
        v216 = v218;
      }
      while (v218);
    }
    v219 = v211 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v219 = 0;
  }
LABEL_307:
  v373 = v219;
  re::TextureTable::setTexture(v210, &v373, v215);
  v373 = 0;
  v5 = (unint64_t)this[30];
  if (v5 <= 0xD)
  {
LABEL_520:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 13;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_521;
  }
  v220 = this[28];
  v221 = (uint64_t)this[31];
  v222 = *(_QWORD *)(v221 + 424);
  if ((v222 & 1) != 0)
  {
    v224 = *(_BYTE **)(v221 + 432);
    v225 = this + 17;
    if (!v224)
    {
      v229 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_319;
    }
    LOBYTE(v221) = *v224;
  }
  else
  {
    v223 = v222 >> 8;
    v224 = (_BYTE *)(v221 + 425);
    LOBYTE(v221) = v223;
    v225 = this + 17;
  }
  if ((_BYTE)v221)
  {
    v221 = (char)v221;
    v226 = v224[1];
    if (v226)
    {
      v227 = v224 + 2;
      do
      {
        v221 = 31 * v221 + v226;
        v228 = *v227++;
        v226 = v228;
      }
      while (v228);
    }
    v229 = v221 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v229 = 0;
  }
LABEL_319:
  v372 = v229;
  re::TextureTable::setTexture(v220, &v372, v225);
  v372 = 0;
  v5 = (unint64_t)this[30];
  if (v5 <= 0xE)
  {
LABEL_521:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 14;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_522;
  }
  v230 = this[28];
  v231 = (uint64_t)this[31];
  v232 = *(_QWORD *)(v231 + 456);
  if ((v232 & 1) != 0)
  {
    v234 = *(_BYTE **)(v231 + 464);
    if (!v234)
    {
      v238 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_331;
    }
    LOBYTE(v231) = *v234;
  }
  else
  {
    v233 = v232 >> 8;
    v234 = (_BYTE *)(v231 + 457);
    LOBYTE(v231) = v233;
  }
  if ((_BYTE)v231)
  {
    v231 = (char)v231;
    v235 = v234[1];
    if (v235)
    {
      v236 = v234 + 2;
      do
      {
        v231 = 31 * v231 + v235;
        v237 = *v236++;
        v235 = v237;
      }
      while (v237);
    }
    v238 = v231 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v238 = 0;
  }
LABEL_331:
  v371 = v238;
  re::TextureTable::setTexture(v230, &v371, this + 9);
  v371 = 0;
  v5 = (unint64_t)this[30];
  if (v5 <= 0xF)
  {
LABEL_522:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 15;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_523;
  }
  v239 = this[28];
  v240 = (uint64_t)this[31];
  v241 = *(_QWORD *)(v240 + 488);
  if ((v241 & 1) != 0)
  {
    v243 = *(_BYTE **)(v240 + 496);
    if (!v243)
    {
      v247 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_343;
    }
    LOBYTE(v240) = *v243;
  }
  else
  {
    v242 = v241 >> 8;
    v243 = (_BYTE *)(v240 + 489);
    LOBYTE(v240) = v242;
  }
  if ((_BYTE)v240)
  {
    v240 = (char)v240;
    v244 = v243[1];
    if (v244)
    {
      v245 = v243 + 2;
      do
      {
        v240 = 31 * v240 + v244;
        v246 = *v245++;
        v244 = v246;
      }
      while (v246);
    }
    v247 = v240 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v247 = 0;
  }
LABEL_343:
  v370 = v247;
  re::TextureTable::setTexture(v239, &v370, this + 10);
  v370 = 0;
  v5 = (unint64_t)this[30];
  if (v5 <= 0x11)
  {
LABEL_523:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 17;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_524;
  }
  v248 = this[28];
  v249 = (uint64_t)this[31];
  v250 = *(_QWORD *)(v249 + 552);
  if ((v250 & 1) != 0)
  {
    v252 = *(_BYTE **)(v249 + 560);
    v253 = this + 18;
    if (!v252)
    {
      v257 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_355;
    }
    LOBYTE(v249) = *v252;
  }
  else
  {
    v251 = v250 >> 8;
    v252 = (_BYTE *)(v249 + 553);
    LOBYTE(v249) = v251;
    v253 = this + 18;
  }
  if ((_BYTE)v249)
  {
    v249 = (char)v249;
    v254 = v252[1];
    if (v254)
    {
      v255 = v252 + 2;
      do
      {
        v249 = 31 * v249 + v254;
        v256 = *v255++;
        v254 = v256;
      }
      while (v256);
    }
    v257 = v249 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v257 = 0;
  }
LABEL_355:
  v369 = v257;
  re::TextureTable::setTexture(v248, &v369, v253);
  v369 = 0;
  v5 = (unint64_t)this[30];
  if (v5 <= 0x12)
  {
LABEL_524:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 18;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_525;
  }
  v258 = this[28];
  v259 = (uint64_t)this[31];
  v260 = *(_QWORD *)(v259 + 584);
  if ((v260 & 1) != 0)
  {
    v262 = *(_BYTE **)(v259 + 592);
    if (!v262)
    {
      v266 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_367;
    }
    LOBYTE(v259) = *v262;
  }
  else
  {
    v261 = v260 >> 8;
    v262 = (_BYTE *)(v259 + 585);
    LOBYTE(v259) = v261;
  }
  if ((_BYTE)v259)
  {
    v259 = (char)v259;
    v263 = v262[1];
    if (v263)
    {
      v264 = v262 + 2;
      do
      {
        v259 = 31 * v259 + v263;
        v265 = *v264++;
        v263 = v265;
      }
      while (v265);
    }
    v266 = v259 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v266 = 0;
  }
LABEL_367:
  v368 = v266;
  re::TextureTable::setTexture(v258, &v368, this + 19);
  v368 = 0;
  v5 = (unint64_t)this[30];
  if (v5 <= 0x13)
  {
LABEL_525:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 19;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_526;
  }
  v267 = this[28];
  v268 = (uint64_t)this[31];
  v269 = *(_QWORD *)(v268 + 616);
  if ((v269 & 1) != 0)
  {
    v271 = *(_BYTE **)(v268 + 624);
    v272 = this + 20;
    if (!v271)
    {
      v276 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_379;
    }
    LOBYTE(v268) = *v271;
  }
  else
  {
    v270 = v269 >> 8;
    v271 = (_BYTE *)(v268 + 617);
    LOBYTE(v268) = v270;
    v272 = this + 20;
  }
  if ((_BYTE)v268)
  {
    v268 = (char)v268;
    v273 = v271[1];
    if (v273)
    {
      v274 = v271 + 2;
      do
      {
        v268 = 31 * v268 + v273;
        v275 = *v274++;
        v273 = v275;
      }
      while (v275);
    }
    v276 = v268 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v276 = 0;
  }
LABEL_379:
  v367 = v276;
  re::TextureTable::setTexture(v267, &v367, v272);
  v367 = 0;
  v5 = (unint64_t)this[30];
  if (v5 <= 0x14)
  {
LABEL_526:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 20;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_527;
  }
  v277 = this[28];
  v278 = (uint64_t)this[31];
  v279 = *(_QWORD *)(v278 + 648);
  if ((v279 & 1) != 0)
  {
    v281 = *(_BYTE **)(v278 + 656);
    if (!v281)
    {
      v285 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_391;
    }
    LOBYTE(v278) = *v281;
  }
  else
  {
    v280 = v279 >> 8;
    v281 = (_BYTE *)(v278 + 649);
    LOBYTE(v278) = v280;
  }
  if ((_BYTE)v278)
  {
    v278 = (char)v278;
    v282 = v281[1];
    if (v282)
    {
      v283 = v281 + 2;
      do
      {
        v278 = 31 * v278 + v282;
        v284 = *v283++;
        v282 = v284;
      }
      while (v284);
    }
    v285 = v278 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v285 = 0;
  }
LABEL_391:
  v366 = v285;
  re::TextureTable::setTexture(v277, &v366, this + 21);
  v366 = 0;
  v5 = (unint64_t)this[30];
  if (v5 <= 0x15)
  {
LABEL_527:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 21;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_528;
  }
  v286 = this[28];
  v287 = (uint64_t)this[31];
  v288 = *(_QWORD *)(v287 + 680);
  if ((v288 & 1) != 0)
  {
    v290 = *(_BYTE **)(v287 + 688);
    v291 = this + 22;
    if (!v290)
    {
      v295 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_403;
    }
    LOBYTE(v287) = *v290;
  }
  else
  {
    v289 = v288 >> 8;
    v290 = (_BYTE *)(v287 + 681);
    LOBYTE(v287) = v289;
    v291 = this + 22;
  }
  if ((_BYTE)v287)
  {
    v287 = (char)v287;
    v292 = v290[1];
    if (v292)
    {
      v293 = v290 + 2;
      do
      {
        v287 = 31 * v287 + v292;
        v294 = *v293++;
        v292 = v294;
      }
      while (v294);
    }
    v295 = v287 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v295 = 0;
  }
LABEL_403:
  v365 = v295;
  re::TextureTable::setTexture(v286, &v365, v291);
  v365 = 0;
  v5 = (unint64_t)this[30];
  if (v5 <= 0x18)
  {
LABEL_528:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 24;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_529;
  }
  v296 = this[28];
  v297 = (uint64_t)this[31];
  v298 = *(_QWORD *)(v297 + 776);
  if ((v298 & 1) != 0)
  {
    v300 = *(_BYTE **)(v297 + 784);
    if (!v300)
    {
      v304 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_415;
    }
    LOBYTE(v297) = *v300;
  }
  else
  {
    v299 = v298 >> 8;
    v300 = (_BYTE *)(v297 + 777);
    LOBYTE(v297) = v299;
  }
  if ((_BYTE)v297)
  {
    v297 = (char)v297;
    v301 = v300[1];
    if (v301)
    {
      v302 = v300 + 2;
      do
      {
        v297 = 31 * v297 + v301;
        v303 = *v302++;
        v301 = v303;
      }
      while (v303);
    }
    v304 = v297 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v304 = 0;
  }
LABEL_415:
  v364 = v304;
  re::TextureTable::setTexture(v296, &v364, this + 24);
  v364 = 0;
  v5 = (unint64_t)this[30];
  if (v5 <= 0x19)
  {
LABEL_529:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 25;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_530;
  }
  v305 = this[28];
  v306 = (uint64_t)this[31];
  v307 = *(_QWORD *)(v306 + 808);
  if ((v307 & 1) != 0)
  {
    v309 = *(_BYTE **)(v306 + 816);
    if (!v309)
    {
      v313 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_427;
    }
    LOBYTE(v306) = *v309;
  }
  else
  {
    v308 = v307 >> 8;
    v309 = (_BYTE *)(v306 + 809);
    LOBYTE(v306) = v308;
  }
  if ((_BYTE)v306)
  {
    v306 = (char)v306;
    v310 = v309[1];
    if (v310)
    {
      v311 = v309 + 2;
      do
      {
        v306 = 31 * v306 + v310;
        v312 = *v311++;
        v310 = v312;
      }
      while (v312);
    }
    v313 = v306 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v313 = 0;
  }
LABEL_427:
  v363 = v313;
  re::TextureTable::setTexture(v305, &v363, this + 25);
  v363 = 0;
  v5 = (unint64_t)this[30];
  if (v5 <= 0x1A)
  {
LABEL_530:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 26;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_531;
  }
  v314 = this[28];
  v315 = (uint64_t)this[31];
  v316 = *(_QWORD *)(v315 + 840);
  if ((v316 & 1) != 0)
  {
    v318 = *(_BYTE **)(v315 + 848);
    v319 = this + 26;
    if (!v318)
    {
      v323 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_439;
    }
    LOBYTE(v315) = *v318;
  }
  else
  {
    v317 = v316 >> 8;
    v318 = (_BYTE *)(v315 + 841);
    LOBYTE(v315) = v317;
    v319 = this + 26;
  }
  if ((_BYTE)v315)
  {
    v315 = (char)v315;
    v320 = v318[1];
    if (v320)
    {
      v321 = v318 + 2;
      do
      {
        v315 = 31 * v315 + v320;
        v322 = *v321++;
        v320 = v322;
      }
      while (v322);
    }
    v323 = v315 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v323 = 0;
  }
LABEL_439:
  v362 = v323;
  re::TextureTable::setTexture(v314, &v362, v319);
  v362 = 0;
  v5 = (unint64_t)this[30];
  if (v5 <= 0x1B)
  {
LABEL_531:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 27;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_532;
  }
  v324 = this[28];
  v325 = (uint64_t)this[31];
  v326 = *(_QWORD *)(v325 + 872);
  if ((v326 & 1) != 0)
  {
    v328 = *(_BYTE **)(v325 + 880);
    if (!v328)
    {
      v332 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_451;
    }
    LOBYTE(v325) = *v328;
  }
  else
  {
    v327 = v326 >> 8;
    v328 = (_BYTE *)(v325 + 873);
    LOBYTE(v325) = v327;
  }
  if ((_BYTE)v325)
  {
    v325 = (char)v325;
    v329 = v328[1];
    if (v329)
    {
      v330 = v328 + 2;
      do
      {
        v325 = 31 * v325 + v329;
        v331 = *v330++;
        v329 = v331;
      }
      while (v331);
    }
    v332 = v325 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v332 = 0;
  }
LABEL_451:
  v361 = v332;
  re::TextureTable::setTexture(v324, &v361, this + 27);
  v361 = 0;
  v5 = (unint64_t)this[30];
  if (v5 <= 0x16)
  {
LABEL_532:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 22;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_533:
    v390 = 0;
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v394 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v391 = 136315906;
    *(_QWORD *)&v391[4] = "operator[]";
    *(_WORD *)&v391[12] = 1024;
    *(_DWORD *)&v391[14] = 468;
    *(_WORD *)&v391[18] = 2048;
    *(_QWORD *)&v391[20] = 23;
    v392 = 2048;
    v393 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v333 = this[28];
  v334 = (uint64_t)this[31];
  v335 = *(_QWORD *)(v334 + 712);
  if ((v335 & 1) != 0)
  {
    v337 = *(_BYTE **)(v334 + 720);
    if (!v337)
    {
      v341 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_463;
    }
    LOBYTE(v334) = *v337;
  }
  else
  {
    v336 = v335 >> 8;
    v337 = (_BYTE *)(v334 + 713);
    LOBYTE(v334) = v336;
  }
  if ((_BYTE)v334)
  {
    v334 = (char)v334;
    v338 = v337[1];
    if (v338)
    {
      v339 = v337 + 2;
      do
      {
        v334 = 31 * v334 + v338;
        v340 = *v339++;
        v338 = v340;
      }
      while (v340);
    }
    v341 = v334 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v341 = 0;
  }
LABEL_463:
  v360 = v341;
  re::TextureTable::setTexture(v333, &v360, v357);
  v360 = 0;
  v5 = (unint64_t)this[30];
  if (v5 <= 0x17)
    goto LABEL_533;
  v342 = this[28];
  v343 = (uint64_t)this[31];
  v344 = *(_QWORD *)(v343 + 744);
  if ((v344 & 1) != 0)
  {
    v346 = *(_BYTE **)(v343 + 752);
    v347 = this + 23;
    if (!v346)
    {
      v351 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_475;
    }
    LOBYTE(v343) = *v346;
  }
  else
  {
    v345 = v344 >> 8;
    v346 = (_BYTE *)(v343 + 745);
    LOBYTE(v343) = v345;
    v347 = this + 23;
  }
  if ((_BYTE)v343)
  {
    v343 = (char)v343;
    v348 = v346[1];
    if (v348)
    {
      v349 = v346 + 2;
      do
      {
        v343 = 31 * v343 + v348;
        v350 = *v349++;
        v348 = v350;
      }
      while (v350);
    }
    v351 = v343 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v351 = 0;
  }
LABEL_475:
  v359 = v351;
  re::TextureTable::setTexture(v342, &v359, v347);
  v359 = 0;
  re::DynamicArray<re::RigNodeConstraint>::setCapacity(this + 40, 0);
  ++*((_DWORD *)this + 86);
  *((_DWORD *)this + 91) = 32;
  re::DataArray<re::Texture>::allocBlock(this + 40);
  v353 = *this;

  if (v355)
  return v353 != 0;
}

void re::TextureManager::deinit(re::TextureManager *this)
{
  void *v2;

  re::DataArray<re::Texture>::clear((_QWORD *)this + 40);
  *((_QWORD *)this + 28) = 0;

  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;

  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;

  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;

  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;

  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 13) = 0;

  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 32) = 0;

  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;

  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 9) = 0;

  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 18) = 0;

  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;

  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;

  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  v2 = *(void **)this;
  *(_QWORD *)this = 0;

}

double re::DataArray<re::Texture>::clear(_QWORD *a1)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  double result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v13, (uint64_t)a1, 0);
  if ((_QWORD *)v13 != a1 || WORD4(v13) != 0xFFFFLL || (DWORD2(v13) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v4 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v13);
      re::DataArray<re::Texture>::destroy((uint64_t)a1, v4);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v13);
    }
    while ((_QWORD *)v13 != a1 || WORD4(v13) != 0xFFFF || WORD5(v13) != 0xFFFF);
  }
  v7 = a1[2];
  v8 = v7 - 1;
  if (v7 != 1)
  {
    v9 = 16 * v7 - 16;
    do
    {
      if (v7 <= v8)
      {
        v16 = 0u;
        v17 = 0u;
        v14 = 0u;
        v15 = 0u;
        v13 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_25:
        v16 = 0u;
        v17 = 0u;
        v14 = 0u;
        v15 = 0u;
        v13 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v10 = (_QWORD *)(a1[4] + v9);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *v10);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, v10[1]);
      v11 = a1[2];
      if (v11 <= v8)
        goto LABEL_25;
      v7 = v11 - 1;
      if (v11 - 1 > v8)
      {
        *(_OWORD *)(a1[4] + v9) = *(_OWORD *)(a1[4] + 16 * v11 - 16);
        v7 = a1[2] - 1;
      }
      a1[2] = v7;
      ++*((_DWORD *)a1 + 6);
      v9 -= 16;
      --v8;
    }
    while (v8);
  }
  result = NAN;
  a1[6] = 0xFFFFFFFF00000000;
  return result;
}

void re::TextureManager::createRenderTarget(id *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, id *a9@<X8>)
{
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  int v21;
  id v22;

  v22 = *a1;
  v17 = a7 | 4u;
  v18 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  v19 = v18;
  if (a5 >= 2)
    v20 = 4;
  else
    v20 = 2;
  objc_msgSend(v18, sel_setTextureType_, v20);
  objc_msgSend(v19, sel_setWidth_, a2);
  objc_msgSend(v19, sel_setHeight_, a3);
  objc_msgSend(v19, sel_setPixelFormat_, a4);
  objc_msgSend(v19, sel_setMipmapLevelCount_, 1);
  objc_msgSend(v19, sel_setUsage_, v17);
  if (a8 == 0xFFFF)
    v21 = 0;
  else
    v21 = a8;
  objc_msgSend(v19, sel_setResourceOptions_, v21);
  objc_msgSend(v19, sel_setProtectionOptions_, re::protectionOptions((re *)objc_msgSend(v19, sel_setSampleCount_, a5)));
  re::mtl::Device::makeTexture(v19, &v22, a9);
  if (a6)
    objc_msgSend(*a9, sel_setLabel_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, a6, 4));
  if (v19)

}

id re::TextureManager::stockTextureForType@<X0>(re *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  void *v5;
  NSObject *v6;
  id result;
  _DWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  switch(a2)
  {
    case 0:
      v5 = (void *)*((_QWORD *)a1 + 18);
      goto LABEL_13;
    case 1:
      v5 = (void *)*((_QWORD *)a1 + 19);
      goto LABEL_13;
    case 2:
      v5 = (void *)*((_QWORD *)a1 + 2);
      goto LABEL_13;
    case 3:
      v5 = (void *)*((_QWORD *)a1 + 9);
      goto LABEL_13;
    case 5:
      v5 = (void *)*((_QWORD *)a1 + 11);
      goto LABEL_13;
    case 6:
      v5 = (void *)*((_QWORD *)a1 + 8);
      goto LABEL_13;
    case 7:
      v5 = (void *)*((_QWORD *)a1 + 13);
      goto LABEL_13;
    case 9:
      v5 = (void *)*((_QWORD *)a1 + 20);
LABEL_13:
      result = v5;
      break;
    default:
      v6 = *re::graphicsLogObjects(a1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v8[0] = 67109120;
        v8[1] = a2;
        _os_log_impl(&dword_224FE9000, v6, OS_LOG_TYPE_DEFAULT, "Texture type %u not supported", (uint8_t *)v8, 8u);
      }
      result = 0;
      break;
  }
  *a3 = result;
  return result;
}

void re::TextureManager::dequeueMipmapGeneration(os_unfair_lock_s *this@<X0>, uint64_t a2@<X8>)
{
  re::TextureManager *v2;
  os_unfair_lock_s *v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  uint64_t v8;

  v2 = (re::TextureManager *)this;
  v4 = this + 96;
  os_unfair_lock_lock(this + 96);
  v2 = (re::TextureManager *)((char *)v2 + 392);
  v5 = 0;
  *(_QWORD *)a2 = 0;
  v6 = 0u;
  *(_OWORD *)(a2 + 8) = 0u;
  v8 = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 24) = 1;
  v7 = 1;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(a2, (uint64_t)v2);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v2, (uint64_t)&v5);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)&v5);
  os_unfair_lock_unlock(v4);
}

void re::TextureManager::queueBlurGeneration(os_unfair_lock_s *a1, void **a2, void **a3, char a4)
{
  os_unfair_lock_s *v8;
  id v9;
  id v10;
  char v11;

  v8 = a1 + 108;
  os_unfair_lock_lock(a1 + 108);
  v9 = 0;
  v10 = 0;
  v11 = 3;
  NS::SharedPtr<MTL::Texture>::operator=(&v9, a2);
  NS::SharedPtr<MTL::Texture>::operator=(&v10, a3);
  v11 = a4;
  re::DynamicArray<re::RenderGraphBlurGenerationData>::add((_anonymous_namespace_ *)&a1[110], (uint64_t)&v9);
  os_unfair_lock_unlock(v8);
  if (v10)
  {

    v10 = 0;
  }
  if (v9)

}

id re::DynamicArray<re::RenderGraphBlurGenerationData>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  id result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::RenderGraphBlurGenerationData>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 24 * v4;
  *(_QWORD *)v5 = *(id *)a2;
  result = *(id *)(a2 + 8);
  *(_QWORD *)(v5 + 8) = result;
  *(_BYTE *)(v5 + 16) = *(_BYTE *)(a2 + 16);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::TextureManager::dequeueBlurGeneration(os_unfair_lock_s *this@<X0>, uint64_t a2@<X8>)
{
  re::TextureManager *v2;
  os_unfair_lock_s *v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  uint64_t v8;

  v2 = (re::TextureManager *)this;
  v4 = this + 108;
  os_unfair_lock_lock(this + 108);
  v2 = (re::TextureManager *)((char *)v2 + 440);
  v5 = 0;
  *(_QWORD *)a2 = 0;
  v6 = 0u;
  *(_OWORD *)(a2 + 8) = 0u;
  v8 = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 24) = 1;
  v7 = 1;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(a2, (uint64_t)v2);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v2, (uint64_t)&v5);
  re::DynamicArray<re::VirtualEnvironmentProbeSource>::deinit((uint64_t)&v5);
  os_unfair_lock_unlock(v4);
}

void re::TextureManager::registerTexture(os_unfair_lock_s *a1@<X0>, void **a2@<X1>, os_unfair_lock_s **a3@<X8>)
{
  id v3;

  v3 = 0;
  re::TextureManager::registerTextureAndHeap(a1, a2, &v3, a3);
  if (v3)

}

void re::TextureManager::registerTextureAndHeap(os_unfair_lock_s *a1@<X0>, void **a2@<X1>, void **a3@<X2>, os_unfair_lock_s **a4@<X8>)
{
  os_unfair_lock_s *v8;
  uint64_t v9;
  int v10;
  void **v11;

  v8 = a1 + 78;
  os_unfair_lock_lock(a1 + 78);
  v10 = re::DataArray<re::Texture>::create<>((uint64_t)&a1[80], v9);
  v11 = (void **)re::DataArray<re::Texture>::get((uint64_t)&a1[80], v10);
  NS::SharedPtr<MTL::Texture>::operator=(v11 + 2, a2);
  NS::SharedPtr<MTL::Texture>::operator=(v11 + 1, a2);
  NS::SharedPtr<MTL::Texture>::operator=(v11 + 4, a3);
  NS::SharedPtr<MTL::Texture>::operator=(v11 + 3, a3);
  *a4 = a1;
  a4[1] = (os_unfair_lock_s *)v11;
  os_unfair_lock_unlock(v8);
}

unint64_t re::DataArray<re::Texture>::create<>(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  __int128 v14;

  v3 = *(_DWORD *)(a1 + 56);
  if ((v3 + 1) >> 24)
    v4 = 1;
  else
    v4 = v3 + 1;
  *(_DWORD *)(a1 + 56) = v4;
  v5 = *(unsigned __int16 *)(a1 + 52);
  v6 = *(unsigned __int16 *)(a1 + 54);
  if (v5 == 0xFFFF && (_DWORD)v6 == 0xFFFF)
  {
    if (*(_DWORD *)(a1 + 48) >= *(_DWORD *)(a1 + 44))
      re::DataArray<re::Texture>::allocBlock((_QWORD *)a1);
    v10 = *(_QWORD *)(a1 + 16);
    v6 = (unsigned __int16)(v10 - 1);
    if (v10)
    {
      v5 = *(unsigned int *)(a1 + 48);
      if (v5 < 0x10000)
      {
        v11 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v6);
        *(_DWORD *)(a1 + 48) = v5 + 1;
        *(_DWORD *)(v11[1] + 4 * v5) = *(_DWORD *)(a1 + 56);
        v9 = *v11 + 88 * v5;
        goto LABEL_15;
      }
LABEL_18:
      re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v5, v13, v14);
      _os_crash();
      __break(1u);
    }
LABEL_17:
    v13 = 0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v14) = 136315906;
    *(_QWORD *)((char *)&v14 + 4) = "operator[]";
    WORD6(v14) = 1024;
    HIWORD(v14) = 789;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_18;
  }
  if (*(_QWORD *)(a1 + 16) <= v6)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  v8 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v6);
  *(_DWORD *)(v8[1] + 4 * v5) = v4;
  v9 = *v8 + 88 * v5;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)v9;
LABEL_15:
  ++*(_DWORD *)(a1 + 40);
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_DWORD *)v9 = 1;
  *(_OWORD *)(v9 + 8) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_QWORD *)(v9 + 72) = 0x7FFFFFFF00000000;
  *(_QWORD *)(v9 + 80) = 0;
  return (v6 << 16) | ((unint64_t)(*(_DWORD *)(a1 + 56) & 0xFFFFFF) << 32) | v5;
}

uint64_t re::DataArray<re::Texture>::get(uint64_t a1, int a2)
{
  if (*(_QWORD *)(a1 + 16) <= (unint64_t)HIWORD(a2))
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * HIWORD(a2)) + 88 * (unsigned __int16)a2;
}

void re::TextureManager::synchronizeTextures(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  char *v3;
  void **v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;

  v2 = this + 78;
  os_unfair_lock_lock(this + 78);
  v3 = (char *)&this[80];
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v13, (uint64_t)v3, 0);
  if (v3 != (char *)v13 || WORD4(v13) != 0xFFFFLL || (DWORD2(v13) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      if (atomic_load((unsigned int *)re::DataArray<re::Texture>::DataArrayIterator<re::Texture,re::Texture&>::operator*((unsigned __int16 *)&v13)))
      {
        v7 = (void **)(re::DataArray<re::Texture>::DataArrayIterator<re::Texture,re::Texture&>::operator*((unsigned __int16 *)&v13)
                     + 16);
        v8 = re::DataArray<re::Texture>::DataArrayIterator<re::Texture,re::Texture&>::operator*((unsigned __int16 *)&v13);
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v8 + 8), v7);
        v9 = (void **)(re::DataArray<re::Texture>::DataArrayIterator<re::Texture,re::Texture&>::operator*((unsigned __int16 *)&v13)
                     + 32);
        v10 = re::DataArray<re::Texture>::DataArrayIterator<re::Texture,re::Texture&>::operator*((unsigned __int16 *)&v13);
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v10 + 24), v9);
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v13);
      }
      else
      {
        v12 = v13;
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v13);
        v11 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v12);
        re::DataArray<re::Texture>::destroy((uint64_t)v3, v11);
      }
    }
    while ((char *)v13 != v3 || WORD4(v13) != 0xFFFF || WORD5(v13) != 0xFFFF);
  }
  os_unfair_lock_unlock(v2);
}

uint64_t re::DataArray<re::Texture>::DataArrayIterator<re::Texture,re::Texture&>::operator*(unsigned __int16 *a1)
{
  unint64_t v1;

  v1 = a1[5];
  if (*(_QWORD *)(*(_QWORD *)a1 + 16) <= v1)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 16 * v1) + 88 * a1[4];
}

void re::DataArray<re::Texture>::destroy(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  void *v27;

  v2 = WORD1(a2);
  v3 = *(_QWORD *)(a1 + 16);
  if (WORD1(a2) < v3)
  {
    v4 = a2;
    v6 = (unsigned __int16)(v3 - 1) == WORD1(a2) ? *(_DWORD *)(a1 + 48) : *(_DWORD *)(a1 + 44);
    if ((unsigned __int16)a2 < v6)
    {
      v7 = (unsigned __int16)a2;
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(_DWORD *)(*(_QWORD *)(v8 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2);
      if (v9 && v9 == (HIDWORD(a2) & 0xFFFFFF))
      {
        v11 = *(_QWORD *)(v8 + 16 * WORD1(a2));
        if (v11)
        {
          v12 = v11 + 88 * (unsigned __int16)a2;
          re::HashSetBase<re::Texture::TrackedBlock,re::Texture::TrackedBlock,re::internal::ValueAsKey<re::Texture::TrackedBlock>,re::Texture::TrackedBlockHash,re::EqualTo<re::Texture::TrackedBlock>,true,false>::deinit((uint64_t *)(v12 + 40));
          v15 = *(void **)(v12 + 32);
          v14 = (_QWORD *)(v12 + 32);
          v13 = v15;
          if (v15)
          {

            *v14 = 0;
          }
          v16 = v11 + 88 * v7;
          v19 = *(void **)(v16 + 24);
          v18 = (_QWORD *)(v16 + 24);
          v17 = v19;
          if (v19)
          {

            *v18 = 0;
          }
          v20 = v11 + 88 * v7;
          v23 = *(void **)(v20 + 16);
          v22 = (_QWORD *)(v20 + 16);
          v21 = v23;
          if (v23)
          {

            *v22 = 0;
          }
          v24 = v11 + 88 * v7;
          v27 = *(void **)(v24 + 8);
          v26 = (_QWORD *)(v24 + 8);
          v25 = v27;
          if (v27)
          {

            *v26 = 0;
          }
          if (*(_QWORD *)(a1 + 16) <= v2)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v2 + 8) + 4 * v7) = 0;
          *(_DWORD *)(v11 + 88 * v7) = *(_DWORD *)(a1 + 52);
          *(_DWORD *)(a1 + 52) = v4;
          --*(_DWORD *)(a1 + 40);
        }
      }
    }
  }
}

_anonymous_namespace_ *re::DataArray<re::Texture>::allocBlock(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _anonymous_namespace_ *result;
  uint64_t v8;
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;

  v3 = 88 * *((unsigned int *)a1 + 11);
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v3, 0);
  if (!v4)
  {
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v3, *(_QWORD *)(*a1 + 8));
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  v6 = v4;
  v1 = 4 * *((unsigned int *)a1 + 11);
  result = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v1, 0);
  if (!result)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v1, *(_QWORD *)(*a1 + 8));
    result = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
    return result;
  }
  v9 = result;
  v11 = a1[1];
  v10 = a1[2];
  if (v10 >= v11)
  {
    v12 = v10 + 1;
    if (v11 < v10 + 1)
    {
      if (*a1)
      {
        v13 = 2 * v11;
        if (!v11)
          v13 = 8;
        if (v13 <= v12)
          v14 = v12;
        else
          v14 = v13;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v14);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v12);
        ++*((_DWORD *)a1 + 6);
      }
    }
    v10 = a1[2];
  }
  v15 = (uint64_t *)(a1[4] + 16 * v10);
  *v15 = v6;
  v15[1] = (uint64_t)v9;
  a1[2] = v10 + 1;
  ++*((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 12) = 0;
  return result;
}

_QWORD *re::DynamicArray<re::RenderGraphBlurGenerationData>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RenderGraphBlurGenerationData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderGraphBlurGenerationData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::RenderGraphBlurGenerationData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RenderGraphBlurGenerationData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          v2 = 24 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_18;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 24 * v9;
        v11 = v7;
        do
        {
          *v11 = *(_QWORD *)v8;
          *(_QWORD *)v8 = 0;
          v11[1] = *(_QWORD *)(v8 + 8);
          *(_QWORD *)(v8 + 8) = 0;
          *((_BYTE *)v11 + 16) = *(_BYTE *)(v8 + 16);
          if (*(_QWORD *)v8)
          {

            *(_QWORD *)v8 = 0;
          }
          v8 += 24;
          v11 += 3;
          v10 -= 24;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t re::parseFontLayout@<X0>(re::FileStreamReader *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v6;
  re::DynamicString *v7;
  const char *v8;
  float v9;
  re::DynamicString *v10;
  const char *v11;
  re::DynamicString *v12;
  float v13;
  uint64_t i;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  float v21;
  size_t v22;
  uint64_t v23;
  uint64_t j;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  const char *v32;
  float v33;
  size_t v34;
  uint64_t v35;
  _anonymous_namespace_ *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  float v43;
  size_t v44;
  char *v45;
  __int128 v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v56;
  re::FileStreamReader *v57;
  uint64_t v58;
  _anonymous_namespace_ *v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  const char *v68;
  uint64_t v69;
  char v70[8];
  _BYTE v71[56];

  re::FileStreamReader::open(a1, (uint64_t)v70);
  if (v70[0])
  {
    *((_QWORD *)&v67 + 1) = 0;
    v68 = 0;
    v69 = 0;
    re::DynamicString::setCapacity(&v67, 0);
    if (re::readLineFromStream((re *)v71, (re::StreamReader *)&v67, v7))
    {
      if ((BYTE8(v67) & 1) != 0)
        v8 = v68;
      else
        v8 = (char *)&v67 + 9;
      v9 = atof(v8);
      *(float *)a2 = v9;
      if (re::readLineFromStream((re *)v71, (re::StreamReader *)&v67, v10))
      {
        v57 = a1;
        v58 = a3;
        if ((BYTE8(v67) & 1) != 0)
          v11 = v68;
        else
          v11 = (char *)&v67 + 9;
        v13 = atof(v11);
        *(float *)(a2 + 4) = v13;
        if (*(_QWORD *)(a2 + 16) <= 0x5EuLL)
          re::DynamicArray<re::Vector4<float>>::setCapacity((_QWORD *)(a2 + 8), 0x5FuLL);
        for (i = 0; i != 95; ++i)
        {
          if (!re::readLineFromStream((re *)v71, (re::StreamReader *)&v67, v12))
          {
            re::DynamicString::format((re::DynamicString *)"[%s] Failed to parse font layout %luth glyphBound.", (re::DynamicString *)&v65, v57, i);
            goto LABEL_97;
          }
          v15 = 0;
          v16 = 0;
          v64 = 0uLL;
          do
          {
            v17 = re::DynamicString::find((re::DynamicString *)&v67, " ", 1, v16, (uint64_t)&v62);
            v65 = 0u;
            v66 = 0u;
            re::DynamicString::setCapacity(&v65, 0);
            if ((_BYTE)v62)
            {
              v18 = v63;
              re::DynamicString::substr((re::DynamicString *)&v67, v16, v63 - v16, (re::DynamicString *)&v60);
              re::DynamicString::operator=((re::DynamicString *)&v65, (re::DynamicString *)&v60);
              if (v60 && (v61 & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v60 + 40))();
              v16 = v18 + 1;
            }
            else
            {
              if ((BYTE8(v67) & 1) != 0)
                v22 = *((_QWORD *)&v67 + 1) >> 1;
              else
                v22 = BYTE8(v67) >> 1;
              re::DynamicString::substr((re::DynamicString *)&v67, v16, v22, (re::DynamicString *)&v60);
              re::DynamicString::operator=((re::DynamicString *)&v65, (re::DynamicString *)&v60);
              if (v60 && (v61 & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v60 + 40))();
            }
            v19 = BYTE8(v65) & 1;
            if ((BYTE8(v65) & 1) != 0)
              v20 = (const char *)v66;
            else
              v20 = (char *)&v65 + 9;
            v21 = atof(v20);
            v64.n128_f32[v15] = v21;
            if ((_QWORD)v65 && v19)
              (*(void (**)(void))(*(_QWORD *)v65 + 40))();
            ++v15;
          }
          while (v15 != 4);
          re::DynamicArray<re::Vector4<float>>::add((_anonymous_namespace_ *)(a2 + 8), &v64);
        }
        v59 = (_anonymous_namespace_ *)(a2 + 48);
        if (*(_QWORD *)(a2 + 56) <= 0x2340uLL)
          re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v59, 0x2341uLL);
        v23 = 0;
        while (2)
        {
          v56 = v23;
          for (j = 0; j != 95; ++j)
          {
            if (!re::readLineFromStream((re *)v71, (re::StreamReader *)&v67, v12))
            {
              re::DynamicString::format((re::DynamicString *)"[%s] Failed to parse font layout glyph offset for the pair [%lu, %lu].", (re::DynamicString *)&v65, v57, v56, j);
              goto LABEL_97;
            }
            v25 = 0;
            v26 = 0;
            v62 = 0;
            v27 = 1;
            do
            {
              v28 = v27;
              v29 = re::DynamicString::find((re::DynamicString *)&v67, " ", 1, v26, (uint64_t)&v64);
              v65 = 0u;
              v66 = 0u;
              re::DynamicString::setCapacity(&v65, 0);
              if (v64.n128_u8[0])
              {
                v30 = v64.n128_u64[1];
                re::DynamicString::substr((re::DynamicString *)&v67, v26, v64.n128_u64[1] - v26, (re::DynamicString *)&v60);
                re::DynamicString::operator=((re::DynamicString *)&v65, (re::DynamicString *)&v60);
                if (v60 && (v61 & 1) != 0)
                  (*(void (**)(void))(*(_QWORD *)v60 + 40))();
                v26 = v30 + 1;
              }
              else
              {
                if ((BYTE8(v67) & 1) != 0)
                  v34 = *((_QWORD *)&v67 + 1) >> 1;
                else
                  v34 = BYTE8(v67) >> 1;
                re::DynamicString::substr((re::DynamicString *)&v67, v26, v34, (re::DynamicString *)&v60);
                re::DynamicString::operator=((re::DynamicString *)&v65, (re::DynamicString *)&v60);
                if (v60 && (v61 & 1) != 0)
                  (*(void (**)(void))(*(_QWORD *)v60 + 40))();
              }
              v31 = BYTE8(v65) & 1;
              if ((BYTE8(v65) & 1) != 0)
                v32 = (const char *)v66;
              else
                v32 = (char *)&v65 + 9;
              v33 = atof(v32);
              *((float *)&v62 + v25) = v33;
              if ((_QWORD)v65 && v31)
                (*(void (**)(void))(*(_QWORD *)v65 + 40))();
              v27 = 0;
              v25 = 1;
            }
            while ((v28 & 1) != 0);
            re::DynamicArray<unsigned long>::add(v59, &v62);
          }
          v23 = v56 + 1;
          if (v56 != 94)
            continue;
          break;
        }
        v35 = 0;
        v36 = (_anonymous_namespace_ *)(a2 + 88);
        while (re::readLineFromStream((re *)v71, (re::StreamReader *)&v67, v12))
        {
          v37 = 0;
          v38 = 0;
          v64 = 0uLL;
          do
          {
            v39 = re::DynamicString::find((re::DynamicString *)&v67, " ", 1, v38, (uint64_t)&v62);
            v65 = 0u;
            v66 = 0u;
            re::DynamicString::setCapacity(&v65, 0);
            if ((_BYTE)v62)
            {
              v40 = v63;
              re::DynamicString::substr((re::DynamicString *)&v67, v38, v63 - v38, (re::DynamicString *)&v60);
              re::DynamicString::operator=((re::DynamicString *)&v65, (re::DynamicString *)&v60);
              if (v60 && (v61 & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v60 + 40))();
              v38 = v40 + 1;
            }
            else
            {
              if ((BYTE8(v67) & 1) != 0)
                v44 = *((_QWORD *)&v67 + 1) >> 1;
              else
                v44 = BYTE8(v67) >> 1;
              re::DynamicString::substr((re::DynamicString *)&v67, v38, v44, (re::DynamicString *)&v60);
              re::DynamicString::operator=((re::DynamicString *)&v65, (re::DynamicString *)&v60);
              if (v60 && (v61 & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v60 + 40))();
            }
            v41 = BYTE8(v65) & 1;
            if ((BYTE8(v65) & 1) != 0)
              v42 = (const char *)v66;
            else
              v42 = (char *)&v65 + 9;
            v43 = atof(v42);
            v64.n128_f32[v37] = v43;
            if ((_QWORD)v65 && v41)
              (*(void (**)(void))(*(_QWORD *)v65 + 40))();
            ++v37;
          }
          while (v37 != 4);
          re::DynamicArray<re::Vector4<float>>::add(v36, &v64);
          if (++v35 == 95)
          {
            *(_BYTE *)v58 = 1;
            goto LABEL_98;
          }
        }
        re::DynamicString::format((re::DynamicString *)"[%s] Failed to parse font layout %lu glyphTexcoordBounds.", (re::DynamicString *)&v65, v57, v35);
LABEL_97:
        v53 = v65;
        v54 = v66;
        *(_BYTE *)v58 = 0;
        *(_OWORD *)(v58 + 8) = v53;
        *(_OWORD *)(v58 + 24) = v54;
LABEL_98:
        v49 = v67;
        if ((_QWORD)v67 && (BYTE8(v67) & 1) != 0)
        {
          v50 = v68;
          goto LABEL_101;
        }
        return re::Result<re::FileStreamReader,re::DetailedError>::~Result((uint64_t)v70);
      }
      re::DynamicString::format((re::DynamicString *)"[%s] Failed to parse font layout belowBaselineHeight.", (re::DynamicString *)&v65, a1);
    }
    else
    {
      re::DynamicString::format((re::DynamicString *)"[%s] Failed to parse font layout lineHeight.", (re::DynamicString *)&v65, a1);
    }
    v51 = v65;
    v52 = v66;
    *(_BYTE *)a3 = 0;
    *(_OWORD *)(a3 + 8) = v51;
    *(_OWORD *)(a3 + 24) = v52;
    goto LABEL_98;
  }
  re::formattedErrorMessage<re::DetailedError>((uint64_t)v71, (re::DynamicString *)&v65);
  if ((BYTE8(v65) & 1) != 0)
    v45 = (char *)v66;
  else
    v45 = (char *)&v65 + 9;
  re::DynamicString::format((re::DynamicString *)"[%s] Failed to open font layout file. Error: %s", (re::DynamicString *)&v67, a1, v45);
  v46 = v67;
  v47 = v68;
  v48 = v69;
  *(_BYTE *)a3 = 0;
  *(_OWORD *)(a3 + 8) = v46;
  *(_QWORD *)(a3 + 24) = v47;
  *(_QWORD *)(a3 + 32) = v48;
  v49 = v65;
  if ((_QWORD)v65 && (BYTE8(v65) & 1) != 0)
  {
    v50 = (const char *)v66;
LABEL_101:
    (*(void (**)(uint64_t, const char *))(*(_QWORD *)v49 + 40))(v49, v50);
  }
  return re::Result<re::FileStreamReader,re::DetailedError>::~Result((uint64_t)v70);
}

BOOL re::readLineFromStream(re *this, re::StreamReader *a2, re::DynamicString *a3)
{
  uint64_t v5;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  char v11;
  char __src;

  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    *((_QWORD *)a2 + 1) = 1;
    v6 = (_BYTE *)*((_QWORD *)a2 + 2);
  }
  else
  {
    *((_BYTE *)a2 + 8) = v5 & 1;
    v6 = (char *)a2 + 9;
  }
  v11 = 0;
  *v6 = 0;
  while ((*(uint64_t (**)(re *, char *, uint64_t))(*(_QWORD *)this + 16))(this, &v11, 1) == 1 && v11 != 10)
  {
    __src = v11;
    re::DynamicString::append(a2, &__src, 1uLL);
  }
  v8 = *((_QWORD *)a2 + 1);
  if ((v8 & 1) != 0)
    v9 = v8 >> 1;
  else
    v9 = v8 >> 1;
  return v9 != 0;
}

uint64_t *re::graphicsLogObjects(re *this)
{
  unsigned __int8 v1;

  {
    re::graphicsLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "Graphics");
  }
  return &re::graphicsLogObjects(void)::logObjects;
}

uint64_t re::GraphicsLoggingUtilities::toStr@<X0>(float *a1@<X0>, re::DynamicString *a2@<X8>)
{
  return re::DynamicString::format((re::DynamicString *)"row0: %g %g %g %g row1: %g %g %g %g row2: %g %g %g %g row3: %g %g %g %g", a2, *a1, a1[4], a1[8], a1[12], a1[1], a1[5], a1[9], a1[13], a1[2], a1[6], a1[10], a1[14], a1[3], a1[7], a1[11], a1[15]);
}

uint64_t re::getOrCreateRenderPipelineState(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  uint64_t v20;
  id *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  unint64_t LibraryHash;
  uint64_t v26;
  id *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  int v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  unint64_t v44;
  unint64_t v45;
  double v46;
  int v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  re::DynamicString *v61;
  uint64_t v62;
  unsigned __int16 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unsigned __int16 *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unsigned __int16 *v78;
  uint64_t v79;
  uint64_t v80;
  re::DynamicString *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unsigned __int16 *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unsigned __int16 *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  re *v103;
  re *v104;
  NSObject *v105;
  uint64_t v106;
  uint64_t v107;
  unsigned __int16 *v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  uint64_t v113;
  int v114;
  unsigned __int16 *v115;
  uint64_t v116;
  int v117;
  int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  unsigned __int16 *v123;
  uint64_t v124;
  NSObject *v125;
  int v126;
  int v127;
  int v128;
  int v129;
  uint64_t v130;
  int v131;
  unsigned __int16 *v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  unsigned __int16 *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  unsigned __int16 *v140;
  uint64_t v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  int v151;
  int v152;
  uint64_t v154;
  int v155;
  unsigned __int16 *v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  unsigned __int16 *v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  unsigned __int16 *v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  unsigned __int16 *v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  unsigned __int16 *v172;
  uint64_t v173;
  re::AppleBuild *v174;
  const char *v175;
  char *v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  int v184;
  int v185;
  int v186;
  id v187;
  id v188;
  id v189;
  id v190;
  id v191;
  id v192;
  id v193;
  _BYTE v194[12];
  __int16 v195;
  _BYTE v196[10];
  _BYTE v197[6];
  __int16 v198;
  int v199;
  __int16 v200;
  int v201;
  __int16 v202;
  int v203;
  __int16 v204;
  int v205;
  __int16 v206;
  int v207;
  __int16 v208;
  int v209;
  __int16 v210;
  int v211;
  __int16 v212;
  int v213;
  __int16 v214;
  int v215;
  __int16 v216;
  int v217;
  __int16 v218;
  int v219;
  __int16 v220;
  int v221;
  __int16 v222;
  int v223;
  __int16 v224;
  int v225;
  __int16 v226;
  int v227;
  __int16 v228;
  int v229;
  uint64_t v230;

  v230 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)a2)
    v4 = re::Hash<re::DynamicString>::operator()((uint64_t)v194, a2 + 8);
  else
    v4 = 0;
  if (*(_BYTE *)(a2 + 40))
    v5 = re::Hash<re::DynamicString>::operator()((uint64_t)v194, a2 + 48);
  else
    v5 = 0;
  v6 = re::TechniqueDefinitionBuilder::hashFunctionConstants(*(_QWORD *)(a2 + 176), *(_QWORD *)(a2 + 160));
  v7 = re::Hash<re::DynamicString>::operator()((uint64_t)v194, a2 + 80);
  v8 = re::Hash<re::DynamicString>::operator()((uint64_t)v194, a2 + 112);
  v9 = 0;
  if (*(_BYTE *)(a2 + 192))
    v10 = *(_QWORD *)(a2 + 200);
  else
    v10 = 0;
  v11 = ((v10 << 6)
       + (v10 >> 2)
       - 0x61C8864680B583E9
       + (((*(_QWORD *)(a2 + 184) << 6)
         + (*(_QWORD *)(a2 + 184) >> 2)
         - 0x61C8864680B583E9
         + (((v8 << 6)
           + (v8 >> 2)
           - 0x61C8864680B583E9
           + (((v7 << 6)
             + (v7 >> 2)
             - 0x61C8864680B583E9
             + (((((((v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4) + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5)
               + (v6 << 6)
               + (v6 >> 2)
               - 0x61C8864680B583E9) ^ v6)) ^ v7)) ^ v8)) ^ *(_QWORD *)(a2 + 184))) ^ v10;
  do
  {
    if (*(_BYTE *)(a2 + v9 + 208))
      v12 = *(_DWORD *)(a2 + v9 + 212);
    else
      v12 = 0;
    v11 = (v11 - 0x61C8864680B583E9 + ((uint64_t)v12 << 6) + ((unint64_t)v12 >> 2)) ^ v12;
    v9 += 8;
  }
  while (v9 != 64);
  if (*(_BYTE *)(a2 + 272))
    v13 = *(int *)(a2 + 276);
  else
    v13 = 0;
  if (*(_BYTE *)(a2 + 280))
    v14 = *(int *)(a2 + 284);
  else
    v14 = 0;
  v15 = ((v14 << 6) - 0x61C8864680B583E9 + (v14 >> 2) + ((v11 - 0x61C8864680B583E9 + (v13 << 6) + (v13 >> 2)) ^ v13)) ^ v14;
  v16 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)v16)
  {
    v17 = *(unsigned int *)(*(_QWORD *)(v16 + 8) + 4 * (v15 % *(unsigned int *)(v16 + 24)));
    if ((_DWORD)v17 != 0x7FFFFFFF)
    {
      v28 = *(_QWORD *)(v16 + 16);
      if (*(_QWORD *)(v28 + 24 * v17 + 8) == v15)
        return v28 + 24 * v17 + 16;
      while (1)
      {
        LODWORD(v17) = *(_DWORD *)(v28 + 24 * v17) & 0x7FFFFFFF;
        if ((_DWORD)v17 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v28 + 24 * v17 + 8) == v15)
          return v28 + 24 * v17 + 16;
      }
    }
  }
  if (!*(_BYTE *)(a2 + 288))
  {
    v18 = atomic_load((unsigned __int8 *)&qword_25411A040);
    if ((v18 & 1) == 0)
    {
      v174 = (re::AppleBuild *)__cxa_guard_acquire(&qword_25411A040);
      if ((_DWORD)v174)
      {
        _MergedGlobals_386 = *re::AppleBuild::get(v174) == 1;
        __cxa_guard_release(&qword_25411A040);
      }
    }
    v19 = atomic_load((unsigned __int8 *)&qword_25411A048);
    if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_25411A048))
    {
      re::Defaults::BOOLValue((re::Defaults *)"shouldCrashOnRuntimeCompilation", v175, v194);
      if (v194[0])
        v176 = &v194[1];
      else
        v176 = &_MergedGlobals_386;
      byte_25411A039 = *v176;
      __cxa_guard_release(&qword_25411A048);
    }
  }
  v20 = mach_absolute_time();
  v21 = *(id **)(a1 + 56);
  if (*(_BYTE *)a2)
  {
    if ((*(_QWORD *)(a2 + 16) & 1) != 0)
      v22 = *(const char **)(a2 + 24);
    else
      v22 = (const char *)(a2 + 17);
    *(_QWORD *)v194 = re::ShaderManager::getLibraryHash(*(re::ShaderManager **)(a1 + 56), v22);
    v23 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)(v21 + 33), (uint64_t *)v194);
    if ((*(_QWORD *)(a2 + 16) & 1) != 0)
      v24 = *(const char **)(a2 + 24);
    else
      v24 = (const char *)(a2 + 17);
    LibraryHash = re::ShaderManager::getLibraryHash(*(re::ShaderManager **)(a1 + 56), v24);
    if (!v23)
      return 0;
    v26 = LibraryHash;
    v27 = (id *)(v23 + 8);
    v21 = *(id **)(a1 + 56);
  }
  else
  {
    v27 = v21 + 31;
    v26 = (uint64_t)v21[32];
  }
  re::ShaderManager::makeRenderPipelineDescriptor((re::ShaderManager *)v21, &v193);
  if (*(_BYTE *)(a2 + 40))
  {
    if ((*(_QWORD *)(a2 + 56) & 1) != 0)
      v30 = *(_QWORD *)(a2 + 64);
    else
      v30 = a2 + 57;
    objc_msgSend(v193, sel_setLabel_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, v30, 4));
  }
  v192 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD5A0], sel_alloc), sel_init);
  v31 = *(_QWORD *)(a2 + 160);
  if (v31)
  {
    v32 = v31 << 6;
    v33 = (unsigned __int16 *)(*(_QWORD *)(a2 + 176) + 32);
    do
    {
      objc_msgSend(v192, sel_setConstantValue_type_atIndex_, *((_QWORD *)v33 + 3), *v33, v33[1]);
      v33 += 32;
      v32 -= 64;
    }
    while (v32);
  }
  if ((*(_QWORD *)(a2 + 88) & 1) != 0)
    v34 = *(_QWORD *)(a2 + 96);
  else
    v34 = a2 + 89;
  re::ShaderManager::makeFunctionDescriptor(*(_QWORD *)(a1 + 56), v34, &v192, v27, v26, &v191);
  if ((*(_QWORD *)(a2 + 120) & 1) != 0)
    v35 = *(_QWORD *)(a2 + 128);
  else
    v35 = a2 + 121;
  re::ShaderManager::makeFunctionDescriptor(*(_QWORD *)(a1 + 56), v35, &v192, v27, v26, &v190);
  re::mtl::Library::makeFunctionWithDescriptor(v27, v191, &v189);
  if (v189)
    objc_msgSend(v193, sel_setVertexFunction_);
  re::mtl::Library::makeFunctionWithDescriptor(v27, v190, &v188);
  if (v188)
    objc_msgSend(v193, sel_setFragmentFunction_);
  objc_msgSend(v193, sel_setRasterSampleCount_, *(_QWORD *)(a2 + 184));
  if (*(_BYTE *)(a2 + 192))
    objc_msgSend(v193, sel_setMaxVertexAmplificationCount_, *(_QWORD *)(a2 + 200));
  v36 = 0;
  v37 = (int *)(a2 + 212);
  do
  {
    if (*((_BYTE *)v37 - 4) && *v37)
      objc_msgSend(objc_msgSend(objc_msgSend(v193, sel_colorAttachments), sel_objectAtIndexedSubscript_, v36), sel_setPixelFormat_, *v37);
    ++v36;
    v37 += 2;
  }
  while (v36 != 8);
  v38 = *(_DWORD *)(a2 + 276);
  if (*(_BYTE *)(a2 + 272))
    v39 = v38 == 0;
  else
    v39 = 1;
  if (!v39)
    objc_msgSend(v193, sel_setDepthAttachmentPixelFormat_, v38);
  if (*(_BYTE *)(a2 + 280))
  {
    v40 = *(_DWORD *)(a2 + 284);
    if (v40)
      objc_msgSend(v193, sel_setStencilAttachmentPixelFormat_, v40);
  }
  objc_msgSend(v193, sel_setInputPrimitiveTopology_, 3);
  v187 = 0;
  re::mtl::Device::makeRenderPipelineState((id *)(a1 + 184), (uint64_t)v193, v194);
  NS::SharedPtr<MTL::Texture>::operator=(&v187, (void **)v194);
  if (*(_QWORD *)v194)

  v41 = mach_absolute_time();
  v42 = v41;
  v43 = *(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale;
  if (*(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale < 0.0)
  {
    v41 = mach_timebase_info((mach_timebase_info_t)v194);
    if ((_DWORD)v41)
    {
      v46 = NAN;
      goto LABEL_81;
    }
    LODWORD(v45) = *(_DWORD *)&v194[4];
    LODWORD(v44) = *(_DWORD *)v194;
    v43 = (double)v44 / (double)v45;
    re::convertMachTimeToNanoSecs(unsigned long long)::tmscale = *(_QWORD *)&v43;
  }
  v46 = v43 * (double)(v42 - v20);
LABEL_81:
  v47 = (int)(v46 / 1000000.0);
  v48 = *re::graphicsLogObjects((re *)v41);
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
  {
    v49 = a2 + 89;
    if ((*(_QWORD *)(a2 + 88) & 1) != 0)
      v49 = *(_QWORD *)(a2 + 96);
    if ((*(_QWORD *)(a2 + 120) & 1) != 0)
      v50 = *(_QWORD *)(a2 + 128);
    else
      v50 = a2 + 121;
    *(_DWORD *)v194 = 136446722;
    *(_QWORD *)&v194[4] = v49;
    v195 = 2082;
    *(_QWORD *)v196 = v50;
    *(_WORD *)&v196[8] = 1024;
    *(_DWORD *)v197 = v47;
    _os_log_impl(&dword_224FE9000, v48, OS_LOG_TYPE_DEFAULT, "PSO compilation completed for render pipeline %{public}s/%{public}s in %d", v194, 0x1Cu);
  }
  if (*(_QWORD *)v16)
  {
    v51 = v15 % *(unsigned int *)(v16 + 24);
    v52 = *(unsigned int *)(*(_QWORD *)(v16 + 8) + 4 * v51);
    if ((_DWORD)v52 != 0x7FFFFFFF)
    {
      v53 = *(_QWORD *)(v16 + 16);
      if (*(_QWORD *)(v53 + 24 * v52 + 8) == v15)
      {
LABEL_93:
        v54 = v53 + 24 * v52;
        goto LABEL_101;
      }
      while (1)
      {
        LODWORD(v52) = *(_DWORD *)(v53 + 24 * v52) & 0x7FFFFFFF;
        if ((_DWORD)v52 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v53 + 24 * v52 + 8) == v15)
          goto LABEL_93;
      }
    }
  }
  else
  {
    LODWORD(v51) = 0;
  }
  v55 = *(unsigned int *)(v16 + 36);
  if ((_DWORD)v55 == 0x7FFFFFFF)
  {
    v55 = *(unsigned int *)(v16 + 32);
    v56 = v55;
    if ((_DWORD)v55 == *(_DWORD *)(v16 + 24))
    {
      re::HashTable<unsigned long,re::CachedTileRenderPipelineState,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v16, 2 * *(_DWORD *)(v16 + 28));
      LODWORD(v51) = v15 % *(unsigned int *)(v16 + 24);
      v56 = *(_DWORD *)(v16 + 32);
    }
    *(_DWORD *)(v16 + 32) = v56 + 1;
    v57 = *(_QWORD *)(v16 + 16);
    v58 = *(_DWORD *)(v57 + 24 * v55);
  }
  else
  {
    v57 = *(_QWORD *)(v16 + 16);
    v58 = *(_DWORD *)(v57 + 24 * v55);
    *(_DWORD *)(v16 + 36) = v58 & 0x7FFFFFFF;
  }
  v59 = 24 * v55;
  *(_DWORD *)(v57 + v59) = v58 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(v16 + 16) + v59) = *(_DWORD *)(*(_QWORD *)(v16 + 16) + 24 * v55) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v16 + 8) + 4 * v51);
  *(_QWORD *)(*(_QWORD *)(v16 + 16) + 24 * v55 + 8) = v15;
  v60 = *(_QWORD *)(v16 + 16) + 24 * v55;
  *(_QWORD *)(v60 + 16) = v187;
  *(_DWORD *)(*(_QWORD *)(v16 + 8) + 4 * v51) = v55;
  ++*(_DWORD *)(v16 + 28);
  ++*(_DWORD *)(v16 + 40);
  v54 = *(_QWORD *)(v16 + 16) + 24 * v55;
LABEL_101:
  v29 = v54 + 16;
  if (v47 < 11)
    goto LABEL_271;
  v61 = (re::DynamicString *)re::RenderManager::perFrameAllocator((re::RenderManager *)a1);
  v62 = *(_QWORD *)(a2 + 160);
  if (!v62)
  {
    v66 = 0xFFFFFFFFLL;
    v67 = 0xFFFFFFFFLL;
    v65 = 0xFFFFFFFFLL;
LABEL_117:
    v72 = 0xFFFFFFFFLL;
LABEL_118:
    v73 = 0xFFFFFFFFLL;
LABEL_119:
    v74 = 0xFFFFFFFFLL;
    goto LABEL_120;
  }
  v63 = *(unsigned __int16 **)(a2 + 176);
  v64 = v62 << 6;
  while (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v63))
  {
    v63 += 32;
    v64 -= 64;
    if (!v64)
    {
      v65 = 0xFFFFFFFFLL;
      goto LABEL_109;
    }
  }
  v65 = v63[17];
LABEL_109:
  v68 = *(_QWORD *)(a2 + 160);
  if (!v68)
  {
    v66 = 0xFFFFFFFFLL;
    v67 = 0xFFFFFFFFLL;
    goto LABEL_117;
  }
  v69 = 0;
  v70 = *(unsigned __int16 **)(a2 + 176);
  v71 = v68 << 6;
  while (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v70))
  {
LABEL_114:
    v70 += 32;
    v71 -= 64;
    if (!v71)
    {
      v72 = 0xFFFFFFFFLL;
      goto LABEL_137;
    }
  }
  if (v69 != 1)
  {
    v69 = 1;
    goto LABEL_114;
  }
  v72 = v70[17];
LABEL_137:
  v88 = *(_QWORD *)(a2 + 160);
  if (!v88)
  {
    v66 = 0xFFFFFFFFLL;
    v67 = 0xFFFFFFFFLL;
    goto LABEL_118;
  }
  v89 = 0;
  v90 = *(unsigned __int16 **)(a2 + 176);
  v91 = v88 << 6;
  while (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v90))
  {
LABEL_142:
    v90 += 32;
    v91 -= 64;
    if (!v91)
    {
      v67 = 0xFFFFFFFFLL;
      goto LABEL_222;
    }
  }
  if (v89 != 2)
  {
    ++v89;
    goto LABEL_142;
  }
  v67 = v90[17];
LABEL_222:
  v134 = *(_QWORD *)(a2 + 160);
  if (!v134)
  {
    v66 = 0xFFFFFFFFLL;
    goto LABEL_118;
  }
  v135 = 0;
  v136 = *(unsigned __int16 **)(a2 + 176);
  v137 = v134 << 6;
  while (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v136))
  {
LABEL_227:
    v136 += 32;
    v137 -= 64;
    if (!v137)
    {
      v73 = 0xFFFFFFFFLL;
      goto LABEL_288;
    }
  }
  if (v135 != 3)
  {
    ++v135;
    goto LABEL_227;
  }
  v73 = v136[17];
LABEL_288:
  v154 = *(_QWORD *)(a2 + 160);
  if (!v154)
  {
    v66 = 0xFFFFFFFFLL;
    goto LABEL_119;
  }
  v183 = v73;
  v155 = 0;
  v156 = *(unsigned __int16 **)(a2 + 176);
  v157 = v154 << 6;
  while (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v156))
  {
LABEL_293:
    v156 += 32;
    v157 -= 64;
    if (!v157)
    {
      v66 = 0xFFFFFFFFLL;
      goto LABEL_306;
    }
  }
  if (v155 != 4)
  {
    ++v155;
    goto LABEL_293;
  }
  v66 = v156[17];
LABEL_306:
  v162 = *(_QWORD *)(a2 + 160);
  if (!v162)
  {
LABEL_312:
    v74 = 0xFFFFFFFFLL;
    goto LABEL_323;
  }
  v163 = 0;
  v164 = *(unsigned __int16 **)(a2 + 176);
  v165 = v162 << 6;
  while (2)
  {
    if (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v164))
    {
LABEL_311:
      v164 += 32;
      v165 -= 64;
      if (!v165)
        goto LABEL_312;
      continue;
    }
    break;
  }
  if (v163 != 5)
  {
    ++v163;
    goto LABEL_311;
  }
  v74 = v164[17];
LABEL_323:
  v73 = v183;
LABEL_120:
  v75 = *(_QWORD *)(a2 + 160);
  if (!v75)
  {
    v82 = 0xFFFFFFFFLL;
    v83 = 0xFFFFFFFFLL;
    goto LABEL_146;
  }
  v177 = v74;
  v179 = v29;
  v181 = v67;
  v76 = v65;
  v77 = 0;
  v78 = *(unsigned __int16 **)(a2 + 176);
  v79 = v75 << 6;
  while (2)
  {
    if (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v78))
    {
LABEL_125:
      v78 += 32;
      v79 -= 64;
      if (!v79)
      {
        v80 = v72;
        v81 = v61;
        v82 = 0xFFFFFFFFLL;
        goto LABEL_129;
      }
      continue;
    }
    break;
  }
  if (v77 != 6)
  {
    ++v77;
    goto LABEL_125;
  }
  v80 = v72;
  v81 = v61;
  v82 = v78[17];
LABEL_129:
  v84 = *(_QWORD *)(a2 + 160);
  if (!v84)
  {
LABEL_135:
    v83 = 0xFFFFFFFFLL;
    goto LABEL_145;
  }
  v85 = 0;
  v86 = *(unsigned __int16 **)(a2 + 176);
  v87 = v84 << 6;
  while (2)
  {
    if (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v86))
    {
LABEL_134:
      v86 += 32;
      v87 -= 64;
      if (!v87)
        goto LABEL_135;
      continue;
    }
    break;
  }
  if (v85 != 7)
  {
    ++v85;
    goto LABEL_134;
  }
  v83 = v86[17];
LABEL_145:
  v61 = v81;
  v65 = v76;
  v72 = v80;
  v29 = v179;
  v67 = v181;
  v74 = v177;
LABEL_146:
  LODWORD(v92) = *(_DWORD *)(a2 + 212);
  if (*(_BYTE *)(a2 + 208))
    v92 = v92;
  else
    v92 = 0xFFFFFFFFLL;
  LODWORD(v93) = *(_DWORD *)(a2 + 220);
  if (*(_BYTE *)(a2 + 216))
    v93 = v93;
  else
    v93 = 0xFFFFFFFFLL;
  if (*(_BYTE *)(a2 + 224))
    v94 = *(unsigned int *)(a2 + 228);
  else
    v94 = 0xFFFFFFFFLL;
  if (*(_BYTE *)(a2 + 232))
    v95 = *(unsigned int *)(a2 + 236);
  else
    v95 = 0xFFFFFFFFLL;
  if (*(_BYTE *)(a2 + 240))
    v96 = *(unsigned int *)(a2 + 244);
  else
    v96 = 0xFFFFFFFFLL;
  if (*(_BYTE *)(a2 + 248))
    v97 = *(unsigned int *)(a2 + 252);
  else
    v97 = 0xFFFFFFFFLL;
  if (*(_BYTE *)(a2 + 256))
    v98 = *(unsigned int *)(a2 + 260);
  else
    v98 = 0xFFFFFFFFLL;
  if (*(_BYTE *)(a2 + 264))
    v99 = *(unsigned int *)(a2 + 268);
  else
    v99 = 0xFFFFFFFFLL;
  if (*(_BYTE *)(a2 + 272))
    v100 = *(unsigned int *)(a2 + 276);
  else
    v100 = 0;
  if (*(_BYTE *)(a2 + 280))
    v101 = *(unsigned int *)(a2 + 284);
  else
    v101 = 0;
  re::DynamicString::format(v61, (re::Allocator *)"fc=%d %d %d %d %d %d %d %d p=%d %d %d %d %d %d %d %d sc=%d d=%d s=%d", (re::DynamicString *)v194, v65, v72, v67, v73, v66, v74, v82, v83, v92, v93, v94, v95, v96, v97, v98, v99,
    *(_QWORD *)(a2 + 184),
    v100,
    v101);
  if ((v194[8] & 1) != 0)
    v103 = *(re **)&v196[2];
  else
    v103 = (re *)&v194[9];
  re::REAnalyticsEventShaderPermutationsForCustomClear(v103, v102);
  v104 = *(re **)v194;
  if (*(_QWORD *)v194 && (v194[8] & 1) != 0)
    v104 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)v194 + 40))();
  v105 = *re::graphicsLogObjects(v104);
  if (!os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
    goto LABEL_271;
  if ((*(_BYTE *)(a2 + 88) & 1) != 0)
    v106 = *(_QWORD *)(a2 + 96);
  else
    v106 = a2 + 89;
  v107 = *(_QWORD *)(a2 + 160);
  if (!v107)
  {
    v111 = -1;
    v112 = -1;
    v110 = -1;
LABEL_202:
    v117 = -1;
LABEL_203:
    v118 = -1;
LABEL_204:
    v119 = -1;
    goto LABEL_205;
  }
  v108 = *(unsigned __int16 **)(a2 + 176);
  v109 = v107 << 6;
  while (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v108))
  {
    v108 += 32;
    v109 -= 64;
    if (!v109)
    {
      v110 = -1;
      goto LABEL_193;
    }
  }
  v110 = v108[17];
LABEL_193:
  v113 = *(_QWORD *)(a2 + 160);
  if (!v113)
  {
    v111 = -1;
    v112 = -1;
    goto LABEL_202;
  }
  v114 = 0;
  v115 = *(unsigned __int16 **)(a2 + 176);
  v116 = v113 << 6;
  while (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v115))
  {
LABEL_198:
    v115 += 32;
    v116 -= 64;
    if (!v116)
    {
      v117 = -1;
      goto LABEL_231;
    }
  }
  if (v114 != 1)
  {
    v114 = 1;
    goto LABEL_198;
  }
  v117 = v115[17];
LABEL_231:
  v138 = *(_QWORD *)(a2 + 160);
  if (!v138)
  {
    v111 = -1;
    v112 = -1;
    goto LABEL_203;
  }
  v139 = 0;
  v140 = *(unsigned __int16 **)(a2 + 176);
  v141 = v138 << 6;
  while (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v140))
  {
LABEL_236:
    v140 += 32;
    v141 -= 64;
    if (!v141)
    {
      v112 = -1;
      goto LABEL_297;
    }
  }
  if (v139 != 2)
  {
    ++v139;
    goto LABEL_236;
  }
  v112 = v140[17];
LABEL_297:
  v158 = *(_QWORD *)(a2 + 160);
  if (!v158)
  {
    v111 = -1;
    goto LABEL_203;
  }
  v159 = 0;
  v160 = *(unsigned __int16 **)(a2 + 176);
  v161 = v158 << 6;
  while (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v160))
  {
LABEL_302:
    v160 += 32;
    v161 -= 64;
    if (!v161)
    {
      v118 = -1;
      goto LABEL_314;
    }
  }
  if (v159 != 3)
  {
    ++v159;
    goto LABEL_302;
  }
  v118 = v160[17];
LABEL_314:
  v166 = *(_QWORD *)(a2 + 160);
  if (!v166)
  {
    v111 = -1;
    goto LABEL_204;
  }
  v186 = v118;
  v167 = 0;
  v168 = *(unsigned __int16 **)(a2 + 176);
  v169 = v166 << 6;
  while (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v168))
  {
LABEL_319:
    v168 += 32;
    v169 -= 64;
    if (!v169)
    {
      v111 = -1;
      goto LABEL_325;
    }
  }
  if (v167 != 4)
  {
    ++v167;
    goto LABEL_319;
  }
  v111 = v168[17];
LABEL_325:
  v170 = *(_QWORD *)(a2 + 160);
  if (!v170)
  {
    v119 = -1;
    v118 = v186;
    goto LABEL_205;
  }
  v184 = v111;
  v171 = 0;
  v172 = *(unsigned __int16 **)(a2 + 176);
  v173 = v170 << 6;
  while (2)
  {
    if (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v172))
    {
LABEL_330:
      v172 += 32;
      v173 -= 64;
      if (!v173)
      {
        v119 = -1;
        goto LABEL_334;
      }
      continue;
    }
    break;
  }
  if (v171 != 5)
  {
    ++v171;
    goto LABEL_330;
  }
  v119 = v172[17];
LABEL_334:
  v118 = v186;
  v111 = v184;
LABEL_205:
  v120 = *(_QWORD *)(a2 + 160);
  if (!v120)
  {
    v128 = -1;
    v129 = -1;
    goto LABEL_240;
  }
  v178 = v119;
  v182 = v111;
  v185 = v118;
  v180 = v112;
  v121 = v106;
  v122 = 0;
  v123 = *(unsigned __int16 **)(a2 + 176);
  v124 = v120 << 6;
  while (2)
  {
    if (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v123))
    {
LABEL_210:
      v123 += 32;
      v124 -= 64;
      if (!v124)
      {
        v125 = v105;
        v126 = v117;
        v127 = v110;
        v128 = -1;
        goto LABEL_214;
      }
      continue;
    }
    break;
  }
  if (v122 != 6)
  {
    ++v122;
    goto LABEL_210;
  }
  v125 = v105;
  v126 = v117;
  v127 = v110;
  v128 = v123[17];
LABEL_214:
  v130 = *(_QWORD *)(a2 + 160);
  if (!v130)
  {
LABEL_220:
    v129 = -1;
    goto LABEL_239;
  }
  v131 = 0;
  v132 = *(unsigned __int16 **)(a2 + 176);
  v133 = v130 << 6;
  while (2)
  {
    if (!re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v132))
    {
LABEL_219:
      v132 += 32;
      v133 -= 64;
      if (!v133)
        goto LABEL_220;
      continue;
    }
    break;
  }
  if (v131 != 7)
  {
    ++v131;
    goto LABEL_219;
  }
  v129 = v132[17];
LABEL_239:
  v106 = v121;
  v110 = v127;
  v117 = v126;
  v105 = v125;
  v112 = v180;
  v118 = v185;
  v111 = v182;
  v119 = v178;
LABEL_240:
  if (*(_BYTE *)(a2 + 208))
    v142 = *(_DWORD *)(a2 + 212);
  else
    v142 = -1;
  if (*(_BYTE *)(a2 + 216))
    v143 = *(_DWORD *)(a2 + 220);
  else
    v143 = -1;
  if (*(_BYTE *)(a2 + 224))
    v144 = *(_DWORD *)(a2 + 228);
  else
    v144 = -1;
  if (*(_BYTE *)(a2 + 232))
    v145 = *(_DWORD *)(a2 + 236);
  else
    v145 = -1;
  if (*(_BYTE *)(a2 + 240))
    v146 = *(_DWORD *)(a2 + 244);
  else
    v146 = -1;
  if (*(_BYTE *)(a2 + 248))
    v147 = *(_DWORD *)(a2 + 252);
  else
    v147 = -1;
  if (*(_BYTE *)(a2 + 256))
    v148 = *(_DWORD *)(a2 + 260);
  else
    v148 = -1;
  if (*(_BYTE *)(a2 + 264))
    v149 = *(_DWORD *)(a2 + 268);
  else
    v149 = -1;
  v150 = *(_QWORD *)(a2 + 184);
  if (*(_BYTE *)(a2 + 272))
    v151 = *(_DWORD *)(a2 + 276);
  else
    v151 = 0;
  if (*(_BYTE *)(a2 + 280))
    v152 = *(_DWORD *)(a2 + 284);
  else
    v152 = 0;
  *(_DWORD *)v194 = 136451074;
  *(_QWORD *)&v194[4] = v106;
  v195 = 1024;
  *(_DWORD *)v196 = v110;
  *(_WORD *)&v196[4] = 1024;
  *(_DWORD *)&v196[6] = v117;
  *(_WORD *)v197 = 1024;
  *(_DWORD *)&v197[2] = v112;
  v198 = 1024;
  v199 = v118;
  v200 = 1024;
  v201 = v111;
  v202 = 1024;
  v203 = v119;
  v204 = 1024;
  v205 = v128;
  v206 = 1024;
  v207 = v129;
  v208 = 1024;
  v209 = v142;
  v210 = 1024;
  v211 = v143;
  v212 = 1024;
  v213 = v144;
  v214 = 1024;
  v215 = v145;
  v216 = 1024;
  v217 = v146;
  v218 = 1024;
  v219 = v147;
  v220 = 1024;
  v221 = v148;
  v222 = 1024;
  v223 = v149;
  v224 = 1024;
  v225 = v150;
  v226 = 1024;
  v227 = v151;
  v228 = 1024;
  v229 = v152;
  _os_log_impl(&dword_224FE9000, v105, OS_LOG_TYPE_DEFAULT, "Compiling PSO RT v=%{public}s fc=%d %d %d %d %d %d %d %d p=%d %d %d %d %d %d %d %d sc=%d d=%d s=%d", v194, 0x7Eu);
LABEL_271:
  if (v187)

  if (v188)
  if (v189)

  if (v190)
  if (v191)

  if (v192)
  if (v193)

  return v29;
}

unint64_t re::SamplerTableCollection::hash(re::SamplerTableCollection *this)
{
  unint64_t v2;
  unint64_t result;
  char *v4;
  unint64_t v5;
  unint64_t v6;

  v2 = 0;
  result = 0;
  v4 = (char *)this + 16;
  do
  {
    if (*((_QWORD *)v4 - 1) && *(_QWORD *)v4)
    {
      v5 = *(_QWORD *)(*(_QWORD *)v4 + 48);
    }
    else
    {
      v6 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) >> 27));
      v5 = v6 ^ (v6 >> 31);
    }
    result ^= (result << 6) + (result >> 2) + v5 - 0x61C8864680B583E9;
    ++v2;
    v4 += 24;
  }
  while (v2 != 6);
  return result;
}

_QWORD *re::DrawCallRef::DrawCallRef(_QWORD *this, const re::DrawCall *a2)
{
  unsigned __int8 v2;
  int v3;
  _QWORD *v4;

  *this = a2;
  if ((v2 & 1) == 0)
  {
    v4 = this;
    this = v4;
    if (v3)
    {
      *(_OWORD *)algn_255829830 = xmmword_2260E5F20;
      xmmword_255829840 = xmmword_2260E5F40;
      unk_255829850 = xmmword_2260E5D70;
      this = v4;
    }
  }
  return this;
}

void re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_66, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = *(_QWORD *)(a1 + 16) + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          v8 = *(_QWORD *)(v6 + 88);
          if (v8)
          {

            *(_QWORD *)(v6 + 88) = 0;
            v3 = *(unsigned int *)(a1 + 32);
          }
        }
        v4 += 96;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v9 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v9;
  }
}

uint64_t re::MaterialParameterTableLayers::getPrioritizedPassTechniqueMapping(re::MaterialParameterTableLayers *this, uint64_t a2)
{
  re::MaterialParameterTable *v4;
  uint64_t result;
  re::MaterialParameterTable *v6;
  re::MaterialParameterTable *v7;
  uint64_t v8;
  re::MaterialParameterTable *v9;

  v4 = (re::MaterialParameterTable *)*((_QWORD *)this + 7);
  if (!v4)
    goto LABEL_5;
  if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
  result = re::MaterialParameterTable::tryGetPassTechniqueMapping(v4, a2, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
  if (!result)
  {
LABEL_5:
    v6 = (re::MaterialParameterTable *)*((_QWORD *)this + 6);
    if (!v6)
      goto LABEL_9;
    if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
      dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
    result = re::MaterialParameterTable::tryGetPassTechniqueMapping(v6, a2, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
    if (!result)
    {
LABEL_9:
      v7 = (re::MaterialParameterTable *)*((_QWORD *)this + 9);
      if (!v7)
        goto LABEL_13;
      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
        dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
      result = re::MaterialParameterTable::tryGetPassTechniqueMapping(v7, a2, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
      if (!result)
      {
LABEL_13:
        v8 = *((_QWORD *)this + 5);
        if (!v8)
          return 0;
        v9 = (re::MaterialParameterTable *)(v8 + 224);
        if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
          dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
        result = re::MaterialParameterTable::tryGetPassTechniqueMapping(v9, a2, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
        if (!result)
          return 0;
      }
    }
  }
  return result;
}

uint64_t re::MaterialParameterTableLayers::getDebugMode(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = this;
  v9 = a3;
  if (!*(_BYTE *)(a2 + 128)
    || (v5 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 16),
        this = re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::find((_QWORD *)(v5 + 184), &v9), this == -1)|| (v6 = this, v7 = *(_QWORD *)(v5 + 192), this = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v7 + 72 * this + 8), (_QWORD *)(a2 + 136)), this == -1))
  {
    *(_BYTE *)v3 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v7 + 72 * v6 + 16) + 16 * this;
    *(_BYTE *)v3 = 1;
    *(_WORD *)(v3 + 2) = *(_WORD *)(v8 + 8);
  }
  return this;
}

uint64_t re::MaterialParameterTableLayers::getTechniqueAtIndex(re::MaterialParameterTableLayers *this, unsigned int a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 128))
  {
    v4 = a2;
    goto LABEL_9;
  }
  v3 = (_QWORD *)*((_QWORD *)this + 5);
  v4 = a2;
  if (v3[10] <= (unint64_t)a2)
  {
LABEL_13:
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_14:
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (!v3[12]
    || (v5 = **(_QWORD **)(v3[11] + 40 * a2), !*(_BYTE *)(v5 + 2632))
    || (re::MaterialParameterTableLayers::getDebugMode((uint64_t)&v9, (uint64_t)this, *(_QWORD *)(v5 + 2640)), !(_BYTE)v9))
  {
LABEL_9:
    v7 = *((_QWORD *)this + 5);
    if (*(_QWORD *)(v7 + 80) > v4)
    {
      v6 = (_QWORD *)(v7 + 88);
      return *(_QWORD *)(*v6 + 40 * v4);
    }
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_13;
  }
  if (v3[13] <= v4)
    goto LABEL_14;
  v6 = v3 + 14;
  return *(_QWORD *)(*v6 + 40 * v4);
}

void *re::MaterialParameterTableLayers::resolveTechniqueIndices(re::MaterialParameterTableLayers *this, uint64_t a2)
{
  uint64_t *PrioritizedPassTechniqueMapping;
  uint64_t v4;

  PrioritizedPassTechniqueMapping = (uint64_t *)re::MaterialParameterTableLayers::getPrioritizedPassTechniqueMapping(this, a2);
  if (PrioritizedPassTechniqueMapping
    && (v4 = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(*((_QWORD *)this + 5) + 24, PrioritizedPassTechniqueMapping)) != 0)
  {
    return *(void **)(v4 + 16);
  }
  else
  {
    return &re::kInvalidMaterialTechniqueIndex;
  }
}

BOOL re::MaterialParameterTableLayers::containsDirectBuffer(uint64_t *a1, unsigned int a2, int a3)
{
  uint64_t v3;

  if (a3 == 2)
  {
    v3 = a1[1];
    if (!v3)
      return 0;
  }
  else
  {
    if (a3 != 1)
      return 0;
    v3 = *a1;
    if (!*a1)
      return 0;
  }
  if (*(_QWORD *)(v3 + 8) > (unint64_t)a2)
    return *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * a2) != 0;
  return 0;
}

void re::encodeDrawCalls(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, re::DynamicString *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,_QWORD *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  float a76;
  float a77;
  float a78;
  float v70;
  float v71;
  float v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t shouldCompileSynchronously;
  unsigned __int8 v82;
  uint64_t v83;
  int v84;
  int8x16_t *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  re::MaterialManager *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t i;
  uint64_t j;
  char *v139;
  unint64_t v140;
  _anonymous_namespace_ *v141;
  int v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  _OWORD *v148;
  unsigned __int8 v149;
  uint64_t v150;
  const char *v151;
  __int16 v152;
  __int16 v153;
  int v154;
  int v155;
  unsigned __int8 v156;
  _DWORD *v157;
  uint64_t v158;
  const char *v159;
  unint64_t *v160;
  int32x2_t *v161;
  unint64_t v162;
  _QWORD *v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int *v172;
  unsigned int v173;
  _anonymous_namespace_ *v174;
  int v175;
  re *v176;
  char v177;
  char v178;
  _anonymous_namespace_ *v179;
  unsigned int v180;
  int v181;
  uint64_t **v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  BOOL v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  float v197;
  unint64_t v198;
  unint64_t v199;
  int v200;
  char v201;
  std::chrono::steady_clock::time_point v202;
  int v203;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  int v205;
  int v206;
  std::chrono::steady_clock::time_point v207;
  std::__cxx_contention_t v208;
  int v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  unsigned __int16 v214;
  int v215;
  int v216;
  char v217;
  char v218;
  int v219;
  int v220;
  int v221;
  unsigned int v222;
  int v223;
  int v224;
  char v225;
  unint64_t v226;
  unint64_t v227;
  float v228;
  float32x4_t v229;
  float32x4_t v230;
  unint64_t v231;
  unsigned int v232;
  BOOL v233;
  unint64_t *v234;
  _QWORD *v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unsigned __int16 v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  int v248;
  uint64_t v249;
  unint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  _QWORD *v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  _QWORD *v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  _QWORD *v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unsigned __int8 v288;
  uint64_t v289;
  unsigned __int8 *v290;
  unint64_t v291;
  _QWORD *v292;
  unint64_t v293;
  _QWORD *v294;
  _anonymous_namespace_ *v295;
  int v296;
  char v297;
  uint8x8_t v298;
  uint8x8_t v299;
  int v300;
  int v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  _anonymous_namespace_ *Permutation;
  unint64_t v307;
  _anonymous_namespace_ *v308;
  unint64_t v309;
  uint64_t v310;
  unint64_t k;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  char v316;
  unsigned __int8 *v317;
  int v318;
  _BYTE *v319;
  char v320;
  unsigned __int8 *v321;
  int v322;
  _QWORD *v323;
  void *v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  uint64_t v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t v332;
  _QWORD *v333;
  _QWORD *v334;
  unint64_t v335;
  unint64_t v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  _QWORD **v343;
  re::AttributeTable *v344;
  re::AttributeTable *v345;
  re::AttributeTable *v346;
  unint64_t v347;
  uint64_t v348;
  float *v349;
  float v350;
  float v351;
  float v352;
  uint64_t v353;
  int v354;
  uint64_t v355;
  int v356;
  uint64_t v357;
  float v358;
  float v359;
  float v360;
  _QWORD *v361;
  uint64_t v362;
  _QWORD *v363;
  id v364;
  _QWORD *v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  int v377;
  uint64_t v378;
  _QWORD *v379;
  re::MaterialParameterTable *v380;
  unint64_t v381;
  unint64_t v382;
  uint64_t v383;
  unint64_t v384;
  unint64_t v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  re::MaterialParameterTable *v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t *v392;
  unsigned __int16 *v393;
  unint64_t v394;
  unint64_t v395;
  unsigned int v396;
  _QWORD *v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  unint64_t v403;
  _QWORD *v404;
  uint64_t v405;
  unint64_t v406;
  _BOOL4 v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  unint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unint64_t v416;
  unint64_t v417;
  _QWORD *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t v424;
  _QWORD *v425;
  unint64_t v426;
  uint64_t v427;
  uint64_t v428;
  unint64_t v429;
  unint64_t v430;
  uint64_t v431;
  _QWORD *v432;
  _QWORD *v433;
  unint64_t v434;
  unint64_t v435;
  uint64_t v436;
  unint64_t v437;
  unint64_t v438;
  uint64_t v439;
  uint64_t v440;
  unsigned __int16 *v441;
  uint64_t v442;
  uint64_t v443;
  int v444;
  _QWORD *v445;
  _QWORD *v446;
  unint64_t v447;
  unint64_t v448;
  uint64_t v449;
  unint64_t v450;
  _QWORD *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v455;
  uint64_t v456;
  uint64_t v457;
  unint64_t v458;
  unint64_t v459;
  _QWORD *v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  unint64_t v467;
  unint64_t v468;
  unint64_t v469;
  unint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  int v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  int v480;
  unsigned __int16 v481;
  unint64_t v482;
  unint64_t v483;
  unsigned int v484;
  uint64_t v485;
  unint64_t v486;
  unsigned int v487;
  unint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  unsigned int v492;
  unint64_t *v493;
  unint64_t v494;
  uint64_t v495;
  unint64_t v496;
  uint64_t v497;
  unint64_t v498;
  unint64_t v499;
  unint64_t v500;
  unint64_t v501;
  unint64_t v502;
  uint64_t v503;
  id v504;
  unint64_t v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  unint64_t v510;
  unint64_t v511;
  _QWORD *v512;
  uint64_t v513;
  uint64_t v514;
  unsigned int v515;
  uint64_t v516;
  uint64_t v517;
  unint64_t v518;
  uint64_t v519;
  uint64_t v520;
  unint64_t v521;
  unint64_t v522;
  unint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  int v528;
  uint64_t v529;
  unint64_t v530;
  id v531;
  unint64_t v532;
  unint64_t v533;
  uint64_t v534;
  unint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  unint64_t v541;
  unint64_t v542;
  unint64_t v543;
  unint64_t v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  int v550;
  uint64_t v551;
  id v552;
  unint64_t v553;
  unint64_t v554;
  _QWORD *v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  int v560;
  uint64_t v561;
  uint64_t v562;
  id v563;
  unint64_t v564;
  unint64_t v565;
  unint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  int v571;
  unint64_t v572;
  unint64_t v573;
  uint64_t v574;
  unint64_t v575;
  unint64_t *v576;
  unsigned __int8 v577;
  __int16 v578;
  uint64_t v579;
  unint64_t v580;
  NSObject v581;
  uint64_t v582;
  os_unfair_lock_s **v583;
  os_unfair_lock_s **v584;
  _WORD *v585;
  void *v586;
  unint64_t v587;
  unint64_t v588;
  unint64_t v589;
  unint64_t *v590;
  _QWORD *v591;
  unint64_t v592;
  id v593;
  const char *v594;
  BOOL v595;
  unsigned int v596;
  unsigned int v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t *v601;
  uint64_t v602;
  uint64_t v603;
  __int16 v604;
  unsigned int v605;
  uint64_t v606;
  uint64_t v607;
  _QWORD *v608;
  uint64_t v609;
  char v610;
  unint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  re::FrameContext *v616;
  unint64_t v617;
  uint64_t v618;
  unsigned int m;
  uint64_t v620;
  unint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  unint64_t v627;
  unsigned __int16 *v628;
  uint64_t v629;
  unint64_t v630;
  void *v631;
  unint64_t *v632;
  unint64_t *v633;
  unint64_t v634;
  unint64_t v635;
  id v636;
  uint64_t v637;
  unint64_t v638;
  unint64_t v639;
  unint64_t v640;
  unint64_t v641;
  BOOL v642;
  uint64_t v643;
  id v644;
  uint64_t v645;
  unint64_t v646;
  unint64_t v647;
  unsigned __int16 *v648;
  unint64_t *v649;
  unint64_t v650;
  unint64_t v651;
  unint64_t *v652;
  uint64_t v653;
  uint64_t v654;
  unint64_t v655;
  uint64_t *v656;
  uint64_t v657;
  unint64_t *v658;
  unint64_t *v659;
  uint64_t v660;
  unint64_t v661;
  uint64_t v662;
  unsigned int n;
  uint64_t v664;
  unint64_t v665;
  unsigned int v666;
  re::FrameContext *v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  unsigned __int16 *v672;
  unint64_t v673;
  unint64_t *v674;
  uint64_t v675;
  unint64_t v676;
  void *v677;
  unint64_t *v678;
  uint64_t v679;
  unsigned __int16 *v680;
  unint64_t v681;
  uint64_t v682;
  unsigned __int16 *v683;
  unint64_t *v684;
  unint64_t v685;
  unint64_t v686;
  unint64_t *v687;
  int v688;
  uint64_t v689;
  unint64_t v690;
  unint64_t v691;
  uint64_t v692;
  unint64_t v693;
  unint64_t v694;
  unint64_t v695;
  _DWORD *v696;
  unint64_t ***v697;
  unsigned int v698;
  int v699;
  BOOL v701;
  BOOL v702;
  unint64_t v703;
  unsigned int v704;
  uint64_t v705;
  int v706;
  unsigned int v707;
  unint64_t v708;
  _DWORD *v709;
  _DWORD *v710;
  int v711;
  int v712;
  unint64_t v713;
  unint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  unint64_t v718;
  uint64_t v719;
  unint64_t v720;
  unint64_t v721;
  uint64_t v722;
  unint64_t v723;
  unint64_t v724;
  unsigned int v725;
  unint64_t v726;
  _DWORD *v727;
  int v728;
  uint64_t v729;
  uint64_t v730;
  unint64_t v731;
  unint64_t v732;
  uint64_t v733;
  unint64_t v734;
  unint64_t v735;
  _DWORD *v736;
  unint64_t v737;
  int v738;
  unint64_t v739;
  _DWORD *v740;
  int v741;
  int v742;
  int v743;
  unint64_t v744;
  _DWORD *v745;
  uint64_t v746;
  unint64_t v747;
  unint64_t v748;
  _DWORD *v749;
  unint64_t v750;
  int v751;
  _DWORD *v752;
  uint64_t v753;
  char v754;
  unint64_t *v755;
  const re::DynamicString *v756;
  unint64_t *v757;
  __int128 v758;
  int v759;
  int v760;
  int v761;
  const char *v762;
  char v763;
  const char *v765;
  float32x4_t *v766;
  __int128 v767;
  __int128 v768;
  unint64_t *vars0;
  unint64_t *vars8;
  _QWORD *v771;
  unsigned __int8 *v772;
  uint64_t v773;
  unsigned int *v774;
  _DWORD *v775;
  _QWORD *v776;
  int v777;
  unsigned int *v778;
  int v779;
  _QWORD *v780;
  _QWORD *v781;
  _QWORD *v782;
  _QWORD *v783;
  _QWORD *v784;
  int *v785;
  unsigned int *v786;
  unsigned __int16 *v787;
  int v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  unsigned __int16 *v792;
  int v793;
  int v794;
  uint64_t v795;
  _OWORD *v796;
  _BYTE v797[12];
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  unint64_t v802;
  unsigned __int16 *v803;
  unsigned __int8 *v804;
  unint64_t v805;
  unint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  unint64_t *v812;
  uint64_t v813;
  unsigned __int8 v814;
  unint64_t v815;
  unint64_t v816;
  _QWORD *v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t **v821;

  MEMORY[0x24BDAC7A8](a1);
  STACK[0x2F0] = v73;
  v75 = v74;
  v77 = v76;
  v78 = (unint64_t)&STACK[0x1020];
  v79 = (uint64_t)&STACK[0xDB0];
  v80 = (unint64_t)&STACK[0xCF0];
  STACK[0x1FF8] = *MEMORY[0x24BDAC8D0];
  LODWORD(shouldCompileSynchronously) = *(unsigned __int8 *)(v74[3] + 271) | *((unsigned __int8 *)v74 + 148);
  v82 = atomic_load((unsigned __int8 *)&qword_25411A058);
  v83 = (uint64_t)&byte_25411A051;
  if ((v82 & 1) == 0)
    goto LABEL_970;
  while (1)
  {
    if (*(_BYTE *)v83)
      v84 = *(unsigned __int8 *)(v83 + 1);
    else
      v84 = shouldCompileSynchronously;
    LODWORD(STACK[0x3B0]) = v84;
    LODWORD(STACK[0x314]) = v84 != 0;
    v85 = *(int8x16_t **)(v75[3] + 24);
    *(_OWORD *)(v78 + 72) = 0u;
    *(_OWORD *)(v78 + 56) = 0u;
    *(_OWORD *)(v78 + 40) = 0u;
    *(int8x16_t *)&STACK[0x1020] = vextq_s8(v85[41], v85[41], 8uLL);
    v86 = v85[40].u64[0];
    STACK[0x1078] = 0;
    STACK[0x1040] = v86;
    v87 = re::MaterialManager::sceneTextures((re::MaterialManager *)v85, *((unsigned int *)v75 + 36));
    v88 = v85[40].u64[1];
    STACK[0x1030] = v87;
    STACK[0x1038] = v88;
    STACK[0x1068] = v75[2] + 368;
    LODWORD(STACK[0xDD0]) = 0;
    *(_OWORD *)&STACK[0xDC0] = 0u;
    *(_OWORD *)&STACK[0xDB0] = 0u;
    STACK[0x1018] = 0;
    *(_OWORD *)(v80 + 232) = 0u;
    *(_OWORD *)(v80 + 248) = 0u;
    *(_OWORD *)(v79 + 68) = 0u;
    *(_OWORD *)(v79 + 88) = 0u;
    *(_OWORD *)(v79 + 104) = 0u;
    *(_OWORD *)(v79 + 116) = 0u;
    *(_OWORD *)(v79 + 136) = 0u;
    *(_OWORD *)(v79 + 152) = 0u;
    *(_OWORD *)(v79 + 164) = 0u;
    *(_OWORD *)(v79 + 184) = 0u;
    *(_OWORD *)(v79 + 200) = 0u;
    *(_OWORD *)(v79 + 212) = 0u;
    *(_OWORD *)(v79 + 260) = 0u;
    *(_OWORD *)(v79 + 248) = 0u;
    *(_OWORD *)(v79 + 232) = 0u;
    *(_OWORD *)(v79 + 308) = 0u;
    *(_OWORD *)(v79 + 296) = 0u;
    *(_OWORD *)(v79 + 280) = 0u;
    *(_OWORD *)(v79 + 328) = 0u;
    *(_OWORD *)(v79 + 344) = 0u;
    *(_OWORD *)(v79 + 356) = 0u;
    *(_OWORD *)(v79 + 376) = 0u;
    *(_OWORD *)(v79 + 392) = 0u;
    *(_OWORD *)(v79 + 404) = 0u;
    *(_OWORD *)(v79 + 424) = 0u;
    *(_OWORD *)(v79 + 440) = 0u;
    *(_OWORD *)(v79 + 452) = 0u;
    *(_OWORD *)(v79 + 472) = 0u;
    *(_OWORD *)(v79 + 488) = 0u;
    *(_OWORD *)(v79 + 500) = 0u;
    *(_OWORD *)(v79 + 520) = 0u;
    *(_OWORD *)(v79 + 536) = 0u;
    *(_OWORD *)(v79 + 548) = 0u;
    *(_OWORD *)(v79 + 596) = 0u;
    *(_OWORD *)(v79 + 584) = 0u;
    *(_OWORD *)(v79 + 568) = 0u;
    v89 = (_QWORD *)v85[45].i64[0];
    v90 = v89[10];
    v91 = v89[17];
    v92 = v89[15];
    STACK[0xDE0] = v89[12];
    STACK[0xDE8] = v90;
    STACK[0xDF0] = v91;
    STACK[0xDF8] = v92;
    STACK[0xE08] = (unint64_t)v89;
    v93 = (_QWORD *)re::MaterialManager::lightBuffers((re::MaterialManager *)v85, *((unsigned int *)v75 + 36));
    v94 = v93[10];
    v95 = v93[17];
    v96 = v93[15];
    STACK[0xE40] = v93[12];
    STACK[0xE48] = v94;
    STACK[0xE50] = v95;
    STACK[0xE58] = v96;
    LODWORD(STACK[0xE60]) = 0;
    STACK[0xE68] = (unint64_t)v93;
    v97 = (_QWORD *)re::MaterialManager::sceneBuffers((re::MaterialManager *)v85, *((unsigned int *)v75 + 36));
    v98 = v97[10];
    v99 = v97[17];
    v100 = v97[15];
    STACK[0xE10] = v97[12];
    STACK[0xE18] = v98;
    STACK[0xE20] = v99;
    STACK[0xE28] = v100;
    LODWORD(STACK[0xE30]) = 0;
    STACK[0xE38] = (unint64_t)v97;
    v101 = (_QWORD *)v85[44].i64[1];
    v102 = v101[10];
    v103 = v101[17];
    v104 = v101[15];
    STACK[0xE70] = v101[12];
    STACK[0xE78] = v102;
    STACK[0xE80] = v103;
    STACK[0xE88] = v104;
    LODWORD(STACK[0xE90]) = 0;
    v105 = (_QWORD *)v75[2];
    v106 = v105 + 60;
    v107 = v105[72];
    v108 = v105[70];
    v109 = v105[77];
    v110 = v105[75];
    STACK[0xE98] = (unint64_t)v101;
    STACK[0xF60] = v107;
    STACK[0xF68] = v108;
    STACK[0xF70] = v109;
    STACK[0xF78] = v110;
    LODWORD(STACK[0xF80]) = 0;
    *(_QWORD *)(v79 + 472) = v106;
    v111 = (_QWORD *)v85[45].i64[1];
    v112 = v111[10];
    v113 = v111[17];
    v114 = v111[15];
    STACK[0xFC0] = v111[12];
    STACK[0xFC8] = v112;
    STACK[0xFD0] = v113;
    STACK[0xFD8] = v114;
    LODWORD(STACK[0xFE0]) = 0;
    *(_QWORD *)(v79 + 568) = v111;
    v115 = *((unsigned int *)v75 + 36);
    STACK[0x3A8] = (unint64_t)v85;
    v116 = re::MaterialManager::lightBuffers((re::MaterialManager *)v85, v115);
    v117 = *(_QWORD *)(v116 + 216);
    if (v117)
    {
      v118 = 24 * v117;
      v119 = (_QWORD *)(*(_QWORD *)(v116 + 232) + 16);
      do
      {
        v120 = *(v119 - 1);
        if (v120)
          objc_msgSend(*(id *)v77, "useResources:count:usage:stages:", *v119, v120, 1, 2);
        v119 += 3;
        v118 -= 24;
      }
      while (v118);
    }
    *(_OWORD *)&STACK[0xDA0] = 0u;
    *(_OWORD *)&STACK[0xD90] = 0u;
    *(_OWORD *)&STACK[0xD80] = 0u;
    *(_OWORD *)&STACK[0xD20] = 0u;
    *(_OWORD *)&STACK[0xD30] = 0u;
    *(_OWORD *)&STACK[0xD70] = 0u;
    *(_OWORD *)&STACK[0xD60] = 0u;
    *(_OWORD *)&STACK[0xD50] = 0u;
    *(_OWORD *)&STACK[0xD40] = 0u;
    v121 = (re::MaterialManager *)STACK[0x3A8];
    v122 = *(_QWORD *)(STACK[0x3A8] + 888);
    v123 = *(_QWORD *)(v122 + 80);
    STACK[0xD20] = *(_QWORD *)(v122 + 96);
    STACK[0xD28] = v123;
    STACK[0xD30] = v122;
    v124 = *(_QWORD *)(v75[2] + 24);
    *(_OWORD *)&STACK[0xCF0] = 0u;
    *(_OWORD *)&STACK[0xD00] = 0u;
    LODWORD(STACK[0xD10]) = 0;
    *(_QWORD *)(v80 + 36) = 0x7FFFFFFFLL;
    re::HashTable<unsigned long long,re::BufferTable,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::init((uint64_t)&STACK[0xCF0], v124, 3);
    LOBYTE(STACK[0xCD0]) = 0;
    *(_OWORD *)&STACK[0xCC0] = *(_OWORD *)re::MaterialManager::sceneConstants(v121, *((unsigned int *)v75 + 36));
    *(_OWORD *)&STACK[0x800] = xmmword_2260E5F10;
    *(_OWORD *)&STACK[0x810] = xmmword_2260E5F20;
    *(_OWORD *)&STACK[0x820] = xmmword_2260E5F40;
    *(_OWORD *)&STACK[0x830] = xmmword_2260E5D70;
    *(_OWORD *)&STACK[0x840] = xmmword_2260E5F10;
    *(_OWORD *)&STACK[0x850] = xmmword_2260E5F20;
    *(_OWORD *)&STACK[0x860] = xmmword_2260E5F40;
    *(_OWORD *)&STACK[0x870] = xmmword_2260E5D70;
    *(_OWORD *)&STACK[0x880] = xmmword_2260E5F10;
    *(_OWORD *)&STACK[0x890] = xmmword_2260E5F20;
    *(_OWORD *)&STACK[0x8A0] = xmmword_2260E5F40;
    *(_OWORD *)&STACK[0x8B0] = xmmword_2260E5D70;
    *(_OWORD *)&STACK[0x8C0] = xmmword_2260E5F10;
    *(_OWORD *)&STACK[0x8D0] = xmmword_2260E5F20;
    *(_OWORD *)&STACK[0x8E0] = xmmword_2260E5F40;
    *(_OWORD *)&STACK[0x8F0] = xmmword_2260E5D70;
    *(_OWORD *)&STACK[0x900] = xmmword_2260E5F10;
    *(_OWORD *)&STACK[0x910] = xmmword_2260E5F20;
    *(_OWORD *)&STACK[0x920] = xmmword_2260E5F40;
    *(_OWORD *)&STACK[0x930] = xmmword_2260E5D70;
    *(_OWORD *)&STACK[0x940] = xmmword_2260E5F10;
    *(_OWORD *)&STACK[0x950] = xmmword_2260E5F20;
    *(_OWORD *)&STACK[0x960] = xmmword_2260E5F40;
    *(_OWORD *)&STACK[0x970] = xmmword_2260E5D70;
    *(_OWORD *)&STACK[0x980] = xmmword_2260E5F10;
    *(_OWORD *)&STACK[0x990] = xmmword_2260E5F20;
    *(_OWORD *)&STACK[0x9A0] = xmmword_2260E5F40;
    *(_OWORD *)&STACK[0x9B0] = xmmword_2260E5D70;
    *(_OWORD *)&STACK[0x9C0] = xmmword_2260E5F10;
    *(_OWORD *)&STACK[0x9D0] = xmmword_2260E5F20;
    *(_OWORD *)&STACK[0x9E0] = xmmword_2260E5F40;
    *(_OWORD *)&STACK[0x9F0] = xmmword_2260E5D70;
    *(_OWORD *)&STACK[0xA00] = xmmword_2260E5F10;
    *(_OWORD *)&STACK[0xA10] = xmmword_2260E5F20;
    *(_OWORD *)&STACK[0xA20] = xmmword_2260E5F40;
    *(_OWORD *)&STACK[0xA30] = xmmword_2260E5D70;
    *(_OWORD *)&STACK[0xA40] = xmmword_2260E5F10;
    *(_OWORD *)&STACK[0xA50] = xmmword_2260E5F20;
    *(_OWORD *)&STACK[0xA60] = xmmword_2260E5F40;
    *(_OWORD *)&STACK[0xA70] = xmmword_2260E5D70;
    *(_OWORD *)&STACK[0xA80] = xmmword_2260E5F10;
    *(_OWORD *)&STACK[0xA90] = xmmword_2260E5F20;
    *(_OWORD *)&STACK[0xAA0] = xmmword_2260E5F40;
    *(_OWORD *)&STACK[0xAB0] = xmmword_2260E5D70;
    *(_OWORD *)&STACK[0xAC0] = xmmword_2260E5F10;
    *(_OWORD *)&STACK[0xAD0] = xmmword_2260E5F20;
    *(_OWORD *)&STACK[0xAE0] = xmmword_2260E5F40;
    *(_OWORD *)&STACK[0xAF0] = xmmword_2260E5D70;
    *(_OWORD *)&STACK[0xBC0] = 0u;
    *(_OWORD *)&STACK[0xB80] = 0u;
    *(_OWORD *)&STACK[0xB70] = 0u;
    *(_OWORD *)&STACK[0xB60] = 0u;
    *(_OWORD *)&STACK[0xB50] = 0u;
    *(_OWORD *)&STACK[0xB40] = 0u;
    *(_OWORD *)&STACK[0xB30] = 0u;
    *(_OWORD *)&STACK[0xB20] = 0u;
    *(_OWORD *)&STACK[0xB10] = 0u;
    *(_OWORD *)&STACK[0xB00] = 0u;
    *(_OWORD *)&STACK[0xBE0] = 0u;
    *(_OWORD *)&STACK[0xBF0] = 0u;
    v125 = v75[1];
    v126 = *(unsigned __int8 *)(v125 + 40);
    HIDWORD(v766) = *((_DWORD *)v75 + 28);
    LOBYTE(v766) = *((_BYTE *)v75 + 108);
    re::ConstantSetupHelper::populateViewConstants((uint64_t)&STACK[0x800], (float32x4_t *)v75[6], (float32x4_t *)v75[7], *(_OWORD **)(v125 + 48), (float32x4_t *)&STACK[0xCC0], *(uint64_t *)((char *)v75 + 76), v126, v75[4], *(int32x2_t *)((char *)v75 + 84), (int32x2_t)0x3F80000000000000, 0, *(_OWORD *)((char *)v75 + 84), HIDWORD(*(unint64_t *)((char *)v75 + 84)), *(_OWORD **)((char *)v75 + 92), *(float32x4_t **)((char *)v75 + 100), v766);
    v127 = v75[8];
    if (v127)
      re::ViewConstantsLateLatch::copyOriginalViewConstants(v127, &STACK[0x800]);
    shouldCompileSynchronously = (unint64_t)&STACK[0x1E60];
    v128 = v75[3];
    v129 = *(_QWORD *)(v128 + 24);
    v78 = *(_QWORD *)(v129 + 920);
    if (v78 <= 1)
      goto LABEL_957;
    if (v78 != 2)
      break;
LABEL_958:
    STACK[0x710] = 0;
    *(_OWORD *)&STACK[0x1300] = 0u;
    *(_OWORD *)&STACK[0x12F0] = 0u;
    *(_OWORD *)&STACK[0x12E0] = 0u;
    *(_OWORD *)&STACK[0x12D0] = 0u;
    *(_OWORD *)&STACK[0x12C0] = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1ED0]) = 136315906;
    *(_QWORD *)(shouldCompileSynchronously + 116) = "operator[]";
    LOWORD(STACK[0x1EDC]) = 1024;
    *(_DWORD *)(shouldCompileSynchronously + 126) = 797;
    LOWORD(STACK[0x1EE2]) = 2048;
    *(_QWORD *)(shouldCompileSynchronously + 132) = 2;
    LOWORD(STACK[0x1EEC]) = 2048;
    *(_QWORD *)(shouldCompileSynchronously + 142) = 2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_959:
    STACK[0x710] = 0;
    *(_OWORD *)&STACK[0x1300] = 0u;
    *(_OWORD *)&STACK[0x12F0] = 0u;
    *(_OWORD *)&STACK[0x12E0] = 0u;
    *(_OWORD *)&STACK[0x12D0] = 0u;
    *(_OWORD *)&STACK[0x12C0] = 0u;
    v83 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0x1ED0]) = 136315906;
    *(_QWORD *)(shouldCompileSynchronously + 116) = "operator[]";
    LOWORD(STACK[0x1EDC]) = 1024;
    *(_DWORD *)(shouldCompileSynchronously + 126) = 797;
    LOWORD(STACK[0x1EE2]) = 2048;
    *(_QWORD *)(shouldCompileSynchronously + 132) = 3;
    LOWORD(STACK[0x1EEC]) = 2048;
    *(_QWORD *)(shouldCompileSynchronously + 142) = v78;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_960:
    re::internal::assertLog((re::internal *)6, v690, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v691, v690);
    _os_crash();
    __break(1u);
LABEL_961:
    re::internal::assertLog((re::internal *)6, v693, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v694, v693);
    _os_crash();
    __break(1u);
LABEL_962:
    re::internal::assertLog((re::internal *)4, v495, "assertion failure: '%s' (%s:line %i) ", "samplerIndexBuffer.size() == numTextures", "updateTextureBlockTables", 638);
    _os_crash();
    __break(1u);
LABEL_963:
    re::internal::assertLog((re::internal *)4, v495, "assertion failure: '%s' (%s:line %i) ", "uvIndexBuffer.size() == numTextures", "updateTextureBlockTables", 639);
    _os_crash();
    __break(1u);
LABEL_964:
    re::internal::assertLog((re::internal *)6, v720, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v721, v720);
    _os_crash();
    __break(1u);
LABEL_965:
    re::internal::assertLog((re::internal *)6, v723, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v724, v723);
    _os_crash();
    __break(1u);
LABEL_966:
    re::internal::assertLog((re::internal *)6, v731, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v732, v731);
    _os_crash();
    __break(1u);
LABEL_967:
    re::internal::assertLog((re::internal *)6, v734, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v735, v734);
    _os_crash();
    __break(1u);
LABEL_968:
    re::internal::assertLog((re::internal *)6, v731, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v732, v731);
    _os_crash();
    __break(1u);
LABEL_969:
    re::internal::assertLog((re::internal *)6, v747, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v748, v747);
    _os_crash();
    __break(1u);
LABEL_970:
    if (__cxa_guard_acquire(&qword_25411A058))
    {
      re::Defaults::BOOLValue((re::Defaults *)"compilePipelinesSynchronously", v765, (char *)v83);
      __cxa_guard_release((__guard *)(v83 + 7));
    }
  }
  if (v78 <= 3)
    goto LABEL_959;
  v130 = v75[2];
  v131 = *(_QWORD *)(v129 + 936);
  *(_OWORD *)&STACK[0x7C0] = 0uLL;
  *(_OWORD *)&STACK[0x7E0] = 0u;
  *(_OWORD *)&STACK[0x7F0] = 0u;
  LODWORD(STACK[0x7D0]) = *(_DWORD *)(v130 + 8);
  LODWORD(STACK[0x7D4]) = *(_QWORD *)(v130 + 32);
  *(_OWORD *)&STACK[0x7C0] = *(_OWORD *)&STACK[0xCC0];
  *(_OWORD *)&STACK[0x78C] = 0u;
  *(_OWORD *)&STACK[0x780] = 0u;
  *(_OWORD *)&STACK[0x770] = 0u;
  *(_OWORD *)&STACK[0x760] = 0u;
  *(_OWORD *)&STACK[0x750] = 0u;
  *(_OWORD *)&STACK[0x740] = 0u;
  *(_OWORD *)&STACK[0x730] = 0u;
  *(_OWORD *)&STACK[0x720] = 0u;
  *(_OWORD *)&STACK[0x710] = 0u;
  STACK[0x7B0] = 0;
  STACK[0x7A0] = 0;
  STACK[0x7A8] = 0;
  STACK[0x6F8] = (unint64_t)&off_24ED77170;
  STACK[0x700] = v131;
  STACK[0x708] = (unint64_t)&STACK[0x7C0];
  STACK[0x6E0] = (unint64_t)&off_24ED77170;
  STACK[0x6E8] = v131 + 64;
  STACK[0x6F0] = (unint64_t)&STACK[0x800];
  STACK[0x6C8] = (unint64_t)&off_24ED77170;
  STACK[0x6D0] = v131 + 192;
  STACK[0x6D8] = 0;
  STACK[0x6B0] = (unint64_t)&off_24ED77170;
  STACK[0x6B8] = v131 + 128;
  STACK[0x6C0] = 0;
  STACK[0x7A8] = *(_QWORD *)(v128 + 24) + 944;
  STACK[0x7B0] = 21;
  STACK[0x710] = (unint64_t)&STACK[0x6F8];
  STACK[0x718] = (unint64_t)&STACK[0x6E0];
  STACK[0x728] = (unint64_t)&STACK[0x6C8];
  STACK[0x720] = (unint64_t)&STACK[0x6B0];
  STACK[0x2B8] = v130;
  STACK[0x780] = *(_QWORD *)(v130 + 24);
  re::DynamicArray<re::ConstantSource const*>::setCapacity(&STACK[0x780], 0);
  v132 = 0;
  ++LODWORD(STACK[0x798]);
  STACK[0x698] = (unint64_t)&STACK[0x710];
  STACK[0x6A0] = (unint64_t)&STACK[0x1020];
  STACK[0x6A8] = (unint64_t)&STACK[0xDB0];
  do
  {
    v133 = (char *)&STACK[0x12C0] + v132;
    *(_QWORD *)v133 = 0;
    *((_QWORD *)v133 + 1) = 0;
    v133[16] = 1;
    *((_WORD *)v133 + 9) = 0;
    v132 += 24;
    *((_DWORD *)v133 + 5) = 0;
  }
  while (v132 != 744);
  v134 = 744;
  do
  {
    v135 = (char *)&STACK[0x12C0] + v134;
    *(_QWORD *)v135 = 0;
    *((_QWORD *)v135 + 1) = 0;
    v135[16] = 1;
    *((_WORD *)v135 + 9) = 0;
    *((_DWORD *)v135 + 5) = 0;
    v134 += 24;
  }
  while (v135 + 24 != (char *)&STACK[0x1890]);
  *(_OWORD *)&STACK[0x1A60] = 0u;
  *(_OWORD *)&STACK[0x1A70] = 0u;
  *(_OWORD *)&STACK[0x1A40] = 0u;
  *(_OWORD *)&STACK[0x1A50] = 0u;
  *(_OWORD *)&STACK[0x1A20] = 0u;
  *(_OWORD *)&STACK[0x1A30] = 0u;
  *(_OWORD *)&STACK[0x1A00] = 0u;
  *(_OWORD *)&STACK[0x1A10] = 0u;
  *(_OWORD *)&STACK[0x19E0] = 0u;
  *(_OWORD *)&STACK[0x19F0] = 0u;
  *(_OWORD *)&STACK[0x19C0] = 0u;
  *(_OWORD *)&STACK[0x19D0] = 0u;
  *(_OWORD *)&STACK[0x19A0] = 0u;
  *(_OWORD *)&STACK[0x19B0] = 0u;
  *(_OWORD *)&STACK[0x1980] = 0u;
  *(_OWORD *)&STACK[0x1990] = 0u;
  *(_OWORD *)&STACK[0x1960] = 0u;
  *(_OWORD *)&STACK[0x1970] = 0u;
  *(_OWORD *)&STACK[0x1940] = 0u;
  *(_OWORD *)&STACK[0x1950] = 0u;
  *(_OWORD *)&STACK[0x1920] = 0u;
  *(_OWORD *)&STACK[0x1930] = 0u;
  *(_OWORD *)&STACK[0x1900] = 0u;
  *(_OWORD *)&STACK[0x1910] = 0u;
  *(_OWORD *)&STACK[0x18E0] = 0u;
  *(_OWORD *)&STACK[0x18F0] = 0u;
  *(_OWORD *)&STACK[0x18C0] = 0u;
  *(_OWORD *)&STACK[0x18D0] = 0u;
  *(_OWORD *)&STACK[0x18A0] = 0u;
  *(_OWORD *)&STACK[0x18B0] = 0u;
  v136 = 1984;
  *(_OWORD *)&STACK[0x1890] = 0u;
  do
  {
    *((_BYTE *)&STACK[0x12C0] + v136) = 0;
    v136 += 16;
  }
  while (v136 != 2480);
  for (i = 2480; i != 2976; i += 16)
    *((_BYTE *)&STACK[0x12C0] + i) = 0;
  for (j = 0; j != 112; j += 56)
  {
    v139 = (char *)&STACK[0x628] + j;
    *((_QWORD *)v139 + 6) = 0;
    *((_DWORD *)v139 + 11) = 0;
    *(_OWORD *)v139 = 0uLL;
    *((_OWORD *)v139 + 1) = 0uLL;
    *(_OWORD *)(v139 + 26) = 0uLL;
  }
  re::ArgumentBufferCacheReferences::ArgumentBufferCacheReferences((re::ArgumentBufferCacheReferences *)&STACK[0x5D0], *(re::Allocator **)(v75[2] + 24));
  v140 = *(_QWORD *)(v75[2] + 24);
  STACK[0x580] = 0;
  STACK[0x570] = 0;
  LODWORD(STACK[0x578]) = 0;
  STACK[0x568] = 0;
  STACK[0x560] = v140;
  v141 = (_anonymous_namespace_ *)re::DynamicArray<re::InstanceConstants>::setCapacity(&STACK[0x560], 1uLL);
  v142 = LODWORD(STACK[0x578]) + 1;
  LODWORD(STACK[0x578]) = v142;
  v143 = STACK[0x570];
  v144 = STACK[0x568];
  if (STACK[0x570] >= STACK[0x568])
  {
    v145 = v143 + 1;
    if (v144 < v143 + 1)
    {
      if (STACK[0x560])
      {
        v146 = 2 * v144;
        if (!v144)
          v146 = 8;
        if (v146 <= v145)
          v147 = v143 + 1;
        else
          v147 = v146;
        re::DynamicArray<re::InstanceConstants>::setCapacity(&STACK[0x560], v147);
        v142 = STACK[0x578];
      }
      else
      {
        re::DynamicArray<re::InstanceConstants>::setCapacity(&STACK[0x560], v145);
        v142 = LODWORD(STACK[0x578]) + 1;
      }
    }
    v143 = STACK[0x570];
  }
  v148 = (_OWORD *)(STACK[0x580] + (v143 << 8));
  *v148 = 0u;
  v148[1] = 0u;
  v148[2] = 0u;
  v148[3] = 0u;
  v148[4] = 0u;
  v148[5] = 0u;
  v148[6] = 0u;
  v148[7] = 0u;
  v148[8] = 0u;
  v148[9] = 0u;
  v148[10] = 0u;
  v148[11] = 0u;
  v148[12] = 0u;
  v148[13] = 0u;
  v148[14] = 0u;
  v148[15] = 0u;
  STACK[0x570] = v143 + 1;
  LODWORD(STACK[0x578]) = v142 + 1;
  LOWORD(STACK[0x538]) = 0;
  STACK[0x540] = 0;
  LODWORD(STACK[0x548]) = 0;
  STACK[0x558] = 0;
  STACK[0x550] = 0;
  v78 = v75[1];
  v149 = *(_BYTE *)(v78 + 56);
  v150 = (*(uint64_t (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v77 + 8) + 64))(**(_QWORD **)(v77 + 8), sel_setCullMode_, v149);
  LOBYTE(STACK[0x53A]) = v149;
  v152 = STACK[0x538];
  LOBYTE(v153) = LOWORD(STACK[0x538]) | 1;
  LOWORD(STACK[0x538]) |= 1u;
  v154 = *(unsigned __int8 *)v78;
  if ((v152 & 2) == 0 || LOBYTE(STACK[0x53B]) != v154)
  {
    v150 = (*(uint64_t (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v77 + 8) + 168))(**(_QWORD **)(v77 + 8), sel_setTriangleFillMode_, *(unsigned __int8 *)v78);
    LOBYTE(STACK[0x53B]) = v154;
    v153 = LOWORD(STACK[0x538]) | 2;
    LOWORD(STACK[0x538]) = v153;
  }
  v155 = *(unsigned __int8 *)(v78 + 59);
  if ((v153 & 4) == 0 || LOBYTE(STACK[0x53C]) != v155 || LOBYTE(STACK[0x53D]) != v155)
  {
    v150 = (*(uint64_t (**)(_QWORD, char *, _QWORD, _QWORD))(*(_QWORD *)(v77 + 8) + 128))(**(_QWORD **)(v77 + 8), sel_setStencilFrontReferenceValue_backReferenceValue_, *(unsigned __int8 *)(v78 + 59), *(unsigned __int8 *)(v78 + 59));
    LOBYTE(STACK[0x53C]) = v155;
    LOBYTE(STACK[0x53D]) = v155;
    LOWORD(STACK[0x538]) |= 4u;
  }
  v156 = atomic_load((unsigned __int8 *)&qword_25411A068);
  if ((v156 & 1) == 0)
  {
    v150 = __cxa_guard_acquire(&qword_25411A068);
    if ((_DWORD)v150)
    {
      re::Defaults::intValue((re::Defaults *)"fallbackRenderingMode", v151, (uint64_t)&byte_25411A060);
      __cxa_guard_release(&qword_25411A068);
    }
  }
  v157 = v75 + 19;
  if (byte_25411A060)
    v157 = &algn_25411A061[3];
  LODWORD(STACK[0x534]) = *v157;
  v158 = *(_QWORD *)(v75[3] + 88);
  if (v158)
  {
    STACK[0x1ED0] = 0;
    STACK[0x1ED8] = (unint64_t)&str_110;
    v80 = (unint64_t)"fallbackRenderingMode";
    v78 = (unint64_t)&STACK[0x1ED0];
    v79 = (uint64_t)&STACK[0x534];
    re::DebugSettingsManager::getWithErrorCode<int>(v158, &STACK[0x1ED0], &STACK[0x534]);
    re::StringID::destroyString((re::StringID *)&STACK[0x1ED0]);
    re::Defaults::intValue((re::Defaults *)"fallbackRenderingMode", v159, (uint64_t)&STACK[0x1ED0]);
    if (LOBYTE(STACK[0x1ED0]))
      v160 = &STACK[0x1ED4];
    else
      v160 = &STACK[0x534];
    LODWORD(STACK[0x534]) = *(_DWORD *)v160;
  }
  v161 = *(int32x2_t **)(v77 + 64);
  v162 = *(_QWORD *)(v77 + 48);
  if (v162 == *(_QWORD *)(v77 + 56))
    goto LABEL_52;
  STACK[0x2C0] = 0;
  *(_DWORD *)&v797[8] = 0;
  v798 = 0;
  STACK[0x2E0] = 0;
  v812 = 0;
  v810 = 0;
  v790 = 0;
  v791 = 0;
  v818 = 0;
  v813 = 0;
  v792 = 0;
  STACK[0x2A8] = 0;
  v800 = 0;
  v801 = 0;
  v811 = 0;
  v820 = 0;
  v809 = 0;
  v789 = 0;
  v819 = 0;
  v799 = 0;
  STACK[0x300] = 0;
  v807 = 0;
  v808 = 0;
  STACK[0x328] = 0;
  v814 = 0;
  *(_QWORD *)v797 = v161[15].u8[0];
  *(_OWORD *)&STACK[0x360] = xmmword_226147290;
  *(_OWORD *)&STACK[0x350] = xmmword_2261472A0;
  vars8 = &STACK[0x498];
  vars0 = &STACK[0x4C8];
  STACK[0x3E0] = (unint64_t)&STACK[0x1EF8];
  STACK[0x380] = (unint64_t)&STACK[0x1F00];
  STACK[0x3C8] = (unint64_t)&STACK[0x1ED9];
  v163 = (_QWORD *)*v75;
  v164 = STACK[0x3A8];
  v776 = (_QWORD *)(STACK[0x3A8] + 336);
  v796 = (_OWORD *)((unint64_t)&STACK[0x1200] | 0x30);
  STACK[0x2F8] = (unint64_t)&STACK[0x1198];
  STACK[0x3E8] = (unint64_t)&STACK[0x11C0];
  v817 = (_QWORD *)(v164 + 144);
  v784 = (_QWORD *)(v164 + 48);
  v783 = (_QWORD *)(v164 + 240);
  v782 = (_QWORD *)(v164 + 96);
  v780 = (_QWORD *)(v164 + 288);
  v781 = (_QWORD *)(v164 + 192);
  v793 = -1;
  STACK[0x3F0] = v77;
  v788 = v126;
  v771 = v163;
  while (2)
  {
    v165 = v163[2];
    if (v165 <= v162)
      goto LABEL_955;
    v166 = v162 >> 7;
    v167 = v163[1];
    if (v167 <= v162 >> 7)
      goto LABEL_956;
    v80 = *(_QWORD *)(*v163 + 8 * v166);
    v802 = v162;
    v79 = v162 & 0x7F;
    v168 = v80 + (v79 << 7);
    re::MeshStats::setCurrentCategory(*(_QWORD *)(v77 + 64), *(int *)v797);
    v169 = *(_QWORD *)(v168 + 64);
    STACK[0x3D0] = v168 + 64;
    v170 = *(_DWORD *)(v168 + 32);
    STACK[0x3D8] = v168 + 32;
    STACK[0x348] = *(_QWORD *)(v169 + 40);
    if (v170 <= 1)
      v170 = 1;
    *(_DWORD *)(*(_QWORD *)(v77 + 64) + 4) += v170;
    STACK[0x528] = 0;
    STACK[0x3C0] = v168;
    v173 = *(_DWORD *)(v168 + 44);
    v172 = (unsigned int *)(v168 + 44);
    v171 = v173;
    if (v173 == -1)
    {
      v182 = 0;
    }
    else
    {
      v174 = *(_anonymous_namespace_ **)(v77 + 40);
      v175 = *((unsigned __int8 *)v75 + 156);
      LOBYTE(STACK[0x526]) = 0;
      shouldCompileSynchronously = (unint64_t)v776;
      v176 = (re *)re::resolveTechniqueVariant((re::MaterialParameterTableLayers *)v169, v776, v174, v171, &STACK[0x528], v175, (unsigned __int8 *)&STACK[0x526]);
      v177 = *(_BYTE *)(v169 + 112);
      v178 = re::useDitherFade(v176);
      v179 = *(_anonymous_namespace_ **)(v77 + 40);
      v180 = *v172;
      v181 = *((unsigned __int8 *)v75 + 156);
      LOBYTE(STACK[0x524]) = 1;
      LOBYTE(STACK[0x525]) = v177 | v178;
      v182 = (uint64_t **)re::resolveTechniqueVariant((re::MaterialParameterTableLayers *)v169, v776, v179, v180, &STACK[0x528], v181, (unsigned __int8 *)&STACK[0x524]);
      v183 = **v182;
      if (*(_BYTE *)(v183 + 2632))
      {
        v184 = *(_QWORD *)(v183 + 2640);
        LODWORD(STACK[0x1210]) = 0;
        *v796 = 0u;
        *(_OWORD *)(((unint64_t)&STACK[0x1200] | 0x30) + 0x10) = 0u;
        *(_OWORD *)(((unint64_t)&STACK[0x1200] | 0x30) + 0x20) = 0u;
        re::MaterialParameterTableLayers::getDebugMode((uint64_t)&STACK[0x520], v169, v184);
        STACK[0x510] = (unint64_t)v182;
        goto LABEL_80;
      }
    }
    LODWORD(STACK[0x1210]) = 0;
    *v796 = 0u;
    *(_OWORD *)(((unint64_t)&STACK[0x1200] | 0x30) + 0x10) = 0u;
    *(_OWORD *)(((unint64_t)&STACK[0x1200] | 0x30) + 0x20) = 0u;
    LOBYTE(STACK[0x520]) = 0;
    STACK[0x510] = (unint64_t)v182;
    if (!v182)
    {
LABEL_94:
      v185 = 0;
      goto LABEL_95;
    }
LABEL_80:
    v185 = *v182;
    if (!*v182)
      goto LABEL_95;
    if (*((_BYTE *)v185 + 40))
      v186 = (uint64_t)(v185 + 6);
    else
      v186 = *v185 + 8;
    if (!v185[11])
      goto LABEL_94;
    v187 = *(_QWORD *)(v186 + 32);
    v188 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v187 ^ (v187 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v187 ^ (v187 >> 30))) >> 27));
    v189 = *(unsigned int *)(v185[12] + 4 * ((v188 ^ (v188 >> 31)) % *((unsigned int *)v185 + 28)));
    if ((_DWORD)v189 == 0x7FFFFFFF)
      goto LABEL_94;
    v190 = v185[13];
    while (*(_QWORD *)(v190 + 32 * v189 + 16) != v187)
    {
      v189 = *(_DWORD *)(v190 + 32 * v189 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v189 == 0x7FFFFFFF)
        goto LABEL_94;
    }
    if (!*(_BYTE *)(*v185 + 2845))
      goto LABEL_94;
    v185 = *(uint64_t **)(v190 + 32 * v189 + 24);
    if (!*((_BYTE *)v185 + 16))
      v185 = 0;
LABEL_95:
    STACK[0x518] = (unint64_t)v185;
    if (LODWORD(STACK[0x534]) != 2)
    {
      v191 = LODWORD(STACK[0x534]) != 1 || v185 == 0;
      if (v191)
        goto LABEL_102;
      STACK[0x510] = (unint64_t)v185;
    }
    STACK[0x518] = 0;
LABEL_102:
    v192 = 0;
    v193 = 0;
    v194 = 0;
    v195 = v80 + (v79 << 7);
    LODWORD(STACK[0xE60]) = *(_DWORD *)(v195 + 88);
    STACK[0x408] = v195 + 4;
    STACK[0x3A0] = v195 + 94;
    STACK[0x398] = v195 + 95;
    STACK[0x390] = v195 + 80;
    STACK[0x378] = v195 + 120;
    STACK[0x3B8] = v195 + 3;
    STACK[0x400] = v195 + 76;
    v196 = STACK[0x348];
    STACK[0x2D8] = STACK[0x348] + 376;
    STACK[0x2D0] = v196 + 488;
    STACK[0x340] = v195 + 56;
    STACK[0x2C8] = v195 + 112;
    STACK[0x338] = v195 + 72;
    v806 = v196 + 904;
    v805 = v196 + 1016;
    v787 = (unsigned __int16 *)(v195 + 12);
    v803 = (unsigned __int16 *)(v195 + 92);
    STACK[0x320] = v195 + 36;
    STACK[0x318] = v195 + 10;
    v804 = (unsigned __int8 *)(v195 + 8);
    v786 = (unsigned int *)(v195 + 24);
    v778 = (unsigned int *)(v195 + 40);
    v775 = (_DWORD *)(v195 + 20);
    v772 = (unsigned __int8 *)(v195 + 2);
    v774 = (unsigned int *)(v195 + 28);
    v785 = (int *)(v195 + 16);
    STACK[0x2A0] = v169 + 88;
    v821 = (uint64_t **)(v195 + 104);
    do
    {
      v78 = v193;
      if ((v192 & 1) != 0)
      {
        v192 = 1;
        goto LABEL_794;
      }
      v79 = *(&STACK[0x510] + v194);
      v197 = *(float *)(v169 + 152);
      v191 = LODWORD(STACK[0x3B0]) == 0;
      STACK[0x3F8] = v79;
      if (v191)
      {
        if (!v79)
        {
LABEL_130:
          v214 = 0;
          v215 = *(_DWORD *)STACK[0x408];
          v216 = *(_DWORD *)(v169 + 156);
          v217 = *(_BYTE *)(v169 + 164);
          v218 = 1;
          LODWORD(shouldCompileSynchronously) = STACK[0x314];
          v219 = *(_DWORD *)(v169 + 120);
          goto LABEL_136;
        }
        shouldCompileSynchronously = re::MaterialTechniqueVariant::shouldCompileSynchronously((re::MaterialTechniqueVariant *)v79);
      }
      else
      {
        if (!v79)
          goto LABEL_130;
        shouldCompileSynchronously = 1;
      }
      v198 = STACK[0x528];
      v199 = v75[3];
      v80 = v79 + 17;
      v200 = atomic_load((unsigned __int8 *)(v79 + 17));
      if (!v200)
      {
        STACK[0x1ED8] = v79;
        STACK[0x1ED0] = v198;
        STACK[0x1EE0] = v199;
        v200 = 2;
        atomic_store(2u, (unsigned __int8 *)v80);
        re::dispatchMaterialPipelineDataCompilation(&STACK[0x1ED0]);
      }
      v201 = shouldCompileSynchronously ^ 1;
      if (v200 != 2)
        v201 = 1;
      if ((v201 & 1) == 0)
      {
        v202.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        v203 = atomic_load((unsigned __int8 *)v80);
        if (v203 == 2)
        {
          rep = v202.__d_.__rep_;
          v205 = 65;
          while (--v205)
          {
            v206 = atomic_load((unsigned __int8 *)v80);
            if (v206 != 2)
              goto LABEL_126;
          }
          do
          {
            v207.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ - rep;
            if (v207.__d_.__rep_ < 64001)
            {
              if (v207.__d_.__rep_ >= 4001)
                sched_yield();
            }
            else
            {
              v208 = std::__libcpp_atomic_monitor((const void *)(v79 + 17));
              v209 = atomic_load((unsigned __int8 *)v80);
              if (v209 != 2)
                break;
              std::__libcpp_atomic_wait((const void *)(v79 + 17), v208);
            }
            v210 = atomic_load((unsigned __int8 *)v80);
          }
          while (v210 == 2);
        }
LABEL_126:
        v200 = atomic_load((unsigned __int8 *)v80);
      }
      if (v200 != 1)
      {
        v192 = 0;
        goto LABEL_794;
      }
      v211 = *(_QWORD *)(v79 + 8);
      v212 = *(_QWORD *)(v211 + 24);
      if (v212)
        v213 = *(unsigned __int16 *)(v212 + 328) + 1;
      else
        v213 = 0;
      v218 = 0;
      v215 = *(_DWORD *)STACK[0x408];
      v216 = *(_DWORD *)(v169 + 156);
      v217 = *(_BYTE *)(v169 + 164);
      v219 = *(_DWORD *)(v169 + 120);
      v220 = *(unsigned __int16 *)(*(_QWORD *)(v211 + 16) + 328);
      if (v220 + 1 > v213)
        v214 = v220 + 1;
      else
        v214 = v213;
LABEL_136:
      v221 = LOBYTE(STACK[0x520]);
      v222 = LOWORD(STACK[0x522]);
      v223 = *(_DWORD *)STACK[0x3D8];
      v224 = *(_DWORD *)(v169 + 160);
      if (*(_BYTE *)STACK[0x3A0])
        v225 = *(_BYTE *)STACK[0x398];
      else
        v225 = 0;
      v226 = *(_QWORD *)STACK[0x390];
      v227 = *(_QWORD *)STACK[0x378];
      LODWORD(STACK[0x1200]) = bswap32((unsigned __int16)v215) & 0xFFFF0000 | HIWORD(v215);
      if (v197 <= 1.0)
        v228 = v197;
      else
        v228 = 1.0;
      if (v228 < 0.0)
        v228 = 0.0;
      *(float *)&STACK[0x1204] = v228;
      LODWORD(STACK[0x1208]) = v216;
      if (v221)
        v79 = v222;
      else
        v79 = 0;
      LODWORD(STACK[0x1210]) = v219;
      LODWORD(STACK[0x120C]) = v79;
      LOBYTE(STACK[0x1224]) = 0;
      LODWORD(STACK[0x1214]) = v214;
      LODWORD(STACK[0x1218]) = 0;
      *(_OWORD *)&STACK[0x1240] = *(_OWORD *)&STACK[0x360];
      *(_OWORD *)&STACK[0x1250] = *(_OWORD *)&STACK[0x350];
      LOBYTE(STACK[0x1225]) = v225;
      LOBYTE(STACK[0x1226]) = v217;
      LODWORD(STACK[0x1220]) = 1065353216;
      LODWORD(STACK[0x121C]) = v223;
      LODWORD(STACK[0x1228]) = v224;
      if (*(_BYTE *)(v169 + 176))
      {
        v230 = *(float32x4_t *)(v169 + 208);
        v229 = vmulq_f32(v230, vsubq_f32(*(float32x4_t *)(v169 + 192), *(float32x4_t *)&STACK[0xCC0]));
        v230.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v229, 2), vaddq_f32(v229, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v229.f32, 1))).f32[0];
      }
      else
      {
        v230 = 0uLL;
      }
      *(float32x4_t *)&STACK[0x1230] = v230;
      STACK[0x1260] = v226;
      STACK[0x1268] = v227;
      STACK[0x6C0] = (unint64_t)&STACK[0x1200];
      v231 = STACK[0x570];
      v80 = *(unsigned int *)STACK[0x3D8];
      v232 = *(_DWORD *)STACK[0x3D8];
      v233 = STACK[0x570] >= v80;
      LODWORD(STACK[0x3B4]) = v78;
      LODWORD(STACK[0x388]) = shouldCompileSynchronously;
      if (v233)
      {
        v80 = v231;
      }
      else
      {
        if (STACK[0x568] < v80)
        {
          re::DynamicArray<re::InstanceConstants>::setCapacity(&STACK[0x560], v80);
          v232 = *(_DWORD *)STACK[0x3D8];
        }
        STACK[0x570] = v80;
        ++LODWORD(STACK[0x578]);
      }
      if (*(_BYTE *)STACK[0x3B8] == 2)
        v77 = v232;
      else
        v77 = 1;
      v234 = (unint64_t *)STACK[0x580];
      if ((int)v77 >= 1)
      {
        v78 = 0;
        shouldCompileSynchronously = STACK[0x580];
        while (v80 != v78)
        {
          v235 = (_QWORD *)*v75;
          v236 = (v78 + *(_DWORD *)STACK[0x400]);
          v237 = *(_QWORD *)(*v75 + 40);
          if (v237 <= v236)
            goto LABEL_937;
          v238 = v236 >> 7;
          v239 = v235[4];
          if (v239 <= v236 >> 7)
            goto LABEL_938;
          v240 = v235[11];
          if (v240 <= v236)
            goto LABEL_939;
          v241 = v235[10];
          if (v241 <= v238)
            goto LABEL_940;
          v242 = v235[14];
          if (v242 <= v236)
            goto LABEL_941;
          v243 = v235[13];
          if (v243 <= v238)
            goto LABEL_942;
          re::ConstantSetupHelper::populateInstanceConstants(shouldCompileSynchronously, *(_QWORD *)(v235[3] + 8 * v238) + ((unint64_t)(((_BYTE)v78 + *(_BYTE *)STACK[0x400]) & 0x7F) << 6), (float32x4_t *)&STACK[0xCC0], *(_DWORD *)(*(_QWORD *)(v235[12] + 8 * v238) + 4 * (((_BYTE)v78 + *(_BYTE *)STACK[0x400]) & 0x7F)), *(float *)(*(_QWORD *)(v235[9] + 8 * v238) + 4 * (((_BYTE)v78 + *(_BYTE *)STACK[0x400]) & 0x7F)));
          if ((v218 & 1) != 0)
          {
            v244 = 0;
          }
          else
          {
            v245 = *(_QWORD *)(STACK[0x3F8] + 8);
            v246 = *(_QWORD *)(v245 + 24);
            if (v246)
              LODWORD(v246) = *(unsigned __int16 *)(v246 + 328) + 1;
            v247 = *(unsigned __int16 *)(*(_QWORD *)(v245 + 16) + 328);
            if (v247 + 1 > (int)v246)
              v244 = v247 + 1;
            else
              v244 = v246;
          }
          v248 = *(_DWORD *)(v169 + 152);
          *(_DWORD *)(shouldCompileSynchronously + 124) = bswap32((unsigned __int16)*(_DWORD *)STACK[0x408]) & 0xFFFF0000 | (unsigned __int16)HIWORD(*(_DWORD *)STACK[0x408]);
          *(_DWORD *)(shouldCompileSynchronously + 128) = v248;
          *(_DWORD *)(shouldCompileSynchronously + 136) = v79;
          *(_DWORD *)(shouldCompileSynchronously + 140) = v244;
          *(_DWORD *)(shouldCompileSynchronously + 132) = v126;
          ++v78;
          shouldCompileSynchronously += 256;
          if (v77 == v78)
            goto LABEL_175;
        }
        STACK[0x1E60] = 0;
        *(_OWORD *)&STACK[0x1F10] = 0u;
        *(_OWORD *)&STACK[0x1F00] = 0u;
        *(_OWORD *)&STACK[0x1EF0] = 0u;
        *(_OWORD *)&STACK[0x1EE0] = 0u;
        *(_OWORD *)&STACK[0x1ED0] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(STACK[0x1190]) = 136315906;
        STACK[0x1194] = (unint64_t)"operator[]";
        LOWORD(STACK[0x119C]) = 1024;
        LODWORD(STACK[0x119E]) = 789;
        LOWORD(STACK[0x11A2]) = 2048;
        STACK[0x11A4] = v80;
        LOWORD(STACK[0x11AC]) = 2048;
        STACK[0x11AE] = v80;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_937:
        re::internal::assertLog((re::internal *)6, (uint64_t)v151, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 296, v236, v237);
        _os_crash();
        __break(1u);
LABEL_938:
        re::internal::assertLog((re::internal *)6, (uint64_t)v151, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v238, v239);
        _os_crash();
        __break(1u);
LABEL_939:
        re::internal::assertLog((re::internal *)6, (uint64_t)v151, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 296, v236, v240);
        _os_crash();
        __break(1u);
LABEL_940:
        re::internal::assertLog((re::internal *)6, (uint64_t)v151, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v238, v241);
        _os_crash();
        __break(1u);
LABEL_941:
        re::internal::assertLog((re::internal *)6, (uint64_t)v151, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 296, v236, v242);
        _os_crash();
        __break(1u);
LABEL_942:
        re::internal::assertLog((re::internal *)6, (uint64_t)v151, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v238, v243);
        _os_crash();
        __break(1u);
        goto LABEL_943;
      }
LABEL_175:
      STACK[0x6D8] = (unint64_t)v234;
      shouldCompileSynchronously = STACK[0x3D0];
      v249 = *(_QWORD *)(*(_QWORD *)STACK[0x3D0] + 56);
      if (v249)
        v250 = v249 + 152;
      else
        v250 = 0;
      STACK[0x758] = v250;
      v251 = *(_QWORD **)(*(_QWORD *)shouldCompileSynchronously + 64);
      if (v251)
        v251 = (_QWORD *)*v251;
      v77 = STACK[0x3F0];
      v234 = &STACK[0x1E60];
      v79 = STACK[0x3F8];
      STACK[0x778] = (unint64_t)v251;
      v252 = *(_QWORD *)(*(_QWORD *)shouldCompileSynchronously + 48);
      if (v252)
        v253 = v252 + 152;
      else
        v253 = 0;
      STACK[0x750] = v253;
      v254 = *(_QWORD *)(*(_QWORD *)shouldCompileSynchronously + 72);
      if (v254)
        v255 = v254 + 152;
      else
        v255 = 0;
      STACK[0x760] = v255;
      v256 = *(_QWORD **)(*(_QWORD *)shouldCompileSynchronously + 56);
      if (v256)
      {
        v257 = (unint64_t)(v256 + 33);
        v258 = v256[45];
        v259 = v256[43];
        v260 = v256[50];
        v256 = (_QWORD *)v256[48];
      }
      else
      {
        v258 = 0;
        v259 = 0;
        v260 = 0;
        v257 = 0;
      }
      STACK[0xF30] = v258;
      STACK[0xF38] = v259;
      STACK[0xF40] = v260;
      STACK[0xF48] = (unint64_t)v256;
      LODWORD(STACK[0xF50]) = 0;
      STACK[0xF58] = v257;
      v261 = *(_QWORD **)(*(_QWORD *)shouldCompileSynchronously + 48);
      if (v261)
      {
        v262 = (unint64_t)(v261 + 33);
        v263 = v261[45];
        v264 = v261[43];
        v265 = v261[50];
        v261 = (_QWORD *)v261[48];
      }
      else
      {
        v263 = 0;
        v264 = 0;
        v265 = 0;
        v262 = 0;
      }
      STACK[0xF00] = v263;
      STACK[0xF08] = v264;
      STACK[0xF10] = v265;
      STACK[0xF18] = (unint64_t)v261;
      LODWORD(STACK[0xF20]) = 0;
      STACK[0xF28] = v262;
      v266 = *(_QWORD **)(*(_QWORD *)shouldCompileSynchronously + 72);
      if (v266)
      {
        v267 = (unint64_t)(v266 + 33);
        v268 = v266[45];
        v269 = v266[43];
        v270 = v266[50];
        v266 = (_QWORD *)v266[48];
      }
      else
      {
        v268 = 0;
        v269 = 0;
        v270 = 0;
        v267 = 0;
      }
      STACK[0xFF0] = v268;
      STACK[0xFF8] = v269;
      STACK[0x1000] = v270;
      STACK[0x1008] = (unint64_t)v266;
      LODWORD(STACK[0x1010]) = 0;
      STACK[0x1018] = v267;
      v271 = *(_QWORD **)shouldCompileSynchronously;
      v272 = *(_QWORD *)(*(_QWORD *)shouldCompileSynchronously + 56);
      if (v272)
        v273 = v272 + 680;
      else
        v273 = 0;
      STACK[0x1060] = v273;
      v274 = v271[8];
      if (v274)
        v274 = *(_QWORD *)(v274 + 8);
      STACK[0x1078] = v274;
      v275 = v271[6];
      if (v275)
        v276 = v275 + 680;
      else
        v276 = 0;
      v277 = v271[9];
      if (v277)
        v278 = v277 + 680;
      else
        v278 = 0;
      STACK[0x1058] = v276;
      STACK[0x1070] = v278;
      v279 = v271[7];
      if (v279)
      {
        v280 = v279 + 792;
        v281 = *(_QWORD *)(v279 + 888);
        v279 = *(_QWORD *)(v279 + 872);
      }
      else
      {
        v281 = 0;
        v280 = 0;
      }
      STACK[0xD80] = v281;
      STACK[0xD88] = v279;
      STACK[0xD90] = v280;
      v282 = *(_QWORD *)(*(_QWORD *)shouldCompileSynchronously + 48);
      if (v282)
      {
        v283 = v282 + 792;
        v284 = *(_QWORD *)(v282 + 888);
        v282 = *(_QWORD *)(v282 + 872);
      }
      else
      {
        v284 = 0;
        v283 = 0;
      }
      STACK[0xD68] = v284;
      STACK[0xD70] = v282;
      STACK[0xD78] = v283;
      v285 = *(_QWORD *)(*(_QWORD *)shouldCompileSynchronously + 72);
      if (v285)
      {
        v286 = v285 + 792;
        v287 = *(_QWORD *)(v285 + 888);
        v285 = *(_QWORD *)(v285 + 872);
      }
      else
      {
        v287 = 0;
        v286 = 0;
      }
      STACK[0xD98] = v287;
      STACK[0xDA0] = v285;
      STACK[0xDA8] = v286;
      if (*(_BYTE *)STACK[0x3B8] == 1)
      {
        v288 = atomic_load((unsigned __int8 *)&qword_25411A070);
        if ((v288 & 1) == 0 && __cxa_guard_acquire(&qword_25411A070))
        {
          re::Defaults::BOOLValue((re::Defaults *)"skipDrawCallHandlers", v762, (char *)&STACK[0x1ED0]);
          if (LOBYTE(STACK[0x1ED0]))
            v763 = STACK[0x1ED1];
          else
            v763 = 0;
          _MergedGlobals_387 = v763;
          __cxa_guard_release(&qword_25411A070);
        }
        v289 = *(_QWORD *)(v77 + 64);
        v290 = (unsigned __int8 *)STACK[0x318];
        if (*(_BYTE *)(v289 + 120) != 3)
        {
          *(_BYTE *)(v289 + 120) = 3;
          *(_QWORD *)(v289 + 96) = v289 + 56;
          *(_QWORD *)(v289 + 104) = v289 + 60;
          *(_QWORD *)(v289 + 112) = v289 + 64;
        }
        re::EncoderState::setVertexAmplificationCountForState((_anonymous_namespace_ *)&STACK[0x538], (_anonymous_namespace_ *)*((unsigned __int8 *)v75 + 108), *(unsigned __int8 *)(v75[3] + 302), v75[1] + 8, *(unsigned __int8 *)STACK[0x320], *v290, v77);
        shouldCompileSynchronously = v75[1];
        v291 = v75[4];
        v292 = (_QWORD *)v75[8];
        if (v292)
        {
          STACK[0x1ED0] = v292[197];
          STACK[0x1ED8] = 0;
          re::DynamicArray<re::PatchHandler>::add((_anonymous_namespace_ *)(v292 + 197), (__n128 *)&STACK[0x1ED0]);
          v79 = v292[201] + 16 * v292[199] - 16;
        }
        else
        {
          v79 = 0;
        }
        v296 = *(_DWORD *)(v169 + 152);
        v297 = *(_BYTE *)STACK[0x338];
        v80 = *((unsigned __int8 *)v75 + 156);
        re::resolveStencilInfo((uint64_t)&STACK[0x1ED0], STACK[0x3C0], v75[5], 0);
        LODWORD(STACK[0x374]) = STACK[0x374] & 0xFFFFFF00 | LOBYTE(STACK[0x1EE0]);
        if (!_MergedGlobals_387)
        {
          v298.i32[0] = STACK[0x1ED0];
          v300 = STACK[0x1ED4];
          v299.i32[0] = STACK[0x1ED8];
          v301 = STACK[0x1EDC];
          v302 = *(_QWORD *)(v77 + 64);
          v303 = **v821;
          STACK[0x1ED0] = (unint64_t)&STACK[0x1020];
          STACK[0x1ED8] = (unint64_t)&STACK[0xDB0];
          STACK[0x1EE0] = (unint64_t)&STACK[0xD20];
          STACK[0x1EE8] = (unint64_t)&STACK[0x710];
          STACK[0x1EF0] = shouldCompileSynchronously + 8;
          STACK[0x1EF8] = v291;
          STACK[0x1F00] = STACK[0x2A0];
          STACK[0x1F08] = v79;
          LODWORD(STACK[0x1F10]) = vmovn_s16((int16x8_t)vmovl_u8(v298)).u32[0];
          LODWORD(STACK[0x1F14]) = v300;
          LODWORD(STACK[0x1F18]) = vmovn_s16((int16x8_t)vmovl_u8(v299)).u32[0];
          LODWORD(STACK[0x1F1C]) = v301;
          LODWORD(STACK[0x1F20]) = STACK[0x374];
          LODWORD(STACK[0x1F24]) = v296;
          LOBYTE(STACK[0x1F28]) = v297;
          LOWORD(STACK[0x1F29]) = v80;
          STACK[0x1F30] = v302;
          STACK[0x1F38] = (unint64_t)&STACK[0x538];
          (*(void (**)(void))(v303 + 16))();
          if (STACK[0x2F0])
          {
            LOBYTE(STACK[0x4E8]) = 0;
            LOBYTE(STACK[0x4C0]) = 0;
            LOBYTE(STACK[0x458]) = 0;
            v753 = v75[5];
            v754 = *(_BYTE *)(v753 + 16);
            *(_OWORD *)&STACK[0x440] = *(_OWORD *)v753;
            LOBYTE(STACK[0x450]) = v754;
            re::DrawCallRecorderGroup::recordEncodedDrawCall(STACK[0x2F0], STACK[0x3C0], 0, (unsigned __int8 *)&STACK[0x4E8], (unsigned __int8 *)&STACK[0x4C0], (uint64_t)&STACK[0x458], (uint64_t)&STACK[0x440], 0, 1);
            if (LOBYTE(STACK[0x458]) && STACK[0x498])
            {
              if (STACK[0x4B8])
                (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x498] + 40))(STACK[0x498]);
              STACK[0x4B8] = 0;
              STACK[0x4A0] = 0;
              STACK[0x4A8] = 0;
              STACK[0x498] = 0;
              ++LODWORD(STACK[0x4B0]);
            }
            if (LOBYTE(STACK[0x4C0]) && STACK[0x4C8])
            {
              if ((STACK[0x4D0] & 1) != 0)
                (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0x4C8] + 40))(STACK[0x4C8], STACK[0x4D8]);
              *(_OWORD *)&STACK[0x4C8] = 0u;
              *(_OWORD *)&STACK[0x4D8] = 0u;
            }
            if (LOBYTE(STACK[0x4E8]) && STACK[0x4F0])
            {
              if ((STACK[0x4F8] & 1) != 0)
                (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0x4F0] + 40))(STACK[0x4F0], STACK[0x500]);
              *(_OWORD *)&STACK[0x4F0] = 0u;
              *(_OWORD *)&STACK[0x500] = 0u;
            }
          }
        }
        re::ShaderResourceBindState::reset((uint64_t)&STACK[0x12C0]);
        v304 = *(_QWORD *)(v77 + 64);
        *(_QWORD *)(v304 + 96) = 0;
        *(_QWORD *)(v304 + 104) = 0;
        *(_BYTE *)(v304 + 120) = 0;
        *(_QWORD *)(v304 + 112) = 0;
        v192 = 1;
        goto LABEL_230;
      }
      if ((v218 & 1) != 0)
      {
        v192 = 0;
LABEL_230:
        v78 = LODWORD(STACK[0x3B4]);
        goto LABEL_794;
      }
      STACK[0x1190] = (unint64_t)&off_24ED36808;
      v293 = STACK[0x2F8];
      *(_DWORD *)(v293 + 24) = 0;
      *(_QWORD *)(v293 + 8) = 0;
      *(_QWORD *)(v293 + 16) = 0;
      *(_QWORD *)v293 = 0;
      *(_OWORD *)&STACK[0x11B8] = 0u;
      *(_OWORD *)&STACK[0x11C8] = 0u;
      *(_OWORD *)&STACK[0x11D8] = 0u;
      *(_OWORD *)&STACK[0x11E8] = 0u;
      STACK[0x11F8] = 0;
      if (*(_BYTE *)(v79 + 16))
      {
        v294 = *(_QWORD **)v79;
        if (*(_BYTE *)(*(_QWORD *)v79 + 40))
          v295 = (_anonymous_namespace_ *)(v294 + 6);
        else
          v295 = (_anonymous_namespace_ *)(*v294 + 8);
        Permutation = (_anonymous_namespace_ *)re::FunctionConstantsEnumerator::createPermutation(v295, STACK[0x528], v294[4], v294[3], (uint64_t)&STACK[0x1E60]);
        v307 = 8 * STACK[0x1E70];
        v308 = (_anonymous_namespace_ *)re::DynamicArray<BOOL>::setCapacity((_QWORD *)STACK[0x2F8], v307);
        ++LODWORD(STACK[0x11B0]);
        v309 = STACK[0x11B8];
        v310 = STACK[0x1E70];
        if (STACK[0x1E70])
        {
          for (k = 0; STACK[0x1E70] > k; ++k)
          {
            v312 = STACK[0x1E80] + (k << 6);
            re::DynamicString::DynamicString((re::DynamicString *)&STACK[0x1ED0], (const re::DynamicString *)v312);
            LODWORD(STACK[0x1EF0]) = *(_DWORD *)(v312 + 32);
            re::FixedArray<unsigned char>::FixedArray((_QWORD *)STACK[0x3E0], (uint64_t *)(v312 + 40));
            *(_QWORD *)(v309 + 8 * k) = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)&STACK[0x1ED0]);
            re::DynamicString::rfind((uint64_t)&STACK[0x1ED0], 58, &STACK[0x1088]);
            v313 = STACK[0x1ED8];
            if (LOBYTE(STACK[0x1088]))
            {
              if ((v313 & 1) != 0)
                v314 = STACK[0x1EE0];
              else
                v314 = STACK[0x3C8];
              v315 = *(char *)(v314 + STACK[0x1090] + 1);
              if (!*(_BYTE *)(v314 + STACK[0x1090] + 1))
                goto LABEL_253;
              v316 = *(_BYTE *)(v314 + STACK[0x1090] + 2);
              if (v316)
              {
                v317 = (unsigned __int8 *)(v314 + STACK[0x1090] + 3);
                do
                {
                  v315 = 31 * v315 + v316;
                  v318 = *v317++;
                  v316 = v318;
                }
                while (v318);
              }
            }
            else
            {
              if ((v313 & 1) != 0)
              {
                v319 = (_BYTE *)STACK[0x1EE0];
                if (!STACK[0x1EE0])
                {
                  v315 = 0x7FFFFFFFFFFFFFFFLL;
                  goto LABEL_253;
                }
                LOBYTE(v315) = *v319;
              }
              else
              {
                v315 = v313 >> 8;
                v319 = (_BYTE *)STACK[0x3C8];
              }
              if (!(_BYTE)v315)
              {
                v315 = 0;
                goto LABEL_253;
              }
              v315 = (char)v315;
              v320 = v319[1];
              if (v320)
              {
                v321 = v319 + 2;
                do
                {
                  v315 = 31 * v315 + v320;
                  v322 = *v321++;
                  v320 = v322;
                }
                while (v322);
              }
            }
            v315 &= ~0x8000000000000000;
LABEL_253:
            STACK[0x1168] = v315;
            LOWORD(STACK[0x1088]) = 8 * k;
            LOWORD(STACK[0x108A]) = 8;
            re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::addNew((_anonymous_namespace_ *)STACK[0x3E8], &STACK[0x1168], (int *)&STACK[0x1088]);
            if (STACK[0x1EF8])
            {
              if (STACK[0x1F00])
              {
                (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0x1EF8] + 40))(STACK[0x1EF8], STACK[0x1F08]);
                v323 = (_QWORD *)STACK[0x380];
                *v323 = 0;
                v323[1] = 0;
              }
              STACK[0x1EF8] = 0;
            }
            if (STACK[0x1ED0] && (STACK[0x1ED8] & 1) != 0)
              (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0x1ED0] + 40))(STACK[0x1ED0], STACK[0x1EE0]);
          }
        }
        STACK[0x770] = (unint64_t)&STACK[0x1190];
        v305 = STACK[0x11F0];
        re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&STACK[0x1E60]);
        v79 = STACK[0x3F8];
      }
      else
      {
        v305 = 0;
      }
      STACK[0x730] = **(_QWORD **)v79 + 320;
      STACK[0x738] = **(_QWORD **)v79 + 1448;
      STACK[0x740] = STACK[0x2D8];
      STACK[0x748] = *(_QWORD *)(STACK[0x348] + 16) + 400;
      if (*(_QWORD *)(*(_QWORD *)shouldCompileSynchronously + 80))
      {
        v80 = *(unsigned int *)STACK[0x3D8];
        v78 = STACK[0x790];
        if (STACK[0x790] >= v80)
        {
          if (STACK[0x790] <= v80)
            goto LABEL_274;
        }
        else
        {
          if (STACK[0x788] < v80)
          {
            re::DynamicArray<re::ConstantSource const*>::setCapacity(&STACK[0x780], *(unsigned int *)STACK[0x3D8]);
            v78 = STACK[0x790];
          }
          if (v78 < v80)
          {
            v324 = (void *)(STACK[0x7A0] + 8 * v78);
            v325 = STACK[0x7A0] + 8 * v80 - (_QWORD)v324;
            if (v325 >= 1)
              bzero(v324, 8 * (((unint64_t)v325 >> 3) - ((unint64_t)v325 > 7)) + 8);
          }
        }
        STACK[0x790] = v80;
        ++LODWORD(STACK[0x798]);
        v78 = v80;
        v80 = *(unsigned int *)STACK[0x3D8];
LABEL_274:
        if (v80)
        {
          v326 = 0;
          v327 = *(_DWORD *)STACK[0x400];
          while (1)
          {
            v328 = *v75;
            v329 = (v327 + v326);
            v330 = *(_QWORD *)(*v75 + 64);
            if (v330 <= v329)
              break;
            v331 = v329 >> 7;
            v332 = *(_QWORD *)(v328 + 56);
            if (v332 <= v329 >> 7)
              goto LABEL_944;
            if (v78 == v326)
              goto LABEL_945;
            *(_QWORD *)(STACK[0x7A0] + 8 * v326) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v328 + 48) + 8 * v331)
                                                             + 8 * (((_BYTE)v327 + (_BYTE)v326) & 0x7F));
            if (v80 == ++v326)
              goto LABEL_280;
          }
LABEL_943:
          re::internal::assertLog((re::internal *)6, (uint64_t)v151, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 296, v329, v330);
          _os_crash();
          __break(1u);
LABEL_944:
          re::internal::assertLog((re::internal *)6, (uint64_t)v151, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v331, v332);
          _os_crash();
          __break(1u);
LABEL_945:
          STACK[0x1088] = 0;
          *(_OWORD *)&STACK[0x1F10] = 0u;
          *(_OWORD *)&STACK[0x1F00] = 0u;
          *(_OWORD *)&STACK[0x1EF0] = 0u;
          *(_OWORD *)&STACK[0x1EE0] = 0u;
          *(_OWORD *)&STACK[0x1ED0] = 0u;
          v83 = MEMORY[0x24BDACB70];
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(STACK[0x1E60]) = 136315906;
          *(unint64_t *)((char *)v234 + 4) = (unint64_t)"operator[]";
          LOWORD(STACK[0x1E6C]) = 1024;
          *(_DWORD *)((char *)v234 + 14) = 789;
          LOWORD(STACK[0x1E72]) = 2048;
          *(unint64_t *)((char *)v234 + 20) = v78;
          LOWORD(STACK[0x1E7C]) = 2048;
          *(unint64_t *)((char *)v234 + 30) = v78;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_946:
          re::internal::assertLog((re::internal *)6, v613, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 242, v77, 2);
          _os_crash();
          __break(1u);
          goto LABEL_947;
        }
      }
LABEL_280:
      v815 = v305;
      v333 = (_QWORD *)STACK[0x348];
      v334 = *(_QWORD **)(STACK[0x348] + 16);
      v335 = (unint64_t)(v334 + 64);
      v336 = v334[76];
      v337 = v334[74];
      v338 = v334[81];
      v339 = v334[79];
      STACK[0xED8] = v337;
      STACK[0xEE0] = v338;
      STACK[0xEE8] = v339;
      LODWORD(STACK[0xEF0]) = 0;
      STACK[0xEF8] = v335;
      v340 = v333[71];
      v341 = v333[78];
      v342 = v333[76];
      STACK[0xEA0] = v333[73];
      STACK[0xEA8] = v340;
      STACK[0xEB0] = v341;
      STACK[0xEB8] = v342;
      LODWORD(STACK[0xEC0]) = 0;
      STACK[0xED0] = v336;
      STACK[0xEC8] = STACK[0x2D0];
      v343 = (_QWORD **)STACK[0x340];
      v344 = *(re::AttributeTable **)STACK[0x340];
      v345 = v344;
      do
      {
        v346 = v345;
        v345 = (re::AttributeTable *)*((_QWORD *)v345 + 1);
      }
      while (v345 && !*((_QWORD *)v346 + 9));
      STACK[0xDD8] = (unint64_t)v346 + 48;
      STACK[0xDB0] = re::AttributeTable::buffers(v344);
      STACK[0xDB8] = v347;
      re::resolveStencilInfo((uint64_t)&STACK[0x42F], STACK[0x3C0], v75[5], v79);
      v348 = *(_QWORD *)shouldCompileSynchronously;
      v349 = **(float ***)v79;
      v350 = v349[28];
      v351 = v349[29];
      v352 = v349[30];
      v353 = *(_QWORD *)(*(_QWORD *)shouldCompileSynchronously + 48);
      if (v353)
      {
        v354 = *(unsigned __int8 *)(v353 + 1092);
        if (*(_BYTE *)(v353 + 1092))
        {
          a78 = *(float *)(v353 + 1096);
          a77 = *(float *)(v353 + 1100);
          v354 = 1;
          v71 = *(float *)(v353 + 1104);
        }
      }
      else
      {
        v354 = 0;
      }
      v355 = *(_QWORD *)(v348 + 56);
      if (v355)
      {
        v356 = *(unsigned __int8 *)(v355 + 1092);
        if (*(_BYTE *)(v355 + 1092))
        {
          a76 = *(float *)(v355 + 1096);
          v70 = *(float *)(v355 + 1100);
          v356 = 1;
          v72 = *(float *)(v355 + 1104);
        }
      }
      else
      {
        v356 = 0;
      }
      v357 = *(_QWORD *)(v348 + 72);
      if (v357 && *(_BYTE *)(v357 + 1092))
      {
        v350 = *(float *)(v357 + 1096);
        v351 = *(float *)(v357 + 1100);
        v352 = *(float *)(v357 + 1104);
      }
      if (v356)
      {
        v352 = v72;
        v351 = v70;
        v350 = a76;
      }
      if (v354)
        v358 = v71;
      else
        v358 = v352;
      if (v354)
        v359 = a77;
      else
        v359 = v351;
      if (v354)
        v360 = a78;
      else
        v360 = v350;
      v361 = *v343;
      v362 = *(_QWORD *)(STACK[0x3F8] + 8);
      v363 = *v343;
      if (v362)
      {
        v364 = (id)(v362 + 8);
        v363 = *v343;
      }
      do
      {
        v365 = v363;
        v363 = (_QWORD *)v363[1];
      }
      while (v363 && !v365[9]);
      v366 = v365[12];
      v367 = *(_QWORD *)(v362 + 16);
      v368 = re::MaterialTechnique::combinedBuffersHash(*(re::MaterialTechnique **)STACK[0x3F8]);
      v369 = *(_QWORD *)(*(_QWORD *)STACK[0x3D0] + 48);
      v370 = 0x9E3779B97F4A7C17;
      if (v369)
        v370 = ((*(_QWORD *)(v369 + 312)
               - 0x61C8864680B583E9
               + (*(_QWORD *)(v369 + 136) << 6)
               + (*(_QWORD *)(v369 + 136) >> 2)) ^ *(_QWORD *)(v369 + 136))
             - 0x61C8864680B583E9;
      v371 = (v366 - 0x61C8864680B583E9 + (v368 << 6) + (v368 >> 2)) ^ v368;
      v372 = ((v370 << 6)
            - 0x61C8864680B583E9
            + (v370 >> 2)
            + (((v371 << 6) - 0x61C8864680B583E9 + (v371 >> 2) + *(_QWORD *)(v367 + 288)) ^ v371)) ^ v370;
      v373 = STACK[0x3F8] + 216;
      STACK[0x1ED0] = (unint64_t)v817;
      STACK[0x1ED8] = v373;
      if (!*v817)
        goto LABEL_318;
      v374 = *(unsigned int *)(*(_QWORD *)(STACK[0x3A8] + 152) + 4 * (v372 % *(unsigned int *)(STACK[0x3A8] + 168)));
      if ((_DWORD)v374 == 0x7FFFFFFF)
        goto LABEL_318;
      v375 = *(_QWORD *)(STACK[0x3A8] + 160);
      while (*(_QWORD *)(v375 + 24 * v374 + 8) != v372)
      {
        LODWORD(v374) = *(_DWORD *)(v375 + 24 * v374) & 0x7FFFFFFF;
        if ((_DWORD)v374 == 0x7FFFFFFF)
          goto LABEL_318;
      }
      v376 = *(_QWORD *)(v375 + 24 * v374 + 16);
      if (!v376)
      {
LABEL_318:
        v376 = re::MaterialTechniqueVariant::completeResolution<re::AttributeResolution,re::AttributeTable>((re *)STACK[0x3F8], (uint64_t *)&STACK[0x1ED0], v361, STACK[0x3C0], v372);
        v373 = STACK[0x1ED8];
      }
      shouldCompileSynchronously = STACK[0x3D0];
      v79 = *(_QWORD *)(v376 + 40);
      STACK[0x308] = *(_QWORD *)(v376 + 24);
      STACK[0x1E60] = v372;
      v377 = *(_DWORD *)(v373 + 28);
      re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(v373, &STACK[0x1E60]);
      if (v377 != *(_DWORD *)(v373 + 28))
        ++*(_DWORD *)v376;

      v379 = *(_QWORD **)shouldCompileSynchronously;
      v380 = *(re::MaterialParameterTable **)(*(_QWORD *)shouldCompileSynchronously + 56);
      if (v380)
      {
        v381 = re::MaterialParameterTable::hash(v380);
        v379 = *(_QWORD **)shouldCompileSynchronously;
      }
      else
      {
        v381 = 0;
      }
      v77 = STACK[0x3F0];
      v382 = v379[6];
      if (v382)
      {
        v382 = re::MaterialParameterTable::hash((re::MaterialParameterTable *)v382);
        v379 = *(_QWORD **)shouldCompileSynchronously;
      }
      v383 = v379[10];
      if (v383)
        v383 = (*(_QWORD *)(v383 + 248)
              - 0x61C8864680B583E9
              + (*(_QWORD *)(v383 + 72) << 6)
              + (*(_QWORD *)(v383 + 72) >> 2)) ^ *(_QWORD *)(v383 + 72);
      v384 = ((v382 << 6) - 0x61C8864680B583E9 + (v382 >> 2) + v383) ^ v382;
      STACK[0x2B0] = v381;
      v385 = (v381 - 0x61C8864680B583E9 + (v384 << 6) + (v384 >> 2)) ^ v384;
      v80 = v379[8];
      if (v80)
      {
        if (*(_QWORD *)v80)
          v386 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v80 + 8))(*(_QWORD *)v80);
        else
          v386 = 0;
        v387 = *(_QWORD *)(v80 + 8);
        v388 = 0x9E3779B97F4A7C17;
        v80 = 0x9E3779B97F4A7C17;
        if (v387)
          v388 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v387 + 8))(v387) - 0x61C8864680B583E9;
        v385 ^= (v385 << 6) - 0x61C8864680B583E9 + (v385 >> 2) + (((v386 >> 2) + (v386 << 6) + v388) ^ v386);
        v379 = *(_QWORD **)shouldCompileSynchronously;
      }
      v389 = (re::MaterialParameterTable *)v379[9];
      if (v389)
        v389 = (re::MaterialParameterTable *)re::MaterialParameterTable::hash(v389);
      if (*(unsigned __int8 *)STACK[0x2C8] == 255)
      {
        STACK[0x2E8] = 0;
      }
      else
      {
        v390 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)STACK[0x2C8] ^ (*(_QWORD *)STACK[0x2C8] >> 30));
        STACK[0x2E8] = (0x94D049BB133111EBLL * (v390 ^ (v390 >> 27))) ^ ((0x94D049BB133111EBLL * (v390 ^ (v390 >> 27))) >> 31);
      }
      v391 = ((unint64_t)v389 + 64 * v385 + (v385 >> 2) - 0x61C8864680B583E9) ^ v385;
      v392 = *(uint64_t **)STACK[0x340];
      if (STACK[0x3F8] == STACK[0x300])
      {
        v408 = v392[2] != v807 || v391 != v808;
        if (*(unsigned __int8 *)STACK[0x338] == v814)
        {
          if (!v408)
          {
            if (v793 == ((*(unsigned __int16 *)STACK[0x3C0] >> 1) & 7) && STACK[0x328] == STACK[0x2E8])
            {
              STACK[0x2E8] = STACK[0x328];
              goto LABEL_571;
            }
LABEL_400:
            *((_QWORD *)&v768 + 1) = v75[22];
            *(_QWORD *)&v768 = v75[20];
            v441 = (unsigned __int16 *)STACK[0x3C0];
            re::getOrCreateEncoderStates((uint64_t)&STACK[0x1ED0], (const char ****)STACK[0x300], *(_QWORD *)(v77 + 16), v75[3], v75[4], (_BYTE *)STACK[0x3C0], v392, v378, v79, STACK[0x308], (unsigned __int8 *)&STACK[0x42F], STACK[0x388], v768, v75[21]);
            if (LOBYTE(STACK[0x1ED0]))
            {
              re::Optional<re::DrawCallEncoderStates>::operator=((uint64_t)&STACK[0xCD0], (void **)&STACK[0x1ED0]);
              v814 = *(_BYTE *)STACK[0x338];
              v793 = (*v441 >> 1) & 7;
              re::Optional<re::DrawCallEncoderStates>::~Optional((uint64_t)&STACK[0x1ED0]);
              goto LABEL_571;
            }
            re::Optional<re::DrawCallEncoderStates>::~Optional((uint64_t)&STACK[0x1ED0]);
            v192 = 0;
            v79 = STACK[0x328];
            goto LABEL_361;
          }
        }
        else if (!v408)
        {
          goto LABEL_400;
        }
      }
      *((_QWORD *)&v767 + 1) = v75[22];
      *(_QWORD *)&v767 = v75[20];
      v393 = (unsigned __int16 *)STACK[0x3C0];
      re::getOrCreateEncoderStates((uint64_t)&STACK[0x1088], (const char ****)STACK[0x3F8], *(_QWORD *)(v77 + 16), v75[3], v75[4], (_BYTE *)STACK[0x3C0], v392, v378, v79, STACK[0x308], (unsigned __int8 *)&STACK[0x42F], STACK[0x388], v767, v75[21]);
      if (LOBYTE(STACK[0x1088]))
      {
        v808 = v391;
        re::Optional<re::DrawCallEncoderStates>::operator=((uint64_t)&STACK[0xCD0], (void **)&STACK[0x1088]);
        v394 = 0;
        v395 = 0;
        v807 = *(_QWORD *)(*(_QWORD *)STACK[0x340] + 16);
        v814 = *(_BYTE *)STACK[0x338];
        v396 = *v393;
        v397 = (_QWORD *)STACK[0x348];
        STACK[0x1050] = *(_QWORD *)(STACK[0x348] + 16) + 928;
        STACK[0x1048] = v806;
        v398 = v397[2];
        STACK[0xD58] = *(_QWORD *)(v398 + 1120);
        STACK[0xD60] = v398 + 1040;
        v399 = v397[137];
        STACK[0xD38] = v397[139];
        STACK[0xD40] = v399;
        v793 = (v396 >> 1) & 7;
        STACK[0xD50] = *(_QWORD *)(v398 + 1136);
        STACK[0xD48] = v805;
        STACK[0x328] = *(_QWORD *)(v77 + 72);
        do
        {
          v400 = *(&STACK[0x1020] + v394);
          if (v400)
          {
            v401 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v400 + 8))(v400);
          }
          else
          {
            v402 = 0x94D049BB133111EBLL
                 * ((0xBF58476D1CE4E5B9 * (v394 ^ (v394 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v394 ^ (v394 >> 30))) >> 27));
            v401 = v402 ^ (v402 >> 31);
          }
          v395 ^= (v395 << 6) - 0x61C8864680B583E9 + (v395 >> 2) + v401;
          ++v394;
        }
        while (v394 != 12);
        v403 = re::MaterialTechnique::combinedTexturesHash(*(re::MaterialTechnique **)STACK[0x3F8]);
        v404 = *(_QWORD **)STACK[0x3D0];
        v405 = v404[6];
        if (v405)
          v406 = (*(_QWORD *)(v405 + 736)
                - 0x61C8864680B583E9
                + (*(_QWORD *)(v405 + 600) << 6)
                + (*(_QWORD *)(v405 + 600) >> 2)) ^ *(_QWORD *)(v405 + 600);
        else
          v406 = 0;
        v409 = v404[7];
        if (v409)
          v410 = (*(_QWORD *)(v409 + 736)
                - 0x61C8864680B583E9
                + (*(_QWORD *)(v409 + 600) << 6)
                + (*(_QWORD *)(v409 + 600) >> 2)) ^ *(_QWORD *)(v409 + 600);
        else
          v410 = 0;
        v411 = v404[8];
        if (v411 && (v412 = *(_QWORD *)(v411 + 8)) != 0)
        {
          v413 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v412 + 8))(v412);
          v404 = *(_QWORD **)STACK[0x3D0];
        }
        else
        {
          v413 = 0;
        }
        v414 = v404[9];
        if (v414)
          v415 = (*(_QWORD *)(v414 + 736)
                - 0x61C8864680B583E9
                + (*(_QWORD *)(v414 + 600) << 6)
                + (*(_QWORD *)(v414 + 600) >> 2)) ^ *(_QWORD *)(v414 + 600);
        else
          v415 = 0;
        v416 = re::hashCombine(v395, v403, v406, v410, v413, v415);
        v417 = re::MaterialTechnique::combinedConstantsHash(*(re::MaterialTechnique **)STACK[0x3F8]);
        v418 = *(_QWORD **)STACK[0x3D0];
        v419 = v418[6];
        if (v419)
          v420 = (*(_QWORD *)(v419 + 248)
                - 0x61C8864680B583E9
                + (*(_QWORD *)(v419 + 72) << 6)
                + (*(_QWORD *)(v419 + 72) >> 2)) ^ *(_QWORD *)(v419 + 72);
        else
          v420 = 0;
        v421 = v418[10];
        if (v421)
          v422 = (*(_QWORD *)(v421 + 248)
                - 0x61C8864680B583E9
                + (*(_QWORD *)(v421 + 72) << 6)
                + (*(_QWORD *)(v421 + 72) >> 2)) ^ *(_QWORD *)(v421 + 72);
        else
          v422 = 0;
        v423 = v418[7];
        if (v423)
          v424 = (*(_QWORD *)(v423 + 248)
                - 0x61C8864680B583E9
                + (*(_QWORD *)(v423 + 72) << 6)
                + (*(_QWORD *)(v423 + 72) >> 2)) ^ *(_QWORD *)(v423 + 72);
        else
          v424 = 0;
        v425 = (_QWORD *)v418[8];
        if (v425 && *v425)
        {
          v426 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v425 + 8))(*v425);
          v418 = *(_QWORD **)STACK[0x3D0];
        }
        else
        {
          v426 = 0;
        }
        v427 = v418[9];
        if (v427)
          v428 = (*(_QWORD *)(v427 + 248)
                - 0x61C8864680B583E9
                + (*(_QWORD *)(v427 + 72) << 6)
                + (*(_QWORD *)(v427 + 72) >> 2)) ^ *(_QWORD *)(v427 + 72);
        else
          v428 = 0;
        v429 = re::hashCombine(v417, v420, v422, v424, v426, v428);
        if (*(_BYTE *)(STACK[0x3F8] + 16))
          v429 ^= v815 - 0x61C8864680B583E9 + (v429 << 6) + (v429 >> 2);
        STACK[0x388] = v429;
        v430 = STACK[0x328];
        v431 = *(_QWORD *)(STACK[0x3F0] + 72);
        v432 = *(_QWORD **)(STACK[0x3F8] + 8);
        if (v432)
          v433 = v432 + 1;
        v434 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * (v430 ^ (v430 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v430 ^ (v430 >> 30))) >> 27));
        v435 = ((v434 ^ (v434 >> 31)) - 0x61C8864680B583E9 + (v416 << 6) + (v416 >> 2)) ^ v416;
        v436 = (v435 << 6)
             - 0x61C8864680B583E9
             + (v435 >> 2)
             + ((v432[12] - 0x61C8864680B583E9 + (v432[11] << 6) + (v432[11] >> 2)) ^ v432[11]);
        STACK[0x300] = v435;
        v437 = v436 ^ v435;
        v438 = STACK[0x3F8] + 120;
        STACK[0x1ED0] = (unint64_t)v784;
        STACK[0x1ED8] = v438;
        if (!*v784)
          goto LABEL_403;
        v439 = *(unsigned int *)(*(_QWORD *)(STACK[0x3A8] + 56) + 4 * (v437 % *(unsigned int *)(STACK[0x3A8] + 72)));
        if ((_DWORD)v439 == 0x7FFFFFFF)
          goto LABEL_403;
        v440 = *(_QWORD *)(STACK[0x3A8] + 64);
        while (*(_QWORD *)(v440 + 24 * v439 + 8) != v437)
        {
          LODWORD(v439) = *(_DWORD *)(v440 + 24 * v439) & 0x7FFFFFFF;
          if ((_DWORD)v439 == 0x7FFFFFFF)
            goto LABEL_403;
        }
        v442 = *(_QWORD *)(v440 + 24 * v439 + 16);
        if (!v442)
LABEL_403:
          v442 = re::MaterialTechniqueVariant::completeResolution<re::TextureResolution,re::TextureTableCollection>((re *)STACK[0x3F8], (uint64_t *)&STACK[0x1ED0], (uint64_t *)&STACK[0x1020], STACK[0x3C0], v437, v431);
        v801 = *(_QWORD *)(v442 + 40);
        STACK[0x2A8] = *(_QWORD *)(v442 + 24);
        if (*(_QWORD *)(*(_QWORD *)(STACK[0x3F8] + 8) + 24))
        {
          v792 = *(unsigned __int16 **)(v442 + 80);
          v813 = *(_QWORD *)(v442 + 64);
        }
        else
        {
          v813 = 0;
          v792 = 0;
        }
        v443 = STACK[0x1ED8];
        STACK[0x1E60] = v437;
        v444 = *(_DWORD *)(v443 + 28);
        re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(v443, &STACK[0x1E60]);
        if (v444 != *(_DWORD *)(v443 + 28))
          ++*(_DWORD *)v442;

        v445 = *(_QWORD **)(STACK[0x3F8] + 8);
        if (v445)
          v446 = v445 + 1;
        v447 = re::SamplerTableCollection::hash((re::SamplerTableCollection *)&STACK[0xD20]);
        STACK[0x328] = (unint64_t)v445;
        v448 = v445[11];
        v449 = v445[12];
        v450 = re::MaterialTechnique::combinedTextureBlocksHash(*(re::MaterialTechnique **)STACK[0x3F8]);
        v451 = *(_QWORD **)STACK[0x3D0];
        v452 = v451[6];
        if (v452)
          v453 = (*(_QWORD *)(v452 + 1016)
                - 0x61C8864680B583E9
                + (*(_QWORD *)(v452 + 952) << 6)
                + (*(_QWORD *)(v452 + 952) >> 2)) ^ *(_QWORD *)(v452 + 952);
        else
          v453 = 0;
        v454 = v451[7];
        if (v454)
          v455 = (*(_QWORD *)(v454 + 1016)
                - 0x61C8864680B583E9
                + (*(_QWORD *)(v454 + 952) << 6)
                + (*(_QWORD *)(v454 + 952) >> 2)) ^ *(_QWORD *)(v454 + 952);
        else
          v455 = 0;
        v456 = v451[9];
        if (v456)
          v457 = (*(_QWORD *)(v456 + 1016)
                - 0x61C8864680B583E9
                + (*(_QWORD *)(v456 + 952) << 6)
                + (*(_QWORD *)(v456 + 952) >> 2)) ^ *(_QWORD *)(v456 + 952);
        else
          v457 = 0;
        v458 = re::hashCombine(v447, (v449 - 0x61C8864680B583E9 + (v448 << 6) + (v448 >> 2)) ^ v448, v450, v453, v455, v457);
        v459 = re::MaterialTechnique::combinedSamplersHash(*(re::MaterialTechnique **)STACK[0x3F8]);
        v460 = *(_QWORD **)STACK[0x3D0];
        v461 = v460[6];
        if (v461)
          v461 = (*(_QWORD *)(v461 + 840)
                - 0x61C8864680B583E9
                + (*(_QWORD *)(v461 + 664) << 6)
                + (*(_QWORD *)(v461 + 664) >> 2)) ^ *(_QWORD *)(v461 + 664);
        v462 = STACK[0x3C0];
        v463 = v460[7];
        v464 = 0x9E3779B97F4A7C17;
        if (v463)
          v464 = ((*(_QWORD *)(v463 + 840)
                 - 0x61C8864680B583E9
                 + (*(_QWORD *)(v463 + 664) << 6)
                 + (*(_QWORD *)(v463 + 664) >> 2)) ^ *(_QWORD *)(v463 + 664))
               - 0x61C8864680B583E9;
        v465 = v460[9];
        v466 = 0x9E3779B97F4A7C17;
        if (v465)
          v466 = ((*(_QWORD *)(v465 + 840)
                 - 0x61C8864680B583E9
                 + (*(_QWORD *)(v465 + 664) << 6)
                 + (*(_QWORD *)(v465 + 664) >> 2)) ^ *(_QWORD *)(v465 + 664))
               - 0x61C8864680B583E9;
        v467 = ((v458 << 6) - 0x61C8864680B583E9 + (v458 >> 2) + v459) ^ v458;
        v468 = ((v461 >> 2) + (v461 << 6) + v464) ^ v461;
        v469 = ((v467 << 6) - 0x61C8864680B583E9 + (v467 >> 2) + (((v468 >> 2) + (v468 << 6) + v466) ^ v468)) ^ v467;
        v470 = STACK[0x3F8] + 312;
        STACK[0x1ED0] = (unint64_t)v783;
        STACK[0x1ED8] = v470;
        if (!*v783)
          goto LABEL_433;
        v471 = *(unsigned int *)(*(_QWORD *)(STACK[0x3A8] + 248) + 4 * (v469 % *(unsigned int *)(STACK[0x3A8] + 264)));
        if ((_DWORD)v471 == 0x7FFFFFFF)
          goto LABEL_433;
        v472 = *(_QWORD *)(STACK[0x3A8] + 256);
        while (*(_QWORD *)(v472 + 24 * v471 + 8) != v469)
        {
          LODWORD(v471) = *(_DWORD *)(v472 + 24 * v471) & 0x7FFFFFFF;
          if ((_DWORD)v471 == 0x7FFFFFFF)
            goto LABEL_433;
        }
        v473 = *(_QWORD *)(v472 + 24 * v471 + 16);
        if (!v473)
LABEL_433:
          v473 = re::MaterialTechniqueVariant::completeResolution<re::TextureBlockResolution,re::SamplerTableCollection>((re *)STACK[0x3F8], (uint64_t *)&STACK[0x1ED0], (uint64_t)&STACK[0xD20], v462, v469);
        v234 = *(unint64_t **)(v473 + 40);
        v474 = *(_QWORD *)(*(_QWORD *)(STACK[0x3F8] + 8) + 24);
        STACK[0x2E0] = *(_QWORD *)(v473 + 24);
        if (v474)
        {
          v77 = *(_QWORD *)(v473 + 80);
          STACK[0x2C0] = *(_QWORD *)(v473 + 64);
        }
        else
        {
          STACK[0x2C0] = 0;
          v77 = 0;
        }
        v475 = STACK[0x1ED8];
        STACK[0x1E60] = v469;
        v476 = *(_DWORD *)(v475 + 28);
        re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(v475, &STACK[0x1E60]);
        if (v476 != *(_DWORD *)(v475 + 28))
          ++*(_DWORD *)v473;

        v477 = *(_QWORD *)(v75[2] + 24);
        v478 = *(_QWORD *)(STACK[0x3F8] + 8);
        v479 = *(_QWORD *)(v478 + 24);
        v480 = *(unsigned __int16 *)(*(_QWORD *)(v478 + 16) + 328);
        v78 = (unint64_t)&STACK[0xDB0];
        if (v479)
          LODWORD(v479) = *(unsigned __int16 *)(v479 + 328) + 1;
        if (v480 + 1 > (int)v479)
          v481 = v480 + 1;
        else
          v481 = v479;
        shouldCompileSynchronously = v481;
        if (!v481)
        {
          v80 = 0;
          LODWORD(STACK[0xFB0]) = 0;
          *(_OWORD *)&STACK[0xF90] = 0u;
          *(_OWORD *)&STACK[0xFA0] = 0u;
          v77 = STACK[0x3F0];
          goto LABEL_480;
        }
        if (STACK[0xCF0])
        {
          v482 = v469 % LODWORD(STACK[0xD08]);
          v483 = STACK[0xCF8];
          v484 = *(_DWORD *)(STACK[0xCF8] + 4 * v482);
          if (v484 != 0x7FFFFFFF)
          {
            v499 = STACK[0xD00];
            if (*(_QWORD *)(STACK[0xD00] + 304 * v484 + 8) != v469)
            {
              do
              {
                v515 = *(_DWORD *)(v499 + 304 * *(unsigned int *)(STACK[0xCF8] + 4 * v482)) & 0x7FFFFFFF;
                if (v515 == 0x7FFFFFFF)
                  goto LABEL_447;
              }
              while (*(_QWORD *)(v499 + 304 * v515 + 8) != v469);
              v516 = *(unsigned int *)(STACK[0xCF8] + 4 * v482);
              do
              {
                v516 = *(_DWORD *)(v499 + 304 * v516) & 0x7FFFFFFF;
                v484 = 0x7FFFFFFF;
                if (v516 == 0x7FFFFFFF)
                  break;
                v484 = v516;
              }
              while (*(_QWORD *)(v499 + 304 * v516 + 8) != v469);
            }
            v80 = v499 + 304 * v484 + 16;
            v77 = STACK[0x3F0];
LABEL_479:
            v500 = *(_QWORD *)(v80 + 80);
            v501 = *(_QWORD *)(v80 + 136);
            v502 = *(_QWORD *)(v80 + 120);
            STACK[0xF90] = *(_QWORD *)(v80 + 96);
            STACK[0xF98] = v500;
            STACK[0xFA0] = v501;
            STACK[0xFA8] = v502;
            LODWORD(STACK[0xFB0]) = 0;
LABEL_480:
            STACK[0xFB8] = v80;
            v503 = *(_QWORD *)(STACK[0x3F8] + 8);
            if (v503)
              v504 = (id)(v503 + 8);
            v505 = 0;
            v506 = 0;
            v507 = 40;
            do
            {
              v508 = *(unint64_t *)((char *)&STACK[0xDB0] + v507);
              if (v508)
              {
                v509 = *(_QWORD *)(v508 + 48);
              }
              else
              {
                v510 = 0x94D049BB133111EBLL
                     * ((0xBF58476D1CE4E5B9 * (v505 ^ (v505 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v505 ^ (v505 >> 30))) >> 27));
                v509 = v510 ^ (v510 >> 31);
              }
              v506 ^= (v506 << 6) - 0x61C8864680B583E9 + (v506 >> 2) + v509;
              ++v505;
              v507 += 48;
            }
            while (v505 != 13);
            v511 = re::MaterialTechnique::combinedBuffersHash(*(re::MaterialTechnique **)STACK[0x3F8]);
            v512 = *(_QWORD **)STACK[0x3D0];
            v513 = v512[6];
            if (v513)
              v514 = (*(_QWORD *)(v513 + 312)
                    - 0x61C8864680B583E9
                    + (*(_QWORD *)(v513 + 136) << 6)
                    + (*(_QWORD *)(v513 + 136) >> 2)) ^ *(_QWORD *)(v513 + 136);
            else
              v514 = 0;
            v517 = v512[7];
            if (v517)
              v518 = (*(_QWORD *)(v517 + 312)
                    - 0x61C8864680B583E9
                    + (*(_QWORD *)(v517 + 136) << 6)
                    + (*(_QWORD *)(v517 + 136) >> 2)) ^ *(_QWORD *)(v517 + 136);
            else
              v518 = 0;
            v519 = v512[9];
            if (v519)
              v520 = (*(_QWORD *)(v519 + 312)
                    - 0x61C8864680B583E9
                    + (*(_QWORD *)(v519 + 136) << 6)
                    + (*(_QWORD *)(v519 + 136) >> 2)) ^ *(_QWORD *)(v519 + 136);
            else
              v520 = 0;
            v521 = re::hashCombine(v506, *(_QWORD *)(v503 + 104), v511, v514, v518, v520);
            v522 = v521;
            v523 = STACK[0x3F8] + 168;
            STACK[0x1ED0] = (unint64_t)v782;
            STACK[0x1ED8] = v523;
            if (!*v782)
              goto LABEL_509;
            v524 = *(unsigned int *)(*(_QWORD *)(STACK[0x3A8] + 104) + 4
                                                                     * (v521 % *(unsigned int *)(STACK[0x3A8] + 120)));
            if ((_DWORD)v524 == 0x7FFFFFFF)
              goto LABEL_509;
            v525 = *(_QWORD *)(STACK[0x3A8] + 112);
            while (*(_QWORD *)(v525 + 24 * v524 + 8) != v521)
            {
              LODWORD(v524) = *(_DWORD *)(v525 + 24 * v524) & 0x7FFFFFFF;
              if ((_DWORD)v524 == 0x7FFFFFFF)
                goto LABEL_509;
            }
            v526 = *(_QWORD *)(v525 + 24 * v524 + 16);
            if (!v526)
LABEL_509:
              v526 = re::MaterialTechniqueVariant::completeResolution<re::BufferResolution,re::BufferTableCollection>((re *)STACK[0x3F8], (uint64_t *)&STACK[0x1ED0], &STACK[0xDB0], STACK[0x3C0], v521);
            v800 = *(_QWORD *)(v526 + 40);
            v820 = *(_QWORD *)(v526 + 24);
            if (*(_QWORD *)(*(_QWORD *)(STACK[0x3F8] + 8) + 24))
            {
              v791 = *(_QWORD *)(v526 + 80);
              v811 = *(_QWORD *)(v526 + 64);
            }
            else
            {
              v811 = 0;
              v791 = 0;
            }
            v527 = STACK[0x1ED8];
            STACK[0x1E60] = v522;
            v528 = *(_DWORD *)(v527 + 28);
            re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(v527, &STACK[0x1E60]);
            if (v528 != *(_DWORD *)(v527 + 28))
              ++*(_DWORD *)v526;

            v529 = *(_QWORD *)(STACK[0x3F8] + 8);
            v530 = STACK[0x3D0];
            if (v529)
              v531 = (id)(v529 + 8);
            v532 = re::SamplerTableCollection::hash((re::SamplerTableCollection *)&STACK[0xD20]);
            v533 = re::MaterialTechnique::combinedSamplersHash(*(re::MaterialTechnique **)STACK[0x3F8]);
            v534 = *(_QWORD *)v530;
            v535 = *(_QWORD *)(*(_QWORD *)v530 + 56);
            v536 = 0x9E3779B97F4A7C17;
            if (v535)
              v536 = *(_QWORD *)(v535 + 952) - 0x61C8864680B583E9;
            v537 = *(_QWORD *)(v534 + 48);
            v538 = 0x9E3779B97F4A7C17;
            if (v537)
              v538 = ((*(_QWORD *)(v537 + 840)
                     - 0x61C8864680B583E9
                     + (*(_QWORD *)(v537 + 664) << 6)
                     + (*(_QWORD *)(v537 + 664) >> 2)) ^ *(_QWORD *)(v537 + 664))
                   - 0x61C8864680B583E9;
            if (v535)
              v535 = (*(_QWORD *)(v535 + 840)
                    - 0x61C8864680B583E9
                    + (*(_QWORD *)(v535 + 664) << 6)
                    + (*(_QWORD *)(v535 + 664) >> 2)) ^ *(_QWORD *)(v535 + 664);
            v539 = *(_QWORD *)(v534 + 72);
            v540 = 0x9E3779B97F4A7C17;
            if (v539)
              v540 = ((*(_QWORD *)(v539 + 840)
                     - 0x61C8864680B583E9
                     + (*(_QWORD *)(v539 + 664) << 6)
                     + (*(_QWORD *)(v539 + 664) >> 2)) ^ *(_QWORD *)(v539 + 664))
                   - 0x61C8864680B583E9;
            v541 = ((v532 << 6) - 0x61C8864680B583E9 + (v532 >> 2) + *(_QWORD *)(v529 + 112)) ^ v532;
            v542 = ((((v533 >> 2) + (v533 << 6) + v536) ^ v533) - 0x61C8864680B583E9 + (v541 << 6) + (v541 >> 2)) ^ v541;
            v543 = (v538 + (v542 << 6) + (v542 >> 2)) ^ v542;
            v544 = ((((v535 >> 2) + (v535 << 6) + v540) ^ v535) - 0x61C8864680B583E9 + (v543 << 6) + (v543 >> 2)) ^ v543;
            v545 = STACK[0x3F8] + 264;
            STACK[0x1ED0] = (unint64_t)v781;
            STACK[0x1ED8] = v545;
            if (!*v781)
              goto LABEL_532;
            v546 = *(unsigned int *)(*(_QWORD *)(STACK[0x3A8] + 200) + 4
                                                                     * (v544 % *(unsigned int *)(STACK[0x3A8] + 216)));
            if ((_DWORD)v546 == 0x7FFFFFFF)
              goto LABEL_532;
            v547 = *(_QWORD *)(STACK[0x3A8] + 208);
            while (*(_QWORD *)(v547 + 24 * v546 + 8) != v544)
            {
              LODWORD(v546) = *(_DWORD *)(v547 + 24 * v546) & 0x7FFFFFFF;
              if ((_DWORD)v546 == 0x7FFFFFFF)
                goto LABEL_532;
            }
            v548 = *(_QWORD *)(v547 + 24 * v546 + 16);
            if (!v548)
LABEL_532:
              v548 = re::MaterialTechniqueVariant::completeResolution<re::SamplerResolution,re::SamplerTableCollection>((re *)STACK[0x3F8], (uint64_t *)&STACK[0x1ED0], (uint64_t)&STACK[0xD20], STACK[0x3C0], v544);
            v798 = *(_QWORD *)(v548 + 40);
            v818 = *(_QWORD *)(v548 + 24);
            if (*(_QWORD *)(*(_QWORD *)(STACK[0x3F8] + 8) + 24))
            {
              v790 = *(_QWORD *)(v548 + 80);
              v810 = *(_QWORD *)(v548 + 64);
            }
            else
            {
              v810 = 0;
              v790 = 0;
            }
            v549 = STACK[0x1ED8];
            STACK[0x1E60] = v544;
            v550 = *(_DWORD *)(v549 + 28);
            re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(v549, &STACK[0x1E60]);
            if (v550 != *(_DWORD *)(v549 + 28))
              ++*(_DWORD *)v548;

            v551 = *(_QWORD *)(STACK[0x3F8] + 8);
            if (v551)
              v552 = (id)(v551 + 8);
            v553 = STACK[0x3F8] + 72;
            v554 = ((STACK[0x388] << 6)
                  - 0x61C8864680B583E9
                  + (STACK[0x388] >> 2)
                  + ((*(_QWORD *)(**(_QWORD **)STACK[0x3F8] + 2720)
                    - 0x61C8864680B583E9
                    + (*(_QWORD *)(v551 + 80) << 6)
                    + (*(_QWORD *)(v551 + 80) >> 2)) ^ *(_QWORD *)(v551 + 80))) ^ STACK[0x388];
            v555 = (_QWORD *)STACK[0x3A8];
            STACK[0x1ED0] = STACK[0x3A8];
            STACK[0x1ED8] = v553;
            if (!*v555)
              goto LABEL_547;
            v556 = *(unsigned int *)(*(_QWORD *)(STACK[0x3A8] + 8) + 4 * (v554 % *(unsigned int *)(STACK[0x3A8] + 24)));
            if ((_DWORD)v556 == 0x7FFFFFFF)
              goto LABEL_547;
            v557 = *(_QWORD *)(STACK[0x3A8] + 16);
            while (*(_QWORD *)(v557 + 24 * v556 + 8) != v554)
            {
              LODWORD(v556) = *(_DWORD *)(v557 + 24 * v556) & 0x7FFFFFFF;
              if ((_DWORD)v556 == 0x7FFFFFFF)
                goto LABEL_547;
            }
            v558 = *(_QWORD *)(v557 + 24 * v556 + 16);
            if (!v558)
LABEL_547:
              v558 = re::MaterialTechniqueVariant::completeResolution<re::ConstantResolution,re::ConstantTableCollection>((re *)STACK[0x3F8], (uint64_t *)&STACK[0x1ED0], (uint64_t)&STACK[0x710], STACK[0x3C0], v554);
            v799 = *(_QWORD *)(v558 + 40);
            v819 = *(_QWORD *)(v558 + 24);
            if (*(_QWORD *)(*(_QWORD *)(STACK[0x3F8] + 8) + 24))
            {
              v789 = *(_QWORD *)(v558 + 80);
              v809 = *(_QWORD *)(v558 + 64);
            }
            else
            {
              v809 = 0;
              v789 = 0;
            }
            v559 = STACK[0x1ED8];
            STACK[0x1E60] = v554;
            v560 = *(_DWORD *)(v559 + 28);
            re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(v559, &STACK[0x1E60]);
            if (v560 != *(_DWORD *)(v559 + 28))
              ++*(_DWORD *)v558;

            v561 = *(_QWORD *)(v77 + 72);
            v562 = *(_QWORD *)(STACK[0x3F8] + 8);
            if (v562)
              v563 = (id)(v562 + 8);
            v564 = (STACK[0x300] - 0x61C8864680B583E9 + (STACK[0x388] << 6) + (STACK[0x388] >> 2)) ^ STACK[0x388];
            v565 = ((v564 << 6) - 0x61C8864680B583E9 + (v564 >> 2) + *(_QWORD *)(v562 + 120)) ^ v564;
            v566 = STACK[0x3F8] + 360;
            STACK[0x1ED0] = (unint64_t)v780;
            STACK[0x1ED8] = v566;
            if (!*v780)
              goto LABEL_562;
            v567 = *(unsigned int *)(*(_QWORD *)(STACK[0x3A8] + 296) + 4
                                                                     * (v565 % *(unsigned int *)(STACK[0x3A8] + 312)));
            if ((_DWORD)v567 == 0x7FFFFFFF)
              goto LABEL_562;
            v568 = *(_QWORD *)(STACK[0x3A8] + 304);
            while (*(_QWORD *)(v568 + 24 * v567 + 8) != v565)
            {
              LODWORD(v567) = *(_DWORD *)(v568 + 24 * v567) & 0x7FFFFFFF;
              if ((_DWORD)v567 == 0x7FFFFFFF)
                goto LABEL_562;
            }
            v569 = *(_QWORD *)(v568 + 24 * v567 + 16);
            if (!v569)
LABEL_562:
              v569 = re::MaterialTechniqueVariant::completeResolution<re::ArgumentBufferResolution,re::ArgumentBufferTableCollection>((re *)STACK[0x3F8], (uint64_t *)&STACK[0x1ED0], (uint64_t)&STACK[0x698], STACK[0x3C0], v565, v561);
            v812 = *(unint64_t **)(v569 + 40);
            STACK[0x2E0] = *(_QWORD *)(v569 + 24);
            if (*(_QWORD *)(*(_QWORD *)(STACK[0x3F8] + 8) + 24))
            {
              *(_QWORD *)&v797[4] = *(_QWORD *)(v569 + 80);
              STACK[0x2C0] = *(_QWORD *)(v569 + 64);
            }
            else
            {
              STACK[0x2C0] = 0;
              *(_QWORD *)&v797[4] = 0;
            }
            v570 = STACK[0x1ED8];
            STACK[0x1E60] = v565;
            v571 = *(_DWORD *)(v570 + 28);
            re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(v570, &STACK[0x1E60]);
            if (v571 != *(_DWORD *)(v570 + 28))
              ++*(_DWORD *)v569;

            shouldCompileSynchronously = STACK[0x3D0];
            v572 = STACK[0x2B0];
            if (!(STACK[0x2E0] | STACK[0x2C0]))
              goto LABEL_570;
            v573 = v75[3];
            v574 = *(_QWORD *)(v77 + 24);
            STACK[0x590] = v573;
            STACK[0x588] = v574;
            v575 = *(_QWORD *)(*(_QWORD *)STACK[0x3F8] + 8);
            STACK[0x5A8] = (unint64_t)&STACK[0x698];
            STACK[0x598] = v575;
            STACK[0x5B0] = v572;
            STACK[0x5C0] = v77;
            if (!LOBYTE(STACK[0x620]))
            {
              re::ensureHeapInitialized(v574, (id *)(v573 + 184));
              v599 = *(_QWORD *)(v77 + 24);
              v600 = *(_QWORD *)(v599 + 80);
              if (v600)
              {
                v601 = *(uint64_t **)(v599 + 96);
                v602 = 8 * v600;
                do
                {
                  v603 = *v601++;
                  objc_msgSend(*(id *)v77, sel_useHeap_stages_, v603, 3);
                  v602 -= 8;
                }
                while (v602);
              }
              LOBYTE(STACK[0x620]) = 1;
              re::Optional<re::DrawCallEncoderStates>::~Optional((uint64_t)&STACK[0x1088]);
              STACK[0x300] = STACK[0x3F8];
            }
            else
            {
LABEL_570:
              re::Optional<re::DrawCallEncoderStates>::~Optional((uint64_t)&STACK[0x1088]);
              STACK[0x300] = STACK[0x3F8];
            }
LABEL_571:
            v576 = (unint64_t *)STACK[0x398];
            if (!*(_BYTE *)STACK[0x3A0])
              v576 = &STACK[0x43F];
            v577 = *(_BYTE *)v576;
            v578 = STACK[0x538];
            if ((STACK[0x538] & 4) == 0 || LOBYTE(STACK[0x53C]) != v577 || LOBYTE(STACK[0x53D]) != v577)
            {
              (*(void (**)(_QWORD, char *, _QWORD, _QWORD))(*(_QWORD *)(v77 + 8) + 128))(**(_QWORD **)(v77 + 8), sel_setStencilFrontReferenceValue_backReferenceValue_, v577, v577);
              LOBYTE(STACK[0x53C]) = v577;
              LOBYTE(STACK[0x53D]) = v577;
              v578 = LOWORD(STACK[0x538]) | 4;
              LOWORD(STACK[0x538]) = v578;
            }
            if ((v578 & 8) == 0
              || *(float *)&STACK[0x540] != v360
              || *(float *)&STACK[0x544] != v359
              || *(float *)&STACK[0x548] != v358)
            {
              (*(void (**)(_QWORD, char *, float, float, float))(*(_QWORD *)(v77 + 8) + 72))(**(_QWORD **)(v77 + 8), sel_setDepthBias_slopeScale_clamp_, v360, v359, v358);
              *(float *)&STACK[0x540] = v360;
              *(float *)&STACK[0x544] = v359;
              *(float *)&STACK[0x548] = v358;
              LOWORD(STACK[0x538]) |= 8u;
            }
            if (!STACK[0xCE0])
            {
              v593 = (id)STACK[0xCD8];
              v80 = (unint64_t)v593;
              if (v593)
              {
                v593 = objc_msgSend(objc_msgSend(v593, sel_label), sel_UTF8String);
                v594 = (const char *)v593;
              }
              else
              {
                v594 = "<NULL PSO>";
              }
              shouldCompileSynchronously = *re::graphicsLogObjects((re *)v593);
              if (os_log_type_enabled((os_log_t)shouldCompileSynchronously, OS_LOG_TYPE_ERROR))
              {
                LODWORD(STACK[0x1ED0]) = 136315138;
                STACK[0x1ED4] = (unint64_t)v594;
                _os_log_error_impl(&dword_224FE9000, (os_log_t)shouldCompileSynchronously, OS_LOG_TYPE_ERROR, "cachedPipelineStatePair with PSO '%s' has a NULL depth-stencil. Draw call will be dropped.", (uint8_t *)&STACK[0x1ED0], 0xCu);
              }
              LOWORD(STACK[0x538]) = 0;
              re::ShaderResourceBindState::reset((uint64_t)&STACK[0x12C0]);
              LOBYTE(STACK[0x1ED0]) = 0;
              v78 = LODWORD(STACK[0x3B4]);
              v79 = STACK[0x2E8];
              if (LOBYTE(STACK[0xCD0]))
              {
                if (STACK[0xCE8])
                {

                  STACK[0xCE8] = 0;
                }
                if (STACK[0xCE0])
                {

                  STACK[0xCE0] = 0;
                }
                if (STACK[0xCD8])
                {

                  STACK[0xCD8] = 0;
                }
                LOBYTE(STACK[0xCD0]) = 0;
              }
              re::Optional<re::DrawCallEncoderStates>::~Optional((uint64_t)&STACK[0x1ED0]);
              if (v80)

              v192 = 0;
              STACK[0x300] = 0;
              goto LABEL_793;
            }
            v579 = v75[3];
            STACK[0x328] = *(_QWORD *)(v579 + 24);
            v80 = v75[1];
            v580 = *(_QWORD *)(v75[2] + 24);
            STACK[0x2B0] = *(_QWORD *)(v77 + 64);
            v795 = v75[8];
            STACK[0x388] = *(_QWORD *)STACK[0x340];
            v794 = *((unsigned __int8 *)v75 + 72);
            v779 = *((unsigned __int8 *)v75 + 108);
            v773 = v579;
            v777 = *(unsigned __int8 *)(v579 + 302);
            *(_OWORD *)&STACK[0x410] = *(_OWORD *)&STACK[0x42F];
            LOBYTE(STACK[0x420]) = STACK[0x43F];
            v581.isa = *(Class *)shouldCompileSynchronously;
            v582 = *(_QWORD *)(*(_QWORD *)shouldCompileSynchronously + 24);
            v816 = v80;
            if (v582)
            {
              v583 = (os_unfair_lock_s **)*((_QWORD *)v581.isa + 2);
              STACK[0x1ED8] = 0;
              STACK[0x1EE0] = 0;
              LODWORD(STACK[0x1EE8]) = 0;
              STACK[0x1EF0] = 0;
              STACK[0x1ED0] = v580;
              re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(&STACK[0x1ED0], 0);
              ++LODWORD(STACK[0x1EE8]);
              v584 = &v583[2 * v582];
              v585 = (_WORD *)STACK[0x3C0];
              do
              {
                STACK[0x1E60] = 0;
                re::TextureHandle::metalTexture(v583, &STACK[0x1168]);
                v586 = (void *)STACK[0x1168];
                if (STACK[0x1168])

                STACK[0x1E60] = (unint64_t)v586;
                v587 = STACK[0x1EE0];
                if (STACK[0x1EE0])
                {
                  v588 = STACK[0x1EF0];
                  do
                  {
                    v589 = v587 >> 1;
                    v590 = (unint64_t *)(v588 + 8 * (v587 >> 1));
                    v592 = *v590;
                    v591 = v590 + 1;
                    v587 += ~(v587 >> 1);
                    if (v592 < (unint64_t)v586)
                      v588 = (unint64_t)v591;
                    else
                      v587 = v589;
                  }
                  while (v587);
                }
                else
                {
                  v588 = STACK[0x1EF0];
                }
                re::DynamicArray<unsigned long>::insert(&STACK[0x1ED0], (uint64_t)(v588 - STACK[0x1EF0]) >> 3, &STACK[0x1E60]);
                v583 += 2;
              }
              while (v583 != v584);
              re::ArgumentBufferCacheReferences::addAndUseResourcePtrs(&STACK[0x5D0], (id *)v77, (uint64_t)&STACK[0x1ED0]);
              if (STACK[0x1ED0] && STACK[0x1EF0])
                (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x1ED0] + 40))(STACK[0x1ED0]);
              shouldCompileSynchronously = STACK[0x3D0];
              v581.isa = *(Class *)STACK[0x3D0];
              v80 = v816;
            }
            else
            {
              v585 = (_WORD *)STACK[0x3C0];
            }
            if (*((_BYTE *)v581.isa + 32))
              v595 = LOBYTE(STACK[0x621]) == 0;
            else
              v595 = 0;
            if (v595)
            {
              objc_msgSend(*(id *)v77, sel_useHeap_stages_, *(_QWORD *)(*(_QWORD *)(v773 + 64) + 8), 3);
              LOBYTE(STACK[0x621]) = 1;
            }
            if (*(_BYTE *)(v80 + 57))
            {
              v596 = *(unsigned __int8 *)(v80 + 58);
            }
            else
            {
              v597 = (unsigned __int16)*v585;
              if ((v597 & 0x40) != 0)
              {
                v596 = 0;
              }
              else
              {
                v598 = **(_QWORD **)STACK[0x3F8];
                if (*(_BYTE *)(v598 + 124))
                {
                  v596 = *(unsigned __int8 *)(v598 + 125);
                }
                else if ((v597 & 0x200) != 0)
                {
                  v596 = (v597 >> 10) & 3;
                }
                else
                {
                  v596 = *(unsigned __int8 *)(v80 + 56);
                }
              }
            }
            if (*(_BYTE *)(v80 + 60))
            {
              if (v596 == 1)
              {
                v596 = 2;
              }
              else if (v596 == 2)
              {
                v596 = 1;
              }
            }
            v604 = STACK[0x538];
            if ((STACK[0x538] & 1) == 0 || LOBYTE(STACK[0x53A]) != v596)
            {
              (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v77 + 8) + 64))(**(_QWORD **)(v77 + 8), sel_setCullMode_, v596);
              LOBYTE(STACK[0x53A]) = v596;
              v604 = LOWORD(STACK[0x538]) | 1;
              LOWORD(STACK[0x538]) = v604;
            }
            v605 = (unsigned __int16)*v585;
            if ((v605 & 0x1000) != 0)
              v83 = (v605 >> 13) & 1;
            else
              v83 = *(unsigned __int8 *)v80;
            if ((v604 & 2) == 0 || LOBYTE(STACK[0x53B]) != v83)
            {
              (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v77 + 8) + 168))(**(_QWORD **)(v77 + 8), sel_setTriangleFillMode_, v83);
              LOBYTE(STACK[0x53B]) = v83;
              LOWORD(STACK[0x538]) |= 2u;
            }
            re::EncoderState::setRenderPipelineState((void **)&STACK[0x538], (void **)&STACK[0xCD8], v77);
            re::EncoderState::setDepthStencilState((void **)&STACK[0x538], (void **)&STACK[0xCE0], v77);
            if (v794)
              (*(void (**)(_QWORD, char *, uint64_t, uint64_t))(*(_QWORD *)(v77 + 8) + 184))(**(_QWORD **)(v77 + 8), sel_setVisibilityResultMode_offset_, (uint64_t)(__int16)(*v585 << 10) >> 14, 8 * *v787);
            v608 = *(_QWORD **)shouldCompileSynchronously;
            v609 = *(_QWORD *)(*(_QWORD *)shouldCompileSynchronously + 56);
            if (v609)
            {
              v610 = *(_BYTE *)(v609 + 1121);
              LOBYTE(v609) = *(_BYTE *)(v609 + 1122);
            }
            else
            {
              v610 = 0;
            }
            LOBYTE(STACK[0x5C9]) = v610;
            LOBYTE(STACK[0x5C8]) = v609;
            v611 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * *v803) ^ ((0xBF58476D1CE4E5B9 * *v803) >> 27));
            STACK[0x5B8] = ((*(_QWORD *)STACK[0x390] << 6)
                          - 0x61C8864680B583E9
                          + (*(_QWORD *)STACK[0x390] >> 2)
                          + (v611 ^ (v611 >> 31))) ^ *(_QWORD *)STACK[0x390];
            v78 = STACK[0x2E0];
            v234 = v812;
            if (STACK[0x2E0])
            {
              do
              {
                STACK[0x5A0] = (unint64_t)v234;
                v612 = re::processArgumentBufferContextAndUseResources((uint64_t)&STACK[0x588], (uint64_t)&STACK[0x5D0], (id *)v77);
                shouldCompileSynchronously = v77;
                v77 = *(unsigned __int8 *)(v612 + 63);
                if (v77 >= 2)
                  goto LABEL_946;
                v80 = v612;
                v83 = (uint64_t)*(id *)(v612 + 8 * v77);
                objc_msgSend(*(id *)(v80 + 8 * v77), sel_length);
                re::ShaderResourceBindState::bindVertexResource((uint64_t)&STACK[0x12C0], v83, 0, *((unsigned __int16 *)v234 + 68), *(uint64_t **)(shouldCompileSynchronously + 8), 0, v614);
                v77 = shouldCompileSynchronously;
                if (v83)

                v234 += 18;
                --v78;
              }
              while (v78);
              v608 = *(_QWORD **)STACK[0x3D0];
            }
            v615 = *v608;
            v616 = (re::FrameContext *)STACK[0x2B8];
            v234 = &STACK[0x1020];
            if (*v608)
            {
              v617 = *(_QWORD *)(v615 + 8);
              if (v617)
              {
                v618 = 0;
                for (m = 0; m < v617; v618 = ++m)
                {
                  v620 = *(_QWORD *)(v615 + 16);
                  v621 = *(_QWORD *)(v620 + 8 * v618);
                  if (v621)
                  {
                    objc_msgSend(*(id *)(v620 + 8 * v618), sel_length);
                    re::ShaderResourceBindState::bindVertexResource((uint64_t)&STACK[0x12C0], v621, 0, m, *(uint64_t **)(v77 + 8), 0, v622);
                    v617 = *(_QWORD *)(v615 + 8);
                  }
                }
              }
            }
            v623 = STACK[0x3C0];
            v624 = STACK[0x2B0];
            if (v819)
            {
              v625 = v799;
              do
              {
                re::fillConstantBuffer((uint64_t)&STACK[0x1ED0], v616, v624, (uint64_t)&STACK[0x628], v795, (uint64_t)&STACK[0x710], v623, v625);
                re::ShaderResourceBindState::bindVertexResource((uint64_t)&STACK[0x12C0], STACK[0x1EE0], STACK[0x1ED8], *(unsigned __int16 *)(v625 + 96), *(uint64_t **)(v77 + 8), 0, v626);
                v625 += 112;
              }
              while (v625 != v799 + 112 * v819);
            }
            shouldCompileSynchronously = STACK[0x308];
            v126 = v788;
            if (STACK[0x2A8])
            {
              v627 = 8 * STACK[0x2A8];
              v628 = (unsigned __int16 *)(v801 + 4);
              while (1)
              {
                v629 = *(&STACK[0x1020] + *(v628 - 1));
                (*(void (**)(unint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v629 + 24))(&STACK[0x1ED0], v629, *v628);
                v630 = *(v628 - 2);
                v631 = (void *)STACK[0x1ED0];
                if (v630 > 0x1E)
                  goto LABEL_678;
                v632 = &STACK[0x12C0] + 2 * v630;
                if (!*((_BYTE *)v632 + 1984))
                  break;
                if ((void *)v632[249] != v631)
                  goto LABEL_677;
                if (v631)
                  goto LABEL_673;
LABEL_674:
                v628 += 4;
                v627 -= 8;
                if (!v627)
                  goto LABEL_680;
              }
              *((_BYTE *)v632 + 1984) = 1;
LABEL_677:
              v632[249] = (unint64_t)v631;
LABEL_678:
              (*(void (**)(_QWORD, char *, void *))(*(_QWORD *)(v77 + 8) + 48))(**(_QWORD **)(v77 + 8), sel_setVertexTexture_atIndex_, v631);
              v631 = (void *)STACK[0x1ED0];
              if (!STACK[0x1ED0])
                goto LABEL_674;
LABEL_673:

              goto LABEL_674;
            }
LABEL_680:
            v80 = 48;
            if (v820)
            {
              v83 = 8 * v820;
              v78 = v800 + 4;
              while (1)
              {
                v633 = &STACK[0xDB0] + 6 * *(unsigned __int16 *)(v78 - 2);
                v634 = *(unsigned __int16 *)v78;
                v635 = v633[1];
                if (v635 <= v634)
                  break;
                re::ShaderResourceBindState::bindVertexResource((uint64_t)&STACK[0x12C0], *(_QWORD *)(*v633 + 16 * v634), *(_DWORD *)(*v633 + 16 * v634 + 8), *(unsigned __int16 *)(v78 - 4), *(uint64_t **)(v77 + 8), 0, v607);
                v78 += 8;
                v83 -= 8;
                if (!v83)
                  goto LABEL_684;
              }
LABEL_947:
              re::internal::assertLog((re::internal *)6, v606, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v634, v635);
              _os_crash();
              __break(1u);
LABEL_948:
              re::internal::assertLog((re::internal *)6, v654, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 242, v78, 2);
              _os_crash();
              __break(1u);
LABEL_949:
              STACK[0x1118] = 0;
              *(_OWORD *)&STACK[0x1F10] = 0u;
              *(_OWORD *)&STACK[0x1F00] = 0u;
              *(_OWORD *)&STACK[0x1EF0] = 0u;
              *(_OWORD *)&STACK[0x1EE0] = 0u;
              *(_OWORD *)&STACK[0x1ED0] = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(STACK[0x1E60]) = 136315906;
              STACK[0x1E64] = (unint64_t)"operator[]";
              LOWORD(STACK[0x1E6C]) = 1024;
              LODWORD(STACK[0x1E6E]) = 468;
              LOWORD(STACK[0x1E72]) = 2048;
              STACK[0x1E74] = v78;
              LOWORD(STACK[0x1E7C]) = 2048;
              STACK[0x1E7E] = v83;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_950:
              STACK[0x1118] = 0;
              *(_OWORD *)&STACK[0x1F10] = 0u;
              *(_OWORD *)&STACK[0x1F00] = 0u;
              *(_OWORD *)&STACK[0x1EF0] = 0u;
              *(_OWORD *)&STACK[0x1EE0] = 0u;
              *(_OWORD *)&STACK[0x1ED0] = 0u;
              v75 = (uint64_t *)MEMORY[0x24BDACB70];
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(STACK[0x1E60]) = 136315906;
              STACK[0x1E64] = (unint64_t)"operator[]";
              LOWORD(STACK[0x1E6C]) = 1024;
              LODWORD(STACK[0x1E6E]) = 468;
              LOWORD(STACK[0x1E72]) = 2048;
              STACK[0x1E74] = v78;
              LOWORD(STACK[0x1E7C]) = 2048;
              STACK[0x1E7E] = v83;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_951:
              STACK[0x1118] = 0;
              *(_OWORD *)&STACK[0x1F10] = 0u;
              *(_OWORD *)&STACK[0x1F00] = 0u;
              *(_OWORD *)&STACK[0x1EF0] = 0u;
              *(_OWORD *)&STACK[0x1EE0] = 0u;
              *(_OWORD *)&STACK[0x1ED0] = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(STACK[0x1E60]) = 136315906;
              STACK[0x1E64] = (unint64_t)"operator[]";
              LOWORD(STACK[0x1E6C]) = 1024;
              LODWORD(STACK[0x1E6E]) = 468;
              LOWORD(STACK[0x1E72]) = 2048;
              STACK[0x1E74] = v78;
              LOWORD(STACK[0x1E7C]) = 2048;
              STACK[0x1E7E] = (unint64_t)v234;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_952:
              STACK[0x1118] = 0;
              *(_OWORD *)&STACK[0x1F10] = 0u;
              *(_OWORD *)&STACK[0x1F00] = 0u;
              *(_OWORD *)&STACK[0x1EF0] = 0u;
              *(_OWORD *)&STACK[0x1EE0] = 0u;
              *(_OWORD *)&STACK[0x1ED0] = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(STACK[0x1E60]) = 136315906;
              STACK[0x1E64] = (unint64_t)"operator[]";
              LOWORD(STACK[0x1E6C]) = 1024;
              LODWORD(STACK[0x1E6E]) = 468;
              LOWORD(STACK[0x1E72]) = 2048;
              STACK[0x1E74] = v78;
              LOWORD(STACK[0x1E7C]) = 2048;
              STACK[0x1E7E] = (unint64_t)v234;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_953:
              STACK[0x1168] = 0;
              *(_OWORD *)&STACK[0x1F10] = 0u;
              *(_OWORD *)&STACK[0x1F00] = 0u;
              *(_OWORD *)&STACK[0x1EF0] = 0u;
              *(_OWORD *)&STACK[0x1EE0] = 0u;
              *(_OWORD *)&STACK[0x1ED0] = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(STACK[0x1E60]) = 136315906;
              STACK[0x1E64] = (unint64_t)"operator[]";
              LOWORD(STACK[0x1E6C]) = 1024;
              LODWORD(STACK[0x1E6E]) = 476;
              LOWORD(STACK[0x1E72]) = 2048;
              STACK[0x1E74] = v80;
              LOWORD(STACK[0x1E7C]) = 2048;
              STACK[0x1E7E] = v77;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_954:
              re::internal::assertLog((re::internal *)6, v646, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v647, v646);
              _os_crash();
              __break(1u);
LABEL_955:
              re::internal::assertLog((re::internal *)6, (uint64_t)v151, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 296, v162, v165);
              _os_crash();
              __break(1u);
LABEL_956:
              re::internal::assertLog((re::internal *)6, (uint64_t)v151, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v166, v167);
              _os_crash();
              __break(1u);
LABEL_957:
              STACK[0x710] = 0;
              *(_OWORD *)&STACK[0x1300] = 0u;
              *(_OWORD *)&STACK[0x12F0] = 0u;
              *(_OWORD *)&STACK[0x12E0] = 0u;
              *(_OWORD *)&STACK[0x12D0] = 0u;
              *(_OWORD *)&STACK[0x12C0] = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(STACK[0x1ED0]) = 136315906;
              *(_QWORD *)(shouldCompileSynchronously + 116) = "operator[]";
              LOWORD(STACK[0x1EDC]) = 1024;
              *(_DWORD *)(shouldCompileSynchronously + 126) = 797;
              LOWORD(STACK[0x1EE2]) = 2048;
              *(_QWORD *)(shouldCompileSynchronously + 132) = 1;
              LOWORD(STACK[0x1EEC]) = 2048;
              *(_QWORD *)(shouldCompileSynchronously + 142) = v78;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_958;
            }
LABEL_684:
            if (*(_BYTE *)(STACK[0x3F8] + 16) && *(_BYTE *)(**(_QWORD **)STACK[0x3F8] + 2848))
            {
              re::createVertexFetchArgumentBuffer<re::mtl::RenderCommandEncoder>((id *)(v773 + 184), (id *)v77, (re *)STACK[0x388], &STACK[0x1ED0]);
              v636 = (id)STACK[0x1ED0];
              objc_msgSend((id)STACK[0x1ED0], sel_length);
              re::ShaderResourceBindState::bindVertexResource((uint64_t)&STACK[0x12C0], (unint64_t)v636, 0, 0x1Eu, *(uint64_t **)(v77 + 8), 0, v637);
              if (v636)

              v638 = STACK[0xCE8];
              if (STACK[0x1580] != STACK[0xCE8]
                || STACK[0x1578]
                || LODWORD(STACK[0x158C])
                || !LOBYTE(STACK[0x1588])
                || LOWORD(STACK[0x158A]))
              {
                objc_msgSend(*(id *)v77, "setVertexVisibleFunctionTable:atBufferIndex:", STACK[0xCE8], 29);
                STACK[0x1578] = 0;
                STACK[0x1580] = v638;
                if (!LOBYTE(STACK[0x1588]))
                  LOBYTE(STACK[0x1588]) = 1;
                LOWORD(STACK[0x158A]) = 0;
                LODWORD(STACK[0x158C]) = 0;
              }
              if (STACK[0x1ED0])

            }
            else if (shouldCompileSynchronously)
            {
              v639 = v79 + 10 * shouldCompileSynchronously;
              v78 = a31;
              do
              {
                if (*(_WORD *)(v79 + 6))
                {
                  v640 = STACK[0x388];
                  do
                  {
                    v641 = v640;
                    v640 = *(_QWORD *)(v640 + 8);
                    v77 = *(_QWORD *)(v641 + 32);
                    if (v640)
                      v642 = v77 == 0;
                    else
                      v642 = 0;
                  }
                  while (v642);
                  v80 = *(unsigned __int16 *)(v79 + 4);
                  if (v77 <= v80)
                    goto LABEL_953;
                  v643 = *(_QWORD *)(v641 + 40);
                  if (*(_BYTE *)(v643 + 16 * v80 + 5) && !*(_BYTE *)(v79 + 8))
                  {
                    v80 = *(unsigned __int16 *)(v643 + 16 * v80);
                    shouldCompileSynchronously = 1;
                    v83 = v80;
                  }
                  else
                  {
                    v80 = 0;
                    v83 = 0;
                    shouldCompileSynchronously = 1;
                  }
                  v77 = STACK[0x3F0];
                }
                else
                {
                  shouldCompileSynchronously = 0;
                  v80 = STACK[0x330];
                  v83 = v78;
                }
                if (*(_BYTE *)(v79 + 8))
                {
                  v644 = *(id *)(STACK[0x328] + 760);
                  objc_msgSend(v644, sel_length);
                  re::ShaderResourceBindState::bindVertexResource((uint64_t)&STACK[0x12C0], (unint64_t)v644, 0, *(unsigned __int16 *)v79, *(uint64_t **)(v77 + 8), shouldCompileSynchronously, v83);
                  if (v644)

                }
                else
                {
                  v645 = re::AttributeTable::buffers((re::AttributeTable *)STACK[0x388]);
                  v647 = *(unsigned __int16 *)(v79 + 4);
                  if (v646 <= v647)
                    goto LABEL_954;
                  re::ShaderResourceBindState::bindVertexResource((uint64_t)&STACK[0x12C0], *(_QWORD *)(v645 + 16 * v647), *(_DWORD *)(v645 + 16 * v647 + 8), *(unsigned __int16 *)v79, *(uint64_t **)(v77 + 8), shouldCompileSynchronously, v80);
                  STACK[0x330] = v80;
                  v83 = v78;
                }
                v79 += 10;
                v78 = v83;
              }
              while (v79 != v639);
              goto LABEL_721;
            }
            v83 = a31;
LABEL_721:
            a31 = v83;
            shouldCompileSynchronously = (unint64_t)&STACK[0x1E60];
            v234 = &STACK[0x1020];
            v80 = STACK[0x3F8];
            if (v818)
            {
              v83 = 8 * v818;
              v648 = (unsigned __int16 *)(v798 + 4);
              while (1)
              {
                v649 = (unint64_t *)re::SamplerTableReference::samplerAt((re::SamplerTableReference *)(&STACK[0xD20] + 3 * *(v648 - 1)), *v648);
                v650 = *(v648 - 2);
                v651 = *v649;
                if (v650 > 0x1E)
                  goto LABEL_726;
                v652 = &STACK[0x12C0] + v650;
                if (v652[186] != v651)
                  break;
LABEL_727:
                v648 += 4;
                v83 -= 8;
                if (!v83)
                  goto LABEL_728;
              }
              v652[186] = v651;
              v651 = *v649;
LABEL_726:
              objc_msgSend(*(id *)v77, "setVertexSamplerState:atIndex:", v651);
              goto LABEL_727;
            }
LABEL_728:
            if (*(_QWORD *)(*(_QWORD *)(v80 + 8) + 24))
            {
              v79 = STACK[0x2C0];
              v77 = *(_QWORD *)&v797[4];
              if (STACK[0x2C0])
              {
                do
                {
                  STACK[0x5A0] = v77;
                  shouldCompileSynchronously = STACK[0x3F0];
                  v653 = re::processArgumentBufferContextAndUseResources((uint64_t)&STACK[0x588], (uint64_t)&STACK[0x5D0], (id *)STACK[0x3F0]);
                  v78 = *(unsigned __int8 *)(v653 + 63);
                  if (v78 >= 2)
                    goto LABEL_948;
                  v83 = v653;
                  v80 = (unint64_t)*(id *)(v653 + 8 * v78);
                  objc_msgSend(*(id *)(v83 + 8 * v78), sel_length);
                  v655 = *(unsigned __int16 *)(v77 + 136);
                  v656 = *(uint64_t **)(shouldCompileSynchronously + 8);
                  if (v655 < 0x1F)
                  {
                    STACK[0x1ED0] = v80;
                    STACK[0x1ED8] = 0;
                    v83 = (uint64_t)(&STACK[0x12C0] + 3 * v655 + 93);
                    LOBYTE(STACK[0x1EE0]) = 1;
                    LOWORD(STACK[0x1EE2]) = 0;
                    LODWORD(STACK[0x1EE4]) = 0;
                    if (!re::ShaderResourceBindState::BufferBindState::operator==(v83, (uint64_t)&STACK[0x1ED0]))
                    {
                      v657 = *v656;
                      if (*(_QWORD *)v83 == v80)
                        ((void (*)(uint64_t, char *, _QWORD, unint64_t))v656[12])(v657, sel_setFragmentBufferOffset_atIndex_, 0, v655);
                      else
                        ((void (*)(uint64_t, char *, unint64_t, _QWORD, unint64_t))v656[11])(v657, sel_setFragmentBuffer_offset_atIndex_, v80, 0, v655);
                      *(_QWORD *)v83 = v80;
                      *(&STACK[0x12C0] + 3 * v655 + 94) = 0;
                      v658 = &STACK[0x12C0] + 3 * v655;
                      if (!*((_BYTE *)v658 + 760))
                        *((_BYTE *)v658 + 760) = 1;
                      v659 = &STACK[0x12C0] + 3 * v655;
                      *((_WORD *)v659 + 381) = 0;
                      *((_DWORD *)v659 + 191) = 0;
                    }
                  }
                  else
                  {
                    ((void (*)(_QWORD, char *, unint64_t, _QWORD, _QWORD))v656[11])(*v656, sel_setFragmentBuffer_offset_atIndex_, v80, 0, *(unsigned __int16 *)(v77 + 136));
                  }
                  if (v80)

                  v77 += 144;
                  --v79;
                  shouldCompileSynchronously = (unint64_t)&STACK[0x1E60];
                  v234 = &STACK[0x1020];
                }
                while (v79);
              }
              v660 = *(_QWORD *)(*(_QWORD *)STACK[0x3D0] + 8);
              v77 = STACK[0x3F0];
              if (v660)
              {
                v661 = *(_QWORD *)(v660 + 8);
                if (v661)
                {
                  v662 = 0;
                  for (n = 0; n < v661; v662 = ++n)
                  {
                    v664 = *(_QWORD *)(v660 + 16);
                    v665 = *(_QWORD *)(v664 + 8 * v662);
                    if (v665)
                    {
                      v666 = objc_msgSend(*(id *)(v664 + 8 * v662), sel_length);
                      STACK[0x1ED0] = v665;
                      LODWORD(STACK[0x1ED8]) = 0;
                      LODWORD(STACK[0x1EDC]) = v666;
                      re::ShaderResourceBindState::bindFragmentResource((re::ShaderResourceBindState *)&STACK[0x12C0], (const BufferView *)&STACK[0x1ED0], n, *(RenderCommandEncoder **)(v77 + 8));
                      v661 = *(_QWORD *)(v660 + 8);
                    }
                  }
                }
              }
              v667 = (re::FrameContext *)STACK[0x2B8];
              v668 = STACK[0x3C0];
              v669 = STACK[0x2B0];
              if (v809)
              {
                v670 = v789;
                do
                {
                  re::fillConstantBuffer((uint64_t)&STACK[0x1ED0], v667, v669, (uint64_t)&STACK[0x628], v795, (uint64_t)&STACK[0x710], v668, v670);
                  STACK[0x1E60] = STACK[0x1EE0];
                  STACK[0x1E68] = STACK[0x1ED8];
                  re::ShaderResourceBindState::bindFragmentResource((re::ShaderResourceBindState *)&STACK[0x12C0], (const BufferView *)&STACK[0x1E60], *(unsigned __int16 *)(v670 + 96), *(RenderCommandEncoder **)(v77 + 8));
                  v670 += 112;
                }
                while (v670 != v789 + 112 * v809);
              }
              v126 = v788;
              if (v813)
              {
                v671 = 8 * v813;
                v672 = v792;
                do
                {
                  if (*((_BYTE *)v672 + 6))
                  {
                    v673 = *v672;
                    if (v673 <= 0x1E)
                    {
                      v674 = &STACK[0x12C0] + 2 * v673;
                      if (*((_BYTE *)v674 + 2480))
                      {
                        if (!v674[311])
                          goto LABEL_771;
                      }
                      else
                      {
                        *((_BYTE *)v674 + 2480) = 1;
                      }
                      v674[311] = 0;
                    }
                    (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v77 + 8) + 104))(**(_QWORD **)(v77 + 8), sel_setFragmentTexture_atIndex_, 0);
                  }
                  else
                  {
                    v675 = *(&STACK[0x1020] + v672[1]);
                    (*(void (**)(unint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v675 + 24))(&STACK[0x1ED0], v675, v672[2]);
                    v676 = *v672;
                    v677 = (void *)STACK[0x1ED0];
                    if (v676 <= 0x1E)
                    {
                      v678 = &STACK[0x12C0] + 2 * v676;
                      if (*((_BYTE *)v678 + 2480))
                      {
                        if ((void *)v678[311] == v677)
                        {
                          if (!v677)
                            goto LABEL_771;
LABEL_770:

                          goto LABEL_771;
                        }
                      }
                      else
                      {
                        *((_BYTE *)v678 + 2480) = 1;
                      }
                      v678[311] = (unint64_t)v677;
                    }
                    (*(void (**)(_QWORD, char *, void *))(*(_QWORD *)(v77 + 8) + 104))(**(_QWORD **)(v77 + 8), sel_setFragmentTexture_atIndex_, v677);
                    v677 = (void *)STACK[0x1ED0];
                    if (STACK[0x1ED0])
                      goto LABEL_770;
                  }
LABEL_771:
                  v672 += 4;
                  v671 -= 8;
                }
                while (v671);
              }
              v79 = 48;
              if (v811)
              {
                v679 = 8 * v811;
                v680 = (unsigned __int16 *)(v791 + 4);
                do
                {
                  STACK[0x1ED0] = re::BufferTableReference::getBuffer((re::BufferTableReference *)(&STACK[0xDB0] + 6 * *(v680 - 1)), *v680);
                  STACK[0x1ED8] = v681;
                  re::ShaderResourceBindState::bindFragmentResource((re::ShaderResourceBindState *)&STACK[0x12C0], (const BufferView *)&STACK[0x1ED0], *(v680 - 2), *(RenderCommandEncoder **)(v77 + 8));
                  v680 += 4;
                  v679 -= 8;
                }
                while (v679);
              }
              v80 = STACK[0x3F8];
              if (v810)
              {
                v682 = 8 * v810;
                v683 = (unsigned __int16 *)(v790 + 4);
                while (1)
                {
                  v684 = (unint64_t *)re::SamplerTableReference::samplerAt((re::SamplerTableReference *)(&STACK[0xD20] + 3 * *(v683 - 1)), *v683);
                  v685 = *(v683 - 2);
                  v686 = *v684;
                  if (v685 > 0x1E)
                    goto LABEL_780;
                  v687 = &STACK[0x12C0] + v685;
                  if (v687[217] != v686)
                    break;
LABEL_781:
                  v683 += 4;
                  v682 -= 8;
                  if (!v682)
                    goto LABEL_782;
                }
                v687[217] = v686;
                v686 = *v684;
LABEL_780:
                objc_msgSend(*(id *)v77, sel_setFragmentSamplerState_atIndex_, v686);
                goto LABEL_781;
              }
            }
LABEL_782:
            v688 = *(_BYTE *)(STACK[0x3C0] + 1) & 1;
            if ((STACK[0x538] & 0x10) == 0 || LOBYTE(STACK[0x54C]) != v688)
            {
              (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v77 + 8) + 136))(**(_QWORD **)(v77 + 8), sel_setFrontFacingWinding_, *(_BYTE *)(STACK[0x3C0] + 1) & 1);
              LOBYTE(STACK[0x54C]) = v688;
              LOWORD(STACK[0x538]) |= 0x10u;
            }
            v83 = STACK[0x318];
            re::EncoderState::setVertexAmplificationCountForState((_anonymous_namespace_ *)&STACK[0x538], (_anonymous_namespace_ *)(v777 != 0), v779 != 0, v816 + 8, *(unsigned __int8 *)STACK[0x320], *(unsigned __int8 *)STACK[0x318], v77);
            if (*(_QWORD *)(*(_QWORD *)(v80 + 8) + 184))
            {
              v78 = STACK[0x340];
              v689 = re::AttributeTable::buffers(*(re::AttributeTable **)STACK[0x340]);
              v691 = *v804;
              if (v690 <= v691)
                goto LABEL_960;
              v83 = *(_QWORD *)(v689 + 16 * v691);
              v692 = re::AttributeTable::buffers(*(re::AttributeTable **)v78);
              v694 = *v804;
              if (v693 <= v694)
                goto LABEL_961;
              objc_msgSend(*(id *)v77, sel_setTessellationFactorBuffer_offset_instanceStride_, v83, *(unsigned int *)(v692 + 16 * v694 + 8), 0);
              objc_msgSend(*(id *)v77, sel_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_instanceCount_baseInstance_, *(unsigned __int8 *)(*(_QWORD *)(v80 + 8) + 176), 0, *v786, 0, 0, 1);
              goto LABEL_789;
            }
            v698 = *(unsigned __int16 *)v83;
            v699 = *((_DWORD *)v75 + 28);
            if (v699)
            {
              v701 = (v698 & 2) == 0 || v699 != 2;
              v702 = (v698 & 1) != 0 && v699 == 1;
              v83 = (uint64_t)v785;
              if (!v702 && v701)
                goto LABEL_789;
            }
            else
            {
              v83 = (uint64_t)v785;
              if ((v698 & 3) == 0)
              {
LABEL_789:
                v695 = STACK[0x2B0];
                *(_DWORD *)(v695 + 8) = *(_DWORD *)(STACK[0x2B0] + 8) + 1;
                v696 = *(_DWORD **)(v695 + 96);
                if (v696)
                  ++*v696;
                v697 = (unint64_t ***)STACK[0x3F8];
                if (STACK[0x2F0])
                {
                  LOBYTE(STACK[0x1ED0]) = 0;
                  LOBYTE(STACK[0x1168]) = 0;
                  LOBYTE(STACK[0x1140]) = 0;
                  if (*v697)
                  {
                    v755 = **v697;
                    if (v755)
                    {
                      v80 = *v755;
                      LOBYTE(STACK[0x1E60]) = 1;
                      re::DynamicString::DynamicString((re::DynamicString *)&STACK[0x1E68], (const re::DynamicString *)(v755 + 305));
                      re::Optional<re::DynamicString>::operator=((unsigned __int8 *)&STACK[0x1168], &STACK[0x1E60]);
                      if (LOBYTE(STACK[0x1E60]) && STACK[0x1E68] && (STACK[0x1E70] & 1) != 0)
                        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0x1E68] + 40))(STACK[0x1E68], STACK[0x1E78]);
                      v756 = (const re::DynamicString *)(**v697 + 309);
                      LOBYTE(STACK[0x1E60]) = 1;
                      re::DynamicString::DynamicString((re::DynamicString *)&STACK[0x1E68], v756);
                      re::Optional<re::DynamicString>::operator=((unsigned __int8 *)&STACK[0x1140], &STACK[0x1E60]);
                      if (LOBYTE(STACK[0x1E60]) && STACK[0x1E68] && (STACK[0x1E70] & 1) != 0)
                        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0x1E68] + 40))(STACK[0x1E68], STACK[0x1E78]);
                      v757 = **v697;
                      LOBYTE(STACK[0x1E60]) = 1;
                      v758 = *(_OWORD *)(v757 + 11);
                      *(_OWORD *)&STACK[0x1E68] = *(_OWORD *)(v757 + 9);
                      *(_OWORD *)&STACK[0x1E78] = v758;
                      *(_OWORD *)&STACK[0x1E88] = *(_OWORD *)(v757 + 13);
                      LODWORD(STACK[0x1E98]) = *((_DWORD *)v757 + 30);
                      v759 = *((unsigned __int8 *)v757 + 124);
                      LOBYTE(STACK[0x1E9C]) = v759;
                      if (v759)
                        LOBYTE(STACK[0x1E9D]) = *((_BYTE *)v757 + 125);
                      re::DynamicArray<re::RenderAttachmentState>::DynamicArray((uint64_t)&STACK[0x1EA0], (uint64_t *)v757 + 16);
                      re::Optional<re::TechniqueState>::operator=((uint64_t)&STACK[0x1ED0], (unsigned __int8 *)&STACK[0x1E60]);
                      if (LOBYTE(STACK[0x1E60]) && STACK[0x1EA0] && STACK[0x1EC0])
                        (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x1EA0] + 40))(STACK[0x1EA0]);
                      v760 = LOBYTE(STACK[0x1168]);
                      LOBYTE(STACK[0x1118]) = v760;
                      if (v760)
                        re::DynamicString::DynamicString((re::DynamicString *)&STACK[0x1120], (const re::DynamicString *)&STACK[0x1170]);
                      v77 = STACK[0x3F0];
                      shouldCompileSynchronously = (unint64_t)&STACK[0x1E60];
                      v126 = v788;
                    }
                    else
                    {
                      v80 = 0;
                      LOBYTE(STACK[0x1118]) = 0;
                    }
                    v761 = LOBYTE(STACK[0x1140]);
                    LOBYTE(STACK[0x10F0]) = v761;
                    if (v761)
                      re::DynamicString::DynamicString((re::DynamicString *)&STACK[0x10F8], (const re::DynamicString *)&STACK[0x1148]);
                  }
                  else
                  {
                    v80 = 0;
                    LOBYTE(STACK[0x1118]) = 0;
                    LOBYTE(STACK[0x10F0]) = 0;
                  }
                  re::Optional<re::TechniqueState>::Optional((uint64_t)&STACK[0x1088], (unsigned __int8 *)&STACK[0x1ED0]);
                  *(_OWORD *)&STACK[0x1E60] = *(_OWORD *)&STACK[0x410];
                  LOBYTE(STACK[0x1E70]) = STACK[0x420];
                  re::DrawCallRecorderGroup::recordEncodedDrawCall(STACK[0x2F0], STACK[0x3C0], (const char *)v80, (unsigned __int8 *)&STACK[0x1118], (unsigned __int8 *)&STACK[0x10F0], (uint64_t)&STACK[0x1088], (uint64_t)&STACK[0x1E60], *(unsigned int *)STACK[0x3D8], 0);
                  if (LOBYTE(STACK[0x1088]) && STACK[0x10C8])
                  {
                    if (STACK[0x10E8])
                      (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x10C8] + 40))(STACK[0x10C8]);
                    STACK[0x10E8] = 0;
                    STACK[0x10D0] = 0;
                    STACK[0x10D8] = 0;
                    STACK[0x10C8] = 0;
                    ++LODWORD(STACK[0x10E0]);
                  }
                  if (LOBYTE(STACK[0x10F0]) && STACK[0x10F8])
                  {
                    if ((STACK[0x1100] & 1) != 0)
                      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0x10F8] + 40))(STACK[0x10F8], STACK[0x1108]);
                    *(_OWORD *)&STACK[0x10F8] = 0u;
                    *(_OWORD *)&STACK[0x1108] = 0u;
                  }
                  if (LOBYTE(STACK[0x1118]) && STACK[0x1120])
                  {
                    if ((STACK[0x1128] & 1) != 0)
                      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0x1120] + 40))(STACK[0x1120], STACK[0x1130]);
                    *(_OWORD *)&STACK[0x1120] = 0u;
                    *(_OWORD *)&STACK[0x1130] = 0u;
                  }
                  if (LOBYTE(STACK[0x1140]) && STACK[0x1148] && (STACK[0x1150] & 1) != 0)
                    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0x1148] + 40))(STACK[0x1148], STACK[0x1158]);
                  if (LOBYTE(STACK[0x1168]) && STACK[0x1170] && (STACK[0x1178] & 1) != 0)
                    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0x1170] + 40))(STACK[0x1170], STACK[0x1180]);
                  if (LOBYTE(STACK[0x1ED0]) && STACK[0x1F10] && STACK[0x1F30])
                    (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x1F10] + 40))(STACK[0x1F10]);
                }
                v192 = 1;
                v78 = LODWORD(STACK[0x3B4]);
                v79 = STACK[0x2E8];
                goto LABEL_793;
              }
            }
            v703 = *(unsigned int *)STACK[0x3D8];
            v704 = *(_DWORD *)STACK[0x320];
            v705 = *v778;
            if (v704 * v703 > 1 || (_DWORD)v705)
            {
              v712 = (v698 >> 1) & 1;
              if ((v698 & 1) != 0)
                LOBYTE(v712) = 0;
              if ((v712 & (v704 > 1)) != 0)
                v78 = *(unsigned int *)STACK[0x3D8];
              else
                v78 = 0;
              if ((~v698 & 3) != 0)
                v713 = 1;
              else
                v713 = v704;
              v714 = *(unsigned __int16 *)STACK[0x3C0];
              if ((v714 & 1) != 0)
              {
                v80 = *v775;
                if (!(_DWORD)v80)
                  goto LABEL_789;
                STACK[0x388] = v713;
                v79 = (v714 >> 1) & 7;
                v729 = (v714 >> 7) & 1;
                v730 = re::AttributeTable::buffers(*(re::AttributeTable **)STACK[0x340]);
                v732 = *v772;
                if (v779)
                {
                  if (v731 <= v732)
                    goto LABEL_966;
                  v83 = *(_QWORD *)(v730 + 16 * v732);
                  v733 = re::AttributeTable::buffers(*(re::AttributeTable **)STACK[0x340]);
                  v735 = *v772;
                  if (v734 <= v735)
                    goto LABEL_967;
                  v736 = (_DWORD *)STACK[0x3D8];
                  (*(void (**)(_QWORD, char *, uint64_t, unint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v77 + 8) + 232))(**(_QWORD **)(v77 + 8), sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_baseVertex_baseInstance_, v79, v80, v729, v83, *(unsigned int *)(v733 + 16 * v735 + 8), *(unsigned int *)STACK[0x3D8]);
                  v737 = STACK[0x388];
                  v738 = *v736 * STACK[0x388] * (*v775 / 3u);
                  v739 = STACK[0x2B0];
                  *(_DWORD *)(v739 + 12) = v738 + *(_DWORD *)(STACK[0x2B0] + 12);
                  v740 = *(_DWORD **)(v739 + 104);
                  if (v740)
                    *v740 += v738;
                  v741 = *(_DWORD *)STACK[0x3D8] * v737;
                }
                else
                {
                  if (v731 <= v732)
                    goto LABEL_968;
                  v83 = *(_QWORD *)(v730 + 16 * v732);
                  v746 = re::AttributeTable::buffers(*(re::AttributeTable **)STACK[0x340]);
                  v748 = *v772;
                  if (v747 <= v748)
                    goto LABEL_969;
                  v749 = (_DWORD *)STACK[0x3D8];
                  v750 = STACK[0x388];
                  (*(void (**)(_QWORD, char *, _QWORD, unint64_t, uint64_t, uint64_t, _QWORD, unint64_t))(*(_QWORD *)(v77 + 8) + 232))(**(_QWORD **)(v77 + 8), sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_baseVertex_baseInstance_, v79, v80, v729, v83, *(unsigned int *)(v746 + 16 * v748 + 8), *(unsigned int *)STACK[0x3D8] * (unint64_t)STACK[0x388]);
                  v751 = *v749 * v750 * (*v775 / 3u);
                  v739 = STACK[0x2B0];
                  *(_DWORD *)(v739 + 12) = v751 + *(_DWORD *)(STACK[0x2B0] + 12);
                  v752 = *(_DWORD **)(v739 + 104);
                  if (v752)
                    *v752 += v751;
                  v741 = *(_DWORD *)STACK[0x3D8] * v750;
                }
                v728 = v741 * *v785;
                *(_DWORD *)(v739 + 16) += v728;
                v710 = *(_DWORD **)(v739 + 112);
                shouldCompileSynchronously = (unint64_t)&STACK[0x1E60];
                if (!v710)
                  goto LABEL_789;
              }
              else
              {
                v715 = (v714 >> 1) & 7;
                if (v779)
                {
                  v716 = v78 + v705;
                  v717 = *(_QWORD *)(v77 + 8);
                }
                else
                {
                  v703 = v713 * (unint64_t)v703;
                  v716 = v78 + v705;
                  v717 = *(_QWORD *)(v77 + 8);
                  v715 = v715;
                }
                (*(void (**)(_QWORD, char *, uint64_t, _QWORD, _QWORD, unint64_t, uint64_t))(v717 + 224))(*(_QWORD *)v717, sel_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance_, v715, *v774, *(unsigned int *)v83, v703, v716);
                v742 = *(_DWORD *)v83;
                v743 = *(_DWORD *)STACK[0x3D8] * v713 * (*(_DWORD *)v83 / 3u);
                v744 = STACK[0x2B0];
                *(_DWORD *)(v744 + 12) = v743 + *(_DWORD *)(STACK[0x2B0] + 12);
                v745 = *(_DWORD **)(v744 + 104);
                if (v745)
                {
                  *v745 += v743;
                  v742 = *(_DWORD *)v83;
                }
                v728 = v742 * v713 * *(_DWORD *)STACK[0x3D8];
                *(_DWORD *)(v744 + 16) += v728;
                v710 = *(_DWORD **)(v744 + 112);
                if (!v710)
                  goto LABEL_789;
              }
            }
            else
            {
              v78 = *(unsigned __int16 *)STACK[0x3C0];
              if ((v78 & 1) == 0)
              {
                (*(void (**)(_QWORD, char *, unint64_t, _QWORD, _QWORD))(*(_QWORD *)(v77 + 8) + 200))(**(_QWORD **)(v77 + 8), sel_drawPrimitives_vertexStart_vertexCount_, (v78 >> 1) & 7, *v774, *(unsigned int *)v83);
                v706 = *(_DWORD *)v83;
                v707 = *(_DWORD *)v83 / 3u;
                v708 = STACK[0x2B0];
                *(_DWORD *)(v708 + 12) = *(_DWORD *)(STACK[0x2B0] + 12) + v707;
                v709 = *(_DWORD **)(v708 + 104);
                if (v709)
                {
                  *v709 += v707;
                  v706 = *(_DWORD *)v83;
                }
                *(_DWORD *)(v708 + 16) += v706;
                v710 = *(_DWORD **)(v708 + 112);
                if (!v710)
                  goto LABEL_789;
                v711 = *v710 + v706;
                goto LABEL_859;
              }
              v718 = *v775;
              if (!(_DWORD)v718)
                goto LABEL_789;
              STACK[0x388] = v718;
              v79 = STACK[0x340];
              v719 = re::AttributeTable::buffers(*(re::AttributeTable **)STACK[0x340]);
              v83 = (uint64_t)v772;
              v721 = *v772;
              if (v720 <= v721)
                goto LABEL_964;
              v80 = *(_QWORD *)(v719 + 16 * v721);
              v722 = re::AttributeTable::buffers(*(re::AttributeTable **)v79);
              v724 = *v772;
              if (v723 <= v724)
                goto LABEL_965;
              (*(void (**)(_QWORD, char *, unint64_t, unint64_t, _QWORD, unint64_t, _QWORD))(*(_QWORD *)(v77 + 8) + 216))(**(_QWORD **)(v77 + 8), sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_, (v78 >> 1) & 7, STACK[0x388], (v78 >> 7) & 1, v80, *(unsigned int *)(v722 + 16 * v724 + 8));
              v725 = *v775 / 3u;
              v726 = STACK[0x2B0];
              *(_DWORD *)(v726 + 12) = *(_DWORD *)(STACK[0x2B0] + 12) + v725;
              v727 = *(_DWORD **)(v726 + 104);
              if (v727)
                *v727 += v725;
              v728 = *v785;
              *(_DWORD *)(v726 + 16) += *v785;
              v710 = *(_DWORD **)(v726 + 112);
              if (!v710)
                goto LABEL_789;
            }
            v711 = *v710 + v728;
LABEL_859:
            *v710 = v711;
            goto LABEL_789;
          }
LABEL_447:
          STACK[0x1E60] = v469;
          *(_OWORD *)&STACK[0x1FE0] = 0u;
          *(_OWORD *)&STACK[0x1FD0] = 0u;
          *(_OWORD *)&STACK[0x1FC0] = 0u;
          *(_OWORD *)&STACK[0x1FB0] = 0u;
          *(_OWORD *)&STACK[0x1FA0] = 0u;
          *(_OWORD *)&STACK[0x1F90] = 0u;
          *(_OWORD *)&STACK[0x1F80] = 0u;
          *(_OWORD *)&STACK[0x1F70] = 0u;
          *(_OWORD *)&STACK[0x1F60] = 0u;
          *(_OWORD *)&STACK[0x1F50] = 0u;
          *(_OWORD *)&STACK[0x1F40] = 0u;
          *(_OWORD *)&STACK[0x1F30] = 0u;
          *(_OWORD *)&STACK[0x1F20] = 0u;
          *(_OWORD *)&STACK[0x1F10] = 0u;
          *(_OWORD *)&STACK[0x1F00] = 0u;
          *(_OWORD *)&STACK[0x1EF0] = 0u;
          *(_OWORD *)&STACK[0x1EE0] = 0u;
          *(_OWORD *)&STACK[0x1ED0] = 0u;
          LODWORD(STACK[0x1F70]) = 1;
          *(_OWORD *)&STACK[0x1F80] = 0uLL;
          STACK[0x1F78] = 0;
          LODWORD(STACK[0x1F90]) = 0;
          *(_OWORD *)&STACK[0x1FA0] = 0uLL;
          STACK[0x1F98] = 0;
          LODWORD(STACK[0x1FB0]) = 0;
          *(_OWORD *)&STACK[0x1FB8] = 0u;
          *(_OWORD *)&STACK[0x1FC8] = 0u;
          LODWORD(STACK[0x1FD8]) = 0;
          v485 = *(unsigned int *)(v483 + 4 * v482);
          if ((_DWORD)v485 != 0x7FFFFFFF)
          {
            v486 = STACK[0xD00];
            while (*(_QWORD *)(v486 + 304 * v485 + 8) != v469)
            {
              LODWORD(v485) = *(_DWORD *)(v486 + 304 * v485) & 0x7FFFFFFF;
              if ((_DWORD)v485 == 0x7FFFFFFF)
                goto LABEL_451;
            }
            v83 = v477;
            v488 = v486 + 304 * v485;
            goto LABEL_455;
          }
LABEL_451:
          v83 = v477;
        }
        else
        {
          v83 = *(_QWORD *)(v75[2] + 24);
          LODWORD(v482) = 0;
          STACK[0x1E60] = v469;
          *(_OWORD *)&STACK[0x1FE0] = 0u;
          *(_OWORD *)&STACK[0x1FD0] = 0u;
          *(_OWORD *)&STACK[0x1FC0] = 0u;
          *(_OWORD *)&STACK[0x1FB0] = 0u;
          *(_OWORD *)&STACK[0x1FA0] = 0u;
          *(_OWORD *)&STACK[0x1F90] = 0u;
          *(_OWORD *)&STACK[0x1F80] = 0u;
          *(_OWORD *)&STACK[0x1F70] = 0u;
          *(_OWORD *)&STACK[0x1F60] = 0u;
          *(_OWORD *)&STACK[0x1F50] = 0u;
          *(_OWORD *)&STACK[0x1F40] = 0u;
          *(_OWORD *)&STACK[0x1F30] = 0u;
          *(_OWORD *)&STACK[0x1F20] = 0u;
          *(_OWORD *)&STACK[0x1F10] = 0u;
          *(_OWORD *)&STACK[0x1F00] = 0u;
          *(_OWORD *)&STACK[0x1EF0] = 0u;
          *(_OWORD *)&STACK[0x1EE0] = 0u;
          *(_OWORD *)&STACK[0x1ED0] = 0u;
          LODWORD(STACK[0x1F70]) = 1;
          *(_OWORD *)&STACK[0x1F80] = 0uLL;
          STACK[0x1F78] = 0;
          LODWORD(STACK[0x1F90]) = 0;
          *(_OWORD *)&STACK[0x1FA0] = 0uLL;
          STACK[0x1F98] = 0;
          LODWORD(STACK[0x1FB0]) = 0;
          *(_OWORD *)&STACK[0x1FB8] = 0u;
          *(_OWORD *)&STACK[0x1FC8] = 0u;
          LODWORD(STACK[0x1FD8]) = 0;
        }
        v487 = re::HashTable<unsigned long long,re::BufferTable,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addAsMove((uint64_t)&STACK[0xCF0], v482, v469, &STACK[0x1E60], (uint64_t)&STACK[0x1ED0]);
        ++LODWORD(STACK[0xD18]);
        v488 = STACK[0xD00] + 304 * v487;
LABEL_455:
        v80 = v488 + 16;
        re::BufferTable::~BufferTable((re::BufferTable *)&STACK[0x1ED0]);
        v489 = *(_QWORD *)(STACK[0x3F8] + 8);
        v490 = *(_QWORD *)(v489 + 16);
        v491 = *(_QWORD *)(v489 + 24);
        if (v491)
          LODWORD(v491) = *(unsigned __int8 *)(v491 + 332);
        v492 = *(unsigned __int8 *)(v490 + 332);
        if (v492 <= v491)
          v492 = v491;
        LODWORD(STACK[0x1ED0]) = v492 - 1;
        STACK[0x1178] = 0;
        STACK[0x1168] = 0;
        STACK[0x1170] = 0;
        re::FixedArray<unsigned char>::init<int>(&STACK[0x1168], v83, shouldCompileSynchronously, &STACK[0x1ED0]);
        LODWORD(STACK[0x1ED0]) = 0;
        STACK[0x1150] = 0;
        STACK[0x1140] = 0;
        STACK[0x1148] = 0;
        STACK[0x328] = v83;
        re::FixedArray<unsigned char>::init<int>(&STACK[0x1140], v83, shouldCompileSynchronously, &STACK[0x1ED0]);
        if (STACK[0x2E0])
        {
          v493 = (unint64_t *)((char *)v234 + 6 * STACK[0x2E0]);
          do
          {
            v78 = *(unsigned __int16 *)v234;
            v83 = STACK[0x1170];
            if (STACK[0x1170] <= v78)
              goto LABEL_949;
            *(_BYTE *)(STACK[0x1178] + v78) = *((_BYTE *)v234 + 2);
            v78 = *(unsigned __int16 *)v234;
            v83 = STACK[0x1148];
            if (STACK[0x1148] <= v78)
              goto LABEL_950;
            *(_BYTE *)(STACK[0x1150] + v78) = *((_BYTE *)v234 + 4);
            v234 = (unint64_t *)((char *)v234 + 6);
          }
          while (v234 != v493);
        }
        if (STACK[0x2C0])
        {
          v494 = v77 + 6 * STACK[0x2C0];
          do
          {
            v78 = *(unsigned __int16 *)v77;
            v234 = (unint64_t *)STACK[0x1170];
            if (STACK[0x1170] <= v78)
              goto LABEL_951;
            *(_BYTE *)(STACK[0x1178] + v78) = *(_BYTE *)(v77 + 2);
            v78 = *(unsigned __int16 *)v77;
            v234 = (unint64_t *)STACK[0x1148];
            if (STACK[0x1148] <= v78)
              goto LABEL_952;
            *(_BYTE *)(STACK[0x1150] + v78) = *(_BYTE *)(v77 + 4);
            v77 += 6;
          }
          while (v77 != v494);
        }
        re::BufferTable::deinit((re::BufferTable *)v80);
        re::BufferTable::init((re::BufferTable *)v80, (re::Allocator *)STACK[0x328], 1uLL);
        if (STACK[0x1170] != shouldCompileSynchronously)
          goto LABEL_962;
        if (STACK[0x1148] != shouldCompileSynchronously)
          goto LABEL_963;
        re::FrameContext::perFrameAlloc((re::FrameContext *)STACK[0x2B8], 2 * shouldCompileSynchronously, 0x10uLL, (uint64_t)&STACK[0x1ED0]);
        v496 = STACK[0x1ED0];
        v497 = LODWORD(STACK[0x1ED8]);
        memcpy((void *)(STACK[0x1ED0] + v497), (const void *)STACK[0x1178], shouldCompileSynchronously);
        memcpy((void *)(v496 + (v497 + shouldCompileSynchronously)), (const void *)STACK[0x1150], shouldCompileSynchronously);
        STACK[0x1118] = 0x66DF0473A9B7D6CALL;
        v498 = STACK[0x1ED8];
        STACK[0x1E60] = STACK[0x1EE0];
        STACK[0x1E68] = v498;
        re::BufferTable::setBuffer((re::BufferTable *)v80, (const re::WeakStringID *)&STACK[0x1118], (const BufferView *)&STACK[0x1E60]);
        if (STACK[0x1140] && STACK[0x1148])
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0x1140] + 40))(STACK[0x1140], STACK[0x1150]);
        v77 = STACK[0x3F0];
        if (STACK[0x1168] && STACK[0x1170])
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0x1168] + 40))(STACK[0x1168], STACK[0x1178]);
        goto LABEL_479;
      }
      re::Optional<re::DrawCallEncoderStates>::~Optional((uint64_t)&STACK[0x1088]);
      v192 = 0;
      v79 = STACK[0x328];
LABEL_361:
      v78 = LODWORD(STACK[0x3B4]);
LABEL_793:
      re::ConstantTable::~ConstantTable((re::ConstantTable *)&STACK[0x1190]);
      STACK[0x328] = v79;
LABEL_794:
      v193 = 1;
      v194 = 1;
    }
    while ((v78 & 1) == 0);
    v162 = v802 + 1;
    v163 = v771;
    if (v771 != (_QWORD *)*v75 || v162 != *(_QWORD *)(v77 + 56))
      continue;
    break;
  }
  v161 = *(int32x2_t **)(v77 + 64);
LABEL_52:
  v161[2].i32[1] += LODWORD(STACK[0x68C]) + LODWORD(STACK[0x654]);
  v161[3] = vadd_s32(vrev64_s32(vadd_s32((int32x2_t)STACK[0x690], (int32x2_t)STACK[0x658])), v161[3]);
  if (STACK[0x558])
  {

    STACK[0x558] = 0;
  }
  if (STACK[0x550])

  if (STACK[0x560] && STACK[0x580])
    (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x560] + 40))(STACK[0x560]);
  if (STACK[0x5F8])
  {
    if (STACK[0x618])
      (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x5F8] + 40))(STACK[0x5F8]);
    STACK[0x618] = 0;
    STACK[0x600] = 0;
    STACK[0x608] = 0;
    STACK[0x5F8] = 0;
    ++LODWORD(STACK[0x610]);
  }
  if (STACK[0x5D0] && STACK[0x5F0])
    (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x5D0] + 40))(STACK[0x5D0]);
  if (STACK[0x780] && STACK[0x7A0])
    (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x780] + 40))(STACK[0x780]);
  re::Optional<re::DrawCallEncoderStates>::~Optional((uint64_t)&STACK[0xCD0]);
  re::HashTable<unsigned long long,re::BufferTable,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)&STACK[0xCF0]);
}

uint64_t re::resolveTechniqueVariant(re::MaterialParameterTableLayers *this, _QWORD *a2, _anonymous_namespace_ *a3, unsigned int a4, unint64_t *a5, int a6, unsigned __int8 *a7)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v14;
  unsigned __int8 v15;
  re::MaterialTechnique *TechniqueAtIndex;
  uint64_t result;
  _OWORD *v18;
  uint64_t v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unsigned __int8 v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30[2];
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  uint64_t v34;

  if (a4 == -1)
    return 0;
  v33 = v7;
  v34 = v8;
  if (a6)
  {
    v14 = (char *)this + 112;
    if (*a7)
      v14 = a7 + 1;
    v15 = *v14 | 4;
    if (!*a7)
      *a7 = 1;
    a7[1] = v15;
  }
  TechniqueAtIndex = (re::MaterialTechnique *)re::MaterialParameterTableLayers::getTechniqueAtIndex(this, a4);
  result = re::MaterialTechnique::getOrCreateTechniqueVariant(TechniqueAtIndex, 0, 0);
  v18 = (_OWORD *)((char *)this + 88);
  if (*((_BYTE *)this + 112) || *(_QWORD *)v18 || *((_QWORD *)this + 12) || *((_QWORD *)this + 13))
  {
    v19 = *((_BYTE *)TechniqueAtIndex + 40) ? (uint64_t)TechniqueAtIndex + 48 : *(_QWORD *)TechniqueAtIndex + 8;
    if (*(_QWORD *)(v19 + 8))
    {
      v20 = v18[1];
      v32[0] = *v18;
      v32[1] = v20;
      v21 = *(_QWORD *)(v19 + 24);
      v30[0] = *a7;
      if (v30[0])
        v30[1] = a7[1];
      v31 = ((v21 << 6)
           + (v21 >> 2)
           + re::CombinedDynamicFunctionConstants::hash((unsigned __int8 *)v32, v30)
           - 0x61C8864680B583E9) ^ v21;
      v22 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a2, &v31);
      if (v22 == -1)
      {
        v22 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a3, &v31);
        if (v22 == -1)
        {
          v26[0] = *a7;
          if (v26[0])
            v26[1] = a7[1];
          re::CombinedDynamicFunctionConstants::combinedMap((uint64_t *)v32, v26, (_anonymous_namespace_ *)&v27);
          v25 = re::FunctionConstantsEnumerator::enumerateFunctionConstantSet(v19, &v27);
          if (v29)
          {
            if (v28)
              v28 = 0;
            if (v27)
              (*(void (**)(void))(*(_QWORD *)v29 + 40))();
          }
          v27 = v25;
          v24 = (unint64_t *)re::HashBrown<unsigned long,unsigned long long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::addNew(a3, &v31, &v27);
          goto LABEL_24;
        }
        v23 = *((_QWORD *)a3 + 1);
      }
      else
      {
        v23 = a2[1];
      }
      v24 = (unint64_t *)(v23 + 16 * v22 + 8);
LABEL_24:
      result = re::MaterialTechnique::getOrCreateTechniqueVariant(TechniqueAtIndex, *v24, 0);
      *a5 = *v24;
    }
  }
  return result;
}

_anonymous_namespace_ *re::EncoderState::setVertexAmplificationCountForState(_anonymous_namespace_ *result, _anonymous_namespace_ *a2, int a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  _anonymous_namespace_ *v12;
  unsigned __int8 v13;
  NSObject *v14;
  const RenderCommandEncoder *v15;
  uint8_t v16[16];

  v12 = result;
  if ((~*(unsigned __int16 *)result & 0x60) != 0
    || *((unsigned __int8 *)result + 21) != a5
    || *((unsigned __int16 *)result + 11) != a6)
  {
    if (*(_QWORD *)(a4 + 8) != a5)
    {
      do
        v13 = __ldaxr(re::EncoderState::setVertexAmplificationCountForState(BOOL,BOOL,re::FixedArray<re::mtl::Viewport> const&,unsigned char,unsigned char,re::mtl::RenderCommandEncoder &)::__FILE____LINE___logged);
      while (__stlxr(1u, re::EncoderState::setVertexAmplificationCountForState(BOOL,BOOL,re::FixedArray<re::mtl::Viewport> const&,unsigned char,unsigned char,re::mtl::RenderCommandEncoder &)::__FILE____LINE___logged));
      if ((v13 & 1) == 0)
      {
        v14 = *re::graphicsLogObjects(result);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v16 = 0;
          _os_log_impl(&dword_224FE9000, v14, OS_LOG_TYPE_DEFAULT, "The viewport count and size must match", v16, 2u);
        }
      }
    }
    re::mtl::RenderCommandEncoder::setViewports(a7);
    result = re::setVertexAmplificationCount(a2, a3, a5, a6, a7, v15);
    *((_BYTE *)v12 + 21) = a5;
    *((_WORD *)v12 + 11) = a6;
    *(_WORD *)v12 |= 0x60u;
  }
  return result;
}

uint64_t re::resolveStencilInfo(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;

  v6 = *(_QWORD **)(a2 + 64);
  v7 = v6[6];
  if (v7)
  {
    v4 = *(unsigned __int8 *)(v7 + 1080);
    if (*(_BYTE *)(v7 + 1080))
    {
      v4 = *(_QWORD *)(v7 + 1081);
      LODWORD(v7) = 1;
    }
    else
    {
      LODWORD(v7) = 0;
    }
  }
  v8 = v6[7];
  if (v8)
  {
    v5 = *(unsigned __int8 *)(v8 + 1080);
    if (*(_BYTE *)(v8 + 1080))
    {
      v5 = *(_QWORD *)(v8 + 1081);
      LODWORD(v8) = 1;
    }
    else
    {
      LODWORD(v8) = 0;
    }
  }
  v9 = v6[9];
  if (!v9)
  {
    v10 = 0;
LABEL_14:
    if (!a4)
      goto LABEL_12;
    goto LABEL_15;
  }
  v10 = *(unsigned __int8 *)(v9 + 1080);
  if (!*(_BYTE *)(v9 + 1080))
    goto LABEL_14;
  v9 = *(_QWORD *)(v9 + 1081);
  v10 = 1;
  if (!a4)
  {
LABEL_12:
    LODWORD(v11) = 255;
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v11) = *(unsigned __int8 *)(**(_QWORD **)a4 + 78);
LABEL_16:
  *(_OWORD *)result = *(_OWORD *)a3;
  *(_BYTE *)(result + 16) = *(_BYTE *)(a3 + 16);
  v12 = *(unsigned __int8 *)(a2 + 112);
  if (v12 != 255)
  {
    *(_BYTE *)result = v12 == 1;
    *(_DWORD *)(result + 1) = *(_DWORD *)(a2 + 113);
    *(_WORD *)(result + 5) = *(_WORD *)(a2 + 117);
    *(_QWORD *)(result + 8) = *(_QWORD *)result;
    *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 119);
  }
  if (((v7 | v8 | v10) & 1) != 0)
  {
    if ((_DWORD)v8)
      v13 = v5;
    else
      v13 = v9;
    if ((_DWORD)v7)
      v14 = v4;
    else
      v14 = v13;
    *(_BYTE *)result = v14 == 1;
    *(_BYTE *)(result + 1) = BYTE1(v14);
    *(_BYTE *)(result + 2) = BYTE2(v14);
    *(_BYTE *)(result + 3) = BYTE3(v14);
    *(_BYTE *)(result + 4) = BYTE4(v14);
    *(_BYTE *)(result + 5) = BYTE5(v14);
    *(_BYTE *)(result + 6) = BYTE6(v14);
    *(_QWORD *)(result + 8) = *(_QWORD *)result;
    v11 = HIBYTE(v14);
  }
  else if ((_DWORD)v11 == 255)
  {
    return result;
  }
  *(_BYTE *)(result + 16) = v11;
  return result;
}

uint64_t re::ShaderResourceBindState::reset(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = 0;
  v2 = 1488;
  v3 = 1984;
  do
  {
    v4 = this + v1;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    if (!*(_BYTE *)(this + v1 + 16))
      *(_BYTE *)(v4 + 16) = 1;
    *(_WORD *)(v4 + 18) = 0;
    *(_DWORD *)(v4 + 20) = 0;
    *(_OWORD *)(v4 + 744) = 0uLL;
    if (!*(_BYTE *)(v4 + 760))
      *(_BYTE *)(v4 + 760) = 1;
    v5 = this + v1;
    *(_WORD *)(v5 + 762) = 0;
    *(_DWORD *)(v5 + 764) = 0;
    if (*(_BYTE *)(this + v3))
      *(_BYTE *)(this + v3) = 0;
    if (*(_BYTE *)(this + v3 + 496))
      *(_BYTE *)(this + v3 + 496) = 0;
    v6 = (_QWORD *)(this + v2);
    *v6 = 0;
    v6[31] = 0;
    v1 += 24;
    v2 += 8;
    v3 += 16;
  }
  while (v1 != 744);
  return this;
}

void re::getOrCreateEncoderStates(uint64_t a1, const char ****a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 *a11, unsigned __int8 a12, __int128 a13, uint64_t a14)
{
  const char **v21;
  re *v22;
  id *v23;
  id *v24;
  const char ***v25;
  const char ***v26;
  const char **v27;
  const char *v28;
  re::CachedPipelineState *v29;
  char *v30;
  re *v31;
  uint8x8_t v32;
  uint8x8_t v33;
  char v34;
  int v35;
  int v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  uint8x8_t v39;
  int v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  uint16x8_t v43;
  uint64_t v44;
  char v45;
  NSObject *v46;
  const char *v47;
  const char *v48;
  unsigned int v49;
  char v50;
  char v51;
  re *DepthStencilState;
  void **v53;
  int v54;
  int v55;
  unsigned __int8 *v56;
  std::chrono::steady_clock::time_point v57;
  int v58;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  int v60;
  int v61;
  const char *v62;
  NSObject *v63;
  std::chrono::steady_clock::time_point v64;
  std::__cxx_contention_t v65;
  int v66;
  int v67;
  int v68;
  void *v69;
  void *v70;
  id v71;
  const char *v72;
  re::CachedPipelineState *v73;
  re::CachedPipelineState *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  int v86;
  id *v87;
  void *v88;
  void *v89;
  void *v90;
  __int128 v91;
  _BYTE buf[24];
  uint64_t v93;
  uint64_t v94;
  char v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  unsigned __int8 v99;
  char v100;
  char v101;
  char v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  v89 = 0;
  v90 = 0;
  v88 = 0;
  v21 = **a2;
  v87 = 0;
  if (!*((_BYTE *)a2 + 16))
    goto LABEL_7;
  if (!*((_BYTE *)v21 + 2848))
    goto LABEL_7;
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)&v87, *a7);
  if (v87)
    goto LABEL_7;
  v86 = 0;
  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v75 = 0u;
  re::createVertexFetchFunctionKey((re *)a7, (uint64_t)&v75);
  re::getOrCreateVertexFetchFunction(*(_QWORD *)(a4 + 32), *(id **)(a4 + 56), (uint64_t)&v75, ***a2, (uint64_t)(*a2)[1][170], (uint64_t *)buf);
  v23 = v87;
  v24 = *(id **)buf;
  v87 = *(id **)buf;
  *(_QWORD *)buf = v23;
  if (v23)
  {

    v24 = v87;
  }
  if (v24)
  {
LABEL_7:
    *(_QWORD *)&v75 = a3;
    *((_QWORD *)&v75 + 1) = a4;
    *(_QWORD *)&v76 = *(_QWORD *)(a4 + 104);
    *((_QWORD *)&v76 + 1) = a5;
    v25 = a2[1];
    *(_QWORD *)&v77 = v25;
    if (v25)
      v26 = v25 + 1;
    *((_QWORD *)&v77 + 1) = v21;
    v27 = (*a2)[1];
    if (v27)
      v28 = v27[169];
    else
      v28 = 0;
    *(_QWORD *)&v78 = v28;
    WORD4(v78) = *((unsigned __int8 *)a2 + 16);
    *(_QWORD *)&v79 = a7;
    *((_QWORD *)&v79 + 1) = a9;
    *(_QWORD *)&v80 = a10;
    BYTE8(v80) = (*a6 >> 1) & 7;
    v81 = (unint64_t)v27[170];
    v82 = a13;
    *(_QWORD *)&v83 = a14;
    re::getOrCreatePipelineState((re *)&v75, a6[72], (uint64_t *)&v74);
    v29 = v74;
    v73 = v74;
    if (v74)
    {
      v30 = (char *)v74 + 8;
      v29 = v74;
    }
    v31 = (re *)re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::addNew<re::SharedPtr<re::CachedPipelineState>&>((uint64_t)(a2 + 3), (_QWORD *)v29 + 3, (uint64_t *)&v73);
    if (v73)
    {

      v73 = 0;
    }
    if (v74)
    {
      v34 = a6[72];
      v35 = *(_DWORD *)(a5 + 40);
      v36 = *a11;
      v37 = a11[1];
      v38 = a11[2];
      v32.i32[0] = *(_DWORD *)(a11 + 3);
      v39 = (uint8x8_t)vmovl_u8(v32).u64[0];
      v40 = a11[8];
      v41 = a11[9];
      v42 = a11[10];
      v33.i32[0] = *(_DWORD *)(a11 + 11);
      v43 = vmovl_u8(v33);
      LOBYTE(v44) = v39.i8[0];
      BYTE1(v44) = v39.i8[4];
      BYTE2(v44) = v39.i8[2];
      BYTE3(v44) = v39.i8[6];
      BYTE4(v44) = v43.i8[0];
      BYTE5(v44) = v43.i8[4];
      BYTE6(v44) = v43.i8[2];
      buf[0] = 0;
      HIBYTE(v44) = v43.i8[6];
      v94 = v44;
      if ((v34 & 4) != 0)
        v45 = 7;
      else
        v45 = *((_BYTE *)v21 + 82);
      v95 = v45;
      v96 = v37;
      v97 = v38;
      v98 = v41;
      v99 = v42;
      v100 = *((_BYTE *)v21 + 74) & ~v34 & 1;
      v49 = ((v35 - 253) < 0xA) & (0x385u >> (v35 + 3));
      if (v36)
        v50 = v49;
      else
        v50 = 0;
      v101 = v50;
      if (v40)
        v51 = v49;
      else
        v51 = 0;
      v102 = v51;
      DepthStencilState = (re *)re::getOrCreateDepthStencilState(a4, *(_QWORD *)(a4 + 104), (uint64_t)buf, v39);
      v53 = (void **)DepthStencilState;
      if (buf[0])
      {
        DepthStencilState = *(re **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          if ((buf[16] & 1) != 0)
            DepthStencilState = (re *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)&buf[8] + 40))(*(_QWORD *)&buf[8], v93);
        }
      }
      if (v53)
      {
        v54 = a12;
        v55 = atomic_load((unsigned __int8 *)v74 + 240);
        if (v54 && v55 == 1)
        {
          v56 = (unsigned __int8 *)v74 + 240;
          v57.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          v58 = atomic_load(v56);
          if (v58 == 1)
          {
            rep = v57.__d_.__rep_;
            v60 = 65;
            while (--v60)
            {
              v61 = atomic_load(v56);
              if (v61 != 1)
                goto LABEL_52;
            }
            do
            {
              v64.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ - rep;
              if (v64.__d_.__rep_ < 64001)
              {
                if (v64.__d_.__rep_ >= 4001)
                  sched_yield();
              }
              else
              {
                v65 = std::__libcpp_atomic_monitor(v56);
                v66 = atomic_load(v56);
                if (v66 != 1)
                  break;
                std::__libcpp_atomic_wait(v56, v65);
              }
              v67 = atomic_load(v56);
            }
            while (v67 == 1);
          }
LABEL_52:
          v55 = atomic_load((unsigned __int8 *)v74 + 240);
        }
        if (!v55)
        {
          if (!v87)
            goto LABEL_73;
          v68 = atomic_load((unsigned __int8 *)v87 + 204);
          if (a12 && v68 == 1)
          {
            *(_QWORD *)&v91 = (char *)v87 + 204;
            BYTE8(v91) = 1;
            HIDWORD(v91) = 5;
            *(_QWORD *)buf = (char *)v87 + 204;
            *(_OWORD *)&buf[8] = v91;
            std::__libcpp_thread_poll_with_backoff[abi:nn180100]<std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,re::VertexFetchCompilationState> &,std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,re::VertexFetchCompilationState>> &>((uint64_t)&v91, (uint64_t)buf, 0);
            v68 = atomic_load((unsigned __int8 *)v87 + 204);
          }
          if (!v68)
          {
LABEL_73:
            NS::SharedPtr<MTL::Texture>::operator=(&v90, (void **)v74 + 2);
            NS::SharedPtr<MTL::Texture>::operator=(&v89, v53);
            if (*((_BYTE *)a2 + 16))
            {
              if (*((_BYTE *)v21 + 2848))
              {
                re::CachedPipelineState::getOrCreateVertexFetchPipeline((id *)v74, v87, (uint64_t *)buf);
                NS::SharedPtr<MTL::Texture>::operator=(&v90, (void **)(*(_QWORD *)buf + 16));
                NS::SharedPtr<MTL::Texture>::operator=(&v88, (void **)(*(_QWORD *)buf + 24));
                if (*(_QWORD *)buf)

              }
            }
            v69 = v90;
            v70 = v89;
            v71 = v88;
            *(_BYTE *)a1 = 1;
            *(_QWORD *)(a1 + 8) = v69;
            *(_QWORD *)(a1 + 16) = v70;
            *(_QWORD *)(a1 + 24) = v71;
            goto LABEL_55;
          }
        }
LABEL_54:
        *(_BYTE *)a1 = 0;
LABEL_55:
        if (v74)

        if ((_QWORD)v77)
        goto LABEL_59;
      }
      v46 = *re::graphicsLogObjects(DepthStencilState);
      if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        goto LABEL_54;
      v62 = ***a2;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v62;
      v48 = "Failed to obtain cached depth stencil state for technique %s";
    }
    else
    {
      v46 = *re::graphicsLogObjects(v31);
      if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        goto LABEL_54;
      v47 = ***a2;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v47;
      v48 = "Failed to obtain cached pipeline state for technique %s";
    }
    _os_log_error_impl(&dword_224FE9000, v46, OS_LOG_TYPE_ERROR, v48, buf, 0xCu);
    goto LABEL_54;
  }
  v63 = *re::graphicsLogObjects(v22);
  if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
  {
    v72 = ***a2;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v72;
    _os_log_error_impl(&dword_224FE9000, v63, OS_LOG_TYPE_ERROR, "Failed to obtain cached vertex fetch function for technique %s", buf, 0xCu);
  }
  *(_BYTE *)a1 = 0;
LABEL_59:
  if (v87)

  if (v88)
  if (v89)

  if (v90)
}

uint64_t re::Optional<re::DrawCallEncoderStates>::operator=(uint64_t a1, void **a2)
{
  int v3;
  BOOL v4;
  BOOL v5;
  BOOL v7;
  void *v8;
  void *v9;
  void *v10;

  v3 = *(unsigned __int8 *)a2;
  if (*(_BYTE *)a1)
    v4 = 0;
  else
    v4 = v3 == 0;
  if (!v4)
  {
    if (*(_BYTE *)a1)
      v5 = v3 == 0;
    else
      v5 = 0;
    if (v5)
    {
      v8 = *(void **)(a1 + 24);
      if (v8)
      {

        *(_QWORD *)(a1 + 24) = 0;
      }
      v9 = *(void **)(a1 + 16);
      if (v9)
      {

        *(_QWORD *)(a1 + 16) = 0;
      }
      v10 = *(void **)(a1 + 8);
      if (v10)
      {

        *(_QWORD *)(a1 + 8) = 0;
      }
      *(_BYTE *)a1 = 0;
    }
    else
    {
      if (*(_BYTE *)a1)
        v7 = 1;
      else
        v7 = v3 == 0;
      if (v7)
      {
        NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 8), a2 + 1);
        NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 16), a2 + 2);
        NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 24), a2 + 3);
      }
      else
      {
        *(_BYTE *)a1 = 1;
        *(_QWORD *)(a1 + 8) = a2[1];
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_QWORD *)(a1 + 24) = a2[3];
      }
    }
  }
  return a1;
}

uint64_t re::encodeDrawCalls(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, unsigned __int8 a18, int a19, int a20,uint64_t a21)
{
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  re::DynamicString *v46;
  uint64_t v47;
  uint64_t v48;
  id *v49;
  id location;
  re::mtl::RenderEncoderImpCache *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[40];
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82[4];

  if (a2 && *(_QWORD *)(a2 + 16))
  {
    HIDWORD(v48) = a20;
    HIDWORD(v47) = a19;
    HIDWORD(v46) = a18;
    v49 = (id *)result;
    v26 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v82);
    v61 = a2;
    v62 = a14;
    v63 = a3;
    v64 = a4;
    v65 = a6;
    v66 = a7;
    v67 = a12;
    v68 = a13;
    v69 = 0;
    v70[0] = a17;
    *(_QWORD *)&v70[4] = a15;
    *(_QWORD *)&v70[12] = a15;
    *(_QWORD *)&v70[20] = a15;
    *(_QWORD *)&v70[28] = a15;
    v70[36] = a18;
    LODWORD(v71) = a19;
    v73 = 0u;
    LODWORD(v74) = a20;
    BYTE4(v74) = 0;
    LODWORD(v75) = 0;
    BYTE4(v75) = 0;
    v76 = a9;
    v77 = a11;
    v78 = a10;
    v80 = 0u;
    v81 = 0u;
    location = 0;
    v27 = re::globalAllocators((re *)v26);
    v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27[2] + 32))(v27[2], 264, 8);
    *(_OWORD *)v28 = 0u;
    *(_OWORD *)(v28 + 16) = 0u;
    *(_OWORD *)(v28 + 32) = 0u;
    *(_OWORD *)(v28 + 48) = 0u;
    *(_OWORD *)(v28 + 64) = 0u;
    *(_OWORD *)(v28 + 80) = 0u;
    *(_OWORD *)(v28 + 96) = 0u;
    *(_OWORD *)(v28 + 112) = 0u;
    *(_OWORD *)(v28 + 128) = 0u;
    *(_OWORD *)(v28 + 144) = 0u;
    *(_OWORD *)(v28 + 160) = 0u;
    *(_OWORD *)(v28 + 176) = 0u;
    *(_OWORD *)(v28 + 192) = 0u;
    *(_OWORD *)(v28 + 208) = 0u;
    *(_OWORD *)(v28 + 224) = 0u;
    *(_OWORD *)(v28 + 240) = 0u;
    *(_QWORD *)(v28 + 256) = 0;
    v60 = 0;
    v57 = 0;
    v58 = 0;
    v52 = (re::mtl::RenderEncoderImpCache *)v28;
    re::ObjCObject::operator=(&location, v49);
    re::mtl::RenderEncoderImpCache::build(v52, location);
    v53 = a5 + 48;
    v54 = (_QWORD *)(a5 + 104);
    v42 = *(_QWORD *)(a4 + 24) + 336;
    v55 = *(_QWORD *)(a4 + 24);
    v56 = v42;
    v43 = *(_QWORD *)(a2 + 16);
    v57 = 0;
    v58 = v43;
    v59 = a3 + 112;
    v60 = a21;
    v44 = *(_QWORD *)(a4 + 104);
    if (v44)
      re::RenderStat::sampleRenderEncoderMTLCounterBegin(v44 + 872, (uint64_t)&location, 1u);
    re::encodeDrawCalls((uint64_t)&location, (uint64_t)&v61, a16, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v46, a9, v47,
      a10,
      a11,
      v48,
      (uint64_t)v49,
      a5,
      a21,
      a16,
      (uint64_t)location,
      (uint64_t)v52,
      v53,
      v54,
      v55,
      v56,
      v57,
      v58,
      v59,
      v60,
      v61,
      v62,
      v63,
      v64,
      v65,
      v66,
      v67,
      v68,
      v69,
      *(uint64_t *)v70,
      *(uint64_t *)&v70[8],
      *(uint64_t *)&v70[16],
      *(uint64_t *)&v70[24],
      *(uint64_t *)&v70[32],
      v71,
      v72,
      v73,
      *((uint64_t *)&v73 + 1),
      v74,
      v75,
      v76,
      v77,
      v78,
      v79,
      v80,
      *((uint64_t *)&v80 + 1),
      v81);
    v45 = *(_QWORD *)(a4 + 104);
    if (v45)
      re::RenderStat::sampleRenderEncoderMTLCounterEnd(v45 + 872, (uint64_t)&location, 1u);
    re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)&location);
    return re::ProfilerTimeGuard<(re::ProfilerStatistic)79>::end((uint64_t)v82);
  }
  return result;
}

uint64_t re::EngineConstantSource::lookup(re::EngineConstantSource *this, const re::WeakStringID *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return 0;
  v3 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(*((_QWORD **)this + 1), a2);
  if (v3 == -1)
    return 0;
  else
    return *(_QWORD *)(v2 + 8) + 16 * v3 + 8;
}

uint64_t re::EngineConstantSource::layoutHash(re::EngineConstantSource *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return *(_QWORD *)(v1 + 48);
  else
    return 0;
}

uint64_t re::EngineConstantSource::data(re::EngineConstantSource *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t re::HashBrown<unsigned long,unsigned long long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::addNew(_anonymous_namespace_ *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;

  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<unsigned long,unsigned long long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::internalAdd(a1, a2, a3);
  else
    return *((_QWORD *)a1 + 1) + 16 * v6 + 8;
}

uint64_t re::HashBrown<unsigned long,unsigned long long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::internalAdd(_anonymous_namespace_ *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long,unsigned long long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize((uint64_t *)a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9;
  v9 = 0x94D049BB133111EBLL;
  v10 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v11 = (0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31);
  v12 = v7 >> 4;
  v13 = *(_QWORD *)a1;
  v14 = v11 % v12;
  while (1)
  {
    v15 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v13 + 16 * v14)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    if (v15 < 0x40)
      break;
    if (v14 + 1 == v12)
      v14 = 0;
    else
      ++v14;
    if (v14 == v11 % v12)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  v16 = v13 + 16 * v14;
  v17 = *(unsigned __int8 *)(v16 + v15) == 255;
  *(_BYTE *)(v16 + v15) = v11 & 0x7F;
  v18 = v15 + 16 * v14;
  v19 = *a3;
  v20 = *((_QWORD *)a1 + 1);
  v21 = v20 + 16 * v18;
  v22 = 16 * v18;
  *(_QWORD *)(v20 + v22) = *a2;
  *(_QWORD *)(v21 + 8) = v19;
  result = v21 + 8;
  v24 = v17;
  v25 = *((_QWORD *)a1 + 4) - v24;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v25;
  v26 = *(_QWORD *)(v20 + v22) ^ (*(_QWORD *)(v20 + v22) >> 30);
  v27 = ((v26 * v8) ^ ((v26 * v8) >> 27)) * v9;
  *((_QWORD *)a1 + 5) ^= (v27 >> 31) ^ v27;
  return result;
}

{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long,unsigned long long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize(a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v11;
  v17 = *a3;
  v18 = *((_QWORD *)a1 + 1);
  v19 = v18 + 16 * v16;
  v20 = 16 * v16;
  *(_QWORD *)(v18 + v20) = *a2;
  *(_QWORD *)(v19 + 8) = v17;
  result = v19 + 8;
  v22 = v15;
  v23 = *((_QWORD *)a1 + 4) - v22;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v23;
  v24 = *(_QWORD *)(v18 + v20) ^ (*(_QWORD *)(v18 + v20) >> 30);
  v25 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v24) ^ ((0xBF58476D1CE4E5B9 * v24) >> 27));
  *((_QWORD *)a1 + 5) ^= (v25 >> 31) ^ v25;
  return result;
}

uint64_t re::HashBrown<unsigned long,unsigned long long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[3] + a2;
  v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    v5 = 3 * v2;
    v6 = v5 << 6;
    v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7)
      v4 = v7;
    v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<unsigned long,unsigned long long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::doResize(a1, v3);
}

uint64_t re::HashBrown<unsigned long,unsigned long long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD v20[2];
  uint64_t v21;
  _OWORD v22[4];

  v4 = a1[7];
  memset(v22, 0, sizeof(v22));
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init(v22, v4, a2);
  v20[0] = a1;
  v5 = a1[2];
  if (v5 >= 0x10)
  {
    v6 = 0;
    v7 = *a1;
    v8 = v5 >> 4;
    while (1)
    {
      v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v20[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF)
        break;
      v6 += 16;
      if (!--v8)
        goto LABEL_9;
    }
    v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    v21 = v10;
    if (v10 != -1)
    {
      do
      {
        re::HashBrown<unsigned long,unsigned long long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::internalAdd((_anonymous_namespace_ *)v22, (_QWORD *)(*(_QWORD *)(v20[0] + 8) + 16 * v10), (uint64_t *)(*(_QWORD *)(v20[0] + 8) + 16 * v10 + 8));
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v20);
        v10 = v21;
      }
      while (v21 != -1);
      v5 = a1[2];
    }
  }
LABEL_9:
  v12 = *((_QWORD *)&v22[3] + 1);
  *((_QWORD *)&v22[3] + 1) = a1[7];
  result = *((_QWORD *)&v22[3] + 1);
  v13 = v22[0];
  v14 = v22[1];
  *(_QWORD *)&v22[1] = v5;
  v15 = *a1;
  v16 = a1[1];
  *(_QWORD *)&v22[0] = *a1;
  *((_QWORD *)&v22[0] + 1) = v16;
  v17 = v22[2];
  v18 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v22[3];
  a1[7] = v12;
  *(_OWORD *)((char *)&v22[2] + 8) = v18;
  v19 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v13;
  *((_OWORD *)a1 + 1) = v14;
  *((_OWORD *)a1 + 2) = v17;
  *(_OWORD *)((char *)&v22[1] + 8) = v19;
  if (result)
  {
    if (v16)
      *((_QWORD *)&v22[0] + 1) = 0;
    if (v15)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

BOOL std::__libcpp_thread_poll_with_backoff[abi:nn180100]<std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,re::VertexFetchCompilationState> &,std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,re::VertexFetchCompilationState>> &>(uint64_t a1, uint64_t a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep a3)
{
  std::chrono::steady_clock::time_point v6;
  unsigned int v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  int v11;
  std::chrono::steady_clock::time_point v12;

  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v7 = 0;
  while (1)
  {
    v8 = *(unsigned __int8 **)a1;
    v9 = *(_DWORD *)(a1 + 12);
    if ((v9 - 1) < 2 || v9 == 5)
      v10 = atomic_load(v8);
    else
      v10 = *v8;
    v11 = *(unsigned __int8 *)(a1 + 8);
    if (v10 != v11)
      break;
    if (v7 <= 0x3F)
    {
      ++v7;
    }
    else
    {
      v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ - v6.__d_.__rep_;
      if (a3 && v12.__d_.__rep_ > a3
        || std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,re::VertexFetchCompilationState>>::operator()[abi:nn180100](a2, v12.__d_.__rep_))
      {
        return v10 != v11;
      }
    }
  }
  return v10 != v11;
}

uint64_t std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,re::VertexFetchCompilationState>>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  std::__cxx_contention_t v3;
  unsigned __int8 *v4;
  int v5;
  int v6;

  if (a2 < 64001)
  {
    if (a2 >= 4001)
      sched_yield();
    return 0;
  }
  v3 = std::__libcpp_atomic_monitor(*(const void **)a1);
  v4 = *(unsigned __int8 **)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 20);
  if ((v5 - 1) < 2 || v5 == 5)
    v6 = atomic_load(v4);
  else
    v6 = *v4;
  if (v6 == *(unsigned __int8 *)(a1 + 16))
  {
    std::__libcpp_atomic_wait(*(const void **)a1, v3);
    return 0;
  }
  return 1;
}

_QWORD *re::DynamicArray<unsigned long>::insert(_QWORD *this, unint64_t a2, _QWORD *a3)
{
  unint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = this[2];
  if (v4 + 1 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v6 = this;
  if (v4 >= this[1])
  {
    this = re::DynamicArray<unsigned long>::growCapacity(this, v4 + 1);
    v4 = v6[2];
  }
  v7 = v6[4];
  if (v4 <= a2)
  {
    *(_QWORD *)(v7 + 8 * v4) = *a3;
  }
  else
  {
    *(_QWORD *)(v7 + 8 * v4) = *(_QWORD *)(v7 + 8 * v4 - 8);
    v8 = v7 + 8 * a2;
    v9 = v7 + 8 * v6[2] - 8;
    if (v9 != v8)
    {
      this = memmove((void *)(v8 + 8), (const void *)v8, v9 - v8);
      v7 = v6[4];
    }
    *(_QWORD *)(v7 + 8 * a2) = *a3;
  }
  ++v6[2];
  ++*((_DWORD *)v6 + 6);
  return this;
}

uint64_t re::ShaderResourceBindState::bindVertexResource(uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4, uint64_t *a5, char a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t result;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  int v20;
  int v21;
  BOOL v22;
  __int128 v23;
  char v24;
  __int16 v25;
  unsigned int v26;

  if (a4 < 0x1F)
  {
    v23 = a2;
    if (a6)
    {
      v24 = 1;
      v25 = a7;
    }
    else
    {
      v24 = 0;
    }
    v26 = a3;
    v16 = (_QWORD *)(a1 + 24 * a4);
    result = re::ShaderResourceBindState::BufferBindState::operator==((uint64_t)v16, (uint64_t)&v23);
    if ((result & 1) == 0)
    {
      v17 = *a5;
      if (*v16 == a2)
      {
        if (a6)
          result = ((uint64_t (*)(uint64_t, char *, _QWORD, uint64_t, _QWORD))a5[5])(v17, sel_setVertexBufferOffset_attributeStride_atIndex_, a3, a7, a4);
        else
          result = ((uint64_t (*)(uint64_t, char *, _QWORD, _QWORD))a5[3])(v17, sel_setVertexBufferOffset_atIndex_, a3, a4);
      }
      else if (a6)
      {
        result = ((uint64_t (*)(uint64_t, char *, unint64_t, _QWORD, uint64_t, _QWORD))a5[4])(v17, sel_setVertexBuffer_offset_attributeStride_atIndex_, a2, a3, a7, a4);
      }
      else
      {
        result = ((uint64_t (*)(uint64_t, char *, unint64_t, _QWORD, _QWORD))a5[2])(v17, sel_setVertexBuffer_offset_atIndex_, a2, a3, a4);
      }
      *(_OWORD *)v16 = v23;
      v18 = a1 + 24 * a4;
      v21 = *(unsigned __int8 *)(v18 + 16);
      v19 = (_BYTE *)(v18 + 16);
      v20 = v21;
      if (v21)
        v22 = 0;
      else
        v22 = v24 == 0;
      if (!v22)
      {
        if (!v20 || v24)
        {
          if (!v20 && v24)
            *v19 = 1;
          *(_WORD *)(a1 + 24 * a4 + 18) = a7;
        }
        else
        {
          *v19 = 0;
        }
      }
      *(_DWORD *)(a1 + 24 * a4 + 20) = a3;
    }
  }
  else
  {
    v13 = *a5;
    if (a6)
      return ((uint64_t (*)(uint64_t, char *, unint64_t, _QWORD, uint64_t, _QWORD))a5[4])(v13, sel_setVertexBuffer_offset_attributeStride_atIndex_, a2, a3, a7, a4);
    else
      return ((uint64_t (*)(uint64_t, char *, unint64_t, _QWORD, _QWORD))a5[2])(v13, sel_setVertexBuffer_offset_atIndex_, a2, a3, a4);
  }
  return result;
}

void re::fillConstantBuffer(uint64_t a1, re::FrameContext *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;

  v12 = *(unsigned __int8 *)(a8 + 106);
  if (v12 > 1)
  {
    if (*(_BYTE *)(a8 + 107)
      && ((v27 = *(_DWORD *)(a7 + 32), v27 >= 2) ? (v28 = *(_BYTE *)(a7 + 3) == 2) : (v28 = 0), v28))
    {
      re::FrameContext::perFrameAlloc(this, *(_DWORD *)(a8 + 100) * v27, *(unsigned __int16 *)(a8 + 98), a1);
      v40 = *(unsigned int *)(a1 + 12);
      v41 = *(_QWORD *)a1 + *(unsigned int *)(a1 + 8);
      v42 = *(unsigned int *)(a8 + 100);
      v43 = *(unsigned int *)(a7 + 32);
      v44 = *(_QWORD *)(a8 + 24);
      *(_QWORD *)&v50 = *(_QWORD *)(a8 + 40);
      *((_QWORD *)&v50 + 1) = v44;
      v45 = *(_QWORD *)(a8 + 72);
      v48 = *(__int128 **)(a8 + 88);
      v49 = v45;
      re::ConstantTableCollection::fillInstanceArray(a6, v41, v40, v42, v43, (__int128 **)&v50, (uint64_t)&v48);
      v46 = *(_DWORD *)(a7 + 32);
      v47 = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 20) += v46 * *(_DWORD *)(a8 + 100);
      v39 = v47 + v46 * *(_DWORD *)(a8 + 24);
    }
    else
    {
      re::FrameContext::perFrameAlloc(this, *(unsigned int *)(a8 + 100), *(unsigned __int16 *)(a8 + 98), a1);
      v29 = *(_QWORD *)a1 + *(unsigned int *)(a1 + 8);
      v30 = *(unsigned int *)(a8 + 100);
      v31 = *(_QWORD *)(a8 + 24);
      *(_QWORD *)&v50 = *(_QWORD *)(a8 + 40);
      *((_QWORD *)&v50 + 1) = v31;
      v32 = *(_QWORD *)(a8 + 72);
      v48 = *(__int128 **)(a8 + 88);
      v49 = v32;
      re::ConstantTableCollection::fill(a6, v29, v30, (uint64_t)&v50, &v48);
      if (a5)
      {
        if ((*(_WORD *)(a8 + 104) & 2) != 0)
        {
          v33 = *(unsigned int *)(a1 + 12);
          v34 = *(_QWORD *)(a8 + 24);
          *(_QWORD *)&v50 = *(_QWORD *)(a8 + 40);
          *((_QWORD *)&v50 + 1) = v34;
          re::ViewConstantsLateLatch::trackViewConstantsBuffer(a5, v29, v33, (uint64_t *)&v50);
        }
        v35 = *(_BYTE *)(a7 + 9);
        if (v35 && (*(_WORD *)(a8 + 104) & 8) != 0)
        {
          v36 = *(unsigned int *)(a1 + 12);
          v37 = *(_QWORD *)(a8 + 24);
          *(_QWORD *)&v50 = *(_QWORD *)(a8 + 40);
          *((_QWORD *)&v50 + 1) = v37;
          re::InstanceConstantsLateLatch::trackInstanceConstantsBuffer((_anonymous_namespace_ *)(a5 + 1536), v29, v36, (uint64_t *)&v50, v35);
        }
      }
      v38 = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 20) += *(_DWORD *)(a8 + 100);
      v39 = v38 + *(_DWORD *)(a8 + 24);
    }
    *(_DWORD *)(a3 + 24) = v39;
  }
  else
  {
    v14 = a4 + 56 * *(unsigned __int8 *)(a8 + 106);
    if (!*(_BYTE *)(v14 + 41)
      && *(_BYTE *)(a4 + 56 * *(unsigned __int8 *)(a8 + 106) + 40)
      && *(_QWORD *)a8 == *(_QWORD *)(a4 + 56 * *(unsigned __int8 *)(a8 + 106) + 24)
      && *(_QWORD *)(a8 + 48) == *(_QWORD *)(a4 + 56 * *(unsigned __int8 *)(a8 + 106) + 32))
    {
      *(_DWORD *)(a4 + 56 * *(unsigned __int8 *)(a8 + 106) + 48) += *(_DWORD *)(a8 + 100);
LABEL_7:
      v24 = a4 + 56 * v12;
      *(_OWORD *)a1 = *(_OWORD *)v24;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(v24 + 16);
      return;
    }
    re::FrameContext::perFrameAlloc(this, *(unsigned int *)(a8 + 100), *(unsigned __int16 *)(a8 + 98), (uint64_t)&v50);
    *(_OWORD *)v14 = v50;
    *(_QWORD *)(v14 + 16) = v51;
    v15 = *(_QWORD *)v14 + *(unsigned int *)(v14 + 8);
    v16 = *(unsigned int *)(a8 + 100);
    v17 = *(_QWORD *)(a8 + 24);
    *(_QWORD *)&v50 = *(_QWORD *)(a8 + 40);
    *((_QWORD *)&v50 + 1) = v17;
    v18 = *(_QWORD *)(a8 + 72);
    v48 = *(__int128 **)(a8 + 88);
    v49 = v18;
    re::ConstantTableCollection::fill(a6, v15, v16, (uint64_t)&v50, &v48);
    if (a5)
    {
      if ((*(_WORD *)(a8 + 104) & 2) != 0)
      {
        v20 = *(unsigned int *)(v14 + 12);
        v21 = *(_QWORD *)v14 + *(unsigned int *)(v14 + 8);
        v22 = *(_QWORD *)(a8 + 24);
        *(_QWORD *)&v50 = *(_QWORD *)(a8 + 40);
        *((_QWORD *)&v50 + 1) = v22;
        re::ViewConstantsLateLatch::trackViewConstantsBuffer(a5, v21, v20, (uint64_t *)&v50);
      }
    }
    v23 = a4 + 56 * v12;
    *(_DWORD *)(v23 + 44) += *(_DWORD *)(a8 + 100);
    *(_DWORD *)(v23 + 52) += *(_DWORD *)(a8 + 24);
    *(_QWORD *)(v23 + 24) = *(_QWORD *)a8;
    *(_QWORD *)(v23 + 32) = *(_QWORD *)(a8 + 48);
    *(_BYTE *)(v23 + 40) = 1;
    v12 = *(unsigned __int8 *)(a8 + 106);
    if (v12 < 2)
      goto LABEL_7;
    re::internal::assertLog((re::internal *)6, v19, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, *(unsigned __int8 *)(a8 + 106), 2);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::SamplerTableReference::samplerAt(re::SamplerTableReference *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  if (v2 > a2)
    return *(_QWORD *)this + 8 * a2;
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a2, v2);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::ShaderResourceBindState::bindFragmentResource(re::ShaderResourceBindState *this, const BufferView *a2, unsigned int a3, RenderCommandEncoder *a4)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  m_impCache *m_object;
  int v13;
  char *v14;
  char *v15;
  _QWORD v16[2];
  char v17;
  __int16 v18;
  int v19;

  if (a3 >= 0x1F)
    return ((uint64_t (*)(m_impCache *, char *, _QWORD, _QWORD, _QWORD))a4[5].var0)(a4->m_object, sel_setFragmentBuffer_offset_atIndex_, *(_QWORD *)a2, *((unsigned int *)a2 + 2), a3);
  v9 = (_QWORD *)((char *)this + 24 * a3 + 744);
  v10 = *(_QWORD *)a2;
  v16[0] = *(_QWORD *)a2;
  v16[1] = 0;
  v17 = 1;
  v18 = 0;
  v11 = *((unsigned int *)a2 + 2);
  v19 = *((_DWORD *)a2 + 2);
  result = re::ShaderResourceBindState::BufferBindState::operator==((uint64_t)v9, (uint64_t)v16);
  if ((result & 1) == 0)
  {
    m_object = a4->m_object;
    if (*v9 == v10)
      result = ((uint64_t (*)(m_impCache *, char *, uint64_t, _QWORD))a4[6].m_object)(m_object, sel_setFragmentBufferOffset_atIndex_, v11, a3);
    else
      result = ((uint64_t (*)(m_impCache *, char *, uint64_t, uint64_t, _QWORD))a4[5].var0)(m_object, sel_setFragmentBuffer_offset_atIndex_, v10, v11, a3);
    v13 = *((_DWORD *)a2 + 2);
    *v9 = *(_QWORD *)a2;
    v9[1] = 0;
    v14 = (char *)this + 24 * a3;
    if (!v14[760])
      v14[760] = 1;
    v15 = (char *)this + 24 * a3;
    *((_WORD *)v15 + 381) = 0;
    *((_DWORD *)v15 + 191) = v13;
  }
  return result;
}

uint64_t re::Optional<re::TechniqueState>::operator=(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  BOOL v4;
  BOOL v5;
  _OWORD *v6;
  BOOL v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;

  v3 = *a2;
  if (*(_BYTE *)a1)
    v4 = 0;
  else
    v4 = v3 == 0;
  if (v4)
    return a1;
  if (*(_BYTE *)a1)
    v5 = v3 == 0;
  else
    v5 = 0;
  if (v5)
  {
    v11 = *(_QWORD *)(a1 + 64);
    if (v11)
    {
      if (*(_QWORD *)(a1 + 96))
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
      *(_QWORD *)(a1 + 96) = 0;
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 80) = 0;
      *(_QWORD *)(a1 + 64) = 0;
      ++*(_DWORD *)(a1 + 88);
    }
    *(_BYTE *)a1 = 0;
    return a1;
  }
  v6 = (_OWORD *)(a1 + 8);
  if (*(_BYTE *)a1)
    v7 = 1;
  else
    v7 = v3 == 0;
  if (!v7)
  {
    *(_BYTE *)a1 = 1;
    v12 = *(_OWORD *)(a2 + 8);
    v13 = *(_OWORD *)(a2 + 24);
    v14 = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 14);
    *(_OWORD *)(a1 + 24) = v13;
    *(_OWORD *)(a1 + 40) = v14;
    *v6 = v12;
    v15 = a2[60];
    *(_BYTE *)(a1 + 60) = v15;
    if (v15)
      *(_BYTE *)(a1 + 61) = a2[61];
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    v16 = *((_QWORD *)a2 + 9);
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(_QWORD *)(a1 + 72) = v16;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 9) = 0;
    goto LABEL_36;
  }
  v8 = *(_OWORD *)(a2 + 8);
  v9 = *(_OWORD *)(a2 + 24);
  v10 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 14);
  *(_OWORD *)(a1 + 24) = v9;
  *(_OWORD *)(a1 + 40) = v10;
  *v6 = v8;
  if (*(_BYTE *)(a1 + 60) || a2[60])
  {
    if (!*(_BYTE *)(a1 + 60) || a2[60])
    {
      if (!*(_BYTE *)(a1 + 60) && a2[60])
        *(_BYTE *)(a1 + 60) = 1;
      *(_BYTE *)(a1 + 61) = a2[61];
    }
    else
    {
      *(_BYTE *)(a1 + 60) = 0;
    }
  }
  if ((unsigned __int8 *)a1 == a2)
    return a1;
  v17 = *(_QWORD *)(a1 + 64);
  v18 = *((_QWORD *)a2 + 8);
  if (!v17 || !v18 || v17 == v18)
  {
    v19 = *(_QWORD *)(a1 + 72);
    v20 = *((_QWORD *)a2 + 9);
    *(_QWORD *)(a1 + 64) = v18;
    *(_QWORD *)(a1 + 72) = v20;
    *((_QWORD *)a2 + 8) = v17;
    *((_QWORD *)a2 + 9) = v19;
LABEL_36:
    v21 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
    *((_QWORD *)a2 + 10) = v21;
    v22 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
    *((_QWORD *)a2 + 12) = v22;
    ++*((_DWORD *)a2 + 22);
    ++*(_DWORD *)(a1 + 88);
    return a1;
  }
  re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
  result = _os_crash();
  __break(1u);
  return result;
}

BOOL re::ShaderResourceBindState::BufferBindState::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8)
    || *(_QWORD *)a1 != *(_QWORD *)a2
    || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
  {
    return 0;
  }
  v2 = (*(unsigned __int8 *)(a2 + 16) | *(unsigned __int8 *)(a1 + 16)) == 0;
  if (*(_BYTE *)(a1 + 16) && *(_BYTE *)(a2 + 16))
    return *(unsigned __int16 *)(a1 + 18) == *(unsigned __int16 *)(a2 + 18);
  return v2;
}

uint64_t re::Optional<re::TechniqueState>::Optional(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  int v7;

  v3 = *a2;
  *(_BYTE *)a1 = v3;
  if (v3)
  {
    v4 = *(_OWORD *)(a2 + 8);
    v5 = *(_OWORD *)(a2 + 24);
    v6 = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 14);
    *(_OWORD *)(a1 + 40) = v6;
    *(_OWORD *)(a1 + 24) = v5;
    *(_OWORD *)(a1 + 8) = v4;
    v7 = a2[60];
    *(_BYTE *)(a1 + 60) = v7;
    if (v7)
      *(_BYTE *)(a1 + 61) = a2[61];
    re::DynamicArray<re::RenderAttachmentState>::DynamicArray(a1 + 64, (uint64_t *)a2 + 8);
  }
  return a1;
}

uint64_t re::HashTable<unsigned long long,re::BufferTable,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v37[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v9 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v37, 0, 36);
          *(_QWORD *)&v37[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::BufferTable,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::init((uint64_t)v37, v14, v13);
          v16 = *(_OWORD *)v37;
          *(_OWORD *)v37 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v37[16];
          v18 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v37[16] = v18;
          *(_QWORD *)(a1 + 16) = v17;
          v20 = *(_OWORD *)&v37[24];
          *(_OWORD *)&v37[24] = *(_OWORD *)(a1 + 24);
          v19 = *(_DWORD *)&v37[32];
          *(_OWORD *)(a1 + 24) = v20;
          v21 = v19;
          if (v19)
          {
            v22 = (_QWORD *)(v18 + 8);
            do
            {
              if ((*(_DWORD *)(v22 - 1) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::BufferTable,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addAsMove(a1, *v22 % (unint64_t)*(unsigned int *)(a1 + 24), *v22, v22, v22 + 1);
              v22 += 38;
              --v21;
            }
            while (v21);
          }
          re::HashTable<unsigned long long,re::BufferTable,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v37);
        }
      }
      else
      {
        if (v13)
          v25 = 2 * v12;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 304 * v9);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 304 * v9);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  v26 = 304 * v9;
  *(_DWORD *)(v23 + v26) = v24 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v26 + 8) = *a4;
  v27 = *(_QWORD *)(a1 + 16) + v26;
  *(_OWORD *)(v27 + 32) = 0u;
  *(_OWORD *)(v27 + 48) = 0u;
  *(_OWORD *)(v27 + 64) = 0u;
  *(_OWORD *)(v27 + 16) = 0u;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap((uint64_t *)(v27 + 16), (uint64_t *)a5);
  *(_QWORD *)(v27 + 112) = 0;
  *(_DWORD *)(v27 + 104) = 0;
  *(_QWORD *)(v27 + 88) = 0;
  *(_QWORD *)(v27 + 96) = 0;
  *(_QWORD *)(v27 + 80) = 0;
  *(_QWORD *)(v27 + 80) = *(_QWORD *)(a5 + 64);
  *(_QWORD *)(a5 + 64) = 0;
  *(_QWORD *)(v27 + 88) = *(_QWORD *)(a5 + 72);
  *(_QWORD *)(a5 + 72) = 0;
  v28 = *(_QWORD *)(v27 + 96);
  *(_QWORD *)(v27 + 96) = *(_QWORD *)(a5 + 80);
  *(_QWORD *)(a5 + 80) = v28;
  v29 = *(_QWORD *)(v27 + 112);
  *(_QWORD *)(v27 + 112) = *(_QWORD *)(a5 + 96);
  *(_QWORD *)(a5 + 96) = v29;
  ++*(_DWORD *)(a5 + 88);
  ++*(_DWORD *)(v27 + 104);
  *(_QWORD *)(v27 + 152) = 0;
  *(_QWORD *)(v27 + 128) = 0;
  *(_QWORD *)(v27 + 136) = 0;
  *(_QWORD *)(v27 + 120) = 0;
  *(_DWORD *)(v27 + 144) = 0;
  *(_QWORD *)(v27 + 120) = *(_QWORD *)(a5 + 104);
  *(_QWORD *)(a5 + 104) = 0;
  *(_QWORD *)(v27 + 128) = *(_QWORD *)(a5 + 112);
  *(_QWORD *)(a5 + 112) = 0;
  v30 = *(_QWORD *)(v27 + 136);
  *(_QWORD *)(v27 + 136) = *(_QWORD *)(a5 + 120);
  *(_QWORD *)(a5 + 120) = v30;
  v31 = *(_QWORD *)(v27 + 152);
  *(_QWORD *)(v27 + 152) = *(_QWORD *)(a5 + 136);
  *(_QWORD *)(a5 + 136) = v31;
  ++*(_DWORD *)(a5 + 128);
  ++*(_DWORD *)(v27 + 144);
  *(_QWORD *)(v27 + 160) = 0;
  *(_QWORD *)(v27 + 168) = 0;
  v27 += 160;
  *(_DWORD *)(v27 + 16) = 1;
  *(_QWORD *)(v27 + 32) = 0;
  *(_QWORD *)(v27 + 40) = 0;
  *(_QWORD *)(v27 + 24) = 0;
  *(_DWORD *)(v27 + 48) = 0;
  re::BucketArray<RESubscriptionHandle,8ul>::swap(v27, a5 + 144);
  *(_QWORD *)(v27 + 88) = 0;
  *(_DWORD *)(v27 + 80) = 0;
  *(_QWORD *)(v27 + 64) = 0;
  *(_QWORD *)(v27 + 72) = 0;
  *(_QWORD *)(v27 + 56) = 0;
  *(_QWORD *)(v27 + 56) = *(_QWORD *)(a5 + 200);
  *(_QWORD *)(a5 + 200) = 0;
  *(_QWORD *)(v27 + 64) = *(_QWORD *)(a5 + 208);
  *(_QWORD *)(a5 + 208) = 0;
  v32 = *(_QWORD *)(v27 + 72);
  *(_QWORD *)(v27 + 72) = *(_QWORD *)(a5 + 216);
  *(_QWORD *)(a5 + 216) = v32;
  v33 = *(_QWORD *)(v27 + 88);
  *(_QWORD *)(v27 + 88) = *(_QWORD *)(a5 + 232);
  *(_QWORD *)(a5 + 232) = v33;
  ++*(_DWORD *)(a5 + 224);
  ++*(_DWORD *)(v27 + 80);
  *(_QWORD *)(v27 + 128) = 0;
  *(_QWORD *)(v27 + 104) = 0;
  *(_QWORD *)(v27 + 112) = 0;
  *(_QWORD *)(v27 + 96) = 0;
  *(_DWORD *)(v27 + 120) = 0;
  *(_QWORD *)(v27 + 96) = *(_QWORD *)(a5 + 240);
  *(_QWORD *)(a5 + 240) = 0;
  *(_QWORD *)(v27 + 104) = *(_QWORD *)(a5 + 248);
  *(_QWORD *)(a5 + 248) = 0;
  v34 = *(_QWORD *)(v27 + 112);
  *(_QWORD *)(v27 + 112) = *(_QWORD *)(a5 + 256);
  *(_QWORD *)(a5 + 256) = v34;
  v35 = *(_QWORD *)(v27 + 128);
  *(_QWORD *)(v27 + 128) = *(_QWORD *)(a5 + 272);
  *(_QWORD *)(a5 + 272) = v35;
  ++*(_DWORD *)(a5 + 264);
  ++*(_DWORD *)(v27 + 120);
  *(_DWORD *)(v27 + 136) = *(_DWORD *)(a5 + 280);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,re::BufferTable,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 304 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_66, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<unsigned long long,re::BufferTable,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          re::BufferTable::~BufferTable((re::BufferTable *)(v6 + v4 + 16));
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 304;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::Optional<re::DrawCallEncoderStates>::~Optional(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  if (*(_BYTE *)a1)
  {
    v2 = *(void **)(a1 + 24);
    if (v2)
    {

      *(_QWORD *)(a1 + 24) = 0;
    }
    v3 = *(void **)(a1 + 16);
    if (v3)
    {

      *(_QWORD *)(a1 + 16) = 0;
    }
    v4 = *(void **)(a1 + 8);
    if (v4)
    {

      *(_QWORD *)(a1 + 8) = 0;
    }
  }
  return a1;
}

_QWORD *re::DynamicArray<re::ConstantSource const*>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v2 = result[1];
  if (v2 != a2)
  {
    v4 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v4)
      {
        if (!a2)
        {
          v6 = 0;
          if (!v2)
            goto LABEL_8;
          goto LABEL_7;
        }
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 8 * a2, 8);
        if (result)
        {
          v6 = result;
          if (!v4[1])
          {
LABEL_8:
            v4[4] = v6;
            v4[1] = a2;
            return result;
          }
LABEL_7:
          memcpy(v6, (const void *)v4[4], 8 * v4[2]);
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
          goto LABEL_8;
        }
        re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, 8 * a2, *(_QWORD *)(*v4 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::ConstantSource const*>::setCapacity(v4, a2);
        ++*((_DWORD *)v4 + 6);
      }
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::InstanceConstants>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (HIBYTE(a2))
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 256, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 8;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 8, 256);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], v5[2] << 8);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::InstanceConstants>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

re::mtl::mps::ImageGuidedFilter *re::mtl::mps::ImageGuidedFilter::ImageGuidedFilter(re::mtl::mps::ImageGuidedFilter *this, const re::mtl::Device *a2, uint64_t a3)
{
  id v4;

  v4 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDDE3D0]), "initWithDevice:kernelDiameter:", *(_QWORD *)a2, a3);
  *(_QWORD *)this = v4;

  return this;
}

void re::mtl::mps::UnaryImageKernel::encodeToCommandBuffer(void **a1, uint64_t *a2, id *a3, uint64_t *a4)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v4 = *a1;
  v5 = *a2;
  v6 = *a4;
  v7 = *a3;
  objc_msgSend(v4, "encodeToCommandBuffer:sourceTexture:destinationTexture:", v5, v7, v6);

}

re::mtl::mps::ImageGaussianBlur *re::mtl::mps::ImageGaussianBlur::ImageGaussianBlur(re::mtl::mps::ImageGaussianBlur *this, const re::mtl::Device *a2, float a3)
{
  id v6;
  double v7;
  id v8;

  v6 = objc_alloc(MEMORY[0x24BDDE3C8]);
  *(float *)&v7 = a3;
  v8 = (id)objc_msgSend(v6, "initWithDevice:sigma:", *(_QWORD *)a2, v7);
  *(_QWORD *)this = v8;

  return this;
}

re::mtl::mps::ImageBilinearScale *re::mtl::mps::ImageBilinearScale::ImageBilinearScale(re::mtl::mps::ImageBilinearScale *this, const re::mtl::Device *a2)
{
  id v3;

  v3 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDDE388]), "initWithDevice:", *(_QWORD *)a2);
  *(_QWORD *)this = v3;

  return this;
}

re::mtl::mps::ImageAreaMax *re::mtl::mps::ImageAreaMax::ImageAreaMax(re::mtl::mps::ImageAreaMax *this, const re::mtl::Device *a2, uint64_t a3, uint64_t a4)
{
  id v5;

  v5 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDDE378]), "initWithDevice:kernelWidth:kernelHeight:", *(_QWORD *)a2, a3, a4);
  *(_QWORD *)this = v5;

  return this;
}

re::mtl::mps::ImageTent *re::mtl::mps::ImageTent::ImageTent(re::mtl::mps::ImageTent *this, const re::mtl::Device *a2, uint64_t a3, uint64_t a4)
{
  id v5;

  v5 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDDE428]), "initWithDevice:kernelWidth:kernelHeight:", *(_QWORD *)a2, a3, a4);
  *(_QWORD *)this = v5;

  return this;
}

uint64_t re::mtl::getTypeSize(int a1)
{
  if ((a1 - 3) > 0x52)
    return 0;
  else
    return dword_2261472F0[(__int16)(a1 - 3)];
}

uint64_t *re::MeshNameMap::init(uint64_t *result, re::_anonymous_namespace_::MeshCollectionAccessor *a2, re::_anonymous_namespace_::MeshCollectionAccessor *this, unint64_t a4, unint64_t a5)
{
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t i;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _anonymous_namespace_ *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _anonymous_namespace_ *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  StringID *v46;
  _anonymous_namespace_ *v47;
  signed int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  unsigned int v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  const char *v66;
  __int16 v67;
  int v68;
  __int16 v69;
  unint64_t v70;
  __int16 v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)this + 1);
  if (*((_QWORD *)a2 + 2))
    v6 = (_DWORD)v5 == 0;
  else
    v6 = 1;
  if (v6)
    return result;
  v7 = a5;
  v8 = a4;
  v9 = (unint64_t)this;
  v11 = result;
  v52 = *((_QWORD *)a2 + 2);
  v53 = *((_QWORD *)this + 1);
  v12 = *(_QWORD *)(a4 + 8);
  if ((_DWORD)v53)
  {
    v13 = 0;
    v56 = 0;
    v14 = 0;
    v15 = 0;
    v7 = 0;
    do
    {
      v55 = v15;
      v18 = v56;
      if (v16)
        v18 = v56 + 1;
      v56 = v18;
      if (v16)
      {
        v5 = v16;
        for (i = 0; i != v5; ++i)
        {
          if (v20 < v12)
          {
            v21 = *(_QWORD *)(v8 + 8);
            if (v21 <= v20)
              goto LABEL_79;
            ++v13;
            v14 += *(_QWORD *)(*(_QWORD *)v8 + 160 * v20 + 24);
          }
        }
      }
      v15 = v54 + v55;
      ++v7;
      v9 = (unint64_t)this;
    }
    while (v7 != v53);
    if (v13 > 0xFFFFFFFE)
      goto LABEL_101;
    v22 = v56;
    if (v56 >= 0xFFFFFFFF)
    {
LABEL_102:
      re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) The number of skinned instances exceeds expectations.", "skinnedMeshInstanceCount < 4294967295U", "init", 252);
      _os_crash();
      __break(1u);
      goto LABEL_103;
    }
    if (v14 >= 0xFFFFFFFF)
    {
LABEL_103:
      re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) The number of skinned joints exceeds expectations.", "skinnedMeshPartJointCount < 4294967295U", "init", 253);
      _os_crash();
      __break(1u);
      goto LABEL_104;
    }
    LODWORD(v5) = v53;
    v7 = a5;
    if (v15 < 0xFFFFFFFF)
      goto LABEL_24;
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) The number of mesh parts exceeds expectations.", "meshPartInstanceCount < 4294967295U", "init", 254);
    _os_crash();
    __break(1u);
  }
  v15 = 0;
  v22 = 0;
  v13 = 0;
LABEL_24:
  v57 = v22;
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)(v11 + 2), v7, 2 * v5);
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)(v11 + 8), v7, 2 * v52);
  v8 = v52;
  re::FixedArray<unsigned short>::init<>(v11 + 14, v7, v52);
  re::FixedArray<re::FixedArray<unsigned int>>::init<>(v11 + 17, v7, v52);
  re::FixedArray<re::StringID>::init<>(v11 + 20, v7, v52);
  re::FixedArray<re::StringID>::init<>(v11 + 23, v7, v53);
  re::FixedArray<int>::init<>(v11 + 26, v7, v53);
  re::FixedArray<int>::init<>(v11 + 29, v7, v57);
  re::FixedArray<int>::init<>(v11 + 32, v7, v13);
  re::FixedArray<unsigned int>::init<unsigned int const&>(v11 + 35, v7, v15, re::MeshNameMap::kInvalidSkinnedPartIndex);
  re::FixedArray<re::HashTable<re::StringID,unsigned short,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::init<>((uint64_t)(v11 + 38), v7, v52);
  v23 = (v5 + 1);
  re::FixedArray<int>::init<>(v11 + 41, v7, v23);
  re::FixedArray<int>::init<>(v11 + 44, v7, (v52 + 1));
  re::FixedArray<int>::init<>(v11 + 47, v7, v23);
  re::FixedArray<int>::init<>(v11 + 50, v7, v15);
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v5 = 0;
  v58 = 0;
  v26 = 0;
  v27 = 0;
  v60 = 0;
  do
  {
    v14 = v27;
    v28 = *(_QWORD *)(v9 + 8);
    if (v28 <= v27)
      goto LABEL_85;
    i = *(_QWORD *)v9;
    v9 = v29;
    v8 = v62;
    if (v62 <= v29)
      goto LABEL_86;
    ++*(_DWORD *)(v63 + 4 * v29);
    v8 = v60;
    v7 = v11[42];
    if (v7 <= v60)
      goto LABEL_87;
    *(_DWORD *)(v11[43] + 4 * v60) = v26;
    v8 = v60;
    v7 = v11[24];
    if (v7 <= v60)
      goto LABEL_88;
    v14 = i + 96 * v14;
    re::StringID::operator=((unint64_t *)(v11[25] + 16 * v60), (uint64_t *)v14);
    v8 = v60;
    v7 = v11[27];
    if (v7 <= v60)
      goto LABEL_89;
    *(_DWORD *)(v11[28] + 4 * v60) = v9;
    v8 = v60;
    v7 = v11[48];
    if (v7 <= v60)
      goto LABEL_90;
    *(_DWORD *)(v11[49] + 4 * v60) = v5;
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>((uint64_t)(v11 + 2), (StringID *)v14, &v60);
    {
      v14 = v58;
      v8 = v11[30];
      if (v8 <= v58)
        goto LABEL_99;
      *(_DWORD *)(v11[31] + 4 * v58) = v60;
      if (v30)
      {
        v14 = v30;
        v31 = 0;
        v8 = 1;
        do
        {
          {
            v7 = v5;
            i = v11[33];
            if (i <= v5)
              goto LABEL_83;
            i = v26 + v8 - 1;
            *(_DWORD *)(v11[34] + 4 * v5) = i;
            v7 = v11[36];
            if (v7 <= i)
              goto LABEL_84;
            *(_DWORD *)(v11[37] + 4 * i) = v5;
            v5 = (v5 + 1);
          }
          v31 = v8;
          v32 = v14 > v8;
          v8 = (v8 + 1);
        }
        while (v32);
      }
      ++v58;
    }
    v34 = v33;
    v9 = (unint64_t)this;
    if (v33)
    {
      v8 = v26;
      v14 = v11[51];
      if (v14 >= v26)
        v35 = v26;
      else
        v35 = v11[51];
      while (v14 != v35)
      {
        *(_DWORD *)(v11[52] + 4 * v8) = v60;
        ++v35;
        ++v8;
        if (!--v34)
          goto LABEL_47;
      }
      v64 = 0;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v65 = 136315906;
      v66 = "operator[]";
      v67 = 1024;
      v68 = 468;
      v69 = 2048;
      v70 = v8;
      v71 = 2048;
      v72 = v14;
      _os_log_send_and_compose_impl();
      v20 = _os_crash_msg();
      __break(1u);
LABEL_79:
      re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v20, v21);
      _os_crash();
      __break(1u);
LABEL_80:
      v64 = 0;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v65 = 136315906;
      v66 = "operator[]";
      v67 = 1024;
      v68 = 797;
      v69 = 2048;
      v70 = v14;
      v71 = 2048;
      v72 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_81:
      v64 = 0;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v65 = 136315906;
      v66 = "operator[]";
      v67 = 1024;
      v68 = 476;
      v69 = 2048;
      v70 = v8;
      v71 = 2048;
      v72 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_82:
      v64 = 0;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v65 = 136315906;
      v66 = "operator[]";
      v67 = 1024;
      v68 = 468;
      v69 = 2048;
      v70 = v14;
      v71 = 2048;
      v72 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_83:
      v64 = 0;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v65 = 136315906;
      v66 = "operator[]";
      v67 = 1024;
      v68 = 468;
      v69 = 2048;
      v70 = v7;
      v71 = 2048;
      v72 = i;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_84:
      v64 = 0;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v65 = 136315906;
      v66 = "operator[]";
      v67 = 1024;
      v68 = 468;
      v69 = 2048;
      v70 = i;
      v71 = 2048;
      v72 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_85:
      re::internal::assertLog((re::internal *)6, v25, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v14, v28);
      _os_crash();
      __break(1u);
LABEL_86:
      v64 = 0;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v65 = 136315906;
      v66 = "operator[]";
      v67 = 1024;
      v68 = 468;
      v69 = 2048;
      v70 = v9;
      v71 = 2048;
      v72 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_87:
      v64 = 0;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v65 = 136315906;
      v66 = "operator[]";
      v67 = 1024;
      v68 = 468;
      v69 = 2048;
      v70 = v8;
      v71 = 2048;
      v72 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_88:
      v64 = 0;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v65 = 136315906;
      v66 = "operator[]";
      v67 = 1024;
      v68 = 468;
      v69 = 2048;
      v70 = v8;
      v71 = 2048;
      v72 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_89:
      v64 = 0;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v65 = 136315906;
      v66 = "operator[]";
      v67 = 1024;
      v68 = 468;
      v69 = 2048;
      v70 = v8;
      v71 = 2048;
      v72 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_90:
      v64 = 0;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v65 = 136315906;
      v66 = "operator[]";
      v67 = 1024;
      v68 = 468;
      v69 = 2048;
      v70 = v8;
      v71 = 2048;
      v72 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_91:
      v64 = 0;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v65 = 136315906;
      v66 = "operator[]";
      v67 = 1024;
      v68 = 468;
      v69 = 2048;
      v70 = v7;
      v71 = 2048;
      v72 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_92:
      v64 = 0;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v65 = 136315906;
      v66 = "operator[]";
      v67 = 1024;
      v68 = 468;
      v69 = 2048;
      v70 = v7;
      v71 = 2048;
      v72 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_93:
      v64 = 0;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v65 = 136315906;
      v66 = "operator[]";
      v67 = 1024;
      v68 = 468;
      v69 = 2048;
      v70 = v7;
      v71 = 2048;
      v72 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_94:
      v64 = 0;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v65 = 136315906;
      v66 = "operator[]";
      v67 = 1024;
      v68 = 468;
      v69 = 2048;
      v70 = v7;
      v71 = 2048;
      v72 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_95:
      v64 = 0;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v65 = 136315906;
      v66 = "operator[]";
      v67 = 1024;
      v68 = 468;
      v69 = 2048;
      v70 = v7;
      v71 = 2048;
      v72 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_96:
      v64 = 0;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v65 = 136315906;
      v66 = "operator[]";
      v67 = 1024;
      v68 = 468;
      v69 = 2048;
      v70 = v7;
      v71 = 2048;
      v72 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_97:
      v64 = 0;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v65 = 136315906;
      v66 = "operator[]";
      v67 = 1024;
      v68 = 468;
      v69 = 2048;
      v70 = v7;
      v71 = 2048;
      v72 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_98:
      v64 = 0;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v65 = 136315906;
      v66 = "operator[]";
      v67 = 1024;
      v68 = 468;
      v69 = 2048;
      v70 = v8;
      v71 = 2048;
      v72 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_99:
      v64 = 0;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v65 = 136315906;
      v66 = "operator[]";
      v67 = 1024;
      v68 = 468;
      v69 = 2048;
      v70 = v14;
      v71 = 2048;
      v72 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_100:
      v64 = 0;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v65 = 136315906;
      v66 = "operator[]";
      v67 = 1024;
      v68 = 468;
      v69 = 2048;
      v70 = v14;
      v71 = 2048;
      v72 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_101:
      re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) The number of skinned parts exceeds expectations.", "skinnedMeshPartCount < 4294967295U", "init", 251);
      _os_crash();
      __break(1u);
      goto LABEL_102;
    }
LABEL_47:
    v26 += v33;
    v27 = v60 + 1;
    v60 = v27;
  }
  while (v27 < v53);
  v14 = v11[42];
  v12 = v53;
  if (v14 <= v53)
  {
LABEL_104:
    v64 = 0;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v73 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v65 = 136315906;
    v66 = "operator[]";
    v67 = 1024;
    v68 = 468;
    v69 = 2048;
    v70 = v12;
    v71 = 2048;
    v72 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_105;
  }
  *(_DWORD *)(v11[43] + 4 * v53) = v26;
  v14 = v11[48];
  if (v14 <= v53)
  {
LABEL_105:
    v64 = 0;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v73 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v65 = 136315906;
    v66 = "operator[]";
    v67 = 1024;
    v68 = 468;
    v69 = 2048;
    v70 = v12;
    v71 = 2048;
    v72 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_106;
  }
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v36 = 0;
  *(_DWORD *)(v11[49] + 4 * v53) = v5;
  do
  {
    v12 = v11[15];
    if (v12 <= v7)
      goto LABEL_91;
    v14 = (unint64_t)v37;
    *(_WORD *)(v11[16] + 2 * v7) = (_WORD)v37;
    v12 = v11[18];
    if (v12 <= v7)
      goto LABEL_92;
    v12 = v62;
    if (v62 <= v7)
      goto LABEL_93;
    v38 = (uint64_t *)(v11[19] + v8);
    v39 = *(unsigned int *)(v63 + 4 * v7);
    v12 = v11[21];
    if (v12 <= v7)
      goto LABEL_94;
    re::StringID::operator=((unint64_t *)(v11[22] + v9), (uint64_t *)v5);
    v5 = v11[45];
    if (v5 <= v7)
      goto LABEL_95;
    v40 = v11[46];
    *(_DWORD *)(v40 + 4 * v7) = v36;
    v36 += v14;
    ++v7;
    v9 += 16;
    v8 += 24;
  }
  while (v52 != v7);
  v41 = v52;
  if (v5 <= v52)
  {
LABEL_106:
    v64 = 0;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v73 = 0u;
    v50 = v41;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v65 = 136315906;
    v66 = "operator[]";
    v67 = 1024;
    v68 = 468;
    v69 = 2048;
    v70 = v50;
    v71 = 2048;
    v72 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v14 = 0;
  *(_DWORD *)(v40 + 4 * v52) = v36;
  v5 = 24;
  v12 = v53;
  do
  {
    v7 = v42;
    v8 = v11[18];
    if (v8 <= v42)
      goto LABEL_96;
    v8 = v62;
    if (v62 <= v42)
      goto LABEL_97;
    v43 = v11[19];
    v9 = *(_QWORD *)(v43 + 24 * v42 + 8);
    v44 = v63;
    v45 = *(unsigned int *)(v63 + 4 * v42);
    v8 = v9 - v45;
    if (v9 <= v9 - v45)
      goto LABEL_98;
    *(_DWORD *)(*(_QWORD *)(v43 + 24 * v42 + 16) + 4 * v8) = v14;
    --*(_DWORD *)(v44 + 4 * v42);
    ++v14;
  }
  while (v53 != v14);
  v14 = 0;
  i = 816;
  v5 = 560;
  while (2)
  {
    re::MeshNameMap::addMeshAssetModelNameToMap((re::MeshNameMap *)v11, v46, v14);
    v8 = v11[39];
    if (v8 <= v14)
      goto LABEL_100;
    if ((2 * v7) <= 1)
      v48 = 1;
    else
      v48 = 2 * v7;
    v12 = v11[40] + 48 * v14;
    LOWORD(v60) = 0;
    if (v7)
    {
      v9 = 0;
      v8 = 0;
      do
      {
        v12 = *((_QWORD *)a2 + 2);
        if (v12 <= v14)
          goto LABEL_80;
        v49 = *((_QWORD *)a2 + 4);
        v12 = *(_QWORD *)(v49 + 816 * v14 + 56);
        if (v12 <= v8)
          goto LABEL_81;
        v12 = v11[39];
        if (v12 <= v14)
          goto LABEL_82;
        re::HashTable<re::StringID,unsigned short,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned short &>(v11[40] + 48 * v14, (StringID *)(*(_QWORD *)(v49 + 816 * v14 + 64) + 560 * v8 + 504), &v60);
        v9 = (v9 + 1);
        LOWORD(v60) = v9;
        v8 = (unsigned __int16)v9;
      }
      while (v7 > (unsigned __int16)v9);
    }
    if (++v14 != v52)
      continue;
    break;
  }
  ++*(_DWORD *)v11;
  re::MeshNameMap::calculateHash(v11);
  result = v61;
  if (v61)
  {
    if (v62)
      return (uint64_t *)(*(uint64_t (**)(void))(*v61 + 40))();
  }
  return result;
}

uint64_t re::MeshNameMap::init(uint64_t result, re::_anonymous_namespace_::MeshAssetAccessor *a2, re::_anonymous_namespace_::MeshAssetAccessor *a3, unint64_t a4, unint64_t a5)
{
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t i;
  unint64_t v19;
  unint64_t v20;
  _anonymous_namespace_ *v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _anonymous_namespace_ *v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  StringID *v40;
  _anonymous_namespace_ *v41;
  signed int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  const char *v60;
  __int16 v61;
  int v62;
  __int16 v63;
  unint64_t v64;
  __int16 v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a2 + 52);
  if ((_DWORD)v5)
    v6 = (_DWORD)a4 == 0;
  else
    v6 = 1;
  if (v6)
    return result;
  v7 = a5;
  v9 = (uint64_t *)result;
  v10 = *((_QWORD *)a2 + 117);
  v47 = a4;
  if (!(_DWORD)a4)
    goto LABEL_22;
  v45 = *((_QWORD *)a2 + 52);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  do
  {
    if (v16)
      ++v12;
    v50 = v12;
    if (v16)
    {
      v7 = v16;
      for (i = 0; i != v7; ++i)
      {
        if (v19 < v10)
        {
          ++v11;
          v13 += *(_QWORD *)(re::MeshAsset::skeletonAtIndex(a2, v19) + 24);
        }
      }
    }
    v12 = v50;
    v14 += v48;
    ++v15;
  }
  while (v15 != v47);
  if (v11 > 0xFFFFFFFE)
  {
LABEL_99:
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) The number of skinned parts exceeds expectations.", "skinnedMeshPartCount < 4294967295U", "init", 251);
    _os_crash();
    __break(1u);
    goto LABEL_100;
  }
  if (v50 >= 0xFFFFFFFF)
  {
LABEL_100:
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) The number of skinned instances exceeds expectations.", "skinnedMeshInstanceCount < 4294967295U", "init", 252);
    _os_crash();
    __break(1u);
    goto LABEL_101;
  }
  if (v13 >= 0xFFFFFFFF)
  {
LABEL_101:
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) The number of skinned joints exceeds expectations.", "skinnedMeshPartJointCount < 4294967295U", "init", 253);
    _os_crash();
    __break(1u);
LABEL_102:
    v58 = 0;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v67 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v59 = 136315906;
    v60 = "operator[]";
    v61 = 1024;
    v62 = 468;
    v63 = 2048;
    v64 = v5;
    v65 = 2048;
    v66 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_103;
  }
  v5 = v45;
  v7 = a5;
  if (v14 >= 0xFFFFFFFF)
  {
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) The number of mesh parts exceeds expectations.", "meshPartInstanceCount < 4294967295U", "init", 254);
    _os_crash();
    __break(1u);
LABEL_22:
    v14 = 0;
    v12 = 0;
    v11 = 0;
  }
  v20 = a4;
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)(v9 + 2), v7, 2 * a4);
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)(v9 + 8), v7, 2 * v5);
  re::FixedArray<unsigned short>::init<>(v9 + 14, v7, v5);
  re::FixedArray<re::FixedArray<unsigned int>>::init<>(v9 + 17, v7, v5);
  re::FixedArray<re::StringID>::init<>(v9 + 20, v7, v5);
  re::FixedArray<re::StringID>::init<>(v9 + 23, v7, v47);
  re::FixedArray<int>::init<>(v9 + 26, v7, v47);
  re::FixedArray<int>::init<>(v9 + 29, v7, v12);
  re::FixedArray<int>::init<>(v9 + 32, v7, v11);
  re::FixedArray<unsigned int>::init<unsigned int const&>(v9 + 35, v7, v14, re::MeshNameMap::kInvalidSkinnedPartIndex);
  re::FixedArray<re::HashTable<re::StringID,unsigned short,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::init<>((uint64_t)(v9 + 38), v7, v5);
  re::FixedArray<int>::init<>(v9 + 41, v7, (a4 + 1));
  re::FixedArray<int>::init<>(v9 + 44, v7, (v5 + 1));
  re::FixedArray<int>::init<>(v9 + 47, v7, (a4 + 1));
  re::FixedArray<int>::init<>(v9 + 50, v7, v14);
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v49 = v5;
  v12 = 0;
  v51 = 0;
  v7 = 0;
  v23 = 0;
  v54 = 0;
  do
  {
    v13 = v23;
    if (v20 <= v23)
      goto LABEL_83;
    v5 = v24;
    v20 = v56;
    if (v56 <= v24)
      goto LABEL_84;
    ++*(_DWORD *)(v57 + 4 * v24);
    v20 = v54;
    v14 = v9[42];
    if (v14 <= v54)
      goto LABEL_85;
    *(_DWORD *)(v9[43] + 4 * v54) = v7;
    v11 = v54;
    v20 = v9[24];
    if (v20 <= v54)
      goto LABEL_86;
    v13 = (unint64_t)a3 + 96 * v13;
    re::StringID::operator=((unint64_t *)(v9[25] + 16 * v54), (uint64_t *)v13);
    v20 = v54;
    v14 = v9[27];
    if (v14 <= v54)
      goto LABEL_87;
    *(_DWORD *)(v9[28] + 4 * v54) = v5;
    v20 = v54;
    v14 = v9[48];
    if (v14 <= v54)
      goto LABEL_88;
    *(_DWORD *)(v9[49] + 4 * v54) = v12;
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>((uint64_t)(v9 + 2), (StringID *)v13, &v54);
    {
      v13 = v51;
      v20 = v9[30];
      if (v20 <= v51)
        goto LABEL_97;
      *(_DWORD *)(v9[31] + 4 * v51) = v54;
      if (v25)
      {
        v13 = v25;
        v26 = 0;
        v11 = 1;
        do
        {
          {
            v20 = v12;
            v14 = v9[33];
            if (v14 <= v12)
              goto LABEL_81;
            v14 = (v7 + v11 - 1);
            *(_DWORD *)(v9[34] + 4 * v12) = v14;
            v20 = v9[36];
            if (v20 <= v14)
              goto LABEL_82;
            *(_DWORD *)(v9[37] + 4 * v14) = v12;
            v12 = (v12 + 1);
          }
          v26 = v11;
          v27 = v13 > v11;
          v11 = (v11 + 1);
        }
        while (v27);
      }
      ++v51;
    }
    v20 = a4;
    v29 = v28;
    if (v28)
    {
      v5 = v7;
      v13 = v9[51];
      if (v13 >= v7)
        v30 = v7;
      else
        v30 = v9[51];
      while (v13 != v30)
      {
        *(_DWORD *)(v9[52] + 4 * v5) = v54;
        ++v30;
        ++v5;
        if (!--v29)
          goto LABEL_46;
      }
      v58 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v5;
      v65 = 2048;
      v66 = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_78;
    }
LABEL_46:
    v7 = v7 + v28;
    v23 = v54 + 1;
    v54 = v23;
  }
  while (v23 < a4);
  v13 = v9[42];
  v5 = v47;
  if (v13 <= v47)
    goto LABEL_102;
  *(_DWORD *)(v9[43] + 4 * v47) = v7;
  v13 = v9[48];
  if (v13 <= v47)
  {
LABEL_103:
    v58 = 0;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v67 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v59 = 136315906;
    v60 = "operator[]";
    v61 = 1024;
    v62 = 468;
    v63 = 2048;
    v64 = v5;
    v65 = 2048;
    v66 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_104;
  }
  v31 = 0;
  v10 = 0;
  v20 = 0;
  v32 = 0;
  *(_DWORD *)(v9[49] + 4 * v47) = v12;
  do
  {
    v12 = v9[15];
    if (v12 <= v20)
      goto LABEL_89;
    v13 = (unint64_t)v33;
    *(_WORD *)(v9[16] + 2 * v20) = (_WORD)v33;
    v12 = v9[18];
    if (v12 <= v20)
      goto LABEL_90;
    v12 = v56;
    if (v56 <= v20)
      goto LABEL_91;
    v34 = (uint64_t *)(v9[19] + v31);
    v5 = *(unsigned int *)(v57 + 4 * v20);
    v12 = v9[21];
    if (v12 <= v20)
      goto LABEL_92;
    re::StringID::operator=((unint64_t *)(v9[22] + v10), (uint64_t *)v7);
    v12 = v9[45];
    if (v12 <= v20)
      goto LABEL_93;
    v35 = v9[46];
    *(_DWORD *)(v35 + 4 * v20) = v32;
    v32 += v13;
    ++v20;
    v10 += 16;
    v31 += 24;
  }
  while (v49 != v20);
  v7 = v49;
  if (v12 <= v49)
  {
LABEL_104:
    v58 = 0;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v67 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v59 = 136315906;
    v60 = "operator[]";
    v61 = 1024;
    v62 = 468;
    v63 = 2048;
    v64 = v7;
    v65 = 2048;
    v66 = v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v13 = 0;
  *(_DWORD *)(v35 + 4 * v49) = v32;
  v12 = 24;
  v5 = v47;
  do
  {
    v10 = v36;
    v7 = v9[18];
    if (v7 <= v36)
      goto LABEL_94;
    v7 = v56;
    if (v56 <= v36)
      goto LABEL_95;
    v37 = v9[19];
    v20 = *(_QWORD *)(v37 + 24 * v36 + 8);
    v38 = v57;
    v39 = *(unsigned int *)(v57 + 4 * v36);
    v7 = v20 - v39;
    if (v20 <= v20 - v39)
      goto LABEL_96;
    *(_DWORD *)(*(_QWORD *)(v37 + 24 * v36 + 16) + 4 * v7) = v13;
    --*(_DWORD *)(v38 + 4 * v36);
    ++v13;
  }
  while (v47 != v13);
  v13 = 0;
  v5 = 48;
  v14 = 560;
  while (2)
  {
    re::MeshNameMap::addMeshAssetModelNameToMap((re::MeshNameMap *)v9, v40, v13);
    v10 = v9[39];
    if (v10 <= v13)
      goto LABEL_98;
    if ((2 * v7) <= 1)
      v42 = 1;
    else
      v42 = 2 * v7;
    v43 = v9[40] + 48 * v13;
    LOWORD(v54) = 0;
    if (v7)
    {
      v20 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *((_QWORD *)a2 + 52);
        if (v11 <= v13)
          break;
        v44 = re::DataArray<re::MeshModel>::get(*((_QWORD *)a2 + 55) + 8, *(_QWORD *)(*((_QWORD *)a2 + 54) + 8 * v13));
        v11 = *(_QWORD *)(v44 + 56);
        if (v11 <= v10)
          goto LABEL_79;
        v11 = v9[39];
        if (v11 <= v13)
          goto LABEL_80;
        re::HashTable<re::StringID,unsigned short,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned short &>(v9[40] + 48 * v13, (StringID *)(*(_QWORD *)(v44 + 64) + 560 * v10 + 504), &v54);
        v20 = (v20 + 1);
        LOWORD(v54) = v20;
        v10 = (unsigned __int16)v20;
        if (v7 <= (unsigned __int16)v20)
          goto LABEL_73;
      }
LABEL_78:
      v58 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 797;
      v63 = 2048;
      v64 = v13;
      v65 = 2048;
      v66 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_79:
      v58 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 476;
      v63 = 2048;
      v64 = v10;
      v65 = 2048;
      v66 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_80:
      v58 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v13;
      v65 = 2048;
      v66 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_81:
      v58 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v20;
      v65 = 2048;
      v66 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_82:
      v58 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v14;
      v65 = 2048;
      v66 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_83:
      re::internal::assertLog((re::internal *)6, v22, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v13, v20);
      _os_crash();
      __break(1u);
LABEL_84:
      v58 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v5;
      v65 = 2048;
      v66 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_85:
      v58 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v20;
      v65 = 2048;
      v66 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_86:
      v58 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v11;
      v65 = 2048;
      v66 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_87:
      v58 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v20;
      v65 = 2048;
      v66 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_88:
      v58 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v20;
      v65 = 2048;
      v66 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_89:
      v58 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v20;
      v65 = 2048;
      v66 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_90:
      v58 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v20;
      v65 = 2048;
      v66 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_91:
      v58 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v20;
      v65 = 2048;
      v66 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_92:
      v58 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v20;
      v65 = 2048;
      v66 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_93:
      v58 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v20;
      v65 = 2048;
      v66 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_94:
      v58 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v10;
      v65 = 2048;
      v66 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_95:
      v58 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v10;
      v65 = 2048;
      v66 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_96:
      v58 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v7;
      v65 = 2048;
      v66 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_97:
      v58 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v13;
      v65 = 2048;
      v66 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_98:
      v58 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v13;
      v65 = 2048;
      v66 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_99;
    }
LABEL_73:
    if (++v13 != v49)
      continue;
    break;
  }
  ++*(_DWORD *)v9;
  re::MeshNameMap::calculateHash(v9);
  result = v55;
  if (v55)
  {
    if (v56)
      return (*(uint64_t (**)(void))(*(_QWORD *)v55 + 40))();
  }
  return result;
}

uint64_t re::MeshNameMap::init(uint64_t result, re::_anonymous_namespace_::MeshAssetDataAccessor *a2, re::_anonymous_namespace_::MeshAssetAccessor *a3, unint64_t a4, unint64_t a5)
{
  unint64_t v5;
  BOOL v6;
  unint64_t i;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _anonymous_namespace_ *v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _anonymous_namespace_ *v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  StringID *v39;
  _anonymous_namespace_ *v40;
  signed int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)a2 + 2))
    v6 = (_DWORD)a4 == 0;
  else
    v6 = 1;
  if (v6)
    return result;
  i = a5;
  v9 = (uint64_t *)result;
  v45 = *((_QWORD *)a2 + 2);
  v10 = *((_QWORD *)a2 + 12);
  v46 = a4;
  if ((_DWORD)a4)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    do
    {
      v49 = v14;
      if (v16)
        ++v12;
      v48 = v12;
      if (v16)
      {
        v5 = v16;
        for (i = 0; i != v5; ++i)
        {
          if (v18 < v10)
          {
            v12 = v18;
            v19 = v10;
            v10 = *((_QWORD *)a2 + 12);
            if (v10 <= v18)
              goto LABEL_79;
            ++v11;
            v13 += *(_QWORD *)(*((_QWORD *)a2 + 14) + 112 * v18 + 24);
            v10 = v19;
          }
        }
      }
      v12 = v48;
      v14 = v47 + v49;
      ++v15;
    }
    while (v15 != v46);
    if (v11 > 0xFFFFFFFE)
      goto LABEL_101;
    if (v48 >= 0xFFFFFFFF)
    {
LABEL_102:
      re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) The number of skinned instances exceeds expectations.", "skinnedMeshInstanceCount < 4294967295U", "init", 252);
      _os_crash();
      __break(1u);
      goto LABEL_103;
    }
    if (v13 >= 0xFFFFFFFF)
    {
LABEL_103:
      re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) The number of skinned joints exceeds expectations.", "skinnedMeshPartJointCount < 4294967295U", "init", 253);
      _os_crash();
      __break(1u);
      goto LABEL_104;
    }
    i = a5;
    if (v14 < 0xFFFFFFFF)
      goto LABEL_24;
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) The number of mesh parts exceeds expectations.", "meshPartInstanceCount < 4294967295U", "init", 254);
    _os_crash();
    __break(1u);
  }
  v14 = 0;
  v12 = 0;
  v11 = 0;
LABEL_24:
  v15 = a4;
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)(v9 + 2), i, 2 * a4);
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)(v9 + 8), i, 2 * v45);
  re::FixedArray<unsigned short>::init<>(v9 + 14, i, v45);
  re::FixedArray<re::FixedArray<unsigned int>>::init<>(v9 + 17, i, v45);
  re::FixedArray<re::StringID>::init<>(v9 + 20, i, v45);
  re::FixedArray<re::StringID>::init<>(v9 + 23, i, v46);
  re::FixedArray<int>::init<>(v9 + 26, i, v46);
  re::FixedArray<int>::init<>(v9 + 29, i, v12);
  re::FixedArray<int>::init<>(v9 + 32, i, v11);
  re::FixedArray<unsigned int>::init<unsigned int const&>(v9 + 35, i, v14, re::MeshNameMap::kInvalidSkinnedPartIndex);
  re::FixedArray<re::HashTable<re::StringID,unsigned short,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::init<>((uint64_t)(v9 + 38), i, v45);
  re::FixedArray<int>::init<>(v9 + 41, i, (a4 + 1));
  re::FixedArray<int>::init<>(v9 + 44, i, (v45 + 1));
  re::FixedArray<int>::init<>(v9 + 47, i, (a4 + 1));
  re::FixedArray<int>::init<>(v9 + 50, i, v14);
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v12 = 0;
  v50 = 0;
  v5 = 0;
  v22 = 0;
  v53 = 0;
  do
  {
    v13 = v22;
    if (v15 <= v22)
      goto LABEL_85;
    i = v23;
    v15 = v55;
    if (v55 <= v23)
      goto LABEL_86;
    ++*(_DWORD *)(v56 + 4 * v23);
    v15 = v53;
    v14 = v9[42];
    if (v14 <= v53)
      goto LABEL_87;
    *(_DWORD *)(v9[43] + 4 * v53) = v5;
    v11 = v53;
    v15 = v9[24];
    if (v15 <= v53)
      goto LABEL_88;
    v13 = (unint64_t)a3 + 96 * v13;
    re::StringID::operator=((unint64_t *)(v9[25] + 16 * v53), (uint64_t *)v13);
    v15 = v53;
    v14 = v9[27];
    if (v14 <= v53)
      goto LABEL_89;
    *(_DWORD *)(v9[28] + 4 * v53) = i;
    v15 = v53;
    v14 = v9[48];
    if (v14 <= v53)
      goto LABEL_90;
    *(_DWORD *)(v9[49] + 4 * v53) = v12;
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>((uint64_t)(v9 + 2), (StringID *)v13, &v53);
    {
      v13 = v50;
      v15 = v9[30];
      if (v15 <= v50)
        goto LABEL_99;
      *(_DWORD *)(v9[31] + 4 * v50) = v53;
      if (v24)
      {
        v13 = v24;
        v25 = 0;
        v11 = 1;
        do
        {
          {
            v15 = v12;
            v14 = v9[33];
            if (v14 <= v12)
              goto LABEL_83;
            v14 = (v5 + v11 - 1);
            *(_DWORD *)(v9[34] + 4 * v12) = v14;
            v15 = v9[36];
            if (v15 <= v14)
              goto LABEL_84;
            *(_DWORD *)(v9[37] + 4 * v14) = v12;
            v12 = (v12 + 1);
          }
          v25 = v11;
          v26 = v13 > v11;
          v11 = (v11 + 1);
        }
        while (v26);
      }
      ++v50;
    }
    v15 = a4;
    v28 = v27;
    if (v27)
    {
      i = v5;
      v13 = v9[51];
      if (v13 >= v5)
        v29 = v5;
      else
        v29 = v9[51];
      while (v13 != v29)
      {
        *(_DWORD *)(v9[52] + 4 * i) = v53;
        ++v29;
        ++i;
        if (!--v28)
          goto LABEL_47;
      }
      v57 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v58 = 136315906;
      v59 = "operator[]";
      v60 = 1024;
      v61 = 468;
      v62 = 2048;
      v63 = i;
      v64 = 2048;
      v65 = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_79:
      v54 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v58 = 136315906;
      v59 = "operator[]";
      v60 = 1024;
      v61 = 797;
      v62 = 2048;
      v63 = v12;
      v64 = 2048;
      v65 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_80:
      v57 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v58 = 136315906;
      v59 = "operator[]";
      v60 = 1024;
      v61 = 797;
      v62 = 2048;
      v63 = v13;
      v64 = 2048;
      v65 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_81:
      v57 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v58 = 136315906;
      v59 = "operator[]";
      v60 = 1024;
      v61 = 797;
      v62 = 2048;
      v63 = i;
      v64 = 2048;
      v65 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_82:
      v57 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v58 = 136315906;
      v59 = "operator[]";
      v60 = 1024;
      v61 = 468;
      v62 = 2048;
      v63 = v13;
      v64 = 2048;
      v65 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_83:
      v57 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v58 = 136315906;
      v59 = "operator[]";
      v60 = 1024;
      v61 = 468;
      v62 = 2048;
      v63 = v15;
      v64 = 2048;
      v65 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_84:
      v57 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v58 = 136315906;
      v59 = "operator[]";
      v60 = 1024;
      v61 = 468;
      v62 = 2048;
      v63 = v14;
      v64 = 2048;
      v65 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_85:
      re::internal::assertLog((re::internal *)6, v21, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v13, v15);
      _os_crash();
      __break(1u);
LABEL_86:
      v57 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v58 = 136315906;
      v59 = "operator[]";
      v60 = 1024;
      v61 = 468;
      v62 = 2048;
      v63 = i;
      v64 = 2048;
      v65 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_87:
      v57 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v58 = 136315906;
      v59 = "operator[]";
      v60 = 1024;
      v61 = 468;
      v62 = 2048;
      v63 = v15;
      v64 = 2048;
      v65 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_88:
      v57 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v58 = 136315906;
      v59 = "operator[]";
      v60 = 1024;
      v61 = 468;
      v62 = 2048;
      v63 = v11;
      v64 = 2048;
      v65 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_89:
      v57 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v58 = 136315906;
      v59 = "operator[]";
      v60 = 1024;
      v61 = 468;
      v62 = 2048;
      v63 = v15;
      v64 = 2048;
      v65 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_90:
      v57 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v58 = 136315906;
      v59 = "operator[]";
      v60 = 1024;
      v61 = 468;
      v62 = 2048;
      v63 = v15;
      v64 = 2048;
      v65 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_91:
      v57 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v58 = 136315906;
      v59 = "operator[]";
      v60 = 1024;
      v61 = 468;
      v62 = 2048;
      v63 = v15;
      v64 = 2048;
      v65 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_92:
      v57 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v58 = 136315906;
      v59 = "operator[]";
      v60 = 1024;
      v61 = 468;
      v62 = 2048;
      v63 = v15;
      v64 = 2048;
      v65 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_93:
      v57 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v58 = 136315906;
      v59 = "operator[]";
      v60 = 1024;
      v61 = 468;
      v62 = 2048;
      v63 = v15;
      v64 = 2048;
      v65 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_94:
      v57 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v58 = 136315906;
      v59 = "operator[]";
      v60 = 1024;
      v61 = 468;
      v62 = 2048;
      v63 = v15;
      v64 = 2048;
      v65 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_95:
      v57 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v58 = 136315906;
      v59 = "operator[]";
      v60 = 1024;
      v61 = 468;
      v62 = 2048;
      v63 = v15;
      v64 = 2048;
      v65 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_96:
      v57 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v58 = 136315906;
      v59 = "operator[]";
      v60 = 1024;
      v61 = 468;
      v62 = 2048;
      v63 = i;
      v64 = 2048;
      v65 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_97:
      v57 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v58 = 136315906;
      v59 = "operator[]";
      v60 = 1024;
      v61 = 468;
      v62 = 2048;
      v63 = i;
      v64 = 2048;
      v65 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_98:
      v57 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v58 = 136315906;
      v59 = "operator[]";
      v60 = 1024;
      v61 = 468;
      v62 = 2048;
      v63 = v5;
      v64 = 2048;
      v65 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_99:
      v57 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v58 = 136315906;
      v59 = "operator[]";
      v60 = 1024;
      v61 = 468;
      v62 = 2048;
      v63 = v13;
      v64 = 2048;
      v65 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_100:
      v57 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v58 = 136315906;
      v59 = "operator[]";
      v60 = 1024;
      v61 = 468;
      v62 = 2048;
      v63 = v13;
      v64 = 2048;
      v65 = i;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_101:
      re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) The number of skinned parts exceeds expectations.", "skinnedMeshPartCount < 4294967295U", "init", 251);
      _os_crash();
      __break(1u);
      goto LABEL_102;
    }
LABEL_47:
    v5 = v5 + v27;
    v22 = v53 + 1;
    v53 = v22;
  }
  while (v22 < a4);
  v13 = v9[42];
  i = v46;
  if (v13 <= v46)
  {
LABEL_104:
    v57 = 0;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v66 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 468;
    v62 = 2048;
    v63 = i;
    v64 = 2048;
    v65 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_105;
  }
  *(_DWORD *)(v9[43] + 4 * v46) = v5;
  v13 = v9[48];
  if (v13 <= v46)
  {
LABEL_105:
    v57 = 0;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v66 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 468;
    v62 = 2048;
    v63 = i;
    v64 = 2048;
    v65 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_106;
  }
  v11 = 0;
  i = 0;
  v15 = 0;
  v30 = 0;
  *(_DWORD *)(v9[49] + 4 * v46) = v12;
  do
  {
    v12 = v9[15];
    if (v12 <= v15)
      goto LABEL_91;
    v13 = (unint64_t)v31;
    *(_WORD *)(v9[16] + 2 * v15) = (_WORD)v31;
    v12 = v9[18];
    if (v12 <= v15)
      goto LABEL_92;
    v12 = v55;
    if (v55 <= v15)
      goto LABEL_93;
    v32 = (uint64_t *)(v9[19] + v11);
    v33 = *(unsigned int *)(v56 + 4 * v15);
    v12 = v9[21];
    if (v12 <= v15)
      goto LABEL_94;
    re::StringID::operator=((unint64_t *)(v9[22] + i), (uint64_t *)v5);
    v12 = v9[45];
    if (v12 <= v15)
      goto LABEL_95;
    v34 = v9[46];
    *(_DWORD *)(v34 + 4 * v15) = v30;
    v30 += v13;
    ++v15;
    i += 16;
    v11 += 24;
  }
  while (v45 != v15);
  v5 = v45;
  if (v12 <= v45)
  {
LABEL_106:
    v57 = 0;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v66 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 468;
    v62 = 2048;
    v63 = v5;
    v64 = 2048;
    v65 = v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v13 = 0;
  *(_DWORD *)(v34 + 4 * v45) = v30;
  v12 = 24;
  do
  {
    i = v35;
    v5 = v9[18];
    if (v5 <= v35)
      goto LABEL_96;
    v5 = v55;
    if (v55 <= v35)
      goto LABEL_97;
    v36 = v9[19];
    v15 = *(_QWORD *)(v36 + 24 * v35 + 8);
    v37 = v56;
    v38 = *(unsigned int *)(v56 + 4 * v35);
    v5 = v15 - v38;
    if (v15 <= v15 - v38)
      goto LABEL_98;
    *(_DWORD *)(*(_QWORD *)(v36 + 24 * v35 + 16) + 4 * v5) = v13;
    --*(_DWORD *)(v37 + 4 * v35);
    ++v13;
  }
  while (v46 != v13);
  v13 = 0;
  v14 = 48;
  while (2)
  {
    re::MeshNameMap::addMeshAssetModelNameToMap((re::MeshNameMap *)v9, v39, v13);
    i = v9[39];
    if (i <= v13)
      goto LABEL_100;
    if ((2 * v5) <= 1)
      v41 = 1;
    else
      v41 = 2 * v5;
    v42 = v9[40] + 48 * v13;
    LOWORD(v53) = 0;
    if (v5)
    {
      v15 = 0;
      i = 0;
      do
      {
        v10 = *((_QWORD *)a2 + 2);
        if (v10 <= v13)
          goto LABEL_80;
        v43 = *((_QWORD *)a2 + 4);
        v10 = *(_QWORD *)(v43 + (v13 << 9) + 208);
        if (v10 <= i)
          goto LABEL_81;
        v10 = v9[39];
        if (v10 <= v13)
          goto LABEL_82;
        re::HashTable<re::StringID,unsigned short,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned short &>(v9[40] + 48 * v13, (StringID *)(*(_QWORD *)(v43 + (v13 << 9) + 224) + (i << 8) + 72), &v53);
        v15 = (v15 + 1);
        LOWORD(v53) = v15;
        i = (unsigned __int16)v15;
      }
      while (v5 > (unsigned __int16)v15);
    }
    if (++v13 != v45)
      continue;
    break;
  }
  ++*(_DWORD *)v9;
  re::MeshNameMap::calculateHash(v9);
  result = v54;
  if (v54)
  {
    if (v55)
      return (*(uint64_t (**)(void))(*(_QWORD *)v54 + 40))();
  }
  return result;
}

uint64_t re::MeshNameMap::deinit(re::MeshNameMap *this)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2);
  v2 = re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8);
  v3 = *((_QWORD *)this + 14);
  if (v3)
  {
    if (*((_QWORD *)this + 15))
    {
      (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 16), v2);
      *((_QWORD *)this + 15) = 0;
      *((_QWORD *)this + 16) = 0;
    }
    *((_QWORD *)this + 14) = 0;
  }
  re::FixedArray<re::FixedArray<float>>::deinit((_QWORD *)this + 17);
  re::FixedArray<re::StringID>::deinit((_QWORD *)this + 20);
  re::FixedArray<re::StringID>::deinit((_QWORD *)this + 23);
  v4 = *((_QWORD *)this + 26);
  if (v4)
  {
    if (*((_QWORD *)this + 27))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 28));
      *((_QWORD *)this + 27) = 0;
      *((_QWORD *)this + 28) = 0;
    }
    *((_QWORD *)this + 26) = 0;
  }
  v5 = *((_QWORD *)this + 29);
  if (v5)
  {
    if (*((_QWORD *)this + 30))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 31));
      *((_QWORD *)this + 30) = 0;
      *((_QWORD *)this + 31) = 0;
    }
    *((_QWORD *)this + 29) = 0;
  }
  v6 = *((_QWORD *)this + 32);
  if (v6)
  {
    if (*((_QWORD *)this + 33))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 34));
      *((_QWORD *)this + 33) = 0;
      *((_QWORD *)this + 34) = 0;
    }
    *((_QWORD *)this + 32) = 0;
  }
  v7 = *((_QWORD *)this + 35);
  if (v7)
  {
    if (*((_QWORD *)this + 36))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *((_QWORD *)this + 37));
      *((_QWORD *)this + 36) = 0;
      *((_QWORD *)this + 37) = 0;
    }
    *((_QWORD *)this + 35) = 0;
  }
  re::FixedArray<re::HashTable<re::StringID,unsigned short,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::deinit((_QWORD *)this + 38);
  v8 = *((_QWORD *)this + 41);
  if (v8)
  {
    if (*((_QWORD *)this + 42))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *((_QWORD *)this + 43));
      *((_QWORD *)this + 42) = 0;
      *((_QWORD *)this + 43) = 0;
    }
    *((_QWORD *)this + 41) = 0;
  }
  v9 = *((_QWORD *)this + 44);
  if (v9)
  {
    if (*((_QWORD *)this + 45))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, *((_QWORD *)this + 46));
      *((_QWORD *)this + 45) = 0;
      *((_QWORD *)this + 46) = 0;
    }
    *((_QWORD *)this + 44) = 0;
  }
  v10 = *((_QWORD *)this + 47);
  if (v10)
  {
    if (*((_QWORD *)this + 48))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 40))(v10, *((_QWORD *)this + 49));
      *((_QWORD *)this + 48) = 0;
      *((_QWORD *)this + 49) = 0;
    }
    *((_QWORD *)this + 47) = 0;
  }
  result = *((_QWORD *)this + 50);
  if (result)
  {
    if (*((_QWORD *)this + 51))
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *((_QWORD *)this + 52));
      *((_QWORD *)this + 51) = 0;
      *((_QWORD *)this + 52) = 0;
    }
    *((_QWORD *)this + 50) = 0;
  }
  ++*(_DWORD *)this;
  *((_QWORD *)this + 1) = 0;
  return result;
}

uint64_t re::MeshNameMap::meshPartInstanceCount(re::MeshNameMap *this, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = a2 + 1;
  v3 = *((_QWORD *)this + 42);
  if (v3 <= v2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v3 <= a2)
    goto LABEL_5;
  return (*(_DWORD *)(*((_QWORD *)this + 43) + 4 * v2) - *(_DWORD *)(*((_QWORD *)this + 43) + 4 * a2));
}

uint64_t re::MeshNameMap::modelIndex(re::MeshNameMap *this, const re::StringID *a2)
{
  char *v3;
  unsigned int *v4;
  const char *v5;
  size_t v6;
  _anonymous_namespace_ *v7;
  size_t v8;
  size_t v9;
  _QWORD v11[2];

  v3 = (char *)this + 64;
  v4 = (unsigned int *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 64, a2);
  if (v4)
    return *v4;
  v5 = (const char *)*((_QWORD *)a2 + 1);
  v6 = strlen(v5);
  v9 = v8;
  v11[0] = 0;
  v11[1] = &str_110;
  v4 = (unsigned int *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v3, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v4)
    return *v4;
  else
    return 0xFFFFLL;
}

uint64_t re::`anonymous namespace'::meshModelTrimmedName(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  int v3;
  _QWORD v4[2];

  v4[0] = result;
  v4[1] = a2;
  v2 = a2;
  while (v2)
  {
    v3 = *(unsigned __int8 *)(result - 1 + v2--);
    if (v3 == 47)
      return re::Slice<char>::range(v4, v2 + 1, a2);
  }
  return result;
}

uint64_t re::MeshNameMap::modelIndex(re::MeshNameMap *this, unsigned int a2)
{
  if (*((_QWORD *)this + 27) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*((_QWORD *)this + 28) + 4 * a2);
}

uint64_t re::MeshNameMap::meshPartStartIndexForInstance(re::MeshNameMap *this, unsigned int a2)
{
  if (*((_QWORD *)this + 42) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*((_QWORD *)this + 43) + 4 * a2);
}

uint64_t re::MeshNameMap::skinnedPartIndexForPartInstance(re::MeshNameMap *this, unsigned int a2)
{
  if (*((_QWORD *)this + 36) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*((_QWORD *)this + 37) + 4 * a2);
}

uint64_t *re::MeshNameMap::meshInstancePartsForIdentifier@<X0>(uint64_t this@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *result;
  _BYTE *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  uint8_t buf[16];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v3 = (_QWORD *)this;
  v42 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  if (v5 == 3)
  {
    v6 = *(_QWORD *)(this + 408);
    if (v6)
    {
      v7 = *(_QWORD *)(this + 416);
      v9 = *(_QWORD *)(this + 336);
      v8 = *(_QWORD *)(this + 344);
      v10 = re::globalAllocators((re *)this)[2];
      *((_QWORD *)&v38 + 1) = v10;
      v11 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, 40, 0);
      *v11 = &off_24ED77320;
      v11[1] = v7;
      v11[2] = v6;
      v11[3] = v8;
      v11[4] = v9;
LABEL_4:
      *(_QWORD *)&v39 = v11;
      *a3 = v6;
      goto LABEL_5;
    }
LABEL_45:
    *a3 = 0;
    result = re::globalAllocators((re *)this);
    a3[4] = result[2];
    a3[5] = 0;
    return result;
  }
  v14 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (v14 && *v14)
  {
    v15 = a2 + 24;
    if (v5 == 2)
    {
      this = re::MeshNameMap::modelIndex((re::MeshNameMap *)this, (const re::StringID *)(a2 + 8));
      if ((_DWORD)this == 0xFFFF)
        goto LABEL_45;
      v32 = this;
      if (v3[39] > (unint64_t)this)
      {
        this = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v3[40] + 48 * this, v15);
        if (!this)
          goto LABEL_45;
        if (v3[18] > v32)
        {
          v33 = v3[19] + 24 * v32;
          v6 = *(_QWORD *)(v33 + 8);
          v34 = *(_QWORD *)(v33 + 16);
          v35 = *(_WORD *)this;
          v10 = re::globalAllocators((re *)this)[2];
          *((_QWORD *)&v38 + 1) = v10;
          if (v10)
            v11 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, 32, 0);
          else
            v11 = 0;
          *v11 = &off_24ED772C8;
          v11[1] = v34;
          v11[2] = v6;
          *((_WORD *)v11 + 12) = v35;
          goto LABEL_4;
        }
LABEL_58:
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      goto LABEL_55;
    }
    if (v5 == 1)
    {
      this = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(this + 16, (_QWORD *)a2 + 1);
      if (!this)
        goto LABEL_45;
      v16 = *(unsigned int *)this;
      if (v3[27] > v16)
      {
        v17 = *(unsigned int *)(v3[28] + 4 * v16);
        if (v3[39] > v17)
        {
          this = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v3[40] + 48 * v17, v15);
          if (!this)
            goto LABEL_45;
          v18 = *(unsigned __int16 *)this;
          v19 = re::globalAllocators((re *)this)[2];
          *(_QWORD *)buf = &off_24ED77270;
          *(_QWORD *)&buf[8] = v16 | (v18 << 32);
          *((_QWORD *)&v38 + 1) = v19;
          *(_QWORD *)&v39 = buf;
          *a3 = 1;
          v20 = (uint64_t)(a3 + 1);
          a3[4] = v19;
LABEL_25:
          a3[5] = 0;
          re::FunctionBase<24ul,void ()(void)>::operator=<24ul>(v20, (uint64_t)buf);
          result = (uint64_t *)v39;
          if ((_QWORD)v39)
          {
            result = (uint64_t *)(**(uint64_t (***)(_QWORD))v39)(v39);
            if ((uint8_t *)v39 != buf)
              return (uint64_t *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)&v38 + 1) + 40))(*((_QWORD *)&v38 + 1));
          }
          return result;
        }
        goto LABEL_54;
      }
LABEL_53:
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_54:
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_55:
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_56;
    }
    v30 = *re::graphicsLogObjects((re *)this);
    this = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
    if (!(_DWORD)this)
      goto LABEL_45;
    v36 = *a2;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v36;
LABEL_44:
    _os_log_impl(&dword_224FE9000, v30, OS_LOG_TYPE_DEFAULT, "Invalid mesh identifier type detected: %u.", buf, 8u);
    goto LABEL_45;
  }
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      this = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(this + 16, (_QWORD *)a2 + 1);
      if (!this)
        goto LABEL_45;
      v21 = *(unsigned int *)this;
      if ((_DWORD)v21 == 0xFFFF)
        goto LABEL_45;
      if (v3[27] > v21)
      {
        v22 = *(unsigned int *)(v3[28] + 4 * v21);
        if (v3[15] > v22)
        {
          v23 = *(unsigned __int16 *)(v3[16] + 2 * v22);
          if (!v23)
            goto LABEL_45;
          v24 = re::globalAllocators((re *)this)[2];
          *(_QWORD *)buf = &off_24ED771B0;
          *(_DWORD *)&buf[8] = v21;
          *((_QWORD *)&v38 + 1) = v24;
          *(_QWORD *)&v39 = buf;
          *a3 = v23;
          v20 = (uint64_t)(a3 + 1);
          a3[4] = v24;
          goto LABEL_25;
        }
        goto LABEL_57;
      }
LABEL_56:
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_57:
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_58;
    }
    v30 = *re::graphicsLogObjects((re *)this);
    this = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
    if (!(_DWORD)this)
      goto LABEL_45;
    v31 = *a2;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v31;
    goto LABEL_44;
  }
  this = re::MeshNameMap::modelIndex((re::MeshNameMap *)this, (const re::StringID *)(a2 + 8));
  if ((_DWORD)this == 0xFFFF)
    goto LABEL_45;
  if (v3[18] <= (unint64_t)this)
  {
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_52;
  }
  if (v3[15] <= (unint64_t)this)
  {
LABEL_52:
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_53;
  }
  v25 = v3[19] + 24 * this;
  v26 = *(_QWORD *)(v25 + 8);
  v27 = *(unsigned __int16 *)(v3[16] + 2 * this);
  if (!(v26 * v27))
    goto LABEL_45;
  v28 = *(_QWORD *)(v25 + 16);
  v10 = re::globalAllocators((re *)this)[2];
  *((_QWORD *)&v38 + 1) = v10;
  if (v10)
    v29 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, 32, 0);
  else
    v29 = 0;
  *(_QWORD *)v29 = &off_24ED77218;
  *(_QWORD *)(v29 + 8) = v28;
  *(_QWORD *)(v29 + 16) = v26;
  *(_WORD *)(v29 + 24) = v27;
  *(_QWORD *)&v39 = v29;
  *a3 = v26 * v27;
LABEL_5:
  a3[4] = v10;
  a3[5] = 0;
  re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)(a3 + 1), (uint64_t)buf);
  result = (uint64_t *)v39;
  if ((_QWORD)v39)
  {
    result = (uint64_t *)(**(uint64_t (***)(_QWORD))v39)(v39);
    if ((uint8_t *)v39 != buf)
      return (uint64_t *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)&v38 + 1) + 40))(*((_QWORD *)&v38 + 1));
  }
  return result;
}

void re::MeshNameMap::addMeshAssetModelNameToMap(re::MeshNameMap *this, StringID *a2, int a3)
{
  char *v4;
  size_t v5;
  const char *v6;
  size_t v7;
  size_t v8;
  const char *var1;
  size_t v10;
  StringID v11;
  int v12;

  v12 = a3;
  v4 = (char *)this + 64;
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>((uint64_t)this + 64, a2, &v12);
  v5 = strlen(a2->var1);
  v8 = v7;
  var1 = a2->var1;
  v10 = strlen(var1);
  if (v10 != v8 || (v10 = memcmp(v6, var1, v8), (_DWORD)v10))
  {
    *(_QWORD *)&v11.var0 = 0;
    v11.var1 = (char *)&str_110;
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>((uint64_t)v4, &v11, &v12);
    re::StringID::destroyString((re::StringID *)&v11);
  }
}

uint64_t re::MeshNameMap::estimateFootprint(re::MeshNameMap *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char **v30;
  uint64_t v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  const char **v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  int v50;
  int v51;

  v2 = ((unint64_t)*((unsigned int *)this + 10) << 6) + 424;
  v3 = *((unsigned int *)this + 12);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = (int *)*((_QWORD *)this + 4);
    while (1)
    {
      v6 = *v5;
      v5 += 8;
      if (v6 < 0)
        break;
      if (v3 == ++v4)
      {
        LODWORD(v4) = *((_DWORD *)this + 12);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if ((_DWORD)v3 != (_DWORD)v4)
  {
    v7 = v4;
    v8 = *((_QWORD *)this + 4);
    do
    {
      v9 = v8 + 32 * v7;
      if ((*(_BYTE *)(v9 + 8) & 1) != 0)
        v10 = strlen(*(const char **)(v9 + 16)) + 1;
      else
        v10 = 0;
      v2 += v10;
      if (v3 <= (int)v4 + 1)
        v11 = v4 + 1;
      else
        v11 = v3;
      while (1)
      {
        v7 = (v4 + 1);
        if (v11 - 1 == (_DWORD)v4)
          break;
        LODWORD(v4) = v4 + 1;
        v12 = v7;
        if ((*(_DWORD *)(v8 + 32 * v7) & 0x80000000) != 0)
          goto LABEL_19;
      }
      v12 = v11;
LABEL_19:
      LODWORD(v4) = v12;
    }
    while ((_DWORD)v3 != v12);
  }
  v13 = v2 + ((unint64_t)*((unsigned int *)this + 22) << 6);
  v14 = *((unsigned int *)this + 24);
  if ((_DWORD)v14)
  {
    v15 = 0;
    v16 = (int *)*((_QWORD *)this + 10);
    while (1)
    {
      v17 = *v16;
      v16 += 8;
      if (v17 < 0)
        break;
      if (v14 == ++v15)
      {
        LODWORD(v15) = *((_DWORD *)this + 24);
        break;
      }
    }
  }
  else
  {
    LODWORD(v15) = 0;
  }
  if ((_DWORD)v14 != (_DWORD)v15)
  {
    v18 = v15;
    v19 = *((_QWORD *)this + 10);
    do
    {
      v20 = v19 + 32 * v18;
      if ((*(_BYTE *)(v20 + 8) & 1) != 0)
        v21 = strlen(*(const char **)(v20 + 16)) + 1;
      else
        v21 = 0;
      v13 += v21;
      if (v14 <= (int)v15 + 1)
        v22 = v15 + 1;
      else
        v22 = *((_DWORD *)this + 24);
      while (1)
      {
        v18 = (v15 + 1);
        if (v22 - 1 == (_DWORD)v15)
          break;
        LODWORD(v15) = v15 + 1;
        v23 = v18;
        if ((*(_DWORD *)(v19 + 32 * v18) & 0x80000000) != 0)
          goto LABEL_38;
      }
      v23 = v22;
LABEL_38:
      LODWORD(v15) = v23;
    }
    while ((_DWORD)v14 != v23);
  }
  v24 = *((_QWORD *)this + 18);
  v25 = v13 + 2 * *((_QWORD *)this + 15) + 24 * v24;
  if (v24)
  {
    v26 = (uint64_t *)(*((_QWORD *)this + 19) + 8);
    do
    {
      v27 = *v26;
      v26 += 3;
      v25 += 4 * v27;
      --v24;
    }
    while (v24);
  }
  v28 = *((_QWORD *)this + 21);
  v29 = v25 + 16 * v28;
  if (v28)
  {
    v30 = (const char **)(*((_QWORD *)this + 22) + 8);
    v31 = 16 * v28;
    do
    {
      if ((*(_BYTE *)(v30 - 1) & 1) != 0)
        v32 = strlen(*v30) + 1;
      else
        v32 = 0;
      v29 += v32;
      v30 += 2;
      v31 -= 16;
    }
    while (v31);
  }
  v33 = *((_QWORD *)this + 24);
  v34 = v29 + 16 * v33;
  if (v33)
  {
    v35 = (const char **)(*((_QWORD *)this + 25) + 8);
    do
    {
      if ((*(_BYTE *)(v35 - 1) & 1) != 0)
        v36 = strlen(*v35) + 1;
      else
        v36 = 0;
      v34 += v36;
      v35 += 2;
      --v33;
    }
    while (v33);
  }
  v37 = *((_QWORD *)this + 39);
  v38 = v34
      + 48 * v37
      + 4 * (*((_QWORD *)this + 30) + *((_QWORD *)this + 27) + *((_QWORD *)this + 33) + *((_QWORD *)this + 36));
  if (v37)
  {
    v39 = 0;
    v40 = *((_QWORD *)this + 40);
    do
    {
      v41 = v40 + 48 * v39;
      v42 = *(unsigned int *)(v41 + 32);
      if ((_DWORD)v42)
      {
        v43 = 0;
        v44 = *(int **)(v40 + 48 * v39 + 16);
        while (1)
        {
          v45 = *v44;
          v44 += 8;
          if (v45 < 0)
            break;
          if (v42 == ++v43)
          {
            LODWORD(v43) = *(_DWORD *)(v41 + 32);
            break;
          }
        }
      }
      else
      {
        LODWORD(v43) = 0;
      }
      v38 += 30 * *(unsigned int *)(v41 + 24) + ((30 * *(unsigned int *)(v41 + 24) + 15) & 0x3FFFFFFFF0);
      if ((_DWORD)v42 != (_DWORD)v43)
      {
        v46 = v43;
        v47 = *(_QWORD *)(v40 + 48 * v39 + 16);
        do
        {
          v48 = v47 + 32 * v46;
          if ((*(_BYTE *)(v48 + 8) & 1) != 0)
            v49 = strlen(*(const char **)(v48 + 16)) + 1;
          else
            v49 = 0;
          v38 += v49;
          if (v42 <= (int)v43 + 1)
            v50 = v43 + 1;
          else
            v50 = v42;
          while (1)
          {
            v46 = (v43 + 1);
            if (v50 - 1 == (_DWORD)v43)
              break;
            LODWORD(v43) = v43 + 1;
            v51 = v46;
            if ((*(_DWORD *)(v47 + 32 * v46) & 0x80000000) != 0)
              goto LABEL_74;
          }
          v51 = v50;
LABEL_74:
          LODWORD(v43) = v51;
        }
        while ((_DWORD)v42 != v51);
      }
      ++v39;
    }
    while (v39 != v37);
  }
  return v38 + 4 * (*((_QWORD *)this + 45) + *((_QWORD *)this + 42) + *((_QWORD *)this + 48));
}

_QWORD *re::MeshNameMap::calculateHash(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14[3];

  v1 = (uint64_t)this;
  v14[2] = *MEMORY[0x24BDAC8D0];
  v2 = this[21];
  if (v2)
  {
    v3 = 0;
    v4 = (unint64_t *)this[22];
    v5 = 16 * v2;
    do
    {
      v6 = *v4;
      v4 += 2;
      v7 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * ((v6 >> 31) ^ (v6 >> 1))) ^ ((0xBF58476D1CE4E5B9 * ((v6 >> 31) ^ (v6 >> 1))) >> 27));
      v3 ^= (v3 << 6) - 0x61C8864680B583E9 + (v3 >> 2) + (v7 ^ (v7 >> 31));
      v5 -= 16;
    }
    while (v5);
  }
  else
  {
    v3 = 0;
  }
  v8 = this[24];
  if (v8)
  {
    v9 = (unint64_t *)this[25];
    v10 = 16 * v8;
    do
    {
      v11 = *v9;
      v9 += 2;
      v12 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((v11 >> 31) ^ (v11 >> 1))) ^ ((0xBF58476D1CE4E5B9 * ((v11 >> 31) ^ (v11 >> 1))) >> 27));
      v3 ^= (v3 << 6) - 0x61C8864680B583E9 + (v3 >> 2) + (v12 ^ (v12 >> 31));
      v10 -= 16;
    }
    while (v10);
  }
  v13 = this[36];
  if (v13)
  {
    this = (_QWORD *)MurmurHash3_x64_128(this[37], v13, 0, v14);
    v3 ^= (v3 << 6)
        - 0x61C8864680B583E9
        + (v3 >> 2)
        + ((v14[1] - 0x61C8864680B583E9 + (v14[0] << 6) + (v14[0] >> 2)) ^ v14[0]);
  }
  *(_QWORD *)(v1 + 8) = v3;
  return this;
}

void re::internal::Callable<re::MeshNameMap::meshInstancePartsForInstance(re::StringID const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

unint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForInstance(re::StringID const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::operator()(uint64_t a1, _QWORD *a2)
{
  return *(unsigned int *)(a1 + 8) | ((unint64_t)(unsigned __int16)*a2 << 32);
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForInstance(re::StringID const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED771B0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForInstance(re::StringID const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED771B0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForInstance(re::StringID const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::size()
{
  return 16;
}

void re::internal::Callable<re::MeshNameMap::meshInstancePartsForModel(re::StringID const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

unint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForModel(re::StringID const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::operator()(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t result;

  v2 = *(unsigned __int16 *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 > *a2 / v2)
    return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (*a2 / v2)) | ((unint64_t)(*a2 % v2) << 32);
  re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *a2 / v2, v3);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForModel(re::StringID const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED77218;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForModel(re::StringID const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::moveInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED77218;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForModel(re::StringID const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::size()
{
  return 32;
}

void re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::operator()(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED77270;
  a2[1] = *(_QWORD *)(a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED77270;
  a2[1] = *(_QWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_0,re::MeshInstanceAndPartIndex ()(unsigned long)>::size()
{
  return 16;
}

void re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_1,re::MeshInstanceAndPartIndex ()(unsigned long)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

unint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_1,re::MeshInstanceAndPartIndex ()(unsigned long)>::operator()(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 > *a2)
    return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * *a2) | ((unint64_t)*(unsigned __int16 *)(a1 + 24) << 32);
  re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *a2, v2);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_1,re::MeshInstanceAndPartIndex ()(unsigned long)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED772C8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_1,re::MeshInstanceAndPartIndex ()(unsigned long)>::moveInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED772C8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_1,re::MeshInstanceAndPartIndex ()(unsigned long)>::size()
{
  return 32;
}

void re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_2,re::MeshInstanceAndPartIndex ()(unsigned long)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

unint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_2,re::MeshInstanceAndPartIndex ()(unsigned long)>::operator()(_QWORD *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t result;

  v2 = *a2;
  v3 = a1[2];
  if (v3 <= *a2)
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *a2, v3);
    v5 = _os_crash();
    __break(1u);
  }
  else
  {
    v5 = *(unsigned int *)(a1[1] + 4 * v2);
    v6 = a1[4];
    if (v6 > v5)
      return v5 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)(unsigned __int16)(v2 - *(_WORD *)(a1[3] + 4 * v5)) << 32);
  }
  re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v5, v6);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_2,re::MeshInstanceAndPartIndex ()(unsigned long)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED77320;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_2,re::MeshInstanceAndPartIndex ()(unsigned long)>::moveInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED77320;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::MeshNameMap::meshInstancePartsForIdentifier(re::MeshIdentifierAsset const&)::$_2,re::MeshInstanceAndPartIndex ()(unsigned long)>::size()
{
  return 40;
}

uint64_t re::`anonymous namespace'::MeshCollectionAccessor::modelIndexForInstance(re::_anonymous_namespace_::MeshCollectionAccessor *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  if (v2 > a2)
    return *(unsigned int *)(*(_QWORD *)this + 96 * a2 + 80);
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a2, v2);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::MeshCollectionAccessor::partCount(re::_anonymous_namespace_::MeshCollectionAccessor *this, unint64_t a2)
{
  if (*((_QWORD *)this + 2) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*((_QWORD *)this + 4) + 816 * a2 + 56);
}

uint64_t re::`anonymous namespace'::MeshCollectionAccessor::skinnedPartCount(re::_anonymous_namespace_::MeshCollectionAccessor *this, unint64_t a2)
{
  uint64_t v2;

  if (*((_QWORD *)this + 2) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v2 = *(_QWORD *)(*((_QWORD *)this + 4) + 816 * a2 + 176);
  if (v2)
    return *(_QWORD *)(v2 + 8);
  else
    return 0;
}

uint64_t re::`anonymous namespace'::MeshCollectionAccessor::skeletonIndexForModelPart(re::_anonymous_namespace_::MeshCollectionAccessor *this, unint64_t a2, unint64_t a3)
{
  uint64_t v3;

  if (*((_QWORD *)this + 2) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v3 = *(_QWORD *)(*((_QWORD *)this + 4) + 816 * a2 + 176);
  if (v3 && *(_QWORD *)(v3 + 8) > a3)
    return *(unsigned int *)(*(_QWORD *)(v3 + 16) + 72 * a3 + 4);
  else
    return 0xFFFFFFFFLL;
}

uint64_t re::FixedArray<re::HashTable<re::StringID,unsigned short,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::init<>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (a3)
  {
    v4 = result;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 48 * a3, 8);
    *(_QWORD *)(v4 + 16) = result;
    if (result)
    {
      v6 = a3 - 1;
      if (a3 != 1)
      {
        do
        {
          *(_OWORD *)(result + 16) = 0uLL;
          *(_OWORD *)(result + 32) = 0uLL;
          *(_OWORD *)result = 0uLL;
          *(_DWORD *)(result + 36) = 0x7FFFFFFF;
          result += 48;
          --v6;
        }
        while (v6);
      }
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)result = 0u;
      *(_DWORD *)(result + 36) = 0x7FFFFFFF;
    }
    else
    {
      re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

unint64_t re::`anonymous namespace'::MeshCollectionAccessor::modelName(re::_anonymous_namespace_::MeshCollectionAccessor *this, unint64_t a2)
{
  if (*((_QWORD *)this + 2) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((_QWORD *)this + 4) + 816 * a2;
}

re::StringID *re::HashTable<re::StringID,unsigned short,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned short &>(uint64_t a1, StringID *a2, _WORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  re::StringID *result;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v12 == 0x7FFFFFFF)
    {
      v12 = *(unsigned int *)(a1 + 32);
      v13 = v12;
      if ((_DWORD)v12 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::StringID,unsigned short,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(v8) = v7 % *(unsigned int *)(a1 + 24);
        v13 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 32) = v13 + 1;
      v14 = *(_QWORD *)(a1 + 16);
      v15 = *(_DWORD *)(v14 + 32 * v12);
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 16);
      v15 = *(_DWORD *)(v14 + 32 * v12);
      *(_DWORD *)(a1 + 36) = v15 & 0x7FFFFFFF;
    }
    v16 = 32 * v12;
    *(_DWORD *)(v14 + v16) = v15 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 16) + v16) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v12) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v8);
    result = re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 32 * v12 + 8), a2);
    v17 = *(_QWORD *)(a1 + 8);
    *(_WORD *)(*(_QWORD *)(a1 + 16) + 32 * v12 + 24) = *a3;
    *(_DWORD *)(v17 + 4 * v8) = v12;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    return result;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    result = (re::StringID *)re::StringID::operator==((_QWORD *)(v10 + 32 * v9 + 8), a2);
    if ((result & 1) != 0)
      return result;
    v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

void re::HashTable<re::StringID,unsigned short,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  signed int v23;
  _BYTE v24[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(_QWORD *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v24, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v24;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)v24 = v5;
      *(_QWORD *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        do
        {
          if ((*(_DWORD *)v6 & 0x80000000) != 0)
          {
            v14 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(v6 + 8) >> 31) ^ (*(_QWORD *)(v6 + 8) >> 1));
            v15 = (0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) ^ ((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) >> 31);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashTable<re::StringID,unsigned short,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 32 * v18);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 32 * v18);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            v22 = 32 * v18;
            *(_DWORD *)(v20 + v22) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + v22) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v18) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 32 * v18 + 8), (const StringID *)(v6 + 8));
            *(_WORD *)(*(_QWORD *)(a1 + 16) + 32 * v18 + 24) = *(_WORD *)(v6 + 24);
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v6 += 32;
        }
        while (v11 < v10);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2)
      v23 = a2;
    else
      v23 = 3;
  }
}

uint64_t re::`anonymous namespace'::MeshAssetAccessor::modelIndexForInstance(re::_anonymous_namespace_::MeshAssetAccessor *this, unint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 > a3)
    return *((unsigned int *)this + 24 * a3 + 20);
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a3, a2);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::MeshAssetAccessor::partCount(re::_anonymous_namespace_::MeshAssetAccessor *this, unint64_t a2)
{
  if (*((_QWORD *)this + 52) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(re::DataArray<re::MeshModel>::get(*((_QWORD *)this + 55) + 8, *(_QWORD *)(*((_QWORD *)this + 54) + 8 * a2))+ 56);
}

uint64_t re::`anonymous namespace'::MeshAssetAccessor::skinnedPartCount(re::_anonymous_namespace_::MeshAssetAccessor *this, unint64_t a2)
{
  uint64_t v2;

  if (*((_QWORD *)this + 52) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v2 = *(_QWORD *)(re::DataArray<re::MeshModel>::get(*((_QWORD *)this + 55) + 8, *(_QWORD *)(*((_QWORD *)this + 54) + 8 * a2))+ 176);
  if (v2)
    return *(_QWORD *)(v2 + 8);
  else
    return 0;
}

uint64_t re::`anonymous namespace'::MeshAssetAccessor::skeletonIndexForModelPart(re::_anonymous_namespace_::MeshAssetAccessor *this, unint64_t a2, unint64_t a3)
{
  uint64_t v4;

  if (*((_QWORD *)this + 52) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = *(_QWORD *)(re::DataArray<re::MeshModel>::get(*((_QWORD *)this + 55) + 8, *(_QWORD *)(*((_QWORD *)this + 54) + 8 * a2))+ 176);
  if (v4 && *(_QWORD *)(v4 + 8) > a3)
    return *(unsigned int *)(*(_QWORD *)(v4 + 16) + 72 * a3 + 4);
  else
    return 0xFFFFFFFFLL;
}

uint64_t re::`anonymous namespace'::MeshAssetAccessor::modelName(re::_anonymous_namespace_::MeshAssetAccessor *this, unint64_t a2)
{
  if (*((_QWORD *)this + 52) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return re::DataArray<re::MeshModel>::get(*((_QWORD *)this + 55) + 8, *(_QWORD *)(*((_QWORD *)this + 54) + 8 * a2));
}

uint64_t re::`anonymous namespace'::MeshAssetDataAccessor::partCount(re::_anonymous_namespace_::MeshAssetDataAccessor *this, unint64_t a2)
{
  if (*((_QWORD *)this + 2) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*((_QWORD *)this + 4) + (a2 << 9) + 208);
}

uint64_t re::`anonymous namespace'::MeshAssetDataAccessor::skinnedPartCount(re::_anonymous_namespace_::MeshAssetDataAccessor *this, unint64_t a2)
{
  if (*((_QWORD *)this + 2) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*((_QWORD *)this + 4) + (a2 << 9) + 168);
}

uint64_t re::`anonymous namespace'::MeshAssetDataAccessor::skeletonIndexForModelPart(re::_anonymous_namespace_::MeshAssetDataAccessor *this, unint64_t a2, unint64_t a3)
{
  uint64_t v3;

  if (*((_QWORD *)this + 2) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v3 = *((_QWORD *)this + 4) + (a2 << 9);
  if (*(_QWORD *)(v3 + 168) <= a3)
    goto LABEL_5;
  return *(unsigned int *)(*(_QWORD *)(v3 + 184) + 144 * a3);
}

unint64_t re::`anonymous namespace'::MeshAssetDataAccessor::modelName(re::_anonymous_namespace_::MeshAssetDataAccessor *this, unint64_t a2)
{
  if (*((_QWORD *)this + 2) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((_QWORD *)this + 4) + (a2 << 9);
}

re::ShaderManager *re::ShaderManager::ShaderManager(re::ShaderManager *this)
{
  re *Pixel2FormatsPredictions;
  uint64_t *v3;

  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_QWORD *)((char *)this + 36) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 0;
  *(_QWORD *)((char *)this + 84) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 0;
  *(_QWORD *)((char *)this + 132) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_DWORD *)this + 44) = 0;
  *(_QWORD *)((char *)this + 180) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_DWORD *)this + 56) = 0;
  *(_QWORD *)((char *)this + 228) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_DWORD *)this + 74) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *(_QWORD *)((char *)this + 300) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_DWORD *)this + 86) = 0;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *(_OWORD *)((char *)this + 380) = 0u;
  *(_QWORD *)((char *)this + 396) = 0x7FFFFFFFLL;
  *((_WORD *)this + 204) = 0;
  *((_DWORD *)this + 103) = 0;
  *((_BYTE *)this + 416) = 0;
  re::makeDepthPixelFormatPredictions((uint64_t)this + 424);
  re::makeStencilPixelFormatPredictions((uint64_t)this + 472);
  re::makeSampleCountPredictions((uint64_t)this + 520);
  re::makePixel0FormatsPredictions((uint64_t)this + 568);
  re::makePixel1FormatsPredictions((uint64_t)this + 616);
  Pixel2FormatsPredictions = (re *)re::makePixel2FormatsPredictions((uint64_t)this + 664);
  *((_BYTE *)this + 712) = 0;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((_QWORD *)this + 94) = 850045863;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  *((_QWORD *)this + 101) = 0;
  v3 = re::globalAllocators(Pixel2FormatsPredictions);
  *((_QWORD *)this + 106) = v3[2];
  *((_QWORD *)this + 107) = 0;
  *((_QWORD *)this + 111) = re::globalAllocators((re *)v3)[2];
  *((_QWORD *)this + 112) = 0;
  return this;
}

void re::ShaderManager::~ShaderManager(re::ShaderManager *this)
{
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 864);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 824);
  std::mutex::~mutex((std::mutex *)((char *)this + 752));

  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 83);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 77);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 71);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 65);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 59);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 53);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 45);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)this + 320);
  re::HashTable<unsigned long,re::ShaderManager::LibraryEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 33);

  re::HashTable<unsigned long,re::HashSet<unsigned short,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 24);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 18);
  re::HashTable<unsigned long,re::CachedTileRenderPipelineState,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 12);
  re::HashTable<unsigned long,re::CachedTileRenderPipelineState,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 6);
  re::HashTable<unsigned long,re::CachedTileRenderPipelineState,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this);
}

BOOL re::ShaderManager::init(re::ShaderManager *this, id *a2)
{
  void **v3;
  void **v4;
  NSObject *v5;
  void *v6;
  void **v7;
  NSObject *v8;
  void *v9;
  void **v10;
  NSObject *v11;
  void *v12;
  unsigned __int8 v13;
  NSObject *v14;
  void *v15;
  re::Bundle *v16;
  NSObject *v17;
  NSObject *v18;
  re::ns *v19;
  void **v20;
  NSObject *v21;
  void *v22;
  const char *v23;
  const char *v24;
  char v25;
  const char *v26;
  char v27;
  const char *v28;
  char v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  unint64_t LibraryHash;
  const char *v36;
  uint64_t v37;
  NSObject *v38;
  const char *v40;
  int v41;
  id v42;
  uint64_t v43;
  char v44;
  _BYTE v45[7];
  re::ns *v46;
  NSObject *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  id *v53;
  id v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[3];
  NSObject *v60;
  uint64_t v61;
  char v62;
  _BYTE v63[23];

  v3 = (void **)((char *)this + 240);
  re::ObjCObject::operator=((id *)this + 30, a2 + 23);
  v55 = 0x100000001;
  v56 = 0;
  v57 = 0;
  re::dispatch::Queue::make("com.apple.re.specializedPSOCompiler", (int *)&v55, &v60);
  v4 = (void **)((char *)this + 720);
  if ((NSObject **)((char *)this + 720) != &v60)
  {
    v5 = v60;
    v60 = 0;
    v6 = *v4;
    *v4 = v5;

  }
  re::dispatch::Queue::global((re::dispatch::Queue *)0x21, 0, &v54);
  v51 = 0x100000000;
  v52 = 1;
  v53 = &v54;
  re::dispatch::Queue::make("com.apple.re.fallbackPSOCompiler", (int *)&v51, &v60);
  v7 = (void **)((char *)this + 736);
  if ((NSObject **)((char *)this + 736) != &v60)
  {
    v8 = v60;
    v60 = 0;
    v9 = *v7;
    *v7 = v8;

  }
  v48 = 0x100000000;
  v49 = 0;
  v50 = 0;
  re::dispatch::Queue::make("com.apple.re.fallbackPSOProducer", (int *)&v48, &v60);
  v10 = (void **)((char *)this + 744);
  if ((NSObject **)((char *)this + 744) != &v60)
  {
    v11 = v60;
    v60 = 0;
    v12 = *v10;
    *v10 = v11;

  }
  v13 = atomic_load((unsigned __int8 *)&qword_25411A080);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_25411A080))
  {
    re::Defaults::intValue((re::Defaults *)"compilationQueueWidth", v40, (uint64_t)&v60);
    if ((_BYTE)v60)
      v41 = HIDWORD(v60);
    else
      v41 = 2;
    _MergedGlobals_388 = v41;
    __cxa_guard_release(&qword_25411A080);
  }
  v14 = dispatch_semaphore_create(_MergedGlobals_388);

  v15 = (void *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = v14;

  re::Bundle::testData(v16, &v47);
  if (!v47)
  {
    re::Bundle::application(&v60);
    v17 = v60;
    v60 = 0;
    v18 = v47;
    v47 = v17;

  }
  re::Bundle::findFile((re::Bundle *)&v47, "default.metallib", (re::DynamicString *)&v43);
  if ((v44 & 1) != 0)
    v19 = v46;
  else
    v19 = (re::ns *)v45;
  re::mtl::Device::makeLibraryWithFile(v3, v19, (re **)&v60);
  v20 = (void **)((char *)this + 248);
  if ((NSObject **)((char *)this + 248) != &v60)
  {
    v21 = v60;
    v60 = 0;
    v22 = *v20;
    *v20 = v21;

  }
  re::Defaults::BOOLValue((re::Defaults *)"generateBinaryArchiveOnDevice", v23, (char *)&v60);
  if ((_BYTE)v60)
    v25 = BYTE1(v60);
  else
    v25 = 0;
  *((_BYTE *)this + 408) = v25;
  re::Defaults::BOOLValue((re::Defaults *)"disableBinaryArchives", v24, (char *)&v60);
  if ((_BYTE)v60)
    v27 = BYTE1(v60);
  else
    v27 = 0;
  *((_BYTE *)this + 409) = v27;
  re::Defaults::BOOLValue((re::Defaults *)"harvestAllPipelines", v26, (char *)&v60);
  if ((_BYTE)v60)
    v29 = BYTE1(v60);
  else
    v29 = 0;
  *((_BYTE *)this + 416) = v29;
  if (*((_BYTE *)this + 408))
    re::ShaderManager::makeAndAddBinaryArchive(this, 0, "testOnDeviceArchive");
  re::Defaults::stringValue((re::Defaults *)"binaryArchiveInputPath", v28, (uint64_t)&v60);
  if ((_BYTE)v60)
  {
    if ((v62 & 1) != 0)
      v30 = *(const char **)&v63[7];
    else
      v30 = v63;
    re::ShaderManager::makeAndAddBinaryArchive(this, v30, "testInputArchive");
  }
  re::Bundle::findFile((re::Bundle *)&v47, "default-binaryarchive.metallib", (re::DynamicString *)&v58);
  v31 = v59[0] >> 1;
  if ((v59[0] & 1) == 0)
    v31 = LOBYTE(v59[0]) >> 1;
  if (v31)
  {
    if ((v59[0] & 1) != 0)
      v32 = (const char *)v59[1];
    else
      v32 = (char *)v59 + 1;
    re::ShaderManager::makeAndAddBinaryArchive(this, v32, "default-binaryarchive.metallib");
  }
  if (v58 && (v59[0] & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v58 + 40))();
  if ((_BYTE)v60 && v61 && (v62 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v61 + 40))();
  atomic_store(0, (unsigned int *)this + 204);
  v33 = *((_QWORD *)this + 31);
  if (v33)
  {
    if ((v44 & 1) != 0)
      v34 = (const char *)v46;
    else
      v34 = v45;
    LibraryHash = re::ShaderManager::getLibraryHash(this, v34);
    re::ShaderManager::installLibrary(this, LibraryHash, (id *)this + 31);
    if ((v44 & 1) != 0)
      v36 = (const char *)v46;
    else
      v36 = v45;
    v60 = re::ShaderManager::getLibraryHash(this, v36);
    v37 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 264, (uint64_t *)&v60);
    v38 = v60;
    if (!v37)
      v38 = 0;
    *((_QWORD *)this + 32) = v38;
    v42 = *((id *)this + 31);
    re::APIFunctionCache::init((uint64_t)this + 144, &v42);

  }
  if (v43 && (v44 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v43 + 40))();

  return v33 != 0;
}

void re::ShaderManager::prepareForDeinit(re::ShaderManager *this)
{
  std::mutex *v2;
  unsigned int *v3;
  int v4;
  __int128 v5;
  unsigned int *v6;
  __int128 v7;

  v2 = (std::mutex *)((char *)this + 752);
  std::mutex::lock((std::mutex *)((char *)this + 752));
  atomic_store(1u, (unsigned __int8 *)this + 712);
  std::mutex::unlock(v2);
  v3 = (unsigned int *)((char *)this + 816);
  v4 = atomic_load(v3);
  if (v4 >= 1)
  {
    do
    {
      *(_QWORD *)&v5 = v3;
      *((_QWORD *)&v5 + 1) = v4 | 0x500000000;
      v6 = v3;
      v7 = v5;
      std::__libcpp_thread_poll_with_backoff[abi:nn180100]<std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<int,std::__cxx_atomic_base_impl<int>>,int> &,std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<int,std::__cxx_atomic_base_impl<int>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<int,std::__cxx_atomic_base_impl<int>>,int>> &>((uint64_t)&v5, (uint64_t)&v6, 0);
      v4 = atomic_load(v3);
    }
    while (v4 > 0);
  }
}

re *re::ShaderManager::deinit(re::ShaderManager *this, const char *a2)
{
  void *v3;

  re::ShaderManager::serializeBinaryArchive(this, a2);
  v3 = (void *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;

  re::HashTable<unsigned long,re::ShaderManager::LibraryEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear((uint64_t)this + 264);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 71);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 77);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 53);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 59);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 65);
  return re::APIFunctionCache::deinit((re::ShaderManager *)((char *)this + 144));
}

void re::ShaderManager::serializeBinaryArchive(re::ShaderManager *this, const char *a2)
{
  re *v3;
  _BYTE *v4;
  id v5;
  id v6;
  re *v7;
  NSObject *v8;
  const char *v9;
  _BYTE v10[8];
  uint64_t v11;
  char v12;
  _BYTE v13[23];
  uint64_t v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint8_t buf[16];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 408))
    return;
  re::Defaults::stringValue((re::Defaults *)"binaryArchiveOutputPath", a2, (uint64_t)v10);
  if (v10[0])
  {
    if ((v12 & 1) != 0)
      v4 = *(_BYTE **)&v13[7];
    else
      v4 = v13;
    v5 = objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, v4, 4);
    v6 = objc_msgSend(MEMORY[0x24BDBCF48], sel_fileURLWithPath_, v5);
    if (!*((_QWORD *)this + 42))
    {
      v14 = 0;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v15 = 136315906;
      v16 = "operator[]";
      v17 = 1024;
      v18 = 789;
      v19 = 2048;
      v20 = 0;
      v21 = 2048;
      v22 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v7 = (re *)objc_msgSend(**((id **)this + 44), sel_serializeToURL_error_, v6, 0);
    if (!(_DWORD)v7)
      goto LABEL_13;
    v8 = *re::graphicsLogObjects(v7);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_13;
    *(_WORD *)buf = 0;
    v9 = "Binary archive serialization successful!";
    goto LABEL_12;
  }
  v8 = *re::graphicsLogObjects(v3);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    v9 = "Generated binary archive on device, but no output URL was provided.";
LABEL_12:
    _os_log_impl(&dword_224FE9000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, 2u);
  }
LABEL_13:
  if (v10[0] && v11 && (v12 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v11 + 40))();
}

void re::HashTable<unsigned long,re::ShaderManager::LibraryEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_42, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = *(_QWORD *)(a1 + 16) + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;

          v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 40;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

BOOL re::ShaderManager::makeAndAddBinaryArchive(re::ShaderManager *this, const char *a2, const char *a3)
{
  os_unfair_lock_s *v6;
  size_t v7;
  unint64_t v8;
  _BOOL8 v9;
  id v10;
  id v11;
  _anonymous_namespace_ *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  re *v21;
  NSObject *v22;
  id v24;
  id v25;
  unint64_t v26;
  __int128 buf;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = (os_unfair_lock_s *)((char *)this + 412);
  os_unfair_lock_lock((os_unfair_lock_t)this + 103);
  if (a2 && (v7 = strlen(a2)) != 0)
  {
    MurmurHash3_x64_128((uint64_t)a2, v7, 0, (unint64_t *)&buf);
    v8 = (*((_QWORD *)&buf + 1) + ((_QWORD)buf << 6) + ((unint64_t)buf >> 2) - 0x61C8864680B583E9) ^ buf;
  }
  else
  {
    v8 = 0;
  }
  v26 = v8;
  if (re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)this + 360, (uint64_t *)&v26))
  {
    v9 = 1;
  }
  else
  {
    v10 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD4D8], sel_alloc), sel_init);
    v25 = v10;
    objc_msgSend(v10, sel_setOptions_, 6);
    if (a2)
    {
      v11 = objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, a2, 4);
      objc_msgSend(v10, sel_setUrl_, objc_msgSend(MEMORY[0x24BDBCF48], sel_fileURLWithPath_, v11));
    }
    re::mtl::Device::makeBinaryArchive((id *)this + 30, &v25, &v24);
    v9 = v24 != 0;
    if (v24)
    {
      if (a3)
        v12 = (_anonymous_namespace_ *)objc_msgSend(v24, sel_setLabel_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, a3, 4));
      v13 = *((_QWORD *)this + 41);
      v14 = *((_QWORD *)this + 42);
      if (v14 >= v13)
      {
        v15 = v14 + 1;
        if (v13 < v15)
        {
          if (*((_QWORD *)this + 40))
          {
            v16 = 2 * v13;
            v17 = v13 == 0;
            v18 = 8;
            if (!v17)
              v18 = v16;
            if (v18 <= v15)
              v19 = v15;
            else
              v19 = v18;
            re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((_QWORD *)this + 40, v19);
          }
          else
          {
            re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((_QWORD *)this + 40, v15);
            ++*((_DWORD *)this + 86);
          }
        }
        v14 = *((_QWORD *)this + 42);
      }
      v20 = *((_QWORD *)this + 44);
      *(_QWORD *)(v20 + 8 * v14) = v24;
      ++*((_QWORD *)this + 42);
      ++*((_DWORD *)this + 86);
      v21 = (re *)re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add((uint64_t)this + 360, (uint64_t *)&v26);
      v22 = *re::graphicsLogObjects(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = a2;
        _os_log_impl(&dword_224FE9000, v22, OS_LOG_TYPE_DEFAULT, "MTLBinaryArchive loaded from %s", (uint8_t *)&buf, 0xCu);
      }
      if (v24)

    }
    if (v25)

  }
  os_unfair_lock_unlock(v6);
  return v9;
}

void re::ShaderManager::makeLibraryWithFile(void **this, const char *a2, re::ns *a3, const char *a4)
{
  unint64_t LibraryHash;
  re *v7;

  re::mtl::Device::makeLibraryWithFile(this + 30, a3, &v7);
  LibraryHash = re::ShaderManager::getLibraryHash((re::ShaderManager *)this, a2);
  re::ShaderManager::installLibrary((re::ShaderManager *)this, LibraryHash, (id *)&v7);

}

unint64_t re::ShaderManager::getLibraryHash(re::ShaderManager *this, const char *__s)
{
  void (***v3)(unint64_t *__return_ptr, _QWORD, const char *);
  const char *v4;
  size_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE v12[23];
  unint64_t v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  if (!__s)
    return *((_QWORD *)this + 32);
  v3 = (void (***)(unint64_t *__return_ptr, _QWORD, const char *))*((_QWORD *)this + 39);
  if (v3 && ((**v3)(&v9, v3, __s), (_BYTE)v9))
  {
    if ((v11 & 1) != 0)
      v4 = *(const char **)&v12[7];
    else
      v4 = v12;
    v5 = strlen(v4);
    if (v5)
    {
      MurmurHash3_x64_128((uint64_t)v4, v5, 0, v13);
      v6 = (v13[1] + (v13[0] << 6) + (v13[0] >> 2) - 0x61C8864680B583E9) ^ v13[0];
      if (!(_BYTE)v9)
        return v6;
    }
    else
    {
      v6 = 0;
    }
    if (v10 && (v11 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v10 + 40))();
  }
  else
  {
    v7 = strlen(__s);
    if (v7)
    {
      MurmurHash3_x64_128((uint64_t)__s, v7, 0, &v9);
      return (v10 + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583E9) ^ v9;
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

uint64_t re::ShaderManager::releaseLibrary(uint64_t this, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  if (*(_QWORD *)(this + 256) != a2)
  {
    v3 = this + 264;
    v5 = a2;
    this = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(this + 264, &v5);
    if (this)
    {
      if (!*(_DWORD *)this || (v4 = *(_DWORD *)this - 1, (*(_DWORD *)this = v4) == 0))
      {
        v5 = a2;
        return re::HashTable<unsigned long,re::ShaderManager::LibraryEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::remove(v3, &v5);
      }
    }
  }
  return this;
}

uint64_t re::HashTable<unsigned long,re::ShaderManager::LibraryEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::remove(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  int v17;

  if (!*(_QWORD *)a1)
    return 0;
  v3 = *a2;
  v4 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(v6 + 4 * v5);
  if ((_DWORD)v7 == 0x7FFFFFFF)
    return 0;
  v9 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v9 + 40 * v7 + 16) != v3)
  {
    while (1)
    {
      v10 = v7;
      v11 = *(_DWORD *)(v9 + 40 * v7 + 8);
      v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF)
        return 0;
      if (*(_QWORD *)(v9 + 40 * v7 + 16) == v3)
      {
        *(_DWORD *)(v9 + 40 * v10 + 8) = *(_DWORD *)(v9 + 40 * v10 + 8) & 0x80000000 | *(_DWORD *)(v9 + 40 * v7 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 40 * v7 + 8) & 0x7FFFFFFF;
LABEL_9:
  v12 = *(_QWORD *)(a1 + 16);
  v13 = v12 + 40 * v7;
  v16 = *(_DWORD *)(v13 + 8);
  v15 = (int *)(v13 + 8);
  v14 = v16;
  if (v16 < 0)
  {
    *v15 = v14 & 0x7FFFFFFF;

    v12 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v12 + 40 * v7 + 8);
  }
  v17 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v12 + 40 * v7 + 8) = *(_DWORD *)(a1 + 36) | v14 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v17 + 1;
  return 1;
}

void re::ShaderManager::makeFunction(uint64_t *a1@<X0>, uint64_t a2@<X1>, re::ns *a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v12 = a2;
  v9 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)(a1 + 33), &v12);
  if (v9)
  {
    if (a4)
    {
      re::ShaderManager::makeFunctionDescriptor((re::ShaderManager *)a1, &v11);
      v10 = v11;
      objc_msgSend(v11, sel_setName_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, a3, 4));
      objc_msgSend(v10, sel_setConstantValues_, *a4);
      re::ShaderManager::makeFunctionWithDescriptor((uint64_t)a1, a1[32], &v11, a5);
      if (v10)

    }
    else
    {
      re::mtl::Library::makeFunction((void **)(v9 + 8), a3, a5);
    }
  }
  else
  {
    *a5 = 0;
  }
}

void re::ShaderManager::makeFunctionDescriptor(re::ShaderManager *this@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  id v5;
  id v6;

  v4 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD5B0], sel_alloc), sel_init);
  *a2 = v4;
  v5 = v4;
  v6 = v5;
  re::ShaderManager::addBinaryArchivesToFunction((uint64_t)this, &v6, 0);
  if (v5)

}

void re::ShaderManager::makeFunctionWithDescriptor(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v7 = a2;
    v6 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a1 + 264, &v7);
    if (v6)
      re::mtl::Library::makeFunctionWithDescriptor((id *)(v6 + 8), *a3, a4);
    else
      *a4 = 0;
  }
  else
  {
    re::mtl::Library::makeFunctionWithDescriptor((id *)(a1 + 248), *a3, a4);
  }
}

uint64_t re::ShaderManager::scheduleAsyncFuncOnCompilationQueue(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v7;
  unsigned int *v8;
  unsigned int v9;
  NSObject *v10;
  uint64_t result;
  _BYTE v12[24];
  uint64_t v13;
  _BYTE *v14;
  _QWORD block[2];
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)(a4 + 24);
  v14 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v12, a4);
  std::mutex::lock((std::mutex *)(a1 + 752));
  v7 = atomic_load((unsigned __int8 *)(a1 + 712));
  if ((v7 & 1) == 0)
  {
    v8 = (unsigned int *)(a1 + 816);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    if (a2)
    {
      v16 = ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_35scheduleAsyncFuncOnCompilationQueueEbyNS_8FunctionIFvvEEEE3__0EEvbyS4_T__block_invoke;
      v17 = &__block_descriptor_tmp_26;
      v18 = a1;
      v19 = a3;
      v21 = v13;
      v22 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v20, (uint64_t)v12);
      v10 = *(NSObject **)(a1 + 744);
    }
    else
    {
      v16 = ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_35scheduleAsyncFuncOnCompilationQueueEbyNS_8FunctionIFvvEEEE3__0EEvbyS4_T__block_invoke_27;
      v17 = &__block_descriptor_tmp_28;
      v18 = a1;
      v19 = a3;
      v21 = v13;
      v22 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v20, (uint64_t)v12);
      v10 = *(NSObject **)(a1 + 720);
    }
    dispatch_async(v10, block);
    if (v22)
    {
      (**(void (***)(_BYTE *))v22)(v22);
      if (v22 != v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
      v22 = 0;
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 752));
  result = (uint64_t)v14;
  if (v14)
  {
    result = (**(uint64_t (***)(_BYTE *))v14)(v14);
    if (v14 != v12)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
  }
  return result;
}

uint64_t re::ShaderManager::scheduleGroupNotifyOnCompilationQueue(uint64_t a1, int a2, void *a3, id *a4, uint64_t a5)
{
  std::mutex *v9;
  unsigned __int8 v10;
  unsigned int *v11;
  unsigned int v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t result;
  id v16;
  NSObject *v17;
  _BYTE v18[24];
  void **v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  void *v27;
  _BYTE v28[16];
  void **v29;
  void **v30;
  _BYTE *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v19 = *(void ***)(a5 + 24);
  v20 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v18, a5);
  v16 = *a4;
  v9 = (std::mutex *)(a1 + 752);
  std::mutex::lock((std::mutex *)(a1 + 752));
  v10 = atomic_load((unsigned __int8 *)(a1 + 712));
  if ((v10 & 1) == 0)
  {
    v11 = (unsigned int *)(a1 + 816);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    if (a2)
    {
      v21 = MEMORY[0x24BDAC760];
      v22 = 1174405120;
      v23 = ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_37scheduleGroupNotifyOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__0EEvbyS6_T__block_invoke;
      v24 = &__block_descriptor_tmp_30;
      v25 = a1;
      v26 = v16;
      v27 = a3;
      v30 = v19;
      v31 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v28, (uint64_t)v18);
      v13 = *(id *)(a1 + 744);
      v17 = v13;
      re::dispatch::Group::notify(&v16, &v17, &v21);

      if (v31)
      {
        (**(void (***)(_BYTE *))v31)(v31);
        if (v31 != v28)
          (*((void (**)(void **))*v30 + 5))(v30);
        v31 = 0;
      }

    }
    else
    {
      v21 = MEMORY[0x24BDAC760];
      v22 = 1174405120;
      v23 = ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_37scheduleGroupNotifyOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__0EEvbyS6_T__block_invoke_31;
      v24 = &__block_descriptor_tmp_32_0;
      v25 = a1;
      v26 = a3;
      v29 = v19;
      v30 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v27, (uint64_t)v18);
      v14 = *(id *)(a1 + 720);
      v17 = v14;
      re::dispatch::Group::notify(&v16, &v17, &v21);

      if (v30)
      {
        (*(void (**)(void **))*v30)(v30);
        if (v30 != &v27)
          (*((void (**)(void **))*v29 + 5))(v29);
        v30 = 0;
      }
    }
  }
  std::mutex::unlock(v9);

  result = (uint64_t)v20;
  if (v20)
  {
    result = (**(uint64_t (***)(_BYTE *))v20)(v20);
    if (v20 != v18)
      return (*((uint64_t (**)(void **))*v19 + 5))(v19);
  }
  return result;
}

uint64_t re::ShaderManager::scheduleAsyncGroupFuncOnCompilationQueue(uint64_t a1, int a2, void *a3, id *a4, uint64_t a5)
{
  std::mutex *v9;
  unsigned __int8 v10;
  unsigned int *v11;
  unsigned int v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t result;
  id v16;
  NSObject *v17;
  _BYTE v18[24];
  void **v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  void *v27;
  _BYTE v28[16];
  void **v29;
  void **v30;
  _BYTE *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v19 = *(void ***)(a5 + 24);
  v20 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v18, a5);
  v16 = *a4;
  v9 = (std::mutex *)(a1 + 752);
  std::mutex::lock((std::mutex *)(a1 + 752));
  v10 = atomic_load((unsigned __int8 *)(a1 + 712));
  if ((v10 & 1) == 0)
  {
    v11 = (unsigned int *)(a1 + 816);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    if (a2)
    {
      v21 = MEMORY[0x24BDAC760];
      v22 = 1174405120;
      v23 = ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_40scheduleAsyncGroupFuncOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__0EEvbyS6_T__block_invoke;
      v24 = &__block_descriptor_tmp_34_0;
      v25 = a1;
      v26 = v16;
      v27 = a3;
      v30 = v19;
      v31 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v28, (uint64_t)v18);
      v13 = *(id *)(a1 + 744);
      v17 = v13;
      re::dispatch::Group::async(&v16, &v17, &v21);

      if (v31)
      {
        (**(void (***)(_BYTE *))v31)(v31);
        if (v31 != v28)
          (*((void (**)(void **))*v30 + 5))(v30);
        v31 = 0;
      }

    }
    else
    {
      v21 = MEMORY[0x24BDAC760];
      v22 = 1174405120;
      v23 = ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_40scheduleAsyncGroupFuncOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__0EEvbyS6_T__block_invoke_35;
      v24 = &__block_descriptor_tmp_36;
      v25 = a1;
      v26 = a3;
      v29 = v19;
      v30 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v27, (uint64_t)v18);
      v14 = *(id *)(a1 + 720);
      v17 = v14;
      re::dispatch::Group::async(&v16, &v17, &v21);

      if (v30)
      {
        (*(void (**)(void **))*v30)(v30);
        if (v30 != &v27)
          (*((void (**)(void **))*v29 + 5))(v29);
        v30 = 0;
      }
    }
  }
  std::mutex::unlock(v9);

  result = (uint64_t)v20;
  if (v20)
  {
    result = (**(uint64_t (***)(_BYTE *))v20)(v20);
    if (v20 != v18)
      return (*((uint64_t (**)(void **))*v19 + 5))(v19);
  }
  return result;
}

uint64_t re::ShaderManager::executeWithShaderCompilationBlamedToPeer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (!a1 || !a2)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 32) + 16))(*(_QWORD *)(a3 + 32));
  v4 = a2;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 16))(a1, &v4);
}

uint64_t re::ShaderManager::tryRequestFunctionReflection(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  id *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  re *v19;
  id v21;
  uint64_t v22[3];
  uint64_t v23;
  uint64_t *v24;
  id v25[2];
  __int128 v26;
  uint64_t v27;
  re *v28;
  _BYTE v29[24];
  uint64_t v30;
  _BYTE *v31;
  _BYTE v32[24];
  uint64_t v33;
  _BYTE *v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v22[0] = a2;
  v14 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a1 + 264, v22);
  if (v14)
    v15 = (id *)(v14 + 8);
  else
    v15 = (id *)(a1 + 248);
  v33 = *(_QWORD *)(a7 + 24);
  v34 = 0;
  re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)v32, a7);
  v35 = (void *)a1;
  re::ShaderManager::makeFunctionDescriptor(a1, a3, a4, v15, a2, &v21);
  v23 = v33;
  v24 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v22, (uint64_t)v32);
  v25[0] = v35;
  v25[1] = v21;
  *(_QWORD *)&v26 = a3;
  BYTE8(v26) = a5;
  v27 = a6;
  v28 = (re *)*v15;
  v16 = re::globalAllocators(v28)[2];
  v30 = v16;
  if (v16)
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, 96, 0);
  else
    v17 = 0;
  *(_QWORD *)v17 = &off_24ED77378;
  *(_QWORD *)(v17 + 32) = v23;
  *(_QWORD *)(v17 + 40) = 0;
  re::FunctionBase<24ul,void ()(void)>::operator=<24ul>(v17 + 8, (uint64_t)v22);
  *(_OWORD *)(v17 + 48) = *(_OWORD *)v25;
  v18 = v26;
  *(_QWORD *)(v17 + 80) = v27;
  *(_OWORD *)(v17 + 64) = v18;
  v19 = v28;
  v25[1] = 0;
  v28 = 0;
  *(_QWORD *)(v17 + 88) = v19;
  v31 = (_BYTE *)v17;
  re::ShaderManager::scheduleAsyncFuncOnCompilationQueue(a1, a5, a6, (uint64_t)v29);
  if (v31)
  {
    (**(void (***)(_BYTE *))v31)(v31);
    if (v31 != v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
    v31 = 0;
  }

  if (v25[1])
  {

    v25[1] = 0;
  }
  if (v24)
  {
    (*(void (**)(uint64_t *))*v24)(v24);
    if (v24 != v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
  }
  if (v21)

  if (v34)
  {
    (**(void (***)(_BYTE *))v34)(v34);
    if (v34 != v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 40))(v33);
  }
  return 1;
}

void re::ShaderManager::makeFunctionDescriptor(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  id v12;
  id v13;

  v12 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD5B0], sel_alloc), sel_init);
  *a6 = v12;
  objc_msgSend(v12, sel_setName_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, a2, 4));
  if (*a3)
    objc_msgSend(v12, sel_setConstantValues_);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 412));
  if (*(_QWORD *)(a1 + 336) && !*(_BYTE *)(a1 + 409))
  {
    v13 = objc_msgSend(objc_msgSend(MEMORY[0x24BDBCE30], sel_alloc), sel_initWithObjects_count_, *(_QWORD *)(a1 + 352), *(_QWORD *)(a1 + 336));
    objc_msgSend(v12, sel_setBinaryArchives_, v13);
    if (*(_BYTE *)(a1 + 408) && (*(_QWORD *)(a1 + 256) == a5 || *(_BYTE *)(a1 + 416)))
    {
      if (!*(_QWORD *)(a1 + 336))
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      objc_msgSend(**(id **)(a1 + 352), sel_addFunctionWithDescriptor_library_error_, v12, *a4, 0);
    }
    if (v13)

  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 412));
}

void re::ShaderManager::makeFunctionDescriptor(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  re::ShaderManager::makeFunctionDescriptor(a1, a2, a3, (_QWORD *)(a1 + 248), *(_QWORD *)(a1 + 256), a4);
}

void re::ShaderManager::addBinaryArchivesToRenderPipeline(uint64_t a1, id *a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  id v7;

  v6 = (os_unfair_lock_s *)(a1 + 412);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 412));
  if (*(_QWORD *)(a1 + 336) && !*(_BYTE *)(a1 + 409))
  {
    v7 = objc_msgSend(objc_msgSend(MEMORY[0x24BDBCE30], sel_alloc), sel_initWithObjects_count_, *(_QWORD *)(a1 + 352), *(_QWORD *)(a1 + 336));
    objc_msgSend(*a2, sel_setBinaryArchives_, v7);
    if (*(_BYTE *)(a1 + 408) && (*(_QWORD *)(a1 + 256) == a3 || *(_BYTE *)(a1 + 416)))
    {
      if (!*(_QWORD *)(a1 + 336))
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      objc_msgSend(**(id **)(a1 + 352), sel_addRenderPipelineFunctionsWithDescriptor_error_, *a2, 0);
    }
    if (v7)

  }
  os_unfair_lock_unlock(v6);
}

void re::ShaderManager::addBinaryArchivesToTilePipeline(uint64_t a1, id *a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  id v7;

  v6 = (os_unfair_lock_s *)(a1 + 412);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 412));
  if (*(_QWORD *)(a1 + 336) && !*(_BYTE *)(a1 + 409))
  {
    v7 = objc_msgSend(objc_msgSend(MEMORY[0x24BDBCE30], sel_alloc), sel_initWithObjects_count_, *(_QWORD *)(a1 + 352), *(_QWORD *)(a1 + 336));
    objc_msgSend(*a2, sel_setBinaryArchives_, v7);
    if (*(_BYTE *)(a1 + 408) && (*(_QWORD *)(a1 + 256) == a3 || *(_BYTE *)(a1 + 416)))
    {
      if (!*(_QWORD *)(a1 + 336))
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      objc_msgSend(**(id **)(a1 + 352), sel_addTileRenderPipelineFunctionsWithDescriptor_error_, *a2, 0);
    }
    if (v7)

  }
  os_unfair_lock_unlock(v6);
}

void re::ShaderManager::addBinaryArchivesToComputePipeline(uint64_t a1, id *a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  id v7;

  v6 = (os_unfair_lock_s *)(a1 + 412);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 412));
  if (*(_QWORD *)(a1 + 336) && !*(_BYTE *)(a1 + 409))
  {
    v7 = objc_msgSend(objc_msgSend(MEMORY[0x24BDBCE30], sel_alloc), sel_initWithObjects_count_, *(_QWORD *)(a1 + 352), *(_QWORD *)(a1 + 336));
    objc_msgSend(*a2, sel_setBinaryArchives_, v7);
    if (*(_BYTE *)(a1 + 408) && (*(_QWORD *)(a1 + 256) == a3 || *(_BYTE *)(a1 + 416)))
    {
      if (!*(_QWORD *)(a1 + 336))
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      objc_msgSend(**(id **)(a1 + 352), sel_addComputePipelineFunctionsWithDescriptor_error_, *a2, 0);
    }
    if (v7)

  }
  os_unfair_lock_unlock(v6);
}

void re::ShaderManager::addBinaryArchivesToFunction(uint64_t a1, id *a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  id v7;
  uint64_t v8;
  _OWORD v9[5];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v6 = (os_unfair_lock_s *)(a1 + 412);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 412));
  if (*(_QWORD *)(a1 + 336) && !*(_BYTE *)(a1 + 409))
  {
    v7 = objc_msgSend(objc_msgSend(MEMORY[0x24BDBCE30], sel_alloc), sel_initWithObjects_count_, *(_QWORD *)(a1 + 352), *(_QWORD *)(a1 + 336));
    objc_msgSend(*a2, sel_setBinaryArchives_, v7);
    if (*(_BYTE *)(a1 + 408) && (*(_QWORD *)(a1 + 256) == a3 || *(_BYTE *)(a1 + 416)))
    {
      *(_QWORD *)&v9[0] = a3;
      v8 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a1 + 264, (uint64_t *)v9);
      if (v8)
      {
        if (!*(_QWORD *)(a1 + 336))
        {
          memset(v9, 0, sizeof(v9));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        objc_msgSend(**(id **)(a1 + 352), sel_addFunctionWithDescriptor_library_error_, *a2, *(_QWORD *)(v8 + 8), 0);
      }
    }
    if (v7)

  }
  os_unfair_lock_unlock(v6);
}

void re::ShaderManager::installLibrary(re::ShaderManager *this, unint64_t a2, id *a3)
{
  _QWORD *v6;
  re *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  id v20;

  v6 = (_QWORD *)((char *)this + 264);
  v19 = a2;
  v7 = (re *)re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 264, (uint64_t *)&v19);
  if (v7)
  {
    v19 = a2;
    v7 = (re *)re::HashTable<unsigned long,re::ShaderManager::LibraryEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::remove((uint64_t)v6, (uint64_t *)&v19);
  }
  if (*a3)
  {
    LODWORD(v19) = 0;
    v20 = 0;
    re::ObjCObject::operator=(&v20, a3);
    LODWORD(v19) = v19 + 1;
    v8 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    v9 = v8 ^ (v8 >> 31);
    if (*v6)
    {
      v10 = v9 % *((unsigned int *)this + 72);
      v11 = *(unsigned int *)(*((_QWORD *)this + 34) + 4 * v10);
      if ((_DWORD)v11 != 0x7FFFFFFF)
      {
        v12 = *((_QWORD *)this + 35);
        if (*(_QWORD *)(v12 + 40 * v11 + 16) == a2)
        {
LABEL_19:

          return;
        }
        while (1)
        {
          LODWORD(v11) = *(_DWORD *)(v12 + 40 * v11 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v11 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v12 + 40 * v11 + 16) == a2)
            goto LABEL_19;
        }
      }
    }
    else
    {
      LODWORD(v10) = 0;
    }
    v14 = *((unsigned int *)this + 75);
    if ((_DWORD)v14 == 0x7FFFFFFF)
    {
      v14 = *((unsigned int *)this + 74);
      v15 = v14;
      if ((_DWORD)v14 == *((_DWORD *)this + 72))
      {
        re::HashTable<unsigned long,re::ShaderManager::LibraryEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity((uint64_t)v6, 2 * *((_DWORD *)this + 73));
        LODWORD(v10) = v9 % *((unsigned int *)this + 72);
        v15 = *((_DWORD *)this + 74);
      }
      *((_DWORD *)this + 74) = v15 + 1;
      v16 = *((_QWORD *)this + 35);
      v17 = *(_DWORD *)(v16 + 40 * v14 + 8);
    }
    else
    {
      v16 = *((_QWORD *)this + 35);
      v17 = *(_DWORD *)(v16 + 40 * v14 + 8);
      *((_DWORD *)this + 75) = v17 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v16 + 40 * v14 + 8) = v17 | 0x80000000;
    *(_DWORD *)(*((_QWORD *)this + 35) + 40 * v14 + 8) = *(_DWORD *)(*((_QWORD *)this + 35) + 40 * v14 + 8) & 0x80000000 | *(_DWORD *)(*((_QWORD *)this + 34) + 4 * v10);
    *(_QWORD *)(*((_QWORD *)this + 35) + 40 * v14) = v9;
    *(_QWORD *)(*((_QWORD *)this + 35) + 40 * v14 + 16) = a2;
    v18 = *((_QWORD *)this + 35) + 40 * v14;
    *(_DWORD *)(v18 + 24) = v19;
    *(_QWORD *)(v18 + 32) = v20;
    *(_DWORD *)(*((_QWORD *)this + 34) + 4 * v10) = v14;
    ++*((_DWORD *)this + 73);
    ++*((_DWORD *)this + 76);
    goto LABEL_19;
  }
  v13 = *re::graphicsLogObjects(v7);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v19) = 0;
    _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "Cannot install a NULL library.", (uint8_t *)&v19, 2u);
  }
}

void re::ShaderManager::makeRenderPipelineDescriptor(re::ShaderManager *this@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  id v5;
  id v6;

  v4 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD6B8], sel_alloc), sel_init);
  *a2 = v4;
  v5 = v4;
  v6 = v5;
  re::ShaderManager::addBinaryArchivesToRenderPipeline((uint64_t)this, &v6, 0);
  if (v5)

}

void re::ShaderManager::makeComputePipelineDescriptor(re::ShaderManager *this@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  id v5;
  id v6;

  v4 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD550], sel_alloc), sel_init);
  *a2 = v4;
  v5 = v4;
  v6 = v5;
  re::ShaderManager::addBinaryArchivesToComputePipeline((uint64_t)this, &v6, 0);
  if (v5)

}

void re::ShaderManager::makeTileRenderPipelineDescriptor(re::ShaderManager *this@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  id v5;
  id v6;

  v4 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD760], sel_alloc), sel_init);
  *a2 = v4;
  v5 = v4;
  v6 = v5;
  re::ShaderManager::addBinaryArchivesToTilePipeline((uint64_t)this, &v6, 0);
  if (v5)

}

double re::HashTable<unsigned long,re::HashSet<unsigned short,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit((uint64_t *)(v6 + v4 + 16));
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 64;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::internal::Callable<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_0,void ()(void)>::~Callable(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24ED77378;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {

    *(_QWORD *)(a1 + 56) = 0;
  }
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 8);
  return a1;
}

void re::internal::Callable<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_0,void ()(void)>::~Callable(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24ED77378;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {

    *(_QWORD *)(a1 + 56) = 0;
  }
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 8);
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_0,void ()(void)>::operator()(uint64_t a1)
{
  id *v2;
  uint64_t v3;
  id v4;
  id v5[2];
  __int128 v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  re::mtl::Library::makeFunctionWithDescriptor((id *)(a1 + 88), *(void **)(a1 + 56), &v4);
  if (v4)
  {
    v5[0] = &off_24ED773D0;
    v5[1] = &v4;
    *(_QWORD *)&v6 = a1 + 8;
    *((_QWORD *)&v6 + 1) = v5;
    re::runInLocalAutoreleasePool((uint64_t)v5);
    v2 = (id *)*((_QWORD *)&v6 + 1);
    if (*((id **)&v6 + 1) == v5)
    {
      v3 = 4;
      v2 = v5;
    }
    else
    {
      if (!*((_QWORD *)&v6 + 1))
        goto LABEL_11;
      v3 = 5;
    }
    (*((void (**)(void))*v2 + v3))();
  }
  else
  {
    v8 = 0;
    v7 = 0;
    *(_OWORD *)v5 = 0u;
    v6 = 0u;
    (*(void (**)(_QWORD, id *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v5);
    re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)&v5[1]);
    if (v5[0])

  }
LABEL_11:
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  if (v4)

}

uint64_t re::internal::Callable<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_0,void ()(void)>::cloneInto(uint64_t a1, uint64_t a2)
{
  void *v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24ED77378;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 40) = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(a2 + 8, a1 + 8);
  v4 = *(void **)(a1 + 56);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 56) = v4;
  v5 = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = v5;
  *(_QWORD *)(a2 + 88) = *(id *)(a1 + 88);
  return a2;
}

uint64_t re::internal::Callable<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_0,void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)a2 = &off_24ED77378;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 40) = 0;
  re::FunctionBase<24ul,void ()(void)>::operator=<24ul>(a2 + 8, a1 + 8);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  v4 = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = v4;
  v5 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a2 + 88) = v5;
  return a2;
}

uint64_t re::internal::Callable<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_0,void ()(void)>::size()
{
  return 96;
}

void std::__function::__func<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_1::operator() const(NS::SharedPtr<MTL::Function> const&)::{lambda(void)#1},std::allocator<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_1::operator() const(NS::SharedPtr<MTL::Function> const&)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_1::operator() const(NS::SharedPtr<MTL::Function> const&)::{lambda(void)#1},std::allocator<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_1::operator() const(NS::SharedPtr<MTL::Function> const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24ED773D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_1::operator() const(NS::SharedPtr<MTL::Function> const&)::{lambda(void)#1},std::allocator<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_1::operator() const(NS::SharedPtr<MTL::Function> const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED773D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_1::operator() const(NS::SharedPtr<MTL::Function> const&)::{lambda(void)#1},std::allocator<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_1::operator() const(NS::SharedPtr<MTL::Function> const&)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  id v2[2];
  __int128 v3;
  int v4;
  uint64_t v5;

  v5 = 0;
  *(_OWORD *)v2 = 0u;
  v3 = 0u;
  v4 = 0;
  NS::SharedPtr<MTL::Texture>::operator=(v2, *(void ***)(a1 + 8));
  (*(void (**)(_QWORD, id *))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 32) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), v2);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)&v2[1]);
  if (v2[0])

}

uint64_t std::__function::__func<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_1::operator() const(NS::SharedPtr<MTL::Function> const&)::{lambda(void)#1},std::allocator<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_1::operator() const(NS::SharedPtr<MTL::Function> const&)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_1::operator() const(NS::SharedPtr<MTL::Function> const&)::{lambda(void)#1},std::allocator<re::ShaderManager::tryRequestFunctionReflection(unsigned long long,char const*,NS::SharedPtr<MTL::FunctionConstantValues> const&,BOOL,unsigned long long,re::Function<void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>)::$_1::operator() const(NS::SharedPtr<MTL::Function> const&)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

double re::HashTable<unsigned long,re::ShaderManager::LibraryEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;

          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 40;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

BOOL std::__libcpp_thread_poll_with_backoff[abi:nn180100]<std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<int,std::__cxx_atomic_base_impl<int>>,int> &,std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<int,std::__cxx_atomic_base_impl<int>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<int,std::__cxx_atomic_base_impl<int>>,int>> &>(uint64_t a1, uint64_t a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep a3)
{
  std::chrono::steady_clock::time_point v6;
  unsigned int v7;
  unsigned int *v8;
  int v9;
  unsigned int v10;
  int v11;
  std::chrono::steady_clock::time_point v12;

  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v7 = 0;
  while (1)
  {
    v8 = *(unsigned int **)a1;
    v9 = *(_DWORD *)(a1 + 12);
    if ((v9 - 1) < 2 || v9 == 5)
      v10 = atomic_load(v8);
    else
      v10 = *v8;
    v11 = *(_DWORD *)(a1 + 8);
    if (v10 != v11)
      break;
    if (v7 <= 0x3F)
    {
      ++v7;
    }
    else
    {
      v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ - v6.__d_.__rep_;
      if (a3 && v12.__d_.__rep_ > a3
        || std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<int,std::__cxx_atomic_base_impl<int>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<int,std::__cxx_atomic_base_impl<int>>,int>>::operator()[abi:nn180100](a2, v12.__d_.__rep_))
      {
        return v10 != v11;
      }
    }
  }
  return v10 != v11;
}

uint64_t std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<int,std::__cxx_atomic_base_impl<int>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<int,std::__cxx_atomic_base_impl<int>>,int>>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  std::__cxx_contention_t v3;
  unsigned int *v4;
  int v5;
  unsigned int v6;

  if (a2 < 64001)
  {
    if (a2 >= 4001)
      sched_yield();
    return 0;
  }
  v3 = std::__libcpp_atomic_monitor(*(const void **)a1);
  v4 = *(unsigned int **)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 20);
  if ((v5 - 1) < 2 || v5 == 5)
    v6 = atomic_load(v4);
  else
    v6 = *v4;
  if (v6 == *(_DWORD *)(a1 + 16))
  {
    std::__libcpp_atomic_wait(*(const void **)a1, v3);
    return 0;
  }
  return 1;
}

uint64_t ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_35scheduleAsyncFuncOnCompilationQueueEbyNS_8FunctionIFvvEEEE3__0EEvbyS4_T__block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[6];
  _BYTE v6[24];
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = a1[4];
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v2 + 728), 0xFFFFFFFFFFFFFFFFLL);
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 1174405120;
  v5[2] = ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_35scheduleAsyncFuncOnCompilationQueueEbyNS_8FunctionIFvvEEEE3__0EEvbyS4_T__block_invoke_2;
  v5[3] = &__block_descriptor_tmp_28;
  v3 = a1[5];
  v5[4] = v2;
  v5[5] = v3;
  v7 = a1[9];
  v8 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v6, (uint64_t)(a1 + 6));
  dispatch_async(*(dispatch_queue_t *)(v2 + 736), v5);
  result = (uint64_t)v8;
  if (v8)
  {
    result = (**(uint64_t (***)(_BYTE *))v8)(v8);
    if (v8 != v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  }
  return result;
}

void ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_35scheduleAsyncFuncOnCompilationQueueEbyNS_8FunctionIFvvEEEE3__0EEvbyS4_T__block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *(_QWORD *)(a1 + 32);
  re::ShaderManager::executeWithShaderCompilationBlamedToPeer(*(_QWORD *)(v1 + 896), *(_QWORD *)(a1 + 40), a1 + 48);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 728));
  v2 = (unsigned int *)(v1 + 816);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 - 1, v2));
  JUMPOUT(0x227693220);
}

uint64_t __copy_helper_block_8_48c24_ZTSN2re8FunctionIFvvEEE(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = 0;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(a1 + 48, a2 + 48);
}

uint64_t (***__destroy_helper_block_8_48c24_ZTSN2re8FunctionIFvvEEE(uint64_t a1))(_QWORD)
{
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 48);
}

void ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_35scheduleAsyncFuncOnCompilationQueueEbyNS_8FunctionIFvvEEEE3__0EEvbyS4_T__block_invoke_27(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *(_QWORD *)(a1 + 32);
  re::ShaderManager::executeWithShaderCompilationBlamedToPeer(*(_QWORD *)(v1 + 896), *(_QWORD *)(a1 + 40), a1 + 48);
  v2 = (unsigned int *)(v1 + 816);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 - 1, v2));
  JUMPOUT(0x227693220);
}

uint64_t ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_37scheduleGroupNotifyOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__0EEvbyS6_T__block_invoke(_QWORD *a1)
{
  uint64_t v2;
  id *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t result;
  NSObject *v7;
  _QWORD v8[6];
  _BYTE v9[24];
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = a1[4];
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v2 + 728), 0xFFFFFFFFFFFFFFFFLL);
  v3 = (id *)(a1 + 5);
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 1174405120;
  v8[2] = ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_37scheduleGroupNotifyOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__0EEvbyS6_T__block_invoke_2;
  v8[3] = &__block_descriptor_tmp_29_0;
  v4 = a1[6];
  v8[4] = v2;
  v8[5] = v4;
  v10 = a1[10];
  v11 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, (uint64_t)(a1 + 7));
  v5 = *(id *)(v2 + 736);
  v7 = v5;
  re::dispatch::Group::async(v3, &v7, v8);

  result = (uint64_t)v11;
  if (v11)
  {
    result = (**(uint64_t (***)(_BYTE *))v11)(v11);
    if (v11 != v9)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  }
  return result;
}

void ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_37scheduleGroupNotifyOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__0EEvbyS6_T__block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *(_QWORD *)(a1 + 32);
  re::ShaderManager::executeWithShaderCompilationBlamedToPeer(*(_QWORD *)(v1 + 896), *(_QWORD *)(a1 + 40), a1 + 48);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 728));
  v2 = (unsigned int *)(v1 + 816);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 - 1, v2));
  JUMPOUT(0x227693220);
}

uint64_t __copy_helper_block_8_40c110_ZTSZNK2re13ShaderManager37scheduleGroupNotifyOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__056c24_ZTSN2re8FunctionIFvvEEE(_QWORD *a1, uint64_t a2)
{
  a1[5] = *(id *)(a2 + 40);
  a1[10] = *(_QWORD *)(a2 + 80);
  a1[11] = 0;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a1 + 7), a2 + 56);
}

void __destroy_helper_block_8_40c110_ZTSZNK2re13ShaderManager37scheduleGroupNotifyOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__056c24_ZTSN2re8FunctionIFvvEEE(uint64_t a1)
{
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 56);

}

void ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_37scheduleGroupNotifyOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__0EEvbyS6_T__block_invoke_31(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *(_QWORD *)(a1 + 32);
  re::ShaderManager::executeWithShaderCompilationBlamedToPeer(*(_QWORD *)(v1 + 896), *(_QWORD *)(a1 + 40), a1 + 48);
  v2 = (unsigned int *)(v1 + 816);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 - 1, v2));
  JUMPOUT(0x227693220);
}

uint64_t ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_40scheduleAsyncGroupFuncOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__0EEvbyS6_T__block_invoke(_QWORD *a1)
{
  uint64_t v2;
  id *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t result;
  NSObject *v7;
  _QWORD v8[6];
  _BYTE v9[24];
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = a1[4];
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v2 + 728), 0xFFFFFFFFFFFFFFFFLL);
  v3 = (id *)(a1 + 5);
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 1174405120;
  v8[2] = ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_40scheduleAsyncGroupFuncOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__0EEvbyS6_T__block_invoke_2;
  v8[3] = &__block_descriptor_tmp_33_0;
  v4 = a1[6];
  v8[4] = v2;
  v8[5] = v4;
  v10 = a1[10];
  v11 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, (uint64_t)(a1 + 7));
  v5 = *(id *)(v2 + 736);
  v7 = v5;
  re::dispatch::Group::async(v3, &v7, v8);

  result = (uint64_t)v11;
  if (v11)
  {
    result = (**(uint64_t (***)(_BYTE *))v11)(v11);
    if (v11 != v9)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  }
  return result;
}

void ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_40scheduleAsyncGroupFuncOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__0EEvbyS6_T__block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *(_QWORD *)(a1 + 32);
  re::ShaderManager::executeWithShaderCompilationBlamedToPeer(*(_QWORD *)(v1 + 896), *(_QWORD *)(a1 + 40), a1 + 48);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 728));
  v2 = (unsigned int *)(v1 + 816);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 - 1, v2));
  JUMPOUT(0x227693220);
}

uint64_t __copy_helper_block_8_40c113_ZTSZNK2re13ShaderManager40scheduleAsyncGroupFuncOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__056c24_ZTSN2re8FunctionIFvvEEE(_QWORD *a1, uint64_t a2)
{
  a1[5] = *(id *)(a2 + 40);
  a1[10] = *(_QWORD *)(a2 + 80);
  a1[11] = 0;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a1 + 7), a2 + 56);
}

void __destroy_helper_block_8_40c113_ZTSZNK2re13ShaderManager40scheduleAsyncGroupFuncOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__056c24_ZTSN2re8FunctionIFvvEEE(uint64_t a1)
{
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 56);

}

void ___ZNK2re13ShaderManager29resolveShaderCompilationQueueIZNKS0_40scheduleAsyncGroupFuncOnCompilationQueueEbyNS_8dispatch5GroupENS_8FunctionIFvvEEEE3__0EEvbyS6_T__block_invoke_35(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *(_QWORD *)(a1 + 32);
  re::ShaderManager::executeWithShaderCompilationBlamedToPeer(*(_QWORD *)(v1 + 896), *(_QWORD *)(a1 + 40), a1 + 48);
  v2 = (unsigned int *)(v1 + 816);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 - 1, v2));
  JUMPOUT(0x227693220);
}

void re::HashTable<unsigned long,re::ShaderManager::LibraryEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  signed int v24;
  _BYTE v25[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v25, 0, 36);
      *(_QWORD *)&v25[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::ShaderManager::LibraryEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init((uint64_t)v25, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v25;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v25[8];
      *(_OWORD *)v25 = v5;
      *(_QWORD *)&v25[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v25[24];
      *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v25[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = (_QWORD *)(v6 + 32);
        do
        {
          if ((*(_DWORD *)(v14 - 3) & 0x80000000) != 0)
          {
            v15 = *(v14 - 4);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashTable<unsigned long,re::ShaderManager::LibraryEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 40 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 40 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 40 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v18 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v18) = v15;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v18 + 16) = *(v14 - 2);
            v22 = *(_QWORD *)(a1 + 16) + 40 * v18;
            *(_DWORD *)(v22 + 24) = *((_DWORD *)v14 - 2);
            v23 = *v14;
            *v14 = 0;
            *(_QWORD *)(v22 + 32) = v23;
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 5;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned long,re::ShaderManager::LibraryEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)v25);
    }
  }
  else
  {
    if (a2)
      v24 = a2;
    else
      v24 = 3;
  }
}

void re::HashTable<unsigned long,re::ShaderManager::LibraryEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 40 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_42, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::CameraView::makeCameraData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t result;
  int v22;

  re::CameraData::CameraData((re::CameraData *)a4, *(re::Allocator **)a3);
  re::DynamicString::operator=((re::DynamicString *)(a4 + 8), (re::DynamicString *)a1);
  if (re::DynamicInlineArray<re::RenderCamera,2ul>::ensureCapacity((_QWORD *)(a4 + 48), v8))
  {
    v10 = a4 + 48 + 32 * *(_QWORD *)(a4 + 48);
    v11 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v10 + 16) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v10 + 32) = v11;
    ++*(_QWORD *)(a4 + 48);
    ++*(_DWORD *)(a4 + 56);
  }
  if (re::DynamicInlineArray<re::RenderCamera,2ul>::ensureCapacity((_QWORD *)(a4 + 128), v9))
  {
    v13 = (_OWORD *)(a4 + 128 + (*(_QWORD *)(a4 + 128) << 6));
    v14 = *(_OWORD *)(a1 + 80);
    v13[1] = *(_OWORD *)(a1 + 64);
    v13[2] = v14;
    v15 = *(_OWORD *)(a1 + 112);
    v13[3] = *(_OWORD *)(a1 + 96);
    v13[4] = v15;
    ++*(_QWORD *)(a4 + 128);
    ++*(_DWORD *)(a4 + 136);
  }
  if (re::DynamicInlineArray<re::RenderCamera,2ul>::ensureCapacity((_QWORD *)(a4 + 272), v12))
  {
    v16 = (_OWORD *)(a4 + 272 + (*(_QWORD *)(a4 + 272) << 6));
    v17 = *(_OWORD *)(a1 + 592);
    v16[1] = *(_OWORD *)(a1 + 576);
    v16[2] = v17;
    v18 = *(_OWORD *)(a1 + 624);
    v16[3] = *(_OWORD *)(a1 + 608);
    v16[4] = v18;
    ++*(_QWORD *)(a4 + 272);
    ++*(_DWORD *)(a4 + 280);
  }
  v19 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a4 + 440) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a4 + 448) = v19;
  *(_OWORD *)(a4 + 416) = *(_OWORD *)(a1 + 320);
  *(_DWORD *)(a4 + 484) = *(_DWORD *)(a1 + 356);
  *(_QWORD *)(a4 + 456) = *(_QWORD *)(a1 + 340);
  *(_BYTE *)(a4 + 464) = *(_BYTE *)(a1 + 350);
  *(_DWORD *)(a4 + 468) = *(_DWORD *)(a1 + 352);
  *(_BYTE *)(a4 + 472) = *(_BYTE *)(a1 + 652);
  *(_WORD *)(a4 + 488) = *(_WORD *)(a3 + 64);
  if (objc_msgSend(*(id *)(a2 + 184), "supportsFamily:", 1003))
  {
    if (*(_DWORD *)(a1 + 112))
      v20 = 2;
    else
      v20 = 1;
  }
  else
  {
    v20 = 0;
  }
  *(_DWORD *)(a4 + 492) = v20;
  result = objc_msgSend(*(id *)(a2 + 184), "supportsFamily:", 1005);
  *(_DWORD *)(a4 + 496) = result;
  *(_DWORD *)(a4 + 504) = *(_DWORD *)(a1 + 656);
  if (*(_BYTE *)(a1 + 265))
    v22 = 1;
  else
    v22 = 2;
  *(_DWORD *)(a4 + 500) = v22;
  *(_BYTE *)(a4 + 512) = *(_BYTE *)(a1 + 660);
  return result;
}

uint64_t re::CameraMultiView::makeCameraDataInstancedMode@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t result;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;

  re::CameraView::makeCameraData((uint64_t)a1, a2, a3, a4);
  if (re::DynamicInlineArray<re::RenderCamera,2ul>::ensureCapacity((_QWORD *)(a4 + 128), v6))
  {
    v8 = (_OWORD *)(a4 + 128 + (*(_QWORD *)(a4 + 128) << 6));
    v9 = a1[47];
    v8[1] = a1[46];
    v8[2] = v9;
    v10 = a1[49];
    v8[3] = a1[48];
    v8[4] = v10;
    ++*(_QWORD *)(a4 + 128);
    ++*(_DWORD *)(a4 + 136);
  }
  if (re::DynamicInlineArray<re::RenderCamera,2ul>::ensureCapacity((_QWORD *)(a4 + 48), v7))
  {
    v12 = a4 + 48 + 32 * *(_QWORD *)(a4 + 48);
    v13 = a1[45];
    *(_OWORD *)(v12 + 16) = a1[44];
    *(_OWORD *)(v12 + 32) = v13;
    ++*(_QWORD *)(a4 + 48);
    ++*(_DWORD *)(a4 + 56);
  }
  result = re::DynamicInlineArray<re::RenderCamera,2ul>::ensureCapacity((_QWORD *)(a4 + 272), v11);
  if ((_DWORD)result)
  {
    v15 = (_OWORD *)(a4 + 272 + (*(_QWORD *)(a4 + 272) << 6));
    v16 = a1[81];
    v17 = a1[79];
    v15[1] = a1[78];
    v15[2] = v17;
    v15[3] = a1[80];
    v15[4] = v16;
    ++*(_QWORD *)(a4 + 272);
    ++*(_DWORD *)(a4 + 280);
  }
  *(_BYTE *)(a4 + 490) = *(_QWORD *)(a4 + 128);
  return result;
}

uint64_t re::CameraView::makeViewportPercentData@<X0>(re::CameraView *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  *(_QWORD *)a3 = &off_24ED77600;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  result = re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity((_QWORD *)(a3 + 16), a2);
  if ((_DWORD)result)
  {
    *(_OWORD *)(a3 + 16 + 16 * (*(_QWORD *)(a3 + 16))++ + 16) = *((_OWORD *)this + 34);
    ++*(_DWORD *)(a3 + 24);
  }
  *(_WORD *)(a3 + 64) = 1;
  *(_DWORD *)(a3 + 68) = *((_DWORD *)this + 162);
  return result;
}

void re::ViewportPercentData::~ViewportPercentData(re::ViewportPercentData *this)
{
  *((_QWORD *)this + 2) = 0;
  ++*((_DWORD *)this + 6);
}

{
  *((_QWORD *)this + 2) = 0;
  ++*((_DWORD *)this + 6);
  JUMPOUT(0x2276933B8);
}

uint64_t re::CameraMultiView::makeViewportPercentDataInstancedMode@<X0>(re::CameraMultiView *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t result;

  re::CameraView::makeViewportPercentData(this, a2, a3);
  result = re::DynamicInlineArray<re::Vector4<float>,2ul>::ensureCapacity((_QWORD *)(a3 + 16), v5);
  if ((_DWORD)result)
  {
    *(_OWORD *)(a3 + 16 + 16 * (*(_QWORD *)(a3 + 16))++ + 16) = *((_OWORD *)this + 76);
    ++*(_DWORD *)(a3 + 24);
  }
  *(_BYTE *)(a3 + 64) = 2;
  *(_BYTE *)(a3 + 65) = *((_BYTE *)this + 1345);
  *(_DWORD *)(a3 + 68) = 0;
  return result;
}

void re::CameraView::addPickupScopeLanes(re::CameraView *this, re::RenderFrame *a2)
{
  uint64_t v2;
  const char *v5;
  uint64_t v6;
  const char **v7;
  const char *v8;
  const char *v9;
  const char *v10;

  v2 = *((_QWORD *)this + 36);
  if (v2)
  {
    v5 = (char *)this + 9;
    v6 = v2 << 6;
    v7 = (const char **)(*((_QWORD *)this + 38) + 48);
    do
    {
      if ((*(_BYTE *)(v7 - 1) & 1) != 0)
        v8 = *v7;
      else
        v8 = (char *)v7 - 7;
      if ((*(_BYTE *)(v7 - 5) & 1) != 0)
        v9 = *(v7 - 4);
      else
        v9 = (char *)v7 - 39;
      v10 = v5;
      if ((*((_BYTE *)this + 8) & 1) != 0)
        v10 = (const char *)*((_QWORD *)this + 2);
      re::RenderFrame::pickupScopeLane(a2, v8, v9, v10);
      v7 += 8;
      v6 -= 64;
    }
    while (v6);
  }
}

uint64_t re::CameraView::prepareEmitDefault(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  const char *v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  float32x4_t *v27;
  uint64_t v28;
  void (**v30)(re::PipelineCompilationData *__hidden);
  _BYTE v31[24];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  re::CameraView::addPickupScopeLanes((re::CameraView *)a1, (re::RenderFrame *)a2);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
    v11 = *(const char **)(a1 + 16);
  else
    v11 = (const char *)(a1 + 9);
  v12 = 0x9E3779B97F4A7C17;
  v13 = strlen(a6);
  if (v13)
  {
    MurmurHash3_x64_128((uint64_t)a6, v13, 0, (unint64_t *)&v30);
    v14 = (*(_QWORD *)v31 - 0x61C8864680B583E9 + ((_QWORD)v30 << 6) + ((unint64_t)v30 >> 2)) ^ (unint64_t)v30;
  }
  else
  {
    v14 = 0;
  }
  v15 = strlen(v11);
  if (v15)
  {
    MurmurHash3_x64_128((uint64_t)v11, v15, 0, (unint64_t *)&v30);
    v12 = ((*(_QWORD *)v31 - 0x61C8864680B583E9 + ((_QWORD)v30 << 6) + ((unint64_t)v30 >> 2)) ^ (unint64_t)v30)
        - 0x61C8864680B583E9;
  }
  v16 = ((v14 >> 2) + (v14 << 6) + v12) ^ v14;
  re::CameraView::makeCameraData(a1, a2[1], a5, (uint64_t)&v30);
  re::RenderGraphDataStore::add<re::CameraData,re::CameraData>(a3, v16, (uint64_t)&v30);
  v40 = 0;
  ++v41;
  *(_QWORD *)&v38 = 0;
  ++DWORD2(v38);
  *(_QWORD *)&v33 = 0;
  ++DWORD2(v33);
  if (*(_QWORD *)v31 && (v31[8] & 1) != 0)
    (*(void (**)(void))(**(_QWORD **)v31 + 40))();
  re::CameraView::makeViewportPercentData((re::CameraView *)a1, v17, (uint64_t)&v30);
  re::RenderGraphDataStore::add<re::ViewportPercentData,re::ViewportPercentData>(a3, ((v14 >> 2) + (v14 << 6) + v12) ^ v14, (uint64_t)&v30);
  v18 = a2[1];
  v30 = &off_24ED73490;
  *(_DWORD *)v31 = *(_DWORD *)(a1 + 640);
  v19 = *(unsigned __int8 *)(v18 + 300);
  v21 = *(_DWORD *)v31 != -1 && v19 != 0;
  v31[4] = v21;
  v31[5] = *(_BYTE *)(a1 + 347);
  re::RenderGraphDataStore::add<re::VRRData,re::VRRData>(a3, ((v14 >> 2) + (v14 << 6) + v12) ^ v14, (uint64_t)&v30);
  v30 = &off_24ED73410;
  v31[16] = *(_BYTE *)(a1 + 376);
  *(_OWORD *)v31 = *(_OWORD *)(a1 + 360);
  re::RenderGraphDataStore::add<re::StencilInfoData,re::StencilInfoData>(a3, v16, (uint64_t)&v30);
  v30 = &off_24ED77680;
  v31[9] = 0;
  v31[12] = 0;
  v31[8] = *(_BYTE *)(a1 + 400);
  if (*(_BYTE *)(a1 + 401))
  {
    v31[9] = 1;
    v31[10] = *(_BYTE *)(a1 + 402);
  }
  if (*(_BYTE *)(a1 + 404))
  {
    v31[12] = 1;
    *(_DWORD *)&v31[16] = *(_DWORD *)(a1 + 408);
  }
  v22 = *(_OWORD *)(a1 + 496);
  v36 = *(_OWORD *)(a1 + 480);
  v37 = v22;
  v23 = *(_OWORD *)(a1 + 528);
  v38 = *(_OWORD *)(a1 + 512);
  v39 = v23;
  v24 = *(_OWORD *)(a1 + 432);
  v32 = *(_OWORD *)(a1 + 416);
  v33 = v24;
  v25 = *(_OWORD *)(a1 + 464);
  v34 = *(_OWORD *)(a1 + 448);
  v35 = v25;
  re::RenderGraphDataStore::add<re::MeshLodSelectInputData,re::MeshLodSelectInputData>(a3, v16, (uint64_t)&v30);
  v26 = *(_QWORD *)(a5 + 56);
  v30 = &off_24ED776C0;
  *(_QWORD *)v31 = v26;
  re::RenderGraphDataStore::add<re::SceneScope,re::SceneScope>(a3, v16, (uint64_t)&v30);
  v30 = &off_24ED77700;
  *(_DWORD *)v31 = *(_DWORD *)(a5 + 440);
  re::RenderGraphDataStore::add<re::SceneIndexData,re::SceneIndexData>(a3, v16, (uint64_t)&v30);
  v30 = &off_24ED62290;
  *(_WORD *)v31 = *(_WORD *)(a1 + 653);
  re::RenderGraphDataStore::add<re::PipelineCompilationData,re::PipelineCompilationData>(a3, v16, (uint64_t)&v30);
  v27 = *(float32x4_t **)(a5 + 432);
  if (v27)
  {
    v30 = &off_24ED77640;
    *(float32x4_t *)&v31[8] = vaddq_f32(*(float32x4_t *)(a1 + 320), *v27);
    LOBYTE(v32) = v27[1].i8[0];
    re::RenderGraphDataStore::add<re::TintContextData,re::TintContextData>(a3, v16, (uint64_t)&v30);
  }
  v28 = *(unsigned __int8 *)(a2[1] + 303);
  v30 = &off_24ED734D0;
  v31[0] = v28;
  *(_QWORD *)&v31[8] = v28 << 9;
  return re::RenderGraphDataStore::addHashed<re::ThreadGroupMemoryData,re::ThreadGroupMemoryData>(a3, v16, (uint64_t)&v30);
}

uint64_t re::RenderGraphDataStore::add<re::CameraData,re::CameraData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  size_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  __int128 v16;
  void *v18;
  unint64_t v19;
  unint64_t v20[3];

  v20[2] = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  if ((v6 & 1) == 0
  {
    re::introspect<re::CameraData>(void)::info = (_UNKNOWN *)re::introspect_CameraData(0);
  }
  v18 = re::introspect<re::CameraData>(void)::info;
  v7 = strlen(*((const char **)re::introspect<re::CameraData>(void)::info + 6));
  if (v7)
  {
    MurmurHash3_x64_128(*((_QWORD *)re::introspect<re::CameraData>(void)::info + 6), v7, 0, v20);
    v8 = (v20[1] - 0x61C8864680B583E9 + (v20[0] << 6) + (v20[0] >> 2)) ^ v20[0];
  }
  else
  {
    v8 = 0;
  }
  v19 = v8;
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(a1 + 176, &v19, &v18);
  v20[0] = (a2 - 0x61C8864680B583E9 + (v19 << 6) + (v19 >> 2)) ^ v19;
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 528, 16);
  *(_QWORD *)v9 = off_24ED735F0;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 8) = 0u;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  v10 = *(_QWORD *)(v9 + 24);
  *(_QWORD *)(v9 + 24) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = v10;
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 32) = 0;
  v11 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = v11;
  *(_QWORD *)(v9 + 48) = 0;
  *(_DWORD *)(v9 + 56) = 0;
  re::DynamicInlineArray<re::RenderCamera,2ul>::move((unint64_t *)(v9 + 48), (unint64_t *)(a3 + 48));
  *(_QWORD *)(v9 + 128) = 0;
  *(_DWORD *)(v9 + 136) = 0;
  re::DynamicInlineArray<re::Projection,2ul>::move((unint64_t *)(v9 + 128), (unint64_t *)(a3 + 128));
  *(_QWORD *)(v9 + 272) = 0;
  *(_DWORD *)(v9 + 280) = 0;
  re::DynamicInlineArray<re::Projection,2ul>::move((unint64_t *)(v9 + 272), (unint64_t *)(a3 + 272));
  v12 = *(_OWORD *)(a3 + 416);
  v13 = *(_OWORD *)(a3 + 432);
  v14 = *(_OWORD *)(a3 + 448);
  *(_OWORD *)(v9 + 458) = *(_OWORD *)(a3 + 458);
  *(_OWORD *)(v9 + 432) = v13;
  *(_OWORD *)(v9 + 448) = v14;
  *(_OWORD *)(v9 + 416) = v12;
  v15 = *(unsigned __int8 *)(a3 + 476);
  *(_BYTE *)(v9 + 476) = v15;
  if (v15)
    *(_DWORD *)(v9 + 480) = *(_DWORD *)(a3 + 480);
  v16 = *(_OWORD *)(a3 + 484);
  *(_OWORD *)(v9 + 497) = *(_OWORD *)(a3 + 497);
  *(_OWORD *)(v9 + 484) = v16;
  v18 = (void *)v9;
  return *(_QWORD *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(a1 + 64, v20, &v18);
}

uint64_t re::RenderGraphDataStore::add<re::ViewportPercentData,re::ViewportPercentData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v4 = (unint64_t)"N2re19ViewportPercentDataE";
  if (((unint64_t)"N2re19ViewportPercentDataE" & 0x8000000000000000) != 0)
  {
    v5 = (unsigned __int8 *)((unint64_t)"N2re19ViewportPercentDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v6 = 5381;
    do
    {
      v4 = v6;
      v7 = *v5++;
      v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  v12 = (a2 + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
  v8 = a1 + 64;
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 80, 16);
  *(_QWORD *)v9 = &off_24ED77600;
  *(_QWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 24) = 0;
  re::DynamicInlineArray<re::PlaneF,6ul>::move((unint64_t *)(v9 + 16), (unint64_t *)(a3 + 16));
  *(_QWORD *)(v9 + 64) = *(_QWORD *)(a3 + 64);
  v11 = v9;
  return *(_QWORD *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v8, (unint64_t *)&v12, &v11);
}

void re::RenderGraphDataStore::add<re::VRRData,re::VRRData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v21 = 0;
  if ((v6 & 1) == 0
  {
    re::introspect<re::VRRData>(void)::info = (_UNKNOWN *)re::introspect_VRRData(0);
  }
  v20 = re::introspect<re::VRRData>(void)::info;
  v7 = strlen(*((const char **)re::introspect<re::VRRData>(void)::info + 6));
  if (v7)
  {
    MurmurHash3_x64_128(*((_QWORD *)re::introspect<re::VRRData>(void)::info + 6), v7, 0, v22);
    v8 = (v22[1] - 0x61C8864680B583E9 + (v22[0] << 6) + (v22[0] >> 2)) ^ v22[0];
  }
  else
  {
    v8 = 0;
  }
  v21 = v8;
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(a1 + 176, &v21, &v20);
  v9 = (a2 - 0x61C8864680B583E9 + (v21 << 6) + (v21 >> 2)) ^ v21;
  v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 16, 8);
  *(_QWORD *)v10 = &off_24ED73490;
  v11 = *(_DWORD *)(a3 + 8);
  *(_WORD *)(v10 + 12) = *(_WORD *)(a3 + 12);
  *(_DWORD *)(v10 + 8) = v11;
  v12 = *(_QWORD *)(a1 + 64);
  if (v12)
  {
    v12 = v9 % *(unsigned int *)(a1 + 88);
    v13 = *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * v12);
    if ((_DWORD)v13 != 0x7FFFFFFF)
    {
      v19 = *(_QWORD *)(a1 + 80);
      if (*(_QWORD *)(v19 + 24 * v13 + 8) == v9)
        return;
      while (1)
      {
        LODWORD(v13) = *(_DWORD *)(v19 + 24 * v13) & 0x7FFFFFFF;
        if ((_DWORD)v13 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v19 + 24 * v13 + 8) == v9)
          return;
      }
    }
  }
  v14 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v14 == 0x7FFFFFFF)
  {
    v14 = *(unsigned int *)(a1 + 96);
    v15 = v14;
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 88))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1 + 64, 2 * *(_DWORD *)(a1 + 92));
      LODWORD(v12) = v9 % *(unsigned int *)(a1 + 88);
      v15 = *(_DWORD *)(a1 + 96);
    }
    *(_DWORD *)(a1 + 96) = v15 + 1;
    v16 = *(_QWORD *)(a1 + 80);
    v17 = *(_DWORD *)(v16 + 24 * v14);
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 80);
    v17 = *(_DWORD *)(v16 + 24 * v14);
    *(_DWORD *)(a1 + 100) = v17 & 0x7FFFFFFF;
  }
  v18 = 24 * v14;
  *(_DWORD *)(v16 + v18) = v17 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 80) + v18) = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v14) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v12);
  *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v14 + 8) = v9;
  *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v14 + 16) = v10;
  *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v12) = v14;
  ++*(_DWORD *)(a1 + 92);
  ++*(_DWORD *)(a1 + 104);
}

void re::RenderGraphDataStore::add<re::StencilInfoData,re::StencilInfoData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v21 = 0;
  if ((v6 & 1) == 0
  {
    re::introspect<re::StencilInfoData>(void)::info = (_UNKNOWN *)re::introspect_StencilInfoData(0);
  }
  v20 = re::introspect<re::StencilInfoData>(void)::info;
  v7 = strlen(*((const char **)re::introspect<re::StencilInfoData>(void)::info + 6));
  if (v7)
  {
    MurmurHash3_x64_128(*((_QWORD *)re::introspect<re::StencilInfoData>(void)::info + 6), v7, 0, v22);
    v8 = (v22[1] - 0x61C8864680B583E9 + (v22[0] << 6) + (v22[0] >> 2)) ^ v22[0];
  }
  else
  {
    v8 = 0;
  }
  v21 = v8;
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(a1 + 176, &v21, &v20);
  v9 = (a2 - 0x61C8864680B583E9 + (v21 << 6) + (v21 >> 2)) ^ v21;
  v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 32, 8);
  *(_QWORD *)v10 = &off_24ED73410;
  v11 = *(_OWORD *)(a3 + 8);
  *(_BYTE *)(v10 + 24) = *(_BYTE *)(a3 + 24);
  *(_OWORD *)(v10 + 8) = v11;
  v12 = *(_QWORD *)(a1 + 64);
  if (v12)
  {
    v12 = v9 % *(unsigned int *)(a1 + 88);
    v13 = *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * v12);
    if ((_DWORD)v13 != 0x7FFFFFFF)
    {
      v19 = *(_QWORD *)(a1 + 80);
      if (*(_QWORD *)(v19 + 24 * v13 + 8) == v9)
        return;
      while (1)
      {
        LODWORD(v13) = *(_DWORD *)(v19 + 24 * v13) & 0x7FFFFFFF;
        if ((_DWORD)v13 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v19 + 24 * v13 + 8) == v9)
          return;
      }
    }
  }
  v14 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v14 == 0x7FFFFFFF)
  {
    v14 = *(unsigned int *)(a1 + 96);
    v15 = v14;
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 88))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1 + 64, 2 * *(_DWORD *)(a1 + 92));
      LODWORD(v12) = v9 % *(unsigned int *)(a1 + 88);
      v15 = *(_DWORD *)(a1 + 96);
    }
    *(_DWORD *)(a1 + 96) = v15 + 1;
    v16 = *(_QWORD *)(a1 + 80);
    v17 = *(_DWORD *)(v16 + 24 * v14);
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 80);
    v17 = *(_DWORD *)(v16 + 24 * v14);
    *(_DWORD *)(a1 + 100) = v17 & 0x7FFFFFFF;
  }
  v18 = 24 * v14;
  *(_DWORD *)(v16 + v18) = v17 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 80) + v18) = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v14) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v12);
  *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v14 + 8) = v9;
  *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v14 + 16) = v10;
  *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v12) = v14;
  ++*(_DWORD *)(a1 + 92);
  ++*(_DWORD *)(a1 + 104);
}

uint64_t re::RenderGraphDataStore::add<re::MeshLodSelectInputData,re::MeshLodSelectInputData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v19;
  uint64_t v20;

  v5 = (unint64_t)"N2re22MeshLodSelectInputDataE";
  if (((unint64_t)"N2re22MeshLodSelectInputDataE" & 0x8000000000000000) != 0)
  {
    v6 = (unsigned __int8 *)((unint64_t)"N2re22MeshLodSelectInputDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v7 = 5381;
    do
    {
      v5 = v7;
      v8 = *v6++;
      v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  v20 = (a2 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5;
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 160, 16);
  *(_QWORD *)v9 = &off_24ED77680;
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(a3 + 16);
  v10 = *(unsigned __int8 *)(a3 + 17);
  *(_BYTE *)(v9 + 17) = v10;
  if (v10)
    *(_BYTE *)(v9 + 18) = *(_BYTE *)(a3 + 18);
  v11 = *(unsigned __int8 *)(a3 + 20);
  *(_BYTE *)(v9 + 20) = v11;
  if (v11)
    *(_DWORD *)(v9 + 24) = *(_DWORD *)(a3 + 24);
  v12 = *(_OWORD *)(a3 + 32);
  v13 = *(_OWORD *)(a3 + 48);
  v14 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v9 + 64) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v9 + 80) = v14;
  *(_OWORD *)(v9 + 32) = v12;
  *(_OWORD *)(v9 + 48) = v13;
  v15 = *(_OWORD *)(a3 + 96);
  v16 = *(_OWORD *)(a3 + 112);
  v17 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(v9 + 128) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(v9 + 144) = v17;
  *(_OWORD *)(v9 + 96) = v15;
  *(_OWORD *)(v9 + 112) = v16;
  v19 = v9;
  return re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(a1 + 64, (unint64_t *)&v20, &v19);
}

uint64_t re::RenderGraphDataStore::add<re::SceneScope,re::SceneScope>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v11;
  uint64_t v12;

  v4 = (unint64_t)"N2re10SceneScopeE";
  if (((unint64_t)"N2re10SceneScopeE" & 0x8000000000000000) != 0)
  {
    v5 = (unsigned __int8 *)((unint64_t)"N2re10SceneScopeE" & 0x7FFFFFFFFFFFFFFFLL);
    v6 = 5381;
    do
    {
      v4 = v6;
      v7 = *v5++;
      v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  v12 = (a2 + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
  v8 = a1 + 64;
  v9 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 16, 8);
  *v9 = &off_24ED776C0;
  v9[1] = *(_QWORD *)(a3 + 8);
  v11 = v9;
  return *(_QWORD *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v8, (unint64_t *)&v12, &v11);
}

uint64_t re::RenderGraphDataStore::add<re::SceneIndexData,re::SceneIndexData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v4 = (unint64_t)"N2re14SceneIndexDataE";
  if (((unint64_t)"N2re14SceneIndexDataE" & 0x8000000000000000) != 0)
  {
    v5 = (unsigned __int8 *)((unint64_t)"N2re14SceneIndexDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v6 = 5381;
    do
    {
      v4 = v6;
      v7 = *v5++;
      v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  v12 = (a2 + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
  v8 = a1 + 64;
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 16, 8);
  *(_QWORD *)v9 = &off_24ED77700;
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(a3 + 8);
  v11 = v9;
  return *(_QWORD *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v8, (unint64_t *)&v12, &v11);
}

uint64_t re::RenderGraphDataStore::add<re::PipelineCompilationData,re::PipelineCompilationData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v4 = (unint64_t)"N2re23PipelineCompilationDataE";
  if (((unint64_t)"N2re23PipelineCompilationDataE" & 0x8000000000000000) != 0)
  {
    v5 = (unsigned __int8 *)((unint64_t)"N2re23PipelineCompilationDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v6 = 5381;
    do
    {
      v4 = v6;
      v7 = *v5++;
      v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  v12 = (a2 + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
  v8 = a1 + 64;
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 16, 8);
  *(_QWORD *)v9 = &off_24ED62290;
  *(_WORD *)(v9 + 8) = *(_WORD *)(a3 + 8);
  v11 = v9;
  return re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v8, (unint64_t *)&v12, &v11);
}

void re::RenderGraphDataStore::add<re::TintContextData,re::TintContextData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v5 = (unint64_t)"N2re15TintContextDataE";
  if (((unint64_t)"N2re15TintContextDataE" & 0x8000000000000000) != 0)
  {
    v6 = (unsigned __int8 *)((unint64_t)"N2re15TintContextDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v7 = 5381;
    do
    {
      v5 = v7;
      v8 = *v6++;
      v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  v9 = (a2 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5;
  v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 48, 16);
  *(_QWORD *)v10 = &off_24ED77640;
  v11 = *(_OWORD *)(a3 + 16);
  *(_BYTE *)(v10 + 32) = *(_BYTE *)(a3 + 32);
  *(_OWORD *)(v10 + 16) = v11;
  v12 = *(_QWORD *)(a1 + 64);
  if (v12)
  {
    v12 = v9 % *(unsigned int *)(a1 + 88);
    v13 = *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * v12);
    if ((_DWORD)v13 != 0x7FFFFFFF)
    {
      v19 = *(_QWORD *)(a1 + 80);
      if (*(_QWORD *)(v19 + 24 * v13 + 8) == v9)
        return;
      while (1)
      {
        LODWORD(v13) = *(_DWORD *)(v19 + 24 * v13) & 0x7FFFFFFF;
        if ((_DWORD)v13 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v19 + 24 * v13 + 8) == v9)
          return;
      }
    }
  }
  v14 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v14 == 0x7FFFFFFF)
  {
    v14 = *(unsigned int *)(a1 + 96);
    v15 = v14;
    if ((_DWORD)v14 == *(_DWORD *)(a1 + 88))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1 + 64, 2 * *(_DWORD *)(a1 + 92));
      LODWORD(v12) = v9 % *(unsigned int *)(a1 + 88);
      v15 = *(_DWORD *)(a1 + 96);
    }
    *(_DWORD *)(a1 + 96) = v15 + 1;
    v16 = *(_QWORD *)(a1 + 80);
    v17 = *(_DWORD *)(v16 + 24 * v14);
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 80);
    v17 = *(_DWORD *)(v16 + 24 * v14);
    *(_DWORD *)(a1 + 100) = v17 & 0x7FFFFFFF;
  }
  v18 = 24 * v14;
  *(_DWORD *)(v16 + v18) = v17 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 80) + v18) = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v14) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v12);
  *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v14 + 8) = v9;
  *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v14 + 16) = v10;
  *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v12) = v14;
  ++*(_DWORD *)(a1 + 92);
  ++*(_DWORD *)(a1 + 104);
}

uint64_t re::RenderGraphDataStore::addHashed<re::ThreadGroupMemoryData,re::ThreadGroupMemoryData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  size_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v11;
  unint64_t v12;
  unint64_t v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12 = 0;
  if ((v6 & 1) == 0
  {
    re::introspect<re::ThreadGroupMemoryData>(void)::info = (_UNKNOWN *)re::introspect_ThreadGroupMemoryData(0);
  }
  v11 = re::introspect<re::ThreadGroupMemoryData>(void)::info;
  v7 = strlen(*((const char **)re::introspect<re::ThreadGroupMemoryData>(void)::info + 6));
  if (v7)
  {
    MurmurHash3_x64_128(*((_QWORD *)re::introspect<re::ThreadGroupMemoryData>(void)::info + 6), v7, 0, v13);
    v8 = (v13[1] - 0x61C8864680B583E9 + (v13[0] << 6) + (v13[0] >> 2)) ^ v13[0];
  }
  else
  {
    v8 = 0;
  }
  v12 = v8;
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(a1 + 176, &v12, &v11);
  v13[0] = (a2 - 0x61C8864680B583E9 + (v12 << 6) + (v12 >> 2)) ^ v12;
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 24, 8);
  *(_QWORD *)v9 = &off_24ED734D0;
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(a3 + 8);
  v11 = (void *)v9;
  return re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::addNew((_anonymous_namespace_ *)(a1 + 112), v13, (uint64_t *)&v11);
}

uint64_t re::CameraMultiView::prepareEmitDefaultInstancedMode(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  const char *v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  float32x4_t *v27;
  uint64_t v28;
  void (**v30)(re::PipelineCompilationData *__hidden);
  _BYTE v31[24];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  re::CameraView::addPickupScopeLanes((re::CameraView *)a1, (re::RenderFrame *)a2);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
    v11 = *(const char **)(a1 + 16);
  else
    v11 = (const char *)(a1 + 9);
  v12 = 0x9E3779B97F4A7C17;
  v13 = strlen(a6);
  if (v13)
  {
    MurmurHash3_x64_128((uint64_t)a6, v13, 0, (unint64_t *)&v30);
    v14 = (*(_QWORD *)v31 - 0x61C8864680B583E9 + ((_QWORD)v30 << 6) + ((unint64_t)v30 >> 2)) ^ (unint64_t)v30;
  }
  else
  {
    v14 = 0;
  }
  v15 = strlen(v11);
  if (v15)
  {
    MurmurHash3_x64_128((uint64_t)v11, v15, 0, (unint64_t *)&v30);
    v12 = ((*(_QWORD *)v31 - 0x61C8864680B583E9 + ((_QWORD)v30 << 6) + ((unint64_t)v30 >> 2)) ^ (unint64_t)v30)
        - 0x61C8864680B583E9;
  }
  v16 = ((v14 >> 2) + (v14 << 6) + v12) ^ v14;
  re::CameraMultiView::makeCameraDataInstancedMode((_OWORD *)a1, a2[1], a5, (uint64_t)&v30);
  re::RenderGraphDataStore::add<re::CameraData,re::CameraData>(a3, v16, (uint64_t)&v30);
  v40 = 0;
  ++v41;
  *(_QWORD *)&v38 = 0;
  ++DWORD2(v38);
  *(_QWORD *)&v33 = 0;
  ++DWORD2(v33);
  if (*(_QWORD *)v31 && (v31[8] & 1) != 0)
    (*(void (**)(void))(**(_QWORD **)v31 + 40))();
  re::CameraMultiView::makeViewportPercentDataInstancedMode((re::CameraMultiView *)a1, v17, (uint64_t)&v30);
  re::RenderGraphDataStore::add<re::ViewportPercentData,re::ViewportPercentData>(a3, ((v14 >> 2) + (v14 << 6) + v12) ^ v14, (uint64_t)&v30);
  v18 = a2[1];
  v30 = &off_24ED73490;
  *(_DWORD *)v31 = *(_DWORD *)(a1 + 640);
  v19 = *(unsigned __int8 *)(v18 + 300);
  v21 = *(_DWORD *)v31 != -1 && v19 != 0;
  v31[4] = v21;
  v31[5] = *(_BYTE *)(a1 + 347);
  re::RenderGraphDataStore::add<re::VRRData,re::VRRData>(a3, ((v14 >> 2) + (v14 << 6) + v12) ^ v14, (uint64_t)&v30);
  v30 = &off_24ED73410;
  v31[16] = *(_BYTE *)(a1 + 376);
  *(_OWORD *)v31 = *(_OWORD *)(a1 + 360);
  re::RenderGraphDataStore::add<re::StencilInfoData,re::StencilInfoData>(a3, v16, (uint64_t)&v30);
  v30 = &off_24ED77680;
  v31[9] = 0;
  v31[12] = 0;
  v31[8] = *(_BYTE *)(a1 + 400);
  if (*(_BYTE *)(a1 + 401))
  {
    v31[9] = 1;
    v31[10] = *(_BYTE *)(a1 + 402);
  }
  if (*(_BYTE *)(a1 + 404))
  {
    v31[12] = 1;
    *(_DWORD *)&v31[16] = *(_DWORD *)(a1 + 408);
  }
  v22 = *(_OWORD *)(a1 + 496);
  v36 = *(_OWORD *)(a1 + 480);
  v37 = v22;
  v23 = *(_OWORD *)(a1 + 528);
  v38 = *(_OWORD *)(a1 + 512);
  v39 = v23;
  v24 = *(_OWORD *)(a1 + 432);
  v32 = *(_OWORD *)(a1 + 416);
  v33 = v24;
  v25 = *(_OWORD *)(a1 + 464);
  v34 = *(_OWORD *)(a1 + 448);
  v35 = v25;
  re::RenderGraphDataStore::add<re::MeshLodSelectInputData,re::MeshLodSelectInputData>(a3, v16, (uint64_t)&v30);
  v26 = *(_QWORD *)(a5 + 56);
  v30 = &off_24ED776C0;
  *(_QWORD *)v31 = v26;
  re::RenderGraphDataStore::add<re::SceneScope,re::SceneScope>(a3, v16, (uint64_t)&v30);
  v30 = &off_24ED77700;
  *(_DWORD *)v31 = *(_DWORD *)(a5 + 440);
  re::RenderGraphDataStore::add<re::SceneIndexData,re::SceneIndexData>(a3, v16, (uint64_t)&v30);
  v30 = &off_24ED62290;
  *(_WORD *)v31 = *(_WORD *)(a1 + 653);
  re::RenderGraphDataStore::add<re::PipelineCompilationData,re::PipelineCompilationData>(a3, v16, (uint64_t)&v30);
  v27 = *(float32x4_t **)(a5 + 432);
  if (v27)
  {
    v30 = &off_24ED77640;
    *(float32x4_t *)&v31[8] = vaddq_f32(*(float32x4_t *)(a1 + 320), *v27);
    LOBYTE(v32) = v27[1].i8[0];
    re::RenderGraphDataStore::add<re::TintContextData,re::TintContextData>(a3, v16, (uint64_t)&v30);
  }
  v28 = *(unsigned __int8 *)(a2[1] + 303);
  v30 = &off_24ED734D0;
  v31[0] = v28;
  *(_QWORD *)&v31[8] = v28 << 9;
  return re::RenderGraphDataStore::addHashed<re::ThreadGroupMemoryData,re::ThreadGroupMemoryData>(a3, v16, (uint64_t)&v30);
}

void re::CameraView::registerFileProviders(char *__s1@<X3>, uint64_t a2@<X0>, re::RenderGraphManager *a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X8>)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t j;
  uint64_t v22;
  const char *v23;
  StringID v24;

  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 24) = 0;
  v10 = *(_QWORD *)(a2 + 240);
  if (v10)
  {
    v11 = 0;
    for (i = 0; i < v10; ++i)
    {
      v13 = *(_QWORD *)(a2 + 256) + v11;
      if ((*(_QWORD *)(v13 + 16) & 1) != 0)
        v14 = *(const char **)(v13 + 24);
      else
        v14 = (const char *)(v13 + 17);
      if (!strcmp(__s1, v14))
      {
        re::RenderGraphManager::addProviderInternal(a3, __s1, *(const re::RenderGraphProviderBase **)v13, *(_DWORD *)(v13 + 40), 0, (uint64_t)&v24);
        re::DynamicArray<re::ProviderHandle>::add((_anonymous_namespace_ *)a5, &v24);
        re::StringID::destroyString((re::StringID *)&v24);
        v10 = *(_QWORD *)(a2 + 240);
      }
      v11 += 48;
    }
  }
  if (!*(_BYTE *)(a2 + 264))
  {
    v15 = *(_QWORD *)(a4 + 88);
    if (v15)
    {
      if (*(_QWORD *)(v15 + 40))
      {
        v16 = 0;
        do
        {
          v17 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v15, v16);
          v18 = *(_QWORD *)(v17 + 16);
          if (v18)
          {
            v19 = v17;
            v20 = 0;
            for (j = 0; j < v18; ++j)
            {
              v22 = *(_QWORD *)(v19 + 32) + v20;
              if ((*(_QWORD *)(v22 + 16) & 1) != 0)
                v23 = *(const char **)(v22 + 24);
              else
                v23 = (const char *)(v22 + 17);
              if (!strcmp(__s1, v23))
              {
                re::RenderGraphManager::addProviderInternal(a3, __s1, *(const re::RenderGraphProviderBase **)v22, *(_DWORD *)(v22 + 40), 0, (uint64_t)&v24);
                re::DynamicArray<re::ProviderHandle>::add((_anonymous_namespace_ *)a5, &v24);
                re::StringID::destroyString((re::StringID *)&v24);
                v18 = *(_QWORD *)(v19 + 16);
              }
              v20 += 48;
            }
          }
          ++v16;
        }
        while (*(_QWORD *)(v15 + 40) > v16);
      }
    }
  }
}

re::StringID *re::DynamicArray<re::ProviderHandle>::add(_anonymous_namespace_ *this, StringID *a2)
{
  unint64_t v4;
  re::StringID *result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::ProviderHandle>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = re::StringID::StringID((re::StringID *)(*((_QWORD *)this + 4) + 24 * v4), a2);
  *((_QWORD *)result + 2) = *(_QWORD *)&a2[1].var0;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::CameraView::unregisterFileProviders(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  re::StringID *v9;
  uint64_t v10;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 16);
  if ((int)v3 >= 1)
  {
    v5 = *(_QWORD *)(a2 + 16) + 1;
    do
    {
      v6 = (v5 - 2);
      v7 = *(_QWORD *)(a2 + 16);
      if (v7 <= v6)
      {
        v13 = 0;
        v25 = 0u;
        v26 = 0u;
        v23 = 0u;
        v24 = 0u;
        v22 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v14 = 136315906;
        v15 = "operator[]";
        v16 = 1024;
        v17 = 789;
        v18 = 2048;
        v19 = (v5 - 2);
        v20 = 2048;
        v21 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v8 = *(_QWORD *)(a2 + 32) + 24 * v6;
      re::StringID::StringID((re::StringID *)v11, (const StringID *)v8);
      v12 = *(_QWORD *)(v8 + 16);
      re::RenderGraphManager::removeProvider(a1, (uint64_t)v11);
      re::StringID::destroyString((re::StringID *)v11);
      --v5;
    }
    while (v5 > 1);
    v3 = *(_QWORD *)(a2 + 16);
  }
  *(_QWORD *)(a2 + 16) = 0;
  if (v3)
  {
    v9 = *(re::StringID **)(a2 + 32);
    v10 = 24 * v3;
    do
    {
      re::StringID::destroyString(v9);
      v9 = (re::StringID *)((char *)v9 + 24);
      v10 -= 24;
    }
    while (v10);
  }
  ++*(_DWORD *)(a2 + 24);
}

re::CameraData *re::CameraData::CameraData(re::CameraData *this, re::Allocator *a2)
{
  _QWORD *v4;

  *(_QWORD *)this = off_24ED735F0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  re::DynamicString::setCapacity(v4, 0);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_DWORD *)this + 70) = 0;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_DWORD *)this + 108) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_DWORD *)this + 114) = 0;
  *((_DWORD *)this + 115) = 65537;
  *((_BYTE *)this + 464) = 0;
  *((_DWORD *)this + 117) = 1065353216;
  *((_WORD *)this + 236) = 1;
  *((_BYTE *)this + 476) = 0;
  *((_DWORD *)this + 121) = 1;
  *((_BYTE *)this + 490) = 1;
  *((_DWORD *)this + 125) = 2;
  *((_QWORD *)this + 63) = 0xFFFFFFFFLL;
  *((_BYTE *)this + 512) = 0;
  *v4 = a2;
  re::DynamicString::setCapacity(v4, 0);
  return this;
}

void re::TintContextData::~TintContextData(re::TintContextData *this)
{
  JUMPOUT(0x2276933B8);
}

void re::MeshLodSelectInputData::~MeshLodSelectInputData(re::MeshLodSelectInputData *this)
{
  JUMPOUT(0x2276933B8);
}

void re::SceneScope::~SceneScope(re::SceneScope *this)
{
  JUMPOUT(0x2276933B8);
}

void re::SceneIndexData::~SceneIndexData(re::SceneIndexData *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::DynamicInlineArray<re::RenderCamera,2ul>::ensureCapacity(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (*a1 <= 1uLL)
    return 1;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v6 = *a2;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  v7 = v6 % *(unsigned int *)(a1 + 24);
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v7);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 16) + 24 * v12;
    return v11 + 16;
  }
  v9 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v9 + 24 * v8 + 8) != v6)
  {
    v8 = *(_DWORD *)(v9 + 24 * v8) & 0x7FFFFFFF;
    if ((_DWORD)v8 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v10 = 3 * v8;
  *(_QWORD *)(v9 + 8 * v10 + 16) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 16) + 8 * v10;
  return v11 + 16;
}

uint64_t re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  v6 = *a2;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  v7 = v6 % *(unsigned int *)(a1 + 24);
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v7);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 16) + 24 * v11;
    return v10 + 16;
  }
  v9 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v9 + 24 * v8 + 8) != v6)
  {
    LODWORD(v8) = *(_DWORD *)(v9 + 24 * v8) & 0x7FFFFFFF;
    if ((_DWORD)v8 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v10 = v9 + 24 * v8;
  return v10 + 16;
}

unint64_t *re::DynamicInlineArray<re::RenderCamera,2ul>::move(unint64_t *result, unint64_t *a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = result;
  v4 = *a2;
  v5 = *result;
  if (*a2 >= *result)
  {
    v6 = (uint64_t *)(a2 + 2);
    v7 = (uint64_t)&a2[4 * v5 + 2];
    v8 = result + 2;
    if (v5)
      memmove(result + 2, a2 + 2, 32 * v5);
    result = (unint64_t *)memcpy(&v8[4 * v5], &a2[4 * v5 + 2], (size_t)&v6[4 * v4] - v7);
  }
  else if (v4)
  {
    result = (unint64_t *)memmove(result + 2, a2 + 2, 32 * v4);
  }
  *v3 = v4;
  *a2 = 0;
  ++*((_DWORD *)a2 + 2);
  return result;
}

unint64_t *re::DynamicInlineArray<re::Projection,2ul>::move(unint64_t *result, unint64_t *a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = result;
  v4 = *a2;
  v5 = *result;
  if (*a2 >= *result)
  {
    v6 = (uint64_t *)(a2 + 2);
    v7 = (uint64_t)&a2[8 * v5 + 2];
    v8 = result + 2;
    if (v5)
      memmove(result + 2, a2 + 2, v5 << 6);
    result = (unint64_t *)memcpy(&v8[8 * v5], &a2[8 * v5 + 2], (size_t)&v6[8 * v4] - v7);
  }
  else if (v4)
  {
    result = (unint64_t *)memmove(result + 2, a2 + 2, v4 << 6);
  }
  *v3 = v4;
  *a2 = 0;
  ++*((_DWORD *)a2 + 2);
  return result;
}

uint64_t re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::addNew(_anonymous_namespace_ *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;

  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::internalAdd(a1, a2, a3);
  else
    return *((_QWORD *)a1 + 1) + 16 * v6 + 8;
}

uint64_t re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::internalAdd(_anonymous_namespace_ *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::resize((uint64_t *)a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v11;
  v17 = *a3;
  v18 = (_QWORD *)(*((_QWORD *)a1 + 1) + 16 * v16);
  *v18 = *a2;
  v18[1] = v17;
  v19 = *((_QWORD *)a1 + 4) - v15;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v19;
  re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::updateHashes((uint64_t)a1, (_QWORD *)(*((_QWORD *)a1 + 1) + 16 * v16));
  return *((_QWORD *)a1 + 1) + 16 * v16 + 8;
}

{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::resize(a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = *(_QWORD *)a1;
  v12 = v9 % v10;
  while (1)
  {
    v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v11 + 16 * v12)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    if (v13 < 0x40)
      break;
    if (v12 + 1 == v10)
      v12 = 0;
    else
      ++v12;
    if (v12 == v9 % v10)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  v14 = v11 + 16 * v12;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v12;
  v17 = *a3;
  v18 = (_QWORD *)(*((_QWORD *)a1 + 1) + 16 * v16);
  *v18 = *a2;
  v18[1] = v17;
  v19 = *((_QWORD *)a1 + 4) - v15;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v19;
  re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::updateHashes((uint64_t)a1, (_QWORD *)(*((_QWORD *)a1 + 1) + 16 * v16));
  return *((_QWORD *)a1 + 1) + 16 * v16 + 8;
}

uint64_t re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[3] + a2;
  v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    v5 = 3 * v2;
    v6 = v5 << 6;
    v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7)
      v4 = v7;
    v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::doResize(a1, v3);
}

uint64_t re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::updateHashes(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v3 = a2[1];
  v4 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v5 = (0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31);
  *(_QWORD *)(a1 + 40) ^= v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_QWORD *)(a1 + 48) ^= v5 ^ (result + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9);
  return result;
}

uint64_t re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD v20[2];
  uint64_t v21;
  _OWORD v22[4];

  v4 = a1[7];
  memset(v22, 0, sizeof(v22));
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init(v22, v4, a2);
  v20[0] = a1;
  v5 = a1[2];
  if (v5 >= 0x10)
  {
    v6 = 0;
    v7 = *a1;
    v8 = v5 >> 4;
    while (1)
    {
      v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v20[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF)
        break;
      v6 += 16;
      if (!--v8)
        goto LABEL_9;
    }
    v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    v21 = v10;
    if (v10 != -1)
    {
      do
      {
        re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::internalAdd((_anonymous_namespace_ *)v22, (_QWORD *)(*(_QWORD *)(v20[0] + 8) + 16 * v10), (uint64_t *)(*(_QWORD *)(v20[0] + 8) + 16 * v10 + 8));
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v20);
        v10 = v21;
      }
      while (v21 != -1);
      v5 = a1[2];
    }
  }
LABEL_9:
  v12 = *((_QWORD *)&v22[3] + 1);
  *((_QWORD *)&v22[3] + 1) = a1[7];
  result = *((_QWORD *)&v22[3] + 1);
  v13 = v22[0];
  v14 = v22[1];
  *(_QWORD *)&v22[1] = v5;
  v15 = *a1;
  v16 = a1[1];
  *(_QWORD *)&v22[0] = *a1;
  *((_QWORD *)&v22[0] + 1) = v16;
  v17 = v22[2];
  v18 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v22[3];
  a1[7] = v12;
  *(_OWORD *)((char *)&v22[2] + 8) = v18;
  v19 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v13;
  *((_OWORD *)a1 + 1) = v14;
  *((_OWORD *)a1 + 2) = v17;
  *(_OWORD *)((char *)&v22[1] + 8) = v19;
  if (result)
  {
    if (v16)
      *((_QWORD *)&v22[0] + 1) = 0;
    if (v15)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

_QWORD *re::DynamicArray<re::ProviderHandle>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::BufferArgument>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::BufferArgument>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

re::WrapDeformerModelBuilder *re::WrapDeformerModelBuilder::WrapDeformerModelBuilder(re::WrapDeformerModelBuilder *this, re::Allocator *a2, const re::mtl::Device *a3, uint64_t a4, unint64_t a5, DeformationModelData *a6)
{
  _QWORD *v10;

  *(_QWORD *)this = a3;
  *((_QWORD *)this + 1) = a6;
  v10 = (_QWORD *)re::DeformationModelData::create<re::WrapDeformer,re::WrapDeformerModel>((uint64_t)a6, (uint64_t)a2);
  re::FixedArray<re::WrapDeformerModel::WrapDeformerTarget>::init<>(v10, (uint64_t)a2, a5);
  re::FixedArray<re::StringID>::init<>(v10 + 6, (uint64_t)a2, a5);
  re::FixedArray<unsigned short>::init<unsigned short const&>(v10 + 3, (uint64_t)a2, a4, &re::WrapDeformerModel::kInvalidIndex);
  return this;
}

uint64_t re::DeformationModelData::create<re::WrapDeformer,re::WrapDeformerModel>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 72, 8);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_QWORD *)(v4 + 64) = 0;
  v8[0] = &off_24ED777B0;
  v8[1] = a2;
  v9 = v8;
  v10 = 0;
  v11[3] = v11;
  v11[0] = &off_24ED777B0;
  v11[1] = a2;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)(a1 + 520), v4);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)(a1 + 528), (uint64_t)v11);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v10);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return *(_QWORD *)(a1 + 520);
}

_QWORD *re::FixedArray<re::WrapDeformerModel::WrapDeformerTarget>::init<>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;

  *result = a2;
  result[1] = a3;
  if (!a3)
    return result;
  if (a3 >= 0x666666666666667)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 40, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40 * a3, 8);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *result = 0;
      result[1] = &str_110;
      result[3] = 0;
      result[4] = 0;
      result[2] = 0;
      result += 5;
      --v6;
    }
    while (v6);
  }
  *result = 0;
  result[1] = &str_110;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

float re::WrapDeformerModelBuilder::addWrapTarget(uint64_t a1, unint64_t a2, void **a3, uint64_t a4)
{
  void **v4;
  void **v5;
  _QWORD *v6;
  char **v7;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  _anonymous_namespace_ *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  _DWORD *v20;
  uint64_t v21;
  float result;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  float *v27;
  _DWORD *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  _BYTE v33[18];
  __int16 v34;
  void **v35;
  __int16 v36;
  char **v37;
  id v38[2];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v5 = (void **)a2;
  v43 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 520);
  v7 = (char **)v6[4];
  if ((unint64_t)v7 <= a2)
  {
LABEL_19:
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    *(_OWORD *)v38 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v33 = 136315906;
    *(_QWORD *)&v33[4] = "operator[]";
    *(_WORD *)&v33[12] = 1024;
    *(_DWORD *)&v33[14] = 468;
    v34 = 2048;
    v35 = v5;
    v36 = 2048;
    v37 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_20:
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    *(_OWORD *)v38 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v33 = 136315906;
    *(_QWORD *)&v33[4] = "operator[]";
    *(_WORD *)&v33[12] = 1024;
    *(_DWORD *)&v33[14] = 468;
    v34 = 2048;
    v35 = v4;
    v36 = 2048;
    v37 = (char **)v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = a3;
  *(_WORD *)(v6[5] + 2 * a2) = (_WORD)a3;
  v5 = (void **)v6[1];
  if (v5 <= a3)
    goto LABEL_20;
  v10 = v6[2];
  v11 = v10 + 40 * (_QWORD)a3;
  v12 = *(_QWORD *)(a4 + 24);
  v38[0] = objc_msgSend(**(id **)a1, sel_newBufferWithLength_options_, 12 * (v12 / 3), 0);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v11 + 16), v38);
  if (v38[0])

  v38[0] = objc_msgSend(**(id **)a1, sel_newBufferWithLength_options_, 12 * (v12 / 3), 0);
  v13 = (void **)(v10 + 40 * (_QWORD)v4 + 24);
  NS::SharedPtr<MTL::Texture>::operator=(v13, v38);
  if (v38[0])

  v38[0] = objc_msgSend(**(id **)a1, sel_newBufferWithLength_options_, 12 * (v12 / 3), 0);
  v4 = (void **)(v10 + 40 * (_QWORD)v4 + 32);
  NS::SharedPtr<MTL::Texture>::operator=(v4, v38);
  v14 = (_anonymous_namespace_ *)v38[0];
  if (v38[0])

  v15 = *(const char **)a4;
  *(_QWORD *)v33 = 0;
  *(_QWORD *)&v33[8] = &str_110;
  v16 = *(_QWORD *)v33;
  v17 = *(_QWORD *)&v33[8];
  *(_QWORD *)v33 = 0;
  *(_QWORD *)&v33[8] = &str_110;
  v18 = *(void **)(v11 + 8);
  v19 = (void *)(v16 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v11 & 1);
  *(_QWORD *)(v11 + 8) = v17;
  v38[0] = v19;
  v38[1] = v18;
  *(_QWORD *)v11 = v16;
  re::StringID::destroyString((re::StringID *)v38);
  re::StringID::destroyString((re::StringID *)v33);
  v7 = &selRef_setRate_;
  memcpy(objc_msgSend(*(id *)(v11 + 16), sel_contents), *(const void **)(a4 + 16), 12 * (v12 / 3));
  v5 = (void **)objc_msgSend(*v13, sel_contents);
  v20 = objc_msgSend(*v4, sel_contents);
  if (v12 >= 3)
  {
    v23 = 0;
    v24 = *(_QWORD *)(a4 + 40);
    v25 = v12 / 3;
    v26 = *(_QWORD *)(a4 + 56);
    if (v12 / 3 <= 1)
      v25 = 1;
    v27 = (float *)(*(_QWORD *)(a4 + 48) + 8);
    v28 = (_DWORD *)(*(_QWORD *)(a4 + 32) + 8);
    v29 = 2;
    while (v24 != v23)
    {
      v30 = v29 - 2;
      *((_DWORD *)v5 + v30) = *(v28 - 2);
      v31 = v29 - 1;
      *((_DWORD *)v5 + v31) = *(v28 - 1);
      *((_DWORD *)v5 + v29) = *v28;
      if (v26 == v23)
        goto LABEL_18;
      v20[v30] = *((_DWORD *)v27 - 2);
      v20[v31] = *((_DWORD *)v27 - 1);
      v32 = *v27;
      v27 += 4;
      result = v32;
      *(float *)&v20[v29] = v32;
      ++v23;
      v28 += 4;
      v29 += 3;
      if (v25 == v23)
        return result;
    }
    re::internal::assertLog((re::internal *)6, v21, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v24, v24);
    _os_crash();
    __break(1u);
LABEL_18:
    re::internal::assertLog((re::internal *)6, v21, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v26, v26);
    _os_crash();
    __break(1u);
    goto LABEL_19;
  }
  return result;
}

unint64_t *re::WrapDeformerModelBuilder::setEnvelopeBufferName(re::WrapDeformerModelBuilder *this, unint64_t a2, unint64_t a3, const re::StringID *a4)
{
  _QWORD *v4;

  v4 = *(_QWORD **)(*((_QWORD *)this + 1) + 520);
  if (v4[4] <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_WORD *)(v4[5] + 2 * a2) = a3;
  if (v4[7] <= a3)
    goto LABEL_5;
  return re::StringID::operator=((unint64_t *)(v4[8] + 16 * a3), (uint64_t *)a4);
}

uint64_t re::WrapDeformer::init(uint64_t this, re::RenderManager *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  void **ComputePipelineState;
  _OWORD v11[2];
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[8];
  uint64_t v17;
  char v18;
  _QWORD v19[4];
  _BYTE v20[24];
  int v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  char v26;
  _WORD v27[5];

  if (!*(_BYTE *)(this + 24))
  {
    v3 = this;
    *(_BYTE *)(this + 24) = 1;
    *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
    if (*((_BYTE *)a2 + 264))
    {
      v4 = 0;
      v5 = 0;
      v27[0] = 256;
      do
      {
        v6 = v4;
        v7 = *((unsigned __int8 *)v27 + v5);
        v16[0] = 0;
        v22 = 0;
        memset(v20, 0, sizeof(v20));
        v21 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        memset(v11, 0, sizeof(v11));
        v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v11, 0);
        v13 = 0;
        v14 = 0;
        v15 = 0;
        re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v11, v7);
        v12 = 53;
        re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v20, (re::DynamicString *)v11);
        ComputePipelineState = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v16);
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v3 + 8 * v7 + 8), ComputePipelineState);
        if (v13)
        {
          if (v14)
          {
            (*(void (**)(void))(*(_QWORD *)v13 + 40))();
            v14 = 0;
            v15 = 0;
          }
          v13 = 0;
        }
        if (*(_QWORD *)&v11[0] && (BYTE8(v11[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v11[0] + 40))();
        re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v20);
        this = v19[0];
        if (v19[0])
        {
          if ((v19[1] & 1) != 0)
            this = (*(uint64_t (**)(void))(*(_QWORD *)v19[0] + 40))();
          memset(v19, 0, sizeof(v19));
        }
        if (v16[0])
        {
          this = v17;
          if (v17)
          {
            if ((v18 & 1) != 0)
              this = (*(uint64_t (**)(void))(*(_QWORD *)v17 + 40))();
          }
        }
        v4 = 1;
        v5 = 1;
      }
      while ((v6 & 1) == 0);
      *(_BYTE *)(v3 + 25) = 1;
    }
  }
  return this;
}

double re::WrapDeformer::addDeformationInstance@<D0>(re::WrapDeformer *this@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  char v4;

  *(_QWORD *)&result = 0xFFFFFFFFLL;
  v4 = *((_BYTE *)this + 25) ^ 1 | *a2;
  *(_OWORD *)a3 = xmmword_226167A60;
  *(_QWORD *)(a3 + 16) = 2;
  *(_BYTE *)(a3 + 24) = v4 ^ 1;
  *(_QWORD *)(a3 + 32) = -1;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  return result;
}

uint64_t re::WrapDeformer::allocateBuffers(uint64_t *a1, re::FrameContext *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  re::AttributeTable *v28;
  re::AttributeTable *v29;
  re::AttributeTable *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  re::AttributeTable *v42;
  re::AttributeTable *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unsigned int v55;
  id v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v61;
  _QWORD *v62;
  re::FrameContext *v63;
  int v64;
  __int16 v65;
  int v66;
  char v67;
  uint64_t v68;
  int v69;
  char v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _BYTE v75[12];
  __int16 v76;
  int v77;
  __int16 v78;
  unint64_t v79;
  __int16 v80;
  unint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  re::globalAllocators((re *)a1);
  v9 = *((_QWORD *)a2 + 3);
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, 24, 8);
  v62 = a4;
  v63 = a2;
  v12 = (void *)*((_QWORD *)a2 + 3);
  v13 = *(_QWORD *)(*a4 + 48);
  v11[1] = v13;
  v11[2] = 0;
  *v11 = v12;
  if (v13)
  {
    if (v13 >= 0x492492492492493)
      goto LABEL_44;
    v12 = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*(_QWORD *)v12 + 32))(v12, 56 * v13, 8);
    v11[2] = v12;
    if (!v12)
    {
LABEL_45:
      re::internal::assertLog((re::internal *)4, v14, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    v4 = (unint64_t)v12;
    if (v13 != 1)
    {
      bzero(v12, 56 * v13 - 56);
      v4 += 56 * v13 - 56;
    }
    *(_QWORD *)(v4 + 48) = 0;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)v4 = 0u;
  }
  v15 = re::globalAllocators((re *)v12)[2];
  *(_QWORD *)&v82 = &off_24ED77758;
  *((_QWORD *)&v83 + 1) = v15;
  *(_QWORD *)&v84 = &v82;
  v61 = (*(uint64_t (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)v9 + 16))(v9, v11, &v82);
  if ((_QWORD)v84)
  {
    (**(void (***)(_QWORD))v84)(v84);
    if ((__int128 *)v84 != &v82)
      (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 40))(*((_QWORD *)&v83 + 1));
  }
  v59 = *(_QWORD *)(*v62 + 48);
  if (v59)
  {
    v16 = 0;
    while (1)
    {
      v17 = a3;
      re::DeformationInstanceIterator::Instance::Instance(&v71, v62, v16);
      v18 = *(_QWORD **)(*(_QWORD *)(v73 + 344) + 520);
      v19 = *(unsigned __int16 *)(v73 + 392);
      v20 = v18[4];
      if (v20 <= v19)
      {
        v68 = 0;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v82 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v75 = 136315906;
        *(_QWORD *)&v75[4] = "operator[]";
        v76 = 1024;
        v77 = 476;
        v78 = 2048;
        v79 = v19;
        v80 = 2048;
        v81 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_40:
        v68 = 0;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v82 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v75 = 136315906;
        *(_QWORD *)&v75[4] = "operator[]";
        v76 = 1024;
        v77 = 468;
        v78 = 2048;
        v79 = v19;
        v80 = 2048;
        v81 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_41:
        v68 = 0;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v82 = 0u;
        v13 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v75 = 136315906;
        *(_QWORD *)&v75[4] = "operator[]";
        v76 = 1024;
        v77 = 476;
        v78 = 2048;
        v79 = v4;
        v80 = 2048;
        v81 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_42:
        re::internal::assertLog((re::internal *)6, v40, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v41, v40);
        _os_crash();
        __break(1u);
LABEL_43:
        re::internal::assertLog((re::internal *)6, v47, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v48, v47);
        _os_crash();
        __break(1u);
LABEL_44:
        re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 56, v13);
        _os_crash();
        __break(1u);
        goto LABEL_45;
      }
      v21 = v74;
      v4 = *(unsigned __int16 *)(v18[5] + 2 * v19);
      v22 = re::DeformationVertexBufferState::inputVertexCount(v74, 1u);
      v19 = v72;
      v5 = *(_QWORD *)(v61 + 8);
      if (v5 <= v72)
        goto LABEL_40;
      v23 = v22;
      v13 = *(_QWORD *)(v61 + 16);
      v24 = (_QWORD *)(v13 + 56 * v72);
      re::FrameContext::perFrameAlloc(v63, 4uLL, 4uLL, (uint64_t)&v82);
      v25 = v82;
      v26 = v83;
      v27 = *((_QWORD *)&v82 + 1);
      *(_DWORD *)(v82 + DWORD2(v82)) = v23;
      *v24 = v25;
      v24[1] = v27;
      v24[2] = v26;
      v20 = v18[7];
      if (v20 <= v4)
        goto LABEL_41;
      v5 = 12 * v23;
      re::StringID::StringID((re::StringID *)v75, (const StringID *)(v18[8] + 16 * v4));
      v28 = (re::AttributeTable *)re::DeformationInstanceIterator::Instance::meshPart((uint64_t)&v71, a1[4]);
      v29 = v28;
      do
      {
        v30 = v29;
        v29 = (re::AttributeTable *)*((_QWORD *)v29 + 1);
      }
      while (v29 && !*((_QWORD *)v30 + 9));
      *(_QWORD *)&v82 = *(_QWORD *)v75 >> 1;
      v31 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v30 + 6, &v82);
      if (v31 == -1)
        v32 = 0;
      else
        v32 = (unsigned __int8 *)(*((_QWORD *)v30 + 7) + 16 * v31 + 8);
      v33 = 4 * v23;
      re::FrameContext::perFrameAlloc(v63, v33, 4uLL, (uint64_t)&v82);
      v34 = v82;
      v36 = DWORD2(v82);
      v35 = HIDWORD(v82);
      v37 = v83;
      v38 = v13 + 56 * v19;
      *(_QWORD *)(v38 + 24) = v82;
      *(_DWORD *)(v38 + 32) = v36;
      *(_DWORD *)(v38 + 36) = v35;
      *(_QWORD *)(v38 + 40) = v37;
      v4 = v34 + v36;
      if (v32)
      {
        v39 = re::AttributeTable::buffers(v28);
        v41 = *v32;
        if (v40 <= v41)
          goto LABEL_42;
        memcpy((void *)v4, (char *)objc_msgSend(*(id *)(v39 + 16 * v41), sel_contents) + *(unsigned int *)(v39 + 16 * v41 + 8), v33);
      }
      else if (v35 >= 4)
      {
        memset_pattern16((void *)(v34 + v36), &unk_226167A70, v35 & 0xFFFFFFFC);
      }
      v42 = v28;
      do
      {
        v43 = v42;
        v42 = (re::AttributeTable *)*((_QWORD *)v42 + 1);
      }
      while (v42 && !*((_QWORD *)v43 + 9));
      *(_QWORD *)&v82 = 0x2DB839E585F57D8ALL;
      v44 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v43 + 6, &v82);
      if (v44 != -1)
      {
        v45 = *((_QWORD *)v43 + 7) + 16 * v44;
        v46 = re::AttributeTable::buffers(v28);
        v48 = *(unsigned __int8 *)(v45 + 8);
        if (v47 <= v48)
          goto LABEL_43;
        *(_QWORD *)(v13 + 56 * v19 + 48) = v46 + 16 * v48;
      }
      a3 = v17;
      if ((_DWORD)v17 == 1)
        break;
      if (!(_DWORD)v17)
      {
        re::FrameContext::perFrameAlloc(v63, v5, 0x10uLL, (uint64_t)&v82);
        WORD2(v68) = 257;
        LODWORD(v68) = 65548;
        v70 = 30;
        v69 = 0;
        v49 = (uint64_t)v21;
        v50 = 0;
LABEL_36:
        re::DeformationVertexBufferState::setOutputBuffer(v49, 1u, v50, (uint64_t)&v82, (uint64_t)&v68);
      }
      re::StringID::destroyString((re::StringID *)v75);
      if (++v16 == v59)
        return v61;
    }
    v51 = v73;
    v52 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](*v71 + 8, v72);
    v53 = *(_QWORD **)(v51 + 360);
    v54 = v62[2];
    v65 = 257;
    v64 = 65548;
    v67 = 30;
    v66 = 0;
    v55 = re::DeformationBufferAllocator::alloc(v53, v54, 1, (uint64_t)&v64, *(unsigned __int8 *)(v52 + 16), v5);
    v4 = re::DeformationBufferAllocator::allocationData(*(re::DeformationBufferAllocator **)(v51 + 360), *(unsigned __int8 *)(v52 + 16), v55);
    WORD2(v68) = 257;
    LODWORD(v68) = 65548;
    v70 = 30;
    v69 = 0;
    v56 = objc_msgSend(*(id *)(v4 + 24), sel_contents);
    v57 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)&v82 = v56;
    *((_QWORD *)&v82 + 1) = *(_QWORD *)(v4 + 32);
    *(_QWORD *)&v83 = v57;
    v49 = (uint64_t)v21;
    v50 = 1;
    goto LABEL_36;
  }
  return v61;
}

uint64_t re::DeformationVertexBufferState::inputVertexCount(_QWORD *a1, unsigned __int8 a2)
{
  unsigned int v4;
  unsigned __int8 v6;
  unsigned __int8 v7;

  v6 = a2;
  re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)a1, a2);
  v4 = *(_DWORD *)(a1[8]
                 + 32
                 * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(a1 + 7, &v6)+ 20);
  v7 = a2;
  re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)a1, a2);
  return v4
       / *(unsigned __int16 *)(a1[16]
                             + 20
                             * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(a1 + 15, &v7)+ 4);
}

uint64_t re::WrapDeformer::deformGPU(uint64_t a1, uint64_t a2, void **this, _QWORD *a4)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v8;
  re *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  NSObject *v27;
  _QWORD *v29;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _BYTE v40[28];
  __int16 v41;
  unint64_t v42;
  uint8_t buf[32];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  re::mtl::ComputeCommandEncoder::pushDebugGroup(this, (re::ns *)"Perform Wrap");
  v32 = *(_QWORD *)(*a4 + 48);
  if (v32)
  {
    v8 = 0;
    v29 = a4;
    do
    {
      v9 = (re *)re::DeformationInstanceIterator::Instance::Instance(&v35, a4, v8);
      v11 = **(unsigned int **)(*(_QWORD *)(v37 + 352) + 128);
      if ((_DWORD)v11 == -1)
      {
        v27 = *re::graphicsLogObjects(v9);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_224FE9000, v27, OS_LOG_TYPE_DEFAULT, "Wrap deformer has invalid target index, skipping.", buf, 2u);
        }
      }
      else
      {
        v12 = *(_QWORD **)(*(_QWORD *)(v37 + 344) + 520);
        v13 = *(unsigned __int16 *)(v37 + 392);
        v14 = v12[4];
        if (v14 <= v13)
        {
          v39 = 0;
          v45 = 0u;
          v46 = 0u;
          v44 = 0u;
          memset(buf, 0, sizeof(buf));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v40 = 136315906;
          *(_QWORD *)&v40[4] = "operator[]";
          *(_WORD *)&v40[12] = 1024;
          *(_DWORD *)&v40[14] = 476;
          *(_WORD *)&v40[18] = 2048;
          *(_QWORD *)&v40[20] = v13;
          v41 = 2048;
          v42 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_16:
          re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v5, v15);
          _os_crash();
          __break(1u);
LABEL_17:
          v39 = 0;
          v45 = 0u;
          v46 = 0u;
          v44 = 0u;
          memset(buf, 0, sizeof(buf));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v40 = 136315906;
          *(_QWORD *)&v40[4] = "operator[]";
          *(_WORD *)&v40[12] = 1024;
          *(_DWORD *)&v40[14] = 476;
          *(_WORD *)&v40[18] = 2048;
          *(_QWORD *)&v40[20] = v4;
          v41 = 2048;
          v42 = v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_18:
          v39 = 0;
          v45 = 0u;
          v46 = 0u;
          v44 = 0u;
          memset(buf, 0, sizeof(buf));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v40 = 136315906;
          *(_QWORD *)&v40[4] = "operator[]";
          *(_WORD *)&v40[12] = 1024;
          *(_DWORD *)&v40[14] = 468;
          *(_WORD *)&v40[18] = 2048;
          *(_QWORD *)&v40[20] = v13;
          v41 = 2048;
          v42 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v5 = *(_QWORD *)(v37 + 384) + v11;
        v15 = a4[6];
        if (v15 <= v5)
          goto LABEL_16;
        v4 = (_QWORD *)*(unsigned __int16 *)(v12[5] + 2 * v13);
        v13 = v12[1];
        if (v13 <= (unint64_t)v4)
          goto LABEL_17;
        v13 = v36;
        v14 = *(_QWORD *)(a2 + 8);
        if (v14 <= v36)
          goto LABEL_18;
        v16 = v38;
        v17 = a4[5] + 312 * v5;
        v18 = v12[2];
        v19 = *(_QWORD *)(a2 + 16) + 56 * v36;
        v20 = a1 + 8 * (*(_QWORD *)(v19 + 48) != 0);
        v34 = objc_msgSend(*(id *)(v20 + 8), sel_maxTotalThreadsPerThreadgroup);
        v33 = re::DeformationVertexBufferState::inputVertexCount(v16, 1u);
        objc_msgSend(*this, "setComputePipelineState:", *(_QWORD *)(v20 + 8));
        v21 = (_QWORD *)(v18 + 40 * v4);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", v21[2], 0, 0);
        buf[0] = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v17, 1u);
        v5 = v17 + 184;
        v22 = *(_QWORD *)(*(_QWORD *)(v17 + 192)
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(v17 + 184), buf)+ 24);
        buf[0] = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v17, 1u);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", v22, *(unsigned int *)(*(_QWORD *)(v17 + 192)+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(v17 + 184), buf)+ 16), 1);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", v21[3], 0, 2);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", v21[4], 0, 3);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v19 + 40), *(unsigned int *)(v19 + 32), 4);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v19 + 16), *(unsigned int *)(v19 + 8), 5);
        v23 = *(_QWORD *)(v19 + 48);
        if (v23)
          objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)v23, *(unsigned int *)(v23 + 8), 6);
        buf[0] = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v16, 1u);
        v24 = *(_QWORD *)(v16[8]
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v16 + 7, buf)+ 24);
        buf[0] = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v16, 1u);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", v24, *(unsigned int *)(v16[8]+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v16 + 7, buf)+ 16), 7);
        buf[0] = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v16, 1u);
        v4 = v16 + 23;
        v25 = *(_QWORD *)(v16[24]
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v16 + 23, buf)+ 24);
        buf[0] = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v16, 1u);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", v25, *(unsigned int *)(v16[24]+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v16 + 23, buf)+ 16), 8);
        v26 = *this;
        *(_QWORD *)buf = (v33 + v34 - 1) / v34;
        *(int64x2_t *)&buf[8] = vdupq_n_s64(1uLL);
        *(_QWORD *)v40 = v34;
        *(_OWORD *)&v40[8] = *(_OWORD *)&buf[8];
        objc_msgSend(v26, "dispatchThreadgroups:threadsPerThreadgroup:", buf, v40);
        a4 = v29;
      }
      ++v8;
    }
    while (v32 != v8);
  }
  return objc_msgSend(*this, "popDebugGroup");
}

void re::WrapDeformer::deformCPU(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  re *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  id *v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  _DWORD *v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  float *v52;
  float32x4_t v53;
  float32x4_t v54;
  uint64_t v55;
  float32x4_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  int v72;
  const char *v73;
  __int16 v74;
  int v75;
  __int16 v76;
  unint64_t v77;
  __int16 v78;
  char *v79;
  uint8_t buf[16];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v65 = *(_QWORD *)(*a3 + 48);
  if (v65)
  {
    v5 = a2;
    v6 = 0;
    v66 = a3;
    do
    {
      v7 = (re *)re::DeformationInstanceIterator::Instance::Instance(&v67, a3, v6);
      v8 = v68;
      v9 = *(_QWORD *)(v5 + 8);
      if (v9 <= v68)
        goto LABEL_29;
      v10 = *(_QWORD *)(v5 + 16);
      v11 = *(_QWORD *)(v10 + 56 * v68 + 48);
      if (v11)
      {
        v7 = (re *)objc_msgSend(*(id *)v11, sel_contents);
        v9 = (unint64_t)v7 + *(unsigned int *)(v11 + 8);
      }
      else
      {
        v9 = 0;
      }
      v12 = *(_DWORD **)(*(_QWORD *)(v69 + 352) + 128);
      if (!v12 || *v12 == -1)
      {
        v57 = *re::graphicsLogObjects(v7);
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_224FE9000, v57, OS_LOG_TYPE_DEFAULT, "Wrap deformer has invalid target index, skipping.", buf, 2u);
        }
      }
      else
      {
        v13 = *(_QWORD **)(*(_QWORD *)(v69 + 344) + 520);
        v3 = *(unsigned __int16 *)(v69 + 392);
        v4 = (char *)v13[4];
        if ((unint64_t)v4 <= v3)
          goto LABEL_30;
        v3 = *(unsigned __int16 *)(v13[5] + 2 * v3);
        v4 = (char *)v13[1];
        if ((unint64_t)v4 <= v3)
          goto LABEL_31;
        v14 = v10 + 56 * v8;
        v62 = *(unsigned int *)(v14 + 32);
        v63 = *(_QWORD *)(v14 + 24);
        v15 = v70;
        v16 = (id *)(v13[2] + 40 * v3);
        v17 = (unint64_t)objc_msgSend(v16[2], sel_length);
        v18 = (int *)objc_msgSend(v16[2], sel_contents);
        v3 = (unint64_t)objc_msgSend(v16[3], sel_contents);
        v4 = (char *)objc_msgSend(v16[4], sel_contents);
        v20 = *(_QWORD *)(re::BucketArray<re::ActiveDeformation,8ul>::operator[](v66[1], v68) + 384)
            + *v12;
        v21 = v66[6];
        if (v21 <= v20)
          goto LABEL_32;
        v22 = v66[5] + 312 * v20;
        buf[0] = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v22, 1u);
        v23 = *(_QWORD *)(v22 + 192)
            + 32
            * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(v22 + 184), buf);
        v59 = *(unsigned int *)(v23 + 16);
        v60 = *(_QWORD *)(v23 + 8);
        v61 = *(_DWORD *)(v23 + 20);
        buf[0] = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v15, 1u);
        v24 = v15[8]
            + 32
            * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v15 + 7, buf);
        v58 = *(_QWORD *)(v24 + 8);
        v8 = *(unsigned int *)(v24 + 16);
        buf[0] = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v15, 1u);
        v25 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v15 + 23, buf);
        if (v17 >= 0xC)
        {
          v30 = 0;
          v31 = v60 + v59;
          v32 = v61 / 0xC;
          v33 = (_DWORD *)(*(_QWORD *)(v15[24] + 32 * v25 + 8) + *(unsigned int *)(v15[24] + 32 * v25 + 16) + 8);
          while (1)
          {
            v34 = v9 ? *(_DWORD *)(v9 + 4 * v30) : v30;
            v35 = 3 * v34;
            v36 = v18[3 * v34];
            if (v32 <= v36)
              break;
            v37 = v18[v35 + 1];
            if (v32 <= v37)
              goto LABEL_27;
            v38 = v18[v35 + 2];
            if (v32 <= v38)
              goto LABEL_28;
            v39 = v31 + 12 * (int)v36;
            v27.i64[0] = *(_QWORD *)v39;
            v27.i32[2] = *(_DWORD *)(v39 + 8);
            v40 = v31 + 12 * (int)v37;
            v28.i64[0] = *(_QWORD *)v40;
            v28.i32[2] = *(_DWORD *)(v40 + 8);
            v41 = v31 + 12 * (int)v38;
            v29.i64[0] = *(_QWORD *)v41;
            v29.i32[2] = *(_DWORD *)(v41 + 8);
            v42 = vaddq_f32(vaddq_f32(vmulq_n_f32(v27, *(float *)(v3 + 12 * v34)), vmulq_n_f32(v28, *(float *)(v3 + 12 * v34 + 4))), vmulq_n_f32(v29, *(float *)(v3 + 12 * v34 + 8)));
            v43 = vsubq_f32(v28, v27);
            v44 = vsubq_f32(v29, v27);
            v45 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v44), (int8x16_t)v44, 0xCuLL), vnegq_f32(v43)), v44, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v43, (int32x4_t)v43), (int8x16_t)v43, 0xCuLL));
            v46 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), (int8x16_t)v45, 0xCuLL);
            v47 = (int32x4_t)vmulq_f32(v45, v45);
            v47.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v47, 2), *(float32x2_t *)v47.i8)).u32[0];
            *(float32x2_t *)v45.f32 = vrsqrte_f32((float32x2_t)v47.u32[0]);
            *(float32x2_t *)v45.f32 = vmul_f32(*(float32x2_t *)v45.f32, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32)));
            v47.i32[0] = vmul_f32(*(float32x2_t *)v45.f32, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32))).u32[0];
            v48 = (int32x4_t)vmulq_f32(v43, v43);
            v49 = vmulq_n_f32(v46, *(float *)v47.i32);
            v47.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v48, 2), vadd_f32(*(float32x2_t *)v48.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v48.i8, 1))).u32[0];
            *(float32x2_t *)v48.i8 = vrsqrte_f32((float32x2_t)v47.u32[0]);
            *(float32x2_t *)v48.i8 = vmul_f32(*(float32x2_t *)v48.i8, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8)));
            v50 = vmulq_n_f32(v43, vmul_f32(*(float32x2_t *)v48.i8, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8))).f32[0]);
            v51 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), (int8x16_t)v50, 0xCuLL), vnegq_f32(v49)), v50, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL));
            v29 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), v51, 0xCuLL);
            v52 = (float *)&v4[12 * v34];
            v53 = vaddq_f32(v42, vmulq_n_f32(v50, *v52));
            v28 = vmulq_n_f32(v29, v52[1]);
            v54 = vaddq_f32(v53, v28);
            v27 = vmulq_n_f32(v49, v52[2]);
            v55 = v58 + v8 + 12 * v34;
            v28.i64[0] = *(_QWORD *)v55;
            v28.i32[2] = *(_DWORD *)(v55 + 8);
            v56 = vmlaq_n_f32(vmulq_n_f32(vaddq_f32(v27, v54), *(float *)(v63 + v62 + 4 * v30)), v28, 1.0 - *(float *)(v63 + v62 + 4 * v30));
            *((_QWORD *)v33 - 1) = v56.i64[0];
            *v33 = v56.i32[2];
            ++v30;
            v33 += 3;
            if (v17 / 0xC == v30)
              goto LABEL_24;
          }
          re::internal::assertLog((re::internal *)6, v26, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v36, v32);
          _os_crash();
          __break(1u);
LABEL_27:
          re::internal::assertLog((re::internal *)6, v26, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v37, v32);
          v38 = _os_crash();
          __break(1u);
LABEL_28:
          re::internal::assertLog((re::internal *)6, v26, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v38, v32);
          _os_crash();
          __break(1u);
LABEL_29:
          v71 = 0;
          v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v72 = 136315906;
          v73 = "operator[]";
          v74 = 1024;
          v75 = 468;
          v76 = 2048;
          v77 = v8;
          v78 = 2048;
          v79 = (char *)v9;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_30:
          v71 = 0;
          v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v72 = 136315906;
          v73 = "operator[]";
          v74 = 1024;
          v75 = 476;
          v76 = 2048;
          v77 = v3;
          v78 = 2048;
          v79 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_31:
          v71 = 0;
          v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v72 = 136315906;
          v73 = "operator[]";
          v74 = 1024;
          v75 = 476;
          v76 = 2048;
          v77 = v3;
          v78 = 2048;
          v79 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_32:
          re::internal::assertLog((re::internal *)6, v19, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v20, v21);
          _os_crash();
          __break(1u);
        }
      }
LABEL_24:
      ++v6;
      a3 = v66;
      v5 = a2;
    }
    while (v6 != v65);
  }
}

re::StringID *re::WrapDeformerModelUtil::envelopeBufferNameForWrapDataIndex@<X0>(re::WrapDeformerModelUtil *this@<X0>, const DeformationModelData *a2@<X1>, re::StringID *a3@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 65);
  if (v3 && *(_QWORD *)(v3 + 56) > (unint64_t)a2)
    return re::StringID::StringID(a3, (const StringID *)(*(_QWORD *)(v3 + 64) + 16 * a2));
  else
    return re::StringID::invalid(a3);
}

re::StringID *re::WrapDeformerModelUtil::targetMeshInstanceNameForWrapDataIndex@<X0>(re::WrapDeformerModelUtil *this@<X0>, const DeformationModelData *a2@<X1>, re::StringID *a3@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 65);
  if (v3 && *(_QWORD *)(v3 + 8) > (unint64_t)a2)
    return re::StringID::StringID(a3, (const StringID *)(*(_QWORD *)(v3 + 16) + 40 * a2));
  else
    return re::StringID::invalid(a3);
}

void re::WrapDeformerModelUtil::faceIndicesForWrapDataIndex(re::WrapDeformerModelUtil *this@<X0>, const DeformationModelData *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _anonymous_namespace_ *v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE v9[8];
  void *__src;
  unint64_t v11;
  id v12;
  int v13;
  unsigned int v14;

  v4 = *((_QWORD *)this + 65);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  if (v4 && *(_QWORD *)(v4 + 8) > (unint64_t)a2)
  {
    v5 = *(_QWORD *)(v4 + 16) + 40 * a2;
    v12 = *(id *)(v5 + 16);
    v13 = 0;
    v14 = objc_msgSend(*(id *)(v5 + 16), sel_length);
    re::ReadOnlyCPUAccessibleBufferSliceContent::make(&v12, (uint64_t)v9);
    if (v9[0])
    {
      v7 = v11;
      v8 = v11 >> 2;
      memcpy(*(void **)(a3 + 16), __src, v7 & 0xFFFFFFFFFFFFFFFCLL);
    }
    re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)v9);
    if (v12)

  }
}

void re::WrapDeformerModelUtil::faceCoordinatesForWrapDataIndex(re::WrapDeformerModelUtil *this@<X0>, const DeformationModelData *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _anonymous_namespace_ *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  char v15[8];
  uint64_t v16;
  unint64_t v17;
  id v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 65);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v4 && *(_QWORD *)(v4 + 8) > (unint64_t)a2)
  {
    v5 = *(_QWORD *)(v4 + 16) + 40 * a2;
    v18 = *(id *)(v5 + 24);
    v19 = 0;
    v20 = objc_msgSend(*(id *)(v5 + 24), sel_length);
    re::ReadOnlyCPUAccessibleBufferSliceContent::make(&v18, (uint64_t)v15);
    if (v15[0])
    {
      v8 = v16;
      v7 = v17;
      v9 = v17 / 0xC;
      if (v7 >= 0xC)
      {
        v11 = 0;
        if (v9 <= 1)
          v12 = 1;
        else
          v12 = v9;
        v13 = (_DWORD *)(v8 + 8);
        do
        {
          v14 = a3[1];
          if (v14 <= v11)
          {
            v21 = 0;
            v33 = 0u;
            v34 = 0u;
            v31 = 0u;
            v32 = 0u;
            v30 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v22 = 136315906;
            v23 = "operator[]";
            v24 = 1024;
            v25 = 468;
            v26 = 2048;
            v27 = v11;
            v28 = 2048;
            v29 = v14;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(_QWORD *)&v10 = *((_QWORD *)v13 - 1);
          DWORD2(v10) = *v13;
          *(_OWORD *)(a3[2] + 16 * v11++) = v10;
          v13 += 3;
        }
        while (v12 != v11);
      }
    }
    re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)v15);
    if (v18)

  }
}

void re::WrapDeformerModelUtil::positionOffsetsForWrapDataIndex(re::WrapDeformerModelUtil *this@<X0>, const DeformationModelData *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _anonymous_namespace_ *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  char v15[8];
  uint64_t v16;
  unint64_t v17;
  id v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 65);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v4 && *(_QWORD *)(v4 + 8) > (unint64_t)a2)
  {
    v5 = *(_QWORD *)(v4 + 16) + 40 * a2;
    v18 = *(id *)(v5 + 32);
    v19 = 0;
    v20 = objc_msgSend(*(id *)(v5 + 32), sel_length);
    re::ReadOnlyCPUAccessibleBufferSliceContent::make(&v18, (uint64_t)v15);
    if (v15[0])
    {
      v8 = v16;
      v7 = v17;
      v9 = v17 / 0xC;
      if (v7 >= 0xC)
      {
        v11 = 0;
        if (v9 <= 1)
          v12 = 1;
        else
          v12 = v9;
        v13 = (_DWORD *)(v8 + 8);
        do
        {
          v14 = a3[1];
          if (v14 <= v11)
          {
            v21 = 0;
            v33 = 0u;
            v34 = 0u;
            v31 = 0u;
            v32 = 0u;
            v30 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v22 = 136315906;
            v23 = "operator[]";
            v24 = 1024;
            v25 = 468;
            v26 = 2048;
            v27 = v11;
            v28 = 2048;
            v29 = v14;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(_QWORD *)&v10 = *((_QWORD *)v13 - 1);
          DWORD2(v10) = *v13;
          *(_OWORD *)(a3[2] + 16 * v11++) = v10;
          v13 += 3;
        }
        while (v12 != v11);
      }
    }
    re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)v15);
    if (v18)

  }
}

uint64_t re::WrapDeformerModelUtil::computeWrapDeformerModelSizeExcludingMetalBuffers(re::WrapDeformerModelUtil *this, const DeformationModelData *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  const char **v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  const char **v9;
  size_t v10;

  v2 = (_QWORD *)*((_QWORD *)this + 65);
  if (!v2)
    return 0;
  v3 = v2[7];
  v4 = 2 * v2[4] + 16 * v3 + 72;
  if (v3)
  {
    v5 = (const char **)(v2[8] + 8);
    do
    {
      if ((*(_BYTE *)(v5 - 1) & 1) != 0)
        v6 = strlen(*v5) + 1;
      else
        v6 = 0;
      v4 += v6;
      v5 += 2;
      --v3;
    }
    while (v3);
  }
  v7 = v2[1];
  v8 = v4 + 40 * v7;
  if (v7)
  {
    v9 = (const char **)(v2[2] + 8);
    do
    {
      if ((*(_BYTE *)(v9 - 1) & 1) != 0)
        v10 = strlen(*v9) + 1;
      else
        v10 = 0;
      v8 += v10;
      v9 += 5;
      --v7;
    }
    while (v7);
  }
  return v8;
}

void re::WrapDeformer::~WrapDeformer(re::WrapDeformer *this)
{
  uint64_t v2;
  void *v3;

  v2 = 16;
  do
  {
    v3 = *(void **)((char *)this + v2);
    if (v3)
    {

      *(_QWORD *)((char *)this + v2) = 0;
    }
    v2 -= 8;
  }
  while (v2);
}

{
  uint64_t v2;
  void *v3;

  v2 = 16;
  while (1)
  {
    v3 = *(void **)((char *)this + v2);
    if (v3)
    {

      *(_QWORD *)((char *)this + v2) = 0;
    }
    v2 -= 8;
    if (!v2)
      JUMPOUT(0x2276933B8);
  }
}

void re::internal::Callable<re::WrapDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::WrapDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t result;

  v2 = *a2;
  result = **a2;
  if (result)
  {
    if (v2[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v2[2]);
      v2[1] = 0;
      v2[2] = 0;
    }
    *v2 = 0;
  }
  return result;
}

_QWORD *re::internal::Callable<re::WrapDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED77758;
  return result;
}

_QWORD *re::internal::Callable<re::WrapDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED77758;
  return result;
}

uint64_t re::internal::Callable<re::WrapDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::size()
{
  return 16;
}

void _ZNSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_12WrapDeformerENS2_17WrapDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EED0Ev()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_12WrapDeformerENS2_17WrapDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED777B0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_12WrapDeformerENS2_17WrapDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE7__cloneEPNS0_6__baseISI_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED777B0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_12WrapDeformerENS2_17WrapDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EEclEOSE_(uint64_t result, _QWORD **a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  re::StringID *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(result + 8);
    re::FixedArray<re::StringID>::deinit(v2 + 6);
    v4 = v2[3];
    if (v4)
    {
      if (v2[4])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, v2[5]);
        v2[4] = 0;
        v2[5] = 0;
      }
      v2[3] = 0;
    }
    if (*v2)
    {
      v5 = v2[1];
      if (v5)
      {
        v6 = (re::StringID *)v2[2];
        v7 = 40 * v5;
        do
        {
          v8 = (void *)*((_QWORD *)v6 + 4);
          if (v8)
          {

            *((_QWORD *)v6 + 4) = 0;
          }
          v9 = (void *)*((_QWORD *)v6 + 3);
          if (v9)
          {

            *((_QWORD *)v6 + 3) = 0;
          }
          v10 = (void *)*((_QWORD *)v6 + 2);
          if (v10)
          {

            *((_QWORD *)v6 + 2) = 0;
          }
          re::StringID::destroyString(v6);
          v6 = (re::StringID *)((char *)v6 + 40);
          v7 -= 40;
        }
        while (v7);
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v2 + 40))(*v2, v2[2]);
        v2[1] = 0;
        v2[2] = 0;
      }
      *v2 = 0;
    }
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_12WrapDeformerENS2_17WrapDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_12WrapDeformerENS2_17WrapDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE11target_typeEv()
{
}

re::RenderGraphManager *re::RenderGraphManager::RenderGraphManager(re::RenderGraphManager *this)
{
  uint64_t v2;

  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_OWORD *)this = 0u;
  *((_QWORD *)this + 14) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 26) = 0;
  *((_WORD *)this + 60) = 257;
  *((_BYTE *)this + 122) = 1;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *(_OWORD *)((char *)this + 156) = 0u;
  *(_QWORD *)((char *)this + 172) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_DWORD *)this + 54) = 0;
  *(_QWORD *)((char *)this + 220) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_DWORD *)this + 66) = 0;
  *(_QWORD *)((char *)this + 268) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  v2 = re::globalAllocators(this)[2];
  *((_DWORD *)this + 94) = 0;
  *((_BYTE *)this + 380) = 0;
  *((_BYTE *)this + 400) = 0;
  *((_OWORD *)this + 24) = 0u;
  *((_DWORD *)this + 102) = 0;
  *((_BYTE *)this + 412) = 0;
  *((_QWORD *)this + 83) = 0;
  *((_DWORD *)this + 164) = 0;
  *((_OWORD *)this + 40) = 0u;
  *((_QWORD *)this + 79) = 0;
  *((_DWORD *)this + 168) = 0;
  *((_BYTE *)this + 368) = 0;
  *((_OWORD *)this + 22) = 0u;
  *((_QWORD *)this + 42) = v2;
  *((_QWORD *)this + 43) = 0;
  *(_OWORD *)((char *)this + 484) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *((_QWORD *)this + 87) = 0;
  *(_OWORD *)((char *)this + 680) = 0u;
  return this;
}

void re::RenderGraphManager::~RenderGraphManager(re::RenderGraphManager *this)
{
  uint64_t v2;

  re::RenderGraphManager::deinit(this);
  v2 = *((_QWORD *)this + 79);
  if (v2)
  {
    if (*((_QWORD *)this + 83))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 83) = 0;
    *((_QWORD *)this + 80) = 0;
    *((_QWORD *)this + 81) = 0;
    *((_QWORD *)this + 79) = 0;
    ++*((_DWORD *)this + 164);
  }
  *((_QWORD *)this + 61) = 0;
  ++*((_DWORD *)this + 124);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 424);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 312);
  re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::deinit((uint64_t *)this + 29);
  re::HashTable<re::StringID,re::FixedArray<re::RenderGraphProviderBase const*>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 23);
  re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 17);
  re::RenderGraphProcessorContainer::reset(this);
  re::RenderGraphProcessorContainer::~RenderGraphProcessorContainer(this);
}

re *re::RenderGraphManager::deinit(re::RenderGraphManager *this)
{
  re::RenderGraphManager *v1;
  uint64_t v2;
  void (****v3)(_QWORD);
  uint64_t v4;
  void (***v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re *v14;
  void (***v15)(_QWORD);
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int16 v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  re *result;
  re::RenderGraphResourceAllocationManager *v36;
  uint64_t v37;
  re::RenderGraphPersistentResourceManager *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void (***v44)(_QWORD);
  uint64_t v45;
  _QWORD v46[2];
  uint64_t v47;

  v1 = this;
  v2 = *((_QWORD *)this + 81);
  if (v2)
  {
    v3 = (void (****)(_QWORD))*((_QWORD *)this + 83);
    v4 = 8 * v2;
    do
    {
      v5 = *v3;
      if (*v3)
      {
        v6 = re::globalAllocators(this)[2];
        (**v5)(v5);
        this = (re::RenderGraphManager *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v6 + 40))(v6, v5);
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  *((_QWORD *)v1 + 81) = 0;
  ++*((_DWORD *)v1 + 164);
  v7 = *((unsigned int *)v1 + 66);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = (int *)(*((_QWORD *)v1 + 31) + 8);
    while (1)
    {
      v10 = *v9;
      v9 += 10;
      if (v10 < 0)
        break;
      if (v7 == ++v8)
      {
        LODWORD(v8) = *((_DWORD *)v1 + 66);
        break;
      }
    }
  }
  else
  {
    LODWORD(v8) = 0;
  }
  if ((_DWORD)v7 != (_DWORD)v8)
  {
    v11 = v8;
    do
    {
      v12 = *((_QWORD *)v1 + 31) + 40 * v11;
      re::StringID::StringID((re::StringID *)v46, (const StringID *)(v12 + 16));
      v47 = *(_QWORD *)(v12 + 32);
      v13 = re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v1 + 136, v46);
      if (v13)
      {
        v14 = (re *)re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::tryGet(v13, (int *)&v47);
        if (v14)
        {
          if (*((_QWORD *)v14 + 2) > (unint64_t)HIDWORD(v47))
          {
            v15 = *(void (****)(_QWORD))(*((_QWORD *)v14 + 4) + 8 * HIDWORD(v47));
            if (v15)
            {
              v16 = re::globalAllocators(v14)[2];
              (**v15)(v15);
              (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v16 + 40))(v16, v15);
            }
          }
        }
      }
      re::StringID::destroyString((re::StringID *)v46);
      if (*((_DWORD *)v1 + 66) <= (v8 + 1))
        v17 = v8 + 1;
      else
        v17 = *((_DWORD *)v1 + 66);
      while (1)
      {
        v11 = (v8 + 1);
        if (v17 - 1 == (_DWORD)v8)
          break;
        LODWORD(v8) = v8 + 1;
        v18 = v11;
        if ((*(_DWORD *)(*((_QWORD *)v1 + 31) + 40 * v11 + 8) & 0x80000000) != 0)
          goto LABEL_26;
      }
      v18 = v17;
LABEL_26:
      LODWORD(v8) = v18;
    }
    while ((_DWORD)v7 != v18);
  }
  if (*((_DWORD *)v1 + 41))
  {
    v19 = *((unsigned int *)v1 + 40);
    if ((_DWORD)v19)
      memset_pattern16(*((void **)v1 + 18), &unk_2260EB7B0, 4 * v19);
    if (*((_DWORD *)v1 + 42))
    {
      v20 = 0;
      v21 = 0;
      do
      {
        re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(*((_QWORD *)v1 + 19) + v20);
        ++v21;
        v20 += 72;
      }
      while (v21 < *((unsigned int *)v1 + 42));
    }
    *((_DWORD *)v1 + 41) = 0;
    *((_DWORD *)v1 + 42) = 0;
    v22 = *((_DWORD *)v1 + 44) + 1;
    *((_DWORD *)v1 + 43) = 0x7FFFFFFF;
    *((_DWORD *)v1 + 44) = v22;
  }
  if (*((_DWORD *)v1 + 53))
  {
    v23 = *((unsigned int *)v1 + 52);
    if ((_DWORD)v23)
      memset_pattern16(*((void **)v1 + 24), &unk_2260EB7B0, 4 * v23);
    if (*((_DWORD *)v1 + 54))
    {
      v24 = 0;
      v25 = 0;
      do
      {
        re::HashTable<re::StringID,re::FixedArray<re::RenderGraphProviderBase const*>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(*((_QWORD *)v1 + 25) + v24);
        ++v25;
        v24 += 48;
      }
      while (v25 < *((unsigned int *)v1 + 54));
    }
    *((_DWORD *)v1 + 53) = 0;
    *((_DWORD *)v1 + 54) = 0;
    v26 = *((_DWORD *)v1 + 56) + 1;
    *((_DWORD *)v1 + 55) = 0x7FFFFFFF;
    *((_DWORD *)v1 + 56) = v26;
  }
  v46[0] = (char *)v1 + 424;
  v27 = *((_QWORD *)v1 + 55);
  if (v27 >= 0x10)
  {
    v28 = 0;
    v29 = *((_QWORD *)v1 + 53);
    v30 = v27 >> 4;
    while (1)
    {
      v31 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v29 + v28)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v46[1] = (unsigned __int16)~v31;
      if (v31 != 0xFFFF)
        break;
      v28 += 16;
      if (!--v30)
        goto LABEL_49;
    }
    v32 = __clz(__rbit64((unsigned __int16)~v31)) + v28;
    v47 = v32;
    if (v32 != -1)
    {
      do
      {
        re::internal::destroyPersistent<re::RenderGraphCompiled>((re *)"deinit", 147, *(re::RenderGraphCompiled **)(*(_QWORD *)(v46[0] + 8) + 24 * v32 + 8));
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v46);
        v32 = v47;
      }
      while (v47 != -1);
      v27 = *((_QWORD *)v1 + 55);
    }
  }
LABEL_49:
  *((_QWORD *)v1 + 58) = 0;
  *((_QWORD *)v1 + 59) = 0;
  *((_QWORD *)v1 + 56) = 0;
  *((_QWORD *)v1 + 57) = v27;
  if (v27 >= 0x10)
  {
    v33 = 0;
    *(_QWORD *)&v34 = -1;
    *((_QWORD *)&v34 + 1) = -1;
    do
      *(_OWORD *)(*((_QWORD *)v1 + 53) + 16 * v33++) = v34;
    while (v33 < *((_QWORD *)v1 + 55) >> 4);
  }
  result = (re *)*((_QWORD *)v1 + 16);
  if (result)
  {
    result = (re *)re::RenderGraphResourceAllocationManager::deinit(result);
    v36 = (re::RenderGraphResourceAllocationManager *)*((_QWORD *)v1 + 16);
    if (v36)
    {
      v37 = re::globalAllocators(result)[2];
      re::RenderGraphResourceAllocationManager::~RenderGraphResourceAllocationManager(v36);
      result = (re *)(*(uint64_t (**)(uint64_t, re::RenderGraphResourceAllocationManager *))(*(_QWORD *)v37 + 40))(v37, v36);
    }
    *((_QWORD *)v1 + 16) = 0;
  }
  v38 = (re::RenderGraphPersistentResourceManager *)*((_QWORD *)v1 + 37);
  if (v38)
  {
    v39 = re::globalAllocators(result)[2];
    re::RenderGraphPersistentResourceManager::~RenderGraphPersistentResourceManager(v38);
    result = (re *)(*(uint64_t (**)(uint64_t, re::RenderGraphPersistentResourceManager *))(*(_QWORD *)v39 + 40))(v39, v38);
    *((_QWORD *)v1 + 37) = 0;
  }
  v40 = (_QWORD *)*((_QWORD *)v1 + 35);
  if (v40)
  {
    v41 = re::globalAllocators(result)[2];
    re::StringID::destroyString((re::StringID *)(v40 + 63));
    re::FixedArray<re::StringID>::deinit(v40 + 42);
    re::AttributeTable::~AttributeTable((re::AttributeTable *)v40);
    result = (re *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v41 + 40))(v41, v40);
    *((_QWORD *)v1 + 35) = 0;
  }
  v42 = (_QWORD *)*((_QWORD *)v1 + 36);
  if (v42)
  {
    v43 = re::globalAllocators(result)[2];
    re::StringID::destroyString((re::StringID *)(v42 + 63));
    re::FixedArray<re::StringID>::deinit(v42 + 42);
    re::AttributeTable::~AttributeTable((re::AttributeTable *)v42);
    result = (re *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v43 + 40))(v43, v42);
    *((_QWORD *)v1 + 36) = 0;
  }
  v44 = (void (***)(_QWORD))*((_QWORD *)v1 + 86);
  if (v44)
  {
    v45 = re::globalAllocators(result)[2];
    (**v44)(v44);
    result = (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v45 + 40))(v45, v44);
    *((_QWORD *)v1 + 86) = 0;
  }
  return result;
}

double re::RenderGraphManager::addGraphToCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _anonymous_namespace_ *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  re *v15;
  uint64_t v16;
  char *v17;
  unsigned int v18;
  uint64_t v19;
  NSObject *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  uint64_t v25;
  _BYTE buf[18];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v25 = a2;
  v7 = (_anonymous_namespace_ *)(a1 + 424);
  if (re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)(a1 + 424), &v25) != -1)
  {
    v8 = re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(v7, &v25);
    re::internal::destroyPersistent<re::RenderGraphCompiled>((re *)"addGraphToCache", 26, *(re::RenderGraphCompiled **)(*(_QWORD *)(a1 + 432) + 24 * v8 + 8));
  }
  if (!*(_BYTE *)(a1 + 380))
  {
    v9 = (char *)(a1 + 504);
    v10 = *(_QWORD *)(a1 + 488);
    v11 = (char *)(a1 + 504);
    if (v10)
    {
      v12 = 8 * v10;
      v11 = (char *)(a1 + 504);
      while (*(_QWORD *)v11 != v25)
      {
        v11 += 8;
        v12 -= 8;
        if (!v12)
        {
          v11 = &v9[8 * v10];
          break;
        }
      }
    }
    v13 = (uint64_t *)(a1 + 488);
    v14 = (v11 - v9) >> 3;
    if (v14 != v10)
    {
      re::DynamicInlineArray<unsigned long long,16ul>::removeStableAt((uint64_t *)(a1 + 488), v14);
      v10 = *v13;
    }
    if (v10 == 16)
      re::DynamicInlineArray<unsigned long long,16ul>::removeStableAt((uint64_t *)(a1 + 488), 0xFuLL);
    v15 = (re *)re::DynamicInlineArray<unsigned long long,16ul>::ensureCapacity((_QWORD *)(a1 + 488), v14);
    if ((_DWORD)v15)
    {
      v16 = *v13;
      v17 = &v9[8 * *v13];
      if (*v13)
      {
        *(_QWORD *)v17 = *((_QWORD *)v17 - 1);
        if (v17 - 8 != v9)
        {
          v15 = (re *)memmove((void *)(a1 + 512), (const void *)(a1 + 504), v17 - 8 - v9);
          v16 = *v13;
        }
      }
      else
      {
        v9 += 8 * *v13;
      }
      *(_QWORD *)v9 = v25;
      *(_QWORD *)(a1 + 488) = v16 + 1;
      ++*(_DWORD *)(a1 + 496);
    }
    v18 = *(_DWORD *)(a1 + 672) + 1;
    *(_DWORD *)(a1 + 672) = v18;
    v19 = a4 & 0xFFFFFFFFFFFFFFFLL;
    if ((a4 & 0xFFFFFFFFFFFFFFFuLL) - *(_QWORD *)(a1 + 680) >= 0x80)
    {
      if (v18 >= 0x20)
      {
        v20 = *re::graphicsLogObjects(v15);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          v21 = *(_DWORD *)(a1 + 672);
          v22 = v19 - *(_QWORD *)(a1 + 680);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = v21;
          *(_WORD *)&buf[8] = 2048;
          *(_QWORD *)&buf[10] = v22;
          _os_log_impl(&dword_224FE9000, v20, OS_LOG_TYPE_DEFAULT, "WARNING: %u render graphs were cached over %llu frames.A provider might be returning a frequently changing hash.", buf, 0x12u);
        }
      }
      *(_DWORD *)(a1 + 672) = 0;
      *(_QWORD *)(a1 + 680) = v19;
    }
  }
  *(_QWORD *)buf = a3;
  *(_QWORD *)&buf[8] = a4;
  v23 = re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(v7, &v25);
  if (v23 == -1)
  {
    *(_QWORD *)&result = re::HashBrown<unsigned long long,re::RenderGraphManager::CachedRenderGraph,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(v7, &v25, (__n128 *)buf).n128_u64[0];
  }
  else
  {
    result = *(double *)buf;
    *(_OWORD *)(*(_QWORD *)(a1 + 432) + 24 * v23 + 8) = *(_OWORD *)buf;
  }
  return result;
}

char *re::DynamicInlineArray<unsigned long long,16ul>::removeStableAt(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  BOOL v5;
  uint64_t *v6;
  char *result;
  uint64_t *v8;
  uint64_t *v9;

  v2 = *a1;
  if (*a1 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "removeStableAt", 555, a2, v2);
    result = (char *)_os_crash();
    __break(1u);
  }
  else
  {
    v4 = v2 - 1;
    v5 = v2 - 1 > a2;
    v6 = a1 + 2;
    result = (char *)&a1[a2 + 2];
    v8 = (uint64_t *)(result + 8);
    v9 = &v6[v2];
    if (v5 && v9 != v8)
    {
      result = (char *)memmove(result, v8, (char *)v9 - (char *)v8);
      v4 = *a1 - 1;
    }
    *a1 = v4;
    ++*((_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t re::RenderGraphManager::getCachedGraph(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = a2;
  v5 = re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)(a1 + 424), &v8);
  if (v5 == -1)
    return 0;
  v6 = *(_QWORD *)(a1 + 432);
  if ((*(_QWORD *)(v6 + 24 * v5 + 16) & 0xFFFFFFFFFFFFFFFuLL) < (a3 & 0xFFFFFFFFFFFFFFFuLL))
    return 0;
  else
    return *(_QWORD *)(v6 + 24 * v5 + 8);
}

void re::RenderGraphManager::deleteStaleGraphs(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int16 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t *v23;
  int8x16_t v24;
  int8x8_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32[2];
  uint64_t v33;
  uint64_t v34[2];
  uint64_t v35;
  int v36;
  uint64_t *v37;
  _OWORD v38[2];
  int v39;
  uint64_t v40;

  v39 = 0;
  memset(v38, 0, sizeof(v38));
  v40 = 0x7FFFFFFFLL;
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v38, a3, 16);
  v6 = a1[61];
  if (v6)
  {
    v7 = a1 + 63;
    v8 = 8 * v6;
    do
    {
      v9 = *v7++;
      v34[0] = v9;
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)v38, v34);
      v8 -= 8;
    }
    while (v8);
  }
  v10 = a1[56];
  v37 = 0;
  v34[1] = 0;
  v35 = 0;
  v36 = 0;
  v34[0] = a3;
  re::DynamicArray<float *>::setCapacity(v34, v10);
  ++v36;
  v32[0] = (uint64_t)(a1 + 53);
  v11 = a1[55];
  if (v11 >= 0x10)
  {
    v12 = 0;
    v13 = a1[53];
    v14 = v11 >> 4;
    while (1)
    {
      v15 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v13 + v12)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v32[1] = (unsigned __int16)~v15;
      if (v15 != 0xFFFF)
        break;
      v12 += 16;
      if (!--v14)
        goto LABEL_15;
    }
    v16 = __clz(__rbit64((unsigned __int16)~v15)) + v12;
    v33 = v16;
    if (v16 != -1)
    {
      v17 = a2 & 0xFFFFFFFFFFFFFFFLL;
      do
      {
        v18 = (uint64_t *)(*(_QWORD *)(v32[0] + 8) + 24 * v16);
        if ((v18[2] & 0xFFFFFFFFFFFFFFFuLL) <= v17
          && !re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)v38, v18))
        {
          re::DynamicArray<re::TransitionCondition *>::add(v34, v18);
        }
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v32);
        v16 = v33;
      }
      while (v33 != -1);
    }
  }
LABEL_15:
  if (v35)
  {
    v19 = v37;
    v20 = 8 * v35;
    do
    {
      v32[0] = *v19;
      v21 = re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(a1 + 53, v32);
      re::internal::destroyPersistent<re::RenderGraphCompiled>((re *)"deleteStaleGraphs", 96, *(re::RenderGraphCompiled **)(a1[54] + 24 * v21 + 8));
      v22 = re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(a1 + 53, v32);
      if (v22 != -1)
      {
        v23 = (int8x16_t *)(a1[53] + (v22 & 0xFFFFFFFFFFFFFFF0));
        v24.i64[0] = -1;
        v24.i64[1] = -1;
        v25 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v23, v24), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
        if (v25)
          v26 = -1;
        else
          v26 = 0x80;
        v23->i8[v22 & 0xF] = v26;
        v27 = a1[55];
        v28 = *(_QWORD *)(a1[54] + 24 * v22);
        v29 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v28 ^ (v28 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v28 ^ (v28 >> 30))) >> 27));
        a1[58] ^= (v29 >> 31) ^ v29;
        v30 = a1[57];
        if (v25)
          ++v30;
        v31 = a1[56] - 1;
        a1[56] = v31;
        a1[57] = v30;
        if (v27 >= 0x11 && v31 < v27 >> 2)
          re::HashBrown<unsigned long long,re::RenderGraphManager::CachedRenderGraph,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(a1 + 53, 0);
      }
      ++v19;
      v20 -= 8;
    }
    while (v20);
  }
  if (v34[0] && v37)
    (*(void (**)(void))(*(_QWORD *)v34[0] + 40))();
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v38);
}

_anonymous_namespace_ *re::RenderGraphManager::init(re::RenderGraphManager *this, id *a2)
{
  uint64_t *v4;
  re::RenderGraphResourceAllocationManager *v5;
  re::RenderGraphResourceAllocationManager *v6;
  re *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _anonymous_namespace_ *result;

  if (*((_QWORD *)this + 16))
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) m_resourceAllocationManager was not null before init was called.", "m_resourceAllocationManager == nullptr", "init", 103);
    _os_crash();
    __break(1u);
    goto LABEL_6;
  }
  v4 = re::globalAllocators(this);
  v5 = (re::RenderGraphResourceAllocationManager *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 1776, 8);
  re::RenderGraphResourceAllocationManager::RenderGraphResourceAllocationManager(v5);
  *((_QWORD *)this + 16) = v6;
  re::RenderGraphResourceAllocationManager::init(v6, a2);
  if (*((_QWORD *)this + 37))
  {
LABEL_6:
    re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) m_renderGraphPersistentResourceManager was not null before init was called.", "m_renderGraphPersistentResourceManager == nullptr", "init", 109);
    _os_crash();
    __break(1u);
    goto LABEL_7;
  }
  v9 = re::globalAllocators(v7);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9[2] + 32))(v9[2], 120, 8);
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_DWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 52) = 0x7FFFFFFFLL;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_DWORD *)(v10 + 96) = 0;
  *(_QWORD *)(v10 + 100) = 0x7FFFFFFFLL;
  *(_DWORD *)(v10 + 112) = 3;
  *((_QWORD *)this + 37) = v10;
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = a2;
  if (*re::ObjCObject::operator=((id *)v10, a2 + 23))
  {
    re::RenderGraphManager::initFullscreenMeshPart((uint64_t)this, a2);
    re::RenderGraphManager::initCubeMeshPart((uint64_t)this, a2);
    *((_QWORD *)this + 87) = a2;
    return re::RenderGraphProcessorManager::addDefaultProcessors(this);
  }
LABEL_7:
  re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) m_persistentDataManager could not init", "initSuccess", "init", 113);
  result = (_anonymous_namespace_ *)_os_crash();
  __break(1u);
  return result;
}

uint64_t re::RenderGraphManager::initFullscreenMeshPart(uint64_t this, id *a2)
{
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  re *v7;
  __int128 v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  uint64_t v13[2];
  _OWORD v14[2];
  __int128 v15[2];
  id v16[2];
  __int128 v17;
  _QWORD v18[2];
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _OWORD v24[2];
  _OWORD v25[4];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(this + 280))
  {
    v3 = this;
    v21 = 0;
    v18[1] = 0;
    v19 = 0;
    v18[0] = 0;
    v20 = 0;
    re::DynamicArray<re::NamedVertexBuffer>::setCapacity(v18, 3uLL);
    v25[0] = xmmword_226167CB0;
    v25[1] = unk_226167CC0;
    v25[2] = xmmword_226167CD0;
    v25[3] = unk_226167CE0;
    v4 = (_anonymous_namespace_ *)objc_msgSend(a2[23], sel_newBufferWithBytes_length_options_, v25, 64, 0);
    LOWORD(v16[0]) = 287;
    v16[1] = v4;
    LODWORD(v17) = 0;
    DWORD1(v17) = -[_anonymous_namespace_ length](v4, sel_length);
    *((_QWORD *)&v17 + 1) = 0xFFFFFFFF00000000;
    re::DynamicArray<re::NamedVertexBuffer>::add((_anonymous_namespace_ *)v18, (uint64_t)v15);
    if (v16[1])
    {

      v16[1] = 0;
    }
    if (*(_QWORD *)&v15[0] && (BYTE8(v15[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v15[0] + 40))();
    if (v4)

    v24[0] = xmmword_226167CF0;
    v24[1] = unk_226167D00;
    v5 = (_anonymous_namespace_ *)objc_msgSend(a2[23], sel_newBufferWithBytes_length_options_, v24, 32, 0);
    LOWORD(v16[0]) = 285;
    v16[1] = v5;
    LODWORD(v17) = 0;
    DWORD1(v17) = -[_anonymous_namespace_ length](v5, sel_length);
    *((_QWORD *)&v17 + 1) = 0xFFFFFFFF00000000;
    re::DynamicArray<re::NamedVertexBuffer>::add((_anonymous_namespace_ *)v18, (uint64_t)v15);
    if (v16[1])
    {

      v16[1] = 0;
    }
    if (*(_QWORD *)&v15[0] && (BYTE8(v15[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v15[0] + 40))();
    if (v5)

    v23 = 196610;
    v22 = 0x200010000;
    v6 = (_anonymous_namespace_ *)objc_msgSend(a2[23], sel_newBufferWithBytes_length_options_, &v22, 12, 0);
    LOWORD(v16[0]) = 49;
    v16[1] = v6;
    LODWORD(v17) = 0;
    DWORD1(v17) = -[_anonymous_namespace_ length](v6, sel_length);
    *((_QWORD *)&v17 + 1) = 0xFFFFFFFF00000000;
    re::DynamicArray<re::NamedVertexBuffer>::add((_anonymous_namespace_ *)v18, (uint64_t)v15);
    if (v16[1])
    {

      v16[1] = 0;
    }
    v7 = *(re **)&v15[0];
    if (*(_QWORD *)&v15[0] && (BYTE8(v15[0]) & 1) != 0)
      v7 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)&v15[0] + 40))();
    if (v6)

    *(_QWORD *)&v8 = 0x7F0000007FLL;
    *((_QWORD *)&v8 + 1) = 0x7F0000007FLL;
    v14[0] = vdupq_n_s32(0x7F800000u);
    v14[1] = v8;
    v9 = re::globalAllocators(v7);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9[2] + 32))(v9[2], 560, 16);
    v13[0] = 0x9D2E0E4D76250F84;
    v13[1] = (uint64_t)"FullscreenQuad";
    v15[0] = xmmword_2260E5F10;
    v15[1] = xmmword_2260E5F20;
    *(_OWORD *)v16 = xmmword_2260E5F40;
    v17 = xmmword_2260E5D70;
    v12 = 0;
    v11 = 0;
    *(_QWORD *)(v3 + 280) = re::MeshPart::MeshPart(v10, v13, 0, v21, v19, 6, 4, 1, v14, 0, v15, (re::MeshPartFlags *)&v11, -1, 0);
    re::StringID::destroyString((re::StringID *)v13);
    return re::DynamicArray<re::NamedVertexBuffer>::deinit((uint64_t)v18);
  }
  return this;
}

uint64_t re::RenderGraphManager::initCubeMeshPart(uint64_t this, id *a2)
{
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  re *v6;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  uint64_t v17[2];
  _OWORD v18[2];
  __int128 v19[2];
  id v20[2];
  __int128 v21;
  _QWORD v22[2];
  unint64_t v23;
  int v24;
  uint64_t v25;
  _OWORD v26[2];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[8];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(this + 288))
  {
    v3 = this;
    v25 = 0;
    v22[1] = 0;
    v23 = 0;
    v22[0] = 0;
    v24 = 0;
    re::DynamicArray<re::NamedVertexBuffer>::setCapacity(v22, 2uLL);
    v30[4] = xmmword_226167D50;
    v30[5] = unk_226167D60;
    v30[6] = xmmword_226167D70;
    v30[7] = unk_226167D80;
    v30[0] = xmmword_226167D10;
    v30[1] = unk_226167D20;
    v30[2] = xmmword_226167D30;
    v30[3] = unk_226167D40;
    v4 = (_anonymous_namespace_ *)objc_msgSend(a2[23], sel_newBufferWithBytes_length_options_, v30, 128, 0);
    LOWORD(v27) = 287;
    *((_QWORD *)&v27 + 1) = v4;
    LODWORD(v28) = 0;
    DWORD1(v28) = -[_anonymous_namespace_ length](v4, sel_length);
    *((_QWORD *)&v28 + 1) = 0xFFFFFFFF00000000;
    re::DynamicArray<re::NamedVertexBuffer>::add((_anonymous_namespace_ *)v22, (uint64_t)v26);
    if (*((_QWORD *)&v27 + 1))
    {

      *((_QWORD *)&v27 + 1) = 0;
    }
    if (*(_QWORD *)&v26[0] && (BYTE8(v26[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v26[0] + 40))();
    if (v4)

    v27 = xmmword_226167DB0;
    v28 = unk_226167DC0;
    v29 = 0x4000300070003;
    v26[0] = xmmword_226167D90;
    v26[1] = unk_226167DA0;
    v5 = (_anonymous_namespace_ *)objc_msgSend(a2[23], sel_newBufferWithBytes_length_options_, v26, 72, 0);
    LOWORD(v20[0]) = 49;
    v20[1] = v5;
    LODWORD(v21) = 0;
    DWORD1(v21) = -[_anonymous_namespace_ length](v5, sel_length);
    *((_QWORD *)&v21 + 1) = 0xFFFFFFFF00000000;
    re::DynamicArray<re::NamedVertexBuffer>::add((_anonymous_namespace_ *)v22, (uint64_t)v19);
    if (v20[1])
    {

      v20[1] = 0;
    }
    v6 = *(re **)&v19[0];
    if (*(_QWORD *)&v19[0] && (BYTE8(v19[0]) & 1) != 0)
      v6 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)&v19[0] + 40))();
    if (v5)

    __asm
    {
      FMOV            V0.4S, #-1.0
      FMOV            V1.4S, #1.0
    }
    v18[0] = _Q0;
    v18[1] = _Q1;
    v13 = re::globalAllocators(v6);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 560, 16);
    v17[0] = 0x38C142D1FC4;
    v17[1] = (uint64_t)"CubeMesh";
    v19[0] = xmmword_2260E5F10;
    v19[1] = xmmword_2260E5F20;
    *(_OWORD *)v20 = xmmword_2260E5F40;
    v21 = xmmword_2260E5D70;
    v16 = 0;
    v15 = 0;
    *(_QWORD *)(v3 + 288) = re::MeshPart::MeshPart(v14, v17, 0, v25, v23, 36, 8, 1, v18, 0, v19, (re::MeshPartFlags *)&v15, -1, 0);
    re::StringID::destroyString((re::StringID *)v17);
    return re::DynamicArray<re::NamedVertexBuffer>::deinit((uint64_t)v22);
  }
  return this;
}

uint64_t re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::tryGet(uint64_t a1, int *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) >> 27));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v3 ^ (v3 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v6 + 56 * v4 + 12) != (_DWORD)v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 56 * v4 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v4 == 0x7FFFFFFF)
        break;
      if (*(_DWORD *)(v6 + 56 * v4 + 12) == (_DWORD)v2)
        return v6 + 56 * v4 + 16;
    }
    return 0;
  }
  return v6 + 56 * v4 + 16;
}

uint64_t re::RenderGraphManager::cachePrioritizedProviders(uint64_t a1, StringID *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t i;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  int v40;
  StringID *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t result;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  _QWORD v59[2];
  unint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  const char *v65;
  __int16 v66;
  int v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v8 = *(unsigned int *)(a3 + 28);
  v62 = 0;
  v59[1] = 0;
  v60 = 0;
  v61 = 0;
  v59[0] = a4;
  re::DynamicArray<int>::setCapacity(v59, v8);
  ++v61;
  v9 = *(unsigned int *)(a3 + 32);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = (int *)(*(_QWORD *)(a3 + 16) + 8);
    while (1)
    {
      v12 = *v11;
      v11 += 14;
      if (v12 < 0)
        break;
      if (v9 == ++v10)
      {
        LODWORD(v10) = *(_DWORD *)(a3 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if ((_DWORD)v9 != (_DWORD)v10)
  {
    v13 = v10;
    v14 = *(_QWORD *)(a3 + 16);
    do
    {
      re::DynamicArray<int>::add(v59, (_DWORD *)(v14 + 56 * v13 + 12));
      v14 = *(_QWORD *)(a3 + 16);
      if (*(_DWORD *)(a3 + 32) <= (v10 + 1))
        v15 = v10 + 1;
      else
        v15 = *(_DWORD *)(a3 + 32);
      v16 = v10;
      while (1)
      {
        v13 = (v16 + 1);
        if (v15 - 1 == v16)
          break;
        ++v16;
        LODWORD(v10) = v13;
        if ((*(_DWORD *)(v14 + 56 * v13 + 8) & 0x80000000) != 0)
          goto LABEL_17;
      }
      LODWORD(v10) = v15;
LABEL_17:
      ;
    }
    while ((_DWORD)v9 != (_DWORD)v10);
  }
  std::__sort<std::__less<int,int> &,int *>();
  v18 = v60;
  v57 = v60;
  v58 = 0;
  v56 = a4;
  if (v60)
  {
    if (v60 >> 61)
    {
LABEL_66:
      re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, v18);
      _os_crash();
      __break(1u);
LABEL_67:
      re::internal::assertLog((re::internal *)4, v20, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    v19 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, 8 * v60, 8);
    v58 = v19;
    if (!v19)
      goto LABEL_67;
    v21 = v19;
    v22 = v19;
    if (v18 != 1)
    {
      bzero(v19, 8 * v18 - 8);
      v22 = &v21[v18 - 1];
    }
    *v22 = 0;
    v23 = v60;
    if (v60)
    {
      v24 = 0;
      v25 = *(unsigned int *)(a3 + 24);
      while (1)
      {
        if (*(_QWORD *)a3
          && (v26 = *(int *)(v62 + 4 * v24),
              v27 = 0x94D049BB133111EBLL
                  * ((0xBF58476D1CE4E5B9 * (v26 ^ (v26 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v26 ^ (v26 >> 30))) >> 27)),
              v28 = *(unsigned int *)(*(_QWORD *)(a3 + 8) + 4 * ((v27 ^ (v27 >> 31)) % v25)),
              (_DWORD)v28 != 0x7FFFFFFF))
        {
          v30 = *(_QWORD *)(a3 + 16);
          v31 = *(_DWORD *)(v30 + 56 * v28 + 12);
          for (i = v28; v31 != (_DWORD)v26; LODWORD(v28) = i)
          {
            i = *(_DWORD *)(v30 + 56 * i + 8) & 0x7FFFFFFF;
            LODWORD(v28) = 0x7FFFFFFF;
            if (i == 0x7FFFFFFF)
              break;
            v31 = *(_DWORD *)(v30 + 56 * i + 12);
          }
        }
        else
        {
          LODWORD(v28) = 0x7FFFFFFF;
        }
        if (v24 == v18)
          break;
        v29 = *(_QWORD *)(a3 + 16) + 56 * v28;
        v21[v24++] = *(_QWORD *)(*(_QWORD *)(v29 + 48) + 8 * *(_QWORD *)(v29 + 32) - 8);
        if (v24 == v23)
          goto LABEL_35;
      }
      v63 = 0;
      v75 = 0u;
      v76 = 0u;
      v73 = 0u;
      v74 = 0u;
      v72 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v64 = 136315906;
      v65 = "operator[]";
      v66 = 1024;
      v67 = 468;
      v68 = 2048;
      v69 = v18;
      v70 = 2048;
      v71 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_66;
    }
  }
LABEL_35:
  v55 = a4;
  if (*(_QWORD *)(a1 + 184))
  {
    v33 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
    v34 = ((0x94D049BB133111EBLL * (v33 ^ (v33 >> 27))) ^ ((0x94D049BB133111EBLL * (v33 ^ (v33 >> 27))) >> 31))
        % *(unsigned int *)(a1 + 208);
    v35 = *(_QWORD *)(a1 + 192);
    v36 = *(unsigned int *)(v35 + 4 * v34);
    if ((_DWORD)v36 != 0x7FFFFFFF)
    {
      v37 = *(_QWORD *)(a1 + 200);
      if (re::StringID::operator==((_QWORD *)(v37 + 48 * v36 + 8), a2))
      {
        *(_DWORD *)(v35 + 4 * v34) = *(_DWORD *)(v37 + 48 * v36) & 0x7FFFFFFF;
LABEL_42:
        re::HashTable<re::StringID,re::FixedArray<re::RenderGraphProviderBase const*>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(*(_QWORD *)(a1 + 200) + 48 * v36);
        *(_DWORD *)(*(_QWORD *)(a1 + 200) + 48 * v36) = *(_DWORD *)(*(_QWORD *)(a1 + 200) + 48 * v36) & 0x80000000 | *(_DWORD *)(a1 + 220);
        --*(_DWORD *)(a1 + 212);
        v40 = *(_DWORD *)(a1 + 224) + 1;
        *(_DWORD *)(a1 + 220) = v36;
        *(_DWORD *)(a1 + 224) = v40;
      }
      else
      {
        while (1)
        {
          v38 = v36;
          v39 = *(_DWORD *)(v37 + 48 * v36);
          v36 = v39 & 0x7FFFFFFF;
          if ((v39 & 0x7FFFFFFF) == 0x7FFFFFFF)
            break;
          if (re::StringID::operator==((_QWORD *)(v37 + 48 * v36 + 8), a2))
          {
            *(_DWORD *)(v37 + 48 * v38) = *(_DWORD *)(v37 + 48 * v38) & 0x80000000 | *(_DWORD *)(v37 + 48 * v36) & 0x7FFFFFFF;
            goto LABEL_42;
          }
        }
      }
    }
  }
  if (v18)
  {
    v41 = a2;
    v42 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
    v43 = (0x94D049BB133111EBLL * (v42 ^ (v42 >> 27))) ^ ((0x94D049BB133111EBLL * (v42 ^ (v42 >> 27))) >> 31);
    if (*(_QWORD *)(a1 + 184))
    {
      v44 = v43 % *(unsigned int *)(a1 + 208);
      v45 = *(unsigned int *)(*(_QWORD *)(a1 + 192) + 4 * v44);
      if ((_DWORD)v45 != 0x7FFFFFFF)
      {
        v46 = *(_QWORD *)(a1 + 200);
        while (!re::StringID::operator==((_QWORD *)(v46 + 48 * v45 + 8), v41))
        {
          v45 = *(_DWORD *)(v46 + 48 * v45) & 0x7FFFFFFF;
          if (v45 == 0x7FFFFFFF)
            goto LABEL_51;
        }
        v53 = 0;
        v52 = v55;
        if (!v55)
          goto LABEL_59;
LABEL_57:
        if (!v53)
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v52 + 40))(v52, v58);
        goto LABEL_59;
      }
    }
    else
    {
      LODWORD(v44) = 0;
    }
LABEL_51:
    v47 = *(unsigned int *)(a1 + 220);
    if ((_DWORD)v47 == 0x7FFFFFFF)
    {
      v47 = *(unsigned int *)(a1 + 216);
      v48 = v47;
      if ((_DWORD)v47 == *(_DWORD *)(a1 + 208))
      {
        re::HashTable<re::StringID,re::FixedArray<re::RenderGraphProviderBase const*>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1 + 184, 2 * *(_DWORD *)(a1 + 212));
        LODWORD(v44) = v43 % *(unsigned int *)(a1 + 208);
        v48 = *(_DWORD *)(a1 + 216);
      }
      *(_DWORD *)(a1 + 216) = v48 + 1;
      v49 = *(_QWORD *)(a1 + 200);
      v50 = *(_DWORD *)(v49 + 48 * v47);
    }
    else
    {
      v49 = *(_QWORD *)(a1 + 200);
      v50 = *(_DWORD *)(v49 + 48 * v47);
      *(_DWORD *)(a1 + 220) = v50 & 0x7FFFFFFF;
    }
    v51 = 48 * v47;
    *(_DWORD *)(v49 + v51) = v50 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 200) + v51) = *(_DWORD *)(*(_QWORD *)(a1 + 200) + 48 * v47) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 192) + 4 * v44);
    re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 200) + 48 * v47 + 8), v41);
    re::FixedArray<re::RenderGraphProviderBase const*>::FixedArray((uint64_t *)(*(_QWORD *)(a1 + 200) + 48 * v47 + 24), (uint64_t)&v56);
    *(_DWORD *)(*(_QWORD *)(a1 + 192) + 4 * v44) = v47;
    ++*(_DWORD *)(a1 + 212);
    ++*(_DWORD *)(a1 + 224);
    v52 = v56;
    v53 = v57 == 0;
    if (!v56)
      goto LABEL_59;
    goto LABEL_57;
  }
LABEL_59:
  result = v59[0];
  if (v59[0])
  {
    if (v62)
      return (*(uint64_t (**)(void))(*(_QWORD *)v59[0] + 40))();
  }
  return result;
}

void re::RenderGraphManager::addProviderInternal(re::RenderGraphManager *this@<X0>, const char *a2@<X1>, const re::RenderGraphProviderBase *a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *var1;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _anonymous_namespace_ *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  StringID v54;
  int v55;
  char v56;

  v55 = a4;
  *(_QWORD *)&v54.var0 = 0;
  v54.var1 = (char *)&str_110;
  v11 = re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 136, &v54);
  if (v11)
    goto LABEL_13;
  v52 = 0u;
  v53 = 0u;
  v51 = 0u;
  DWORD1(v53) = 0x7FFFFFFF;
  v12 = *(_QWORD *)&v54.var0;
  v13 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * ((v12 >> 31) ^ (v12 >> 1))) ^ ((0xBF58476D1CE4E5B9 * ((v12 >> 31) ^ (v12 >> 1))) >> 27));
  v14 = v13 ^ (v13 >> 31);
  v49 = a5;
  if (!*((_QWORD *)this + 17))
  {
    LODWORD(v16) = 0;
    goto LABEL_11;
  }
  v15 = *((unsigned int *)this + 40);
  v16 = v14 % v15;
  v17 = *(unsigned int *)(*((_QWORD *)this + 18) + 4 * (v14 % v15));
  if ((_DWORD)v17 == 0x7FFFFFFF)
  {
LABEL_11:
    re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove((uint64_t)this + 136, v16, v14, &v54, (uint64_t)&v51);
    ++*((_DWORD *)this + 44);
    goto LABEL_12;
  }
  v47 = v14 % v15;
  v18 = *((_QWORD *)this + 19);
  var1 = v54.var1;
  while (1)
  {
    if ((*(_QWORD *)(v18 + 72 * v17 + 8) ^ v12) <= 1)
    {
      v20 = *(const char **)(v18 + 72 * v17 + 16);
      if (v20 == var1 || !strcmp(v20, var1))
        break;
    }
    v17 = *(_DWORD *)(v18 + 72 * v17) & 0x7FFFFFFF;
    if (v17 == 0x7FFFFFFF)
    {
      LODWORD(v16) = v47;
      goto LABEL_11;
    }
  }
LABEL_12:
  re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::deinit((uint64_t *)&v51);
  v11 = re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 136, &v54);
  a5 = v49;
  if (!v11)
  {
    re::internal::assertLog((re::internal *)4, v21, "assertion failure: '%s' (%s:line %i) ", "provideType != nullptr", "addProviderInternal", 209);
    _os_crash();
    __break(1u);
    goto LABEL_54;
  }
LABEL_13:
  v22 = re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::tryGet(v11, &v55);
  if (v22)
    goto LABEL_25;
  *(_QWORD *)&v53 = 0;
  *(_QWORD *)&v52 = 0;
  v51 = 0uLL;
  DWORD2(v52) = 0;
  v23 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v55 ^ ((unint64_t)v55 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                          * (v55 ^ ((unint64_t)v55 >> 30))) >> 27));
  v24 = v23 ^ (v23 >> 31);
  if (*(_QWORD *)v11)
  {
    v25 = v24 % *(unsigned int *)(v11 + 24);
    v26 = *(unsigned int *)(*(_QWORD *)(v11 + 8) + 4 * v25);
    if ((_DWORD)v26 != 0x7FFFFFFF)
    {
      v27 = *(_QWORD *)(v11 + 16);
      if (*(_DWORD *)(v27 + 56 * v26 + 12) == v55)
        goto LABEL_24;
      while (1)
      {
        LODWORD(v26) = *(_DWORD *)(v27 + 56 * v26 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v26 == 0x7FFFFFFF)
          break;
        if (*(_DWORD *)(v27 + 56 * v26 + 12) == v55)
          goto LABEL_24;
      }
    }
  }
  else
  {
    LODWORD(v25) = 0;
  }
  re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::addAsMove(v11, v25, v24, &v55, (uint64_t)&v51);
  ++*(_DWORD *)(v11 + 40);
  if ((_QWORD)v51 && (_QWORD)v53)
    (*(void (**)(void))(*(_QWORD *)v51 + 40))();
LABEL_24:
  v22 = re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::tryGet(v11, &v55);
  if (v22)
  {
LABEL_25:
    re::StringID::invalid((re::StringID *)a6);
    *(_QWORD *)(a6 + 16) = 0;
    v29 = (_anonymous_namespace_ *)re::StringID::operator=((unint64_t *)a6, (uint64_t *)&v54);
    *(_DWORD *)(a6 + 16) = v55;
    v30 = *(_QWORD *)(v22 + 16);
    *(_DWORD *)(a6 + 20) = v30;
    v31 = *(_QWORD *)(v22 + 8);
    if (v30 >= v31)
    {
      v32 = v30 + 1;
      if (v31 < v30 + 1)
      {
        if (*(_QWORD *)v22)
        {
          v33 = 2 * v31;
          if (!v31)
            v33 = 8;
          if (v33 <= v32)
            v34 = v32;
          else
            v34 = v33;
          v29 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity((_QWORD *)v22, v34);
        }
        else
        {
          v29 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity((_QWORD *)v22, v32);
          ++*(_DWORD *)(v22 + 24);
        }
      }
      v30 = *(_QWORD *)(v22 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8 * v30) = a3;
    *(_QWORD *)(v22 + 16) = v30 + 1;
    ++*(_DWORD *)(v22 + 24);
    if (a5)
    {
      re::StringID::StringID((re::StringID *)&v51, (const StringID *)a6);
      *(_QWORD *)&v52 = *(_QWORD *)(a6 + 16);
      v35 = re::Hash<re::ProviderHandle>::operator()((uint64_t)&v56, (uint64_t)&v51);
      re::StringID::destroyString((re::StringID *)&v51);
      v36 = *((unsigned int *)this + 64);
      if ((_DWORD)v36)
      {
        v37 = v35 % v36;
        v38 = *(unsigned int *)(*((_QWORD *)this + 30) + 4 * (v35 % v36));
        if ((_DWORD)v38 != 0x7FFFFFFF)
        {
          v48 = v35 % v36;
          v50 = v35;
          v39 = *((_QWORD *)this + 31);
          v40 = *(_DWORD *)(a6 + 16);
          v41 = *(_DWORD *)(a6 + 20);
          while (1)
          {
            v29 = (_anonymous_namespace_ *)re::StringID::operator==((_QWORD *)(v39 + 40 * v38 + 16), (_QWORD *)a6);
            if ((_DWORD)v29)
            {
              if (*(_DWORD *)(v39 + 40 * v38 + 32) == v40 && *(_DWORD *)(v39 + 40 * v38 + 36) == v41)
                goto LABEL_52;
            }
            v38 = *(_DWORD *)(v39 + 40 * v38 + 8) & 0x7FFFFFFF;
            if (v38 == 0x7FFFFFFF)
            {
              LODWORD(v37) = v48;
              v35 = v50;
              break;
            }
          }
        }
      }
      else
      {
        LODWORD(v37) = 0;
      }
      v42 = *((unsigned int *)this + 67);
      if ((_DWORD)v42 == 0x7FFFFFFF)
      {
        v42 = *((unsigned int *)this + 66);
        v43 = v42;
        if ((_DWORD)v42 == (_DWORD)v36)
        {
          re::HashSetBase<re::ProviderHandle,re::ProviderHandle,re::internal::ValueAsKey<re::ProviderHandle>,re::Hash<re::ProviderHandle>,re::EqualTo<re::ProviderHandle>,true,false>::setCapacity((uint64_t)this + 232, 2 * *((_DWORD *)this + 65));
          LODWORD(v37) = v35 % *((unsigned int *)this + 64);
          v43 = *((_DWORD *)this + 66);
        }
        *((_DWORD *)this + 66) = v43 + 1;
        v44 = *((_QWORD *)this + 31);
        v45 = *(_DWORD *)(v44 + 40 * v42 + 8);
      }
      else
      {
        v44 = *((_QWORD *)this + 31);
        v45 = *(_DWORD *)(v44 + 40 * v42 + 8);
        *((_DWORD *)this + 67) = v45 & 0x7FFFFFFF;
      }
      *(_DWORD *)(v44 + 40 * v42 + 8) = v45 | 0x80000000;
      *(_DWORD *)(*((_QWORD *)this + 31) + 40 * v42 + 8) = *(_DWORD *)(*((_QWORD *)this + 31) + 40 * v42 + 8) & 0x80000000 | *(_DWORD *)(*((_QWORD *)this + 30) + 4 * v37);
      *(_QWORD *)(*((_QWORD *)this + 31) + 40 * v42) = v35;
      v46 = *((_QWORD *)this + 31) + 40 * v42;
      v29 = re::StringID::StringID((re::StringID *)(v46 + 16), (const StringID *)a6);
      *(_QWORD *)(v46 + 32) = *(_QWORD *)(a6 + 16);
      *(_DWORD *)(*((_QWORD *)this + 30) + 4 * v37) = v42;
      ++*((_DWORD *)this + 65);
      ++*((_DWORD *)this + 68);
    }
LABEL_52:
    re::StringID::destroyString((re::StringID *)&v54);
    return;
  }
LABEL_54:
  re::internal::assertLog((re::internal *)4, v28, "assertion failure: '%s' (%s:line %i) ", "provideOrder != nullptr", "addProviderInternal", 216);
  _os_crash();
  __break(1u);
}

uint64_t re::RenderGraphManager::addProvider@<X0>(re *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t *v12;
  const re::RenderGraphProviderBase *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char v17;
  _BYTE v18[24];
  uint64_t v19;
  _BYTE *v20;
  _BYTE v21[24];
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v12 = re::globalAllocators(a1);
  v13 = (const re::RenderGraphProviderBase *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2]
                                                                                                  + 32))(v12[2], 120, 8);
  v14 = re::RenderGraphManager::providerCount(a1, a2);
  re::DynamicString::format((re::DynamicString *)"%s_%zu", (re::DynamicString *)&v16, a2, v14);
  v22 = *(_QWORD *)(a3 + 24);
  v23 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v21, a3);
  v19 = *(_QWORD *)(a4 + 24);
  v20 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v18, a4);
  re::InlineRenderGraphProvider::InlineRenderGraphProvider(v13, (const re::DynamicString *)&v16, (uint64_t)v21, (uint64_t)v18);
  re::RenderGraphManager::addProviderInternal(a1, a2, v13, a5, 1, a6);
  if (v20)
  {
    (**(void (***)(_BYTE *))v20)(v20);
    if (v20 != v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
    v20 = 0;
  }
  if (v23)
  {
    (**(void (***)(_BYTE *))v23)(v23);
    if (v23 != v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
    v23 = 0;
  }
  result = v16;
  if (v16)
  {
    if ((v17 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v16 + 40))();
  }
  return result;
}

uint64_t re::RenderGraphManager::providerCount(re::RenderGraphManager *this, const char *a2)
{
  char *v3;
  uint64_t v4;
  _QWORD v6[2];

  v3 = (char *)this + 136;
  v6[0] = 0;
  v6[1] = &str_110;
  v4 = re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  if (v4)
    return *(unsigned int *)(v4 + 28);
  else
    return 0;
}

uint64_t re::RenderGraphManager::removeProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1 + 136;
  result = re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 136, (_QWORD *)a2);
  if (result)
  {
    v6 = result;
    result = re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::tryGet(result, (int *)(a2 + 16));
    if (result)
    {
      v7 = result;
      v8 = *(unsigned int *)(a2 + 20);
      if (*(_QWORD *)(result + 16) <= v8)
      {
        return 0;
      }
      else
      {
        v9 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8 * v8);
        re::DynamicArray<re::Allocator const*>::removeStableAt((_QWORD *)result, v8);
        v10 = re::HashSetBase<re::ProviderHandle,re::ProviderHandle,re::internal::ValueAsKey<re::ProviderHandle>,re::Hash<re::ProviderHandle>,re::EqualTo<re::ProviderHandle>,true,false>::contains(a1 + 232, a2);
        if ((_DWORD)v10)
        {
          v11 = v9;
          re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)(a1 + 632), &v11);
          v10 = re::HashSetBase<re::ProviderHandle,re::ProviderHandle,re::internal::ValueAsKey<re::ProviderHandle>,re::Hash<re::ProviderHandle>,re::EqualTo<re::ProviderHandle>,true,false>::remove(a1 + 232, a2);
        }
        if (!*(_QWORD *)(v7 + 16))
          v10 = re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::remove(v6, (int *)(a2 + 16));
        if (!*(_DWORD *)(v6 + 28))
          v10 = re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v4, (_QWORD *)a2);
        return 1;
      }
    }
  }
  return result;
}

BOOL re::HashSetBase<re::ProviderHandle,re::ProviderHandle,re::internal::ValueAsKey<re::ProviderHandle>,re::Hash<re::ProviderHandle>,re::EqualTo<re::ProviderHandle>,true,false>::contains(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  _BOOL8 result;
  _QWORD v11[3];
  char v12;

  re::StringID::StringID((re::StringID *)v11, (const StringID *)a2);
  v11[2] = *(_QWORD *)(a2 + 16);
  v4 = re::Hash<re::ProviderHandle>::operator()((uint64_t)&v12, (uint64_t)v11);
  re::StringID::destroyString((re::StringID *)v11);
  v5 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v5)
    return 0;
  v6 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % v5));
  if ((_DWORD)v6 == 0x7FFFFFFF)
    return 0;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_DWORD *)(a2 + 16);
  v9 = *(_DWORD *)(a2 + 20);
  while (1)
  {
    result = re::StringID::operator==((_QWORD *)(v7 + 40 * v6 + 16), (_QWORD *)a2);
    if (result && *(_DWORD *)(v7 + 40 * v6 + 32) == v8 && *(_DWORD *)(v7 + 40 * v6 + 36) == v9)
      break;
    v6 = *(_DWORD *)(v7 + 40 * v6 + 8) & 0x7FFFFFFF;
    if (v6 == 0x7FFFFFFF)
      return 0;
  }
  return result;
}

uint64_t re::HashSetBase<re::ProviderHandle,re::ProviderHandle,re::internal::ValueAsKey<re::ProviderHandle>,re::Hash<re::ProviderHandle>,re::EqualTo<re::ProviderHandle>,true,false>::remove(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  unint64_t v21;
  _BYTE v22[16];
  uint64_t v23;
  char v24;

  re::StringID::StringID((re::StringID *)v22, (const StringID *)a2);
  v23 = *(_QWORD *)(a2 + 16);
  v4 = re::Hash<re::ProviderHandle>::operator()((uint64_t)&v24, (uint64_t)v22);
  re::StringID::destroyString((re::StringID *)v22);
  v5 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v5)
    return 0;
  v6 = v4 % v5;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(v7 + 4 * (v4 % v5));
  if ((_DWORD)v8 == 0x7FFFFFFF)
    return 0;
  v21 = v6;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = 0x7FFFFFFFLL;
  v12 = *(_DWORD *)(a2 + 16);
  v11 = *(_DWORD *)(a2 + 20);
  while (!re::StringID::operator==((_QWORD *)(v9 + 40 * v8 + 16), (_QWORD *)a2)
       || *(_DWORD *)(v9 + 40 * v8 + 32) != v12
       || *(_DWORD *)(v9 + 40 * v8 + 36) != v11)
  {
    v10 = v8;
    v8 = *(_DWORD *)(v9 + 40 * v8 + 8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF)
      return 0;
  }
  v14 = *(_DWORD *)(v9 + 40 * v8 + 8) & 0x7FFFFFFF;
  if (v10 == 0x7FFFFFFF)
    *(_DWORD *)(v7 + 4 * v21) = v14;
  else
    *(_DWORD *)(v9 + 40 * v10 + 8) = *(_DWORD *)(v9 + 40 * v10 + 8) & 0x80000000 | v14;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = v15 + 40 * v8;
  v19 = *(_DWORD *)(v16 + 8);
  v18 = (int *)(v16 + 8);
  v17 = v19;
  if (v19 < 0)
  {
    *v18 = v17 & 0x7FFFFFFF;
    re::StringID::destroyString((re::StringID *)(v15 + 40 * v8 + 16));
    v15 = *(_QWORD *)(a1 + 16);
    v17 = *(_DWORD *)(v15 + 40 * v8 + 8);
  }
  *(_DWORD *)(v15 + 40 * v8 + 8) = *(_DWORD *)(a1 + 36) | v17 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  v20 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 36) = v8;
  *(_DWORD *)(a1 + 40) = v20;
  return 1;
}

uint64_t re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::remove(uint64_t a1, int *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;

  if (!*(_QWORD *)a1)
    return 0;
  v3 = *a2;
  v4 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v3 ^ (v3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v3 ^ (v3 >> 30))) >> 27));
  v5 = (v4 ^ (v4 >> 31)) % *(unsigned int *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(v6 + 4 * v5);
  if ((_DWORD)v7 == 0x7FFFFFFF)
    return 0;
  v9 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v9 + 56 * v7 + 12) != (_DWORD)v3)
  {
    while (1)
    {
      v10 = v7;
      v11 = *(_DWORD *)(v9 + 56 * v7 + 8);
      v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF)
        return 0;
      if (*(_DWORD *)(v9 + 56 * v7 + 12) == (_DWORD)v3)
      {
        *(_DWORD *)(v9 + 56 * v10 + 8) = *(_DWORD *)(v9 + 56 * v10 + 8) & 0x80000000 | *(_DWORD *)(v9 + 56 * v7 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 56 * v7 + 8) & 0x7FFFFFFF;
LABEL_9:
  re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::EntryWithHash::free(*(_QWORD *)(a1 + 16) + 56 * v7);
  v12 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v7 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v7 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v12 + 1;
  return 1;
}

uint64_t re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;

  if (!*(_QWORD *)a1)
    return 0;
  v4 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(v6 + 4 * v5);
  if ((_DWORD)v7 == 0x7FFFFFFF)
    return 0;
  v9 = *(_QWORD *)(a1 + 16);
  if (!re::StringID::operator==((_QWORD *)(v9 + 72 * v7 + 8), a2))
  {
    while (1)
    {
      v10 = v7;
      v11 = *(_DWORD *)(v9 + 72 * v7);
      v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF)
        return 0;
      if (re::StringID::operator==((_QWORD *)(v9 + 72 * v7 + 8), a2))
      {
        *(_DWORD *)(v9 + 72 * v10) = *(_DWORD *)(v9 + 72 * v10) & 0x80000000 | *(_DWORD *)(v9
                                                                                             + 72 * v7) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 72 * v7) & 0x7FFFFFFF;
LABEL_9:
  re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(*(_QWORD *)(a1 + 16) + 72 * v7);
  v12 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v7) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v7) & 0x80000000 | *(_DWORD *)(a1 + 36);
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v12 + 1;
  return 1;
}

void re::RenderGraphManager::getProviderPointers(re::RenderGraphManager *this@<X0>, const char *__s2@<X1>, re::Allocator *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;
  const char *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  re *v16;
  NSObject *v17;
  uint64_t v18;
  const void *v19;
  unint64_t v20;
  uint64_t v21;
  uint8_t buf[24];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (__s2)
  {
    v7 = *__s2;
    if (*__s2)
    {
      v8 = __s2[1];
      if (v8)
      {
        v9 = __s2 + 2;
        do
        {
          v7 = 31 * v7 + v8;
          v10 = *(unsigned __int8 *)v9++;
          v8 = v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v7 = 0;
  }
  v11 = 2 * v7;
  *(_QWORD *)buf = 2 * v7;
  *(_QWORD *)&buf[8] = __s2;
  if (!*((_QWORD *)this + 23)
    || (v12 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v7 & 0x7FFFFFFFFFFFFFFFLL ^ (v11 >> 31))) ^ ((0xBF58476D1CE4E5B9
                                                                                    * (v7 & 0x7FFFFFFFFFFFFFFFLL ^ (v11 >> 31))) >> 27)),
        v13 = *(unsigned int *)(*((_QWORD *)this + 24) + 4 * ((v12 ^ (v12 >> 31)) % *((unsigned int *)this + 52))),
        (_DWORD)v13 == 0x7FFFFFFF))
  {
LABEL_15:
    re::StringID::destroyString((re::StringID *)buf);
    v17 = *re::graphicsLogObjects(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = __s2;
      _os_log_impl(&dword_224FE9000, v17, OS_LOG_TYPE_DEFAULT, "Attempted to emit graph of type %s but no cached providers were found.", buf, 0xCu);
    }
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = a3;
  }
  else
  {
    v14 = *((_QWORD *)this + 25);
    while (1)
    {
      if ((*(_QWORD *)(v14 + 48 * v13 + 8) ^ v11) <= 1)
      {
        v15 = *(const char **)(v14 + 48 * v13 + 16);
        if (v15 == __s2 || !strcmp(v15, __s2))
          break;
      }
      v13 = *(_DWORD *)(v14 + 48 * v13) & 0x7FFFFFFF;
      if (v13 == 0x7FFFFFFF)
        goto LABEL_15;
    }
    re::StringID::destroyString((re::StringID *)buf);
    v18 = v14 + 48 * v13;
    v20 = *(_QWORD *)(v18 + 32);
    v19 = *(const void **)(v18 + 40);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    re::FixedArray<re::RenderGraphProviderBase const*>::init<>((uint64_t *)a4, (uint64_t)a3, v20);
    if (*(_QWORD *)(a4 + 8) != v20)
    {
      re::internal::assertLog((re::internal *)4, v21, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378, *(_OWORD *)buf);
      _os_crash();
      __break(1u);
    }
    if (v20)
      memmove(*(void **)(a4 + 16), v19, 8 * v20);
  }
}

_QWORD *re::RenderGraphManager::deleteRemovedProviders(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  void (****v3)(_QWORD);
  uint64_t v4;
  void (***v5)(_QWORD);
  uint64_t v6;

  v1 = this;
  v2 = this[81];
  if (v2)
  {
    v3 = (void (****)(_QWORD))this[83];
    v4 = 8 * v2;
    do
    {
      v5 = *v3;
      if (*v3)
      {
        v6 = re::globalAllocators((re *)this)[2];
        (**v5)(v5);
        this = (_QWORD *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v6 + 40))(v6, v5);
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  v1[81] = 0;
  ++*((_DWORD *)v1 + 164);
  return this;
}

std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep re::RenderGraphManager::checkDisableTimeouts(std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep this)
{
  uint64_t v1;
  double v2;
  double v3;

  v1 = this;
  if (*(_BYTE *)(this + 412))
  {
    this = std::chrono::steady_clock::now().__d_.__rep_;
    v2 = 0.0;
    if (*(_BYTE *)(v1 + 400))
      v2 = 1.0;
    if (*(double *)(v1 + 392) + (double)(this - *(_QWORD *)(v1 + 384)) / 1000000000.0 * v2 > *(float *)(v1 + 408))
      *(_BYTE *)(v1 + 412) = 0;
  }
  if (*(_BYTE *)(v1 + 380) && *(float *)(v1 + 376) > 0.0)
  {
    this = std::chrono::steady_clock::now().__d_.__rep_;
    v3 = 0.0;
    if (*(_BYTE *)(v1 + 368))
      v3 = 1.0;
    if (*(double *)(v1 + 360) + (double)(this - *(_QWORD *)(v1 + 352)) / 1000000000.0 * v3 > *(float *)(v1 + 376))
      *(_BYTE *)(v1 + 380) = 0;
  }
  return this;
}

std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep re::RenderGraphManager::disableFileProviders(std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep this, float a2)
{
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v3;

  if (a2 > 0.0 && *(_BYTE *)(this + 416) != 0)
  {
    v3 = this;
    *(_BYTE *)(this + 412) = 1;
    if (a2 > 2.0)
      a2 = 2.0;
    *(float *)(this + 408) = a2;
    *(_QWORD *)(this + 384) = 0;
    *(_QWORD *)(this + 392) = 0;
    *(_BYTE *)(this + 400) = 0;
    this = std::chrono::steady_clock::now().__d_.__rep_;
    *(_QWORD *)(v3 + 384) = this;
    *(_BYTE *)(v3 + 400) = 1;
  }
  return this;
}

re *re::RenderGraphManager::setDataPipeFactory(re *result, uint64_t a2)
{
  re *v3;
  void (***v4)(_QWORD);
  uint64_t v5;

  v3 = result;
  v4 = (void (***)(_QWORD))*((_QWORD *)result + 86);
  if (v4)
  {
    v5 = re::globalAllocators(result)[2];
    (**v4)(v4);
    result = (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v5 + 40))(v5, v4);
  }
  *((_QWORD *)v3 + 86) = a2;
  return result;
}

double re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(a1[2] + v3);
        ++v4;
        v3 += 72;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(uint64_t a1)
{
  double result;

  if ((*(_DWORD *)a1 & 0x80000000) != 0)
  {
    *(_DWORD *)a1 &= ~0x80000000;
    re::StringID::destroyString((re::StringID *)(a1 + 8));
    return re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::deinit((uint64_t *)(a1 + 24));
  }
  return result;
}

double re::HashTable<re::StringID,re::FixedArray<re::RenderGraphProviderBase const*>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::FixedArray<re::RenderGraphProviderBase const*>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(a1[2] + v3);
        ++v4;
        v3 += 48;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::StringID,re::FixedArray<re::RenderGraphProviderBase const*>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(uint64_t result)
{
  _QWORD *v1;

  if ((*(_DWORD *)result & 0x80000000) != 0)
  {
    v1 = (_QWORD *)result;
    *(_DWORD *)result &= ~0x80000000;
    re::StringID::destroyString((re::StringID *)(result + 8));
    result = v1[3];
    if (result)
    {
      if (v1[4])
      {
        result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, v1[5]);
        v1[4] = 0;
        v1[5] = 0;
      }
      v1[3] = 0;
    }
  }
  return result;
}

uint64_t re::DynamicInlineArray<unsigned long long,16ul>::ensureCapacity(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (*a1 <= 0xFuLL)
    return 1;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
  result = _os_crash();
  __break(1u);
  return result;
}

__n128 re::HashBrown<unsigned long long,re::RenderGraphManager::CachedRenderGraph,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(_anonymous_namespace_ *a1, _QWORD *a2, __n128 *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  __n128 result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long long,re::RenderGraphManager::CachedRenderGraph,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize((uint64_t *)a1, 1u);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  result = *a3;
  v17 = *((_QWORD *)a1 + 1) + 24 * (v13 + 16 * v11);
  *(_QWORD *)v17 = *a2;
  *(__n128 *)(v17 + 8) = result;
  v18 = *((_QWORD *)a1 + 4) - v15;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v18;
  v19 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 24 * (v13 + 16 * v11)) ^ (*(_QWORD *)(*((_QWORD *)a1 + 1)
                                                                              + 24 * (v13 + 16 * v11)) >> 30);
  v20 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v19) ^ ((0xBF58476D1CE4E5B9 * v19) >> 27));
  *((_QWORD *)a1 + 5) ^= (v20 >> 31) ^ v20;
  return result;
}

uint64_t re::HashBrown<unsigned long long,re::RenderGraphManager::CachedRenderGraph,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(uint64_t *a1, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __n128 v15;
  unsigned __int16 v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD v27[2];
  uint64_t v28;
  __int128 v29;
  _BYTE v30[48];

  v3 = a1[2];
  v4 = a1[3] + a2;
  v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7)
    v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v7 = (v6 << 7) / 0x97;
  v8 = a1[7];
  v29 = 0u;
  *(_OWORD *)v30 = 0u;
  if (v5 > v3)
    v9 = v7;
  else
    v9 = v4;
  memset(&v30[16], 0, 32);
  re::HashBrown<unsigned long long,re::RenderGraphManager::CachedRenderGraph,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(&v29, v8, v9);
  v27[0] = a1;
  v11 = a1[2];
  if (v11 >= 0x10)
  {
    v12 = 0;
    v13 = *a1;
    v14 = v11 >> 4;
    v15 = (__n128)xmmword_2260EE390;
    v10.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      v16 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v13 + v12)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v27[1] = (unsigned __int16)~v16;
      if (v16 != 0xFFFF)
        break;
      v12 += 16;
      if (!--v14)
        goto LABEL_14;
    }
    v17 = __clz(__rbit64((unsigned __int16)~v16)) + v12;
    v28 = v17;
    if (v17 != -1)
    {
      do
      {
        re::HashBrown<unsigned long long,re::RenderGraphManager::CachedRenderGraph,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(&v29, *(_QWORD *)(v27[0] + 8) + 24 * v17, *(_QWORD *)(v27[0] + 8) + 24 * v17 + 8, v15, v10);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v27);
        v17 = v28;
      }
      while (v28 != -1);
      v11 = a1[2];
    }
  }
LABEL_14:
  v19 = *(_QWORD *)&v30[40];
  *(_QWORD *)&v30[40] = a1[7];
  result = *(_QWORD *)&v30[40];
  v20 = v29;
  v21 = *(_OWORD *)v30;
  *(_QWORD *)v30 = v11;
  v22 = *a1;
  v23 = a1[1];
  *(_QWORD *)&v29 = *a1;
  *((_QWORD *)&v29 + 1) = v23;
  v24 = *(_OWORD *)&v30[16];
  v25 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v30[32];
  a1[7] = v19;
  *(_OWORD *)&v30[24] = v25;
  v26 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v20;
  *((_OWORD *)a1 + 1) = v21;
  *((_OWORD *)a1 + 2) = v24;
  *(_OWORD *)&v30[8] = v26;
  if (result)
  {
    if (v23)
      *((_QWORD *)&v29 + 1) = 0;
    if (v22)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

_QWORD *re::HashBrown<unsigned long long,re::RenderGraphManager::CachedRenderGraph,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;

  v3 = result;
  result[7] = a2;
  v4 = 151 * a3;
  v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    v6 = v5 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 25 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *v3 = result;
    if (v4 >= 0x80)
    {
      v7 = 0;
      *(_QWORD *)&v8 = -1;
      *((_QWORD *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      result = (_QWORD *)*v3;
    }
    v3[1] = &result[2 * v6];
    if (v3[2])
    {
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = (_QWORD *)(v3[1] + v9);
        *v11 = 0;
        v11[1] = 0;
        v11[2] = 0xFFFFFFFFFFFFFFFLL;
        ++v10;
        v12 = v3[2];
        v9 += 24;
      }
      while (v10 < v12);
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v12;
  return result;
}

void re::HashTable<re::StringID,re::FixedArray<re::RenderGraphProviderBase const*>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  StringID *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  signed int v26;
  _BYTE v27[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v27, 0, 36);
      *(_QWORD *)&v27[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::FixedArray<re::RenderGraphProviderBase const*>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v27, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v27;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v27[8];
      *(_OWORD *)v27 = v5;
      *(_QWORD *)&v27[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v27[24];
      *(_OWORD *)&v27[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v27[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = (StringID *)(v6 + 40);
        do
        {
          if (((uint64_t)v14[-3].var1 & 0x80000000) != 0)
          {
            v15 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&v14[-2].var0 >> 31) ^ (*(_QWORD *)&v14[-2].var0 >> 1));
            v16 = (0x94D049BB133111EBLL * (v15 ^ (v15 >> 27))) ^ ((0x94D049BB133111EBLL * (v15 ^ (v15 >> 27))) >> 31);
            v17 = *(unsigned int *)(a1 + 24);
            v18 = v16 % v17;
            v19 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v19 == 0x7FFFFFFF)
            {
              v19 = *(unsigned int *)(a1 + 32);
              v20 = v19;
              if ((_DWORD)v19 == (_DWORD)v17)
              {
                re::HashTable<re::StringID,re::FixedArray<re::RenderGraphProviderBase const*>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, (2 * v12));
                v18 = v16 % *(unsigned int *)(a1 + 24);
                v20 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v20 + 1;
              v21 = *(_QWORD *)(a1 + 16);
              v22 = *(_DWORD *)(v21 + 48 * v19);
            }
            else
            {
              v21 = *(_QWORD *)(a1 + 16);
              v22 = *(_DWORD *)(v21 + 48 * v19);
              *(_DWORD *)(a1 + 36) = v22 & 0x7FFFFFFF;
            }
            v23 = 48 * v19;
            *(_DWORD *)(v21 + v23) = v22 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + v23) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v19) & 0x80000000 | *(_DWORD *)(v13 + 4 * v18);
            re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 48 * v19 + 8), v14 - 2);
            v24 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v19);
            v24[3] = 0;
            v24[4] = 0;
            v24[5] = 0;
            v24[3] = *(_QWORD *)&v14[-1].var0;
            *(_QWORD *)&v14[-1].var0 = 0;
            v24[4] = v14[-1].var1;
            v14[-1].var1 = 0;
            v25 = v24[5];
            v24[5] = *(_QWORD *)&v14->var0;
            *(_QWORD *)&v14->var0 = v25;
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v18) = v19;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 3;
        }
        while (v11 < v10);
      }
      re::HashTable<re::StringID,re::FixedArray<re::RenderGraphProviderBase const*>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v27);
    }
  }
  else
  {
    if (a2)
      v26 = a2;
    else
      v26 = 3;
  }
}

void re::HashTable<re::StringID,re::FixedArray<re::RenderGraphProviderBase const*>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 48 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const StringID *a4, uint64_t a5)
{
  uint64_t v9;
  __int128 *v10;
  int v11;
  int v13;
  signed int v14;
  uint64_t v15;
  BOOL v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  signed int v29;
  uint64_t v30;
  uint64_t v31;
  double result;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[44];

  v9 = *(unsigned int *)(a1 + 36);
  v10 = &xmmword_2260EA000;
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v11 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v13 = *(_DWORD *)(a1 + 28);
      v14 = 2 * v13;
      v15 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v14)
          v16 = (_DWORD)v9 == v14;
        else
          v16 = 1;
        if (!v16 && (v13 & 0x80000000) == 0)
        {
          memset(v35, 0, 36);
          *(_QWORD *)&v35[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v35, v15, v14);
          v17 = *(_OWORD *)v35;
          *(_OWORD *)v35 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v17;
          v18 = *(_QWORD *)&v35[16];
          v19 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v35[16] = v19;
          *(_QWORD *)(a1 + 16) = v18;
          v21 = *(_OWORD *)&v35[24];
          *(_OWORD *)&v35[24] = *(_OWORD *)(a1 + 24);
          v20 = *(_DWORD *)&v35[32];
          *(_OWORD *)(a1 + 24) = v21;
          v22 = v20;
          if (v20)
          {
            v23 = 0;
            v24 = v19 + 24;
            do
            {
              if ((*(_DWORD *)(v24 - 24) & 0x80000000) != 0)
              {
                v25 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(v24 - 16) >> 31) ^ (*(_QWORD *)(v24 - 16) >> 1));
                v26 = (0x94D049BB133111EBLL * (v25 ^ (v25 >> 27))) ^ ((0x94D049BB133111EBLL * (v25 ^ (v25 >> 27))) >> 31);
                re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v26 % *(unsigned int *)(a1 + 24), v26, v24 - 16, v24);
              }
              ++v23;
              v24 += 72;
            }
            while (v23 < v22);
          }
          re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v35);
          v10 = &xmmword_2260EA000;
        }
      }
      else
      {
        if (v14)
          v29 = 2 * v13;
        else
          v29 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v27 = *(_QWORD *)(a1 + 16);
    v28 = *(_DWORD *)(v27 + 72 * v9);
  }
  else
  {
    v27 = *(_QWORD *)(a1 + 16);
    v28 = *(_DWORD *)(v27 + 72 * v9);
    *(_DWORD *)(a1 + 36) = v28 & 0x7FFFFFFF;
  }
  v30 = 72 * v9;
  *(_DWORD *)(v27 + v30) = v28 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v30) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 72 * v9 + 8), a4);
  v31 = *(_QWORD *)(a1 + 16) + 72 * v9;
  *(_DWORD *)(v31 + 56) = 0;
  *(_OWORD *)(v31 + 40) = 0u;
  *(_OWORD *)(v31 + 24) = 0u;
  result = *((double *)v10 + 405);
  *(double *)(v31 + 60) = result;
  *(_QWORD *)(v31 + 24) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  v33 = *(_QWORD *)(v31 + 32);
  *(_QWORD *)(v31 + 32) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = v33;
  v34 = *(_QWORD *)(v31 + 40);
  *(_QWORD *)(v31 + 40) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v34;
  LODWORD(v34) = *(_DWORD *)(v31 + 48);
  *(_DWORD *)(v31 + 48) = *(_DWORD *)(a5 + 24);
  *(_DWORD *)(a5 + 24) = v34;
  LODWORD(v34) = *(_DWORD *)(v31 + 52);
  *(_DWORD *)(v31 + 52) = *(_DWORD *)(a5 + 28);
  *(_DWORD *)(a5 + 28) = v34;
  LODWORD(v34) = *(_DWORD *)(v31 + 56);
  *(_DWORD *)(v31 + 56) = *(_DWORD *)(a5 + 32);
  *(_DWORD *)(a5 + 32) = v34;
  LODWORD(v34) = *(_DWORD *)(v31 + 60);
  *(_DWORD *)(v31 + 60) = *(_DWORD *)(a5 + 36);
  *(_DWORD *)(a5 + 36) = v34;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

uint64_t re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::EntryWithHash::free(uint64_t result)
{
  int v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_DWORD *)(result + 8);
  if (v1 < 0)
  {
    v2 = result;
    v3 = (_QWORD *)(result + 16);
    result = *(_QWORD *)(result + 16);
    *((_DWORD *)v3 - 2) = v1 & 0x7FFFFFFF;
    if (result)
    {
      if (*(_QWORD *)(v2 + 48))
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
      *(_QWORD *)(v2 + 48) = 0;
      v3[1] = 0;
      v3[2] = 0;
      *v3 = 0;
      ++*(_DWORD *)(v2 + 40);
    }
  }
  return result;
}

void re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v29, 0, 36);
          *(_QWORD *)&v29[36] = 0x7FFFFFFFLL;
          re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::init((uint64_t)v29, v13, v12);
          v15 = *(_OWORD *)v29;
          *(_OWORD *)v29 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v29[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v29[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v29[24];
          *(_OWORD *)&v29[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v29[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = 0;
            v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0)
                re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 16), v22 - 4, v22);
              ++v21;
              v22 += 56;
            }
            while (v21 < v20);
          }
          re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::deinit((uint64_t *)v29);
        }
      }
      else
      {
        if (v12)
          v25 = 2 * v11;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 56 * v9 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 56 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 56 * v9 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9) = a3;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9 + 12) = *a4;
  v26 = *(_QWORD *)(a1 + 16) + 56 * v9;
  *(_QWORD *)(v26 + 48) = 0;
  *(_DWORD *)(v26 + 40) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)(v26 + 16) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(v26 + 24) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = 0;
  v27 = *(_QWORD *)(v26 + 32);
  *(_QWORD *)(v26 + 32) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v27;
  v28 = *(_QWORD *)(v26 + 48);
  *(_QWORD *)(v26 + 48) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v28;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v26 + 40);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

void re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 56 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 72 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 56;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::Hash<re::ProviderHandle>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  unsigned int v4;

  v2 = 73244475 * (*(_DWORD *)(a2 + 16) ^ HIWORD(*(_DWORD *)(a2 + 16)));
  v3 = ((*(_QWORD *)a2 >> 3)
      + (*(_QWORD *)a2 >> 1 << 6)
      - 0x61C8864680B583E9
      + ((73244475 * (v2 ^ HIWORD(v2))) ^ ((73244475 * (v2 ^ HIWORD(v2))) >> 16))) ^ (*(_QWORD *)a2 >> 1);
  v4 = 73244475
     * ((73244475 * (*(_DWORD *)(a2 + 20) ^ HIWORD(*(_DWORD *)(a2 + 20)))) ^ ((73244475
                                                                                           * (*(_DWORD *)(a2 + 20) ^ HIWORD(*(_DWORD *)(a2 + 20)))) >> 16));
  return ((v4 ^ HIWORD(v4)) + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
}

void re::HashSetBase<re::ProviderHandle,re::ProviderHandle,re::internal::ValueAsKey<re::ProviderHandle>,re::Hash<re::ProviderHandle>,re::EqualTo<re::ProviderHandle>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  signed int v24;
  _BYTE v25[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v25, 0, 36);
      *(_QWORD *)&v25[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::ProviderHandle,re::ProviderHandle,re::internal::ValueAsKey<re::ProviderHandle>,re::Hash<re::ProviderHandle>,re::EqualTo<re::ProviderHandle>,true,false>::init((uint64_t)v25, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v25;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v25[8];
      *(_OWORD *)v25 = v5;
      *(_QWORD *)&v25[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v25[24];
      *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v25[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = (uint64_t *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v14 - 1) & 0x80000000) != 0)
          {
            v15 = *(v14 - 2);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashSetBase<re::ProviderHandle,re::ProviderHandle,re::internal::ValueAsKey<re::ProviderHandle>,re::Hash<re::ProviderHandle>,re::EqualTo<re::ProviderHandle>,true,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 40 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 40 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 40 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v18 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v18) = v15;
            v22 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v18);
            v23 = *v14;
            v22[2] = v22[2] & 0xFFFFFFFFFFFFFFFELL | *v14 & 1;
            v22[2] = *v14 & 0xFFFFFFFFFFFFFFFELL | v23 & 1;
            v22[3] = v14[1];
            *v14 = 0;
            v14[1] = (uint64_t)&str_110;
            v22[4] = v14[2];
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 5;
        }
        while (v11 < v10);
      }
      re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::deinit((uint64_t *)v25);
    }
  }
  else
  {
    if (a2)
      v24 = a2;
    else
      v24 = 3;
  }
}

void re::HashSetBase<re::ProviderHandle,re::ProviderHandle,re::internal::ValueAsKey<re::ProviderHandle>,re::Hash<re::ProviderHandle>,re::EqualTo<re::ProviderHandle>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 40 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 600);
    _os_crash();
    __break(1u);
  }
}

void re::PersistentShadowState::visualizeShadowClusters(re::PersistentShadowState *this, os_unfair_lock_s *a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  float32x4_t *v8;
  float32x4_t *v9;
  uint64_t v10;
  const float *v11;
  float32x4_t v12;
  int v13;
  int v14;
  __int128 v15;
  float32x4_t v16;
  _OWORD v17[2];
  float32x4_t v18[4];

  v4 = *((unsigned int *)this + 40);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (_DWORD *)(*((_QWORD *)this + 18) + 8);
    while ((*v6 & 0x80000000) == 0)
    {
      v6 += 92;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *((_DWORD *)this + 40);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v7 = v5;
    do
    {
      v8 = (float32x4_t *)(*((_QWORD *)this + 18) + 368 * v7);
      v9 = v8 + 10;
      v10 = (uint64_t)&v8[5];
      v18[0] = (float32x4_t)xmmword_2260E5F10;
      re::DebugRenderer::drawBox(a2, v8 + 10, v8[5].f32, (__int128 *)v18, 1);
      v18[0] = (float32x4_t)xmmword_2260E5F10;
      v18[1] = (float32x4_t)xmmword_2260E5F20;
      v18[2] = (float32x4_t)xmmword_2260E5F40;
      v18[3] = (float32x4_t)xmmword_2260E5D70;
      re::BoundingSphere::BoundingSphere(&v16, v10, v9);
      v11 = (const float *)((unint64_t)&v16 | 0xC);
      v12 = vld1q_dup_f32(v11);
      v17[0] = vsubq_f32(v16, v12);
      v17[1] = vaddq_f32(v16, v12);
      v15 = xmmword_2260E5F40;
      re::DebugRenderer::drawBox(a2, v18, (float *)v17, &v15, 1);
      if (*((_DWORD *)this + 40) <= (v5 + 1))
        v13 = v5 + 1;
      else
        v13 = *((_DWORD *)this + 40);
      v14 = v5;
      while (1)
      {
        v7 = (v14 + 1);
        if (v13 - 1 == v14)
          break;
        ++v14;
        LODWORD(v5) = v7;
        if ((*(_DWORD *)(*((_QWORD *)this + 18) + 368 * v7 + 8) & 0x80000000) != 0)
          goto LABEL_17;
      }
      LODWORD(v5) = v13;
LABEL_17:
      ;
    }
    while ((_DWORD)v4 != (_DWORD)v5);
  }
}

void re::PersistentShadowState::visualizeShadowClusterInfo(uint64_t a1, os_unfair_lock_s *a2, const StringID *a3, uint64_t a4)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  const __CFString *StringWithAbsoluteTime;
  uint64_t v10;
  const char *CStringPtr;
  _anonymous_namespace_ *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t *v17;
  unint64_t v18;
  simd_float3x3 v19;
  uint32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float v32;
  float32x4_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float32x2_t v39;
  float32x2_t v40;
  float v41;
  BOOL v42;
  float v43;
  unsigned int v44;
  float32x2_t v45;
  float32x2_t v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float32x4_t v57;
  float v58;
  unint64_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int32x4_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  int32x4_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x4_t v72;
  float v73;
  float32x4_t v74;
  float v75;
  float v76;
  float v77;
  float32x2_t v78;
  float32x2_t v79;
  float v80;
  BOOL v81;
  float v82;
  unsigned int v83;
  float32x2_t v84;
  float32x2_t v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  uint64_t v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float32x4_t v107;
  float v108;
  float32x4_t v109;
  char v110;
  unint64_t v111;
  float v112;
  char v113;
  unint64_t v114;
  float32_t v115;
  unsigned int v116;
  float32x4_t v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float32x4_t v128;
  float v129;
  float32x4_t v130;
  float32x4_t v131;
  unint64_t v132;
  float v133;
  __int128 v134;
  uint64_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  uint64_t v140;
  __int128 v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  uint64_t v153;
  __int128 v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  uint64_t v159;
  char *v160;
  int v161;
  int v162;
  _DWORD *v163;
  const __CFAllocator *v165;
  __CFDateFormatter *cf;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float v174;
  float32x4_t v175;
  float32x4_t v176;
  uint64_t *v179;
  unint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD v184[3];
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  simd_float3x3 v193;

  v165 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  cf = CFDateFormatterCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, kCFDateFormatterNoStyle, kCFDateFormatterLongStyle);
  CFDateFormatterSetFormat(cf, CFSTR("HH:mm:ss.SSS"));
  v167 = *(unsigned int *)(a1 + 160);
  v5 = 0;
  if ((_DWORD)v167)
  {
    v6 = (_DWORD *)(*(_QWORD *)(a1 + 144) + 8);
    while ((*v6 & 0x80000000) == 0)
    {
      v6 += 92;
      if (v167 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a1 + 160);
        break;
      }
    }
  }
  if ((_DWORD)v167 != (_DWORD)v5)
  {
    v7 = v5;
    do
    {
      v8 = *(_QWORD *)(a1 + 144) + 368 * v7;
      StringWithAbsoluteTime = CFDateFormatterCreateStringWithAbsoluteTime(v165, cf, *(CFAbsoluteTime *)(v8 + 240));
      v10 = *(_QWORD *)(v8 + 224);
      CStringPtr = CFStringGetCStringPtr(StringWithAbsoluteTime, 0x8000100u);
      re::DynamicString::format((re::DynamicString *)"%llu - %s", (re::DynamicString *)&v183, v10, CStringPtr);
      CFRelease(StringWithAbsoluteTime);
      if (!*(_QWORD *)(a1 + 80)
        || (v13 = *(_QWORD *)(v8 + 224),
            v14 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) >> 27)),
            v15 = *(unsigned int *)(*(_QWORD *)(a1 + 88)
                                  + 4 * (((v14 ^ (v14 >> 31)) - 0x61C8864680B583E9) % *(unsigned int *)(a1 + 104))),
            (_DWORD)v15 == 0x7FFFFFFF))
      {
LABEL_16:
        v180 = 0;
        v181 = 0;
        v182 = 0;
        re::DynamicString::setCapacity(&v179, 0);
      }
      else
      {
        v16 = *(_QWORD *)(a1 + 96);
        while (*(_QWORD *)(v16 + 72 * v15 + 16) != v13
             || *(_QWORD *)(v16 + 72 * v15 + 24)
             || *(_BYTE *)(v16 + 72 * v15 + 32))
        {
          v15 = *(_DWORD *)(v16 + 72 * v15 + 8) & 0x7FFFFFFF;
          if (v15 == 0x7FFFFFFF)
            goto LABEL_16;
        }
        v163 = (_DWORD *)re::ShadowTileManager::dataForTile(a1, (unsigned __int16 *)(v16 + 72 * v15 + 64));
        re::DynamicString::format((re::DynamicString *)"%.3f x %.3f", (re::DynamicString *)&v179, (float)((float)(v163[62] - v163[60]) / (float)*(unsigned int *)(a4 + 4)), (float)((float)(v163[63] - v163[61]) / (float)*(unsigned int *)(a4 + 4)));
      }
      v17 = (float32x4_t *)(v8 + 32);
      v189 = (float32x4_t)xmmword_2260E5F10;
      re::DebugRenderer::drawBox(a2, v17 + 8, v17[3].f32, (__int128 *)&v189, 1);
      re::DebugRenderer::drawAxis(a2, v17 + 8, 1, 0.5, 0.1);
      re::BoundingSphere::BoundingSphere(&v189, (uint64_t)&v17[3], v17 + 8);
      v18 = (unint64_t)&v189 | 0xC;
      v19.columns[0] = (simd_float3)vld1q_dup_f32((const float *)v18);
      v19.columns[1] = (simd_float3)vsubq_f32(v189, (float32x4_t)v19.columns[0]);
      v19.columns[2] = (simd_float3)vaddq_f32(v189, (float32x4_t)v19.columns[0]);
      v20 = (uint32x4_t)vcgtq_f32((float32x4_t)v19.columns[1], (float32x4_t)v19.columns[2]);
      v20.i32[3] = v20.i32[2];
      LODWORD(v18) = vmaxvq_u32(v20);
      v21 = 0uLL;
      if ((v18 & 0x80000000) == 0)
      {
        v22.i64[0] = 0x3F0000003F000000;
        v22.i64[1] = 0x3F0000003F000000;
        v21 = vmulq_f32(vaddq_f32((float32x4_t)v19.columns[1], (float32x4_t)v19.columns[2]), v22);
      }
      v19.columns[1] = (simd_float3)vsubq_f32((float32x4_t)v19.columns[2], (float32x4_t)v19.columns[1]);
      v19.columns[1].i32[3] = 0;
      v19.columns[0] = (simd_float3)vmaxnmq_f32((float32x4_t)v19.columns[1], (float32x4_t)0);
      v173 = (float32x4_t)v19.columns[0];
      v175 = v21;
      v19.columns[0].i64[0] = v17[8].i64[0];
      v19.columns[1].i64[0] = v17[9].i64[0];
      v19.columns[2].i64[0] = v17[10].i64[0];
      v19.columns[0].i32[2] = v17[8].i32[2];
      v19.columns[1].i32[2] = v17[9].i32[2];
      v19.columns[2].i32[2] = v17[10].i32[2];
      v193 = __invert_f3(v19);
      v23 = vzip2q_s32((int32x4_t)v193.columns[0], (int32x4_t)v193.columns[2]);
      v24 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v193.columns[0], (int32x4_t)v193.columns[2]), (int32x4_t)v193.columns[1]);
      v193.columns[0] = (simd_float3)vtrn2q_s32((int32x4_t)v193.columns[0], (int32x4_t)v193.columns[1]);
      v193.columns[0].i32[2] = v193.columns[2].i32[1];
      v193.columns[0] = (simd_float3)vaddq_f32((float32x4_t)vzip1q_s32(v23, vdupq_laneq_s32((int32x4_t)v193.columns[1], 2)), vmlaq_f32(vmulq_f32(v24, (float32x4_t)0), (float32x4_t)0, (float32x4_t)v193.columns[0]));
      v193.columns[1] = (simd_float3)vmulq_f32((float32x4_t)v193.columns[0], (float32x4_t)v193.columns[0]);
      v193.columns[1].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v193.columns[1], 2), vadd_f32(*(float32x2_t *)v193.columns[1].f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v193.columns[1].f32, 1))).u32[0];
      *(float32x2_t *)v193.columns[2].f32 = vrsqrte_f32((float32x2_t)v193.columns[1].u32[0]);
      *(float32x2_t *)v193.columns[2].f32 = vmul_f32(*(float32x2_t *)v193.columns[2].f32, vrsqrts_f32((float32x2_t)v193.columns[1].u32[0], vmul_f32(*(float32x2_t *)v193.columns[2].f32, *(float32x2_t *)v193.columns[2].f32)));
      v25 = vmulq_n_f32((float32x4_t)v193.columns[0], vmul_f32(*(float32x2_t *)v193.columns[2].f32, vrsqrts_f32((float32x2_t)v193.columns[1].u32[0], vmul_f32(*(float32x2_t *)v193.columns[2].f32, *(float32x2_t *)v193.columns[2].f32))).f32[0]);
      v26 = vmuls_lane_f32(0.5, *(float32x2_t *)v173.f32, 1);
      v193.columns[0].f32[0] = v26 * 1.1;
      v193.columns[1].i32[0] = 0;
      v193.columns[1].i32[1] = v193.columns[0].i32[0];
      v27 = vaddq_f32((float32x4_t)v193.columns[1].u64[0], v175);
      v193.columns[1] = (simd_float3)vsubq_f32(vaddq_f32(v27, v25), v27);
      v193.columns[2] = (simd_float3)vmulq_f32((float32x4_t)v193.columns[1], (float32x4_t)v193.columns[1]);
      v193.columns[2].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v193.columns[2], 2), vadd_f32(*(float32x2_t *)v193.columns[2].f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v193.columns[2].f32, 1))).u32[0];
      *(float32x2_t *)v24.f32 = vrsqrte_f32((float32x2_t)v193.columns[2].u32[0]);
      *(float32x2_t *)v24.f32 = vmul_f32(*(float32x2_t *)v24.f32, vrsqrts_f32((float32x2_t)v193.columns[2].u32[0], vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32)));
      v28 = vmulq_n_f32((float32x4_t)v193.columns[1], vmul_f32(*(float32x2_t *)v24.f32, vrsqrts_f32((float32x2_t)v193.columns[2].u32[0], vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32))).f32[0]);
      v29 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), (int8x16_t)v28, 0xCuLL);
      v193.columns[2] = (simd_float3)vmlaq_f32(vmulq_f32(v29, (float32x4_t)xmmword_2261027B0), (float32x4_t)xmmword_2260E5F40, v28);
      v30 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v193.columns[2], (int32x4_t)v193.columns[2]), (int8x16_t)v193.columns[2], 0xCuLL);
      v193.columns[2] = (simd_float3)vmulq_f32((float32x4_t)v193.columns[2], (float32x4_t)v193.columns[2]);
      v193.columns[2].i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v193.columns[2].f32, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v193.columns[2], 2), *(float32x2_t *)v193.columns[2].f32)).u32[0];
      *(float32x2_t *)v23.i8 = vrsqrte_f32((float32x2_t)v193.columns[2].u32[0]);
      *(float32x2_t *)v23.i8 = vmul_f32(*(float32x2_t *)v23.i8, vrsqrts_f32((float32x2_t)v193.columns[2].u32[0], vmul_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8)));
      v31 = vmulq_n_f32(v30, vmul_f32(*(float32x2_t *)v23.i8, vrsqrts_f32((float32x2_t)v193.columns[2].u32[0], vmul_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8))).f32[0]);
      v32 = v31.f32[1];
      v33 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v31, (int32x4_t)v31), (int8x16_t)v31, 0xCuLL), vnegq_f32(v28)), v31, v29);
      v34 = v28.f32[2] + vaddq_f32(v31, v33).f32[0];
      if (v34 >= 0.0)
      {
        v35 = 1.0;
        v33.f32[0] = sqrtf(v34 + 1.0);
        v31.f32[0] = v33.f32[0] + v33.f32[0];
        v39 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v33.f32[0] + v33.f32[0]));
        v40 = vmul_f32(v39, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v33.f32[0] + v33.f32[0]), v39));
        v41 = vmul_f32(v40, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v33.f32[0] + v33.f32[0]), v40)).f32[0];
        v33.f32[0] = (float)(v33.f32[1] - v28.f32[1]) * v41;
        v36 = (float)(v28.f32[0] - v31.f32[2]) * v41;
        v37 = (float)(v31.f32[1] - v33.f32[2]) * v41;
        v38 = v31.f32[0] * 0.25;
      }
      else
      {
        v35 = 1.0;
        if (v31.f32[0] < v28.f32[2] || (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v31, v33))).u8[0] & 1) != 0)
        {
          v31.f32[0] = 1.0 - v31.f32[0];
          v42 = v33.f32[0] < v28.f32[2];
          v43 = sqrtf(v28.f32[2] + (float)(v31.f32[0] - v33.f32[0]));
          *(float *)&v44 = v43 + v43;
          v45 = vrecpe_f32((float32x2_t)v44);
          v46 = vmul_f32(v45, vrecps_f32((float32x2_t)v44, v45));
          v47 = vmul_f32(v46, vrecps_f32((float32x2_t)v44, v46)).f32[0];
          v48 = (float)(v28.f32[0] + v31.f32[2]) * v47;
          v49 = (float)(v28.f32[1] + v33.f32[1]) * v47;
          v50 = *(float *)&v44 * 0.25;
          v51 = (float)(v31.f32[1] - v33.f32[2]) * v47;
          v33.f32[0] = sqrtf((float)(v31.f32[0] - v28.f32[2]) + v33.f32[0]);
          v33.f32[0] = v33.f32[0] + v33.f32[0];
          *(float32x2_t *)v31.f32 = vrecpe_f32((float32x2_t)v33.u32[0]);
          *(float32x2_t *)v31.f32 = vmul_f32(*(float32x2_t *)v31.f32, vrecps_f32((float32x2_t)v33.u32[0], *(float32x2_t *)v31.f32));
          v52 = vmul_f32(*(float32x2_t *)v31.f32, vrecps_f32((float32x2_t)v33.u32[0], *(float32x2_t *)v31.f32)).f32[0];
          v53 = (float)(v32 + v33.f32[2]) * v52;
          v54 = v33.f32[0] * 0.25;
          v55 = (float)(v28.f32[1] + v33.f32[1]) * v52;
          v56 = (float)(v28.f32[0] - v31.f32[2]) * v52;
          if (v42)
            v33.f32[0] = v48;
          else
            v33.f32[0] = v53;
          if (v42)
            v36 = v49;
          else
            v36 = v54;
          if (v42)
            v37 = v50;
          else
            v37 = v55;
          if (v42)
            v38 = v51;
          else
            v38 = v56;
        }
        else
        {
          v33.f32[0] = sqrtf(v31.f32[0] + (float)((float)(1.0 - v33.f32[0]) - v28.f32[2]));
          v33.f32[0] = v33.f32[0] + v33.f32[0];
          *(float32x2_t *)v31.f32 = vrecpe_f32((float32x2_t)v33.u32[0]);
          *(float32x2_t *)v31.f32 = vmul_f32(*(float32x2_t *)v31.f32, vrecps_f32((float32x2_t)v33.u32[0], *(float32x2_t *)v31.f32));
          v31.f32[0] = vmul_f32(*(float32x2_t *)v31.f32, vrecps_f32((float32x2_t)v33.u32[0], *(float32x2_t *)v31.f32)).f32[0];
          v33.f32[0] = v33.f32[0] * 0.25;
          v36 = (float)(v32 + v33.f32[2]) * v31.f32[0];
          v37 = (float)(v28.f32[0] + v31.f32[2]) * v31.f32[0];
          v38 = (float)(v33.f32[1] - v28.f32[1]) * v31.f32[0];
        }
      }
      v57 = vmulq_f32(v173, v173);
      LODWORD(v58) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 2), vaddq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v57.f32, 1))).u32[0];
      LODWORD(v59) = 0;
      *((float *)&v59 + 1) = v26;
      v60 = vsubq_f32(v175, (float32x4_t)v59);
      v61 = vsubq_f32(vaddq_f32(v60, v25), v60);
      v62 = (int32x4_t)vmulq_f32(v61, v61);
      v62.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v62, 2), vadd_f32(*(float32x2_t *)v62.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v62.i8, 1))).u32[0];
      v63 = vrsqrte_f32((float32x2_t)v62.u32[0]);
      v64 = vmul_f32(v63, vrsqrts_f32((float32x2_t)v62.u32[0], vmul_f32(v63, v63)));
      v65 = vmulq_n_f32(v61, vmul_f32(v64, vrsqrts_f32((float32x2_t)v62.u32[0], vmul_f32(v64, v64))).f32[0]);
      v66 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v65, (int32x4_t)v65), (int8x16_t)v65, 0xCuLL);
      v67 = vmlaq_f32(vmulq_f32(v66, (float32x4_t)xmmword_2261027B0), (float32x4_t)xmmword_2260E5F40, v65);
      v68 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v67, (int32x4_t)v67), (int8x16_t)v67, 0xCuLL);
      v69 = (int32x4_t)vmulq_f32(v67, v67);
      v69.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v69.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v69, 2), *(float32x2_t *)v69.i8)).u32[0];
      v70 = vrsqrte_f32((float32x2_t)v69.u32[0]);
      v71 = vmul_f32(v70, vrsqrts_f32((float32x2_t)v69.u32[0], vmul_f32(v70, v70)));
      v72 = vmulq_n_f32(v68, vmul_f32(v71, vrsqrts_f32((float32x2_t)v69.u32[0], vmul_f32(v71, v71))).f32[0]);
      v73 = v72.f32[1];
      v74 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v72, (int32x4_t)v72), (int8x16_t)v72, 0xCuLL), vnegq_f32(v65)), v72, v66);
      v75 = v65.f32[2] + vaddq_f32(v72, v74).f32[0];
      if (v75 >= 0.0)
      {
        v74.f32[0] = sqrtf(v75 + v35);
        v72.f32[0] = v74.f32[0] + v74.f32[0];
        v78 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v74.f32[0] + v74.f32[0]));
        v79 = vmul_f32(v78, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v74.f32[0] + v74.f32[0]), v78));
        v80 = vmul_f32(v79, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v74.f32[0] + v74.f32[0]), v79)).f32[0];
        v74.f32[0] = (float)(v74.f32[1] - v65.f32[1]) * v80;
        v76 = (float)(v65.f32[0] - v72.f32[2]) * v80;
        v65.f32[0] = (float)(v72.f32[1] - v74.f32[2]) * v80;
        v77 = v72.f32[0] * 0.25;
      }
      else if (v72.f32[0] < v65.f32[2]
             || (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v72, v74))).u8[0] & 1) != 0)
      {
        v72.f32[0] = v35 - v72.f32[0];
        v81 = v74.f32[0] < v65.f32[2];
        v82 = sqrtf(v65.f32[2] + (float)(v72.f32[0] - v74.f32[0]));
        *(float *)&v83 = v82 + v82;
        v84 = vrecpe_f32((float32x2_t)v83);
        v85 = vmul_f32(v84, vrecps_f32((float32x2_t)v83, v84));
        v86 = vmul_f32(v85, vrecps_f32((float32x2_t)v83, v85)).f32[0];
        v87 = (float)(v65.f32[0] + v72.f32[2]) * v86;
        v88 = (float)(v65.f32[1] + v74.f32[1]) * v86;
        v89 = *(float *)&v83 * 0.25;
        v90 = (float)(v72.f32[1] - v74.f32[2]) * v86;
        v74.f32[0] = sqrtf((float)(v72.f32[0] - v65.f32[2]) + v74.f32[0]);
        v74.f32[0] = v74.f32[0] + v74.f32[0];
        *(float32x2_t *)v72.f32 = vrecpe_f32((float32x2_t)v74.u32[0]);
        *(float32x2_t *)v72.f32 = vmul_f32(*(float32x2_t *)v72.f32, vrecps_f32((float32x2_t)v74.u32[0], *(float32x2_t *)v72.f32));
        v91 = vmul_f32(*(float32x2_t *)v72.f32, vrecps_f32((float32x2_t)v74.u32[0], *(float32x2_t *)v72.f32)).f32[0];
        v92 = (float)(v73 + v74.f32[2]) * v91;
        v93 = v74.f32[0] * 0.25;
        v94 = (float)(v65.f32[1] + v74.f32[1]) * v91;
        v77 = (float)(v65.f32[0] - v72.f32[2]) * v91;
        if (v81)
          v74.f32[0] = v87;
        else
          v74.f32[0] = v92;
        if (v81)
          v76 = v88;
        else
          v76 = v93;
        if (v81)
          v65.f32[0] = v89;
        else
          v65.f32[0] = v94;
        if (v81)
          v77 = v90;
      }
      else
      {
        v74.f32[0] = sqrtf(v72.f32[0] + (float)((float)(v35 - v74.f32[0]) - v65.f32[2]));
        v74.f32[0] = v74.f32[0] + v74.f32[0];
        *(float32x2_t *)v72.f32 = vrecpe_f32((float32x2_t)v74.u32[0]);
        *(float32x2_t *)v72.f32 = vmul_f32(*(float32x2_t *)v72.f32, vrecps_f32((float32x2_t)v74.u32[0], *(float32x2_t *)v72.f32));
        v72.f32[0] = vmul_f32(*(float32x2_t *)v72.f32, vrecps_f32((float32x2_t)v74.u32[0], *(float32x2_t *)v72.f32)).f32[0];
        v74.f32[0] = v74.f32[0] * 0.25;
        v76 = (float)(v73 + v74.f32[2]) * v72.f32[0];
        v65.f32[0] = (float)(v65.f32[0] + v72.f32[2]) * v72.f32[0];
        v77 = (float)(v74.f32[1] - v65.f32[1]) * v72.f32[0];
      }
      v95 = 0;
      v96 = v33.f32[0] + v33.f32[0];
      v97 = v36 + v36;
      v98 = v37 + v37;
      v99 = v33.f32[0] * (float)(v33.f32[0] + v33.f32[0]);
      v100 = v36 * (float)(v36 + v36);
      v101 = v37 * (float)(v37 + v37);
      v102 = (float)(v33.f32[0] + v33.f32[0]) * v36;
      v103 = (float)(v33.f32[0] + v33.f32[0]) * v37;
      v104 = v97 * v37;
      v105 = v97 * v38;
      v106 = v98 * v38;
      v107.i32[3] = 0;
      v107.f32[0] = v35 - (float)(v100 + v101);
      v107.f32[1] = v102 + v106;
      v107.f32[2] = v103 - v105;
      v108 = v96 * v38;
      v109.i32[3] = 0;
      v109.f32[0] = v102 - v106;
      v109.f32[1] = v35 - (float)(v99 + v101);
      v109.f32[2] = v104 + v108;
      v110 = v184[0];
      v111 = v184[0] >> 1;
      if ((v184[0] & 1) == 0)
        v111 = LOBYTE(v184[0]) >> 1;
      v112 = (float)v111;
      v113 = v180;
      v114 = v180 >> 1;
      if ((v180 & 1) == 0)
        v114 = v180 >> 1;
      v115 = v104 - v108;
      *(float *)&v116 = v35 - (float)(v99 + v100);
      v117.f32[0] = v103 + v105;
      v117.f32[1] = v115;
      v117.i64[1] = v116;
      v118 = sqrtf(v58);
      v27.f32[3] = v35;
      v119 = v76 + v76;
      v120 = v65.f32[0] + v65.f32[0];
      v121 = v76 * (float)(v76 + v76);
      v122 = v65.f32[0] * (float)(v65.f32[0] + v65.f32[0]);
      v123 = (float)(v74.f32[0] + v74.f32[0]) * v76;
      v124 = (float)(v74.f32[0] + v74.f32[0]) * v65.f32[0];
      v125 = v119 * v65.f32[0];
      v126 = (float)(v74.f32[0] + v74.f32[0]) * v77;
      v127 = v119 * v77;
      v128.i32[3] = 0;
      v129 = v120 * v77;
      v130.i32[3] = 0;
      v131.i32[3] = 0;
      v131.f32[0] = v124 + v127;
      v131.f32[1] = v125 - v126;
      LODWORD(v132) = 0;
      *((float *)&v132 + 1) = v118;
      v133 = v74.f32[0] * (float)(v74.f32[0] + v74.f32[0]);
      *(_QWORD *)&v134 = 0;
      *((_QWORD *)&v134 + 1) = LODWORD(v118);
      v168 = v132;
      v169 = LODWORD(v118);
      v185 = LODWORD(v118);
      v186 = v132;
      v187 = v134;
      v188 = xmmword_2260E5D70;
      do
      {
        *(float32x4_t *)((char *)&v189 + v95) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v107, COERCE_FLOAT(*(__int128 *)((char *)&v185 + v95))), v109, *(float32x2_t *)((char *)&v185 + v95), 1), v117, *(float32x4_t *)((char *)&v185 + v95), 2), v27, *(float32x4_t *)((char *)&v185 + v95), 3);
        v95 += 16;
      }
      while (v95 != 64);
      v135 = 0;
      v130.f32[2] = v125 + v126;
      v136 = v189;
      v137 = v190;
      v138 = v191;
      v139 = v192;
      v185 = xmmword_226167DE0;
      v186 = xmmword_226167DF0;
      v174 = (float)v114 / -3.0;
      v187 = xmmword_226167E00;
      v188 = xmmword_2260E5D70;
      do
      {
        *(float32x4_t *)((char *)&v189 + v135) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v136, COERCE_FLOAT(*(__int128 *)((char *)&v185 + v135))), v137, *(float32x2_t *)((char *)&v185 + v135), 1), v138, *(float32x4_t *)((char *)&v185 + v135), 2), v139, *(float32x4_t *)((char *)&v185 + v135), 3);
        v135 += 16;
      }
      while (v135 != 64);
      v131.f32[2] = v35 - (float)(v133 + v121);
      v170 = v131;
      v130.f32[1] = v35 - (float)(v133 + v122);
      v130.f32[0] = v123 - v129;
      v171 = v130;
      v140 = 0;
      *(float *)&v141 = v112 / -3.0;
      DWORD1(v141) = 0;
      DWORD2(v141) = 0;
      *((float *)&v141 + 3) = v35;
      v142 = v189;
      v143 = v190;
      v144 = v191;
      v145 = v192;
      v185 = xmmword_2260E5F10;
      v186 = xmmword_2260E5F20;
      v187 = xmmword_2260E5F40;
      v188 = v141;
      do
      {
        *(float32x4_t *)((char *)&v189 + v140) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v142, COERCE_FLOAT(*(__int128 *)((char *)&v185 + v140))), v143, *(float32x2_t *)((char *)&v185 + v140), 1), v144, *(float32x4_t *)((char *)&v185 + v140), 2), v145, *(float32x4_t *)((char *)&v185 + v140), 3);
        v140 += 16;
      }
      while (v140 != 64);
      v128.f32[1] = v123 + v129;
      v60.f32[3] = v35;
      v176 = v60;
      v128.f32[2] = v124 - v127;
      v128.f32[0] = v35 - (float)(v121 + v122);
      v172 = v128;
      if ((v110 & 1) != 0)
        v146 = (char *)v184[1];
      else
        v146 = (char *)v184 + 1;
      v185 = xmmword_226104350;
      re::DebugRenderer::drawText((uint64_t)a2, (__int128 *)&v189, v146, a3, &v185);
      v147 = 0;
      v185 = v169;
      v186 = v168;
      v187 = v134;
      v188 = xmmword_2260E5D70;
      do
      {
        *(float32x4_t *)((char *)&v189 + v147) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v172, COERCE_FLOAT(*(__int128 *)((char *)&v185 + v147))), v171, *(float32x2_t *)((char *)&v185 + v147), 1), v170, *(float32x4_t *)((char *)&v185 + v147), 2), v176, *(float32x4_t *)((char *)&v185 + v147), 3);
        v147 += 16;
      }
      while (v147 != 64);
      v148 = 0;
      v149 = v189;
      v150 = v190;
      v151 = v191;
      v152 = v192;
      v185 = xmmword_226167DE0;
      v186 = xmmword_226167DF0;
      v187 = xmmword_226167E00;
      v188 = xmmword_2260E5D70;
      do
      {
        *(float32x4_t *)((char *)&v189 + v148) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v149, COERCE_FLOAT(*(__int128 *)((char *)&v185 + v148))), v150, *(float32x2_t *)((char *)&v185 + v148), 1), v151, *(float32x4_t *)((char *)&v185 + v148), 2), v152, *(float32x4_t *)((char *)&v185 + v148), 3);
        v148 += 16;
      }
      while (v148 != 64);
      v153 = 0;
      *(_QWORD *)&v154 = LODWORD(v174);
      DWORD2(v154) = 0;
      HIDWORD(v154) = 1.0;
      v155 = v189;
      v156 = v190;
      v157 = v191;
      v158 = v192;
      v185 = xmmword_2260E5F10;
      v186 = xmmword_2260E5F20;
      v187 = xmmword_2260E5F40;
      v188 = v154;
      do
      {
        *(float32x4_t *)((char *)&v189 + v153) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v155, COERCE_FLOAT(*(__int128 *)((char *)&v185 + v153))), v156, *(float32x2_t *)((char *)&v185 + v153), 1), v157, *(float32x4_t *)((char *)&v185 + v153), 2), v158, *(float32x4_t *)((char *)&v185 + v153), 3);
        v153 += 16;
      }
      while (v153 != 64);
      v159 = v113 & 1;
      if (v159)
        v160 = v181;
      else
        v160 = (char *)&v180 + 1;
      v185 = xmmword_226104350;
      re::DebugRenderer::drawText((uint64_t)a2, (__int128 *)&v189, v160, a3, &v185);
      if (v179 && v159)
        (*(void (**)(void))(*v179 + 40))();
      if (v183 && (v110 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v183 + 40))();
      if (*(_DWORD *)(a1 + 160) <= (v5 + 1))
        v161 = v5 + 1;
      else
        v161 = *(_DWORD *)(a1 + 160);
      while (1)
      {
        v7 = (v5 + 1);
        if (v161 - 1 == (_DWORD)v5)
          break;
        LODWORD(v5) = v5 + 1;
        v162 = v7;
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 144) + 368 * v7 + 8) & 0x80000000) != 0)
          goto LABEL_87;
      }
      v162 = v161;
LABEL_87:
      LODWORD(v5) = v162;
    }
    while ((_DWORD)v167 != v162);
  }
  CFRelease(cf);
}

void re::PersistentShadowState::visualizeShadowPlanes(re::PersistentShadowState *this, os_unfair_lock_s *a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  unsigned int v14;
  unsigned int v15;
  __int128 v16;
  float32x4_t v17;

  if (re::internal::shadows::g_enableShadowFlattening)
  {
    v4 = *((unsigned int *)this + 40);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = (_DWORD *)(*((_QWORD *)this + 18) + 8);
      while ((*v6 & 0x80000000) == 0)
      {
        v6 += 92;
        if (v4 == ++v5)
        {
          LODWORD(v5) = *((_DWORD *)this + 40);
          break;
        }
      }
    }
    else
    {
      LODWORD(v5) = 0;
    }
    if ((_DWORD)v4 != (_DWORD)v5)
    {
      v7 = v5;
      v8 = *((_DWORD *)this + 40);
      do
      {
        v9 = *((_QWORD *)this + 18);
        if (*(_BYTE *)(v9 + 368 * v7 + 272))
        {
          v10 = (float32x4_t *)(v9 + 368 * v7);
          v11.i64[0] = 0x3F0000003F000000;
          v11.i64[1] = 0x3F0000003F000000;
          v12 = vaddq_f32(v10[19], vmulq_f32(v10[18], v11));
          v16 = xmmword_226134DF0;
          v17 = v12;
          re::DebugRenderer::drawArrow(a2, v10 + 19, &v17, &v16, 1, 0.1);
          v13 = vaddq_f32(v10[13], vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v10[10], (float)(v10[5].f32[0] + v10[6].f32[0]) * 0.5), v10[11], v10[5].f32[1]), v10[12], (float)(v10[5].f32[2] + v10[6].f32[2]) * 0.5));
          v16 = xmmword_226134E00;
          v17 = vdivq_f32(v13, (float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3));
          re::DebugRenderer::drawLine(a2, (__int128 *)&v10[19], (__int128 *)&v17, &v16, 1);
          v8 = *((_DWORD *)this + 40);
        }
        if (v8 <= (int)v5 + 1)
          v14 = v5 + 1;
        else
          v14 = v8;
        while (1)
        {
          v7 = (v5 + 1);
          if (v14 - 1 == (_DWORD)v5)
            break;
          LODWORD(v5) = v5 + 1;
          v15 = v7;
          if ((*(_DWORD *)(*((_QWORD *)this + 18) + 368 * v7 + 8) & 0x80000000) != 0)
            goto LABEL_19;
        }
        v15 = v14;
LABEL_19:
        LODWORD(v5) = v15;
      }
      while ((_DWORD)v4 != v15);
    }
  }
}

void re::PersistentShadowState::visualizeShadowMatrices(re::PersistentShadowState *this, os_unfair_lock_s *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v15;
  __int128 v16;
  int v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  float32x4_t v22;
  simd_float4 v23;
  simd_float4 v24;
  simd_float4 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  simd_float4x4 v32;
  simd_float4x4 v33;
  simd_float4x4 v34;
  simd_float4x4 v35;
  simd_float4x4 v36;

  v4 = *((unsigned int *)this + 28);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)(*((_QWORD *)this + 12) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 18;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *((_DWORD *)this + 28);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v8 = v5;
    __asm { FMOV            V0.4S, #-1.0 }
    v20 = _Q0;
    __asm { FMOV            V0.4S, #1.0 }
    v19 = _Q0;
    do
    {
      v15 = re::ShadowTileManager::dataForTile((uint64_t)this, (unsigned __int16 *)(*((_QWORD *)this + 12) + 72 * v8 + 64));
      v29 = xmmword_226134050;
      v30 = 0x3F8000003F800000;
      v31 = 1065353216;
      v16 = v20;
      DWORD2(v16) = *(_DWORD *)(v15 + 1648);
      v26 = v16;
      v27 = 0x3F8000003F800000;
      v28 = 1065353216;
      v32 = __invert_f4(*(simd_float4x4 *)(v15 + 1440));
      v22 = (float32x4_t)v32.columns[0];
      v23 = v32.columns[1];
      v24 = v32.columns[2];
      v25 = v32.columns[3];
      v21 = v19;
      re::DebugRenderer::drawBox(a2, &v22, (float *)&v29, &v21, 1);
      v33 = __invert_f4(*(simd_float4x4 *)(v15 + 1440));
      v22 = (float32x4_t)v33.columns[0];
      v23 = v33.columns[1];
      v24 = v33.columns[2];
      v25 = v33.columns[3];
      re::DebugRenderer::drawAxis(a2, &v22, 1, 0.5, 0.1);
      v34 = __invert_f4(*(simd_float4x4 *)(v15 + 1504));
      v22 = (float32x4_t)v34.columns[0];
      v23 = v34.columns[1];
      v24 = v34.columns[2];
      v25 = v34.columns[3];
      v21 = xmmword_2260FD430;
      re::DebugRenderer::drawBox(a2, &v22, (float *)&v26, &v21, 1);
      v35 = __invert_f4(*(simd_float4x4 *)(v15 + 1504));
      v22 = (float32x4_t)v35.columns[0];
      v23 = v35.columns[1];
      v24 = v35.columns[2];
      v25 = v35.columns[3];
      re::DebugRenderer::drawAxis(a2, &v22, 1, 0.5, 0.1);
      v36 = __invert_f4(*(simd_float4x4 *)(v15 + 1568));
      v22 = (float32x4_t)v36.columns[0];
      v23 = v36.columns[1];
      v24 = v36.columns[2];
      v25 = v36.columns[3];
      re::DebugRenderer::drawAxis(a2, &v22, 1, 0.5, 0.1);
      if (*((_DWORD *)this + 28) <= (v5 + 1))
        v17 = v5 + 1;
      else
        v17 = *((_DWORD *)this + 28);
      v18 = v5;
      while (1)
      {
        v8 = (v18 + 1);
        if (v17 - 1 == v18)
          break;
        ++v18;
        LODWORD(v5) = v8;
        if ((*(_DWORD *)(*((_QWORD *)this + 12) + 72 * v8 + 8) & 0x80000000) != 0)
          goto LABEL_17;
      }
      LODWORD(v5) = v17;
LABEL_17:
      ;
    }
    while ((_DWORD)v4 != (_DWORD)v5);
  }
}

void re::PersistentShadowState::visualizeCullBoundingBoxes(re::PersistentShadowState *this, os_unfair_lock_s *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  float32x4_t *v9;
  int8x16_t v10;
  int8x16_t v11;
  int v12;
  int v13;
  int8x16_t v14;

  v4 = *((unsigned int *)this + 28);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)(*((_QWORD *)this + 12) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 18;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *((_DWORD *)this + 28);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v8 = v5;
    do
    {
      v9 = (float32x4_t *)re::ShadowTileManager::dataForTile((uint64_t)this, (unsigned __int16 *)(*((_QWORD *)this + 12) + 72 * v8 + 64));
      v10.i32[0] = 0;
      v11.i8[0] = v9[83].i8[0];
      v14 = vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v11, v10), 0), (int8x16_t)xmmword_2260E5F10, (int8x16_t)xmmword_2260E5F20);
      re::DebugRenderer::drawBox(a2, v9 + 86, v9[84].f32, (__int128 *)v14.i8, 1);
      if (*((_DWORD *)this + 28) <= (v5 + 1))
        v12 = v5 + 1;
      else
        v12 = *((_DWORD *)this + 28);
      v13 = v5;
      while (1)
      {
        v8 = (v13 + 1);
        if (v12 - 1 == v13)
          break;
        ++v13;
        LODWORD(v5) = v8;
        if ((*(_DWORD *)(*((_QWORD *)this + 12) + 72 * v8 + 8) & 0x80000000) != 0)
          goto LABEL_17;
      }
      LODWORD(v5) = v12;
LABEL_17:
      ;
    }
    while ((_DWORD)v4 != (_DWORD)v5);
  }
}

unint64_t re::Hash<re::ShadowPair>::operator()(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = 0xBF58476D1CE4E5B9 * (a2[1] ^ (a2[1] >> 30));
  v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  v4 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  return (((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
        + (v3 << 6)
        + (v3 >> 2)
        - 0x61C8864680B583E9) ^ v3;
}

uint64_t re::ShadowTileManager::dataForTile(uint64_t a1, unsigned __int16 *a2)
{
  if (*(_QWORD *)(a1 + 56) <= (unint64_t)*a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 72) + 1776 * *a2;
}

uint64_t re::useDitherFade(re *this)
{
  unsigned __int8 v1;
  unsigned __int8 *v2;
  int v4;
  const char *v5;
  char v6;
  char v7[2];

  v2 = (unsigned __int8 *)&unk_255829000;
  if ((v1 & 1) == 0)
  {
    v2 = (_BYTE *)&unk_255829000;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"useDitherFade", v5, v7);
      v6 = v7[1];
      if (!v7[0])
        v6 = 0;
      re::useDitherFade(void)::kUseDitherFade = v6;
      v2 = (_BYTE *)&unk_255829000;
    }
  }
  return v2[2152];
}

double re::DrawingManager::DrawingManager(re::DrawingManager *this)
{
  uint64_t i;
  _OWORD *v2;
  _OWORD *v3;
  double result;

  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_QWORD *)((char *)this + 36) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 0;
  *(_QWORD *)((char *)this + 84) = 0x7FFFFFFFLL;
  *((_QWORD *)this + 25) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 0;
  *((_WORD *)this + 104) = 257;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = &str_110;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_BYTE *)this + 248) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_QWORD *)this + 42) = 0;
  for (i = 344; i != 472; i += 32)
  {
    v2 = (_OWORD *)((char *)this + i);
    *v2 = xmmword_226167E20;
    v2[1] = xmmword_226167E20;
  }
  do
  {
    v3 = (_OWORD *)((char *)this + i);
    *v3 = xmmword_226167E20;
    v3[1] = xmmword_226167E20;
    i += 32;
  }
  while (i != 600);
  result = 0.0;
  *((_OWORD *)this + 39) = 0u;
  *((_DWORD *)this + 160) = 1;
  *(_OWORD *)((char *)this + 648) = 0u;
  *((_QWORD *)this + 89) = 0;
  *((_OWORD *)this + 45) = 0u;
  *((_DWORD *)this + 184) = 0;
  *((_QWORD *)this + 99) = 0x100000000;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((_QWORD *)this + 110) = 0;
  *((_DWORD *)this + 224) = 2;
  *((_QWORD *)this + 113) = 0;
  *((_BYTE *)this + 912) = 0;
  *((_DWORD *)this + 238) = 0;
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *(_QWORD *)((char *)this + 956) = 0x7FFFFFFFLL;
  *((_QWORD *)this + 121) = 1;
  *((_QWORD *)this + 128) = 0;
  *((_DWORD *)this + 258) = 0;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 61) = 0u;
  *((_DWORD *)this + 264) = 0;
  *((_OWORD *)this + 65) = 0u;
  *(_OWORD *)((char *)this + 1064) = xmmword_226133630;
  *(_OWORD *)((char *)this + 1080) = xmmword_226133630;
  *(_OWORD *)((char *)this + 1096) = xmmword_226133630;
  *(_OWORD *)((char *)this + 1112) = xmmword_226133630;
  *((_QWORD *)this + 178) = 0;
  *(_OWORD *)((char *)this + 1128) = 0u;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *(_OWORD *)((char *)this + 1160) = 0u;
  *(_OWORD *)((char *)this + 1176) = 0u;
  *(_OWORD *)((char *)this + 1192) = 0u;
  *(_OWORD *)((char *)this + 1208) = 0u;
  *(_OWORD *)((char *)this + 1224) = 0u;
  *(_OWORD *)((char *)this + 1240) = 0u;
  *(_OWORD *)((char *)this + 1256) = 0u;
  *(_OWORD *)((char *)this + 1272) = 0u;
  *(_OWORD *)((char *)this + 1288) = 0u;
  *(_OWORD *)((char *)this + 1304) = 0u;
  *(_OWORD *)((char *)this + 1320) = 0u;
  *(_OWORD *)((char *)this + 1336) = 0u;
  *(_OWORD *)((char *)this + 1352) = 0u;
  *(_OWORD *)((char *)this + 1368) = 0u;
  *(_OWORD *)((char *)this + 1384) = 0u;
  *(_OWORD *)((char *)this + 1400) = 0u;
  *((_DWORD *)this + 354) = 0;
  *(_OWORD *)((char *)this + 1572) = 0u;
  *(_OWORD *)((char *)this + 1544) = 0u;
  *(_OWORD *)((char *)this + 1560) = 0u;
  *(_OWORD *)((char *)this + 1512) = 0u;
  *(_OWORD *)((char *)this + 1528) = 0u;
  *(_OWORD *)((char *)this + 1496) = 0u;
  *((_QWORD *)this + 199) = 0;
  *((_OWORD *)this + 100) = 0u;
  *((_BYTE *)this + 1616) = 0;
  *(_OWORD *)((char *)this + 1624) = 0u;
  *((_DWORD *)this + 410) = 0;
  *((_OWORD *)this + 103) = 0u;
  *((_OWORD *)this + 104) = 0u;
  *((_OWORD *)this + 105) = 0u;
  *((_DWORD *)this + 424) = 0;
  *(_OWORD *)((char *)this + 1704) = 0u;
  *(_OWORD *)((char *)this + 1720) = 0u;
  *((_DWORD *)this + 434) = 0;
  *((_QWORD *)this + 219) = 0;
  *((_QWORD *)this + 218) = 0;
  *((_QWORD *)this + 220) = 1114636288;
  *((_BYTE *)this + 1768) = 1;
  return result;
}

void re::DrawingManager::~DrawingManager(re::DrawingManager *this)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  id *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  re::DynamicArray<re::CommandBuffer>::deinit((uint64_t)this + 1712);
  v2 = *((_QWORD *)this + 209);
  if (v2)
  {
    v3 = (void **)*((_QWORD *)this + 213);
    if (v3)
    {
      v4 = *((_QWORD *)this + 211);
      if (v4)
      {
        v5 = 32 * v4;
        do
        {
          v6 = *v3;
          v3 += 4;

          v5 -= 32;
        }
        while (v5);
        v2 = *((_QWORD *)this + 209);
        v3 = (void **)*((_QWORD *)this + 213);
      }
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v2 + 40))(v2, v3);
    }
    *((_QWORD *)this + 213) = 0;
    *((_QWORD *)this + 210) = 0;
    *((_QWORD *)this + 211) = 0;
    *((_QWORD *)this + 209) = 0;
    ++*((_DWORD *)this + 424);
  }
  v7 = *((_QWORD *)this + 174);
  if (v7)
  {
    v8 = *((_QWORD *)this + 178);
    if (v8)
    {
      v9 = *((_QWORD *)this + 176);
      if (v9)
      {
        v10 = 200 * v9;
        v11 = v8 + 48;
        do
        {
          re::SampleBufferObjectPool::~SampleBufferObjectPool((re::SampleBufferObjectPool *)(v11 + 40));
          re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::deinit(v11);

          v11 += 200;
          v10 -= 200;
        }
        while (v10);
        v7 = *((_QWORD *)this + 174);
        v8 = *((_QWORD *)this + 178);
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v8);
    }
    *((_QWORD *)this + 178) = 0;
    *((_QWORD *)this + 175) = 0;
    *((_QWORD *)this + 176) = 0;
    *((_QWORD *)this + 174) = 0;
    ++*((_DWORD *)this + 354);
  }
  for (i = 1384; i != 1128; i -= 8)

  v13 = *((_QWORD *)this + 126);
  if (v13)
  {
    if (*((_QWORD *)this + 130))
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
    *((_QWORD *)this + 130) = 0;
    *((_QWORD *)this + 127) = 0;
    *((_QWORD *)this + 128) = 0;
    *((_QWORD *)this + 126) = 0;
    ++*((_DWORD *)this + 258);
  }
  re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit((uint64_t *)this + 115);

  v14 = (void *)*((_QWORD *)this + 108);
  if (v14)
  {

    *((_QWORD *)this + 108) = 0;
  }
  v15 = (void *)*((_QWORD *)this + 106);
  if (v15)
  {

    *((_QWORD *)this + 106) = 0;
  }
  v16 = (void *)*((_QWORD *)this + 101);
  if (v16)
  {

    *((_QWORD *)this + 101) = 0;
  }

  v17 = (void *)*((_QWORD *)this + 98);
  if (v17)
  {

    *((_QWORD *)this + 98) = 0;
  }
  v18 = (void *)*((_QWORD *)this + 97);
  if (v18)
  {

    *((_QWORD *)this + 97) = 0;
  }
  v19 = (void *)*((_QWORD *)this + 96);
  if (v19)
  {

    *((_QWORD *)this + 96) = 0;
  }
  v20 = (void *)*((_QWORD *)this + 95);
  if (v20)
  {

    *((_QWORD *)this + 95) = 0;
  }
  v21 = (void *)*((_QWORD *)this + 94);
  if (v21)
  {

    *((_QWORD *)this + 94) = 0;
  }
  re::DynamicArray<re::BufferSlice>::deinit((uint64_t)this + 712);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 624);

  v22 = (void *)*((_QWORD *)this + 29);
  if (v22)
  {

    *((_QWORD *)this + 29) = 0;
  }
  re::StringID::destroyString((re::DrawingManager *)((char *)this + 216));
  v23 = *((_QWORD *)this + 21);
  if (v23)
  {
    v24 = (id *)*((_QWORD *)this + 25);
    if (v24)
    {
      v25 = *((_QWORD *)this + 23);
      if (v25)
      {
        v26 = 8 * v25;
        do
        {
          if (*v24)
          {

            *v24 = 0;
          }
          ++v24;
          v26 -= 8;
        }
        while (v26);
        v23 = *((_QWORD *)this + 21);
        v24 = (id *)*((_QWORD *)this + 25);
      }
      (*(void (**)(uint64_t, id *))(*(_QWORD *)v23 + 40))(v23, v24);
    }
    *((_QWORD *)this + 25) = 0;
    *((_QWORD *)this + 22) = 0;
    *((_QWORD *)this + 23) = 0;
    *((_QWORD *)this + 21) = 0;
    ++*((_DWORD *)this + 48);
  }
  v27 = *((_QWORD *)this + 20);
  if (v27)
  {
    if (*((_QWORD *)this + 14))
      *((_QWORD *)this + 14) = 0;
    if (*((_QWORD *)this + 13))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
      *((_QWORD *)this + 13) = 0;
    }
    *(_OWORD *)((char *)this + 152) = 0u;
    *(_OWORD *)((char *)this + 136) = 0u;
    *(_OWORD *)((char *)this + 120) = 0u;
  }
  re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::deinit((uint64_t *)this + 6);
  re::HashTable<unsigned long,re::CachedTileRenderPipelineState,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this);
}

BOOL re::DrawingManager::init(re::DrawingManager *this, re::RenderManager *a2, re::ProfilerManager *a3, re::ColorManager *a4)
{
  id v8;
  unsigned __int8 v9;
  int *p_buf;
  re *v11;
  unsigned __int8 v12;
  NSObject *v13;
  const char *v14;
  re::mtl *v15;
  re *v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  id v22;
  id v23;
  id *v24;
  unsigned __int8 v25;
  id *v26;
  void *v27;
  id v28;
  unsigned __int8 v29;
  id v30;
  re::mtl *v31;
  uint64_t v32;
  id *v33;
  void *v34;
  id v35;
  unsigned __int8 v36;
  id v37;
  re *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  re *v47;
  uint64_t v48;
  uint64_t *v49;
  re *v50;
  uint64_t v51;
  uint64_t v52;
  re *v53;
  uint64_t v54;
  uint64_t v55;
  re *v56;
  uint64_t v57;
  uint64_t v58;
  re *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  re *v63;
  uint64_t *v64;
  uint64_t v65;
  re *v66;
  uint64_t v67;
  uint64_t *v68;
  re::RenderGraphManager *v69;
  re::RenderGraphManager *v70;
  const char *v71;
  re *rep;
  char *v73;
  uint64_t v74;
  uint64_t *v75;
  _BYTE *v76;
  uint64_t v77;
  __int128 v78;
  re *v79;
  uint64_t *v80;
  re::DebugRenderer *v81;
  void **v82;
  re *v83;
  uint64_t *v84;
  uint64_t v85;
  int32x4_t v86;
  __int128 v87;
  int v88;
  uint64_t *v89;
  re::RenderThread *v90;
  re::RenderThread *v91;
  uint64_t *v92;
  NSObject *v93;
  void *v94;
  id v95;
  id *v96;
  id v97;
  id v98;
  id *v99;
  id v100;
  id v101;
  id *v102;
  void *v103;
  _OWORD *v104;
  id v105;
  uint64_t TextureCompressionType;
  id v107;
  id *v108;
  id v109;
  id v110;
  re *v111;
  uint64_t v112;
  int v113;
  const char *v115;
  char v116;
  const char *v117;
  char v118;
  const char *v119;
  int v120;
  re::ns::String *v121;
  re::ns::String *v122;
  int64x2_t v123;
  char v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  id v129;
  __int128 buf;
  uint64_t v131;
  int64x2_t v132;
  uint64_t v133;
  uint64_t v134;

  v134 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 32) = a2;
  *((_QWORD *)this + 33) = a4;
  v8 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD510], sel_alloc), sel_init);
  v9 = atomic_load((unsigned __int8 *)&qword_25411A090);
  p_buf = (int *)&_MergedGlobals_389;
  if ((v9 & 1) == 0)
    goto LABEL_110;
  while (1)
  {
    objc_msgSend(v8, sel_setDisableCrossQueueHazardTracking_, *(unsigned __int8 *)p_buf);
    v11 = (re *)objc_msgSend(v8, sel_setMaxCommandBufferCount_, 1024);
    v12 = atomic_load((unsigned __int8 *)p_buf + 16);
    if ((v12 & 1) == 0)
    {
      v11 = (re *)__cxa_guard_acquire(&qword_25411A098);
      if ((_DWORD)v11)
      {
        re::Defaults::BOOLValue((re::Defaults *)"enableSynchronousCommandQueue", v117, (char *)&buf);
        if ((_BYTE)buf)
          v118 = BYTE1(buf);
        else
          v118 = 1;
        byte_25411A089 = v118;
        __cxa_guard_release(&qword_25411A098);
      }
    }
    v13 = *re::graphicsLogObjects(v11);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      if (byte_25411A089)
        v14 = "enabled";
      else
        v14 = "disabled";
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v14;
      _os_log_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEFAULT, "com.apple.re.enableSynchronousCommandQueue is %s", (uint8_t *)&buf, 0xCu);
    }
    v15 = (re::mtl *)objc_msgSend(v8, sel_setCommitSynchronously_, byte_25411A089);
    if (*((_BYTE *)a2 + 270))
    {
      v16 = (re *)re::mtl::commandQueueSupportsDisableAsyncCompletionDispatch(v15);
      if ((_DWORD)v16)
      {
        if (*((_BYTE *)a2 + 266))
        {
          v17 = *re::graphicsLogObjects(v16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf) = 0;
            v18 = "disableMetalAsyncCompletionDispatch is not supported with enableRenderThread";
LABEL_15:
            _os_log_impl(&dword_224FE9000, v17, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&buf, 2u);
          }
        }
        else
        {
          *((_BYTE *)this + 794) = 1;
          objc_msgSend(v8, sel_setDisableAsyncCompletionDispatch_, 1);
          v19 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, 0);
          v20 = dispatch_queue_attr_make_with_autorelease_frequency(v19, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
          v21 = dispatch_queue_create("RE Async Command Buffer Callback Queue", v20);
          v22 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD6F8], sel_alloc), sel_initWithDispatchQueue_, v21);
          v23 = (id)*((_QWORD *)this + 108);
          if (v23 == v22)
          {

          }
          else
          {
            if (v23)

            *((_QWORD *)this + 108) = v22;
          }
          dispatch_release(v21);
        }
      }
      else
      {
        v17 = *re::graphicsLogObjects(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          v18 = "DisableAsyncCompletionDispatch is not supported";
          goto LABEL_15;
        }
      }
    }
    v24 = (id *)((char *)a2 + 184);
    v25 = atomic_load((unsigned __int8 *)&qword_25411A0A0);
    p_buf = &dword_25411A08C;
    if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_25411A0A0))
    {
      re::Defaults::intValue((re::Defaults *)"backboarddGPUPriorityOverride", v119, (uint64_t)&buf);
      if ((_BYTE)buf)
        v120 = DWORD1(buf);
      else
        v120 = 1;
      dword_25411A08C = v120;
      __cxa_guard_release(&qword_25411A0A0);
    }
    re::mtl::Device::makeCommandQueue((id *)a2 + 23, (uint64_t)v8, &buf);
    v26 = (id *)((char *)this + 280);
    if ((__int128 *)((char *)this + 280) != &buf)
    {
      v27 = (void *)buf;
      *(_QWORD *)&buf = 0;
      v28 = *v26;
      *v26 = v27;

    }
    v29 = atomic_load((unsigned __int8 *)&qword_25411A0D0);
    if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_25411A0D0))
    {
      v121 = re::ns::String::String((re::ns::String *)&qword_25411A0C8, (re::ns *)"RenderManagerQueue");
      __cxa_guard_release((__guard *)v121 + 1);
    }
    v30 = qword_25411A0C8;
    objc_msgSend(*v26, "setLabel:", v30);

    v31 = (re::mtl *)objc_msgSend(*v26, "setGPUPriority:", dword_25411A08C);
    if (!*v26)
    {
      re::internal::assertLog((re::internal *)4, v32, "assertion failure: '%s' (%s:line %i) Failed to make command queue.", "m_commandQueue.isValid()", "init", 174);
      _os_crash();
      __break(1u);
LABEL_106:
      re::internal::assertLog((re::internal *)4, v39, "assertion failure: '%s' (%s:line %i) Failed to make command queue.", "m_caCommandQueue.isValid()", "init", 184);
      _os_crash();
      __break(1u);
LABEL_107:
      re::internal::assertLog((re::internal *)4, v62, "assertion failure: '%s' (%s:line %i) PerFrameAllocatorGPU manager is not null before init.", "m_perFrameAllocatorGPUManager == nullptr", "init", 256);
      _os_crash();
      __break(1u);
      goto LABEL_108;
    }
    if (re::mtl::commandQueueSupportsDisableAsyncCompletionDispatch(v31))
      objc_msgSend(v8, sel_setDisableAsyncCompletionDispatch_, 0);
    re::mtl::Device::makeCommandQueue((id *)a2 + 23, (uint64_t)v8, &buf);
    v33 = (id *)((char *)this + 288);
    if ((__int128 *)((char *)this + 288) != &buf)
    {
      v34 = (void *)buf;
      *(_QWORD *)&buf = 0;
      v35 = *v33;
      *v33 = v34;

    }
    v36 = atomic_load((unsigned __int8 *)&qword_25411A0E0);
    if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_25411A0E0))
    {
      v122 = re::ns::String::String((re::ns::String *)&qword_25411A0D8, (re::ns *)"CA Command Queue");
      __cxa_guard_release((__guard *)v122 + 1);
    }
    v37 = qword_25411A0D8;
    objc_msgSend(*v33, "setLabel:", v37);

    v38 = (re *)objc_msgSend(*v33, "setGPUPriority:", dword_25411A08C);
    if (!*v33)
      goto LABEL_106;
    v40 = re::globalAllocators(v38);
    p_buf = (int *)*((_QWORD *)a2 + 30);
    if (p_buf)
    {
      if ((unint64_t)p_buf >> 60 || (unint64_t)(16 * (_QWORD)p_buf) >= 0xFFFFFFFFFFFFFFF0)
        goto LABEL_109;
      v42 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v40[2] + 32))(v40[2], (16 * (_QWORD)p_buf + 16) | 7, 0);
      v43 = (_QWORD *)((v42 + 23) & 0xFFFFFFFFFFFFFFF8);
      *(v43 - 2) = p_buf;
      *(v43 - 1) = v42;
      bzero(v43, 16 * (_QWORD)p_buf);
      v44 = *((_QWORD *)a2 + 30);
      *((_QWORD *)this + 103) = v43;
      if (v44)
      {
        v45 = 0;
        v46 = 0;
        do
        {
          *(_QWORD *)&buf = objc_msgSend(*v24, sel_newFence);
          NS::SharedPtr<MTL::Texture>::operator=((void **)(*((_QWORD *)this + 103) + v45 + 8), (void **)&buf);
          if ((_QWORD)buf)

          *(_QWORD *)&buf = objc_msgSend(*v24, sel_newFence);
          NS::SharedPtr<MTL::Texture>::operator=((void **)(*((_QWORD *)this + 103) + v45), (void **)&buf);
          if ((_QWORD)buf)

          ++v46;
          v45 += 16;
        }
        while (*((_QWORD *)a2 + 30) > v46);
      }
    }
    else
    {
      *((_QWORD *)this + 103) = 0;
    }
    *(_QWORD *)&buf = objc_msgSend(*v24, sel_newEvent);
    NS::SharedPtr<MTL::Texture>::operator=((void **)this + 29, (void **)&buf);
    v47 = (re *)buf;
    if ((_QWORD)buf)

    *((_BYTE *)this + 248) = 1;
    v48 = *(_QWORD *)(*((_QWORD *)this + 32) + 136);
    v49 = re::globalAllocators(v47);
    v50 = (re *)re::PerFrameAllocatorManager::addOwner((os_unfair_lock_s *)v49[6], this);
    *(_QWORD *)(v48 + 40) = v50;
    *(_QWORD *)(v48 + 48) = 0;
    v51 = *(_QWORD *)(*((_QWORD *)this + 32) + 136);
    v52 = re::globalAllocators(v50)[2];
    *(_QWORD *)&buf = &off_24ED778A0;
    *((_QWORD *)&buf + 1) = this;
    v132.i64[0] = v52;
    v132.i64[1] = (uint64_t)&buf;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(v51 + 208, (uint64_t)&buf);
    v53 = (re *)v132.i64[1];
    if (v132.i64[1])
    {
      v53 = (re *)(**(uint64_t (***)(uint64_t))v132.i64[1])(v132.i64[1]);
      if ((__int128 *)v132.i64[1] != &buf)
        v53 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v132.i64[0] + 40))(v132.i64[0]);
    }
    v54 = *(_QWORD *)(*((_QWORD *)this + 32) + 136);
    v55 = re::globalAllocators(v53)[2];
    *(_QWORD *)&buf = &off_24ED778F8;
    *((_QWORD *)&buf + 1) = this;
    v132.i64[0] = v55;
    v132.i64[1] = (uint64_t)&buf;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(v54 + 128, (uint64_t)&buf);
    v56 = (re *)v132.i64[1];
    if (v132.i64[1])
    {
      v56 = (re *)(**(uint64_t (***)(uint64_t))v132.i64[1])(v132.i64[1]);
      if ((__int128 *)v132.i64[1] != &buf)
        v56 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v132.i64[0] + 40))(v132.i64[0]);
    }
    v57 = *(_QWORD *)(*((_QWORD *)this + 32) + 136);
    v58 = re::globalAllocators(v56)[2];
    *(_QWORD *)&buf = &off_24ED77950;
    *((_QWORD *)&buf + 1) = this;
    v132.i64[0] = v58;
    v132.i64[1] = (uint64_t)&buf;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(v57 + 168, (uint64_t)&buf);
    v59 = (re *)v132.i64[1];
    if (v132.i64[1])
    {
      v59 = (re *)(**(uint64_t (***)(uint64_t))v132.i64[1])(v132.i64[1]);
      if ((__int128 *)v132.i64[1] != &buf)
        v59 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v132.i64[0] + 40))(v132.i64[0]);
    }
    v60 = *(_QWORD *)(*((_QWORD *)this + 32) + 136);
    v61 = re::globalAllocators(v59)[2];
    *(_QWORD *)&buf = &off_24ED779A8;
    *((_QWORD *)&buf + 1) = this;
    p_buf = (int *)&buf;
    v132.i64[0] = v61;
    v132.i64[1] = (uint64_t)&buf;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(v60 + 248, (uint64_t)&buf);
    v63 = (re *)v132.i64[1];
    if (v132.i64[1])
    {
      v63 = (re *)(**(uint64_t (***)(uint64_t))v132.i64[1])(v132.i64[1]);
      v62 = v132.i64[1];
      if ((__int128 *)v132.i64[1] != &buf)
        v63 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v132.i64[0] + 40))(v132.i64[0]);
    }
    if (*((_QWORD *)this + 42))
      goto LABEL_107;
    v64 = re::globalAllocators(v63);
    v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v64[2] + 32))(v64[2], 5312, 8);
    *(_BYTE *)v65 = 0;
    *(_QWORD *)(v65 + 24) = 0;
    *(_QWORD *)(v65 + 32) = 0;
    *(_QWORD *)(v65 + 16) = 0;
    *(_DWORD *)(v65 + 40) = 0;
    *(_QWORD *)(v65 + 48) = 0;
    *(_QWORD *)(v65 + 56) = 0;
    *(_DWORD *)(v65 + 64) = 0;
    *(_QWORD *)(v65 + 68) = 0x1FFFFFFFFLL;
    *(_DWORD *)(v65 + 80) = 0;
    *(_QWORD *)(v65 + 96) = 0;
    *(_QWORD *)(v65 + 104) = 0;
    *(_QWORD *)(v65 + 88) = 0;
    *(_DWORD *)(v65 + 112) = 0;
    *(_QWORD *)(v65 + 5304) = 0;
    bzero((void *)(v65 + 120), 0x143CuLL);
    *((_QWORD *)this + 42) = v65;
    re::PerFrameAllocatorGPUManager::init((re::PerFrameAllocatorGPUManager *)v65, *((re::RenderManager **)this + 32));
    if (!*((_QWORD *)this + 37))
      break;
LABEL_108:
    re::internal::assertLog((re::internal *)4, v67, "assertion failure: '%s' (%s:line %i) Render Graph manager is not null before init.", "m_renderGraphManager == nullptr", "init", 260);
    _os_crash();
    __break(1u);
LABEL_109:
    re::internal::assertLog((re::internal *)6, v41, "assertion failure: '%s' (%s:line %i) Size overflow in allocateArray. Element size = %zu, count = %zu", "!overflow", "allocateArray", 61, 16, p_buf);
    _os_crash();
    __break(1u);
LABEL_110:
    if (__cxa_guard_acquire(&qword_25411A090))
    {
      re::Defaults::BOOLValue((re::Defaults *)"disableCrossQueueHazardTracking", v115, (char *)&buf);
      if ((_BYTE)buf)
        v116 = BYTE1(buf);
      else
        v116 = 0;
      *(_BYTE *)p_buf = v116;
      __cxa_guard_release((__guard *)p_buf + 1);
    }
  }
  v68 = re::globalAllocators(v66);
  v69 = (re::RenderGraphManager *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v68[2] + 32))(v68[2], 704, 8);
  v70 = re::RenderGraphManager::RenderGraphManager(v69);
  *((_QWORD *)this + 37) = v70;
  re::RenderGraphManager::init(v70, *((id **)this + 32));
  re::Defaults::BOOLValue((re::Defaults *)"disableRenderGraphCaching", v71, &v124);
  v73 = (char *)a2 + 268;
  if (v124)
    v73 = &v125;
  if (*v73)
  {
    v74 = *((_QWORD *)this + 37);
    *(_BYTE *)(v74 + 380) = 1;
    *(_DWORD *)(v74 + 376) = 0;
    *(_QWORD *)(v74 + 352) = 0;
    *(_QWORD *)(v74 + 360) = 0;
    *(_BYTE *)(v74 + 368) = 0;
    rep = (re *)std::chrono::steady_clock::now().__d_.__rep_;
    *(_QWORD *)(v74 + 352) = rep;
    *(_BYTE *)(v74 + 368) = 1;
    *(_DWORD *)(v74 + 672) = 0;
  }
  v75 = re::globalAllocators(rep);
  v76 = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v75[2] + 32))(v75[2], 912, 16);
  bzero(v76, 0x390uLL);
  *v76 = 1;
  *((_QWORD *)v76 + 25) = 0;
  *((_QWORD *)v76 + 26) = 0;
  *((_QWORD *)v76 + 24) = 0;
  *((_DWORD *)v76 + 54) = 0;
  v76[304] = 0;
  *((_QWORD *)v76 + 47) = 0;
  *((_QWORD *)v76 + 44) = 0;
  *((_QWORD *)v76 + 45) = 0;
  *((_QWORD *)v76 + 43) = 0;
  *((_DWORD *)v76 + 92) = 0;
  *((_QWORD *)v76 + 60) = 0;
  *((_QWORD *)v76 + 57) = 0;
  *((_QWORD *)v76 + 58) = 0;
  *((_QWORD *)v76 + 56) = 0;
  *((_DWORD *)v76 + 118) = 0;
  *((_QWORD *)v76 + 70) = 0;
  *((_QWORD *)v76 + 72) = 0;
  *((_QWORD *)v76 + 71) = 0;
  *((_DWORD *)v76 + 146) = 0;
  v76[809] = 0;
  *(_OWORD *)(v76 + 148) = 0u;
  *(_OWORD *)(v76 + 136) = 0u;
  *(_OWORD *)(v76 + 120) = 0u;
  *(_OWORD *)(v76 + 104) = 0u;
  *(_OWORD *)(v76 + 88) = 0u;
  *(_OWORD *)(v76 + 72) = 0u;
  *(_OWORD *)(v76 + 56) = 0u;
  *(_OWORD *)(v76 + 40) = 0u;
  *(_OWORD *)(v76 + 24) = 0u;
  *(_OWORD *)(v76 + 8) = 0u;
  v76[184] = 0;
  *((_QWORD *)v76 + 21) = 0;
  *((_QWORD *)v76 + 22) = 0;
  *((_OWORD *)v76 + 37) = 0u;
  *((_OWORD *)v76 + 38) = 0u;
  *((_DWORD *)v76 + 156) = 0;
  *(_OWORD *)(v76 + 632) = 0u;
  *(_OWORD *)(v76 + 648) = 0u;
  *(_OWORD *)(v76 + 664) = 0u;
  *(_OWORD *)(v76 + 680) = 0u;
  *(_OWORD *)(v76 + 696) = 0u;
  *(_OWORD *)(v76 + 712) = 0u;
  *(_OWORD *)(v76 + 728) = 0u;
  *(_OWORD *)(v76 + 744) = 0u;
  *(_OWORD *)(v76 + 753) = 0u;
  *((_DWORD *)v76 + 203) = 1065353216;
  *((_QWORD *)v76 + 102) = 0x3F8000003F000000;
  *(_QWORD *)(v76 + 828) = 0x412000003DCCCCCDLL;
  v77 = MEMORY[0x24BDAEDF8];
  v78 = *(_OWORD *)(MEMORY[0x24BDAEDF8] + 16);
  *((_OWORD *)v76 + 53) = *MEMORY[0x24BDAEDF8];
  *((_OWORD *)v76 + 54) = v78;
  *((_OWORD *)v76 + 55) = *(_OWORD *)(v77 + 32);
  *((_QWORD *)this + 40) = v76;
  re::ProbeManager::init((re::ProbeManager *)v76, *((const re::RenderManager **)this + 32));
  if (*((_BYTE *)a2 + 250))
  {
    v80 = re::globalAllocators(v79);
    v81 = (re::DebugRenderer *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v80[2] + 32))(v80[2], 464, 8);
    re::DebugRenderer::DebugRenderer(v81);
    *((_QWORD *)this + 38) = v82;
    re::DebugRenderer::init(v82, *((id **)this + 32));
    v84 = re::globalAllocators(v83);
    v85 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v84[2] + 32))(v84[2], 304, 16);
    *(_OWORD *)v85 = 0u;
    *(_OWORD *)(v85 + 16) = 0u;
    *(_OWORD *)(v85 + 32) = 0u;
    *(_OWORD *)(v85 + 48) = 0u;
    *(_OWORD *)(v85 + 96) = 0u;
    *(_OWORD *)(v85 + 112) = 0u;
    *(_OWORD *)(v85 + 128) = 0u;
    *(_OWORD *)(v85 + 144) = 0u;
    *(_OWORD *)(v85 + 176) = 0u;
    *(_OWORD *)(v85 + 192) = 0u;
    *(_OWORD *)(v85 + 224) = 0u;
    *(_OWORD *)(v85 + 240) = 0u;
    *(_OWORD *)(v85 + 256) = 0u;
    *(_OWORD *)(v85 + 272) = 0u;
    *(_OWORD *)(v85 + 288) = 0u;
    *(_OWORD *)(v85 + 208) = 0u;
    v86 = vdupq_n_s32(0x7F800000u);
    *(int32x4_t *)(v85 + 48) = v86;
    *(_OWORD *)(v85 + 64) = 0u;
    *(_QWORD *)&v87 = 0x7F0000007FLL;
    *((_QWORD *)&v87 + 1) = 0x7F0000007FLL;
    *(_OWORD *)(v85 + 64) = v87;
    *(_OWORD *)(v85 + 80) = 0u;
    *(_QWORD *)(v85 + 88) = 0;
    *(_QWORD *)(v85 + 96) = 0;
    *(_QWORD *)(v85 + 80) = 0;
    *(int32x4_t *)(v85 + 144) = v86;
    *(_OWORD *)(v85 + 160) = 0u;
    *(_OWORD *)(v85 + 160) = v87;
    *(_QWORD *)(v85 + 184) = 0;
    *(_QWORD *)(v85 + 192) = 0;
    *(_QWORD *)(v85 + 176) = 0;
    *(_QWORD *)(v85 + 208) = 0;
    *(_QWORD *)(v85 + 216) = 0;
    *(_QWORD *)(v85 + 224) = 0;
    *(_DWORD *)(v85 + 232) = 0;
    *(_OWORD *)(v85 + 240) = 0u;
    *(_OWORD *)(v85 + 256) = 0u;
    *(_OWORD *)(v85 + 268) = 0u;
    *((_QWORD *)this + 39) = v85;
    v79 = (re *)re::PrimitiveRenderer::init((re::PrimitiveRenderer *)v85, *((id **)this + 32));
  }
  *((_QWORD *)this + 75) = *((_QWORD *)this + 32);
  *((_QWORD *)this + 76) = this;
  *((_QWORD *)this + 77) = a4;
  *((_QWORD *)this + 208) = a3;
  if (a3)
  {
    v79 = (re *)re::ProfilerManager::getProcessor<re::FrameProfiler,void>((uint64_t)a3);
    *((_QWORD *)this + 206) = v79;
  }
  v88 = *((unsigned __int8 *)a2 + 266);
  *((_BYTE *)this + 793) = v88;
  *((_BYTE *)this + 792) = v88;
  if (v88)
  {
    v89 = re::globalAllocators(v79);
    v90 = (re::RenderThread *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v89[2] + 32))(v89[2], 440, 8);
    re::RenderThread::RenderThread(v90);
    *((_QWORD *)this + 41) = v91;
    re::RenderThread::init(v91, *((re::RenderManager **)this + 32));
  }
  v92 = re::globalAllocators(v79);
  re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::init((uint64_t)this + 48, v92[2], 3);
  if (*((_BYTE *)this + 794))
  {
    *(_QWORD *)&buf = objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 184), sel_newSharedEvent);
    NS::SharedPtr<MTL::Texture>::operator=((void **)this + 101, (void **)&buf);
    if ((_QWORD)buf)

  }
  else
  {
    v93 = dispatch_semaphore_create(*((_QWORD *)a2 + 30));

    v94 = (void *)*((_QWORD *)this + 100);
    *((_QWORD *)this + 100) = v93;

  }
  *(_QWORD *)&buf = objc_msgSend(*(id *)(*((_QWORD *)this + 32) + 184), sel_newEvent);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 106, (void **)&buf);
  if ((_QWORD)buf)

  v129 = *(id *)(*((_QWORD *)this + 32) + 184);
  v95 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  objc_msgSend(v95, sel_setTextureType_, 2);
  objc_msgSend(v95, sel_setWidth_, 128);
  objc_msgSend(v95, sel_setHeight_, 128);
  objc_msgSend(v95, sel_setPixelFormat_, 115);
  objc_msgSend(v95, sel_setMipmapLevelCount_, 1);
  objc_msgSend(v95, sel_setSampleCount_, 1);
  objc_msgSend(v95, sel_setUsage_, 1);
  objc_msgSend(v95, sel_setStorageMode_, 0);
  re::mtl::Device::makeTexture(v95, &v129, &buf);
  v96 = (id *)((char *)this + 752);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 94, (void **)&buf);
  if ((_QWORD)buf)

  objc_msgSend(*v96, sel_setLabel_, CFSTR("Brdf Lookup Table"));
  v97 = *v96;
  buf = 0uLL;
  v131 = 0;
  v132 = vdupq_n_s64(0x80uLL);
  v133 = 1;
  objc_msgSend(v97, sel_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_, &buf, 0, 0, &re::brdfMapData, 1024, 0x20000);
  if (v95)

  v129 = *(id *)(*((_QWORD *)this + 32) + 184);
  v98 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  objc_msgSend(v98, sel_setTextureType_, 2);
  objc_msgSend(v98, sel_setWidth_, 128);
  objc_msgSend(v98, sel_setHeight_, 128);
  objc_msgSend(v98, sel_setPixelFormat_, 115);
  objc_msgSend(v98, sel_setMipmapLevelCount_, 1);
  objc_msgSend(v98, sel_setSampleCount_, 1);
  objc_msgSend(v98, sel_setUsage_, 1);
  objc_msgSend(v98, sel_setStorageMode_, 0);
  re::mtl::Device::makeTexture(v98, &v129, &buf);
  v99 = (id *)((char *)this + 784);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 98, (void **)&buf);
  if ((_QWORD)buf)

  objc_msgSend(*v99, sel_setLabel_, CFSTR("Cloth Brdf Lookup Table"));
  v100 = *v99;
  buf = 0uLL;
  v131 = 0;
  v132 = vdupq_n_s64(0x80uLL);
  v133 = 1;
  objc_msgSend(v100, sel_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_, &buf, 0, 0, &re::clothBrdfMapData, 1024, 0x20000);
  if (v98)

  v129 = *(id *)(*((_QWORD *)this + 32) + 184);
  v101 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  objc_msgSend(v101, sel_setTextureType_, 2);
  objc_msgSend(v101, sel_setWidth_, 32);
  objc_msgSend(v101, sel_setHeight_, 32);
  objc_msgSend(v101, sel_setPixelFormat_, 25);
  objc_msgSend(v101, sel_setMipmapLevelCount_, 1);
  objc_msgSend(v101, sel_setSampleCount_, 1);
  objc_msgSend(v101, sel_setUsage_, 1);
  objc_msgSend(v101, sel_setStorageMode_, 0);
  re::mtl::Device::makeTexture(v101, &v129, &buf);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 95, (void **)&buf);
  if ((_QWORD)buf)

  objc_msgSend(*((id *)this + 95), sel_setLabel_, CFSTR("Multiscatter Brdf Lookup Table"));
  *(_QWORD *)&buf = objc_msgSend(v129, sel_newBufferWithLength_options_, 64, 0);
  v102 = (id *)((char *)this + 768);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 96, (void **)&buf);
  if ((_QWORD)buf)

  objc_msgSend(*v102, sel_setLabel_, CFSTR("Multiscatter Brdf Averaged Lookup Table"));
  v103 = (void *)*((_QWORD *)this + 95);
  buf = 0uLL;
  v131 = 0;
  v132 = vdupq_n_s64(0x20uLL);
  v133 = 1;
  objc_msgSend(v103, sel_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_, &buf, 0, 0, &re::multiscatterBrdfMapData, 64, 2048);
  v104 = objc_msgSend(*v102, sel_contents);
  *v104 = re::multiscatterBrdfAvgTableData;
  v104[1] = unk_22616867D;
  v104[2] = xmmword_22616868D;
  v104[3] = unk_22616869D;
  if (v101)

  v105 = *(id *)(*((_QWORD *)this + 32) + 184);
  v128 = 1;
  v129 = v105;
  v126 = 0;
  v127 = 115;
  TextureCompressionType = re::mtl::getTextureCompressionType(&v129, &v126, &v127, &v128);
  v107 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  if ((objc_msgSend(v107, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
    || objc_msgSend(v107, sel_methodSignatureForSelector_, sel_setCompressionType_))
  {
    objc_msgSend(v107, sel_setCompressionType_, TextureCompressionType);
  }
  objc_msgSend(v107, sel_setTextureType_, 3);
  objc_msgSend(v107, sel_setWidth_, 64);
  objc_msgSend(v107, sel_setHeight_, 64);
  objc_msgSend(v107, sel_setArrayLength_, 2);
  objc_msgSend(v107, sel_setPixelFormat_, 115);
  objc_msgSend(v107, sel_setSampleCount_, 1);
  objc_msgSend(v107, sel_setMipmapLevelCount_, 1);
  objc_msgSend(v107, sel_setUsage_, 1);
  objc_msgSend(v107, sel_setStorageMode_, 0);
  re::mtl::Device::makeTexture(v107, &v129, &buf);
  v108 = (id *)((char *)this + 776);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 97, (void **)&buf);
  if ((_QWORD)buf)

  objc_msgSend(*v108, sel_setLabel_, CFSTR("Area Light Table Array"));
  v109 = *v108;
  buf = 0uLL;
  v131 = 0;
  v123 = vdupq_n_s64(0x40uLL);
  v132 = v123;
  v133 = 1;
  objc_msgSend(v109, sel_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_, &buf, 0, 0, &re::gAreaLightTable1, 512, 0x8000);
  v110 = *v108;
  buf = 0uLL;
  v131 = 0;
  v132 = v123;
  v133 = 1;
  objc_msgSend(v110, sel_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_, &buf, 0, 1, &re::gAreaLightTable2, 512, 0x8000);
  if (v107)

  re::DrawingManager::initShaderSources(this);
  if (*((_BYTE *)a2 + 269))
  {
    v112 = re::globalAllocators(v111)[2];
    *(_QWORD *)&buf = &off_24ED77A00;
    *((_QWORD *)&buf + 1) = this;
    v132.i64[0] = v112;
    v132.i64[1] = (uint64_t)&buf;
    LOWORD(v129) = *((_QWORD *)this + 121);
    re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::add((uint64_t)this + 920, &v129, (uint64_t)&buf);
    ++*((_QWORD *)this + 121);
    re::DrawingManager::activatePerfSampling(this);
    if (v132.i64[1])
    {
      (**(void (***)(uint64_t))v132.i64[1])(v132.i64[1]);
      if ((__int128 *)v132.i64[1] != &buf)
        (*(void (**)(uint64_t))(*(_QWORD *)v132.i64[0] + 40))(v132.i64[0]);
    }
  }
  v113 = *((unsigned __int8 *)this + 248);
  if (v8)

  return v113 != 0;
}

void re::DrawingManager::initShaderSources(re::DrawingManager *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _anonymous_namespace_ *v5;
  re::BufferTable *v6;
  id v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  re::MaterialManager::resizeScenes(*(re::MaterialManager **)(*((_QWORD *)this + 32) + 24), 1uLL);
  v2 = *((_QWORD *)this + 32);
  v3 = *(_QWORD **)(*(_QWORD *)(v2 + 24) + 656);
  v15 = 0x59C04294BD50;
  re::TextureTable::setTexture(v3, &v15, (id *)(*(_QWORD *)(v2 + 64) + 24));
  v14 = 0x27635BB0799E8825;
  v15 = 0;
  re::TextureTable::setTexture(v3, &v14, (id *)(*(_QWORD *)(*((_QWORD *)this + 32) + 64) + 24));
  v14 = 0;
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 32) + 24) + 640);
  re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::setCapacity((_QWORD *)(v4 + 72), 3uLL);
  ++*(_DWORD *)(v4 + 96);
  v13 = 0x15085BDF2ALL;
  re::TextureTable::setTexture((_QWORD *)v4, &v13, (id *)this + 94);
  v12 = 0x242DE8CC841767B0;
  v13 = 0;
  re::TextureTable::setTexture((_QWORD *)v4, &v12, (id *)this + 98);
  v11 = 0x11BEEAE3F6511AA0;
  v12 = 0;
  re::TextureTable::setTexture((_QWORD *)v4, &v11, (id *)this + 95);
  v6 = *(re::BufferTable **)(*(_QWORD *)(*((_QWORD *)this + 32) + 24) + 712);
  v10 = 0x2803BD43311CF958;
  v11 = 0;
  v7 = *((id *)this + 96);
  v8 = 0;
  v9 = objc_msgSend(*((id *)this + 96), sel_length);
  re::BufferTable::setBuffer(v6, (const re::WeakStringID *)&v10, (uint64_t)&v7);
  if (v7)

}

_QWORD *re::DrawingManager::activatePerfSampling(re::DrawingManager *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  re *v5;
  uint64_t v6;
  re *v7;
  uint64_t v8;
  _QWORD v9[3];
  uint64_t v10;
  _QWORD *v11;
  _QWORD v12[3];
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 208);
  if (v2 && re::ProfilerManager::isProcessorEnabled<re::ProfilerDetailedHUDProcessor,void>(v2)
    || (v3 = *((_QWORD *)this + 206)) != 0 && (*(_BYTE *)(v3 + 177) & 0x10) != 0)
  {
    v5 = (re *)re::RenderStat::activatePerfSampling((uint64_t)this + 872, (id *)this + 35, 1);
    v6 = re::globalAllocators(v5)[2];
    v12[0] = &off_24ED77BC8;
    v12[1] = this;
    v13 = v6;
    v14 = v12;
    v7 = (re *)re::RenderStat::addMTLCounterHandler((unint64_t)this + 872, (uint64_t)v12, 1u);
    v8 = re::globalAllocators(v7)[2];
    v9[0] = &off_24ED77C30;
    v9[1] = this;
    v10 = v8;
    v11 = v9;
    re::RenderStat::addMTLCounterHandler((unint64_t)this + 872, (uint64_t)v9, 2u);
    if (v11)
    {
      (*(void (**)(_QWORD *))*v11)(v11);
      if (v11 != v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    }
    result = v14;
    if (v14)
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))*v14)(v14);
      if (v14 != v12)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
    }
  }
  else
  {
    objc_storeStrong((id *)this + 113, *((id *)this + 35));
    atomic_store(1u, (unsigned __int8 *)this + 912);
    return (_QWORD *)re::RenderStat::setPerfSamplingMode((re::DrawingManager *)((char *)this + 872), 0);
  }
  return result;
}

void re::DrawingManager::prepareForDeinit(re::DrawingManager *this)
{
  re::RenderThread *v2;
  unsigned int v4;
  unsigned int v5;
  BOOL v7;
  unsigned int v8;
  unint64_t v9;
  BOOL v10;
  unsigned int v11;
  void *v12;
  std::chrono::nanoseconds __ns;

  v2 = (re::RenderThread *)*((_QWORD *)this + 41);
  if (v2)
    re::RenderThread::join(v2);
  if (*((_BYTE *)this + 794))
    objc_msgSend(*((id *)this + 35), "dispatchAvailableCompletionNotifications");
  if (!atomic_load((unsigned int *)this + 210))
    goto LABEL_25;
  v4 = 0;
  do
  {
    __ns.__rep_ = 100000000;
    std::this_thread::sleep_for (&__ns);
    v5 = v4 + 1;
    if (atomic_load((unsigned int *)this + 210))
      v7 = v4 >= 0x13;
    else
      v7 = 1;
    ++v4;
  }
  while (!v7);
  if (v5 != 20)
  {
LABEL_25:
    if (*((_BYTE *)this + 794))
    {
      objc_msgSend(*((id *)this + 101), sel_waitUntilSignaledValue_timeoutMS_, *((_QWORD *)this + 102) + *(_QWORD *)(*((_QWORD *)this + 32) + 240) - 1, 0xFFFFFFFFLL);

      *(_OWORD *)((char *)this + 808) = 0u;
    }
    else
    {
      if (*(_QWORD *)(*((_QWORD *)this + 32) + 240))
      {
        v8 = 1;
        do
        {
          dispatch_semaphore_wait(*((dispatch_semaphore_t *)this + 100), 0xFFFFFFFFFFFFFFFFLL);
          v9 = *(_QWORD *)(*((_QWORD *)this + 32) + 240);
          v10 = v9 > v8++;
        }
        while (v10);
        if (v9)
        {
          v11 = 1;
          do
          {
            dispatch_semaphore_signal(*((dispatch_semaphore_t *)this + 100));
            v10 = *(_QWORD *)(*((_QWORD *)this + 32) + 240) > (unint64_t)v11++;
          }
          while (v10);
        }
      }
      v12 = (void *)*((_QWORD *)this + 100);
      *((_QWORD *)this + 100) = 0;

    }
  }
  *((_BYTE *)this + 795) = 1;
}

double re::DrawingManager::deinit(re::DrawingManager *this)
{
  char *v2;
  uint64_t v3;
  id **v4;
  uint64_t v5;
  id *v6;
  uint64_t v7;
  re::RenderGraphManager *v8;
  re *v9;
  re::RenderGraphManager *v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  re *v43;
  re::DebugRenderer *v44;
  uint64_t v45;
  re::PrimitiveRenderer *v46;
  uint64_t v47;
  re *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id *v66;
  void *v67;
  void *v68;

  v2 = (char *)this + 624;
  if (*((_QWORD *)this + 78))
  {
    v3 = *((_QWORD *)this + 79);
    if (v3)
    {
      if ((*((_BYTE *)this + 640) & 1) != 0)
        v4 = (id **)((char *)this + 648);
      else
        v4 = (id **)*((_QWORD *)this + 82);
      v5 = 8 * v3;
      do
      {
        v6 = *v4++;
        (*((void (**)(id *))*v6 + 2))(v6);
        objc_destroyWeak(v6 + 1);
        v6[1] = 0;
        v5 -= 8;
      }
      while (v5);
    }
  }
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v2);
  v7 = *((_QWORD *)this + 41);
  if (v7)
  {
    if (*(_BYTE *)(v7 + 16))
    {
      re::RenderThread::join(*((re::RenderThread **)this + 41));
      *(_QWORD *)(v7 + 8) = 0;
      *(_BYTE *)(v7 + 16) = 0;
      v7 = *((_QWORD *)this + 41);
    }
    re::internal::destroyPersistent<re::RenderThread>((re *)v7);
    *((_QWORD *)this + 41) = 0;
  }

  *((_QWORD *)this + 29) = 0;
  *((_BYTE *)this + 248) = 0;
  re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::clear((uint64_t)this + 48);
  re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::deinit((uint64_t *)this + 6);
  re::PerFrameAllocatorGPUManager::freeAllocatorsOlderOrEqual(*((re **)this + 42), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 32) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 32) + 136) + 16) << 60));
  v8 = (re::RenderGraphManager *)*((_QWORD *)this + 37);
  if (v8)
  {
    v9 = re::RenderGraphManager::deinit(v8);
    v10 = (re::RenderGraphManager *)*((_QWORD *)this + 37);
    if (v10)
    {
      v11 = re::globalAllocators(v9)[2];
      re::RenderGraphManager::~RenderGraphManager(v10);
      (*(void (**)(uint64_t, re::RenderGraphManager *))(*(_QWORD *)v11 + 40))(v11, v10);
    }
    *((_QWORD *)this + 37) = 0;
  }
  v12 = *((_QWORD *)this + 40);
  if (!v12)
    goto LABEL_85;
  *(_QWORD *)(v12 + 8) = 0;

  *(_QWORD *)(v12 + 80) = 0;
  *(_QWORD *)(v12 + 128) = 0;
  v14 = *((_QWORD *)this + 40);
  if (!v14)
    goto LABEL_84;
  v15 = re::globalAllocators(v13)[2];
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(v14 + 704);
  v16.n128_f64[0] = re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(v14 + 640);
  v17 = *(_QWORD *)(v14 + 600);
  if (v17)
  {
    v18 = *(_QWORD *)(v14 + 632);
    if (v18)
    {
      v19 = *(_QWORD *)(v14 + 616);
      if (v19)
      {
        v20 = 80 * v19;
        v21 = (id *)(v18 + 8);
        do
        {
          if (*v21)
          {

            *v21 = 0;
          }
          v21 += 10;
          v20 -= 80;
        }
        while (v20);
        v17 = *(_QWORD *)(v14 + 600);
        v18 = *(_QWORD *)(v14 + 632);
      }
      (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v17 + 40))(v17, v18, v16);
    }
    *(_QWORD *)(v14 + 632) = 0;
    *(_QWORD *)(v14 + 608) = 0;
    *(_QWORD *)(v14 + 616) = 0;
    *(_QWORD *)(v14 + 600) = 0;
    ++*(_DWORD *)(v14 + 624);
  }
  v22 = *(_QWORD *)(v14 + 560);
  if (v22)
  {
    v23 = *(_QWORD *)(v14 + 592);
    if (v23)
    {
      v24 = *(_QWORD *)(v14 + 576);
      if (v24)
      {
        v25 = 24 * v24;
        v26 = (id *)(v23 + 8);
        do
        {
          if (*v26)
          {

            *v26 = 0;
          }
          v26 += 3;
          v25 -= 24;
        }
        while (v25);
        v22 = *(_QWORD *)(v14 + 560);
        v23 = *(_QWORD *)(v14 + 592);
      }
      (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v22 + 40))(v22, v23, v16);
    }
    *(_QWORD *)(v14 + 592) = 0;
    *(_QWORD *)(v14 + 568) = 0;
    *(_QWORD *)(v14 + 576) = 0;
    *(_QWORD *)(v14 + 560) = 0;
    ++*(_DWORD *)(v14 + 584);
  }
  re::Optional<re::ProbeLatLongComputeWorkload>::~Optional(v14 + 488);
  v27 = *(_QWORD *)(v14 + 448);
  if (v27)
  {
    if (*(_QWORD *)(v14 + 480))
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
    *(_QWORD *)(v14 + 480) = 0;
    *(_QWORD *)(v14 + 456) = 0;
    *(_QWORD *)(v14 + 464) = 0;
    *(_QWORD *)(v14 + 448) = 0;
    ++*(_DWORD *)(v14 + 472);
  }
  v28 = *(_QWORD *)(v14 + 344);
  if (v28)
  {
    if (*(_QWORD *)(v14 + 376))
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
    *(_QWORD *)(v14 + 376) = 0;
    *(_QWORD *)(v14 + 352) = 0;
    *(_QWORD *)(v14 + 360) = 0;
    *(_QWORD *)(v14 + 344) = 0;
    ++*(_DWORD *)(v14 + 368);
  }
  re::Optional<re::ProbeManager::SliceOperation>::~Optional(v14 + 232);
  v29 = *(_QWORD *)(v14 + 192);
  if (!v29)
    goto LABEL_61;
  v30 = *(_QWORD *)(v14 + 224);
  if (!v30)
    goto LABEL_60;
  v31 = *(_QWORD *)(v14 + 208);
  if (!v31)
    goto LABEL_59;
  v32 = v31 << 6;
  do
  {
    v33 = *(_QWORD **)(v30 + 40);
    if ((_QWORD *)(v30 + 16) == v33)
    {
      v33 = (_QWORD *)(v30 + 16);
      v34 = 4;
    }
    else
    {
      if (!v33)
        goto LABEL_55;
      v34 = 5;
    }
    (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_55:
    if (*(_QWORD *)v30)
    {

      *(_QWORD *)v30 = 0;
    }
    v30 += 64;
    v32 -= 64;
  }
  while (v32);
  v29 = *(_QWORD *)(v14 + 192);
  v30 = *(_QWORD *)(v14 + 224);
LABEL_59:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 40))(v29, v30);
LABEL_60:
  *(_QWORD *)(v14 + 224) = 0;
  *(_QWORD *)(v14 + 200) = 0;
  *(_QWORD *)(v14 + 208) = 0;
  *(_QWORD *)(v14 + 192) = 0;
  ++*(_DWORD *)(v14 + 216);
LABEL_61:
  v35 = *(_QWORD *)(v14 + 136);
  if (v35)
  {
    if (*(_QWORD *)(v14 + 168))
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
    *(_QWORD *)(v14 + 168) = 0;
    *(_QWORD *)(v14 + 144) = 0;
    *(_QWORD *)(v14 + 152) = 0;
    *(_QWORD *)(v14 + 136) = 0;
    ++*(_DWORD *)(v14 + 160);
  }
  v36 = *(void **)(v14 + 128);
  if (v36)
  {

    *(_QWORD *)(v14 + 128) = 0;
  }
  v37 = *(void **)(v14 + 120);
  if (v37)
  {

    *(_QWORD *)(v14 + 120) = 0;
  }
  v38 = *(void **)(v14 + 112);
  if (v38)
  {

    *(_QWORD *)(v14 + 112) = 0;
  }
  v39 = *(void **)(v14 + 104);
  if (v39)
  {

    *(_QWORD *)(v14 + 104) = 0;
  }
  v40 = *(void **)(v14 + 88);
  if (v40)
  {

    *(_QWORD *)(v14 + 88) = 0;
  }
  v41 = *(void **)(v14 + 80);
  if (v41)
  {

    *(_QWORD *)(v14 + 80) = 0;
  }
  v42 = *(_QWORD *)(v14 + 72);
  if (v42)
  {
    if (*(_QWORD *)(v14 + 24))
      *(_QWORD *)(v14 + 24) = 0;
    if (*(_QWORD *)(v14 + 16))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
      *(_QWORD *)(v14 + 16) = 0;
    }
    *(_OWORD *)(v14 + 48) = 0u;
    *(_OWORD *)(v14 + 64) = 0u;
    *(_OWORD *)(v14 + 32) = 0u;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 40))(v15, v14);
LABEL_84:
  *((_QWORD *)this + 40) = 0;
LABEL_85:
  v43 = (re *)*((_QWORD *)this + 38);
  if (v43)
  {
    v43 = (re *)re::DebugRenderer::deinit(v43);
    v44 = (re::DebugRenderer *)*((_QWORD *)this + 38);
    if (v44)
    {
      v45 = re::globalAllocators(v43)[2];
      re::DebugRenderer::~DebugRenderer(v44);
      v43 = (re *)(*(uint64_t (**)(uint64_t, re::DebugRenderer *))(*(_QWORD *)v45 + 40))(v45, v44);
    }
    *((_QWORD *)this + 38) = 0;
  }
  v46 = (re::PrimitiveRenderer *)*((_QWORD *)this + 39);
  if (v46)
  {
    *(_BYTE *)v46 = 0;
    v47 = re::globalAllocators(v43)[2];
    re::PrimitiveRenderer::~PrimitiveRenderer(v46);
    (*(void (**)(uint64_t, re::PrimitiveRenderer *))(*(_QWORD *)v47 + 40))(v47, v46);
    *((_QWORD *)this + 39) = 0;
  }
  v48 = (re *)*((_QWORD *)this + 42);
  if (v48)
  {
    v48 = (re *)re::PerFrameAllocatorGPUManager::deinit((uint64_t)v48);
    v49 = *((_QWORD *)this + 42);
    if (v49)
    {
      v50 = re::globalAllocators(v48)[2];
      v51 = *(_QWORD *)(v49 + 5272);
      if (v51)
      {
        if (*(_QWORD *)(v49 + 5304))
          (*(void (**)(uint64_t))(*(_QWORD *)v51 + 40))(v51);
        *(_QWORD *)(v49 + 5304) = 0;
        *(_QWORD *)(v49 + 5280) = 0;
        *(_QWORD *)(v49 + 5288) = 0;
        *(_QWORD *)(v49 + 5272) = 0;
        ++*(_DWORD *)(v49 + 5296);
      }
      v52 = 5120;
      do
      {
        *(_QWORD *)(v49 + v52 + 96) = 0;
        v52 -= 40;
      }
      while (v52);
      v53 = *(_QWORD *)(v49 + 88);
      if (v53)
      {
        v54 = *(_QWORD *)(v49 + 120);
        if (v54)
        {
          v55 = *(_QWORD *)(v49 + 104);
          if (v55)
          {
            v56 = 88 * v55;
            v57 = v54 + 40;
            do
            {
              v58 = *(_QWORD *)(v57 + 8);
              if (v58)
              {
                if (*(_QWORD *)(v57 + 40))
                  (*(void (**)(uint64_t))(*(_QWORD *)v58 + 40))(v58);
                *(_QWORD *)(v57 + 40) = 0;
                *(_QWORD *)(v57 + 16) = 0;
                *(_QWORD *)(v57 + 24) = 0;
                *(_QWORD *)(v57 + 8) = 0;
                ++*(_DWORD *)(v57 + 32);
              }
              v59 = *(_QWORD *)(v57 - 32);
              if (v59)
              {
                if (*(_QWORD *)v57)
                  (*(void (**)(uint64_t))(*(_QWORD *)v59 + 40))(v59);
                *(_QWORD *)v57 = 0;
                *(_QWORD *)(v57 - 24) = 0;
                *(_QWORD *)(v57 - 16) = 0;
                *(_QWORD *)(v57 - 32) = 0;
                ++*(_DWORD *)(v57 - 8);
              }
              v57 += 88;
              v56 -= 88;
            }
            while (v56);
            v53 = *(_QWORD *)(v49 + 88);
            v54 = *(_QWORD *)(v49 + 120);
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 40))(v53, v54);
        }
        *(_QWORD *)(v49 + 120) = 0;
        *(_QWORD *)(v49 + 96) = 0;
        *(_QWORD *)(v49 + 104) = 0;
        *(_QWORD *)(v49 + 88) = 0;
        ++*(_DWORD *)(v49 + 112);
      }
      re::DataArray<re::PerFrameAllocatorGPU>::deinit(v49 + 16);
      v60 = *(_QWORD *)(v49 + 16);
      if (v60)
      {
        if (*(_QWORD *)(v49 + 48))
          (*(void (**)(uint64_t))(*(_QWORD *)v60 + 40))(v60);
        *(_QWORD *)(v49 + 48) = 0;
        *(_QWORD *)(v49 + 24) = 0;
        *(_QWORD *)(v49 + 32) = 0;
        *(_QWORD *)(v49 + 16) = 0;
        ++*(_DWORD *)(v49 + 40);
      }
      v48 = (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 40))(v50, v49);
    }
    *((_QWORD *)this + 42) = 0;
  }
  v61 = re::globalAllocators(v48);
  v62 = *((_QWORD *)this + 103);
  if (v62)
  {
    v63 = v61[2];
    v65 = *(_QWORD *)(v62 - 16);
    v64 = *(_QWORD *)(v62 - 8);
    if (v65 - 1 >= 0)
    {
      v66 = (id *)(v62 + 16 * v65 - 8);
      do
      {
        if (*v66)
        {

          *v66 = 0;
        }
        v67 = *(v66 - 1);
        if (v67)
        {

          *(v66 - 1) = 0;
        }
        --v65;
        v66 -= 2;
      }
      while (v65 > 0);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 40))(v63, v64);
  }
  *((_QWORD *)this + 103) = 0;
  if ((*((_BYTE *)this + 912) & 1) != 0)
  {
    re::RenderStat::clearMTLCounterHandlers((uint64_t (***)(_QWORD))this + 109);
    re::RenderStat::deinitializeCurrentMode((re::DrawingManager *)((char *)this + 872));
    v68 = (void *)*((_QWORD *)this + 113);
    *((_QWORD *)this + 113) = 0;

  }
  return re::FrameManager::deinitRenderFrameCounting(*(re::FrameManager **)(*((_QWORD *)this + 32) + 136));
}

re *re::internal::destroyPersistent<re::RenderThread>(re *result)
{
  re *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  char *v6;
  uint64_t v7;

  if (!result)
    return result;
  v1 = result;
  v2 = re::globalAllocators(result)[2];
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)v1 + 392));
  std::mutex::~mutex((std::mutex *)((char *)v1 + 328));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)v1 + 272));
  std::mutex::~mutex((std::mutex *)((char *)v1 + 208));
  v3 = (_QWORD *)*((_QWORD *)v1 + 19);
  if (v3 == (_QWORD *)((char *)v1 + 128))
  {
    v4 = 4;
    v3 = (_QWORD *)((char *)v1 + 128);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  for (i = 0; i != -80; i -= 40)
  {
    v6 = (char *)v1 + i;
    v7 = *(_QWORD *)((char *)v1 + i + 72);
    if (v7)
    {
      if (*((_QWORD *)v6 + 13))
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
      *((_QWORD *)v6 + 13) = 0;
      *(_QWORD *)((char *)v1 + i + 80) = 0;
      *(_QWORD *)((char *)v1 + i + 88) = 0;
      *(_QWORD *)((char *)v1 + i + 72) = 0;
      ++*(_DWORD *)((char *)v1 + i + 96);
    }
  }
  std::thread::~thread((std::thread *)v1);
  return (re *)(*(uint64_t (**)(uint64_t, re *))(*(_QWORD *)v2 + 40))(v2, v1);
}

void re::DrawingManager::waitForGPUInternal(re::DrawingManager *this)
{
  uint64_t v2[2];
  _BYTE v3[16];

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v3, 5008, (uint64_t)this);
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v2);
  if (*((_BYTE *)this + 794))
    objc_msgSend(*((id *)this + 101), sel_waitUntilSignaledValue_timeoutMS_, *((_QWORD *)this + 102), 0xFFFFFFFFLL);
  else
    dispatch_semaphore_wait(*((dispatch_semaphore_t *)this + 100), 0xFFFFFFFFFFFFFFFFLL);
  re::ProfilerTimeGuard<(re::ProfilerStatistic)12>::end((uint64_t)v2);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v3);
}

uint64_t re::DrawingManager::currentCommandBuffer(re::DrawingManager *this)
{
  uint64_t v2;
  id v3;

  v2 = *((_QWORD *)this + 216);
  if (v2 && (v3 = *(id *)(*((_QWORD *)this + 218) + 24 * v2 - 8), v3, v3))
    return *((_QWORD *)this + 218) + 24 * *((_QWORD *)this + 216) - 24;
  else
    return re::DrawingManager::createQueuedCommandBuffer(this);
}

uint64_t re::DrawingManager::createQueuedCommandBuffer(re::DrawingManager *this)
{
  unsigned __int8 v2;
  id v3;
  void *v4;
  uint64_t v5;
  const char *v7;
  char v8;
  id v9;
  __n128 v10;
  id v11;

  v10.n128_u32[0] = -1;
  v10.n128_u64[1] = 0;
  v11 = 0;
  if ((v2 & 1) == 0
  {
    re::Defaults::BOOLValue((re::Defaults *)"enableEncoderExecStateErrorOption", v7, (char *)&v9);
    if ((_BYTE)v9)
      v8 = BYTE1(v9);
    else
      v8 = 0;
    re::DrawingManager::createQueuedCommandBuffer(void)::enableEncoderExecStateErrorOption = v8;
  }
  if (*(unsigned __int8 *)(*((_QWORD *)this + 32) + 273) | re::DrawingManager::createQueuedCommandBuffer(void)::enableEncoderExecStateErrorOption)
  {
    v3 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD508], sel_alloc), sel_init);
    v4 = v3;
    if (*(_BYTE *)(*((_QWORD *)this + 32) + 273)
      && ((objc_msgSend(v3, sel_respondsToSelector_, sel_setDisableFineGrainedComputePreemption_) & 1) != 0
       || objc_msgSend(v4, sel_methodSignatureForSelector_, sel_setDisableFineGrainedComputePreemption_)))
    {
      objc_msgSend(v4, sel_setDisableFineGrainedComputePreemption_, 1);
    }
    if (re::DrawingManager::createQueuedCommandBuffer(void)::enableEncoderExecStateErrorOption)
      objc_msgSend(v4, sel_setErrorOptions_, 1);
    re::mtl::CommandQueue::makeCommandBufferWithDescriptor((id *)this + 35, (uint64_t)v4, &v9);
    re::ObjCObject::operator=(&v11, &v9);
    v10.n128_u64[1] = 0;

    if (v4)
  }
  else
  {
    re::mtl::CommandQueue::makeCommandBuffer((id *)this + 35, &v9);
    re::ObjCObject::operator=(&v11, &v9);
    v10.n128_u64[1] = 0;

  }
  re::DynamicArray<re::CommandBuffer>::add((re::DrawingManager *)((char *)this + 1712), &v10);
  v5 = *((_QWORD *)this + 218) + 24 * *((_QWORD *)this + 216) - 24;

  return v5;
}

void re::DrawingManager::finalizeCommandBuffers(re::DrawingManager *this)
{
  re *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  uint64_t v10;
  id v11;
  id v12;

  if ((*((_BYTE *)this + 912) & 1) != 0)
  {
    v2 = (re::DrawingManager *)((char *)this + 872);
    v3 = *((_QWORD *)this + 218);
    v4 = *((_QWORD *)this + 216);
    if (v4)
    {
      v5 = 24 * v4;
      v6 = (id *)(v3 + 16);
      do
      {
        v7 = *((unsigned int *)v6 - 4);
        if ((_DWORD)v7 != -1)
        {
          v12 = *v6;
          re::RenderStat::finishMTLCounterSampling(v2, v7, &v12);

        }
        v6 += 3;
        v5 -= 24;
      }
      while (v5);
      v3 = *((_QWORD *)this + 218);
      v8 = *((_QWORD *)this + 216) - 1;
    }
    else
    {
      v8 = -1;
    }
    v9 = (id *)(v3 + 24 * v8);
    v10 = *(unsigned int *)v9;
    v11 = v9[2];
    re::RenderStat::finishFrame((unsigned int *)v2, v10, &v11);

  }
}

void re::DynamicArray<re::CommandBuffer>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = 24 * v2;
    v4 = (void **)(*(_QWORD *)(a1 + 32) + 16);
    do
    {
      v5 = *v4;
      v4 += 3;

      v3 -= 24;
    }
    while (v3);
  }
  ++*(_DWORD *)(a1 + 24);
}

__n128 re::DynamicArray<re::CommandBuffer>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  __n128 result;
  unint64_t v7;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::CommandBuffer>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 24 * v4;
  result = *a2;
  *(__n128 *)v5 = *a2;
  v7 = a2[1].n128_u64[0];
  a2[1].n128_u64[0] = 0;
  *(_QWORD *)(v5 + 16) = v7;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::DrawingManager::createReservedCommandBuffer(re::DrawingManager *this, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  re::DrawingManager *v4;
  unsigned __int8 v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  const char *v15;
  char v16;
  int *v17;
  uint64_t v18;
  __int128 v19;
  id v20;
  uint64_t v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 219) >= *((_QWORD *)this + 216))
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "m_nextReservedCommandBuffer < m_currentFrameCommandBufferQueue.size()", "createReservedCommandBuffer", 810);
    _os_crash();
    __break(1u);
    goto LABEL_22;
  }
  v4 = this;
  LODWORD(v19) = -1;
  *((_QWORD *)&v19 + 1) = 0;
  v20 = 0;
  v5 = atomic_load((unsigned __int8 *)&qword_25411A0B0);
  if ((v5 & 1) == 0)
    goto LABEL_24;
  while (1)
  {
    if (*(unsigned __int8 *)(*((_QWORD *)v4 + 32) + 273) | byte_25411A08B)
    {
      v6 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD508], sel_alloc), sel_init);
      v7 = v6;
      if (*(_BYTE *)(*((_QWORD *)v4 + 32) + 273)
        && ((objc_msgSend(v6, sel_respondsToSelector_, sel_setDisableFineGrainedComputePreemption_) & 1) != 0
         || objc_msgSend(v7, sel_methodSignatureForSelector_, sel_setDisableFineGrainedComputePreemption_)))
      {
        objc_msgSend(v7, sel_setDisableFineGrainedComputePreemption_, 1, v17, v18);
      }
      if (byte_25411A08B)
        objc_msgSend(v7, sel_setErrorOptions_, 1);
      re::mtl::CommandQueue::makeCommandBufferWithDescriptor((id *)v4 + 35, (uint64_t)v7, &v30);
      re::ObjCObject::operator=(&v20, (id *)&v30);
      *((_QWORD *)&v19 + 1) = 0;

      if (v7)
    }
    else
    {
      re::mtl::CommandQueue::makeCommandBuffer((id *)v4 + 35, &v30);
      re::ObjCObject::operator=(&v20, (id *)&v30);
      *((_QWORD *)&v19 + 1) = 0;

    }
    v2 = *((_QWORD *)v4 + 219);
    v3 = *((_QWORD *)v4 + 216);
    if (v3 > v2)
      break;
LABEL_22:
    v21 = 0;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v22 = 136315906;
    v23 = "operator[]";
    v24 = 1024;
    v25 = 789;
    v26 = 2048;
    v27 = v2;
    v28 = 2048;
    v29 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_23:
    v21 = 0;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
    v4 = (re::DrawingManager *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v22 = 136315906;
    v23 = "operator[]";
    v24 = 1024;
    v25 = 789;
    v26 = 2048;
    v27 = v3;
    v28 = 2048;
    v29 = v2;
    LODWORD(v18) = 38;
    v17 = &v22;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_24:
    if (__cxa_guard_acquire(&qword_25411A0B0))
    {
      re::Defaults::BOOLValue((re::Defaults *)"enableEncoderExecStateErrorOption", v15, (char *)&v30);
      if ((_BYTE)v30)
        v16 = BYTE1(v30);
      else
        v16 = 0;
      byte_25411A08B = v16;
      __cxa_guard_release(&qword_25411A0B0);
    }
  }
  v8 = *((_QWORD *)v4 + 218) + 24 * v2;
  *(_OWORD *)v8 = v19;
  if ((__int128 *)v8 != &v19)
  {
    v9 = v20;
    v20 = 0;
    v10 = *(void **)(v8 + 16);
    *(_QWORD *)(v8 + 16) = v9;

  }
  v3 = *((_QWORD *)v4 + 219);
  v2 = *((_QWORD *)v4 + 216);
  if (v2 <= v3)
    goto LABEL_23;
  v11 = *((_QWORD *)v4 + 218);
  v12 = *((_QWORD *)v4 + 219);
  do
  {
    v13 = *(id *)(*((_QWORD *)v4 + 218) + 24 * v12 + 16);

    if (!v13)
      break;
    v12 = *((_QWORD *)v4 + 219) + 1;
    *((_QWORD *)v4 + 219) = v12;
  }
  while (v12 < *((_QWORD *)v4 + 216));

  return v11 + 24 * v3;
}

void re::DrawingManager::configureForProfiling(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  id v6;

  if ((*(_BYTE *)(a1 + 912) & 1) != 0)
  {
    v5 = a1 + 872;
    v6 = *(id *)(a2 + 16);
    *(_DWORD *)a2 = re::RenderStat::beginRecordPassStat(v5, &v6, a3);

  }
}

BOOL re::DrawingManager::shouldRenderProfilerNode(re::DrawingManager *this)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  _BOOL8 result;

  v2 = *((_QWORD *)this + 206);
  if (v2)
  {
    v3 = *(_BYTE *)(v2 + 204);
    if (v3)
      v3 = *(_BYTE *)(v2 + 17) == 0;
  }
  else
  {
    v3 = 0;
  }
  v4 = *((_QWORD *)this + 208);
  result = v4 != 0;
  if ((v3 & 1) == 0 && v4)
    return re::ProfilerManager::isProcessorEnabled<re::ProfilerMiniHUDProcessor,void>(*((_QWORD *)this + 208))
        || re::ProfilerManager::isProcessorEnabled<re::ProfilerFlameChartProcessor,void>(*((_QWORD *)this + 208))
        || re::ProfilerManager::isProcessorEnabled<re::ProfilerDetailedHUDProcessor,void>(*((_QWORD *)this + 208));
  return result;
}

void re::DrawingManager::executeFrameInternal(id **this, re::RenderFrameWorkload *a2)
{
  re::DrawingManager *v2;
  re::RenderFrameWorkload *v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  _QWORD *v7;
  uint64_t *v8;
  re::Allocator *v9;
  unint64_t v10;
  _QWORD *v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  re *v27;
  uint64_t v28;
  uint64_t QueuedCommandBuffer;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  re *v44;
  uint64_t v45;
  _QWORD *v46;
  re *v47;
  uint64_t v48;
  NSObject *v49;
  _BOOL8 v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  int v59;
  re::RenderFrameWorkload *v60;
  NSObject *v61;
  uint64_t Label;
  re::RenderFrameWorkload *v63;
  uint64_t v64;
  re *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  id *v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  re::RenderFrameWorkload *v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  _opaque_pthread_t **v92;
  pthread_t v93;
  _opaque_pthread_t *v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t isStatisticCollectionEnabled;
  int64x2_t *v107;
  unint64_t v108;
  unint64_t v109;
  int64x2_t v110;
  uint64_t v111;
  int64x2_t *v112;
  unint64_t v113;
  unint64_t v114;
  int64x2_t v115;
  uint64_t v116;
  int64x2_t *v117;
  unint64_t v118;
  unint64_t v119;
  int64x2_t v120;
  re *v121;
  uint64_t v122;
  int64x2_t *v123;
  unint64_t v124;
  unint64_t v125;
  int64x2_t v126;
  uint64_t v127;
  re *v128;
  uint64_t v129;
  uint64_t v130;
  _BYTE *v131;
  void *v132;
  _QWORD *v133;
  uint64_t v134;
  os_unfair_lock_s *v135;
  id v136;
  unsigned __int8 v137;
  id v138;
  uint64_t v139;
  re *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int *v148;
  unsigned int v149;
  unint64_t v150;
  uint64_t *v151;
  re *v152;
  const char *v153;
  const char *v154;
  re::ns::String *v155;
  re::ns::String *v156;
  _QWORD *v157;
  id *v158;
  uint64_t v159;
  id *v160;
  unint64_t v161;
  _QWORD v162[6];
  re::RenderFrameWorkload *v163;
  __int128 v164;
  int v165;
  uint64_t v166;
  id v167;
  __int16 v168;
  _BYTE v169[24];
  uint64_t v170;
  _BYTE *v171;
  _BYTE v172[24];
  uint64_t v173;
  _BYTE *v174;
  _BYTE v175[24];
  uint64_t v176;
  _BYTE *v177;
  _QWORD v178[3];
  uint64_t v179;
  _QWORD *v180;
  id location;
  int v182;
  uint64_t v183;
  re::Allocator *v184;
  uint64_t v185;
  id v186;
  id v187;
  re::RenderFrameWorkload *v188;
  _QWORD v189[2];
  unint64_t v190;
  int v191;
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  _OWORD v199[10];
  uint64_t v200[14];
  uint64_t v201;
  __n128 buf;
  id v203;
  uint64_t v204;
  __n128 *p_buf;
  uint64_t v206;

  v206 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    re::internal::assertLog((re::internal *)4, 0, "assertion failure: '%s' (%s:line %i) NULL workload passed to RenderManager::executeFrameInternal", "workload", "executeFrameInternal", 881);
    _os_crash();
    __break(1u);
    goto LABEL_195;
  }
  v3 = a2;
  v2 = (re::DrawingManager *)this;
  v5 = *((_QWORD *)a2 + 5);
  v6 = this[32];
  if ((~v5 & 0xFFFFFFFFFFFFFFFLL) == 0)
    v5 = *((_QWORD *)v6[17] + 3) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*((_QWORD *)v6[17] + 2) << 60);
  v8 = re::globalAllocators((re *)this);
  v9 = (re::Allocator *)re::PerFrameAllocatorManager::perFrameAllocator(v8[6], v5);
  re::FrameContext::FrameContext((re::FrameContext *)&location, v9);
  re::ObjCObject::operator=(&location, v6 + 23);
  v183 = re::PerFrameAllocatorGPUManager::perFrameAllocatorGPU(*((_QWORD *)v2 + 42), v5);
  v184 = v9;
  v185 = v5;
  NS::SharedPtr<MTL::Texture>::operator=(&v186, (void **)(*((_QWORD *)v2 + 103) + 16 * *((_QWORD *)v2 + 104)));
  NS::SharedPtr<MTL::Texture>::operator=(&v187, (void **)(*((_QWORD *)v2 + 103) + 16 * *((_QWORD *)v2 + 104) + 8));
  v182 = *((_DWORD *)v3 + 16);
  v7 = v189;
  re::DynamicArray<re::RenderFrameEvent>::operator=((uint64_t)v189, (uint64_t *)v3 + 13);
  v10 = v190;
  if (v190 >= v189[1])
  {
    re::DynamicArray<re::RenderFrameEvent>::growCapacity(v189, v190 + 1);
    v10 = v190;
  }
  v11 = (_QWORD *)(v192 + 16 * v10);
  *v11 = *((id *)v3 + 9);
  v11[1] = *((_QWORD *)v3 + 10);
  ++v190;
  ++v191;
  v4 = re::RenderFrameBox::get((uint64_t)v2 + 344, v5);
  v12 = atomic_load((unsigned __int8 *)&qword_25411A0C0);
  if ((v12 & 1) == 0)
    goto LABEL_196;
  while (1)
  {
    v13 = *((_QWORD *)v2 + 32);
    v14 = (unint64_t)"N2re15RendererGlobalsE";
    if (((unint64_t)"N2re15RendererGlobalsE" & 0x8000000000000000) != 0)
    {
      v15 = (unsigned __int8 *)((unint64_t)"N2re15RendererGlobalsE" & 0x7FFFFFFFFFFFFFFFLL);
      v16 = 5381;
      do
      {
        v14 = v16;
        v17 = *v15++;
        v16 = (33 * v16) ^ v17;
      }
      while (v17);
    }
    v18 = (qword_25411A0B8 + (v14 << 6) + (v14 >> 2) - 0x61C8864680B583E9) ^ v14;
    v19 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 + 40) + 32))(*(_QWORD *)(v4 + 40), 24, 8);
    v19[1] = &location;
    v19[2] = v13;
    v20 = *(_QWORD *)(v4 + 96);
    *v19 = &off_24ED77DA0;
    if (v20)
    {
      v20 = v18 % *(unsigned int *)(v4 + 120);
      v21 = *(unsigned int *)(*(_QWORD *)(v4 + 104) + 4 * v20);
      if ((_DWORD)v21 != 0x7FFFFFFF)
      {
        v95 = *(_QWORD *)(v4 + 112);
        if (*(_QWORD *)(v95 + 24 * v21 + 8) == v18)
          goto LABEL_18;
        while (1)
        {
          LODWORD(v21) = *(_DWORD *)(v95 + 24 * v21) & 0x7FFFFFFF;
          if ((_DWORD)v21 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v95 + 24 * v21 + 8) == v18)
            goto LABEL_18;
        }
      }
    }
    v22 = *(unsigned int *)(v4 + 132);
    if ((_DWORD)v22 == 0x7FFFFFFF)
    {
      v22 = *(unsigned int *)(v4 + 128);
      v23 = v22;
      if ((_DWORD)v22 == *(_DWORD *)(v4 + 120))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v4 + 96, 2 * *(_DWORD *)(v4 + 124));
        LODWORD(v20) = v18 % *(unsigned int *)(v4 + 120);
        v23 = *(_DWORD *)(v4 + 128);
      }
      *(_DWORD *)(v4 + 128) = v23 + 1;
      v24 = *(_QWORD *)(v4 + 112);
      v25 = *(_DWORD *)(v24 + 24 * v22);
    }
    else
    {
      v24 = *(_QWORD *)(v4 + 112);
      v25 = *(_DWORD *)(v24 + 24 * v22);
      *(_DWORD *)(v4 + 132) = v25 & 0x7FFFFFFF;
    }
    v26 = 24 * v22;
    *(_DWORD *)(v24 + v26) = v25 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(v4 + 112) + v26) = *(_DWORD *)(*(_QWORD *)(v4 + 112) + 24 * v22) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v4 + 104) + 4 * v20);
    *(_QWORD *)(*(_QWORD *)(v4 + 112) + 24 * v22 + 8) = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 112) + 24 * v22 + 16) = v19;
    *(_DWORD *)(*(_QWORD *)(v4 + 104) + 4 * v20) = v22;
    ++*(_DWORD *)(v4 + 124);
    ++*(_DWORD *)(v4 + 136);
LABEL_18:
    v158 = v6;
    v167 = *(id *)(*((_QWORD *)v2 + 103) + 16 * *((_QWORD *)v2 + 104) + 8);
    re::DynamicArray<NS::SharedPtr<MTL::RasterizationRateMap>>::add((_anonymous_namespace_ *)(v4 + 3912), &v167);
    if (v167)
    {

      v167 = 0;
    }
    *((_QWORD *)v2 + 219) = *((_QWORD *)v2 + 216);
    v203 = 0;
    buf = (__n128)0xFFFFFFFFuLL;
    v160 = (id *)((char *)v2 + 1712);
    re::DynamicArray<re::CommandBuffer>::add((re::DrawingManager *)((char *)v2 + 1712), &buf);

    v28 = re::protectionOptions(v27);
    QueuedCommandBuffer = re::DrawingManager::createQueuedCommandBuffer(v2);
    objc_msgSend(*(id *)(QueuedCommandBuffer + 16), "setProtectionOptions:", v28);
    re::DrawingManager::configureForProfiling((uint64_t)v2, QueuedCommandBuffer, 1u);
    v30 = *(id *)(QueuedCommandBuffer + 16);
    v161 = v5 & 0xFFFFFFFFFFFFFFFLL;
    re::ns::String::format((re::ns::String *)"Initial CB %llu", &buf, v5 & 0xFFFFFFFFFFFFFFFLL);
    objc_msgSend(v30, "setLabel:", buf.n128_u64[0]);

    v31 = *(id *)(QueuedCommandBuffer + 16);
    objc_msgSend(v31, "addCompletedHandler:", &__block_literal_global_30);

    if (re::RenderManager::splitCommandBuffersForDebugging(*((re::RenderManager **)v2 + 32)))
    {
      v32 = *(id *)(QueuedCommandBuffer + 16);
      objc_msgSend(v32, "addCompletedHandler:", &__block_literal_global_30);

    }
    if (*((_QWORD *)v2 + 107))
    {
      v33 = *(id *)(QueuedCommandBuffer + 16);
      objc_msgSend(v33, "encodeWaitForEvent:value:", *((_QWORD *)v2 + 106), *((_QWORD *)v2 + 107));

    }
    if (*((_QWORD *)v3 + 9))
    {
      v34 = *(id *)(QueuedCommandBuffer + 16);
      objc_msgSend(v34, "encodeWaitForEvent:value:", *((_QWORD *)v3 + 9), *((_QWORD *)v3 + 10));

    }
    v35 = *((_QWORD *)v3 + 15);
    if (v35)
    {
      v36 = (_QWORD *)*((_QWORD *)v3 + 17);
      v37 = 16 * v35;
      do
      {
        if (*v36)
        {
          v38 = *(id *)(QueuedCommandBuffer + 16);
          objc_msgSend(v38, "encodeWaitForEvent:value:", *v36, v36[1]);

        }
        v36 += 2;
        v37 -= 16;
      }
      while (v37);
    }
    v6 = (id *)*(id *)(QueuedCommandBuffer + 16);
    v39 = *(_QWORD *)(v4 + 3128);
    if (v39)
    {
      v40 = *(uint64_t **)(v4 + 3144);
      v41 = &v40[2 * v39];
      do
      {
        v42 = *v40;
        v43 = v40[1];
        v40 += 2;
        objc_msgSend(v6, sel_encodeSignalEvent_value_, v42, v43);
      }
      while (v40 != v41);
    }

    v45 = re::globalAllocators(v44)[2];
    v178[0] = &off_24ED77A68;
    v178[1] = v2;
    v178[2] = v3;
    v179 = v45;
    v180 = v178;
    v176 = re::globalAllocators((re *)(char *)v3 + 8)[2];
    v177 = 0;
    v46 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v176 + 32))(v176, 32, 0);
    *v46 = &off_24ED77AC0;
    v46[1] = v2;
    v46[2] = v161;
    v46[3] = v3;
    v177 = v46;
    re::RenderFrameWorkload::beforeEncode((uint64_t)v3);
    re::RenderFrame::applyRenderFrameDeltas((re::RenderFrame *)v4);
    *((_BYTE *)v2 + 1768) = 0;
    re::RenderFrame::execute((re::RenderFrame *)v4, (re::FrameContext *)&location);
    v47 = (re *)re::RenderFrameWorkload::postEncode(v3);
    v159 = v5;
    if (*(_QWORD *)(v4 + 3168))
    {
      v157 = v7;
      v49 = *re::graphicsLogObjects(v47);
      v50 = os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT);
      if (v50)
      {
        buf.n128_u16[0] = 0;
        _os_log_impl(&dword_224FE9000, v49, OS_LOG_TYPE_DEFAULT, "Skipping render frame due to RenderGraph errors:", (uint8_t *)&buf, 2u);
      }
      v51 = *(_QWORD *)(v4 + 3168);
      if (v51)
      {
        v52 = 48 * v51;
        v5 = *(_QWORD *)(v4 + 3184) + 32;
        do
        {
          v53 = *re::graphicsLogObjects((re *)v50);
          v50 = os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT);
          if (v50)
          {
            if ((*(_BYTE *)(v5 - 8) & 1) != 0)
              v54 = *(id *)v5;
            else
              v54 = (id)(v5 - 7);
            buf.n128_u32[0] = 136315138;
            *(unint64_t *)((char *)buf.n128_u64 + 4) = (unint64_t)v54;
            _os_log_impl(&dword_224FE9000, v53, OS_LOG_TYPE_DEFAULT, "- %s", (uint8_t *)&buf, 0xCu);
          }
          v5 += 48;
          v52 -= 48;
        }
        while (v52);
      }
      v55 = *((_QWORD *)v2 + 216);
      if (v55)
      {
        v56 = 24 * v55;
        v5 = *((_QWORD *)v2 + 218) + 16;
        do
        {
          v57 = *(id *)v5;

          if (v57)
          {
            v58 = *(id *)v5;
            v59 = objc_msgSend(v58, "status");

            if (v59 == 1)
            {
              v60 = (re::RenderFrameWorkload *)*(id *)v5;
              v163 = v60;
              if (v60 != v188)
              {
                v61 = *re::graphicsLogObjects(v60);
                if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
                {
                  Label = re::mtl::CommandBuffer::getLabel((id *)&v163);
                  buf.n128_u32[0] = 136315138;
                  *(unint64_t *)((char *)buf.n128_u64 + 4) = Label;
                  _os_log_impl(&dword_224FE9000, v61, OS_LOG_TYPE_DEFAULT, "Enqueued CommandBuffer in RenderManager's queue, cannot invalidate: \"%s\"", (uint8_t *)&buf, 0xCu);
                }
              }
              v63 = v163;
            }
            else
            {
              v63 = *(re::RenderFrameWorkload **)v5;
              *(_QWORD *)v5 = 0;
            }

          }
          v5 += 24;
          v56 -= 24;
        }
        while (v56);
      }
      v64 = *((_QWORD *)v2 + 37);
      v65 = *(re **)(v64 + 344);
      if (v65)
      {
        *(_BYTE *)(v64 + 416) = 1;
        v66 = *(_QWORD *)(v4 + 3168);
        buf.n128_u64[0] = *(_QWORD *)(v4 + 3184);
        buf.n128_u64[1] = v66;
        v163 = v3;
        v65 = (re *)(*(uint64_t (**)(re *, re::RenderFrameWorkload **, __n128 *))(*(_QWORD *)v65 + 16))(v65, &v163, &buf);
        *(_BYTE *)(v64 + 416) = 0;
      }
      v67 = re::protectionOptions(v65);
      v68 = re::DrawingManager::createQueuedCommandBuffer(v2);
      objc_msgSend(*(id *)(v68 + 16), "setProtectionOptions:", v67);
      v6 = (id *)*(id *)(v68 + 16);
      v69 = atomic_load((unsigned __int8 *)&qword_25411A0F0);
      v7 = v157;
      if ((v69 & 1) == 0 && __cxa_guard_acquire(&qword_25411A0F0))
      {
        v156 = re::ns::String::String((re::ns::String *)&qword_25411A0E8, (re::ns *)"Failed command buffer");
        __cxa_guard_release((__guard *)v156 + 1);
      }
      v70 = (id)qword_25411A0E8;
      objc_msgSend(v6, "setLabel:", v70);

      v71 = *((_QWORD *)v3 + 9);
      if (v71)
        objc_msgSend(v6, "encodeWaitForEvent:value:", v71, *((_QWORD *)v3 + 10));
      v72 = *((_QWORD *)v3 + 15);
      if (v72)
      {
        v73 = 16 * v72;
        v74 = (_QWORD *)(*((_QWORD *)v3 + 17) + 8);
        do
        {
          v75 = *(v74 - 1);
          if (v75)
            objc_msgSend(v6, "encodeWaitForEvent:value:", v75, *v74);
          v74 += 2;
          v73 -= 16;
        }
        while (v73);
      }

    }
    v166 = 0;
    v164 = 0uLL;
    v163 = 0;
    v165 = 0;
    v76 = *((_QWORD *)v2 + 216);
    if (v76)
    {
      v77 = (id *)(*((_QWORD *)v2 + 218) + 16);
      v78 = 24 * v76;
      v5 = 24;
      do
      {
        v6 = v77 - 2;
        v79 = *v77;

        if (v79)
        {
          v80 = *((_QWORD *)&v164 + 1);
          if (*((_QWORD *)&v164 + 1) >= (unint64_t)v164)
          {
            re::DynamicArray<re::CommandBuffer>::growCapacity(&v163, *((_QWORD *)&v164 + 1) + 1);
            v80 = *((_QWORD *)&v164 + 1);
          }
          v81 = v166 + 24 * v80;
          *(_OWORD *)v81 = *(_OWORD *)v6;
          *(_QWORD *)(v81 + 16) = *v77;
          ++*((_QWORD *)&v164 + 1);
          ++v165;
        }
        v77 += 3;
        v78 -= 24;
      }
      while (v78);
    }
    if (v160 == (id *)&v163)
      goto LABEL_79;
    v82 = (re::RenderFrameWorkload *)*v160;
    if (!*v160 || !v163 || v82 == v163)
      break;
LABEL_195:
    re::internal::assertLog((re::internal *)4, v48, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
    _os_crash();
    __break(1u);
LABEL_196:
    v152 = (re *)__cxa_guard_acquire(&qword_25411A0C0);
    if ((_DWORD)v152)
    {
      qword_25411A0B8 = re::getCombinedScopeHash(v152, v153, v154);
      __cxa_guard_release(&qword_25411A0C0);
    }
  }
  *((_QWORD *)v2 + 214) = v163;
  v163 = v82;
  v83 = *(_OWORD *)((char *)v2 + 1720);
  *(_OWORD *)((char *)v2 + 1720) = v164;
  v164 = v83;
  v84 = *((_QWORD *)v2 + 218);
  *((_QWORD *)v2 + 218) = v166;
  v166 = v84;
  ++v165;
  ++*((_DWORD *)v2 + 434);
LABEL_79:
  *((_QWORD *)v2 + 219) = 0;
  v85 = re::DrawingManager::currentCommandBuffer(v2);
  v86 = *(id *)(v85 + 16);
  buf.n128_u64[0] = (unint64_t)v86;
  v173 = v176;
  v174 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v172, (uint64_t)v175);
  re::mtl::CommandBuffer::addCompletionHandler((void **)&buf, (uint64_t)v172);
  if (v174)
  {
    (**(void (***)(_BYTE *))v174)(v174);
    if (v174 != v172)
      (*(void (**)(uint64_t))(*(_QWORD *)v173 + 40))(v173);
    v174 = 0;
  }

  v87 = *(id *)(v85 + 16);
  buf.n128_u64[0] = (unint64_t)v87;
  v170 = v179;
  v171 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v169, (uint64_t)v178);
  re::mtl::CommandBuffer::addScheduledHandler((void **)&buf, (uint64_t)v169);
  if (v171)
  {
    (**(void (***)(_BYTE *))v171)(v171);
    if (v171 != v169)
      (*(void (**)(uint64_t))(*(_QWORD *)v170 + 40))(v170);
    v171 = 0;
  }

  if (*((_BYTE *)v2 + 794))
  {
    v88 = *((_QWORD *)v2 + 102);
    v89 = (uint64_t)v158[30] + v88;
    if (*(_QWORD *)(v4 + 3888))
    {
      v90 = (void *)*((_QWORD *)v2 + 101);
      v91 = *((_QWORD *)v2 + 108);
      v162[0] = MEMORY[0x24BDAC760];
      v162[1] = 0x40000000;
      v162[2] = ___ZN2re14DrawingManager20executeFrameInternalEPNS_19RenderFrameWorkloadE_block_invoke;
      v162[3] = &__block_descriptor_tmp_29;
      v162[4] = v2;
      v162[5] = v161;
      objc_msgSend(v90, sel_notifyListener_atValue_block_, v91, v89, v162);
      v88 = *((_QWORD *)v2 + 102);
    }
    *((_QWORD *)v2 + 102) = v88 + 1;
  }
  else
  {
    v89 = -1;
  }
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::clear(v4 + 4136);
  v92 = (_opaque_pthread_t **)*((_QWORD *)v2 + 41);
  if (v92)
  {
    v93 = pthread_self();
    v94 = *v92;
    if (v93)
    {
      if (!v94 || v93 != v94)
        goto LABEL_102;
    }
    else if (v94)
    {
      goto LABEL_102;
    }
  }
  else
  {
LABEL_102:
    v96 = (unsigned int *)(re::FrameManager::getFrameRefCount(*(re::FrameManager **)(*((_QWORD *)v2 + 32) + 136), v161)+ 128);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 + 1, v96));
  }
  v98 = v198;
  *(_OWORD *)((char *)v2 + 1560) = v197;
  *(_OWORD *)((char *)v2 + 1576) = v98;
  *(_OWORD *)((char *)v2 + 1592) = v199[0];
  *(_OWORD *)((char *)v2 + 1601) = *(_OWORD *)((char *)v199 + 9);
  v99 = v194;
  *(_OWORD *)((char *)v2 + 1496) = v193;
  *(_OWORD *)((char *)v2 + 1512) = v99;
  v100 = v196;
  *(_OWORD *)((char *)v2 + 1528) = v195;
  *(_OWORD *)((char *)v2 + 1544) = v100;
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  v101 = re::internal::enableSignposts(0, 0);
  if ((_DWORD)v101)
    v101 = kdebug_trace();
  v102 = *((int *)v2 + 375);
  v103 = *((int *)v2 + 376);
  v104 = *((int *)v2 + 377);
  v105 = *((int *)v2 + 378);
  isStatisticCollectionEnabled = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v101);
  if ((_DWORD)isStatisticCollectionEnabled)
  {
    isStatisticCollectionEnabled = re::profilerThreadContext((re *)isStatisticCollectionEnabled);
    v107 = *(int64x2_t **)(isStatisticCollectionEnabled + 152);
    if (v107)
    {
      v108 = v107[140].u64[0];
      if (v108 >= v102)
        v108 = v102;
      v107[140].i64[0] = v108;
      v109 = v107[140].u64[1];
      if (v109 <= v102)
        v109 = v102;
      v107[140].i64[1] = v109;
      v110 = vdupq_n_s64(1uLL);
      v110.i64[0] = v102;
      v107[141] = vaddq_s64(v107[141], v110);
      *(_BYTE *)(isStatisticCollectionEnabled + 184) = 0;
    }
  }
  v111 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)isStatisticCollectionEnabled);
  if ((_DWORD)v111)
  {
    v111 = re::profilerThreadContext((re *)v111);
    v112 = *(int64x2_t **)(v111 + 152);
    if (v112)
    {
      v113 = v112[144].u64[0];
      if (v113 >= v103)
        v113 = v103;
      v112[144].i64[0] = v113;
      v114 = v112[144].u64[1];
      if (v114 <= v103)
        v114 = v103;
      v112[144].i64[1] = v114;
      v115 = vdupq_n_s64(1uLL);
      v115.i64[0] = v103;
      v112[145] = vaddq_s64(v112[145], v115);
      *(_BYTE *)(v111 + 184) = 0;
    }
  }
  v116 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v111);
  if ((_DWORD)v116)
  {
    v116 = re::profilerThreadContext((re *)v116);
    v117 = *(int64x2_t **)(v116 + 152);
    if (v117)
    {
      v118 = v117[148].u64[0];
      if (v118 >= v104)
        v118 = v104;
      v117[148].i64[0] = v118;
      v119 = v117[148].u64[1];
      if (v119 <= v104)
        v119 = v104;
      v117[148].i64[1] = v119;
      v120 = vdupq_n_s64(1uLL);
      v120.i64[0] = v104;
      v117[149] = vaddq_s64(v117[149], v120);
      *(_BYTE *)(v116 + 184) = 0;
    }
  }
  v121 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v116);
  if ((_DWORD)v121)
  {
    v122 = re::profilerThreadContext(v121);
    v123 = *(int64x2_t **)(v122 + 152);
    if (v123)
    {
      v124 = v123[152].u64[0];
      if (v124 >= v105)
        v124 = v105;
      v123[152].i64[0] = v124;
      v125 = v123[152].u64[1];
      if (v125 <= v105)
        v125 = v105;
      v123[152].i64[1] = v125;
      v126 = vdupq_n_s64(1uLL);
      v126.i64[0] = v105;
      v123[153] = vaddq_s64(v123[153], v126);
      *(_BYTE *)(v122 + 184) = 0;
    }
  }
  if (*((_QWORD *)v2 + 206))
  {
    v127 = *((_QWORD *)v2 + 208);
    if (v127)
    {
      v128 = (re *)re::ProfilerManager::isProcessorEnabled<re::ProfilerMiniHUDProcessor,void>(v127);
      if ((v128 & 1) != 0
        || (v128 = (re *)re::ProfilerManager::isProcessorEnabled<re::ProfilerDetailedHUDProcessor,void>(*((_QWORD *)v2 + 208)),
            (v128 & 1) != 0)
        || (v131 = (_BYTE *)*((_QWORD *)v2 + 206), v131[204]) && !v131[17] && (v131[177] & 1) != 0)
      {
        if ((*((_BYTE *)v2 + 912) & 1) == 0)
          v128 = (re *)re::DrawingManager::activatePerfSampling(v2);
        if (!*((_QWORD *)v2 + 207))
        {
          v129 = re::globalAllocators(v128)[2];
          buf.n128_u64[0] = (unint64_t)&off_24ED77D30;
          buf.n128_u64[1] = (unint64_t)v2;
          v204 = v129;
          p_buf = &buf;
          v168 = *((_QWORD *)v2 + 121);
          re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::add((uint64_t)v2 + 920, &v168, (uint64_t)&buf);
          v130 = *((_QWORD *)v2 + 121);
          *((_QWORD *)v2 + 121) = v130 + 1;
          *((_QWORD *)v2 + 207) = v130;
          if (p_buf)
          {
            (*(void (**)(__n128 *))p_buf->n128_u64[0])(p_buf);
            if (p_buf != &buf)
              (*(void (**)(uint64_t))(*(_QWORD *)v204 + 40))(v204);
          }
        }
      }
      else if (*((_QWORD *)v2 + 207))
      {
        buf.n128_u16[0] = *((_QWORD *)v2 + 207);
        re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::remove((uint64_t)v2 + 920, (unsigned __int16 *)&buf);
        *((_QWORD *)v2 + 207) = 0;
      }
    }
  }
  if (*((_DWORD *)v2 + 237))
  {
    if ((*((_BYTE *)v2 + 912) & 1) == 0)
      re::DrawingManager::activatePerfSampling(v2);
  }
  else if ((*((_BYTE *)v2 + 912) & 1) != 0)
  {
    re::RenderStat::clearMTLCounterHandlers((uint64_t (***)(_QWORD))v2 + 109);
    re::RenderStat::deinitializeCurrentMode((re::DrawingManager *)((char *)v2 + 872));
    v132 = (void *)*((_QWORD *)v2 + 113);
    *((_QWORD *)v2 + 113) = 0;

  }
  v133 = *(_QWORD **)(*((_QWORD *)v2 + 32) + 72);
  if (v133)
  {
    v134 = v133[23];
    if (v134)
    {
      v133[18] = v134;
      v133[19] = v134 + 16;
      v133[20] = v134 + 16;
      v133[24] = 0;
    }
  }
  v135 = (os_unfair_lock_s *)*((_QWORD *)v2 + 38);
  if (v135)
    re::DebugRenderer::endFrame(v135);
  v136 = *(id *)(re::DrawingManager::createQueuedCommandBuffer(v2) + 16);
  v137 = atomic_load((unsigned __int8 *)&qword_25411A100);
  if ((v137 & 1) == 0 && __cxa_guard_acquire(&qword_25411A100))
  {
    v155 = re::ns::String::String((re::ns::String *)&qword_25411A0F8, (re::ns *)"SharedEventSignalBuffer");
    __cxa_guard_release((__guard *)v155 + 1);
  }
  v138 = (id)qword_25411A0F8;
  objc_msgSend(v136, "setLabel:", v138);

  v139 = *((_QWORD *)v2 + 29);
  ++*((_QWORD *)v2 + 30);
  objc_msgSend(v136, "encodeSignalEvent:value:", v139);
  ++*((_QWORD *)v2 + 107);
  v140 = (re *)objc_msgSend(v136, "encodeSignalEvent:value:", *((_QWORD *)v2 + 106));
  if (v89 != -1)
    v140 = (re *)objc_msgSend(v136, "encodeSignalEvent:value:", *((_QWORD *)v2 + 101), v89);
  v141 = *((_QWORD *)v3 + 11);
  if (v141)
    v140 = (re *)objc_msgSend(v136, "encodeSignalEvent:value:", v141, *((_QWORD *)v3 + 12));
  v142 = *((_QWORD *)v3 + 20);
  if (v142)
  {
    v143 = 16 * v142;
    v144 = (_QWORD *)(*((_QWORD *)v3 + 22) + 8);
    do
    {
      v145 = *(v144 - 1);
      if (v145)
        v140 = (re *)objc_msgSend(v136, "encodeSignalEvent:value:", v145, *v144);
      v144 += 2;
      v143 -= 16;
    }
    while (v143);
  }
  *((_QWORD *)v2 + 104) = (*((_QWORD *)v2 + 104) + 1) % (unint64_t)v158[30];
  v146 = (unsigned int *)((char *)v2 + 840);
  do
    v147 = __ldaxr(v146);
  while (__stlxr(v147 + 1, v146));
  v148 = (unsigned int *)((char *)v2 + 844);
  do
    v149 = __ldaxr(v148);
  while (__stlxr(v149 + 1, v148));
  v150 = *((_QWORD *)v3 + 6);
  v151 = re::globalAllocators(v140);
  re::PerFrameAllocatorManager::freeAllocatorsForFrame((re *)v151[6], v150);
  re::FrameManager::destructOlderOrEqualOnRenderThread(*(_QWORD *)(*((_QWORD *)v2 + 32) + 136), v159);
  *(_BYTE *)(re::FrameManager::getFrameRefCount(*(re::FrameManager **)(*((_QWORD *)v2 + 32) + 136), v161) + 81) = 1;
  *((_BYTE *)v2 + 1768) = 1;

  re::DynamicArray<re::CommandBuffer>::deinit((uint64_t)&v163);
  if (v177)
  {
    (**(void (***)(_BYTE *))v177)(v177);
    if (v177 != v175)
      (*(void (**)(uint64_t))(*(_QWORD *)v176 + 40))(v176);
  }
  if (v180)
  {
    (*(void (**)(_QWORD *))*v180)(v180);
    if (v180 != v178)
      (*(void (**)(uint64_t))(*(_QWORD *)v179 + 40))(v179);
  }
  re::BufferTable::~BufferTable((re::BufferTable *)&v201);
  re::TextureTableImpl<NS::SharedPtr<MTL::Texture>>::~TextureTableImpl(v200);
  re::DynamicArray<re::BufferSlice>::deinit((uint64_t)v7);

  if (v187)
  {

    v187 = 0;
  }
  if (v186)
  {

    v186 = 0;
  }

}

uint64_t re::RenderFrameBox::get(uint64_t a1, unint64_t a2)
{
  _BOOL8 isRenderThread;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  re *v16;
  uint64_t *v17;
  re *v18;
  uint64_t v19;
  re *v20;
  uint64_t v21;
  uint64_t v22;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23;
  _QWORD v25[3];
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  isRenderThread = re::RenderManager::isRenderThread(*(re::RenderManager **)(a1 + 256));
  v5 = a2 & 0xFFFFFFFFFFFFFFFLL;
  if (isRenderThread)
  {
    if ((a2 & 0xFFFFFFFFFFFFFFFLL) != 0xFFFFFFFFFFFFFFFLL
      && ((v6 = a1 + 16 * (a2 & 7), v7 = *(_QWORD *)(v6 + 136) & 0xFFFFFFFFFFFFFFFLL, v7 != 0xFFFFFFFFFFFFFFFLL)
        ? (v8 = v7 == v5)
        : (v8 = 0),
          v8))
    {
      return *(_QWORD *)(v6 + 128);
    }
    else
    {
      return 0;
    }
  }
  if ((a2 & 0xFFFFFFFFFFFFFFFLL) == 0xFFFFFFFFFFFFFFFLL)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 256) + 136);
    v11 = *(_QWORD *)(v10 + 16);
    v5 = *(_QWORD *)(v10 + 24) & 0xFFFFFFFFFFFFFFFLL;
    a2 = v5 | ((unint64_t)v11 << 60);
  }
  v12 = (uint64_t *)(a1 + 16 * (a2 & 7));
  v13 = v12[1] & 0xFFFFFFFFFFFFFFFLL;
  if (v13 != 0xFFFFFFFFFFFFFFFLL)
  {
    if (v5 == 0xFFFFFFFFFFFFFFFLL || v13 != v5)
      goto LABEL_16;
    return *v12;
  }
  if (v5 == 0xFFFFFFFFFFFFFFFLL)
    return *v12;
LABEL_16:
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 136) + 48) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 136) + 40) << 60);
  v15 = re::globalAllocators((re *)isRenderThread);
  v16 = (re *)re::PerFrameAllocatorManager::perFrameAllocator(v15[6], a2);
  v17 = re::globalAllocators(v16);
  v18 = (re *)re::PerFrameAllocatorManager::perFrameAllocator(v17[6], v14);
  re::globalAllocators(v18);
  v19 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, 4288, 8);
  v20 = (re *)re::RenderFrame::RenderFrame(v19, *(_QWORD *)(a1 + 256), *(_QWORD *)(a1 + 264), *(_QWORD *)(a1 + 272), a2, (uint64_t)v16, v14, (uint64_t)v18);
  v21 = re::globalAllocators(v20)[2];
  v25[0] = &off_24ED77CD8;
  v26 = v21;
  v27 = v25;
  v9 = (*(uint64_t (**)(re *, uint64_t, _QWORD *))(*(_QWORD *)v16 + 16))(v16, v19, v25);
  if (v27)
  {
    (*(void (**)(_QWORD *))*v27)(v27);
    if (v27 != v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
  }
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 256) + 104);
  if (v22)
    v23 = *(_QWORD *)(v22 + 296);
  else
    v23 = 0;
  re::RenderGraphManager::checkDisableTimeouts(v23);
  if (*(_BYTE *)(v23 + 412))
    *(_BYTE *)(v9 + 424) = 1;
  *(_BYTE *)(v9 + 425) = *(_BYTE *)(v23 + 380);
  *v12 = v9;
  v12[1] = a2;
  return v9;
}

unint64_t re::getCombinedScopeHash(re *this, const char *a2, const char *a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  MurmurHash3_x64_128((uint64_t)"RenderGraphGlobals", 18, 0, &v7);
  v3 = v7;
  v4 = v8;
  MurmurHash3_x64_128((uint64_t)"RenderFrame", 11, 0, &v7);
  v5 = (v4 + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  return ((v5 << 6) + (v5 >> 2) + ((v8 + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583E9) ^ v7) - 0x61C8864680B583E9) ^ v5;
}

{
  size_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = strlen((const char *)this);
  if (v4)
  {
    MurmurHash3_x64_128((uint64_t)this, v4, 0, &v7);
    v5 = (v8 - 0x61C8864680B583E9 + (v7 << 6) + (v7 >> 2)) ^ v7;
  }
  else
  {
    v5 = 0;
  }
  MurmurHash3_x64_128((uint64_t)"RenderFrame", 11, 0, &v7);
  return ((v5 << 6) - 0x61C8864680B583E9 + (v5 >> 2) + ((v8 - 0x61C8864680B583E9 + (v7 << 6) + (v7 >> 2)) ^ v7)) ^ v5;
}

{
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v5 = 0x9E3779B97F4A7C17;
  v6 = strlen((const char *)this);
  if (v6)
  {
    MurmurHash3_x64_128((uint64_t)this, v6, 0, &v10);
    v7 = (v11 - 0x61C8864680B583E9 + (v10 << 6) + (v10 >> 2)) ^ v10;
  }
  else
  {
    v7 = 0;
  }
  v8 = strlen(a2);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)a2, v8, 0, &v10);
    v5 = ((v11 - 0x61C8864680B583E9 + (v10 << 6) + (v10 >> 2)) ^ v10) - 0x61C8864680B583E9;
  }
  return ((v7 >> 2) + (v7 << 6) + v5) ^ v7;
}

{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  MurmurHash3_x64_128((uint64_t)"ToneMapping", 11, 0, &v7);
  v3 = v7;
  v4 = v8;
  MurmurHash3_x64_128((uint64_t)"RenderFrame", 11, 0, &v7);
  v5 = (v4 + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  return ((v5 << 6) + (v5 >> 2) + ((v8 + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583E9) ^ v7) - 0x61C8864680B583E9) ^ v5;
}

{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  MurmurHash3_x64_128((uint64_t)"SceneArray", 10, 0, &v7);
  v3 = v7;
  v4 = v8;
  MurmurHash3_x64_128((uint64_t)"RenderFrame", 11, 0, &v7);
  v5 = (v4 + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  return ((v5 << 6) + (v5 >> 2) + ((v8 + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583E9) ^ v7) - 0x61C8864680B583E9) ^ v5;
}

{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  MurmurHash3_x64_128((uint64_t)"RenderGraphGlobals", 18, 0, &v7);
  v3 = v7;
  v4 = v8;
  MurmurHash3_x64_128((uint64_t)"RenderFrame", 11, 0, &v7);
  v5 = (v4 + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  return ((v5 << 6) + (v5 >> 2) + ((v8 + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583E9) ^ v7) - 0x61C8864680B583E9) ^ v5;
}

{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  MurmurHash3_x64_128((uint64_t)"GuidedFilterOcclusionData", 25, 0, &v7);
  v3 = v7;
  v4 = v8;
  MurmurHash3_x64_128((uint64_t)"GuidedFilterOcclusion", 21, 0, &v7);
  v5 = (v4 + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  return ((v5 << 6) + (v5 >> 2) + ((v8 + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583E9) ^ v7) - 0x61C8864680B583E9) ^ v5;
}

{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  MurmurHash3_x64_128((uint64_t)"ProjectiveMeshShadow", 20, 0, &v7);
  v3 = v7;
  v4 = v8;
  MurmurHash3_x64_128((uint64_t)"RenderFrame", 11, 0, &v7);
  v5 = (v4 + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  return ((v5 << 6) + (v5 >> 2) + ((v8 + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583E9) ^ v7) - 0x61C8864680B583E9) ^ v5;
}

{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  MurmurHash3_x64_128((uint64_t)"ProjectiveShadow", 16, 0, &v7);
  v3 = v7;
  v4 = v8;
  MurmurHash3_x64_128((uint64_t)"RenderFrame", 11, 0, &v7);
  v5 = (v4 + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  return ((v5 << 6) + (v5 >> 2) + ((v8 + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583E9) ^ v7) - 0x61C8864680B583E9) ^ v5;
}

uint64_t ___ZN2re14DrawingManager20executeFrameInternalEPNS_19RenderFrameWorkloadE_block_invoke(re *a1)
{
  uint64_t v1;
  uint64_t v2;
  re::FrameManager *v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[3];
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)a1 + 4);
  v1 = *((_QWORD *)a1 + 5);
  v3 = *(re::FrameManager **)(*(_QWORD *)(v2 + 256) + 136);
  v4 = re::globalAllocators(a1)[2];
  v6[0] = &off_24ED77B70;
  v6[1] = v2;
  v7 = v4;
  v8 = v6;
  re::FrameManager::tryExecuteCallbackWithAllocatedFrame(v3, v1, (uint64_t)v6);
  result = (uint64_t)v8;
  if (v8)
  {
    result = (*(uint64_t (**)(_QWORD *))*v8)(v8);
    if (v8 != v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  }
  return result;
}

void re::DrawingManager::sampleComputeEncoderMTLCounterBegin(uint64_t a1, id *a2, unsigned int a3)
{
  uint64_t v4;
  id v5;

  v4 = a1 + 872;
  v5 = *a2;
  re::RenderStat::sampleComputeEncoderMTLCounterBegin(v4, &v5, a3);

}

void re::DrawingManager::sampleComputeEncoderMTLCounterEnd(uint64_t a1, id *a2, unsigned int a3)
{
  uint64_t v4;
  id v5;

  v4 = a1 + 872;
  v5 = *a2;
  re::RenderStat::sampleComputeEncoderMTLCounterEnd(v4, &v5, a3);

}

void re::DrawingManager::enableMTLCounterSamplingOnRenderPassDescriptor(uint64_t a1, id *a2, unsigned int a3)
{
  uint64_t v4;
  id v5;

  v4 = a1 + 872;
  v5 = *a2;
  re::RenderStat::enableMTLCounterSamplingOnRenderPassDescriptor(v4, &v5, a3);
  if (v5)

}

void re::DrawingManager::makeComputeCommandEncoderWithMTLCounterSampling(uint64_t a1@<X0>, id *a2@<X1>, unsigned int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  id v7;

  v6 = a1 + 872;
  v7 = *a2;
  re::RenderStat::makeComputeCommandEncoderWithMTLCounterSampling(&v7, v6, a3, a4);

}

uint64_t re::DrawingManager::reloadLibrary(_opaque_pthread_t **this, const char *a2, const char *a3)
{
  _anonymous_namespace_ *v6;
  const char *v7;
  re::ns *v8;
  _opaque_pthread_t *v9;
  re *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  _BYTE v25[23];
  uint64_t v26;
  char v27;
  _BYTE v28[23];
  _BYTE v29[24];
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if ((v27 & 1) != 0)
    v7 = *(const char **)&v28[7];
  else
    v7 = v28;
  if ((v24 & 1) != 0)
    v8 = *(re::ns **)&v25[7];
  else
    v8 = (re::ns *)v25;
  re::ShaderManager::makeLibraryWithFile(*(void ***)&this[32]->__opaque[40], v7, v8, 0);
  v9 = this[32];
  re::DynamicString::DynamicString((re::DynamicString *)&v17, (const re::DynamicString *)&v26);
  v10 = re::DynamicString::DynamicString((re::DynamicString *)&v21, (const re::DynamicString *)&v23);
  v30 = re::globalAllocators(v10)[2];
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v30 + 32))(v30, 80, 0);
  *v11 = off_24ED77C88;
  v11[1] = this;
  v11[4] = 0;
  v11[5] = 0;
  v11[2] = v17;
  v11[3] = 0;
  v12 = v18;
  v11[4] = v19;
  v11[5] = v20;
  v19 = 0;
  v20 = 0;
  v13 = v11[3];
  v11[3] = v12;
  v17 = 0;
  v18 = v13;
  v11[8] = 0;
  v11[9] = 0;
  v11[6] = v21;
  v11[7] = 0;
  v14 = *((_QWORD *)&v21 + 1);
  *((_OWORD *)v11 + 4) = v22;
  v22 = 0uLL;
  v15 = v11[7];
  v11[7] = v14;
  *(_QWORD *)&v21 = 0;
  *((_QWORD *)&v21 + 1) = v15;
  v31 = v11;
  re::RenderManager::addDelayedDestructorToRenderThread(v9, (uint64_t)v29);
  if (v31)
  {
    (**(void (***)(_BYTE *))v31)(v31);
    if (v31 != v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
    v31 = 0;
  }
  if ((_QWORD)v21)
  {
    if ((BYTE8(v21) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v21 + 40))();
    v21 = 0u;
    v22 = 0u;
  }
  if (v17 && (v18 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v17 + 40))();
  if (v23 && (v24 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v23 + 40))();
  result = v26;
  if (v26)
  {
    if ((v27 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v26 + 40))();
  }
  return result;
}

uint64_t *re::DrawingManager::removeInvalidPipelineStates(re::DrawingManager *this)
{
  re::DrawingManager *v1;
  uint64_t *ValidAllocator;
  uint64_t v3;
  uint64_t v4;
  id *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v31;
  _anonymous_namespace_ *v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  int v48;
  uint64_t *result;
  id *v50;
  id *v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t *v54;
  int v55;
  uint64_t v56;
  re::DrawingManager *v57;
  char *v58;
  int v59;
  _OWORD v60[4];
  uint64_t v61;
  uint64_t v62;
  id to;
  uint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  uint64_t v68;

  v1 = this;
  ValidAllocator = re::getValidAllocator((re *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 32) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 32) + 136) + 16) << 60)));
  v68 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v64 = ValidAllocator;
  re::DynamicArray<re::PipelineStateCacheKey>::setCapacity(&v64, 0);
  v59 = ++v67;
  v3 = *(_QWORD *)(*((_QWORD *)v1 + 32) + 24);
  v4 = *(_QWORD *)(v3 + 416);
  if (v4)
  {
    v5 = *(id **)(v3 + 432);
    v50 = &v5[v4];
    v6 = (uint64_t)v1 + 48;
    v57 = v1;
    v58 = (char *)v1 + 48;
    do
    {
      to = 0;
      v51 = v5;
      objc_copyWeak(&to, v5);
      v7 = objc_loadWeakRetained(&to);
      if (v7)
      {
        v8 = v7[9];
        if (v8)
        {
          v9 = (uint64_t *)v7[10];
          v52 = &v9[5 * v8];
          v53 = v7;
          do
          {
            v10 = *v9;
            v11 = *(unsigned int *)(*v9 + 120);
            v54 = v9;
            v12 = 0;
            if ((_DWORD)v11)
            {
              v13 = (int *)(*(_QWORD *)(v10 + 104) + 8);
              while (1)
              {
                v14 = *v13;
                v13 += 8;
                if (v14 < 0)
                  break;
                if (v11 == ++v12)
                {
                  LODWORD(v12) = *(_DWORD *)(*v9 + 120);
                  break;
                }
              }
            }
            if ((_DWORD)v11 != (_DWORD)v12)
            {
              v15 = v12;
              v55 = *(_DWORD *)(*v9 + 120);
              v56 = *v9;
              do
              {
                v16 = *(_QWORD *)(*(_QWORD *)(v10 + 104) + 32 * v15 + 24);
                v17 = *(unsigned int *)(v16 + 56);
                if ((_DWORD)v17)
                {
                  v18 = 0;
                  v19 = (int *)(*(_QWORD *)(v16 + 40) + 8);
                  while (1)
                  {
                    v20 = *v19;
                    v19 += 24;
                    if (v20 < 0)
                      break;
                    if (v17 == ++v18)
                    {
                      LODWORD(v18) = *(_DWORD *)(v16 + 56);
                      break;
                    }
                  }
                }
                else
                {
                  LODWORD(v18) = 0;
                }
                if ((_DWORD)v17 != (_DWORD)v18)
                {
                  v21 = v18;
                  do
                  {
                    v22 = v21;
                    if (v17 <= (int)v18 + 1)
                      v23 = v18 + 1;
                    else
                      v23 = v17;
                    v24 = *(_QWORD *)(v16 + 40);
                    v25 = v18;
                    while (1)
                    {
                      v21 = (v25 + 1);
                      if (v23 - 1 == v25)
                        break;
                      ++v25;
                      LODWORD(v18) = v21;
                      if ((*(_DWORD *)(v24 + 96 * v21 + 8) & 0x80000000) != 0)
                        goto LABEL_29;
                    }
                    LODWORD(v18) = v23;
LABEL_29:
                    v26 = v24 + 96 * v22 + 16;
                    v27 = (uint64_t *)re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::tryGet(v6, (_QWORD *)v26);
                    if (v27)
                    {
                      v28 = *v27;
                      if (*v27)
                      {
                        v29 = (id)(v28 + 8);
                        v30 = *((_QWORD *)v1 + 32);
                        v62 = v28;
                        v31 = (id)(v28 + 8);
                        LOBYTE(v30) = re::validateCachedPipelineState(v30, (uint64_t)&v62);

                        v62 = 0;
                        if ((v30 & 1) != 0)
                        {
                          v1 = v57;
                          v6 = (uint64_t)v58;
                        }
                        else
                        {
                          v33 = v66;
                          if (v66 >= v65)
                          {
                            v35 = v66 + 1;
                            v34 = v59;
                            if (v65 < v66 + 1)
                            {
                              if (v64)
                              {
                                v36 = 2 * v65;
                                if (!v65)
                                  v36 = 8;
                                if (v36 <= v35)
                                  v37 = v66 + 1;
                                else
                                  v37 = v36;
                                re::DynamicArray<re::PipelineStateCacheKey>::setCapacity(&v64, v37);
                                v34 = v67;
                              }
                              else
                              {
                                re::DynamicArray<re::PipelineStateCacheKey>::setCapacity(&v64, v35);
                                v34 = v67 + 1;
                              }
                            }
                            v33 = v66;
                            v1 = v57;
                            v6 = (uint64_t)v58;
                          }
                          else
                          {
                            v1 = v57;
                            v6 = (uint64_t)v58;
                            v34 = v59;
                          }
                          v38 = v68 + 72 * v33;
                          *(_OWORD *)v38 = *(_OWORD *)v26;
                          v40 = *(_OWORD *)(v26 + 32);
                          v39 = *(_OWORD *)(v26 + 48);
                          v41 = *(_OWORD *)(v26 + 16);
                          *(_QWORD *)(v38 + 64) = *(_QWORD *)(v26 + 64);
                          *(_OWORD *)(v38 + 32) = v40;
                          *(_OWORD *)(v38 + 48) = v39;
                          *(_OWORD *)(v38 + 16) = v41;
                          v66 = v33 + 1;
                          v59 = v34 + 1;
                          v67 = v34 + 1;
                        }

                      }
                    }
                    LODWORD(v17) = *(_DWORD *)(v16 + 56);
                  }
                  while ((_DWORD)v17 != (_DWORD)v18);
                }
                if (v66)
                {
                  v42 = v68;
                  v43 = 72 * v66;
                  do
                  {
                    v60[0] = *(_OWORD *)v42;
                    v44 = *(_OWORD *)(v42 + 16);
                    v45 = *(_OWORD *)(v42 + 32);
                    v46 = *(_OWORD *)(v42 + 48);
                    v61 = *(_QWORD *)(v42 + 64);
                    v60[2] = v45;
                    v60[3] = v46;
                    v60[1] = v44;
                    re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::remove(v16 + 24, v60);
                    re::DrawingManager::releasePipelineState((uint64_t)v1, v60);
                    v42 += 72;
                    v43 -= 72;
                  }
                  while (v43);
                }
                v66 = 0;
                v67 = ++v59;
                v10 = v56;
                if (*(_DWORD *)(v56 + 120) <= (v12 + 1))
                  v47 = v12 + 1;
                else
                  v47 = *(_DWORD *)(v56 + 120);
                while (1)
                {
                  v15 = (v12 + 1);
                  if (v47 - 1 == (_DWORD)v12)
                    break;
                  LODWORD(v12) = v12 + 1;
                  v48 = v15;
                  if ((*(_DWORD *)(*(_QWORD *)(v56 + 104) + 32 * v15 + 8) & 0x80000000) != 0)
                    goto LABEL_58;
                }
                v48 = v47;
LABEL_58:
                LODWORD(v12) = v48;
              }
              while (v55 != v48);
            }
            v7 = v53;
            v9 = v54 + 5;
          }
          while (v54 + 5 != v52);
        }

      }
      objc_destroyWeak(&to);
      v5 = v51 + 1;
    }
    while (v51 + 1 != v50);
  }
  result = v64;
  if (v64)
  {
    if (v68)
      return (uint64_t *)(*(uint64_t (**)(void))(*v64 + 40))();
  }
  return result;
}

uint64_t re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::remove(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  char v23;

  v4 = re::Hash<re::PipelineStateCacheKey>::operator()((int)&v22, a2);
  if (!*(_QWORD *)a1)
    return 0;
  v5 = v4 % *(unsigned int *)(a1 + 24);
  v6 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v5);
  if ((_DWORD)v6 == 0x7FFFFFFF)
    return 0;
  if (!re::EqualTo<re::PipelineStateCacheKey>::operator()((int)&v23, (void *)(*(_QWORD *)(a1 + 16) + 96 * v6 + 16), a2))
  {
    while (1)
    {
      v8 = v6;
      v9 = *(_QWORD *)(a1 + 16);
      v10 = *(_DWORD *)(v9 + 96 * v6 + 8);
      v6 = v10 & 0x7FFFFFFF;
      if ((v10 & 0x7FFFFFFF) == 0x7FFFFFFF)
        return 0;
      if (re::EqualTo<re::PipelineStateCacheKey>::operator()((int)&v23, (void *)(v9 + 96 * v6 + 16), a2))
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v8 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v8 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v6 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v5) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v6 + 8) & 0x7FFFFFFF;
LABEL_9:
  v11 = *(_QWORD *)(a1 + 16);
  v12 = v11 + 96 * v6;
  v15 = *(_DWORD *)(v12 + 8);
  v13 = (int *)(v12 + 8);
  v14 = v15;
  if (v15 < 0)
  {
    *v13 = v14 & 0x7FFFFFFF;
    v16 = v11 + 96 * v6;
    v19 = *(_QWORD *)(v16 + 88);
    v18 = (_QWORD *)(v16 + 88);
    v17 = v19;
    if (v19)
    {

      *v18 = 0;
    }
  }
  v20 = *(_QWORD *)(a1 + 16) + 96 * v6;
  v21 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v20 + 8) = *(_DWORD *)(v20 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v6;
  *(_DWORD *)(a1 + 40) = v21 + 1;
  return 1;
}

uint64_t re::DrawingManager::releasePipelineState(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = a1 + 48;
  result = re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::tryGet(a1 + 48, a2);
  if (result)
  {
    result = objc_isUniquelyReferenced();
    if ((_DWORD)result)
      return re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::remove(v3, a2);
  }
  return result;
}

uint64_t re::DrawingManager::registerRenderLayer(uint64_t a1, id *a2)
{
  CGColorSpace *v4;
  CFStringRef Name;
  re *ColorGamutFromCGColorSpaceName;
  NSObject *v7;
  _anonymous_namespace_ *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void **v12;
  id v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  int v22;
  __int16 v24[7];
  char v25;
  id location;
  unsigned __int8 v27;
  uint64_t v28;
  unsigned __int8 v29;
  int v30;

  if (!*a2)
    return 0xFFFFFFFFLL;
  objc_msgSend(*a2, "setProtectionOptions:", re::protectionOptions((re *)a1));
  location = 0;
  v27 = 0;
  v29 = 0;
  re::ObjCObject::operator=(&location, a2);
  v4 = (CGColorSpace *)objc_msgSend(*a2, "colorspace");
  if (v4)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 264) + 64))
    {
      v25 = 0;
      Name = CGColorSpaceGetName(v4);
      ColorGamutFromCGColorSpaceName = (re *)re::ColorHelpers::getColorGamutFromCGColorSpaceName(Name, &v25);
      if (!(_DWORD)ColorGamutFromCGColorSpaceName || v25 != *(_BYTE *)(*(_QWORD *)(a1 + 264) + 1))
      {
        v7 = *re::graphicsLogObjects(ColorGamutFromCGColorSpaceName);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v24[0] = 0;
          _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, "Registered render layer specified colorspace does not match RE target display color gamut", (uint8_t *)v24, 2u);
        }
      }
    }
  }
  objc_msgSend(*a2, "setFenceEnabled:", 1);
  v8 = (_anonymous_namespace_ *)objc_msgSend(location, "setDevice:", *(_QWORD *)(*(_QWORD *)(a1 + 256) + 184));
  v9 = *(_QWORD *)(a1 + 1688);
  if (!v9)
    goto LABEL_22;
  v10 = 0;
  v11 = *(_QWORD *)(a1 + 1704) + 12;
  while (*(_QWORD *)(v11 - 12))
  {
    ++v10;
    v11 += 32;
    if (v9 == v10)
      goto LABEL_22;
  }
  if (v10 < v9)
  {
    v12 = (void **)(v11 - 12);
    if ((id *)(v11 - 12) != &location)
    {
      v13 = location;
      location = 0;
      v14 = *v12;
      *v12 = v13;

    }
    if (*(_BYTE *)(v11 - 4) || v27)
    {
      if (!*(_BYTE *)(v11 - 4) || v27)
      {
        if (!*(_BYTE *)(v11 - 4) && v27)
          *(_BYTE *)(v11 - 4) = 1;
        *(_QWORD *)v11 = v28;
      }
      else
      {
        *(_BYTE *)(v11 - 4) = 0;
      }
    }
    if (*(_BYTE *)(v11 + 8) || v29)
    {
      if (!*(_BYTE *)(v11 + 8) || v29)
      {
        if (!*(_BYTE *)(v11 + 8) && v29)
          *(_BYTE *)(v11 + 8) = 1;
        *(_DWORD *)(v11 + 12) = v30;
      }
      else
      {
        *(_BYTE *)(v11 + 8) = 0;
      }
    }
  }
  else
  {
LABEL_22:
    v15 = *(_QWORD *)(a1 + 1680);
    if (v9 >= v15)
    {
      v16 = v9 + 1;
      if (v15 < v9 + 1)
      {
        if (*(_QWORD *)(a1 + 1672))
        {
          v17 = 2 * v15;
          if (!v15)
            v17 = 8;
          if (v17 <= v16)
            v18 = v16;
          else
            v18 = v17;
          re::DynamicArray<re::RenderLayer>::setCapacity((_QWORD *)(a1 + 1672), v18);
        }
        else
        {
          re::DynamicArray<re::RenderLayer>::setCapacity((_QWORD *)(a1 + 1672), v16);
          ++*(_DWORD *)(a1 + 1696);
        }
      }
      v9 = *(_QWORD *)(a1 + 1688);
    }
    v19 = *(_QWORD *)(a1 + 1704);
    v20 = v19 + 32 * v9;
    v21 = location;
    location = 0;
    *(_QWORD *)v20 = v21;
    LODWORD(v21) = v27;
    *(_BYTE *)(v20 + 8) = v27;
    if ((_DWORD)v21)
      *(_QWORD *)(v20 + 12) = v28;
    v22 = v29;
    *(_BYTE *)(v20 + 20) = v29;
    if (v22)
      *(_DWORD *)(v19 + 32 * v9 + 24) = v30;
    v10 = *(_QWORD *)(a1 + 1688);
    *(_QWORD *)(a1 + 1688) = v10 + 1;
    ++*(_DWORD *)(a1 + 1696);
  }

  return v10;
}

void re::DrawingManager::unregisterRenderLayer(re::DrawingManager *this, unsigned int a2)
{
  if (*((_QWORD *)this + 211) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::RenderLayer::invalidate((re::RenderLayer *)(*((_QWORD *)this + 213) + 32 * a2));
}

float re::DrawingManager::layerAspect(re::DrawingManager *this, unsigned int a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  float v8;
  float v9;
  double v10;
  double v11;

  LODWORD(a3) = 1.0;
  if (a2 != -1 && *((_QWORD *)this + 211) > (unint64_t)a2)
  {
    v5 = *((_QWORD *)this + 213);
    v6 = *(void **)(v5 + 32 * a2);
    if (v6)
    {
      v7 = v5 + 32 * a2;
      if (*(_BYTE *)(v7 + 8))
      {
        v8 = *(float *)(v7 + 12);
        v9 = *(float *)(v7 + 16);
      }
      else
      {
        objc_msgSend(v6, "bounds", a3, v3, v4);
        v8 = v10;
        v9 = v11;
      }
      *(float *)&a3 = v8 / v9;
      if ((LODWORD(a3) & 0x7FFFFFFFu) >= 0x7F800000)
        *(float *)&a3 = 1.0;
    }
  }
  return *(float *)&a3;
}

float re::DrawingManager::getLayerContentsScale(re::DrawingManager *this, unsigned int a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  LODWORD(a3) = 1.0;
  if (a2 != -1 && *((_QWORD *)this + 211) > (unint64_t)a2)
  {
    v5 = *((_QWORD *)this + 213);
    v6 = *(void **)(v5 + 32 * a2);
    if (v6)
    {
      v7 = v5 + 32 * a2;
      if (*(_BYTE *)(v7 + 20))
      {
        LODWORD(a3) = *(_DWORD *)(v7 + 24);
      }
      else
      {
        objc_msgSend(v6, "contentsScale", a3, v3, v4);
        *(float *)&a3 = a3;
      }
    }
  }
  return *(float *)&a3;
}

uint64_t re::DrawingManager::setLayerSize(uint64_t this, unsigned int a2, float a3, float a4)
{
  uint64_t v4;

  if (*(_QWORD *)(this + 1688) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = *(_QWORD *)(this + 1704) + 32 * a2;
  if (!*(_BYTE *)(v4 + 8))
    *(_BYTE *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 12) = LODWORD(a3) | ((unint64_t)LODWORD(a4) << 32);
  return this;
}

float re::DrawingManager::getLayerSize(re::DrawingManager *this, unsigned int a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  LODWORD(a3) = 1.0;
  if (a2 != -1 && *((_QWORD *)this + 211) > (unint64_t)a2)
  {
    v6 = *((_QWORD *)this + 213);
    v7 = *(void **)(v6 + 32 * a2);
    LODWORD(a4) = 1.0;
    if (v7)
    {
      v8 = v6 + 32 * a2;
      if (*(_BYTE *)(v8 + 8))
      {
        LODWORD(a3) = *(_DWORD *)(v8 + 12);
      }
      else
      {
        objc_msgSend(v7, "drawableSize", a3, a4, v4, v5);
        *(float *)&a3 = a3;
      }
    }
  }
  return *(float *)&a3;
}

_QWORD *re::DrawingManager::getLayersWithPendingSizeOrScaleChanges@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;

  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  v8 = 0;
  v3 = this[211];
  if (v3)
  {
    v4 = this;
    LODWORD(v5) = 0;
    v6 = 0;
    do
    {
      v7 = v4[213] + 32 * v6;
      if (*(_BYTE *)(v7 + 8) || *(_BYTE *)(v7 + 20))
      {
        this = re::DynamicArray<int>::add((_QWORD *)a2, &v8);
        LODWORD(v5) = v8;
        v3 = v4[211];
      }
      v5 = (v5 + 1);
      v8 = v5;
      v6 = v5;
    }
    while (v3 > v5);
  }
  return this;
}

uint64_t re::DrawingManager::presentDrawablesAndCommit(re::DrawingManager *this, char **a2, unint64_t a3, unint64_t a4)
{
  unint64_t i;
  char *v5;
  unint64_t v7;
  unint64_t v10;
  char *v11;
  id v12;
  void *v13;
  uint64_t QueuedCommandBuffer;
  id v15;
  unsigned __int8 v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id *v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  unsigned __int8 v27;
  uint64_t v28;
  void *v29;
  id *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  char *v37;
  unint64_t j;
  id *v39;
  id v40;
  uint64_t *ValidAllocator;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned __int16 v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  void *v52;
  uint64_t result;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  re::ns::String *v58;
  const char *v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t k;
  uint64_t v64;
  _BYTE v65[28];
  __int16 v66;
  _BYTE v67[10];
  _BYTE v68[12];
  __int16 v69;
  int v70;
  __int16 v71;
  unint64_t v72;
  __int16 v73;
  unint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;

  v7 = a3;
  v80 = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)a3 != 2)
  {
    v10 = re::DrawingManager::currentCommandBuffer(this);
    v11 = a2[1];
    if (v11)
    {
      for (i = 0; i < (unint64_t)v11; ++i)
      {
        if (*(_QWORD *)&a2[2][8 * i])
        {
          v12 = *(id *)(v10 + 16);
          v5 = a2[1];
          if ((unint64_t)v5 <= i)
            goto LABEL_76;
          v13 = v12;
          objc_msgSend(v12, "presentDrawable:afterMinimumDuration:", *(_QWORD *)&a2[2][8 * i], 1.0 / *((float *)this + 440));

          v11 = a2[1];
        }
      }
    }
    if (a4)
    {
      *(_QWORD *)&v75 = *(id *)(v10 + 16);
      re::RenderFrameWorkload::presentDrawables((re::RenderFrameWorkload *)a4, (id *)&v75);

    }
  }
  if (re::RenderManager::splitCommandBuffersForDebugging(*((re::RenderManager **)this + 32)))
  {
    QueuedCommandBuffer = re::DrawingManager::createQueuedCommandBuffer(this);
    v15 = *(id *)(QueuedCommandBuffer + 16);
    v16 = atomic_load((unsigned __int8 *)&qword_25411A110);
    if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_25411A110))
    {
      v58 = re::ns::String::String((re::ns::String *)&qword_25411A108, (re::ns *)"Before CC");
      __cxa_guard_release((__guard *)v58 + 1);
    }
    i = (unint64_t)(id)qword_25411A108;
    objc_msgSend(v15, "setLabel:", i);

    v17 = *(id *)(QueuedCommandBuffer + 16);
    objc_msgSend(v17, "addCompletedHandler:", &__block_literal_global_30);

  }
  v18 = re::DrawingManager::currentCommandBuffer(this);
  v19 = *(id *)(v18 + 16);
  objc_msgSend(v19, "status");

  *(_QWORD *)&v75 = *(id *)(v18 + 16);
  re::RenderFrameWorkload::beforeCommandBufferCommitted(a4, (uint64_t)&v75);

  re::RenderFrameWorkload::encoded((re::RenderFrameWorkload *)a4);
  v10 = (unint64_t)*(id *)(v18 + 16);
  objc_msgSend((id)v10, "status");

  if ((_DWORD)v7 == 2)
  {
    re::DrawingManager::finalizeCommandBuffers(this);
    v10 = *((_QWORD *)this + 216);
    if (v10 == 1)
    {
      v24 = 0;
    }
    else
    {
      v7 = 0;
      v33 = 16;
      do
      {
        if (v10 <= v7)
          goto LABEL_78;
        v34 = *((_QWORD *)this + 218);
        objc_msgSend(*(id *)(v34 + v33), "commit");
        v35 = *(void **)(v34 + v33);
        *(_QWORD *)(v34 + v33) = 0;

        ++v7;
        v10 = *((_QWORD *)this + 216);
        v24 = v10 - 1;
        v33 += 24;
      }
      while (v7 < v10 - 1);
    }
    v10 = *((_QWORD *)this + 218) + 24 * v24;
    objc_msgSend(*(id *)(v10 + 16), "commit");
    objc_msgSend(*(id *)(v10 + 16), "waitUntilScheduled");
    v36 = *(void **)(v10 + 16);
    *(_QWORD *)(v10 + 16) = 0;

    re::DynamicArray<re::CommandBuffer>::clear((uint64_t)this + 1712);
    v37 = a2[1];
    if (v37)
    {
      v10 = 0;
      for (j = 0; j < (unint64_t)v37; ++j)
      {
        if (a4)
        {
          v39 = (id *)&a2[2][v10];
          if (*v39)
          {
            re::DynamicArray<re::mtl::Drawable>::add((_anonymous_namespace_ *)(a4 + 192), v39);
            v37 = a2[1];
          }
        }
        v10 += 8;
      }
    }
  }
  else
  {
    if ((_DWORD)v7 == 1)
    {
      re::DrawingManager::finalizeCommandBuffers(this);
      a2 = (char **)*((_QWORD *)this + 216);
      if (a2 != (char **)1)
      {
        a4 = 0;
        v7 = 16;
        do
        {
          if ((unint64_t)a2 <= a4)
            goto LABEL_77;
          v25 = *((_QWORD *)this + 218);
          objc_msgSend(*(id *)(v25 + v7), "commit");
          v26 = *(void **)(v25 + v7);
          *(_QWORD *)(v25 + v7) = 0;

          ++a4;
          a2 = (char **)*((_QWORD *)this + 216);
          v7 += 24;
        }
        while (a4 < (unint64_t)a2 - 1);
      }
      v27 = atomic_load((unsigned __int8 *)&qword_25411A0A8);
      if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_25411A0A8))
      {
        re::Defaults::BOOLValue((re::Defaults *)"useBlockingWaitWithManualDispatch", v59, (char *)&v75);
        if ((_BYTE)v75)
          v60 = BYTE1(v75);
        else
          v60 = 0;
        byte_25411A08A = v60;
        __cxa_guard_release(&qword_25411A0A8);
      }
      v28 = *((_QWORD *)this + 218) + 24 * *((_QWORD *)this + 216);
      v31 = *(void **)(v28 - 8);
      v30 = (id *)(v28 - 8);
      v29 = v31;
      if (!*((_BYTE *)this + 794) || byte_25411A08A)
      {
        objc_msgSend(v29, "commit");
        objc_msgSend(*v30, "waitUntilCompleted");
        v40 = *v30;
        *v30 = 0;
      }
      else
      {
        v32 = v29;
        objc_msgSend(v32, "commit");
        objc_msgSend(*((id *)this + 35), "dispatchAvailableCompletionNotifications");
        while ((objc_msgSend(v32, "status") & 0xFFFFFFFELL) != 4)
        {
          objc_msgSend(*((id *)this + 35), "dispatchAvailableCompletionNotifications");
          usleep(0x3E8u);
        }

        objc_msgSend(*((id *)this + 35), "dispatchAvailableCompletionNotifications");
        v40 = 0;
      }

    }
    else
    {
      if ((_DWORD)v7)
        goto LABEL_46;
      re::DrawingManager::finalizeCommandBuffers(this);
      v20 = *((_QWORD *)this + 216);
      if (v20)
      {
        v21 = 24 * v20;
        v22 = (id *)(*((_QWORD *)this + 218) + 16);
        do
        {
          objc_msgSend(*v22, "commit");
          v23 = *v22;
          *v22 = 0;
          v22 += 3;

          v21 -= 24;
        }
        while (v21);
      }
    }
    re::DynamicArray<re::CommandBuffer>::clear((uint64_t)this + 1712);
  }
LABEL_46:
  ValidAllocator = re::getValidAllocator((re *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 32) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 32) + 136) + 16) << 60)));
  *(_QWORD *)&v67[2] = 0;
  memset(&v65[8], 0, 20);
  *(_QWORD *)v65 = ValidAllocator;
  re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::setCapacity(v65, 0);
  ++*(_DWORD *)&v65[24];
  v61 = (char *)this + 104;
  v62 = 0;
  v42 = *((_QWORD *)this + 15);
  if (v42 < 0x10)
  {
LABEL_50:
    k = -1;
  }
  else
  {
    v43 = 0;
    v44 = *((_QWORD *)this + 13);
    v45 = v42 >> 4;
    while (1)
    {
      v46 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v44 + v43)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v62 = (unsigned __int16)~v46;
      if (v46 != 0xFFFF)
        break;
      v43 += 16;
      if (!--v45)
        goto LABEL_50;
    }
    v10 = __clz(__rbit64((unsigned __int16)~v46)) + v43;
    for (k = v10; k != -1; v10 = k)
    {
      v54 = v61;
      re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v61);
      v55 = *((_QWORD *)v54 + 1);
      v56 = *(_QWORD *)(v55 + 48 * v10 + 40);
      if (*(_BYTE *)(v56 + 61))
      {
        *(_WORD *)(v56 + 60) = 0;
      }
      else
      {
        v57 = v55 + 48 * v10;

        *(_QWORD *)v56 = 0;
        *(_QWORD *)(v56 + 8) = 0;
        re::internal::destroyPersistent<re::CachedArgumentBuffer>((re *)"destroyCachedArgumentBuffer", 171, v56);
        re::DynamicArray<re::Pair<BOOL,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription,true>>::add((_anonymous_namespace_ *)v65, v57);
      }
    }
  }
  if (*(_QWORD *)&v65[16])
  {
    v47 = *(__int128 **)&v67[2];
    v48 = 40 * *(_QWORD *)&v65[16];
    do
    {
      v49 = *v47;
      v50 = v47[1];
      *(_QWORD *)&v77 = *((_QWORD *)v47 + 4);
      v75 = v49;
      v76 = v50;
      re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::remove((uint64_t *)this + 13, &v75);
      v47 = (__int128 *)((char *)v47 + 40);
      v48 -= 40;
    }
    while (v48);
  }
  if (*((_QWORD *)this + 23))
  {
    a4 = 0;
    a2 = &selRef_newBufferWithBytes_length_options_;
    do
    {
      if (objc_msgSend(*(id *)(*((_QWORD *)this + 25) + 8 * a4), sel_usedSize))
      {
        ++a4;
        v51 = *((_QWORD *)this + 23);
      }
      else
      {
        v7 = *((_QWORD *)this + 23);
        if (v7 <= a4)
        {
          v64 = 0;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v75 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v68 = 136315906;
          *(_QWORD *)&v68[4] = "removeAt";
          v69 = 1024;
          v70 = 931;
          v71 = 2048;
          v72 = a4;
          v73 = 2048;
          v74 = v7;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_76:
          *(_QWORD *)v68 = 0;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v75 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v65 = 136315906;
          *(_QWORD *)&v65[4] = "operator[]";
          *(_WORD *)&v65[12] = 1024;
          *(_DWORD *)&v65[14] = 476;
          *(_WORD *)&v65[18] = 2048;
          *(_QWORD *)&v65[20] = i;
          v66 = 2048;
          *(_QWORD *)v67 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_77:
          *(_QWORD *)v68 = 0;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v75 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v65 = 136315906;
          *(_QWORD *)&v65[4] = "operator[]";
          *(_WORD *)&v65[12] = 1024;
          *(_DWORD *)&v65[14] = 789;
          *(_WORD *)&v65[18] = 2048;
          *(_QWORD *)&v65[20] = a4;
          v66 = 2048;
          *(_QWORD *)v67 = a2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_78:
          *(_QWORD *)v68 = 0;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v75 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v65 = 136315906;
          *(_QWORD *)&v65[4] = "operator[]";
          *(_WORD *)&v65[12] = 1024;
          *(_DWORD *)&v65[14] = 789;
          *(_WORD *)&v65[18] = 2048;
          *(_QWORD *)&v65[20] = v7;
          v66 = 2048;
          *(_QWORD *)v67 = v10;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        if (v7 - 1 > a4)
        {
          NS::SharedPtr<MTL::Texture>::operator=((void **)(*((_QWORD *)this + 25) + 8 * a4), (void **)(*((_QWORD *)this + 25) + 8 * v7 - 8));
          v7 = *((_QWORD *)this + 23);
        }
        v10 = *((_QWORD *)this + 25) + 8 * v7;
        v52 = *(void **)(v10 - 8);
        if (v52)
        {

          *(_QWORD *)(v10 - 8) = 0;
          v7 = *((_QWORD *)this + 23);
        }
        v51 = v7 - 1;
        *((_QWORD *)this + 23) = v7 - 1;
        ++*((_DWORD *)this + 48);
      }
    }
    while (a4 < v51);
  }
  result = *(_QWORD *)v65;
  if (*(_QWORD *)v65)
  {
    if (*(_QWORD *)&v67[2])
      return (*(uint64_t (**)(void))(**(_QWORD **)v65 + 40))();
  }
  return result;
}

void re::DrawingManager::createRenderFrameWorkload(re::DrawingManager *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  re::RenderFrame *v5;
  re::ProfilerConfig *Workload;
  uint64_t v7;
  re *isStatisticCollectionEnabled;
  uint64_t v9;
  uint64_t v10;
  int64x2_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64x2_t v14;
  _BYTE v15[16];

  v4 = mach_absolute_time();
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v15, 5079, (uint64_t)this);
  v5 = (re::RenderFrame *)re::RenderFrameBox::get((uint64_t)this + 344, 0xFFFFFFFFFFFFFFFuLL);
  Workload = (re::ProfilerConfig *)re::RenderFrame::createWorkload(v5, a2);
  *(_BYTE *)(*a2 + 24) = *((_BYTE *)this + 793);
  v7 = *((_QWORD *)this + 206);
  if (v7)
  {
    if (!*(_BYTE *)(v7 + 296))
    {
      isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(Workload);
      if ((_DWORD)isStatisticCollectionEnabled)
      {
        v9 = re::profilerThreadContext(isStatisticCollectionEnabled);
        v10 = mach_absolute_time();
        v11 = *(int64x2_t **)(v9 + 152);
        if (v11)
        {
          v12 = v11[372].u64[0];
          if (v12 >= v10 - v4)
            v12 = v10 - v4;
          v11[372].i64[0] = v12;
          v13 = v11[372].u64[1];
          if (v13 <= v10 - v4)
            v13 = v10 - v4;
          v11[372].i64[1] = v13;
          v14 = vdupq_n_s64(1uLL);
          v14.i64[0] = v10 - v4;
          v11[373] = vaddq_s64(v11[373], v14);
          *(_BYTE *)(v9 + 184) = 0;
        }
      }
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v15);
}

unint64_t re::DrawingManager::commitEmptyWorkload(re::DrawingManager *this)
{
  uint64_t v2;
  int v4;
  re *v5;
  unsigned int v6;
  NSObject *v7;
  re::FrameManager *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t result;
  unsigned int *v14;
  unsigned int v15;
  uint8_t v16[8];
  std::chrono::nanoseconds __ns;

  if (*((_BYTE *)this + 793))
  {
    v2 = *((_QWORD *)this + 41);
    re::internal::AutoResetEvent::set((re::internal::AutoResetEvent *)(v2 + 320));
    re::RenderThread::waitForIdleInternal((re::RenderThread *)v2);
  }
  if (atomic_load((unsigned int *)this + 210))
  {
    v4 = -30;
    do
    {
      __ns.__rep_ = 3000000;
      std::this_thread::sleep_for (&__ns);
      v6 = atomic_load((unsigned int *)this + 210);
      ++v4;
    }
    while (v6);
    if (!v4)
    {
      v7 = *re::graphicsLogObjects(v5);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v16 = 0;
        _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, "commitEmptyWorkload: failed to sync the callbacks", v16, 2u);
      }
    }
  }
  v8 = *(re::FrameManager **)(*((_QWORD *)this + 32) + 136);
  v9 = *((_QWORD *)v8 + 3) & 0xFFFFFFFFFFFFFFFLL;
  v10 = v9 | ((unint64_t)*((_QWORD *)v8 + 2) << 60);
  v11 = (unsigned int *)(re::FrameManager::getFrameRefCount(v8, v9) + 128);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  re::FrameManager::destructForFrameOnRenderThread((uint64_t)v8, v10);
  *(_BYTE *)(re::FrameManager::getFrameRefCount(v8, v9) + 81) = 1;
  result = re::FrameManager::getFrameRefCount(v8, v9);
  v14 = (unsigned int *)(result + 128);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  return result;
}

void re::DrawingManager::waitUntilScheduled(re::DrawingManager *this)
{
  uint64_t v2;
  int v4;
  re *v5;
  unsigned int v6;
  NSObject *v7;
  uint8_t v8[8];
  std::chrono::nanoseconds __ns;

  if (*((_BYTE *)this + 793))
  {
    v2 = *((_QWORD *)this + 41);
    re::internal::AutoResetEvent::set((re::internal::AutoResetEvent *)(v2 + 320));
    re::RenderThread::waitForIdleInternal((re::RenderThread *)v2);
  }
  if (atomic_load((unsigned int *)this + 211))
  {
    v4 = -30;
    do
    {
      __ns.__rep_ = 3000000;
      std::this_thread::sleep_for (&__ns);
      v6 = atomic_load((unsigned int *)this + 211);
      ++v4;
    }
    while (v6);
    if (!v4)
    {
      v7 = *re::graphicsLogObjects(v5);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v8 = 0;
        _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, "waitUntilScheduled: failed to sync", v8, 2u);
      }
    }
  }
}

void re::DrawingManager::commitFrameInternal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  re *isStatisticCollectionEnabled;
  re *v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  std::chrono::steady_clock::time_point v16;
  re *v17;
  uint64_t v18;
  _DWORD *v19;
  re::ProfilerConfig *v20;
  uint64_t v21;
  uint64_t v22;
  int64x2_t *v23;
  char *v24;
  char *v25;
  int64x2_t v26;
  uint64_t v27;
  re::ProfilerThreadContext *v28;
  uint64_t v29;
  int64x2_t *v30;
  uint64_t v31;
  uint64_t v32;
  int64x2_t v33;
  double v34;
  std::chrono::steady_clock::time_point v35;
  uint64_t v36;
  uint64_t v37;
  int64x2_t *v38;
  uint64_t v39;
  uint64_t v40;
  int64x2_t v41;
  re::ProfilerThreadContext *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  double v47;
  char v48;
  _BYTE v49[16];
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) NULL workload passed to RenderManager::commitFrameInternal", "workload", "commitFrameInternal", 2368);
    _os_crash();
    __break(1u);
  }
  v4 = a2;
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)a1);
  if ((_DWORD)isStatisticCollectionEnabled
    && (v7 = (re *)re::profilerThreadContext(isStatisticCollectionEnabled), *((_QWORD *)v7 + 9) == *((_QWORD *)v7 + 10)))
  {
    v28 = (re::ProfilerThreadContext *)re::profilerThreadContext(v7);
    re::ProfilerThreadContext::begin(v28, *(re::ProfilerManager **)(a1 + 1664), 0);
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  v9 = mach_absolute_time();
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v49, 5081, a1);
  re::RenderGraphStats::registerNewFrame((unsigned int *)(a1 + 1624));
  rep = 0;
  v47 = 0.0;
  v48 = 0;
  if (*(_BYTE *)(a1 + 793))
  {
    v10 = (uint64_t *)re::RenderFrameBox::get(a1 + 344, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 136) + 16) << 60));
    re::DynamicArray<re::Pair<NS::SharedPtr<MTL::Event>,unsigned long long,true>>::operator=((uint64_t)(v10 + 389), a1 + 712);
    re::DynamicArray<re::RenderFrameEvent>::clear(a1 + 712);
    if ((*(_DWORD *)(a1 + 640) & 1) != 0)
      v11 = a1 + 648;
    else
      v11 = *(_QWORD *)(a1 + 656);
    v12 = *(_QWORD *)(a1 + 632);
    v50 = v11;
    v51 = v12;
    re::DynamicOverflowArray<re::RenderFrameDelta *,5ul>::operator=((uint64_t)(v10 + 381), (uint64_t)&v50);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 624);
    v13 = *(_QWORD *)(a1 + 1688);
    v50 = *(_QWORD *)(a1 + 1704);
    v51 = v13;
    re::FixedArray<re::RenderLayer>::operator=((_anonymous_namespace_ *)(v10 + 514), &v50);
    re::TextureManager::synchronizeTextures(*(os_unfair_lock_s **)(*(_QWORD *)(a1 + 256) + 64));
    re::MaterialManager::resolveArgumentBuffers(*(re::MaterialManager **)(*(_QWORD *)(a1 + 256) + 24));
    if (re::DrawingManager::shouldRenderProfilerNode((re::DrawingManager *)a1)
      && *(_BYTE *)(*(_QWORD *)(a1 + 1648) + 16))
    {
      re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(&v50);
      re::RenderFrame::emitGraph((re::RenderFrame *)v10, "ProfilerOverlay", "RenderFrame");
      v45 = 65290051;
      re::RenderFrame::specifyScopeLane((re::RenderFrame *)v10, (const re::WeakStringID *)&v45, (const unsigned int *)(*(_QWORD *)(a1 + 1648) + 12), "ProfilerOverlay");
      re::ProfilerTimeGuard<(re::ProfilerStatistic)23>::end((uint64_t)&v50);
    }
    v14 = 1;
    *(_BYTE *)(*(_QWORD *)(a1 + 1648) + 16) = 1;
    re::RenderFrame::buildOrRetainCachedGraph((re::RenderFrame *)v10, (re::RenderGraphStats *)(a1 + 1624));
    re::RenderGraphManager::deleteStaleGraphs(*(_QWORD **)(a1 + 296), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 136) + 32) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 136) + 16) << 60), v10[47]);
    re::RenderFrame::identifyUsedRenderLayers(v10);
    v15 = 1;
    if (!v10[51])
      v15 = *(_QWORD *)(a3 + 208) != 0;
    *(_BYTE *)(a3 + 184) = v15;
    v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    rep = v16.__d_.__rep_;
    v48 = 1;
    v17 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v16.__d_.__rep_);
    if ((_DWORD)v17)
    {
      v18 = re::profilerThreadContext(v17);
      if (*(_QWORD *)(v18 + 152))
        v14 = mach_absolute_time();
      re::RenderThread::commitFrame(*(_QWORD *)(a1 + 328), v4, (re::RenderFrameWorkload *)a3);
      if (*(_QWORD *)(v18 + 152))
      {
        v29 = mach_absolute_time();
        v30 = *(int64x2_t **)(v18 + 152);
        if (v30)
        {
          v31 = v30[44].u64[0];
          if (v31 >= v29 - v14)
            v31 = v29 - v14;
          v30[44].i64[0] = v31;
          v32 = v30[44].u64[1];
          if (v32 <= v29 - v14)
            v32 = v29 - v14;
          v30[44].i64[1] = v32;
          v33 = vdupq_n_s64(1uLL);
          v33.i64[0] = v29 - v14;
          v30[45] = vaddq_s64(v30[45], v33);
          *(_BYTE *)(v18 + 184) = 0;
        }
      }
    }
    else
    {
      re::RenderThread::commitFrame(*(_QWORD *)(a1 + 328), v4, (re::RenderFrameWorkload *)a3);
    }
    v34 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v16.__d_.__rep_) / 1000000000.0 + 0.0;
    v47 = v34;
    v35.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(double *)(a1 + 872) = v34 + (double)(v35.__d_.__rep_ - v16.__d_.__rep_) / 1000000000.0 * 0.0;
    v36 = *(_QWORD *)(a1 + 1648);
    if (v36)
    {
      if (!*(_BYTE *)(v36 + 296))
      {
        v35.__d_.__rep_ = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v35.__d_.__rep_);
        if (LODWORD(v35.__d_.__rep_))
        {
          v37 = re::profilerThreadContext((re *)v35.__d_.__rep_);
          v35.__d_.__rep_ = mach_absolute_time();
          v38 = *(int64x2_t **)(v37 + 152);
          if (v38)
          {
            v39 = v38[368].u64[0];
            if (v39 >= v35.__d_.__rep_ - v9)
              v39 = v35.__d_.__rep_ - v9;
            v38[368].i64[0] = v39;
            v40 = v38[368].u64[1];
            if (v40 <= v35.__d_.__rep_ - v9)
              v40 = v35.__d_.__rep_ - v9;
            v38[368].i64[1] = v40;
            v41 = vdupq_n_s64(1uLL);
            v41.i64[0] = v35.__d_.__rep_ - v9;
            v38[369] = vaddq_s64(v38[369], v41);
            *(_BYTE *)(v37 + 184) = 0;
          }
        }
      }
    }
    if (v8)
    {
      v27 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v35.__d_.__rep_);
      if ((v27 & 1) != 0)
      {
LABEL_49:
        v42 = (re::ProfilerThreadContext *)re::profilerThreadContext((re *)v27);
        re::ProfilerThreadContext::end(v42);
      }
    }
  }
  else
  {
    v19 = operator new(0x28uLL);
    *(_QWORD *)v19 = &off_24ED77E10;
    v19[2] = v4;
    *((_QWORD *)v19 + 2) = &rep;
    *((_QWORD *)v19 + 3) = a3;
    *((_QWORD *)v19 + 4) = a1;
    v52 = v19;
    re::runInLocalAutoreleasePool((uint64_t)&v50);
    v20 = (re::ProfilerConfig *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v19 + 40))(v19);
    v21 = *(_QWORD *)(a1 + 1648);
    if (v21)
    {
      if (!*(_BYTE *)(v21 + 296))
      {
        v20 = (re::ProfilerConfig *)re::ProfilerConfig::isStatisticCollectionEnabled(v20);
        if ((_DWORD)v20)
        {
          v22 = re::profilerThreadContext(v20);
          v20 = (re::ProfilerConfig *)mach_absolute_time();
          v23 = *(int64x2_t **)(v22 + 152);
          if (v23)
          {
            v24 = (char *)v23[368].i64[0];
            if (v24 >= (char *)v20 - v9)
              v24 = (char *)v20 - v9;
            v23[368].i64[0] = (uint64_t)v24;
            v25 = (char *)v23[368].i64[1];
            if (v25 <= (char *)v20 - v9)
              v25 = (char *)v20 - v9;
            v23[368].i64[1] = (uint64_t)v25;
            v26 = vdupq_n_s64(1uLL);
            v26.i64[0] = (uint64_t)v20 - v9;
            v23[369] = vaddq_s64(v23[369], v26);
            *(_BYTE *)(v22 + 184) = 0;
          }
        }
      }
    }
    if (v8)
    {
      v27 = re::ProfilerConfig::isStatisticCollectionEnabled(v20);
      if ((_DWORD)v27)
        goto LABEL_49;
    }
  }
  v43 = *(re **)(*(_QWORD *)(a1 + 256) + 136);
  v44 = *((_QWORD *)v43 + 6);
  v43 = (re *)((char *)v43 + 48);
  re::updateFrameCountCommon(v43, (unint64_t *)((v44 & 0xFFFFFFFFFFFFFFFLL) + 1), (uint64_t)"RenderFrameCount", 0);
  *((_QWORD *)v43 + 1) = *((_QWORD *)v43 - 3) & 0xFFFFFFFFFFFFFFFLL;
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v49);
}

void re::DrawingManager::commitQueuedCommandBuffers(re::DrawingManager *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  id v7;

  if (*((_QWORD *)this + 216))
  {
    v2 = (char *)this + 1712;
    re::DrawingManager::finalizeCommandBuffers(this);
    v3 = *((_QWORD *)this + 216);
    if (v3)
    {
      v4 = *((_QWORD *)this + 218);
      v5 = 24 * v3;
      v6 = (id *)(v4 + 16);
      do
      {
        objc_msgSend(*v6, "commit");
        v7 = *v6;
        *v6 = 0;
        v6 += 3;

        v5 -= 24;
      }
      while (v5);
    }
    re::DynamicArray<re::CommandBuffer>::clear((uint64_t)v2);
  }
}

BOOL re::DrawingManager::renderFrameDeltasCanBeEnqueued(re::DrawingManager *this)
{
  _opaque_pthread_t **v2;
  pthread_t v3;
  _opaque_pthread_t *v4;
  BOOL v5;

  if (!*((_BYTE *)this + 792))
    return *((_BYTE *)this + 1768) != 0;
  v2 = (_opaque_pthread_t **)*((_QWORD *)this + 41);
  if (v2)
  {
    v3 = pthread_self();
    v4 = *v2;
    if (v3)
    {
      if (v4)
        v5 = v3 == v4;
      else
        v5 = 0;
      if (!v5)
        return 1;
      return *((_BYTE *)this + 1768) != 0;
    }
    if (!v4)
      return *((_BYTE *)this + 1768) != 0;
  }
  return 1;
}

void re::DrawingManager::addFrameBeganSignal(uint64_t a1, id *a2, void *a3)
{
  _QWORD *v4;
  id v5[2];

  v4 = (_QWORD *)(a1 + 712);
  v5[0] = *a2;
  v5[1] = a3;
  re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::add(v4, v5);
  if (v5[0])

}

BOOL re::DrawingManager::didExceedFlywheelThresholdFrameCount_115383182(re::DrawingManager *this)
{
  unsigned __int8 v1;
  _QWORD *v2;
  int v4;
  const char *v5;
  int v6;
  uint64_t v7;
  re::DrawingManager *v8;
  _BYTE v9[8];
  uint64_t v10;

  v2 = &unk_255829000;
  if ((v1 & 1) == 0)
  {
    v8 = this;
    v2 = (_QWORD *)&unk_255829000;
    v6 = v4;
    this = v8;
    if (v6)
    {
      re::Defaults::uint64Value((re::Defaults *)"flywheelFrameCountThreshold", v5, (uint64_t)v9);
      v7 = v10;
      if (!v9[0])
        v7 = 6;
      re::DrawingManager::didExceedFlywheelThresholdFrameCount_115383182(void)::kFlywheelFrameCountThreshold = v7;
      v2 = (_QWORD *)&unk_255829000;
      this = v8;
    }
  }
  return (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 32) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL)
       - (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 32) + 136) + 56) & 0xFFFFFFFFFFFFFFFuLL) > v2[273];
}

void re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_0,void ()(void)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_0,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v1 + 793))
  {
    v2 = *(_QWORD *)(v1 + 328);
    re::internal::AutoResetEvent::set((re::internal::AutoResetEvent *)(v2 + 320));
    re::RenderThread::waitForIdleInternal((re::RenderThread *)v2);
  }
}

_QWORD *re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_0,void ()(void)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED778A0;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_0,void ()(void)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED778A0;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_0,void ()(void)>::size()
{
  return 16;
}

void re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_1,void ()(re::FrameCount)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_1,void ()(re::FrameCount)>::operator()(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result + 8) + 344;
  v3 = *a2 & 0xFFFFFFFFFFFFFFFLL;
  v4 = *a2 & 7;
  v5 = *(_QWORD *)(v2 + 16 * v4 + 8) & 0xFFFFFFFFFFFFFFFLL;
  if (v5 == 0xFFFFFFFFFFFFFFFLL)
  {
    if (v3 != 0xFFFFFFFFFFFFFFFLL)
      return result;
    goto LABEL_9;
  }
  if (v3 != 0xFFFFFFFFFFFFFFFLL && v5 == v3)
  {
LABEL_9:
    result = *(_QWORD *)(v2 + 16 * v4);
    if (result)
      return re::RenderFrame::onFrameComplete(result);
  }
  return result;
}

_QWORD *re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_1,void ()(re::FrameCount)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED778F8;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_1,void ()(re::FrameCount)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED778F8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_1,void ()(re::FrameCount)>::size()
{
  return 16;
}

void re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_2,void ()(re::FrameCount)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_2,void ()(re::FrameCount)>::operator()(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  re::PerFrameAllocatorGPUManager::freeAllocatorsForFrame(*(re **)(v3 + 336), *a2);
  re::RenderGraphPersistentResourceManager::pruneExpiredData(*(_QWORD *)(*(_QWORD *)(v3 + 296) + 296), v2);
}

_QWORD *re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_2,void ()(re::FrameCount)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED77950;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_2,void ()(re::FrameCount)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED77950;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_2,void ()(re::FrameCount)>::size()
{
  return 16;
}

void re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_3,void ()(void)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_3,void ()(void)>::operator()(re *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  re::RenderThread *v8;
  re::RenderThread *v9;
  uint64_t v10;
  re::MaterialManager *v11;

  v2 = *((_QWORD *)a1 + 1);
  if (*(_BYTE *)(v2 + 794))
    a1 = (re *)objc_msgSend(*(id *)(v2 + 280), "dispatchAvailableCompletionNotifications");
  v3 = *(unsigned __int8 *)(v2 + 793);
  if (*(unsigned __int8 *)(v2 + 792) != v3)
  {
    if (*(_BYTE *)(v2 + 792))
      v4 = v3 == 0;
    else
      v4 = 0;
    if (v4)
    {
      v7 = re::globalAllocators(a1);
      v8 = (re::RenderThread *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 440, 8);
      re::RenderThread::RenderThread(v8);
      *(_QWORD *)(v2 + 328) = v9;
      re::RenderThread::init(v9, *(re::RenderManager **)(v2 + 256));
    }
    else
    {
      v5 = *(_QWORD *)(v2 + 328);
      if (!v5)
      {
        re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) RenderThread was disabled or not initialized", "m_renderThread != nullptr", "operator()", 237);
        _os_crash();
        __break(1u);
        return;
      }
      re::internal::AutoResetEvent::set((re::internal::AutoResetEvent *)(v5 + 320));
      re::RenderThread::waitForIdleInternal((re::RenderThread *)v5);
      re::RenderThread::waitForCallbacksCompletion(*(re::RenderThread **)(v2 + 328));
      v6 = *(_QWORD *)(v2 + 328);
      if (*(_BYTE *)(v6 + 16))
      {
        re::RenderThread::join(*(re::RenderThread **)(v2 + 328));
        *(_QWORD *)(v6 + 8) = 0;
        *(_BYTE *)(v6 + 16) = 0;
        v6 = *(_QWORD *)(v2 + 328);
      }
      re::internal::destroyPersistent<re::RenderThread>((re *)v6);
      *(_QWORD *)(v2 + 328) = 0;
    }
    *(_BYTE *)(v2 + 793) = *(_BYTE *)(v2 + 792);
  }
  v10 = *(_QWORD *)(v2 + 256);
  v11 = *(re::MaterialManager **)(v10 + 24);
  if (v11)
  {
    re::MaterialManager::startFrame(v11);
    v10 = *(_QWORD *)(v2 + 256);
  }
  *(_QWORD *)(*(_QWORD *)(v2 + 304) + 8) = *(_QWORD *)(*(_QWORD *)(v10 + 136) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(*(_QWORD *)(v10 + 136) + 16) << 60);
}

_QWORD *re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_3,void ()(void)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED779A8;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_3,void ()(void)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED779A8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_3,void ()(void)>::size()
{
  return 16;
}

void re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_4,void ()(re::GpuTimingData const&)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

float re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_4,void ()(re::GpuTimingData const&)>::operator()(uint64_t a1, double *a2)
{
  uint64_t v2;
  uint64_t v3;
  float result;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(*(_QWORD *)(v2 + 256) + 269))
  {
    v3 = *(_QWORD *)(v2 + 1648);
    if (v3)
    {
      result = *a2;
      *(float *)(v3 + 232) = result;
    }
  }
  return result;
}

_QWORD *re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_4,void ()(re::GpuTimingData const&)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED77A00;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_4,void ()(re::GpuTimingData const&)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED77A00;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_4,void ()(re::GpuTimingData const&)>::size()
{
  return 16;
}

re::FrameContext *re::FrameContext::FrameContext(re::FrameContext *this, re::Allocator *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0xFFFFFFFFFFFFFFFLL;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_BYTE *)this + 232) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 84) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 50) = 0;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  re::TextureTableImpl<NS::SharedPtr<MTL::Texture>>::TextureTableImpl((uint64_t)this + 368, (uint64_t)a2, 1u);
  *((_QWORD *)this + 46) = off_24ED76C78;
  re::BufferTable::BufferTable((re::FrameContext *)((char *)this + 480), a2, 1u);
  return this;
}

uint64_t re::TextureTableImpl<NS::SharedPtr<MTL::Texture>>::TextureTableImpl(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v5;

  *(_QWORD *)a1 = off_24ED76CE8;
  v5 = a3;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::init((_QWORD *)(a1 + 8), a2, a3);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = a2;
  re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::setCapacity((_QWORD *)(a1 + 72), v5);
  ++*(_DWORD *)(a1 + 96);
  return a1;
}

re::BufferTable *re::BufferTable::BufferTable(re::BufferTable *this, re::Allocator *a2, unsigned int a3)
{
  unint64_t v5;

  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  v5 = a3;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::init(this, (uint64_t)a2, a3);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_QWORD *)this + 8) = a2;
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)this + 8, v5);
  ++*((_DWORD *)this + 22);
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 32) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_DWORD *)this + 40) = 1;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_DWORD *)this + 48) = 0;
  re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::init((uint64_t)this + 144, (uint64_t)a2, v5);
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_DWORD *)this + 56) = 0;
  *((_QWORD *)this + 25) = a2;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)this + 25, v5);
  ++*((_DWORD *)this + 56);
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_DWORD *)this + 66) = 0;
  *((_QWORD *)this + 30) = a2;
  re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity((_QWORD *)this + 30, v5);
  ++*((_DWORD *)this + 66);
  *((_DWORD *)this + 70) = 0;
  return this;
}

void re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_0,void ()(re::mtl::CommandBuffer const&)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_0,void ()(re::mtl::CommandBuffer const&)>::operator()(uint64_t a1, id *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  id v6;

  v6 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  re::RenderFrameWorkload::scheduled(*(re::RenderFrameWorkload **)(a1 + 16));
  v4 = (unsigned int *)(v3 + 844);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));

}

uint64_t re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_0,void ()(re::mtl::CommandBuffer const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED77A68;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_0,void ()(re::mtl::CommandBuffer const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED77A68;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_0,void ()(re::mtl::CommandBuffer const&)>::size()
{
  return 24;
}

void re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_1,void ()(re::mtl::CommandBuffer const&)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_1,void ()(re::mtl::CommandBuffer const&)>::operator()(uint64_t a1, id *a2)
{
  uint64_t v4;
  re *v5;
  re *v6;
  NSObject *v7;
  re::FrameManager *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  id v16;
  id v17;
  _BYTE buf[24];
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8);
  re::RenderFrameWorkload::completed(*(re::RenderFrameWorkload **)(a1 + 24));
  v5 = (re *)objc_msgSend(*a2, "status");
  if ((_DWORD)v5 == 5)
  {
    re::mtl::CommandBuffer::error(a2, &v17);
    v7 = *re::graphicsLogObjects(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v15 = (int)objc_msgSend(*a2, "status");
      v16 = v17;
      *(_DWORD *)buf = 134218242;
      *(_QWORD *)&buf[4] = v15;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v16;
      _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "Command buffer did not complete (status = %zu, error = %@)", buf, 0x16u);
    }

  }
  v8 = *(re::FrameManager **)(*(_QWORD *)(v4 + 256) + 136);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = re::globalAllocators(v5)[2];
  *(_QWORD *)buf = &off_24ED77B18;
  *(_QWORD *)&buf[8] = v10;
  *(_QWORD *)&buf[16] = v4;
  v19 = v11;
  v20 = buf;
  re::FrameManager::tryExecuteCallbackWithAllocatedFrame(v8, v9, (uint64_t)buf);
  if (v20)
  {
    (**(void (***)(_BYTE *))v20)(v20);
    if (v20 != buf)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
  }
  v12 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v12 + 24))
  {
    re::RenderThread::workloadGPUCompleted(*(re::RenderThread **)(v4 + 328));
    v12 = *(_QWORD *)(a1 + 24);
  }

  v13 = (unsigned int *)(v4 + 840);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!*(_BYTE *)(v4 + 794))
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v4 + 800));
}

uint64_t re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_1,void ()(re::mtl::CommandBuffer const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED77AC0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_1,void ()(re::mtl::CommandBuffer const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED77AC0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_1,void ()(re::mtl::CommandBuffer const&)>::size()
{
  return 32;
}

void re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_1::operator() const(re::mtl::CommandBuffer const&)::{lambda(unsigned long long)#1},void ()(unsigned long long)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

unint64_t re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_1::operator() const(re::mtl::CommandBuffer const&)::{lambda(unsigned long long)#1},void ()(unsigned long long)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::mutex *v8;
  unint64_t result;
  unsigned int *v10;
  unsigned int v11;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) & 0xFFFFFFFFFFFFFFFLL;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) & 7;
  v6 = *(_QWORD *)(v3 + 344 + 16 * v5 + 8) & 0xFFFFFFFFFFFFFFFLL;
  if (v6 == 0xFFFFFFFFFFFFFFFLL)
  {
    if (v4 != 0xFFFFFFFFFFFFFFFLL)
      goto LABEL_11;
    goto LABEL_9;
  }
  if (v4 != 0xFFFFFFFFFFFFFFFLL && v6 == v4)
  {
LABEL_9:
    v8 = *(std::mutex **)(v3 + 344 + 16 * v5);
    if (v8)
      re::RenderFrame::onCommandBuffersComplete(v8);
  }
LABEL_11:
  result = re::FrameManager::getFrameRefCount(*(re::FrameManager **)(*(_QWORD *)(v3 + 256) + 136), v2);
  v10 = (unsigned int *)(result + 128);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  return result;
}

uint64_t re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_1::operator() const(re::mtl::CommandBuffer const&)::{lambda(unsigned long long)#1},void ()(unsigned long long)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED77B18;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_1::operator() const(re::mtl::CommandBuffer const&)::{lambda(unsigned long long)#1},void ()(unsigned long long)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED77B18;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_1::operator() const(re::mtl::CommandBuffer const&)::{lambda(unsigned long long)#1},void ()(unsigned long long)>::size()
{
  return 24;
}

void _ZN2re8internal8CallableIZZNS_14DrawingManager20executeFrameInternalEPNS_19RenderFrameWorkloadEEUb_E3__7FvyEJEED0Ev()
{
  JUMPOUT(0x2276933B8);
}

void _ZNK2re8internal8CallableIZZNS_14DrawingManager20executeFrameInternalEPNS_19RenderFrameWorkloadEEUb_E3__7FvyEJEEclEOy(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::mutex *v7;

  v2 = *(_QWORD *)(a1 + 8) + 344;
  v3 = *a2 & 0xFFFFFFFFFFFFFFFLL;
  v4 = *a2 & 7;
  v5 = *(_QWORD *)(v2 + 16 * v4 + 8) & 0xFFFFFFFFFFFFFFFLL;
  if (v5 == 0xFFFFFFFFFFFFFFFLL)
  {
    if (v3 != 0xFFFFFFFFFFFFFFFLL)
      return;
    goto LABEL_9;
  }
  if (v3 != 0xFFFFFFFFFFFFFFFLL && v5 == v3)
  {
LABEL_9:
    v7 = *(std::mutex **)(v2 + 16 * v4);
    if (v7)
      re::RenderFrame::onCommandBuffersComplete(v7);
  }
}

_QWORD *_ZNK2re8internal8CallableIZZNS_14DrawingManager20executeFrameInternalEPNS_19RenderFrameWorkloadEEUb_E3__7FvyEJEE9cloneIntoEPv(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED77B70;
  a2[1] = v2;
  return a2;
}

_QWORD *_ZN2re8internal8CallableIZZNS_14DrawingManager20executeFrameInternalEPNS_19RenderFrameWorkloadEEUb_E3__7FvyEJEE8moveIntoEPv(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED77B70;
  a2[1] = v2;
  return a2;
}

uint64_t _ZNK2re8internal8CallableIZZNS_14DrawingManager20executeFrameInternalEPNS_19RenderFrameWorkloadEEUb_E3__7FvyEJEE4sizeEv()
{
  return 16;
}

void re::internal::Callable<re::DrawingManager::activatePerfSampling(void)::$_0,void ()(re::PerfMTLCounterSamplerResult)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::DrawingManager::activatePerfSampling(void)::$_0,void ()(re::PerfMTLCounterSamplerResult)>::operator()(re::ProfilerConfig *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  re *isStatisticCollectionEnabled;
  re::ProfilerThreadContext *v7;
  uint64_t v8;
  int64x2_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64x2_t v13;
  uint64_t v14;
  int64x2_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64x2_t v19;
  uint64_t v20;
  int64x2_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64x2_t v25;
  re *v26;
  re::ProfilerThreadContext *v27;

  v3 = *a2;
  v2 = a2[1];
  v4 = a2[2];
  v5 = *((_QWORD *)a1 + 1);
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(a1);
  if ((_DWORD)isStatisticCollectionEnabled)
  {
    v7 = (re::ProfilerThreadContext *)re::profilerThreadContext(isStatisticCollectionEnabled);
    re::ProfilerThreadContext::begin(v7, *(re::ProfilerManager **)(v5 + 1664), 0);
  }
  v8 = re::ProfilerConfig::isStatisticCollectionEnabled(isStatisticCollectionEnabled);
  if ((_DWORD)v8)
  {
    v8 = re::profilerThreadContext((re *)v8);
    v9 = *(int64x2_t **)(v8 + 152);
    if (v9)
    {
      v10 = (unint64_t)(float)((float)v3 * 1000000.0);
      v11 = v9[120].u64[0];
      if (v11 >= v10)
        v11 = (unint64_t)(float)((float)v3 * 1000000.0);
      v9[120].i64[0] = v11;
      v12 = v9[120].u64[1];
      if (v12 <= v10)
        v12 = (unint64_t)(float)((float)v3 * 1000000.0);
      v9[120].i64[1] = v12;
      v13 = vdupq_n_s64(1uLL);
      v13.i64[0] = (unint64_t)(float)((float)v3 * 1000000.0);
      v9[121] = vaddq_s64(v9[121], v13);
      *(_BYTE *)(v8 + 184) = 0;
    }
  }
  v14 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v8);
  if ((_DWORD)v14)
  {
    v14 = re::profilerThreadContext((re *)v14);
    v15 = *(int64x2_t **)(v14 + 152);
    if (v15)
    {
      v16 = (unint64_t)(float)((float)v2 * 1000000.0);
      v17 = v15[124].u64[0];
      if (v17 >= v16)
        v17 = (unint64_t)(float)((float)v2 * 1000000.0);
      v15[124].i64[0] = v17;
      v18 = v15[124].u64[1];
      if (v18 <= v16)
        v18 = (unint64_t)(float)((float)v2 * 1000000.0);
      v15[124].i64[1] = v18;
      v19 = vdupq_n_s64(1uLL);
      v19.i64[0] = (unint64_t)(float)((float)v2 * 1000000.0);
      v15[125] = vaddq_s64(v15[125], v19);
      *(_BYTE *)(v14 + 184) = 0;
    }
  }
  v20 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v14);
  if ((_DWORD)v20)
  {
    v20 = re::profilerThreadContext((re *)v20);
    v21 = *(int64x2_t **)(v20 + 152);
    if (v21)
    {
      v22 = (unint64_t)(float)((float)v4 * 1000000.0);
      v23 = v21[128].u64[0];
      if (v23 >= v22)
        v23 = (unint64_t)(float)((float)v4 * 1000000.0);
      v21[128].i64[0] = v23;
      v24 = v21[128].u64[1];
      if (v24 <= v22)
        v24 = (unint64_t)(float)((float)v4 * 1000000.0);
      v21[128].i64[1] = v24;
      v25 = vdupq_n_s64(1uLL);
      v25.i64[0] = (unint64_t)(float)((float)v4 * 1000000.0);
      v21[129] = vaddq_s64(v21[129], v25);
      *(_BYTE *)(v20 + 184) = 0;
    }
  }
  v26 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v20);
  if ((_DWORD)v26)
  {
    v27 = (re::ProfilerThreadContext *)re::profilerThreadContext(v26);
    re::ProfilerThreadContext::end(v27);
  }
}

_QWORD *re::internal::Callable<re::DrawingManager::activatePerfSampling(void)::$_0,void ()(re::PerfMTLCounterSamplerResult)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED77BC8;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::DrawingManager::activatePerfSampling(void)::$_0,void ()(re::PerfMTLCounterSamplerResult)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED77BC8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::activatePerfSampling(void)::$_0,void ()(re::PerfMTLCounterSamplerResult)>::size()
{
  return 16;
}

void re::internal::Callable<re::DrawingManager::activatePerfSampling(void)::$_1,void ()(re::PerfMTLCounterSamplerResult)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::DrawingManager::activatePerfSampling(void)::$_1,void ()(re::PerfMTLCounterSamplerResult)>::operator()(re::ProfilerConfig *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  re *isStatisticCollectionEnabled;
  re::ProfilerThreadContext *v5;
  uint64_t v6;
  int64x2_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64x2_t v11;
  re *v12;
  re::ProfilerThreadContext *v13;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *((_QWORD *)a1 + 1);
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(a1);
  if ((_DWORD)isStatisticCollectionEnabled)
  {
    v5 = (re::ProfilerThreadContext *)re::profilerThreadContext(isStatisticCollectionEnabled);
    re::ProfilerThreadContext::begin(v5, *(re::ProfilerManager **)(v3 + 1664), 0);
  }
  v6 = re::ProfilerConfig::isStatisticCollectionEnabled(isStatisticCollectionEnabled);
  if ((_DWORD)v6)
  {
    v6 = re::profilerThreadContext((re *)v6);
    v7 = *(int64x2_t **)(v6 + 152);
    if (v7)
    {
      v8 = (unint64_t)(float)((float)v2 * 1000000.0);
      v9 = v7[132].u64[0];
      if (v9 >= v8)
        v9 = (unint64_t)(float)((float)v2 * 1000000.0);
      v7[132].i64[0] = v9;
      v10 = v7[132].u64[1];
      if (v10 <= v8)
        v10 = (unint64_t)(float)((float)v2 * 1000000.0);
      v7[132].i64[1] = v10;
      v11 = vdupq_n_s64(1uLL);
      v11.i64[0] = (unint64_t)(float)((float)v2 * 1000000.0);
      v7[133] = vaddq_s64(v7[133], v11);
      *(_BYTE *)(v6 + 184) = 0;
    }
  }
  v12 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v6);
  if ((_DWORD)v12)
  {
    v13 = (re::ProfilerThreadContext *)re::profilerThreadContext(v12);
    re::ProfilerThreadContext::end(v13);
  }
}

_QWORD *re::internal::Callable<re::DrawingManager::activatePerfSampling(void)::$_1,void ()(re::PerfMTLCounterSamplerResult)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED77C30;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::DrawingManager::activatePerfSampling(void)::$_1,void ()(re::PerfMTLCounterSamplerResult)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED77C30;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::activatePerfSampling(void)::$_1,void ()(re::PerfMTLCounterSamplerResult)>::size()
{
  return 16;
}

uint64_t re::internal::MoveOnlyCallable<re::DrawingManager::reloadLibrary(char const*,char const*)::$_0,void ()(void)>::~MoveOnlyCallable(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED77C88;
  v3 = (_OWORD *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 56) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 64));
    *v3 = 0u;
    v3[1] = 0u;
  }
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 32));
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
  }
  return a1;
}

void re::internal::MoveOnlyCallable<re::DrawingManager::reloadLibrary(char const*,char const*)::$_0,void ()(void)>::~MoveOnlyCallable(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_24ED77C88;
  v3 = (_OWORD *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 56) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 64));
    *v3 = 0u;
    v3[1] = 0u;
  }
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 32));
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
  }
  JUMPOUT(0x2276933B8);
}

uint64_t *re::internal::MoveOnlyCallable<re::DrawingManager::reloadLibrary(char const*,char const*)::$_0,void ()(void)>::operator()(uint64_t a1)
{
  return re::DrawingManager::removeInvalidPipelineStates(*(re::DrawingManager **)(a1 + 8));
}

uint64_t re::internal::MoveOnlyCallable<re::DrawingManager::reloadLibrary(char const*,char const*)::$_0,void ()(void)>::moveInto(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1[1];
  *(_QWORD *)a2 = off_24ED77C88;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_QWORD *)(a2 + 40) = a1[5];
  v3 = a1[3];
  *(_QWORD *)(a2 + 16) = a1[2];
  a1[2] = 0;
  v4 = a1[4];
  a1[5] = 0;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = v4;
  a1[3] = v6;
  a1[4] = v5;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a2 + 72) = a1[9];
  v7 = a1[7];
  *(_QWORD *)(a2 + 48) = a1[6];
  a1[6] = 0;
  v8 = a1[8];
  a1[9] = 0;
  v10 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 56) = v7;
  *(_QWORD *)(a2 + 64) = v8;
  a1[7] = v10;
  a1[8] = v9;
  return a2;
}

uint64_t re::internal::MoveOnlyCallable<re::DrawingManager::reloadLibrary(char const*,char const*)::$_0,void ()(void)>::size()
{
  return 80;
}

void re::internal::Callable<re::RenderFrameBox::get(re::FrameCount)::$_0,void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::RenderFrameBox::get(re::FrameCount)::$_0,void ()(void *)>::operator()(uint64_t a1, re::RenderFrame **a2)
{
  re::RenderFrame::~RenderFrame(*a2);
}

_QWORD *re::internal::Callable<re::RenderFrameBox::get(re::FrameCount)::$_0,void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED77CD8;
  return result;
}

_QWORD *re::internal::Callable<re::RenderFrameBox::get(re::FrameCount)::$_0,void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED77CD8;
  return result;
}

uint64_t re::internal::Callable<re::RenderFrameBox::get(re::FrameCount)::$_0,void ()(void *)>::size()
{
  return 16;
}

void re::internal::Callable<re::DrawingManager::sendGPUStatsToFrameProfiler(void)::$_0,void ()(re::GpuTimingData const&)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::DrawingManager::sendGPUStatsToFrameProfiler(void)::$_0,void ()(re::GpuTimingData const&)>::operator()(re::ProfilerConfig *a1, double *a2)
{
  uint64_t v3;
  re *isStatisticCollectionEnabled;
  re::ProfilerThreadContext *v5;
  uint64_t v6;
  int64x2_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64x2_t v11;
  re *v12;
  re::ProfilerThreadContext *v13;

  v3 = *((_QWORD *)a1 + 1);
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(a1);
  if ((_DWORD)isStatisticCollectionEnabled)
  {
    v5 = (re::ProfilerThreadContext *)re::profilerThreadContext(isStatisticCollectionEnabled);
    re::ProfilerThreadContext::begin(v5, *(re::ProfilerManager **)(v3 + 1664), 0);
  }
  v6 = re::ProfilerConfig::isStatisticCollectionEnabled(isStatisticCollectionEnabled);
  if ((_DWORD)v6)
  {
    v6 = re::profilerThreadContext((re *)v6);
    v7 = *(int64x2_t **)(v6 + 152);
    if (v7)
    {
      v8 = (unint64_t)(*a2 * 1000000.0);
      v9 = v7[100].u64[0];
      if (v9 >= v8)
        v9 = (unint64_t)(*a2 * 1000000.0);
      v7[100].i64[0] = v9;
      v10 = v7[100].u64[1];
      if (v10 <= v8)
        v10 = v8;
      v7[100].i64[1] = v10;
      v11 = vdupq_n_s64(1uLL);
      v11.i64[0] = v8;
      v7[101] = vaddq_s64(v7[101], v11);
      *(_BYTE *)(v6 + 184) = 0;
    }
  }
  v12 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v6);
  if ((_DWORD)v12)
  {
    v13 = (re::ProfilerThreadContext *)re::profilerThreadContext(v12);
    re::ProfilerThreadContext::end(v13);
  }
}

_QWORD *re::internal::Callable<re::DrawingManager::sendGPUStatsToFrameProfiler(void)::$_0,void ()(re::GpuTimingData const&)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED77D30;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::DrawingManager::sendGPUStatsToFrameProfiler(void)::$_0,void ()(re::GpuTimingData const&)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED77D30;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::sendGPUStatsToFrameProfiler(void)::$_0,void ()(re::GpuTimingData const&)>::size()
{
  return 16;
}

uint64_t re::DynamicArray<re::CommandBuffer>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void *v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 24 * v4;
        v6 = (void **)(v3 + 16);
        do
        {
          v7 = *v6;
          v6 += 3;

          v5 -= 24;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::ProfilerTimeGuard<(re::ProfilerStatistic)12>::end(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  int64x2_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64x2_t v7;

  if (*(_QWORD *)result && *(_QWORD *)(*(_QWORD *)result + 152))
  {
    v1 = (_QWORD *)result;
    result = mach_absolute_time();
    v2 = *v1;
    v3 = *(int64x2_t **)(*v1 + 152);
    if (v3)
    {
      v4 = result - v1[1];
      v5 = v3[52].u64[0];
      if (v5 >= v4)
        v5 = result - v1[1];
      v3[52].i64[0] = v5;
      v6 = v3[52].u64[1];
      if (v6 <= v4)
        v6 = v4;
      v3[52].i64[1] = v6;
      v7 = vdupq_n_s64(1uLL);
      v7.i64[0] = v4;
      v3[53] = vaddq_s64(v3[53], v7);
      *(_BYTE *)(v2 + 184) = 0;
    }
    *v1 = 0;
  }
  return result;
}

_QWORD *re::DynamicArray<re::CommandBuffer>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::CommandBuffer>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::CommandBuffer>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::CommandBuffer>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::CommandBuffer>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          v2 = 24 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 24 * v9;
        v11 = v7;
        do
        {
          *(_OWORD *)v11 = *(_OWORD *)v8;
          v12 = *(_QWORD *)(v8 + 16);
          *(_QWORD *)(v8 + 16) = 0;
          v11[2] = v12;

          v8 += 24;
          v11 += 3;
        }
        while (v8 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::RenderFrameEvent>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RenderFrameEvent>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderFrameEvent>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void re::RendererGlobals::~RendererGlobals(re::RendererGlobals *this)
{
  JUMPOUT(0x2276933B8);
}

_QWORD *re::DynamicArray<re::PipelineStateCacheKey>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x48uLL))
        {
          v2 = 72 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 72 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 72 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 72, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::PipelineStateCacheKey>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::RenderLayer>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RenderLayer>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 32 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 32 * v9;
        v11 = (char *)v7 + 12;
        v12 = v8 + 12;
        do
        {
          v14 = v12 - 12;
          v13 = *(_QWORD *)(v12 - 12);
          *(_QWORD *)(v12 - 12) = 0;
          *(_QWORD *)(v11 - 12) = v13;
          LODWORD(v13) = *(unsigned __int8 *)(v12 - 4);
          *(v11 - 4) = v13;
          if ((_DWORD)v13)
            *(_QWORD *)v11 = *(_QWORD *)v12;
          v15 = *(unsigned __int8 *)(v12 + 8);
          v11[8] = v15;
          if (v15)
            *((_DWORD *)v11 + 3) = *(_DWORD *)(v12 + 12);

          v11 += 32;
          v12 += 32;
        }
        while (v14 + 32 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

double re::make::shared::object<re::RenderFrameSettings>@<D0>(re *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  double result;

  v3 = re::globalAllocators(a1);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 144, 8);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
  *(_QWORD *)v4 = &off_24ED77DC8;
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_DWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 136) = 0;
  result = 0.0;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_DWORD *)(v4 + 128) = 0;
  *a2 = v4;
  return result;
}

void re::RenderFrameSettings::~RenderFrameSettings(re::RenderFrameSettings *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24ED77DC8;
  re::DynamicArray<re::BufferSlice>::deinit((uint64_t)this + 104);
  re::DynamicArray<re::BufferSlice>::deinit((uint64_t)this + 64);
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {

    *((_QWORD *)this + 6) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {

    *((_QWORD *)this + 4) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24ED77DC8;
  re::DynamicArray<re::BufferSlice>::deinit((uint64_t)this + 104);
  re::DynamicArray<re::BufferSlice>::deinit((uint64_t)this + 64);
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {

    *((_QWORD *)this + 6) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {

    *((_QWORD *)this + 4) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ProfilerTimeGuard<(re::ProfilerStatistic)23>::end(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  int64x2_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64x2_t v7;

  if (*(_QWORD *)result && *(_QWORD *)(*(_QWORD *)result + 152))
  {
    v1 = (_QWORD *)result;
    result = mach_absolute_time();
    v2 = *v1;
    v3 = *(int64x2_t **)(*v1 + 152);
    if (v3)
    {
      v4 = result - v1[1];
      v5 = v3[96].u64[0];
      if (v5 >= v4)
        v5 = result - v1[1];
      v3[96].i64[0] = v5;
      v6 = v3[96].u64[1];
      if (v6 <= v4)
        v6 = v4;
      v3[96].i64[1] = v6;
      v7 = vdupq_n_s64(1uLL);
      v7.i64[0] = v4;
      v3[97] = vaddq_s64(v3[97], v7);
      *(_BYTE *)(v2 + 184) = 0;
    }
    *v1 = 0;
  }
  return result;
}

void std::__function::__func<re::DrawingManager::commitFrameInternal(re::WorkloadCommitMode,re::RenderFrameWorkload *)::$_0,std::allocator<re::DrawingManager::commitFrameInternal(re::WorkloadCommitMode,re::RenderFrameWorkload *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::DrawingManager::commitFrameInternal(re::WorkloadCommitMode,re::RenderFrameWorkload *)::$_0,std::allocator<re::DrawingManager::commitFrameInternal(re::WorkloadCommitMode,re::RenderFrameWorkload *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24ED77E10;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<re::DrawingManager::commitFrameInternal(re::WorkloadCommitMode,re::RenderFrameWorkload *)::$_0,std::allocator<re::DrawingManager::commitFrameInternal(re::WorkloadCommitMode,re::RenderFrameWorkload *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED77E10;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<re::DrawingManager::commitFrameInternal(re::WorkloadCommitMode,re::RenderFrameWorkload *)::$_0,std::allocator<re::DrawingManager::commitFrameInternal(re::WorkloadCommitMode,re::RenderFrameWorkload *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::chrono::steady_clock::time_point v16;
  double v17;
  int v18;
  uint64_t v20[2];
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 16);
  *(std::chrono::steady_clock::time_point *)v3 = std::chrono::steady_clock::now();
  *(_BYTE *)(v3 + 16) = 1;
  re::DrawingManager::waitForGPUInternal((re::DrawingManager *)v2);
  v4 = *(_QWORD *)(a1 + 16);
  *(double *)(v4 + 8) = *(double *)(v4 + 8)
                      + (double)(std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v4) / 1000000000.0;
  *(_BYTE *)(v4 + 16) = 0;
  v5 = (uint64_t *)re::RenderFrameBox::get(v2 + 344, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 256) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 256) + 136) + 16) << 60));
  re::DynamicArray<re::Pair<NS::SharedPtr<MTL::Event>,unsigned long long,true>>::operator=((uint64_t)(v5 + 389), v2 + 712);
  re::DynamicArray<re::RenderFrameEvent>::clear(v2 + 712);
  if ((*(_DWORD *)(v2 + 640) & 1) != 0)
    v6 = (char *)(v2 + 648);
  else
    v6 = *(char **)(v2 + 656);
  v7 = *(_QWORD *)(v2 + 632);
  v21 = v6;
  v22 = v7;
  re::DynamicOverflowArray<re::RenderFrameDelta *,5ul>::operator=((uint64_t)(v5 + 381), (uint64_t)&v21);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2 + 624);
  v8 = *(_QWORD *)(v2 + 1688);
  v21 = *(char **)(v2 + 1704);
  v22 = v8;
  re::FixedArray<re::RenderLayer>::operator=((_anonymous_namespace_ *)(v5 + 514), (uint64_t *)&v21);
  re::TextureManager::synchronizeTextures(*(os_unfair_lock_s **)(*(_QWORD *)(v2 + 256) + 64));
  re::MaterialManager::resolveArgumentBuffers(*(re::MaterialManager **)(*(_QWORD *)(v2 + 256) + 24));
  v9 = *(_QWORD *)(v2 + 1688);
  if (v9)
  {
    v10 = (_BYTE *)(*(_QWORD *)(v2 + 1704) + 20);
    do
    {
      if (*(_QWORD *)(v10 - 20))
      {
        if (*(v10 - 12))
          *(v10 - 12) = 0;
        if (*v10)
          *v10 = 0;
      }
      v10 += 32;
      --v9;
    }
    while (v9);
  }
  if (re::DrawingManager::shouldRenderProfilerNode((re::DrawingManager *)v2)
    && *(_BYTE *)(*(_QWORD *)(v2 + 1648) + 16))
  {
    re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard((uint64_t *)&v21);
    re::RenderFrame::emitGraph((re::RenderFrame *)v5, "ProfilerOverlay", "RenderFrame");
    v20[0] = 65290051;
    re::RenderFrame::specifyScopeLane((re::RenderFrame *)v5, (const re::WeakStringID *)v20, (const unsigned int *)(*(_QWORD *)(v2 + 1648) + 12), "ProfilerOverlay");
    re::ProfilerTimeGuard<(re::ProfilerStatistic)23>::end((uint64_t)&v21);
  }
  *(_BYTE *)(*(_QWORD *)(v2 + 1648) + 16) = 1;
  re::RenderFrame::buildOrRetainCachedGraph((re::RenderFrame *)v5, (re::RenderGraphStats *)(v2 + 1624));
  re::RenderGraphManager::deleteStaleGraphs(*(_QWORD **)(v2 + 296), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 256) + 136) + 32) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 256) + 136) + 16) << 60), v5[47]);
  re::RenderFrame::identifyUsedRenderLayers(v5);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = 1;
  if (!v5[51])
    v12 = *(_QWORD *)(v11 + 208) != 0;
  *(_BYTE *)(v11 + 184) = v12;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v13 = *(_QWORD *)(a1 + 16);
  *(std::chrono::steady_clock::time_point *)v13 = std::chrono::steady_clock::now();
  *(_BYTE *)(v13 + 16) = 1;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v20);
  re::RenderFrame::acquireDrawables((uint64_t)v5, &v21);
  re::ProfilerTimeGuard<(re::ProfilerStatistic)11>::end((uint64_t)v20);
  v14 = *(_QWORD *)(a1 + 16);
  *(double *)(v14 + 8) = *(double *)(v14 + 8)
                       + (double)(std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v14) / 1000000000.0;
  *(_BYTE *)(v14 + 16) = 0;
  v15 = *(_QWORD *)(a1 + 16);
  v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v17 = 0.0;
  if (*(_BYTE *)(v15 + 16))
    v17 = 1.0;
  *(double *)(v2 + 872) = *(double *)(v15 + 8) + (double)(v16.__d_.__rep_ - *(_QWORD *)v15) / 1000000000.0 * v17;
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v20, 5002, v2);
  re::DrawingManager::executeFrameInternal((id **)v2, *(re::RenderFrameWorkload **)(a1 + 24));
  re::DrawingManager::presentDrawablesAndCommit((re::DrawingManager *)v2, &v21, *(unsigned int *)(a1 + 8), *(_QWORD *)(a1 + 24));
  v18 = *(_DWORD *)(a1 + 8);
  if (v18 == 2)
  {
    re::RenderFrameWorkload::immediatePresentDrawables(*(re::RenderFrameWorkload **)(a1 + 24), 1.0 / *(float *)(v2 + 1760));
    v18 = *(_DWORD *)(a1 + 8);
  }
  if (v18 == 1)
    re::RenderFrame::onFrameComplete((uint64_t)v5);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v20);
  return re::FixedArray<re::mtl::Drawable>::deinit(&v21);
}

uint64_t std::__function::__func<re::DrawingManager::commitFrameInternal(re::WorkloadCommitMode,re::RenderFrameWorkload *)::$_0,std::allocator<re::DrawingManager::commitFrameInternal(re::WorkloadCommitMode,re::RenderFrameWorkload *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::DrawingManager::commitFrameInternal(re::WorkloadCommitMode,re::RenderFrameWorkload *)::$_0,std::allocator<re::DrawingManager::commitFrameInternal(re::WorkloadCommitMode,re::RenderFrameWorkload *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t re::ProfilerTimeGuard<(re::ProfilerStatistic)11>::end(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  int64x2_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64x2_t v7;

  if (*(_QWORD *)result && *(_QWORD *)(*(_QWORD *)result + 152))
  {
    v1 = (_QWORD *)result;
    result = mach_absolute_time();
    v2 = *v1;
    v3 = *(int64x2_t **)(*v1 + 152);
    if (v3)
    {
      v4 = result - v1[1];
      v5 = v3[48].u64[0];
      if (v5 >= v4)
        v5 = result - v1[1];
      v3[48].i64[0] = v5;
      v6 = v3[48].u64[1];
      if (v6 <= v4)
        v6 = v4;
      v3[48].i64[1] = v6;
      v7 = vdupq_n_s64(1uLL);
      v7.i64[0] = v4;
      v3[49] = vaddq_s64(v3[49], v7);
      *(_BYTE *)(v2 + 184) = 0;
    }
    *v1 = 0;
  }
  return result;
}

_QWORD *re::FixedArray<re::mtl::Drawable>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  void *v6;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = (void **)result[2];
      v5 = 8 * v2;
      do
      {
        v6 = *v4++;

        v5 -= 8;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

void re::ReadOnlyCPUAccessibleBufferSliceContent::make(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  __IOSurface *v5;
  __IOSurface *v6;
  _anonymous_namespace_ *v7;
  const char *v8;
  __int128 v9;
  __int128 v10;
  char *BaseAddress;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _QWORD v34[7];
  _OWORD v35[4];

  v4 = (void *)MEMORY[0x227694090]();
  if (!*a1)
  {
    v7 = (_anonymous_namespace_ *)std::system_category();
    v8 = "Underlying buffer is invalid";
    goto LABEL_8;
  }
  v5 = (__IOSurface *)objc_msgSend((id)*a1, "iosurface");
  if (v5)
  {
    v6 = v5;
    if (IOSurfaceLock(v5, 1u, 0))
    {
LABEL_4:
      v7 = (_anonymous_namespace_ *)std::system_category();
      v8 = "Could not allocate ReadOnlyCPUAccessibleBufferSliceContent";
LABEL_8:
      v9 = v35[0];
      v10 = v35[1];
      *(_BYTE *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = v7;
      *(_OWORD *)(a2 + 24) = v9;
      *(_OWORD *)(a2 + 40) = v10;
      goto LABEL_25;
    }
    BaseAddress = (char *)IOSurfaceGetBaseAddress(v6);
    v12 = *((unsigned int *)a1 + 3);
    *(_QWORD *)&v35[0] = &BaseAddress[*((unsigned int *)a1 + 2)];
    *((_QWORD *)&v35[0] + 1) = v12;
    *(_QWORD *)&v35[1] = 0;
    *((_QWORD *)&v35[1] + 1) = v6;
    memset(&v35[2], 0, 24);
    CFRetain(v6);
    re::ReadOnlyCPUAccessibleBufferSliceContent::ReadOnlyCPUAccessibleBufferSliceContent(v34, (uint64_t)v35);
    *(_BYTE *)a2 = 1;
    v13 = (_QWORD *)(a2 + 8);
LABEL_24:
    re::ReadOnlyCPUAccessibleBufferSliceContent::ReadOnlyCPUAccessibleBufferSliceContent(v13, (uint64_t)v34);
    re::ReadOnlyCPUAccessibleBufferSliceContent::~ReadOnlyCPUAccessibleBufferSliceContent((re::ReadOnlyCPUAccessibleBufferSliceContent *)v34);
    re::ReadOnlyCPUAccessibleBufferSliceContent::~ReadOnlyCPUAccessibleBufferSliceContent((re::ReadOnlyCPUAccessibleBufferSliceContent *)v35);
    goto LABEL_25;
  }
  if (objc_msgSend((id)*a1, sel_storageMode) == (id)3)
  {
    v7 = (_anonymous_namespace_ *)std::system_category();
    v8 = "Buffer storage is memoryless";
    goto LABEL_8;
  }
  if (objc_msgSend((id)*a1, sel_storageMode) != (id)2)
  {
    v25 = (char *)objc_msgSend((id)*a1, sel_contents);
    v26 = *((unsigned int *)a1 + 3);
    v27 = &v25[*((unsigned int *)a1 + 2)];
    v28 = (id)*a1;
    *(_QWORD *)&v35[0] = v27;
    *((_QWORD *)&v35[0] + 1) = v26;
    *(_QWORD *)&v35[1] = v28;
    memset((char *)&v35[1] + 8, 0, 32);
    if (!v28)
    {
LABEL_23:
      re::ReadOnlyCPUAccessibleBufferSliceContent::ReadOnlyCPUAccessibleBufferSliceContent(v34, (uint64_t)v35);
      *(_BYTE *)a2 = 1;
      v13 = (_QWORD *)(a2 + 8);
      goto LABEL_24;
    }
    v24 = v28;
LABEL_21:

    goto LABEL_23;
  }
  if (!*((_DWORD *)a1 + 3))
  {
    memset(v35, 0, 56);
    goto LABEL_23;
  }
  v14 = objc_msgSend((id)*a1, sel_device);
  if (!v14)
  {
    v7 = (_anonymous_namespace_ *)std::system_category();
    v8 = "No render device for private buffer.";
    goto LABEL_8;
  }
  v15 = v14;
  v16 = objc_msgSend(v14, sel_newCommandQueue);
  if (!v16)
  {
    v7 = (_anonymous_namespace_ *)std::system_category();
    v8 = "Could not create command queue to blit private storage.";
    goto LABEL_8;
  }
  v17 = v16;
  v18 = objc_msgSend(v16, sel_commandBuffer);
  if (!v18
    || (v19 = v18, (v20 = objc_msgSend(v18, sel_blitCommandEncoder)) == 0)
    || (v21 = v20, (v22 = objc_msgSend(v15, sel_newBufferWithLength_options_, *((unsigned int *)a1 + 3), 16)) == 0))
  {

    goto LABEL_4;
  }
  v23 = v22;
  objc_msgSend(v21, sel_copyFromBuffer_sourceOffset_toBuffer_destinationOffset_size_, *a1, *((unsigned int *)a1 + 2), v22, 0, *((unsigned int *)a1 + 3));
  objc_msgSend(v21, sel_synchronizeResource_, v23);
  objc_msgSend(v21, sel_endEncoding);
  objc_msgSend(v19, sel_commit);
  objc_msgSend(v19, sel_waitUntilCompleted);

  if (objc_msgSend(v15, sel_hasUnifiedMemory))
  {
    *(_QWORD *)&v35[0] = objc_msgSend(v23, sel_contents);
    *((_QWORD *)&v35[0] + 1) = objc_msgSend(v23, sel_length);
    *(_QWORD *)&v35[1] = v23;
    memset((char *)&v35[1] + 8, 0, 32);
    v24 = v23;
    goto LABEL_21;
  }
  v29 = objc_msgSend(v23, sel_contents);
  v30 = *((unsigned int *)a1 + 3);
  *(_QWORD *)&v35[0] = v29;
  *((_QWORD *)&v35[0] + 1) = v30;
  re::FixedArray<unsigned char>::FixedArray((_anonymous_namespace_ *)&v32, (uint64_t)v35);

  v35[1] = 0uLL;
  v35[2] = v32;
  v31 = v33;
  v33 = 0;
  v32 = 0uLL;
  *(_QWORD *)&v35[3] = v31;
  *(_QWORD *)&v35[0] = v31;
  *((_QWORD *)&v35[0] + 1) = *((_QWORD *)&v35[2] + 1);
  re::ReadOnlyCPUAccessibleBufferSliceContent::ReadOnlyCPUAccessibleBufferSliceContent(v34, (uint64_t)v35);
  *(_BYTE *)a2 = 1;
  re::ReadOnlyCPUAccessibleBufferSliceContent::ReadOnlyCPUAccessibleBufferSliceContent((_QWORD *)(a2 + 8), (uint64_t)v34);
  re::ReadOnlyCPUAccessibleBufferSliceContent::~ReadOnlyCPUAccessibleBufferSliceContent((re::ReadOnlyCPUAccessibleBufferSliceContent *)v34);
  re::ReadOnlyCPUAccessibleBufferSliceContent::~ReadOnlyCPUAccessibleBufferSliceContent((re::ReadOnlyCPUAccessibleBufferSliceContent *)v35);
  if ((_QWORD)v32 && *((_QWORD *)&v32 + 1))
    (*(void (**)(void))(*(_QWORD *)v32 + 40))();
LABEL_25:
  objc_autoreleasePoolPop(v4);
}

_anonymous_namespace_ *re::FixedArray<unsigned char>::FixedArray(_anonymous_namespace_ *a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    re::FixedArray<unsigned char>::copy(a1, a2);
  }
  return a1;
}

void re::VFXLoadRuntimeTask::~VFXLoadRuntimeTask(id *this)
{
  *this = &off_24ED77E90;

}

{
  re::VFXLoadRuntimeTask::~VFXLoadRuntimeTask(this);
  JUMPOUT(0x2276933B8);
}

void re::VFXManager::appendLoadRuntimeTask(dispatch_queue_t *this, id *a2)
{
  re *VFXRESceneClass;
  re *v5;
  _anonymous_namespace_ *VFXSceneLoadOptionsClass;
  objc_class *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  NSObject *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  _QWORD block[7];
  id v23;
  id v24;
  uint8_t buf[16];

  VFXRESceneClass = re::getVFXRESceneClass((re *)this);
  if (!VFXRESceneClass)
  {
    v15 = *re::graphicsLogObjects(0);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
LABEL_16:
    _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
    return;
  }
  v5 = VFXRESceneClass;
  VFXSceneLoadOptionsClass = re::getVFXSceneLoadOptionsClass(VFXRESceneClass);
  if (!VFXSceneLoadOptionsClass)
  {
    v15 = *re::graphicsLogObjects(0);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    goto LABEL_16;
  }
  v7 = VFXSceneLoadOptionsClass;
  v8 = (unint64_t)this[6];
  v9 = (unint64_t)this[7];
  if (v9 >= v8)
  {
    v10 = v9 + 1;
    if (v8 < v9 + 1)
    {
      if (this[5])
      {
        v11 = 2 * v8;
        v12 = v8 == 0;
        v13 = 8;
        if (!v12)
          v13 = v11;
        if (v13 <= v10)
          v14 = v10;
        else
          v14 = v13;
        re::DynamicArray<float *>::setCapacity(this + 5, v14);
      }
      else
      {
        re::DynamicArray<float *>::setCapacity(this + 5, v10);
        ++*((_DWORD *)this + 16);
      }
    }
    v9 = (unint64_t)this[7];
  }
  this[9][v9].isa = (Class)a2;
  this[7] = (dispatch_queue_t)(v9 + 1);
  ++*((_DWORD *)this + 16);
  v16 = a2[4];
  v17 = objc_alloc_init(v7);
  objc_msgSend(v17, "setEnableRuntimeScriptCompilation:", *((unsigned __int8 *)this + 16));
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3321888768;
  block[2] = ___ZN2re10VFXManager21appendLoadRuntimeTaskEPNS_18VFXLoadRuntimeTaskE_block_invoke;
  block[3] = &__block_descriptor_72_a8_32c76_ZTSKZN2re10VFXManager21appendLoadRuntimeTaskEPNS_18VFXLoadRuntimeTaskEE3__0_e5_v8__0l;
  v18 = v16;
  block[4] = a2;
  block[5] = v5;
  block[6] = this;
  v19 = v17;
  v20 = v18;
  v23 = v20;
  v21 = v19;
  v24 = v21;
  dispatch_async(this[3], block);

}

void ___ZN2re10VFXManager21appendLoadRuntimeTaskEPNS_18VFXLoadRuntimeTaskE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  void *v5;
  uint64_t v6;
  id v7;
  _QWORD block[4];
  id v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  LODWORD(v3) = *(unsigned __int8 *)(v3 + 8);
  os_unfair_lock_unlock(v4);
  if ((_DWORD)v3)
    v5 = 0;
  else
    v5 = (void *)objc_msgSend(objc_alloc(*(Class *)(a1 + 40)), "initWithCommandQueue:model:options:", *(_QWORD *)v2, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = ___ZZN2re10VFXManager21appendLoadRuntimeTaskEPNS_18VFXLoadRuntimeTaskEENK3__0clEv_block_invoke;
  block[3] = &unk_24ED46370;
  v6 = *(_QWORD *)(a1 + 32);
  v10 = v2;
  v11 = v6;
  v9 = v5;
  v7 = v5;
  dispatch_async(*(dispatch_queue_t *)(v2 + 32), block);

}

id __copy_helper_block_a8_32c76_ZTSKZN2re10VFXManager21appendLoadRuntimeTaskEPNS_18VFXLoadRuntimeTaskEE3__0(uint64_t a1, uint64_t a2)
{
  void *v4;
  id result;

  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v4 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  result = *(id *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = result;
  return result;
}

void __destroy_helper_block_a8_32c76_ZTSKZN2re10VFXManager21appendLoadRuntimeTaskEPNS_18VFXLoadRuntimeTaskEE3__0(uint64_t a1)
{

}

uint64_t re::VFXManager::makeScheduledLoadRuntimeTask(dispatch_queue_t *a1, id *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;

  v5 = a3;
  v6 = operator new();
  v7 = *a2;
  *(_BYTE *)(v6 + 8) = 0;
  v8 = _Block_copy(v5);

  *(_QWORD *)(v6 + 16) = v8;
  *(_DWORD *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 28) = 0;
  *(_QWORD *)v6 = &off_24ED77E90;
  v9 = v7;
  *(_QWORD *)(v6 + 32) = v9;
  *(_QWORD *)(v6 + 40) = 0;

  re::VFXManager::appendLoadRuntimeTask(a1, (id *)v6);
  return v6;
}

id *re::VFXManager::init(id *this, id *a2)
{
  void **v4;
  NSObject *v5;
  void *v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  NSObject *v11;

  v8 = 0x100000001;
  v9 = 0;
  v10 = 0;
  re::dispatch::Queue::make("VFXRuntimeLoadingQueue", (int *)&v8, &v11);
  v4 = this + 3;
  if (this + 3 != (id *)&v11)
  {
    v5 = v11;
    v11 = 0;
    v6 = *v4;
    *v4 = v5;

  }
  return re::ObjCObject::operator=(this + 4, a2);
}

void re::VFXManager::setRenderManager(re::VFXManager *this, id *a2)
{
  id v3;
  void *v4;
  __CFString *v5;

  *((_QWORD *)this + 1) = a2;
  if (a2[13])
  {
    v3 = (id)objc_msgSend(a2[23], "newCommandQueue");

    v4 = *(void **)this;
    *(_QWORD *)this = v3;

    v5 = CFSTR("VFX Renderer");
    objc_msgSend(*(id *)this, "setLabel:", CFSTR("VFX Renderer"));

  }
}

uint64_t *re::allocInfo_VFXManager(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_390);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_390))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411A120, 0);
    *(uint64_t *)((char *)&qword_25411A130 + 6) = 0;
    qword_25411A130 = 0;
    qword_25411A140 = 0;
    qword_25411A148 = 0xFFFFFFFFLL;
    qword_25411A120 = (uint64_t)&off_24ED7DAA8;
    qword_25411A150 = (uint64_t)"VFXManager";
    dword_25411A158 = 0;
    unk_25411A160 = 0u;
    unk_25411A170 = 0u;
    unk_25411A180 = 0u;
    qword_25411A190 = 0;
    __cxa_guard_release(&_MergedGlobals_390);
  }
  return &qword_25411A120;
}

void re::initInfo_VFXManager(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x109929CB96DDCALL;
  v5[1] = "VFXManager";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x7800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_VFXManager(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::VFXManager>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::VFXManager>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::VFXManager>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::VFXManager>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::VFXManager>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 16) = 256;
  *(_BYTE *)(a3 + 18) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 52) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_DWORD *)(a3 + 104) = 0;
  return result;
}

void re::internal::defaultDestruct<re::VFXManager>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5 = (_QWORD *)(a3 + 80);
  v4 = *(_QWORD *)(a3 + 80);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 112))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 112) = 0;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    ++*(_DWORD *)(a3 + 104);
  }
  v6 = *(_QWORD *)(a3 + 40);
  if (v6)
  {
    if (*(_QWORD *)(a3 + 72))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a3 + 72) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    ++*(_DWORD *)(a3 + 64);
  }

}

double re::internal::defaultConstructV2<re::VFXManager>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 256;
  *(_BYTE *)(a1 + 18) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::VFXManager>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a1 + 80);
  v2 = *(_QWORD *)(a1 + 80);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 112))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 112) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 104);
  }
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 72))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    ++*(_DWORD *)(a1 + 64);
  }

}

uint64_t re::introspect_VFXManager(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VFXManager", (uint64_t (*)(re::internal *))re::allocInfo_VFXManager, (re::IntrospectionBase *(*)(void))re::initInfo_VFXManager, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::VFXManager>, this);
}

uint64_t ___ZZN2re10VFXManager21appendLoadRuntimeTaskEPNS_18VFXLoadRuntimeTaskEENK3__0clEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t result;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  LODWORD(v3) = *(unsigned __int8 *)(v3 + 8);
  os_unfair_lock_unlock(v4);
  if (!(_DWORD)v3)
  {
    re::ObjCObject::operator=((void **)(*(_QWORD *)(a1 + 48) + 40), *(void **)(a1 + 32));
    (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 16) + 16))();
  }
  result = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD **)(v2 + 72);
  v7 = *(_QWORD *)(v2 + 56);
  v8 = v6;
  if (v7)
  {
    v9 = 8 * v7;
    v8 = *(_QWORD **)(v2 + 72);
    while (*v8 != result)
    {
      ++v8;
      v9 -= 8;
      if (!v9)
      {
        v8 = &v6[v7];
        break;
      }
    }
  }
  v10 = v8 - v6;
  if (v10 != v7)
  {
    if (v7 <= v10)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v7 - 1 > v10)
    {
      v6[v10] = v6[v7 - 1];
      result = *(_QWORD *)(a1 + 48);
    }
    *(_QWORD *)(v2 + 56) = v7 - 1;
    ++*(_DWORD *)(v2 + 64);
  }
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t re::DataArray<re::DisplayStatsManager::MetricState>::deinit(uint64_t result)
{
  unint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  re::DisplayStatsManager *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  unint64_t v35;
  __int16 v36;
  _QWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (!*(_DWORD *)(result + 44))
    return result;
  v4 = (_QWORD *)result;
  v27 = (_QWORD *)result;
  if (*(_DWORD *)(result + 40))
  {
    LODWORD(v28) = 0;
    if (!*(_QWORD *)(result + 16))
      goto LABEL_58;
    v5 = (_QWORD *)result;
    if (!**(_DWORD **)(*(_QWORD *)(result + 32) + 8))
    {
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v27);
      v5 = v27;
    }
  }
  else
  {
    LODWORD(v28) = -1;
    v5 = (_QWORD *)result;
  }
  v27 = v5;
  v6 = (unsigned __int16)v28;
  if (v5 != v4 || ((unsigned __int16)v28 == 0xFFFFLL ? (v7 = (v28 & 0xFFFF0000) == 4294901760) : (v7 = 0), !v7))
  {
    v8 = v28 >> 16;
    v1 = 0xFFFFLL;
    while (1)
    {
      v9 = (unsigned __int16)v8;
      v2 = (_QWORD *)v5[2];
      if ((unint64_t)v2 <= (unsigned __int16)v8)
        goto LABEL_56;
      v10 = v4[2];
      if (v10 > (unsigned __int16)v8)
      {
        v11 = *(_DWORD *)(*(_QWORD *)(v5[4] + 16 * (unsigned __int16)v8 + 8) + 4 * v6);
        v12 = (unsigned __int16)(v10 - 1) == (unsigned __int16)v8 ? *((_DWORD *)v4 + 12) : *((_DWORD *)v4 + 11);
        if (v12 > (unsigned __int16)v6)
        {
          v13 = v11 & 0xFFFFFF;
          v14 = v4[4];
          v15 = *(_DWORD *)(*(_QWORD *)(v14 + 16 * (unsigned __int16)v8 + 8) + 4 * v6);
          if (v15 && v15 == v13)
          {
            v17 = *(_QWORD *)(v14 + 16 * (unsigned __int16)v8);
            if (v17)
              break;
          }
        }
      }
LABEL_35:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v27);
      v5 = v27;
      v6 = (unsigned __int16)v28;
      LOWORD(v8) = WORD1(v28);
      if (v27 == v4 && (unsigned __int16)v28 == 0xFFFFLL && WORD1(v28) == 0xFFFF)
        goto LABEL_38;
    }
    v2 = (_QWORD *)(v17 + 40 * v6);
    v18 = *v2;
    *v2 = 0;
    if (v18)
    {
      *(_QWORD *)&v38 = v18;
      v19 = v2[4];
      if (!v19)
      {
        v26 = (re::DisplayStatsManager *)std::__throw_bad_function_call[abi:nn180100]();
        return re::DisplayStatsManager::init(v26);
      }
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v19 + 48))(v19, &v38);
    }
    v20 = (_QWORD *)v2[4];
    if (v20 == v2 + 1)
    {
      v20 = v2 + 1;
      v21 = 4;
    }
    else
    {
      if (!v20)
      {
LABEL_33:
        v3 = v4[2];
        if (v3 <= (unsigned __int16)v8)
          goto LABEL_57;
        *(_DWORD *)(*(_QWORD *)(v4[4] + 16 * (unsigned __int16)v8 + 8) + 4 * v6) = 0;
        *(_DWORD *)v2 = *((_DWORD *)v4 + 13);
        *((_WORD *)v4 + 26) = v6;
        *((_WORD *)v4 + 27) = v8;
        --*((_DWORD *)v4 + 10);
        goto LABEL_35;
      }
      v21 = 5;
    }
    (*(void (**)(void))(*v20 + 8 * v21))();
    goto LABEL_33;
  }
LABEL_38:
  v22 = v4[2];
  v9 = v22 - 1;
  if (v22 == 1)
    goto LABEL_47;
  v23 = 16 * v22 - 16;
  do
  {
    if (v22 <= v9)
    {
      v27 = 0;
      v42 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v30 = 136315906;
      v31 = "operator[]";
      v32 = 1024;
      v33 = 789;
      v34 = 2048;
      v35 = v9;
      v36 = 2048;
      v37 = (_QWORD *)v22;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_55:
      v27 = 0;
      v42 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v30 = 136315906;
      v31 = "removeAt";
      v32 = 1024;
      v33 = 931;
      v34 = 2048;
      v35 = v9;
      v36 = 2048;
      v37 = (_QWORD *)v1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_56:
      v29 = 0;
      v42 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v30 = 136315906;
      v31 = "operator[]";
      v32 = 1024;
      v33 = 797;
      v34 = 2048;
      v35 = v9;
      v36 = 2048;
      v37 = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_57:
      v29 = 0;
      v42 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v30 = 136315906;
      v31 = "operator[]";
      v32 = 1024;
      v33 = 789;
      v34 = 2048;
      v35 = v9;
      v36 = 2048;
      v37 = (_QWORD *)v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_58:
      v29 = 0;
      v42 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v30 = 136315906;
      v31 = "operator[]";
      v32 = 1024;
      v33 = 797;
      v34 = 2048;
      v35 = 0;
      v36 = 2048;
      v37 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v24 = (_QWORD *)(v4[4] + v23);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, *v24);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v24[1]);
    v1 = v4[2];
    if (v1 <= v9)
      goto LABEL_55;
    v22 = v1 - 1;
    if (v1 - 1 > v9)
    {
      *(_OWORD *)(v4[4] + v23) = *(_OWORD *)(v4[4] + 16 * v1 - 16);
      v22 = v4[2] - 1;
    }
    v4[2] = v22;
    ++*((_DWORD *)v4 + 6);
    v23 -= 16;
    --v9;
  }
  while (v9);
  v4[6] = 0xFFFFFFFF00000000;
  if (!v22)
  {
    v27 = 0;
    v42 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v4 = (_QWORD *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v30 = 136315906;
    v31 = "operator[]";
    v32 = 1024;
    v33 = 789;
    v34 = 2048;
    v35 = 0;
    v36 = 2048;
    v37 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_47:
    v4[6] = 0xFFFFFFFF00000000;
  }
  v25 = (_QWORD *)v4[4];
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, *v25);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v25[1]);
  result = *v4;
  if (*v4)
  {
    if (v4[4])
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    v4[4] = 0;
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    ++*((_DWORD *)v4 + 6);
  }
  *((_DWORD *)v4 + 11) = 0;
  return result;
}

void re::DisplayStatsManager::init(re::DisplayStatsManager *this)
{
  re::DynamicArray<re::DataArray<re::DisplayStatsManager::MetricState>::ElementBlock>::setCapacity(this, 0);
  ++*((_DWORD *)this + 6);
  *((_DWORD *)this + 11) = 4;
  re::DataArray<re::DisplayStatsManager::MetricState>::allocBlock((unsigned int *)this);
}

_QWORD *re::DataArray<re::DisplayStatsManager::MetricState>::~DataArray(_QWORD *a1)
{
  re::DataArray<re::DisplayStatsManager::MetricState>::deinit((uint64_t)a1);
  if (*a1)
  {
    if (a1[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
    a1[4] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    ++*((_DWORD *)a1 + 6);
  }
  return a1;
}

void re::DataArray<re::DisplayStatsManager::MetricState>::allocBlock(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;

  v2 = 40 * a1[11];
  v5.n128_u64[0] = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)a1 + 32))(*(_QWORD *)a1, v2, 0);
  if (v5.n128_u64[0])
  {
    v2 = 4 * a1[11];
    v5.n128_u64[1] = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)a1 + 32))(*(_QWORD *)a1, v2, 0);
    if (v5.n128_u64[1])
    {
      re::DynamicArray<re::DataArray<re::DisplayStatsManager::MetricState>::ElementBlock>::add((_anonymous_namespace_ *)a1, &v5);
      a1[12] = 0;
      return;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)6, v3, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v2, *(_QWORD *)(*(_QWORD *)a1 + 8), 0);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v2, *(_QWORD *)(*(_QWORD *)a1 + 8));
  _os_crash();
  __break(1u);
}

_QWORD *re::DynamicArray<re::DataArray<re::DisplayStatsManager::MetricState>::ElementBlock>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 16 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 16 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::DataArray<re::DisplayStatsManager::MetricState>::ElementBlock>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

__n128 re::DynamicArray<re::DataArray<re::DisplayStatsManager::MetricState>::ElementBlock>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4;
  __n128 result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::DataArray<re::DisplayStatsManager::MetricState>::ElementBlock>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = *a2;
  *(__n128 *)(*((_QWORD *)this + 4) + 16 * v4) = *a2;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::DataArray<re::DisplayStatsManager::MetricState>::ElementBlock>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::DataArray<re::DisplayStatsManager::MetricState>::ElementBlock>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DataArray<re::DisplayStatsManager::MetricState>::ElementBlock>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::snapshotMapFields<re::snapshot::Reader<re::snapshot::DecoderOPACK>>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  int v5;
  int Integer;
  unsigned __int8 *v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  _anonymous_namespace_ *v13;
  size_t v14;
  const char *v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  int v31;
  unsigned __int8 *v32;
  int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  int v36;
  uint64_t v37;
  unsigned __int8 *v38;
  int v39;
  unsigned __int8 *v40;
  int v41;
  _anonymous_namespace_ *v42;
  unint64_t v43;
  int v44;
  unsigned __int8 *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  int v52;
  unsigned __int8 *v53;
  int v54;
  unsigned __int8 *v55;
  int v56;
  uint64_t result;
  unsigned __int8 *v58;
  int v59;
  unsigned __int8 *v60;
  int v61;
  unsigned __int8 *v62;
  int v63;
  int v64;
  unsigned __int8 *v65;
  int v66;
  unsigned __int8 *v67;
  int v68;
  unsigned __int8 *v69;
  int v70;
  unsigned __int8 *v71;
  int v72;
  unsigned __int8 *v73;
  int v74;
  unsigned __int8 *v75;
  int v76;
  uint64_t v77;
  void *v78;
  unint64_t v79;
  unint64_t v80[2];

  if (re::snapshot::DecoderOPACK::advanceTo<1>(a1))
  {
    *(_DWORD *)a2 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
    v4 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v4 >= *(_QWORD *)(a1 + 24) || (v5 = *v4, v5 == 3))
    {
      Integer = 0x7FFFFFFF;
    }
    else if ((v5 - 7) > 0x28)
    {
      Integer = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v4 + 1;
      Integer = v5 - 8;
    }
    *(_DWORD *)(a1 + 32) = Integer;
  }
  if (re::snapshot::DecoderOPACK::advanceTo<2>(a1))
  {
    *(_DWORD *)(a2 + 4) = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
    v7 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v7 >= *(_QWORD *)(a1 + 24) || (v8 = *v7, v8 == 3))
    {
      v9 = 0x7FFFFFFF;
    }
    else if ((v8 - 7) > 0x28)
    {
      v9 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v7 + 1;
      v9 = v8 - 8;
    }
    *(_DWORD *)(a1 + 32) = v9;
  }
  if (re::snapshot::DecoderOPACK::advanceTo<3>(a1))
  {
    *(_DWORD *)(a2 + 8) = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
    v10 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v10 >= *(_QWORD *)(a1 + 24) || (v11 = *v10, v11 == 3))
    {
      v12 = 0x7FFFFFFF;
    }
    else if ((v11 - 7) > 0x28)
    {
      v12 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v10 + 1;
      v12 = v11 - 8;
    }
    *(_DWORD *)(a1 + 32) = v12;
  }
  if (re::snapshot::DecoderOPACK::advanceTo<4>(a1))
  {
    v79 = 0;
    v13 = (_anonymous_namespace_ *)re::snapshot::DecoderOPACK::beginString((re::snapshot::DecoderOPACK *)a1, &v79);
    if ((_DWORD)v13)
    {
      v14 = v79;
      v15 = *(const char **)(a1 + 16);
      v16 = *(_QWORD *)(a1 + 24) - (_QWORD)v15;
      if (v16 >= v79)
        v16 = v79;
      *(_QWORD *)(a1 + 16) = &v15[v16];
      v77 = 0;
      v78 = &str_110;
      v17 = v77;
      v18 = v78;
      v77 = 0;
      v78 = &str_110;
      v19 = *(_QWORD *)(a2 + 16);
      v20 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 16) = v17;
      *(_QWORD *)(a2 + 24) = v18;
      v80[0] = v17 & 0xFFFFFFFFFFFFFFFELL | v19 & 1;
      v80[1] = v20;
      re::StringID::destroyString((re::StringID *)v80);
      re::StringID::destroyString((re::StringID *)&v77);
    }
    v21 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v21 >= *(_QWORD *)(a1 + 24) || (v22 = *v21, v22 == 3))
    {
      v23 = 0x7FFFFFFF;
    }
    else if ((v22 - 7) > 0x28)
    {
      v23 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v21 + 1;
      v23 = v22 - 8;
    }
    *(_DWORD *)(a1 + 32) = v23;
  }
  if (re::snapshot::DecoderOPACK::advanceTo<5>(a1))
  {
    *(_DWORD *)(a2 + 32) = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
    v24 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v24 >= *(_QWORD *)(a1 + 24) || (v25 = *v24, v25 == 3))
    {
      v26 = 0x7FFFFFFF;
    }
    else if ((v25 - 7) > 0x28)
    {
      v26 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v24 + 1;
      v26 = v25 - 8;
    }
    *(_DWORD *)(a1 + 32) = v26;
  }
  if (re::snapshot::DecoderOPACK::advanceTo<6>(a1))
  {
    *(_WORD *)(a2 + 36) = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
    v27 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v27 >= *(_QWORD *)(a1 + 24) || (v28 = *v27, v28 == 3))
    {
      v29 = 0x7FFFFFFFLL;
    }
    else if ((v28 - 7) > 0x28)
    {
      v29 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v27 + 1;
      v29 = (v28 - 8);
    }
    *(_DWORD *)(a1 + 32) = v29;
  }
  else
  {
    v29 = *(unsigned int *)(a1 + 32);
  }
  if ((int)v29 <= 6)
  {
    do
    {
      v30 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v30 >= *(_QWORD *)(a1 + 24))
      {
        v31 = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 16) = v30 + 1;
        v31 = *v30;
      }
      re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v31);
      v32 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v32 >= *(_QWORD *)(a1 + 24))
        goto LABEL_50;
      v33 = *v32;
      if (v33 == 3)
        goto LABEL_50;
      if ((v33 - 7) > 0x28)
      {
        v29 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
      }
      else
      {
        *(_QWORD *)(a1 + 16) = v32 + 1;
        v29 = (v33 - 8);
      }
      *(_DWORD *)(a1 + 32) = v29;
    }
    while ((int)v29 < 7);
  }
  v34 = v29;
  if ((_DWORD)v29 == 7)
  {
    *(_DWORD *)(a2 + 64) = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
    v35 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v35 >= *(_QWORD *)(a1 + 24) || (v36 = *v35, v36 == 3))
    {
LABEL_50:
      v37 = 0x7FFFFFFFLL;
      *(_DWORD *)(a1 + 32) = 0x7FFFFFFF;
      goto LABEL_120;
    }
    if ((v36 - 7) > 0x28)
    {
      v34 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v35 + 1;
      v34 = (v36 - 8);
    }
    *(_DWORD *)(a1 + 32) = v34;
    if ((int)v34 <= 7)
    {
      do
      {
        v38 = *(unsigned __int8 **)(a1 + 16);
        if ((unint64_t)v38 >= *(_QWORD *)(a1 + 24))
        {
          v39 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 16) = v38 + 1;
          v39 = *v38;
        }
        re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v39);
        v40 = *(unsigned __int8 **)(a1 + 16);
        if ((unint64_t)v40 >= *(_QWORD *)(a1 + 24))
          goto LABEL_123;
        v41 = *v40;
        if (v41 == 3)
          goto LABEL_123;
        if ((v41 - 7) > 0x28)
        {
          v34 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
        }
        else
        {
          *(_QWORD *)(a1 + 16) = v40 + 1;
          v34 = (v41 - 8);
        }
        *(_DWORD *)(a1 + 32) = v34;
      }
      while ((int)v34 < 8);
    }
  }
  v37 = v34;
  if ((_DWORD)v34 == 8)
  {
    v80[0] = 0;
    v42 = (_anonymous_namespace_ *)re::snapshot::DecoderOPACK::beginArray((re::snapshot::DecoderOPACK *)a1, v80);
    if ((_DWORD)v42)
    {
      v43 = v80[0];
      if (!*(_QWORD *)(a2 + 40) && v80[0] != -1)
      {
      }
      if (v43 == *(_QWORD *)(a2 + 48))
      {
        v44 = 0;
        while (!re::snapshot::DecoderOPACK::endArray((re::snapshot::DecoderOPACK *)a1, v80))
        {
          if (*(_QWORD *)(a2 + 48) <= (unint64_t)v44)
          {
            v49 = *(unsigned __int8 **)(a1 + 16);
            if ((unint64_t)v49 >= *(_QWORD *)(a1 + 24))
            {
              v50 = 0;
            }
            else
            {
              *(_QWORD *)(a1 + 16) = v49 + 1;
              v50 = *v49;
            }
            re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v50);
          }
          else
          {
            v48 = *(_QWORD *)(a2 + 56);
            if (re::snapshot::DecoderOPACK::beginObject((re::snapshot::DecoderOPACK *)a1, 0))
            {
              re::snapshotMapFields<re::snapshot::Reader<re::snapshot::DecoderOPACK>>(a1, v48 + 80 * v44);
              re::snapshot::DecoderOPACK::endObject((uint64_t *)a1, 0);
            }
            ++v44;
          }
        }
        if (v43 != v44)
          re::snapshot::Decoder::error((const char **)a1, "count mismatch: expected %zu, got %d");
      }
      else
      {
        re::snapshot::Decoder::error((const char **)a1, "unexpected FixedArray size: expected %zu, got %zu");
      }
    }
    v45 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v45 >= *(_QWORD *)(a1 + 24) || (v46 = *v45, v46 == 3))
    {
      v47 = 0x7FFFFFFFLL;
      *(_DWORD *)(a1 + 32) = 0x7FFFFFFF;
      goto LABEL_138;
    }
    if ((v46 - 7) > 0x28)
    {
      v37 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v45 + 1;
      v37 = (v46 - 8);
    }
    *(_DWORD *)(a1 + 32) = v37;
    if ((int)v37 <= 8)
    {
      do
      {
        v51 = *(unsigned __int8 **)(a1 + 16);
        if ((unint64_t)v51 >= *(_QWORD *)(a1 + 24))
        {
          v52 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 16) = v51 + 1;
          v52 = *v51;
        }
        re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v52);
        v53 = *(unsigned __int8 **)(a1 + 16);
        if ((unint64_t)v53 >= *(_QWORD *)(a1 + 24))
          goto LABEL_123;
        v54 = *v53;
        if (v54 == 3)
          goto LABEL_123;
        if ((v54 - 7) > 0x28)
        {
          v37 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
        }
        else
        {
          *(_QWORD *)(a1 + 16) = v53 + 1;
          v37 = (v54 - 8);
        }
        *(_DWORD *)(a1 + 32) = v37;
      }
      while ((int)v37 < 9);
    }
  }
LABEL_120:
  v47 = v37;
  if ((_DWORD)v37 == 9)
  {
    re::snapshot::DecoderOPACK::operator>>((uint64_t *)a1, (_BYTE *)(a2 + 68));
    v55 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v55 >= *(_QWORD *)(a1 + 24) || (v56 = *v55, v56 == 3))
    {
LABEL_123:
      result = 0x7FFFFFFFLL;
      *(_DWORD *)(a1 + 32) = 0x7FFFFFFF;
      goto LABEL_156;
    }
    if ((v56 - 7) > 0x28)
    {
      v47 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v55 + 1;
      v47 = (v56 - 8);
    }
    *(_DWORD *)(a1 + 32) = v47;
    if ((int)v47 <= 9)
    {
      do
      {
        v58 = *(unsigned __int8 **)(a1 + 16);
        if ((unint64_t)v58 >= *(_QWORD *)(a1 + 24))
        {
          v59 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 16) = v58 + 1;
          v59 = *v58;
        }
        result = (uint64_t)re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v59);
        v60 = *(unsigned __int8 **)(a1 + 16);
        if ((unint64_t)v60 >= *(_QWORD *)(a1 + 24))
          goto LABEL_141;
        v61 = *v60;
        if (v61 == 3)
          goto LABEL_141;
        if ((v61 - 7) > 0x28)
        {
          v47 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
        }
        else
        {
          *(_QWORD *)(a1 + 16) = v60 + 1;
          v47 = (v61 - 8);
        }
        *(_DWORD *)(a1 + 32) = v47;
      }
      while ((int)v47 < 10);
    }
  }
LABEL_138:
  result = v47;
  if ((_DWORD)v47 == 10)
  {
    result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
    *(_DWORD *)(a2 + 72) = result;
    v62 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v62 >= *(_QWORD *)(a1 + 24) || (v63 = *v62, v63 == 3))
    {
LABEL_141:
      v64 = 0x7FFFFFFF;
      *(_DWORD *)(a1 + 32) = 0x7FFFFFFF;
      goto LABEL_173;
    }
    if ((v63 - 7) > 0x28)
    {
      result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v62 + 1;
      result = (v63 - 8);
    }
    *(_DWORD *)(a1 + 32) = result;
    if ((int)result <= 10)
    {
      do
      {
        v65 = *(unsigned __int8 **)(a1 + 16);
        if ((unint64_t)v65 >= *(_QWORD *)(a1 + 24))
        {
          v66 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 16) = v65 + 1;
          v66 = *v65;
        }
        re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v66);
        v67 = *(unsigned __int8 **)(a1 + 16);
        if ((unint64_t)v67 >= *(_QWORD *)(a1 + 24))
          goto LABEL_176;
        v68 = *v67;
        if (v68 == 3)
          goto LABEL_176;
        if ((v68 - 7) > 0x28)
        {
          result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
        }
        else
        {
          *(_QWORD *)(a1 + 16) = v67 + 1;
          result = (v68 - 8);
        }
        *(_DWORD *)(a1 + 32) = result;
      }
      while ((int)result < 11);
    }
  }
LABEL_156:
  v64 = result;
  if ((_DWORD)result == 11)
  {
    result = (uint64_t)re::snapshot::DecoderOPACK::operator>>((uint64_t *)a1, (_BYTE *)(a2 + 76));
    v69 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v69 >= *(_QWORD *)(a1 + 24))
      goto LABEL_176;
    v70 = *v69;
    if (v70 == 3)
      goto LABEL_176;
    if ((v70 - 7) > 0x28)
    {
      result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
      v64 = result;
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v69 + 1;
      v64 = v70 - 8;
    }
    *(_DWORD *)(a1 + 32) = v64;
    if (v64 <= 11)
    {
      do
      {
        v71 = *(unsigned __int8 **)(a1 + 16);
        if ((unint64_t)v71 >= *(_QWORD *)(a1 + 24))
        {
          v72 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 16) = v71 + 1;
          v72 = *v71;
        }
        result = (uint64_t)re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v72);
        v73 = *(unsigned __int8 **)(a1 + 16);
        if ((unint64_t)v73 >= *(_QWORD *)(a1 + 24))
          goto LABEL_176;
        v74 = *v73;
        if (v74 == 3)
          goto LABEL_176;
        if ((v74 - 7) > 0x28)
        {
          result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
          v64 = result;
        }
        else
        {
          *(_QWORD *)(a1 + 16) = v73 + 1;
          v64 = v74 - 8;
        }
        *(_DWORD *)(a1 + 32) = v64;
      }
      while (v64 < 12);
    }
  }
LABEL_173:
  if (v64 != 12)
    return result;
  re::snapshot::DecoderOPACK::operator>>((uint64_t *)a1, (_BYTE *)(a2 + 77));
  v75 = *(unsigned __int8 **)(a1 + 16);
  if ((unint64_t)v75 < *(_QWORD *)(a1 + 24))
  {
    v76 = *v75;
    if (v76 != 3)
    {
      if ((v76 - 7) > 0x28)
      {
        result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
      }
      else
      {
        *(_QWORD *)(a1 + 16) = v75 + 1;
        result = (v76 - 8);
      }
      goto LABEL_177;
    }
  }
LABEL_176:
  result = 0x7FFFFFFFLL;
LABEL_177:
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

unsigned int *re::snapshotMapFields<re::snapshot::Writer<re::snapshot::EncoderOPACK>>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = a1[2];
  if (v4 >= a1[3])
  {
    re::snapshot::EncoderOPACK::writeInteger(a1, 1);
  }
  else
  {
    v5 = *(_QWORD *)a1;
    a1[2] = v4 + 1;
    *(_BYTE *)(v5 + v4) = 9;
  }
  re::snapshot::EncoderOPACK::writeInteger(a1, *a2);
  v6 = a1[2];
  if (v6 >= a1[3])
  {
    re::snapshot::EncoderOPACK::writeInteger(a1, 2);
  }
  else
  {
    v7 = *(_QWORD *)a1;
    a1[2] = v6 + 1;
    *(_BYTE *)(v7 + v6) = 10;
  }
  re::snapshot::EncoderOPACK::writeInteger(a1, a2[1]);
  v8 = a1[2];
  if (v8 >= a1[3])
  {
    re::snapshot::EncoderOPACK::writeInteger(a1, 3);
  }
  else
  {
    v9 = *(_QWORD *)a1;
    a1[2] = v8 + 1;
    *(_BYTE *)(v9 + v8) = 11;
  }
  re::snapshot::EncoderOPACK::writeInteger(a1, a2[2]);
  v10 = a1[2];
  if (v10 >= a1[3])
  {
    re::snapshot::EncoderOPACK::writeInteger(a1, 4);
  }
  else
  {
    v11 = *(_QWORD *)a1;
    a1[2] = v10 + 1;
    *(_BYTE *)(v11 + v10) = 12;
  }
  v12 = strlen(*((const char **)a2 + 3));
  re::snapshot::EncoderOPACK::serializeString(a1, *((const char **)a2 + 3), v12);
  v13 = a1[2];
  if (v13 >= a1[3])
  {
    re::snapshot::EncoderOPACK::writeInteger(a1, 5);
  }
  else
  {
    v14 = *(_QWORD *)a1;
    a1[2] = v13 + 1;
    *(_BYTE *)(v14 + v13) = 13;
  }
  re::snapshot::EncoderOPACK::writeInteger(a1, a2[8]);
  v15 = a1[2];
  if (v15 >= a1[3])
  {
    re::snapshot::EncoderOPACK::writeInteger(a1, 6);
  }
  else
  {
    v16 = *(_QWORD *)a1;
    a1[2] = v15 + 1;
    *(_BYTE *)(v16 + v15) = 14;
  }
  re::snapshot::EncoderOPACK::writeInteger(a1, *((unsigned __int16 *)a2 + 18));
  v17 = a1[2];
  if (v17 >= a1[3])
  {
    re::snapshot::EncoderOPACK::writeInteger(a1, 7);
  }
  else
  {
    v18 = *(_QWORD *)a1;
    a1[2] = v17 + 1;
    *(_BYTE *)(v18 + v17) = 15;
  }
  re::snapshot::EncoderOPACK::writeInteger(a1, a2[16]);
  v19 = a1[2];
  if (v19 >= a1[3])
  {
    re::snapshot::EncoderOPACK::writeInteger(a1, 8);
  }
  else
  {
    v20 = *(_QWORD *)a1;
    a1[2] = v19 + 1;
    *(_BYTE *)(v20 + v19) = 16;
  }
  v21 = *((_QWORD *)a2 + 6);
  re::snapshot::EncoderOPACK::beginArray(a1, v21);
  v22 = *((_QWORD *)a2 + 6);
  if (v22)
  {
    v23 = *((_QWORD *)a2 + 7);
    v24 = 80 * v22;
    do
    {
      re::snapshot::EncoderOPACK::beginObject(a1);
      re::snapshotMapFields<re::snapshot::Writer<re::snapshot::EncoderOPACK>>(a1, v23);
      re::snapshot::EncoderOPACK::endObject(a1);
      v23 += 80;
      v24 -= 80;
    }
    while (v24);
  }
  re::snapshot::EncoderOPACK::endArray(a1, v21);
  v25 = a1[2];
  if (v25 >= a1[3])
  {
    re::snapshot::EncoderOPACK::writeInteger(a1, 9);
  }
  else
  {
    v26 = *(_QWORD *)a1;
    a1[2] = v25 + 1;
    *(_BYTE *)(v26 + v25) = 17;
  }
  re::snapshot::EncoderOPACK::operator<<(a1, *((unsigned __int8 *)a2 + 68));
  v27 = a1[2];
  if (v27 >= a1[3])
  {
    re::snapshot::EncoderOPACK::writeInteger(a1, 10);
  }
  else
  {
    v28 = *(_QWORD *)a1;
    a1[2] = v27 + 1;
    *(_BYTE *)(v28 + v27) = 18;
  }
  re::snapshot::EncoderOPACK::writeInteger(a1, a2[18]);
  v29 = a1[2];
  if (v29 >= a1[3])
  {
    re::snapshot::EncoderOPACK::writeInteger(a1, 11);
  }
  else
  {
    v30 = *(_QWORD *)a1;
    a1[2] = v29 + 1;
    *(_BYTE *)(v30 + v29) = 19;
  }
  re::snapshot::EncoderOPACK::operator<<(a1, *((unsigned __int8 *)a2 + 76));
  v31 = a1[2];
  if (v31 >= a1[3])
  {
    re::snapshot::EncoderOPACK::writeInteger(a1, 12);
  }
  else
  {
    v32 = *(_QWORD *)a1;
    a1[2] = v31 + 1;
    *(_BYTE *)(v32 + v31) = 20;
  }
  return re::snapshot::EncoderOPACK::operator<<(a1, *((unsigned __int8 *)a2 + 77));
}

unsigned int *re::snapshotMapFields<re::snapshot::Writer<re::snapshot::EncoderOPACK>>(re::snapshot::EncoderOPACK *a1, uint64_t a2)
{
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<1,re::StringID>(a1, a2);
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<2,unsigned short>(a1, (unsigned __int16 *)(a2 + 16));
  return re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<3,re::MetalTypeInfo>(a1, (unsigned int *)(a2 + 24));
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<1,re::StringID>(re::snapshot::EncoderOPACK *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  size_t v7;

  v4 = *((unsigned int *)this + 2);
  if (v4 >= *((_DWORD *)this + 3))
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, 1);
  }
  else
  {
    v5 = *(_QWORD *)this;
    *((_DWORD *)this + 2) = v4 + 1;
    *(_BYTE *)(v5 + v4) = 9;
  }
  v6 = *(const char **)(a2 + 8);
  v7 = strlen(v6);
  return re::snapshot::EncoderOPACK::serializeString((unsigned int *)this, v6, v7);
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<2,unsigned short>(re::snapshot::EncoderOPACK *this, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *((unsigned int *)this + 2);
  if (v4 >= *((_DWORD *)this + 3))
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, 2);
  }
  else
  {
    v5 = *(_QWORD *)this;
    *((_DWORD *)this + 2) = v4 + 1;
    *(_BYTE *)(v5 + v4) = 10;
  }
  return re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, *a2);
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<3,re::MetalTypeInfo>(re::snapshot::EncoderOPACK *this, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *((unsigned int *)this + 2);
  if (v4 >= *((_DWORD *)this + 3))
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, 3);
  }
  else
  {
    v5 = *(_QWORD *)this;
    *((_DWORD *)this + 2) = v4 + 1;
    *(_BYTE *)(v5 + v4) = 11;
  }
  re::snapshot::EncoderOPACK::beginObject((unsigned int *)this);
  re::snapshotMapFields<re::snapshot::Writer<re::snapshot::EncoderOPACK>>((unsigned int *)this, a2);
  return re::snapshot::EncoderOPACK::endObject((unsigned int *)this);
}

void re::sg::Material::getCustomUniformsArgument(id *this@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  unint64_t v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  _anonymous_namespace_ *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  char v26;
  uint64_t v27;
  void *v28;
  int v29;
  void *v30;
  int v31;
  void *v32;
  int v33;
  void *v34;
  int v35;
  char v36;
  _BYTE *v37;
  unsigned int v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  char v44;
  uint64_t v45[2];
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  void *v52;
  int v53;
  __int16 v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE v57[22];
  uint64_t v58;
  int v59;
  const char *v60;
  __int16 v61;
  int v62;
  __int16 v63;
  unint64_t v64;
  __int16 v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(*this, "customUniformsType");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3
    && (objc_msgSend(v3, "properties"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6 = objc_msgSend(v5, "count"),
        v5,
        v6))
  {
    v45[0] = 2330;
    v45[1] = (uint64_t)"$1";
    v43 = v4;
    v7 = v4;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = &str_110;
    *(_WORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 32) = 1;
    *(_DWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = &str_110;
    *(_WORD *)(a2 + 60) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_DWORD *)(a2 + 96) = 0;
    *(_WORD *)(a2 + 100) = 256;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 85) = 0;
    *(_BYTE *)(a2 + 104) = 0;
    re::StringID::operator=((unint64_t *)a2, v45);
    objc_msgSend(v7, "properties");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "count");

    v49 = 0;
    v50 = 1;
    v51 = 0;
    v52 = &str_110;
    v53 = 0;
    v54 = 0;
    *(_DWORD *)&v57[16] = 0;
    *(_WORD *)&v57[20] = 256;
    v56 = 0;
    *(_QWORD *)v57 = 0;
    v55 = 0;
    *(_QWORD *)&v57[5] = 0;
    if (v9)
    {
      v12 = 0;
      v44 = 0;
      v13 = 0;
      v14 = 77;
      while (1)
      {
        objc_msgSend(v7, "properties");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "objectAtIndexedSubscript:", v12);
        v16 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v16, "name");
        v17 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v18 = (_anonymous_namespace_ *)objc_msgSend(v17, "UTF8String");
        v47 = 0;
        v48 = &str_110;
        v19 = v56;
        if (v56 <= v12)
          break;
        v20 = *(_QWORD *)v57 + v14;
        v21 = v47;
        v22 = v48;
        v47 = 0;
        v48 = &str_110;
        v23 = v21 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(*(_QWORD *)v57 + v14 - 61) & 1;
        v24 = *(_QWORD *)(*(_QWORD *)v57 + v14 - 53);
        *(_QWORD *)(v20 - 53) = v22;
        *(_QWORD *)&v67 = v23;
        *((_QWORD *)&v67 + 1) = v24;
        *(_QWORD *)(v20 - 61) = v21;
        re::StringID::destroyString((re::StringID *)&v67);
        re::StringID::destroyString((re::StringID *)&v47);

        v58 = 0;
        objc_msgSend(v16, "type");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = objc_msgSend(v25, "getMTLDataType:", &v58);

        if ((v26 & 1) != 0)
        {
          v19 = v56;
          if (v56 <= v12)
            goto LABEL_35;
          v27 = v58;
          *(_WORD *)(*(_QWORD *)v57 + v14 - 41) = v58;
        }
        else
        {
          v27 = v58;
        }
        if (v27 == 58)
        {
          v46 = 0;
          objc_msgSend(v16, "type");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = objc_msgSend(v28, "getMTLTextureType:", &v46);

          if (v29)
          {
            v19 = v56;
            if (v56 <= v12)
              goto LABEL_36;
            *(_DWORD *)(*(_QWORD *)v57 + v14 - 13) = v46;
          }
          v44 = 1;
        }
        v19 = v56;
        if (v56 <= v12)
          goto LABEL_30;
        *(_DWORD *)(*(_QWORD *)v57 + v14 - 5) = v12;
        objc_msgSend(v16, "type");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = objc_msgSend(v30, "size");
        v19 = v56;
        if (v56 <= v12)
          goto LABEL_31;
        *(_DWORD *)(*(_QWORD *)v57 + v14 - 73) = v31;

        objc_msgSend(v16, "type");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = objc_msgSend(v32, "alignment");
        v19 = v56;
        if (v56 <= v12)
          goto LABEL_32;
        *(_DWORD *)(*(_QWORD *)v57 + v14 - 69) = v33;

        objc_msgSend(v16, "type");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = objc_msgSend(v34, "offset");
        v19 = v56;
        if (v56 <= v12)
          goto LABEL_33;
        *(_DWORD *)(*(_QWORD *)v57 + v14 - 77) = v35;

        v36 = objc_msgSend(v16, "visible");
        v19 = v56;
        if (v56 <= v12)
          goto LABEL_34;
        v37 = (_BYTE *)(*(_QWORD *)v57 + v14);
        *v37 = v36;
        v38 = *(_DWORD *)(v37 - 69);
        if (v38 > v13)
          v13 = v38;

        ++v12;
        v14 += 80;
        if (v9 == v12)
          goto LABEL_26;
      }
      v58 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v12;
      v65 = 2048;
      v66 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_30:
      v47 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v12;
      v65 = 2048;
      v66 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_31:
      v47 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v12;
      v65 = 2048;
      v66 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_32:
      v47 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v12;
      v65 = 2048;
      v66 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_33:
      v47 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v12;
      v65 = 2048;
      v66 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_34:
      v47 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v12;
      v65 = 2048;
      v66 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_35:
      v47 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v12;
      v65 = 2048;
      v66 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_36:
      v47 = 0;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v59 = 136315906;
      v60 = "operator[]";
      v61 = 1024;
      v62 = 468;
      v63 = 2048;
      v64 = v12;
      v65 = 2048;
      v66 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_37:
      re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 454);
      _os_crash();
      __break(1u);
    }
    v13 = 0;
    v44 = 0;
LABEL_26:
    v57[20] = v44;
    v50 = v13;
    if (!v56)
      goto LABEL_37;
    HIDWORD(v49) = *(_DWORD *)(*(_QWORD *)v57 + 80 * v56 - 76) + *(_DWORD *)(*(_QWORD *)v57 + 80 * v56 - 80);
    *(_DWORD *)(a2 + 32) = v50;
    *(_QWORD *)(a2 + 24) = v49;
    v39 = v51;
    v40 = v52;
    v51 = 0;
    v52 = &str_110;
    v41 = *(_QWORD *)(a2 + 40);
    v42 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 40) = v39;
    *(_QWORD *)(a2 + 48) = v40;
    *(_QWORD *)&v67 = v39 & 0xFFFFFFFFFFFFFFFELL | v41 & 1;
    *((_QWORD *)&v67 + 1) = v42;
    re::StringID::destroyString((re::StringID *)&v67);
    *(_DWORD *)(a2 + 56) = v53;
    *(_WORD *)(a2 + 60) = v54;
    re::FixedArray<re::MetalTypeInfo>::operator=((uint64_t *)(a2 + 64), &v55);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)&v57[8];
    *(_QWORD *)(a2 + 94) = *(_QWORD *)&v57[14];
    re::FixedArray<re::MetalTypeInfo>::deinit(&v55);
    re::StringID::destroyString((re::StringID *)&v51);

    re::StringID::destroyString((re::StringID *)v45);
    *(_WORD *)(a2 + 16) = 1;
    v4 = v43;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = &str_110;
    *(_WORD *)(a2 + 16) = 0;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_DWORD *)(a2 + 32) = 1;
    *(_QWORD *)(a2 + 48) = &str_110;
    *(_WORD *)(a2 + 60) = 0;
    *(_WORD *)(a2 + 100) = 256;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 85) = 0;
    *(_BYTE *)(a2 + 104) = 0;
  }

}

void re::sg::Material::getPublicUniforms(id *this@<X0>, uint64_t *a2@<X8>)
{
  void *v3;
  _anonymous_namespace_ *v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  void *v8;
  unint64_t v9;
  id v10[2];
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  unint64_t v16;
  __int16 v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  objc_msgSend(*this, "uniforms");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (_anonymous_namespace_ *)objc_msgSend(v3, "count");
  if (objc_msgSend(v3, "count"))
  {
    v5 = 0;
    v6 = 0;
    do
    {
      objc_msgSend(v3, "objectAtIndex:", v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "name");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10[0] = v8;

      v9 = a2[1];
      if (v9 <= v6)
      {
        v10[1] = 0;
        v22 = 0u;
        v23 = 0u;
        v20 = 0u;
        v21 = 0u;
        v19 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v11 = 136315906;
        v12 = "operator[]";
        v13 = 1024;
        v14 = 468;
        v15 = 2048;
        v16 = v6;
        v17 = 2048;
        v18 = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      NS::SharedPtr<MTL::Texture>::operator=((void **)(a2[2] + v5), v10);
      if (v10[0])

      ++v6;
      v5 += 8;
    }
    while (v6 < objc_msgSend(v3, "count"));
  }

}

uint64_t re::sg::Material::hasGeometryModifierWithModelPositionOffset(id *this)
{
  id v1;
  uint64_t v2;

  v1 = *this;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v2 = objc_msgSend(v1, "hasGeometryModifierOffset");
  else
    v2 = 0;

  return v2;
}

uint64_t re::sg::CachedCompilationMaterial::CachedCompilationMaterial(uint64_t a1, id *a2)
{
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)a1 = &off_24ED77F08;
  *(_QWORD *)(a1 + 24) = *a2;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 68) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = &str_110;
  *(_WORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 1;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = &str_110;
  *(_DWORD *)(a1 + 168) = 0;
  *(_WORD *)(a1 + 172) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 212) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 197) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 213) = 1;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  return a1;
}

uint64_t re::sg::CachedCompilationMaterial::CachedCompilationMaterial(uint64_t a1, const __CFData *a2, id *a3)
{
  re::StringID *v6;
  uint64_t v7;
  uint64_t *v8;
  const UInt8 *BytePtr;
  _anonymous_namespace_ *Length;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  _anonymous_namespace_ *v21;
  size_t v22;
  const char *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char var0;
  char *var1;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  int *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  int v51;
  _anonymous_namespace_ *v52;
  id v53;
  const char *v54;
  char *v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  NSObject *v68;
  unint64_t v69;
  _BYTE *v70;
  NSObject *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  int v82;
  int v84;
  StringID v85;
  unint64_t v86;
  id v87;
  char *v88;
  unint64_t v89;
  unint64_t Integer;
  char *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint8_t buf[56];
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)a1 = &off_24ED77F08;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_QWORD *)(a1 + 68) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 80) = *a3;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v6 = (re::StringID *)(a1 + 112);
  *(_QWORD *)(a1 + 120) = &str_110;
  *(_WORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  v7 = a1 + 136;
  *(_DWORD *)(a1 + 140) = 0;
  *(_DWORD *)(a1 + 144) = 1;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = &str_110;
  *(_DWORD *)(a1 + 168) = 0;
  *(_WORD *)(a1 + 172) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 212) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 197) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  v8 = (uint64_t *)(a1 + 224);
  *(_BYTE *)(a1 + 213) = 1;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  BytePtr = CFDataGetBytePtr(a2);
  Length = (_anonymous_namespace_ *)CFDataGetLength(a2);
  *(_QWORD *)&v92 = BytePtr;
  *((_QWORD *)&v92 + 1) = Length;
  LODWORD(v94) = -1;
  BYTE4(v94) = 0;
  *((_QWORD *)&v94 + 1) = 0;
  *(_QWORD *)&v93 = BytePtr;
  *((_QWORD *)&v93 + 1) = (char *)Length + (_QWORD)BytePtr;
  v11 = (uint64_t *)re::snapshot::DecoderOPACK::beginObject((re::snapshot::DecoderOPACK *)&v92, 0);
  if ((_DWORD)v11)
  {
    if (re::snapshot::DecoderOPACK::advanceTo<1>((uint64_t)&v92))
    {
      v86 = 0;
      memset(buf, 0, 36);
      *(_QWORD *)&buf[36] = 0x7FFFFFFFLL;
      v12 = *(unsigned int *)(a1 + 64);
      if ((_DWORD)v12)
      {
        v13 = 0;
        v14 = *(int **)(a1 + 48);
        while (1)
        {
          v15 = *v14;
          v14 += 8;
          if (v15 < 0)
            break;
          if (v12 == ++v13)
          {
            LODWORD(v13) = *(_DWORD *)(a1 + 64);
            break;
          }
        }
      }
      else
      {
        LODWORD(v13) = 0;
      }
      if ((_DWORD)v12 != (_DWORD)v13)
      {
        v16 = v13;
        v17 = *(_QWORD *)(a1 + 48);
        do
        {
          re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)buf, (StringID *)(v17 + 32 * v16 + 8));
          v17 = *(_QWORD *)(a1 + 48);
          if (*(_DWORD *)(a1 + 64) <= (v13 + 1))
            v18 = v13 + 1;
          else
            v18 = *(_DWORD *)(a1 + 64);
          v19 = v13;
          while (1)
          {
            v16 = (v19 + 1);
            if (v18 - 1 == v19)
              break;
            ++v19;
            LODWORD(v13) = v16;
            if ((*(_DWORD *)(v17 + 32 * v16) & 0x80000000) != 0)
              goto LABEL_19;
          }
          LODWORD(v13) = v18;
LABEL_19:
          ;
        }
        while ((_DWORD)v12 != (_DWORD)v13);
      }
      v20 = (_QWORD *)(a1 + 32);
      if ((re::snapshot::DecoderOPACK::beginDictionary((re::snapshot::DecoderOPACK *)&v92, &v86) & 1) != 0)
      {
        if (v86 != -1)
          re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1 + 32, v86);
        while (!re::snapshot::DecoderOPACK::endDictionary((re::snapshot::DecoderOPACK *)&v92, &v86))
        {
          *(_QWORD *)&v85.var0 = 0;
          v85.var1 = (char *)&str_110;
          v89 = 0;
          v21 = (_anonymous_namespace_ *)re::snapshot::DecoderOPACK::beginString((re::snapshot::DecoderOPACK *)&v92, &v89);
          if ((_DWORD)v21)
          {
            v22 = v89;
            v23 = (const char *)v93;
            v24 = *((_QWORD *)&v93 + 1) - v93;
            if (*((_QWORD *)&v93 + 1) - (_QWORD)v93 >= v89)
              v24 = v89;
            *(_QWORD *)&v93 = v93 + v24;
            v87 = 0;
            v88 = (char *)&str_110;
            v25 = (unint64_t)v87;
            v26 = v88;
            v87 = 0;
            v88 = (char *)&str_110;
            var0 = (char)v85.var0;
            var1 = v85.var1;
            *(_QWORD *)&v85.var0 = v25;
            v85.var1 = v26;
            Integer = v25 & 0xFFFFFFFFFFFFFFFELL | var0 & 1;
            v91 = var1;
            re::StringID::destroyString((re::StringID *)&Integer);
            re::StringID::destroyString((re::StringID *)&v87);
          }
          re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)buf, &v85);
          v29 = (_QWORD *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 32, &v85);
          if (v29)
          {
            *v29 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)&v92, 0);
          }
          else
          {
            Integer = 0;
            Integer = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)&v92, 0);
            re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(a1 + 32, &v85, &Integer);
          }
          re::StringID::destroyString((re::StringID *)&v85);
        }
      }
      v30 = *(_DWORD *)&buf[32];
      v31 = 0;
      if (*(_DWORD *)&buf[32])
      {
        v32 = *(int **)&buf[16];
        while (1)
        {
          v33 = *v32;
          v32 += 6;
          if (v33 < 0)
            break;
          if (*(unsigned int *)&buf[32] == ++v31)
          {
            LODWORD(v31) = *(_DWORD *)&buf[32];
            break;
          }
        }
      }
      if (*(_DWORD *)&buf[32] != (_DWORD)v31)
      {
        v34 = v31;
        v35 = *(_QWORD *)&buf[16];
        v36 = *(_DWORD *)&buf[32];
        v84 = *(_DWORD *)&buf[32];
        do
        {
          if (*v20)
          {
            v37 = (_QWORD *)(v35 + 24 * v34 + 8);
            v38 = 0xBF58476D1CE4E5B9 * ((*v37 >> 31) ^ (*v37 >> 1));
            v39 = ((0x94D049BB133111EBLL * (v38 ^ (v38 >> 27))) ^ ((0x94D049BB133111EBLL * (v38 ^ (v38 >> 27))) >> 31))
                % *(unsigned int *)(a1 + 56);
            v40 = *(_QWORD *)(a1 + 40);
            v41 = *(unsigned int *)(v40 + 4 * v39);
            if ((_DWORD)v41 != 0x7FFFFFFF)
            {
              v42 = *(_QWORD *)(a1 + 48);
              if (re::StringID::operator==((_QWORD *)(v42 + 32 * v41 + 8), v37))
              {
                *(_DWORD *)(v40 + 4 * v39) = *(_DWORD *)(v42 + 32 * v41) & 0x7FFFFFFF;
LABEL_46:
                v44 = *(_QWORD *)(a1 + 48);
                v45 = (int *)(v44 + 32 * v41);
                v46 = *v45;
                v20 = (_QWORD *)(a1 + 32);
                v30 = v84;
                if (*v45 < 0)
                {
                  *v45 = v46 & 0x7FFFFFFF;
                  re::StringID::destroyString((re::StringID *)(v45 + 2));
                  v30 = v84;
                  v44 = *(_QWORD *)(a1 + 48);
                  v46 = *(_DWORD *)(v44 + 32 * v41);
                }
                *(_DWORD *)(v44 + 32 * v41) = *(_DWORD *)(a1 + 68) | v46 & 0x80000000;
                --*(_DWORD *)(a1 + 60);
                v47 = *(_DWORD *)(a1 + 72) + 1;
                *(_DWORD *)(a1 + 68) = v41;
                *(_DWORD *)(a1 + 72) = v47;
                v36 = *(_DWORD *)&buf[32];
                v35 = *(_QWORD *)&buf[16];
              }
              else
              {
                while (1)
                {
                  v43 = v41;
                  v41 = *(_DWORD *)(v42 + 32 * v41) & 0x7FFFFFFF;
                  if (v41 == 0x7FFFFFFF)
                    break;
                  if (re::StringID::operator==((_QWORD *)(v42 + 32 * v41 + 8), v37))
                  {
                    *(_DWORD *)(v42 + 32 * v43) = *(_DWORD *)(v42 + 32 * v43) & 0x80000000 | *(_DWORD *)(v42 + 32 * v41) & 0x7FFFFFFF;
                    goto LABEL_46;
                  }
                }
                v20 = (_QWORD *)(a1 + 32);
                v30 = v84;
              }
            }
          }
          if (v36 <= (int)v31 + 1)
            v48 = v31 + 1;
          else
            v48 = v36;
          while (1)
          {
            v34 = (v31 + 1);
            if (v48 - 1 == (_DWORD)v31)
              break;
            LODWORD(v31) = v31 + 1;
            v49 = v34;
            if ((*(_DWORD *)(v35 + 24 * v34) & 0x80000000) != 0)
              goto LABEL_57;
          }
          v49 = v48;
LABEL_57:
          LODWORD(v31) = v49;
        }
        while (v30 != v49);
      }
      re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)buf);
      if ((unint64_t)v93 >= *((_QWORD *)&v93 + 1))
      {
        v51 = 0x7FFFFFFF;
        v8 = (uint64_t *)(a1 + 224);
        v6 = (re::StringID *)(a1 + 112);
        v7 = a1 + 136;
      }
      else
      {
        v50 = *(unsigned __int8 *)v93;
        v8 = (uint64_t *)(a1 + 224);
        v6 = (re::StringID *)(a1 + 112);
        v7 = a1 + 136;
        if (v50 == 3)
        {
          v51 = 0x7FFFFFFF;
        }
        else if ((v50 - 7) > 0x28)
        {
          v51 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)&v92, 0x7FFFFFFFLL);
        }
        else
        {
          *(_QWORD *)&v93 = v93 + 1;
          v51 = v50 - 8;
        }
      }
      LODWORD(v94) = v51;
    }
    if (re::snapshot::DecoderOPACK::advanceTo<2>((uint64_t)&v92))
    {
      if (re::snapshot::DecoderOPACK::beginObject((re::snapshot::DecoderOPACK *)&v92, 0))
      {
        if (re::snapshot::DecoderOPACK::advanceTo<1>((uint64_t)&v92))
        {
          v87 = 0;
          v52 = (_anonymous_namespace_ *)re::snapshot::DecoderOPACK::beginString((re::snapshot::DecoderOPACK *)&v92, (unint64_t *)&v87);
          if ((_DWORD)v52)
          {
            v53 = v87;
            v54 = (const char *)v93;
            v55 = (char *)(*((_QWORD *)&v93 + 1) - v93);
            if (*((_QWORD *)&v93 + 1) - (_QWORD)v93 >= (unint64_t)v87)
              v55 = (char *)v87;
            *(_QWORD *)&v93 = &v55[v93];
            Integer = 0;
            v91 = (char *)&str_110;
            v56 = Integer;
            v57 = v91;
            Integer = 0;
            v91 = (char *)&str_110;
            v58 = *(_QWORD *)(a1 + 112);
            v59 = *(_QWORD *)(a1 + 120);
            *(_QWORD *)(a1 + 112) = v56;
            *(_QWORD *)(a1 + 120) = v57;
            *(_QWORD *)buf = v56 & 0xFFFFFFFFFFFFFFFELL | v58 & 1;
            *(_QWORD *)&buf[8] = v59;
            re::StringID::destroyString((re::StringID *)buf);
            re::StringID::destroyString((re::StringID *)&Integer);
          }
          if ((unint64_t)v93 >= *((_QWORD *)&v93 + 1) || (v60 = *(unsigned __int8 *)v93, v60 == 3))
          {
            v61 = 0x7FFFFFFF;
          }
          else if ((v60 - 7) > 0x28)
          {
            v61 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)&v92, 0x7FFFFFFFLL);
          }
          else
          {
            *(_QWORD *)&v93 = v93 + 1;
            v61 = v60 - 8;
          }
          LODWORD(v94) = v61;
        }
        if (re::snapshot::DecoderOPACK::advanceTo<2>((uint64_t)&v92))
        {
          *(_WORD *)(a1 + 128) = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)&v92, 0);
          if ((unint64_t)v93 >= *((_QWORD *)&v93 + 1) || (v62 = *(unsigned __int8 *)v93, v62 == 3))
          {
            v63 = 0x7FFFFFFF;
          }
          else if ((v62 - 7) > 0x28)
          {
            v63 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)&v92, 0x7FFFFFFFLL);
          }
          else
          {
            *(_QWORD *)&v93 = v93 + 1;
            v63 = v62 - 8;
          }
          LODWORD(v94) = v63;
        }
        if (re::snapshot::DecoderOPACK::advanceTo<3>((uint64_t)&v92))
        {
          if (re::snapshot::DecoderOPACK::beginObject((re::snapshot::DecoderOPACK *)&v92, 0))
          {
            re::snapshotMapFields<re::snapshot::Reader<re::snapshot::DecoderOPACK>>((uint64_t)&v92, v7);
            re::snapshot::DecoderOPACK::endObject((uint64_t *)&v92, 0);
          }
          if ((unint64_t)v93 >= *((_QWORD *)&v93 + 1) || (v64 = *(unsigned __int8 *)v93, v64 == 3))
          {
            v65 = 0x7FFFFFFF;
          }
          else if ((v64 - 7) > 0x28)
          {
            v65 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)&v92, 0x7FFFFFFFLL);
          }
          else
          {
            *(_QWORD *)&v93 = v93 + 1;
            v65 = v64 - 8;
          }
          LODWORD(v94) = v65;
        }
        re::snapshot::DecoderOPACK::endObject((uint64_t *)&v92, 0);
      }
      if ((unint64_t)v93 >= *((_QWORD *)&v93 + 1) || (v66 = *(unsigned __int8 *)v93, v66 == 3))
      {
        v67 = 0x7FFFFFFF;
      }
      else if ((v66 - 7) > 0x28)
      {
        v67 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)&v92, 0x7FFFFFFFLL);
      }
      else
      {
        *(_QWORD *)&v93 = v93 + 1;
        v67 = v66 - 8;
      }
      LODWORD(v94) = v67;
    }
    v11 = re::snapshot::DecoderOPACK::endObject((uint64_t *)&v92, 0);
  }
  if (BYTE4(v94))
  {
    v68 = *re::graphicsLogObjects((re *)v11);
    if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v68, OS_LOG_TYPE_ERROR, "Error decoding shader graph info.", buf, 2u);
    }
    re::snapshot::Decoder::logInput((re::snapshot::Decoder *)&v92);
  }
  v69 = *(_QWORD *)v6;
  if (*(_QWORD *)v6 < 0xFFFFFFFFFFFFFFFELL || (v69 & 1) != 0)
  {
    if (v69 > 1)
      goto LABEL_105;
    v70 = *(_BYTE **)(a1 + 120);
    if (!v70)
      goto LABEL_105;
  }
  else
  {
    v70 = *(_BYTE **)(a1 + 120);
  }
  if (!*v70)
  {
    v71 = *re::graphicsLogObjects((re *)v11);
    if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
    {
      v72 = *(_QWORD *)(a1 + 184);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v72;
      _os_log_impl(&dword_224FE9000, v71, OS_LOG_TYPE_DEFAULT, "No name on TypedArgument with %zu members", buf, 0xCu);
    }
    re::StringID::destroyString(v6);
    *(_QWORD *)(a1 + 112) = 0x1A31080F9ALL;
    *(_QWORD *)(a1 + 120) = "<empty>";
  }
LABEL_105:
  if (!BYTE4(v94))
  {
    v73 = *(unsigned int *)(a1 + 60);
    v74 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v74)
    {
      v75 = 0;
      v76 = *(int **)(a1 + 48);
      while (1)
      {
        v77 = *v76;
        v76 += 8;
        if (v77 < 0)
          break;
        if (v74 == ++v75)
        {
          LODWORD(v75) = *(_DWORD *)(a1 + 64);
          break;
        }
      }
    }
    else
    {
      LODWORD(v75) = 0;
    }
    if ((_DWORD)v74 != (_DWORD)v75)
    {
      v78 = 0;
      v79 = v75;
      do
      {
        v87 = (id)objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32 * v79 + 16));
        v80 = *(_QWORD *)(a1 + 232);
        if (v80 <= v78)
        {
          Integer = 0;
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v92 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "operator[]";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 468;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v78;
          *(_WORD *)&buf[28] = 2048;
          *(_QWORD *)&buf[30] = v80;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        NS::SharedPtr<MTL::Texture>::operator=((void **)(*(_QWORD *)(a1 + 240) + 8 * v78), &v87);
        if (v87)

        ++v78;
        if (*(_DWORD *)(a1 + 64) <= (v75 + 1))
          v81 = v75 + 1;
        else
          v81 = *(_DWORD *)(a1 + 64);
        while (1)
        {
          v79 = (v75 + 1);
          if (v81 - 1 == (_DWORD)v75)
            break;
          LODWORD(v75) = v75 + 1;
          v82 = v79;
          if ((*(_DWORD *)(*(_QWORD *)(a1 + 48) + 32 * v79) & 0x80000000) != 0)
            goto LABEL_124;
        }
        v82 = v81;
LABEL_124:
        LODWORD(v75) = v82;
      }
      while ((_DWORD)v74 != v82);
    }
  }
  return a1;
}

void re::sg::CachedCompilationMaterial::~CachedCompilationMaterial(re::sg::CachedCompilationMaterial *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24ED77F08;
  v2 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;

  v3 = (void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;

  re::FixedArray<NS::SharedPtr<NS::String>>::deinit((_QWORD *)this + 28);
  re::FixedArray<re::MetalTypeInfo>::deinit((_QWORD *)this + 22);
  re::StringID::destroyString((re::sg::CachedCompilationMaterial *)((char *)this + 152));
  re::StringID::destroyString((re::sg::CachedCompilationMaterial *)((char *)this + 112));

  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 4);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::sg::CachedCompilationMaterial::~CachedCompilationMaterial(this);
  JUMPOUT(0x2276933B8);
}

void re::sg::CachedCompilationMaterial::compileMetalLibrary(uint64_t a1@<X0>, id *a2@<X1>, CGColorSpace *a3@<X2>, id *a4@<X8>)
{
  CFStringRef Name;
  uint64_t ColorGamutFromCGColorSpaceName;
  NSObject *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  re *v15;
  NSObject *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  re *v25;
  NSObject *v26;
  void *v27;
  NSObject *v28;
  void *v29;
  const __CFString *v30;
  __CFString *v31;
  void *v32;
  id v33;
  id v34;
  char v35;
  id v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  id v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v35 = 0;
  Name = CGColorSpaceGetName(a3);
  ColorGamutFromCGColorSpaceName = re::ColorHelpers::getColorGamutFromCGColorSpaceName(Name, &v35);
  if ((ColorGamutFromCGColorSpaceName & 1) != 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
    if (*(_QWORD *)(a1 + 96) && v35 == *(_BYTE *)(a1 + 88))
    {
      *a4 = *(id *)(a1 + 96);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
      v34 = *(id *)(a1 + 24);
      if (!v34)
      {
        v11 = *(void **)(a1 + 80);
        if (v11)
        {
          v12 = v11;
          v33 = 0;
          objc_msgSend(MEMORY[0x24BE8F630], "materialWithArchiveData:error:", v12, &v33);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = v33;
          re::ObjCObject::operator=(&v34, v13);

          if (v14)
          {
            v16 = (id)*re::graphicsLogObjects(v15);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              objc_msgSend(v14, "debugDescription");
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              if (v32)
              {
                objc_msgSend(v14, "debugDescription");
                v30 = (const __CFString *)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                v30 = CFSTR("<nil>");
              }
              *(_DWORD *)buf = 138412290;
              v31 = (__CFString *)v30;
              v38 = (void *)v30;
              _os_log_error_impl(&dword_224FE9000, v16, OS_LOG_TYPE_ERROR, "Failed to create shader graph material from payload. Error: %@", buf, 0xCu);
              if (v32)

            }
          }

        }
      }
      v17 = *a2;
      v18 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BE8F628]), "initWithWorkingColorSpace:", a3);
      v19 = (void *)MEMORY[0x24BE8F630];
      v20 = v34;
      v36 = 0;
      v21 = v17;
      objc_msgSend(v19, "metalLibraryFromMaterial:forDevice:options:error:", v20, v21, v18, &v36);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = v36;

      v24 = v22;
      *a4 = v24;

      if (!v24)
      {
        v26 = *re::graphicsLogObjects(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          v27 = v34;
          v28 = v26;
          objc_msgSend(v27, "name");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v38 = v29;
          v39 = 2112;
          v40 = v23;
          _os_log_error_impl(&dword_224FE9000, v28, OS_LOG_TYPE_ERROR, "ShaderGraph service could not compile shader graph asset (%@). Error: %@", buf, 0x16u);

        }
      }

      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
      *(_BYTE *)(a1 + 88) = v35;
      re::ObjCObject::operator=((id *)(a1 + 96), a4);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));

    }
  }
  else
  {
    v10 = *re::graphicsLogObjects((re *)ColorGamutFromCGColorSpaceName);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v38 = a3;
      _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, "Attempted to generate a metal library from a ShaderGraphMaterial with a unsupported color space %@", buf, 0xCu);
    }
    *a4 = 0;
  }
}

_QWORD *re::sg::CachedCompilationMaterial::getCustomUniformsArgument@<X0>(StringID *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  const StringID *v5;
  char *var1;
  id *p_var1;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  char *v15;
  char *v16;
  _QWORD *result;
  uint64_t v18;
  char *v19;
  __int16 v20;
  char *v21;
  $19119DE20B7F3CFCAA17A8FA4D266B5D v22;
  char *v23;
  void *v24;
  int v25;
  __int16 v26;
  uint64_t v27[3];
  _QWORD v28[2];
  char v29;
  unint64_t v30;
  char *v31;

  v5 = this + 7;
  v4 = *(_QWORD *)&this[7].var0;
  if (v4 >= 0xFFFFFFFFFFFFFFFELL && (*(_QWORD *)&this[7].var0 & 1) == 0)
  {
    var1 = this[7].var1;
  }
  else
  {
    if (v4 > 1)
      goto LABEL_12;
    var1 = this[7].var1;
    if (!var1)
      goto LABEL_12;
  }
  if (!*var1)
  {
    p_var1 = (id *)&this[1].var1;
    if (this[1].var1)
    {
      re::sg::Material::getCustomUniformsArgument(p_var1, (uint64_t)&v18);
      v9 = v18;
      v10 = v19;
      v18 = 0;
      v19 = (char *)&str_110;
      v11 = *(_QWORD *)&this[7].var0;
      v12 = this[7].var1;
      *(_QWORD *)&this[7].var0 = v9;
      this[7].var1 = v10;
      v30 = v9 & 0xFFFFFFFFFFFFFFFELL | v11 & 1;
      v31 = v12;
      re::StringID::destroyString((re::StringID *)&v30);
      *(_WORD *)&this[8].var0 = v20;
      this[8].var1 = v21;
      this[9].var0 = v22;
      v13 = v23;
      v14 = v24;
      v23 = 0;
      v24 = &str_110;
      v15 = this[9].var1;
      v16 = *(char **)&this[10].var0;
      this[9].var1 = v13;
      *(_QWORD *)&this[10].var0 = v14;
      v30 = (unint64_t)v13 & 0xFFFFFFFFFFFFFFFELL | v15 & 1;
      v31 = v16;
      re::StringID::destroyString((re::StringID *)&v30);
      LODWORD(this[10].var1) = v25;
      WORD2(this[10].var1) = v26;
      re::FixedArray<re::MetalTypeInfo>::operator=((uint64_t *)&this[11], v27);
      this[12].var1 = (char *)v28[0];
      *(char **)((char *)&this[12].var1 + 6) = *(char **)((char *)v28 + 6);
      LOBYTE(this[13].var1) = v29;
      re::FixedArray<re::MetalTypeInfo>::deinit(v27);
      re::StringID::destroyString((re::StringID *)&v23);
      re::StringID::destroyString((re::StringID *)&v18);
    }
  }
LABEL_12:
  re::StringID::StringID((re::StringID *)a2, v5);
  *(_WORD *)(a2 + 16) = this[8].var0;
  *(_QWORD *)(a2 + 24) = this[8].var1;
  *($19119DE20B7F3CFCAA17A8FA4D266B5D *)(a2 + 32) = this[9].var0;
  re::StringID::StringID((re::StringID *)(a2 + 40), (StringID *)((char *)this + 152));
  *(_DWORD *)(a2 + 56) = this[10].var1;
  *(_WORD *)(a2 + 60) = WORD2(this[10].var1);
  result = re::FixedArray<re::MetalTypeInfo>::FixedArray((_QWORD *)(a2 + 64), (uint64_t)&this[11]);
  *(_QWORD *)(a2 + 88) = this[12].var1;
  *(_QWORD *)(a2 + 94) = *(char **)((char *)&this[12].var1 + 6);
  *(_BYTE *)(a2 + 104) = this[13].var1;
  return result;
}

uint64_t *re::sg::CachedCompilationMaterial::getPublicUniforms@<X0>(id *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v5[3];

  v3 = (uint64_t *)(this + 28);
  if (!this[29])
  {
    re::sg::Material::getPublicUniforms(this + 3, v5);
    re::FixedArray<float>::operator=(v3, v5);
    re::FixedArray<NS::SharedPtr<NS::String>>::deinit(v5);
  }
  return re::FixedArray<NS::SharedPtr<NS::String>>::FixedArray(a2, (uint64_t)v3);
}

BOOL re::sg::CachedCompilationMaterial::encode(StringID *this, CFMutableDataRef theData)
{
  UInt8 *MutableBytePtr;
  _anonymous_namespace_ *v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  id v14;
  const char *v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE v20[40];
  uint64_t v21;
  _QWORD v22[6];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  UInt8 *v27;
  unsigned int length;
  unsigned int length_4;
  CFMutableDataRef v30;
  UInt8 *(*v31)(const __CFData *, uint64_t, uint64_t);
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  MutableBytePtr = CFDataGetMutableBytePtr(theData);
  v5 = (_anonymous_namespace_ *)CFDataGetLength(theData);
  v27 = MutableBytePtr;
  length = 0;
  length_4 = v5;
  v30 = theData;
  v31 = re::sg::CachedCompilationMaterial::encode(__CFData *)const::$_0::__invoke;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  re::DynamicString::setCapacity(&v32, 0);
  v36 = 6;
  v37 = 0;
  re::snapshot::EncoderOPACK::beginObject((unsigned int *)&v27);
  v6 = length;
  if (length >= length_4)
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)&v27, 1);
  }
  else
  {
    ++length;
    v27[v6] = 9;
  }
  objc_msgSend(this[1].var1, "uniforms");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  re::snapshot::EncoderOPACK::beginDictionary((unsigned int *)&v27, objc_msgSend(v7, "count"));
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v8 = v7;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v38, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v24 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
        objc_msgSend(v13, "name");
        v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v15 = (const char *)objc_msgSend(v14, "UTF8String");
        objc_msgSend(v13, "name");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        re::snapshot::EncoderOPACK::serializeString((unsigned int *)&v27, v15, objc_msgSend(v16, "length"));

        re::snapshot::EncoderOPACK::writeInteger((unsigned int *)&v27, objc_msgSend(v13, "type"));
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v38, 16);
    }
    while (v10);
  }

  re::snapshot::EncoderOPACK::endArray((unsigned int *)&v27, objc_msgSend(v8, "count"));
  re::sg::CachedCompilationMaterial::getCustomUniformsArgument(this, (uint64_t)v20);
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<2,re::TypedArgument>((re::snapshot::EncoderOPACK *)&v27, (uint64_t)v20);
  re::FixedArray<re::MetalTypeInfo>::deinit(v22);
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)v20);
  re::snapshot::EncoderOPACK::endObject((unsigned int *)&v27);
  CFDataSetLength(theData, length);
  v17 = v33;

  if (v32 && (v33 & 1) != 0)
    (*(void (**)(void))(*v32 + 40))();
  v18 = v17 >> 1;
  if ((v17 & 1) == 0)
    v18 = v17 >> 1;
  return v18 == 0;
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<2,re::TypedArgument>(re::snapshot::EncoderOPACK *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *((unsigned int *)this + 2);
  if (v4 >= *((_DWORD *)this + 3))
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, 2);
  }
  else
  {
    v5 = *(_QWORD *)this;
    *((_DWORD *)this + 2) = v4 + 1;
    *(_BYTE *)(v5 + v4) = 10;
  }
  re::snapshot::EncoderOPACK::beginObject((unsigned int *)this);
  re::snapshotMapFields<re::snapshot::Writer<re::snapshot::EncoderOPACK>>(this, a2);
  return re::snapshot::EncoderOPACK::endObject((unsigned int *)this);
}

UInt8 *re::sg::CachedCompilationMaterial::encode(__CFData *)const::$_0::__invoke(const __CFData *a1, uint64_t a2, uint64_t a3)
{
  CFIndex Length;
  CFIndex v6;
  UInt8 *MutableBytePtr;

  Length = CFDataGetLength(a1);
  if (2 * Length <= a3)
    v6 = a3;
  else
    v6 = 2 * Length;
  CFDataSetLength(a1, v6);
  MutableBytePtr = CFDataGetMutableBytePtr(a1);
  CFDataGetLength(a1);
  return MutableBytePtr;
}

uint64_t *re::snapshot::DecoderRaw::operator>><unsigned int>(uint64_t *result, _DWORD *a2)
{
  _DWORD *v2;
  unint64_t v3;

  v2 = (_DWORD *)result[2];
  v3 = result[3] - (_QWORD)v2;
  if (v3 <= 3)
    return re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining", 4uLL, v3);
  *a2 = *v2;
  result[2] += 4;
  return result;
}

uint64_t *re::snapshot::DecoderRaw::operator>><unsigned short>(uint64_t *result, _WORD *a2)
{
  _WORD *v2;
  unint64_t v3;

  v2 = (_WORD *)result[2];
  v3 = result[3] - (_QWORD)v2;
  if (v3 <= 1)
    return re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining", 2uLL, v3);
  *a2 = *v2;
  result[2] += 2;
  return result;
}

uint64_t *re::FixedArray<NS::SharedPtr<NS::String>>::FixedArray(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    re::FixedArray<unsigned long>::init<>(a1, v4, *(_QWORD *)(a2 + 8));
    re::FixedArray<NS::SharedPtr<NS::String>>::copy((uint64_t)a1, a2);
  }
  return a1;
}

uint64_t re::FixedArray<NS::SharedPtr<NS::String>>::copy(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  void **v3;
  void **v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result + 8);
  if (v2 == *(_QWORD *)(a2 + 8))
  {
    if (v2)
    {
      v3 = *(void ***)(a2 + 16);
      v4 = *(void ***)(result + 16);
      v5 = 8 * v2;
      do
      {
        result = (uint64_t)NS::SharedPtr<MTL::Texture>::operator=(v4++, v3++);
        v5 -= 8;
      }
      while (v5);
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TensionDeformer::init(uint64_t this, re::RenderManager *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  id v10;
  void **ComputePipelineState;
  _OWORD v12[2];
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE v17[8];
  uint64_t v18;
  char v19;
  _QWORD v20[4];
  _BYTE v21[24];
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  int v30;
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(this + 32))
  {
    v3 = this;
    *(_BYTE *)(this + 32) = 1;
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 4);
    if (*((_BYTE *)a2 + 261))
    {
      v4 = 0;
      v5 = 0;
      v6 = 1;
      do
      {
        v7 = v6;
        v28 = v4 & 1;
        v17[0] = 0;
        v23 = 0;
        memset(v21, 0, sizeof(v21));
        v22 = 0;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        memset(v12, 0, sizeof(v12));
        v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v12, 0);
        v14 = 0;
        v15 = 0;
        v16 = 0;
        if (!v15)
        {
          v29 = 0;
          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          v38 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v30 = 136315906;
          v31 = "operator[]";
          v32 = 1024;
          v33 = 468;
          v34 = 2048;
          v35 = 0;
          v36 = 2048;
          v37 = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *v16 = v28;
        v13 = 53;
        re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v21, (re::DynamicString *)v12);
        v10 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD5A0], sel_alloc), sel_init);
        objc_msgSend(v10, sel_setConstantValue_type_atIndex_, &v28, 53, 0);
        ComputePipelineState = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v17);
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v3 + 8 * v5 + 16), ComputePipelineState);
        if (v10)

        if (v14)
        {
          if (v15)
          {
            (*(void (**)(void))(*(_QWORD *)v14 + 40))();
            v15 = 0;
            v16 = 0;
          }
          v14 = 0;
        }
        if (*(_QWORD *)&v12[0] && (BYTE8(v12[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v12[0] + 40))();
        re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v21);
        this = v20[0];
        if (v20[0])
        {
          if ((v20[1] & 1) != 0)
            this = (*(uint64_t (**)(void))(*(_QWORD *)v20[0] + 40))();
          memset(v20, 0, sizeof(v20));
        }
        if (v17[0])
        {
          this = v18;
          if (v18)
          {
            if ((v19 & 1) != 0)
              this = (*(uint64_t (**)(void))(*(_QWORD *)v18 + 40))();
          }
        }
        v6 = 0;
        v4 = 1;
        v5 = 1;
      }
      while ((v7 & 1) != 0);
      *(_BYTE *)(v3 + 33) = 1;
    }
  }
  return this;
}

double re::TensionDeformer::addDeformationInstance@<D0>(re::TensionDeformer *this@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v3;
  double result;

  if (*a2)
  {
    v3 = 0;
  }
  else if (*((_BYTE *)this + 32))
  {
    v3 = *((_BYTE *)this + 33) != 0;
  }
  else
  {
    v3 = 1;
  }
  *(_QWORD *)a3 = 0xFFFFFFFFLL;
  *(_QWORD *)&result = 3;
  *(_OWORD *)(a3 + 8) = xmmword_226168700;
  *(_BYTE *)(a3 + 24) = v3;
  *(_QWORD *)(a3 + 32) = -1;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  return result;
}

uint64_t re::TensionDeformer::allocateBuffers(re *a1, re::FrameContext *a2, unsigned int a3, uint64_t *a4)
{
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char **v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  re::AttributeTable *v25;
  re::AttributeTable *v26;
  re::AttributeTable *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  unsigned int v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v61;
  re::FrameContext *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  int v73;
  __int16 v74;
  int v75;
  char v76;
  uint64_t v77;
  int v78;
  const char *v79;
  __int16 v80;
  int v81;
  __int16 v82;
  unint64_t v83;
  __int16 v84;
  unint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;

  v4 = a4;
  v91 = *MEMORY[0x24BDAC8D0];
  v7 = *a4;
  v8 = *(_QWORD *)(*a4 + 48);
  re::globalAllocators(a1);
  v9 = *((_QWORD *)a2 + 3);
  v11 = (char **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, 24, 8);
  v62 = a2;
  v12 = (char *)*((_QWORD *)a2 + 3);
  v11[1] = (char *)v8;
  v11[2] = 0;
  *v11 = v12;
  if (v8)
  {
    if (v8 >= 0x492492492492493)
    {
LABEL_48:
      re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 56, v8);
      _os_crash();
      __break(1u);
      goto LABEL_49;
    }
    v12 = (char *)(*(uint64_t (**)(char *, unint64_t, uint64_t))(*(_QWORD *)v12 + 32))(v12, 56 * v8, 8);
    v11[2] = v12;
    if (!v12)
    {
LABEL_49:
      re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
LABEL_50:
      re::internal::assertLog((re::internal *)5, v50, "assertion failure: '%s' (%s:line %i) Invalid deformation execution mode: %u.", "!\"Unreachable code\"", "allocateBuffers", 144, v61);
      _os_crash();
      __break(1u);
    }
    v14 = v12;
    if (v8 != 1)
    {
      bzero(v12, 56 * v8 - 56);
      v14 += 56 * v8 - 56;
    }
    *((_QWORD *)v14 + 6) = 0;
    *((_OWORD *)v14 + 1) = 0u;
    *((_OWORD *)v14 + 2) = 0u;
    *(_OWORD *)v14 = 0u;
  }
  v61 = a3;
  *((_QWORD *)&v87 + 1) = re::globalAllocators((re *)v12)[2];
  *(_QWORD *)&v88 = &v86;
  *(_QWORD *)&v86 = &off_24ED77F68;
  v15 = (*(uint64_t (**)(uint64_t, char **, __int128 *))(*(_QWORD *)v9 + 16))(v9, v11, &v86);
  if ((_QWORD)v88)
  {
    (**(void (***)(_QWORD))v88)(v88);
    if ((__int128 *)v88 != &v86)
      (*(void (**)(_QWORD))(**((_QWORD **)&v87 + 1) + 40))(*((_QWORD *)&v87 + 1));
  }
  if (v8)
  {
    v16 = 0;
    v64 = v8;
    v65 = v7 + 8;
    v69 = v4;
    v63 = v15;
    while (1)
    {
      v17 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v65, v16);
      v18 = *(_QWORD *)(v17 + 8);
      v19 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](v4[1], v18);
      v21 = v4[6];
      if (v21 <= v18)
        break;
      v22 = v19;
      v23 = v4[5];
      v24 = re::DataArray<re::MeshModel>::get(*((_QWORD *)a1 + 1) + 8, *(_QWORD *)(*(_QWORD *)(v19 + 368) + 16));
      v8 = *(unsigned __int16 *)(v22 + 392);
      v7 = *(_QWORD *)(v24 + 56);
      if (v7 <= v8)
        goto LABEL_43;
      v7 = *(_QWORD *)(v15 + 8);
      if (v7 <= v16)
        goto LABEL_44;
      v67 = v17;
      v70 = v23 + 312 * v18;
      v71 = *(_QWORD *)(v24 + 64);
      v25 = (re::AttributeTable *)(v71 + 560 * *(unsigned __int16 *)(v22 + 392));
      v7 = *(_QWORD *)(v15 + 16);
      v68 = (_QWORD *)(v7 + 56 * v16);
      v26 = v25;
      do
      {
        v27 = v26;
        v26 = (re::AttributeTable *)*((_QWORD *)v26 + 1);
      }
      while (v26 && !*((_QWORD *)v27 + 9));
      *(_QWORD *)&v86 = 0x66739F42610D3BC2;
      v28 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v27 + 6, &v86);
      if (v28 == -1)
        v72 = 0;
      else
        v72 = (unsigned __int8 *)(*((_QWORD *)v27 + 7) + 16 * v28 + 8);
      v29 = (_QWORD *)(v71 + 560 * v8);
      do
      {
        v30 = v29;
        v29 = (_QWORD *)v29[1];
      }
      while (v29 && !v30[9]);
      *(_QWORD *)&v86 = 0x535FC835C0260B06;
      v31 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v30 + 6, &v86);
      if (v31 == -1)
        v32 = 0;
      else
        v32 = (unsigned __int8 *)(v30[7] + 16 * v31 + 8);
      v33 = (_QWORD *)(v71 + 560 * v8);
      do
      {
        v34 = v33;
        v33 = (_QWORD *)v33[1];
      }
      while (v33 && !v34[9]);
      *(_QWORD *)&v86 = 0x455BD5FA7760EFECLL;
      v35 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v34 + 6, &v86);
      if (v35 != -1 && v72 && v32)
      {
        v36 = v35;
        v37 = v34[7];
        v38 = *(unsigned int *)(v71 + 560 * v8 + 464);
        v8 = 56;
        *(_QWORD *)(v7 + 56 * v16 + 24) = v38;
        v39 = re::AttributeTable::buffers(v25);
        v41 = *v72;
        if (v40 <= v41)
          goto LABEL_45;
        *(_QWORD *)(v7 + 56 * v16 + 32) = v39 + 16 * v41;
        v42 = re::AttributeTable::buffers(v25);
        v44 = *v32;
        if (v43 <= v44)
          goto LABEL_46;
        *(_QWORD *)(v7 + 56 * v16 + 40) = v42 + 16 * v44;
        v45 = re::AttributeTable::buffers(v25);
        v47 = *(unsigned __int8 *)(v37 + 16 * v36 + 8);
        if (v46 <= v47)
          goto LABEL_47;
        *(_QWORD *)(v7 + 56 * v16 + 48) = v45 + 16 * v47;
        LOBYTE(v86) = 1;
        v8 = v23 + 312 * v18;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v70, 1u);
        v48 = (_QWORD *)v8;
        v49 = *(_DWORD *)(v48[8]
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v48 + 7, (unsigned __int8 *)&v86)+ 20);
        LOBYTE(v86) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v70, 1u);
        v7 = v49
           / *(unsigned __int16 *)(v48[16]
                                 + 20
                                 * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v48 + 15, (unsigned __int8 *)&v86)+ 4);
        if (v61 == 1)
        {
          v51 = *(_QWORD **)(v22 + 360);
          v52 = v69[2];
          v74 = 257;
          v73 = 65548;
          v76 = 30;
          v75 = 0;
          v53 = re::DeformationBufferAllocator::alloc(v51, v52, 1, (uint64_t)&v73, *(unsigned __int8 *)(v67 + 16), 4 * v7);
          v54 = re::DeformationBufferAllocator::allocationData(*(re::DeformationBufferAllocator **)(v22 + 360), *(unsigned __int8 *)(v67 + 16), v53);
          LOWORD(v79) = 257;
          v78 = 65540;
          LOBYTE(v80) = 28;
          HIDWORD(v79) = 0;
          v55 = objc_msgSend(*(id *)(v54 + 24), sel_contents);
          v56 = *(_QWORD *)(v54 + 24);
          *(_QWORD *)&v86 = v55;
          *((_QWORD *)&v86 + 1) = *(_QWORD *)(v54 + 32);
          *(_QWORD *)&v87 = v56;
          re::DeformationVertexBufferState::setOutputBuffer(v70, 0x17u, 1, (uint64_t)&v86, (uint64_t)&v78);
          re::FrameContext::perFrameAlloc(v62, 4uLL, 4uLL, (uint64_t)&v86);
          v57 = v86;
          v58 = v87;
          v59 = *((_QWORD *)&v86 + 1);
          *(_DWORD *)(v86 + DWORD2(v86)) = v7;
          *v68 = v57;
          v68[1] = v59;
          v68[2] = v58;
        }
        else
        {
          if (v61)
            goto LABEL_50;
          re::FrameContext::perFrameAlloc(v62, 4 * v7, 0x10uLL, (uint64_t)&v86);
          LOWORD(v79) = 257;
          v78 = 65540;
          LOBYTE(v80) = 28;
          HIDWORD(v79) = 0;
          re::DeformationVertexBufferState::setOutputBuffer(v70, 0x17u, 0, (uint64_t)&v86, (uint64_t)&v78);
        }
      }
      ++v16;
      v15 = v63;
      v4 = v69;
      if (v16 == v64)
        return v15;
    }
    re::internal::assertLog((re::internal *)6, v20, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v18, v21);
    _os_crash();
    __break(1u);
LABEL_43:
    v77 = 0;
    v90 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v78 = 136315906;
    v79 = "operator[]";
    v80 = 1024;
    v81 = 476;
    v82 = 2048;
    v83 = v8;
    v84 = 2048;
    v85 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_44:
    v77 = 0;
    v90 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v78 = 136315906;
    v79 = "operator[]";
    v80 = 1024;
    v81 = 468;
    v82 = 2048;
    v83 = v16;
    v84 = 2048;
    v85 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_45:
    re::internal::assertLog((re::internal *)6, v40, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v41, v40);
    _os_crash();
    __break(1u);
LABEL_46:
    re::internal::assertLog((re::internal *)6, v43, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v44, v43);
    _os_crash();
    __break(1u);
LABEL_47:
    re::internal::assertLog((re::internal *)6, v46, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v47, v46);
    _os_crash();
    __break(1u);
    goto LABEL_48;
  }
  return v15;
}

uint64_t re::TensionDeformer::deformGPU(uint64_t a1, uint64_t a2, void **this, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int v36;
  uint64_t v37;
  _BYTE v38[28];
  __int16 v39;
  unint64_t v40;
  _OWORD v41[5];
  uint64_t v42;

  v4 = a4;
  v42 = *MEMORY[0x24BDAC8D0];
  v7 = *a4;
  re::mtl::ComputeCommandEncoder::pushDebugGroup(this, (re::ns *)"Perform Tension Computation");
  v8 = *(_QWORD *)(v7 + 48);
  if (v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = v7 + 8;
    v33 = a2;
    v34 = v4;
    v31 = v7 + 8;
    v32 = *(_QWORD *)(v7 + 48);
    do
    {
      v12 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v11, v10);
      v14 = *(_QWORD *)(a2 + 8);
      if (v14 <= v10)
      {
        memset(v41, 0, sizeof(v41));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v38 = 136315906;
        *(_QWORD *)&v38[4] = "operator[]";
        *(_WORD *)&v38[12] = 1024;
        *(_DWORD *)&v38[14] = 468;
        *(_WORD *)&v38[18] = 2048;
        *(_QWORD *)&v38[20] = v10;
        v39 = 2048;
        v40 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_15:
        re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v17, v18);
        _os_crash();
        __break(1u);
      }
      v15 = *(_QWORD *)(a2 + 16);
      v16 = v15 + v9;
      if (*(_QWORD *)(v15 + v9 + 32) && *(_QWORD *)(v16 + 40) && *(_QWORD *)(v15 + v9 + 48))
      {
        v17 = *(_QWORD *)(v12 + 8);
        v18 = v4[6];
        if (v18 <= v17)
          goto LABEL_15;
        v19 = (_QWORD *)(v4[5] + 312 * v17);
        LOBYTE(v41[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v19, 1u);
        v20 = *(_DWORD *)(v19[8]
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v19 + 7, (unsigned __int8 *)v41)+ 20);
        LOBYTE(v41[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v19, 1u);
        v21 = v20
            / *(unsigned __int16 *)(v19[16]
                                  + 20
                                  * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v19 + 15, (unsigned __int8 *)v41)+ 4);
        LOBYTE(v41[0]) = 0;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v19, 0);
        if (*(_BYTE *)(v19[16]
                      + 20
                      * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v19 + 15, (unsigned __int8 *)v41)+ 16) == 36)v22 = 24;
        else
          v22 = 16;
        v36 = objc_msgSend(*(id *)(a1 + v22), sel_maxTotalThreadsPerThreadgroup);
        v37 = (v21 + v36 - 1) / v36;
        objc_msgSend(*this, "setComputePipelineState:", *(_QWORD *)(a1 + v22));
        LOBYTE(v41[0]) = 23;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v19, 0x17u);
        v23 = *(_QWORD *)(v19[24]
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v19 + 23, (unsigned __int8 *)v41)+ 24);
        LOBYTE(v41[0]) = 23;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v19, 0x17u);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", v23, *(unsigned int *)(v19[24]+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v19 + 23, (unsigned __int8 *)v41)+ 16), 0);
        LOBYTE(v41[0]) = 0;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v19, 0);
        v24 = *(_QWORD *)(v19[8]
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v19 + 7, (unsigned __int8 *)v41)+ 24);
        LOBYTE(v41[0]) = 0;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v19, 0);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", v24, *(unsigned int *)(v19[8]+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v19 + 7, (unsigned __int8 *)v41)+ 16), 1);
        LOBYTE(v41[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v19, 1u);
        v25 = *(_QWORD *)(v19[8]
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v19 + 7, (unsigned __int8 *)v41)+ 24);
        LOBYTE(v41[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v19, 1u);
        v11 = v31;
        v26 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v19 + 7, (unsigned __int8 *)v41);
        v27 = v19[8];
        v8 = v32;
        v28 = v25;
        v4 = v34;
        objc_msgSend(*this, "setBuffer:offset:atIndex:", v28, *(unsigned int *)(v27 + 32 * v26 + 16), 2);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", **(_QWORD **)(v16 + 32), *(unsigned int *)(*(_QWORD *)(v16 + 32) + 8), 3);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", **(_QWORD **)(v16 + 40), *(unsigned int *)(*(_QWORD *)(v16 + 40) + 8), 4);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", **(_QWORD **)(v15 + v9 + 48), *(unsigned int *)(*(_QWORD *)(v15 + v9 + 48) + 8), 5);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v15 + v9 + 16), *(unsigned int *)(v15 + v9 + 8), 6);
        a2 = v33;
        v29 = *this;
        *(_QWORD *)&v41[0] = v37;
        *(int64x2_t *)((char *)v41 + 8) = vdupq_n_s64(1uLL);
        *(_QWORD *)v38 = v36;
        *(_OWORD *)&v38[8] = *(_OWORD *)((char *)v41 + 8);
        objc_msgSend(v29, "dispatchThreadgroups:threadsPerThreadgroup:", v41, v38);
      }
      ++v10;
      v9 += 56;
    }
    while (v8 != v10);
  }
  return objc_msgSend(*this, "popDebugGroup");
}

uint64_t re::TensionDeformer::deformCPU(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  id **v14;
  uint64_t v15;
  uint64_t v16;
  id **v17;
  uint64_t v18;
  uint64_t v19;
  id **v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  float32x4_t v44;
  float32x4_t v45;
  uint64_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int16 *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  float32x4_t v63;
  unsigned int v64;
  float32x4_t v65;
  uint64_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  id *v71;
  char *v72;
  uint64_t v73;
  id *v74;
  id v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  float v81;
  int *v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  unint64_t v86;
  id *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int *v97;
  uint64_t v98;
  unint64_t v99;
  float v100;
  uint64_t result;
  unint64_t v104;
  uint64_t v105;
  id **v106;
  uint64_t v107;
  uint64_t v108;
  id **v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  float32x4_t v113;
  float32x4_t v114;
  _QWORD *v115;
  float32x4_t v116;
  float32x4_t v117;
  uint64_t (*v118)(uint64_t, _QWORD);
  __int16 v119;
  int v120;
  uint64_t v121;
  unint64_t v122;
  int *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  int *v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  const char *v133;
  __int16 v134;
  int v135;
  __int16 v136;
  unint64_t v137;
  __int16 v138;
  int *v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  v3 = *a3;
  v130 = 0;
  v127 = 0;
  v128 = 0;
  v125 = 0;
  v126 = 0;
  v129 = 0;
  v122 = 0;
  v123 = 0;
  v121 = 0;
  v124 = 0;
  v4 = *(_QWORD *)(v3 + 48);
  if (!v4)
    goto LABEL_53;
  v5 = a3;
  v6 = a2;
  v7 = 0;
  v8 = v3 + 8;
  v104 = v3 + 8;
  v105 = *(_QWORD *)(v3 + 48);
  do
  {
    v9 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v8, v7);
    v11 = *(int **)(v6 + 8);
    if ((unint64_t)v11 <= v7)
      goto LABEL_66;
    v12 = *(_QWORD *)(v6 + 16);
    v13 = v12 + 56 * v7;
    v15 = *(_QWORD *)(v13 + 32);
    v14 = (id **)(v13 + 32);
    if (v15)
    {
      v16 = v12 + 56 * v7;
      v18 = *(_QWORD *)(v16 + 40);
      v17 = (id **)(v16 + 40);
      if (v18)
      {
        v19 = v12 + 56 * v7;
        v21 = *(_QWORD *)(v19 + 48);
        v20 = (id **)(v19 + 48);
        if (v21)
        {
          v22 = *(_QWORD *)(v9 + 8);
          v23 = v5[6];
          if (v23 <= v22)
            goto LABEL_67;
          v109 = v17;
          v108 = *(_QWORD *)(v9 + 8);
          v106 = v20;
          v107 = v5[5];
          v24 = (_QWORD *)(v107 + 312 * v22);
          v25 = *(_QWORD *)(v12 + 56 * v7 + 24);
          LOBYTE(v140) = 1;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v24, 1u);
          v115 = v24 + 7;
          v26 = v24 + 8;
          v112 = *(_DWORD *)(v24[8]
                           + 32
                           * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v24 + 7, (unsigned __int8 *)&v140)+ 20);
          LOBYTE(v140) = 1;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v24, 1u);
          v111 = *(unsigned __int16 *)(v24[16]
                                     + 20
                                     * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v24 + 15, (unsigned __int8 *)&v140)+ 4);
          LOBYTE(v140) = 1;
          v110 = (uint64_t)v24;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v24, 1u);
          v27 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v24 + 15, (unsigned __int8 *)&v140);
          v28 = v24[16];
          v118 = 0;
          v119 = 0;
          v120 = 0;
          re::VertexUnpacker::setVertexFormat((uint64_t)&v118, (const VertexBufferFormat *)(v28 + 20 * v27 + 4));
          v128 = 0;
          ++v129;
          if (v127 < v25 / 3)
            re::DynamicArray<int>::setCapacity(&v126, v25 / 3);
          v29 = v112 / v111;
          v123 = 0;
          ++v124;
          if (v122 < v29)
            re::DynamicArray<int>::setCapacity(&v121, v112 / v111);
          LOBYTE(v140) = 1;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v24, 1u);
          v30 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v115, (unsigned __int8 *)&v140);
          v31 = *(_QWORD *)(*v26 + 32 * v30 + 8) + *(unsigned int *)(*v26 + 32 * v30 + 16);
          LOBYTE(v140) = 0;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v24, 0);
          if (*(_BYTE *)(v24[16]
                        + 20
                        * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v24 + 15, (unsigned __int8 *)&v140)+ 16) == 36)
          {
            LOBYTE(v140) = 0;
            re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v24, 0);
            v32 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v115, (unsigned __int8 *)&v140);
            if (v25)
            {
              v11 = 0;
              v34 = *v26 + 32 * v32;
              v8 = (unint64_t)*(unsigned int *)(v34 + 20) >> 2;
              v35 = (unsigned int *)(*(_QWORD *)(v34 + 8) + *(unsigned int *)(v34 + 16) + 4);
              while ((unint64_t)v11 < v8)
              {
                v36 = v118(v31, *(v35 - 1));
                v38 = (char *)v11 + 1;
                if ((unint64_t)v11 + 1 >= v8)
                  goto LABEL_62;
                v39 = v36;
                v40 = v37;
                v41 = v118(v31, *v35);
                v43 = (char *)v11 + 2;
                if ((unint64_t)v11 + 2 >= v8)
                  goto LABEL_64;
                v44.i64[0] = v39;
                v44.i64[1] = v40;
                v116 = v44;
                v44.i64[0] = v41;
                v44.i64[1] = v42;
                v113 = v44;
                v45.i64[0] = v118(v31, v35[1]);
                v45.i64[1] = v46;
                v47 = vsubq_f32(v113, v116);
                v48 = vsubq_f32(v45, v116);
                v49 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v48, (int32x4_t)v48), (int8x16_t)v48, 0xCuLL), vnegq_f32(v47)), v48, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v47, (int32x4_t)v47), (int8x16_t)v47, 0xCuLL));
                v50 = vmulq_f32(v49, v49);
                *(float *)&v140 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), v50)).f32[0])* 0.5;
                re::DynamicArray<float>::add((_anonymous_namespace_ *)&v126, (float *)&v140);
                v11 = (int *)((char *)v11 + 3);
                v35 += 3;
                if ((unint64_t)v11 >= v25)
                  goto LABEL_26;
              }
              goto LABEL_60;
            }
          }
          else
          {
            LOBYTE(v140) = 0;
            re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v24, 0);
            v51 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v115, (unsigned __int8 *)&v140);
            if (v25)
            {
              v11 = 0;
              v53 = *v26 + 32 * v51;
              v8 = (unint64_t)*(unsigned int *)(v53 + 20) >> 1;
              v54 = (unsigned __int16 *)(*(_QWORD *)(v53 + 8) + *(unsigned int *)(v53 + 16) + 4);
              while ((unint64_t)v11 < v8)
              {
                v55 = v118(v31, *(v54 - 2));
                v57 = (char *)v11 + 1;
                if ((unint64_t)v11 + 1 >= v8)
                  goto LABEL_63;
                v58 = v55;
                v59 = v56;
                v60 = v118(v31, *(v54 - 1));
                v62 = (char *)v11 + 2;
                if ((unint64_t)v11 + 2 >= v8)
                  goto LABEL_65;
                v63.i64[0] = v58;
                v63.i64[1] = v59;
                v117 = v63;
                v63.i64[0] = v60;
                v63.i64[1] = v61;
                v114 = v63;
                v64 = *v54;
                v54 += 3;
                v65.i64[0] = v118(v31, v64);
                v65.i64[1] = v66;
                v67 = vsubq_f32(v114, v117);
                v68 = vsubq_f32(v65, v117);
                v69 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v68, (int32x4_t)v68), (int8x16_t)v68, 0xCuLL), vnegq_f32(v67)), v68, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v67, (int32x4_t)v67), (int8x16_t)v67, 0xCuLL));
                v70 = vmulq_f32(v69, v69);
                *(float *)&v140 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v70.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 2), v70)).f32[0])* 0.5;
                re::DynamicArray<float>::add((_anonymous_namespace_ *)&v126, (float *)&v140);
                v11 = (int *)((char *)v11 + 3);
                if ((unint64_t)v11 >= v25)
                  goto LABEL_26;
              }
              goto LABEL_61;
            }
          }
LABEL_26:
          v71 = *v14;
          v72 = (char *)objc_msgSend(**v14, sel_contents);
          v73 = *((unsigned int *)v71 + 2);
          v74 = *v109;
          v75 = objc_msgSend(**v109, sel_contents);
          if (v112 >= v111)
          {
            v76 = 0;
            v77 = &v72[v73];
            v8 = (unint64_t)v75 + *((unsigned int *)v74 + 2);
            if (v29 <= 1)
              v78 = 1;
            else
              v78 = v112 / v111;
            while (1)
            {
              v79 = v76 ? *(_DWORD *)(v8 + 4 * v76 - 4) : 0;
              v80 = *(int *)(v8 + 4 * v76);
              v81 = 0.0;
              if ((int)v80 > v79)
                break;
LABEL_37:
              *(float *)&v140 = v81 / (float)(v80 - v79);
              re::DynamicArray<float>::add((_anonymous_namespace_ *)&v121, (float *)&v140);
              if (++v76 == v78)
                goto LABEL_38;
            }
            v82 = v128;
            v83 = v80 - v79;
            v84 = &v77[4 * v79];
            while (1)
            {
              v86 = *(int *)v84;
              v84 += 4;
              v85 = v86;
              if ((unint64_t)v128 <= v86)
                break;
              v81 = v81 + *(float *)(v130 + 4 * v85);
              if (!--v83)
                goto LABEL_37;
            }
            v131 = 0;
            v97 = &v132;
            v143 = 0u;
            v144 = 0u;
            v141 = 0u;
            v142 = 0u;
            v140 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v132 = 136315906;
            v133 = "operator[]";
            v134 = 1024;
            v135 = 789;
            v136 = 2048;
            v137 = v85;
            v138 = 2048;
            v139 = v82;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_58;
          }
LABEL_38:
          v87 = *v106;
          v88 = (char *)objc_msgSend(**v106, sel_contents);
          v89 = *((unsigned int *)v87 + 2);
          LOBYTE(v140) = 23;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized(v110, 0x17u);
          v11 = (int *)(v107 + 312 * v108);
          v90 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)v11 + 23, (unsigned __int8 *)&v140);
          v8 = v104;
          v4 = v105;
          if (v112 >= v111)
          {
            v92 = 0;
            v93 = &v88[v89];
            v94 = *((_QWORD *)v11 + 24) + 32 * v90;
            v95 = *(_QWORD *)(v94 + 8) + *(unsigned int *)(v94 + 16);
            v96 = (unint64_t)*(unsigned int *)(v94 + 20) >> 2;
            v97 = v123;
            v98 = v125;
            v99 = v112 / v111;
            if (v99 <= 1)
              v99 = 1;
            while (v97 != v92)
            {
              if ((int *)v96 == v92)
                goto LABEL_59;
              v100 = (float)(*(float *)&v93[4 * (_QWORD)v92] - *(float *)(v98 + 4 * (_QWORD)v92))
                   / *(float *)&v93[4 * (_QWORD)v92];
              if (v100 > 1.0)
                v100 = 1.0;
              if (v100 < -1.0)
                v100 = -1.0;
              *(float *)(v95 + 4 * (_QWORD)v92) = v100;
              v92 = (int *)((char *)v92 + 1);
              if ((int *)v99 == v92)
                goto LABEL_48;
            }
LABEL_58:
            v131 = 0;
            v11 = &v132;
            v143 = 0u;
            v144 = 0u;
            v141 = 0u;
            v142 = 0u;
            v140 = 0u;
            v7 = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v132 = 136315906;
            v133 = "operator[]";
            v134 = 1024;
            v135 = 789;
            v136 = 2048;
            v137 = (unint64_t)v97;
            v138 = 2048;
            v139 = v97;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_59:
            re::internal::assertLog((re::internal *)6, v91, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v96, v96);
            _os_crash();
            __break(1u);
LABEL_60:
            re::internal::assertLog((re::internal *)6, v33, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v11, v8);
            _os_crash();
            __break(1u);
LABEL_61:
            re::internal::assertLog((re::internal *)6, v52, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v11, v8);
            _os_crash();
            __break(1u);
LABEL_62:
            re::internal::assertLog((re::internal *)6, v37, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v38, v8);
            _os_crash();
            __break(1u);
LABEL_63:
            re::internal::assertLog((re::internal *)6, v56, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v57, v8);
            _os_crash();
            __break(1u);
LABEL_64:
            re::internal::assertLog((re::internal *)6, v42, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v43, v8);
            _os_crash();
            __break(1u);
LABEL_65:
            re::internal::assertLog((re::internal *)6, v61, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v62, v8);
            _os_crash();
            __break(1u);
LABEL_66:
            v118 = 0;
            v143 = 0u;
            v144 = 0u;
            v141 = 0u;
            v142 = 0u;
            v140 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v132 = 136315906;
            v133 = "operator[]";
            v134 = 1024;
            v135 = 468;
            v136 = 2048;
            v137 = v7;
            v138 = 2048;
            v139 = v11;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_67:
            re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v22, v23);
            _os_crash();
            __break(1u);
          }
LABEL_48:
          v6 = a2;
          v5 = a3;
        }
      }
    }
    ++v7;
  }
  while (v7 != v4);
  if (v121 && v125)
    (*(void (**)(void))(*(_QWORD *)v121 + 40))();
LABEL_53:
  result = v126;
  if (v126)
  {
    if (v130)
      return (*(uint64_t (**)(void))(*(_QWORD *)v126 + 40))();
  }
  return result;
}

void re::TensionDeformer::~TensionDeformer(re::TensionDeformer *this)
{
  uint64_t i;
  void *v3;

  for (i = 24; i != 8; i -= 8)
  {
    v3 = *(void **)((char *)this + i);
    if (v3)
    {

      *(_QWORD *)((char *)this + i) = 0;
    }
  }
}

{
  uint64_t v2;
  void *v3;

  v2 = 24;
  while (1)
  {
    v3 = *(void **)((char *)this + v2);
    if (v3)
    {

      *(_QWORD *)((char *)this + v2) = 0;
    }
    v2 -= 8;
    if (v2 == 8)
      JUMPOUT(0x2276933B8);
  }
}

void re::internal::Callable<re::TensionDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::TensionDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t result;

  v2 = *a2;
  result = **a2;
  if (result)
  {
    if (v2[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v2[2]);
      v2[1] = 0;
      v2[2] = 0;
    }
    *v2 = 0;
  }
  return result;
}

_QWORD *re::internal::Callable<re::TensionDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED77F68;
  return result;
}

_QWORD *re::internal::Callable<re::TensionDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED77F68;
  return result;
}

uint64_t re::internal::Callable<re::TensionDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::size()
{
  return 16;
}

uint64_t re::VertexUnpacker::setVertexFormat(uint64_t this, const VertexBufferFormat *a2)
{
  unsigned int v2;
  int v3;
  void *v4;

  *(_WORD *)(this + 8) = *(_WORD *)a2;
  v2 = *((unsigned __int8 *)a2 + 12);
  if (v2 > 0x19)
  {
    if (v2 == 26)
    {
      v3 = 1;
      v4 = re::VertexUnpacker::unpackHalf3Data;
      goto LABEL_10;
    }
    if (v2 == 30)
    {
      v3 = 0;
      v4 = re::VertexUnpacker::unpackFloat3Data;
      goto LABEL_10;
    }
  }
  else
  {
    if (v2 == 8)
    {
      v3 = 2;
      v4 = re::VertexUnpacker::unpackUChar3NormalizedData;
      goto LABEL_10;
    }
    if (v2 == 11)
    {
      v3 = 3;
      v4 = re::VertexUnpacker::unpackChar3NormalizedData;
LABEL_10:
      *(_QWORD *)this = v4;
      *(_DWORD *)(this + 12) = v3;
      return this;
    }
  }
  re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Unsupported format", "!\"Unreachable code\"", "setVertexFormat", 35);
  this = _os_crash();
  __break(1u);
  return this;
}

double re::VertexUnpacker::unpackHalf3Data(re::VertexUnpacker *this, const void *a2, float16x4_t a3)
{
  char *v3;
  double result;

  v3 = (char *)this + 8 * (_QWORD)a2;
  a3.i32[0] = *(_DWORD *)v3;
  *(_QWORD *)&result = vcvtq_f32_f16(a3).u64[0];
  _H1 = *((_WORD *)v3 + 2);
  __asm { FCVT            S1, H1 }
  return result;
}

int8x8_t re::VertexUnpacker::unpackChar3NormalizedData(re::VertexUnpacker *this, const void *a2)
{
  char *v2;
  int32x2_t v3;
  float32x2_t v4;

  v2 = (char *)this + 4 * (_QWORD)a2;
  v3.i32[0] = *v2;
  v3.i32[1] = v2[1];
  v4 = vdiv_f32(vcvt_f32_s32(v3), (float32x2_t)vdup_n_s32(0x42FE0000u));
  __asm { FMOV            V1.2S, #1.0 }
  return vbsl_s8((int8x8_t)vcgt_f32(v4, _D1), (int8x8_t)_D1, (int8x8_t)v4);
}

float32x2_t re::VertexUnpacker::unpackUChar3NormalizedData(re::VertexUnpacker *this, const void *a2)
{
  unsigned __int8 *v2;
  uint32x2_t v3;

  v2 = (unsigned __int8 *)this + 4 * (_QWORD)a2;
  v3.i32[0] = *v2;
  v3.i32[1] = v2[1];
  return vdiv_f32(vcvt_f32_u32(v3), (float32x2_t)vdup_n_s32(0x437F0000u));
}

uint64_t re::VertexUnpacker::unpackFloat3Data(re::VertexUnpacker *this, const void *a2)
{
  return *(_QWORD *)((char *)this + 12 * (_QWORD)a2);
}

int32x2_t re::FrameContext::perFrameAlloc@<D0>(re::FrameContext *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  id v12;
  int32x2_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;

  v4 = a2;
  v7 = *((_QWORD *)this + 7);
  if (v7)
  {
    v8 = 0;
    if (a3 <= 0x10)
      v9 = 16;
    else
      v9 = a3;
    v10 = (v9 + *(_QWORD *)(*(_QWORD *)v7 + 40) - 1) & -v9;
    if ((int64_t)(v10 + a2) <= *(_QWORD *)(*(_QWORD *)v7 + 48))
    {
      *(_QWORD *)(*(_QWORD *)v7 + 40) = v10 + a2;
      v8 = v10;
    }
    v11 = v8 - *(_DWORD *)(v7 + 16);
    v12 = objc_msgSend(*(id *)(v7 + 8), sel_contents);
    v14 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
    *(_QWORD *)a4 = v12;
    *(_DWORD *)(a4 + 8) = v11;
    *(_DWORD *)(a4 + 12) = v4;
    *(_QWORD *)(a4 + 16) = v14;
  }
  else
  {
    re::PerFrameAllocatorGPU::allocInternal(*((re::PerFrameAllocatorGPU **)this + 2), a2, a3, 0, &v16);
    v15 = *v18;
    *(_QWORD *)a4 = v16;
    result = vmovn_s64(v17);
    *(int32x2_t *)(a4 + 8) = result;
    *(_QWORD *)(a4 + 16) = v15;
  }
  return result;
}

int32x2_t re::FrameContext::perFrameAllocTail@<D0>(re::FrameContext *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int64_t v10;
  int v11;
  id v12;
  int32x2_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;

  if (a2)
  {
    v5 = a2;
    v7 = *((_QWORD *)this + 7);
    if (v7)
    {
      v8 = 0;
      if (a3 <= 0x10)
        v9 = 16;
      else
        v9 = a3;
      v10 = (*(_QWORD *)(*(_QWORD *)v7 + 48) - a2) & -v9;
      if (*(_QWORD *)(*(_QWORD *)v7 + 40) <= v10)
      {
        *(_QWORD *)(*(_QWORD *)v7 + 48) = v10;
        v8 = v10;
      }
      v11 = v8 - *(_DWORD *)(v7 + 16);
      v12 = objc_msgSend(*(id *)(v7 + 8), sel_contents);
      v14 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
      *(_QWORD *)a4 = v12;
      *(_DWORD *)(a4 + 8) = v11;
      *(_DWORD *)(a4 + 12) = v5;
      *(_QWORD *)(a4 + 16) = v14;
    }
    else
    {
      re::PerFrameAllocatorGPU::allocInternal(*((re::PerFrameAllocatorGPU **)this + 2), a2, a3, 0, &v16);
      v15 = *v18;
      *(_QWORD *)a4 = v16;
      result = vmovn_s64(v17);
      *(int32x2_t *)(a4 + 8) = result;
      *(_QWORD *)(a4 + 16) = v15;
    }
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  return result;
}

double re::LateLatchingManager::processLateLatchAnchorPose(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  simd_float4x4 *v6;
  double result;
  simd_float4x4 *v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  simd_float4 v14;
  simd_float4 v15;
  simd_float4 v16;
  uint64_t v17;
  simd_float4x4 v18;
  _OWORD v19[4];
  simd_float4x4 v20;

  v17 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 4376) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL;
  v5 = 3;
  while (*(_QWORD *)(a1 + 1440) != v4)
  {
    a1 += 1456;
    if (!--v5)
      return result;
  }
  v6 = (simd_float4x4 *)re::SmallHashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::tryGet(a1, &v17);
  if (v6)
  {
    v8 = v6;
    v20 = __invert_f4(*v6);
    v9 = 0;
    v10 = *a3;
    v11 = a3[1];
    v12 = a3[2];
    v13 = a3[3];
    v18 = v20;
    do
    {
      v19[v9] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, COERCE_FLOAT(*(_OWORD *)&v18.columns[v9])), v11, *(float32x2_t *)v18.columns[v9].f32, 1), v12, (float32x4_t)v18.columns[v9], 2), v13, (float32x4_t)v18.columns[v9], 3);
      ++v9;
    }
    while (v9 != 4);
    result = *(double *)v19;
    v14 = (simd_float4)v19[1];
    v15 = (simd_float4)v19[2];
    v16 = (simd_float4)v19[3];
    v8[1].columns[0] = (simd_float4)v19[0];
    v8[1].columns[1] = v14;
    v8[1].columns[2] = v15;
    v8[1].columns[3] = v16;
  }
  return result;
}

uint64_t re::SmallHashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  if (*(_DWORD *)(a1 + 1212))
    return re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(a1 + 1184, a2);
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return 0;
  result = a1 + 48;
  v4 = 144 * v3;
  while (*(_QWORD *)(result - 16) != *a2)
  {
    result += 144;
    v4 -= 144;
    if (!v4)
      return 0;
  }
  return result;
}

uint64_t re::LateLatchingManager::trackAnchorPose(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  os_unfair_lock_s *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t os_unfair_lock_opaque;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  unsigned __int8 v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_unfair_lock_s *v33;
  uint64_t v34;
  int v35;
  os_unfair_lock_s *v36;
  os_unfair_lock_s *v37;
  os_unfair_lock_s *v38;
  unsigned __int8 *v39;
  __int128 v40;
  __int128 v41;
  uint64_t result;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;

  v8 = a1 + 1092;
  os_unfair_lock_lock(a1 + 1092);
  v10 = 0;
  v11 = 0;
  v12 = -1;
  v13 = (uint64_t)a1;
  do
  {
    v14 = *(_QWORD *)(v13 + 1440);
    if (v14 == a3)
    {
      v51 = a2;
      if (!re::SmallHashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::containsKey(v13, (uint64_t *)&v51))
      {
        v25 = a4[1];
        v43 = *a4;
        v44 = v25;
        v26 = a4[3];
        v45 = a4[2];
        v46 = v26;
        v47 = xmmword_2260E5F10;
        v48 = xmmword_2260E5F20;
        v49 = xmmword_2260E5F40;
        v50 = xmmword_2260E5D70;
        re::SmallHashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::add(v13, (uint64_t *)&v51, &v43);
        if (*(_DWORD *)(v13 + 1212))
          v27 = *(_DWORD *)(v13 + 1212);
        else
          v27 = *(_DWORD *)(v13 + 16);
        LOBYTE(v43) = v27;
        v28 = v13 + 1232;
        goto LABEL_41;
      }
      v23 = v13 + 1232;
      v24 = v51;
LABEL_35:
      v39 = (unsigned __int8 *)re::SmallHashTable<unsigned long long,unsigned char,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::tryGet(v23, v24);
      if (v39)
        v27 = *v39;
      else
        v27 = 0;
LABEL_43:
      os_unfair_lock_unlock(v8);
      return v27;
    }
    if (v14 < v12)
    {
      v11 = v10;
      v12 = *(_QWORD *)(v13 + 1440);
    }
    ++v10;
    v13 += 1456;
  }
  while (v10 != 3);
  if (v11 < 3)
  {
    v15 = &a1[364 * v11];
    *(_QWORD *)&v15[360]._os_unfair_lock_opaque = a3;
    if (v15[303]._os_unfair_lock_opaque)
    {
      os_unfair_lock_opaque = v15[302]._os_unfair_lock_opaque;
      if ((_DWORD)os_unfair_lock_opaque)
        memset_pattern16(*(void **)&v15[298]._os_unfair_lock_opaque, &unk_2260EB7B0, 4 * os_unfair_lock_opaque);
      v17 = v15[304]._os_unfair_lock_opaque;
      if ((_DWORD)v17)
      {
        v18 = 0;
        v19 = 144 * v17;
        do
        {
          v20 = *(_QWORD *)&v15[300]._os_unfair_lock_opaque;
          v21 = *(_DWORD *)(v20 + v18);
          if (v21 < 0)
            *(_DWORD *)(v20 + v18) = v21 & 0x7FFFFFFF;
          v18 += 144;
        }
        while (v19 != v18);
      }
      v15[305]._os_unfair_lock_opaque = 0x7FFFFFFF;
      *(_QWORD *)&v15[303]._os_unfair_lock_opaque = 0;
      v22 = v15 + 306;
    }
    else
    {
      *(_QWORD *)&v15[4]._os_unfair_lock_opaque = 0;
      v22 = v15 + 6;
    }
    ++v22->_os_unfair_lock_opaque;
    v29 = &a1[364 * v11];
    if (v29[355]._os_unfair_lock_opaque)
    {
      v30 = a1[364 * v11 + 354]._os_unfair_lock_opaque;
      if ((_DWORD)v30)
        memset_pattern16(*(void **)&a1[364 * v11 + 350]._os_unfair_lock_opaque, &unk_2260EB7B0, 4 * v30);
      v31 = a1[364 * v11 + 356]._os_unfair_lock_opaque;
      if ((_DWORD)v31)
      {
        v32 = 0;
        v33 = &a1[364 * v11 + 352];
        v34 = 24 * v31;
        do
        {
          v35 = *(_DWORD *)(*(_QWORD *)&v33->_os_unfair_lock_opaque + v32);
          if (v35 < 0)
            *(_DWORD *)(*(_QWORD *)&v33->_os_unfair_lock_opaque + v32) = v35 & 0x7FFFFFFF;
          v32 += 24;
        }
        while (v34 != v32);
      }
      v36 = &a1[364 * v11];
      v36[357]._os_unfair_lock_opaque = 0x7FFFFFFF;
      *(_QWORD *)&v29[355]._os_unfair_lock_opaque = 0;
      v37 = v36 + 358;
    }
    else
    {
      v38 = &a1[364 * v11];
      *(_QWORD *)&v38[312]._os_unfair_lock_opaque = 0;
      v37 = v38 + 314;
    }
    ++v37->_os_unfair_lock_opaque;
    v51 = a2;
    if (re::SmallHashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::containsKey((uint64_t)&a1[364 * v11], (uint64_t *)&v51))
    {
      v24 = v51;
      v23 = (uint64_t)&v29[308];
      goto LABEL_35;
    }
    v40 = a4[1];
    v43 = *a4;
    v44 = v40;
    v41 = a4[3];
    v45 = a4[2];
    v46 = v41;
    v47 = xmmword_2260E5F10;
    v48 = xmmword_2260E5F20;
    v49 = xmmword_2260E5F40;
    v50 = xmmword_2260E5D70;
    re::SmallHashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::add((uint64_t)&a1[364 * v11], (uint64_t *)&v51, &v43);
    if (v15[303]._os_unfair_lock_opaque)
      v27 = v15[303]._os_unfair_lock_opaque;
    else
      v27 = v15[4]._os_unfair_lock_opaque;
    LOBYTE(v43) = v27;
    v28 = (uint64_t)&v29[308];
LABEL_41:
    re::SmallHashTable<unsigned long long,unsigned char,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::add(v28, (uint64_t *)&v51, (char *)&v43);
    goto LABEL_43;
  }
  re::internal::assertLog((re::internal *)6, v9, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v11, 3);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::LateLatchingManager::getLateLatchPoseCorrections(os_unfair_lock_s *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  os_unfair_lock_s *v5;
  _anonymous_namespace_ *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint32_t os_unfair_lock_opaque;
  uint64_t v12;
  int *v13;
  int v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  __int128 *v28;
  unint64_t v29;
  uint64_t v30;
  int os_unfair_lock_opaque_low;
  uint64_t *v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint32_t v43;
  BOOL v44;
  __int128 *v45;
  uint64_t v46;
  os_unfair_lock_s *v47;
  uint64_t v48;
  os_unfair_lock_s *lock;
  _QWORD *v50;
  _BYTE v51[79];

  v5 = this;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_OWORD *)(a3 + 672) = 0u;
  *(_OWORD *)(a3 + 688) = 0u;
  *(_DWORD *)(a3 + 704) = 0;
  v50 = (_QWORD *)(a3 + 672);
  *(_QWORD *)(a3 + 708) = 0x7FFFFFFFLL;
  lock = this + 1092;
  os_unfair_lock_lock(this + 1092);
  v9 = v5 + 296;
  v10 = 3;
  while (*(_QWORD *)&v9[64]._os_unfair_lock_opaque != a2)
  {
    v9 += 364;
    if (!--v10)
      goto LABEL_69;
  }
  os_unfair_lock_opaque = v9[7]._os_unfair_lock_opaque;
  if (os_unfair_lock_opaque)
  {
    v5 = (os_unfair_lock_s *)v9[8]._os_unfair_lock_opaque;
    if ((_DWORD)v5)
    {
      v12 = 0;
      v13 = *(int **)&v9[4]._os_unfair_lock_opaque;
      while (1)
      {
        v14 = *v13;
        v13 += 36;
        if (v14 < 0)
          break;
        if (v5 == (os_unfair_lock_s *)++v12)
        {
          LODWORD(v12) = v9[8];
          break;
        }
      }
      v3 = v12;
    }
    else
    {
      v3 = 0;
    }
    v15 = v9;
    v16 = (uint64_t)v9;
  }
  else
  {
    v15 = v9 - 288;
    v16 = (uint64_t)&v9[36 * *(_QWORD *)&v9[-292]._os_unfair_lock_opaque - 288];
  }
  v17 = v15 == (os_unfair_lock_s *)v16;
  if (os_unfair_lock_opaque)
    v17 = (_DWORD)v5 == v3;
  if (v17)
  {
LABEL_69:
    os_unfair_lock_unlock(lock);
    return;
  }
  v48 = a3 + 32;
  while (1)
  {
    if (os_unfair_lock_opaque)
    {
      v18 = *(_QWORD *)&v15[4]._os_unfair_lock_opaque + 144 * v3;
      v19 = (os_unfair_lock_s *)(v18 + 8);
      v20 = v18 + 16;
    }
    else
    {
      v20 = (uint64_t)&v15[4];
      v19 = v15;
    }
    v21 = *(_QWORD *)&v19->_os_unfair_lock_opaque;
    if (v9[59]._os_unfair_lock_opaque)
      break;
    v25 = *(_QWORD *)&v9[16]._os_unfair_lock_opaque;
    if (v25)
    {
      v26 = 16 * v25;
      v27 = v9 + 22;
      while (*(_QWORD *)&v27[-2]._os_unfair_lock_opaque != v21)
      {
        v27 += 4;
        v26 -= 16;
        if (!v26)
          goto LABEL_60;
      }
      goto LABEL_35;
    }
LABEL_60:
    if (os_unfair_lock_opaque)
    {
      v43 = v3 + 1;
      do
      {
        v3 = v43;
        if (v43 >= v15[8]._os_unfair_lock_opaque)
          break;
        ++v43;
      }
      while ((*(_DWORD *)(*(_QWORD *)&v15[4]._os_unfair_lock_opaque + 144 * v3) & 0x80000000) == 0);
    }
    else
    {
      v15 += 36;
    }
    v44 = v15 == (os_unfair_lock_s *)v16;
    if (os_unfair_lock_opaque)
      v44 = (_DWORD)v5 == v3;
    if (v44)
      goto LABEL_69;
  }
  if (!*(_QWORD *)&v9[52]._os_unfair_lock_opaque)
    goto LABEL_60;
  v22 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v21 ^ (v21 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v21 ^ (v21 >> 30))) >> 27));
  v23 = *(unsigned int *)(*(_QWORD *)&v9[54]._os_unfair_lock_opaque
                        + 4 * ((v22 ^ (v22 >> 31)) % v9[58]._os_unfair_lock_opaque));
  if ((_DWORD)v23 == 0x7FFFFFFF)
    goto LABEL_60;
  v24 = *(_QWORD *)&v9[56]._os_unfair_lock_opaque;
  while (*(_QWORD *)(v24 + 24 * v23 + 8) != v21)
  {
    LODWORD(v23) = *(_DWORD *)(v24 + 24 * v23) & 0x7FFFFFFF;
    if ((_DWORD)v23 == 0x7FFFFFFF)
      goto LABEL_60;
  }
  v27 = (os_unfair_lock_s *)(v24 + 24 * v23 + 16);
LABEL_35:
  v28 = (__int128 *)(v20 + 64);
  if (*(_DWORD *)(a3 + 700))
  {
LABEL_36:
    re::HashTable<unsigned char,re::Matrix4x4<float>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,false,false>::add((uint64_t)v50, v27, v28);
    goto LABEL_60;
  }
  v29 = *(_QWORD *)(a3 + 16);
  if (!v29)
  {
    LOBYTE(os_unfair_lock_opaque_low) = v27->_os_unfair_lock_opaque;
    *(_OWORD *)&v51[15] = *v28;
    *(_OWORD *)&v51[31] = v28[1];
    *(_OWORD *)&v51[47] = v28[2];
    *(_OWORD *)&v51[63] = v28[3];
    goto LABEL_59;
  }
  v30 = 0;
  os_unfair_lock_opaque_low = LOBYTE(v27->_os_unfair_lock_opaque);
  do
  {
    if (*(unsigned __int8 *)(a3 + v30 + 32) == os_unfair_lock_opaque_low)
      goto LABEL_60;
    v30 += 80;
  }
  while (80 * v29 != v30);
  if ((v29 & 0xFFFFFFF8) != 0)
  {
    v45 = v28;
    v46 = v16;
    v47 = v5;
    if (!*v50)
    {
      v32 = *(uint64_t **)a3;
      if (!*(_QWORD *)a3)
      {
      }
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v50, (uint64_t)v32, 16);
      v29 = *(_QWORD *)(a3 + 16);
      if (!v29)
      {
LABEL_56:
        *(_QWORD *)(a3 + 16) = 0;
        ++*(_DWORD *)(a3 + 24);
        v16 = v46;
        v5 = v47;
        v28 = v45;
        goto LABEL_36;
      }
    }
    v33 = (_BYTE *)(a3 + 32);
    v34 = (_BYTE *)(v48 + 80 * v29);
    while (1)
    {
      v35 = *v33;
      v36 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v35) ^ ((0xBF58476D1CE4E5B9 * v35) >> 27));
      v37 = v36 ^ (v36 >> 31);
      if (*v50)
      {
        v38 = v37 % *(unsigned int *)(a3 + 696);
        v39 = *(unsigned int *)(*(_QWORD *)(a3 + 680) + 4 * v38);
        if ((_DWORD)v39 != 0x7FFFFFFF)
        {
          v40 = *(_QWORD *)(a3 + 688);
          while (*(unsigned __int8 *)(v40 + 80 * v39 + 4) != (_DWORD)v35)
          {
            LODWORD(v39) = *(_DWORD *)(v40 + 80 * v39) & 0x7FFFFFFF;
            if ((_DWORD)v39 == 0x7FFFFFFF)
              goto LABEL_54;
          }
          goto LABEL_55;
        }
      }
      else
      {
        LODWORD(v38) = 0;
      }
LABEL_54:
      re::HashTable<unsigned char,re::Matrix4x4<float>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,false,false>::addAsMove((uint64_t)v50, v38, v37, v33, (uint64_t)(v33 + 16));
      ++*(_DWORD *)(a3 + 712);
LABEL_55:
      v33 += 80;
      if (v33 == v34)
        goto LABEL_56;
    }
  }
  *(_OWORD *)&v51[15] = *v28;
  *(_OWORD *)&v51[31] = v28[1];
  *(_OWORD *)&v51[47] = v28[2];
  *(_OWORD *)&v51[63] = v28[3];
  if (v29 < 8)
  {
LABEL_59:
    v41 = v48 + 80 * v29;
    *(_OWORD *)(v41 + 49) = *(_OWORD *)&v51[48];
    *(_OWORD *)(v41 + 64) = *(_OWORD *)&v51[63];
    *(_OWORD *)(v41 + 17) = *(_OWORD *)&v51[16];
    *(_OWORD *)(v41 + 33) = *(_OWORD *)&v51[32];
    *(_BYTE *)v41 = os_unfair_lock_opaque_low;
    *(_OWORD *)(v41 + 1) = *(_OWORD *)v51;
    v42 = *(_QWORD *)(a3 + 16);
    ++*(_DWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 16) = v42 + 1;
    if (v42 == -1)
    {
      re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, -1, 0);
      _os_crash();
      __break(1u);
    }
    goto LABEL_60;
  }
  re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
  _os_crash();
  __break(1u);
}

uint64_t re::LateLatchingManager::isTrackingAnchorId(os_unfair_lock_s *this, uint64_t a2)
{
  re::LateLatchingManager *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = (re::LateLatchingManager *)this;
  v8 = a2;
  v3 = this + 1092;
  os_unfair_lock_lock(this + 1092);
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 547) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL;
  v5 = 3;
  while (*((_QWORD *)v2 + 180) != v4
       || !re::SmallHashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::containsKey((uint64_t)v2, &v8))
  {
    v2 = (re::LateLatchingManager *)((char *)v2 + 1456);
    if (!--v5)
    {
      v6 = 0;
      goto LABEL_7;
    }
  }
  v6 = 1;
LABEL_7:
  os_unfair_lock_unlock(v3);
  return v6;
}

BOOL re::SmallHashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::containsKey(uint64_t a1, uint64_t *a2)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  if (*(_DWORD *)(a1 + 1212))
    return re::HashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::containsKey(a1 + 1184, a2);
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return 0;
  v4 = (uint64_t *)(a1 + 32);
  v5 = *a2;
  v6 = 144 * v3 - 144;
  do
  {
    v7 = *v4;
    v4 += 18;
    result = v7 == v5;
    v8 = v7 == v5 || v6 == 0;
    v6 -= 144;
  }
  while (!v8);
  return result;
}

uint64_t re::SmallHashTable<unsigned long long,unsigned char,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::tryGet(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  if (!*(_DWORD *)(a1 + 188))
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
    {
      result = a1 + 40;
      v7 = 16 * v6;
      while (*(_QWORD *)(result - 8) != a2)
      {
        result += 16;
        v7 -= 16;
        if (!v7)
          return 0;
      }
      return result;
    }
    return 0;
  }
  if (!*(_QWORD *)(a1 + 160))
    return 0;
  v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 168) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 184)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v4 = *(_QWORD *)(a1 + 176);
  if (*(_QWORD *)(v4 + 24 * v3 + 8) != a2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v4 + 24 * v3) & 0x7FFFFFFF;
      if ((_DWORD)v3 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v4 + 24 * v3 + 8) == a2)
        return v4 + 24 * v3 + 16;
    }
    return 0;
  }
  return v4 + 24 * v3 + 16;
}

uint64_t re::SmallHashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::add(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE v15[136];

  v5 = result;
  if (*(_DWORD *)(result + 1212))
  {
    v6 = result + 1184;
    return re::HashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(v6, a2, a3);
  }
  else
  {
    v7 = result + 32;
    v8 = *(_QWORD *)(result + 16);
    if (v8)
    {
      v9 = 0;
      v10 = *a2;
      while (*(_QWORD *)(result + v9 + 32) != v10)
      {
        v9 += 144;
        if (144 * v8 == v9)
        {
          if ((v8 & 0xFFFFFFF8) != 0)
          {
            v6 = result + 1184;
            if (*(_QWORD *)(result + 1184))
              goto LABEL_13;
            v11 = *(uint64_t **)result;
            if (!*(_QWORD *)result)
            {
            }
            re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init(v5 + 1184, (uint64_t)v11, 16);
            v8 = *(_QWORD *)(v5 + 16);
            if (v8)
            {
LABEL_13:
              v12 = v7 + 144 * v8;
              do
              {
                re::HashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(v5 + 1184, (uint64_t *)v7, (__int128 *)(v7 + 16));
                v7 += 144;
              }
              while (v7 != v12);
            }
            *(_QWORD *)(v5 + 16) = 0;
            ++*(_DWORD *)(v5 + 24);
            return re::HashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(v6, a2, a3);
          }
          *(_OWORD *)&v15[72] = a3[4];
          *(_OWORD *)&v15[88] = a3[5];
          *(_OWORD *)&v15[104] = a3[6];
          *(_OWORD *)&v15[120] = a3[7];
          *(_OWORD *)&v15[8] = *a3;
          *(_OWORD *)&v15[24] = a3[1];
          *(_OWORD *)&v15[40] = a3[2];
          *(_OWORD *)&v15[56] = a3[3];
          if (v8 < 8)
            goto LABEL_18;
          re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
          result = _os_crash();
          __break(1u);
          return result;
        }
      }
    }
    else
    {
      *(_OWORD *)&v15[72] = a3[4];
      *(_OWORD *)&v15[88] = a3[5];
      *(_OWORD *)&v15[104] = a3[6];
      *(_OWORD *)&v15[120] = a3[7];
      *(_OWORD *)&v15[8] = *a3;
      *(_OWORD *)&v15[24] = a3[1];
      *(_OWORD *)&v15[40] = a3[2];
      v10 = *a2;
      *(_OWORD *)&v15[56] = a3[3];
LABEL_18:
      v13 = v7 + 144 * v8;
      *(_OWORD *)(v13 + 88) = *(_OWORD *)&v15[80];
      *(_OWORD *)(v13 + 104) = *(_OWORD *)&v15[96];
      *(_OWORD *)(v13 + 120) = *(_OWORD *)&v15[112];
      *(_OWORD *)(v13 + 24) = *(_OWORD *)&v15[16];
      *(_OWORD *)(v13 + 40) = *(_OWORD *)&v15[32];
      *(_OWORD *)(v13 + 56) = *(_OWORD *)&v15[48];
      *(_OWORD *)(v13 + 72) = *(_OWORD *)&v15[64];
      *(_QWORD *)v13 = v10;
      *(_QWORD *)(v13 + 136) = *(_QWORD *)&v15[128];
      *(_OWORD *)(v13 + 8) = *(_OWORD *)v15;
      v14 = *(_QWORD *)(result + 16);
      ++*(_DWORD *)(result + 24);
      *(_QWORD *)(result + 16) = v14 + 1;
      if (v14 == -1)
      {
        re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, -1, 0);
        _os_crash();
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 144 * v13;
    return v12 + 16;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 144 * v10 + 8) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 144 * v10) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 144 * v10;
  return v12 + 16;
}

uint64_t re::HashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, __int128 *a5)
{
  uint64_t v8;
  int v9;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  signed int v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v37[44];

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v8 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v37, 0, 36);
          *(_QWORD *)&v37[36] = 0x7FFFFFFFLL;
          re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)v37, v13, v12);
          v15 = *(_OWORD *)v37;
          *(_OWORD *)v37 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v37[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v37[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v37[24];
          *(_OWORD *)&v37[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v37[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = 0;
            v22 = (_QWORD *)(v17 + 8);
            do
            {
              if ((*(_DWORD *)(v22 - 1) & 0x80000000) != 0)
              {
                v23 = 0xBF58476D1CE4E5B9 * (*v22 ^ (*v22 >> 30));
                v24 = (0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) ^ ((0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) >> 31);
                re::HashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsMove(a1, v24 % *(unsigned int *)(a1 + 24), v24, v22, v22 + 1);
              }
              ++v21;
              v22 += 18;
            }
            while (v21 < v20);
          }
          re::HashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v37);
        }
      }
      else
      {
        if (v12)
          v27 = 2 * v11;
        else
          v27 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v25 = *(_QWORD *)(a1 + 16);
    v26 = *(_DWORD *)(v25 + 144 * v8);
  }
  else
  {
    v25 = *(_QWORD *)(a1 + 16);
    v26 = *(_DWORD *)(v25 + 144 * v8);
    *(_DWORD *)(a1 + 36) = v26 & 0x7FFFFFFF;
  }
  v28 = 144 * v8;
  *(_DWORD *)(v25 + v28) = v26 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v28) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 144 * v8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 144 * v8 + 8) = *a4;
  v29 = (_OWORD *)(*(_QWORD *)(a1 + 16) + 144 * v8);
  v31 = *a5;
  v30 = a5[1];
  v32 = a5[3];
  v29[3] = a5[2];
  v29[4] = v32;
  v34 = a5[6];
  v33 = a5[7];
  v35 = a5[5];
  v29[5] = a5[4];
  v29[6] = v35;
  v29[7] = v34;
  v29[8] = v33;
  v29[1] = v31;
  v29[2] = v30;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

double re::HashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 144 * v3;
      do
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
        v4 += 144;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::SmallHashTable<unsigned long long,unsigned char,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::add(uint64_t result, uint64_t *a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;

  v5 = result;
  if (*(_DWORD *)(result + 188))
  {
    v6 = result + 160;
    return re::HashTable<unsigned long long,unsigned char,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(v6, a2, a3);
  }
  v7 = result + 32;
  v8 = *(_QWORD *)(result + 16);
  v9 = *a2;
  if (!v8)
    goto LABEL_25;
  v10 = 0;
  do
  {
    if (*(_QWORD *)(result + v10 + 32) == v9)
      return result;
    v10 += 16;
  }
  while (16 * v8 != v10);
  if ((v8 & 0xFFFFFFF8) != 0)
  {
    v11 = (_QWORD *)(result + 160);
    if (!*(_QWORD *)(result + 160))
    {
      v12 = *(uint64_t **)result;
      if (!*(_QWORD *)result)
      {
      }
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init(v5 + 160, (uint64_t)v12, 16);
      v8 = *(_QWORD *)(v5 + 16);
      if (!v8)
      {
LABEL_23:
        *(_QWORD *)(v5 + 16) = 0;
        ++*(_DWORD *)(v5 + 24);
        v6 = v5 + 160;
        return re::HashTable<unsigned long long,unsigned char,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(v6, a2, a3);
      }
    }
    v13 = v7 + 16 * v8;
    while (1)
    {
      v14 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)v7 ^ (*(_QWORD *)v7 >> 30));
      v15 = (0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) ^ ((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) >> 31);
      if (*v11)
      {
        v16 = v15 % *(unsigned int *)(v5 + 184);
        v17 = *(unsigned int *)(*(_QWORD *)(v5 + 168) + 4 * v16);
        if ((_DWORD)v17 != 0x7FFFFFFF)
        {
          v18 = *(_QWORD *)(v5 + 176);
          while (*(_QWORD *)(v18 + 24 * v17 + 8) != *(_QWORD *)v7)
          {
            LODWORD(v17) = *(_DWORD *)(v18 + 24 * v17) & 0x7FFFFFFF;
            if ((_DWORD)v17 == 0x7FFFFFFF)
              goto LABEL_21;
          }
          goto LABEL_22;
        }
      }
      else
      {
        LODWORD(v16) = 0;
      }
LABEL_21:
      re::HashTable<unsigned long long,unsigned char,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsMove(v5 + 160, v16, v15, (_QWORD *)v7, (_BYTE *)(v7 + 8));
      ++*(_DWORD *)(v5 + 200);
LABEL_22:
      v7 += 16;
      if (v7 == v13)
        goto LABEL_23;
    }
  }
  if (v8 >= 8)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
    result = _os_crash();
    __break(1u);
  }
  else
  {
LABEL_25:
    v19 = v7 + 16 * v8;
    v20 = *a3;
    *(_QWORD *)v19 = v9;
    *(_BYTE *)(v19 + 8) = v20;
    *(_QWORD *)(result + 16) = v8 + 1;
    ++*(_DWORD *)(result + 24);
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,unsigned char,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  v9 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v9 = v8 % *(unsigned int *)(a1 + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v17 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(v17 + 24 * v10 + 8) == v6)
      {
LABEL_12:
        v16 = v17 + 24 * v10;
        return v16 + 16;
      }
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v17 + 24 * v10) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v17 + 24 * v10 + 8) == v6)
          goto LABEL_12;
      }
    }
  }
  v11 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v11 == 0x7FFFFFFF)
  {
    v11 = *(unsigned int *)(a1 + 32);
    v12 = v11;
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,unsigned char,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      v12 = *(_DWORD *)(a1 + 32);
      v6 = *a2;
    }
    *(_DWORD *)(a1 + 32) = v12 + 1;
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v13 + 24 * v11);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v13 + 24 * v11);
    *(_DWORD *)(a1 + 36) = v14 & 0x7FFFFFFF;
  }
  v15 = 24 * v11;
  *(_DWORD *)(v13 + v15) = v14 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v15) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v11) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v11 + 8) = v6;
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 24 * v11 + 16) = *a3;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9) = v11;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 16) + 24 * v11;
  return v16 + 16;
}

void re::HashTable<unsigned long long,unsigned char,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  signed int v15;
  _BYTE v16[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v16, 0, 36);
      *(_QWORD *)&v16[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v16, v4, a2);
      v5 = *(_OWORD *)v16;
      *(_OWORD *)v16 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v16[16];
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v16[16] = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v9 = *(_OWORD *)&v16[24];
      *(_OWORD *)&v16[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v16[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = v7 + 8;
        do
        {
          if ((*(_DWORD *)(v12 - 8) & 0x80000000) != 0)
          {
            v13 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)v12 ^ (*(_QWORD *)v12 >> 30));
            v14 = (0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) ^ ((0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) >> 31);
            re::HashTable<unsigned long long,unsigned char,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsMove(a1, v14 % *(unsigned int *)(a1 + 24), v14, (_QWORD *)v12, (_BYTE *)(v12 + 8));
          }
          ++v11;
          v12 += 24;
        }
        while (v11 < v10);
      }
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v16);
    }
  }
  else
  {
    if (a2)
      v15 = a2;
    else
      v15 = 3;
  }
}

uint64_t re::HashTable<unsigned long long,unsigned char,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsMove(uint64_t result, unsigned int a2, unint64_t a3, _QWORD *a4, _BYTE *a5)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v7 = result;
  v8 = *(unsigned int *)(result + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(result + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(result + 24))
    {
      result = re::HashTable<unsigned long long,unsigned char,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::setCapacity(result, (2 * *(_DWORD *)(result + 28)));
      a2 = a3 % *(unsigned int *)(v7 + 24);
      v9 = *(_DWORD *)(v7 + 32);
    }
    *(_DWORD *)(v7 + 32) = v9 + 1;
    v11 = *(_QWORD *)(v7 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v8);
  }
  else
  {
    v11 = *(_QWORD *)(result + 16);
    v12 = *(_DWORD *)(v11 + 24 * v8);
    *(_DWORD *)(result + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 24 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(v7 + 16) + v13) = *(_DWORD *)(*(_QWORD *)(v7 + 16) + 24 * v8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v7 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(v7 + 16) + 24 * v8 + 8) = *a4;
  *(_BYTE *)(*(_QWORD *)(v7 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(*(_QWORD *)(v7 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(v7 + 28);
  return result;
}

BOOL re::HashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::containsKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + 144 * v4 + 8) == v2)
    return 1;
  do
  {
    LODWORD(v4) = *(_DWORD *)(v6 + 144 * v4) & 0x7FFFFFFF;
    result = (_DWORD)v4 != 0x7FFFFFFF;
  }
  while ((_DWORD)v4 != 0x7FFFFFFF && *(_QWORD *)(v6 + 144 * v4 + 8) != v2);
  return result;
}

double re::HashTable<unsigned char,re::Matrix4x4<float>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 80 * v3;
      do
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
        v4 += 80;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<unsigned char,re::Matrix4x4<float>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,false,false>::add(uint64_t a1, _BYTE *a2, __int128 *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v6 = *a2;
  v7 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v6) ^ ((0xBF58476D1CE4E5B9 * v6) >> 27));
  v8 = v7 ^ (v7 >> 31);
  v9 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v9 = v8 % *(unsigned int *)(a1 + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v20 = *(_QWORD *)(a1 + 16);
      if (*(unsigned __int8 *)(v20 + 80 * v10 + 4) == (_DWORD)v6)
        return;
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v20 + 80 * v10) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(unsigned __int8 *)(v20 + 80 * v10 + 4) == (_DWORD)v6)
          return;
      }
    }
  }
  v11 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v11 == 0x7FFFFFFF)
  {
    v11 = *(unsigned int *)(a1 + 32);
    v12 = v11;
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned char,re::Matrix4x4<float>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      v12 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v12 + 1;
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v13 + 80 * v11);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v13 + 80 * v11);
    *(_DWORD *)(a1 + 36) = v14 & 0x7FFFFFFF;
  }
  v15 = 80 * v11;
  *(_DWORD *)(v13 + v15) = v14 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v15) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v11) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 80 * v11 + 4) = *a2;
  v16 = (_OWORD *)(*(_QWORD *)(a1 + 16) + 80 * v11);
  v17 = *a3;
  v18 = a3[1];
  v19 = a3[3];
  v16[3] = a3[2];
  v16[4] = v19;
  v16[1] = v17;
  v16[2] = v18;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9) = v11;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
}

void re::HashTable<unsigned char,re::Matrix4x4<float>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v15[16] = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v9 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = v7 + 16;
        do
        {
          if ((*(_DWORD *)(v12 - 16) & 0x80000000) != 0)
          {
            v13 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * *(unsigned __int8 *)(v12 - 12)) ^ ((0xBF58476D1CE4E5B9
                                                                             * *(unsigned __int8 *)(v12 - 12)) >> 27));
            re::HashTable<unsigned char,re::Matrix4x4<float>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,false,false>::addAsMove(a1, (v13 ^ (v13 >> 31)) % *(unsigned int *)(a1 + 24), v13 ^ (v13 >> 31), (_BYTE *)(v12 - 12), v12);
          }
          ++v11;
          v12 += 80;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned char,re::Matrix4x4<float>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

__n128 re::HashTable<unsigned char,re::Matrix4x4<float>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _BYTE *a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __n128 result;
  __int128 v16;
  __int128 v17;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned char,re::Matrix4x4<float>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,false,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 80 * v8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 80 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 80 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 80 * v8 + 4) = *a4;
  v14 = *(_QWORD *)(a1 + 16) + 80 * v8;
  result = *(__n128 *)a5;
  v16 = *(_OWORD *)(a5 + 16);
  v17 = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(v14 + 48) = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(v14 + 64) = v17;
  *(__n128 *)(v14 + 16) = result;
  *(_OWORD *)(v14 + 32) = v16;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

re::MeshDefinition::AttributeArray *re::MeshDefinition::AttributeArray::AttributeArray(re::MeshDefinition::AttributeArray *this, unint64_t a2)
{
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)this = &off_24ED78140;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return this;
}

uint64_t re::MeshDefinition::MeshDefinition(uint64_t a1, _QWORD *a2, unint64_t a3, int a4, int a5)
{
  uint64_t *v10;
  _anonymous_namespace_ *v11;
  const StringID *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  __int128 *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _OWORD v34[3];
  uint64_t v35;
  int v36;
  _BYTE v37[12];
  __int16 v38;
  int v39;
  __int16 v40;
  unint64_t v41;
  __int16 v42;
  uint64_t *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)a1 = &off_24ED78170;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = a4;
  v13 = a2[4];
  *(_QWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = 0;
  if (v13)
  {
    if (v13 >= 0x666666666666667)
    {
LABEL_33:
      re::internal::assertLog((re::internal *)6, (uint64_t)v12, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 40, v13);
      _os_crash();
      __break(1u);
LABEL_34:
      re::internal::assertLog((re::internal *)4, (uint64_t)v12, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    *(_QWORD *)(a1 + 64) = v14;
    if (!v14)
      goto LABEL_34;
    v10 = v14;
    if (v13 != 1)
    {
      bzero(v14, 40 * v13 - 40);
      v10 += 5 * v13 - 5;
    }
    v10[4] = 0;
    *(_OWORD *)v10 = 0u;
    *((_OWORD *)v10 + 1) = 0u;
    v15 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v15 = 0;
  }
  v16 = &v44;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = a3;
  *(_DWORD *)(a1 + 100) = a5;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 162) = 0;
  *(_BYTE *)(a1 + 164) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = &str_110;
  v36 = 0;
  v35 = 0;
  if ((int)v15 >= 1)
  {
    v17 = 0;
    v18 = a2[4];
    while (v18 != v17)
    {
      v19 = *(unsigned int *)(*(_QWORD *)(a2[5] + 8 * v17) + 12);
      ++*((_DWORD *)&v35 + v19);
      if (v15 == ++v17)
        goto LABEL_12;
    }
    *(_QWORD *)v37 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v44 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v34[0]) = 136315906;
    *(_QWORD *)((char *)v34 + 4) = "operator[]";
    WORD6(v34[0]) = 1024;
    *(_DWORD *)((char *)v34 + 14) = 476;
    WORD1(v34[1]) = 2048;
    *(_QWORD *)((char *)&v34[1] + 4) = v18;
    WORD6(v34[1]) = 2048;
    *(_QWORD *)((char *)&v34[1] + 14) = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_29:
    v32 = 0;
    v16[3] = 0u;
    v16[4] = 0u;
    v16[1] = 0u;
    v16[2] = 0u;
    *v16 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v37 = 136315906;
    *(_QWORD *)&v37[4] = "operator[]";
    v38 = 1024;
    v39 = 468;
    v40 = 2048;
    v41 = v18;
    v42 = 2048;
    v43 = (uint64_t *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_30;
  }
LABEL_12:
  v20 = 0;
  v21 = 0;
  memset(v34, 0, sizeof(v34));
  v22 = (_QWORD *)v34 + 1;
  do
  {
    v23 = *((unsigned int *)&v35 + v20);
    v18 = v21;
    if ((_DWORD)v23)
    {
      if (v15 <= v21)
        goto LABEL_29;
      *(v22 - 1) = *(_QWORD *)(a1 + 64) + 40 * v21;
      *v22 = v23;
      v24 = v23;
    }
    else
    {
      v24 = 0;
    }
    *(_QWORD *)(a1 + 72 + 8 * v20) = v18 | (v24 << 32);
    v21 = v23 + v18;
    ++v20;
    v22 += 2;
  }
  while (v20 != 3);
  v31 = a1;
  v33 = 0;
  v32 = 0;
  if ((int)v15 >= 1)
  {
    a3 = 0;
    for (i = 8; ; i += 24)
    {
      v10 = (uint64_t *)a2[4];
      if ((unint64_t)v10 <= a3)
        break;
      v26 = *(_QWORD *)(a2[5] + 8 * a3);
      v27 = *(unsigned int *)(v26 + 12);
      v10 = (uint64_t *)*((unsigned int *)&v32 + v27);
      *((_DWORD *)&v32 + v27) = (_DWORD)v10 + 1;
      v28 = *((_QWORD *)&v34[v27] + 1);
      if (v28 <= (unint64_t)v10)
        goto LABEL_31;
      v29 = *(_QWORD *)&v34[v27];
      *(_QWORD *)(v29 + 40 * v10 + 8) = v26;
      v13 = a2[7];
      if (v13 <= a3)
        goto LABEL_32;
      v12 = (const StringID *)(a2[8] + i);
      if (LOBYTE(v12[-1].var1))
      {
        LOBYTE(v44) = 1;
        re::StringID::StringID((re::StringID *)((char *)&v44 + 8), v12);
        re::Optional<re::StringID>::operator=(v29 + 40 * v10 + 16, (unsigned __int8 *)&v44);
        if ((_BYTE)v44)
          re::StringID::destroyString((re::StringID *)((char *)&v44 + 8));
      }
      if (v15 == ++a3)
        return v31;
    }
LABEL_30:
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v44 = 0u;
    v13 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v37 = 136315906;
    *(_QWORD *)&v37[4] = "operator[]";
    v38 = 1024;
    v39 = 476;
    v40 = 2048;
    v41 = a3;
    v42 = 2048;
    v43 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_31:
    re::internal::assertLog((re::internal *)6, (uint64_t)v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v10, v28);
    _os_crash();
    __break(1u);
LABEL_32:
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v44 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v37 = 136315906;
    *(_QWORD *)&v37[4] = "operator[]";
    v38 = 1024;
    v39 = 476;
    v40 = 2048;
    v41 = a3;
    v42 = 2048;
    v43 = (uint64_t *)v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_33;
  }
  return v31;
}

void re::MeshDefinition::~MeshDefinition(re::MeshDefinition *this)
{
  uint64_t v2;
  uint64_t v3;
  re::StringID *v4;

  *(_QWORD *)this = &off_24ED78170;
  re::StringID::destroyString((re::MeshDefinition *)((char *)this + 168));
  if (*((_QWORD *)this + 6))
  {
    v2 = *((_QWORD *)this + 7);
    if (v2)
    {
      v3 = 40 * v2;
      v4 = (re::StringID *)(*((_QWORD *)this + 8) + 24);
      do
      {
        if (*((_BYTE *)v4 - 8))
          re::StringID::destroyString(v4);

        v4 = (re::StringID *)((char *)v4 + 40);
        v3 -= 40;
      }
      while (v3);
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), *((_QWORD *)this + 8));
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
    }
    *((_QWORD *)this + 6) = 0;
  }

  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::MeshDefinition::~MeshDefinition(this);
  JUMPOUT(0x2276933B8);
}

void re::MeshDefinition::setIndexData(uint64_t a1, unsigned int a2, void **a3)
{
  void *v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  void **v13;
  void *v14;
  void *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a2 <= 1)
  {
    v6 = *a3;
    if (*a3)
    {
      v6 = (void *)objc_msgSend(v6, "length");
      v7 = (unint64_t)v6;
    }
    else
    {
      v7 = 0;
    }
    v8 = *(unsigned int *)(a1 + 40);
    v9 = 1;
    if (a2)
      v9 = 2;
    v10 = v8 << v9;
    if (v7 >= v8 << v9)
    {
      *(_BYTE *)(a1 + 24) = a2;
      v13 = (void **)(a1 + 32);
      if ((void **)(a1 + 32) != a3)
      {
        v14 = *a3;
        *a3 = 0;
        v15 = *v13;
        *v13 = v14;

      }
    }
    else
    {
      v11 = *re::graphicsLogObjects((re *)v6);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v16 = 134218240;
        v17 = v10;
        v18 = 2048;
        v19 = v7;
        _os_log_impl(&dword_224FE9000, v11, OS_LOG_TYPE_DEFAULT, "Invalid MeshDefinition::setIndexData(), submitted index data buffer is too small.  Expected minimum bufferSize of %zu, but got buffer with size %zu", (uint8_t *)&v16, 0x16u);
      }
      *(_BYTE *)(a1 + 24) = 0;
      v12 = *(void **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;

    }
  }
}

void re::MeshDefinition::setAttribute(re *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v6;
  const char *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  BOOL v14;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  int v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a1 + 7);
  if (v4)
  {
    v6 = *((_QWORD *)a1 + 8);
    v7 = *(const char **)a2;
    v8 = *(unsigned __int8 *)(a2 + 8);
    v9 = *(unsigned __int8 *)(a2 + 9);
    v10 = 40 * v4;
    while (1)
    {
      v11 = *(_QWORD *)(v6 + 8);
      if (*(_BYTE *)(v6 + 16))
      {
        v12 = *(const char **)(v6 + 32);
        LOWORD(v13) = *(_WORD *)(v11 + 8);
      }
      else
      {
        v12 = *(const char **)v11;
        v13 = *(_QWORD *)(v11 + 8);
      }
      a1 = (re *)strcmp(v12, v7);
      v14 = !(_DWORD)a1 && v8 == v13;
      if (v14 && v9 == BYTE1(v13))
        break;
      v6 += 40;
      v10 -= 40;
      if (!v10)
        goto LABEL_14;
    }
    if ((uint64_t *)v6 != a3)
    {
      v18 = *a3;
      *a3 = 0;
      v19 = *(void **)v6;
      *(_QWORD *)v6 = v18;

    }
  }
  else
  {
LABEL_14:
    v16 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *(const char **)a2;
      v20 = 136315138;
      v21 = v17;
      _os_log_impl(&dword_224FE9000, v16, OS_LOG_TYPE_DEFAULT, "Ignoring MeshDefinition::setAttribute(), since the mesh does not contain attribute '%s'", (uint8_t *)&v20, 0xCu);
    }
  }
}

uint64_t re::MeshDefinition::tryGetAttribute(re::MeshDefinition *this, const char *__s2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  const char *v6;

  v2 = *((_QWORD *)this + 7);
  if (!v2)
    return 0;
  v4 = *((_QWORD *)this + 8);
  v5 = 40 * v2;
  while (1)
  {
    v6 = *(_BYTE *)(v4 + 16) ? *(const char **)(v4 + 32) : **(const char ***)(v4 + 8);
    if (!strcmp(v6, __s2))
      break;
    v4 += 40;
    v5 -= 40;
    if (!v5)
      return 0;
  }
  return v4;
}

uint64_t re::MeshDefinition::attributeElementCount(re::MeshDefinition *this, const VertexAttributeDescriptor *a2)
{
  uint64_t result;

  if (a2 == 1)
    return *((unsigned int *)this + 24);
  if (a2 - 2 >= 3)
    return 1;
  re::internal::assertLog((re::internal *)5, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Unsupported vertex step function %d", "false", "attributeElementCount", 313, a2);
  result = _os_crash();
  __break(1u);
  return result;
}

float32x4_t *re::MeshDefinition::computeBoundingBox@<X0>(float32x4_t *this@<X0>, float32x4_t *a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  re::MeshDefinition *v4;
  float32x4_t v6;
  float32x4_t v7;
  uint64_t Attribute;
  uint64_t v9;
  id *v10;
  float32x4_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int32 *v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v20;

  v4 = (re::MeshDefinition *)this;
  if (this[7].i8[0])
  {
    v6 = this[8];
    v7 = this[9];
LABEL_3:
    *a2 = v6;
    a2[1] = v7;
    return this;
  }
  Attribute = re::MeshDefinition::tryGetAttribute((re::MeshDefinition *)this, "vertexPosition");
  if (!Attribute)
  {
    re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) Mesh definition should have either a position attribute or an explicit bounding box", "positionAttribute", "computeBoundingBox", 329);
    _os_crash();
    __break(1u);
    goto LABEL_22;
  }
  v10 = (id *)Attribute;
  v11.i64[0] = 0x7F0000007FLL;
  v11.i64[1] = 0x7F0000007FLL;
  *(int32x4_t *)a2 = vdupq_n_s32(0x7F800000u);
  a2[1] = v11;
  v12 = *(_QWORD *)(Attribute + 8);
  if (*(_BYTE *)(Attribute + 16))
    v3 = *(unsigned __int16 *)(v12 + 8);
  else
    v3 = *(_QWORD *)(v12 + 8);
  v2 = objc_msgSend(*(id *)Attribute, "length");
  v13 = re::MeshDefinition::attributeElementCount(v4, (const VertexAttributeDescriptor *)(v3 >> 8));
  v15 = v13;
  if (v3 == 26)
  {
    v19 = 8 * v13;
    if (8 * v13 <= v2)
    {
      this = (float32x4_t *)objc_msgSend(objc_retainAutorelease(*v10), "bytes");
      if (v15)
      {
        v6 = (float32x4_t)vdupq_n_s32(0x7F800000u);
        v7.i64[0] = 0x7F0000007FLL;
        v7.i32[2] = 127;
        do
        {
          v20.i32[0] = this->i32[0];
          v20.i64[0] = vcvtq_f32_f16(*(float16x4_t *)v20.f32).u64[0];
          _H3 = this->i16[2];
          __asm { FCVT            S3, H3 }
          v6.i32[3] = 0;
          v20.i64[1] = _S3;
          v6 = vminnmq_f32(v6, v20);
          v7.i32[3] = 0;
          v7 = vmaxnmq_f32(v7, v20);
          this = (float32x4_t *)((char *)this + 8);
          --v15;
        }
        while (v15);
        goto LABEL_3;
      }
      return this;
    }
    goto LABEL_23;
  }
  if (v3 != 30)
  {
LABEL_24:
    re::internal::assertLog((re::internal *)5, v14, "assertion failure: '%s' (%s:line %i) Unexpected position vertex format %d", "false", "computeBoundingBox", 371, v3);
    this = (float32x4_t *)_os_crash();
    __break(1u);
    return this;
  }
  v16 = 12 * v13;
  if (12 * v13 > v2)
  {
LABEL_22:
    re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Position attribute data is too small (got %zu bytes, expected %zu bytes)", "expectedSizeInBytes <= actualSizeInBytes", "computeBoundingBox", 343, v2, v16);
    _os_crash();
    __break(1u);
LABEL_23:
    re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Position attribute data is too small (got %zu bytes, expected %zu bytes)", "expectedSizeInBytes <= actualSizeInBytes", "computeBoundingBox", 358, v2, v19);
    _os_crash();
    __break(1u);
    goto LABEL_24;
  }
  this = (float32x4_t *)objc_msgSend(objc_retainAutorelease(*v10), "bytes");
  if (v15)
  {
    v6 = (float32x4_t)vdupq_n_s32(0x7F800000u);
    v17 = &this->u32[2];
    v7.i64[0] = 0x7F0000007FLL;
    v7.i32[2] = 127;
    do
    {
      v18.i64[0] = *((_QWORD *)v17 - 1);
      v6.i32[3] = 0;
      v18.i64[1] = *v17;
      v6 = vminnmq_f32(v6, v18);
      v7.i32[3] = 0;
      v7 = vmaxnmq_f32(v7, v18);
      v17 += 3;
      --v15;
    }
    while (v15);
    goto LABEL_3;
  }
  return this;
}

uint64_t re::MeshDefinition::skinningData(re::MeshDefinition *this, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _BYTE *v7;
  uint64_t result;
  id *v9;
  uint64_t v10;
  unint64_t v11;
  id *v12;
  uint64_t v13;
  unint64_t v14;
  id *Attribute;
  id *v16;
  uint64_t v17;
  unint64_t v18;

  v6 = (_QWORD *)((char *)this + 168);
  if (*((_QWORD *)this + 21) <= 1uLL)
  {
    v7 = (_BYTE *)*((_QWORD *)this + 22);
    if (v7)
    {
      if (!*v7)
        return 0;
    }
  }
  result = re::MeshDefinition::tryGetAttribute(this, "skinnedAnimationJointInfluences");
  if (result)
  {
    v9 = (id *)result;
    v10 = objc_msgSend(objc_retainAutorelease(*(id *)result), "bytes");
    v11 = objc_msgSend(*v9, "length");
    *(_QWORD *)(a3 + 8) = v10;
    *(_QWORD *)(a3 + 16) = v11 >> 3;
    result = re::MeshDefinition::tryGetAttribute(this, "skinnedAnimationInfluenceEndIndices");
    if (result)
    {
      v12 = (id *)result;
      v13 = objc_msgSend(objc_retainAutorelease(*(id *)result), "bytes");
      v14 = objc_msgSend(*v12, "length");
      *(_QWORD *)(a3 + 24) = v13;
      *(_QWORD *)(a3 + 32) = v14 >> 2;
      Attribute = (id *)re::MeshDefinition::tryGetAttribute(this, "skinnedAnimationRemappedJointIndices");
      if (Attribute)
      {
        v16 = Attribute;
        v17 = objc_msgSend(objc_retainAutorelease(*Attribute), "bytes");
        v18 = objc_msgSend(*v16, "length");
        *(_QWORD *)(a3 + 40) = v17;
        *(_QWORD *)(a3 + 48) = v18 >> 2;
      }
      result = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a2, v6);
      if (result)
      {
        *(_DWORD *)a3 = *(_DWORD *)result;
        return 1;
      }
    }
  }
  return result;
}

BOOL re::MeshDefinition::blendShapeData(uint64_t a1, uint64_t *a2, const char *a3, unsigned int a4, __int16 a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const char *v15;
  _anonymous_namespace_ *v16;
  int v17;
  _anonymous_namespace_ *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _anonymous_namespace_ *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  const char *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _anonymous_namespace_ *v36;
  _anonymous_namespace_ *v37;
  _anonymous_namespace_ *v38;
  _anonymous_namespace_ *v39;
  _anonymous_namespace_ *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  _BOOL4 v49;
  uint64_t *v50;
  unint64_t __s;
  unint64_t v52;
  unsigned int v53;
  _QWORD v54[2];
  unint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[18];
  __int16 v60;
  unint64_t v61;
  __int16 v62;
  unint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v9 = re::MeshDefinition::attributes(a1, 2u);
  if (!v10)
    return 0;
  v11 = v9;
  v12 = v10;
  v13 = 0;
  v57 = 0;
  v54[1] = 0;
  v55 = 0;
  v53 = a4;
  v54[0] = 0;
  v56 = 0;
  LODWORD(v58) = 0;
  do
  {
    v14 = objc_msgSend(*(id *)(v11 + 40 * v13), "length");
    if (a4 != v14 / 0xC)
      goto LABEL_15;
    if (*(_BYTE *)(v11 + 40 * v13 + 16))
    {
      v15 = *(const char **)(v11 + 40 * v13 + 32);
      if (!v15)
        goto LABEL_15;
    }
    else
    {
      v15 = **(const char ***)(v11 + 40 * v13 + 8);
      if (!v15)
        goto LABEL_15;
    }
    *(_QWORD *)&v64 = 0;
    *((_QWORD *)&v64 + 1) = &str_110;
    *(_QWORD *)v59 = 0;
    *(_QWORD *)&v59[8] = &str_110;
    if ((*(_QWORD *)v59 ^ (unint64_t)v64) > 1)
    {
      re::StringID::destroyString((re::StringID *)v59);
      re::StringID::destroyString((re::StringID *)&v64);
LABEL_13:
      v14 = (unint64_t)re::DynamicArray<int>::add(v54, &v58);
      goto LABEL_15;
    }
    if (*((_QWORD *)&v64 + 1) == *(_QWORD *)&v59[8])
    {
      re::StringID::destroyString((re::StringID *)v59);
      re::StringID::destroyString((re::StringID *)&v64);
    }
    else
    {
      v17 = strcmp(*((const char **)&v64 + 1), *(const char **)&v59[8]);
      re::StringID::destroyString((re::StringID *)v59);
      re::StringID::destroyString((re::StringID *)&v64);
      if (v17)
        goto LABEL_13;
    }
LABEL_15:
    v13 = (int)v58 + 1;
    LODWORD(v58) = v58 + 1;
  }
  while (v12 > v13);
  v49 = v55 != 0;
  if (v55)
  {
    *(_QWORD *)&v64 = 0;
    *((_QWORD *)&v64 + 1) = &str_110;
    *(_QWORD *)&v66 = 0;
    v65 = 0uLL;
    BYTE8(v66) = 2;
    HIDWORD(v66) = a4;
    v19 = v64;
    *(_QWORD *)&v64 = 0;
    *((_QWORD *)&v64 + 1) = &str_110;
    v20 = *a2;
    v21 = a2[1];
    *(_OWORD *)a2 = v19;
    *(_QWORD *)v59 = v19 & 0xFFFFFFFFFFFFFFFELL | v20 & 1;
    *(_QWORD *)&v59[8] = v21;
    re::StringID::destroyString((re::StringID *)v59);
    re::FixedArray<float>::operator=(a2 + 2, (uint64_t *)&v65);
    a2[5] = *((_QWORD *)&v66 + 1);
    re::FixedArray<re::BlendShapeDefinition>::deinit(&v65);
    re::StringID::destroyString((re::StringID *)&v64);
    *((_WORD *)a2 + 24) = a5;
    if (v55)
    {
      v24 = 0;
      __s = 3 * a4;
      v52 = v12;
      v25 = 3 * a4;
      v50 = a2;
      while (1)
      {
        v26 = a2[3];
        if (v26 <= v24)
          goto LABEL_39;
        v27 = *(int *)(v57 + 4 * v24);
        if (v12 <= v27)
          goto LABEL_40;
        v28 = v11 + 40 * (int)v27;
        v29 = *(_BYTE *)(v28 + 16)
            ? *(const char **)(v11 + 40 * (int)v27 + 32)
            : **(const char ***)(v11 + 40 * (int)v27 + 8);
        v30 = a2[4];
        v31 = (_QWORD *)(v30 + 136 * v24);
        *(_QWORD *)v59 = 0;
        *(_QWORD *)&v59[8] = &str_110;
        v32 = *(_QWORD *)v59;
        v33 = *(_QWORD *)&v59[8];
        *(_QWORD *)v59 = 0;
        *(_QWORD *)&v59[8] = &str_110;
        v34 = v31[1];
        v35 = v32 & 0xFFFFFFFFFFFFFFFELL | *v31 & 1;
        v31[1] = v33;
        *(_QWORD *)&v64 = v35;
        *((_QWORD *)&v64 + 1) = v34;
        *v31 = v32;
        re::StringID::destroyString((re::StringID *)&v64);
        re::StringID::destroyString((re::StringID *)v59);
        v31[3] = 0;
        v31[9] = 0;
        v31[12] = 0;
        v31[15] = 0;
        v22 = (_anonymous_namespace_ *)objc_msgSend(objc_retainAutorelease(*(id *)v28), "bytes");
        v12 = v52;
        if (v53)
          break;
LABEL_30:
        ++v24;
        a2 = v50;
        if (v55 <= v24)
          goto LABEL_31;
      }
      v26 = 0;
      v41 = v30 + 136 * v24;
      v42 = *(_QWORD *)(v41 + 48);
      v43 = (uint64_t *)(v41 + 56);
      v44 = 8;
      while (v42 > v26)
      {
        v46 = *(_DWORD *)((char *)v22 + v44 - 4);
        v45 = *(_DWORD *)((char *)v22 + v44);
        v47 = *v43;
        *(_DWORD *)(*v43 + v44 - 8) = *(_DWORD *)((char *)v22 + v44 - 8);
        v30 = v26 + 1;
        if (v42 <= v26 + 1)
          goto LABEL_37;
        *(_DWORD *)(v47 + 4 * v26 + 4) = v46;
        v30 = v26 + 2;
        if (v42 <= v26 + 2)
          goto LABEL_38;
        *(_DWORD *)(v47 + v44) = v45;
        v26 += 3;
        v44 += 12;
        if (v25 == v26)
          goto LABEL_30;
      }
      v58 = 0;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v64 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v59 = 136315906;
      *(_QWORD *)&v59[4] = "operator[]";
      *(_WORD *)&v59[12] = 1024;
      *(_DWORD *)&v59[14] = 468;
      v60 = 2048;
      v61 = v26;
      v62 = 2048;
      v63 = v42;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_37:
      v58 = 0;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v64 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v59 = 136315906;
      *(_QWORD *)&v59[4] = "operator[]";
      *(_WORD *)&v59[12] = 1024;
      *(_DWORD *)&v59[14] = 468;
      v60 = 2048;
      v61 = v30;
      v62 = 2048;
      v63 = v42;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_38:
      v58 = 0;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v64 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v59 = 136315906;
      *(_QWORD *)&v59[4] = "operator[]";
      *(_WORD *)&v59[12] = 1024;
      *(_DWORD *)&v59[14] = 468;
      v60 = 2048;
      v61 = v30;
      v62 = 2048;
      v63 = v42;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_39:
      v58 = 0;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v64 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v59 = 136315906;
      *(_QWORD *)&v59[4] = "operator[]";
      *(_WORD *)&v59[12] = 1024;
      *(_DWORD *)&v59[14] = 468;
      v60 = 2048;
      v61 = v24;
      v62 = 2048;
      v63 = v26;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_40:
      re::internal::assertLog((re::internal *)6, v23, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v27, v12);
      _os_crash();
      __break(1u);
    }
  }
LABEL_31:
  if (v54[0])
  {
    if (v57)
      (*(void (**)(void))(*(_QWORD *)v54[0] + 40))();
  }
  return v49;
}

uint64_t re::MeshDefinition::attributes(uint64_t a1, unsigned int a2)
{
  unint64_t v2;

  if (!*(_DWORD *)(a1 + 8 * a2 + 76))
    return 0;
  v2 = *(unsigned int *)(a1 + 8 * a2 + 72);
  if (*(_QWORD *)(a1 + 56) <= v2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 64) + 40 * v2;
}

unint64_t re::copyPositionAttribute(const char **a1, float32x4_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  unint64_t result;

  if (!strcmp(*a1, "vertexPosition"))
  re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "0 == strcmp(attributeDescriptor.name, MeshAttributeNames::kVertexPosition.cstr())", "copyPositionAttribute", 773);
  result = _os_crash();
  __break(1u);
  return result;
}

unint64_t re::`anonymous namespace'::copyAttributeValuesThreeComponents(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t result;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  __int128 v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  __int128 v17;

  v5 = (_QWORD *)a1;
  v6 = *(unsigned __int8 *)(a1 + 8);
  if (*(unsigned __int8 *)(a1 + 8) > 0x19u)
  {
    if ((_DWORD)v6 == 26)
    {
      result = 8 * a3;
      if (!a5)
        return result;
      if (result < a5)
        goto LABEL_31;
      if (!a3)
        return 0;
      do
      {
        v17 = (__int128)*a2++;
        _S0 = v17;
        __asm { FCVT            H1, S0 }
        *(_WORD *)a4 = _H1;
        _S1 = DWORD1(v17);
        __asm { FCVT            H1, S1 }
        *(_WORD *)(a4 + 2) = _S1;
        _S0 = DWORD2(v17);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a4 + 4) = _S0;
        a4 += 8;
        --a3;
      }
      while (a3);
    }
    else
    {
      if ((_DWORD)v6 != 30)
        goto LABEL_32;
      result = 12 * a3;
      if (!a5)
        return result;
      if (result < a5)
      {
LABEL_29:
        re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyAttributeValuesThreeComponents", 595, *v5, a5, result);
        result = _os_crash();
        __break(1u);
LABEL_30:
        re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyAttributeValuesThreeComponents", 655, *v5, a5, result);
        result = _os_crash();
        __break(1u);
LABEL_31:
        re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyAttributeValuesThreeComponents", 615, *v5, a5, result);
        _os_crash();
        __break(1u);
        goto LABEL_32;
      }
      if (!a3)
        return 0;
      do
      {
        v12 = (__int128)*a2++;
        *(_QWORD *)a4 = v12;
        *(_DWORD *)(a4 + 8) = DWORD2(v12);
        a4 += 12;
        --a3;
      }
      while (a3);
    }
  }
  else
  {
    if ((_DWORD)v6 != 8)
    {
      if ((_DWORD)v6 == 23)
      {
        result = 8 * a3;
        if (!a5)
          return result;
        if (result >= a5)
        {
          if (a3)
          {
            do
            {
              v8 = *a2++;
              v9 = v8;
              v9.i32[3] = 0;
              v10 = vmaxnmq_f32(v9, (float32x4_t)xmmword_226168830);
              v10.i32[3] = 0;
              v11 = vminnmq_f32(v10, (float32x4_t)xmmword_2260EDC60);
              *(_WORD *)(a4 + 2) = llroundf(vmuls_lane_f32(32767.0, *(float32x2_t *)v11.f32, 1));
              *(_WORD *)a4 = llroundf(32767.0 * v11.f32[0]);
              *(_WORD *)(a4 + 4) = llroundf(vmuls_lane_f32(32767.0, v11, 2));
              a4 += 8;
              --a3;
            }
            while (a3);
            return result;
          }
          return 0;
        }
        re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyAttributeValuesThreeComponents", 635, *v5, a5, 8 * a3);
        result = _os_crash();
        __break(1u);
        goto LABEL_29;
      }
LABEL_32:
      re::internal::assertLog((re::internal *)5, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Unexpected vertex format %d", "false", "copyAttributeValuesThreeComponents", 669, v6);
      result = _os_crash();
      __break(1u);
      return result;
    }
    result = 4 * a3;
    if (!a5)
      return result;
    if (result < a5)
      goto LABEL_30;
    if (!a3)
      return 0;
    do
    {
      v13 = *a2++;
      v14 = v13;
      v14.i32[3] = 0;
      v15 = vmaxnmq_f32(v14, (float32x4_t)0);
      v15.i32[3] = 0;
      v16 = vminnmq_f32(v15, (float32x4_t)xmmword_2260EDC60);
      *(_BYTE *)(a4 + 1) = llroundf(vmuls_lane_f32(255.0, *(float32x2_t *)v16.f32, 1));
      *(_BYTE *)a4 = llroundf(255.0 * v16.f32[0]);
      *(_BYTE *)(a4 + 2) = llroundf(vmuls_lane_f32(255.0, v16, 2));
      a4 += 4;
      --a3;
    }
    while (a3);
  }
  return result;
}

unint64_t re::copyNormalAttribute(const char **a1, float32x4_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  unint64_t result;

  if (!strcmp(*a1, "vertexNormal"))
  re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "0 == strcmp(attributeDescriptor.name, MeshAttributeNames::kVertexNormal.cstr())", "copyNormalAttribute", 780);
  result = _os_crash();
  __break(1u);
  return result;
}

unint64_t re::copyTangentAttribute(const char **a1, float32x4_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  unint64_t result;

  if (!strcmp(*a1, "vertexTangent"))
  re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "0 == strcmp(attributeDescriptor.name, MeshAttributeNames::kVertexTangent.cstr())", "copyTangentAttribute", 787);
  result = _os_crash();
  __break(1u);
  return result;
}

unint64_t re::copyBitangentAttribute(const char **a1, float32x4_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  unint64_t result;

  if (!strcmp(*a1, "vertexBitangent"))
  re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "0 == strcmp(attributeDescriptor.name, MeshAttributeNames::kVertexBitangent.cstr())", "copyBitangentAttribute", 794);
  result = _os_crash();
  __break(1u);
  return result;
}

unint64_t re::copyUVAttribute(const char **a1, uint64_t *a2, uint64_t a3, _QWORD *a4, unint64_t a5)
{
  uint64_t v10;
  unint64_t result;

  if (!strcmp(*a1, "vertexUV"))
  re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "0 == strcmp(attributeDescriptor.name, MeshAttributeNames::kVertexUV.cstr())", "copyUVAttribute", 801);
  result = _os_crash();
  __break(1u);
  return result;
}

unint64_t re::`anonymous namespace'::copyAttributeValuesTwoComponents(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4, unint64_t a5)
{
  _QWORD *v5;
  unint64_t result;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 8) != 29)
  {
    re::internal::assertLog((re::internal *)5, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Unexpected vertex format %d", "attributeDescriptor.format == mtl::VertexFormat::kFloat2", "copyAttributeValuesTwoComponents", 579, *(unsigned __int8 *)(a1 + 8));
    result = _os_crash();
    __break(1u);
    goto LABEL_8;
  }
  v5 = (_QWORD *)a1;
  result = 8 * a3;
  if (!a5)
    return result;
  if (result < a5)
  {
LABEL_8:
    re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyAttributeVectors", 518, *v5, a5, result);
    result = _os_crash();
    __break(1u);
    return result;
  }
  for (; a3; --a3)
  {
    v7 = *a2++;
    *a4++ = v7;
  }
  return result;
}

unint64_t re::copyColorAttribute(const char **a1, float32x4_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  unint64_t result;

  if (!strcmp(*a1, "vertexColor"))
  re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "0 == strcmp(attributeDescriptor.name, MeshAttributeNames::kVertexColor.cstr())", "copyColorAttribute", 808);
  result = _os_crash();
  __break(1u);
  return result;
}

unint64_t re::copyColorAttribute(const char **a1, float32x4_t *a2, uint64_t a3, float16x4_t *a4, unint64_t a5)
{
  uint64_t v10;
  unint64_t result;

  if (!strcmp(*a1, "vertexColor"))
  re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "0 == strcmp(attributeDescriptor.name, MeshAttributeNames::kVertexColor.cstr())", "copyColorAttribute", 815);
  result = _os_crash();
  __break(1u);
  return result;
}

unint64_t re::`anonymous namespace'::copyAttributeValuesFourComponents(uint64_t a1, float32x4_t *a2, uint64_t a3, float16x4_t *a4, unint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t result;
  float32x4_t v14;
  float32x4_t v15;
  __int128 v16;
  float32x4_t v18;
  float32x4_t v19;
  int16x8_t v20;
  float32x4_t v21;

  v5 = (_QWORD *)a1;
  v6 = *(unsigned __int8 *)(a1 + 8);
  if (*(unsigned __int8 *)(a1 + 8) > 0x1Au)
  {
    if ((_DWORD)v6 == 27)
    {
      result = 8 * a3;
      if (!a5)
        return result;
      if (result < a5)
        goto LABEL_33;
      if (!a3)
        return 0;
      do
      {
        v21 = *a2++;
        *a4++ = vcvt_f16_f32(v21);
        --a3;
      }
      while (a3);
    }
    else
    {
      if ((_DWORD)v6 != 31)
        goto LABEL_34;
      result = 16 * a3;
      if (!a5)
        return result;
      if (result < a5)
      {
LABEL_31:
        re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyAttributeValuesFourComponents", 685, *v5, a5, result);
        result = _os_crash();
        __break(1u);
LABEL_32:
        re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyAttributeValuesFourComponents", 748, *v5, a5, result);
        result = _os_crash();
        __break(1u);
LABEL_33:
        re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyAttributeValuesFourComponents", 706, *v5, a5, result);
        _os_crash();
        __break(1u);
        goto LABEL_34;
      }
      if (!a3)
        return 0;
      do
      {
        v16 = (__int128)*a2++;
        *(_OWORD *)a4->i8 = v16;
        a4 += 2;
        --a3;
      }
      while (a3);
    }
  }
  else
  {
    if ((_DWORD)v6 != 9)
    {
      if ((_DWORD)v6 == 24)
      {
        result = 8 * a3;
        if (!a5)
          return result;
        if (result >= a5)
        {
          if (a3)
          {
            __asm
            {
              FMOV            V0.4S, #-1.0
              FMOV            V1.4S, #1.0
            }
            v14 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
            do
            {
              v15 = *a2++;
              *a4++ = (float16x4_t)vmovn_s32(vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vminnmq_f32(vmaxnmq_f32(v15, _Q0), _Q1), v14))));
              --a3;
            }
            while (a3);
            return result;
          }
          return 0;
        }
        re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyAttributeValuesFourComponents", 727, *v5, a5, 8 * a3);
        result = _os_crash();
        __break(1u);
        goto LABEL_31;
      }
LABEL_34:
      re::internal::assertLog((re::internal *)5, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Unexpected vertex format %d", "false", "copyAttributeValuesFourComponents", 763, v6);
      result = _os_crash();
      __break(1u);
      return result;
    }
    result = 4 * a3;
    if (!a5)
      return result;
    if (result < a5)
      goto LABEL_32;
    if (!a3)
      return 0;
    __asm { FMOV            V1.4S, #1.0 }
    v18 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    do
    {
      v19 = *a2++;
      v20 = (int16x8_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vminnmq_f32(vmaxnmq_f32(v19, (float32x4_t)0), _Q1), v18)));
      *(int16x4_t *)v20.i8 = vmovn_s32((int32x4_t)v20);
      a4->i32[0] = vmovn_s16(v20).u32[0];
      a4 = (float16x4_t *)((char *)a4 + 4);
      --a3;
    }
    while (a3);
  }
  return result;
}

uint64_t re::copySkinWeightsAttribute(uint64_t a1, const void *a2, size_t a3, void *a4, size_t a5)
{
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v10 = *(const char **)a1;
  if (strcmp(*(const char **)a1, "skinnedAnimationWeights"))
  {
    re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) ", "0 == strcmp(attributeDescriptor.name, MeshAttributeNames::kSkinnedAnimationWeights.cstr())", "copySkinWeightsAttribute", 840);
    _os_crash();
    __break(1u);
    goto LABEL_8;
  }
  v12 = *(unsigned __int8 *)(a1 + 8);
  if ((_DWORD)v12 != 28)
  {
LABEL_8:
    re::internal::assertLog((re::internal *)5, v11, "assertion failure: '%s' (%s:line %i) Unexpected vertex format %d", "attributeDescriptor.format == mtl::VertexFormat::kFloat", "copyAttributeFloatValues", 552, v12);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  a3 *= 4;
  if (!a5)
    return a3;
  if (a3 >= a5)
  {
    memcpy(a4, a2, a3);
    return a3;
  }
LABEL_9:
  re::internal::assertLog((re::internal *)7, v11, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyAttributeValues", 542, v10, a5, a3);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::copySkinJointIndicesAttribute(const char **a1, const void *a2, uint64_t a3, void *a4, unint64_t a5)
{
  const char *v10;
  uint64_t v11;
  uint64_t result;

  v10 = *a1;
  if (!strcmp(*a1, "skinnedAnimationJointIndices") || !strcmp(v10, "skinnedAnimationRemappedJointIndices"))
  re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) ", "0 == strcmp(attributeDescriptor.name, MeshAttributeNames::kSkinnedAnimationJointIndices.cstr()) || 0 == strcmp(attributeDescriptor.name, MeshAttributeNames::kSkinnedAnimationRemappedJointIndices.cstr())", "copySkinJointIndicesAttribute", 848);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::copyAttributeInt32Values(uint64_t a1, const void *a2, uint64_t a3, void *__dst, unint64_t a5)
{
  unint64_t v5;
  uint64_t result;

  if (*(_BYTE *)(a1 + 8) == 32)
  {
    v5 = 4 * a3;
    if (!a5)
      return v5;
    if (v5 >= a5)
    {
      memcpy(__dst, a2, 4 * a3);
      return v5;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)5, (uint64_t)a2, a3, __dst, "assertion failure: '%s' (%s:line %i) Unexpected vertex format %d", "attributeDescriptor.format == mtl::VertexFormat::kInt", "copyAttributeInt32Values", 561, *(unsigned __int8 *)(a1 + 8));
    a1 = _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyAttributeValues", 542, *(_QWORD *)a1, a5, v5);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::copySkinInfluenceEndIndicesAttribute(const char **a1, const void *a2, uint64_t a3, void *a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t result;

  if (!strcmp(*a1, "skinnedAnimationInfluenceEndIndices"))
  re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "0 == strcmp(attributeDescriptor.name, MeshAttributeNames::kSkinnedAnimationInfluenceEndIndices.cstr())", "copySkinInfluenceEndIndicesAttribute", 855);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::copyAdjacencyAttribute(const char **a1, const void *a2, uint64_t a3, void *a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t result;

  if (!strcmp(*a1, "vertexAdjacencies"))
  re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "0 == strcmp(attributeDescriptor.name, MeshAttributeNames::kVertexAdjacentFaces.cstr())", "copyAdjacencyAttribute", 869);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::copyAttributeUInt32Values(uint64_t a1, const void *a2, uint64_t a3, void *__dst, unint64_t a5)
{
  unint64_t v5;
  uint64_t result;

  if (*(_BYTE *)(a1 + 8) == 32)
  {
    v5 = 4 * a3;
    if (!a5)
      return v5;
    if (v5 >= a5)
    {
      memcpy(__dst, a2, 4 * a3);
      return v5;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)5, (uint64_t)a2, a3, __dst, "assertion failure: '%s' (%s:line %i) Unexpected vertex format %d", "attributeDescriptor.format == mtl::VertexFormat::kInt", "copyAttributeUInt32Values", 570, *(unsigned __int8 *)(a1 + 8));
    a1 = _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyAttributeValues", 542, *(_QWORD *)a1, a5, v5);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::copyValenceAttribute(const char **a1, const void *a2, uint64_t a3, void *a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t result;

  if (!strcmp(*a1, "skinnedAnimationRemappedJointIndices"))
  re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "0 == strcmp(attributeDescriptor.name, MeshAttributeNames::kSkinnedAnimationRemappedJointIndices.cstr())", "copyValenceAttribute", 876);
  result = _os_crash();
  __break(1u);
  return result;
}

unint64_t re::copyInfluenceAttribute(_QWORD *a1, int *a2, int *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t result;
  _DWORD *v8;
  int v9;
  int v10;

  result = 8 * a4;
  if (a6)
  {
    if (result < a6)
    {
      re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyInfluenceAttribute", 891, *a1, a6, 8 * a4);
      result = _os_crash();
      __break(1u);
    }
    else if (a4)
    {
      v8 = (_DWORD *)(a5 + 4);
      do
      {
        v9 = *a2++;
        *(v8 - 1) = v9;
        v10 = *a3++;
        *v8 = v10;
        v8 += 2;
        --a4;
      }
      while (a4);
    }
  }
  return result;
}

uint64_t re::copyInfluenceAttribute(_QWORD *a1, const void *a2, uint64_t a3, void *__dst, unint64_t a5)
{
  unint64_t v5;
  uint64_t result;

  v5 = 8 * a3;
  if (!a5)
    return v5;
  if (v5 >= a5)
  {
    memcpy(__dst, a2, 8 * a3);
    return v5;
  }
  re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyAttributeValues", 542, *a1, a5, 8 * a3);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::collectMeshAttributeBuffers(uint64_t a1@<X0>, unint64_t a2@<X1>, int *a3@<X2>, unint64_t a4@<X3>, id *Attribute@<X4>, id **a6@<X8>)
{
  unint64_t v6;
  unint64_t v9;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id *v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  id **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  id *v45;
  unint64_t v46;
  re::MeshDefinition *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  id *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  unint64_t *v61;

  if (!a4)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_70;
  }
  v9 = *a3;
  if (a2 <= v9)
  {
LABEL_70:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v9, a2);
    _os_crash();
    __break(1u);
LABEL_71:
    re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 56, v6);
    _os_crash();
    __break(1u);
LABEL_72:
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
LABEL_73:
    re::internal::assertLog((re::internal *)5, v17, "assertion failure: '%s' (%s:line %i) Unsupported index type %d", "false", "indexDataSlice", 282, v36);
    _os_crash();
    __break(1u);
LABEL_74:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v12 = *(_QWORD *)(a1 + 8 * v9);
  v13 = *(_QWORD *)(v12 + 32);
  re::MeshDefinition::attributes(v12, 0);
  v15 = v13 != 0;
  v57 = v14;
  if (v13)
    v6 = v14 + 1;
  else
    v6 = v14;
  *a6 = Attribute;
  a6[1] = (id *)v6;
  if (!v6)
    goto LABEL_74;
  if (v6 >= 0x492492492492493)
    goto LABEL_71;
  v16 = (*((uint64_t (**)(id *, unint64_t, uint64_t))*Attribute + 4))(Attribute, 56 * v6, 8);
  a6[2] = (id *)v16;
  if (!v16)
    goto LABEL_72;
  v18 = v6 - 1;
  if (v6 != 1)
  {
    do
    {
      *(_QWORD *)v16 = 0;
      *(_WORD *)(v16 + 8) = 256;
      *(_DWORD *)(v16 + 12) = 0;
      *(_DWORD *)(v16 + 16) = 0;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0;
      *(_QWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 4;
      v16 += 56;
      --v18;
    }
    while (v18);
  }
  *(_QWORD *)v16 = 0;
  *(_WORD *)(v16 + 8) = 256;
  *(_DWORD *)(v16 + 12) = 0;
  *(_DWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  *(_QWORD *)(v16 + 48) = 4;
  v19 = (unint64_t)a6[1];
  if (v19 <= v15)
    goto LABEL_74;
  v20 = a6[2];
  if (v13)
  {
    if (*(_BYTE *)(v12 + 24))
    {
      if (*(_BYTE *)(v12 + 24) != 1)
      {
        re::internal::assertLog((re::internal *)5, v17, "assertion failure: '%s' (%s:line %i) Unsupported index type %d", "false", "indexAttributeDescriptor", 261, *(unsigned __int8 *)(v12 + 24));
        _os_crash();
        __break(1u);
        return;
      }
      v21 = &re::MeshDefinition::kIndexUInt32;
    }
    else
    {
      v21 = &re::MeshDefinition::kIndexUInt16;
    }
    *(_OWORD *)v20 = *v21;
    re::FixedArray<re::Slice<unsigned char>>::init<>((uint64_t *)v20 + 3, (uint64_t)Attribute, a4);
  }
  v54 = &v20[7 * (v13 != 0)];
  v56 = (uint64_t)(56 * v19 - 56 * (v13 != 0)) / 56;
  if (v57)
  {
    v22 = 0;
    v6 = 0;
    v23 = (uint64_t *)&v20[7 * (v13 != 0) + 3];
    while (v56 != v6)
    {
      v24 = re::MeshDefinition::attributes(v12, 0);
      if (v25 <= v6)
        goto LABEL_63;
      v26 = *(_QWORD *)(v24 + v22 + 8);
      if (*(_BYTE *)(v24 + v22 + 16))
      {
        v27 = *(_QWORD *)(v24 + v22 + 32);
        v28 = *(unsigned __int16 *)(v26 + 8) | ((unint64_t)*(unsigned int *)(v26 + 12) << 32);
      }
      else
      {
        v27 = *(_QWORD *)v26;
        v28 = *(_QWORD *)(v26 + 8);
      }
      *(v23 - 3) = v27;
      *(v23 - 2) = v28;
      re::FixedArray<re::Slice<unsigned char>>::init<>(v23, (uint64_t)Attribute, a4);
      v30 = ((unsigned __int16)re::sizeFromVertexFormat(*((unsigned __int8 *)v23 - 16), v29) + 3) & 0x1FC;
      if (v30 <= v23[3])
        v30 = v23[3];
      v23[3] = v30;
      ++v6;
      v22 += 40;
      v23 += 7;
      if (v57 == v6)
        goto LABEL_28;
    }
    goto LABEL_62;
  }
LABEL_28:
  v12 = a2;
  if (v13)
  {
    v6 = 0;
    v15 = 0;
    if (a4 <= 1)
      v31 = 1;
    else
      v31 = a4;
    while (1)
    {
      v32 = a3[v15];
      if (a2 <= v32)
        break;
      v33 = *(_QWORD *)(a1 + 8 * v32);
      v34 = *(void **)(v33 + 32);
      if (!v34)
        goto LABEL_65;
      Attribute = (id *)objc_msgSend(objc_retainAutorelease(v34), "bytes");
      v35 = objc_msgSend(*(id *)(v33 + 32), "length");
      v36 = *(unsigned __int8 *)(v33 + 24);
      if (*(_BYTE *)(v33 + 24))
      {
        if ((_DWORD)v36 != 1)
          goto LABEL_73;
        v37 = 4;
      }
      else
      {
        v37 = 2;
      }
      v38 = *(_DWORD *)(v33 + 40);
      v39 = v37 * (unint64_t)v38;
      if (v39 > v35)
        goto LABEL_66;
      if ((unint64_t)v20[4] <= v15)
        goto LABEL_67;
      v40 = (id **)((char *)v20[5] + v6);
      *v40 = Attribute;
      v40[1] = (id *)v39;
      *((_DWORD *)v20 + 4) += v38;
      ++v15;
      v6 += 16;
      if (v31 == v15)
        goto LABEL_41;
    }
LABEL_64:
    re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v32, v12);
    _os_crash();
    __break(1u);
LABEL_65:
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) Mesh definition has no index data buffer", "m_indexData.isValid()", "indexDataSlice", 268);
    v35 = _os_crash();
    __break(1u);
LABEL_66:
    re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index data buffer is too small (got %zu bytes, expected %zu bytes)", "requiredSize <= dataSize", "indexDataSlice", 288, v35, v39);
    _os_crash();
    __break(1u);
LABEL_67:
    v6 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_68:
    re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v56, v56);
    _os_crash();
    __break(1u);
    goto LABEL_69;
  }
LABEL_41:
  if (!v57)
    return;
  v41 = 0;
  if (a4 <= 1)
    v42 = 1;
  else
    v42 = a4;
  v58 = v42;
  v59 = a3;
  do
  {
    if (v41 == v56)
      goto LABEL_68;
    v43 = 0;
    v44 = 0;
    v55 = v41;
    v45 = &v54[7 * v41];
    v61 = (unint64_t *)(v45 + 4);
    do
    {
      v46 = v59[v44];
      if (v12 <= v46)
      {
        re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v59[v44], v12);
        _os_crash();
        __break(1u);
LABEL_59:
        re::internal::assertLog((re::internal *)5, v48, "assertion failure: '%s' (%s:line %i) Attribute '%s' has no data buffer", "attribute.data.isValid()", "attributeDataSlice", 933, v15);
        _os_crash();
        __break(1u);
LABEL_60:
        re::internal::assertLog((re::internal *)7, v17, "assertion failure: '%s' (%s:line %i) Attribute '%s' data is too small (got %zu bytes, expected %zu bytes)", "requiredSize <= dataSize", "attributeDataSlice", 941, v15, Attribute, v52);
        _os_crash();
        __break(1u);
LABEL_61:
        v6 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_62:
        re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v56, v56);
        _os_crash();
        __break(1u);
LABEL_63:
        re::internal::assertLog((re::internal *)6, v25, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v6, v25);
        _os_crash();
        __break(1u);
        goto LABEL_64;
      }
      v47 = *(re::MeshDefinition **)(a1 + 8 * v46);
      Attribute = (id *)re::MeshDefinition::tryGetAttribute(v47, (const char *)*v45);
      v49 = re::MeshDefinition::attributeElementCount(v47, (const VertexAttributeDescriptor *)*((unsigned __int8 *)v45 + 9));
      v50 = (unint64_t *)Attribute[1];
      if (*((_BYTE *)Attribute + 16))
      {
        v15 = (unint64_t)Attribute[4];
        v6 = *((unsigned __int8 *)v50 + 8);
      }
      else
      {
        v15 = *v50;
        v6 = v50[1];
      }
      if (!*Attribute)
        goto LABEL_59;
      v12 = objc_msgSend(objc_retainAutorelease(*Attribute), "bytes");
      Attribute = (id *)objc_msgSend(*Attribute, "length");
      v52 = (((unsigned __int16)re::sizeFromVertexFormat(v6, v51) + 3) & 0x1FC) * v49;
      if (v52 > (unint64_t)Attribute)
        goto LABEL_60;
      v15 = *v61;
      if (*v61 <= v44)
        goto LABEL_61;
      v53 = (unint64_t *)((char *)v45[5] + v43);
      *v53 = v12;
      v53[1] = v52;
      *((_DWORD *)v45 + 4) += v49;
      ++v44;
      v43 += 16;
      v12 = a2;
    }
    while (v58 != v44);
    v41 = v55 + 1;
  }
  while (v55 + 1 != v57);
}

void re::FixedArray<re::Slice<unsigned char>>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (a3 >> 60)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, a3);
    _os_crash();
    __break(1u);
    goto LABEL_7;
  }
  v5 = 16 * a3;
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_7:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 16);
    v8 = (_QWORD *)((char *)v8 + v5 - 16);
  }
  *v8 = 0;
  v8[1] = 0;
}

void re::MeshDefinition::AttributeArray::~AttributeArray(re::MeshDefinition::AttributeArray *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED78140;
  re::FixedArray<re::Optional<re::StringID>>::deinit((_QWORD *)this + 6);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if (*((_QWORD *)this + 4))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 5));
      *((_QWORD *)this + 4) = 0;
      *((_QWORD *)this + 5) = 0;
    }
    *((_QWORD *)this + 3) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED78140;
  re::FixedArray<re::Optional<re::StringID>>::deinit((_QWORD *)this + 6);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if (*((_QWORD *)this + 4))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 5));
      *((_QWORD *)this + 4) = 0;
      *((_QWORD *)this + 5) = 0;
    }
    *((_QWORD *)this + 3) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

void re::FixedArray<re::MeshDefinition::VertexAttributeDescriptor const*>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 8 * a3;
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 8 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 8);
    v8 = (_QWORD *)((char *)v8 + v5 - 8);
  }
  *v8 = 0;
}

_QWORD *re::FixedArray<re::Optional<re::StringID>>::init<>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;

  *result = a2;
  result[1] = a3;
  if (!a3)
    return result;
  if (a3 >= 0xAAAAAAAAAAAAAABLL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 24, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 24 * a3, 8);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_BYTE *)result = 0;
      result += 3;
      --v6;
    }
    while (v6);
  }
  *(_BYTE *)result = 0;
  return result;
}

_QWORD *re::FixedArray<re::Optional<re::StringID>>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  re::StringID *v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = 24 * v2;
      v5 = (re::StringID *)(result[2] + 8);
      do
      {
        if (*((_BYTE *)v5 - 8))
          re::StringID::destroyString(v5);
        v5 = (re::StringID *)((char *)v5 + 24);
        v4 -= 24;
      }
      while (v4);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

id *re::RenderGraphNodeBase::getEncoderLabel(re::RenderGraphNodeBase *this)
{
  id *v1;
  id v2;
  id v3;
  id v5;

  v1 = (id *)((char *)this + 88);
  if (!*((_QWORD *)this + 11))
  {
    re::ns::String::format((re::ns::String *)"%s::%s::%s", &v5, *((_QWORD *)this + 3), *((_QWORD *)this + 4), *((_QWORD *)this + 2));
    if (v1 != &v5)
    {
      v2 = v5;
      v5 = 0;
      v3 = *v1;
      *v1 = v2;

    }
  }
  return v1;
}

uint64_t *re::allocInfo_RenderGraphNodeBase(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25411A1A0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411A1A0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411A1C8, 0);
    *(uint64_t *)((char *)&qword_25411A1D8 + 6) = 0;
    qword_25411A1D8 = 0;
    qword_25411A1E8 = 0;
    qword_25411A1F0 = 0xFFFFFFFFLL;
    qword_25411A1C8 = (uint64_t)&off_24ED7DAA8;
    qword_25411A1F8 = (uint64_t)"RenderGraphNodeBase";
    dword_25411A200 = 0;
    unk_25411A208 = 0u;
    unk_25411A218 = 0u;
    unk_25411A228 = 0u;
    qword_25411A238 = 0;
    __cxa_guard_release(&qword_25411A1A0);
  }
  return &qword_25411A1C8;
}

void re::initInfo_RenderGraphNodeBase(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[2];
  __int128 v24;

  v23[0] = 0x11A172D93A739296;
  v23[1] = "RenderGraphNodeBase";
  re::StringID::destroyString((re::StringID *)v23);
  *((_OWORD *)this + 2) = v24;
  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_391);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&_MergedGlobals_391);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::StringID>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "name";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0x800000001;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_25411A1A8 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_BOOL((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "AutoMSAA";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x4100000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_25411A1B0 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_BOOL((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "EnableVRR";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x4300000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_25411A1B8 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_BOOL((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "Enabled";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x4000000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_25411A1C0 = v21;
      __cxa_guard_release(&_MergedGlobals_391);
    }
  }
  *((_QWORD *)this + 2) = 0x6000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_25411A1A8;
  re::IntrospectionRegistry::add(this, v3);
  v22 = v24;
}

uint64_t re::introspect_RenderGraphNodeBase(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphNodeBase", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphNodeBase, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphNodeBase, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphNodeBase>, this);
}

_QWORD *re::PlanarReflectionContext::makeReflectionCameraMultiViews@<X0>(re::PlanarReflectionContext *this@<X0>, re::RenderFrame *a2@<X1>, const re::CameraMultiView *a3@<X2>, uint64_t a4@<X8>)
{
  re::RenderFrame *v5;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  const re::CameraMultiView *v11;
  uint64_t v12;
  re::CameraView *v13;
  re::PlanarReflectionContext *v14;
  re::RenderFrame *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[40];
  __int16 v32;
  _BYTE v33[48];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  char v42;
  int v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD v58[2];
  _BYTE v59[32];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _WORD v72[24];
  _OWORD v73[7];
  uint64_t v74;
  char v75;
  BOOL v76;
  char v77;
  BOOL v78;
  int v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _OWORD v94[2];
  _OWORD v95[14];
  _WORD v96[24];
  _OWORD v97[7];
  uint64_t v98;
  char v99;
  BOOL v100;
  char v101;
  BOOL v102;
  int v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  _OWORD v118[3];
  uint64_t v119;

  v5 = a2;
  v119 = *MEMORY[0x24BDAC8D0];
  v8 = *((_QWORD *)a2 + 47);
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)a4 = v8;
  result = re::DynamicArray<re::CameraMultiView>::setCapacity((_QWORD *)a4, 0);
  ++*(_DWORD *)(a4 + 24);
  if (*((_QWORD *)this + 2))
  {
    v10 = 0;
    v13 = (const re::CameraMultiView *)((char *)a3 + 672);
    v14 = this;
    v15 = v5;
    do
    {
      re::CameraMultiView::CameraMultiView((re::CameraMultiView *)v59, a3);
      re::PlanarReflectionContext::makeReflectionCameraView(this, v5, a3, v10, (uint64_t)&v17);
      re::DynamicString::operator=((re::DynamicString *)v59, (re::DynamicString *)&v17);
      v68 = v27;
      v69 = v28;
      v70 = v29;
      v71 = v30;
      v64 = v23;
      v65 = v24;
      v66 = v25;
      v67 = v26;
      v60 = v19;
      v61 = v20;
      v62 = v21;
      v63 = v22;
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v72, (uint64_t)v31);
      v72[20] = v32;
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v73, (uint64_t)v33);
      v73[5] = v36;
      v73[6] = v37;
      v74 = v38;
      v73[3] = v34;
      v73[4] = v35;
      v75 = v39;
      if (v76 || v40)
      {
        if (!v76 || v40)
        {
          if (!v76)
            v76 = v40 != 0;
          v77 = v41;
        }
        else
        {
          v76 = 0;
        }
      }
      if (v78 || v42)
      {
        if (!v78 || v42)
        {
          if (!v78)
            v78 = v42 != 0;
          v79 = v43;
        }
        else
        {
          v78 = 0;
        }
      }
      v84 = v48;
      v85 = v49;
      v86 = v50;
      v87 = v51;
      v80 = v44;
      v81 = v45;
      v82 = v46;
      v83 = v47;
      v90 = v54;
      v91 = v55;
      v88 = v52;
      v89 = v53;
      *(_QWORD *)((char *)v94 + 13) = *(_QWORD *)((char *)v58 + 13);
      v93 = v57;
      v94[0] = v58[0];
      v92 = v56;
      re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)v33);
      re::DynamicArray<re::RenderGraphFileProvider>::deinit((uint64_t)v31);
      if (v17 && (v18[0] & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v17 + 40))();
      re::PlanarReflectionContext::makeReflectionCameraView(this, v5, v13, v10, (uint64_t)&v17);
      re::DynamicString::operator=((re::DynamicString *)v95, (re::DynamicString *)&v17);
      v95[10] = v27;
      v95[11] = v28;
      v95[12] = v29;
      v95[13] = v30;
      v95[6] = v23;
      v95[7] = v24;
      v95[8] = v25;
      v95[9] = v26;
      v95[2] = v19;
      v95[3] = v20;
      v95[4] = v21;
      v95[5] = v22;
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v96, (uint64_t)v31);
      v96[20] = v32;
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v97, (uint64_t)v33);
      v97[5] = v36;
      v97[6] = v37;
      v98 = v38;
      v97[3] = v34;
      v97[4] = v35;
      v99 = v39;
      if (v100 || v40)
      {
        if (!v100 || v40)
        {
          if (!v100)
            v100 = v40 != 0;
          v101 = v41;
        }
        else
        {
          v100 = 0;
        }
      }
      if (v102 || v42)
      {
        if (!v102 || v42)
        {
          if (!v102)
            v102 = v42 != 0;
          v103 = v43;
        }
        else
        {
          v102 = 0;
        }
      }
      v16 = v10;
      v108 = v48;
      v109 = v49;
      v110 = v50;
      v111 = v51;
      v104 = v44;
      v105 = v45;
      v106 = v46;
      v107 = v47;
      v114 = v54;
      v115 = v55;
      v112 = v52;
      v113 = v53;
      *(_QWORD *)((char *)v118 + 13) = *(_QWORD *)((char *)v58 + 13);
      v117 = v57;
      v118[0] = v58[0];
      v116 = v56;
      re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)v33);
      re::DynamicArray<re::RenderGraphFileProvider>::deinit((uint64_t)v31);
      if (v17 && (v18[0] & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v17 + 40))();
      if (*((_BYTE *)a3 + 1344) == 1 && !*((_BYTE *)a3 + 1345))
      {
        v88 = xmmword_2261688B0;
        v112 = xmmword_2261688C0;
      }
      v11 = a3;
      re::DynamicArray<re::CameraMultiView>::add((_anonymous_namespace_ *)a4, (uint64_t)v59);
      v12 = 1344;
      do
      {
        re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v33[v12]);
        re::DynamicArray<re::RenderGraphFileProvider>::deinit((uint64_t)&v31[v12]);
        result = *(_QWORD **)&v18[v12 - 8];
        if (result)
        {
          if ((v18[v12] & 1) != 0)
            result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 40))(result, *(_QWORD *)&v18[v12 + 8]);
          *(_OWORD *)&v18[v12 - 8] = 0u;
          *(_OWORD *)&v18[v12 + 8] = 0u;
        }
        v12 -= 672;
      }
      while (v12);
      ++v10;
      this = v14;
      a3 = v11;
      v5 = v15;
    }
    while (*((_QWORD *)v14 + 2) > (unint64_t)(v16 + 1));
  }
  return result;
}

float32_t re::PlanarReflectionContext::makeReflectionCameraView@<S0>(re::PlanarReflectionContext *this@<X0>, re::RenderFrame *a2@<X1>, const re::CameraView *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  re::DynamicString *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  BOOL v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  uint64_t v46;
  uint64_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float v52;
  float v54;
  unsigned int v55;
  float32x2_t v56;
  float32x2_t v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  unsigned int v64;
  float32x2_t v65;
  float32x2_t v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float32x2_t v72;
  float32x2_t v73;
  float v74;
  float v75;
  unsigned int v76;
  float32x2_t v77;
  float32x2_t v78;
  __int128 v79;
  float v80;
  float v81;
  float v82;
  const char *v83;
  float32x4_t v84;
  int32x4_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32_t result;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  _OWORD v98[4];
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  __int128 v103;
  _BYTE v104[48];
  __int128 v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v10 = (re::DynamicString *)*((_QWORD *)a2 + 47);
  re::DynamicString::DynamicString((re::DynamicString *)a5, a3);
  v11 = *((_OWORD *)a3 + 11);
  *(_OWORD *)(a5 + 160) = *((_OWORD *)a3 + 10);
  *(_OWORD *)(a5 + 176) = v11;
  v12 = *((_OWORD *)a3 + 13);
  *(_OWORD *)(a5 + 192) = *((_OWORD *)a3 + 12);
  *(_OWORD *)(a5 + 208) = v12;
  v13 = *((_OWORD *)a3 + 7);
  *(_OWORD *)(a5 + 96) = *((_OWORD *)a3 + 6);
  *(_OWORD *)(a5 + 112) = v13;
  v14 = *((_OWORD *)a3 + 9);
  *(_OWORD *)(a5 + 128) = *((_OWORD *)a3 + 8);
  *(_OWORD *)(a5 + 144) = v14;
  v15 = *((_OWORD *)a3 + 3);
  *(_OWORD *)(a5 + 32) = *((_OWORD *)a3 + 2);
  *(_OWORD *)(a5 + 48) = v15;
  v16 = *((_OWORD *)a3 + 5);
  *(_OWORD *)(a5 + 64) = *((_OWORD *)a3 + 4);
  *(_OWORD *)(a5 + 80) = v16;
  re::DynamicArray<re::RenderGraphFileProvider>::DynamicArray(a5 + 224, (uint64_t *)a3 + 28);
  *(_WORD *)(a5 + 264) = *((_WORD *)a3 + 132);
  re::DynamicArray<re::CameraView::PickupScopeLane>::DynamicArray(a5 + 272, (uint64_t *)a3 + 34);
  v17 = *((_OWORD *)a3 + 21);
  *(_OWORD *)(a5 + 320) = *((_OWORD *)a3 + 20);
  *(_OWORD *)(a5 + 336) = v17;
  v18 = *((_OWORD *)a3 + 23);
  *(_OWORD *)(a5 + 352) = *((_OWORD *)a3 + 22);
  *(_OWORD *)(a5 + 368) = v18;
  *(_BYTE *)(a5 + 400) = *((_BYTE *)a3 + 400);
  v19 = *((unsigned __int8 *)a3 + 401);
  *(_BYTE *)(a5 + 401) = v19;
  if (v19)
    *(_BYTE *)(a5 + 402) = *((_BYTE *)a3 + 402);
  v20 = *((unsigned __int8 *)a3 + 404);
  *(_BYTE *)(a5 + 404) = v20;
  if (v20)
    *(_DWORD *)(a5 + 408) = *((_DWORD *)a3 + 102);
  v21 = *((_OWORD *)a3 + 31);
  *(_OWORD *)(a5 + 480) = *((_OWORD *)a3 + 30);
  *(_OWORD *)(a5 + 496) = v21;
  v22 = *((_OWORD *)a3 + 33);
  *(_OWORD *)(a5 + 512) = *((_OWORD *)a3 + 32);
  *(_OWORD *)(a5 + 528) = v22;
  v23 = *((_OWORD *)a3 + 27);
  *(_OWORD *)(a5 + 416) = *((_OWORD *)a3 + 26);
  *(_OWORD *)(a5 + 432) = v23;
  v24 = *((_OWORD *)a3 + 29);
  *(_OWORD *)(a5 + 448) = *((_OWORD *)a3 + 28);
  *(_OWORD *)(a5 + 464) = v24;
  v25 = *((_OWORD *)a3 + 34);
  v26 = *((_OWORD *)a3 + 35);
  v27 = *((_OWORD *)a3 + 37);
  *(_OWORD *)(a5 + 576) = *((_OWORD *)a3 + 36);
  *(_OWORD *)(a5 + 592) = v27;
  *(_OWORD *)(a5 + 544) = v25;
  *(_OWORD *)(a5 + 560) = v26;
  v28 = *((_OWORD *)a3 + 38);
  v29 = *((_OWORD *)a3 + 39);
  v30 = *((_OWORD *)a3 + 40);
  *(_QWORD *)(a5 + 653) = *(_QWORD *)((char *)a3 + 653);
  *(_OWORD *)(a5 + 624) = v29;
  *(_OWORD *)(a5 + 640) = v30;
  v31 = (char *)*((_QWORD *)a3 + 2);
  v32 = (*((_QWORD *)a3 + 1) & 1) == 0;
  *(_OWORD *)(a5 + 608) = v28;
  v33 = (char *)a3 + 9;
  if (!v32)
    v33 = v31;
  *(_QWORD *)(a5 + 384) = -1;
  re::DynamicString::format(v10, (re::Allocator *)"%s_R%u", (re::DynamicString *)&v99, v33, a4);
  re::DynamicString::operator=((re::DynamicString *)a5, (re::DynamicString *)&v99);
  if (v99.i64[0] && (v99.i8[8] & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v99.i64[0] + 40))();
  *(_DWORD *)(a5 + 356) = 1;
  *(_OWORD *)(a5 + 544) = xmmword_22610BC10;
  *(_DWORD *)(a5 + 640) = -1;
  v34 = *((_QWORD *)this + 2);
  if (v34 <= (int)a4)
  {
    *(_QWORD *)&v98[0] = 0;
    v102 = 0u;
    v103 = 0u;
    v100 = 0u;
    v101 = 0u;
    v99 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v104 = 136315906;
    *(_QWORD *)&v104[4] = "operator[]";
    *(_WORD *)&v104[12] = 1024;
    *(_DWORD *)&v104[14] = 789;
    *(_WORD *)&v104[18] = 2048;
    *(_QWORD *)&v104[20] = (int)a4;
    *(_WORD *)&v104[28] = 2048;
    *(_QWORD *)&v104[30] = v34;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v35 = *((_QWORD *)this + 4);
  v36 = *(float32x4_t *)(v35 + 32 * (int)a4);
  v37.i64[0] = 0xC0000000C0000000;
  v37.i64[1] = 0xC0000000C0000000;
  v38 = vmulq_f32(v36, v37);
  v39 = (int32x4_t)vaddq_f32(vmulq_n_f32(v36, v38.f32[0]), (float32x4_t)xmmword_2260E5F10);
  v40 = (int32x4_t)vaddq_f32(vmulq_lane_f32(v36, *(float32x2_t *)v38.f32, 1), (float32x4_t)xmmword_2260E5F20);
  v97 = v36;
  v41 = (int32x4_t)vaddq_f32(vmulq_laneq_f32(v36, v38, 2), (float32x4_t)xmmword_2260E5F40);
  v42 = vzip1q_s32(v39, v41);
  v43 = vzip2q_s32(v39, v41);
  v44 = vzip1q_s32(v40, (int32x4_t)0);
  v45 = vzip2q_s32(v40, (int32x4_t)xmmword_2260E5D70);
  v95 = (float32x4_t)vzip1q_s32(v42, v44);
  v96 = (float32x4_t)vzip2q_s32(v42, v44);
  v93 = (float32x4_t)vzip2q_s32(v43, v45);
  v94 = (float32x4_t)vzip1q_s32(v43, v45);
  re::RenderCamera::computeLocalTransform((const re::CameraView *)((char *)a3 + 32), (uint64_t)v98);
  v46 = 0;
  *(_OWORD *)v104 = v98[0];
  *(_OWORD *)&v104[16] = v98[1];
  *(_OWORD *)&v104[32] = v98[2];
  v105 = v98[3];
  do
  {
    *(float32x4_t *)((char *)&v99 + v46) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v95, COERCE_FLOAT(*(_OWORD *)&v104[v46])), v96, *(float32x2_t *)&v104[v46], 1), v94, *(float32x4_t *)&v104[v46], 2), v93, *(float32x4_t *)&v104[v46], 3);
    v46 += 16;
  }
  while (v46 != 64);
  v47 = 0;
  v48 = v99;
  v49 = v100;
  v50 = v101;
  v51 = v102;
  *(_OWORD *)v104 = xmmword_2260E5F10;
  *(_OWORD *)&v104[16] = xmmword_2260E5F50;
  *(_OWORD *)&v104[32] = xmmword_2260E5F40;
  v105 = xmmword_2260E5D70;
  do
  {
    *(float32x4_t *)((char *)&v99 + v47) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v48, COERCE_FLOAT(*(_OWORD *)&v104[v47])), v49, *(float32x2_t *)&v104[v47], 1), v50, *(float32x4_t *)&v104[v47], 2), v51, *(float32x4_t *)&v104[v47], 3);
    v47 += 16;
  }
  while (v47 != 64);
  v52 = (float)(v99.f32[0] + v100.f32[1]) + v101.f32[2];
  if (v52 >= 0.0)
  {
    v70 = sqrtf(v52 + 1.0);
    v71 = v70 + v70;
    v72 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v70 + v70));
    v73 = vmul_f32(v72, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v70 + v70), v72));
    v74 = vmul_f32(v73, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v70 + v70), v73)).f32[0];
    *(float *)&v79 = (float)(v100.f32[2] - v101.f32[1]) * v74;
    v80 = (float)(v101.f32[0] - v99.f32[2]) * v74;
    v81 = (float)(v99.f32[1] - v100.f32[0]) * v74;
    v82 = v71 * 0.25;
  }
  else if (v99.f32[0] < v100.f32[1] || v99.f32[0] < v101.f32[2])
  {
    v54 = sqrtf((float)((float)(1.0 - v99.f32[0]) - v100.f32[1]) + v101.f32[2]);
    *(float *)&v55 = v54 + v54;
    v56 = vrecpe_f32((float32x2_t)v55);
    v57 = vmul_f32(v56, vrecps_f32((float32x2_t)v55, v56));
    v58 = vmul_f32(v57, vrecps_f32((float32x2_t)v55, v57)).f32[0];
    v59 = (float)(v99.f32[2] + v101.f32[0]) * v58;
    v60 = (float)(v100.f32[2] + v101.f32[1]) * v58;
    v61 = *(float *)&v55 * 0.25;
    v62 = (float)(v99.f32[1] - v100.f32[0]) * v58;
    v63 = sqrtf(v100.f32[1] + (float)((float)(1.0 - v99.f32[0]) - v101.f32[2]));
    *(float *)&v64 = v63 + v63;
    v65 = vrecpe_f32((float32x2_t)v64);
    v66 = vmul_f32(v65, vrecps_f32((float32x2_t)v64, v65));
    v67 = vmul_f32(v66, vrecps_f32((float32x2_t)v64, v66)).f32[0];
    v68 = *(float *)&v64 * 0.25;
    v69 = (float)(v100.f32[2] + v101.f32[1]) * v67;
    v82 = (float)(v101.f32[0] - v99.f32[2]) * v67;
    if (v100.f32[1] >= v101.f32[2])
      *(float *)&v79 = (float)(v99.f32[1] + v100.f32[0]) * v67;
    else
      *(float *)&v79 = v59;
    if (v100.f32[1] >= v101.f32[2])
      v80 = v68;
    else
      v80 = v60;
    if (v100.f32[1] >= v101.f32[2])
      v81 = v69;
    else
      v81 = v61;
    if (v100.f32[1] < v101.f32[2])
      v82 = v62;
  }
  else
  {
    v75 = sqrtf(v99.f32[0] + (float)((float)(1.0 - v100.f32[1]) - v101.f32[2]));
    *(float *)&v76 = v75 + v75;
    v77 = vrecpe_f32((float32x2_t)v76);
    v78 = vmul_f32(v77, vrecps_f32((float32x2_t)v76, v77));
    v78.f32[0] = vmul_f32(v78, vrecps_f32((float32x2_t)v76, v78)).f32[0];
    *(float *)&v79 = *(float *)&v76 * 0.25;
    v80 = (float)(v99.f32[1] + v100.f32[0]) * v78.f32[0];
    v81 = (float)(v99.f32[2] + v101.f32[0]) * v78.f32[0];
    v82 = (float)(v100.f32[2] - v101.f32[1]) * v78.f32[0];
  }
  *((float *)&v79 + 1) = v80;
  *((_QWORD *)&v79 + 1) = __PAIR64__(LODWORD(v82), LODWORD(v81));
  *(float32x4_t *)(a5 + 32) = v102;
  *(_OWORD *)(a5 + 48) = v79;
  v99.i64[0] = 65290051;
  if ((*(_QWORD *)(a5 + 8) & 1) != 0)
    v83 = *(const char **)(a5 + 16);
  else
    v83 = (const char *)(a5 + 9);
  re::RenderFrame::specifyScopeLane(a2, (uint64_t *)&v99, (void **)(v35 + 32 * (int)a4 + 16), v83);
  re::RenderCamera::computeInverseTransform((float32x4_t *)(a5 + 32), (uint64_t)&v99);
  v84 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v99, v97.f32[0]), v100, *(float32x2_t *)v97.f32, 1), v101, v97, 2);
  v85 = (int32x4_t)vmulq_f32(v84, v84);
  v85.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v85, 2), vadd_f32(*(float32x2_t *)v85.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v85.i8, 1))).u32[0];
  v86 = vrsqrte_f32((float32x2_t)v85.u32[0]);
  v87 = vmul_f32(v86, vrsqrts_f32((float32x2_t)v85.u32[0], vmul_f32(v86, v86)));
  v85.i32[0] = vmul_f32(v87, vrsqrts_f32((float32x2_t)v85.u32[0], vmul_f32(v87, v87))).u32[0];
  v88 = vmulq_n_f32(v97, -v97.f32[3]);
  v89 = vaddq_f32(v102, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v99, v88.f32[0]), v100, *(float32x2_t *)v88.f32, 1), v101, v88, 2));
  v90 = vmulq_n_f32(v84, *(float *)v85.i32);
  v91 = vmulq_f32(v90, vdivq_f32(v89, (float32x4_t)vdupq_laneq_s32((int32x4_t)v89, 3)));
  result = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v91, 2), vaddq_f32(v91, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v91.f32, 1))).f32[0];
  v90.f32[3] = result;
  *(float32x4_t *)(a5 + 96) = v90;
  *(_BYTE *)(a5 + 92) = 1;
  return result;
}

_QWORD *re::PlanarReflectionContext::makeReflectionCameraViews@<X0>(re::PlanarReflectionContext *this@<X0>, re::RenderFrame *a2@<X1>, const re::CameraView *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *result;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD v14[52];

  v14[51] = *MEMORY[0x24BDAC8D0];
  v8 = *((_QWORD *)a2 + 47);
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)a4 = v8;
  result = re::DynamicArray<re::CameraView>::setCapacity((_QWORD *)a4, 0);
  ++*(_DWORD *)(a4 + 24);
  if (*((_QWORD *)this + 2))
  {
    v10 = 0;
    do
    {
      re::PlanarReflectionContext::makeReflectionCameraView(this, a2, a3, v10, (uint64_t)&v11);
      re::DynamicArray<re::CameraView>::add((_anonymous_namespace_ *)a4, (uint64_t)&v11);
      re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)v14);
      re::DynamicArray<re::RenderGraphFileProvider>::deinit((uint64_t)&v13);
      result = (_QWORD *)v11;
      if (v11)
      {
        if ((v12 & 1) != 0)
          result = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v11 + 40))();
      }
      ++v10;
    }
    while (*((_QWORD *)this + 2) > v10);
  }
  return result;
}

__n128 re::DynamicArray<re::CameraView>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __n128 result;
  __int128 v41;
  __int128 v42;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::CameraView>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4);
  v6 = v5 + 672 * v4;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_QWORD *)(v6 + 24) = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v6 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 24) = 0;
  v10 = *(_QWORD *)(v6 + 8);
  v9 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(v6 + 8) = v7;
  *(_QWORD *)(v6 + 16) = v8;
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = v9;
  v11 = *(_OWORD *)(a2 + 32);
  v12 = *(_OWORD *)(a2 + 48);
  v13 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v6 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 80) = v13;
  *(_OWORD *)(v6 + 32) = v11;
  *(_OWORD *)(v6 + 48) = v12;
  v14 = *(_OWORD *)(a2 + 96);
  v15 = *(_OWORD *)(a2 + 112);
  v16 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v6 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v6 + 144) = v16;
  *(_OWORD *)(v6 + 96) = v14;
  *(_OWORD *)(v6 + 112) = v15;
  v17 = *(_OWORD *)(a2 + 160);
  v18 = *(_OWORD *)(a2 + 176);
  v19 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(v6 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(v6 + 208) = v19;
  *(_OWORD *)(v6 + 160) = v17;
  *(_OWORD *)(v6 + 176) = v18;
  *(_QWORD *)(v6 + 256) = 0;
  *(_DWORD *)(v6 + 248) = 0;
  *(_QWORD *)(v6 + 232) = 0;
  *(_QWORD *)(v6 + 240) = 0;
  *(_QWORD *)(v6 + 224) = 0;
  v20 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(v6 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(v6 + 232) = v20;
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  v21 = *(_QWORD *)(v6 + 240);
  *(_QWORD *)(v6 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = v21;
  v22 = *(_QWORD *)(v6 + 256);
  *(_QWORD *)(v6 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 256) = v22;
  ++*(_DWORD *)(a2 + 248);
  ++*(_DWORD *)(v6 + 248);
  *(_WORD *)(v6 + 264) = *(_WORD *)(a2 + 264);
  *(_QWORD *)(v6 + 304) = 0;
  *(_DWORD *)(v6 + 296) = 0;
  *(_QWORD *)(v6 + 280) = 0;
  *(_QWORD *)(v6 + 288) = 0;
  *(_QWORD *)(v6 + 272) = 0;
  v23 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(v6 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(v6 + 280) = v23;
  *(_QWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a2 + 280) = 0;
  v24 = *(_QWORD *)(v6 + 288);
  *(_QWORD *)(v6 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a2 + 288) = v24;
  v25 = *(_QWORD *)(v6 + 304);
  *(_QWORD *)(v6 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 304) = v25;
  ++*(_DWORD *)(a2 + 296);
  ++*(_DWORD *)(v6 + 296);
  *(_OWORD *)(v6 + 320) = *(_OWORD *)(a2 + 320);
  v26 = *(_OWORD *)(a2 + 336);
  v27 = *(_OWORD *)(a2 + 352);
  v28 = *(_OWORD *)(a2 + 368);
  *(_QWORD *)(v6 + 384) = *(_QWORD *)(a2 + 384);
  *(_OWORD *)(v6 + 352) = v27;
  *(_OWORD *)(v6 + 368) = v28;
  *(_OWORD *)(v6 + 336) = v26;
  *(_BYTE *)(v6 + 400) = *(_BYTE *)(a2 + 400);
  LODWORD(v25) = *(unsigned __int8 *)(a2 + 401);
  *(_BYTE *)(v6 + 401) = v25;
  if ((_DWORD)v25)
    *(_BYTE *)(v5 + 672 * v4 + 402) = *(_BYTE *)(a2 + 402);
  v29 = *(unsigned __int8 *)(a2 + 404);
  *(_BYTE *)(v5 + 672 * v4 + 404) = v29;
  if (v29)
    *(_DWORD *)(v5 + 672 * v4 + 408) = *(_DWORD *)(a2 + 408);
  v30 = v5 + 672 * v4;
  v31 = *(_OWORD *)(a2 + 416);
  v32 = *(_OWORD *)(a2 + 432);
  v33 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(v30 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(v30 + 464) = v33;
  *(_OWORD *)(v30 + 416) = v31;
  *(_OWORD *)(v30 + 432) = v32;
  v34 = *(_OWORD *)(a2 + 480);
  v35 = *(_OWORD *)(a2 + 496);
  v36 = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(v30 + 512) = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(v30 + 528) = v36;
  *(_OWORD *)(v30 + 480) = v34;
  *(_OWORD *)(v30 + 496) = v35;
  v38 = *(_OWORD *)(a2 + 624);
  v37 = *(_OWORD *)(a2 + 640);
  v39 = *(_OWORD *)(a2 + 608);
  *(_QWORD *)(v30 + 653) = *(_QWORD *)(a2 + 653);
  *(_OWORD *)(v30 + 624) = v38;
  *(_OWORD *)(v30 + 640) = v37;
  *(_OWORD *)(v30 + 608) = v39;
  result = *(__n128 *)(a2 + 544);
  v41 = *(_OWORD *)(a2 + 560);
  v42 = *(_OWORD *)(a2 + 592);
  *(_OWORD *)(v30 + 576) = *(_OWORD *)(a2 + 576);
  *(_OWORD *)(v30 + 592) = v42;
  *(__n128 *)(v30 + 544) = result;
  *(_OWORD *)(v30 + 560) = v41;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

re::mtl::MipGenPolyphase *re::mtl::MipGenPolyphase::MipGenPolyphase(re::mtl::MipGenPolyphase *this, const re::mtl::Library *a2)
{
  REMipGenPolyphase *v3;

  v3 = -[REMipGenPolyphase initWithLibrary:]([REMipGenPolyphase alloc], "initWithLibrary:", *(_QWORD *)a2);
  *(_QWORD *)this = v3;

  return this;
}

uint64_t re::GPUAttributeFormatConverter::getBufferIndex(re *a1)
{
  unint64_t v2;
  uint64_t result;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)a1 >> 1;
  if (v2 > 0x16172F2CA64F41ELL)
  {
    if (*(_QWORD *)a1 >> 1 > 0x2ED0816D3076E800uLL)
    {
      switch(v2)
      {
        case 0x2ED0816D3076E801uLL:
          return 4;
        case 0x3CB5CD20F43A4EDAuLL:
          return 5;
        case 0x5353CF4AA93DFAB9uLL:
          return 1;
      }
    }
    else
    {
      switch(v2)
      {
        case 0x16172F2CA64F41FuLL:
          return 2;
        case 0x2ACCEB6695018FABuLL:
          return 3;
        case 0x2B3FAC222C23CAEDuLL:
          return 0;
      }
    }
LABEL_25:
    v4 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      v5 = *((_QWORD *)a1 + 1);
      v6 = 136315138;
      v7 = v5;
      _os_log_debug_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEBUG, "Unknown attribute type '%s'", (uint8_t *)&v6, 0xCu);
    }
    return 14;
  }
  else
  {
    switch(v2)
    {
      case 0x5E27ADA1858CuLL:
        result = 7;
        break;
      case 0x5E27ADA1858DuLL:
        result = 8;
        break;
      case 0x5E27ADA1858EuLL:
        result = 9;
        break;
      case 0x5E27ADA1858FuLL:
        result = 10;
        break;
      case 0x5E27ADA18590uLL:
        result = 11;
        break;
      case 0x5E27ADA18591uLL:
        result = 12;
        break;
      case 0x5E27ADA18592uLL:
        result = 13;
        break;
      default:
        if (v2 != 0x30989BAE345)
          goto LABEL_25;
        result = 6;
        break;
    }
  }
  return result;
}

uint64_t re::GPUAttributeFormatConverter::getOutputAttributeSize(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = a1 >> 1;
  if (a1 >> 1 <= 0x16172F2CA64F41ELL)
  {
    if ((unint64_t)(v2 - 0x5E27ADA1858DLL) >= 6 && (v2 == 0x30989BAE345 || v2 == 0x5E27ADA1858CLL))
      return 8;
    return 16;
  }
  result = 12;
  if (v2 > 0x2ED0816D3076E800)
  {
    if (v2 != 0x2ED0816D3076E801 && v2 != 0x3CB5CD20F43A4EDALL)
    {
      if (v2 == 0x5353CF4AA93DFAB9)
        return a2;
      return 16;
    }
  }
  else if (v2 == 0x16172F2CA64F41FLL || v2 != 0x2ACCEB6695018FABLL && v2 != 0x2B3FAC222C23CAEDLL)
  {
    return 16;
  }
  return result;
}

void re::GPUAttributeFormatConverter::convertAttributes(uint64_t a1, id *a2, re::AttributeTable *this, _anonymous_namespace_ *a4)
{
  re::AttributeTable *v4;
  id *v7;
  id *v8;
  uint64_t v9;
  re::AttributeTable *v10;
  re::AttributeTable *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  char *v15;
  unsigned __int8 v16;
  re::AttributeTable *v17;
  re::AttributeTable *v18;
  uint64_t v19;
  uint64_t BufferIndex;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char *v30;
  uint64_t v31;
  char *v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  id v41;
  int v42;
  char *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  re *v47;
  uint64_t v48;
  void **v49;
  _QWORD *v50;
  NSObject *v51;
  unsigned __int8 v52;
  id v53;
  uint64_t v54;
  _anonymous_namespace_ *v55;
  _QWORD *ComputePipelineState;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _anonymous_namespace_ *v61;
  char v62;
  size_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  int OutputAttributeSize;
  int v68;
  unint64_t v69;
  __n128 v70;
  re::ns::String *v71;
  _BYTE *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  id v88;
  unint64_t v89;
  unint64_t v90;
  char v91;
  unsigned int v92;
  unsigned int v94;
  uint64_t v95;
  unsigned __int8 *v96;
  uint64_t v97;
  _BYTE v98[16];
  unint64_t v99[2];
  _QWORD v100[2];
  _QWORD v101[2];
  id v102;
  _BYTE v103[16];
  unint64_t v104[2];
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  re *v110;
  id v111[22];
  int v112;
  id v113;
  id v114;
  id v115;
  uint64_t v116;
  uint8_t buf[32];
  _BYTE v118[64];
  int v119;
  uint64_t v120;
  __int16 v121;
  char v122;
  uint64_t v123;
  char v124;
  _OWORD v125[3];
  __int128 v126;
  __int128 v127;
  _BYTE v128[28];
  __int16 v129;
  unint64_t v130;
  uint64_t v131;

  v4 = this;
  v131 = *MEMORY[0x24BDAC8D0];
  v7 = (id *)*a2;
  v8 = (id *)*((_QWORD *)*a2 + 7);
  re::AttributeTable::buffers(this);
  v97 = v9;
  v10 = v4;
  do
  {
    v11 = v10;
    v10 = (re::AttributeTable *)*((_QWORD *)v10 + 1);
  }
  while (v10 && !*((_QWORD *)v11 + 4));
  v12 = *((unsigned int *)v4 + 117);
  v115 = v7[23];
  v13 = (unint64_t)a2[23];
  v111[0] = (id)v13;
  re::mtl::CommandQueue::makeCommandBufferWithUnretainedReferences(v111, &v114);

  re::mtl::CommandBuffer::makeComputeCommandEncoder(&v114, &v113);
  v112 = 0;
  memset(v111, 0, sizeof(v111));
  re::createVertexFetchFunctionKey(v4, (uint64_t)v111);
  re::getOrCreateVertexFetchFunction((uint64_t)a2, v8, (uint64_t)v111, *((const char **)v4 + 64), 0, (uint64_t *)&v110);
  v14 = atomic_load((unsigned __int8 *)v110 + 204);
  if (v14 == 1)
  {
    v15 = (char *)v110 + 204;
    v16 = atomic_load((unsigned __int8 *)v110 + 204);
    *(_QWORD *)&v125[0] = v15;
    BYTE8(v125[0]) = v16;
    HIDWORD(v125[0]) = 5;
    *(_QWORD *)buf = v15;
    *(_OWORD *)&buf[8] = v125[0];
    std::__libcpp_thread_poll_with_backoff[abi:nn180100]<std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,re::VertexFetchCompilationState> &,std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,re::VertexFetchCompilationState>> &>((uint64_t)v125, (uint64_t)buf, 0);
  }
  re::createVertexFetchArgumentBuffer<re::mtl::ComputeCommandEncoder>(&v115, &v113, v4, &v109);
  objc_msgSend(v113, "setBuffer:offset:atIndex:", v109, 0, 30);
  v17 = v4;
  do
  {
    v18 = v17;
    v17 = (re::AttributeTable *)*((_QWORD *)v17 + 1);
  }
  while (v17 && !*((_QWORD *)v18 + 9));
  *(_QWORD *)buf = 0x5353CF4AA93DFAB9;
  v19 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v18 + 6, buf);
  BufferIndex = v19;
  if (v19 == -1)
  {
    v96 = 0;
    v33 = 0;
    goto LABEL_37;
  }
  v21 = *((_QWORD *)v18 + 7) + 16 * v19;
  v22 = re::AttributeTable::buffers(v4);
  v26 = *(unsigned __int8 *)(v21 + 8);
  v25 = v21 + 8;
  v24 = v26;
  v96 = (unsigned __int8 *)v25;
  if (v23 <= v26)
    goto LABEL_197;
  v27 = v22 + 16 * v24;
  v28 = *(unsigned int *)(v27 + 8);
  v29 = *((unsigned __int8 *)v4 + 472);
  v25 = *((unsigned __int8 *)v4 + 476);
  v30 = (char *)objc_msgSend(*(id *)v27, sel_contents);
  v13 = *((_QWORD *)v11 + 4);
  if (v13 <= v25)
  {
LABEL_198:
    *(_QWORD *)v128 = 0;
    memset(v118, 0, 48);
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v125[0]) = 136315906;
    *(_QWORD *)((char *)v125 + 4) = "operator[]";
    WORD6(v125[0]) = 1024;
    *(_DWORD *)((char *)v125 + 14) = 476;
    WORD1(v125[1]) = 2048;
    *(_QWORD *)((char *)&v125[1] + 4) = v25;
    WORD6(v125[1]) = 2048;
    *(_QWORD *)((char *)&v125[1] + 14) = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_199;
  }
  v31 = *((unsigned int *)v4 + 116);
  v32 = &v30[v28];
  if (v29)
    v33 = 4;
  else
    v33 = 2;
  if (v29)
  {
    if ((_DWORD)v31)
    {
      v34 = 0;
      do
      {
        v36 = *(_DWORD *)v32;
        v32 += 4;
        v35 = v36;
        if (v34 <= v36)
          v37 = v35;
        else
          v37 = v34;
        if (v35 != -1)
          v34 = v37;
        --v31;
      }
      while (v31);
      goto LABEL_36;
    }
  }
  else if ((_DWORD)v31)
  {
    v34 = 0;
    do
    {
      v39 = *(unsigned __int16 *)v32;
      v32 += 2;
      v38 = v39;
      if (v34 <= v39)
        v40 = v38;
      else
        v40 = v34;
      if (v38 != 0xFFFF)
        v34 = v40;
      --v31;
    }
    while (v31);
    goto LABEL_36;
  }
  v34 = 0;
LABEL_36:
  v12 = v34 + 1;
LABEL_37:
  v87 = (uint64_t)v7;
  re::createVertexFetchComputePipeline((id *)v110, (re::CachedVertexFetchFunction *)v7, &v108);
  v41 = objc_msgSend(v115, sel_newBufferWithLength_options_, 112, 0);
  objc_msgSend(v113, "setBuffer:offset:atIndex:", v41, 0, 2);
  v42 = *(_DWORD *)(v108 + 32);
  v92 = v12;
  v89 = (v42 + *((_DWORD *)v4 + 116) - 1) & -v42;
  v90 = (v42 + (_DWORD)v12 - 1) & -v42;
  v105 = (v12 - 1);
  v106 = v90 - 1;
  v94 = v33;
  v107 = v33;
  objc_msgSend(v113, "setBytes:length:atIndex:", &v105, 24, 0);
  v88 = v41;
  v43 = (char *)objc_msgSend(v41, sel_contents);
  v95 = BufferIndex;
  if (v97)
  {
    v44 = v43;
    v25 = 0;
    v13 = 0;
    v85 = v43 + 96;
    v86 = v43 + 104;
    v83 = v43 + 80;
    v84 = v43 + 88;
    v81 = v43 + 64;
    v82 = v43 + 72;
    v79 = v43 + 48;
    v80 = v43 + 56;
    v77 = v43 + 8;
    v78 = v43 + 40;
    v75 = v43 + 24;
    v76 = v43 + 32;
    v74 = v43 + 16;
    while (1)
    {
      if (BufferIndex == -1 || (v45 = v89, v13 != *v96))
        v45 = v90;
      v46 = *((_QWORD *)v4 + 43);
      if (v46 <= v13)
      {
        *(_QWORD *)v128 = 0;
        memset(v118, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v125[0]) = 136315906;
        *(_QWORD *)((char *)v125 + 4) = "operator[]";
        WORD6(v125[0]) = 1024;
        *(_DWORD *)((char *)v125 + 14) = 476;
        WORD1(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 4) = v13;
        WORD6(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_174:
        v116 = 0;
        memset(v118, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v128 = 136315906;
        *(_QWORD *)&v128[4] = "operator[]";
        *(_WORD *)&v128[12] = 1024;
        *(_DWORD *)&v128[14] = 476;
        *(_WORD *)&v128[18] = 2048;
        *(_QWORD *)&v128[20] = v25;
        v129 = 2048;
        v130 = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_175:
        v116 = 0;
        memset(v118, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v128 = 136315906;
        *(_QWORD *)&v128[4] = "operator[]";
        *(_WORD *)&v128[12] = 1024;
        *(_DWORD *)&v128[14] = 476;
        *(_WORD *)&v128[18] = 2048;
        *(_QWORD *)&v128[20] = v25;
        v129 = 2048;
        v130 = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_176:
        v116 = 0;
        memset(v118, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v128 = 136315906;
        *(_QWORD *)&v128[4] = "operator[]";
        *(_WORD *)&v128[12] = 1024;
        *(_DWORD *)&v128[14] = 476;
        *(_WORD *)&v128[18] = 2048;
        *(_QWORD *)&v128[20] = v25;
        v129 = 2048;
        v130 = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_177:
        v116 = 0;
        memset(v118, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v128 = 136315906;
        *(_QWORD *)&v128[4] = "operator[]";
        *(_WORD *)&v128[12] = 1024;
        *(_DWORD *)&v128[14] = 476;
        *(_WORD *)&v128[18] = 2048;
        *(_QWORD *)&v128[20] = v25;
        v129 = 2048;
        v130 = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_178:
        *(_QWORD *)v128 = 0;
        memset(v118, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v125[0]) = 136315906;
        *(_QWORD *)((char *)v125 + 4) = "operator[]";
        WORD6(v125[0]) = 1024;
        *(_DWORD *)((char *)v125 + 14) = 476;
        WORD1(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 4) = v13;
        WORD6(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 14) = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_179:
        *(_QWORD *)v128 = 0;
        memset(v118, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v125[0]) = 136315906;
        *(_QWORD *)((char *)v125 + 4) = "operator[]";
        WORD6(v125[0]) = 1024;
        *(_DWORD *)((char *)v125 + 14) = 476;
        WORD1(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 4) = v13;
        WORD6(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_180:
        *(_QWORD *)v128 = 0;
        memset(v118, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v125[0]) = 136315906;
        *(_QWORD *)((char *)v125 + 4) = "operator[]";
        WORD6(v125[0]) = 1024;
        *(_DWORD *)((char *)v125 + 14) = 468;
        WORD1(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 4) = v46;
        WORD6(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 14) = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_181:
        v116 = 0;
        memset(v118, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v128 = 136315906;
        *(_QWORD *)&v128[4] = "operator[]";
        *(_WORD *)&v128[12] = 1024;
        *(_DWORD *)&v128[14] = 476;
        *(_WORD *)&v128[18] = 2048;
        *(_QWORD *)&v128[20] = v25;
        v129 = 2048;
        v130 = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_182:
        v116 = 0;
        memset(v118, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v128 = 136315906;
        *(_QWORD *)&v128[4] = "operator[]";
        *(_WORD *)&v128[12] = 1024;
        *(_DWORD *)&v128[14] = 468;
        *(_WORD *)&v128[18] = 2048;
        *(_QWORD *)&v128[20] = BufferIndex;
        v129 = 2048;
        v130 = v45;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_183:
        *(_QWORD *)v128 = 0;
        memset(v118, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v125[0]) = 136315906;
        *(_QWORD *)((char *)v125 + 4) = "operator[]";
        WORD6(v125[0]) = 1024;
        *(_DWORD *)((char *)v125 + 14) = 468;
        WORD1(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 4) = 7;
        WORD6(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_184:
        *(_QWORD *)v128 = 0;
        memset(v118, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v125[0]) = 136315906;
        *(_QWORD *)((char *)v125 + 4) = "operator[]";
        WORD6(v125[0]) = 1024;
        *(_DWORD *)((char *)v125 + 14) = 468;
        WORD1(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 4) = 0;
        WORD6(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 14) = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_185:
        *(_QWORD *)v128 = 0;
        memset(v118, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v125[0]) = 136315906;
        *(_QWORD *)((char *)v125 + 4) = "operator[]";
        WORD6(v125[0]) = 1024;
        *(_DWORD *)((char *)v125 + 14) = 468;
        WORD1(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 4) = 1;
        WORD6(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_186:
        *(_QWORD *)v128 = 0;
        memset(v118, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v125[0]) = 136315906;
        *(_QWORD *)((char *)v125 + 4) = "operator[]";
        WORD6(v125[0]) = 1024;
        *(_DWORD *)((char *)v125 + 14) = 468;
        WORD1(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 4) = 6;
        WORD6(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_187:
        *(_QWORD *)v128 = 0;
        memset(v118, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v125[0]) = 136315906;
        *(_QWORD *)((char *)v125 + 4) = "operator[]";
        WORD6(v125[0]) = 1024;
        *(_DWORD *)((char *)v125 + 14) = 468;
        WORD1(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 4) = 8;
        WORD6(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_188:
        *(_QWORD *)v128 = 0;
        memset(v118, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v125[0]) = 136315906;
        *(_QWORD *)((char *)v125 + 4) = "operator[]";
        WORD6(v125[0]) = 1024;
        *(_DWORD *)((char *)v125 + 14) = 468;
        WORD1(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 4) = 9;
        WORD6(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_189:
        *(_QWORD *)v128 = 0;
        memset(v118, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v125[0]) = 136315906;
        *(_QWORD *)((char *)v125 + 4) = "operator[]";
        WORD6(v125[0]) = 1024;
        *(_DWORD *)((char *)v125 + 14) = 468;
        WORD1(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 4) = 10;
        WORD6(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_190:
        *(_QWORD *)v128 = 0;
        memset(v118, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v125[0]) = 136315906;
        *(_QWORD *)((char *)v125 + 4) = "operator[]";
        WORD6(v125[0]) = 1024;
        *(_DWORD *)((char *)v125 + 14) = 468;
        WORD1(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 4) = 11;
        WORD6(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_191:
        *(_QWORD *)v128 = 0;
        memset(v118, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v125[0]) = 136315906;
        *(_QWORD *)((char *)v125 + 4) = "operator[]";
        WORD6(v125[0]) = 1024;
        *(_DWORD *)((char *)v125 + 14) = 468;
        WORD1(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 4) = 12;
        WORD6(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_192:
        *(_QWORD *)v128 = 0;
        memset(v118, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v125[0]) = 136315906;
        *(_QWORD *)((char *)v125 + 4) = "operator[]";
        WORD6(v125[0]) = 1024;
        *(_DWORD *)((char *)v125 + 14) = 468;
        WORD1(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 4) = 13;
        WORD6(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_193:
        *(_QWORD *)v128 = 0;
        memset(v118, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v125[0]) = 136315906;
        *(_QWORD *)((char *)v125 + 4) = "operator[]";
        WORD6(v125[0]) = 1024;
        *(_DWORD *)((char *)v125 + 14) = 468;
        WORD1(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 4) = 2;
        WORD6(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_194:
        *(_QWORD *)v128 = 0;
        memset(v118, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v125[0]) = 136315906;
        *(_QWORD *)((char *)v125 + 4) = "operator[]";
        WORD6(v125[0]) = 1024;
        *(_DWORD *)((char *)v125 + 14) = 468;
        WORD1(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 4) = 3;
        WORD6(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_195:
        *(_QWORD *)v128 = 0;
        memset(v118, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v125[0]) = 136315906;
        *(_QWORD *)((char *)v125 + 4) = "operator[]";
        WORD6(v125[0]) = 1024;
        *(_DWORD *)((char *)v125 + 14) = 468;
        WORD1(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 4) = 4;
        WORD6(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_196:
        *(_QWORD *)v128 = 0;
        memset(v118, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v125[0]) = 136315906;
        *(_QWORD *)((char *)v125 + 4) = "operator[]";
        WORD6(v125[0]) = 1024;
        *(_DWORD *)((char *)v125 + 14) = 468;
        WORD1(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 4) = 5;
        WORD6(v125[1]) = 2048;
        *(_QWORD *)((char *)&v125[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_197:
        re::internal::assertLog((re::internal *)6, v23, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v24, v23);
        _os_crash();
        __break(1u);
        goto LABEL_198;
      }
      re::StringID::StringID((re::StringID *)v104, (const StringID *)(*((_QWORD *)v4 + 44) + v25));
      v46 = v45
          * (unint64_t)re::GPUAttributeFormatConverter::getOutputAttributeSize(v104[0], v107);
      re::StringID::destroyString((re::StringID *)v104);
      if (v46)
        break;
LABEL_105:
      ++v13;
      v25 += 16;
      if (v97 == v13)
        goto LABEL_106;
    }
    v12 = *((_QWORD *)v4 + 43);
    if (v12 <= v13)
      goto LABEL_178;
    re::StringID::StringID((re::StringID *)v103, (const StringID *)(*((_QWORD *)v4 + 44) + v25));
    BufferIndex = re::GPUAttributeFormatConverter::getBufferIndex((re *)v103);
    re::StringID::destroyString((re::StringID *)v103);
    v102 = objc_msgSend(v115, sel_newBufferWithLength_options_, v46, 0);
    v46 = *((_QWORD *)v4 + 43);
    if (v46 <= v13)
      goto LABEL_179;
    v47 = re::StringID::StringID((re::StringID *)v101, (const StringID *)(*((_QWORD *)v4 + 44) + v25));
    v48 = v101[0] >> 1;
    if (v101[0] >> 1 <= 0x16172F2CA64F41EuLL)
    {
      switch(v48)
      {
        case 0x5E27ADA1858CLL:
          v46 = *(_QWORD *)(a1 + 8);
          if (v46 <= 7)
            goto LABEL_183;
          v49 = (void **)(*(_QWORD *)(a1 + 16) + 56);
          break;
        case 0x5E27ADA1858DLL:
          v46 = *(_QWORD *)(a1 + 8);
          if (v46 <= 8)
            goto LABEL_187;
          v49 = (void **)(*(_QWORD *)(a1 + 16) + 64);
          break;
        case 0x5E27ADA1858ELL:
          v46 = *(_QWORD *)(a1 + 8);
          if (v46 <= 9)
            goto LABEL_188;
          v49 = (void **)(*(_QWORD *)(a1 + 16) + 72);
          break;
        case 0x5E27ADA1858FLL:
          v46 = *(_QWORD *)(a1 + 8);
          if (v46 <= 0xA)
            goto LABEL_189;
          v49 = (void **)(*(_QWORD *)(a1 + 16) + 80);
          break;
        case 0x5E27ADA18590:
          v46 = *(_QWORD *)(a1 + 8);
          if (v46 <= 0xB)
            goto LABEL_190;
          v49 = (void **)(*(_QWORD *)(a1 + 16) + 88);
          break;
        case 0x5E27ADA18591:
          v46 = *(_QWORD *)(a1 + 8);
          if (v46 <= 0xC)
            goto LABEL_191;
          v49 = (void **)(*(_QWORD *)(a1 + 16) + 96);
          break;
        case 0x5E27ADA18592:
          v46 = *(_QWORD *)(a1 + 8);
          if (v46 <= 0xD)
            goto LABEL_192;
          v49 = (void **)(*(_QWORD *)(a1 + 16) + 104);
          break;
        default:
          if (v48 != 0x30989BAE345)
            goto LABEL_90;
          v46 = *(_QWORD *)(a1 + 8);
          if (v46 <= 6)
            goto LABEL_186;
          v49 = (void **)(*(_QWORD *)(a1 + 16) + 48);
          break;
      }
LABEL_84:
      NS::SharedPtr<MTL::Texture>::operator=(v49, &v102);
LABEL_85:
      re::StringID::destroyString((re::StringID *)v101);
      if (v102)
      {

        v102 = 0;
      }
      v46 = BufferIndex;
      v12 = *(_QWORD *)(a1 + 8);
      if (v12 <= BufferIndex)
        goto LABEL_180;
      v12 = *(_QWORD *)(a1 + 16);
      objc_msgSend(v113, "useResource:usage:", *(_QWORD *)(v12 + 8 * BufferIndex), 2);
      BufferIndex = v95;
      v50 = v44;
      switch((int)v95)
      {
        case 0:
          goto LABEL_104;
        case 1:
          v50 = v77;
          goto LABEL_104;
        case 2:
          v50 = v78;
          goto LABEL_104;
        case 3:
          v50 = v74;
          goto LABEL_104;
        case 4:
          v50 = v75;
          goto LABEL_104;
        case 5:
          v50 = v76;
          goto LABEL_104;
        case 6:
          v50 = v79;
          goto LABEL_104;
        case 7:
          v50 = v80;
          goto LABEL_104;
        case 8:
          v50 = v81;
          goto LABEL_104;
        case 9:
          v50 = v82;
          goto LABEL_104;
        case 10:
          v50 = v83;
          goto LABEL_104;
        case 11:
          v50 = v84;
          goto LABEL_104;
        case 12:
          v50 = v85;
          goto LABEL_104;
        case 13:
          v50 = v86;
LABEL_104:
          *v50 = objc_msgSend(*(id *)(v12 + 8 * v46), sel_gpuAddress);
          break;
        default:
          goto LABEL_105;
      }
      goto LABEL_105;
    }
    if (v101[0] >> 1 > 0x2ED0816D3076E800uLL)
    {
      switch(v48)
      {
        case 0x2ED0816D3076E801:
          v46 = *(_QWORD *)(a1 + 8);
          if (v46 <= 4)
            goto LABEL_195;
          v49 = (void **)(*(_QWORD *)(a1 + 16) + 32);
          goto LABEL_84;
        case 0x3CB5CD20F43A4EDALL:
          v46 = *(_QWORD *)(a1 + 8);
          if (v46 <= 5)
            goto LABEL_196;
          v49 = (void **)(*(_QWORD *)(a1 + 16) + 40);
          goto LABEL_84;
        case 0x5353CF4AA93DFAB9:
          v46 = *(_QWORD *)(a1 + 8);
          if (v46 <= 1)
            goto LABEL_185;
          v49 = (void **)(*(_QWORD *)(a1 + 16) + 8);
          goto LABEL_84;
      }
    }
    else
    {
      switch(v48)
      {
        case 0x16172F2CA64F41FLL:
          v46 = *(_QWORD *)(a1 + 8);
          if (v46 <= 2)
            goto LABEL_193;
          v49 = (void **)(*(_QWORD *)(a1 + 16) + 16);
          goto LABEL_84;
        case 0x2ACCEB6695018FABLL:
          v46 = *(_QWORD *)(a1 + 8);
          if (v46 <= 3)
            goto LABEL_194;
          v49 = (void **)(*(_QWORD *)(a1 + 16) + 24);
          goto LABEL_84;
        case 0x2B3FAC222C23CAEDLL:
          if (!*(_QWORD *)(a1 + 8))
            goto LABEL_184;
          v49 = *(void ***)(a1 + 16);
          goto LABEL_84;
      }
    }
LABEL_90:
    v51 = *re::graphicsLogObjects(v47);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v101[1];
      _os_log_debug_impl(&dword_224FE9000, v51, OS_LOG_TYPE_DEBUG, "Unknown attribute type '%s'", buf, 0xCu);
    }
    goto LABEL_85;
  }
LABEL_106:
  v52 = atomic_load((unsigned __int8 *)&qword_25411A248);
  if ((v52 & 1) == 0)
    goto LABEL_201;
  while (1)
  {
    v53 = (id)_MergedGlobals_392;
    objc_msgSend(v113, "setLabel:", v53);

    objc_msgSend(v113, "setComputePipelineState:", *(_QWORD *)(v108 + 16));
    objc_msgSend(v113, "setVisibleFunctionTable:atBufferIndex:", *(_QWORD *)(v108 + 24), 29);
    v54 = *(unsigned int *)(v108 + 32);
    *(_QWORD *)buf = v92;
    v13 = 1;
    *(int64x2_t *)&buf[8] = vdupq_n_s64(1uLL);
    *(_QWORD *)&v125[0] = v54;
    *(_OWORD *)((char *)v125 + 8) = *(_OWORD *)&buf[8];
    v55 = (_anonymous_namespace_ *)objc_msgSend(v113, "dispatchThreads:threadsPerThreadgroup:", buf, v125);
    v45 = v89;
    if (BufferIndex == -1)
      break;
    buf[0] = 0;
    v120 = 0;
    memset(&v118[40], 0, 24);
    v119 = 0;
    v121 = 257;
    v122 = 0;
    v123 = 0;
    v124 = 1;
    ComputePipelineState = (_QWORD *)re::getOrCreateComputePipelineState(v87, (uint64_t)buf);
    objc_msgSend(v113, "setComputePipelineState:", *ComputePipelineState);
    v105 = *((unsigned int *)v4 + 116);
    v106 = v89;
    objc_msgSend(v113, "setBytes:length:atIndex:", &v105, 24, 0);
    v57 = re::AttributeTable::buffers(v4);
    v59 = *v96;
    if (v58 <= v59)
    {
LABEL_199:
      re::internal::assertLog((re::internal *)6, v58, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v59, v58);
      _os_crash();
      __break(1u);
    }
    else
    {
      objc_msgSend(v113, "setBuffer:offset:atIndex:", *(_QWORD *)(v57 + 16 * v59), *(unsigned int *)(v57 + 16 * v59 + 8), 1);
      v13 = *(_QWORD *)(a1 + 8);
      if (v13 > 1)
      {
        objc_msgSend(v113, "setBuffer:offset:atIndex:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 0, 2);
        if ((_DWORD)v89)
        {
          v60 = *(unsigned int *)(v108 + 32);
          *(_QWORD *)&v125[0] = v89;
          *(int64x2_t *)((char *)v125 + 8) = vdupq_n_s64(1uLL);
          *(_QWORD *)v128 = v60;
          *(_OWORD *)&v128[8] = *(_OWORD *)((char *)v125 + 8);
          objc_msgSend(v113, "dispatchThreads:threadsPerThreadgroup:", v125, v128);
        }
        re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v118[40]);
        if (*(_QWORD *)&v118[8])
        {
          if ((v118[16] & 1) != 0)
            (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v118[8] + 40))(*(_QWORD *)&v118[8], *(_QWORD *)&v118[24]);
          memset(&v118[8], 0, 32);
        }
        if (buf[0] && *(_QWORD *)&buf[8] && (buf[16] & 1) != 0)
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&buf[8] + 40))(*(_QWORD *)&buf[8], *(_QWORD *)&buf[24]);
        break;
      }
    }
    v116 = 0;
    v4 = (re::AttributeTable *)v125;
    v126 = 0u;
    v127 = 0u;
    memset(v125, 0, sizeof(v125));
    v11 = (re::AttributeTable *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v128 = 136315906;
    *(_QWORD *)&v128[4] = "operator[]";
    *(_WORD *)&v128[12] = 1024;
    *(_DWORD *)&v128[14] = 468;
    *(_WORD *)&v128[18] = 2048;
    *(_QWORD *)&v128[20] = 1;
    v129 = 2048;
    v130 = v13;
    LODWORD(v73) = 38;
    v72 = v128;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_201:
    if (__cxa_guard_acquire(&qword_25411A248))
    {
      v71 = re::ns::String::String((re::ns::String *)&_MergedGlobals_392, (re::ns *)"serializeLowLevelMeshPartAttributes");
      __cxa_guard_release((__guard *)v71 + 1);
    }
  }
  objc_msgSend(v113, "endEncoding", v72, v73);
  objc_msgSend(v114, "commit");
  v61 = (_anonymous_namespace_ *)objc_msgSend(v114, "waitUntilCompleted");
  if (v97)
  {
    v13 = 0;
    v25 = 0;
    v12 = (unint64_t)&v125[2];
    if (v94 == 2)
      v62 = 49;
    else
      v62 = 36;
    v91 = v62;
    while (1)
    {
      memset(v125, 0, 32);
      re::DynamicString::setCapacity(v125, 0);
      *(_QWORD *)&v127 = 0;
      *(_QWORD *)&v126 = 0;
      v125[2] = 0uLL;
      DWORD2(v126) = 0;
      WORD4(v127) = 256;
      v46 = *((_QWORD *)v4 + 43);
      if (v46 <= v25)
        goto LABEL_174;
      v63 = strlen(*(const char **)(*((_QWORD *)v4 + 44) + v13 + 8));
      *(_QWORD *)buf = *(_QWORD *)(*((_QWORD *)v4 + 44) + v13 + 8);
      *(_QWORD *)&buf[8] = v63;
      re::DynamicString::operator=((re::DynamicString *)v125, (uint64_t)buf);
      v46 = *((_QWORD *)v4 + 43);
      if (v46 <= v25)
        goto LABEL_175;
      re::StringID::StringID((re::StringID *)v100, (const StringID *)(*((_QWORD *)v4 + 44) + v13));
      v64 = v100[0] >> 1;
      if (v100[0] >> 1 <= 0x16172F2CA64F41EuLL)
        break;
      v65 = 30;
      if (v100[0] >> 1 > 0x2ED0816D3076E800uLL)
      {
        if (v64 != 0x2ED0816D3076E801 && v64 != 0x3CB5CD20F43A4EDALL)
        {
          v65 = v91;
          v66 = 0x5353CF4AA93DFAB9;
          goto LABEL_137;
        }
      }
      else
      {
        if (v64 == 0x16172F2CA64F41FLL)
        {
LABEL_129:
          v65 = 31;
          goto LABEL_143;
        }
        if (v64 != 0x2ACCEB6695018FABLL)
        {
          v66 = 0x2B3FAC222C23CAEDLL;
LABEL_137:
          if (v64 == v66)
            goto LABEL_143;
LABEL_142:
          v65 = 0;
        }
      }
LABEL_143:
      BYTE8(v127) = v65;
      re::StringID::destroyString((re::StringID *)v100);
      v46 = *((_QWORD *)v11 + 4);
      if (v46 <= v25)
        goto LABEL_176;
      BYTE9(v127) = *(_BYTE *)(*((_QWORD *)v11 + 5) + v13 + 5);
      v46 = *((_QWORD *)v4 + 43);
      if (v46 <= v25)
        goto LABEL_177;
      re::StringID::StringID((re::StringID *)v99, (const StringID *)(*((_QWORD *)v4 + 44) + v13));
      OutputAttributeSize = re::GPUAttributeFormatConverter::getOutputAttributeSize(v99[0], v94);
      re::StringID::destroyString((re::StringID *)v99);
      if (BufferIndex == -1 || v25 != *v96)
      {
        v68 = v92;
        if (!BYTE9(v127))
          v68 = 1;
      }
      else
      {
        v68 = *((_DWORD *)v4 + 116);
      }
      v69 = (v68 * OutputAttributeSize);
      if (*((_QWORD *)&v125[2] + 1) < v69)
        re::DynamicArray<BOOL>::setCapacity(&v125[2], v69);
      if ((_DWORD)v69)
      {
        v46 = *((_QWORD *)v4 + 43);
        if (v46 <= v25)
          goto LABEL_181;
        re::StringID::StringID((re::StringID *)v98, (const StringID *)(*((_QWORD *)v4 + 44) + v13));
        v46 = re::GPUAttributeFormatConverter::getBufferIndex((re *)v98);
        re::StringID::destroyString((re::StringID *)v98);
        BufferIndex = v46;
        v45 = *(_QWORD *)(a1 + 8);
        if (v45 <= v46)
          goto LABEL_182;
        re::DynamicArray<REFrameAnalysisBottleneck>::copy(&v125[2], 0, (char *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 8 * v46), sel_contents), v69);
        BufferIndex = v95;
      }
      v70.n128_f64[0] = re::DynamicArray<re::MeshAssetBuffer>::add(a4, (uint64_t)v125);
      if (*(_QWORD *)&v125[2])
      {
        if ((_QWORD)v127)
          (*(void (**)(double))(**(_QWORD **)&v125[2] + 40))(v70.n128_f64[0]);
        *(_QWORD *)&v127 = 0;
        *(_QWORD *)&v126 = 0;
        v125[2] = 0uLL;
        ++DWORD2(v126);
      }
      v61 = *(_anonymous_namespace_ **)&v125[0];
      if (*(_QWORD *)&v125[0] && (BYTE8(v125[0]) & 1) != 0)
        v61 = (_anonymous_namespace_ *)(*(uint64_t (**)(__n128))(**(_QWORD **)&v125[0] + 40))(v70);
      ++v25;
      v13 += 16;
      if (v97 == v25)
        goto LABEL_164;
    }
    if ((unint64_t)(v64 - 0x5E27ADA1858DLL) < 6)
      goto LABEL_129;
    if (v64 == 0x30989BAE345 || v64 == 0x5E27ADA1858CLL)
    {
      v65 = 29;
      goto LABEL_143;
    }
    goto LABEL_142;
  }
LABEL_164:
  if (v88)

  if (v108)
  if (v109)

  if (v110)
}

BOOL re::FontID::isValid(re::FontID *this)
{
  char *v2;
  _BOOL8 v3;
  unint64_t v5;
  char *__s2;

  re::StringID::invalid((re::StringID *)&v5);
  if ((v5 ^ *(_QWORD *)this) > 1)
  {
    v3 = 1;
  }
  else
  {
    v2 = (char *)*((_QWORD *)this + 1);
    v3 = v2 != __s2 && strcmp(v2, __s2) != 0;
  }
  re::StringID::destroyString((re::StringID *)&v5);
  return v3;
}

void re::internal::shadows::initializeMeshShadowDefaults(re::internal::shadows *this, const char *a2)
{
  const char *v2;
  const char *v3;
  const char *v4;
  char v5[2];
  char v6[2];
  char v7[2];
  char v8[2];

  re::Defaults::BOOLValue((re::Defaults *)"enableShadowFlattening", a2, v8);
  if (v8[0])
    re::internal::shadows::g_enableShadowFlattening = v8[1];
  re::Defaults::BOOLValue((re::Defaults *)"enableMeshDepthFallbackWhenFlattening", v2, v7);
  if (v7[0])
    re::internal::shadows::g_enableMeshDepthFallbackWhenFlattening = v7[1];
  re::Defaults::BOOLValue((re::Defaults *)"EnableDefaultShadows", v3, v6);
  if (v6[0])
    re::internal::shadows::g_enableShadowsByDefault = v6[1];
  re::Defaults::BOOLValue((re::Defaults *)"AllowMultipleShadows", v4, v5);
  if (v5[0])
    re::internal::shadows::g_allowMultipleShadowRemovals = v5[1];
}

re::MeshModelDefinition *re::MeshModelDefinition::MeshModelDefinition(re::MeshModelDefinition *this)
{
  _anonymous_namespace_ *v2;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)this = &off_24ED781D0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  re::DynamicString::setCapacity((_QWORD *)this + 3, 0);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 20) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
  return this;
}

void re::MeshModelDefinition::~MeshModelDefinition(re::MeshModelDefinition *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = &off_24ED781D0;
  v3 = (_QWORD *)((char *)this + 96);
  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    if (*((_QWORD *)this + 16))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 16) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 30);
  }
  v4 = *((_QWORD *)this + 7);
  if (v4)
  {
    v5 = *((_QWORD *)this + 11);
    if (v5)
    {
      v6 = *((_QWORD *)this + 9);
      if (v6)
      {
        v7 = 56 * v6;
        v8 = (_QWORD *)(v5 + 16);
        do
        {
          if (*v8)
          {
            if ((v8[1] & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v8 + 40))(*v8, v8[2]);
            *(_OWORD *)v8 = 0u;
            *((_OWORD *)v8 + 1) = 0u;
          }
          v9 = *(v8 - 2);
          if (v9)
          {

            *(v8 - 2) = 0;
          }
          v8 += 7;
          v7 -= 56;
        }
        while (v7);
        v4 = *((_QWORD *)this + 7);
        v5 = *((_QWORD *)this + 11);
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, v5);
    }
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 7) = 0;
    ++*((_DWORD *)this + 20);
  }
  v10 = *((_QWORD *)this + 3);
  if (v10)
  {
    if ((*((_BYTE *)this + 32) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 40))(v10, *((_QWORD *)this + 5));
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::MeshModelDefinition::~MeshModelDefinition(this);
  JUMPOUT(0x2276933B8);
}

void re::MeshModelDefinition::append(_QWORD *a1, uint64_t *a2, char a3, int a4, int a5, const char *a6)
{
  double v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v14[4];
  int v15;
  int v16;

  if (*(_DWORD *)(*a2 + 40) || *(_DWORD *)(*a2 + 96))
  {
    v12 = *a2;
    *a2 = 0;
    v13 = a3;
    v15 = a4;
    v16 = a5;
    v10 = re::DynamicArray<re::MeshModelDefinition::PartEntry>::add((_anonymous_namespace_ *)(a1 + 7), (uint64_t)&v12);
    if (v14[0])
    {
      if ((v14[1] & 1) != 0)
        (*(void (**)(double))(*(_QWORD *)v14[0] + 40))(v10);
      memset(v14, 0, sizeof(v14));
    }
    if (v12)

    v11 = (a5 + 1);
    if (a1[14] < v11)
      re::DynamicArray<re::MeshModelDefinition::LevelEntry>::resize(a1 + 12, v11);
  }
}

double re::DynamicArray<re::MeshModelDefinition::PartEntry>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::MeshModelDefinition::PartEntry>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 56 * v4;
  *(_QWORD *)v5 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(v5 + 8) = *(_BYTE *)(a2 + 8);
  result = 0.0;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_QWORD *)(v5 + 40) = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 40) = 0;
  v10 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(v5 + 24) = v7;
  *(_QWORD *)(v5 + 32) = v8;
  *(_QWORD *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 32) = v9;
  *(_QWORD *)(v5 + 48) = *(_QWORD *)(a2 + 48);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::MeshModelDefinition::LevelEntry>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(result, a2);
      v4 = v3[2];
    }
    if (v4 < a2)
    {
      v5 = v3[4];
      v6 = (_QWORD *)(v5 + 8 * v4);
      v7 = v5 + 8 * a2 - (_QWORD)v6;
      if (v7 >= 1)
      {
        v8 = ((unint64_t)v7 >> 3) + 1;
        do
        {
          *v6++ = 0x7F7FFFFF00000000;
          --v8;
        }
        while (v8 > 1);
      }
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::MeshModelDefinition::append(_QWORD *this, unsigned int a2, float a3, float a4)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  float *v10;

  v7 = this;
  v8 = this[14];
  v9 = a2 + 1;
  if (v8 < v9)
  {
    this = re::DynamicArray<re::MeshModelDefinition::LevelEntry>::resize(this + 12, v9);
    v8 = v7[14];
  }
  if (v8 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v10 = (float *)(v7[16] + 8 * a2);
  *v10 = a3;
  v10[1] = a4;
  return this;
}

_anonymous_namespace_ *re::MeshResourceDefinition::MeshResourceDefinition(_anonymous_namespace_ *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, unint64_t a7)
{
  _anonymous_namespace_ *v12;
  _anonymous_namespace_ *v13;
  signed int v14;
  _anonymous_namespace_ *v15;
  signed int v16;
  _anonymous_namespace_ *v17;
  double v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  const char *v39;
  _anonymous_namespace_ *v40;
  const char *v41;
  _anonymous_namespace_ *v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _anonymous_namespace_ *v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  signed int v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  float32x4_t *v71;
  char v72;
  float32x4_t *v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  float32x4_t *v80;
  unsigned __int32 *v81;
  const char *v82;
  _anonymous_namespace_ *v83;
  _anonymous_namespace_ *v84;
  const char *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  int v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int16 v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t *v127;
  _DWORD *v128;
  uint64_t v129;
  int *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  id v137;
  const char *v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  const char *v151;
  _anonymous_namespace_ *v152;
  const char *v153;
  _anonymous_namespace_ *v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int128 v166;
  int32x4_t v167;
  __int128 v168;
  __int128 v169;
  double v170;
  uint64_t v172;
  _QWORD *v174;
  uint64_t *v175;
  int32x4_t v176;
  _QWORD *v177;
  float32x4_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t *v182;
  _anonymous_namespace_ *v183;
  _anonymous_namespace_ *v184;
  float32x4_t *v185;
  unint64_t *v186;
  unint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  __int32 *v190;
  uint64_t v191;
  _anonymous_namespace_ *v192;
  _anonymous_namespace_ *v193;
  float32x4_t *v194;
  _QWORD *v195;
  uint64_t v196;
  unint64_t *v197;
  _anonymous_namespace_ *v198;
  _QWORD *v199;
  uint64_t *v200;
  _OWORD v201[2];
  int v202;
  uint64_t v203;
  _OWORD v204[2];
  int v205;
  uint64_t v206;
  _QWORD v207[2];
  int v208;
  _OWORD v209[2];
  int v210;
  uint64_t v211;
  char v212[8];
  const char *v213;
  uint64_t v214;
  _BYTE __src[40];
  uint64_t v216;
  __int16 v217;
  _OWORD v218[5];
  int32x4_t v219;
  __int128 v220;
  uint64_t v221;
  __int128 v222;
  int v223;
  __int128 v224;
  __int128 v225;
  int v226;
  uint64_t v227;
  _BYTE v228[38];
  uint64_t v229;

  v12 = a1;
  v229 = *MEMORY[0x24BDAC8D0];
  ArcSharedObject::ArcSharedObject(v12, 0);
  *((_QWORD *)v12 + 3) = 0;
  v184 = (_anonymous_namespace_ *)((char *)v12 + 24);
  *(_OWORD *)((char *)v12 + 56) = 0u;
  v199 = (_QWORD *)((char *)v12 + 56);
  *(_QWORD *)v12 = &off_24ED78200;
  *((_QWORD *)v12 + 4) = 0;
  *((_QWORD *)v12 + 5) = 0;
  *((_OWORD *)v12 + 6) = 0u;
  v200 = (uint64_t *)((char *)v12 + 96);
  *((_DWORD *)v12 + 12) = 0;
  *(_OWORD *)((char *)v12 + 72) = 0u;
  *((_DWORD *)v12 + 22) = 0;
  *((_OWORD *)v12 + 7) = 0u;
  *((_DWORD *)v12 + 32) = 0;
  *(_OWORD *)((char *)v12 + 136) = 0u;
  *(_OWORD *)((char *)v12 + 152) = 0u;
  *((_DWORD *)v12 + 42) = 0;
  *((_OWORD *)v12 + 11) = 0u;
  *((_OWORD *)v12 + 12) = 0u;
  *((_DWORD *)v12 + 52) = 0;
  *((_DWORD *)v12 + 62) = 0;
  *(_OWORD *)((char *)v12 + 232) = 0u;
  *(_OWORD *)((char *)v12 + 216) = 0u;
  *(_OWORD *)((char *)v12 + 284) = 0u;
  *((_OWORD *)v12 + 16) = 0u;
  *((_OWORD *)v12 + 17) = 0u;
  v189 = (uint64_t)v12 + 264;
  *(_QWORD *)((char *)v12 + 300) = 0x7FFFFFFFLL;
  v205 = 0;
  memset(v204, 0, sizeof(v204));
  if ((2 * a3) <= 1)
    v14 = 1;
  else
    v14 = 2 * a3;
  v206 = 0x7FFFFFFFLL;
  v202 = 0;
  memset(v201, 0, sizeof(v201));
  v203 = 0x7FFFFFFFLL;
  v172 = a5;
  if ((2 * a5) <= 1)
    v16 = 1;
  else
    v16 = 2 * a5;
  if (a7)
  {
    v181 = a2;
    v19 = 8 * a7;
    v20 = a6;
    do
    {
      v21 = *v20;
      if (*v20)
        v17 = (_anonymous_namespace_ *)(id)(v21 + 8);
      v22 = *((_QWORD *)v12 + 29);
      v23 = *((_QWORD *)v12 + 30);
      if (v23 >= v22)
      {
        v24 = v23 + 1;
        if (v22 < v23 + 1)
        {
          if (*((_QWORD *)v12 + 28))
          {
            if (v22)
              v25 = 2 * v22;
            else
              v25 = 8;
            if (v25 <= v24)
              v26 = v23 + 1;
            else
              v26 = v25;
            v17 = (_anonymous_namespace_ *)re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((_QWORD *)v12 + 28, v26);
          }
          else
          {
            v17 = (_anonymous_namespace_ *)re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((_QWORD *)v12 + 28, v24);
            ++*((_DWORD *)v12 + 62);
          }
        }
        v23 = *((_QWORD *)v12 + 30);
      }
      *(_QWORD *)(*((_QWORD *)v12 + 32) + 8 * v23) = v21;
      *((_QWORD *)v12 + 30) = v23 + 1;
      ++*((_DWORD *)v12 + 62);
      ++v20;
      v19 -= 8;
    }
    while (v19);
    v27 = 0;
    LODWORD(v218[0]) = 0;
    a2 = v181;
    do
    {
      v17 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v189, (StringID *)(a6[v27] + 24), v218);
      ++LODWORD(v218[0]);
      v27 = LODWORD(v218[0]);
    }
    while (a7 > LODWORD(v218[0]));
  }
  if (a3)
  {
    v175 = &a2[a3];
    v28 = (_QWORD *)((char *)v12 + 104);
    v177 = (_QWORD *)((char *)v12 + 144);
    v183 = (_anonymous_namespace_ *)((char *)v12 + 64);
    v176 = vdupq_n_s32(0x7F800000u);
    v198 = v12;
    v174 = (_QWORD *)((char *)v12 + 104);
    while (1)
    {
      v29 = *a2;
      v30 = *(_QWORD *)(*a2 + 112);
      if (v30)
      {
        v31 = *(uint64_t **)(v29 + 128);
        v32 = *((_QWORD *)v12 + 15);
        v33 = 8 * v30;
        do
        {
          v34 = *v31;
          v35 = *((_QWORD *)v12 + 14);
          if (v32 >= v35)
          {
            v36 = v32 + 1;
            if (v35 < v32 + 1)
            {
              if (*v28)
              {
                v37 = 2 * v35;
                if (!v35)
                  v37 = 8;
                if (v37 <= v36)
                  v38 = v36;
                else
                  v38 = v37;
                v17 = (_anonymous_namespace_ *)re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v28, v38);
              }
              else
              {
                v17 = (_anonymous_namespace_ *)re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v28, v36);
                ++*((_DWORD *)v12 + 32);
              }
            }
            v32 = *((_QWORD *)v12 + 15);
          }
          *(_QWORD *)(*((_QWORD *)v12 + 17) + 8 * v32++) = v34;
          *((_QWORD *)v12 + 15) = v32;
          ++*((_DWORD *)v12 + 32);
          ++v31;
          v33 -= 8;
        }
        while (v33);
      }
      if ((*(_BYTE *)(v29 + 32) & 1) != 0)
        v39 = *(const char **)(v29 + 40);
      else
        v39 = (const char *)(v29 + 33);
      v40 = (_anonymous_namespace_ *)re::UniqueNameGenerator::uniqueName((re::UniqueNameGenerator *)v204, v39, "Model", (re::StringID *)v212);
      *(_QWORD *)&v218[2] = 0;
      memset(v218, 0, 28);
      v41 = v213;
      *(_QWORD *)&v43 = 0x7F0000007FLL;
      *((_QWORD *)&v43 + 1) = 0x7F0000007FLL;
      v219 = v176;
      v220 = v43;
      v222 = 0uLL;
      v221 = 0;
      v223 = 0;
      v227 = 0;
      LOBYTE(v43) = 0;
      BYTE4(v43) = 0;
      BYTE8(v43) = 0;
      BYTE12(v43) = 0;
      v224 = v43;
      v225 = v43;
      v226 = 0;
      v44 = *((_QWORD *)v12 + 19);
      v45 = *((_QWORD *)v12 + 20);
      v46 = v189;
      if (v45 >= v44)
      {
        v47 = v45 + 1;
        if (v44 < v45 + 1)
        {
          if (*v177)
          {
            v48 = 2 * v44;
            v49 = v44 == 0;
            v50 = 8;
            if (!v49)
              v50 = v48;
            if (v50 <= v47)
              v51 = v47;
            else
              v51 = v50;
            re::DynamicArray<re::MeshResourceDefinition::Model>::setCapacity(v177, v51);
          }
          else
          {
            re::DynamicArray<re::MeshResourceDefinition::Model>::setCapacity(v177, v47);
            ++*((_DWORD *)v12 + 42);
          }
        }
        v45 = *((_QWORD *)v12 + 20);
      }
      v52 = *((_QWORD *)v12 + 22) + 192 * v45;
      *(_QWORD *)(v52 + 32) = 0;
      *(_QWORD *)(v52 + 8) = 0;
      *(_QWORD *)(v52 + 16) = 0;
      *(_QWORD *)v52 = 0;
      *(_DWORD *)(v52 + 24) = 0;
      *(_QWORD *)v52 = *(_QWORD *)&v218[0];
      *(_QWORD *)&v218[0] = 0;
      *(_QWORD *)(v52 + 8) = *((_QWORD *)&v218[0] + 1);
      *((_QWORD *)&v218[0] + 1) = 0;
      v53 = *(_QWORD *)(v52 + 16);
      *(_QWORD *)(v52 + 16) = *(_QWORD *)&v218[1];
      *(_QWORD *)&v218[1] = v53;
      v54 = *(_QWORD *)(v52 + 32);
      *(_QWORD *)(v52 + 32) = *(_QWORD *)&v218[2];
      *(_QWORD *)&v218[2] = v54;
      ++DWORD2(v218[1]);
      ++*(_DWORD *)(v52 + 24);
      *(_OWORD *)(v52 + 40) = 0u;
      *(_OWORD *)(v52 + 56) = 0u;
      *(_QWORD *)(v52 + 40) = *((_QWORD *)&v218[2] + 1);
      *((_QWORD *)&v218[2] + 1) = 0;
      v55 = *(_QWORD *)(v52 + 56);
      *(_QWORD *)(v52 + 56) = *((_QWORD *)&v218[3] + 1);
      *((_QWORD *)&v218[3] + 1) = v55;
      *(_QWORD *)(v52 + 64) = *(_QWORD *)&v218[4];
      *(_QWORD *)&v218[4] = 0;
      v56 = *(_QWORD *)(v52 + 48);
      *(_QWORD *)(v52 + 48) = *(_QWORD *)&v218[3];
      *(_QWORD *)&v218[3] = v56;
      v57 = v220;
      *(int32x4_t *)(v52 + 80) = v219;
      *(_OWORD *)(v52 + 96) = v57;
      *(_QWORD *)(v52 + 144) = 0;
      *(_DWORD *)(v52 + 136) = 0;
      *(_QWORD *)(v52 + 120) = 0;
      *(_QWORD *)(v52 + 128) = 0;
      *(_QWORD *)(v52 + 112) = 0;
      *(_QWORD *)(v52 + 112) = v221;
      v221 = 0;
      *(_QWORD *)(v52 + 120) = v222;
      *(_QWORD *)&v222 = 0;
      v58 = *(_QWORD *)(v52 + 128);
      *(_QWORD *)(v52 + 128) = *((_QWORD *)&v222 + 1);
      *((_QWORD *)&v222 + 1) = v58;
      v59 = *(_QWORD *)(v52 + 144);
      *(_QWORD *)(v52 + 144) = v224;
      *(_QWORD *)&v224 = v59;
      ++v223;
      ++*(_DWORD *)(v52 + 136);
      *(_QWORD *)(v52 + 184) = 0;
      *(_QWORD *)(v52 + 160) = 0;
      *(_QWORD *)(v52 + 168) = 0;
      *(_QWORD *)(v52 + 152) = 0;
      *(_DWORD *)(v52 + 176) = 0;
      *(_QWORD *)(v52 + 152) = *((_QWORD *)&v224 + 1);
      *((_QWORD *)&v224 + 1) = 0;
      *(_QWORD *)(v52 + 160) = v225;
      *(_QWORD *)&v225 = 0;
      v60 = *(_QWORD *)(v52 + 168);
      *(_QWORD *)(v52 + 168) = *((_QWORD *)&v225 + 1);
      *((_QWORD *)&v225 + 1) = v60;
      v61 = *(_QWORD *)(v52 + 184);
      *(_QWORD *)(v52 + 184) = v227;
      v227 = v61;
      ++v226;
      ++*(_DWORD *)(v52 + 176);
      ++*((_QWORD *)v12 + 20);
      ++*((_DWORD *)v12 + 42);
      re::DynamicArray<re::MeshAssetBlendShapeData>::deinit((uint64_t)&v224 + 8);
      if (v221)
      {
        if ((_QWORD)v224)
          (*(void (**)(void))(*(_QWORD *)v221 + 40))();
        *(_QWORD *)&v224 = 0;
        v222 = 0uLL;
        v221 = 0;
        ++v223;
      }
      v182 = a2;
      if (*((_QWORD *)&v218[2] + 1))
      {
        if ((v218[3] & 1) != 0)
          (*(void (**)(void))(**((_QWORD **)&v218[2] + 1) + 40))();
        memset((char *)&v218[2] + 8, 0, 32);
      }
      v62 = (_anonymous_namespace_ *)re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)v218);
      v179 = *((_QWORD *)v12 + 20) - 1;
      v180 = *((_QWORD *)v12 + 22);
      v63 = v180 + 192 * v179;
      v64 = *(_DWORD *)(v29 + 72);
      memset(v209, 0, sizeof(v209));
      v210 = 0;
      v211 = 0x7FFFFFFFLL;
      v65 = 2 * v64;
      v66 = v65 <= 1 ? 1 : v65;
      v68 = *(_QWORD *)(v29 + 72);
      if (v68)
        break;
LABEL_149:
      v123 = *(_QWORD *)(v63 + 16);
      if (v123)
      {
        v124 = 0;
        v125 = *(_QWORD *)(v63 + 32);
        v188 = v125 + 40 * v123;
        v126 = v180 + 192 * v179;
        v193 = (_anonymous_namespace_ *)(v126 + 152);
        v127 = (unint64_t *)(v126 + 168);
        v128 = (_DWORD *)(v126 + 176);
        v195 = (_QWORD *)(v126 + 184);
        v197 = (unint64_t *)(v126 + 160);
        while (1)
        {
          v129 = *(_QWORD *)(v125 + 16);
          v191 = v125;
          if (v129)
            break;
LABEL_177:
          v125 = v191 + 40;
          if (v191 + 40 == v188)
            goto LABEL_178;
        }
        v130 = *(int **)(v125 + 32);
        v131 = 4 * v129;
        while (1)
        {
          v132 = *v130;
          *(_QWORD *)__src = 0;
          *(_QWORD *)&__src[8] = &str_110;
          HIDWORD(v216) = 0;
          memset(&__src[16], 0, 24);
          LOBYTE(v216) = 0;
          v102 = *((_QWORD *)v12 + 10);
          if (v102 <= v132)
            break;
          v133 = *v200;
          v134 = *v200 + 144 * (int)v132;
          if (!*(_QWORD *)(v134 + 16))
            goto LABEL_202;
          v102 = **(int **)(v134 + 32);
          v135 = *((_QWORD *)v12 + 5);
          if (v135 <= v102)
            goto LABEL_203;
          v136 = *(_QWORD *)(*v199 + 8 * v102);
          if (v136)
            v137 = (id)(v136 + 8);
          v12 = v198;
          if ((*(_BYTE *)(v133 + 144 * (int)v132 + 48) & 1) != 0)
            v138 = *(const char **)(v133 + 144 * (int)v132 + 56);
          else
            v138 = (const char *)(v133 + 144 * (int)v132 + 49);
          if (re::MeshDefinition::blendShapeData(v136, (uint64_t *)__src, v138, *(_DWORD *)(v133 + 144 * (int)v132 + 120), v124))
          {
            v139 = *v127;
            v140 = *v197;
            if (*v127 >= *v197)
            {
              v141 = v139 + 1;
              if (v140 < v139 + 1)
              {
                if (*(_QWORD *)v193)
                {
                  v142 = 2 * v140;
                  v49 = v140 == 0;
                  v143 = 8;
                  if (!v49)
                    v143 = v142;
                  if (v143 <= v141)
                    v144 = v141;
                  else
                    v144 = v143;
                  re::DynamicArray<re::MeshAssetBlendShapeData>::setCapacity(v193, v144);
                }
                else
                {
                  re::DynamicArray<re::MeshAssetBlendShapeData>::setCapacity(v193, v141);
                  ++*v128;
                }
              }
              v139 = *v127;
            }
            v145 = *v195 + 56 * v139;
            v146 = __src[0];
            *(_QWORD *)v145 = *(_QWORD *)v145 & 0xFFFFFFFFFFFFFFFELL | __src[0] & 1;
            *(_QWORD *)v145 = *(_QWORD *)__src & 0xFFFFFFFFFFFFFFFELL | v146 & 1;
            *(_QWORD *)(v145 + 8) = *(_QWORD *)&__src[8];
            *(_QWORD *)__src = 0;
            *(_QWORD *)&__src[8] = &str_110;
            *(_QWORD *)(v145 + 16) = 0;
            *(_QWORD *)(v145 + 24) = 0;
            *(_QWORD *)(v145 + 32) = 0;
            *(_QWORD *)(v145 + 16) = *(_QWORD *)&__src[16];
            *(_QWORD *)&__src[16] = 0;
            *(_QWORD *)(v145 + 24) = *(_QWORD *)&__src[24];
            *(_QWORD *)&__src[24] = 0;
            v147 = *(_QWORD *)(v145 + 32);
            *(_QWORD *)(v145 + 32) = *(_QWORD *)&__src[32];
            *(_QWORD *)&__src[32] = v147;
            *(_QWORD *)(v145 + 40) = v216;
            *(_WORD *)(v145 + 48) = v217;
            ++*v127;
            ++*v128;
          }
          if (v136)

          re::FixedArray<re::BlendShapeDefinition>::deinit(&__src[16]);
          re::StringID::destroyString((re::StringID *)__src);
          ++v130;
          ++v124;
          v131 -= 4;
          if (!v131)
            goto LABEL_177;
        }
        v207[0] = 0;
        memset(v218, 0, sizeof(v218));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v228 = 136315906;
        *(_QWORD *)&v228[4] = "operator[]";
        *(_WORD *)&v228[12] = 1024;
        *(_DWORD *)&v228[14] = 789;
        *(_WORD *)&v228[18] = 2048;
        *(_QWORD *)&v228[20] = v132;
        *(_WORD *)&v228[28] = 2048;
        *(_QWORD *)&v228[30] = v102;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_202:
        v207[0] = 0;
        memset(v218, 0, sizeof(v218));
        v135 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v228 = 136315906;
        *(_QWORD *)&v228[4] = "operator[]";
        *(_WORD *)&v228[12] = 1024;
        *(_DWORD *)&v228[14] = 797;
        *(_WORD *)&v228[18] = 2048;
        *(_QWORD *)&v228[20] = 0;
        *(_WORD *)&v228[28] = 2048;
        *(_QWORD *)&v228[30] = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_203:
        v207[0] = 0;
        memset(v218, 0, sizeof(v218));
        v100 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v228 = 136315906;
        *(_QWORD *)&v228[4] = "operator[]";
        *(_WORD *)&v228[12] = 1024;
        *(_DWORD *)&v228[14] = 789;
        *(_WORD *)&v228[18] = 2048;
        *(_QWORD *)&v228[20] = v102;
        *(_WORD *)&v228[28] = 2048;
        *(_QWORD *)&v228[30] = v135;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_204:
        v214 = 0;
        memset(v218, 0, sizeof(v218));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)__src = 136315906;
        *(_QWORD *)&__src[4] = "operator[]";
        *(_WORD *)&__src[12] = 1024;
        *(_DWORD *)&__src[14] = 789;
        *(_WORD *)&__src[18] = 2048;
        *(_QWORD *)&__src[20] = v100;
        *(_WORD *)&__src[28] = 2048;
        *(_QWORD *)&__src[30] = v102;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_178:
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v209, v67);
      re::StringID::destroyString((re::StringID *)v212);
      a2 = v182 + 1;
      v28 = v174;
      if (v182 + 1 == v175)
        goto LABEL_179;
    }
    v69 = *(_QWORD *)(v29 + 88);
    v70 = v69 + 56 * v68;
    v71 = (float32x4_t *)(v180 + 192 * v179);
    v194 = v71 + 5;
    v196 = v70;
    v178 = v71 + 7;
    v187 = (unint64_t *)&v71[8];
    v190 = &v71[8].i32[2];
    v192 = (_anonymous_namespace_ *)&v71[6];
    v185 = v71 + 9;
    v186 = &v71[7].u64[1];
    v72 = 1;
    while (1)
    {
      v73 = *(float32x4_t **)v69;
      v74 = *((_DWORD *)v12 + 10);
      re::MeshDefinition::computeBoundingBox(*(float32x4_t **)v69, (float32x4_t *)v228);
      v76 = *((_QWORD *)v12 + 4);
      v75 = *((_QWORD *)v12 + 5);
      if (v75 >= v76)
      {
        v77 = v75 + 1;
        if (v76 < v75 + 1)
        {
          if (*(_QWORD *)v184)
          {
            v78 = 2 * v76;
            if (!v76)
              v78 = 8;
            if (v78 <= v77)
              v79 = v77;
            else
              v79 = v78;
            re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(v184, v79);
          }
          else
          {
            v46 = v189;
            re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(v184, v77);
            ++*((_DWORD *)v12 + 12);
          }
        }
        v75 = *((_QWORD *)v12 + 5);
      }
      v80 = *(float32x4_t **)v69;
      *(_QWORD *)(*v199 + 8 * v75) = *(_QWORD *)v69;
      if (v80)
      {
        v81 = &v80->u32[2];
        v75 = *((_QWORD *)v12 + 5);
      }
      *((_QWORD *)v12 + 5) = v75 + 1;
      ++*((_DWORD *)v12 + 12);
      v208 = *((_QWORD *)v12 + 10);
      if ((*(_BYTE *)(v69 + 24) & 1) != 0)
        v82 = *(const char **)(v69 + 32);
      else
        v82 = (const char *)(v69 + 25);
      v83 = (_anonymous_namespace_ *)re::UniqueNameGenerator::uniqueName((re::UniqueNameGenerator *)v209, v82, "Part", (re::StringID *)v207);
      *(_DWORD *)__src = v74;
      *(_QWORD *)&v218[2] = 0;
      memset(v218, 0, 28);
      re::DynamicArray<int>::setCapacity(v218, 1uLL);
      ++DWORD2(v218[1]);
      v84 = (_anonymous_namespace_ *)re::DynamicArray<float>::copy(v218, 0, __src, 1);
      v85 = (const char *)v207[1];
      v219 = *(int32x4_t *)v228;
      v220 = *(_OWORD *)&v228[16];
      LOBYTE(v221) = v73[10].i8[0];
      if ((_BYTE)v221)
        BYTE1(v221) = v73[10].i8[1];
      BYTE2(v221) = v73[10].i8[2];
      if (BYTE2(v221))
        BYTE3(v221) = v73[10].i8[3];
      BYTE4(v221) = v73[10].i8[4];
      if (BYTE4(v221))
        BYTE5(v221) = v73[10].i8[5];
      LODWORD(v222) = v73[6].i32[0];
      BYTE4(v222) = *(_BYTE *)(v69 + 8);
      DWORD2(v222) = *(_DWORD *)(v69 + 48);
      HIDWORD(v222) = v73[6].i32[1];
      v87 = *((_QWORD *)v12 + 9);
      v86 = *((_QWORD *)v12 + 10);
      if (v86 >= v87)
      {
        v88 = v86 + 1;
        if (v87 < v86 + 1)
        {
          if (*(_QWORD *)v183)
          {
            v89 = 2 * v87;
            if (!v87)
              v89 = 8;
            if (v89 <= v88)
              v90 = v88;
            else
              v90 = v89;
            re::DynamicArray<re::MeshResourceDefinition::Part>::setCapacity(v183, v90);
          }
          else
          {
            re::DynamicArray<re::MeshResourceDefinition::Part>::setCapacity(v183, v88);
            ++*((_DWORD *)v12 + 22);
          }
        }
        v86 = *((_QWORD *)v12 + 10);
      }
      v91 = *v200;
      v92 = *v200 + 144 * v86;
      *(_QWORD *)(v92 + 32) = 0;
      *(_QWORD *)(v92 + 8) = 0;
      *(_QWORD *)(v92 + 16) = 0;
      *(_QWORD *)v92 = 0;
      *(_DWORD *)(v92 + 24) = 0;
      *(_QWORD *)v92 = *(_QWORD *)&v218[0];
      *(_QWORD *)&v218[0] = 0;
      *(_QWORD *)(v92 + 8) = *((_QWORD *)&v218[0] + 1);
      *((_QWORD *)&v218[0] + 1) = 0;
      v93 = *(_QWORD *)(v92 + 16);
      *(_QWORD *)(v92 + 16) = *(_QWORD *)&v218[1];
      *(_QWORD *)&v218[1] = v93;
      v94 = *(_QWORD *)(v92 + 32);
      *(_QWORD *)(v92 + 32) = *(_QWORD *)&v218[2];
      *(_QWORD *)&v218[2] = v94;
      ++DWORD2(v218[1]);
      ++*(_DWORD *)(v92 + 24);
      *(_OWORD *)(v92 + 40) = 0u;
      *(_OWORD *)(v92 + 56) = 0u;
      *(_QWORD *)(v92 + 40) = *((_QWORD *)&v218[2] + 1);
      *((_QWORD *)&v218[2] + 1) = 0;
      v95 = *(_QWORD *)(v92 + 56);
      *(_QWORD *)(v92 + 56) = *((_QWORD *)&v218[3] + 1);
      *((_QWORD *)&v218[3] + 1) = v95;
      *(_QWORD *)(v92 + 64) = *(_QWORD *)&v218[4];
      *(_QWORD *)&v218[4] = 0;
      v96 = *(_QWORD *)(v92 + 48);
      *(_QWORD *)(v92 + 48) = *(_QWORD *)&v218[3];
      *(_QWORD *)&v218[3] = v96;
      v97 = v220;
      *(int32x4_t *)(v92 + 80) = v219;
      *(_OWORD *)(v92 + 96) = v97;
      LODWORD(v96) = v221;
      *(_BYTE *)(v92 + 112) = v221;
      if ((_DWORD)v96)
        *(_BYTE *)(v91 + 144 * v86 + 113) = BYTE1(v221);
      v98 = BYTE2(v221);
      *(_BYTE *)(v91 + 144 * v86 + 114) = BYTE2(v221);
      if (v98)
        *(_BYTE *)(v91 + 144 * v86 + 115) = BYTE3(v221);
      v99 = BYTE4(v221);
      *(_BYTE *)(v91 + 144 * v86 + 116) = BYTE4(v221);
      if (v99)
        *(_BYTE *)(v91 + 144 * v86 + 117) = BYTE5(v221);
      *(_OWORD *)(v91 + 144 * v86 + 120) = v222;
      ++*((_QWORD *)v12 + 10);
      ++*((_DWORD *)v12 + 22);
      if (*((_QWORD *)&v218[2] + 1))
      {
        if ((v218[3] & 1) != 0)
          (*(void (**)(void))(**((_QWORD **)&v218[2] + 1) + 40))();
        memset((char *)&v218[2] + 8, 0, 32);
      }
      if (*(_QWORD *)&v218[0] && *(_QWORD *)&v218[2])
        (*(void (**)(void))(**(_QWORD **)&v218[0] + 40))();
      v100 = *(int *)(v69 + 52);
      v101 = *(_QWORD *)(v63 + 16);
      if (v101 > v100)
        break;
      v102 = (int)v100 + 1;
      if (v101 >= v102)
      {
        if (v101 <= v102)
          break;
        v106 = 40 * v102;
        v107 = (int)v100 + 1;
        do
        {
          v108 = *(_QWORD *)(v63 + 32);
          v109 = (_QWORD *)(v108 + v106);
          v110 = *(_QWORD *)(v108 + v106);
          if (v110)
          {
            if (v109[4])
              (*(void (**)(uint64_t))(*(_QWORD *)v110 + 40))(v110);
            v109[4] = 0;
            v109[1] = 0;
            v109[2] = 0;
            *v109 = 0;
            ++*(_DWORD *)(v108 + v106 + 24);
            v101 = *(_QWORD *)(v63 + 16);
          }
          ++v107;
          v106 += 40;
        }
        while (v107 < v101);
      }
      else
      {
        if (*(_QWORD *)(v63 + 8) < v102)
        {
          re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((_QWORD *)v63, (int)v100 + 1);
          v101 = *(_QWORD *)(v63 + 16);
        }
        v103 = v102 - v101;
        if (v102 > v101)
        {
          v104 = 40 * v101;
          do
          {
            v105 = *(_QWORD *)(v63 + 32) + v104;
            *(_QWORD *)(v105 + 32) = 0;
            *(_QWORD *)(v105 + 8) = 0;
            *(_QWORD *)(v105 + 16) = 0;
            *(_QWORD *)v105 = 0;
            *(_DWORD *)(v105 + 24) = 0;
            v104 += 40;
            --v103;
          }
          while (v103);
        }
      }
      *(_QWORD *)(v63 + 16) = v102;
      ++*(_DWORD *)(v63 + 24);
      v12 = v198;
      v46 = v189;
LABEL_132:
      if (v102 <= v100)
        goto LABEL_204;
      re::DynamicArray<int>::add((_QWORD *)(*(_QWORD *)(v63 + 32) + 40 * (int)v100), &v208);
      v111 = *v194;
      v112 = *(float32x4_t *)v228;
      v111.i32[3] = 0;
      v112.i32[3] = 0;
      *v194 = vminnmq_f32(v111, v112);
      v113 = *(float32x4_t *)v192;
      v114 = *(float32x4_t *)&v228[16];
      v113.i32[3] = 0;
      v114.i32[3] = 0;
      *(float32x4_t *)v192 = vmaxnmq_f32(v113, v114);
      LODWORD(v218[0]) = 0;
      memset((char *)v218 + 8, 0, 48);
      if ((v72 & 1) != 0
        && (v115 = re::MeshDefinition::skinningData(*(re::MeshDefinition **)v69, v46, (uint64_t)v218), (v115 & 1) != 0))
      {
        v116 = *v187;
        v117 = *v186;
        if (*v187 >= *v186)
        {
          v118 = v116 + 1;
          if (v117 < v116 + 1)
          {
            if (v178->i64[0])
            {
              v119 = 2 * v117;
              v49 = v117 == 0;
              v120 = 8;
              if (!v49)
                v120 = v119;
              if (v120 <= v118)
                v121 = v118;
              else
                v121 = v120;
              re::DynamicArray<re::BaseBlendShapeChannelData>::setCapacity(v178, v121);
            }
            else
            {
              re::DynamicArray<re::BaseBlendShapeChannelData>::setCapacity(v178, v118);
              ++*v190;
            }
          }
          v116 = *v187;
        }
        v122 = v185->i64[0] + 56 * v116;
        *(_OWORD *)v122 = v218[0];
        *(_OWORD *)(v122 + 16) = v218[1];
        *(_OWORD *)(v122 + 32) = v218[2];
        *(_QWORD *)(v122 + 48) = *(_QWORD *)&v218[3];
        ++*v187;
        ++*v190;
        re::StringID::destroyString((re::StringID *)v207);
        v69 += 56;
        v72 = 1;
        if (v69 == v196)
          goto LABEL_149;
      }
      else
      {
        re::StringID::destroyString((re::StringID *)v207);
        v72 = 0;
        v69 += 56;
        if (v69 == v196)
        {
          *v187 = 0;
          ++*v190;
          goto LABEL_149;
        }
      }
    }
    v102 = *(_QWORD *)(v63 + 16);
    goto LABEL_132;
  }
LABEL_179:
  v148 = a4;
  if (v172)
  {
    v149 = 8 * v172;
    do
    {
      v150 = *v148;
      if ((*(_BYTE *)(*v148 + 32) & 1) != 0)
        v151 = *(const char **)(v150 + 40);
      else
        v151 = (const char *)(v150 + 33);
      v152 = (_anonymous_namespace_ *)re::UniqueNameGenerator::uniqueName((re::UniqueNameGenerator *)v201, v151, "Instance", (re::StringID *)__src);
      v153 = *(const char **)&__src[8];
      LODWORD(v218[2]) = *(_DWORD *)(v150 + 56);
      v155 = *(_OWORD *)(v150 + 64);
      v156 = *(_OWORD *)(v150 + 80);
      v157 = *(_OWORD *)(v150 + 112);
      v219 = *(int32x4_t *)(v150 + 96);
      v220 = v157;
      v218[3] = v155;
      v218[4] = v156;
      v221 = *(_QWORD *)(v150 + 128);
      v158 = *((_QWORD *)v12 + 24);
      v159 = *((_QWORD *)v12 + 25);
      if (v159 >= v158)
      {
        v160 = v159 + 1;
        if (v158 < v159 + 1)
        {
          if (*((_QWORD *)v12 + 23))
          {
            if (v158)
              v161 = 2 * v158;
            else
              v161 = 8;
            if (v161 <= v160)
              v162 = v159 + 1;
            else
              v162 = v161;
            re::DynamicArray<re::MeshResourceDefinition::Instance>::setCapacity((_QWORD *)v12 + 23, v162);
          }
          else
          {
            re::DynamicArray<re::MeshResourceDefinition::Instance>::setCapacity((_QWORD *)v12 + 23, v160);
            ++*((_DWORD *)v12 + 52);
          }
        }
        v159 = *((_QWORD *)v12 + 25);
      }
      v163 = *((_QWORD *)v12 + 27) + (v159 << 7);
      *(_OWORD *)v163 = 0u;
      *(_OWORD *)(v163 + 16) = 0u;
      *(_QWORD *)v163 = *(_QWORD *)&v218[0];
      *(_QWORD *)&v218[0] = 0;
      v164 = *(_QWORD *)(v163 + 16);
      *(_QWORD *)(v163 + 16) = *(_QWORD *)&v218[1];
      *(_QWORD *)&v218[1] = v164;
      *(_QWORD *)(v163 + 24) = *((_QWORD *)&v218[1] + 1);
      *((_QWORD *)&v218[1] + 1) = 0;
      v165 = *(_QWORD *)(v163 + 8);
      *(_QWORD *)(v163 + 8) = *((_QWORD *)&v218[0] + 1);
      *((_QWORD *)&v218[0] + 1) = v165;
      v166 = v218[4];
      v167 = v219;
      v168 = v220;
      *(_QWORD *)(v163 + 112) = v221;
      *(int32x4_t *)(v163 + 80) = v167;
      *(_OWORD *)(v163 + 96) = v168;
      *(_OWORD *)(v163 + 64) = v166;
      v169 = v218[3];
      *(_OWORD *)(v163 + 32) = v218[2];
      *(_OWORD *)(v163 + 48) = v169;
      ++*((_QWORD *)v12 + 25);
      ++*((_DWORD *)v12 + 52);
      if (*(_QWORD *)&v218[0] && (BYTE8(v218[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v218[0] + 40))();
      re::StringID::destroyString((re::StringID *)__src);
      ++v148;
      v149 -= 8;
    }
    while (v149);
  }
  v170 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v201, v18);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v204, v170);
  return v12;
}

void re::MeshResourceDefinition::~MeshResourceDefinition(re::MeshResourceDefinition *this)
{
  char *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24ED78200;
  v2 = (char *)this + 144;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 33);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)this + 224);
  re::DynamicArray<re::MeshResourceDefinition::Instance>::deinit((uint64_t)this + 184);
  re::DynamicArray<re::MeshResourceDefinition::Model>::deinit((uint64_t)v2);
  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    if (*((_QWORD *)this + 17))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 17) = 0;
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 15) = 0;
    *((_QWORD *)this + 13) = 0;
    ++*((_DWORD *)this + 32);
  }
  re::DynamicArray<re::MeshResourceDefinition::Part>::deinit((uint64_t)this + 64);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)this + 24);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  char *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24ED78200;
  v2 = (char *)this + 144;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 33);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)this + 224);
  re::DynamicArray<re::MeshResourceDefinition::Instance>::deinit((uint64_t)this + 184);
  re::DynamicArray<re::MeshResourceDefinition::Model>::deinit((uint64_t)v2);
  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    if (*((_QWORD *)this + 17))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 17) = 0;
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 15) = 0;
    *((_QWORD *)this + 13) = 0;
    ++*((_DWORD *)this + 32);
  }
  re::DynamicArray<re::MeshResourceDefinition::Part>::deinit((uint64_t)this + 64);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)this + 24);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::DynamicArray<re::MeshModelDefinition::PartEntry>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::MeshModelDefinition::PartEntry>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshModelDefinition::PartEntry>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::MeshModelDefinition::PartEntry>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MeshModelDefinition::PartEntry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          v2 = 56 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_22;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_22:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (_QWORD *)(v8 + 24);
        v11 = 56 * v9;
        v12 = v7;
        do
        {
          *v12 = *(v10 - 3);
          *(v10 - 3) = 0;
          *((_BYTE *)v12 + 8) = *((_BYTE *)v10 - 16);
          *((_OWORD *)v12 + 1) = 0u;
          *((_OWORD *)v12 + 2) = 0u;
          v12[2] = *(v10 - 1);
          *(v10 - 1) = 0;
          v12[5] = v10[2];
          v10[2] = 0;
          v14 = v12[3];
          v13 = v12[4];
          v15 = v10[1];
          v12[3] = *v10;
          v12[4] = v15;
          *v10 = v14;
          v10[1] = v13;
          v12[6] = v10[3];
          v16 = *(v10 - 1);
          if (v16)
          {
            if ((*(_BYTE *)v10 & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 40))(v16, v10[1]);
            *(_OWORD *)(v10 - 1) = 0u;
            *(_OWORD *)(v10 + 1) = 0u;
          }
          v17 = *(v10 - 3);
          if (v17)
          {

            *(v10 - 3) = 0;
          }
          v10 += 7;
          v12 += 7;
          v11 -= 56;
        }
        while (v11);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_22;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::MeshResourceDefinition::Model>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MeshResourceDefinition::Model>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xC0uLL))
        {
          v2 = 192 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 192 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_24;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 192, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_24:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 192 * v9;
        do
        {
          v12 = &v7[v10 / 8];
          v13 = v8 + v10;
          v12[4] = 0;
          v12[1] = 0;
          v12[2] = 0;
          *v12 = 0;
          *((_DWORD *)v12 + 6) = 0;
          v14 = *(_QWORD *)(v8 + v10 + 8);
          *v12 = *(_QWORD *)(v8 + v10);
          v12[1] = v14;
          *(_QWORD *)v13 = 0;
          *(_QWORD *)(v13 + 8) = 0;
          v15 = v7[v10 / 8 + 2];
          v12[2] = *(_QWORD *)(v8 + v10 + 16);
          *(_QWORD *)(v13 + 16) = v15;
          v16 = v7[v10 / 8 + 4];
          v12[4] = *(_QWORD *)(v8 + v10 + 32);
          *(_QWORD *)(v13 + 32) = v16;
          *(_DWORD *)(v13 + 24) = *(_DWORD *)(v8 + v10 + 24) + 1;
          LODWORD(v16) = LODWORD(v7[v10 / 8 + 3]) + 1;
          *(_OWORD *)(v12 + 5) = 0u;
          *(_OWORD *)(v12 + 7) = 0u;
          v18 = (_QWORD *)(v8 + v10 + 40);
          v17 = *v18;
          *((_DWORD *)v12 + 6) = v16;
          v12[5] = v17;
          *v18 = 0;
          v12[8] = *(_QWORD *)(v8 + v10 + 64);
          *(_QWORD *)(v13 + 64) = 0;
          v20 = v7[v10 / 8 + 6];
          v19 = v7[v10 / 8 + 7];
          v21 = *(_QWORD *)(v8 + v10 + 56);
          v12[6] = *(_QWORD *)(v8 + v10 + 48);
          v12[7] = v21;
          *(_QWORD *)(v13 + 48) = v20;
          *(_QWORD *)(v13 + 56) = v19;
          v22 = *(_OWORD *)(v8 + v10 + 96);
          *((_OWORD *)v12 + 5) = *(_OWORD *)(v8 + v10 + 80);
          *((_OWORD *)v12 + 6) = v22;
          v12[18] = 0;
          *((_DWORD *)v12 + 34) = 0;
          v12[15] = 0;
          v12[16] = 0;
          v12[14] = 0;
          v23 = (_QWORD *)(v8 + v10 + 112);
          v24 = *(_QWORD *)(v8 + v10 + 120);
          v12[14] = *v23;
          *v23 = 0;
          v12[15] = v24;
          *(_QWORD *)(v13 + 120) = 0;
          v25 = v7[v10 / 8 + 16];
          v12[16] = *(_QWORD *)(v8 + v10 + 128);
          *(_QWORD *)(v13 + 128) = v25;
          v26 = v7[v10 / 8 + 18];
          v12[18] = *(_QWORD *)(v8 + v10 + 144);
          *(_QWORD *)(v13 + 144) = v26;
          *(_DWORD *)(v13 + 136) = *(_DWORD *)(v8 + v10 + 136) + 1;
          *((_DWORD *)v12 + 34) = LODWORD(v7[v10 / 8 + 17]) + 1;
          v12[23] = 0;
          v12[20] = 0;
          v12[21] = 0;
          v12[19] = 0;
          *((_DWORD *)v12 + 44) = 0;
          v27 = (_QWORD *)(v8 + v10 + 152);
          v28 = *(_QWORD *)(v8 + v10 + 160);
          v12[19] = *v27;
          *v27 = 0;
          v12[20] = v28;
          *(_QWORD *)(v13 + 160) = 0;
          v29 = v7[v10 / 8 + 21];
          v12[21] = *(_QWORD *)(v8 + v10 + 168);
          *(_QWORD *)(v13 + 168) = v29;
          v30 = v7[v10 / 8 + 23];
          v12[23] = *(_QWORD *)(v8 + v10 + 184);
          *(_QWORD *)(v13 + 184) = v30;
          *(_DWORD *)(v13 + 176) = *(_DWORD *)(v8 + v10 + 176) + 1;
          *((_DWORD *)v12 + 44) = LODWORD(v7[v10 / 8 + 22]) + 1;
          re::DynamicArray<re::MeshAssetBlendShapeData>::deinit((uint64_t)v27);
          if (*v23)
          {
            if (*(_QWORD *)(v13 + 144))
              (*(void (**)(_QWORD))(*(_QWORD *)*v23 + 40))(*v23);
            *(_QWORD *)(v13 + 144) = 0;
            *(_QWORD *)(v8 + v10 + 120) = 0;
            *(_QWORD *)(v8 + v10 + 128) = 0;
            *v23 = 0;
            ++*(_DWORD *)(v13 + 136);
          }
          if (*v18)
          {
            if ((*(_BYTE *)(v13 + 48) & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v18 + 40))(*v18, *(_QWORD *)(v13 + 56));
            *(_OWORD *)v18 = 0u;
            *(_OWORD *)(v8 + v10 + 56) = 0u;
          }
          re::DynamicArray<re::DynamicArray<unsigned char>>::deinit(v8 + v10);
          v10 += 192;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_24;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::MeshResourceDefinition::Part>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MeshResourceDefinition::Part>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x90uLL))
        {
          v2 = 144 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 144 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_30;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 144, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_30:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 144 * v9;
        v12 = 0uLL;
        do
        {
          v13 = &v7[v10 / 8];
          v14 = (_QWORD *)(v8 + v10);
          v13[4] = 0;
          v13[1] = 0;
          v13[2] = 0;
          *v13 = 0;
          *((_DWORD *)v13 + 6) = 0;
          v15 = *(_QWORD *)(v8 + v10 + 8);
          *v13 = *(_QWORD *)(v8 + v10);
          v13[1] = v15;
          *v14 = 0;
          v14[1] = 0;
          v16 = v7[v10 / 8 + 2];
          v13[2] = *(_QWORD *)(v8 + v10 + 16);
          v14[2] = v16;
          v17 = v7[v10 / 8 + 4];
          v13[4] = *(_QWORD *)(v8 + v10 + 32);
          v14[4] = v17;
          *((_DWORD *)v14 + 6) = *(_DWORD *)(v8 + v10 + 24) + 1;
          *((_DWORD *)v13 + 6) = LODWORD(v7[v10 / 8 + 3]) + 1;
          *(_OWORD *)(v13 + 5) = v12;
          *(_OWORD *)(v13 + 7) = v12;
          v18 = (_QWORD *)(v8 + v10 + 40);
          v13[5] = *v18;
          *v18 = 0;
          v13[8] = *(_QWORD *)(v8 + v10 + 64);
          v14[8] = 0;
          v20 = v7[v10 / 8 + 6];
          v19 = v7[v10 / 8 + 7];
          v21 = *(_QWORD *)(v8 + v10 + 56);
          v13[6] = *(_QWORD *)(v8 + v10 + 48);
          v13[7] = v21;
          v14[6] = v20;
          v14[7] = v19;
          v22 = *(_OWORD *)(v8 + v10 + 96);
          *((_OWORD *)v13 + 5) = *(_OWORD *)(v8 + v10 + 80);
          *((_OWORD *)v13 + 6) = v22;
          LODWORD(v19) = *(unsigned __int8 *)(v8 + v10 + 112);
          *((_BYTE *)v13 + 112) = v19;
          if ((_DWORD)v19)
            *((_BYTE *)v13 + 113) = *((_BYTE *)v14 + 113);
          v23 = *((unsigned __int8 *)v14 + 114);
          *((_BYTE *)v13 + 114) = v23;
          if (v23)
            BYTE3(v7[v10 / 8 + 14]) = *(_BYTE *)(v8 + v10 + 115);
          v24 = &v7[v10 / 8];
          v25 = v8 + v10;
          v26 = *(unsigned __int8 *)(v8 + v10 + 116);
          BYTE4(v7[v10 / 8 + 14]) = v26;
          if (v26)
            *((_BYTE *)v24 + 117) = *(_BYTE *)(v25 + 117);
          *(_OWORD *)(v24 + 15) = *(_OWORD *)(v25 + 120);
          if (*v18)
          {
            if ((v14[6] & 1) != 0)
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v18 + 40))(*v18, v14[7]);
              v12 = 0uLL;
            }
            *(_OWORD *)v18 = v12;
            *(_OWORD *)(v8 + v10 + 56) = v12;
          }
          if (*v14)
          {
            if (v14[4])
            {
              (*(void (**)(_QWORD))(*(_QWORD *)*v14 + 40))(*v14);
              v12 = 0uLL;
            }
            v14[4] = 0;
            v14[1] = 0;
            v14[2] = 0;
            *v14 = 0;
            ++*((_DWORD *)v14 + 6);
          }
          v10 += 144;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_30;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::MeshResourceDefinition::Instance>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MeshResourceDefinition::Instance>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 57)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 128, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 7;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 7, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v9 << 7;
        v11 = (uint64_t *)(v8 + 16);
        v12 = 0uLL;
        v13 = v7;
        do
        {
          *(_OWORD *)v13 = v12;
          *((_OWORD *)v13 + 1) = v12;
          *v13 = *(v11 - 2);
          *(v11 - 2) = 0;
          v14 = *v11;
          v13[3] = v11[1];
          v11[1] = 0;
          v16 = v13[1];
          v15 = v13[2];
          v17 = *(v11 - 1);
          v13[2] = v14;
          *v11 = v15;
          v13[1] = v17;
          *(v11 - 1) = v16;
          v18 = *((_OWORD *)v11 + 3);
          v19 = *((_OWORD *)v11 + 4);
          v20 = *((_OWORD *)v11 + 5);
          v13[14] = v11[12];
          *((_OWORD *)v13 + 5) = v19;
          *((_OWORD *)v13 + 6) = v20;
          *((_OWORD *)v13 + 4) = v18;
          v21 = *((_OWORD *)v11 + 2);
          *((_OWORD *)v13 + 2) = *((_OWORD *)v11 + 1);
          *((_OWORD *)v13 + 3) = v21;
          v22 = *(v11 - 2);
          if (v22)
          {
            if ((*(_BYTE *)(v11 - 1) & 1) != 0)
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 40))(v22, *v11);
              v12 = 0uLL;
            }
            *((_OWORD *)v11 - 1) = v12;
            *(_OWORD *)v11 = v12;
          }
          v11 += 16;
          v13 += 16;
          v10 -= 128;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::MeshResourceDefinition::Instance>::deinit(uint64_t a1)
{
  uint64_t result;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(__n128 **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = v4 << 7;
        v6 = 0uLL;
        do
        {
          if (v3->n128_u64[0])
          {
            if ((v3->n128_u8[8] & 1) != 0)
            {
              (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v3->n128_u64[0] + 40))(v3->n128_u64[0], v3[1].n128_u64[0], v6);
              v6 = 0uLL;
            }
            *v3 = v6;
            v3[1] = v6;
          }
          v3 += 8;
          v5 -= 128;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(__n128 **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, __n128 *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::MeshResourceDefinition::Model>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = v3 + 152;
        v6 = 192 * v4;
        do
        {
          re::DynamicArray<re::MeshAssetBlendShapeData>::deinit(v5);
          v7 = *(_QWORD *)(v5 - 40);
          if (v7)
          {
            if (*(_QWORD *)(v5 - 8))
              (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
            *(_QWORD *)(v5 - 8) = 0;
            *(_QWORD *)(v5 - 32) = 0;
            *(_QWORD *)(v5 - 24) = 0;
            *(_QWORD *)(v5 - 40) = 0;
            ++*(_DWORD *)(v5 - 16);
          }
          v8 = *(_QWORD *)(v5 - 112);
          if (v8)
          {
            if ((*(_BYTE *)(v5 - 104) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(v5 - 96));
            *(_OWORD *)(v5 - 112) = 0u;
            *(_OWORD *)(v5 - 96) = 0u;
          }
          re::DynamicArray<re::DynamicArray<unsigned char>>::deinit(v5 - 152);
          v5 += 192;
          v6 -= 192;
        }
        while (v6);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::MeshResourceDefinition::Part>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = v3 + 32;
        v6 = 144 * v4;
        do
        {
          v7 = *(_QWORD *)(v5 + 8);
          if (v7)
          {
            if ((*(_BYTE *)(v5 + 16) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(v5 + 24));
            *(_OWORD *)(v5 + 8) = 0u;
            *(_OWORD *)(v5 + 24) = 0u;
          }
          v8 = *(_QWORD *)(v5 - 32);
          if (v8)
          {
            if (*(_QWORD *)v5)
              (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
            *(_QWORD *)v5 = 0;
            *(_QWORD *)(v5 - 24) = 0;
            *(_QWORD *)(v5 - 16) = 0;
            *(_QWORD *)(v5 - 32) = 0;
            ++*(_DWORD *)(v5 - 8);
          }
          v5 += 144;
          v6 -= 144;
        }
        while (v6);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::getOrCreateComputePipelineState(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  id *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  re::ShaderManager *v26;
  const char *v27;
  unint64_t LibraryHash;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  double v37;
  int v38;
  NSObject *v39;
  _anonymous_namespace_ *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t As64Bits;
  uint64_t v57;
  unsigned __int8 v58;
  unsigned __int8 v59;
  _BYTE *v60;
  re *v61;
  NSObject *v62;
  _BYTE *v63;
  re::AppleBuild *v65;
  const char *v66;
  char *v67;
  uint64_t v68;
  char v69;
  _BYTE v70[23];
  id v71;
  id v72;
  id v73;
  id v74;
  uint8_t buf[4];
  _BYTE *v76;
  _BYTE info[24];
  uint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)a2)
    v4 = re::Hash<re::DynamicString>::operator()((uint64_t)info, a2 + 8);
  else
    v4 = 0;
  v5 = re::Hash<re::DynamicString>::operator()((uint64_t)info, a2 + 40);
  v6 = re::TechniqueDefinitionBuilder::hashFunctionConstants(*(_QWORD *)(a2 + 104), *(_QWORD *)(a2 + 88));
  if (*(_BYTE *)(a2 + 112))
    v7 = *(_BYTE *)(a2 + 113);
  else
    v7 = 0;
  if (*(_BYTE *)(a2 + 114))
    v8 = *(_BYTE *)(a2 + 115);
  else
    v8 = 0;
  v9 = ((((unint64_t)v8 << 6) | 0x9E3779B97F4A7C17)
      + (((((v6 << 6)
          + (v6 >> 2)
          + (((v5 << 6) + (v5 >> 2) + (((v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4) - 0x61C8864680B583E9) ^ v5)
          - 0x61C8864680B583E9) ^ v6)
        + ((unint64_t)v7 << 6)
        - 0x61C8864680B583E9) ^ v7)) ^ v8;
  v10 = *(_QWORD *)(a1 + 56);
  v11 = (_QWORD *)(v10 + 48);
  if (*(_QWORD *)(v10 + 48))
  {
    v12 = *(unsigned int *)(*(_QWORD *)(v10 + 56) + 4 * (v9 % *(unsigned int *)(v10 + 72)));
    if ((_DWORD)v12 != 0x7FFFFFFF)
    {
      v17 = *(_QWORD *)(v10 + 64);
      if (*(_QWORD *)(v17 + 24 * v12 + 8) == v9)
        return v17 + 24 * v12 + 16;
      while (1)
      {
        LODWORD(v12) = *(_DWORD *)(v17 + 24 * v12) & 0x7FFFFFFF;
        if ((_DWORD)v12 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v17 + 24 * v12 + 8) == v9)
          return v17 + 24 * v12 + 16;
      }
    }
  }
  if (!*(_BYTE *)(a2 + 128))
  {
    v13 = atomic_load((unsigned __int8 *)&qword_25411A258);
    if ((v13 & 1) == 0)
    {
      v65 = (re::AppleBuild *)__cxa_guard_acquire(&qword_25411A258);
      if ((_DWORD)v65)
      {
        _MergedGlobals_393 = *re::AppleBuild::get(v65) == 1;
        __cxa_guard_release(&qword_25411A258);
      }
    }
    v14 = atomic_load((unsigned __int8 *)&qword_25411A260);
    if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_25411A260))
    {
      re::Defaults::BOOLValue((re::Defaults *)"shouldCrashOnRuntimeCompilation", v66, info);
      if (info[0])
        v67 = &info[1];
      else
        v67 = &_MergedGlobals_393;
      byte_25411A251 = *v67;
      __cxa_guard_release(&qword_25411A260);
    }
  }
  v15 = mach_absolute_time();
  if (*(_QWORD *)(a2 + 120))
  {
    v16 = *(_QWORD *)(a1 + 56) + 264;
    *(_QWORD *)info = *(_QWORD *)(a2 + 120);
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 56);
    if (!*(_BYTE *)a2)
    {
      v22 = (id *)(v19 + 248);
      goto LABEL_29;
    }
    if ((*(_QWORD *)(a2 + 16) & 1) != 0)
      v20 = *(const char **)(a2 + 24);
    else
      v20 = (const char *)(a2 + 17);
    *(_QWORD *)info = re::ShaderManager::getLibraryHash(*(re::ShaderManager **)(a1 + 56), v20);
    v16 = v19 + 264;
  }
  v21 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v16, (uint64_t *)info);
  if (v21)
    v22 = (id *)(v21 + 8);
  else
    v22 = 0;
LABEL_29:
  v74 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD5A0], sel_alloc), sel_init);
  v23 = *(_QWORD *)(a2 + 88);
  if (v23)
  {
    v24 = v23 << 6;
    v25 = (unsigned __int16 *)(*(_QWORD *)(a2 + 104) + 32);
    do
    {
      objc_msgSend(v74, sel_setConstantValue_type_atIndex_, *((_QWORD *)v25 + 3), *v25, v25[1]);
      v25 += 32;
      v24 -= 64;
    }
    while (v24);
  }
  v26 = *(re::ShaderManager **)(a1 + 56);
  if (*(_BYTE *)a2)
  {
    if ((*(_QWORD *)(a2 + 16) & 1) != 0)
      v27 = *(const char **)(a2 + 24);
    else
      v27 = (const char *)(a2 + 17);
    LibraryHash = re::ShaderManager::getLibraryHash(v26, v27);
    v26 = *(re::ShaderManager **)(a1 + 56);
  }
  else
  {
    LibraryHash = *((_QWORD *)v26 + 32);
  }
  if (*(_QWORD *)(a2 + 120))
    v29 = *(_QWORD *)(a2 + 120);
  else
    v29 = LibraryHash;
  if ((*(_QWORD *)(a2 + 48) & 1) != 0)
    v30 = *(_QWORD *)(a2 + 56);
  else
    v30 = a2 + 49;
  re::ShaderManager::makeFunctionDescriptor((uint64_t)v26, v30, &v74, v22, v29, &v73);
  re::mtl::Library::makeFunctionWithDescriptor(v22, v73, &v72);
  re::ShaderManager::makeComputePipelineDescriptor(*(re::ShaderManager **)(a1 + 56), &v71);
  if (*(_BYTE *)(a2 + 114))
    objc_msgSend(v71, sel_setSupportAddingBinaryFunctions_, *(unsigned __int8 *)(a2 + 115));
  objc_msgSend(v71, sel_setComputeFunction_, v72);
  if (*(_BYTE *)(a2 + 112))
    objc_msgSend(v71, sel_setThreadGroupSizeIsMultipleOfThreadExecutionWidth_, *(unsigned __int8 *)(a2 + 113));
  re::mtl::Device::makeComputePipelineState((id *)(a1 + 184), &v71, info);
  v31 = *(void **)info;
  if (!*(_QWORD *)info)

  v32 = mach_absolute_time();
  v33 = v32;
  v34 = *(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale;
  if (*(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale < 0.0)
  {
    v32 = mach_timebase_info((mach_timebase_info_t)info);
    if ((_DWORD)v32)
    {
      v37 = NAN;
      goto LABEL_55;
    }
    LODWORD(v35) = *(_DWORD *)info;
    LODWORD(v36) = *(_DWORD *)&info[4];
    v34 = (double)v35 / (double)v36;
    re::convertMachTimeToNanoSecs(unsigned long long)::tmscale = *(_QWORD *)&v34;
  }
  v37 = v34 * (double)(v33 - v15);
LABEL_55:
  v38 = (int)(v37 / 1000000.0);
  v39 = *re::graphicsLogObjects((re *)v32);
  v40 = (_anonymous_namespace_ *)os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v40)
  {
    if ((*(_QWORD *)(a2 + 48) & 1) != 0)
      v41 = *(_QWORD *)(a2 + 56);
    else
      v41 = a2 + 49;
    *(_DWORD *)info = 136446466;
    *(_QWORD *)&info[4] = v41;
    *(_WORD *)&info[12] = 1024;
    *(_DWORD *)&info[14] = v38;
    _os_log_impl(&dword_224FE9000, v39, OS_LOG_TYPE_DEFAULT, "PSO compilation completed for compute pipeline %{public}s in %d", info, 0x12u);
  }
  if (!*v11)
  {
    LODWORD(v42) = 0;
    goto LABEL_67;
  }
  v42 = v9 % *(unsigned int *)(v10 + 72);
  v43 = *(unsigned int *)(*(_QWORD *)(v10 + 56) + 4 * v42);
  if ((_DWORD)v43 == 0x7FFFFFFF)
  {
LABEL_67:
    v46 = *(unsigned int *)(v10 + 84);
    if ((_DWORD)v46 == 0x7FFFFFFF)
    {
      v46 = *(unsigned int *)(v10 + 80);
      v47 = v46;
      if ((_DWORD)v46 == *(_DWORD *)(v10 + 72))
      {
        re::HashTable<unsigned long,re::CachedTileRenderPipelineState,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v11, 2 * *(_DWORD *)(v10 + 76));
        LODWORD(v42) = v9 % *(unsigned int *)(v10 + 72);
        v47 = *(_DWORD *)(v10 + 80);
      }
      *(_DWORD *)(v10 + 80) = v47 + 1;
      v48 = *(_QWORD *)(v10 + 64);
      v49 = *(_DWORD *)(v48 + 24 * v46);
    }
    else
    {
      v48 = *(_QWORD *)(v10 + 64);
      v49 = *(_DWORD *)(v48 + 24 * v46);
      *(_DWORD *)(v10 + 84) = v49 & 0x7FFFFFFF;
    }
    v50 = 24 * v46;
    *(_DWORD *)(v48 + v50) = v49 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(v10 + 64) + v50) = *(_DWORD *)(*(_QWORD *)(v10 + 64) + 24 * v46) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v10 + 56) + 4 * v42);
    *(_QWORD *)(*(_QWORD *)(v10 + 64) + 24 * v46 + 8) = v9;
    v51 = *(_QWORD *)(v10 + 64) + 24 * v46;
    v40 = v31;
    *(_QWORD *)(v51 + 16) = v40;
    *(_DWORD *)(*(_QWORD *)(v10 + 56) + 4 * v42) = v46;
    ++*(_DWORD *)(v10 + 76);
    ++*(_DWORD *)(v10 + 88);
    v45 = *(_QWORD *)(v10 + 64) + 24 * v46;
    goto LABEL_73;
  }
  v44 = *(_QWORD *)(v10 + 64);
  while (*(_QWORD *)(v44 + 24 * v43 + 8) != v9)
  {
    LODWORD(v43) = *(_DWORD *)(v44 + 24 * v43) & 0x7FFFFFFF;
    if ((_DWORD)v43 == 0x7FFFFFFF)
      goto LABEL_67;
  }
  v45 = v44 + 24 * v43;
LABEL_73:
  v18 = v45 + 16;
  if (v38 >= 11)
  {
    v78 = 0;
    *(_OWORD *)&info[8] = 0uLL;
    re::DynamicString::setCapacity(info, 0x80uLL);
    v52 = *(_QWORD *)(a2 + 88);
    if (v52)
    {
      v53 = *(_QWORD *)(a2 + 104);
      v54 = v52 << 6;
      do
      {
        if ((*(_BYTE *)(v53 + 8) & 1) != 0)
          v55 = *(const char **)(v53 + 16);
        else
          v55 = (const char *)(v53 + 9);
        As64Bits = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v53);
        re::DynamicString::appendf((re::DynamicString *)info, "%s=%llu ", v55, As64Bits);
        v53 += 64;
        v54 -= 64;
      }
      while (v54);
    }
    if ((*(_QWORD *)(a2 + 48) & 1) != 0)
      v57 = *(_QWORD *)(a2 + 56);
    else
      v57 = a2 + 49;
    if (*(_BYTE *)(a2 + 112))
      v58 = *(_BYTE *)(a2 + 113);
    else
      v58 = 0;
    if (*(_BYTE *)(a2 + 114))
      v59 = *(_BYTE *)(a2 + 115);
    else
      v59 = 0;
    if ((info[8] & 1) != 0)
      v60 = *(_BYTE **)&info[16];
    else
      v60 = &info[9];
    v61 = (re *)re::DynamicString::format((re::DynamicString *)"name=%s tgsimotew=%d sabf=%d fc=%s", (re::DynamicString *)&v68, v57, v58, v59, v60);
    v62 = *re::graphicsLogObjects(v61);
    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
    {
      if ((v69 & 1) != 0)
        v63 = *(_BYTE **)&v70[7];
      else
        v63 = v70;
      *(_DWORD *)buf = 136446210;
      v76 = v63;
      _os_log_impl(&dword_224FE9000, v62, OS_LOG_TYPE_DEFAULT, "Compiling PSO RT %{public}s", buf, 0xCu);
    }
    if (v68 && (v69 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v68 + 40))();
    if (*(_QWORD *)info && (info[8] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)info + 40))();
  }
  if (v31)

  if (v71)
  if (v72)

  if (v73)
  if (v74)

  return v18;
}

uint64_t re::MeshPart::MeshPart(uint64_t a1, uint64_t *a2, __int16 a3, uint64_t a4, unint64_t a5, int a6, int a7, int a8, _OWORD *a9, uint64_t a10, __int128 *a11, re::MeshPartFlags *a12, int a13, int a14)
{
  uint64_t v16;
  _QWORD *v17;
  __int128 v18;
  _anonymous_namespace_ *v19;
  _anonymous_namespace_ *v20;
  unint64_t v21;
  unsigned __int8 v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  char v27;
  unsigned __int8 *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _anonymous_namespace_ *v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  __int16 v37;
  int v38;
  int v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  const char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  BOOL v58;
  int v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v70;
  re::MeshPartFlags *v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  int v80;
  __int128 v81;
  __int128 v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  __int128 v96;
  __int128 v97;
  int v98;
  uint64_t v99;
  unsigned int v100;
  char v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  const char *v109;
  char v110;
  uint64_t v111;
  const char *v112;
  char v113;
  uint64_t v114;
  const char *v115;
  char v116;
  uint64_t v117;
  const char *v118;
  char v119;
  uint64_t v120;
  const char *v121;
  char v122;
  uint64_t v123;
  const char *v124;
  char v125;
  uint64_t v126;
  const char *v127;
  char v128;
  uint64_t v129;
  const char *v130;
  char v131;
  uint64_t v132;
  const char *v133;
  char v134;
  uint64_t v135;
  const char *v136;
  char v137;
  uint64_t v138;
  const char *v139;
  char v140;
  uint64_t v141;
  const char *v142;
  char v143;
  uint64_t v144;
  const char *v145;
  char v146;
  uint64_t v147;
  const char *v148;
  char v149;
  uint64_t v150;
  const char *v151;
  char v152;
  uint64_t v153;
  const char *v154;
  char v155;
  uint64_t v156;
  const char *v157;
  char v158;
  uint64_t v159;
  const char *v160;
  char v161;
  uint64_t v162;
  const char *v163;
  char v164;
  uint64_t v165;
  const char *v166;
  char v167;
  uint64_t v168;
  const char *v169;
  _BYTE v170[18];
  __int16 v171;
  unint64_t v172;
  __int16 v173;
  unint64_t v174;
  _OWORD v175[5];
  uint64_t v176;

  v16 = a1;
  v176 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 208) = 1;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 312) = 0;
  v17 = (_QWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 368) = xmmword_2260E5F10;
  *(_OWORD *)(a1 + 384) = xmmword_2260E5F20;
  *(_OWORD *)(a1 + 400) = xmmword_2260E5F40;
  *(_OWORD *)(a1 + 416) = xmmword_2260E5D70;
  *(_QWORD *)&v18 = 0x7F0000007FLL;
  *((_QWORD *)&v18 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(a1 + 432) = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(a1 + 448) = v18;
  *(_WORD *)(a1 + 474) = 0;
  *(_BYTE *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 476) = -1;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = &str_110;
  LOBYTE(v18) = 0;
  BYTE4(v18) = 0;
  *(_QWORD *)(a1 + 528) = v18;
  *(_BYTE *)(a1 + 536) = 3;
  *(_QWORD *)(a1 + 540) = 0x180197E00000001;
  v83 = 0;
  v81 = 0u;
  v82 = 0u;
  v85 = 0;
  v86 = 0;
  v84 = 0;
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v80 = 0;
  v87 = 1;
  v89 = 0;
  v90 = 0;
  v88 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v95 = 0;
  v94 = 0;
  v99 = 0;
  v100 = 0;
  v96 = 0u;
  v97 = 0u;
  v98 = 0;
  v101 = 0;
  v72 = 0;
  v19 = (_anonymous_namespace_ *)re::BufferTable::deinit((re::BufferTable *)((char *)&v74 + 8));
  v71 = (re::MeshPartFlags *)a5;
  if (a5)
  {
    v21 = 0;
    v22 = 0;
    v70 = v16;
    do
    {
      v23 = a4 + (v21 << 6);
      v24 = *(_QWORD *)(v23 + 8);
      if ((v24 & 1) != 0)
      {
        v26 = *(_BYTE **)(v23 + 16);
        if (!v26)
        {
          v30 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_14;
        }
        LOBYTE(v25) = *v26;
      }
      else
      {
        v25 = v24 >> 8;
        v26 = (_BYTE *)(v23 + 9);
      }
      if ((_BYTE)v25)
      {
        v25 = (char)v25;
        v27 = v26[1];
        if (v27)
        {
          v28 = v26 + 2;
          do
          {
            v25 = 31 * v25 + v27;
            v29 = *v28++;
            v27 = v29;
          }
          while (v29);
        }
        v30 = v25 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        v30 = 0;
      }
LABEL_14:
      *(_QWORD *)&v103 = v30;
      LOBYTE(v175[0]) = v22;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew((_anonymous_namespace_ *)((char *)&v74 + 8), &v103, (char *)v175);
      if (v100 <= v22)
        v100 = v22 + 1;
      v31 = a4;
      v32 = a4 + (v21 << 6);
      v33 = (_anonymous_namespace_ *)re::BufferTable::setBuffer((uint64_t)&v74 + 8, v22, v32 + 40);
      v35 = *(unsigned __int8 *)(v32 + 32);
      v36 = *(unsigned __int8 *)(v32 + 33);
      v37 = *(_BYTE *)(v32 + 33) != 0;
      v40 = v32 + 56;
      v39 = *(_DWORD *)(v32 + 56);
      v38 = *(_DWORD *)(v40 + 4);
      if (v38 == -1)
      {
        v33 = (_anonymous_namespace_ *)re::sizeFromVertexFormat(v35, v34);
        LOWORD(v38) = ((_WORD)v33 + 3) & 0x1FC;
        if (!v36)
          LOWORD(v38) = (_WORD)v33;
      }
      v41 = (unsigned __int8 *)*((_QWORD *)&v73 + 1);
      if (*((_QWORD *)&v73 + 1) <= v21)
        goto LABEL_45;
      v42 = v74 + 16 * v21;
      *(_WORD *)v42 = v38;
      *(_WORD *)(v42 + 2) = v37;
      *(_BYTE *)(v42 + 4) = 1;
      *(_BYTE *)(v42 + 5) = v36;
      *(_DWORD *)(v42 + 8) = v39;
      *(_BYTE *)(v42 + 12) = v35;
      if ((*(_BYTE *)(v23 + 8) & 1) != 0)
        v43 = *(const char **)(v23 + 16);
      else
        v43 = (const char *)(v23 + 9);
      a4 = v31;
      *(_QWORD *)v170 = 0;
      *(_QWORD *)&v170[8] = &str_110;
      v16 = v70;
      v23 = *(_QWORD *)(v70 + 344);
      if (v23 <= v21)
        goto LABEL_46;
      v44 = (_QWORD *)(*(_QWORD *)(v70 + 352) + 16 * v21);
      v45 = *(_QWORD *)v170;
      v46 = *(_QWORD *)&v170[8];
      *(_QWORD *)v170 = 0;
      *(_QWORD *)&v170[8] = &str_110;
      v47 = v44[1];
      v48 = v45 & 0xFFFFFFFFFFFFFFFELL | *v44 & 1;
      v44[1] = v46;
      *(_QWORD *)&v103 = v48;
      *((_QWORD *)&v103 + 1) = v47;
      *v44 = v45;
      re::StringID::destroyString((re::StringID *)&v103);
      re::StringID::destroyString((re::StringID *)v170);
      v21 = ++v22;
    }
    while ((unint64_t)v71 > v22);
  }
  v21 = 0;
  v49 = (unsigned __int8 *)(v16 + 476);
  LOBYTE(v103) = 0;
  *((_QWORD *)&v103 + 1) = 0x5353CF4AA93DFAB9;
  *(_QWORD *)&v104 = "indexTriangles";
  BYTE8(v104) = 1;
  *(_QWORD *)&v105 = 0x2B3FAC222C23CAEDLL;
  *((_QWORD *)&v105 + 1) = "vertexPosition";
  LOBYTE(v106) = 2;
  *((_QWORD *)&v106 + 1) = 0x2ACCEB6695018FABLL;
  *(_QWORD *)&v107 = "vertexNormal";
  BYTE8(v107) = 3;
  v108 = 0x2ED0816D3076E801;
  v109 = "vertexTangent";
  v110 = 4;
  v111 = 0x3CB5CD20F43A4EDALL;
  v112 = "vertexBitangent";
  v113 = 5;
  v114 = 0x17D0D13783;
  v115 = "patchId";
  v116 = 6;
  v117 = 0x70C8BB7245F8AB8ALL;
  v118 = "controlIndices";
  v119 = 7;
  v120 = 0x535464BC4EA1E0C3;
  v121 = "tessellationFactors";
  v122 = 11;
  v123 = 0x51F9ECFD55626B9FLL;
  v124 = "stencilWeights";
  v125 = 9;
  v126 = 0x29E88D2A9E60D836;
  v127 = "stencilSizes";
  v128 = 10;
  v129 = 0x51F9ECFBAFC08CE4;
  v130 = "stencilOffsets";
  v131 = 12;
  v132 = 0x51F9ECFA7FE12A4BLL;
  v133 = "stencilIndices";
  v134 = 8;
  v135 = 0x14F9B341A90AFEELL;
  v136 = "patchParams";
  v137 = 13;
  v138 = 0x3CE8D825115C062ELL;
  v139 = "bspline_and_patch_points";
  v140 = 14;
  v141 = 0x5DDE4F761BC41E2;
  v142 = "tessellationHi";
  v143 = 15;
  v144 = 0x5DDE4F761BC4264;
  v145 = "tessellationLo";
  v146 = 16;
  v147 = 80;
  v148 = "P";
  v149 = 17;
  v150 = 2529;
  v151 = "P1";
  v152 = 18;
  v153 = 2530;
  v154 = "P2";
  v155 = 19;
  v156 = 0x51A5C348207ED4AELL;
  v157 = "simplifiedVertexPositions";
  v158 = 20;
  v159 = 0x4E47373A437E60EELL;
  v160 = "simplifiedFaceVertices";
  v161 = 21;
  v162 = 0x3F885CFB6A669EDBLL;
  v163 = "simplifiedAnimationSkinningInfluences";
  v164 = 22;
  v165 = 0xF742AA0C4B59C75;
  v166 = "simplifiedAnimationInfluenceEndIndices";
  v167 = 23;
  v168 = 0x18AAF04852;
  v23 = (unint64_t)&v103;
  v169 = "tension";
  do
  {
    v41 = (unsigned __int8 *)&v103 + v21;
    *(_QWORD *)&v175[0] = *(_QWORD *)((_BYTE *)&v103 + v21 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    v50 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)&v74 + 1, v175);
    if (v50 == -1)
      v52 = -1;
    else
      v52 = *(_BYTE *)(v75 + 16 * v50 + 8);
    v53 = *v41;
    if (v53 >= 0x18)
    {
      re::internal::assertLog((re::internal *)6, v51, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, *v41, 24);
      _os_crash();
      __break(1u);
LABEL_45:
      *(_QWORD *)v170 = 0;
      v106 = 0u;
      v107 = 0u;
      v104 = 0u;
      v105 = 0u;
      v103 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v175[0]) = 136315906;
      *(_QWORD *)((char *)v175 + 4) = "operator[]";
      WORD6(v175[0]) = 1024;
      *(_DWORD *)((char *)v175 + 14) = 468;
      WORD1(v175[1]) = 2048;
      *(_QWORD *)((char *)&v175[1] + 4) = v21;
      WORD6(v175[1]) = 2048;
      *(_QWORD *)((char *)&v175[1] + 14) = v41;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_46:
      v102 = 0;
      v106 = 0u;
      v107 = 0u;
      v104 = 0u;
      v105 = 0u;
      v103 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v175[0]) = 136315906;
      *(_QWORD *)((char *)v175 + 4) = "operator[]";
      WORD6(v175[0]) = 1024;
      *(_DWORD *)((char *)v175 + 14) = 468;
      WORD1(v175[1]) = 2048;
      *(_QWORD *)((char *)&v175[1] + 4) = v21;
      WORD6(v175[1]) = 2048;
      *(_QWORD *)((char *)&v175[1] + 14) = v23;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_47;
    }
    v49[v53] = v52;
    v21 += 24;
  }
  while (v21 != 576);
  *(_QWORD *)&v175[0] = 0x5353CF4AA93DFAB9;
  v54 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)&v74 + 1, v175);
  re::AttributeTableBuilder::makeAttributeTableAndReset((re::AttributeTableBuilder *)&v72, (re::AttributeTable *)v16);
  if (v54 != -1)
  {
    v55 = v16;
    do
    {
      v56 = v55;
      v55 = *(_QWORD *)(v55 + 8);
      v21 = *(_QWORD *)(v56 + 32);
      if (v55)
        v57 = v21 == 0;
      else
        v57 = 0;
    }
    while (v57);
    v23 = *v49;
    if (v21 > v23)
    {
      v58 = *(_BYTE *)(*(_QWORD *)(v56 + 40) + 16 * v23 + 12) == 36;
      *(_DWORD *)(v16 + 464) = a6;
      *(_BYTE *)(v16 + 472) = v58;
      goto LABEL_40;
    }
LABEL_47:
    v102 = 0;
    memset(v175, 0, sizeof(v175));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v170 = 136315906;
    *(_QWORD *)&v170[4] = "operator[]";
    *(_WORD *)&v170[12] = 1024;
    *(_DWORD *)&v170[14] = 476;
    v171 = 2048;
    v172 = v23;
    v173 = 2048;
    v174 = v21;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_DWORD *)(v16 + 464) = 0;
LABEL_40:
  *(_DWORD *)(v16 + 468) = a7;
  re::StringID::operator=((unint64_t *)(v16 + 504), a2);
  *(_QWORD *)(v16 + 520) = a10;
  *(_WORD *)(v16 + 474) = a3;
  *(_DWORD *)(v16 + 532) = a14;
  if (a13 == -1)
    v59 = a7;
  else
    v59 = a13;
  *(_DWORD *)(v16 + 528) = v59;
  v60 = a9[1];
  *(_OWORD *)(v16 + 432) = *a9;
  *(_OWORD *)(v16 + 448) = v60;
  *(_DWORD *)(v16 + 544) = re::MeshPartFlags::flattenToRenderFlags(a12);
  *(_DWORD *)(v16 + 540) = a8;
  v61 = *a11;
  v62 = a11[1];
  v63 = a11[3];
  *(_OWORD *)(v16 + 400) = a11[2];
  *(_OWORD *)(v16 + 416) = v63;
  *(_OWORD *)(v16 + 368) = v61;
  *(_OWORD *)(v16 + 384) = v62;
  re::AttributeTableBuilder::~AttributeTableBuilder((re::AttributeTableBuilder *)&v72);
  return v16;
}

void re::MeshPart::~MeshPart(re::MeshPart *this)
{
  re::StringID::destroyString((re::MeshPart *)((char *)this + 504));
  re::FixedArray<re::StringID>::deinit((_QWORD *)this + 42);
  re::AttributeTable::~AttributeTable(this);
}

unint64_t re::MeshPart::computeTriangleCount(re::MeshPart *this)
{
  re::MeshPart *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  re::MeshPart *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  re::MeshPart *v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  int v41;
  unint64_t v43;
  _BYTE v44[18];
  __int16 v45;
  unint64_t v46;
  __int16 v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  v1 = this;
  v54 = *MEMORY[0x24BDAC8D0];
  v2 = *((unsigned __int8 *)this + 536);
  if (v2 != 4)
  {
    if (v2 == 3)
      return *((unsigned int *)this + 116) / 3uLL;
    return 0;
  }
  v4 = *((unsigned __int8 *)this + 476);
  if (v4 == 255)
    return *((unsigned int *)this + 117) / 3uLL;
  if (*((_DWORD *)this + 116) < 3u)
    return 0;
  re::AttributeTable::buffers(this);
  if (v5 <= v4)
    return 0;
  v6 = v1;
  do
  {
    v7 = *((_QWORD *)v6 + 4);
    v6 = (re::MeshPart *)*((_QWORD *)v6 + 1);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 0;
  }
  while (v8);
  if (v7 <= v4)
    return 0;
  v9 = re::AttributeTable::buffers(v1);
  if (v10 <= v4)
  {
    re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v4, v10);
    _os_crash();
    __break(1u);
    goto LABEL_77;
  }
  v11 = v9 + 16 * v4;
  do
  {
    v12 = v1;
    v1 = (re::MeshPart *)*((_QWORD *)v1 + 1);
    v13 = *((_QWORD *)v12 + 4);
    if (v1)
      v14 = v13 == 0;
    else
      v14 = 0;
  }
  while (v14);
  if (v13 <= v4)
  {
LABEL_77:
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v49 = 0u;
    v43 = v13;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v44 = 136315906;
    *(_QWORD *)&v44[4] = "operator[]";
    *(_WORD *)&v44[12] = 1024;
    *(_DWORD *)&v44[14] = 476;
    v45 = 2048;
    v46 = v4;
    v47 = 2048;
    v48 = v43;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v15 = re::sizeFromVertexFormat(*(unsigned __int8 *)(*((_QWORD *)v12 + 5) + 16 * v4 + 12), v10);
  v16 = *(id *)v11;
  v17 = *(_QWORD *)(v11 + 8);
  if (*(_QWORD *)v11)
    v16 = v16;
  *(_QWORD *)v44 = v16;
  *(_QWORD *)&v44[8] = v17;
  re::ReadOnlyCPUAccessibleBufferSliceContent::make(v44, (uint64_t)&v49);
  v18 = 2 * v15;
  v19 = 0;
  v20 = (unint64_t)v50 / v15 - 2;
  if ((unint64_t)v50 / v15 != 2)
  {
    v21 = *((_QWORD *)&v49 + 1) + 1;
    v22 = v15 - 1;
    v23 = *((_QWORD *)&v49 + 1) + 1 + v18;
    do
    {
      if ((_DWORD)v15)
      {
        if (*(_BYTE *)(*((_QWORD *)&v49 + 1) + v19) == 15)
        {
          v24 = 0;
          while (v22 != v24)
          {
            v25 = *(unsigned __int8 *)(v21 + v24++);
            if (v25 != 15)
            {
              if (v24 >= v15)
                break;
              goto LABEL_30;
            }
          }
        }
        else
        {
LABEL_30:
          if (*(_BYTE *)(*((_QWORD *)&v49 + 1) + v19 + v15) == 15)
          {
            v26 = 0;
            while (v22 != v26)
            {
              v27 = *(unsigned __int8 *)(v21 + v15 + v26++);
              if (v27 != 15)
              {
                if (v26 >= v15)
                  break;
                goto LABEL_35;
              }
            }
          }
          else
          {
LABEL_35:
            if (*(_BYTE *)(*((_QWORD *)&v49 + 1) + v19 + v18) != 15)
              break;
            v28 = 0;
            while (v22 != v28)
            {
              v29 = *(unsigned __int8 *)(v23 + v28++);
              if (v29 != 15)
              {
                if (v28 < v15)
                  goto LABEL_41;
                break;
              }
            }
          }
        }
      }
      v19 += v15;
      v21 += v15;
      v23 += v15;
    }
    while (v19 < v20);
  }
LABEL_41:
  if (v19 < v20)
  {
    v3 = 0;
    v30 = *((_QWORD *)&v49 + 1) + 1 + v18;
    v31 = v15 - 1;
    while (1)
    {
      if (!(_DWORD)v15)
        goto LABEL_50;
      if (*(_BYTE *)(*((_QWORD *)&v49 + 1) + v19 + v18) == 15)
        break;
LABEL_49:
      v3 = (v3 + 1);
      v19 += v15;
LABEL_68:
      if (v19 >= v20)
        goto LABEL_74;
    }
    v32 = 0;
    while (v31 != v32)
    {
      v33 = *(unsigned __int8 *)(v30 + v19 + v32++);
      if (v33 != 15)
      {
        if (v32 >= v15)
          break;
        goto LABEL_49;
      }
    }
LABEL_50:
    v34 = *((_QWORD *)&v49 + 1) + 1 + v19;
    v35 = v30 + v19;
    do
    {
      if ((_DWORD)v15)
      {
        if (*(_BYTE *)(*((_QWORD *)&v49 + 1) + v19) == 15)
        {
          v36 = 0;
          while (v31 != v36)
          {
            v37 = *(unsigned __int8 *)(v34 + v36++);
            if (v37 != 15)
            {
              if (v36 >= v15)
                break;
              goto LABEL_57;
            }
          }
        }
        else
        {
LABEL_57:
          if (*(_BYTE *)(*((_QWORD *)&v49 + 1) + v19 + v15) == 15)
          {
            v38 = 0;
            while (v31 != v38)
            {
              v39 = *(unsigned __int8 *)(v34 + v15 + v38++);
              if (v39 != 15)
              {
                if (v38 >= v15)
                  break;
                goto LABEL_62;
              }
            }
          }
          else
          {
LABEL_62:
            if (*(_BYTE *)(*((_QWORD *)&v49 + 1) + v19 + v18) != 15)
              goto LABEL_68;
            v40 = 0;
            while (v31 != v40)
            {
              v41 = *(unsigned __int8 *)(v35 + v40++);
              if (v41 != 15)
              {
                if (v40 < v15)
                  goto LABEL_68;
                break;
              }
            }
          }
        }
      }
      v19 += v15;
      v34 += v15;
      v35 += v15;
    }
    while (v19 < v20);
    goto LABEL_68;
  }
  v3 = 0;
LABEL_74:
  re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)&v49);
  if (*(_QWORD *)v44)

  return v3;
}

__n128 re::makeDrawCallHelper(__n128 *a1, __n128 *a2, uint64_t a3, unsigned __int32 a4, char a5)
{
  unint64_t v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  unsigned __int16 v8;
  unsigned __int32 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  unsigned __int16 v13;
  unsigned __int32 v14;
  __int16 v15;
  __int16 v16;
  int v17;
  unsigned __int16 v18;
  unsigned __int32 v19;
  int v20;
  unsigned __int32 v21;
  unsigned __int16 v22;
  unint64_t v23;
  _QWORD *v24;
  __n128 result;

  v5 = a2[1].n128_u64[0];
  if (a2[11].n128_u8[0])
    a1[4].n128_u8[8] = a2[11].n128_u8[1] | a5;
  a1[4].n128_u64[0] = a2[3].n128_u64[0];
  v6 = a1->n128_u16[0] & 0xFFFE | (*(unsigned __int8 *)(v5 + 476) != 255);
  a1->n128_u16[0] = v6;
  v7 = v6 & 0xFFF1 | (2 * (*(_BYTE *)(v5 + 536) & 7));
  a1->n128_u16[0] = v7;
  v8 = v7 & 0xFFBF | ((a2[11].n128_u16[2] & 1) << 6);
  a1->n128_u16[0] = v8;
  v9 = a2[11].n128_u32[1];
  if ((v9 & 0x800) != 0)
    v10 = -1;
  else
    v10 = -2;
  v11 = v10 & a1->n128_u16[5];
  if ((v9 & 0x1000) != 0)
    v12 = -1;
  else
    v12 = -3;
  a1->n128_u16[5] = v11 & v12;
  v13 = v8 & 0xFDFF | (((v9 & 0x60) != 96) << 9);
  a1->n128_u16[0] = v13;
  if ((v9 & 0x60) != 0x60)
  {
    v14 = a2[11].n128_u32[1];
    if ((v14 & 0x20) != 0)
      v15 = 1024;
    else
      v15 = 2048;
    if ((v14 & 0x40) != 0)
      v16 = 0;
    else
      v16 = v15;
    v13 = v16 | v13 & 0xF3FF;
    a1->n128_u16[0] = v13;
  }
  v17 = a2[11].n128_u32[1] & 0x300000;
  v18 = v13 & 0xEFFF | ((v17 != 0) << 12);
  a1->n128_u16[0] = v18;
  if (v17)
  {
    v19 = a2[11].n128_u32[1];
    if ((v19 & 0x100000) != 0)
      LOWORD(v20) = 0;
    else
      v20 = ((v19 >> 21) & 1) << 13;
    v18 = v20 | v18 & 0xDFFF;
    a1->n128_u16[0] = v18;
  }
  v21 = *(_DWORD *)(v5 + 464);
  v22 = v18 & 0xFF7F | ((*(_BYTE *)(v5 + 472) & 1) << 7);
  a1->n128_u16[0] = v22;
  a1->n128_u16[0] = v22 & 0xFEFF | (((a2[11].n128_u8[4] & 2) != 0) << 8);
  a1[1].n128_u32[0] = *(_DWORD *)(v5 + 468);
  a1[1].n128_u32[1] = v21;
  a1->n128_u8[2] = *(_BYTE *)(v5 + 476);
  v23 = a2[2].n128_u64[1];
  if (!v23)
    v23 = v5;
  a1[3].n128_u64[1] = v23;
  a1->n128_u32[1] = a2[3].n128_u32[3];
  a1[2].n128_u32[3] = a2[9].n128_u32[0];
  a1[1].n128_u32[2] = *(_DWORD *)(v5 + 532);
  a1->n128_u8[8] = *(_BYTE *)(v5 + 483);
  a1[2].n128_u32[0] = *(_DWORD *)(v5 + 540);
  a1[2].n128_u32[1] = a4;
  a1[5].n128_u64[0] = a2->n128_u64[0];
  a1[5].n128_u32[2] = a2[3].n128_u32[2];
  a1->n128_u8[9] = a2[9].n128_u8[7];
  a1[5].n128_u16[6] = *(_WORD *)(v5 + 474);
  v24 = (_QWORD *)a2[13].n128_u64[1];
  if (v24)
    LOBYTE(v24) = *v24 != 0;
  a1->n128_u8[3] = v24;
  result = a2[13];
  a1[6] = result;
  a1[7].n128_u64[1] = *(_QWORD *)(v5 + 520);
  return result;
}

uint64_t re::addDrawCall(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int32 a4, uint64_t a5)
{
  uint64_t v10;
  __n128 *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  int v20;

  v10 = re::BucketArray<re::DrawCall,128ul>::addUninitialized(a1);
  re::DrawCall::DrawCall((re::DrawCall *)v10);
  re::makeDrawCallHelper(v11, (__n128 *)a2, a3, a4, *(_BYTE *)(a5 + 8));
  *(_DWORD *)(v10 + 76) = *(_QWORD *)(a1 + 96);
  v12 = (_OWORD *)re::BucketArray<re::Matrix4x4<float>,128ul>::addUninitialized(a1 + 56);
  v13 = *(_OWORD *)(a2 + 112);
  v15 = *(_OWORD *)(a2 + 64);
  v14 = *(_OWORD *)(a2 + 80);
  v12[2] = *(_OWORD *)(a2 + 96);
  v12[3] = v13;
  *v12 = v15;
  v12[1] = v14;
  v16 = *(_QWORD *)(*(_QWORD *)(v10 + 64) + 80);
  if (v16)
    v17 = v16 + 152;
  else
    v17 = 0;
  *(_QWORD *)re::BucketArray<re::ConstantTable const*,128ul>::addUninitialized(a1 + 112) = v17;
  v18 = *(float *)(a2 + 192) * (float)*(int *)(a2 + 184);
  *(float *)re::BucketArray<float,128ul>::addUninitialized(a1 + 168) = v18;
  *(_DWORD *)re::BucketArray<unsigned int,128ul>::addUninitialized(a1 + 224) = *(_DWORD *)(a2 + 200);
  if (*(_BYTE *)a5)
  {
    v20 = *(_DWORD *)(a5 + 4);
    if (!*(_BYTE *)(v10 + 48))
      *(_BYTE *)(v10 + 48) = 1;
    *(_DWORD *)(v10 + 52) = v20;
  }
  return v10;
}

uint64_t re::addInstancedDrawCall(re::DrawTable *a1, __n128 *a2, uint64_t a3, unsigned __int32 a4, unsigned int a5, uint64_t a6)
{
  uint64_t v12;
  __n128 *v13;
  int v15;

  v12 = re::BucketArray<re::DrawCall,128ul>::addUninitialized((uint64_t)a1);
  re::DrawCall::DrawCall((re::DrawCall *)v12);
  re::makeDrawCallHelper(v13, a2, a3, a4, *(_BYTE *)(a6 + 8));
  *(_BYTE *)(v12 + 3) = 2;
  *(_DWORD *)(v12 + 32) = a5;
  *(_DWORD *)(v12 + 76) = *((_QWORD *)a1 + 12);
  re::DrawTable::expandCompanionData(a1, a5);
  if (*(_BYTE *)a6)
  {
    v15 = *(_DWORD *)(a6 + 4);
    if (!*(_BYTE *)(v12 + 48))
      *(_BYTE *)(v12 + 48) = 1;
    *(_DWORD *)(v12 + 52) = v15;
  }
  return v12;
}

uint64_t *re::DrawTable::expandCompanionData(re::DrawTable *this, uint64_t a2)
{
  unint64_t v3;

  v3 = *((_QWORD *)this + 12) + a2;
  re::BucketArray<re::Matrix4x4<float>,128ul>::resize((unint64_t)this + 56, v3);
  re::BucketArray<re::ConstantTable const*,128ul>::resize((uint64_t *)this + 14, v3);
  re::BucketArray<float,128ul>::resize((uint64_t *)this + 21, v3);
  return re::BucketArray<unsigned int,128ul>::resize((uint64_t *)this + 28, v3);
}

uint64_t re::FixedArray<re::VertexBufferFormat>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (!a3)
    return result;
  if (a3 >> 60)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16 * a3, 4);
  *(_QWORD *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_DWORD *)result = 0x10000;
      *(_WORD *)(result + 4) = 256;
      result += 16;
      --v6;
    }
    while (v6);
  }
  *(_DWORD *)result = 0x10000;
  *(_WORD *)(result + 4) = 256;
  return result;
}

void re::AttributeTableBuilder::~AttributeTableBuilder(re::AttributeTableBuilder *this)
{
  uint64_t v2;

  re::AttributeTableBuilder::deinit(this);
  re::BufferTable::~BufferTable((re::AttributeTableBuilder *)((char *)this + 32));
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if (*((_QWORD *)this + 2))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
      *((_QWORD *)this + 2) = 0;
      *((_QWORD *)this + 3) = 0;
    }
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t re::AttributeTableBuilder::deinit(re::AttributeTableBuilder *this)
{
  uint64_t v2;
  uint64_t result;

  *(_QWORD *)this = 0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if (*((_QWORD *)this + 2))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
      *((_QWORD *)this + 2) = 0;
      *((_QWORD *)this + 3) = 0;
    }
    *((_QWORD *)this + 1) = 0;
  }
  result = re::BufferTable::deinit((re::AttributeTableBuilder *)((char *)this + 32));
  *((_BYTE *)this + 320) = 0;
  return result;
}

unint64_t re::BucketArray<re::Matrix4x4<float>,128ul>::resize(unint64_t result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = result;
  v4 = *(_QWORD *)(result + 40);
  if (v4 >= a2)
  {
    if (v4 > a2)
    {
      v5 = a2;
      do
        result = re::BucketArray<re::Matrix4x4<float>,128ul>::operator[](v3, v5++);
      while (v5 != *(_QWORD *)(v3 + 40));
      *(_QWORD *)(v3 + 40) = a2;
    }
  }
  else
  {
    if (a2 > *(_QWORD *)(result + 8) << 7)
    {
      result = (unint64_t)re::BucketArray<re::Matrix4x4<float>,128ul>::setBucketsCapacity((uint64_t *)result, (a2 + 127) >> 7);
      v4 = *(_QWORD *)(v3 + 40);
    }
    for (*(_QWORD *)(v3 + 40) = a2; v4 != *(_QWORD *)(v3 + 40); ++v4)
    {
      result = re::BucketArray<re::Matrix4x4<float>,128ul>::operator[](v3, v4);
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
    }
  }
  ++*(_DWORD *)(v3 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ConstantTable const*,128ul>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = (uint64_t)result;
  v4 = result[5];
  if (v4 >= a2)
  {
    if (v4 > a2)
    {
      v5 = a2;
      do
        result = (uint64_t *)re::BucketArray<re::ConstantTable const*,128ul>::operator[](v3, v5++);
      while (v5 != *(_QWORD *)(v3 + 40));
      *(_QWORD *)(v3 + 40) = a2;
    }
  }
  else
  {
    if (a2 > result[1] << 7)
    {
      result = re::BucketArray<re::ConstantTable const*,128ul>::setBucketsCapacity(result, (a2 + 127) >> 7);
      v4 = *(_QWORD *)(v3 + 40);
    }
    for (*(_QWORD *)(v3 + 40) = a2; v4 != *(_QWORD *)(v3 + 40); ++v4)
    {
      result = (uint64_t *)re::BucketArray<re::ConstantTable const*,128ul>::operator[](v3, v4);
      *result = 0;
    }
  }
  ++*(_DWORD *)(v3 + 48);
  return result;
}

uint64_t *re::BucketArray<float,128ul>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = (uint64_t)result;
  v4 = result[5];
  if (v4 >= a2)
  {
    if (v4 > a2)
    {
      v5 = a2;
      do
        result = (uint64_t *)re::BucketArray<unsigned int,128ul>::operator[](v3, v5++);
      while (v5 != *(_QWORD *)(v3 + 40));
      *(_QWORD *)(v3 + 40) = a2;
    }
  }
  else
  {
    if (a2 > result[1] << 7)
    {
      result = re::BucketArray<float,128ul>::setBucketsCapacity(result, (a2 + 127) >> 7);
      v4 = *(_QWORD *)(v3 + 40);
    }
    for (*(_QWORD *)(v3 + 40) = a2; v4 != *(_QWORD *)(v3 + 40); ++v4)
    {
      result = (uint64_t *)re::BucketArray<unsigned int,128ul>::operator[](v3, v4);
      *(_DWORD *)result = 0;
    }
  }
  ++*(_DWORD *)(v3 + 48);
  return result;
}

uint64_t *re::BucketArray<unsigned int,128ul>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = (uint64_t)result;
  v4 = result[5];
  if (v4 >= a2)
  {
    if (v4 > a2)
    {
      v5 = a2;
      do
        result = (uint64_t *)re::BucketArray<unsigned int,128ul>::operator[](v3, v5++);
      while (v5 != *(_QWORD *)(v3 + 40));
      *(_QWORD *)(v3 + 40) = a2;
    }
  }
  else
  {
    if (a2 > result[1] << 7)
    {
      result = re::BucketArray<unsigned int,128ul>::setBucketsCapacity(result, (a2 + 127) >> 7);
      v4 = *(_QWORD *)(v3 + 40);
    }
    for (*(_QWORD *)(v3 + 40) = a2; v4 != *(_QWORD *)(v3 + 40); ++v4)
    {
      result = (uint64_t *)re::BucketArray<unsigned int,128ul>::operator[](v3, v4);
      *(_DWORD *)result = 0;
    }
  }
  ++*(_DWORD *)(v3 + 48);
  return result;
}

uint64_t re::BucketArray<re::ConstantTable const*,128ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > v3 << 7)
  {
    re::BucketArray<re::ConstantTable const*,128ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 128) >> 7);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 7)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 7));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 8 * (v2 & 0x7F);
}

uint64_t re::BucketArray<float,128ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > v3 << 7)
  {
    re::BucketArray<float,128ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 128) >> 7);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 7)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 7));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 4 * (v2 & 0x7F);
}

uint64_t re::BucketArray<re::Matrix4x4<float>,128ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > v3 << 7)
  {
    re::BucketArray<re::Matrix4x4<float>,128ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 128) >> 7);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 7)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 7));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + ((v2 & 0x7F) << 6);
}

uint64_t re::BucketArray<unsigned int,128ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > v3 << 7)
  {
    re::BucketArray<unsigned int,128ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 128) >> 7);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 7)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 7));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 4 * (v2 & 0x7F);
}

void re::RenderGraphPersistentResourceManager::~RenderGraphPersistentResourceManager(re::RenderGraphPersistentResourceManager *this)
{
  uint64_t *v2;

  v2 = (uint64_t *)((char *)this + 64);
  re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveBuffer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)this + 64);
  re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveBuffer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(v2);
  re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveTexture,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)this + 16);
  re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveTexture,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 2);
  re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveBuffer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(v2);
  re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveTexture,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 2);

}

void re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveBuffer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  void *v8;
  int v9;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = *(_QWORD *)(a1 + 16) + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          v8 = *(void **)(v6 + 24);
          if (v8)
          {

            *(_QWORD *)(v6 + 24) = 0;
            v3 = *(unsigned int *)(a1 + 32);
          }
        }
        v4 += 56;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v9 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v9;
  }
}

double re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveBuffer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  void *v8;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          v8 = *(void **)(v6 + 24);
          if (v8)
          {

            *(_QWORD *)(v6 + 24) = 0;
            v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 56;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveTexture,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  void *v8;
  int v9;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = *(_QWORD *)(a1 + 16) + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          v8 = *(void **)(v6 + 24);
          if (v8)
          {

            *(_QWORD *)(v6 + 24) = 0;
            v3 = *(unsigned int *)(a1 + 32);
          }
        }
        v4 += 72;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v9 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v9;
  }
}

double re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveTexture,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  void *v8;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          v8 = *(void **)(v6 + 24);
          if (v8)
          {

            *(_QWORD *)(v6 + 24) = 0;
            v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 72;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::RenderGraphPersistentResourceManager::pruneExpiredData(_BOOL8 this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t *v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  int v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  re::RenderGraphPersistentResourceManager *v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  int v42;
  uint64_t *v43;
  NSObject *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  int v57;
  int v58;
  uint64_t v59;
  _QWORD *v60;
  re::RenderGraphPersistentResourceManager *v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  uint8_t buf[4];
  uint64_t v67;
  __int16 v68;
  unsigned int v69;
  __int16 v70;
  int v71;
  uint64_t v72;

  v3 = this;
  v72 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(this + 48);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)(*(_QWORD *)(this + 32) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 18;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(this + 48);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v8 = v5;
    do
    {
      v9 = *(_QWORD *)(v3 + 32) + 72 * v8;
      v11 = *(_DWORD *)(v9 + 32);
      v10 = (int *)(v9 + 32);
      if (*(_DWORD *)(v3 + 112) + v11 < a2)
      {
        v12 = (uint64_t *)(v10 - 4);
        v13 = *re::graphicsLogObjects((re *)this);
        this = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        if (this)
        {
          v14 = *v12;
          v15 = *v10;
          *(_DWORD *)buf = 134218496;
          v67 = v14;
          v68 = 1024;
          v69 = a2;
          v70 = 1024;
          v71 = v15;
          _os_log_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEFAULT, "Deleting Expired Texture %llu - currentFrame = %d, lastFrameUsed = %d \n", buf, 0x18u);
        }
        if (*(_QWORD *)(v3 + 16))
        {
          v16 = *v12;
          v17 = 0xBF58476D1CE4E5B9 * (*v12 ^ ((unint64_t)*v12 >> 30));
          v18 = ((0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) ^ ((0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) >> 31))
              % *(unsigned int *)(v3 + 40);
          v19 = *(_QWORD *)(v3 + 24);
          v20 = *(unsigned int *)(v19 + 4 * v18);
          if ((_DWORD)v20 != 0x7FFFFFFF)
          {
            v21 = *(_QWORD *)(v3 + 32);
            if (*(_QWORD *)(v21 + 72 * v20 + 16) == v16)
            {
              *(_DWORD *)(v19 + 4 * v18) = *(_DWORD *)(v21 + 72 * v20 + 8) & 0x7FFFFFFF;
LABEL_19:
              v23 = *(_QWORD *)(v3 + 32);
              v24 = v23 + 72 * v20;
              v27 = *(_DWORD *)(v24 + 8);
              v25 = (int *)(v24 + 8);
              v26 = v27;
              if (v27 < 0)
              {
                *v25 = v26 & 0x7FFFFFFF;
                v28 = v23 + 72 * v20;
                v30 = *(re::RenderGraphPersistentResourceManager **)(v28 + 24);
                v29 = (_QWORD *)(v28 + 24);
                this = (_BOOL8)v30;
                if (v30)
                {

                  *v29 = 0;
                }
              }
              v31 = *(_QWORD *)(v3 + 32) + 72 * v20;
              *(_DWORD *)(v31 + 8) = *(_DWORD *)(v31 + 8) & 0x80000000 | *(_DWORD *)(v3 + 52);
              --*(_DWORD *)(v3 + 44);
              v32 = *(_DWORD *)(v3 + 56) + 1;
              *(_DWORD *)(v3 + 52) = v20;
              *(_DWORD *)(v3 + 56) = v32;
            }
            else
            {
              while (1)
              {
                v22 = v20;
                v20 = *(_DWORD *)(v21 + 72 * v20 + 8) & 0x7FFFFFFF;
                if (v20 == 0x7FFFFFFF)
                  break;
                if (*(_QWORD *)(v21 + 72 * v20 + 16) == v16)
                {
                  *(_DWORD *)(v21 + 72 * v22 + 8) = *(_DWORD *)(v21 + 72 * v22 + 8) & 0x80000000 | *(_DWORD *)(v21 + 72 * v20 + 8) & 0x7FFFFFFF;
                  goto LABEL_19;
                }
              }
            }
          }
        }
        LODWORD(v4) = *(_DWORD *)(v3 + 48);
      }
      if (v4 <= (int)v5 + 1)
        v33 = v5 + 1;
      else
        v33 = v4;
      while (1)
      {
        v8 = (v5 + 1);
        if (v33 - 1 == (_DWORD)v5)
          break;
        LODWORD(v5) = v5 + 1;
        v34 = v8;
        if ((*(_DWORD *)(*(_QWORD *)(v3 + 32) + 72 * v8 + 8) & 0x80000000) != 0)
          goto LABEL_31;
      }
      v34 = v33;
LABEL_31:
      LODWORD(v5) = v34;
    }
    while ((_DWORD)v4 != v34);
  }
  v35 = *(unsigned int *)(v3 + 96);
  if ((_DWORD)v35)
  {
    v36 = 0;
    v37 = (int *)(*(_QWORD *)(v3 + 80) + 8);
    while (1)
    {
      v38 = *v37;
      v37 += 14;
      if (v38 < 0)
        break;
      if (v35 == ++v36)
      {
        LODWORD(v36) = *(_DWORD *)(v3 + 96);
        break;
      }
    }
  }
  else
  {
    LODWORD(v36) = 0;
  }
  if ((_DWORD)v35 != (_DWORD)v36)
  {
    v39 = v36;
    do
    {
      v40 = *(_QWORD *)(v3 + 80) + 56 * v39;
      v42 = *(_DWORD *)(v40 + 32);
      v41 = (int *)(v40 + 32);
      if (*(_DWORD *)(v3 + 112) + v42 < a2)
      {
        v43 = (uint64_t *)(v41 - 4);
        v44 = *re::graphicsLogObjects((re *)this);
        this = os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);
        if (this)
        {
          v45 = *v43;
          v46 = *v41;
          *(_DWORD *)buf = 134218496;
          v67 = v45;
          v68 = 1024;
          v69 = a2;
          v70 = 1024;
          v71 = v46;
          _os_log_impl(&dword_224FE9000, v44, OS_LOG_TYPE_DEFAULT, "Deleting Expired Buffer %llu - currentFrame = %d, lastFrameUsed = %d \n", buf, 0x18u);
        }
        if (*(_QWORD *)(v3 + 64))
        {
          v47 = *v43;
          v48 = 0xBF58476D1CE4E5B9 * (*v43 ^ ((unint64_t)*v43 >> 30));
          v49 = ((0x94D049BB133111EBLL * (v48 ^ (v48 >> 27))) ^ ((0x94D049BB133111EBLL * (v48 ^ (v48 >> 27))) >> 31))
              % *(unsigned int *)(v3 + 88);
          v50 = *(_QWORD *)(v3 + 72);
          v51 = *(unsigned int *)(v50 + 4 * v49);
          if ((_DWORD)v51 != 0x7FFFFFFF)
          {
            v52 = *(_QWORD *)(v3 + 80);
            if (*(_QWORD *)(v52 + 56 * v51 + 16) == v47)
            {
              *(_DWORD *)(v50 + 4 * v49) = *(_DWORD *)(v52 + 56 * v51 + 8) & 0x7FFFFFFF;
LABEL_50:
              v54 = *(_QWORD *)(v3 + 80);
              v55 = v54 + 56 * v51;
              v58 = *(_DWORD *)(v55 + 8);
              v56 = (int *)(v55 + 8);
              v57 = v58;
              if (v58 < 0)
              {
                *v56 = v57 & 0x7FFFFFFF;
                v59 = v54 + 56 * v51;
                v61 = *(re::RenderGraphPersistentResourceManager **)(v59 + 24);
                v60 = (_QWORD *)(v59 + 24);
                this = (_BOOL8)v61;
                if (v61)
                {

                  *v60 = 0;
                }
              }
              v62 = *(_QWORD *)(v3 + 80) + 56 * v51;
              *(_DWORD *)(v62 + 8) = *(_DWORD *)(v62 + 8) & 0x80000000 | *(_DWORD *)(v3 + 100);
              --*(_DWORD *)(v3 + 92);
              v63 = *(_DWORD *)(v3 + 104) + 1;
              *(_DWORD *)(v3 + 100) = v51;
              *(_DWORD *)(v3 + 104) = v63;
            }
            else
            {
              while (1)
              {
                v53 = v51;
                v51 = *(_DWORD *)(v52 + 56 * v51 + 8) & 0x7FFFFFFF;
                if (v51 == 0x7FFFFFFF)
                  break;
                if (*(_QWORD *)(v52 + 56 * v51 + 16) == v47)
                {
                  *(_DWORD *)(v52 + 56 * v53 + 8) = *(_DWORD *)(v52 + 56 * v53 + 8) & 0x80000000 | *(_DWORD *)(v52 + 56 * v51 + 8) & 0x7FFFFFFF;
                  goto LABEL_50;
                }
              }
            }
          }
        }
        LODWORD(v35) = *(_DWORD *)(v3 + 96);
      }
      if (v35 <= (int)v36 + 1)
        v64 = v36 + 1;
      else
        v64 = v35;
      while (1)
      {
        v39 = (v36 + 1);
        if (v64 - 1 == (_DWORD)v36)
          break;
        LODWORD(v36) = v36 + 1;
        v65 = v39;
        if ((*(_DWORD *)(*(_QWORD *)(v3 + 80) + 56 * v39 + 8) & 0x80000000) != 0)
          goto LABEL_62;
      }
      v65 = v64;
LABEL_62:
      LODWORD(v36) = v65;
    }
    while ((_DWORD)v35 != v65);
  }
}

void re::RenderGraphPersistentResourceManager::registerPersistentTexture(re::RenderGraphPersistentResourceManager *this, const re::WeakStringID *a2, const re::WeakStringID *a3, const re::WeakStringID *a4, re::RenderFrame *a5, const re::RenderGraphTargetDescription *a6, BOOL *a7)
{
  id v10;
  id v11;

  v10 = *(id *)re::RenderGraphPersistentResourceManager::getOrCreateTextureInternal(this, a2, a4, a5, a6, a7);
  v11 = v10;
  re::RenderFrame::registerExternalTexture((uint64_t)a5, &v11, a3, a2, 0);
  if (v10)

}

uint64_t re::RenderGraphPersistentResourceManager::getOrCreateTextureInternal(re::RenderGraphPersistentResourceManager *this, const re::WeakStringID *a2, const re::WeakStringID *a3, re::RenderFrame *a4, const re::RenderGraphTargetDescription *a5, BOOL *a6)
{
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  unsigned int v30;
  id v32;
  id v33[7];
  unint64_t v34;

  v10 = (*(_QWORD *)a3 + (*(_QWORD *)a2 << 6) + (*(_QWORD *)a2 >> 2) - 0x61C8864680B583E9) ^ *(_QWORD *)a2;
  v34 = v10;
  v12 = *((_QWORD *)this + 2);
  v11 = (char *)this + 16;
  v13 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) >> 27));
  v14 = v13 ^ (v13 >> 31);
  if (!v12)
  {
    LODWORD(v22) = 0;
    memset(v33, 0, 48);
LABEL_19:
    v30 = re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveTexture,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)v11, v22, v14, &v34, (uint64_t)v33);
    ++*((_DWORD *)this + 14);
    v29 = *((_QWORD *)this + 4) + 72 * v30;
    goto LABEL_20;
  }
  v15 = *(unsigned int *)(*((_QWORD *)this + 3) + 4 * (v14 % *((unsigned int *)this + 10)));
  if ((_DWORD)v15 != 0x7FFFFFFF)
  {
    v16 = *((_QWORD *)this + 4);
    if (*(_QWORD *)(v16 + 72 * v15 + 16) == v10)
    {
LABEL_6:
      v17 = v16 + 72 * v15;
      v18.i32[0] = *(_DWORD *)(v17 + 44);
      v18.i32[1] = *(_DWORD *)(v17 + 64);
      v18.i64[1] = *(_QWORD *)(v17 + 36);
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v18, *(int32x4_t *)((char *)a5 + 4))))) & 1) == 0&& *(_DWORD *)(v17 + 48) == *((_DWORD *)a5 + 6)&& *(_QWORD *)(v17 + 56) == *((_QWORD *)a5 + 11))
      {
        v20 = 0;
        v21 = v17 + 24;
        goto LABEL_27;
      }
    }
    else
    {
      while (1)
      {
        LODWORD(v15) = *(_DWORD *)(v16 + 72 * v15 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v15 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v16 + 72 * v15 + 16) == v10)
          goto LABEL_6;
      }
    }
  }
  memset(v33, 0, 48);
  v22 = v14 % *((unsigned int *)this + 10);
  v23 = *(unsigned int *)(*((_QWORD *)this + 3) + 4 * v22);
  if ((_DWORD)v23 == 0x7FFFFFFF)
    goto LABEL_19;
  v24 = *((_QWORD *)this + 4);
  while (*(_QWORD *)(v24 + 72 * v23 + 16) != v10)
  {
    v23 = *(_DWORD *)(v24 + 72 * v23 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v23 == 0x7FFFFFFF)
      goto LABEL_19;
  }
  v25 = 9 * v23;
  v26 = v24 + 72 * v23;
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v26 + 24), v33);
  v27 = (int)v33[5];
  v28 = *(_OWORD *)&v33[3];
  *(_OWORD *)(v26 + 32) = *(_OWORD *)&v33[1];
  *(_OWORD *)(v26 + 48) = v28;
  *(_DWORD *)(v26 + 64) = v27;
  ++*((_DWORD *)this + 14);
  v29 = *((_QWORD *)this + 4) + 8 * v25;
LABEL_20:
  v21 = v29 + 24;
  if (v33[0])

  textureDescFromTargetDesc((uint64_t)a5, &v32);
  re::mtl::Device::makeTexture(v32, (id *)this, v33);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v21, v33);
  if (v33[0])
  {

    v33[0] = 0;
  }
  if (v32)

  *(_QWORD *)(v21 + 12) = *(_QWORD *)((char *)a5 + 12);
  *(_DWORD *)(v21 + 20) = *((_DWORD *)a5 + 1);
  *(_DWORD *)(v21 + 40) = *((_DWORD *)a5 + 2);
  *(_DWORD *)(v21 + 24) = *((_DWORD *)a5 + 6);
  *(_QWORD *)(v21 + 32) = *((_QWORD *)a5 + 11);
  v20 = 1;
LABEL_27:
  *a6 = v20;
  *(_DWORD *)(v21 + 8) = *((_QWORD *)a4 + 46);
  return v21;
}

void re::RenderGraphPersistentResourceManager::registerPersistentBuffer(re::RenderGraphPersistentResourceManager *this, const re::WeakStringID *a2, const re::WeakStringID *a3, const re::WeakStringID *a4, re::RenderFrame *a5, const re::RenderGraphBufferDescription *a6, BOOL *a7, int a8)
{
  id *BufferInternal;
  id v12;
  uint64_t v13;
  uint64_t v14;

  BufferInternal = (id *)re::RenderGraphPersistentResourceManager::getOrCreateBufferInternal((uint64_t)this, a2, a4, (uint64_t)a5, (uint64_t)a6, (char *)a7, a8);
  v12 = *BufferInternal;
  LODWORD(v14) = 0;
  HIDWORD(v14) = objc_msgSend(*BufferInternal, sel_length, v12, v14);
  re::RenderFrame::registerExternalBuffer((uint64_t)a5, (uint64_t)&v13, a3, a2, 0);
  if (v12)

}

uint64_t re::RenderGraphPersistentResourceManager::getOrCreateBufferInternal(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, char *a6, int a7)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  int v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  char v34;
  id v36[5];
  unint64_t v37;

  v11 = (*a3 + (*a2 << 6) + (*a2 >> 2) - 0x61C8864680B583E9) ^ *a2;
  v37 = v11;
  v13 = *(_QWORD *)(a1 + 64);
  v12 = a1 + 64;
  v14 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) >> 27));
  v15 = v14 ^ (v14 >> 31);
  if (!v13)
  {
    LODWORD(v24) = 0;
    memset(v36, 0, 32);
LABEL_21:
    v31 = re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveBuffer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(v12, v24, v15, &v37, (uint64_t)v36);
    ++*(_DWORD *)(a1 + 104);
    v30 = *(_QWORD *)(a1 + 80) + 56 * v31;
    goto LABEL_22;
  }
  v16 = *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * (v15 % *(unsigned int *)(a1 + 88)));
  if ((_DWORD)v16 != 0x7FFFFFFF)
  {
    v17 = *(_QWORD *)(a1 + 80);
    if (*(_QWORD *)(v17 + 56 * v16 + 16) == v11)
    {
LABEL_6:
      v18 = v17 + 56 * v16;
      v19 = *(_QWORD *)(v18 + 40);
      v20 = *(_QWORD *)(a5 + 8);
      v23 = v19 == v20;
      v21 = v19 >= v20;
      v22 = v23;
      if (!a7)
        v21 = v22;
      v23 = v21 && *(_DWORD *)(v18 + 48) == *(_DWORD *)(a5 + 24);
      if (v23)
      {
        v34 = 0;
        v32 = v18 + 24;
        goto LABEL_29;
      }
    }
    else
    {
      while (1)
      {
        LODWORD(v16) = *(_DWORD *)(v17 + 56 * v16 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v16 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v17 + 56 * v16 + 16) == v11)
          goto LABEL_6;
      }
    }
  }
  memset(v36, 0, 32);
  v24 = v15 % *(unsigned int *)(a1 + 88);
  v25 = *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * v24);
  if ((_DWORD)v25 == 0x7FFFFFFF)
    goto LABEL_21;
  v26 = *(_QWORD *)(a1 + 80);
  while (*(_QWORD *)(v26 + 56 * v25 + 16) != v11)
  {
    v25 = *(_DWORD *)(v26 + 56 * v25 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v25 == 0x7FFFFFFF)
      goto LABEL_21;
  }
  v27 = 56 * v25;
  v28 = v26 + 56 * v25;
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v28 + 24), v36);
  v29 = (int)v36[3];
  *(_OWORD *)(v28 + 32) = *(_OWORD *)&v36[1];
  *(_DWORD *)(v28 + 48) = v29;
  ++*(_DWORD *)(a1 + 104);
  v30 = *(_QWORD *)(a1 + 80) + v27;
LABEL_22:
  v32 = v30 + 24;
  if (v36[0])

  v33 = *(_DWORD *)(a5 + 24);
  if (v33 == 0xFFFF)
    v33 = 0;
  v36[0] = objc_msgSend(*(id *)a1, sel_newBufferWithLength_options_, *(_QWORD *)(a5 + 8), v33, v36[0], v36[1], *(_OWORD *)&v36[2]);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v32, v36);
  if (v36[0])

  *(_QWORD *)(v32 + 16) = *(_QWORD *)(a5 + 8);
  *(_DWORD *)(v32 + 24) = *(_DWORD *)(a5 + 24);
  v34 = 1;
LABEL_29:
  *a6 = v34;
  *(_DWORD *)(v32 + 8) = *(_QWORD *)(a4 + 368);
  return v32;
}

uint64_t re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveTexture,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  _BYTE v30[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v30, 0, 36);
          *(_QWORD *)&v30[36] = 0x7FFFFFFFLL;
          re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v30, v13, v12);
          v15 = *(_OWORD *)v30;
          *(_OWORD *)v30 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v30[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v30[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v30[24];
          *(_OWORD *)&v30[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v30[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = 0;
            v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveTexture,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 16), v22, v22 + 8);
              ++v21;
              v22 += 72;
            }
            while (v21 < v20);
          }
          re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveTexture,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v30);
        }
      }
      else
      {
        if (v12)
          v25 = 2 * v11;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 72 * v9 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 72 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 72 * v9 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9 + 16) = *a4;
  v26 = *(_QWORD *)(a1 + 16) + 72 * v9;
  *(_QWORD *)(v26 + 24) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  v27 = *(_OWORD *)(a5 + 8);
  v28 = *(_OWORD *)(a5 + 24);
  *(_DWORD *)(v26 + 64) = *(_DWORD *)(a5 + 40);
  *(_OWORD *)(v26 + 32) = v27;
  *(_OWORD *)(v26 + 48) = v28;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveBuffer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  __int128 v27;
  _BYTE v29[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v29, 0, 36);
          *(_QWORD *)&v29[36] = 0x7FFFFFFFLL;
          re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v29, v13, v12);
          v15 = *(_OWORD *)v29;
          *(_OWORD *)v29 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v29[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v29[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v29[24];
          *(_OWORD *)&v29[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v29[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = 0;
            v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveBuffer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 16), v22, v22 + 8);
              ++v21;
              v22 += 56;
            }
            while (v21 < v20);
          }
          re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveBuffer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v29);
        }
      }
      else
      {
        if (v12)
          v25 = 2 * v11;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 56 * v9 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 56 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 56 * v9 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9 + 16) = *a4;
  v26 = *(_QWORD *)(a1 + 16) + 56 * v9;
  *(_QWORD *)(v26 + 24) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  v27 = *(_OWORD *)(a5 + 8);
  *(_DWORD *)(v26 + 48) = *(_DWORD *)(a5 + 24);
  *(_OWORD *)(v26 + 32) = v27;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::DrawCallMeshVisitor::visitMeshScene(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;

  v2 = *(float *)(a2 + 376) != 0.0 && *(_BYTE *)(a2 + 646) == 0;
  v3 = v2;
  if (v2)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 176);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 248);
    re::DrawCallMeshVisitor::visitScene(a1, a2);
  }
  return v3;
}

float re::DrawCallMeshVisitor::visitScene(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  __int128 v5;
  float result;

  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 376);
  v2 = a2 + 256;
  if (!*(_QWORD *)(a2 + 280))
    v2 = 0;
  *(_QWORD *)(a1 + 208) = v2;
  *(_DWORD *)(a1 + 218) = *(_DWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 368);
  v3 = 0.0;
  if (*(_BYTE *)(a2 + 642))
    v3 = 1.0;
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 380);
  *(float *)(a1 + 256) = v3;
  if (*(_BYTE *)(a2 + 328))
  {
    v4 = *(_QWORD *)(a2 + 336);
    if (!*(_BYTE *)(a1 + 224))
      *(_BYTE *)(a1 + 224) = 1;
    *(_QWORD *)(a1 + 232) = v4;
  }
  else if (*(_BYTE *)(a1 + 224))
  {
    *(_BYTE *)(a1 + 224) = 0;
  }
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 344);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 352);
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 432);
  if (*(_BYTE *)(a1 + 320) || *(_BYTE *)(a2 + 496))
  {
    if (!*(_BYTE *)(a1 + 320) || *(_BYTE *)(a2 + 496))
    {
      if (!*(_BYTE *)(a1 + 320) && *(_BYTE *)(a2 + 496))
        *(_BYTE *)(a1 + 320) = 1;
      v5 = *(_OWORD *)(a2 + 528);
      *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 512);
      *(_OWORD *)(a1 + 352) = v5;
    }
    else
    {
      *(_BYTE *)(a1 + 320) = 0;
    }
  }
  result = *(float *)(a2 + 384);
  *(float *)(a1 + 260) = result;
  return result;
}

uint64_t re::DrawCallMeshVisitor::visitMeshInstance(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = re::MeshVisitor::visitMeshInstance(a1, a2);
  if ((_DWORD)result)
    *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 96);
  return result;
}

double re::DrawCallMeshVisitor::visitMeshPart(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t LevelIndex;
  double result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  __int128 *p_buf;
  unint64_t v28;
  uint64_t v29;
  int v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v66;
  char v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  char v71;
  int v72;
  char v74;
  uint64_t v75;
  __int128 v76;
  unsigned int v77;
  char v78;
  __int128 v79;
  int v80;
  int v81;
  int v82;
  re::MaterialRenderFlags *v83;
  unint64_t v84;
  _DWORD *v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  __int128 buf;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  int v106;
  _BYTE v107[11];
  uint64_t v108;
  uint64_t v109;
  __int16 v110;
  __int128 v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  _BYTE v116[12];
  __int16 v117;
  unint64_t v118;
  uint64_t v119;

  v119 = *MEMORY[0x24BDAC8D0];
  LevelIndex = re::MeshVisitor::findLevelIndex((re::MeshVisitor *)a1, *((unsigned int *)a2 + 6));
  if ((LevelIndex & 0x80000000) != 0)
    return result;
  v8 = LevelIndex;
  v9 = *((int *)a2 + 18);
  v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 376) + 24) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 24), 224, 16);
  v12 = v10;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 144) = 0u;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 176) = 0u;
  *(_OWORD *)(v10 + 192) = 0u;
  *(_OWORD *)(v10 + 208) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v10 + 152) = _D0;
  *(_DWORD *)(v10 + 160) = 1065353216;
  if (*(_QWORD *)(a1 + 128) <= v9)
  {
    v17 = *(_QWORD *)(a1 + 288);
    *(_QWORD *)(v10 + 40) = v17;
    if (*(_QWORD *)(a1 + 72) <= v9)
    {
      if (*(_QWORD *)(a1 + 88) <= v9)
        goto LABEL_13;
      v18 = 0;
      goto LABEL_12;
    }
    v18 = 0;
    *(_QWORD *)v10 = 0;
    if (*(_QWORD *)(a1 + 88) > v9)
LABEL_12:
      *(_QWORD *)(v10 + 8) = v18;
  }
  else
  {
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v9);
    *(_QWORD *)(v10 + 40) = v17;
    if (*(_QWORD *)(a1 + 72) > v9)
      *(_QWORD *)v10 = *(_QWORD *)(a1 + 64) + 24 * (int)v9;
    if (*(_QWORD *)(a1 + 88) > v9)
    {
      v18 = *(_QWORD *)(a1 + 80) + 24 * (int)v9;
      goto LABEL_12;
    }
  }
LABEL_13:
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(a1 + 96);
  *(_BYTE *)(v10 + 32) = *(_BYTE *)(a1 + 112);
  if (*(_QWORD *)(a1 + 160) <= v9)
    v19 = 0;
  else
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v9);
  *(_QWORD *)(v10 + 56) = v19;
  if (*(_QWORD *)(a1 + 176) <= v9)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v9);
  *(_QWORD *)(v10 + 64) = v20;
  if (*(_QWORD *)(a1 + 144) <= v9)
    v21 = 0;
  else
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v9);
  *(_QWORD *)(v10 + 48) = v21;
  v22 = *(_QWORD *)(a1 + 296);
  if (v22 < *(_QWORD *)(a1 + 192))
  {
    v23 = (_QWORD *)(*(_QWORD *)(a1 + 184) + 16 * v22);
    if (v23[1] <= v9)
      v24 = 0;
    else
      v24 = *(_QWORD *)(*v23 + 8 * v9);
    *(_QWORD *)(v10 + 80) = v24;
  }
  *(_QWORD *)(v10 + 72) = *(_QWORD *)(a1 + 200);
  *(_DWORD *)(v10 + 120) = *(_DWORD *)(a1 + 218);
  if (*(_BYTE *)(a1 + 224))
  {
    *(_BYTE *)(v10 + 128) = 1;
    *(_QWORD *)(v10 + 136) = *(_QWORD *)(a1 + 232);
  }
  *(_QWORD *)(v10 + 144) = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(v10 + 152) = *(_QWORD *)(a1 + 248);
  *(_DWORD *)(v10 + 160) = *(_DWORD *)(a1 + 260);
  *(_BYTE *)(v10 + 164) = *(float *)(a1 + 256) != 0.0;
  if (!v17 && !*((_BYTE *)a2 + 128))
  {
    v25 = *re::graphicsLogObjects((re *)v10);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      v26 = *(_QWORD *)(a2[4] + 512);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v26;
      _os_log_impl(&dword_224FE9000, v25, OS_LOG_TYPE_DEFAULT, "Failed to find a materialInstance to draw mesh part [%s]. Check material index.", (uint8_t *)&buf, 0xCu);
    }
    return result;
  }
  p_buf = &buf;
  memset(v107, 0, sizeof(v107));
  v108 = 0;
  v109 = 0;
  v110 = 0;
  *(_QWORD *)&v111 = 25172350;
  *((_QWORD *)&v111 + 1) = 0x7FFFFFFFLL;
  v115 = 0;
  v114 = 0;
  v28 = *a2;
  v29 = a2[1];
  *(_QWORD *)&buf = *a2;
  *((_QWORD *)&buf + 1) = v29;
  v30 = *((_DWORD *)a2 + 4);
  v106 = -1;
  v99 = v30;
  v107[3] = *((_BYTE *)a2 + 20);
  v31 = (__int128 *)a2[5];
  v95 = a2[4];
  v96 = *(_OWORD *)(a2 + 7);
  v33 = v31[2];
  v32 = v31[3];
  v34 = v31[1];
  v101 = *v31;
  v102 = v34;
  v103 = v33;
  v104 = v32;
  v97 = a2[6];
  v98 = v10;
  if (v8 >= 2)
  {
    re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 242, v8, 2);
    _os_crash();
    __break(1u);
    goto LABEL_120;
  }
  v100 = *(_DWORD *)(a1 + 4 * v8 + 48);
  v107[4] = *(_BYTE *)(a1 + 264);
  v105 = *(_OWORD *)(a1 + 272);
  v35 = *(_QWORD *)(a1 + 296);
  v112 = *(_DWORD *)(a1 + 304);
  v113 = v35;
  v3 = *(uint64_t **)(a1 + 8);
  if (v3)
  {
    v36 = *v3;
    if (*v3)
    {
      v93 = *(_QWORD *)(a1 + 376);
      if (*(_QWORD *)v36)
      {
        v37 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v28 ^ (v28 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v28 ^ (v28 >> 30))) >> 27));
        v38 = *(unsigned int *)(*(_QWORD *)(v36 + 8) + 4 * ((v37 ^ (v37 >> 31)) % *(unsigned int *)(v36 + 24)));
        if ((_DWORD)v38 != 0x7FFFFFFF)
        {
          v39 = a2[3];
          v40 = *(_QWORD *)(v36 + 16);
          if (*(_QWORD *)(v40 + 120 * v38 + 16) == v28)
          {
LABEL_39:
            v41 = *(_QWORD *)(v40 + 120 * v38 + 24);
            if (!v41)
              goto LABEL_63;
            v42 = v38;
            LODWORD(v43) = 0x7FFFFFFF;
            if (v3[2])
            {
              v44 = 0x94D049BB133111EBLL
                  * ((0xBF58476D1CE4E5B9 * (v41 ^ (v41 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v41 ^ (v41 >> 30))) >> 27));
              v45 = *(unsigned int *)(v3[3] + 4 * ((v44 ^ (v44 >> 31)) % *((unsigned int *)v3 + 10)));
              if ((_DWORD)v45 != 0x7FFFFFFF)
              {
                v46 = v3[4];
                LODWORD(v43) = v45;
                if (*(_QWORD *)(v46 + 40 * v45 + 16) != v41)
                {
                  v43 = v45;
                  while (1)
                  {
                    LODWORD(v43) = *(_DWORD *)(v46 + 40 * v43 + 8) & 0x7FFFFFFF;
                    if ((_DWORD)v43 == 0x7FFFFFFF)
                      break;
                    if (*(_QWORD *)(v46 + 40 * v43 + 16) == v41)
                      goto LABEL_55;
                  }
                  LODWORD(v43) = 0x7FFFFFFF;
                }
              }
            }
LABEL_55:
            v48 = v3[4];
            v49 = v48 + 40 * v43;
            v107[5] = 1;
            v107[7] = *(_BYTE *)(v49 + 32);
            HIDWORD(v108) = *(_DWORD *)(v49 + 24);
            v107[10] = *(_BYTE *)(v49 + 33);
            v107[9] = *(_BYTE *)(v49 + 34);
            v50 = v40 + 120 * v42;
            v53 = *(_QWORD *)(v50 + 56);
            v52 = (uint64_t *)(v50 + 56);
            v51 = v53;
            if (v53 <= v39)
            {
              if (!v51)
              {
                v91 = v48;
                v92 = v42;
LABEL_62:
                *(_QWORD *)((char *)&v111 + 4) = *(_QWORD *)(v40 + 120 * v92 + 32);
                HIDWORD(v111) = *(_DWORD *)(v91 + 40 * v43 + 28);
                goto LABEL_63;
              }
            }
            else if (*(_QWORD *)(v40 + 120 * v42 + 96) > v39)
            {
              v54 = v40 + 120 * v42;
              DWORD1(v111) = *(_DWORD *)(*(_QWORD *)(v54 + 72) + 4 * v39);
              DWORD2(v111) = *(_DWORD *)(*(_QWORD *)(v54 + 112) + 4 * v39);
              goto LABEL_63;
            }
            v89 = v52;
            v90 = v39;
            v91 = v48;
            v92 = v42;
            v88 = *re::graphicsLogObjects((re *)v10);
            if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
            {
              v55 = *v89;
              *(_DWORD *)v116 = 134218240;
              *(_QWORD *)&v116[4] = v55;
              v117 = 2048;
              v118 = v90;
              _os_log_impl(&dword_224FE9000, v88, OS_LOG_TYPE_DEFAULT, "'meshPartPrioritiesInGroup' contains fewer elements (%zu) than current MeshPart index (%zu).", v116, 0x16u);
              v29 = *((_QWORD *)&buf + 1);
            }
            goto LABEL_62;
          }
          v47 = v38;
          while (1)
          {
            LODWORD(v47) = *(_DWORD *)(v40 + 120 * v47 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v47 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v40 + 120 * v47 + 16) == v28)
            {
              while (1)
              {
                LODWORD(v38) = *(_DWORD *)(v40 + 120 * v38 + 8) & 0x7FFFFFFF;
                if ((_DWORD)v38 == 0x7FFFFFFF)
                  break;
                if (*(_QWORD *)(v40 + 120 * v38 + 16) == v28)
                  goto LABEL_39;
              }
              LODWORD(v38) = 0x7FFFFFFF;
              goto LABEL_39;
            }
          }
        }
      }
LABEL_63:
      *(_QWORD *)v116 = v29;
      v10 = re::HashTable<unsigned long long,re::MeshSortingCollection::EntityRenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(v36 + 48, (uint64_t *)v116);
      if ((_DWORD)v10)
      {
        LODWORD(v56) = 0x7FFFFFFF;
        if (*(_QWORD *)(v36 + 48))
        {
          v57 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (*(_QWORD *)v116 ^ (*(_QWORD *)v116 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                        * (*(_QWORD *)v116 ^ (*(_QWORD *)v116 >> 30))) >> 27));
          v58 = *(unsigned int *)(*(_QWORD *)(v36 + 56) + 4 * ((v57 ^ (v57 >> 31)) % *(unsigned int *)(v36 + 72)));
          if ((_DWORD)v58 != 0x7FFFFFFF)
          {
            v59 = *(_QWORD *)(v36 + 64);
            LODWORD(v56) = v58;
            if (*(_QWORD *)(v59 + 40 * v58 + 16) != *(_QWORD *)v116)
            {
              v56 = v58;
              while (1)
              {
                LODWORD(v56) = *(_DWORD *)(v59 + 40 * v56 + 8) & 0x7FFFFFFF;
                if ((_DWORD)v56 == 0x7FFFFFFF)
                  break;
                if (*(_QWORD *)(v59 + 40 * v56 + 16) == *(_QWORD *)v116)
                  goto LABEL_72;
              }
              LODWORD(v56) = 0x7FFFFFFF;
            }
          }
        }
LABEL_72:
        v9 = *(_QWORD *)(v36 + 64);
        LODWORD(p_buf) = v56;
        v8 = v9 + 40 * v56;
        v2 = *(_QWORD *)(v12 + 144);
        if (re::MaterialParameterTable::kFadeNameHash(void)::once == -1)
        {
LABEL_73:
          v60 = (uint64_t *)(v8 + 24);
          v61 = re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash;
          v62 = v9 + 40 * p_buf;
          v64 = *(_QWORD *)(v62 + 32);
          v63 = (uint64_t *)(v62 + 32);
          if (v64)
          {
            v10 = v3[1];
            if (v10)
            {
              v10 = re::HashTable<unsigned long long,re::MeshRenderPassGroups::RenderPassGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v10, v63);
              if (v10 && v2 == v61)
              {
                v66 = v10;
                v67 = v107[5];
                v107[5] |= 2u;
                if (v107[4] == 5 || !v107[4])
                {
                  if ((v67 & 1) == 0)
                  {
                    v107[5] = v67 | 6;
                    HIDWORD(v108) = *(_DWORD *)v10;
                    v107[7] = *(_BYTE *)(v10 + 4);
                  }
                  if (*(_BYTE *)(v10 + 16))
                  {
                    v68 = buf;
                    v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v93 + 24) + 32))(*(_QWORD *)(v93 + 24), 32, 16);
                    *(_OWORD *)v10 = 0u;
                    *(_OWORD *)(v10 + 16) = 0u;
                    v69 = *(_OWORD *)(v66 + 48);
                    *(_OWORD *)v10 = *(_OWORD *)(v66 + 32);
                    *(_OWORD *)(v10 + 16) = v69;
                    v109 = v10;
                    if ((v107[5] & 1) == 0)
                      v107[9] = *(_QWORD *)(v66 + 64) == v68;
                  }
                }
              }
            }
          }
          if (!*v60)
            goto LABEL_104;
          v10 = v3[1];
          if (!v10)
            goto LABEL_104;
          v10 = re::HashTable<unsigned long long,re::MeshRenderPassGroups::RenderPassGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v10, v60);
          if (!v10)
            goto LABEL_104;
          v70 = v10;
          v71 = v107[5] | 8;
          v107[5] |= 8u;
          v72 = *(unsigned __int8 *)(v10 + 5);
          if (*(_BYTE *)(v10 + 5))
          {
            if (v72 == 3)
            {
              if (v2 != v61 && !*(_BYTE *)(v10 + 7))
                goto LABEL_96;
            }
            else if (v72 != 2 || v2 != v61)
            {
LABEL_96:
              v74 = *(_BYTE *)(v10 + 80);
              if (v74)
                v74 = 16 * *(_BYTE *)(v10 + 8);
              goto LABEL_101;
            }
          }
          v74 = 16;
LABEL_101:
          v107[5] = v74 | v71 & 0xEF;
          v107[5] = v74 & 0xDF | v71 & 0xCF | (32 * *(_BYTE *)(v10 + 6));
          v107[8] = *(_BYTE *)(v10 + 9);
          LODWORD(v108) = *(_DWORD *)v10;
          v107[6] = *(_BYTE *)(v10 + 4);
          if (*(_BYTE *)(v10 + 16))
          {
            v75 = buf;
            v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v93 + 24) + 32))(*(_QWORD *)(v93 + 24), 32, 16);
            *(_OWORD *)v10 = 0u;
            *(_OWORD *)(v10 + 16) = 0u;
            v76 = *(_OWORD *)(v70 + 48);
            *(_OWORD *)v10 = *(_OWORD *)(v70 + 32);
            *(_OWORD *)(v10 + 16) = v76;
            v109 = v10;
            if ((v107[5] & 1) == 0)
              v107[9] = *(_QWORD *)(v70 + 64) == v75;
          }
          goto LABEL_104;
        }
LABEL_120:
        dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_3_1);
        goto LABEL_73;
      }
    }
  }
LABEL_104:
  v77 = *(_DWORD *)(a1 + 218);
  if (*(float *)(v12 + 152) == 1.0 && v77 < 0x10000)
    v78 = 0;
  else
    v78 = re::useDitherFade((re *)v10) | (2 * ((v77 & 0xFFFF0000) != 0));
  v79 = *(_OWORD *)(a1 + 392);
  *(_QWORD *)(v12 + 88) = *(_QWORD *)(a1 + 208);
  *(_OWORD *)(v12 + 96) = v79;
  *(_BYTE *)(v12 + 112) = v78;
  if (v17)
  {
    v81 = *(_DWORD *)(v17 + 216);
    v80 = *(_DWORD *)(v17 + 220);
  }
  else
  {
    v80 = 0;
    v81 = 0;
  }
  v82 = (*(_DWORD *)(a2[4] + 544) ^ v81) & ~v80 | v81 & v80;
  LODWORD(v111) = v82;
  v83 = (re::MaterialRenderFlags *)a2[11];
  if (v83)
  {
    v84 = re::MaterialRenderFlags::flattenToOverrideFlags(v83);
    v82 = (v82 ^ v84) & ~HIDWORD(v84) | HIDWORD(v84) & v84;
    LODWORD(v111) = v82;
  }
  v85 = (_DWORD *)a2[10];
  if (v85)
    LODWORD(v111) = (*v85 ^ v82) & ~*(_DWORD *)(a2[10] + 4) | *v85 & *(_DWORD *)(a2[10] + 4);
  v86 = *(_QWORD *)(a1 + 376);
  v87 = *(_QWORD *)(a1 + 384);
  if (!*((_BYTE *)a2 + 128))
    return re::bucketMeshPart((uint64_t)&buf, (int8x16_t *)v12, v86, v87, (_WORD *)(a1 + 368));
  re::bucketVFXMeshPart((uint64_t)&buf, v12, v86, v87, (void *)a2[17]);
  return result;
}

uint64_t re::HashTable<unsigned long long,re::MeshRenderPassGroups::RenderPassGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + (v4 << 7) + 16) != v2)
  {
    while (1)
    {
      v4 = *(_DWORD *)(v6 + (v4 << 7) + 8) & 0x7FFFFFFF;
      if ((_DWORD)v4 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v6 + (v4 << 7) + 16) == v2)
        return v6 + (v4 << 7) + 32;
    }
    return 0;
  }
  return v6 + (v4 << 7) + 32;
}

uint64_t re::DrawCallMeshVisitor::visitVFXScene(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 795))
    return 0;
  if (*(float *)(a2 + 376) == 0.0 || *(_BYTE *)(a2 + 646) != 0)
    return 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 248);
  re::DrawCallMeshVisitor::visitScene(a1, a2);
  return 1;
}

re::DeformationCommandBuffer *re::DeformationCommandBuffer::DeformationCommandBuffer(re::DeformationCommandBuffer *this, re::RenderManager *a2, const re::mtl::CommandBuffer *a3, re::DeformationFencePool *a4)
{
  _anonymous_namespace_ *v5;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = (char *)a2 + 184;
  *((_QWORD *)this + 2) = a3;
  *((_QWORD *)this + 3) = a4;
  *((_BYTE *)this + 32) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 28) = 1;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 36) = 0;
  *((_QWORD *)this + 23) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  return this;
}

uint64_t re::DeformationCommandBuffer::setEncoderType(uint64_t result, uint64_t a2)
{
  id *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *Fence;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  unsigned __int8 v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  unsigned __int8 v18;
  id v19;
  uint64_t v20;
  unint64_t i;
  uint64_t *v22;
  uint64_t v23;
  re::ns::String *v24;
  re::ns::String *v25;
  id v26;
  id v27;
  id v28;

  v3 = *(unsigned __int8 *)(result + 32);
  if ((_DWORD)v3 == (_DWORD)a2)
    return result;
  v4 = a2;
  v5 = result;
  if (!*(_BYTE *)(result + 32))
  {
LABEL_8:
    v7 = 0;
    if (!v4)
      goto LABEL_24;
    goto LABEL_12;
  }
  if ((_DWORD)v3 == 2)
  {
    objc_msgSend(*(id *)(result + 184), "updateFence:", **(_QWORD **)(result + 160));
    v8 = *(_QWORD *)v5;
    v28 = *(id *)(v5 + 184);
    re::RenderManager::sampleComputeEncoderMTLCounterEnd(v8, &v28, 2u);

    objc_msgSend(*(id *)(v5 + 184), "endEncoding");
    v9 = *(void **)(v5 + 184);
    *(_QWORD *)(v5 + 184) = 0;

    goto LABEL_8;
  }
  if ((_DWORD)v3 != 1)
  {
    re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Unknown encoder type: %u", "!\"Unreachable code\"", "setEncoderType", 276, v3);
    _os_crash();
    __break(1u);
    goto LABEL_32;
  }
  if ((_DWORD)a2 == 2)
  {
    Fence = (_QWORD *)re::DeformationFencePool::allocateFence(*(re::DeformationFencePool **)(result + 24));
    v7 = Fence;
  }
  else
  {
    v7 = 0;
    Fence = *(_QWORD **)(result + 160);
  }
  objc_msgSend(*(id *)(v5 + 176), "updateFence:", *Fence);
  objc_msgSend(*(id *)(v5 + 176), "endEncoding");
  v10 = *(void **)(v5 + 176);
  *(_QWORD *)(v5 + 176) = 0;

  if (!v4)
    goto LABEL_24;
LABEL_12:
  if (v4 != 2)
  {
    if (v4 == 1)
    {
      re::mtl::CommandBuffer::makeBlitCommandEncoder(*(id **)(v5 + 16), &v27);
      v2 = (id *)(v5 + 176);
      if ((id *)(v5 + 176) != &v27)
      {
        v11 = v27;
        v27 = 0;
        v12 = *v2;
        *v2 = v11;

      }
      v13 = atomic_load((unsigned __int8 *)&qword_25411A270);
      if ((v13 & 1) != 0)
        goto LABEL_17;
      goto LABEL_33;
    }
LABEL_32:
    re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Unknown encoder type: %u", "!\"Unreachable code\"", "setEncoderType", 312, v4);
    _os_crash();
    __break(1u);
LABEL_33:
    if (__cxa_guard_acquire(&qword_25411A270))
    {
      v24 = re::ns::String::String((re::ns::String *)&_MergedGlobals_394, (re::ns *)"DeformerBlitEncoder");
      __cxa_guard_release((__guard *)v24 + 1);
    }
LABEL_17:
    v14 = (id)_MergedGlobals_394;
    objc_msgSend(*(id *)(v5 + 176), "setLabel:", v14);

    goto LABEL_22;
  }
  v15 = *(_QWORD *)v5;
  v26 = **(id **)(v5 + 16);
  re::RenderManager::makeComputeCommandEncoderWithMTLCounterSampling(v15, &v26, 2u, &v27);
  v2 = (id *)(v5 + 184);
  if ((id *)(v5 + 184) != &v27)
  {
    v16 = v27;
    v27 = 0;
    v17 = *v2;
    *v2 = v16;

  }
  v18 = atomic_load((unsigned __int8 *)&qword_25411A280);
  if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_25411A280))
  {
    v25 = re::ns::String::String((re::ns::String *)&qword_25411A278, (re::ns *)"DeformerEncoder");
    __cxa_guard_release((__guard *)v25 + 1);
  }
  v19 = (id)qword_25411A278;
  objc_msgSend(*v2, "setLabel:", v19);

  if (v7)
    goto LABEL_23;
LABEL_22:
  v7 = *(_QWORD **)(v5 + 152);
  if (v7)
LABEL_23:
    objc_msgSend(*v2, "waitForFence:", *v7);
LABEL_24:
  v20 = *(_QWORD *)(v5 + 136);
  if (v20)
  {
    for (i = 0; i != v20; ++i)
    {
      v22 = (uint64_t *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](v5 + 96, i);
      if (*v22 != *(_QWORD *)(v5 + 160))
      {
        v23 = *v22;
        *(_QWORD *)re::BucketArray<NS::SharedPtr<MTL::Fence> const*,8ul>::addUninitialized(v5 + 40) = v23;
      }
    }
  }
  re::BucketArray<NS::SharedPtr<MTL::Fence> const*,8ul>::clear(v5 + 96);
  result = re::BucketArray<NS::SharedPtr<MTL::Fence> const*,8ul>::addUninitialized(v5 + 96);
  *(_QWORD *)result = *(_QWORD *)(v5 + 160);
  *(_BYTE *)(v5 + 32) = v4;
  return result;
}

void re::DeformationCommandBuffer::encodeSharedEventForSynchronization(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v8;
  id v9;
  id v10;

  re::DeformationCommandBuffer::setEncoderType(a1, 0);
  objc_msgSend(**(id **)(a1 + 16), "encodeSignalEvent:value:", *a2, a3);
  objc_msgSend(**(id **)(a1 + 16), "encodeWaitForEvent:value:", *a2, a4);
  re::mtl::CommandBuffer::makeBlitCommandEncoder(*(id **)(a1 + 16), &v10);
  if ((v8 & 1) == 0
  {
    re::ns::String::String((re::ns::String *)&re::DeformationCommandBuffer::encodeSharedEventForSynchronization(NS::SharedPtr<MTL::SharedEvent> &,unsigned long long,unsigned long long)::$_0::operator() const(void)::s_ns_string, (re::ns *)"DeformerCPUSynchronization");
  }
  v9 = (id)re::DeformationCommandBuffer::encodeSharedEventForSynchronization(NS::SharedPtr<MTL::SharedEvent> &,unsigned long long,unsigned long long)::$_0::operator() const(void)::s_ns_string;
  objc_msgSend(v10, "setLabel:", v9);

  objc_msgSend(v10, "updateFence:", **(_QWORD **)(a1 + 168));
  objc_msgSend(v10, "updateFence:", **(_QWORD **)(a1 + 160));
  objc_msgSend(v10, "endEncoding");

}

void re::DeformationCommandBuffer::encodePostDeformationBlits(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  id v5;
  uint64_t v6;
  BOOL v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  if (!*(_QWORD *)(a2 + 40))
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "first", 761);
    _os_crash();
    __break(1u);
LABEL_15:
    {
      re::ns::String::String((re::ns::String *)&re::DeformationCommandBuffer::encodePostDeformationBlits(re::BucketArray<re::DynamicArray<re::PostDeformationBlit>,8ul> const&)::$_0::operator() const(void)::s_ns_string, (re::ns *)"PostDeformationBlit");
    }
    goto LABEL_4;
  }
  v3 = a2;
  v2 = a1;
  re::DeformationCommandBuffer::setEncoderType(v2, 0);
  re::mtl::CommandBuffer::makeBlitCommandEncoder(*(id **)(v2 + 16), &v13);
  if ((v4 & 1) == 0)
    goto LABEL_15;
LABEL_4:
  v5 = (id)re::DeformationCommandBuffer::encodePostDeformationBlits(re::BucketArray<re::DynamicArray<re::PostDeformationBlit>,8ul> const&)::$_0::operator() const(void)::s_ns_string;
  objc_msgSend(v13, "setLabel:", v5);

  objc_msgSend(v13, "waitForFence:", **(_QWORD **)(v2 + 168));
  v6 = *(_QWORD *)(v3 + 40);
  if (v6)
  {
    v7 = 0;
    for (i = 0; i != v6; ++i)
    {
      v10 = *(_QWORD *)(v9 + 16);
      if (v10)
      {
        v11 = *(_QWORD *)(v9 + 32);
        v12 = v11 + 48 * v10;
        do
        {
          objc_msgSend(v13, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", *(_QWORD *)v11, *(_QWORD *)(v11 + 8), *(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24), *(_QWORD *)(v11 + 32));
          v7 = (*(unsigned __int8 *)(v11 + 40) | v7) != 0;
          v11 += 48;
        }
        while (v11 != v12);
      }
    }
    if (v7)
      objc_msgSend(v13, "updateFence:", **(_QWORD **)(v2 + 160));
  }
  objc_msgSend(v13, "endEncoding");

}

uint64_t re::DeformationCommandBuffer::endDeformation(uint64_t this, uint64_t a2)
{
  int v2;
  id *v3;

  v2 = *(unsigned __int8 *)(this + 32);
  if (*(_BYTE *)(this + 32))
  {
    if (v2 == 2)
    {
      v3 = (id *)(this + 184);
      return objc_msgSend(*v3, "updateFence:", **(_QWORD **)(this + 168));
    }
    if (v2 == 1)
    {
      v3 = (id *)(this + 176);
      return objc_msgSend(*v3, "updateFence:", **(_QWORD **)(this + 168));
    }
    re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Unknown encoder type: %u", "!\"Unreachable code\"", "endDeformation", 115, *(unsigned __int8 *)(this + 32));
    this = _os_crash();
    __break(1u);
  }
  return this;
}

_QWORD *re::DeformationCommandBuffer::beginDeformationPass(re::DeformationCommandBuffer *this)
{
  _QWORD *result;

  *((_QWORD *)this + 21) = re::DeformationFencePool::allocateFence(*((re::DeformationFencePool **)this + 3));
  *((_QWORD *)this + 20) = re::DeformationFencePool::allocateFence(*((re::DeformationFencePool **)this + 3));
  result = (_QWORD *)re::BucketArray<NS::SharedPtr<MTL::Fence> const*,8ul>::addUninitialized((uint64_t)this + 96);
  *result = *((_QWORD *)this + 20);
  return result;
}

uint64_t re::DeformationCommandBuffer::endDeformationPass(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = this;
  v3 = *(unsigned __int8 *)(this + 32);
  if (*(_BYTE *)(this + 32))
  {
    if (v3 != 2)
    {
      if (v3 == 1)
        goto LABEL_8;
      re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Unknown encoder type: %u", "!\"Unreachable code\"", "endDeformationPass", 161, *(unsigned __int8 *)(this + 32));
      _os_crash();
      __break(1u);
    }
    if (objc_msgSend(**(id **)(v2 + 8), "supportsFamily:", 1003))
    {
      objc_msgSend(*(id *)(v2 + 184), "memoryBarrierWithScope:", 1);
      this = objc_msgSend(*(id *)(v2 + 184), "updateFence:", **(_QWORD **)(v2 + 160));
      goto LABEL_9;
    }
    objc_msgSend(*(id *)(v2 + 184), "updateFence:", **(_QWORD **)(v2 + 160));
LABEL_8:
    this = re::DeformationCommandBuffer::setEncoderType(v2, 0);
  }
LABEL_9:
  *(_QWORD *)(v2 + 152) = *(_QWORD *)(v2 + 160);
  *(_QWORD *)(v2 + 160) = 0;
  return this;
}

uint64_t re::DeformationCommandBuffer::finalizeFinalEncoder(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t j;
  uint64_t v7;
  unint64_t i;

  if (*(_QWORD *)(result + 80) + *(_QWORD *)(result + 136))
  {
    v2 = result;
    v3 = result + 40;
    *(_QWORD *)(result + 152) = 0;
    *(_QWORD *)(result + 160) = a2;
    v4 = *(unsigned __int8 *)(result + 32);
    if (!*(_BYTE *)(result + 32))
    {
      re::DeformationCommandBuffer::setEncoderType(result, 1);
      v4 = *(unsigned __int8 *)(v2 + 32);
    }
    if ((_DWORD)v4 == 2)
    {
      v7 = *(_QWORD *)(v2 + 80);
      if (v7)
      {
        for (i = 0; i != v7; ++i)
          objc_msgSend(*(id *)(v2 + 184), "waitForFence:", **(_QWORD **)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](v3, i));
      }
    }
    else
    {
      if ((_DWORD)v4 != 1)
      {
        re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Unknown encoder type: %u", "!\"Unreachable code\"", "finalizeFinalEncoder", 209, v4);
        result = _os_crash();
        __break(1u);
        return result;
      }
      v5 = *(_QWORD *)(v2 + 80);
      if (v5)
      {
        for (j = 0; j != v5; ++j)
          objc_msgSend(*(id *)(v2 + 176), "waitForFence:", **(_QWORD **)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](v3, j));
      }
    }
    result = re::DeformationCommandBuffer::setEncoderType(v2, 0);
    *(_QWORD *)(v2 + 160) = 0;
  }
  return result;
}

uint64_t re::SmoothDampener::smooth(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5, float a6)
{
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  __int128 v16;

  v6 = 0;
  v7 = 2.0 / a4;
  v8 = 1.0
     / (float)((float)((float)((float)((float)((float)((float)((float)(2.0 / a4) * a6) * 0.235) + 0.48)
                                     * (float)((float)(2.0 / a4) * a6))
                             + 1.0)
                     * (float)((float)(2.0 / a4) * a6))
             + 1.0);
  v9 = a4 * a5;
  v10 = -(float)(a4 * a5);
  do
  {
    v11 = *(float *)(a1 + v6);
    v12 = *(float *)(a2 + v6) - v11;
    if (v12 < v10)
      v12 = v10;
    if (v9 < v12)
      v12 = v9;
    v13 = *(float *)(a3 + v6);
    v14 = (float)(v13 + (float)(v7 * v12)) * a6;
    *(float *)(a3 + v6) = v8 * (float)(v13 + (float)((float)-v7 * v14));
    *(float *)((char *)&v16 + v6) = v11 + (float)((float)(v12 + v14) * v8);
    v6 += 4;
  }
  while (v6 != 12);
  return v16;
}

void *re::introspect_REMeshOffsetsBlendingMode(re *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  uint64_t v15;
  re::IntrospectionBasic *v16;
  uint64_t v17[2];
  __int128 v18;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "Additive";
      re::introspect_REMeshOffsetsBlendingMode(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = 1;
      *(_QWORD *)(v15 + 16) = "Override";
      qword_2558298C8 = v15;
    }
  }
  {
    v16 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_REMeshOffsetsBlendingMode(BOOL)::info, "REMeshOffsetsBlendingMode", 4, 4, 1, 1);
    *(_QWORD *)v16 = &off_24ED7D9E8;
    *((_QWORD *)v16 + 8) = &re::introspect_REMeshOffsetsBlendingMode(BOOL)::enumTable;
    *((_DWORD *)v16 + 4) = 9;
  }
  if (v2)
  {
    if ((re::introspect_REMeshOffsetsBlendingMode(BOOL)::isInitialized & 1) != 0)
      return &re::introspect_REMeshOffsetsBlendingMode(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    v5 = re::introspect_REMeshOffsetsBlendingMode(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    if ((v5 & 1) != 0)
      return &re::introspect_REMeshOffsetsBlendingMode(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::introspect_REMeshOffsetsBlendingMode(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::introspect_REMeshOffsetsBlendingMode(BOOL)::info;
    }
  }
  re::introspect_REMeshOffsetsBlendingMode(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_REMeshOffsetsBlendingMode(BOOL)::info, a2);
  v17[0] = 0x3D7D20A70EDE8D68;
  v17[1] = (uint64_t)"REMeshOffsetsBlendingMode";
  xmmword_2558298F8 = v18;
  re::StringID::destroyString((re::StringID *)v17);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::introspect_REMeshOffsetsBlendingMode(BOOL)::info;
}

uint64_t *re::allocInfo_MeshLodLevelInfo(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411A290);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411A290))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411A3A8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411A3B8 = 0;
    qword_25411A3C8 = 0;
    qword_25411A3D0 = 0xFFFFFFFFLL;
    qword_25411A3A8 = (uint64_t)&off_24ED7DAA8;
    qword_25411A3D8 = (uint64_t)"MeshLodLevelInfo";
    dword_25411A3E0 = 0;
    xmmword_25411A3E8 = 0u;
    unk_25411A3F8 = 0u;
    xmmword_25411A408 = 0u;
    qword_25411A418 = 0;
    __cxa_guard_release(&qword_25411A290);
  }
  return &qword_25411A3A8;
}

void re::initInfo_MeshLodLevelInfo(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;

  v19[0] = 0xCB9A0A380331B57CLL;
  v19[1] = "MeshLodLevelInfo";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  v4 = atomic_load((unsigned __int8 *)&qword_25411A298);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411A298);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_float((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "minScreenArea";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_25411A308 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_float((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "maxViewDepth";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x400000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_25411A310 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_uint32_t((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "meshPartEnd";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x800000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_25411A318 = v17;
      __cxa_guard_release(&qword_25411A298);
    }
  }
  *((_QWORD *)this + 2) = 0xC00000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_25411A308;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::MeshLodLevelInfo>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::MeshLodLevelInfo>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::MeshLodLevelInfo>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::MeshLodLevelInfo>;
  re::IntrospectionRegistry::add(this, v3);
  v18 = v20;
}

uint64_t re::introspect_MeshLodLevelInfo(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshLodLevelInfo", (uint64_t (*)(re::internal *))re::allocInfo_MeshLodLevelInfo, (re::IntrospectionBase *(*)(void))re::initInfo_MeshLodLevelInfo, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::MeshLodLevelInfo>, this);
}

void re::introspect_MeshLodSelectStrategy(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  StringID v34;
  _QWORD v35[2];
  _QWORD v36[61];

  v2 = atomic_load((unsigned __int8 *)&qword_25411A2A0);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_25411A2A0);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "ScreenArea";
      qword_25411A2D8 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = 1;
      *(_QWORD *)(v30 + 16) = "ViewDepth";
      qword_25411A2E0 = v30;
      __cxa_guard_release(&qword_25411A2A0);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25411A2A8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25411A2A8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25411A360, "MeshLodSelectStrategy", 1, 1, 1, 1);
    qword_25411A360 = (uint64_t)&off_24ED7D9E8;
    qword_25411A3A0 = (uint64_t)&re::introspect_MeshLodSelectStrategy(BOOL)::enumTable;
    dword_25411A370 = 9;
    __cxa_guard_release(&qword_25411A2A8);
  }
  if ((_MergedGlobals_395 & 1) == 0)
  {
    _MergedGlobals_395 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25411A360, a2);
    v32 = 0x55B1F1035B4A3746;
    v33 = "MeshLodSelectStrategy";
    v36[0] = 0x31CD534126;
    v36[1] = "uint8_t";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v36);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v36);
      v6 = (unsigned int *)qword_25411A3A0;
      v35[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v34.var0 = 2 * v12;
            v34.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v16, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v34.var0 = 2 * v20;
              v34.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v24, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v25);
      xmmword_25411A380 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "MeshLodSelectStrategy", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t *re::allocInfo_MeshLodSelectOptions(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411A2B0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411A2B0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411A420, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411A430 = 0;
    qword_25411A440 = 0;
    qword_25411A448 = 0xFFFFFFFFLL;
    qword_25411A420 = (uint64_t)&off_24ED7DAA8;
    qword_25411A450 = (uint64_t)"MeshLodSelectOptions";
    dword_25411A458 = 0;
    xmmword_25411A460 = 0u;
    unk_25411A470 = 0u;
    xmmword_25411A480 = 0u;
    qword_25411A490 = 0;
    __cxa_guard_release(&qword_25411A2B0);
  }
  return &qword_25411A420;
}

void re::initInfo_MeshLodSelectOptions(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x9768D638359290DCLL;
  v14[1] = "MeshLodSelectOptions";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_25411A2B8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411A2B8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::introspect_MeshLodSelectStrategy((re *)v6, v7);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "strategy";
      *(_QWORD *)(v8 + 16) = &qword_25411A360;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411A2E8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_float((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "bias";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x400000004;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411A2F0 = v12;
      __cxa_guard_release(&qword_25411A2B8);
    }
  }
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25411A2E8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::MeshLodSelectOptions>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::MeshLodSelectOptions>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::MeshLodSelectOptions>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::MeshLodSelectOptions>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<re::MeshLodSelectOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a3 = 0;
  *(_DWORD *)(a3 + 4) = 1065353216;
}

uint64_t re::internal::defaultConstructV2<re::MeshLodSelectOptions>(uint64_t result)
{
  *(_BYTE *)result = 0;
  *(_DWORD *)(result + 4) = 1065353216;
  return result;
}

uint64_t re::introspect_MeshLodSelectOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshLodSelectOptions", (uint64_t (*)(re::internal *))re::allocInfo_MeshLodSelectOptions, (re::IntrospectionBase *(*)(void))re::initInfo_MeshLodSelectOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::MeshLodSelectOptions>, this);
}

uint64_t *re::allocInfo_MeshLodSelectOverrideOptions(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411A2C0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411A2C0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411A498, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411A4A8 = 0;
    qword_25411A4B8 = 0;
    qword_25411A4C0 = 0xFFFFFFFFLL;
    qword_25411A498 = (uint64_t)&off_24ED7DAA8;
    qword_25411A4C8 = (uint64_t)"MeshLodSelectOverrideOptions";
    dword_25411A4D0 = 0;
    xmmword_25411A4D8 = 0u;
    unk_25411A4E8 = 0u;
    xmmword_25411A4F8 = 0u;
    qword_25411A508 = 0;
    __cxa_guard_release(&qword_25411A2C0);
  }
  return &qword_25411A498;
}

void re::initInfo_MeshLodSelectOverrideOptions(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x825FEA2A55FEAE04;
  v14[1] = "MeshLodSelectOverrideOptions";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_25411A2C8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411A2C8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::IntrospectionInfo<re::Optional<re::MeshLodSelectStrategy>>::get((re *)v6, v7);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "strategy";
      *(_QWORD *)(v8 + 16) = &qword_25411A320;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0x100000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411A2F8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::IntrospectionInfo<re::Optional<float>>::get(1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "bias";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x400000004;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411A300 = v12;
      __cxa_guard_release(&qword_25411A2C8);
    }
  }
  *((_QWORD *)this + 2) = 0xC00000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25411A2F8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::MeshLodSelectOverrideOptions>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::MeshLodSelectOverrideOptions>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::MeshLodSelectOverrideOptions>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::MeshLodSelectOverrideOptions>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::IntrospectionInfo<re::Optional<re::MeshLodSelectStrategy>>::get(re *a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  int v3;
  re::IntrospectionRegistry *v4;
  const re::IntrospectionBase *v5;
  const char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12[2];
  __int128 v13;
  uint64_t v14;
  char v15;
  _BYTE v16[479];

  v2 = atomic_load((unsigned __int8 *)&qword_25411A2D0);
  if ((v2 & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_25411A2D0);
    if ((_DWORD)a1)
    {
      re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_25411A320);
      qword_25411A320 = (uint64_t)&off_24ED782A8;
      __cxa_guard_release(&qword_25411A2D0);
    }
  }
  if ((byte_25411A289 & 1) == 0)
  {
    re::introspect_MeshLodSelectStrategy(a1, a2);
    if ((byte_25411A289 & 1) == 0)
    {
      byte_25411A289 = 1;
      v3 = *(_DWORD *)&algn_25411A374[4];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411A320, 0);
      *(_QWORD *)&algn_25411A328[8] = 0x20000000DLL;
      *(_DWORD *)&algn_25411A328[16] = v3;
      *(_WORD *)&algn_25411A328[20] = 0;
      *(_QWORD *)&xmmword_25411A340 = 0;
      *((_QWORD *)&xmmword_25411A340 + 1) = 0xFFFFFFFFLL;
      *(_QWORD *)algn_25411A350 = &qword_25411A360;
      *(_QWORD *)&algn_25411A350[8] = 0;
      qword_25411A320 = (uint64_t)&off_24ED782A8;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_25411A320, (const re::IntrospectionBase *)&v14);
      if ((v15 & 1) != 0)
        v6 = *(const char **)&v16[7];
      else
        v6 = v16;
      if (v14 && (v15 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v14 + 40))();
      v11 = xmmword_25411A380;
      v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v12);
      if (v7)
      {
        v8 = *v7;
        *((_QWORD *)&v10 + 1) = v8;
      }
      else
      {
        v13 = v11;
        re::TypeBuilder::beginOptionalType((uint64_t)&v14, v12, 2uLL, 1uLL, &v13);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v14, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::MeshLodSelectStrategy>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::MeshLodSelectStrategy>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_25411A340 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::internal::defaultConstruct<re::MeshLodSelectOverrideOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a3 = 1;
  *(_BYTE *)(a3 + 4) = 0;
}

uint64_t re::internal::defaultConstructV2<re::MeshLodSelectOverrideOptions>(uint64_t result)
{
  *(_WORD *)result = 1;
  *(_BYTE *)(result + 4) = 0;
  return result;
}

uint64_t re::introspect_MeshLodSelectOverrideOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshLodSelectOverrideOptions", (uint64_t (*)(re::internal *))re::allocInfo_MeshLodSelectOverrideOptions, (re::IntrospectionBase *(*)(void))re::initInfo_MeshLodSelectOverrideOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::MeshLodSelectOverrideOptions>, this);
}

uint64_t re::selectMeshLodByScreenArea(uint64_t a1, uint64_t a2, float *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  uint32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  char v24;
  double v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float *v30;
  uint64_t result;

  v6 = *(_QWORD *)(a1 + 80);
  if (v6)
  {
    v7 = *(float32x4_t *)(a1 + 16);
    v8 = *(float32x4_t *)(a1 + 32);
    v9 = (uint32x4_t)vcgtq_f32(v7, v8);
    v9.i32[3] = v9.i32[2];
    if ((vmaxvq_u32(v9) & 0x80000000) != 0)
    {
      v11 = 0uLL;
    }
    else
    {
      v10.i64[0] = 0x3F0000003F000000;
      v10.i64[1] = 0x3F0000003F000000;
      v11 = vmulq_f32(vaddq_f32(v7, v8), v10);
    }
    v13 = *(float32x4_t *)(a2 + 16);
    v14 = *(float32x4_t *)(a2 + 32);
    v15 = *(float32x4_t *)(a2 + 48);
    v16 = vaddq_f32(v15, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a2, v11.f32[0]), v13, *(float32x2_t *)v11.f32, 1), v14, v11, 2));
    v17 = vaddq_f32(v15, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a2, v7.f32[0]), v13, *(float32x2_t *)v7.f32, 1), v14, v7, 2));
    v18 = vdivq_f32(v16, (float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 3));
    v19 = vsubq_f32(vdivq_f32(v17, (float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 3)), v18);
    v20 = vmulq_f32(v19, v19);
    v21 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1)));
    v22 = vmulq_f32(v18, v18);
    v23 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1)));
    v25 = COERCE_DOUBLE(vmovn_s32(vcgtq_f32(v23, v21)));
    v24 = LOBYTE(v25);
    LODWORD(v25) = 1.0;
    v26 = 1.0;
    if ((v24 & 1) != 0)
    {
      v27 = a3[1] / (float)((float)(a3[5] - a3[6]) * 0.5);
      v28 = (float)((float)((float)(v27 * (float)(v27 * 3.1416)) * v21.f32[0]) / vsubq_f32(v23, v21).f32[0]) * 0.25;
      if (v28 > 1.0)
        v28 = 1.0;
      if (v28 >= 0.0)
        v26 = v28;
      else
        v26 = 0.0;
    }
    v29 = *(float *)(a4 + 4);
    if (v29 != 0.0)
      *(float *)&v25 = v26 / v29;
    if ((_DWORD)v6)
    {
      v12 = 0;
      v30 = *(float **)(a1 + 88);
      while (v6 != v12)
      {
        if (*(float *)&v25 >= *v30)
          goto LABEL_22;
        ++v12;
        v30 += 3;
        if (*(_QWORD *)(a1 + 80) == v12)
          return 0;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_28;
    }
    LODWORD(v12) = 0;
LABEL_22:
    if ((_DWORD)v12 == (_DWORD)v6)
      return 0;
    if (!a6)
      goto LABEL_29;
  }
  else
  {
    if (!a6)
    {
LABEL_28:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
      _os_crash();
      __break(1u);
LABEL_29:
      re::internal::assertLog((re::internal *)6, a2, v25, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
      _os_crash();
      __break(1u);
    }
    LOBYTE(v12) = 0;
  }
  *(_BYTE *)a5 = v12;
  result = 1;
  *(_BYTE *)(a5 + 1) = 1;
  *(_WORD *)(a5 + 2) = -1;
  return result;
}

uint64_t re::selectMeshLodByViewDepth(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  uint32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  float32x4_t v13;
  float *v14;
  uint64_t result;

  v5 = a1[5].i64[0];
  if (v5)
  {
    v6 = a1[1];
    v7 = a1[2];
    v8 = (uint32x4_t)vcgtq_f32(v6, v7);
    v8.i32[3] = v8.i32[2];
    if ((vmaxvq_u32(v8) & 0x80000000) != 0)
    {
      v11.i64[0] = 0;
      v11.i32[2] = 0;
      if ((_DWORD)v5)
      {
LABEL_4:
        v12 = 0;
        v13 = *(float32x4_t *)(a2 + 8);
        v13.i32[1] = *(_DWORD *)(a2 + 24);
        v13.i32[2] = *(_DWORD *)(a2 + 40);
        v13.i32[3] = *(_DWORD *)(a2 + 56);
        v11.i32[3] = 1.0;
        v11 = vmulq_f32(v13, v11);
        *(float32x2_t *)v11.f32 = vadd_f32(*(float32x2_t *)v11.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL));
        v11.f32[0] = *(float *)(a3 + 4) * fabsf(vaddv_f32(*(float32x2_t *)v11.f32));
        v14 = (float *)(a1[5].i64[1] + 4);
        while (v5 != v12)
        {
          if (v11.f32[0] <= *v14)
            goto LABEL_13;
          ++v12;
          v14 += 3;
          if (a1[5].i64[0] == v12)
            return 0;
        }
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_19;
      }
    }
    else
    {
      v9 = vaddq_f32(v6, v7);
      v10.i64[0] = 0x3F0000003F000000;
      v10.i64[1] = 0x3F0000003F000000;
      v11 = vmulq_f32(v9, v10);
      if ((_DWORD)v5)
        goto LABEL_4;
    }
    LODWORD(v12) = 0;
LABEL_13:
    if ((_DWORD)v12 == (_DWORD)v5)
      return 0;
    if (!a5)
      goto LABEL_20;
  }
  else
  {
    if (!a5)
    {
LABEL_19:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
      _os_crash();
      __break(1u);
LABEL_20:
      re::internal::assertLog((re::internal *)6, a2, *(double *)v11.i64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
      _os_crash();
      __break(1u);
    }
    LOBYTE(v12) = 0;
  }
  *(_BYTE *)a4 = v12;
  result = 1;
  *(_BYTE *)(a4 + 1) = 1;
  *(_WORD *)(a4 + 2) = -1;
  return result;
}

_QWORD *re::IntrospectionOptional<re::MeshLodSelectStrategy>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::MeshLodSelectStrategy>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::MeshLodSelectStrategy>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::MeshLodSelectStrategy>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::MeshLodSelectStrategy>::setHasValue(uint64_t a1, _BYTE *a2, int a3)
{
  if (a3)
  {
    if (!*a2)
      *a2 = 1;
    ++a2;
  }
  else if (!*a2)
  {
    return;
  }
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::MeshLodSelectStrategy>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 1;
}

{
  return a2 + 1;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::MeshLodSelectStrategy>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 1;
  if (!v2)
    return 0;
  return result;
}

_BYTE *re::TypeBuilderHelper::registerOptional<re::MeshLodSelectStrategy>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(_BYTE *result, char *a2)
{
  char v2;

  if (a2)
  {
    v2 = *a2;
    if (!*result)
      *result = 1;
    result[1] = v2;
  }
  else if (*result)
  {
    *result = 0;
  }
  return result;
}

uint64_t re::DrawCallHandler::registerHandler(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  id v6;
  void **v7;
  void *v8;
  void *v9;
  re *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[3];
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32);
  v6 = a3;
  v7 = (void **)v5(a2, 8, 8);
  *v7 = 0;
  v8 = _Block_copy(v6);

  v9 = *v7;
  *v7 = v8;

  *(_QWORD *)(a1 + 8) = v7;
  v11 = re::globalAllocators(v10)[2];
  v13[0] = &off_24ED78328;
  v14 = v11;
  v15 = v13;
  (*(void (**)(uint64_t, void **, _QWORD *))(*(_QWORD *)a2 + 16))(a2, v7, v13);
  result = (uint64_t)v15;
  if (v15)
  {
    result = (*(uint64_t (**)(_QWORD *))*v15)(v15);
    if (v15 != v13)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
  }
  return result;
}

void re::internal::Callable<re::DrawCallHandler::registerHandler(re::Allocator &,void({block_pointer})(objc_object  {objcproto23MTLRenderCommandEncoder}*,re::DrawCallHandlerContext))::$_0,void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::DrawCallHandler::registerHandler(re::Allocator &,void({block_pointer})(objc_object  {objcproto23MTLRenderCommandEncoder}*,re::DrawCallHandlerContext))::$_0,void ()(void *)>::operator()(uint64_t a1, id **a2)
{

}

_QWORD *re::internal::Callable<re::DrawCallHandler::registerHandler(re::Allocator &,void({block_pointer})(objc_object  {objcproto23MTLRenderCommandEncoder}*,re::DrawCallHandlerContext))::$_0,void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED78328;
  return result;
}

_QWORD *re::internal::Callable<re::DrawCallHandler::registerHandler(re::Allocator &,void({block_pointer})(objc_object  {objcproto23MTLRenderCommandEncoder}*,re::DrawCallHandlerContext))::$_0,void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED78328;
  return result;
}

uint64_t re::internal::Callable<re::DrawCallHandler::registerHandler(re::Allocator &,void({block_pointer})(objc_object  {objcproto23MTLRenderCommandEncoder}*,re::DrawCallHandlerContext))::$_0,void ()(void *)>::size()
{
  return 16;
}

re::RenderGraph *re::RenderGraph::RenderGraph(re::RenderGraph *this, const char *a2, unint64_t a3, const char *a4, const char *a5, uint64_t a6)
{
  _anonymous_namespace_ *v12;
  _anonymous_namespace_ *v13;
  _anonymous_namespace_ *v14;

  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *((_DWORD *)this + 6) = 0;
  v12 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity(this, a3);
  ++*((_DWORD *)this + 6);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = &str_110;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = &str_110;
  *((_QWORD *)this + 13) = a6;
  return this;
}

void re::RenderGraph::~RenderGraph(re::RenderGraph *this)
{
  re::RenderGraph *v1;
  uint64_t v2;
  void (****v3)(_QWORD);
  uint64_t v4;
  void (***v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;

  v1 = this;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void (****)(_QWORD))*((_QWORD *)this + 4);
    v4 = 8 * v2;
    do
    {
      v5 = *v3;
      if (*v3)
      {
        v6 = re::globalAllocators(this)[2];
        (**v5)(v5);
        this = (re::RenderGraph *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v6 + 40))(v6, v5);
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  *((_QWORD *)v1 + 2) = 0;
  ++*((_DWORD *)v1 + 6);
  re::StringID::destroyString((re::RenderGraph *)((char *)v1 + 88));
  re::StringID::destroyString((re::RenderGraph *)((char *)v1 + 72));
  v7 = *((_QWORD *)v1 + 5);
  if (v7)
  {
    if ((*((_BYTE *)v1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *((_QWORD *)v1 + 7));
    *(_OWORD *)((char *)v1 + 40) = 0u;
    *(_OWORD *)((char *)v1 + 56) = 0u;
  }
  if (*(_QWORD *)v1)
  {
    if (*((_QWORD *)v1 + 4))
      (*(void (**)(_QWORD))(**(_QWORD **)v1 + 40))(*(_QWORD *)v1);
    *((_QWORD *)v1 + 4) = 0;
    *((_QWORD *)v1 + 1) = 0;
    *((_QWORD *)v1 + 2) = 0;
    *(_QWORD *)v1 = 0;
    ++*((_DWORD *)v1 + 6);
  }
}

void re::RenderGraph::setup(re::RenderGraph *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v3;
  re::RenderGraphNodeBase **v6;
  uint64_t v7;
  re::RenderGraphNodeBase *v8;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v6 = (re::RenderGraphNodeBase **)*((_QWORD *)this + 4);
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      if (*((_BYTE *)*v6 + 64))
      {
        re::RenderGraphBuilder::startNode(a2, *v6);
        (*(void (**)(re::RenderGraphNodeBase *, re::RenderGraphBuilder *, re::RenderGraphDataStore *))(*(_QWORD *)v8 + 88))(v8, a2, a3);
        if (*((_BYTE *)v8 + 65))
          re::RenderGraphBuilder::handleAutoMsaaTargets(a2);
        if (*((_BYTE *)v8 + 66))
          re::RenderGraphBuilder::handleForceResolve(a2);
        if (*((_BYTE *)v8 + 67))
          *((_BYTE *)a2 + 595) = 1;
        if (*((_BYTE *)a2 + 609))
          re::RenderGraphBuilder::handleProgrammableBlendingTargets(a2);
        re::RenderGraphBuilder::finishNode(a2, v8);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
}

void re::makeCompilingVisualsRenderPipeline(uint64_t a1, unsigned int *a2, _BYTE *a3, void **a4, void **a5)
{
  uint64_t *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  int v13;
  int v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v21;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;

  v8 = *(uint64_t **)(a1 + 56);
  re::ShaderManager::makeRenderPipelineDescriptor((re::ShaderManager *)v8, &v28);
  objc_msgSend(v28, sel_setLabel_, CFSTR("CompilationRenderPipeline"));
  objc_msgSend(v28, sel_setRasterSampleCount_, *a2);
  objc_msgSend(v28, sel_setInputPrimitiveTopology_, 3);
  v21 = a1;
  if (*(_BYTE *)(a1 + 302))
    objc_msgSend(v28, sel_setMaxVertexAmplificationCount_, 2);
  v9 = 0;
  v10 = a2 + 1;
  do
  {
    if (v10[v9])
    {
      objc_msgSend(objc_msgSend(objc_msgSend(v28, sel_colorAttachments), sel_objectAtIndexedSubscript_, v9), sel_setPixelFormat_, (int)v10[v9]);
      objc_msgSend(objc_msgSend(objc_msgSend(v28, sel_colorAttachments), sel_objectAtIndexedSubscript_, v9), sel_setBlendingEnabled_, 0);
      objc_msgSend(objc_msgSend(objc_msgSend(v28, sel_colorAttachments), sel_objectAtIndexedSubscript_, v9), sel_setWriteMask_, 15);
    }
    ++v9;
  }
  while (v9 != 8);
  v11 = a2[9];
  if (v11 - 250 > 0xA || ((1 << (v11 + 6)) & 0x425) == 0)
  {
    v13 = 0;
  }
  else
  {
    objc_msgSend(v28, sel_setDepthAttachmentPixelFormat_);
    v13 = 1;
  }
  v14 = 0;
  if (a2[10] - 253 <= 9 && ((1 << (*((_BYTE *)a2 + 40) + 3)) & 0x385) != 0)
  {
    objc_msgSend(v28, sel_setStencilAttachmentPixelFormat_);
    v14 = 1;
  }
  v15 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD590], sel_alloc), sel_init);
  v16 = v15;
  if (v13)
  {
    objc_msgSend(v15, sel_setDepthCompareFunction_, 7);
    objc_msgSend(v16, sel_setDepthWriteEnabled_, 1);
  }
  if (v14)
  {
    if (*a3)
    {
      v17 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD718], sel_alloc), sel_init);
      objc_msgSend(v17, sel_setReadMask_, a3[1]);
      objc_msgSend(v17, sel_setWriteMask_, a3[2]);
      objc_msgSend(v17, sel_setStencilCompareFunction_, a3[3]);
      objc_msgSend(v17, sel_setStencilFailureOperation_, a3[4]);
      objc_msgSend(v17, sel_setDepthFailureOperation_, a3[5]);
      objc_msgSend(v17, sel_setDepthStencilPassOperation_, a3[6]);
      objc_msgSend(v16, sel_setFrontFaceStencil_, v17);
      if (v17)

    }
    if (a3[8])
    {
      v18 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD718], sel_alloc), sel_init);
      objc_msgSend(v18, sel_setReadMask_, a3[9]);
      objc_msgSend(v18, sel_setWriteMask_, a3[10]);
      objc_msgSend(v18, sel_setStencilCompareFunction_, a3[11]);
      objc_msgSend(v18, sel_setStencilFailureOperation_, a3[12]);
      objc_msgSend(v18, sel_setDepthFailureOperation_, a3[13]);
      objc_msgSend(v18, sel_setDepthStencilPassOperation_, a3[14]);
      objc_msgSend(v16, sel_setBackFaceStencil_, v18);
      if (v18)

    }
  }
  v27 = objc_msgSend(*(id *)(v21 + 184), sel_newDepthStencilStateWithDescriptor_, v16);
  NS::SharedPtr<MTL::Texture>::operator=(a5, &v27);
  if (v27)

  re::ShaderManager::makeFunctionDescriptor((re::ShaderManager *)v8, &v27);
  v19 = (void *)MEMORY[0x24BDD17C8];
  objc_msgSend(v27, sel_setName_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, "vsCompilingVisuals", 4));
  re::ShaderManager::makeFunctionWithDescriptor((uint64_t)v8, v8[32], &v27, &v26);
  re::ShaderManager::makeFunctionDescriptor((re::ShaderManager *)v8, &v25);
  objc_msgSend(v25, sel_setName_, objc_msgSend(v19, sel_stringWithCString_encoding_, "fsCompilingVisuals", 4));
  re::ShaderManager::makeFunctionWithDescriptor((uint64_t)v8, v8[32], &v25, &v24);
  objc_msgSend(v28, sel_setVertexFunction_, v26);
  objc_msgSend(v28, sel_setFragmentFunction_, v24);
  re::mtl::Device::makeRenderPipelineState((id *)(v21 + 184), (uint64_t)v28, &v23);
  NS::SharedPtr<MTL::Texture>::operator=(a4, &v23);
  if (v23)

  if (v24)
  if (v25)

  if (v26)
  if (v27)

  if (v16)
  if (v28)

}

void re::internal::defaultConstruct<re::DeformationDefinition>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  a3[1] = &str_110;
  a3[3] = 0;
  a3[4] = 0;
  a3[2] = 0;
}

void re::internal::defaultDestruct<re::DeformationDefinition>(int a1, int a2, re::StringID *this)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    v5 = (_QWORD *)((char *)this + 24);
    if (*((_QWORD *)this + 3))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 4));
      *v5 = 0;
      *((_QWORD *)this + 4) = 0;
    }
    *((_QWORD *)this + 2) = 0;
  }
  re::StringID::destroyString(this);
}

_QWORD *re::internal::defaultConstructV2<re::DeformationDefinition>(_QWORD *result)
{
  *result = 0;
  result[1] = &str_110;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

void re::internal::defaultDestructV2<re::DeformationDefinition>(re::StringID *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    if (*((_QWORD *)this + 3))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 4));
      *((_QWORD *)this + 3) = 0;
      *((_QWORD *)this + 4) = 0;
    }
    *((_QWORD *)this + 2) = 0;
  }
  re::StringID::destroyString(this);
}

uint64_t *re::allocInfo_DeformationStackDefinition(re *this)
{
  unsigned __int8 v1;
  _OWORD *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411A530);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411A530))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411A618, 0);
    *(uint64_t *)((char *)&qword_25411A628 + 6) = 0;
    qword_25411A628 = 0;
    qword_25411A638 = 0;
    qword_25411A640 = 0xFFFFFFFFLL;
    qword_25411A618 = (uint64_t)&off_24ED7DAA8;
    qword_25411A648 = (uint64_t)"DeformationStackDefinition";
    dword_25411A650 = 0;
    v3[4] = 0u;
    v3[5] = 0u;
    v3[6] = 0u;
    qword_25411A688 = 0;
    __cxa_guard_release(&qword_25411A530);
  }
  return &qword_25411A618;
}

void re::initInfo_DeformationStackDefinition(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  __int128 v8;
  _QWORD v9[2];
  __int128 v10;

  v9[0] = 0x9F611EC88668AD56;
  v9[1] = "DeformationStackDefinition";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  v4 = atomic_load((unsigned __int8 *)&qword_25411A540);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411A540);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::IntrospectionInfo<re::DynamicArray<re::DeformationDefinition>>::get();
      v7 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v7 = 1;
      *(_QWORD *)(v7 + 8) = "deformationStack";
      *(_QWORD *)(v7 + 16) = &qword_25411A560;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_25411A538 = v7;
      __cxa_guard_release(&qword_25411A540);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_25411A538;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::DeformationStackDefinition>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::DeformationStackDefinition>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::DeformationStackDefinition>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::DeformationStackDefinition>;
  re::IntrospectionRegistry::add(this, v3);
  v8 = v10;
}

void re::IntrospectionInfo<re::DynamicArray<re::DeformationDefinition>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  re *v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  uint64_t *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23[2];
  __int128 v24;
  const char *v25;
  __int128 v26;

  v0 = atomic_load((unsigned __int8 *)&qword_25411A548);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25411A548))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_25411A560);
    qword_25411A560 = (uint64_t)&off_24ED78380;
    __cxa_guard_release(&qword_25411A548);
  }
  if ((_MergedGlobals_396 & 1) == 0)
  {
    v1 = (uint64_t *)qword_25411A528;
    if (qword_25411A528)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_25411A518);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25411A518))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411A5A0, 0);
      *(uint64_t *)((char *)&qword_25411A5B0 + 6) = 0;
      qword_25411A5B0 = 0;
      *(_QWORD *)&xmmword_25411A5C0 = 0;
      *((_QWORD *)&xmmword_25411A5C0 + 1) = 0xFFFFFFFFLL;
      qword_25411A5A0 = (uint64_t)&off_24ED7DAA8;
      qword_25411A5D0 = (uint64_t)"DeformationDefinition";
      dword_25411A5D8 = 0;
      *(_OWORD *)&qword_25411A5E0 = 0u;
      *(_OWORD *)&qword_25411A5F0 = 0u;
      *(_OWORD *)&qword_25411A600 = 0u;
      qword_25411A610 = 0;
      __cxa_guard_release(&qword_25411A518);
    }
    qword_25411A528 = (uint64_t)&qword_25411A5A0;
    *(_QWORD *)&v26 = 0x6DEEB11F44CBF546;
    *((_QWORD *)&v26 + 1) = "DeformationDefinition";
    re::StringID::destroyString((re::StringID *)&v26);
    xmmword_25411A5C0 = v24;
    v4 = atomic_load((unsigned __int8 *)&qword_25411A520);
    if ((v4 & 1) == 0)
    {
      v12 = (re *)__cxa_guard_acquire(&qword_25411A520);
      if ((_DWORD)v12)
      {
        v13 = re::introspectionAllocator(v12);
        v15 = re::IntrospectionInfo<re::StringID>::get(1, v14);
        v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
        *(_DWORD *)v16 = 1;
        *(_QWORD *)(v16 + 8) = "deformerName";
        *(_QWORD *)(v16 + 16) = v15;
        *(_QWORD *)(v16 + 24) = 0;
        *(_QWORD *)(v16 + 32) = 1;
        *(_DWORD *)(v16 + 40) = 0;
        *(_QWORD *)(v16 + 48) = 0;
        *(_QWORD *)(v16 + 56) = 0;
        *(_DWORD *)(v16 + 64) = 0;
        qword_25411A550 = v16;
        v17 = re::introspectionAllocator((re *)v16);
        v19 = re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(1, v18);
        v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = "deformationOptions";
        *(_QWORD *)(v20 + 16) = v19;
        *(_QWORD *)(v20 + 24) = 0;
        *(_QWORD *)(v20 + 32) = 0x1000000002;
        *(_DWORD *)(v20 + 40) = 0;
        *(_QWORD *)(v20 + 48) = 0;
        *(_QWORD *)(v20 + 56) = 0;
        *(_DWORD *)(v20 + 64) = 0;
        qword_25411A558 = v20;
        __cxa_guard_release(&qword_25411A520);
      }
    }
    qword_25411A5B0 = 0x2800000008;
    v1 = &qword_25411A5A0;
    dword_25411A5B8 = 8;
    word_25411A5BC = 0;
    dword_25411A5D8 = 2;
    qword_25411A5E0 = (uint64_t)&qword_25411A550;
    unk_25411A5E8 = re::internal::defaultConstruct<re::DeformationDefinition>;
    qword_25411A5F0 = (uint64_t)re::internal::defaultDestruct<re::DeformationDefinition>;
    unk_25411A5F8 = 0;
    qword_25411A600 = 0;
    unk_25411A608 = re::internal::defaultConstructV2<re::DeformationDefinition>;
    qword_25411A610 = (uint64_t)re::internal::defaultDestructV2<re::DeformationDefinition>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25411A5A0, v3);
    v26 = v24;
    if ((_MergedGlobals_396 & 1) == 0)
    {
LABEL_7:
      _MergedGlobals_396 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411A560, 0);
      qword_25411A570 = 0x2800000003;
      dword_25411A578 = v5;
      word_25411A57C = 0;
      *(_QWORD *)&xmmword_25411A580 = 0;
      *((_QWORD *)&xmmword_25411A580 + 1) = 0xFFFFFFFFLL;
      qword_25411A590 = (uint64_t)v1;
      unk_25411A598 = 0;
      qword_25411A560 = (uint64_t)&off_24ED78380;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_25411A560, (const re::IntrospectionBase *)&v24);
      if ((BYTE8(v24) & 1) != 0)
        v8 = v25;
      else
        v8 = (char *)&v24 + 9;
      if ((_QWORD)v24 && (BYTE8(v24) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v24 + 40))();
      v22 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v23);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v21 + 1) = v10;
      }
      else
      {
        v26 = v22;
        re::TypeBuilder::beginListType((uint64_t)&v24, v23, 1, 0x28uLL, 8uLL, &v26);
        re::TypeBuilder::setConstructor((uint64_t)&v24, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v24, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v24, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v24, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v24, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v24, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v24, v11);
      }
      xmmword_25411A580 = v21;
      re::StringID::destroyString((re::StringID *)v23);
    }
  }
}

void re::internal::defaultConstruct<re::DeformationStackDefinition>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
}

uint64_t re::internal::defaultDestruct<re::DeformationStackDefinition>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<re::DeformationDefinition>::deinit(a3);
}

uint64_t re::internal::defaultConstructV2<re::DeformationStackDefinition>(uint64_t result)
{
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t re::introspect_DeformationStackDefinition(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DeformationStackDefinition", (uint64_t (*)(re::internal *))re::allocInfo_DeformationStackDefinition, (re::IntrospectionBase *(*)(void))re::initInfo_DeformationStackDefinition, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DeformationStackDefinition>, this);
}

_QWORD *re::IntrospectionDynamicArray<re::DeformationDefinition>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::DeformationDefinition>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::DeformationDefinition>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::DeformationDefinition>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::DeformationDefinition>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::DeformationDefinition>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::DeformationDefinition>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::DeformationDefinition>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::DeformationDefinition>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::DeformationDefinition>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::DeformationDefinition>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::DeformationDefinition>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::DeformationDefinition>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10[0] = 0;
  v10[1] = (uint64_t)&str_110;
  v12 = 0;
  v13 = 0;
  v11 = 0;
  re::DynamicArray<re::DeformationDefinition>::add(this, v10);
  if (v11)
  {
    if (v12)
    {
      (*(void (**)(void))(*(_QWORD *)v11 + 40))();
      v12 = 0;
      v13 = 0;
    }
    v11 = 0;
  }
  re::StringID::destroyString((re::StringID *)v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 40 * *((_QWORD *)this + 2) - 40);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::DeformationDefinition>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::DeformationDefinition>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 40 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 40 * a3;
}

