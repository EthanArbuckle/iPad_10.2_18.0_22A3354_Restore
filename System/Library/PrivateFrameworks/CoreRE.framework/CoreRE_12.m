double re::ecs2::ComponentType<re::ecs2::LatencyEventsComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::LatencyEventsComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::LatencyEventsComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::LatencyEventsComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ComponentType<re::ecs2::LatencyEventsComponent>::doMakeComponent(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::LatencyEventsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::LatencyEventsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 48, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED492C0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *a1 = v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::LatencyEventsComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED54A90;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::LatencyEventsComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254109588);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254109588))
  {
    qword_254109580 = re::ecs2::introspect_LatencyEventsComponent(0);
    __cxa_guard_release(&qword_254109588);
  }
  return qword_254109580;
}

__n128 re::ecs2::ComponentType<re::ecs2::LatencyEventsComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::LatencyEventsComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::LatencyEventsComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED54A20;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::LatencyEventsComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>,re::Slice<re::ecs2::LatencyEventsComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>*,re::Slice<re::ecs2::LatencyEventsComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>,re::Slice<re::ecs2::LatencyEventsComponent*>>::Subscription const&,re::Slice<re::ecs2::LatencyEventsComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::LatencyEventsComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>,re::Slice<re::ecs2::LatencyEventsComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>*,re::Slice<re::ecs2::LatencyEventsComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>,re::Slice<re::ecs2::LatencyEventsComponent*>>::Subscription const&,re::Slice<re::ecs2::LatencyEventsComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::LatencyEventsComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>,re::Slice<re::ecs2::LatencyEventsComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>*,re::Slice<re::ecs2::LatencyEventsComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>,re::Slice<re::ecs2::LatencyEventsComponent*>>::Subscription const&,re::Slice<re::ecs2::LatencyEventsComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::LatencyEventsComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>,re::Slice<re::ecs2::LatencyEventsComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>*,re::Slice<re::ecs2::LatencyEventsComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>,re::Slice<re::ecs2::LatencyEventsComponent*>>::Subscription const&,re::Slice<re::ecs2::LatencyEventsComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::LatencyEventsComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>,re::Slice<re::ecs2::LatencyEventsComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>*,re::Slice<re::ecs2::LatencyEventsComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>,re::Slice<re::ecs2::LatencyEventsComponent*>>::Subscription const&,re::Slice<re::ecs2::LatencyEventsComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::LatencyEventsComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>,re::Slice<re::ecs2::LatencyEventsComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>*,re::Slice<re::ecs2::LatencyEventsComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>,re::Slice<re::ecs2::LatencyEventsComponent*>>::Subscription const&,re::Slice<re::ecs2::LatencyEventsComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::LatencyEventsComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>,re::Slice<re::ecs2::LatencyEventsComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>*,re::Slice<re::ecs2::LatencyEventsComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>,re::Slice<re::ecs2::LatencyEventsComponent*>>::Subscription const&,re::Slice<re::ecs2::LatencyEventsComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::LatencyEventsComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>,re::Slice<re::ecs2::LatencyEventsComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>*,re::Slice<re::ecs2::LatencyEventsComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>,re::Slice<re::ecs2::LatencyEventsComponent*>>::Subscription const&,re::Slice<re::ecs2::LatencyEventsComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED54A90;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::LatencyEventsComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::LatencyEventsComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::LatencyEventsComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::LatencyEventsComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>,re::Slice<re::ecs2::LatencyEventsComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>*,re::Slice<re::ecs2::LatencyEventsComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LatencyEventsComponent>,re::Slice<re::ecs2::LatencyEventsComponent*>>::Subscription const&,re::Slice<re::ecs2::LatencyEventsComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::RenderCallbacksComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::RenderCallbacksComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::RenderCallbacksComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::RenderCallbacksComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

re::ecs2::RenderCallbacksComponent *re::ecs2::ComponentType<re::ecs2::RenderCallbacksComponent>::doMakeComponent@<X0>(re::ecs2::RenderCallbacksComponent **a1@<X8>)
{
  re::ecs2::RenderCallbacksComponent *v2;
  re::ecs2::RenderCallbacksComponent *result;

  v2 = (re::ecs2::RenderCallbacksComponent *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::RenderCallbacksComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType + 7)
                                                                                                + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::RenderCallbacksComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 152, 0);
  result = re::ecs2::RenderCallbacksComponent::RenderCallbacksComponent(v2);
  *a1 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::RenderCallbacksComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED54BA8;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::RenderCallbacksComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254109598);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254109598))
  {
    qword_254109590 = re::ecs2::introspect_RenderCallbacksComponent(0);
    __cxa_guard_release(&qword_254109598);
  }
  return qword_254109590;
}

__n128 re::ecs2::ComponentType<re::ecs2::RenderCallbacksComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::RenderCallbacksComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::RenderCallbacksComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED54B38;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::RenderCallbacksComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>,re::Slice<re::ecs2::RenderCallbacksComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>*,re::Slice<re::ecs2::RenderCallbacksComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>,re::Slice<re::ecs2::RenderCallbacksComponent*>>::Subscription const&,re::Slice<re::ecs2::RenderCallbacksComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::RenderCallbacksComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>,re::Slice<re::ecs2::RenderCallbacksComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>*,re::Slice<re::ecs2::RenderCallbacksComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>,re::Slice<re::ecs2::RenderCallbacksComponent*>>::Subscription const&,re::Slice<re::ecs2::RenderCallbacksComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::RenderCallbacksComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>,re::Slice<re::ecs2::RenderCallbacksComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>*,re::Slice<re::ecs2::RenderCallbacksComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>,re::Slice<re::ecs2::RenderCallbacksComponent*>>::Subscription const&,re::Slice<re::ecs2::RenderCallbacksComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::RenderCallbacksComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>,re::Slice<re::ecs2::RenderCallbacksComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>*,re::Slice<re::ecs2::RenderCallbacksComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>,re::Slice<re::ecs2::RenderCallbacksComponent*>>::Subscription const&,re::Slice<re::ecs2::RenderCallbacksComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::RenderCallbacksComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>,re::Slice<re::ecs2::RenderCallbacksComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>*,re::Slice<re::ecs2::RenderCallbacksComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>,re::Slice<re::ecs2::RenderCallbacksComponent*>>::Subscription const&,re::Slice<re::ecs2::RenderCallbacksComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::RenderCallbacksComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>,re::Slice<re::ecs2::RenderCallbacksComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>*,re::Slice<re::ecs2::RenderCallbacksComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>,re::Slice<re::ecs2::RenderCallbacksComponent*>>::Subscription const&,re::Slice<re::ecs2::RenderCallbacksComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::RenderCallbacksComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>,re::Slice<re::ecs2::RenderCallbacksComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>*,re::Slice<re::ecs2::RenderCallbacksComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>,re::Slice<re::ecs2::RenderCallbacksComponent*>>::Subscription const&,re::Slice<re::ecs2::RenderCallbacksComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::RenderCallbacksComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>,re::Slice<re::ecs2::RenderCallbacksComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>*,re::Slice<re::ecs2::RenderCallbacksComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>,re::Slice<re::ecs2::RenderCallbacksComponent*>>::Subscription const&,re::Slice<re::ecs2::RenderCallbacksComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED54BA8;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::RenderCallbacksComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::RenderCallbacksComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::RenderCallbacksComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::RenderCallbacksComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>,re::Slice<re::ecs2::RenderCallbacksComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>*,re::Slice<re::ecs2::RenderCallbacksComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderCallbacksComponent>,re::Slice<re::ecs2::RenderCallbacksComponent*>>::Subscription const&,re::Slice<re::ecs2::RenderCallbacksComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::TintComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::TintComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::TintComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::TintComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ComponentType<re::ecs2::TintComponent>::doMakeComponent(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::TintComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::TintComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 64, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57808;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 48) = 0;
  *a1 = v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::TintComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED54CC0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::TintComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2541095A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2541095A8))
  {
    qword_2541095A0 = re::ecs2::introspect_TintComponent(0);
    __cxa_guard_release(&qword_2541095A8);
  }
  return qword_2541095A0;
}

__n128 re::ecs2::ComponentType<re::ecs2::TintComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::TintComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::TintComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED54C50;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::TintComponent::~TintComponent(re::ecs2::TintComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::TintComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::TintComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::TintComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::TintComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::TintComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::TintComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>,re::Slice<re::ecs2::TintComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>*,re::Slice<re::ecs2::TintComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>,re::Slice<re::ecs2::TintComponent*>>::Subscription const&,re::Slice<re::ecs2::TintComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::TintComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>,re::Slice<re::ecs2::TintComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>*,re::Slice<re::ecs2::TintComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>,re::Slice<re::ecs2::TintComponent*>>::Subscription const&,re::Slice<re::ecs2::TintComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::TintComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>,re::Slice<re::ecs2::TintComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>*,re::Slice<re::ecs2::TintComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>,re::Slice<re::ecs2::TintComponent*>>::Subscription const&,re::Slice<re::ecs2::TintComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::TintComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>,re::Slice<re::ecs2::TintComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>*,re::Slice<re::ecs2::TintComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>,re::Slice<re::ecs2::TintComponent*>>::Subscription const&,re::Slice<re::ecs2::TintComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::TintComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>,re::Slice<re::ecs2::TintComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>*,re::Slice<re::ecs2::TintComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>,re::Slice<re::ecs2::TintComponent*>>::Subscription const&,re::Slice<re::ecs2::TintComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::TintComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>,re::Slice<re::ecs2::TintComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>*,re::Slice<re::ecs2::TintComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>,re::Slice<re::ecs2::TintComponent*>>::Subscription const&,re::Slice<re::ecs2::TintComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::TintComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>,re::Slice<re::ecs2::TintComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>*,re::Slice<re::ecs2::TintComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>,re::Slice<re::ecs2::TintComponent*>>::Subscription const&,re::Slice<re::ecs2::TintComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::TintComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>,re::Slice<re::ecs2::TintComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>*,re::Slice<re::ecs2::TintComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>,re::Slice<re::ecs2::TintComponent*>>::Subscription const&,re::Slice<re::ecs2::TintComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED54CC0;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::TintComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::TintComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::TintComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::TintComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>,re::Slice<re::ecs2::TintComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>*,re::Slice<re::ecs2::TintComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TintComponent>,re::Slice<re::ecs2::TintComponent*>>::Subscription const&,re::Slice<re::ecs2::TintComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::ProbeClusterExclusionComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::ProbeClusterExclusionComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::ProbeClusterExclusionComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::ProbeClusterExclusionComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ComponentType<re::ecs2::ProbeClusterExclusionComponent>::doMakeComponent(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::ProbeClusterExclusionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::ProbeClusterExclusionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 32, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED59340;
  *a1 = v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ProbeClusterExclusionComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED54DD8;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ProbeClusterExclusionComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2541095B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2541095B8))
  {
    qword_2541095B0 = re::ecs2::introspect_ProbeClusterExclusionComponent(0);
    __cxa_guard_release(&qword_2541095B8);
  }
  return qword_2541095B0;
}

__n128 re::ecs2::ComponentType<re::ecs2::ProbeClusterExclusionComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ProbeClusterExclusionComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::ProbeClusterExclusionComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED54D68;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::ProbeClusterExclusionComponent::~ProbeClusterExclusionComponent(re::ecs2::ProbeClusterExclusionComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ProbeClusterExclusionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::ProbeClusterExclusionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ProbeClusterExclusionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::ProbeClusterExclusionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::ProbeClusterExclusionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ProbeClusterExclusionComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>*,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>>::Subscription const&,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ProbeClusterExclusionComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>*,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>>::Subscription const&,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ProbeClusterExclusionComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>*,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>>::Subscription const&,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ProbeClusterExclusionComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>*,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>>::Subscription const&,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ProbeClusterExclusionComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>*,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>>::Subscription const&,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ProbeClusterExclusionComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>*,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>>::Subscription const&,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ProbeClusterExclusionComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>*,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>>::Subscription const&,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ProbeClusterExclusionComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>*,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>>::Subscription const&,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED54DD8;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ProbeClusterExclusionComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ProbeClusterExclusionComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ProbeClusterExclusionComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ProbeClusterExclusionComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>*,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ProbeClusterExclusionComponent>,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>>::Subscription const&,re::Slice<re::ecs2::ProbeClusterExclusionComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::LinkedTLEComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::LinkedTLEComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::LinkedTLEComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::LinkedTLEComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ComponentType<re::ecs2::LinkedTLEComponent>::doMakeComponent(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::LinkedTLEComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::LinkedTLEComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 32, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57688;
  *a1 = v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::LinkedTLEComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED54EF0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::LinkedTLEComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2541095C8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2541095C8))
  {
    qword_2541095C0 = re::ecs2::introspect_LinkedTLEComponent(0);
    __cxa_guard_release(&qword_2541095C8);
  }
  return qword_2541095C0;
}

__n128 re::ecs2::ComponentType<re::ecs2::LinkedTLEComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::LinkedTLEComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::LinkedTLEComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED54E80;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::LinkedTLEComponent::~LinkedTLEComponent(re::ecs2::LinkedTLEComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::LinkedTLEComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::LinkedTLEComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::LinkedTLEComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::LinkedTLEComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::LinkedTLEComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::LinkedTLEComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>,re::Slice<re::ecs2::LinkedTLEComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>*,re::Slice<re::ecs2::LinkedTLEComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>,re::Slice<re::ecs2::LinkedTLEComponent*>>::Subscription const&,re::Slice<re::ecs2::LinkedTLEComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::LinkedTLEComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>,re::Slice<re::ecs2::LinkedTLEComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>*,re::Slice<re::ecs2::LinkedTLEComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>,re::Slice<re::ecs2::LinkedTLEComponent*>>::Subscription const&,re::Slice<re::ecs2::LinkedTLEComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::LinkedTLEComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>,re::Slice<re::ecs2::LinkedTLEComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>*,re::Slice<re::ecs2::LinkedTLEComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>,re::Slice<re::ecs2::LinkedTLEComponent*>>::Subscription const&,re::Slice<re::ecs2::LinkedTLEComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::LinkedTLEComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>,re::Slice<re::ecs2::LinkedTLEComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>*,re::Slice<re::ecs2::LinkedTLEComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>,re::Slice<re::ecs2::LinkedTLEComponent*>>::Subscription const&,re::Slice<re::ecs2::LinkedTLEComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::LinkedTLEComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>,re::Slice<re::ecs2::LinkedTLEComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>*,re::Slice<re::ecs2::LinkedTLEComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>,re::Slice<re::ecs2::LinkedTLEComponent*>>::Subscription const&,re::Slice<re::ecs2::LinkedTLEComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::LinkedTLEComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>,re::Slice<re::ecs2::LinkedTLEComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>*,re::Slice<re::ecs2::LinkedTLEComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>,re::Slice<re::ecs2::LinkedTLEComponent*>>::Subscription const&,re::Slice<re::ecs2::LinkedTLEComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::LinkedTLEComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>,re::Slice<re::ecs2::LinkedTLEComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>*,re::Slice<re::ecs2::LinkedTLEComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>,re::Slice<re::ecs2::LinkedTLEComponent*>>::Subscription const&,re::Slice<re::ecs2::LinkedTLEComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::LinkedTLEComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>,re::Slice<re::ecs2::LinkedTLEComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>*,re::Slice<re::ecs2::LinkedTLEComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>,re::Slice<re::ecs2::LinkedTLEComponent*>>::Subscription const&,re::Slice<re::ecs2::LinkedTLEComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED54EF0;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::LinkedTLEComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::LinkedTLEComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::LinkedTLEComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::LinkedTLEComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>,re::Slice<re::ecs2::LinkedTLEComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>*,re::Slice<re::ecs2::LinkedTLEComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::LinkedTLEComponent>,re::Slice<re::ecs2::LinkedTLEComponent*>>::Subscription const&,re::Slice<re::ecs2::LinkedTLEComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::AssetStateComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::AssetStateComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::AssetStateComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::AssetStateComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ComponentType<re::ecs2::AssetStateComponent>::doMakeComponent(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::AssetStateComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                             + 7)
                                                          + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AssetStateComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 56, 0);
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_QWORD *)(v2 + 48) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED2BCB0;
  *a1 = v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AssetStateComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED55008;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

__guard re::ecs2::ComponentType<re::ecs2::AssetStateComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;
  __guard *v1;
  int v3;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      re::introspect<re::ecs2::AssetStateComponent>(void)::info = (_UNKNOWN *)re::ecs2::introspect_AssetStateComponent(0);
    }
  }
  return v1[20];
}

__n128 re::ecs2::ComponentType<re::ecs2::AssetStateComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AssetStateComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::AssetStateComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED54F98;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AssetStateComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>,re::Slice<re::ecs2::AssetStateComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>*,re::Slice<re::ecs2::AssetStateComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>,re::Slice<re::ecs2::AssetStateComponent*>>::Subscription const&,re::Slice<re::ecs2::AssetStateComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AssetStateComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>,re::Slice<re::ecs2::AssetStateComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>*,re::Slice<re::ecs2::AssetStateComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>,re::Slice<re::ecs2::AssetStateComponent*>>::Subscription const&,re::Slice<re::ecs2::AssetStateComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AssetStateComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>,re::Slice<re::ecs2::AssetStateComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>*,re::Slice<re::ecs2::AssetStateComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>,re::Slice<re::ecs2::AssetStateComponent*>>::Subscription const&,re::Slice<re::ecs2::AssetStateComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AssetStateComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>,re::Slice<re::ecs2::AssetStateComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>*,re::Slice<re::ecs2::AssetStateComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>,re::Slice<re::ecs2::AssetStateComponent*>>::Subscription const&,re::Slice<re::ecs2::AssetStateComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AssetStateComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>,re::Slice<re::ecs2::AssetStateComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>*,re::Slice<re::ecs2::AssetStateComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>,re::Slice<re::ecs2::AssetStateComponent*>>::Subscription const&,re::Slice<re::ecs2::AssetStateComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AssetStateComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>,re::Slice<re::ecs2::AssetStateComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>*,re::Slice<re::ecs2::AssetStateComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>,re::Slice<re::ecs2::AssetStateComponent*>>::Subscription const&,re::Slice<re::ecs2::AssetStateComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AssetStateComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>,re::Slice<re::ecs2::AssetStateComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>*,re::Slice<re::ecs2::AssetStateComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>,re::Slice<re::ecs2::AssetStateComponent*>>::Subscription const&,re::Slice<re::ecs2::AssetStateComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AssetStateComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>,re::Slice<re::ecs2::AssetStateComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>*,re::Slice<re::ecs2::AssetStateComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>,re::Slice<re::ecs2::AssetStateComponent*>>::Subscription const&,re::Slice<re::ecs2::AssetStateComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED55008;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AssetStateComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AssetStateComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AssetStateComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AssetStateComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>,re::Slice<re::ecs2::AssetStateComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>*,re::Slice<re::ecs2::AssetStateComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetStateComponent>,re::Slice<re::ecs2::AssetStateComponent*>>::Subscription const&,re::Slice<re::ecs2::AssetStateComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::AssetPreloadComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::AssetPreloadComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::AssetPreloadComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::AssetPreloadComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ComponentType<re::ecs2::AssetPreloadComponent>::doMakeComponent(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::AssetPreloadComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                             + 7)
                                                          + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AssetPreloadComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 56, 0);
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_QWORD *)(v2 + 48) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED2BC30;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *a1 = v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AssetPreloadComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED55120;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AssetPreloadComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2541095D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2541095D8))
  {
    qword_2541095D0 = re::ecs2::introspect_AssetPreloadComponent(0);
    __cxa_guard_release(&qword_2541095D8);
  }
  return qword_2541095D0;
}

__n128 re::ecs2::ComponentType<re::ecs2::AssetPreloadComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AssetPreloadComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::AssetPreloadComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED550B0;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>::registerCallbacks(_DWORD *a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AssetPreloadComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Slice<re::ecs2::AssetPreloadComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::Subscription const&,re::Slice<re::ecs2::AssetPreloadComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 32, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AssetPreloadComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Slice<re::ecs2::AssetPreloadComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::Subscription const&,re::Slice<re::ecs2::AssetPreloadComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 98, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AssetPreloadComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Slice<re::ecs2::AssetPreloadComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::Subscription const&,re::Slice<re::ecs2::AssetPreloadComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 54, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AssetPreloadComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Slice<re::ecs2::AssetPreloadComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::Subscription const&,re::Slice<re::ecs2::AssetPreloadComponent*>&&)#1}::__invoke;
    return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 76, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AssetPreloadComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Slice<re::ecs2::AssetPreloadComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::Subscription const&,re::Slice<re::ecs2::AssetPreloadComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AssetPreloadComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Slice<re::ecs2::AssetPreloadComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::Subscription const&,re::Slice<re::ecs2::AssetPreloadComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AssetPreloadComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Slice<re::ecs2::AssetPreloadComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::Subscription const&,re::Slice<re::ecs2::AssetPreloadComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AssetPreloadComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Slice<re::ecs2::AssetPreloadComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::Subscription const&,re::Slice<re::ecs2::AssetPreloadComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED55120;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AssetPreloadComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AssetPreloadComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AssetPreloadComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AssetPreloadComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Slice<re::ecs2::AssetPreloadComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::Subscription const&,re::Slice<re::ecs2::AssetPreloadComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionContentComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionContentComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionContentComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionContentComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionContentComponent>::doMakeComponent(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionContentComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionContentComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 32, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED45C70;
  *a1 = v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionContentComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED55238;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionContentComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2541095E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2541095E8))
  {
    qword_2541095E0 = re::ecs2::introspect_ImageBasedReflectionContentComponent(0);
    __cxa_guard_release(&qword_2541095E8);
  }
  return qword_2541095E0;
}

__n128 re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionContentComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionContentComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionContentComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED551C8;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ImageBasedReflectionContentComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>*,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>>::Subscription const&,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ImageBasedReflectionContentComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>*,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>>::Subscription const&,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ImageBasedReflectionContentComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>*,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>>::Subscription const&,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ImageBasedReflectionContentComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>*,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>>::Subscription const&,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ImageBasedReflectionContentComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>*,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>>::Subscription const&,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ImageBasedReflectionContentComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>*,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>>::Subscription const&,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ImageBasedReflectionContentComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>*,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>>::Subscription const&,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ImageBasedReflectionContentComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>*,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>>::Subscription const&,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED55238;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ImageBasedReflectionContentComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ImageBasedReflectionContentComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ImageBasedReflectionContentComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ImageBasedReflectionContentComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>*,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionContentComponent>,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>>::Subscription const&,re::Slice<re::ecs2::ImageBasedReflectionContentComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionRootComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionRootComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionRootComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionRootComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionRootComponent>::doMakeComponent(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 32, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED48710;
  *a1 = v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionRootComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED55350;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionRootComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2541095F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2541095F8))
  {
    qword_2541095F0 = re::ecs2::introspect_ImageBasedReflectionRootComponent(0);
    __cxa_guard_release(&qword_2541095F8);
  }
  return qword_2541095F0;
}

__n128 re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionRootComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionRootComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionRootComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED552E0;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ImageBasedReflectionRootComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>*,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>>::Subscription const&,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ImageBasedReflectionRootComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>*,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>>::Subscription const&,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ImageBasedReflectionRootComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>*,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>>::Subscription const&,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ImageBasedReflectionRootComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>*,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>>::Subscription const&,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ImageBasedReflectionRootComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>*,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>>::Subscription const&,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ImageBasedReflectionRootComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>*,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>>::Subscription const&,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ImageBasedReflectionRootComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>*,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>>::Subscription const&,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ImageBasedReflectionRootComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>*,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>>::Subscription const&,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED55350;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ImageBasedReflectionRootComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ImageBasedReflectionRootComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ImageBasedReflectionRootComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ImageBasedReflectionRootComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>*,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionRootComponent>,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>>::Subscription const&,re::Slice<re::ecs2::ImageBasedReflectionRootComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionReceiverComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionReceiverComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionReceiverComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionReceiverComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

double re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionReceiverComponent>::doMakeComponent@<D0>(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;
  double result;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 112, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57108;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_DWORD *)(v3 + 96) = 0;
  *a1 = v3;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionReceiverComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED55468;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionReceiverComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254109608);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254109608))
  {
    qword_254109600 = re::ecs2::introspect_ImageBasedReflectionReceiverComponent(0);
    __cxa_guard_release(&qword_254109608);
  }
  return qword_254109600;
}

__n128 re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionReceiverComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionReceiverComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::ImageBasedReflectionReceiverComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED553F8;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::ImageBasedReflectionReceiverComponent::~ImageBasedReflectionReceiverComponent(re::ecs2::ImageBasedReflectionReceiverComponent *this)
{
  re::ecs2::ImageBasedReflectionReceiverComponent::~ImageBasedReflectionReceiverComponent(this);
  JUMPOUT(0x2276933B8);
}

{
  char *v2;

  *(_QWORD *)this = &off_24ED57108;
  v2 = (char *)this + 32;
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)this + 72);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ImageBasedReflectionReceiverComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>*,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>>::Subscription const&,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ImageBasedReflectionReceiverComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>*,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>>::Subscription const&,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ImageBasedReflectionReceiverComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>*,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>>::Subscription const&,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ImageBasedReflectionReceiverComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>*,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>>::Subscription const&,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ImageBasedReflectionReceiverComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>*,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>>::Subscription const&,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ImageBasedReflectionReceiverComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>*,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>>::Subscription const&,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ImageBasedReflectionReceiverComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>*,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>>::Subscription const&,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ImageBasedReflectionReceiverComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>*,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>>::Subscription const&,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED55468;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ImageBasedReflectionReceiverComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ImageBasedReflectionReceiverComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ImageBasedReflectionReceiverComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ImageBasedReflectionReceiverComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>*,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImageBasedReflectionReceiverComponent>,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>>::Subscription const&,re::Slice<re::ecs2::ImageBasedReflectionReceiverComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::WrapComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::WrapComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::WrapComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::WrapComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t *re::ecs2::ComponentType<re::ecs2::WrapComponent>::doMakeComponent@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  re *inited;
  uint64_t *result;

  v2 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::WrapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                             + 7)
                                                          + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::WrapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 88, 0);
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_QWORD *)(v2 + 80) = 0;
  *(_OWORD *)(v2 + 32) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED59418;
  inited = (re *)objc_initWeak((id *)(v2 + 32), 0);
  *(_QWORD *)(v2 + 40) = 0;
  result = re::globalAllocators(inited);
  *(_QWORD *)(v2 + 72) = result[2];
  *(_QWORD *)(v2 + 80) = 0;
  *a1 = v2;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::WrapComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED55580;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::WrapComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254109618);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254109618))
  {
    qword_254109610 = re::ecs2::introspect_WrapComponent(0);
    __cxa_guard_release(&qword_254109618);
  }
  return qword_254109610;
}

__n128 re::ecs2::ComponentType<re::ecs2::WrapComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::WrapComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::WrapComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED55510;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::WrapComponent::~WrapComponent(id *this)
{
  *this = &off_24ED59418;
  re::FramePersistentPtr<re::ecs2::WrapComponent::WrapDeformerInputs,re::FrameManager>::~FramePersistentPtr(this + 4);
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
}

{
  *this = &off_24ED59418;
  re::FramePersistentPtr<re::ecs2::WrapComponent::WrapDeformerInputs,re::FrameManager>::~FramePersistentPtr(this + 4);
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::WrapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::WrapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::WrapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::WrapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::WrapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

id *re::FramePersistentPtr<re::ecs2::WrapComponent::WrapDeformerInputs,re::FrameManager>::~FramePersistentPtr(id *a1)
{
  re *inited;
  id location;
  _QWORD v5[3];
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  inited = (re *)objc_initWeak(&location, 0);
  memset(v5, 0, sizeof(v5));
  v6 = re::globalAllocators(inited)[2];
  v7 = 0;
  re::FramePersistentPtr<re::ecs2::WrapComponent::WrapDeformerInputs,re::FrameManager>::reset(a1, &location, 0, (uint64_t)v5);
  if (v7)
  {
    (*(void (**)(_QWORD *))*v7)(v7);
    if (v7 != v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  }
  objc_destroyWeak(&location);
  location = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 2));
  objc_destroyWeak(a1);
  *a1 = 0;
  return a1;
}

uint64_t re::FramePersistentPtr<re::ecs2::WrapComponent::WrapDeformerInputs,re::FrameManager>::reset(id *location, id *a2, void *a3, uint64_t a4)
{
  _QWORD *WeakRetained;
  _QWORD *v9;
  re *v10;
  uint64_t *v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD v18[3];
  uint64_t v19;
  re *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (location[1])
  {
    WeakRetained = objc_loadWeakRetained(location);
    if (WeakRetained)
    {
      v9 = WeakRetained;

      if (!location[6])
      {
        v16 = re::globalAllocators(v10)[2];
        v18[0] = &off_24ED593C0;
        v19 = v16;
        v20 = (re *)v18;
        re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)(location + 2), (uint64_t)v18);
        v10 = v20;
        if (v20)
        {
          v10 = (re *)(**(uint64_t (***)(re *))v20)(v20);
          if (v20 != (re *)v18)
            v10 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
        }
      }
      v11 = re::globalAllocators(v10);
      v12 = v9[2] & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)v9[1] << 60);
      v13 = location[1];
      v14 = re::PerFrameAllocatorManager::perFrameAllocator(v11[6], v12);
      (*(void (**)(uint64_t, id, id *))(*(_QWORD *)v14 + 16))(v14, v13, location + 2);
    }
    else
    {
      v15 = location[6];
      if (v15)
      {
        v18[0] = location[1];
        (*(void (**)(id, _QWORD *))(*(_QWORD *)v15 + 16))(v15, v18);
      }
      else
      {
        re::internal::destroyPersistent<re::ecs2::WrapComponent::WrapDeformerInputs>((re *)"reset", 161, location[1]);
      }
    }
  }
  re::ArcWeakPtr<re::VideoHistogram>::operator=(location, a2);
  location[1] = a3;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(location + 2), a4);
}

re *re::internal::destroyPersistent<re::ecs2::WrapComponent::WrapDeformerInputs>(re *result, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    if (*a3)
    {
      if (a3[1])
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 40))(*a3, a3[2]);
        a3[1] = 0;
        a3[2] = 0;
      }
      *a3 = 0;
    }
    return (re *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

void re::internal::Callable<re::FramePersistentPtr<re::ecs2::WrapComponent::WrapDeformerInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::WrapComponent::WrapDeformerInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

re *re::internal::Callable<re::FramePersistentPtr<re::ecs2::WrapComponent::WrapDeformerInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::WrapComponent::WrapDeformerInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::operator()(uint64_t a1, _QWORD **a2)
{
  return re::internal::destroyPersistent<re::ecs2::WrapComponent::WrapDeformerInputs>((re *)"operator()", 149, *a2);
}

_QWORD *re::internal::Callable<re::FramePersistentPtr<re::ecs2::WrapComponent::WrapDeformerInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::WrapComponent::WrapDeformerInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED593C0;
  return result;
}

_QWORD *re::internal::Callable<re::FramePersistentPtr<re::ecs2::WrapComponent::WrapDeformerInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::WrapComponent::WrapDeformerInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED593C0;
  return result;
}

uint64_t re::internal::Callable<re::FramePersistentPtr<re::ecs2::WrapComponent::WrapDeformerInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::WrapComponent::WrapDeformerInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::size()
{
  return 16;
}

void re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::WrapComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>,re::Slice<re::ecs2::WrapComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>*,re::Slice<re::ecs2::WrapComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>,re::Slice<re::ecs2::WrapComponent*>>::Subscription const&,re::Slice<re::ecs2::WrapComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::WrapComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>,re::Slice<re::ecs2::WrapComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>*,re::Slice<re::ecs2::WrapComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>,re::Slice<re::ecs2::WrapComponent*>>::Subscription const&,re::Slice<re::ecs2::WrapComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::WrapComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>,re::Slice<re::ecs2::WrapComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>*,re::Slice<re::ecs2::WrapComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>,re::Slice<re::ecs2::WrapComponent*>>::Subscription const&,re::Slice<re::ecs2::WrapComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::WrapComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>,re::Slice<re::ecs2::WrapComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>*,re::Slice<re::ecs2::WrapComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>,re::Slice<re::ecs2::WrapComponent*>>::Subscription const&,re::Slice<re::ecs2::WrapComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::WrapComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>,re::Slice<re::ecs2::WrapComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>*,re::Slice<re::ecs2::WrapComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>,re::Slice<re::ecs2::WrapComponent*>>::Subscription const&,re::Slice<re::ecs2::WrapComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::WrapComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>,re::Slice<re::ecs2::WrapComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>*,re::Slice<re::ecs2::WrapComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>,re::Slice<re::ecs2::WrapComponent*>>::Subscription const&,re::Slice<re::ecs2::WrapComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::WrapComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>,re::Slice<re::ecs2::WrapComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>*,re::Slice<re::ecs2::WrapComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>,re::Slice<re::ecs2::WrapComponent*>>::Subscription const&,re::Slice<re::ecs2::WrapComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::WrapComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>,re::Slice<re::ecs2::WrapComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>*,re::Slice<re::ecs2::WrapComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>,re::Slice<re::ecs2::WrapComponent*>>::Subscription const&,re::Slice<re::ecs2::WrapComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED55580;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::WrapComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::WrapComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::WrapComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::WrapComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>,re::Slice<re::ecs2::WrapComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>*,re::Slice<re::ecs2::WrapComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::WrapComponent>,re::Slice<re::ecs2::WrapComponent*>>::Subscription const&,re::Slice<re::ecs2::WrapComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::VFXEmitterComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::VFXEmitterComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::VFXEmitterComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::VFXEmitterComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentType<re::ecs2::VFXEmitterComponent>::doMakeComponent@<X0>(uint64_t *a1@<X8>)
{
  re::ecs2::VFXEmitterComponent *v2;
  uint64_t result;

  v2 = (re::ecs2::VFXEmitterComponent *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                                              + 7)
                                                                                           + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 2272, 0);
  result = re::ecs2::VFXEmitterComponent::VFXEmitterComponent(v2);
  *a1 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::VFXEmitterComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED55698;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::VFXEmitterComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254109628);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254109628))
  {
    qword_254109620 = re::ecs2::introspect_VFXEmitterComponent(0);
    __cxa_guard_release(&qword_254109628);
  }
  return qword_254109620;
}

__n128 re::ecs2::ComponentType<re::ecs2::VFXEmitterComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::VFXEmitterComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::VFXEmitterComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED55628;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::VFXEmitterComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>,re::Slice<re::ecs2::VFXEmitterComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>*,re::Slice<re::ecs2::VFXEmitterComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>,re::Slice<re::ecs2::VFXEmitterComponent*>>::Subscription const&,re::Slice<re::ecs2::VFXEmitterComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::VFXEmitterComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>,re::Slice<re::ecs2::VFXEmitterComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>*,re::Slice<re::ecs2::VFXEmitterComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>,re::Slice<re::ecs2::VFXEmitterComponent*>>::Subscription const&,re::Slice<re::ecs2::VFXEmitterComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::VFXEmitterComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>,re::Slice<re::ecs2::VFXEmitterComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>*,re::Slice<re::ecs2::VFXEmitterComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>,re::Slice<re::ecs2::VFXEmitterComponent*>>::Subscription const&,re::Slice<re::ecs2::VFXEmitterComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::VFXEmitterComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>,re::Slice<re::ecs2::VFXEmitterComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>*,re::Slice<re::ecs2::VFXEmitterComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>,re::Slice<re::ecs2::VFXEmitterComponent*>>::Subscription const&,re::Slice<re::ecs2::VFXEmitterComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::VFXEmitterComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>,re::Slice<re::ecs2::VFXEmitterComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>*,re::Slice<re::ecs2::VFXEmitterComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>,re::Slice<re::ecs2::VFXEmitterComponent*>>::Subscription const&,re::Slice<re::ecs2::VFXEmitterComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::VFXEmitterComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>,re::Slice<re::ecs2::VFXEmitterComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>*,re::Slice<re::ecs2::VFXEmitterComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>,re::Slice<re::ecs2::VFXEmitterComponent*>>::Subscription const&,re::Slice<re::ecs2::VFXEmitterComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::VFXEmitterComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>,re::Slice<re::ecs2::VFXEmitterComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>*,re::Slice<re::ecs2::VFXEmitterComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>,re::Slice<re::ecs2::VFXEmitterComponent*>>::Subscription const&,re::Slice<re::ecs2::VFXEmitterComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::VFXEmitterComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>,re::Slice<re::ecs2::VFXEmitterComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>*,re::Slice<re::ecs2::VFXEmitterComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>,re::Slice<re::ecs2::VFXEmitterComponent*>>::Subscription const&,re::Slice<re::ecs2::VFXEmitterComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED55698;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::VFXEmitterComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::VFXEmitterComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::VFXEmitterComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::VFXEmitterComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>,re::Slice<re::ecs2::VFXEmitterComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>*,re::Slice<re::ecs2::VFXEmitterComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VFXEmitterComponent>,re::Slice<re::ecs2::VFXEmitterComponent*>>::Subscription const&,re::Slice<re::ecs2::VFXEmitterComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::VirtualEnvironmentProbeComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::VirtualEnvironmentProbeComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::VirtualEnvironmentProbeComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::VirtualEnvironmentProbeComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ComponentType<re::ecs2::VirtualEnvironmentProbeComponent>::doMakeComponent(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                             + 7)
                                                          + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 72, 0);
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_QWORD *)(v2 + 64) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED480A8;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 56) = 0;
  *a1 = v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::VirtualEnvironmentProbeComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED557B0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::VirtualEnvironmentProbeComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254109638);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254109638))
  {
    qword_254109630 = re::ecs2::introspect_VirtualEnvironmentProbeComponent(0);
    __cxa_guard_release(&qword_254109638);
  }
  return qword_254109630;
}

__n128 re::ecs2::ComponentType<re::ecs2::VirtualEnvironmentProbeComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::VirtualEnvironmentProbeComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::VirtualEnvironmentProbeComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED55740;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::VirtualEnvironmentProbeComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>*,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>>::Subscription const&,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::VirtualEnvironmentProbeComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>*,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>>::Subscription const&,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::VirtualEnvironmentProbeComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>*,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>>::Subscription const&,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::VirtualEnvironmentProbeComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>*,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>>::Subscription const&,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::VirtualEnvironmentProbeComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>*,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>>::Subscription const&,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::VirtualEnvironmentProbeComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>*,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>>::Subscription const&,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::VirtualEnvironmentProbeComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>*,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>>::Subscription const&,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::VirtualEnvironmentProbeComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>*,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>>::Subscription const&,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED557B0;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::VirtualEnvironmentProbeComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::VirtualEnvironmentProbeComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::VirtualEnvironmentProbeComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::VirtualEnvironmentProbeComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>*,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VirtualEnvironmentProbeComponent>,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>>::Subscription const&,re::Slice<re::ecs2::VirtualEnvironmentProbeComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::EnvironmentLightingConfigurationComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::EnvironmentLightingConfigurationComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::EnvironmentLightingConfigurationComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::EnvironmentLightingConfigurationComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ComponentType<re::ecs2::EnvironmentLightingConfigurationComponent>::doMakeComponent(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::EnvironmentLightingConfigurationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::EnvironmentLightingConfigurationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 32, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57508;
  *(_DWORD *)(v3 + 28) = 1065353216;
  *a1 = v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::EnvironmentLightingConfigurationComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED558C8;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::EnvironmentLightingConfigurationComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254109648);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254109648))
  {
    qword_254109640 = re::ecs2::introspect_EnvironmentLightingConfigurationComponent(0);
    __cxa_guard_release(&qword_254109648);
  }
  return qword_254109640;
}

__n128 re::ecs2::ComponentType<re::ecs2::EnvironmentLightingConfigurationComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::EnvironmentLightingConfigurationComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::EnvironmentLightingConfigurationComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED55858;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::EnvironmentLightingConfigurationComponent::~EnvironmentLightingConfigurationComponent(re::ecs2::EnvironmentLightingConfigurationComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::EnvironmentLightingConfigurationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::EnvironmentLightingConfigurationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::EnvironmentLightingConfigurationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::EnvironmentLightingConfigurationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::EnvironmentLightingConfigurationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::EnvironmentLightingConfigurationComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>*,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>>::Subscription const&,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::EnvironmentLightingConfigurationComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>*,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>>::Subscription const&,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::EnvironmentLightingConfigurationComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>*,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>>::Subscription const&,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::EnvironmentLightingConfigurationComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>*,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>>::Subscription const&,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::EnvironmentLightingConfigurationComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>*,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>>::Subscription const&,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::EnvironmentLightingConfigurationComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>*,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>>::Subscription const&,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::EnvironmentLightingConfigurationComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>*,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>>::Subscription const&,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::EnvironmentLightingConfigurationComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>*,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>>::Subscription const&,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED558C8;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::EnvironmentLightingConfigurationComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::EnvironmentLightingConfigurationComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::EnvironmentLightingConfigurationComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::EnvironmentLightingConfigurationComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>*,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::EnvironmentLightingConfigurationComponent>,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>>::Subscription const&,re::Slice<re::ecs2::EnvironmentLightingConfigurationComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::ShadowClusterRootComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::ShadowClusterRootComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::ShadowClusterRootComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::ShadowClusterRootComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

int32x4_t re::ecs2::ComponentType<re::ecs2::ShadowClusterRootComponent>::doMakeComponent@<Q0>(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;
  int32x4_t result;
  __int128 v5;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 64, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED56F88;
  result = vdupq_n_s32(0x7F800000u);
  *(_QWORD *)&v5 = 0x7F0000007FLL;
  *((_QWORD *)&v5 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v3 + 32) = result;
  *(_OWORD *)(v3 + 48) = v5;
  *a1 = v3;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ShadowClusterRootComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED559E0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ShadowClusterRootComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254109658);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254109658))
  {
    qword_254109650 = re::ecs2::introspect_ShadowClusterRootComponent(0);
    __cxa_guard_release(&qword_254109658);
  }
  return qword_254109650;
}

__n128 re::ecs2::ComponentType<re::ecs2::ShadowClusterRootComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ShadowClusterRootComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::ShadowClusterRootComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED55970;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::ShadowClusterRootComponent::~ShadowClusterRootComponent(re::ecs2::ShadowClusterRootComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ShadowClusterRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ShadowClusterRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::ShadowClusterRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::ShadowClusterRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ShadowClusterRootComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>,re::Slice<re::ecs2::ShadowClusterRootComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>*,re::Slice<re::ecs2::ShadowClusterRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>,re::Slice<re::ecs2::ShadowClusterRootComponent*>>::Subscription const&,re::Slice<re::ecs2::ShadowClusterRootComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ShadowClusterRootComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>,re::Slice<re::ecs2::ShadowClusterRootComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>*,re::Slice<re::ecs2::ShadowClusterRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>,re::Slice<re::ecs2::ShadowClusterRootComponent*>>::Subscription const&,re::Slice<re::ecs2::ShadowClusterRootComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ShadowClusterRootComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>,re::Slice<re::ecs2::ShadowClusterRootComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>*,re::Slice<re::ecs2::ShadowClusterRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>,re::Slice<re::ecs2::ShadowClusterRootComponent*>>::Subscription const&,re::Slice<re::ecs2::ShadowClusterRootComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ShadowClusterRootComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>,re::Slice<re::ecs2::ShadowClusterRootComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>*,re::Slice<re::ecs2::ShadowClusterRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>,re::Slice<re::ecs2::ShadowClusterRootComponent*>>::Subscription const&,re::Slice<re::ecs2::ShadowClusterRootComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ShadowClusterRootComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>,re::Slice<re::ecs2::ShadowClusterRootComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>*,re::Slice<re::ecs2::ShadowClusterRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>,re::Slice<re::ecs2::ShadowClusterRootComponent*>>::Subscription const&,re::Slice<re::ecs2::ShadowClusterRootComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ShadowClusterRootComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>,re::Slice<re::ecs2::ShadowClusterRootComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>*,re::Slice<re::ecs2::ShadowClusterRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>,re::Slice<re::ecs2::ShadowClusterRootComponent*>>::Subscription const&,re::Slice<re::ecs2::ShadowClusterRootComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ShadowClusterRootComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>,re::Slice<re::ecs2::ShadowClusterRootComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>*,re::Slice<re::ecs2::ShadowClusterRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>,re::Slice<re::ecs2::ShadowClusterRootComponent*>>::Subscription const&,re::Slice<re::ecs2::ShadowClusterRootComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ShadowClusterRootComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>,re::Slice<re::ecs2::ShadowClusterRootComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>*,re::Slice<re::ecs2::ShadowClusterRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>,re::Slice<re::ecs2::ShadowClusterRootComponent*>>::Subscription const&,re::Slice<re::ecs2::ShadowClusterRootComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED559E0;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ShadowClusterRootComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ShadowClusterRootComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ShadowClusterRootComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ShadowClusterRootComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>,re::Slice<re::ecs2::ShadowClusterRootComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>*,re::Slice<re::ecs2::ShadowClusterRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowClusterRootComponent>,re::Slice<re::ecs2::ShadowClusterRootComponent*>>::Subscription const&,re::Slice<re::ecs2::ShadowClusterRootComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::ShadowProxyComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::ShadowProxyComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::ShadowProxyComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::ShadowProxyComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

double re::ecs2::ComponentType<re::ecs2::ShadowProxyComponent>::doMakeComponent@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::ShadowProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                             + 7)
                                                          + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::ShadowProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 40, 0);
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED467B8;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v3 + 32) = result;
  *a1 = v3;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ShadowProxyComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED55AF8;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ShadowProxyComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254109668);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254109668))
  {
    qword_254109660 = re::ecs2::introspect_ShadowProxyComponent(0);
    __cxa_guard_release(&qword_254109668);
  }
  return qword_254109660;
}

__n128 re::ecs2::ComponentType<re::ecs2::ShadowProxyComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ShadowProxyComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::ShadowProxyComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED55A88;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ShadowProxyComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>,re::Slice<re::ecs2::ShadowProxyComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>*,re::Slice<re::ecs2::ShadowProxyComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>,re::Slice<re::ecs2::ShadowProxyComponent*>>::Subscription const&,re::Slice<re::ecs2::ShadowProxyComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ShadowProxyComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>,re::Slice<re::ecs2::ShadowProxyComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>*,re::Slice<re::ecs2::ShadowProxyComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>,re::Slice<re::ecs2::ShadowProxyComponent*>>::Subscription const&,re::Slice<re::ecs2::ShadowProxyComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ShadowProxyComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>,re::Slice<re::ecs2::ShadowProxyComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>*,re::Slice<re::ecs2::ShadowProxyComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>,re::Slice<re::ecs2::ShadowProxyComponent*>>::Subscription const&,re::Slice<re::ecs2::ShadowProxyComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ShadowProxyComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>,re::Slice<re::ecs2::ShadowProxyComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>*,re::Slice<re::ecs2::ShadowProxyComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>,re::Slice<re::ecs2::ShadowProxyComponent*>>::Subscription const&,re::Slice<re::ecs2::ShadowProxyComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ShadowProxyComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>,re::Slice<re::ecs2::ShadowProxyComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>*,re::Slice<re::ecs2::ShadowProxyComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>,re::Slice<re::ecs2::ShadowProxyComponent*>>::Subscription const&,re::Slice<re::ecs2::ShadowProxyComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ShadowProxyComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>,re::Slice<re::ecs2::ShadowProxyComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>*,re::Slice<re::ecs2::ShadowProxyComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>,re::Slice<re::ecs2::ShadowProxyComponent*>>::Subscription const&,re::Slice<re::ecs2::ShadowProxyComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ShadowProxyComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>,re::Slice<re::ecs2::ShadowProxyComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>*,re::Slice<re::ecs2::ShadowProxyComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>,re::Slice<re::ecs2::ShadowProxyComponent*>>::Subscription const&,re::Slice<re::ecs2::ShadowProxyComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ShadowProxyComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>,re::Slice<re::ecs2::ShadowProxyComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>*,re::Slice<re::ecs2::ShadowProxyComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>,re::Slice<re::ecs2::ShadowProxyComponent*>>::Subscription const&,re::Slice<re::ecs2::ShadowProxyComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED55AF8;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ShadowProxyComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ShadowProxyComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ShadowProxyComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ShadowProxyComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>,re::Slice<re::ecs2::ShadowProxyComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>*,re::Slice<re::ecs2::ShadowProxyComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ShadowProxyComponent>,re::Slice<re::ecs2::ShadowProxyComponent*>>::Subscription const&,re::Slice<re::ecs2::ShadowProxyComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::RenderPassGroupComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::RenderPassGroupComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::RenderPassGroupComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::RenderPassGroupComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

re::ecs2::RenderPassGroupComponent *re::ecs2::ComponentType<re::ecs2::RenderPassGroupComponent>::doMakeComponent@<X0>(re::ecs2::RenderPassGroupComponent **a1@<X8>)
{
  re::ecs2::RenderPassGroupComponent *v2;
  re::ecs2::RenderPassGroupComponent *result;

  v2 = (re::ecs2::RenderPassGroupComponent *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType + 7)
                                                                                                + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 40, 0);
  result = re::ecs2::RenderPassGroupComponent::RenderPassGroupComponent(v2);
  *a1 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::RenderPassGroupComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED55C10;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::RenderPassGroupComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254109678);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254109678))
  {
    qword_254109670 = re::ecs2::introspect_RenderPassGroupComponent(0);
    __cxa_guard_release(&qword_254109678);
  }
  return qword_254109670;
}

__n128 re::ecs2::ComponentType<re::ecs2::RenderPassGroupComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::RenderPassGroupComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::RenderPassGroupComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED55BA0;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::RenderPassGroupComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>,re::Slice<re::ecs2::RenderPassGroupComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>*,re::Slice<re::ecs2::RenderPassGroupComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>,re::Slice<re::ecs2::RenderPassGroupComponent*>>::Subscription const&,re::Slice<re::ecs2::RenderPassGroupComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::RenderPassGroupComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>,re::Slice<re::ecs2::RenderPassGroupComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>*,re::Slice<re::ecs2::RenderPassGroupComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>,re::Slice<re::ecs2::RenderPassGroupComponent*>>::Subscription const&,re::Slice<re::ecs2::RenderPassGroupComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::RenderPassGroupComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>,re::Slice<re::ecs2::RenderPassGroupComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>*,re::Slice<re::ecs2::RenderPassGroupComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>,re::Slice<re::ecs2::RenderPassGroupComponent*>>::Subscription const&,re::Slice<re::ecs2::RenderPassGroupComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::RenderPassGroupComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>,re::Slice<re::ecs2::RenderPassGroupComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>*,re::Slice<re::ecs2::RenderPassGroupComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>,re::Slice<re::ecs2::RenderPassGroupComponent*>>::Subscription const&,re::Slice<re::ecs2::RenderPassGroupComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::RenderPassGroupComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>,re::Slice<re::ecs2::RenderPassGroupComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>*,re::Slice<re::ecs2::RenderPassGroupComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>,re::Slice<re::ecs2::RenderPassGroupComponent*>>::Subscription const&,re::Slice<re::ecs2::RenderPassGroupComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::RenderPassGroupComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>,re::Slice<re::ecs2::RenderPassGroupComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>*,re::Slice<re::ecs2::RenderPassGroupComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>,re::Slice<re::ecs2::RenderPassGroupComponent*>>::Subscription const&,re::Slice<re::ecs2::RenderPassGroupComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::RenderPassGroupComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>,re::Slice<re::ecs2::RenderPassGroupComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>*,re::Slice<re::ecs2::RenderPassGroupComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>,re::Slice<re::ecs2::RenderPassGroupComponent*>>::Subscription const&,re::Slice<re::ecs2::RenderPassGroupComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::RenderPassGroupComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>,re::Slice<re::ecs2::RenderPassGroupComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>*,re::Slice<re::ecs2::RenderPassGroupComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>,re::Slice<re::ecs2::RenderPassGroupComponent*>>::Subscription const&,re::Slice<re::ecs2::RenderPassGroupComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED55C10;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::RenderPassGroupComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::RenderPassGroupComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::RenderPassGroupComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::RenderPassGroupComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>,re::Slice<re::ecs2::RenderPassGroupComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>*,re::Slice<re::ecs2::RenderPassGroupComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupComponent>,re::Slice<re::ecs2::RenderPassGroupComponent*>>::Subscription const&,re::Slice<re::ecs2::RenderPassGroupComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::RenderPassGroupReferenceComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::RenderPassGroupReferenceComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::RenderPassGroupReferenceComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::RenderPassGroupReferenceComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ComponentType<re::ecs2::RenderPassGroupReferenceComponent>::doMakeComponent(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupReferenceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                             + 7)
                                                          + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupReferenceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 56, 0);
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 48) = 0;
  *(_OWORD *)(v2 + 32) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED59F00;
  objc_initWeak((id *)(v2 + 32), 0);
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  re::ecs2::EntityHandle::reset((id *)(v2 + 32));
  *a1 = v2;
}

uint64_t re::ecs2::ComponentType<re::ecs2::RenderPassGroupReferenceComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED55D28;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::RenderPassGroupReferenceComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254109688);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254109688))
  {
    qword_254109680 = re::ecs2::introspect_RenderPassGroupReferenceComponent(0);
    __cxa_guard_release(&qword_254109688);
  }
  return qword_254109680;
}

__n128 re::ecs2::ComponentType<re::ecs2::RenderPassGroupReferenceComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::RenderPassGroupReferenceComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::RenderPassGroupReferenceComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED55CB8;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::RenderPassGroupReferenceComponent::~RenderPassGroupReferenceComponent(id *this)
{
  id *v2;

  v2 = this + 4;
  re::ecs2::EntityHandle::reset(this + 4);
  objc_destroyWeak(v2);
  this[4] = 0;
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
}

{
  id *v2;

  v2 = this + 4;
  re::ecs2::EntityHandle::reset(this + 4);
  objc_destroyWeak(v2);
  this[4] = 0;
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupReferenceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupReferenceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupReferenceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupReferenceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupReferenceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::RenderPassGroupReferenceComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>*,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>>::Subscription const&,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::RenderPassGroupReferenceComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>*,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>>::Subscription const&,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::RenderPassGroupReferenceComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>*,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>>::Subscription const&,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::RenderPassGroupReferenceComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>*,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>>::Subscription const&,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::RenderPassGroupReferenceComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>*,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>>::Subscription const&,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::RenderPassGroupReferenceComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>*,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>>::Subscription const&,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::RenderPassGroupReferenceComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>*,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>>::Subscription const&,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::RenderPassGroupReferenceComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>*,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>>::Subscription const&,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED55D28;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::RenderPassGroupReferenceComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::RenderPassGroupReferenceComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::RenderPassGroupReferenceComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::RenderPassGroupReferenceComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>*,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RenderPassGroupReferenceComponent>,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>>::Subscription const&,re::Slice<re::ecs2::RenderPassGroupReferenceComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::AnchoringResourceComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::AnchoringResourceComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::AnchoringResourceComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::AnchoringResourceComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

double re::ecs2::ComponentType<re::ecs2::AnchoringResourceComponent>::doMakeComponent@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::AnchoringResourceComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                             + 7)
                                                          + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AnchoringResourceComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 104, 0);
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_QWORD *)(v2 + 96) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED47858;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_QWORD *)(v3 + 96) = 0;
  *a1 = v3;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AnchoringResourceComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED55E40;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AnchoringResourceComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254109698);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254109698))
  {
    qword_254109690 = re::ecs2::introspect_AnchoringResourceComponent(0);
    __cxa_guard_release(&qword_254109698);
  }
  return qword_254109690;
}

__n128 re::ecs2::ComponentType<re::ecs2::AnchoringResourceComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AnchoringResourceComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::AnchoringResourceComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED55DD0;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AnchoringResourceComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>,re::Slice<re::ecs2::AnchoringResourceComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>*,re::Slice<re::ecs2::AnchoringResourceComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>,re::Slice<re::ecs2::AnchoringResourceComponent*>>::Subscription const&,re::Slice<re::ecs2::AnchoringResourceComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AnchoringResourceComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>,re::Slice<re::ecs2::AnchoringResourceComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>*,re::Slice<re::ecs2::AnchoringResourceComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>,re::Slice<re::ecs2::AnchoringResourceComponent*>>::Subscription const&,re::Slice<re::ecs2::AnchoringResourceComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AnchoringResourceComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>,re::Slice<re::ecs2::AnchoringResourceComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>*,re::Slice<re::ecs2::AnchoringResourceComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>,re::Slice<re::ecs2::AnchoringResourceComponent*>>::Subscription const&,re::Slice<re::ecs2::AnchoringResourceComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AnchoringResourceComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>,re::Slice<re::ecs2::AnchoringResourceComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>*,re::Slice<re::ecs2::AnchoringResourceComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>,re::Slice<re::ecs2::AnchoringResourceComponent*>>::Subscription const&,re::Slice<re::ecs2::AnchoringResourceComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AnchoringResourceComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>,re::Slice<re::ecs2::AnchoringResourceComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>*,re::Slice<re::ecs2::AnchoringResourceComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>,re::Slice<re::ecs2::AnchoringResourceComponent*>>::Subscription const&,re::Slice<re::ecs2::AnchoringResourceComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AnchoringResourceComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>,re::Slice<re::ecs2::AnchoringResourceComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>*,re::Slice<re::ecs2::AnchoringResourceComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>,re::Slice<re::ecs2::AnchoringResourceComponent*>>::Subscription const&,re::Slice<re::ecs2::AnchoringResourceComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AnchoringResourceComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>,re::Slice<re::ecs2::AnchoringResourceComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>*,re::Slice<re::ecs2::AnchoringResourceComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>,re::Slice<re::ecs2::AnchoringResourceComponent*>>::Subscription const&,re::Slice<re::ecs2::AnchoringResourceComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AnchoringResourceComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>,re::Slice<re::ecs2::AnchoringResourceComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>*,re::Slice<re::ecs2::AnchoringResourceComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>,re::Slice<re::ecs2::AnchoringResourceComponent*>>::Subscription const&,re::Slice<re::ecs2::AnchoringResourceComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED55E40;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AnchoringResourceComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AnchoringResourceComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AnchoringResourceComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AnchoringResourceComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>,re::Slice<re::ecs2::AnchoringResourceComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>*,re::Slice<re::ecs2::AnchoringResourceComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringResourceComponent>,re::Slice<re::ecs2::AnchoringResourceComponent*>>::Subscription const&,re::Slice<re::ecs2::AnchoringResourceComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::GroundingShadowComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::GroundingShadowComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::GroundingShadowComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::GroundingShadowComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

double re::ecs2::ComponentType<re::ecs2::GroundingShadowComponent>::doMakeComponent@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                             + 7)
                                                          + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 40, 0);
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = &off_24ED57C88;
  *(_QWORD *)&result = 0x1000000010000;
  *(_DWORD *)(v3 + 24) = 0x10000;
  *(_BYTE *)(v3 + 28) = 1;
  *(_DWORD *)(v3 + 32) = 0;
  *a1 = v3;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::GroundingShadowComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED55F58;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::GroundingShadowComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2541096A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2541096A8))
  {
    qword_2541096A0 = re::ecs2::introspect_GroundingShadowComponent(0);
    __cxa_guard_release(&qword_2541096A8);
  }
  return qword_2541096A0;
}

__n128 re::ecs2::ComponentType<re::ecs2::GroundingShadowComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::GroundingShadowComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::GroundingShadowComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED55EE8;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::GroundingShadowComponent::~GroundingShadowComponent(re::ecs2::GroundingShadowComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::GroundingShadowComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>,re::Slice<re::ecs2::GroundingShadowComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>*,re::Slice<re::ecs2::GroundingShadowComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>,re::Slice<re::ecs2::GroundingShadowComponent*>>::Subscription const&,re::Slice<re::ecs2::GroundingShadowComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::GroundingShadowComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>,re::Slice<re::ecs2::GroundingShadowComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>*,re::Slice<re::ecs2::GroundingShadowComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>,re::Slice<re::ecs2::GroundingShadowComponent*>>::Subscription const&,re::Slice<re::ecs2::GroundingShadowComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::GroundingShadowComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>,re::Slice<re::ecs2::GroundingShadowComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>*,re::Slice<re::ecs2::GroundingShadowComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>,re::Slice<re::ecs2::GroundingShadowComponent*>>::Subscription const&,re::Slice<re::ecs2::GroundingShadowComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::GroundingShadowComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>,re::Slice<re::ecs2::GroundingShadowComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>*,re::Slice<re::ecs2::GroundingShadowComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>,re::Slice<re::ecs2::GroundingShadowComponent*>>::Subscription const&,re::Slice<re::ecs2::GroundingShadowComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::GroundingShadowComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>,re::Slice<re::ecs2::GroundingShadowComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>*,re::Slice<re::ecs2::GroundingShadowComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>,re::Slice<re::ecs2::GroundingShadowComponent*>>::Subscription const&,re::Slice<re::ecs2::GroundingShadowComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::GroundingShadowComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>,re::Slice<re::ecs2::GroundingShadowComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>*,re::Slice<re::ecs2::GroundingShadowComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>,re::Slice<re::ecs2::GroundingShadowComponent*>>::Subscription const&,re::Slice<re::ecs2::GroundingShadowComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::GroundingShadowComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>,re::Slice<re::ecs2::GroundingShadowComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>*,re::Slice<re::ecs2::GroundingShadowComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>,re::Slice<re::ecs2::GroundingShadowComponent*>>::Subscription const&,re::Slice<re::ecs2::GroundingShadowComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::GroundingShadowComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>,re::Slice<re::ecs2::GroundingShadowComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>*,re::Slice<re::ecs2::GroundingShadowComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>,re::Slice<re::ecs2::GroundingShadowComponent*>>::Subscription const&,re::Slice<re::ecs2::GroundingShadowComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED55F58;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::GroundingShadowComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::GroundingShadowComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::GroundingShadowComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::GroundingShadowComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>,re::Slice<re::ecs2::GroundingShadowComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>*,re::Slice<re::ecs2::GroundingShadowComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::GroundingShadowComponent>,re::Slice<re::ecs2::GroundingShadowComponent*>>::Subscription const&,re::Slice<re::ecs2::GroundingShadowComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::DynamicLightShadowComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::DynamicLightShadowComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::DynamicLightShadowComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::DynamicLightShadowComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ComponentType<re::ecs2::DynamicLightShadowComponent>::doMakeComponent(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::DynamicLightShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::DynamicLightShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 32, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_WORD *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED59C00;
  *a1 = v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::DynamicLightShadowComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED56070;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::DynamicLightShadowComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2541096B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2541096B8))
  {
    qword_2541096B0 = re::ecs2::introspect_DynamicLightShadowComponent(0);
    __cxa_guard_release(&qword_2541096B8);
  }
  return qword_2541096B0;
}

__n128 re::ecs2::ComponentType<re::ecs2::DynamicLightShadowComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::DynamicLightShadowComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::DynamicLightShadowComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED56000;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::DynamicLightShadowComponent::~DynamicLightShadowComponent(re::ecs2::DynamicLightShadowComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::DynamicLightShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::DynamicLightShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::DynamicLightShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::DynamicLightShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::DynamicLightShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::DynamicLightShadowComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>,re::Slice<re::ecs2::DynamicLightShadowComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>*,re::Slice<re::ecs2::DynamicLightShadowComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>,re::Slice<re::ecs2::DynamicLightShadowComponent*>>::Subscription const&,re::Slice<re::ecs2::DynamicLightShadowComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::DynamicLightShadowComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>,re::Slice<re::ecs2::DynamicLightShadowComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>*,re::Slice<re::ecs2::DynamicLightShadowComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>,re::Slice<re::ecs2::DynamicLightShadowComponent*>>::Subscription const&,re::Slice<re::ecs2::DynamicLightShadowComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::DynamicLightShadowComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>,re::Slice<re::ecs2::DynamicLightShadowComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>*,re::Slice<re::ecs2::DynamicLightShadowComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>,re::Slice<re::ecs2::DynamicLightShadowComponent*>>::Subscription const&,re::Slice<re::ecs2::DynamicLightShadowComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::DynamicLightShadowComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>,re::Slice<re::ecs2::DynamicLightShadowComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>*,re::Slice<re::ecs2::DynamicLightShadowComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>,re::Slice<re::ecs2::DynamicLightShadowComponent*>>::Subscription const&,re::Slice<re::ecs2::DynamicLightShadowComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::DynamicLightShadowComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>,re::Slice<re::ecs2::DynamicLightShadowComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>*,re::Slice<re::ecs2::DynamicLightShadowComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>,re::Slice<re::ecs2::DynamicLightShadowComponent*>>::Subscription const&,re::Slice<re::ecs2::DynamicLightShadowComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::DynamicLightShadowComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>,re::Slice<re::ecs2::DynamicLightShadowComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>*,re::Slice<re::ecs2::DynamicLightShadowComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>,re::Slice<re::ecs2::DynamicLightShadowComponent*>>::Subscription const&,re::Slice<re::ecs2::DynamicLightShadowComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::DynamicLightShadowComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>,re::Slice<re::ecs2::DynamicLightShadowComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>*,re::Slice<re::ecs2::DynamicLightShadowComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>,re::Slice<re::ecs2::DynamicLightShadowComponent*>>::Subscription const&,re::Slice<re::ecs2::DynamicLightShadowComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::DynamicLightShadowComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>,re::Slice<re::ecs2::DynamicLightShadowComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>*,re::Slice<re::ecs2::DynamicLightShadowComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>,re::Slice<re::ecs2::DynamicLightShadowComponent*>>::Subscription const&,re::Slice<re::ecs2::DynamicLightShadowComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED56070;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::DynamicLightShadowComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::DynamicLightShadowComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::DynamicLightShadowComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::DynamicLightShadowComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>,re::Slice<re::ecs2::DynamicLightShadowComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>*,re::Slice<re::ecs2::DynamicLightShadowComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::DynamicLightShadowComponent>,re::Slice<re::ecs2::DynamicLightShadowComponent*>>::Subscription const&,re::Slice<re::ecs2::DynamicLightShadowComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::MaterialRenderStateArrayComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::MaterialRenderStateArrayComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::MaterialRenderStateArrayComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::MaterialRenderStateArrayComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ComponentType<re::ecs2::MaterialRenderStateArrayComponent>::doMakeComponent(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::MaterialRenderStateArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                             + 7)
                                                          + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::MaterialRenderStateArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 72, 0);
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_QWORD *)(v2 + 64) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED58FC0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 56) = 0;
  *a1 = v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::MaterialRenderStateArrayComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED56188;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::MaterialRenderStateArrayComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2541096C8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2541096C8))
  {
    qword_2541096C0 = re::ecs2::introspect_MaterialRenderStateArrayComponent(0);
    __cxa_guard_release(&qword_2541096C8);
  }
  return qword_2541096C0;
}

__n128 re::ecs2::ComponentType<re::ecs2::MaterialRenderStateArrayComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::MaterialRenderStateArrayComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::MaterialRenderStateArrayComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED56118;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::MaterialRenderStateArrayComponent::~MaterialRenderStateArrayComponent(re::ecs2::MaterialRenderStateArrayComponent *this)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_24ED58FC0;
  v3 = (_QWORD *)((char *)this + 32);
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    if (*((_QWORD *)this + 8))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 8) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 14);
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_24ED58FC0;
  v3 = (_QWORD *)((char *)this + 32);
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    if (*((_QWORD *)this + 8))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 8) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 14);
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::MaterialRenderStateArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::MaterialRenderStateArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::MaterialRenderStateArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return 15;
}

void *re::ecs2::ComponentImpl<re::ecs2::MaterialRenderStateArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::MaterialRenderStateArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::MaterialRenderStateArrayComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>*,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>>::Subscription const&,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::MaterialRenderStateArrayComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>*,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>>::Subscription const&,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::MaterialRenderStateArrayComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>*,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>>::Subscription const&,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::MaterialRenderStateArrayComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>*,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>>::Subscription const&,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::MaterialRenderStateArrayComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>*,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>>::Subscription const&,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::MaterialRenderStateArrayComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>*,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>>::Subscription const&,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::MaterialRenderStateArrayComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>*,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>>::Subscription const&,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::MaterialRenderStateArrayComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>*,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>>::Subscription const&,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED56188;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::MaterialRenderStateArrayComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::MaterialRenderStateArrayComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::MaterialRenderStateArrayComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::MaterialRenderStateArrayComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>*,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialRenderStateArrayComponent>,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>>::Subscription const&,re::Slice<re::ecs2::MaterialRenderStateArrayComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::ClientWorldOriginRefComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::ClientWorldOriginRefComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::ClientWorldOriginRefComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::ClientWorldOriginRefComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ComponentType<re::ecs2::ClientWorldOriginRefComponent>::doMakeComponent(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::ClientWorldOriginRefComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType
                                                             + 7)
                                                          + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::ClientWorldOriginRefComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType+ 7), 40, 0);
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57208;
  *(_QWORD *)(v3 + 32) = 0;
  *a1 = v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ClientWorldOriginRefComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED562A0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ClientWorldOriginRefComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2541096D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2541096D8))
  {
    qword_2541096D0 = re::ecs2::introspect_ClientWorldOriginRefComponent(0);
    __cxa_guard_release(&qword_2541096D8);
  }
  return qword_2541096D0;
}

__n128 re::ecs2::ComponentType<re::ecs2::ClientWorldOriginRefComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ClientWorldOriginRefComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::ClientWorldOriginRefComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED56230;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::ClientWorldOriginRefComponent::~ClientWorldOriginRefComponent(re::ecs2::ClientWorldOriginRefComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ClientWorldOriginRefComponent,(re::ecs2::ComponentTypeBase::Flags)1>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::ClientWorldOriginRefComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ClientWorldOriginRefComponent,(re::ecs2::ComponentTypeBase::Flags)1>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::ClientWorldOriginRefComponent,(re::ecs2::ComponentTypeBase::Flags)1>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::ClientWorldOriginRefComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType;
}

void re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ClientWorldOriginRefComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>*,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>>::Subscription const&,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ClientWorldOriginRefComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>*,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>>::Subscription const&,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ClientWorldOriginRefComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>*,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>>::Subscription const&,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ClientWorldOriginRefComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>*,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>>::Subscription const&,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ClientWorldOriginRefComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>*,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>>::Subscription const&,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ClientWorldOriginRefComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>*,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>>::Subscription const&,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ClientWorldOriginRefComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>*,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>>::Subscription const&,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ClientWorldOriginRefComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>*,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>>::Subscription const&,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED562A0;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ClientWorldOriginRefComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ClientWorldOriginRefComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ClientWorldOriginRefComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ClientWorldOriginRefComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>*,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientWorldOriginRefComponent>,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>>::Subscription const&,re::Slice<re::ecs2::ClientWorldOriginRefComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::ClientAnchorSyncComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::ClientAnchorSyncComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::ClientAnchorSyncComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::ClientAnchorSyncComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

double re::ecs2::ComponentType<re::ecs2::ClientAnchorSyncComponent>::doMakeComponent@<D0>(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;
  double result;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::ClientAnchorSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::ClientAnchorSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 96, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED58138;
  *(_WORD *)(v3 + 25) = 0;
  *(_OWORD *)(v3 + 32) = xmmword_2260E5F10;
  *(_OWORD *)(v3 + 48) = xmmword_2260E5F20;
  result = 0.0;
  *(_OWORD *)(v3 + 64) = xmmword_2260E5F40;
  *(_OWORD *)(v3 + 80) = xmmword_2260E5D70;
  *a1 = v3;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ClientAnchorSyncComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED563B8;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ClientAnchorSyncComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2541096E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2541096E8))
  {
    qword_2541096E0 = re::ecs2::introspect_ClientAnchorSyncComponent(0);
    __cxa_guard_release(&qword_2541096E8);
  }
  return qword_2541096E0;
}

__n128 re::ecs2::ComponentType<re::ecs2::ClientAnchorSyncComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ClientAnchorSyncComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::ClientAnchorSyncComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED56348;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::ClientAnchorSyncComponent::~ClientAnchorSyncComponent(re::ecs2::ClientAnchorSyncComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ClientAnchorSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::ClientAnchorSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ClientAnchorSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::ClientAnchorSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::ClientAnchorSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ClientAnchorSyncComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>,re::Slice<re::ecs2::ClientAnchorSyncComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>*,re::Slice<re::ecs2::ClientAnchorSyncComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>,re::Slice<re::ecs2::ClientAnchorSyncComponent*>>::Subscription const&,re::Slice<re::ecs2::ClientAnchorSyncComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ClientAnchorSyncComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>,re::Slice<re::ecs2::ClientAnchorSyncComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>*,re::Slice<re::ecs2::ClientAnchorSyncComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>,re::Slice<re::ecs2::ClientAnchorSyncComponent*>>::Subscription const&,re::Slice<re::ecs2::ClientAnchorSyncComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ClientAnchorSyncComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>,re::Slice<re::ecs2::ClientAnchorSyncComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>*,re::Slice<re::ecs2::ClientAnchorSyncComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>,re::Slice<re::ecs2::ClientAnchorSyncComponent*>>::Subscription const&,re::Slice<re::ecs2::ClientAnchorSyncComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ClientAnchorSyncComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>,re::Slice<re::ecs2::ClientAnchorSyncComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>*,re::Slice<re::ecs2::ClientAnchorSyncComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>,re::Slice<re::ecs2::ClientAnchorSyncComponent*>>::Subscription const&,re::Slice<re::ecs2::ClientAnchorSyncComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ClientAnchorSyncComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>,re::Slice<re::ecs2::ClientAnchorSyncComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>*,re::Slice<re::ecs2::ClientAnchorSyncComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>,re::Slice<re::ecs2::ClientAnchorSyncComponent*>>::Subscription const&,re::Slice<re::ecs2::ClientAnchorSyncComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ClientAnchorSyncComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>,re::Slice<re::ecs2::ClientAnchorSyncComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>*,re::Slice<re::ecs2::ClientAnchorSyncComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>,re::Slice<re::ecs2::ClientAnchorSyncComponent*>>::Subscription const&,re::Slice<re::ecs2::ClientAnchorSyncComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ClientAnchorSyncComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>,re::Slice<re::ecs2::ClientAnchorSyncComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>*,re::Slice<re::ecs2::ClientAnchorSyncComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>,re::Slice<re::ecs2::ClientAnchorSyncComponent*>>::Subscription const&,re::Slice<re::ecs2::ClientAnchorSyncComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ClientAnchorSyncComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>,re::Slice<re::ecs2::ClientAnchorSyncComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>*,re::Slice<re::ecs2::ClientAnchorSyncComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>,re::Slice<re::ecs2::ClientAnchorSyncComponent*>>::Subscription const&,re::Slice<re::ecs2::ClientAnchorSyncComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED563B8;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ClientAnchorSyncComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ClientAnchorSyncComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ClientAnchorSyncComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ClientAnchorSyncComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>,re::Slice<re::ecs2::ClientAnchorSyncComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>*,re::Slice<re::ecs2::ClientAnchorSyncComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ClientAnchorSyncComponent>,re::Slice<re::ecs2::ClientAnchorSyncComponent*>>::Subscription const&,re::Slice<re::ecs2::ClientAnchorSyncComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::PreviewSupportComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::PreviewSupportComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::PreviewSupportComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::PreviewSupportComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ComponentType<re::ecs2::PreviewSupportComponent>::doMakeComponent(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::PreviewSupportComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::PreviewSupportComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 32, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57C08;
  *a1 = v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::PreviewSupportComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED564D0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::PreviewSupportComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2541096F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2541096F8))
  {
    qword_2541096F0 = re::ecs2::introspect_PreviewSupportComponent(0);
    __cxa_guard_release(&qword_2541096F8);
  }
  return qword_2541096F0;
}

__n128 re::ecs2::ComponentType<re::ecs2::PreviewSupportComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::PreviewSupportComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::PreviewSupportComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED56460;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::PreviewSupportComponent::~PreviewSupportComponent(re::ecs2::PreviewSupportComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PreviewSupportComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::PreviewSupportComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PreviewSupportComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::PreviewSupportComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::PreviewSupportComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::PreviewSupportComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>,re::Slice<re::ecs2::PreviewSupportComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>*,re::Slice<re::ecs2::PreviewSupportComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>,re::Slice<re::ecs2::PreviewSupportComponent*>>::Subscription const&,re::Slice<re::ecs2::PreviewSupportComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::PreviewSupportComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>,re::Slice<re::ecs2::PreviewSupportComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>*,re::Slice<re::ecs2::PreviewSupportComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>,re::Slice<re::ecs2::PreviewSupportComponent*>>::Subscription const&,re::Slice<re::ecs2::PreviewSupportComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::PreviewSupportComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>,re::Slice<re::ecs2::PreviewSupportComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>*,re::Slice<re::ecs2::PreviewSupportComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>,re::Slice<re::ecs2::PreviewSupportComponent*>>::Subscription const&,re::Slice<re::ecs2::PreviewSupportComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::PreviewSupportComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>,re::Slice<re::ecs2::PreviewSupportComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>*,re::Slice<re::ecs2::PreviewSupportComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>,re::Slice<re::ecs2::PreviewSupportComponent*>>::Subscription const&,re::Slice<re::ecs2::PreviewSupportComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::PreviewSupportComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>,re::Slice<re::ecs2::PreviewSupportComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>*,re::Slice<re::ecs2::PreviewSupportComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>,re::Slice<re::ecs2::PreviewSupportComponent*>>::Subscription const&,re::Slice<re::ecs2::PreviewSupportComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::PreviewSupportComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>,re::Slice<re::ecs2::PreviewSupportComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>*,re::Slice<re::ecs2::PreviewSupportComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>,re::Slice<re::ecs2::PreviewSupportComponent*>>::Subscription const&,re::Slice<re::ecs2::PreviewSupportComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::PreviewSupportComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>,re::Slice<re::ecs2::PreviewSupportComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>*,re::Slice<re::ecs2::PreviewSupportComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>,re::Slice<re::ecs2::PreviewSupportComponent*>>::Subscription const&,re::Slice<re::ecs2::PreviewSupportComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::PreviewSupportComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>,re::Slice<re::ecs2::PreviewSupportComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>*,re::Slice<re::ecs2::PreviewSupportComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>,re::Slice<re::ecs2::PreviewSupportComponent*>>::Subscription const&,re::Slice<re::ecs2::PreviewSupportComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED564D0;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::PreviewSupportComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::PreviewSupportComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::PreviewSupportComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::PreviewSupportComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>,re::Slice<re::ecs2::PreviewSupportComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>*,re::Slice<re::ecs2::PreviewSupportComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PreviewSupportComponent>,re::Slice<re::ecs2::PreviewSupportComponent*>>::Subscription const&,re::Slice<re::ecs2::PreviewSupportComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::SelectableSceneContentIdentifierComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::SelectableSceneContentIdentifierComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::SelectableSceneContentIdentifierComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::SelectableSceneContentIdentifierComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ComponentType<re::ecs2::SelectableSceneContentIdentifierComponent>::doMakeComponent(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::SelectableSceneContentIdentifierComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::SelectableSceneContentIdentifierComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 32, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED581B8;
  *a1 = v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::SelectableSceneContentIdentifierComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED565E8;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::SelectableSceneContentIdentifierComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254109708);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254109708))
  {
    qword_254109700 = re::ecs2::introspect_SelectableSceneContentIdentifierComponent(0);
    __cxa_guard_release(&qword_254109708);
  }
  return qword_254109700;
}

__n128 re::ecs2::ComponentType<re::ecs2::SelectableSceneContentIdentifierComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::SelectableSceneContentIdentifierComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::SelectableSceneContentIdentifierComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED56578;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::SelectableSceneContentIdentifierComponent::~SelectableSceneContentIdentifierComponent(re::ecs2::SelectableSceneContentIdentifierComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::SelectableSceneContentIdentifierComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::SelectableSceneContentIdentifierComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::SelectableSceneContentIdentifierComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::SelectableSceneContentIdentifierComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::SelectableSceneContentIdentifierComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::SelectableSceneContentIdentifierComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>*,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>>::Subscription const&,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::SelectableSceneContentIdentifierComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>*,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>>::Subscription const&,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::SelectableSceneContentIdentifierComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>*,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>>::Subscription const&,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::SelectableSceneContentIdentifierComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>*,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>>::Subscription const&,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::SelectableSceneContentIdentifierComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>*,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>>::Subscription const&,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::SelectableSceneContentIdentifierComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>*,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>>::Subscription const&,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::SelectableSceneContentIdentifierComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>*,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>>::Subscription const&,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::SelectableSceneContentIdentifierComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>*,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>>::Subscription const&,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED565E8;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::SelectableSceneContentIdentifierComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::SelectableSceneContentIdentifierComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::SelectableSceneContentIdentifierComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::SelectableSceneContentIdentifierComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>*,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SelectableSceneContentIdentifierComponent>,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>>::Subscription const&,re::Slice<re::ecs2::SelectableSceneContentIdentifierComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::BillboardComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::BillboardComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::BillboardComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::BillboardComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

double re::ecs2::ComponentType<re::ecs2::BillboardComponent>::doMakeComponent@<D0>(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;
  double result;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::BillboardComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::BillboardComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 96, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED5A600;
  result = 0.0078125;
  *(_OWORD *)(v3 + 32) = xmmword_2260E5F20;
  *(_OWORD *)(v3 + 48) = xmmword_2260E5F40;
  *(_OWORD *)(v3 + 64) = xmmword_2260E5F20;
  *(_DWORD *)(v3 + 80) = 1065353216;
  *(_WORD *)(v3 + 84) = 1;
  *a1 = v3;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::BillboardComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED56700;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::BillboardComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254109718);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254109718))
  {
    qword_254109710 = re::ecs2::introspect_BillboardComponent(0);
    __cxa_guard_release(&qword_254109718);
  }
  return qword_254109710;
}

__n128 re::ecs2::ComponentType<re::ecs2::BillboardComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::BillboardComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::BillboardComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED56690;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::BillboardComponent::~BillboardComponent(re::ecs2::BillboardComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::BillboardComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::BillboardComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::BillboardComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::BillboardComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::BillboardComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::BillboardComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>,re::Slice<re::ecs2::BillboardComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>*,re::Slice<re::ecs2::BillboardComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>,re::Slice<re::ecs2::BillboardComponent*>>::Subscription const&,re::Slice<re::ecs2::BillboardComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::BillboardComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>,re::Slice<re::ecs2::BillboardComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>*,re::Slice<re::ecs2::BillboardComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>,re::Slice<re::ecs2::BillboardComponent*>>::Subscription const&,re::Slice<re::ecs2::BillboardComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::BillboardComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>,re::Slice<re::ecs2::BillboardComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>*,re::Slice<re::ecs2::BillboardComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>,re::Slice<re::ecs2::BillboardComponent*>>::Subscription const&,re::Slice<re::ecs2::BillboardComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::BillboardComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>,re::Slice<re::ecs2::BillboardComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>*,re::Slice<re::ecs2::BillboardComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>,re::Slice<re::ecs2::BillboardComponent*>>::Subscription const&,re::Slice<re::ecs2::BillboardComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::BillboardComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>,re::Slice<re::ecs2::BillboardComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>*,re::Slice<re::ecs2::BillboardComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>,re::Slice<re::ecs2::BillboardComponent*>>::Subscription const&,re::Slice<re::ecs2::BillboardComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::BillboardComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>,re::Slice<re::ecs2::BillboardComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>*,re::Slice<re::ecs2::BillboardComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>,re::Slice<re::ecs2::BillboardComponent*>>::Subscription const&,re::Slice<re::ecs2::BillboardComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::BillboardComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>,re::Slice<re::ecs2::BillboardComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>*,re::Slice<re::ecs2::BillboardComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>,re::Slice<re::ecs2::BillboardComponent*>>::Subscription const&,re::Slice<re::ecs2::BillboardComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::BillboardComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>,re::Slice<re::ecs2::BillboardComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>*,re::Slice<re::ecs2::BillboardComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>,re::Slice<re::ecs2::BillboardComponent*>>::Subscription const&,re::Slice<re::ecs2::BillboardComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED56700;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::BillboardComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::BillboardComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::BillboardComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::BillboardComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>,re::Slice<re::ecs2::BillboardComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>*,re::Slice<re::ecs2::BillboardComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::BillboardComponent>,re::Slice<re::ecs2::BillboardComponent*>>::Subscription const&,re::Slice<re::ecs2::BillboardComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::SceneSpaceRootComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::SceneSpaceRootComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::SceneSpaceRootComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::SceneSpaceRootComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

double re::ecs2::ComponentType<re::ecs2::SceneSpaceRootComponent>::doMakeComponent@<D0>(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;
  double result;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::SceneSpaceRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::SceneSpaceRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 112, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED494D8;
  *(_OWORD *)(v3 + 32) = xmmword_2260E5F10;
  *(_OWORD *)(v3 + 48) = xmmword_2260E5F20;
  result = 0.0;
  *(_OWORD *)(v3 + 64) = xmmword_2260E5F40;
  *(_OWORD *)(v3 + 80) = xmmword_2260E5D70;
  *(_WORD *)(v3 + 96) = 0;
  *a1 = v3;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::SceneSpaceRootComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED56818;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::SceneSpaceRootComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254109728);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254109728))
  {
    qword_254109720 = re::ecs2::introspect_SceneSpaceRootComponent(0);
    __cxa_guard_release(&qword_254109728);
  }
  return qword_254109720;
}

__n128 re::ecs2::ComponentType<re::ecs2::SceneSpaceRootComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::SceneSpaceRootComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::SceneSpaceRootComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED567A8;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>::registerCallbacks(_DWORD *a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::SceneSpaceRootComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>,re::Slice<re::ecs2::SceneSpaceRootComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>*,re::Slice<re::ecs2::SceneSpaceRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>,re::Slice<re::ecs2::SceneSpaceRootComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneSpaceRootComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 32, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::SceneSpaceRootComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>,re::Slice<re::ecs2::SceneSpaceRootComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>*,re::Slice<re::ecs2::SceneSpaceRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>,re::Slice<re::ecs2::SceneSpaceRootComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneSpaceRootComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 98, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::SceneSpaceRootComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>,re::Slice<re::ecs2::SceneSpaceRootComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>*,re::Slice<re::ecs2::SceneSpaceRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>,re::Slice<re::ecs2::SceneSpaceRootComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneSpaceRootComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 54, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::SceneSpaceRootComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>,re::Slice<re::ecs2::SceneSpaceRootComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>*,re::Slice<re::ecs2::SceneSpaceRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>,re::Slice<re::ecs2::SceneSpaceRootComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneSpaceRootComponent*>&&)#1}::__invoke;
    return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 76, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::SceneSpaceRootComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>,re::Slice<re::ecs2::SceneSpaceRootComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>*,re::Slice<re::ecs2::SceneSpaceRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>,re::Slice<re::ecs2::SceneSpaceRootComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneSpaceRootComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::SceneSpaceRootComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>,re::Slice<re::ecs2::SceneSpaceRootComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>*,re::Slice<re::ecs2::SceneSpaceRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>,re::Slice<re::ecs2::SceneSpaceRootComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneSpaceRootComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::SceneSpaceRootComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>,re::Slice<re::ecs2::SceneSpaceRootComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>*,re::Slice<re::ecs2::SceneSpaceRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>,re::Slice<re::ecs2::SceneSpaceRootComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneSpaceRootComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::SceneSpaceRootComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>,re::Slice<re::ecs2::SceneSpaceRootComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>*,re::Slice<re::ecs2::SceneSpaceRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>,re::Slice<re::ecs2::SceneSpaceRootComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneSpaceRootComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED56818;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::SceneSpaceRootComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::SceneSpaceRootComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::SceneSpaceRootComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::SceneSpaceRootComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>,re::Slice<re::ecs2::SceneSpaceRootComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>*,re::Slice<re::ecs2::SceneSpaceRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>,re::Slice<re::ecs2::SceneSpaceRootComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneSpaceRootComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::ImmersiveSpaceTrackerComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::ImmersiveSpaceTrackerComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::ImmersiveSpaceTrackerComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::ImmersiveSpaceTrackerComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ComponentType<re::ecs2::ImmersiveSpaceTrackerComponent>::doMakeComponent(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::ImmersiveSpaceTrackerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::ImmersiveSpaceTrackerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 32, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED5A300;
  *a1 = v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ImmersiveSpaceTrackerComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED56930;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ImmersiveSpaceTrackerComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254109738);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254109738))
  {
    qword_254109730 = re::ecs2::introspect_ImmersiveSpaceTrackerComponent(0);
    __cxa_guard_release(&qword_254109738);
  }
  return qword_254109730;
}

__n128 re::ecs2::ComponentType<re::ecs2::ImmersiveSpaceTrackerComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ImmersiveSpaceTrackerComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::ImmersiveSpaceTrackerComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED568C0;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::ImmersiveSpaceTrackerComponent::~ImmersiveSpaceTrackerComponent(re::ecs2::ImmersiveSpaceTrackerComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ImmersiveSpaceTrackerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::ImmersiveSpaceTrackerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ImmersiveSpaceTrackerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::ImmersiveSpaceTrackerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::ImmersiveSpaceTrackerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>::registerCallbacks(_DWORD *a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ImmersiveSpaceTrackerComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::Subscription const&,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 32, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ImmersiveSpaceTrackerComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::Subscription const&,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 98, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ImmersiveSpaceTrackerComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::Subscription const&,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 54, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ImmersiveSpaceTrackerComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::Subscription const&,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>&&)#1}::__invoke;
    return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 76, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ImmersiveSpaceTrackerComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::Subscription const&,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ImmersiveSpaceTrackerComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::Subscription const&,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ImmersiveSpaceTrackerComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::Subscription const&,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ImmersiveSpaceTrackerComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::Subscription const&,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED56930;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ImmersiveSpaceTrackerComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ImmersiveSpaceTrackerComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ImmersiveSpaceTrackerComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ImmersiveSpaceTrackerComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::Subscription const&,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::FrameCountComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::FrameCountComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::FrameCountComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::FrameCountComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ComponentType<re::ecs2::FrameCountComponent>::doMakeComponent(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::FrameCountComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                             + 7)
                                                          + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::FrameCountComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 40, 0);
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED59140;
  *a1 = v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::FrameCountComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED56A48;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::FrameCountComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254109748);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254109748))
  {
    qword_254109740 = re::ecs2::introspect_FrameCountComponent(0);
    __cxa_guard_release(&qword_254109748);
  }
  return qword_254109740;
}

__n128 re::ecs2::ComponentType<re::ecs2::FrameCountComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::FrameCountComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::FrameCountComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED569D8;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::FrameCountComponent::~FrameCountComponent(re::ecs2::FrameCountComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::FrameCountComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::FrameCountComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::FrameCountComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::FrameCountComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::FrameCountComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::FrameCountComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>,re::Slice<re::ecs2::FrameCountComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>*,re::Slice<re::ecs2::FrameCountComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>,re::Slice<re::ecs2::FrameCountComponent*>>::Subscription const&,re::Slice<re::ecs2::FrameCountComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::FrameCountComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>,re::Slice<re::ecs2::FrameCountComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>*,re::Slice<re::ecs2::FrameCountComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>,re::Slice<re::ecs2::FrameCountComponent*>>::Subscription const&,re::Slice<re::ecs2::FrameCountComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::FrameCountComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>,re::Slice<re::ecs2::FrameCountComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>*,re::Slice<re::ecs2::FrameCountComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>,re::Slice<re::ecs2::FrameCountComponent*>>::Subscription const&,re::Slice<re::ecs2::FrameCountComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::FrameCountComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>,re::Slice<re::ecs2::FrameCountComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>*,re::Slice<re::ecs2::FrameCountComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>,re::Slice<re::ecs2::FrameCountComponent*>>::Subscription const&,re::Slice<re::ecs2::FrameCountComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::FrameCountComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>,re::Slice<re::ecs2::FrameCountComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>*,re::Slice<re::ecs2::FrameCountComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>,re::Slice<re::ecs2::FrameCountComponent*>>::Subscription const&,re::Slice<re::ecs2::FrameCountComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::FrameCountComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>,re::Slice<re::ecs2::FrameCountComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>*,re::Slice<re::ecs2::FrameCountComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>,re::Slice<re::ecs2::FrameCountComponent*>>::Subscription const&,re::Slice<re::ecs2::FrameCountComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::FrameCountComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>,re::Slice<re::ecs2::FrameCountComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>*,re::Slice<re::ecs2::FrameCountComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>,re::Slice<re::ecs2::FrameCountComponent*>>::Subscription const&,re::Slice<re::ecs2::FrameCountComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::FrameCountComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>,re::Slice<re::ecs2::FrameCountComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>*,re::Slice<re::ecs2::FrameCountComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>,re::Slice<re::ecs2::FrameCountComponent*>>::Subscription const&,re::Slice<re::ecs2::FrameCountComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED56A48;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::FrameCountComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::FrameCountComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::FrameCountComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::FrameCountComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>,re::Slice<re::ecs2::FrameCountComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>*,re::Slice<re::ecs2::FrameCountComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::FrameCountComponent>,re::Slice<re::ecs2::FrameCountComponent*>>::Subscription const&,re::Slice<re::ecs2::FrameCountComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::CARETraceComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::CARETraceComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::CARETraceComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::CARETraceComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

int32x4_t re::ecs2::ComponentType<re::ecs2::CARETraceComponent>::doMakeComponent@<Q0>(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;
  int32x4_t result;
  __int128 v5;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::CARETraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::CARETraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 64, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED58EC0;
  result = vdupq_n_s32(0x7F800000u);
  *(_QWORD *)&v5 = 0x7F0000007FLL;
  *((_QWORD *)&v5 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v3 + 32) = result;
  *(_OWORD *)(v3 + 48) = v5;
  *a1 = v3;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::CARETraceComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED56B60;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::CARETraceComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254109758);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254109758))
  {
    qword_254109750 = re::ecs2::introspect_CARETraceComponent(0);
    __cxa_guard_release(&qword_254109758);
  }
  return qword_254109750;
}

__n128 re::ecs2::ComponentType<re::ecs2::CARETraceComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::CARETraceComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::CARETraceComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED56AF0;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::CARETraceComponent::~CARETraceComponent(re::ecs2::CARETraceComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::CARETraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::CARETraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::CARETraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::CARETraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::CARETraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::CARETraceComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>,re::Slice<re::ecs2::CARETraceComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>*,re::Slice<re::ecs2::CARETraceComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>,re::Slice<re::ecs2::CARETraceComponent*>>::Subscription const&,re::Slice<re::ecs2::CARETraceComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::CARETraceComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>,re::Slice<re::ecs2::CARETraceComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>*,re::Slice<re::ecs2::CARETraceComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>,re::Slice<re::ecs2::CARETraceComponent*>>::Subscription const&,re::Slice<re::ecs2::CARETraceComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::CARETraceComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>,re::Slice<re::ecs2::CARETraceComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>*,re::Slice<re::ecs2::CARETraceComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>,re::Slice<re::ecs2::CARETraceComponent*>>::Subscription const&,re::Slice<re::ecs2::CARETraceComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::CARETraceComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>,re::Slice<re::ecs2::CARETraceComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>*,re::Slice<re::ecs2::CARETraceComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>,re::Slice<re::ecs2::CARETraceComponent*>>::Subscription const&,re::Slice<re::ecs2::CARETraceComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::CARETraceComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>,re::Slice<re::ecs2::CARETraceComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>*,re::Slice<re::ecs2::CARETraceComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>,re::Slice<re::ecs2::CARETraceComponent*>>::Subscription const&,re::Slice<re::ecs2::CARETraceComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::CARETraceComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>,re::Slice<re::ecs2::CARETraceComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>*,re::Slice<re::ecs2::CARETraceComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>,re::Slice<re::ecs2::CARETraceComponent*>>::Subscription const&,re::Slice<re::ecs2::CARETraceComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::CARETraceComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>,re::Slice<re::ecs2::CARETraceComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>*,re::Slice<re::ecs2::CARETraceComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>,re::Slice<re::ecs2::CARETraceComponent*>>::Subscription const&,re::Slice<re::ecs2::CARETraceComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::CARETraceComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>,re::Slice<re::ecs2::CARETraceComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>*,re::Slice<re::ecs2::CARETraceComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>,re::Slice<re::ecs2::CARETraceComponent*>>::Subscription const&,re::Slice<re::ecs2::CARETraceComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED56B60;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::CARETraceComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::CARETraceComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::CARETraceComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::CARETraceComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>,re::Slice<re::ecs2::CARETraceComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>*,re::Slice<re::ecs2::CARETraceComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CARETraceComponent>,re::Slice<re::ecs2::CARETraceComponent*>>::Subscription const&,re::Slice<re::ecs2::CARETraceComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

void std::vector<re::ecs2::PolygonFrustumClipper::Vertex>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 5)
  {
    if (a2 >> 59)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::PolygonFrustumClipper::Vertex>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFE0];
    v9 = &v6[32 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void re::ecs2::PolygonFrustumClipper::clipToFrustum(char **a1, void **a2)
{
  unint64_t v4;
  int *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  uint64_t v16;
  float *v17;
  float v18;
  float v19;
  BOOL v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  int v28;
  unint64_t v29;
  __int128 v30;
  char *v31;
  char v32;
  BOOL v33;
  int v34;
  int v35;
  float *v36;
  float *v37;
  float v38;
  float v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  __int128 v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  float v49;
  float v50;
  float v51;
  float v52;
  __int128 v53;
  char *v54;
  __int128 v55;
  float v56;
  uint64_t v57;
  __int128 v58;
  char *v59;
  unint64_t v60;
  __int128 v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  __int128 v69;
  char *v70;
  char *v71;
  char *v72;
  __int128 v73;
  char v74;
  __int128 v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  __int128 v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  int *v88;
  _QWORD *v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  a1[1] = *a1;
  v4 = (((_BYTE *)a2[1] - (_BYTE *)*a2) >> 5) + 7;
  std::vector<re::ecs2::PolygonFrustumClipper::Vertex>::reserve((void **)a1, v4);
  std::vector<re::ecs2::PolygonFrustumClipper::Vertex>::reserve(a2, v4);
  v5 = &re::ecs2::PolygonFrustumClipper::m_planes;
  v89 = a1 + 2;
  do
  {
    v6 = (char *)*a2;
    v7 = (_BYTE *)a2[1] - (_BYTE *)*a2;
    if (v7 != -32)
    {
      v10 = 0;
      v11 = 0;
      v12 = v7 >> 5;
      v13 = *v5;
      v14 = -1;
      v90 = v13;
      v88 = v5;
      do
      {
        v15 = v11;
        if (v12 == v10)
          v16 = 0;
        else
          v16 = v10;
        v17 = (float *)&v6[32 * v16];
        if ((int)v13 > 2)
        {
          v20 = v17[3] <= 0.0;
        }
        else
        {
          v18 = v17[v13];
          v19 = v17[3];
          if (*((_BYTE *)v5 + 4))
          {
            v11 = v18 < v19;
            goto LABEL_18;
          }
          v20 = v18 <= (float)-v19;
        }
        v11 = !v20;
LABEL_18:
        if (v14 == -1 && v11)
        {
          v21 = a1[1];
          v22 = (unint64_t)a1[2];
          if ((unint64_t)v21 >= v22)
          {
            v23 = (v21 - *a1) >> 5;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 59)
              goto LABEL_110;
            v25 = v22 - (_QWORD)*a1;
            if (v25 >> 4 > v24)
              v24 = v25 >> 4;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0)
              v26 = 0x7FFFFFFFFFFFFFFLL;
            else
              v26 = v24;
            if (v26)
              v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::PolygonFrustumClipper::Vertex>>((uint64_t)v89, v26);
            else
              v27 = 0;
            v43 = &v27[32 * v23];
            v44 = *((_OWORD *)v17 + 1);
            *(_OWORD *)v43 = *(_OWORD *)v17;
            *((_OWORD *)v43 + 1) = v44;
            v46 = *a1;
            v45 = a1[1];
            v47 = v43;
            if (v45 != *a1)
            {
              do
              {
                v48 = *((_OWORD *)v45 - 1);
                *((_OWORD *)v47 - 2) = *((_OWORD *)v45 - 2);
                *((_OWORD *)v47 - 1) = v48;
                v47 -= 32;
                v45 -= 32;
              }
              while (v45 != v46);
              goto LABEL_59;
            }
            goto LABEL_60;
          }
LABEL_32:
          v30 = *((_OWORD *)v17 + 1);
          *(_OWORD *)v21 = *(_OWORD *)v17;
          *((_OWORD *)v21 + 1) = v30;
          v31 = v21 + 32;
          goto LABEL_63;
        }
        v28 = !v11;
        if (v12 != v10 && ((!v15 | v28) & 1) == 0)
        {
          v21 = a1[1];
          v29 = (unint64_t)a1[2];
          if ((unint64_t)v21 < v29)
            goto LABEL_32;
          v40 = (v21 - *a1) >> 5;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 59)
            goto LABEL_110;
          v42 = v29 - (_QWORD)*a1;
          if (v42 >> 4 > v41)
            v41 = v42 >> 4;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFE0)
            v26 = 0x7FFFFFFFFFFFFFFLL;
          else
            v26 = v41;
          if (v26)
            v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::PolygonFrustumClipper::Vertex>>((uint64_t)v89, v26);
          else
            v27 = 0;
          v43 = &v27[32 * v40];
          v53 = *((_OWORD *)v17 + 1);
          *(_OWORD *)v43 = *(_OWORD *)v17;
          *((_OWORD *)v43 + 1) = v53;
          v54 = *a1;
          v45 = a1[1];
          v47 = v43;
          if (v45 != *a1)
          {
            do
            {
              v55 = *((_OWORD *)v45 - 1);
              *((_OWORD *)v47 - 2) = *((_OWORD *)v45 - 2);
              *((_OWORD *)v47 - 1) = v55;
              v47 -= 32;
              v45 -= 32;
            }
            while (v45 != v54);
LABEL_59:
            v45 = *a1;
          }
LABEL_60:
          v31 = v43 + 32;
          *a1 = v47;
          a1[1] = v43 + 32;
          a1[2] = &v27[32 * v26];
          if (v45)
            operator delete(v45);
          v13 = v90;
LABEL_63:
          a1[1] = v31;
          goto LABEL_64;
        }
        if (v15 != v11)
        {
          v32 = v15 | v28;
          v33 = (v32 & 1) == 0;
          if ((v32 & 1) != 0)
            v34 = v16;
          else
            v34 = v14;
          if (v33)
            v35 = v16;
          else
            v35 = v14;
          v36 = (float *)&v6[32 * v34];
          v37 = (float *)&v6[32 * v35];
          if ((_DWORD)v13 == 3)
          {
            v38 = v37[3];
            v39 = v36[3];
          }
          else
          {
            v49 = v37[3];
            v50 = v37[v13];
            v51 = v36[3];
            v52 = v36[v13];
            if (*((_BYTE *)v5 + 4))
            {
              v38 = v49 - v50;
              v39 = v51 - v52;
            }
            else
            {
              v38 = v49 + v50;
              v39 = v51 + v52;
            }
          }
          v56 = v38 / (float)(v38 - v39);
          v57 = 0;
          v58 = *((_OWORD *)v37 + 1);
          v91 = *(_OWORD *)v37;
          v92 = v58;
          do
          {
            *(float *)((char *)&v91 + v57 * 4) = *(float *)((char *)&v91 + v57 * 4)
                                               + (float)(v56 * (float)(v36[v57] - v37[v57]));
            ++v57;
          }
          while (v57 != 6);
          v59 = a1[1];
          v60 = (unint64_t)a1[2];
          if ((unint64_t)v59 >= v60)
          {
            v63 = (v59 - *a1) >> 5;
            v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) >> 59)
              goto LABEL_110;
            v65 = v60 - (_QWORD)*a1;
            if (v65 >> 4 > v64)
              v64 = v65 >> 4;
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFE0)
              v66 = 0x7FFFFFFFFFFFFFFLL;
            else
              v66 = v64;
            if (v66)
              v67 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::PolygonFrustumClipper::Vertex>>((uint64_t)v89, v66);
            else
              v67 = 0;
            v68 = &v67[32 * v63];
            v69 = v92;
            *(_OWORD *)v68 = v91;
            *((_OWORD *)v68 + 1) = v69;
            v71 = *a1;
            v70 = a1[1];
            v72 = v68;
            if (v70 != *a1)
            {
              do
              {
                v73 = *((_OWORD *)v70 - 1);
                *((_OWORD *)v72 - 2) = *((_OWORD *)v70 - 2);
                *((_OWORD *)v72 - 1) = v73;
                v72 -= 32;
                v70 -= 32;
              }
              while (v70 != v71);
              v70 = *a1;
            }
            v62 = v68 + 32;
            *a1 = v72;
            a1[1] = v68 + 32;
            a1[2] = &v67[32 * v66];
            if (v70)
              operator delete(v70);
            v13 = v90;
          }
          else
          {
            v61 = v92;
            *(_OWORD *)v59 = v91;
            *((_OWORD *)v59 + 1) = v61;
            v62 = v59 + 32;
          }
          a1[1] = v62;
          v74 = v12 == v10 || !v11;
          if ((v74 & 1) == 0)
          {
            if ((unint64_t)v62 >= *v89)
            {
              v77 = (v62 - *a1) >> 5;
              if ((unint64_t)(v77 + 1) >> 59)
LABEL_110:
                abort();
              v78 = *v89 - (_QWORD)*a1;
              v79 = v78 >> 4;
              if (v78 >> 4 <= (unint64_t)(v77 + 1))
                v79 = v77 + 1;
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFE0)
                v80 = 0x7FFFFFFFFFFFFFFLL;
              else
                v80 = v79;
              if (v80)
                v81 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::PolygonFrustumClipper::Vertex>>((uint64_t)v89, v80);
              else
                v81 = 0;
              v82 = &v81[32 * v77];
              v83 = *((_OWORD *)v17 + 1);
              *(_OWORD *)v82 = *(_OWORD *)v17;
              *((_OWORD *)v82 + 1) = v83;
              v85 = *a1;
              v84 = a1[1];
              v86 = v82;
              if (v84 != *a1)
              {
                do
                {
                  v87 = *((_OWORD *)v84 - 1);
                  *((_OWORD *)v86 - 2) = *((_OWORD *)v84 - 2);
                  *((_OWORD *)v86 - 1) = v87;
                  v86 -= 32;
                  v84 -= 32;
                }
                while (v84 != v85);
                v84 = *a1;
              }
              v76 = v82 + 32;
              *a1 = v86;
              a1[1] = v82 + 32;
              a1[2] = &v81[32 * v80];
              if (v84)
                operator delete(v84);
              v13 = v90;
            }
            else
            {
              v75 = *((_OWORD *)v17 + 1);
              *(_OWORD *)v62 = *(_OWORD *)v17;
              *((_OWORD *)v62 + 1) = v75;
              v76 = v62 + 32;
            }
            a1[1] = v76;
          }
          v5 = v88;
        }
LABEL_64:
        ++v10;
        v6 = (char *)*a2;
        v12 = ((_BYTE *)a2[1] - (_BYTE *)*a2) >> 5;
        v14 = v16;
      }
      while (v12 + 1 > v10);
    }
    *a2 = *a1;
    *a1 = v6;
    v8 = (char *)a2[1];
    a2[1] = a1[1];
    a1[1] = v8;
    v9 = (char *)a2[2];
    a2[2] = a1[2];
    a1[2] = v9;
    if (a2[1] == *a2)
      break;
    a1[1] = *a1;
    v5 += 4;
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::PolygonFrustumClipper::Vertex>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(32 * a2);
}

uint64_t *re::ecs2::allocInfo_CARESortingService(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_175);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_175))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541097C8, 0);
    *(uint64_t *)((char *)&qword_2541097D8 + 6) = 0;
    qword_2541097D8 = 0;
    qword_2541097E8 = 0;
    qword_2541097F0 = 0xFFFFFFFFLL;
    qword_2541097C8 = (uint64_t)&off_24ED7DAA8;
    qword_2541097F8 = (uint64_t)"CARESortingService";
    dword_254109800 = 0;
    unk_254109808 = 0u;
    unk_254109818 = 0u;
    unk_254109828 = 0u;
    qword_254109838 = 0;
    __cxa_guard_release(&_MergedGlobals_175);
  }
  return &qword_2541097C8;
}

void re::ecs2::initInfo_CARESortingService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xE22FB2B0FA7B3404;
  v5[1] = "CARESortingService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_CARESortingService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::ecs2::introspect_CARESortingService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CARESortingService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CARESortingService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CARESortingService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CARESortingService>, this);
}

uint64_t *re::allocInfo_MaterialParametersService(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_176);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_176))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254109848, 0);
    *(uint64_t *)((char *)&qword_254109858 + 6) = 0;
    qword_254109858 = 0;
    qword_254109868 = 0;
    qword_254109870 = 0xFFFFFFFFLL;
    qword_254109848 = (uint64_t)&off_24ED7DAA8;
    qword_254109878 = (uint64_t)"MaterialParametersService";
    dword_254109880 = 0;
    unk_254109888 = 0u;
    unk_254109898 = 0u;
    unk_2541098A8 = 0u;
    qword_2541098B8 = 0;
    __cxa_guard_release(&_MergedGlobals_176);
  }
  return &qword_254109848;
}

void re::initInfo_MaterialParametersService(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x431BF85351479DC8;
  v5[1] = "MaterialParametersService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_MaterialParametersService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::introspect_MaterialParametersService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialParametersService", (uint64_t (*)(re::internal *))re::allocInfo_MaterialParametersService, (re::IntrospectionBase *(*)(void))re::initInfo_MaterialParametersService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::MaterialParametersService>, this);
}

void re::ecs2::introspect_CameraMovementMode(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  StringID v34;
  _QWORD v35[2];
  _QWORD v36[61];

  v2 = atomic_load((unsigned __int8 *)&qword_2541098C8);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_2541098C8);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Fly";
      qword_2541098F0 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = 1;
      *(_QWORD *)(v30 + 16) = "Orbit";
      qword_2541098F8 = v30;
      __cxa_guard_release(&qword_2541098C8);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2541098D0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2541098D0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254109920, "CameraMovementMode", 4, 4, 1, 1);
    qword_254109920 = (uint64_t)&off_24ED7D9E8;
    qword_254109960 = (uint64_t)&re::ecs2::introspect_CameraMovementMode(BOOL)::enumTable;
    dword_254109930 = 9;
    __cxa_guard_release(&qword_2541098D0);
  }
  if ((_MergedGlobals_177 & 1) == 0)
  {
    _MergedGlobals_177 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254109920, a2);
    v32 = 0xB360269A940A05AELL;
    v33 = "CameraMovementMode";
    v36[0] = 208862;
    v36[1] = "int";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v36);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v36);
      v6 = (unsigned int *)qword_254109960;
      v35[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v34.var0 = 2 * v12;
            v34.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v16, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v34.var0 = 2 * v20;
              v34.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v24, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v25);
      xmmword_254109940 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "CameraMovementMode", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t *re::ecs2::allocInfo_CameraMovementComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2541098D8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541098D8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254109968, 0);
    *(uint64_t *)((char *)&qword_254109978 + 6) = 0;
    qword_254109978 = 0;
    qword_254109988 = 0;
    qword_254109990 = 0xFFFFFFFFLL;
    qword_254109968 = (uint64_t)&off_24ED7DAA8;
    qword_254109998 = (uint64_t)"CameraMovementComponent";
    dword_2541099A0 = 0;
    xmmword_2541099A8 = 0u;
    unk_2541099B8 = 0u;
    xmmword_2541099C8 = 0u;
    qword_2541099D8 = 0;
    __cxa_guard_release(&qword_2541098D8);
  }
  return &qword_254109968;
}

void re::ecs2::initInfo_CameraMovementComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;

  v21[0] = 0x488E787C685DE892;
  v21[1] = "CameraMovementComponent";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  v4 = atomic_load((unsigned __int8 *)&qword_2541098E0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541098E0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254109900 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "isEnabled";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1900000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254109908 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      re::ecs2::introspect_CameraMovementMode((re::ecs2 *)v13, v14);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "mode";
      *(_QWORD *)(v15 + 16) = &qword_254109920;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x1C00000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254109910 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_float((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "moveSpeedMultiplier";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x2000000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_254109918 = v19;
      __cxa_guard_release(&qword_2541098E0);
    }
  }
  *((_QWORD *)this + 2) = 0xD000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254109900;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::CameraMovementComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::CameraMovementComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::CameraMovementComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::CameraMovementComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v20 = v22;
}

double re::internal::defaultConstruct<re::ecs2::CameraMovementComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::CameraMovementComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::CameraMovementComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::CameraMovementComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_CameraMovementComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CameraMovementComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CameraMovementComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CameraMovementComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CameraMovementComponent>, this);
}

uint64_t *re::ecs2::allocInfo_CameraMovementSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541098E8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541098E8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541099E0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541099F0 = 0;
    qword_254109A00 = 0;
    qword_254109A08 = 0xFFFFFFFFLL;
    qword_2541099E0 = (uint64_t)&off_24ED7DAA8;
    qword_254109A10 = (uint64_t)"CameraMovementSystem";
    dword_254109A18 = 0;
    xmmword_254109A20 = 0u;
    unk_254109A30 = 0u;
    xmmword_254109A40 = 0u;
    qword_254109A50 = 0;
    __cxa_guard_release(&qword_2541098E8);
  }
  return &qword_2541099E0;
}

void re::ecs2::initInfo_CameraMovementSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x5BF0EA45CF417CC6;
  v5[1] = "CameraMovementSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_CameraMovementSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::CameraMovementSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::CameraMovementSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::CameraMovementSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::CameraMovementSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::CameraMovementSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::CameraMovementSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::CameraMovementSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  *(_QWORD *)(a3 + 96) = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::ecs2::System::System(a3, 1);
  *v3 = &off_24ED5AB48;
}

void *re::internal::defaultDestruct<re::ecs2::CameraMovementSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::CameraMovementSystem>(uint64_t a1)
{
  _QWORD *v1;

  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::ecs2::System::System(a1, 1);
  *v1 = &off_24ED5AB48;
}

void *re::internal::defaultDestructV2<re::ecs2::CameraMovementSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_CameraMovementSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CameraMovementSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CameraMovementSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CameraMovementSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CameraMovementSystem>, this);
}

float32x4_t re::ecs2::CameraMovementComponent::MayaModeParameters::computePose@<Q0>(float32x4_t *this@<X0>, float32x4_t *a2@<X8>)
{
  __float2 v4;
  float32x4_t sinval_low;
  __float2 v6;
  unint64_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x4_t result;
  float32x4_t v20;

  v4 = __sincosf_stret(this[2].f32[1] * 0.5);
  sinval_low = (float32x4_t)LODWORD(v4.__sinval);
  sinval_low.i32[3] = LODWORD(v4.__cosval);
  v20 = sinval_low;
  v6 = __sincosf_stret(this[2].f32[2] * 0.5);
  LODWORD(v7) = 0;
  HIDWORD(v7) = LODWORD(v6.__sinval);
  v8 = (float32x4_t)v7;
  v8.i32[3] = LODWORD(v6.__cosval);
  v9 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)LODWORD(v4.__sinval), (int32x4_t)LODWORD(v4.__sinval)), (int8x16_t)LODWORD(v4.__sinval), 0xCuLL), vnegq_f32((float32x4_t)v7)), (float32x4_t)LODWORD(v4.__sinval), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL));
  v10 = vmulq_f32(v20, v8);
  v11 = vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), v9, 0xCuLL), (float32x4_t)LODWORD(v4.__sinval), v6.__cosval), (float32x4_t)v7, v4.__cosval);
  v12 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL);
  v13 = vnegq_f32(v11);
  v14 = vmulq_f32(v11, (float32x4_t)xmmword_2261176C0);
  v11.f32[3] = -(float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]- (float)(v6.__cosval * v4.__cosval));
  v15 = vmlaq_f32(v14, (float32x4_t)xmmword_226108EE0, v12);
  v16 = (int8x16_t)vaddq_f32(v15, v15);
  v17 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), v16, 0xCuLL);
  v18 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), (int8x16_t)v17, 0xCuLL), v13), v17, v12);
  result = vsubq_f32(this[1], vmulq_n_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v17, v11.f32[3]), (float32x4_t)xmmword_226108EE0), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), v18, 0xCuLL)), this[2].f32[0]));
  *a2 = result;
  a2[1] = v11;
  return result;
}

float32x4_t *re::ecs2::CameraMovementComponent::lookAt(float32x4_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  float32x4_t *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t *v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float v13;
  float32x4_t v14;
  int32x4_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x4_t v18;
  float v19;
  float32x4_t v20;
  _QWORD *v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24[2];
  _QWORD v25[2];
  float32x4_t v26;
  float32x4_t v27;

  v5 = result[1].i64[0];
  if (v5)
  {
    v6 = result;
    v7.i64[0] = a4;
    v7.i64[1] = a5;
    v8.i64[0] = a2;
    v8.i64[1] = a3;
    v9 = result + 9;
    result[10].i64[0] = a4;
    result[10].i64[1] = a5;
    v10 = vsubq_f32(v7, v8);
    v11 = vmulq_f32(v10, v10);
    v11.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).u64[0];
    v11.f32[0] = sqrtf(v11.f32[0]);
    result[11].i32[0] = v11.i32[0];
    v23 = vdivq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0));
    v12 = vmulq_f32(v23, (float32x4_t)xmmword_2260E5F20);
    v13 = acosf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0]);
    v14 = v23;
    v14.i32[1] = 0;
    v15 = (int32x4_t)vmulq_f32(v14, v14);
    v15.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v15, 2), vadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.i8, 1))).u32[0];
    v6[11].f32[1] = 1.5708 - v13;
    v16 = vrsqrte_f32((float32x2_t)v15.u32[0]);
    v17 = vmul_f32(v16, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(v16, v16)));
    v22 = vmulq_n_f32(v14, vmul_f32(v17, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(v17, v17))).f32[0]);
    v18 = vmulq_f32(v22, (float32x4_t)xmmword_226108EE0);
    v19 = acosf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]);
    v20 = vmulq_f32(vmlaq_f32(vmulq_f32(v22, (float32x4_t)xmmword_2261176C0), (float32x4_t)xmmword_226108EE0, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL)), (float32x4_t)xmmword_2260E5F10);
    if (vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), v20)).f32[0] >= 0.0)v19 = -v19;
    v6[11].f32[2] = v19;
    v21 = *(_QWORD **)(v5 + 240);
    if (!v21)
      v21 = (_QWORD *)re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v5 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    re::ecs2::CameraMovementComponent::MayaModeParameters::computePose(v9, v24);
    v25[0] = 0x3F8000003F800000;
    v25[1] = 1065353216;
    v26 = v24[1];
    v27 = v24[0];
    re::ecs2::TransformComponent::setWorldSRT((uint64_t)v21, (uint64_t)v25, 0);
    return (float32x4_t *)re::ecs2::Component::markDirty(v21);
  }
  return result;
}

uint64_t re::ServiceLocator::serviceOrNull<re::InputService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::InputService>(void)::info = re::introspect_InputService(0);
  }
  v3 = re::introspect<re::InputService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

_QWORD *re::ecs2::CameraMovementComponent::rotateFlyModeImmediate(re::ecs2::CameraMovementComponent *this, float a2, float a3)
{
  uint64_t v6;
  uint64_t v7;
  int8x16_t v8;
  float32x2_t v9;
  float32x2_t v10;
  int8x16_t v14;
  float32x4_t v19;
  __float2 v20;
  int32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  _QWORD *v26;
  float32x4_t v28;
  float v29;
  float32x4_t v30;
  float32x4_t v31;
  float v32;
  float32x4_t v33;
  __int128 v34;
  int8x16_t v35;
  __int128 v36;

  v6 = *((_QWORD *)this + 2);
  v7 = *(_QWORD *)(v6 + 240);
  if (!v7)
    v7 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v6 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (*(_QWORD *)(v7 + 16))
  {
    re::ecs2::TransformComponent::worldSRT(*(re::ecs2::TransformComponent ***)(v7 + 16), (const re::ecs2::Entity *)1, (uint64_t)&v34);
  }
  else
  {
    v8 = *(int8x16_t *)(v7 + 48);
    v34 = *(_OWORD *)(v7 + 32);
    v35 = v8;
    v36 = *(_OWORD *)(v7 + 64);
  }
  v9 = vrsqrte_f32((float32x2_t)1065353216);
  v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v9, v9)));
  LODWORD(v32) = vmul_f32(v10, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v10, v10))).u32[0];
  v30 = vmulq_n_f32((float32x4_t)xmmword_2260E5F20, v32);
  _KR00_8 = __sincosf_stret((float)(a2 * -0.006) * 0.5);
  *(float32x2_t *)_Q2.f32 = vmul_n_f32(*(float32x2_t *)v30.f32, _KR00_8.__sinval);
  _Q2.i32[2] = vmuls_lane_f32(_KR00_8.__sinval, v30, 2);
  _Q0 = (int32x4_t)v35;
  v14 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q0, _Q0), v35, 0xCuLL), vnegq_f32(_Q2)), (float32x4_t)v35, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q2, (int32x4_t)_Q2), (int8x16_t)_Q2, 0xCuLL));
  v28 = vmlaq_laneq_f32(vmlaq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), v14, 0xCuLL), (float32x4_t)v35, _KR00_8.__cosval), _Q2, (float32x4_t)v35, 3);
  __asm { FMLA            S2, S1, V0.S[3] }
  v19 = v28;
  v19.i32[3] = _Q2.i32[0];
  v29 = _Q2.f32[0];
  v31 = v19;
  v33 = vmulq_n_f32((float32x4_t)xmmword_2260E5F10, v32);
  v20 = __sincosf_stret((float)(a3 * -0.006) * 0.5);
  *(float32x2_t *)v21.i8 = vmul_n_f32(*(float32x2_t *)v33.f32, v20.__sinval);
  v21.i32[2] = vmuls_lane_f32(v20.__sinval, v33, 2);
  v22 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v21, v21), (int8x16_t)v21, 0xCuLL), vnegq_f32(v28)), (float32x4_t)v21, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), (int8x16_t)v28, 0xCuLL));
  v23 = vmlaq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), v22, 0xCuLL), (float32x4_t)v21, v29);
  v21.i32[3] = LODWORD(v20.__cosval);
  v24 = vmlaq_n_f32(v23, v28, v20.__cosval);
  v25 = vmulq_f32((float32x4_t)v21, v31);
  v24.f32[3] = -(float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]- (float)(v29 * v20.__cosval));
  v35 = (int8x16_t)v24;
  v26 = *(_QWORD **)(*((_QWORD *)this + 2) + 240);
  re::ecs2::TransformComponent::setWorldSRT((uint64_t)v26, (uint64_t)&v34, 0);
  return re::ecs2::Component::markDirty(v26);
}

void re::ecs2::CameraMovementSystem::update(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (***v18)(_QWORD);
  uint64_t (***v19)(_QWORD);
  float32x4_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  _QWORD *v51;
  int32x2_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float32x4_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int8x16_t v66;
  float32x4_t v67;
  int8x16_t v68;
  _QWORD *v69;
  float32x4_t *v70;
  uint64_t v71;
  uint64_t v72;
  int32x4_t v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  uint64_t v89;
  re::ecs2::TransformComponent **v90;
  int32x4_t v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float32x4_t v104;
  float v105;
  float32_t v106;
  float32x4_t v107;
  float32x4_t v108;
  uint64_t v109;
  float32x4_t v110;
  __objc2_class_ro *v111;
  __objc2_class_ro *v112;
  uint64_t v113;
  __int8 *v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float v122;
  float32x4_t v123;
  float32x4_t v124;
  int32x2_t v125[2];
  char v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  unint64_t v130[4];
  _QWORD v131[3];
  uint64_t v132;
  float32x4_t v133;
  int32x4_t v134;
  float32x4_t v135;
  simd_float4x4 v136;
  float32x4_t v137;
  int32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  simd_float4x4 v141;
  simd_float4x4 v142;

  if (a2)
  {
    v2 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraMovementComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = 0;
        v5 = *(uint64_t **)(v2 + 40);
        v6 = 8 * v3;
        do
        {
          v7 = *v5++;
          v8 = *(_QWORD *)(v7 + 16);
          if ((*(_BYTE *)(v8 + 288) & 1) != 0)
            v4 = v8;
          v6 -= 8;
        }
        while (v6);
        if (v4)
        {
          v9 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v4 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraMovementComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          if (v9)
          {
            v10 = v9;
            if (*(_BYTE *)(v9 + 25))
            {
              v11 = *(double *)(v9 + 192);
              v12 = CACurrentMediaTime();
              v13 = *(double *)(v10 + 192);
              *(double *)(v10 + 192) = v12;
              if (v11 != 0.0)
              {
                v14 = v12 - v13;
                v122 = v14;
                v15 = *(_QWORD *)(v10 + 16);
                do
                {
                  v16 = v15;
                  v15 = *(_QWORD *)(v15 + 24);
                }
                while (v15);
                v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v16 + 16) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(v16 + 16) + 56));
                v18 = (uint64_t (***)(_QWORD))re::ServiceLocator::serviceOrNull<re::InputService>(v17);
                if (v18)
                {
                  v19 = v18;
                  if (((**v18)(v18) & 1) == 0 && ((*v19)[2](v19) & 1) == 0)
                  {
                    ((void (*)(unint64_t *__return_ptr, uint64_t (***)(_QWORD)))(*v19)[4])(v130, v19);
                    v21 = *(float *)(v10 + 32) + *(float *)(v10 + 32);
                    if ((v130[3] & 0x200000000) != 0)
                      v21 = v21 * 4.0;
                    v22 = 1.0;
                    if ((v130[0] & 0x4000000) != 0)
                      v23 = 1.0;
                    else
                      v23 = 0.0;
                    if ((v130[0] & 0x400000) == 0)
                      v22 = 0.0;
                    v24 = v23 - v22;
                    v25 = (int8x16_t)vdupq_n_s64(v130[0]);
                    v26 = (float32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v25, (int8x16_t)xmmword_2261176D0));
                    __asm { FMOV            V4.2S, #1.0 }
                    v32 = (float32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v25, (int8x16_t)xmmword_2261176E0));
                    *(float32x2_t *)v32.f32 = vsub_f32((float32x2_t)vbic_s8(_D4, (int8x8_t)vmovn_s64((int64x2_t)v26)), (float32x2_t)vbic_s8(_D4, (int8x8_t)vmovn_s64((int64x2_t)v32)));
                    v32.f32[2] = -v24;
                    v33 = vmulq_n_f32(v32, v21);
                    v34 = *(_QWORD *)(v10 + 16);
                    v35 = *(_QWORD *)(v34 + 240);
                    if (!v35)
                    {
                      v119 = v33;
                      v35 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v34 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                      v33 = v119;
                    }
                    v36 = vmulq_n_f32(v33, v122);
                    if (*(_QWORD *)(v35 + 16))
                    {
                      v120 = v36;
                      re::ecs2::TransformComponent::worldSRT(*(re::ecs2::TransformComponent ***)(v35 + 16), (const re::ecs2::Entity *)1, (uint64_t)&v127);
                      v36 = v120;
                    }
                    else
                    {
                      v37 = *(float32x4_t *)(v35 + 48);
                      v127 = *(float32x4_t *)(v35 + 32);
                      v128 = v37;
                      v129 = *(float32x4_t *)(v35 + 64);
                    }
                    v38 = v128.f32[0];
                    v39 = v38 + v38;
                    v40 = v128.f32[2];
                    v20.f32[0] = v40 + v40;
                    v41 = v38 * (float)(v38 + v38);
                    v42 = v128.f32[1] * (float)(v128.f32[1] + v128.f32[1]);
                    v43 = v40 * (float)(v40 + v40);
                    v37.f32[0] = v39 * v128.f32[1];
                    v44 = v39 * v128.f32[2];
                    v45 = (float)(v128.f32[1] + v128.f32[1]) * v128.f32[2];
                    v46 = v39 * v128.f32[3];
                    v26.f32[0] = (float)(v128.f32[1] + v128.f32[1]) * v128.f32[3];
                    v47 = v20.f32[0] * v128.f32[3];
                    v20.f32[0] = 1.0 - (float)(v42 + v43);
                    v20.f32[1] = v37.f32[0] + v47;
                    v20.f32[2] = v44 - v26.f32[0];
                    v37.f32[0] = v37.f32[0] - v47;
                    v37.f32[1] = 1.0 - (float)(v41 + v43);
                    v37.f32[2] = v45 + v46;
                    v26.f32[0] = v44 + v26.f32[0];
                    v26.f32[1] = v45 - v46;
                    v26.f32[2] = 1.0 - (float)(v41 + v42);
                    v48 = vmulq_laneq_f32(v26, v127, 2);
                    v49 = v129;
                    v50 = vaddq_f32(*(float32x4_t *)(v10 + 48), vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(vmulq_n_f32(v20, v127.f32[0]), v36.f32[0]), vmulq_n_f32(v37, *(float *)vshrq_n_u64((uint64x2_t)v127, 0x20uLL).i32), *(float32x2_t *)v36.f32, 1), v48, v36, 2));
                    *(float32x4_t *)(v10 + 48) = v50;
                    v129 = vaddq_f32(v49, v50);
                    v51 = *(_QWORD **)(*(_QWORD *)(v10 + 16) + 240);
                    re::ecs2::TransformComponent::setWorldSRT((uint64_t)v51, (uint64_t)&v127, 0);
                    re::ecs2::Component::markDirty(v51);
                    *(float32x4_t *)(v10 + 48) = vmulq_n_f32(*(float32x4_t *)(v10 + 48), v122 * 0.015);
                    ((void (*)(int32x2_t *__return_ptr, uint64_t (***)(_QWORD)))(*v19)[6])(v125, v19);
                    if (v126)
                    {
                      if (((*v19)[18](v19) & 1) == 0)
                      {
                        v52 = v125[0];
                        v53 = *(_QWORD *)(v10 + 16);
                        do
                        {
                          v54 = v53;
                          v53 = *(_QWORD *)(v53 + 24);
                        }
                        while (v53);
                        v55 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v54 + 16) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(v54 + 16) + 56));
                        v56 = re::ServiceLocator::serviceOrNull<re::InputService>(v55);
                        if (v56)
                        {
                          *(float32x2_t *)v123.f32 = vcvt_f32_s32(v52);
                          (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v56 + 32))(v131);
                          v58 = v132;
                          if ((v132 & 0x200000000) != 0)
                          {
                            v60 = *(_QWORD *)(v10 + 16);
                            v61 = *(_QWORD *)(v60 + 240);
                            if (!v61)
                              v61 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v60 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                            if (*(_QWORD *)(v61 + 16))
                            {
                              re::ecs2::TransformComponent::worldSRT(*(re::ecs2::TransformComponent ***)(v61 + 16), (const re::ecs2::Entity *)1, (uint64_t)&v137);
                            }
                            else
                            {
                              v62 = *(int32x4_t *)(v61 + 48);
                              v137 = *(float32x4_t *)(v61 + 32);
                              v138 = v62;
                              v139 = *(float32x4_t *)(v61 + 64);
                            }
                            v63 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v138, v138), (int8x16_t)v138, 0xCuLL);
                            v64 = vnegq_f32((float32x4_t)v138);
                            if ((v58 & 0x100000000) != 0)
                            {
                              v57.i64[0] = 0;
                              v57.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(-0.005, *(float32x2_t *)v123.f32, 1));
                            }
                            else
                            {
                              *(float32x2_t *)v57.f32 = vmul_f32(*(float32x2_t *)v123.f32, (float32x2_t)0x3BA3D70ABBA3D70ALL);
                              v57.i32[2] = 0;
                            }
                            v65 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v57, (int32x4_t)v57), (int8x16_t)v57, 0xCuLL), v64), v57, v63);
                            v66 = (int8x16_t)vaddq_f32(v65, v65);
                            v67 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v66, (int32x4_t)v66), v66, 0xCuLL);
                            v68 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v67, (int32x4_t)v67), (int8x16_t)v67, 0xCuLL), v64), v67, v63);
                            v139 = vaddq_f32(v139, vaddq_f32(vaddq_f32(v57, vmulq_laneq_f32(v67, (float32x4_t)v138, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v68, (int32x4_t)v68), v68, 0xCuLL)));
                            v69 = *(_QWORD **)(*(_QWORD *)(v10 + 16) + 240);
                            v70 = &v137;
                          }
                          else
                          {
                            v59 = *(_DWORD *)(v10 + 28);
                            if ((v132 & 0x100000000) != 0)
                            {
                              if (v59)
                              {
                                if (v59 != 1)
                                  return;
                                goto LABEL_46;
                              }
                            }
                            else if (v59 != 1)
                            {
                              if (v59)
                                return;
LABEL_46:
                              re::ecs2::CameraMovementComponent::rotateFlyModeImmediate((re::ecs2::CameraMovementComponent *)v10, v123.f32[0], v123.f32[1]);
                              return;
                            }
                            v71 = *(_QWORD *)(v10 + 16);
                            v72 = *(_QWORD *)(v71 + 240);
                            if (!v72)
                              v72 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v71 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                            if (*(_QWORD *)(v72 + 16))
                            {
                              re::ecs2::TransformComponent::worldSRT(*(re::ecs2::TransformComponent ***)(v72 + 16), (const re::ecs2::Entity *)1, (uint64_t)&v133);
                            }
                            else
                            {
                              v73 = *(int32x4_t *)(v72 + 48);
                              v133 = *(float32x4_t *)(v72 + 32);
                              v134 = v73;
                              v135 = *(float32x4_t *)(v72 + 64);
                            }
                            v74 = *(float *)v134.i32;
                            v75 = v74 + v74;
                            v76 = *(float *)&v134.i32[2];
                            v77 = v76 + v76;
                            v78 = v74 * (float)(v74 + v74);
                            v79 = *(float *)&v134.i32[1] * (float)(*(float *)&v134.i32[1] + *(float *)&v134.i32[1]);
                            v80 = v76 * (float)(v76 + v76);
                            v81 = v75 * *(float *)&v134.i32[1];
                            v82 = v75 * *(float *)&v134.i32[2];
                            v83 = (float)(*(float *)&v134.i32[1] + *(float *)&v134.i32[1]) * *(float *)&v134.i32[2];
                            v84 = v75 * *(float *)&v134.i32[3];
                            v85 = (float)(*(float *)&v134.i32[1] + *(float *)&v134.i32[1]) * *(float *)&v134.i32[3];
                            v86.i32[3] = 0;
                            v86.f32[0] = 1.0 - (float)(v79 + v80);
                            v86.f32[1] = v81 + (float)(v77 * *(float *)&v134.i32[3]);
                            v87.i32[3] = 0;
                            v86.f32[2] = v82 - v85;
                            v88.i32[3] = 0;
                            v88.f32[0] = v81 - (float)(v77 * *(float *)&v134.i32[3]);
                            v88.f32[1] = 1.0 - (float)(v78 + v80);
                            v88.f32[2] = v83 + v84;
                            v87.f32[0] = v82 + v85;
                            v87.f32[1] = v83 - v84;
                            v87.f32[2] = 1.0 - (float)(v78 + v79);
                            v118 = vmulq_n_f32(v88, *(float *)vshrq_n_u64((uint64x2_t)v133, 0x20uLL).i32);
                            v121 = vmulq_n_f32(v86, v133.f32[0]);
                            v117 = vmulq_laneq_f32(v87, v133, 2);
                            re::ecs2::CameraMovementComponent::rotateFlyModeImmediate((re::ecs2::CameraMovementComponent *)v10, v123.f32[0], v123.f32[1]);
                            v89 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 240);
                            v90 = *(re::ecs2::TransformComponent ***)(v89 + 16);
                            if (v90)
                            {
                              re::ecs2::TransformComponent::worldSRT(v90, (const re::ecs2::Entity *)1, (uint64_t)&v137);
                            }
                            else
                            {
                              v91 = *(int32x4_t *)(v89 + 48);
                              v137 = *(float32x4_t *)(v89 + 32);
                              v138 = v91;
                              v139 = *(float32x4_t *)(v89 + 64);
                            }
                            v133 = v137;
                            v134 = v138;
                            v135 = v139;
                            v92 = *(float *)v138.i32;
                            v93 = v92 + v92;
                            v94 = *(float *)&v138.i32[2];
                            v95 = v94 + v94;
                            v96 = v92 * (float)(v92 + v92);
                            v97 = *(float *)&v138.i32[1] * (float)(*(float *)&v138.i32[1] + *(float *)&v138.i32[1]);
                            v98 = v94 * (float)(v94 + v94);
                            v99 = v93 * *(float *)&v138.i32[1];
                            v100 = v93 * *(float *)&v138.i32[2];
                            v101 = (float)(*(float *)&v138.i32[1] + *(float *)&v138.i32[1]) * *(float *)&v138.i32[2];
                            v102 = (float)(*(float *)&v138.i32[1] + *(float *)&v138.i32[1]) * *(float *)&v138.i32[3];
                            v103 = v95 * *(float *)&v138.i32[3];
                            v104.i32[3] = 0;
                            v104.f32[0] = 1.0 - (float)(v97 + v98);
                            v104.f32[1] = (float)(v93 * *(float *)&v138.i32[1]) + v103;
                            v104.f32[2] = (float)(v93 * *(float *)&v138.i32[2]) - v102;
                            v105 = v93 * *(float *)&v138.i32[3];
                            v106 = 1.0 - (float)(v96 + v98);
                            v107.i32[3] = 0;
                            v107.f32[0] = v99 - v103;
                            v107.f32[1] = v106;
                            v107.f32[2] = v101 + v105;
                            v108.i32[3] = 0;
                            v108.f32[0] = v100 + v102;
                            v108.f32[1] = v101 - v105;
                            v108.f32[2] = 1.0 - (float)(v96 + v97);
                            v124 = vmulq_n_f32(v107, *(float *)vshrq_n_u64((uint64x2_t)v137, 0x20uLL).i32);
                            v115 = vmulq_laneq_f32(v108, v137, 2);
                            v116 = vmulq_n_f32(v104, v137.f32[0]);
                            v141.columns[3] = (simd_float4)xmmword_2260E5D70;
                            v141.columns[1] = (simd_float4)v118;
                            v141.columns[0] = (simd_float4)v121;
                            v141.columns[2] = (simd_float4)v117;
                            v142 = __invert_f4(v141);
                            v109 = 0;
                            v136 = v142;
                            do
                            {
                              *(float32x4_t *)((char *)&v137 + v109 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v116, COERCE_FLOAT(*(_OWORD *)&v136.columns[v109])), v124, *(float32x2_t *)v136.columns[v109].f32, 1), v115, (float32x4_t)v136.columns[v109], 2), (float32x4_t)xmmword_2260E5D70, (float32x4_t)v136.columns[v109], 3);
                              ++v109;
                            }
                            while (v109 != 4);
                            v110 = vaddq_f32(v140, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v137, v135.f32[0]), (float32x4_t)v138, *(float32x2_t *)v135.f32, 1), v139, v135, 2));
                            v135 = vdivq_f32(v110, (float32x4_t)vdupq_laneq_s32((int32x4_t)v110, 3));
                            v69 = *(_QWORD **)(*(_QWORD *)(v10 + 16) + 240);
                            v70 = &v133;
                          }
                          re::ecs2::TransformComponent::setWorldSRT((uint64_t)v69, (uint64_t)v70, 0);
                          re::ecs2::Component::markDirty(v69);
                          return;
                        }
                        v111 = re::introspect<re::InputService>();
                        re::StringID::invalid((re::StringID *)&v136);
                        re::internal::missingServiceErrorMessage((re::internal *)v111, (const re::IntrospectionBase *)&v136, (re::DynamicString *)&v137);
                        re::DynamicString::~DynamicString((re::DynamicString *)&v137);
                        re::StringID::~StringID((re::StringID *)&v136);
                        v112 = re::introspect<re::InputService>();
                        re::StringID::invalid((re::StringID *)&v136);
                        re::internal::missingServiceErrorMessage((re::internal *)v112, (const re::IntrospectionBase *)&v136, (re::DynamicString *)&v137);
                        if ((v137.i8[8] & 1) != 0)
                          v114 = (__int8 *)v138.i64[0];
                        else
                          v114 = &v137.i8[9];
                        re::internal::assertLog((re::internal *)5, v113, "assertion failure: '%s' (%s:line %i) %s", "service", "service", 69, v114);
                        re::DynamicString::~DynamicString((re::DynamicString *)&v137);
                        re::StringID::~StringID((re::StringID *)&v136);
                        _os_crash();
                        __break(1u);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void re::ecs2::CameraMovementSystem::~CameraMovementSystem(re::ecs2::CameraMovementSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::CameraMovementSystem::typeInfo(re::ecs2::CameraMovementSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CameraMovementSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CameraMovementSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CameraMovementSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CameraMovementSystem>, 0);
}

double re::make::shared::unsafelyInplace<re::ecs2::CameraMovementComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 24) = 256;
  *(_QWORD *)v1 = &off_24ED5A280;
  *(_QWORD *)(v1 + 28) = 0x3F80000000000000;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = xmmword_22610D450;
  *(_QWORD *)(v1 + 80) = 1065353216;
  result = 0.0;
  *(_QWORD *)(v1 + 96) = 0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_QWORD *)(v1 + 128) = 0xBF00000041200000;
  *(_DWORD *)(v1 + 136) = -1071644672;
  *(_QWORD *)(v1 + 144) = 0;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_QWORD *)(v1 + 176) = 0xBF00000041200000;
  *(_DWORD *)(v1 + 184) = -1071644672;
  *(_QWORD *)(v1 + 192) = 0;
  *(_BYTE *)(v1 + 200) = 0;
  return result;
}

id re::internal::defaultRetain<re::ecs2::CameraMovementSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::CameraMovementSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

__objc2_class_ro *re::introspect<re::InputService>()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<re::InputService>(void)::info = re::introspect_InputService(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[438];
}

uint64_t *re::ecs2::allocInfo_ImmersiveSpaceTrackerComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_178);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_178))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254109A70, 0);
    *(uint64_t *)((char *)&qword_254109A80 + 6) = 0;
    qword_254109A80 = 0;
    qword_254109A90 = 0;
    qword_254109A98 = 0xFFFFFFFFLL;
    qword_254109A70 = (uint64_t)&off_24ED7DAA8;
    qword_254109AA0 = (uint64_t)"ImmersiveSpaceTrackerComponent";
    dword_254109AA8 = 0;
    unk_254109AB0 = 0u;
    unk_254109AC0 = 0u;
    unk_254109AD0 = 0u;
    qword_254109AE0 = 0;
    __cxa_guard_release(&_MergedGlobals_178);
  }
  return &qword_254109A70;
}

void re::ecs2::initInfo_ImmersiveSpaceTrackerComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0xE194A93363A863E0;
  v10[1] = "ImmersiveSpaceTrackerComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_254109A68);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254109A68);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254109A60 = v8;
      __cxa_guard_release(&qword_254109A68);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254109A60;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ImmersiveSpaceTrackerComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ImmersiveSpaceTrackerComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ImmersiveSpaceTrackerComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ImmersiveSpaceTrackerComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::ImmersiveSpaceTrackerComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED5A300;
}

void *re::internal::defaultDestruct<re::ecs2::ImmersiveSpaceTrackerComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::ImmersiveSpaceTrackerComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED5A300;
}

void *re::internal::defaultDestructV2<re::ecs2::ImmersiveSpaceTrackerComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ImmersiveSpaceTrackerComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ImmersiveSpaceTrackerComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ImmersiveSpaceTrackerComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ImmersiveSpaceTrackerComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ImmersiveSpaceTrackerComponent>, this);
}

uint64_t *re::ecs2::allocInfo_VisualProxyScopeComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_179);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_179))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254109B20, 0);
    *(uint64_t *)((char *)&qword_254109B30 + 6) = 0;
    qword_254109B30 = 0;
    qword_254109B40 = 0;
    qword_254109B48 = 0xFFFFFFFFLL;
    qword_254109B20 = (uint64_t)&off_24ED7DAA8;
    qword_254109B50 = (uint64_t)"VisualProxyScopeComponent";
    dword_254109B58 = 0;
    unk_254109B60 = 0u;
    unk_254109B70 = 0u;
    unk_254109B80 = 0u;
    qword_254109B90 = 0;
    __cxa_guard_release(&_MergedGlobals_179);
  }
  return &qword_254109B20;
}

void re::ecs2::initInfo_VisualProxyScopeComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x37629D0D0C28E72ELL;
  v10[1] = "VisualProxyScopeComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_254109AF8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254109AF8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254109AF0 = v8;
      __cxa_guard_release(&qword_254109AF8);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254109AF0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VisualProxyScopeComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VisualProxyScopeComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VisualProxyScopeComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VisualProxyScopeComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::VisualProxyScopeComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED5A380;
  *(_DWORD *)(v3 + 28) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::VisualProxyScopeComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::VisualProxyScopeComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED5A380;
  *(_DWORD *)(v1 + 28) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::VisualProxyScopeComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_VisualProxyScopeComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VisualProxyScopeComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VisualProxyScopeComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VisualProxyScopeComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VisualProxyScopeComponent>, this);
}

uint64_t *re::ecs2::allocInfo_VisualProxyScopeTraceComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254109B00);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254109B00))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254109B98, 0);
    *(uint64_t *)((char *)&qword_254109BA8 + 6) = 0;
    qword_254109BA8 = 0;
    qword_254109BB8 = 0;
    qword_254109BC0 = 0xFFFFFFFFLL;
    qword_254109B98 = (uint64_t)&off_24ED7DAA8;
    qword_254109BC8 = (uint64_t)"VisualProxyScopeTraceComponent";
    dword_254109BD0 = 0;
    unk_254109BD8 = 0u;
    unk_254109BE8 = 0u;
    unk_254109BF8 = 0u;
    qword_254109C08 = 0;
    __cxa_guard_release(&qword_254109B00);
  }
  return &qword_254109B98;
}

void re::ecs2::initInfo_VisualProxyScopeTraceComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x4F17B999577D45BCLL;
  v10[1] = "VisualProxyScopeTraceComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_254109B10);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254109B10);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254109B08 = v8;
      __cxa_guard_release(&qword_254109B10);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254109B08;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VisualProxyScopeTraceComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VisualProxyScopeTraceComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VisualProxyScopeTraceComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VisualProxyScopeTraceComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::VisualProxyScopeTraceComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_WORD *)(v3 + 24) = 256;
  *(_QWORD *)v3 = &off_24ED5A400;
  *(_DWORD *)(v3 + 28) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::VisualProxyScopeTraceComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::VisualProxyScopeTraceComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 24) = 256;
  *(_QWORD *)v1 = &off_24ED5A400;
  *(_DWORD *)(v1 + 28) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::VisualProxyScopeTraceComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_VisualProxyScopeTraceComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VisualProxyScopeTraceComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VisualProxyScopeTraceComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VisualProxyScopeTraceComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VisualProxyScopeTraceComponent>, this);
}

uint64_t *re::ecs2::allocInfo_VisualProxyScopeSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254109B18);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254109B18))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254109C10, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254109C20 = 0;
    qword_254109C30 = 0;
    qword_254109C38 = 0xFFFFFFFFLL;
    qword_254109C10 = (uint64_t)&off_24ED7DAA8;
    qword_254109C40 = (uint64_t)"VisualProxyScopeSystem";
    dword_254109C48 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254109C80 = 0;
    __cxa_guard_release(&qword_254109B18);
  }
  return &qword_254109C10;
}

void re::ecs2::initInfo_VisualProxyScopeSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xA7D81F4D742C63AALL;
  v5[1] = "VisualProxyScopeSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1B800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_VisualProxyScopeSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VisualProxyScopeSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VisualProxyScopeSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::VisualProxyScopeSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::VisualProxyScopeSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VisualProxyScopeSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VisualProxyScopeSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::VisualProxyScopeSystem *re::internal::defaultConstruct<re::ecs2::VisualProxyScopeSystem>(uint64_t a1, uint64_t a2, re::ecs2::VisualProxyScopeSystem *a3)
{
  return re::ecs2::VisualProxyScopeSystem::VisualProxyScopeSystem(a3);
}

void *re::internal::defaultDestruct<re::ecs2::VisualProxyScopeSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 25);
  a3[20] = off_24ED5ABD0;
  v4 = a3[22];
  if (v4)
  {
    if (a3[23])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[24]);
      a3[23] = 0;
      a3[24] = 0;
    }
    a3[22] = 0;
  }
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::VisualProxyScopeSystem>(_QWORD *a1)
{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 25);
  a1[20] = off_24ED5ABD0;
  v2 = a1[22];
  if (v2)
  {
    if (a1[23])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[24]);
      a1[23] = 0;
      a1[24] = 0;
    }
    a1[22] = 0;
  }
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_VisualProxyScopeSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VisualProxyScopeSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VisualProxyScopeSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VisualProxyScopeSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VisualProxyScopeSystem>, this);
}

BOOL re::ecs2::VisualProxyScopeSystemStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, re::ecs2::ComponentBucketsBase **a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _BOOL4 v15;
  BOOL v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v22, a5, 0);
  v8 = v22;
  v9 = v23;
  v22 = a4;
  v23 = v8;
  v24 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v23);
      v15 = *(_QWORD *)(*(_QWORD *)v14 + 176) == 0;
      if (*(_QWORD *)(*(_QWORD *)v14 + 176))
        v16 = *(_BYTE *)(*(_QWORD *)v14 + 32) == 0;
      else
        v16 = 0;
      if (v16)
        v15 = *(_DWORD *)(*(_QWORD *)v14 + 184) == -1;
      if (*(_BYTE *)(*(_QWORD *)v14 + 32))
        v17 = 2;
      else
        v17 = 3;
      if (v15)
        v18 = 1;
      else
        v18 = v17;
      v19 = v22;
      v20 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v23);
      re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a3, v19, v20, v18);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v23);
    }
    while (v23 != a5 || (unsigned __int16)v24 != 0xFFFF || WORD1(v24) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::VisualProxyScopeSystemStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  const re::ecs2::Entity *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v21, a5, 0);
  v8 = v21;
  v9 = v22;
  v21 = a4;
  v22 = v8;
  v23 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v22);
      {
        v16 = v21;
        v17 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v22);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v16, v17, *(_QWORD *)(a3 + 48));
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v22);
    }
    while (v22 != a5 || (unsigned __int16)v23 != 0xFFFF || WORD1(v23) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::`anonymous namespace'::requiredMeshAssetsLoaded(re::ecs2::_anonymous_namespace_ *this, const re::ecs2::Entity *a2)
{
  re::ecs2::MeshComponentHelper *v3;
  uint64_t result;
  uint64_t v5;
  re::ecs2::_anonymous_namespace_ **v6;
  uint64_t v7;
  re::ecs2::_anonymous_namespace_ *v8;
  BOOL v9;

  v3 = (re::ecs2::MeshComponentHelper *)*((_QWORD *)this + 22);
  if (!v3 || (result = re::ecs2::MeshComponentHelper::areRequiredAssetsLoaded(v3, a2), (_DWORD)result))
  {
    v5 = *((_QWORD *)this + 41);
    if (v5)
    {
      v6 = (re::ecs2::_anonymous_namespace_ **)*((_QWORD *)this + 43);
      v7 = 8 * v5 - 8;
      do
      {
        v8 = *v6++;
        if ((_DWORD)result)
          v9 = v7 == 0;
        else
          v9 = 1;
        v7 -= 8;
      }
      while (!v9);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

BOOL re::ecs2::VisualProxyScopeSystemStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  uint64_t v6;
  __guard *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  re::DynamicString **v15;
  re::DynamicString **v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  _anonymous_namespace_ *v31;
  uint64_t v32;
  uint64_t v33;
  re *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *WeakRetained;
  char *v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  re::DynamicString *v47;
  uint64_t v48;
  CGColor *v49;
  unsigned __int8 *v50;
  int v51;
  CGColorSpace *CGColorSpaceFromWorkingColorGamut;
  CGColor *CopyByMatchingToColorSpace;
  const CGFloat *Components;
  CGFloat Alpha;
  float64x2_t v56;
  os_unfair_lock_s **v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  id v61;
  id v62;
  id v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  uint64_t v69;
  re::ecs2::TransformComponent **v70;
  __int128 v71;
  float *PerspectiveCameraInScene;
  float *OrthographicCameraInScene;
  uint64_t CustomMatrixCameraInScene;
  float v75;
  float v76;
  void *v77;
  id v78;
  id v79;
  id v80;
  float v81;
  float32x4_t v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float32x4_t v92;
  float32x4_t v93;
  unsigned int v94;
  float32x4_t v95;
  __int128 v96;
  uint32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float v101;
  float v102;
  float v103;
  int32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  int8x16_t v108;
  float32x4_t v109;
  int8x16_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float v115;
  uint64_t v116;
  uint64_t v117;
  float32x4_t v118;
  int32x4_t v119;
  float32x2_t v120;
  float32x2_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  int32x4_t v126;
  float32x2_t v127;
  float32x2_t v128;
  float32x4_t v129;
  float v130;
  float32x4_t v131;
  float v132;
  float v133;
  float v134;
  NSObject *v135;
  float32x2_t v136;
  float32x2_t v137;
  float v138;
  BOOL v139;
  BOOL v140;
  float v141;
  unsigned int v142;
  float32x2_t v143;
  float32x2_t v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  const char *v154;
  uint64_t v155;
  _QWORD *v156;
  int *v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _BOOL8 v167;
  uint64_t v169;
  uint64_t v170;
  __guard *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  re::ecs2::EntityComponentCollection *v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t (**v184)(uint64_t, _QWORD, _QWORD, void *, void *);
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  re *v201;
  uint64_t v202;
  __int128 v203;
  float64_t v204;
  float32x4_t v205;
  float32x4_t v206;
  uint64_t v207;
  uint64_t v209;
  float64x2_t v210;
  float v211;
  float32x4_t v212;
  _anonymous_namespace_ *v213;
  re::DynamicString **v214;
  char *v215;
  unsigned int v216;
  re::Allocator *v218;
  re::Allocator *v219;
  unint64_t v221;
  __int128 *v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  unsigned int v226;
  uint64_t v227;
  id v228[2];
  float32x4_t v229;
  void *v230;
  _BYTE v231[24];
  uint64_t v232;
  _BYTE *v233;
  _BYTE v234[24];
  uint64_t v235;
  _BYTE *v236;
  __int128 v237;
  __int128 v238;
  _OWORD v239[2];
  __int128 v240;
  float v241;
  float v242;
  float v243;
  char v244;
  __int128 v245;
  int v246;
  uint64_t v247;
  _BYTE v248[48];
  uint64_t v249;
  float32x4_t v250;
  int v251;
  char v252;
  float v253;
  int v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  int v260;
  _BYTE buf[48];
  __int128 v262;
  uint64_t v263;

  v263 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a3 + 8);
  v8 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v6 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyScopeTraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 24);
    if (v9)
    {
      v10 = *(uint64_t **)(v8 + 40);
      v11 = 8 * v9;
      do
      {
        v12 = *v10++;
        ++*(_DWORD *)(v12 + 28);
        v11 -= 8;
      }
      while (v11);
    }
  }
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 112) + 104);
  if (v14)
  {
    v15 = (re::DynamicString **)re::RenderFrameBox::get(v14 + 344, 0xFFFFFFFFFFFFFFFuLL);
    v13 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v15 = 0;
  }
  v226 = 0;
  v224 = 0u;
  v225 = 0u;
  v227 = 0x7FFFFFFFLL;
  v218 = v15[47];
  v207 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 136) + 24))(*(_QWORD *)(v13 + 136));
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v237, a5, 0);
  v222 = a4;
  v223 = v237;
  v214 = v15;
  if ((_QWORD)v237 == a5 && WORD4(v237) == 0xFFFFLL && (DWORD2(v237) & 0xFFFF0000) == 0xFFFF0000)
  {
    v16 = v15;
    v17 = 0;
    LODWORD(v18) = 0;
    goto LABEL_155;
  }
  v213 = (_anonymous_namespace_ *)(v15 + 479);
  v19 = a1;
  v20 = v207;
  v209 = v6;
  do
  {
    v21 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v223);
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(*(_QWORD *)v21 + 176);
    (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v20 + 8))(&v237, v20, *(_QWORD *)(*(_QWORD *)v21 + 16));
    if ((_BYTE)v237)
      v24 = *((_QWORD *)&v237 + 1);
    else
      v24 = 0;
    v230 = (void *)v24;
    *(_QWORD *)&v238 = 0;
    DWORD2(v238) = 0;
    *(_QWORD *)&v239[0] = 0;
    v237 = (unint64_t)v218;
    re::DynamicArray<re::CameraView>::setCapacity(&v237, 0);
    ++DWORD2(v238);
    *((_QWORD *)&v240 + 1) = 0;
    memset((char *)v239 + 8, 0, 24);
    LODWORD(v240) = 0;
    v25 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v24 ^ (v24 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v24 ^ (v24 >> 30))) >> 27));
    v26 = v25 ^ (v25 >> 31);
    if (!(_QWORD)v224)
    {
      LODWORD(v27) = 0;
LABEL_22:
      v29 = re::HashTable<unsigned long long,re::ecs2::VisualProxyScopeSystemStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent> *,re::ecs2::ComponentBuckets<re::ecs2::VisualProxyCaptureComponent>::BucketIteration,void *)::VisualProxyPerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)&v224, v27, v26, &v230, (uint64_t)&v237);
      ++HIDWORD(v227);
      v30 = v225 + 104 * v29;
      goto LABEL_24;
    }
    v27 = v26 % DWORD2(v225);
    v28 = *(unsigned int *)(*((_QWORD *)&v224 + 1) + 4 * v27);
    if ((_DWORD)v28 == 0x7FFFFFFF)
      goto LABEL_22;
    while (*(_QWORD *)(v225 + 104 * v28 + 16) != v24)
    {
      LODWORD(v28) = *(_DWORD *)(v225 + 104 * v28 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v28 == 0x7FFFFFFF)
        goto LABEL_22;
    }
    v30 = v225 + 104 * v28;
LABEL_24:
    v31 = (_anonymous_namespace_ *)(v30 + 24);
    re::DynamicArray<re::VisualProxyHighFidelityTextureCopyRequest>::deinit((uint64_t)v239 + 8);
    re::DynamicArray<re::CameraView>::deinit((uint64_t)&v237);
    if (*(_BYTE *)(v22 + 32))
    {
      v32 = *(_QWORD *)(v23 + 16);
      v33 = *(_QWORD *)(v22 + 16);
      re::ecs2::VisualCopyHelper::makeVisualCopyEntity((re::ecs2::ECSHelper *)v33, (uint64_t)v31 + 40, v6, *(re::RenderManager **)(*(_QWORD *)(v19 + 8) + 112), v22 + 88, (re::ecs2::Entity **)buf);
      *((_QWORD *)&v238 + 1) = *(_QWORD *)(v22 + 160);
      *(_QWORD *)&v239[0] = 0;
      v34 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v237, v22 + 136);
      *((_QWORD *)&v239[0] + 1) = v32;
      *(_QWORD *)&v239[1] = *(_QWORD *)buf;
      if (*(_QWORD *)buf)
        v34 = (re *)(id)(*(_QWORD *)buf + 8);
      v35 = re::globalAllocators(v34)[2];
      v232 = v35;
      v233 = 0;
      if (v35)
        v36 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, 64, 0);
      else
        v36 = 0;
      *(_QWORD *)v36 = &off_24ED5AD20;
      *(_QWORD *)(v36 + 32) = *((_QWORD *)&v238 + 1);
      *(_QWORD *)(v36 + 40) = 0;
      re::FunctionBase<24ul,void ()(void)>::operator=<24ul>(v36 + 8, (uint64_t)&v237);
      *(_OWORD *)(v36 + 48) = *(_OWORD *)((char *)v239 + 8);
      *(_QWORD *)&v239[1] = 0;
      v233 = (_BYTE *)v36;
      re::DynamicArray<re::Function<void ()(re::FrameCount)>>::add(v213, (uint64_t)v231);
      if (v233)
      {
        (**(void (***)(_BYTE *))v233)(v233);
        if (v233 != v231)
          (*(void (**)(uint64_t))(*(_QWORD *)v232 + 40))(v232);
        v233 = 0;
      }
      if (*(_QWORD *)&v239[1])
      {

        *(_QWORD *)&v239[1] = 0;
      }
      if (*(_QWORD *)&v239[0])
      {
        (***(void (****)(_QWORD))&v239[0])(*(_QWORD *)&v239[0]);
        if (*(__int128 **)&v239[0] != &v237)
          (*(void (**)(_QWORD))(**((_QWORD **)&v238 + 1) + 40))(*((_QWORD *)&v238 + 1));
      }
      re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(v33 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (*(_QWORD *)buf)

      goto LABEL_143;
    }
    v37 = *(_QWORD *)(v22 + 176);
    v38 = *(_QWORD *)(v22 + 16);
    re::CameraView::CameraView((re::CameraView *)&v237, v218);
    if (*(_BYTE *)(v22 + 40))
    {
      WeakRetained = (char *)objc_loadWeakRetained((id *)(v22 + 48));
      v40 = WeakRetained - 8;
      if (!WeakRetained)
        v40 = 0;
    }
    else
    {
      v40 = 0;
    }
    v215 = v40;
    v41 = 1.0;
    if (!*(_BYTE *)(v22 + 32))
    {
      if (v38 && *(_QWORD *)(v38 + 328))
      {
        v42 = *(_QWORD *)re::ecs2::EntityComponentCollection::operator[](v38 + 304, 0);
        v43 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v209 + 56) + 32))(*(_QWORD *)(v209 + 56));
        v44 = re::ServiceLocator::serviceOrNull<re::ecs2::OpacityService>(v43);
        if (v44)
          LODWORD(v41) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 24))(v44, v42);
      }
      else
      {
        if (re::ecs2::VisualProxyComponent::log(void)::onceToken != -1)
          dispatch_once(&re::ecs2::VisualProxyComponent::log(void)::onceToken, &__block_literal_global_12);
        v45 = re::ecs2::VisualProxyComponent::log(void)::log;
        if (os_log_type_enabled((os_log_t)re::ecs2::VisualProxyComponent::log(void)::log, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl(&dword_224FE9000, v45, OS_LOG_TYPE_DEBUG, "Error: VisualProxyCaptureComponent attached to childless entity, which broke app-structure assumption.", buf, 2u);
        }
      }
    }
    v46 = *(_QWORD *)(v19 + 8);
    v47 = v15[47];
    v48 = *(unsigned int *)(v22 + 184);
    memset(v239, 0, 24);
    *((_QWORD *)&v239[1] + 1) = 0x3F80000000000000;
    re::DynamicString::format(v47, (re::Allocator *)"snapshotCamera_%u", (re::DynamicString *)buf, v48);
    re::DynamicString::operator=((re::DynamicString *)&v237, (re::DynamicString *)buf);
    if (*(_QWORD *)buf && (buf[8] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)buf + 40))(*(_QWORD *)buf, *(_QWORD *)&buf[16]);
    v248[41] = 0;
    v250 = 0uLL;
    v251 = 0;
    v49 = *(CGColor **)(v22 + 80);
    if (v49)
    {
      v50 = *(unsigned __int8 **)(*(_QWORD *)(v46 + 112) + 152);
      if (v50)
        v51 = *v50;
      else
        v51 = 0;
      CGColorSpaceFromWorkingColorGamut = (CGColorSpace *)re::ColorHelpers::getCGColorSpaceFromWorkingColorGamut(v51);
      CopyByMatchingToColorSpace = CGColorCreateCopyByMatchingToColorSpace(CGColorSpaceFromWorkingColorGamut, kCGRenderingIntentDefault, v49, 0);
      Components = CGColorGetComponents(CopyByMatchingToColorSpace);
      v210 = *(float64x2_t *)Components;
      v204 = Components[2];
      Alpha = CGColorGetAlpha(CopyByMatchingToColorSpace);
      v56.f64[0] = v204;
      v56.f64[1] = Alpha;
      v250 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v210), v56);
      CGColorRelease(CopyByMatchingToColorSpace);
      CGColorSpaceRelease(CGColorSpaceFromWorkingColorGamut);
    }
    v252 = 1;
    if (v41 > 0.01 && v41 < 1.0)
      v253 = 1.0 / v41;
    v260 = 1 << v48;
    v57 = (os_unfair_lock_s **)(v37 + 32);
    v255 = xmmword_22610BC10;
    v256 = xmmword_2260E5F10;
    v257 = xmmword_2260E5F20;
    v258 = xmmword_2260E5F40;
    v259 = xmmword_2260E5D70;
    v254 = 4;
    v248[40] = 1;
    if (!v215
      || (v58 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v215 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)) == 0)
    {
      v69 = *(_QWORD *)(v38 + 240);
      if (v69)
      {
        v70 = *(re::ecs2::TransformComponent ***)(v69 + 16);
        if (v70)
        {
          re::ecs2::TransformComponent::worldSRT(v70, (const re::ecs2::Entity *)1, (uint64_t)buf);
        }
        else
        {
          v71 = *(_OWORD *)(v69 + 48);
          *(_OWORD *)buf = *(_OWORD *)(v69 + 32);
          *(_OWORD *)&buf[16] = v71;
          *(_OWORD *)&buf[32] = *(_OWORD *)(v69 + 64);
        }
        v212 = *(float32x4_t *)&buf[16];
        v203 = *(_OWORD *)&buf[32];
        v205 = *(float32x4_t *)buf;
      }
      else
      {
        v203 = 0u;
        v205 = (float32x4_t)xmmword_2260EDC60;
        v212 = (float32x4_t)xmmword_2260E5D70;
      }
      PerspectiveCameraInScene = (float *)re::ecs2::PerspectiveCameraComponent::firstPerspectiveCameraInScene(v209);
      if (PerspectiveCameraInScene)
      {
        re::ecs2::PerspectiveCameraComponent::calculateProjection(PerspectiveCameraInScene, (uint64_t)buf, 1.0);
      }
      else
      {
        OrthographicCameraInScene = (float *)re::ecs2::OrthographicCameraComponent::firstOrthographicCameraInScene(v209);
        if (OrthographicCameraInScene)
        {
          re::ecs2::OrthographicCameraComponent::calculateProjection(OrthographicCameraInScene, (uint64_t)buf, 1.0);
        }
        else
        {
          CustomMatrixCameraInScene = re::ecs2::CustomMatrixCameraComponent::firstCustomMatrixCameraInScene(v209);
          if (!CustomMatrixCameraInScene)
          {
            v76 = 65.0;
            goto LABEL_88;
          }
          *(_DWORD *)buf = 0;
          *(_OWORD *)&buf[4] = xmmword_226117740;
          *(_QWORD *)&buf[20] = 0xBDCCCCCD3DCCCCCDLL;
          buf[28] = 0;
          *(_OWORD *)&buf[32] = xmmword_2260E5F40;
          LODWORD(v262) = 1;
          *((_QWORD *)&v262 + 1) = 0;
          re::Projection::setFromMatrix4x4F((uint64_t)buf, CustomMatrixCameraInScene + 256);
        }
      }
      v75 = atan2f((float)(*(float *)&buf[20] - *(float *)&buf[24]) * 0.5, *(float *)&buf[4]);
      v76 = v75 + v75;
LABEL_88:
      re::TextureHandle::metalTexture(v57, buf);
      v77 = *(void **)buf;
      v78 = objc_msgSend(*(id *)buf, sel_width);
      re::TextureHandle::metalTexture(v57, v228);
      v79 = v228[0];
      v80 = objc_msgSend(v228[0], sel_height);
      if (v79)

      if (v77)
      v81 = tanf(v76 * 0.5) * 0.1;
      v82 = v212;
      v83 = (float)(v82.f32[0] + v82.f32[0]) * v82.f32[0];
      v84 = vmuls_lane_f32(v212.f32[1] + v212.f32[1], *(float32x2_t *)v212.f32, 1);
      v85 = vmuls_lane_f32(v212.f32[2] + v212.f32[2], v212, 2);
      v86 = vmuls_lane_f32(v82.f32[0] + v82.f32[0], *(float32x2_t *)v82.f32, 1);
      v87 = vmuls_lane_f32(v82.f32[0] + v82.f32[0], v82, 2);
      v88 = vmuls_lane_f32(v212.f32[1] + v212.f32[1], v212, 2);
      v89 = vmuls_lane_f32(v82.f32[0] + v82.f32[0], v82, 3);
      v90 = vmuls_lane_f32(v212.f32[1] + v212.f32[1], v212, 3);
      v91 = vmuls_lane_f32(v212.f32[2] + v212.f32[2], v212, 3);
      v92.i32[3] = 0;
      v92.f32[0] = 1.0 - (float)(v84 + v85);
      v92.f32[1] = v86 + v91;
      v92.f32[2] = v87 - v90;
      v93.i32[3] = 0;
      v93.f32[0] = v86 - v91;
      v93.f32[1] = 1.0 - (float)(v83 + v85);
      v93.f32[2] = v88 + v89;
      *(float *)&v94 = 1.0 - (float)(v83 + v84);
      v95.f32[0] = v87 + v90;
      v95.f32[1] = v88 - v89;
      v95.i64[1] = v94;
      *(float32x4_t *)buf = vmulq_n_f32(v92, v205.f32[0]);
      *(float32x4_t *)&buf[16] = vmulq_n_f32(v93, *(float *)vshrq_n_u64((uint64x2_t)v205, 0x20uLL).i32);
      v96 = v203;
      HIDWORD(v96) = 1.0;
      *(float32x4_t *)&buf[32] = vmulq_laneq_f32(v95, v205, 2);
      v262 = v96;
      re::ecs2::MeshComponentHelper::computeEntityMeshBounds(v38, 1, (float32x4_t *)buf, 1, (uint64_t)v228);
      v97 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)v228, v229);
      v97.i32[3] = v97.i32[2];
      v15 = v214;
      if ((vmaxvq_u32(v97) & 0x80000000) != 0)
      {
        v6 = v209;
        if (re::ecs2::VisualProxyComponent::log(void)::onceToken != -1)
          dispatch_once(&re::ecs2::VisualProxyComponent::log(void)::onceToken, &__block_literal_global_12);
        v135 = re::ecs2::VisualProxyComponent::log(void)::log;
        if (os_log_type_enabled((os_log_t)re::ecs2::VisualProxyComponent::log(void)::log, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl(&dword_224FE9000, v135, OS_LOG_TYPE_DEBUG, "Empty BBox on the entity; will return an empty render.",
            buf,
            2u);
        }
      }
      else
      {
        v98.i64[0] = 0x3F0000003F000000;
        v98.i64[1] = 0x3F0000003F000000;
        v206 = vmulq_f32(vaddq_f32(*(float32x4_t *)v228, v229), v98);
        v99 = vsubq_f32(v229, *(float32x4_t *)v228);
        v100 = vmulq_f32(v99, v99);
        v101 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v100, 2), vaddq_f32(v100, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v100.f32, 1))).f32[0])* 0.5;
        v102 = atan2f((float)(v81 + v81) * 0.5, 0.1);
        v103 = tanf((float)(v102 + v102) * 0.5);
        v104.i64[0] = 0;
        v104.i32[3] = 0;
        *(float *)&v104.i32[2] = v101 / v103;
        v105 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v212, (int32x4_t)v212), (int8x16_t)v212, 0xCuLL);
        v106 = vnegq_f32(v212);
        v107 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v104, v104), (int8x16_t)v104, 0xCuLL), v106), (float32x4_t)v104, v105);
        v108 = (int8x16_t)vaddq_f32(v107, v107);
        v109 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v108, (int32x4_t)v108), v108, 0xCuLL);
        v110 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v109, (int32x4_t)v109), (int8x16_t)v109, 0xCuLL), v106), v109, v105);
        v111 = vaddq_f32(v206, vaddq_f32(vaddq_f32((float32x4_t)v104, vmulq_laneq_f32(v109, v212, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v110, (int32x4_t)v110), v110, 0xCuLL)));
        v112 = vsubq_f32(v111, v206);
        v113 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v112, (int32x4_t)v112), (int8x16_t)v112, 0xCuLL), (float32x4_t)xmmword_2261027B0), (float32x4_t)xmmword_2260E5F40, v112);
        v114 = vmulq_f32(v113, v113);
        v115 = fabsf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v114.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v114, 2), v114)).f32[0]);
        v116 = 3212836864;
        if (v115 >= 1.0e-10)
          v116 = 0;
        v117 = 0x3F80000000000000;
        if (v115 < 1.0e-10)
          v117 = 0;
        v118.i64[0] = v117;
        v118.i64[1] = v116;
        v119 = (int32x4_t)vmulq_f32(v112, v112);
        v119.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v119, 2), vadd_f32(*(float32x2_t *)v119.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v119.i8, 1))).u32[0];
        v120 = vrsqrte_f32((float32x2_t)v119.u32[0]);
        v121 = vmul_f32(v120, vrsqrts_f32((float32x2_t)v119.u32[0], vmul_f32(v120, v120)));
        v122 = vmulq_n_f32(v112, vmul_f32(v121, vrsqrts_f32((float32x2_t)v119.u32[0], vmul_f32(v121, v121))).f32[0]);
        v123 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v122, (int32x4_t)v122), (int8x16_t)v122, 0xCuLL);
        v124 = vmlaq_f32(vmulq_f32(v123, vnegq_f32(v118)), v122, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v118, (int32x4_t)v118), (int8x16_t)v118, 0xCuLL));
        v125 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v124, (int32x4_t)v124), (int8x16_t)v124, 0xCuLL);
        v126 = (int32x4_t)vmulq_f32(v124, v124);
        v126.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v126.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v126, 2), *(float32x2_t *)v126.i8)).u32[0];
        v127 = vrsqrte_f32((float32x2_t)v126.u32[0]);
        v128 = vmul_f32(v127, vrsqrts_f32((float32x2_t)v126.u32[0], vmul_f32(v127, v127)));
        v129 = vmulq_n_f32(v125, vmul_f32(v128, vrsqrts_f32((float32x2_t)v126.u32[0], vmul_f32(v128, v128))).f32[0]);
        v130 = v129.f32[1];
        v131 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v129, (int32x4_t)v129), (int8x16_t)v129, 0xCuLL), vnegq_f32(v122)), v129, v123);
        v132 = v122.f32[2] + vaddq_f32(v129, v131).f32[0];
        v6 = v209;
        if (v132 >= 0.0)
        {
          v131.f32[0] = sqrtf(v132 + 1.0);
          v129.f32[0] = v131.f32[0] + v131.f32[0];
          v136 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v131.f32[0] + v131.f32[0]));
          v137 = vmul_f32(v136, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v131.f32[0] + v131.f32[0]), v136));
          v138 = vmul_f32(v137, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v131.f32[0] + v131.f32[0]), v137)).f32[0];
          v131.f32[0] = (float)(v131.f32[1] - v122.f32[1]) * v138;
          v133 = (float)(v122.f32[0] - v129.f32[2]) * v138;
          v122.f32[0] = (float)(v129.f32[1] - v131.f32[2]) * v138;
          v134 = v129.f32[0] * 0.25;
        }
        else if (v129.f32[0] < v122.f32[2]
               || (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v129, v131))).u8[0] & 1) != 0)
        {
          v129.f32[0] = 1.0 - v129.f32[0];
          v139 = v131.f32[0] < v122.f32[2];
          v140 = v131.f32[0] < v122.f32[2];
          v141 = sqrtf(v122.f32[2] + (float)(v129.f32[0] - v131.f32[0]));
          *(float *)&v142 = v141 + v141;
          v143 = vrecpe_f32((float32x2_t)v142);
          v144 = vmul_f32(v143, vrecps_f32((float32x2_t)v142, v143));
          v145 = vmul_f32(v144, vrecps_f32((float32x2_t)v142, v144)).f32[0];
          v146 = (float)(v122.f32[0] + v129.f32[2]) * v145;
          v147 = (float)(v122.f32[1] + v131.f32[1]) * v145;
          v148 = *(float *)&v142 * 0.25;
          v149 = (float)(v129.f32[1] - v131.f32[2]) * v145;
          v131.f32[0] = sqrtf((float)(v129.f32[0] - v122.f32[2]) + v131.f32[0]);
          v131.f32[0] = v131.f32[0] + v131.f32[0];
          *(float32x2_t *)v129.f32 = vrecpe_f32((float32x2_t)v131.u32[0]);
          *(float32x2_t *)v129.f32 = vmul_f32(*(float32x2_t *)v129.f32, vrecps_f32((float32x2_t)v131.u32[0], *(float32x2_t *)v129.f32));
          v150 = vmul_f32(*(float32x2_t *)v129.f32, vrecps_f32((float32x2_t)v131.u32[0], *(float32x2_t *)v129.f32)).f32[0];
          v151 = (float)(v130 + v131.f32[2]) * v150;
          v152 = v131.f32[0] * 0.25;
          v153 = (float)(v122.f32[1] + v131.f32[1]) * v150;
          v134 = (float)(v122.f32[0] - v129.f32[2]) * v150;
          if (v139)
            v131.f32[0] = v146;
          else
            v131.f32[0] = v151;
          if (v140)
            v133 = v147;
          else
            v133 = v152;
          if (v140)
            v122.f32[0] = v148;
          else
            v122.f32[0] = v153;
          if (v140)
            v134 = v149;
        }
        else
        {
          v131.f32[0] = sqrtf(v129.f32[0] + (float)((float)(1.0 - v131.f32[0]) - v122.f32[2]));
          v131.f32[0] = v131.f32[0] + v131.f32[0];
          *(float32x2_t *)v129.f32 = vrecpe_f32((float32x2_t)v131.u32[0]);
          *(float32x2_t *)v129.f32 = vmul_f32(*(float32x2_t *)v129.f32, vrecps_f32((float32x2_t)v131.u32[0], *(float32x2_t *)v129.f32));
          v129.f32[0] = vmul_f32(*(float32x2_t *)v129.f32, vrecps_f32((float32x2_t)v131.u32[0], *(float32x2_t *)v129.f32)).f32[0];
          v131.f32[0] = v131.f32[0] * 0.25;
          v133 = (float)(v130 + v131.f32[2]) * v129.f32[0];
          v122.f32[0] = (float)(v122.f32[0] + v129.f32[2]) * v129.f32[0];
          v134 = (float)(v131.f32[1] - v122.f32[1]) * v129.f32[0];
        }
        v131.f32[1] = v133;
        v131.i64[1] = __PAIR64__(LODWORD(v134), v122.u32[0]);
        v239[0] = v111;
        v239[1] = v131;
      }
      LODWORD(v240) = 0;
      *(_QWORD *)((char *)&v240 + 4) = 0x447A00003DCCCCCDLL;
      *((float *)&v240 + 3) = -(float)((float)((float)(unint64_t)v78 / (float)(unint64_t)v80) * v81);
      v241 = (float)((float)(unint64_t)v78 / (float)(unint64_t)v80) * v81;
      v242 = v81;
      v243 = -v81;
      v244 = 0;
      v245 = xmmword_2260E5F40;
      v246 = 1;
      v247 = 0;
      v19 = a1;
      goto LABEL_119;
    }
    v59 = v58;
    re::TextureHandle::metalTexture(v57, buf);
    v60 = *(void **)buf;
    v61 = objc_msgSend(*(id *)buf, sel_width);
    re::TextureHandle::metalTexture(v57, v228);
    v62 = v228[0];
    v63 = objc_msgSend(v228[0], sel_height);
    if (v62)

    v15 = v214;
    if (v60)

    v64 = (float)(unint64_t)v61 / (float)(unint64_t)v63;
    re::ecs2::PerspectiveCameraComponent::calculateWorldPose(v59, 0, (uint64_t)buf);
    v239[0] = *(_OWORD *)buf;
    v239[1] = *(_OWORD *)&buf[16];
    v65 = (float)(*(float *)(v59 + 36) * 3.1416) / 180.0;
    if (*(_DWORD *)(v59 + 40))
    {
      v66 = tanf(v65 * 0.5);
      v67 = atanf(v66 / v64);
      v65 = v67 + v67;
    }
    v19 = a1;
    v6 = v209;
    LODWORD(v240) = 0;
    v246 = 1;
    *(_QWORD *)((char *)&v240 + 4) = *(_QWORD *)(v59 + 28);
    v211 = *((float *)&v240 + 1);
    v68 = tanf(v65 * 0.5);
    v242 = v68 * v211;
    v243 = -(float)(v211 * v68);
    v241 = v64 * (float)(v68 * v211);
    *((float *)&v240 + 3) = -v241;
LABEL_119:
    re::DynamicArray<re::CameraView>::add(v31, (re::DynamicString *)&v237);
    *(_QWORD *)buf = 65290051;
    re::TextureHandle::metalTexture(v57, v228);
    if ((BYTE8(v237) & 1) != 0)
      v154 = (const char *)v238;
    else
      v154 = (const char *)((unint64_t)&v237 | 9);
    re::RenderFrame::specifyScopeLane(v15, (uint64_t *)buf, v228, v154);
    if (v228[0])

    re::TextureHandle::metalTexture(v57, v228);
    *(_QWORD *)&buf[24] = *(_QWORD *)(v22 + 160);
    *(_QWORD *)&buf[32] = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)buf, v22 + 136);
    *(_QWORD *)&buf[40] = v228[0];
    v155 = re::globalAllocators(*(re **)&buf[40])[2];
    v235 = v155;
    v236 = 0;
    if (v155)
      v156 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v155 + 32))(v155, 56, 0);
    else
      v156 = 0;
    v20 = v207;
    *v156 = &off_24ED5ACC8;
    v156[4] = *(_QWORD *)&buf[24];
    v156[5] = 0;
    re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)(v156 + 1), (uint64_t)buf);
    v156[6] = *(_QWORD *)&buf[40];
    *(_QWORD *)&buf[40] = 0;
    v236 = v156;
    re::DynamicArray<re::Function<void ()(re::FrameCount)>>::add(v213, (uint64_t)v234);
    if (v236)
    {
      (**(void (***)(_BYTE *))v236)(v236);
      if (v236 != v234)
        (*(void (**)(uint64_t))(*(_QWORD *)v235 + 40))(v235);
      v236 = 0;
    }
    if (*(_QWORD *)&buf[40])
    {

      *(_QWORD *)&buf[40] = 0;
    }
    if (*(_QWORD *)&buf[32])
    {
      (***(void (****)(_QWORD))&buf[32])(*(_QWORD *)&buf[32]);
      if (*(_BYTE **)&buf[32] != buf)
        (*(void (**)(_QWORD))(**(_QWORD **)&buf[24] + 40))(*(_QWORD *)&buf[24]);
    }
    if (v228[0])

    if (v215)
    re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v249);
    re::DynamicArray<re::RenderGraphFileProvider>::deinit((uint64_t)v248);
    if ((_QWORD)v237 && (BYTE8(v237) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v237 + 40))();
LABEL_143:
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v223);
  }
  while ((_QWORD)v223 != a5 || WORD4(v223) != 0xFFFF || WORD5(v223) != 0xFFFF);
  v17 = v226;
  if (v226)
  {
    v18 = 0;
    v157 = (int *)(v225 + 8);
    while (1)
    {
      v158 = *v157;
      v157 += 26;
      if (v158 < 0)
        break;
      if (v226 == ++v18)
      {
        v16 = v15;
        LODWORD(v18) = v226;
        goto LABEL_155;
      }
    }
    v16 = v15;
  }
  else
  {
    v16 = v15;
    LODWORD(v18) = 0;
  }
LABEL_155:
  if (v17 != (_DWORD)v18)
  {
    v219 = (re::Allocator *)(v16 + 33);
    v169 = v18;
    v170 = v225;
    v216 = v17;
    do
    {
      v172 = v170 + 104 * v169;
      re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(*(re::ecs2::RenderingSubsystem **)(a3 + 8), *(const re::ecs2::Scene **)(v172 + 16), v16, v228);
      if (*(_QWORD *)(v172 + 40))
      {
        *(_QWORD *)&v237 = (unint64_t)v228[0] >> 1;
        v173 = re::RenderFrameData::stream(v219, (const re::WeakStringID *)&v237);
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v173 + 48) + 616))(*(_QWORD *)(v173 + 48), v172 + 24);
        v174 = *(_QWORD *)(a3 + 8);
        v175 = *(unsigned __int16 *)(v171[475] + 16);
        if (*(_QWORD *)(v174 + 224) > v175)
        {
          v176 = *(_QWORD *)(*(_QWORD *)(v174 + 240) + 8 * v175);
          if (v176)
          {
            v177 = *(_QWORD *)(v176 + 24);
            if (v177)
            {
              v178 = *(uint64_t **)(v176 + 40);
              v179 = 8 * v177;
              do
              {
                v180 = *v178++;
                v181 = (re::ecs2::EntityComponentCollection *)(*(_QWORD *)(v180 + 16) + 32);
                re::ecs2::EntityComponentCollection::remove(v181, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                re::ecs2::EntityComponentCollection::remove(v181, (const re::ecs2::ComponentTypeBase *)v171[475]);
                *(_DWORD *)(re::ecs2::EntityComponentCollection::getOrAdd(v181, (const re::ecs2::ComponentTypeBase *)v7[476])+ 28) = 0;
                v179 -= 8;
              }
              while (v179);
            }
          }
        }
      }
      v182 = (uint64_t *)(v172 + 64);
      if (v182[2])
      {
        v221 = (unint64_t)v228[0] >> 1;
        v183 = re::RenderFrameData::stream(v219, (const re::WeakStringID *)&v221);
        v184 = (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v183, (uint64_t *)&v230);
        if (!v184)
        {
          v199 = *(_QWORD *)(*(_QWORD *)(v183 + 48) + 8);
          v200 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v199 + 32))(v199, 56, 8);
          *(_QWORD *)v200 = 0;
          *(_QWORD *)(v200 + 8) = 0;
          *(_DWORD *)(v200 + 16) = 1;
          *(_QWORD *)(v200 + 32) = 0;
          *(_QWORD *)(v200 + 40) = 0;
          *(_QWORD *)(v200 + 24) = 0;
          *(_DWORD *)(v200 + 48) = 0;
          v201 = (re *)re::BucketArray<re::VisualProxyHighFidelityHandlerData,4ul>::init(v200, v199, 1uLL);
          v202 = re::globalAllocators(v201)[2];
          *(_QWORD *)buf = &off_24ED5ADB8;
          *(_QWORD *)&buf[8] = v199;
          *(_QWORD *)&buf[24] = v202;
          *(_QWORD *)&buf[32] = buf;
          *((_QWORD *)&v237 + 1) = v200;
          *(_QWORD *)&v237 = std::__any_imp::_SmallHandler<re::BucketArray<re::VisualProxyHighFidelityHandlerData,4ul> *>::__handle[abi:nn180100];
          *((_QWORD *)&v239[1] + 1) = v202;
          *(_QWORD *)&v240 = 0;
          re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v239, (uint64_t)buf);
          v184 = (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::addNew(v183, (uint64_t *)&v230, (re *)&v237);
          if ((_QWORD)v240)
          {
            v222 = &v237;
            (*(void (**)(_QWORD, __int128 **))(*(_QWORD *)v240 + 16))(v240, &v222);
            if ((_QWORD)v240)
            {
              (**(void (***)(_QWORD))v240)(v240);
              if ((_OWORD *)v240 != v239)
                (*(void (**)(_QWORD))(**((_QWORD **)&v239[1] + 1) + 40))(*((_QWORD *)&v239[1] + 1));
              *(_QWORD *)&v240 = 0;
            }
          }
          if ((_QWORD)v237)
            ((void (*)(int))v237)(0);
          if (*(_QWORD *)&buf[32])
          {
            (***(void (****)(_QWORD))&buf[32])(*(_QWORD *)&buf[32]);
            if (*(_BYTE **)&buf[32] != buf)
              (*(void (**)(_QWORD))(**(_QWORD **)&buf[24] + 40))(*(_QWORD *)&buf[24]);
          }
        }
        v187 = *v182;
        v186 = v182[1];
        v188 = v182[2];
        *v182 = 0;
        v182[1] = 0;
        v182[2] = 0;
        v189 = v182[4];
        v182[4] = 0;
        ++*((_DWORD *)v182 + 6);
        v190 = *(_QWORD *)(v185 + 40);
        v191 = *(_QWORD *)(v185 + 8);
        if (v190 + 1 > 4 * v191)
        {
          re::BucketArray<re::VisualProxyHighFidelityHandlerData,4ul>::setBucketsCapacity((_QWORD *)v185, (v190 + 4) >> 2);
          v191 = *(_QWORD *)(v185 + 8);
        }
        if (v191 <= v190 >> 2)
        {
          v222 = 0;
          v240 = 0u;
          v238 = 0u;
          memset(v239, 0, sizeof(v239));
          v237 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "operator[]";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 858;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v190 >> 2;
          *(_WORD *)&buf[28] = 2048;
          *(_QWORD *)&buf[30] = v191;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_207:
          re::internal::assertLog((re::internal *)4, v195, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
          _os_crash();
          __break(1u);
        }
        if ((*(_BYTE *)(v185 + 16) & 1) != 0)
          v192 = v185 + 24;
        else
          v192 = *(_QWORD *)(v185 + 32);
        v193 = *(_QWORD *)(v192 + 8 * (v190 >> 2));
        ++*(_QWORD *)(v185 + 40);
        ++*(_DWORD *)(v185 + 48);
        v194 = v193 + 40 * (v190 & 3);
        *(_QWORD *)v194 = v187;
        *(_QWORD *)&v237 = 0;
        *(_QWORD *)(v194 + 8) = v186;
        *((_QWORD *)&v237 + 1) = 0;
        *(_QWORD *)(v194 + 16) = v188;
        *(_QWORD *)&v238 = 0;
        *(_QWORD *)(v194 + 32) = v189;
        *(_QWORD *)&v239[0] = 0;
        DWORD2(v238) = 2;
        *(_DWORD *)(v194 + 24) = 1;
        re::DynamicArray<re::VisualProxyHighFidelityTextureCopyRequest>::deinit((uint64_t)&v237);
        v196 = *(_QWORD *)(v185 + 40);
        if (!v196)
          goto LABEL_207;
        re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v185, v196 - 1);
        v16 = v214;
        v17 = v216;
      }
      re::StringID::destroyString((re::StringID *)v228);
      v170 = v225;
      if (v226 <= (int)v18 + 1)
        v197 = v18 + 1;
      else
        v197 = v226;
      while (1)
      {
        v169 = (v18 + 1);
        if (v197 - 1 == (_DWORD)v18)
          break;
        LODWORD(v18) = v18 + 1;
        v198 = v169;
        if ((*(_DWORD *)(v225 + 104 * v169 + 8) & 0x80000000) != 0)
          goto LABEL_194;
      }
      v198 = v197;
LABEL_194:
      LODWORD(v18) = v198;
    }
    while (v17 != v198);
  }
  v159 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*(_QWORD *)(a3 + 8) + 200), (const re::ecs2::ComponentTypeBase *)v7[476]);
  if (v159)
  {
    v160 = *(_QWORD *)(v159 + 24);
    if (v160)
    {
      v161 = *(_QWORD *)(v159 + 40);
      v162 = 8 * v160;
      do
      {
        if (*(int *)(*(_QWORD *)v161 + 28) >= 31)
          re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(*(_QWORD *)(*(_QWORD *)v161 + 16) + 32), (const re::ecs2::ComponentTypeBase *)v7[476]);
        v161 += 8;
        v162 -= 8;
      }
      while (v162);
    }
  }
  v163 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*(_QWORD *)(a3 + 8) + 200), (const re::ecs2::ComponentTypeBase *)v7[476]);
  if (v163)
  {
    v164 = *(_QWORD *)(v163 + 24);
    if (v164)
    {
      v165 = *(_QWORD *)(v163 + 40);
      v166 = 8 * v164;
      do
      {
        if (*(_BYTE *)(*(_QWORD *)v165 + 25))
          *(_BYTE *)(*(_QWORD *)v165 + 25) = 0;
        v165 += 8;
        v166 -= 8;
      }
      while (v166);
    }
  }
  v167 = *(_DWORD *)(a5 + 40) != 0;
  re::HashTable<unsigned long long,re::ecs2::VisualProxyScopeSystemStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent> *,re::ecs2::ComponentBuckets<re::ecs2::VisualProxyCaptureComponent>::BucketIteration,void *)::VisualProxyPerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable((uint64_t *)&v224);
  return v167;
}

__n128 re::DynamicArray<re::CameraView>::add(_anonymous_namespace_ *this, re::DynamicString *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __n128 result;
  __int128 v32;
  __int128 v33;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::CameraView>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4);
  v6 = v5 + 672 * v4;
  re::DynamicString::DynamicString((re::DynamicString *)v6, a2);
  v7 = *((_OWORD *)a2 + 2);
  v8 = *((_OWORD *)a2 + 3);
  v9 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(v6 + 64) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(v6 + 80) = v9;
  *(_OWORD *)(v6 + 32) = v7;
  *(_OWORD *)(v6 + 48) = v8;
  v10 = *((_OWORD *)a2 + 6);
  v11 = *((_OWORD *)a2 + 7);
  v12 = *((_OWORD *)a2 + 9);
  *(_OWORD *)(v6 + 128) = *((_OWORD *)a2 + 8);
  *(_OWORD *)(v6 + 144) = v12;
  *(_OWORD *)(v6 + 96) = v10;
  *(_OWORD *)(v6 + 112) = v11;
  v13 = *((_OWORD *)a2 + 10);
  v14 = *((_OWORD *)a2 + 11);
  v15 = *((_OWORD *)a2 + 13);
  *(_OWORD *)(v6 + 192) = *((_OWORD *)a2 + 12);
  *(_OWORD *)(v6 + 208) = v15;
  *(_OWORD *)(v6 + 160) = v13;
  *(_OWORD *)(v6 + 176) = v14;
  re::DynamicArray<re::RenderGraphFileProvider>::DynamicArray(v6 + 224, (uint64_t *)a2 + 28);
  *(_WORD *)(v6 + 264) = *((_WORD *)a2 + 132);
  re::DynamicArray<re::CameraView::PickupScopeLane>::DynamicArray(v6 + 272, (uint64_t *)a2 + 34);
  *(_OWORD *)(v6 + 320) = *((_OWORD *)a2 + 20);
  v16 = *((_OWORD *)a2 + 21);
  v17 = *((_OWORD *)a2 + 22);
  v18 = *((_OWORD *)a2 + 23);
  *(_QWORD *)(v6 + 384) = *((_QWORD *)a2 + 48);
  *(_OWORD *)(v6 + 352) = v17;
  *(_OWORD *)(v6 + 368) = v18;
  *(_OWORD *)(v6 + 336) = v16;
  *(_BYTE *)(v6 + 400) = *((_BYTE *)a2 + 400);
  v19 = *((unsigned __int8 *)a2 + 401);
  *(_BYTE *)(v6 + 401) = v19;
  if (v19)
    *(_BYTE *)(v5 + 672 * v4 + 402) = *((_BYTE *)a2 + 402);
  v20 = *((unsigned __int8 *)a2 + 404);
  *(_BYTE *)(v5 + 672 * v4 + 404) = v20;
  if (v20)
    *(_DWORD *)(v5 + 672 * v4 + 408) = *((_DWORD *)a2 + 102);
  v21 = v5 + 672 * v4;
  v22 = *((_OWORD *)a2 + 26);
  v23 = *((_OWORD *)a2 + 27);
  v24 = *((_OWORD *)a2 + 29);
  *(_OWORD *)(v21 + 448) = *((_OWORD *)a2 + 28);
  *(_OWORD *)(v21 + 464) = v24;
  *(_OWORD *)(v21 + 416) = v22;
  *(_OWORD *)(v21 + 432) = v23;
  v25 = *((_OWORD *)a2 + 30);
  v26 = *((_OWORD *)a2 + 31);
  v27 = *((_OWORD *)a2 + 33);
  *(_OWORD *)(v21 + 512) = *((_OWORD *)a2 + 32);
  *(_OWORD *)(v21 + 528) = v27;
  *(_OWORD *)(v21 + 480) = v25;
  *(_OWORD *)(v21 + 496) = v26;
  v29 = *((_OWORD *)a2 + 39);
  v28 = *((_OWORD *)a2 + 40);
  v30 = *((_OWORD *)a2 + 38);
  *(_QWORD *)(v21 + 653) = *(_QWORD *)((char *)a2 + 653);
  *(_OWORD *)(v21 + 624) = v29;
  *(_OWORD *)(v21 + 640) = v28;
  *(_OWORD *)(v21 + 608) = v30;
  result = *((__n128 *)a2 + 34);
  v32 = *((_OWORD *)a2 + 35);
  v33 = *((_OWORD *)a2 + 37);
  *(_OWORD *)(v21 + 576) = *((_OWORD *)a2 + 36);
  *(_OWORD *)(v21 + 592) = v33;
  *(__n128 *)(v21 + 544) = result;
  *(_OWORD *)(v21 + 560) = v32;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t *re::HashTable<unsigned long long,re::ecs2::VisualProxyScopeSystemStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent> *,re::ecs2::ComponentBuckets<re::ecs2::VisualProxyCaptureComponent>::BucketIteration,void *)::VisualProxyPerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          v8 = v6 + 24;
          re::DynamicArray<re::VisualProxyHighFidelityTextureCopyRequest>::deinit(v6 + 64);
          re::DynamicArray<re::CameraView>::deinit(v8);
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 104;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

re::ecs2::VisualProxyScopeSystem *re::ecs2::VisualProxyScopeSystem::VisualProxyScopeSystem(re::ecs2::VisualProxyScopeSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_QWORD *)v2 = &off_24ED5AC10;
  *(_QWORD *)(v2 + 160) = off_24ED5ABD0;
  v3 = v2 + 160;
  *(_QWORD *)(v2 + 168) = v2;
  *(_QWORD *)(v2 + 184) = 0;
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 176) = 0;
  v10 = 1;
  v11[0] = re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v9 = v11;
  v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 176), (uint64_t)&v9);
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 54) = 1;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_DWORD *)this + 62) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_DWORD *)this + 84) = 1;
  *((_QWORD *)this + 47) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((_DWORD *)this + 96) = 1;
  *(_OWORD *)((char *)this + 417) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 40, 0);
  *((_DWORD *)this + 84) += 2;
  *((_QWORD *)this + 45) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 46, 0);
  *((_DWORD *)this + 96) += 2;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = this;
  *((_QWORD *)this + 53) = v3;
  *((_BYTE *)this + 432) = 1;
  LOWORD(v9) = 257;
  HIDWORD(v9) = 1023969417;
  LOBYTE(v10) = 0;
  re::ecs2::System::setTaskOptions(this, (uint64_t *)&v9);
  return this;
}

void re::ecs2::VisualProxyScopeSystem::updateScenes(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v11 = a3;
  v12 = a4;
  v5 = *(_QWORD *)(a1 + 104);
  if (!v5 || (*(_BYTE *)(v5 + 424) & 0x10) != 0)
  {
    v6 = *(_QWORD *)(a1 + 112);
    if (!v6)
    {
LABEL_13:
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateScenes", 300);
      _os_crash();
      __break(1u);
      return;
    }
    v7 = a2[1];
    if (v7)
    {
      v8 = *a2;
      v9 = 8 * (_QWORD)v7;
      while (*v8)
      {
        re::ecs2::BasicComponentStates<re::ecs2::PhysicsJointsComponent>::updateForScene(a1 + 200, *v8++, (uint64_t)&v11, 0);
        v9 -= 8;
        if (!v9)
        {
          v6 = *(_QWORD *)(a1 + 112);
          goto LABEL_9;
        }
      }
      re::internal::assertLog((re::internal *)4, 0, "assertion failure: '%s' (%s:line %i) VisualProxyScopeSystem must be added to a scene and not to an ECSService directly.", "scene", "updateScenes", 304, v11, v12);
      _os_crash();
      __break(1u);
      goto LABEL_13;
    }
LABEL_9:
    v10 = *(_QWORD *)(v6 + 104);
    if (v10)
      *(_DWORD *)(v10 + 1764) = 0;
  }
}

void re::ecs2::VisualProxyScopeSystem::willAddSceneToECSService(re::ecs2::VisualProxyScopeSystem *this, re::ecs2::Scene *a2)
{
  re::ecs2::BasicComponentStates<re::ecs2::VisualProxyCaptureComponent>::addScene((uint64_t)this + 200, (uint64_t)a2);
}

void re::ecs2::BasicComponentStates<re::ecs2::VisualProxyCaptureComponent>::addScene(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  unint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  re::ecs2::System *v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = a2;
  v4 = (_anonymous_namespace_ *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if ((v6 & 1) != 0)
      v7 = (_QWORD *)(a1 + 144);
    else
      v7 = *(_QWORD **)(a1 + 152);
    v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v6 & 1) != 0)
  {
    v8 = (uint64_t *)(a1 + 144);
    if (!v5)
      goto LABEL_17;
  }
  else
  {
    v8 = *(uint64_t **)(a1 + 152);
    if (!v5)
      goto LABEL_17;
  }
  v10 = 0;
  v11 = 8 * v5;
  do
  {
    v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(_QWORD *)&v43 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v43);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v43);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v43);
    v14 = a1 + 168;
    v15 = v43;
    goto LABEL_43;
  }
LABEL_17:
  v43 = 0u;
  *(_QWORD *)&v44 = 0;
  *((_QWORD *)&v44 + 1) = -1;
  v45 = 0u;
  v46 = 0u;
  v47 = 0;
  v48 = 1;
  v49 = 0uLL;
  v50 = 0uLL;
  v16 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>,4ul>::addUninitialized(a1);
  v17 = v44;
  *(_QWORD *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 16) = v17;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)v16 = 0u;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v16 + 56, (uint64_t)&v46 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v43);
  v19 = *(_QWORD *)(a1 + 40);
  if (!v19)
  {
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
    return;
  }
  v20 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v19 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::init(v20, a1, v51);
  v42 = *(_QWORD *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v42);
  v21 = *(_QWORD *)(a1 + 40);
  v22 = *(_QWORD *)(a1 + 160);
  if ((v21 & 0x3F) != 0)
    v23 = (v21 >> 6) + 1;
  else
    v23 = v21 >> 6;
  *(_QWORD *)(a1 + 160) = v21;
  *(_QWORD *)&v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v23, &v43);
  if (v21 && v22 > v21)
  {
    v24 = 63;
    v25 = *(_QWORD *)(a1 + 160) & 0x3FLL;
    if (v25 && v25 != 63)
      v24 = ~(-1 << v25);
    if ((*(_BYTE *)(a1 + 136) & 1) != 0)
      v26 = a1 + 144;
    else
      v26 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(v26 + 8 * *(_QWORD *)(a1 + 128) - 8) &= v24;
  }
  v27 = *(_QWORD *)(a1 + 40);
  v28 = *(_QWORD *)(a1 + 208);
  if ((v27 & 0x3F) != 0)
    v29 = (v27 >> 6) + 1;
  else
    v29 = v27 >> 6;
  *(_QWORD *)(a1 + 208) = v27;
  *(_QWORD *)&v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v29, &v43);
  if (v27 && v28 > v27)
  {
    v30 = 63;
    v31 = *(_QWORD *)(a1 + 208) & 0x3FLL;
    if (v31 && v31 != 63)
      v30 = ~(-1 << v31);
    if ((*(_BYTE *)(a1 + 184) & 1) != 0)
      v32 = a1 + 192;
    else
      v32 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(v32 + 8 * *(_QWORD *)(a1 + 176) - 8) &= v30;
  }
  v15 = v42;
  v14 = a1 + 168;
LABEL_43:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(_BYTE *)(a1 + 232))
    return;
  v33 = *(_QWORD *)(a1 + 176);
  v34 = *(_DWORD *)(a1 + 184);
  if (v33 >= 0xB)
  {
    if ((v34 & 1) != 0)
      v35 = (_QWORD *)(a1 + 192);
    else
      v35 = *(_QWORD **)(a1 + 200);
    v37 = 8 * v33;
    while (!*v35)
    {
      ++v35;
      v37 -= 8;
      if (!v37)
        return;
    }
LABEL_59:
    v41 = *(re::ecs2::System **)(a1 + 216);
    if (!*((_BYTE *)v41 + 86))
      re::ecs2::System::queueToRun(v41, 0.0);
    return;
  }
  if ((v34 & 1) != 0)
  {
    v36 = (uint64_t *)(a1 + 192);
    if (!v33)
      return;
  }
  else
  {
    v36 = *(uint64_t **)(a1 + 200);
    if (!v33)
      return;
  }
  v38 = 0;
  v39 = 8 * v33;
  do
  {
    v40 = *v36++;
    v38 |= v40;
    v39 -= 8;
  }
  while (v39);
  if (v38)
    goto LABEL_59;
}

uint64_t re::ecs2::VisualProxyScopeSystem::willRemoveSceneFromECSService(re::ecs2::VisualProxyScopeSystem *this, re::ecs2::Scene *a2)
{
  return re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene((uint64_t)this + 200, (uint64_t)a2);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::VisualProxyCaptureComponent>::dependsOnComponents()
{
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::VisualProxyCaptureComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 3;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
      }
      ++v6;
    }
    while (v6 != 7);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

void re::ecs2::VisualProxyScopeSystem::~VisualProxyScopeSystem(re::ecs2::VisualProxyScopeSystem *this)
{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 25);
  *((_QWORD *)this + 20) = off_24ED5ABD0;
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    if (*((_QWORD *)this + 23))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 24));
      *((_QWORD *)this + 23) = 0;
      *((_QWORD *)this + 24) = 0;
    }
    *((_QWORD *)this + 22) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 25);
  *((_QWORD *)this + 20) = off_24ED5ABD0;
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    if (*((_QWORD *)this + 23))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 24));
      *((_QWORD *)this + 23) = 0;
      *((_QWORD *)this + 24) = 0;
    }
    *((_QWORD *)this + 22) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::VisualProxyScopeSystem::typeInfo(re::ecs2::VisualProxyScopeSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VisualProxyScopeSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VisualProxyScopeSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VisualProxyScopeSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VisualProxyScopeSystem>, 0);
}

_QWORD *re::DynamicArray<re::CameraView>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::CameraView>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x2A0uLL))
        {
          v2 = 672 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 672 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 672, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (_QWORD *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 672 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::ObjectHelper::move<re::CameraView>(v8, v11);
          v8 += 84;
          v11 += 672;
          v10 -= 672;
        }
        while (v10);
        v8 = (_QWORD *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

double re::ObjectHelper::move<re::CameraView>(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  double result;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 24) = a1[3];
  v3 = a1[1];
  *(_QWORD *)a2 = *a1;
  *a1 = 0;
  v4 = a1[2];
  a1[3] = 0;
  v6 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  a1[1] = v6;
  a1[2] = v5;
  v7 = *((_OWORD *)a1 + 2);
  v8 = *((_OWORD *)a1 + 3);
  v9 = *((_OWORD *)a1 + 5);
  *(_OWORD *)(a2 + 64) = *((_OWORD *)a1 + 4);
  *(_OWORD *)(a2 + 80) = v9;
  *(_OWORD *)(a2 + 32) = v7;
  *(_OWORD *)(a2 + 48) = v8;
  v10 = *((_OWORD *)a1 + 6);
  v11 = *((_OWORD *)a1 + 7);
  v12 = *((_OWORD *)a1 + 9);
  *(_OWORD *)(a2 + 128) = *((_OWORD *)a1 + 8);
  *(_OWORD *)(a2 + 144) = v12;
  *(_OWORD *)(a2 + 96) = v10;
  *(_OWORD *)(a2 + 112) = v11;
  v13 = *((_OWORD *)a1 + 10);
  v14 = *((_OWORD *)a1 + 11);
  v15 = *((_OWORD *)a1 + 13);
  *(_OWORD *)(a2 + 192) = *((_OWORD *)a1 + 12);
  *(_OWORD *)(a2 + 208) = v15;
  *(_OWORD *)(a2 + 160) = v13;
  *(_OWORD *)(a2 + 176) = v14;
  *(_QWORD *)(a2 + 256) = 0;
  *(_DWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  v16 = a1[29];
  v17 = (uint64_t)(a1 + 28);
  *(_QWORD *)(a2 + 224) = a1[28];
  *(_QWORD *)(a2 + 232) = v16;
  a1[28] = 0;
  a1[29] = 0;
  v18 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = a1[30];
  a1[30] = v18;
  v19 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 256) = a1[32];
  a1[32] = v19;
  ++*((_DWORD *)a1 + 62);
  ++*(_DWORD *)(a2 + 248);
  *(_WORD *)(a2 + 264) = *((_WORD *)a1 + 132);
  v20 = (uint64_t)(a1 + 34);
  *(_QWORD *)(a2 + 304) = 0;
  *(_DWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  v21 = *(_QWORD *)(v17 + 56);
  *(_QWORD *)(a2 + 272) = *(_QWORD *)(v17 + 48);
  *(_QWORD *)(a2 + 280) = v21;
  *(_QWORD *)(v17 + 48) = 0;
  *(_QWORD *)(v17 + 56) = 0;
  v22 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a2 + 288) = *(_QWORD *)(v17 + 64);
  *(_QWORD *)(v17 + 64) = v22;
  v23 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 304) = *(_QWORD *)(v17 + 80);
  *(_QWORD *)(v17 + 80) = v23;
  ++*(_DWORD *)(v17 + 72);
  ++*(_DWORD *)(a2 + 296);
  *(_OWORD *)(a2 + 320) = *(_OWORD *)(v17 + 96);
  v24 = *(_OWORD *)(v17 + 112);
  v25 = *(_OWORD *)(v17 + 128);
  v26 = *(_OWORD *)(v17 + 144);
  *(_QWORD *)(a2 + 384) = *(_QWORD *)(v17 + 160);
  *(_OWORD *)(a2 + 352) = v25;
  *(_OWORD *)(a2 + 368) = v26;
  *(_OWORD *)(a2 + 336) = v24;
  *(_BYTE *)(a2 + 400) = *(_BYTE *)(v17 + 176);
  LODWORD(v23) = *(unsigned __int8 *)(v17 + 177);
  *(_BYTE *)(a2 + 401) = v23;
  if ((_DWORD)v23)
    *(_BYTE *)(a2 + 402) = *((_BYTE *)a1 + 402);
  v27 = *((unsigned __int8 *)a1 + 404);
  *(_BYTE *)(a2 + 404) = v27;
  if (v27)
    *(_DWORD *)(a2 + 408) = *((_DWORD *)a1 + 102);
  v28 = *((_OWORD *)a1 + 26);
  v29 = *((_OWORD *)a1 + 27);
  v30 = *((_OWORD *)a1 + 29);
  *(_OWORD *)(a2 + 448) = *((_OWORD *)a1 + 28);
  *(_OWORD *)(a2 + 464) = v30;
  *(_OWORD *)(a2 + 416) = v28;
  *(_OWORD *)(a2 + 432) = v29;
  v31 = *((_OWORD *)a1 + 30);
  v32 = *((_OWORD *)a1 + 31);
  v33 = *((_OWORD *)a1 + 33);
  *(_OWORD *)(a2 + 512) = *((_OWORD *)a1 + 32);
  *(_OWORD *)(a2 + 528) = v33;
  *(_OWORD *)(a2 + 480) = v31;
  *(_OWORD *)(a2 + 496) = v32;
  v35 = *((_OWORD *)a1 + 39);
  v34 = *((_OWORD *)a1 + 40);
  v36 = *((_OWORD *)a1 + 38);
  *(_QWORD *)(a2 + 653) = *(_QWORD *)((char *)a1 + 653);
  *(_OWORD *)(a2 + 624) = v35;
  *(_OWORD *)(a2 + 640) = v34;
  *(_OWORD *)(a2 + 608) = v36;
  v37 = *((_OWORD *)a1 + 34);
  v38 = *((_OWORD *)a1 + 35);
  v39 = *((_OWORD *)a1 + 37);
  *(_OWORD *)(a2 + 576) = *((_OWORD *)a1 + 36);
  *(_OWORD *)(a2 + 592) = v39;
  *(_OWORD *)(a2 + 544) = v37;
  *(_OWORD *)(a2 + 560) = v38;
  re::DynamicArray<re::ecs2::ScopeLanePair>::deinit(v20);
  re::DynamicArray<re::RenderGraphFileProvider>::deinit(v17);
  if (*a1)
  {
    if ((a1[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, a1[2]);
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

uint64_t re::DynamicArray<re::VisualProxyHighFidelityTextureCopyRequest>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  void *v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 16 * v4;
        v6 = (id *)(v3 + 8);
        do
        {
          if (*v6)
          {

            *v6 = 0;
          }
          v7 = *(v6 - 1);
          if (v7)
          {

            *(v6 - 1) = 0;
          }
          v6 += 2;
          v5 -= 16;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

re::CameraView *re::CameraView::CameraView(re::CameraView *this, re::Allocator *a2)
{
  char *v4;

  v4 = (char *)this + 347;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  re::DynamicString::setCapacity(this, 0);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0x3F80000000000000;
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 68) = xmmword_226117740;
  *(_QWORD *)((char *)this + 84) = 0xBDCCCCCD3DCCCCCDLL;
  *((_BYTE *)this + 92) = 0;
  *((_OWORD *)this + 6) = xmmword_2260E5F40;
  *((_DWORD *)this + 28) = 1;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0x3F80000000000000;
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 40) = 0;
  *(_OWORD *)((char *)this + 164) = xmmword_226117740;
  *(_QWORD *)((char *)this + 180) = 0xBDCCCCCD3DCCCCCDLL;
  *((_BYTE *)this + 188) = 0;
  *((_OWORD *)this + 12) = xmmword_2260E5F40;
  *((_DWORD *)this + 52) = 1;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_DWORD *)this + 62) = 0;
  *((_QWORD *)this + 28) = a2;
  re::DynamicArray<re::RenderGraphFileProvider>::setCapacity((_QWORD *)this + 28, 0);
  ++*((_DWORD *)this + 62);
  *((_WORD *)this + 132) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_DWORD *)this + 74) = 0;
  *((_QWORD *)this + 34) = a2;
  re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity((_QWORD *)this + 34, 0);
  ++*((_DWORD *)this + 74);
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_DWORD *)this + 85) = 0;
  *((_WORD *)this + 172) = 1;
  *((_BYTE *)this + 346) = 1;
  *(_DWORD *)v4 = 0;
  *((_QWORD *)this + 44) = 0x13F800000;
  *((_QWORD *)this + 45) = 134217472;
  *((_QWORD *)this + 46) = 134217472;
  *((_BYTE *)this + 376) = 0;
  *((_QWORD *)this + 48) = -1;
  *((_WORD *)this + 200) = 1;
  *((_BYTE *)this + 404) = 0;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_DWORD *)this + 120) = 0;
  *(_OWORD *)(v4 + 137) = xmmword_226117740;
  *(_QWORD *)((char *)this + 500) = 0xBDCCCCCD3DCCCCCDLL;
  *((_BYTE *)this + 508) = 0;
  *((_OWORD *)this + 32) = xmmword_2260E5F40;
  *((_DWORD *)this + 132) = 1;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((_QWORD *)this + 79) = 0;
  *((_QWORD *)this + 80) = -1;
  *((_DWORD *)this + 162) = 0;
  *((_WORD *)this + 326) = 1;
  *((_BYTE *)this + 654) = 0;
  *((_DWORD *)this + 164) = -1;
  *((_BYTE *)this + 660) = 0;
  return this;
}

_QWORD *re::DynamicArray<re::RenderGraphFileProvider>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RenderGraphFileProvider>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          v2 = 48 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (uint64_t *)(v8 + 24);
        v11 = 48 * v9;
        v12 = 0uLL;
        v13 = v7;
        do
        {
          *v13 = *(v10 - 3);
          *(_OWORD *)(v13 + 1) = v12;
          *(_OWORD *)(v13 + 3) = v12;
          v13[1] = *(v10 - 2);
          *(v10 - 2) = 0;
          v14 = *v10;
          v13[4] = v10[1];
          v10[1] = 0;
          v16 = v13[2];
          v15 = v13[3];
          v17 = *(v10 - 1);
          v13[3] = v14;
          *v10 = v15;
          v13[2] = v17;
          *(v10 - 1) = v16;
          *((_DWORD *)v13 + 10) = *((_DWORD *)v10 + 4);
          v18 = *(v10 - 2);
          if (v18)
          {
            if ((*(_BYTE *)(v10 - 1) & 1) != 0)
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 40))(v18, *v10);
              v12 = 0uLL;
            }
            *((_OWORD *)v10 - 1) = v12;
            *(_OWORD *)v10 = v12;
          }
          v10 += 6;
          v13 += 6;
          v11 -= 48;
        }
        while (v11);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 6;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_24;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_24:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (_QWORD *)(v8 + 32);
        v11 = v9 << 6;
        v12 = 0uLL;
        v13 = v7;
        do
        {
          *(_OWORD *)v13 = v12;
          *((_OWORD *)v13 + 1) = v12;
          v14 = v10 - 4;
          *v13 = *(v10 - 4);
          *(v10 - 4) = 0;
          v13[3] = *(v10 - 1);
          *(v10 - 1) = 0;
          v16 = v13[1];
          v15 = v13[2];
          v17 = *(v10 - 2);
          v13[1] = *(v10 - 3);
          v13[2] = v17;
          *(v10 - 3) = v16;
          *(v10 - 2) = v15;
          *((_OWORD *)v13 + 2) = v12;
          *((_OWORD *)v13 + 3) = v12;
          v13[7] = v10[3];
          v18 = v10[1];
          v13[4] = *v10;
          *v10 = 0;
          v19 = v10[2];
          v10[3] = 0;
          v20 = v13[5];
          v21 = v13[6];
          v13[5] = v18;
          v13[6] = v19;
          v10[1] = v20;
          v10[2] = v21;
          if (*v10)
          {
            if ((v20 & 1) != 0)
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v10 + 40))(*v10, v10[2]);
              v12 = 0uLL;
            }
            *(_OWORD *)v10 = v12;
            *((_OWORD *)v10 + 1) = v12;
          }
          if (*v14)
          {
            if ((*(_BYTE *)(v10 - 3) & 1) != 0)
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v14 + 40))(*v14, *(v10 - 2));
              v12 = 0uLL;
            }
            *(_OWORD *)v14 = v12;
            *((_OWORD *)v10 - 1) = v12;
          }
          v10 += 8;
          v13 += 8;
          v11 -= 64;
        }
        while (v11);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_24;
    }
  }
  return result;
}

_QWORD *re::internal::Callable<re::ecs2::VisualProxyScopeSystemStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent> *,re::ecs2::ComponentBuckets<re::ecs2::VisualProxyCaptureComponent>::BucketIteration,void *)::$_0,void ()(re::FrameCount)>::~Callable(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24ED5ACC8;
  v2 = (void *)a1[6];
  if (v2)
  {

    a1[6] = 0;
  }
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::ecs2::VisualProxyScopeSystemStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent> *,re::ecs2::ComponentBuckets<re::ecs2::VisualProxyCaptureComponent>::BucketIteration,void *)::$_0,void ()(re::FrameCount)>::~Callable(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24ED5ACC8;
  v2 = (void *)a1[6];
  if (v2)
  {

    a1[6] = 0;
  }
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::ecs2::VisualProxyScopeSystemStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent> *,re::ecs2::ComponentBuckets<re::ecs2::VisualProxyCaptureComponent>::BucketIteration,void *)::$_0,void ()(re::FrameCount)>::operator()(uint64_t a1)
{
  id v2;

  v2 = *(id *)(a1 + 48);
  (*(void (**)(_QWORD, id *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v2);
  if (v2)

}

_QWORD *re::internal::Callable<re::ecs2::VisualProxyScopeSystemStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent> *,re::ecs2::ComponentBuckets<re::ecs2::VisualProxyCaptureComponent>::BucketIteration,void *)::$_0,void ()(re::FrameCount)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED5ACC8;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  a2[6] = *(id *)(a1 + 48);
  return a2;
}

_QWORD *re::internal::Callable<re::ecs2::VisualProxyScopeSystemStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent> *,re::ecs2::ComponentBuckets<re::ecs2::VisualProxyCaptureComponent>::BucketIteration,void *)::$_0,void ()(re::FrameCount)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED5ACC8;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  a2[6] = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::VisualProxyScopeSystemStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent> *,re::ecs2::ComponentBuckets<re::ecs2::VisualProxyCaptureComponent>::BucketIteration,void *)::$_0,void ()(re::FrameCount)>::size()
{
  return 56;
}

_QWORD *re::internal::Callable<re::ecs2::VisualProxyScopeSystemStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent> *,re::ecs2::ComponentBuckets<re::ecs2::VisualProxyCaptureComponent>::BucketIteration,void *)::$_1,void ()(re::FrameCount)>::~Callable(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24ED5AD20;
  v2 = a1[7];
  if (v2)
  {

    a1[7] = 0;
  }
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::ecs2::VisualProxyScopeSystemStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent> *,re::ecs2::ComponentBuckets<re::ecs2::VisualProxyCaptureComponent>::BucketIteration,void *)::$_1,void ()(re::FrameCount)>::~Callable(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24ED5AD20;
  v2 = a1[7];
  if (v2)
  {

    a1[7] = 0;
  }
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::ecs2::VisualProxyScopeSystemStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent> *,re::ecs2::ComponentBuckets<re::ecs2::VisualProxyCaptureComponent>::BucketIteration,void *)::$_1,void ()(re::FrameCount)>::operator()(uint64_t a1)
{
  re::ecs2::Entity *v2;
  id v3;

  v2 = *(re::ecs2::Entity **)(a1 + 48);
  if (v2)
    re::ecs2::Entity::setParentInternal(*(re::ecs2::Entity **)(a1 + 56), v2, 0xFFFFFFFFFFFFFFFFLL);
  v3 = 0;
  (*(void (**)(_QWORD, id *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v3);
  if (v3)

}

_QWORD *re::internal::Callable<re::ecs2::VisualProxyScopeSystemStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent> *,re::ecs2::ComponentBuckets<re::ecs2::VisualProxyCaptureComponent>::BucketIteration,void *)::$_1,void ()(re::FrameCount)>::cloneInto(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  id v5;

  *a2 = &off_24ED5AD20;
  a2[4] = a1[4];
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), (uint64_t)(a1 + 1));
  v4 = a1[7];
  a2[6] = a1[6];
  a2[7] = v4;
  if (v4)
    v5 = (id)(v4 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::VisualProxyScopeSystemStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent> *,re::ecs2::ComponentBuckets<re::ecs2::VisualProxyCaptureComponent>::BucketIteration,void *)::$_1,void ()(re::FrameCount)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED5AD20;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 40) = 0;
  re::FunctionBase<24ul,void ()(void)>::operator=<24ul>(a2 + 8, a1 + 8);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::VisualProxyScopeSystemStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent> *,re::ecs2::ComponentBuckets<re::ecs2::VisualProxyCaptureComponent>::BucketIteration,void *)::$_1,void ()(re::FrameCount)>::size()
{
  return 64;
}

id re::internal::defaultRetain<re::ecs2::VisualProxyScopeSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::VisualProxyScopeSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t re::HashTable<unsigned long long,re::ecs2::VisualProxyScopeSystemStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent> *,re::ecs2::ComponentBuckets<re::ecs2::VisualProxyCaptureComponent>::BucketIteration,void *)::VisualProxyPerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v32[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v32, 0, 36);
          *(_QWORD *)&v32[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::ecs2::VisualProxyScopeSystemStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent> *,re::ecs2::ComponentBuckets<re::ecs2::VisualProxyCaptureComponent>::BucketIteration,void *)::VisualProxyPerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v32, v13, v12);
          v15 = *(_OWORD *)v32;
          *(_OWORD *)v32 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v32[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v32[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v32[24];
          *(_OWORD *)&v32[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v32[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::ecs2::VisualProxyScopeSystemStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent> *,re::ecs2::ComponentBuckets<re::ecs2::VisualProxyCaptureComponent>::BucketIteration,void *)::VisualProxyPerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 104;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::ecs2::VisualProxyScopeSystemStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent> *,re::ecs2::ComponentBuckets<re::ecs2::VisualProxyCaptureComponent>::BucketIteration,void *)::VisualProxyPerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable((uint64_t *)v32);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 104 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 104 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 104 * v9 + 8) = v23 | 0x80000000;
  v25 = 104 * v9;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v25 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v25 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v25) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v25 + 16) = *a4;
  v26 = *(_QWORD *)(a1 + 16) + v25;
  *(_QWORD *)(v26 + 56) = 0;
  *(_DWORD *)(v26 + 48) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 40) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 24) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(v26 + 32) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = 0;
  v27 = *(_QWORD *)(v26 + 40);
  *(_QWORD *)(v26 + 40) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v27;
  v28 = *(_QWORD *)(v26 + 56);
  *(_QWORD *)(v26 + 56) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v28;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v26 + 48);
  *(_QWORD *)(v26 + 96) = 0;
  *(_QWORD *)(v26 + 72) = 0;
  *(_QWORD *)(v26 + 80) = 0;
  *(_QWORD *)(v26 + 64) = 0;
  *(_DWORD *)(v26 + 88) = 0;
  *(_QWORD *)(v26 + 64) = *(_QWORD *)(a5 + 40);
  *(_QWORD *)(a5 + 40) = 0;
  *(_QWORD *)(v26 + 72) = *(_QWORD *)(a5 + 48);
  *(_QWORD *)(a5 + 48) = 0;
  v29 = *(_QWORD *)(v26 + 80);
  *(_QWORD *)(v26 + 80) = *(_QWORD *)(a5 + 56);
  *(_QWORD *)(a5 + 56) = v29;
  v30 = *(_QWORD *)(v26 + 96);
  *(_QWORD *)(v26 + 96) = *(_QWORD *)(a5 + 72);
  *(_QWORD *)(a5 + 72) = v30;
  ++*(_DWORD *)(a5 + 64);
  ++*(_DWORD *)(v26 + 88);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,re::ecs2::VisualProxyScopeSystemStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent> *,re::ecs2::ComponentBuckets<re::ecs2::VisualProxyCaptureComponent>::BucketIteration,void *)::VisualProxyPerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 104 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_67, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

_QWORD *re::DynamicArray<re::CameraView>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::CameraView>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::CameraView>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::DynamicArray<re::RenderGraphFileProvider>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::RenderGraphFileProvider>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::RenderGraphFileProvider>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

re::DynamicString *re::DynamicArray<re::RenderGraphFileProvider>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  re::DynamicString *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  re::DynamicString *v15;
  _DWORD *v16;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::RenderGraphFileProvider>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    result = (re::DynamicString *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::RenderGraphFileProvider *,re::RenderGraphFileProvider *,re::RenderGraphFileProvider *,0>(*(_DWORD **)(a2 + 32), (_DWORD *)(*(_QWORD *)(a2 + 32) + 48 * a1[2]), a1[4]);
    v10 = a1[2];
    if (v10 != v4)
    {
      v11 = *(_QWORD *)(a2 + 32);
      v12 = (_DWORD *)(v11 + 48 * v4);
      v13 = (48 * v10) | 8;
      v14 = (_DWORD *)(v11 + v13);
      result = (re::DynamicString *)(a1[4] + v13);
      do
      {
        *((_QWORD *)result - 1) = *((_QWORD *)v14 - 1);
        v15 = re::DynamicString::DynamicString(result, (const re::DynamicString *)v14);
        *((_DWORD *)v15 + 8) = v14[8];
        v16 = v14 + 10;
        v14 += 12;
        result = (re::DynamicString *)((char *)v15 + 48);
      }
      while (v16 != v12);
    }
  }
  else
  {
    result = (re::DynamicString *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::RenderGraphFileProvider *,re::RenderGraphFileProvider *,re::RenderGraphFileProvider *,0>(*(_DWORD **)(a2 + 32), (_DWORD *)(*(_QWORD *)(a2 + 32) + 48 * v4), a1[4]);
    v6 = a1[2];
    if (v4 != v6)
    {
      v7 = a1[4] + 48 * v4 + 16;
      v8 = 48 * v6 - 48 * v4;
      v9 = 0uLL;
      do
      {
        result = *(re::DynamicString **)(v7 - 8);
        if (result)
        {
          if ((*(_BYTE *)v7 & 1) != 0)
          {
            result = (re::DynamicString *)(*(uint64_t (**)(re::DynamicString *, _QWORD, __n128))(*(_QWORD *)result + 40))(result, *(_QWORD *)(v7 + 8), v9);
            v9 = 0uLL;
          }
          *(__n128 *)(v7 - 8) = v9;
          *(__n128 *)(v7 + 8) = v9;
        }
        v7 += 48;
        v8 -= 48;
      }
      while (v8);
    }
  }
  a1[2] = v4;
  return result;
}

_DWORD *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::RenderGraphFileProvider *,re::RenderGraphFileProvider *,re::RenderGraphFileProvider *,0>(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;

  if (a1 == a2)
    return a1;
  v4 = a2;
  v5 = a1 + 2;
  do
  {
    *(_QWORD *)a3 = *((_QWORD *)v5 - 1);
    re::DynamicString::operator=((re::DynamicString *)(a3 + 8), (re::DynamicString *)v5);
    *(_DWORD *)(a3 + 40) = v5[8];
    a3 += 48;
    v6 = v5 + 10;
    v5 += 12;
  }
  while (v6 != v4);
  return v4;
}

uint64_t re::DynamicArray<re::CameraView::PickupScopeLane>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::CameraView::PickupScopeLane>::copy(a1, (uint64_t)a2);
  }
  return a1;
}

re::DynamicString *re::DynamicArray<re::CameraView::PickupScopeLane>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  re::DynamicString *result;
  uint64_t v6;
  uint64_t v7;
  __n128 *v8;
  __n128 v9;
  re::DynamicString **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= *(_QWORD *)(a1 + 16))
  {
    re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity((_QWORD *)a1, *(_QWORD *)(a2 + 16));
    result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::CameraView::PickupScopeLane *,re::CameraView::PickupScopeLane *,re::CameraView::PickupScopeLane *>((int)&v16, *(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(_QWORD *)(a2 + 32) + (*(_QWORD *)(a1 + 16) << 6)), *(re::DynamicString **)(a1 + 32));
    v11 = *(_QWORD *)(a1 + 16);
    if (v11 != v4)
    {
      v12 = *(_QWORD *)(a2 + 32) + (v11 << 6);
      v13 = *(_QWORD *)(a1 + 32) + (v11 << 6);
      v14 = (v4 << 6) - (v11 << 6);
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)v13, (const re::DynamicString *)v12);
        result = re::DynamicString::DynamicString((re::DynamicString *)(v13 + 32), (const re::DynamicString *)(v12 + 32));
        v12 += 64;
        v13 += 64;
        v14 -= 64;
      }
      while (v14);
    }
  }
  else
  {
    result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::CameraView::PickupScopeLane *,re::CameraView::PickupScopeLane *,re::CameraView::PickupScopeLane *>((int)&v15, *(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(_QWORD *)(a2 + 32) + (v4 << 6)), *(re::DynamicString **)(a1 + 32));
    v6 = *(_QWORD *)(a1 + 16);
    if (v4 != v6)
    {
      v7 = (v6 << 6) - (v4 << 6);
      v8 = (__n128 *)(*(_QWORD *)(a1 + 32) + (v4 << 6) + 32);
      v9 = 0uLL;
      do
      {
        v10 = (re::DynamicString **)&v8[-2];
        if (v8->n128_u64[0])
        {
          if ((v8->n128_u8[8] & 1) != 0)
          {
            (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v8->n128_u64[0] + 40))(v8->n128_u64[0], v8[1].n128_u64[0], v9);
            v9 = 0uLL;
          }
          *v8 = v9;
          v8[1] = v9;
        }
        result = *v10;
        if (*v10)
        {
          if ((v8[-2].n128_u8[8] & 1) != 0)
          {
            result = (re::DynamicString *)(*(uint64_t (**)(re::DynamicString *, unint64_t, __n128))(*(_QWORD *)result + 40))(result, v8[-1].n128_u64[0], v9);
            v9 = 0uLL;
          }
          *(__n128 *)v10 = v9;
          v8[-1] = v9;
        }
        v8 += 4;
        v7 -= 64;
      }
      while (v7);
    }
  }
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

re::DynamicString *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::CameraView::PickupScopeLane *,re::CameraView::PickupScopeLane *,re::CameraView::PickupScopeLane *>(int a1, re::DynamicString *a2, re::DynamicString *a3, re::DynamicString *this)
{
  re::DynamicString *v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      re::DynamicString::operator=(this, v5);
      re::DynamicString::operator=((re::DynamicString *)((char *)this + 32), (re::DynamicString *)((char *)v5 + 32));
      v5 = (re::DynamicString *)((char *)v5 + 64);
      this = (re::DynamicString *)((char *)this + 64);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(*a2 + 8);
  if ((v4 & 0x8000000000000000) != 0)
  {
    v5 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    v6 = 5381;
    do
    {
      v4 = v6;
      v7 = *v5++;
      v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  if (!*(_QWORD *)a1)
    return 0;
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v8 == 0x7FFFFFFF)
    return 0;
  v9 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v10 = std::type_info::operator==[abi:nn180100](*(_QWORD *)(v9 + 96 * v8 + 16), *a2);
    v9 = *(_QWORD *)(a1 + 16);
    if (v10)
      break;
    v8 = *(_DWORD *)(v9 + 96 * v8 + 8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF)
      return 0;
  }
  return v9 + 96 * v8 + 24;
}

uint64_t re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::addNew(uint64_t a1, uint64_t *a2, re *a3)
{
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;

  v6 = *(_QWORD *)(*a2 + 8);
  if ((v6 & 0x8000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    v8 = 5381;
    do
    {
      v6 = v8;
      v9 = *v7++;
      v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  if (!*(_QWORD *)a1)
  {
    LODWORD(v10) = 0;
    goto LABEL_11;
  }
  v10 = v6 % *(unsigned int *)(a1 + 24);
  v11 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v10);
  if ((_DWORD)v11 == 0x7FFFFFFF)
  {
LABEL_11:
    v14 = re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::addAsMove(a1, v10, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v15 = *(_QWORD *)(a1 + 16) + 96 * v14;
    return v15 + 24;
  }
  v12 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v13 = std::type_info::operator==[abi:nn180100](*(_QWORD *)(v12 + 96 * v11 + 16), *a2);
    v12 = *(_QWORD *)(a1 + 16);
    if (v13)
      break;
    v11 = *(_DWORD *)(v12 + 96 * v11 + 8) & 0x7FFFFFFF;
    if (v11 == 0x7FFFFFFF)
      goto LABEL_11;
  }
  v15 = v12 + 96 * v11;
  return v15 + 24;
}

_QWORD *re::BucketArray<re::VisualProxyHighFidelityHandlerData,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::VisualProxyHighFidelityHandlerData,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::VisualProxyHighFidelityHandlerData,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 160, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, re *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 96 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 96 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 96 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 96 * v10) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 96 * v10 + 16) = *a4;
  re::RenderFrameDataArrayWrapper::RenderFrameDataArrayWrapper((re *)(*(_QWORD *)(a1 + 16) + 96 * v10 + 24), a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 24);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 96;
        }
        while (v11 < v9);
      }
      re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

void re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 96 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_67, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::EntryWithHash::free((uint64_t (***)(_QWORD))(a1[2] + v3));
        ++v4;
        v3 += 96;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t (***re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::EntryWithHash::free(uint64_t (***result)(_QWORD)))(_QWORD)
{
  int v1;
  uint64_t (**v2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  uint64_t (**v4)(_QWORD);
  uint64_t (**v5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v1 = *((_DWORD *)result + 2);
  if (v1 < 0)
  {
    *((_DWORD *)result + 2) = v1 & 0x7FFFFFFF;
    v2 = (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(result + 3);
    v3 = (uint64_t)(result + 7);
    v4 = result[11];
    if (v4)
    {
      v5 = v2;
      (*((void (**)(uint64_t (**)(_QWORD), uint64_t (***)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)))*v4
       + 2))(v4, &v5);
    }
    result = re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(v3);
    if (*v2)
      return (uint64_t (***)(_QWORD))(*v2)(0, v2, 0, 0, 0);
  }
  return result;
}

re *re::RenderFrameDataArrayWrapper::RenderFrameDataArrayWrapper(re *a1, re *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, re *, re *, _QWORD, _QWORD);
  void (*v7)(uint64_t, re *, re *, _QWORD, _QWORD);
  re *v8;
  uint64_t v9;
  re *v10;
  _QWORD v12[3];
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v4 = (uint64_t)a1 + 32;
  v5 = re::globalAllocators(a1)[2];
  *((_QWORD *)a1 + 7) = v5;
  *((_QWORD *)a1 + 8) = 0;
  v13 = v5;
  v14 = 0;
  re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)v12, v4);
  re::FunctionBase<24ul,void ()(void)>::operator=<24ul>(v4, (uint64_t)a2 + 32);
  re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)a2 + 32, (uint64_t)v12);
  if (v14)
  {
    (*(void (**)(_QWORD *))*v14)(v14);
    if (v14 != v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
  }
  if (a1 != a2)
  {
    v6 = *(void (**)(uint64_t, re *, re *, _QWORD, _QWORD))a1;
    v7 = *(void (**)(uint64_t, re *, re *, _QWORD, _QWORD))a2;
    if (*(_QWORD *)a1 && v7)
    {
      v12[0] = 0;
      v12[1] = 0;
      v7(2, a2, (re *)v12, 0, 0);
      (*(void (**)(uint64_t, re *, re *, _QWORD, _QWORD))a1)(2, a1, a2, 0, 0);
      ((void (*)(uint64_t, _QWORD *, re *, _QWORD, _QWORD))v12[0])(2, v12, a1, 0, 0);
      v7 = (void (*)(uint64_t, re *, re *, _QWORD, _QWORD))v12[0];
      if (v12[0])
      {
        v8 = (re *)v12;
        v9 = 0;
        v10 = 0;
LABEL_13:
        v7(v9, v8, v10, 0, 0);
      }
    }
    else if (v6)
    {
      v6(2, a1, a2, 0, 0);
    }
    else if (v7)
    {
      v9 = 2;
      v8 = a2;
      v10 = a1;
      goto LABEL_13;
    }
  }
  return a1;
}

void std::__any_imp::_SmallHandler<re::BucketArray<re::VisualProxyHighFidelityHandlerData,4ul> *>::__handle[abi:nn180100](int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2255F11A8()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

void re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::VisualProxyHighFidelityHandlerData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::VisualProxyHighFidelityHandlerData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::operator()(uint64_t a1, uint64_t (***a2)(uint64_t))
{
  uint64_t v2;
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  result = (uint64_t *)(**a2)(3);
  v4 = *result;
  if (*result)
  {
    v5 = *(_QWORD *)(v4 + 40);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v7 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v4, i);
        re::DynamicArray<re::VisualProxyHighFidelityTextureCopyRequest>::deinit(v7);
      }
    }
    while (*(_QWORD *)(v4 + 8))
      re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)v4);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    *(_QWORD *)(v4 + 40) = 0;
    ++*(_DWORD *)(v4 + 48);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, v4);
  }
  return result;
}

_QWORD *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::VisualProxyHighFidelityHandlerData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED5ADB8;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::VisualProxyHighFidelityHandlerData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED5ADB8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::VisualProxyHighFidelityHandlerData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::size()
{
  return 16;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED5AE20;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::VisualProxyCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED5AE78;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::VisualProxyCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED5AED0;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::VisualProxyCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED5AF28;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::VisualProxyCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED5AE20;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED5AE78;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED5AED0;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED5AF28;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5AE20;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5AE20;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5AE78;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5AE78;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5AED0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5AED0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5AF28;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5AF28;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyCaptureComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 112 * (v2 & 3);
}

re::audio::ColorPaletteEditorMaterial *re::audio::ColorPaletteEditorMaterial::ColorPaletteEditorMaterial(re::audio::ColorPaletteEditorMaterial *this)
{
  char *v7;
  _OWORD v9[33];
  char v10[8];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *((_OWORD *)this + 2) = _Q0;
  *((_QWORD *)this + 6) = 0;
  v7 = (char *)this + 48;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  v9[0] = xmmword_226117EC0;
  v9[1] = xmmword_226117ED0;
  v9[2] = xmmword_226117EE0;
  v9[3] = xmmword_226117EF0;
  v9[4] = xmmword_226117F00;
  v9[5] = xmmword_226117F10;
  v9[6] = xmmword_226117F20;
  v9[7] = xmmword_226117F30;
  v9[8] = xmmword_226117F40;
  v9[9] = xmmword_226117F50;
  v9[10] = xmmword_226117F60;
  v9[11] = xmmword_226117F70;
  v9[12] = xmmword_226117F80;
  v9[13] = xmmword_226117F90;
  v9[14] = xmmword_226117FA0;
  v9[15] = xmmword_226117FB0;
  v9[16] = xmmword_226117FC0;
  v9[17] = xmmword_226117FD0;
  v9[18] = xmmword_226117FE0;
  v9[19] = xmmword_226117FF0;
  v9[20] = xmmword_226118000;
  v9[21] = xmmword_226118010;
  v9[22] = xmmword_226118020;
  v9[23] = xmmword_226118030;
  v9[24] = xmmword_226118040;
  v9[25] = xmmword_226118050;
  v9[26] = xmmword_226118060;
  v9[27] = xmmword_226118070;
  v9[28] = xmmword_226118080;
  v9[29] = xmmword_226118090;
  v9[30] = xmmword_2261180A0;
  v9[31] = xmmword_2261180B0;
  v9[32] = xmmword_2261180C0;
  _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE18__assign_with_sizeB8nn180100IPKS1_S7_EEvT_T0_l(this, (char *)v9, v10, 0x21uLL);
  std::vector<BOOL>::resize((uint64_t)v7, (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4, 1);
  return this;
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  void *__dst;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(_QWORD *)(a1 + 8) = a2;
    return;
  }
  v8 = *(_QWORD *)(a1 + 16);
  if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      goto LABEL_14;
    if ((unint64_t)(v8 << 6) > 0x3FFFFFFFFFFFFFFELL)
    {
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v10 = v8 << 7;
      if (v10 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      else
        v11 = v10;
      if (!v11)
      {
        v15 = 0;
        v14 = 0;
        v16 = *(_QWORD *)(a1 + 8);
LABEL_20:
        v17 = v16 + v6;
        v18 = *(_QWORD **)a1;
        if (v16 < 1)
        {
          LODWORD(v13) = 0;
          v12 = v14;
        }
        else
        {
          v19 = (unint64_t)v16 >> 6;
          if ((unint64_t)v16 >= 0x40)
          {
            v20 = v15;
            memmove(v14, *(const void **)a1, 8 * v19);
            v17 = v16 + v6;
            v15 = v20;
          }
          v12 = &v14[v19];
          v13 = v16 & 0x3F;
          if (v13)
            *v12 = *v12 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v13) | v18[v19] & (0xFFFFFFFFFFFFFFFFLL >> -(char)v13);
          v18 = *(_QWORD **)a1;
        }
        *(_QWORD *)a1 = v14;
        *(_QWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a1 + 16) = v15;
        if (v18)
          operator delete(v18);
        goto LABEL_29;
      }
      if ((v11 & 0x8000000000000000) != 0)
LABEL_14:
        abort();
    }
    __dst = 0;
    v22 = 0;
    v23 = 0;
    std::vector<BOOL>::__vallocate[abi:nn180100](&__dst, v11);
    if (!v22)
      *(_QWORD *)__dst = 0;
    v14 = (unint64_t *)__dst;
    v15 = v23;
    v16 = *(_QWORD *)(a1 + 8);
    goto LABEL_20;
  }
  v12 = (unint64_t *)(*(_QWORD *)a1 + 8 * (v5 >> 6));
  v13 = *(_QWORD *)(a1 + 8) & 0x3FLL;
  *(_QWORD *)(a1 + 8) = a2;
LABEL_29:
  if (a2 != v5)
  {
    if (a3)
    {
      __dst = v12;
      LODWORD(v22) = v13;
      std::__fill_n[abi:nn180100]<true,std::vector<BOOL>>(&__dst, v6);
    }
    else
    {
      __dst = v12;
      LODWORD(v22) = v13;
      std::__fill_n[abi:nn180100]<false,std::vector<BOOL>>((uint64_t)&__dst, v6);
    }
  }
}

re::audio::ColorPaletteARKitMaterial *re::audio::ColorPaletteARKitMaterial::ColorPaletteARKitMaterial(re::audio::ColorPaletteARKitMaterial *this)
{
  char *v7;
  _OWORD v9[26];
  char v10[8];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *((_OWORD *)this + 2) = _Q0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  v7 = (char *)this + 48;
  v9[0] = xmmword_2261180D0;
  v9[1] = xmmword_2261180D0;
  v9[2] = xmmword_2261180E0;
  v9[3] = xmmword_2261180F0;
  v9[4] = xmmword_226118100;
  v9[5] = xmmword_226118110;
  v9[6] = xmmword_226118120;
  v9[7] = xmmword_226118130;
  v9[8] = xmmword_226118140;
  v9[9] = xmmword_226118150;
  v9[10] = xmmword_226118160;
  v9[11] = xmmword_226118170;
  v9[12] = xmmword_226118180;
  v9[13] = xmmword_226118190;
  v9[14] = xmmword_2261181A0;
  v9[15] = xmmword_2261181B0;
  v9[16] = xmmword_2261181C0;
  v9[17] = xmmword_2261181D0;
  v9[18] = xmmword_2261181E0;
  v9[19] = xmmword_2261181F0;
  v9[20] = xmmword_226118200;
  v9[21] = xmmword_226118210;
  v9[22] = xmmword_226118220;
  v9[23] = xmmword_226118230;
  v9[24] = xmmword_226118240;
  v9[25] = xmmword_226118250;
  _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE18__assign_with_sizeB8nn180100IPKS1_S7_EEvT_T0_l(this, (char *)v9, v10, 0x1AuLL);
  std::vector<BOOL>::resize((uint64_t)v7, (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4, 1);
  return this;
}

re::audio::ColorPaletteARKitClassification *re::audio::ColorPaletteARKitClassification::ColorPaletteARKitClassification(re::audio::ColorPaletteARKitClassification *this)
{
  char *v7;
  _OWORD v9[42];
  char v10[8];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *((_OWORD *)this + 2) = _Q0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  v7 = (char *)this + 48;
  v9[0] = xmmword_226118260;
  v9[1] = xmmword_226104350;
  v9[2] = xmmword_22610BBE0;
  v9[3] = xmmword_226118270;
  v9[4] = xmmword_226118280;
  v9[5] = xmmword_226118290;
  v9[6] = xmmword_2261182A0;
  v9[7] = xmmword_2261182B0;
  v9[8] = xmmword_2261182C0;
  v9[9] = xmmword_2261182D0;
  v9[10] = xmmword_2261182E0;
  v9[11] = xmmword_2261182F0;
  v9[12] = xmmword_226118300;
  v9[13] = xmmword_226118310;
  v9[14] = xmmword_226118320;
  v9[15] = xmmword_226118330;
  v9[16] = xmmword_226118340;
  v9[17] = xmmword_226118350;
  v9[18] = xmmword_226118360;
  v9[19] = xmmword_226118370;
  v9[20] = xmmword_226118380;
  v9[21] = xmmword_226118390;
  v9[22] = xmmword_2261183A0;
  v9[23] = xmmword_2261183B0;
  v9[24] = xmmword_2261183C0;
  v9[25] = xmmword_2261183D0;
  v9[26] = xmmword_2261183E0;
  v9[27] = xmmword_2261183F0;
  v9[28] = xmmword_226118400;
  v9[29] = xmmword_226118410;
  v9[30] = xmmword_226118420;
  v9[31] = xmmword_226118430;
  v9[32] = xmmword_226118440;
  v9[33] = xmmword_226118450;
  v9[34] = xmmword_226118460;
  v9[35] = xmmword_226118470;
  v9[36] = xmmword_226118480;
  v9[37] = xmmword_226118490;
  v9[38] = xmmword_2261184A0;
  v9[39] = xmmword_2261184B0;
  v9[40] = xmmword_2261184C0;
  v9[41] = xmmword_2261184D0;
  _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE18__assign_with_sizeB8nn180100IPKS1_S7_EEvT_T0_l(this, (char *)v9, v10, 0x2AuLL);
  std::vector<BOOL>::resize((uint64_t)v7, (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4, 1);
  return this;
}

_QWORD *_ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE18__assign_with_sizeB8nn180100IPKS1_S7_EEvT_T0_l(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  void **v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  void *v17;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      goto LABEL_23;
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 60)
LABEL_23:
      abort();
    result = operator new(16 * v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[2 * v11];
    v12 = a3 - v6;
    if (v12)
      result = memcpy(result, v6, v12);
    v13 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v13 = (void **)(result + 1);
  v14 = (_BYTE *)result[1];
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
  {
    v12 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v17 = (void *)*result;
LABEL_21:
    result = memmove(v17, __src, v12);
    goto LABEL_22;
  }
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = memmove((void *)*result, __src, v14 - v9);
    v9 = (char *)*v13;
  }
  v12 = a3 - v16;
  if (v12)
  {
    v17 = v9;
    __src = v16;
    goto LABEL_21;
  }
LABEL_22:
  *v13 = &v9[v12];
  return result;
}

void *std::vector<BOOL>::__vallocate[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    abort();
  result = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

_QWORD *std::__fill_n[abi:nn180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:nn180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t re::ecs2::AudioPlayerComponent_upgradeVersion1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::AssetHandle>::operator=((re::AssetHandle *)(a3 + 168), (re::AssetHandle *)(a2 + 120));
  return 1;
}

uint64_t *re::ecs2::allocInfo_AudioPlayerComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254109C98);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254109C98))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254109F40, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254109F50 = 0;
    qword_254109F60 = 0;
    qword_254109F68 = 0xFFFFFFFFLL;
    qword_254109F40 = (uint64_t)&off_24ED7DAA8;
    qword_254109F70 = (uint64_t)"AudioPlayerComponent";
    dword_254109F78 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254109FB0 = 0;
    __cxa_guard_release(&qword_254109C98);
  }
  return &qword_254109F40;
}

void re::ecs2::initInfo_AudioPlayerComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  const re::IntrospectionBase *v9;
  uint64_t *v10;
  unsigned __int8 v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  re::IntrospectionRegistry *v16;
  const re::IntrospectionBase *v17;
  const char *v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  _anonymous_namespace_ *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  void *v39;
  uint64_t v40;
  uint64_t *v41;
  const re::IntrospectionBase *v42;
  void *v43;
  uint64_t v44;
  uint64_t *v45;
  const re::IntrospectionBase *v46;
  void *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  const re::IntrospectionBase *v53;
  void *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  re::IntrospectionBase *v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69[2];
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  const char *v73;
  const char *v74;
  _QWORD v75[2];
  __int128 v76;
  StringID v77;
  const char **v78;

  v72 = 0x913565130F19710CLL;
  v73 = "AudioPlayerComponent";
  re::StringID::destroyString((re::StringID *)&v72);
  *((_OWORD *)this + 2) = v65;
  v4 = atomic_load((unsigned __int8 *)&qword_254109C90);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254109C90);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254109EE8 = v8;
      v10 = re::introspectionAllocator((re *)v8);
      v11 = atomic_load((unsigned __int8 *)&qword_254109D28);
      if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254109D28))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_254109E48);
        qword_254109E48 = (uint64_t)&off_24ED5B0C8;
        __cxa_guard_release(&qword_254109D28);
      }
      if ((_MergedGlobals_180 & 1) == 0)
      {
        v12 = re::introspect_uint64_t((re *)1, v9);
        v13 = re::introspect_AudioSourceSyncState((re::IntrospectionBase **)1);
        if ((_MergedGlobals_180 & 1) == 0)
        {
          v14 = v13;
          _MergedGlobals_180 = 1;
          v15 = *(_DWORD *)(v13 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254109E48, 0);
          qword_254109E58 = 0x3000000007;
          dword_254109E60 = v15;
          word_254109E64 = 0;
          *(_QWORD *)&xmmword_254109E68 = 0;
          *((_QWORD *)&xmmword_254109E68 + 1) = 0xFFFFFFFFLL;
          qword_254109E78 = (uint64_t)v12;
          unk_254109E80 = 0;
          qword_254109E88 = v14;
          qword_254109E90 = 0;
          qword_254109E48 = (uint64_t)&off_24ED5B0C8;
          re::IntrospectionRegistry::add(v16, v17);
          re::getPrettyTypeName((re *)&qword_254109E48, (const re::IntrospectionBase *)&v72);
          if ((v73 & 1) != 0)
            v18 = v74;
          else
            v18 = (char *)&v73 + 1;
          if (v72 && (v73 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v72 + 40))();
          v19 = v12[2];
          v67 = *(_OWORD *)(v14 + 32);
          v68 = v19;
          v20 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v69);
          if (v20)
          {
            v21 = *v20;
            *((_QWORD *)&v66 + 1) = v21;
          }
          else
          {
            v72 = 0x449AD97C4B77BED4;
            v73 = "_CompareFunc";
            v22 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v72);
            if (v22)
            {
              v23 = *v22;
              re::StringID::destroyString((re::StringID *)&v72);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v72);
              *(_QWORD *)&v77.var0 = 0x449AD97C4B77BED4;
              v77.var1 = "_CompareFunc";
              v24 = (void *)v72;
              v23 = (uint64_t)v73;
              re::StringID::destroyString((re::StringID *)&v77);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v77, (uint64_t)&v73);
            if (!v24
              || (v25 = *v78,
                  v72 = v23,
                  v73 = v25,
                  LODWORD(v74) = -1,
                  (v26 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v77.var0 + 768, &v72)) == 0)|| !*(_QWORD *)v26)
            {
              v76 = v68;
              v75[0] = v24;
              v75[1] = v23;
            }
            v70 = v67;
            v71 = v68;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v72, v69, 1, 0x30uLL, 8uLL, &v71, &v70);
            re::TypeBuilder::setConstructor((uint64_t)&v72, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v72, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v72, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v72, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v72, v27);
          }
          xmmword_254109E68 = v66;
          re::StringID::destroyString((re::StringID *)v69);
        }
      }
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "syncStatesByToken";
      *(_QWORD *)(v28 + 16) = &qword_254109E48;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x2000000001;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_254109EF0 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "registeredAssets";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0xA800000002;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_254109EF8 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v35 = re::introspect_uint64_t((re *)1, v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "sharedEntityID";
      *(_QWORD *)(v36 + 16) = v35;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0x13000000007;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_254109F00 = v36;
      v37 = re::introspectionAllocator((re *)v36);
      v39 = re::introspect_float((re *)1, v38);
      v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
      *(_DWORD *)v40 = 1;
      *(_QWORD *)(v40 + 8) = "gain";
      *(_QWORD *)(v40 + 16) = v39;
      *(_QWORD *)(v40 + 24) = 0;
      *(_QWORD *)(v40 + 32) = 0x11000000008;
      *(_DWORD *)(v40 + 40) = 0;
      *(_QWORD *)(v40 + 48) = 0;
      *(_QWORD *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_254109F08 = v40;
      v41 = re::introspectionAllocator((re *)v40);
      v43 = re::introspect_float((re *)1, v42);
      v44 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v41 + 32))(v41, 72, 8);
      *(_DWORD *)v44 = 1;
      *(_QWORD *)(v44 + 8) = "directLevel";
      *(_QWORD *)(v44 + 16) = v43;
      *(_QWORD *)(v44 + 24) = 0;
      *(_QWORD *)(v44 + 32) = 0x11400000009;
      *(_DWORD *)(v44 + 40) = 0;
      *(_QWORD *)(v44 + 48) = 0;
      *(_QWORD *)(v44 + 56) = 0;
      *(_DWORD *)(v44 + 64) = 0;
      qword_254109F10 = v44;
      v45 = re::introspectionAllocator((re *)v44);
      v47 = re::introspect_float((re *)1, v46);
      v48 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v45 + 32))(v45, 72, 8);
      *(_DWORD *)v48 = 1;
      *(_QWORD *)(v48 + 8) = "reverbLevel";
      *(_QWORD *)(v48 + 16) = v47;
      *(_QWORD *)(v48 + 24) = 0;
      *(_QWORD *)(v48 + 32) = 0x1180000000ALL;
      *(_DWORD *)(v48 + 40) = 0;
      *(_QWORD *)(v48 + 48) = 0;
      *(_QWORD *)(v48 + 56) = 0;
      *(_DWORD *)(v48 + 64) = 0;
      qword_254109F18 = v48;
      v49 = re::introspectionAllocator((re *)v48);
      v50 = re::introspect_AudioGainChange((re::IntrospectionBase **)1);
      v51 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v49 + 32))(v49, 72, 8);
      *(_DWORD *)v51 = 1;
      *(_QWORD *)(v51 + 8) = "gainChange";
      *(_QWORD *)(v51 + 16) = v50;
      *(_QWORD *)(v51 + 24) = 0;
      *(_QWORD *)(v51 + 32) = 0xE00000000BLL;
      *(_DWORD *)(v51 + 40) = 0;
      *(_QWORD *)(v51 + 48) = 0;
      *(_QWORD *)(v51 + 56) = 0;
      *(_DWORD *)(v51 + 64) = 0;
      qword_254109F20 = v51;
      v52 = re::introspectionAllocator((re *)v51);
      v54 = re::introspect_float((re *)1, v53);
      v55 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v52 + 32))(v52, 72, 8);
      *(_DWORD *)v55 = 1;
      *(_QWORD *)(v55 + 8) = "rolloffFactor";
      *(_QWORD *)(v55 + 16) = v54;
      *(_QWORD *)(v55 + 24) = 0;
      *(_QWORD *)(v55 + 32) = 0x11C0000000CLL;
      *(_DWORD *)(v55 + 40) = 0;
      *(_QWORD *)(v55 + 48) = 0;
      *(_QWORD *)(v55 + 56) = 0;
      *(_DWORD *)(v55 + 64) = 0;
      qword_254109F28 = v55;
      v56 = re::introspectionAllocator((re *)v55);
      v57 = re::audio::introspect_AudioSourceDirectivityConfiguration((re::IntrospectionBase **)1);
      v58 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v56 + 32))(v56, 72, 8);
      *(_DWORD *)v58 = 1;
      *(_QWORD *)(v58 + 8) = "directivityConfig";
      *(_QWORD *)(v58 + 16) = v57;
      *(_QWORD *)(v58 + 24) = 0;
      *(_QWORD *)(v58 + 32) = 0xD00000000DLL;
      *(_DWORD *)(v58 + 40) = 0;
      *(_QWORD *)(v58 + 48) = 0;
      *(_QWORD *)(v58 + 56) = 0;
      *(_DWORD *)(v58 + 64) = 0;
      qword_254109F30 = v58;
      v59 = re::introspectionAllocator((re *)v58);
      v60 = v59;
      v61 = (uint64_t *)re::internal::introspectionInfoStorage<re::ecs2::v1::AudioPlayerComponent>;
      if (!re::internal::introspectionInfoStorage<re::ecs2::v1::AudioPlayerComponent>)
      {
        v61 = re::ecs2::v1::allocInfo_AudioPlayerComponent((re::ecs2::v1 *)v59);
        re::internal::introspectionInfoStorage<re::ecs2::v1::AudioPlayerComponent> = (uint64_t)v61;
        re::ecs2::v1::initInfo_AudioPlayerComponent((re::ecs2::v1 *)v61, v62);
      }
      v63 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v60 + 32))(v60, 64, 8);
      *(_DWORD *)v63 = 6;
      *(_QWORD *)(v63 + 8) = 2;
      *(_QWORD *)(v63 + 16) = v61;
      *(_QWORD *)(v63 + 24) = 0;
      *(_QWORD *)(v63 + 32) = re::ecs2::AudioPlayerComponent_upgradeVersion1;
      *(_BYTE *)(v63 + 40) = 0;
      *(_QWORD *)(v63 + 48) = 0;
      *(_DWORD *)(v63 + 56) = 0;
      qword_254109F38 = v63;
      __cxa_guard_release(&qword_254109C90);
    }
  }
  *((_QWORD *)this + 2) = 0x1F000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 11;
  *((_QWORD *)this + 8) = &qword_254109EE8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioPlayerComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AudioPlayerComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AudioPlayerComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioPlayerComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v64 = v65;
}

re::ecs2::AudioPlayerComponent *re::internal::defaultConstruct<re::ecs2::AudioPlayerComponent>(int a1, int a2, re::ecs2::AudioPlayerComponent *this)
{
  return re::ecs2::AudioPlayerComponent::AudioPlayerComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::AudioPlayerComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::AudioPlayerComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_AudioPlayerComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioPlayerComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioPlayerComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioPlayerComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioPlayerComponent>, this);
}

uint64_t *re::ecs2::allocInfo_AudioPlayerSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254109CA0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254109CA0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254109FB8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254109FC8 = 0;
    qword_254109FD8 = 0;
    qword_254109FE0 = 0xFFFFFFFFLL;
    qword_254109FB8 = (uint64_t)&off_24ED7DAA8;
    qword_254109FE8 = (uint64_t)"AudioPlayerSystem";
    dword_254109FF0 = 0;
    xmmword_254109FF8 = 0u;
    unk_25410A008 = 0u;
    xmmword_25410A018 = 0u;
    qword_25410A028 = 0;
    __cxa_guard_release(&qword_254109CA0);
  }
  return &qword_254109FB8;
}

void re::ecs2::initInfo_AudioPlayerSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x73CC591B6CA5568CLL;
  v5[1] = "AudioPlayerSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x11800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_AudioPlayerSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioPlayerSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AudioPlayerSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::AudioPlayerSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::AudioPlayerSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AudioPlayerSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioPlayerSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::AudioPlayerSystem *re::internal::defaultConstruct<re::ecs2::AudioPlayerSystem>(int a1, int a2, re::ecs2::AudioPlayerSystem *this)
{
  return re::ecs2::AudioPlayerSystem::AudioPlayerSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::AudioPlayerSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table(a3 + 240);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table(a3 + 200);
  re::HashTable<re::ecs2::Scene const*,re::HashTable<unsigned long long,re::SharedPtr<re::AudioSourceState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)(a3 + 112));

  *(_QWORD *)a3 = &off_24ED426B8;
  return objc_destructInstance((id)(a3 + 8));
}

void *re::internal::defaultDestructV2<re::ecs2::AudioPlayerSystem>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table(a1 + 240);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table(a1 + 200);
  re::HashTable<re::ecs2::Scene const*,re::HashTable<unsigned long long,re::SharedPtr<re::AudioSourceState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)(a1 + 112));

  *(_QWORD *)a1 = &off_24ED426B8;
  return objc_destructInstance((id)(a1 + 8));
}

uint64_t re::ecs2::introspect_AudioPlayerSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioPlayerSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioPlayerSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioPlayerSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioPlayerSystem>, this);
}

re::ecs2::AudioPlayerComponent *re::ecs2::AudioPlayerComponent::AudioPlayerComponent(re::ecs2::AudioPlayerComponent *this)
{
  uint64_t v2;
  unsigned int *v3;
  _QWORD *v4;
  void *v5;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_24ED5AF80;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_DWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 68) = 0x7FFFFFFFLL;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_DWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 116) = 0x7FFFFFFFLL;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  *(_DWORD *)(v2 + 152) = 0;
  *(_QWORD *)(v2 + 200) = 0;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_DWORD *)(v2 + 192) = 0;
  *(_DWORD *)(v2 + 208) = 1;
  *(_OWORD *)(v2 + 212) = xmmword_226118540;
  *(_DWORD *)(v2 + 228) = 1065353216;
  *(_QWORD *)(v2 + 232) = 0;
  *(_DWORD *)(v2 + 240) = 1;
  *(_DWORD *)(v2 + 248) = 0;
  *(_BYTE *)(v2 + 252) = 0;
  *(_DWORD *)(v2 + 256) = 1065353216;
  *(_QWORD *)(v2 + 276) = 0;
  *(_QWORD *)(v2 + 260) = 0;
  *(_QWORD *)(v2 + 268) = 0;
  *(_DWORD *)(v2 + 284) = 1065353216;
  *(_QWORD *)(v2 + 288) = 0;
  *(_BYTE *)(v2 + 296) = 1;
  v3 = (unsigned int *)(v2 + 312);
  v4 = (_QWORD *)(v2 + 360);
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_QWORD *)(v2 + 384) = 0;
  re::DynamicString::setCapacity(v4, 0);
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *((_QWORD *)this + 53) = 0x7FFFFFFF00000000;
  *((_DWORD *)this + 108) = 0;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *((_DWORD *)this + 118) = 0;
  *(_QWORD *)((char *)this + 476) = 0x7FFFFFFFLL;
  *((_QWORD *)this + 61) = 0;
  v5 = (void *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;

  atomic_store(0, v3);
  atomic_store(0, (unsigned int *)this + 79);
  atomic_store(0, (unsigned int *)this + 80);
  atomic_store(0, (unsigned int *)this + 81);
  return this;
}

void re::ecs2::AudioPlayerComponent::~AudioPlayerComponent(uint64_t **this)
{
  re::ecs2::AudioPlayerComponent *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = (re::ecs2::AudioPlayerComponent *)this;
  *this = (uint64_t *)&off_24ED5AF80;
  v2 = this[41];
  v3 = this[42];
  while (v2 != v3)
  {
    v4 = *v2;
    if (*v2)
    {
      v5 = re::globalAllocators((re *)this);
      this = (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5[2] + 40))(v5[2], v4);
    }
    ++v2;
  }
  v6 = *((_QWORD *)v1 + 18);
  if (v6)
  {
    v7 = (uint64_t *)*((_QWORD *)v1 + 20);
    v8 = 8 * v6;
    do
    {
      v9 = *v7;
      if (*v7)
        v10 = (id)(v9 + 8);
      *(_QWORD *)(v9 + 480) = 0;

      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  if (*((_DWORD *)v1 + 105))
  {
    v11 = *((unsigned int *)v1 + 104);
    if ((_DWORD)v11)
      memset_pattern16(*((void **)v1 + 50), &unk_2260EB7B0, 4 * v11);
    v12 = *((unsigned int *)v1 + 106);
    if ((_DWORD)v12)
    {
      v13 = 0;
      v14 = 32 * v12;
      do
      {
        v15 = *((_QWORD *)v1 + 51) + v13;
        v16 = *(_DWORD *)(v15 + 8);
        if (v16 < 0)
          *(_DWORD *)(v15 + 8) = v16 & 0x7FFFFFFF;
        v13 += 32;
      }
      while (v14 != v13);
    }
    *((_DWORD *)v1 + 107) = 0x7FFFFFFF;
    *(_QWORD *)((char *)v1 + 420) = 0;
    ++*((_DWORD *)v1 + 108);
  }
  if (*((_DWORD *)v1 + 27))
  {
    v17 = *((unsigned int *)v1 + 26);
    if ((_DWORD)v17)
      memset_pattern16(*((void **)v1 + 11), &unk_2260EB7B0, 4 * v17);
    v18 = *((unsigned int *)v1 + 28);
    if ((_DWORD)v18)
    {
      v19 = 0;
      v20 = 32 * v18;
      do
      {
        v21 = *((_QWORD *)v1 + 12) + v19;
        v22 = *(_DWORD *)(v21 + 8);
        if (v22 < 0)
          *(_DWORD *)(v21 + 8) = v22 & 0x7FFFFFFF;
        v19 += 32;
      }
      while (v20 != v19);
    }
    *((_DWORD *)v1 + 27) = 0;
    *((_DWORD *)v1 + 28) = 0;
    v23 = *((_DWORD *)v1 + 30) + 1;
    *((_DWORD *)v1 + 29) = 0x7FFFFFFF;
    *((_DWORD *)v1 + 30) = v23;
  }
  v24 = *((_QWORD *)v1 + 18);
  *((_QWORD *)v1 + 18) = 0;
  if (v24)
  {
    v25 = *((_QWORD *)v1 + 20);
    v26 = 8 * v24;
    do
    {
      if (*(_QWORD *)v25)
      {

        *(_QWORD *)v25 = 0;
      }
      v25 += 8;
      v26 -= 8;
    }
    while (v26);
  }
  ++*((_DWORD *)v1 + 38);
  atomic_store(0, (unsigned int *)v1 + 80);
  atomic_store(0, (unsigned int *)v1 + 81);
  re::HashTable<unsigned long long,void({block_pointer} {__strong})(unsigned long long,REAudioPlaybackState,REAudioPlaybackState),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v1 + 55);
  v27 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v1 + 49);
  v28 = *((_QWORD *)v1 + 45);
  if (v28)
  {
    if ((*((_BYTE *)v1 + 368) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v28 + 40))(v28, *((_QWORD *)v1 + 47), v27);
    *(_OWORD *)((char *)v1 + 360) = 0u;
    *(_OWORD *)((char *)v1 + 376) = 0u;
  }
  v29 = (void *)*((_QWORD *)v1 + 41);
  if (v29)
  {
    *((_QWORD *)v1 + 42) = v29;
    operator delete(v29);
  }

  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)v1 + 168);
  v30 = *((_QWORD *)v1 + 16);
  if (v30)
  {
    v31 = *((_QWORD *)v1 + 20);
    if (v31)
    {
      v32 = *((_QWORD *)v1 + 18);
      if (v32)
      {
        v33 = 8 * v32;
        do
        {
          if (*(_QWORD *)v31)
          {

            *(_QWORD *)v31 = 0;
          }
          v31 += 8;
          v33 -= 8;
        }
        while (v33);
        v30 = *((_QWORD *)v1 + 16);
        v31 = *((_QWORD *)v1 + 20);
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 40))(v30, v31);
    }
    *((_QWORD *)v1 + 20) = 0;
    *((_QWORD *)v1 + 17) = 0;
    *((_QWORD *)v1 + 18) = 0;
    *((_QWORD *)v1 + 16) = 0;
    ++*((_DWORD *)v1 + 38);
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v1 + 10);
  re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v1 + 4);
  *(_QWORD *)v1 = &off_24ED426B8;
  objc_destructInstance((char *)v1 + 8);
}

{
  re::ecs2::AudioPlayerComponent::~AudioPlayerComponent(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::AudioPlayerComponent::audioService(re::ecs2::AudioPlayerComponent *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    return 0;
  do
  {
    v2 = v1;
    v1 = *(_QWORD *)(v1 + 24);
  }
  while (v1);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3
    && (v4 = *(_QWORD *)(v3 + 56)) != 0
    && (v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4),
        (v6 = re::ServiceLocator::serviceOrNull<re::AudioSceneService>(v5)) != 0))
  {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v3);
  }
  else
  {
    return 0;
  }
}

uint64_t re::ecs2::AudioPlayerComponent::getTimebaseService(re::ecs2::AudioPlayerComponent *this)
{
  re::ecs2::AudioPlayerComponent *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!this)
    return 0;
  do
  {
    v1 = this;
    this = (re::ecs2::AudioPlayerComponent *)*((_QWORD *)this + 3);
  }
  while (this);
  v2 = *((_QWORD *)v1 + 2);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 56);
  if (!v3)
    return 0;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  return re::ServiceLocator::serviceOrNull<re::TimebaseService>(v4);
}

uint64_t re::ServiceLocator::serviceOrNull<re::TimebaseService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::TimebaseService>(void)::info = re::introspect_TimebaseService(0);
  }
  v3 = re::introspect<re::TimebaseService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

uint64_t re::ServiceLocator::serviceOrNull<re::SharedClockService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::SharedClockService>(void)::info = re::introspect_SharedClockService(0);
  }
  v3 = re::introspect<re::SharedClockService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

re *re::ecs2::AudioPlayerComponent::copyPreferredMasterClock(re::ecs2::AudioPlayerComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  re *result;
  uint64_t TimebaseService;
  OpaqueCMClock **v11;
  const void *v12;

  v2 = *((_QWORD *)this + 2);
  if (!v2)
    goto LABEL_9;
  do
  {
    v3 = v2;
    v2 = *(_QWORD *)(v2 + 24);
  }
  while (v2);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4
    || (v5 = *(_QWORD *)(v4 + 56)) == 0
    || (v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5),
        (v7 = re::ServiceLocator::serviceOrNull<re::SharedClockService>(v6)) == 0)
    || (v8 = v7, (result = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7)) == 0)
    && (result = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 80))(v8)) == 0)
  {
LABEL_9:
    TimebaseService = re::ecs2::AudioPlayerComponent::getTimebaseService(*((re::ecs2::AudioPlayerComponent **)this + 2));
    if (TimebaseService)
    {
      v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)TimebaseService + 32))(TimebaseService);
      return (re *)CFRetain(v12);
    }
    else
    {
      return re::TimebaseService::CreateAudioClock(0, v11);
    }
  }
  return result;
}

void re::ecs2::AudioPlayerComponent::playbackStateDidChange(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  uint64_t *v8;
  re *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  re::EventBus *v19;
  BOOL v20;
  _BOOL8 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  OpaqueCMTimebase *v26;
  double Seconds;
  uint64_t v28;
  signed int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t i;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  _DWORD *v44;
  int v45;
  char *v46;
  int v47;
  uint64_t v48;
  int *v49;
  int v50;
  uint64_t v51;
  _QWORD *v52;
  int v53;
  int v54;
  unsigned __int8 v55;
  NSObject *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void **v63;
  void **v64;
  const char *v65;
  const char *v66;
  re::EventBus *v67;
  BOOL v68;
  void *v69;
  CMTime time;
  void *__p[2];
  char v72;
  void *v73[2];
  uint64_t v74;
  void *__b[4];
  _BYTE v76[12];
  void **v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v8 = re::audioLogObjects((re *)a1);
  v9 = (re *)re::AudioLogObjects::loggingEnabled((re::AudioLogObjects *)v8);
  if ((_DWORD)v9)
  {
    v56 = (id)*re::audioLogObjects(v9);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
    {
      v57 = *(void **)(a1 + 304);
      if (!v57)
        v57 = *(void **)(a1 + 352);
      v58 = *(_QWORD *)(a1 + 16);
      if (!v58)
        goto LABEL_94;
      v59 = *(_QWORD *)(a1 + 16);
      do
      {
        v60 = v59;
        v59 = *(_QWORD *)(v59 + 24);
      }
      while (v59);
      if (*(_QWORD *)(v60 + 16))
      {
        do
        {
          v62 = v58;
          v58 = *(_QWORD *)(v58 + 24);
        }
        while (v58);
        v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v62 + 16) + 104) + 272) >> 1;
      }
      else
      {
LABEL_94:
        v61 = -1;
      }
      v63 = v73;
      re::audio::nameForPlaybackState((uint64_t)a3, v73);
      if (v74 < 0)
        v63 = (void **)v73[0];
      re::audio::nameForPlaybackState(a4, __p);
      if (v72 >= 0)
        v64 = __p;
      else
        v64 = (void **)__p[0];
      LODWORD(__b[0]) = 134219010;
      *(void **)((char *)__b + 4) = v57;
      WORD2(__b[1]) = 2048;
      *(void **)((char *)&__b[1] + 6) = (void *)v61;
      HIWORD(__b[2]) = 2048;
      __b[3] = (void *)a2;
      *(_WORD *)v76 = 2080;
      *(_QWORD *)&v76[2] = v63;
      *(_WORD *)&v76[10] = 2080;
      v77 = v64;
      _os_log_debug_impl(&dword_224FE9000, v56, OS_LOG_TYPE_DEBUG, "AudioPlayerComponent (entityID=%llu, sceneID=%llu) stream %llu changed state from %s to %s", (uint8_t *)__b, 0x34u);
      if (v72 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v74) < 0)
        operator delete(v73[0]);
    }

  }
  v10 = re::ecs2::AudioPlayerComponent::sourceStateForToken((re::ecs2::AudioPlayerComponent *)a1, a2);
  v11 = v10;
  if (v10)
  {
    v12 = *(_DWORD *)(v10 + 724);
    if (v12 == 1)
    {
      v13 = 1;
    }
    else
    {
      v13 = v12 == 3;
      if (a4 == 1 && v12 == 2)
      {
LABEL_10:
        *(_DWORD *)(v10 + 724) = 0;
        goto LABEL_11;
      }
    }
    switch(a4)
    {
      case 0:
      case 3:
        if (a4 == 2 || v13)
          goto LABEL_10;
        break;
      case 2:
      case 5:
        goto LABEL_10;
      default:
        break;
    }
  }
LABEL_11:
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    goto LABEL_34;
  v15 = *(_QWORD *)(a1 + 16);
  do
  {
    v16 = v15;
    v15 = *(_QWORD *)(v15 + 24);
  }
  while (v15);
  if (!*(_QWORD *)(v16 + 16))
  {
LABEL_34:
    v20 = 0;
    v19 = 0;
    LOBYTE(v21) = a4 == 2;
LABEL_35:
    if (!a3 && v21 || a3 == (void *)2 && !a4)
      return;
    goto LABEL_39;
  }
  v17 = *(_QWORD *)(a1 + 16);
  do
  {
    v18 = v17;
    v17 = *(_QWORD *)(v17 + 24);
  }
  while (v17);
  v19 = *(re::EventBus **)(*(_QWORD *)(v18 + 16) + 288);
  v20 = v19 != 0;
  v21 = a4 == 2;
  if (a4 != 2 || a3 != (void *)1 || !v19)
    goto LABEL_35;
  if (*(_QWORD *)(a1 + 392))
  {
    v22 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    v23 = *(unsigned int *)(*(_QWORD *)(a1 + 400) + 4 * ((v22 ^ (v22 >> 31)) % *(unsigned int *)(a1 + 416)));
    if ((_DWORD)v23 != 0x7FFFFFFF)
    {
      v24 = *(_QWORD *)(a1 + 408);
      if (*(_QWORD *)(v24 + 32 * v23 + 16) == a2)
      {
LABEL_25:
        (*(void (**)(unint64_t))(v24 + 32 * v23 + 24))(a2);
      }
      else
      {
        while (1)
        {
          v23 = *(_DWORD *)(v24 + 32 * v23 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v23 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v24 + 32 * v23 + 16) == a2)
            goto LABEL_25;
        }
      }
    }
  }
  __b[0] = (void *)a2;
  v25 = atomic_load((unsigned __int8 *)&qword_254109D38);
  if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_254109D38))
  {
    qword_254109D30 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"29REAudioPlayerDidCompleteEvent" & 0x7FFFFFFFFFFFFFFFLL), v65);
    __cxa_guard_release(&qword_254109D38);
  }
  re::EventBus::publish(v19, v14, qword_254109D30, (uint64_t)__b, 8uLL, 0);
  if (v11)
  {
    if (*(_QWORD *)(v11 + 448) != -1)
    {
      v26 = *(OpaqueCMTimebase **)(v11 + 696);
      if (v26)
      {
        if (CMTimebaseGetRate(*(CMTimebaseRef *)(v11 + 696)) != 0.0)
        {
          CMTimebaseGetTime(&time, v26);
          Seconds = CMTimeGetSeconds(&time);
          if (Seconds >= re::ecs2::AudioPlayerComponent::assetDurationFor((re::ecs2::AudioPlayerComponent *)a1, a2)
                        + -0.01)
            re::ecs2::AudioPlayerComponent::doStop((re::ecs2::AudioPlayerComponent *)a1, a2, (re::AudioSourceState *)v11, 0);
        }
      }
    }
  }
  v20 = 1;
LABEL_39:
  v68 = v20;
  v67 = v19;
  v69 = (void *)v14;
  *(_DWORD *)v76 = 0;
  memset(__b, 0, sizeof(__b));
  *(_QWORD *)&v76[4] = 0x7FFFFFFFLL;
  v28 = *(_QWORD *)(a1 + 440);
  if (v28)
  {
    if (*(_DWORD *)(a1 + 468) <= 3u)
      v29 = 3;
    else
      v29 = *(_DWORD *)(a1 + 468);
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)__b, v28, v29);
    if (HIDWORD(__b[3]))
    {
      if (LODWORD(__b[3]))
        memset_pattern16(__b[1], &unk_2260EB7B0, 4 * LODWORD(__b[3]));
      v30 = *(unsigned int *)v76;
      if (*(_DWORD *)v76)
      {
        v31 = 0;
        v32 = 0;
        do
        {
          v33 = (char *)__b[2] + v31;
          v34 = *(_DWORD *)((char *)__b[2] + v31 + 8);
          if (v34 < 0)
          {
            *((_DWORD *)v33 + 2) = v34 & 0x7FFFFFFF;

            v30 = *(unsigned int *)v76;
          }
          ++v32;
          v31 += 32;
        }
        while (v32 < v30);
      }
      HIDWORD(__b[3]) = 0;
      *(_QWORD *)v76 = 0x7FFFFFFF00000000;
      ++*(_DWORD *)&v76[8];
    }
    v35 = *(_DWORD *)(a1 + 468);
    if (LODWORD(__b[3]) < v35)
      re::HashTable<unsigned long long,void({block_pointer} {__strong})(unsigned long long,REAudioPlaybackState,REAudioPlaybackState),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)__b, v35);
    v36 = *(unsigned int *)(a1 + 472);
    if ((_DWORD)v36)
    {
      v37 = 0;
      for (i = 0; i < v36; ++i)
      {
        v39 = (unint64_t *)(*(_QWORD *)(a1 + 456) + v37);
        if ((v39[1] & 0x80000000) != 0)
        {
          v40 = *v39;
          v41 = *(unsigned int *)&v76[4];
          v42 = *v39 % LODWORD(__b[3]);
          if (*(_DWORD *)&v76[4] == 0x7FFFFFFF)
          {
            v41 = *(unsigned int *)v76;
            v43 = *(_DWORD *)v76;
            if (*(_DWORD *)v76 == LODWORD(__b[3]))
            {
              re::HashTable<unsigned long long,void({block_pointer} {__strong})(unsigned long long,REAudioPlaybackState,REAudioPlaybackState),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)__b, 2 * HIDWORD(__b[3]));
              v43 = *(_DWORD *)v76;
              v42 = v40 % LODWORD(__b[3]);
            }
            *(_DWORD *)v76 = v43 + 1;
            v44 = __b[2];
            v45 = *((_DWORD *)__b[2] + 8 * v41 + 2);
          }
          else
          {
            v44 = __b[2];
            v45 = *((_DWORD *)__b[2] + 8 * *(unsigned int *)&v76[4] + 2);
            *(_DWORD *)&v76[4] = v45 & 0x7FFFFFFF;
          }
          v44[8 * v41 + 2] = v45 | 0x80000000;
          *((_DWORD *)__b[2] + 8 * v41 + 2) = *((_DWORD *)__b[2] + 8 * v41 + 2) & 0x80000000 | *((_DWORD *)__b[1] + v42);
          *((_QWORD *)__b[2] + 4 * v41) = v40;
          *((_QWORD *)__b[2] + 4 * v41 + 2) = v39[2];
          v46 = (char *)__b[2] + 32 * v41;
          *((_QWORD *)v46 + 3) = _Block_copy((const void *)v39[3]);
          *((_DWORD *)__b[1] + v42) = v41;
          ++HIDWORD(__b[3]);
          v36 = *(unsigned int *)(a1 + 472);
        }
        v37 += 32;
      }
    }
  }
  v47 = *(_DWORD *)v76;
  if (*(_DWORD *)v76)
  {
    v48 = 0;
    v49 = (int *)((char *)__b[2] + 8);
    while (1)
    {
      v50 = *v49;
      v49 += 8;
      if (v50 < 0)
        break;
      if (*(unsigned int *)v76 == ++v48)
      {
        LODWORD(v48) = *(_DWORD *)v76;
        break;
      }
    }
  }
  else
  {
    LODWORD(v48) = 0;
  }
  if (*(_DWORD *)v76 != (_DWORD)v48)
  {
    v51 = v48;
    v52 = __b[2];
    do
    {
      (*(void (**)(_QWORD))(v52[4 * v51 + 3] + 16))(v52[4 * v51 + 3]);
      v52 = __b[2];
      if (*(_DWORD *)v76 <= (v48 + 1))
        v53 = v48 + 1;
      else
        v53 = *(_DWORD *)v76;
      v54 = v48;
      while (1)
      {
        v51 = (v54 + 1);
        if (v53 - 1 == v54)
          break;
        ++v54;
        LODWORD(v48) = v51;
        if ((*((_DWORD *)__b[2] + 8 * v51 + 2) & 0x80000000) != 0)
          goto LABEL_80;
      }
      LODWORD(v48) = v53;
LABEL_80:
      ;
    }
    while (v47 != (_DWORD)v48);
  }
  if (v68)
  {
    v73[0] = (void *)a2;
    v73[1] = a3;
    v74 = a4;
    v55 = atomic_load((unsigned __int8 *)&qword_254109D48);
    if ((v55 & 1) == 0)
    {
      if (__cxa_guard_acquire(&qword_254109D48))
      {
        qword_254109D40 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"32REAudioPlayerDidChangeStateEvent" & 0x7FFFFFFFFFFFFFFFLL), v66);
        __cxa_guard_release(&qword_254109D48);
      }
    }
    re::EventBus::publish(v67, (uint64_t)v69, qword_254109D40, (uint64_t)v73, 0x18uLL, 0);
  }
  re::HashTable<unsigned long long,void({block_pointer} {__strong})(unsigned long long,REAudioPlaybackState,REAudioPlaybackState),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)__b);
}

re::ecs2::NetworkComponent *re::ecs2::AudioPlayerComponent::sourceStateForToken(re::ecs2::AudioPlayerComponent *this, unint64_t a2)
{
  char *v3;
  re::ecs2::NetworkComponent *result;
  re::ecs2::NetworkComponent *v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;

  v8 = a2;
  v3 = (char *)this + 80;
  result = (re::ecs2::NetworkComponent *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 80, (uint64_t *)&v8);
  if (result)
    return *(re::ecs2::NetworkComponent **)result;
  v9 = v8;
  result = (re::ecs2::NetworkComponent *)re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 32, (uint64_t *)&v9);
  if (result)
  {
    v5 = result;
    v6 = *((_QWORD *)this + 2);
    if (v6 && (result = *(re::ecs2::NetworkComponent **)(v6 + 200)) != 0)
    {
      result = (re::ecs2::NetworkComponent *)re::ecs2::NetworkComponent::owningProcessType(result);
      v7 = (int)result;
    }
    else
    {
      v7 = 0;
    }
    if (re::ecs2::AudioPlayerComponent::shouldCreateSourceStateForUnmatchedSyncState((uint64_t)result, (uint64_t)v5, v7))
      re::ecs2::AudioPlayerComponent::createSourceStateForUnmatchedSyncState(this, v8, (uint64_t)v5, v7, 0);
    result = (re::ecs2::NetworkComponent *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)v3, (uint64_t *)&v8);
    if (result)
      return *(re::ecs2::NetworkComponent **)result;
  }
  return result;
}

double re::ecs2::AudioPlayerComponent::assetDurationFor(re::ecs2::AudioPlayerComponent *this, unint64_t a2)
{
  uint64_t v2;
  re::AssetHandle *v3;
  double v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  double v8;
  double v9;
  _BYTE v11[8];
  uint64_t v12;

  v2 = re::ecs2::AudioPlayerComponent::sourceStateForToken(this, a2);
  if (!v2)
    return 0.0;
  v3 = re::AssetHandle::AssetHandle((re::AssetHandle *)v11, (const re::AssetHandle *)(v2 + 32));
  v4 = 0.0;
  if (v12)
  {
    v5 = atomic_load((unsigned int *)(v12 + 704));
    if (v5 == 2)
    {
      v6 = *(uint64_t **)(v12 + 264);
      if (v6 == re::AudioFileAsset::assetType(v3))
      {
        v7 = re::AssetHandle::loadedAsset<re::AudioFileAsset>((re::AudioFileAsset *)v11);
        v8 = (double)*(unint64_t *)(v7 + 136);
        objc_msgSend(*(id *)(*(_QWORD *)(v7 + 8) + 8), "sampleRate");
        v4 = v8 / v9;
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
  return v4;
}

void re::ecs2::AudioPlayerComponent::doStop(re::ecs2::AudioPlayerComponent *this, unint64_t a2, re::AudioSourceState *a3, re::AudioSourceSyncState *a4)
{
  re *v8;
  int v9;
  NSObject *v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  const char *v20;
  _QWORD *v21;
  char *v22;
  OpaqueCMTimebase *v23;
  CMClockOrTimebaseRef v24;
  re::AudioFileGroupAsset *v25;
  uint64_t v26;
  uint64_t *v27;
  CMTime immediateSourceTime;
  CMTime timebaseTime;
  uint8_t buf[4];
  unint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a3 + 720))
    return;
  v8 = (re *)re::ecs2::AudioPlayerComponent::audioService(this);
  v9 = *((unsigned __int8 *)a3 + 281);
  v10 = (id)*re::audioLogObjects(v8);
  v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    if (v11)
    {
      v12 = *((_QWORD *)this + 2);
      if (v12
        && (v13 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v12 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType)) != 0)
      {
        v14 = *(_QWORD *)(v13 + 32);
      }
      else
      {
        v14 = 0;
      }
      v18 = re::AssetHandle::assetInfo((re::AudioSourceState *)((char *)a3 + 32));
      if ((v18[17] & 1) != 0)
        v19 = (char *)v18[18];
      else
        v19 = (char *)v18 + 137;
      *(_DWORD *)buf = 134218499;
      v31 = a2;
      v32 = 2048;
      v33 = v14;
      v34 = 2085;
      v35 = v19;
      v20 = "Setting token %llu from connection %llu to stop, REAsset = '%{sensitive}s'";
LABEL_22:
      _os_log_impl(&dword_224FE9000, v10, OS_LOG_TYPE_DEFAULT, v20, buf, 0x20u);
    }
  }
  else if (v11)
  {
    v15 = *((_QWORD *)this + 2);
    if (v15
      && (v16 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v15 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType)) != 0)
    {
      v17 = *(_QWORD *)(v16 + 32);
    }
    else
    {
      v17 = 0;
    }
    v21 = re::AssetHandle::assetInfo((re::AudioSourceState *)((char *)a3 + 32));
    if ((v21[17] & 1) != 0)
      v22 = (char *)v21[18];
    else
      v22 = (char *)v21 + 137;
    *(_DWORD *)buf = 134218498;
    v31 = a2;
    v32 = 2048;
    v33 = v17;
    v34 = 2080;
    v35 = v22;
    v20 = "Setting token %llu from connection %llu to stop, REAsset = '%s'";
    goto LABEL_22;
  }

  if (a4)
    *((_QWORD *)a4 + 4) = 0;
  v23 = (OpaqueCMTimebase *)*((_QWORD *)a3 + 87);
  if (v23)
  {
    v24 = CMTimebaseCopySource(*((CMTimebaseRef *)a3 + 87));
    timebaseTime = *(CMTime *)*(_QWORD *)&MEMORY[0x24BDC0D88];
    CMSyncGetTime(&immediateSourceTime, v24);
    CMTimebaseSetRateAndAnchorTime(v23, 0.0, &timebaseTime, &immediateSourceTime);
    CFRelease(v24);
    if (v8)
    {
      v26 = *((_QWORD *)a3 + 5);
      if (v26)
      {
        v27 = *(uint64_t **)(v26 + 264);
        if (v27 == re::AudioFileGroupAsset::assetType(v25))
          (*(void (**)(re *, re::AudioSourceState *))(*(_QWORD *)v8 + 224))(v8, a3);
      }
      else
      {
        re::AudioFileGroupAsset::assetType(v25);
      }
    }
    if (*((_QWORD *)a3 + 60))
      re::ecs2::AudioPlayerComponent::setRandomPlaybackPositionForTokenIfAppropriate(this, a2);
  }
}

void re::ecs2::AudioPlayerComponent::registerAudioAsset(uint64_t a1, re::AssetHandle *a2)
{
  re *canModifyState;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  canModifyState = (re *)re::ecs2::AudioPlayerComponent::canModifyState(*(re::ecs2::AudioPlayerComponent **)(a1 + 16));
  if ((canModifyState & 1) != 0)
  {
    re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)(a1 + 168), a2);
  }
  else
  {
    v5 = *re::audioLogObjects(canModifyState);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_QWORD *)(a1 + 304);
      if (!v6)
        v6 = *(_QWORD *)(a1 + 352);
      v7 = 134217984;
      v8 = v6;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "AudioPlayerComponent (entityID=%llu) cannot modify state because it is not owned.", (uint8_t *)&v7, 0xCu);
    }
  }
}

uint64_t re::ecs2::AudioPlayerComponent::canModifyState(re::ecs2::AudioPlayerComponent *this)
{
  uint64_t v1;

  if (this
    && (v1 = *((_QWORD *)this + 25)) != 0
    && re::ecs2::NetworkComponent::owningProcessType(*((re::ecs2::NetworkComponent **)this + 25))
    && *(_QWORD *)(v1 + 32))
  {
    return RESyncableIsAuthoritative();
  }
  else
  {
    return 1;
  }
}

void re::ecs2::AudioPlayerComponent::unregisterAudioAsset(uint64_t a1, uint64_t a2)
{
  re *canModifyState;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  canModifyState = (re *)re::ecs2::AudioPlayerComponent::canModifyState(*(re::ecs2::AudioPlayerComponent **)(a1 + 16));
  if ((canModifyState & 1) != 0)
  {
    v5 = *(_QWORD *)(a1 + 184);
    v6 = *(_QWORD *)(a1 + 200);
    if (v5)
    {
      v7 = 24 * v5;
      v8 = *(_QWORD *)(a1 + 200);
      while (*(_QWORD *)(v8 + 8) != *(_QWORD *)(a2 + 8))
      {
        v8 += 24;
        v7 -= 24;
        if (!v7)
        {
          v8 = v6 + 24 * v5;
          break;
        }
      }
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 200);
    }
    v11 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v6) >> 3);
    if (v11 != v5)
      re::DynamicArray<re::AssetHandle>::removeAt(a1 + 168, v11);
  }
  else
  {
    v9 = *re::audioLogObjects(canModifyState);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = *(_QWORD *)(a1 + 304);
      if (!v10)
        v10 = *(_QWORD *)(a1 + 352);
      v12 = 134217984;
      v13 = v10;
      _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "AudioPlayerComponent (entityID=%llu) cannot modify state because it is not owned.", (uint8_t *)&v12, 0xCu);
    }
  }
}

uint64_t re::HashTable<unsigned long long,void (*)(unsigned long long),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace<void (*&)(unsigned long long)>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned long long,void (*)(unsigned long long),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<void (*&)(unsigned long long)>(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16);
    v10 = v13;
    return v12 + 32 * v10 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 32 * v10 + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_QWORD *)(v11 + 32 * v10 + 24) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16);
  return v12 + 32 * v10 + 24;
}

unint64_t re::ecs2::AudioPlayerComponent::prepare(uint64_t a1, re::AssetHandle *a2)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  re *canModifyState;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  re *ShouldRedactSensitiveInfoFromLogs;
  int v14;
  NSObject *v15;
  _BOOL4 v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const char *v25;
  NSObject *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  NSObject *v30;
  unint64_t v31;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _anonymous_namespace_ *v46;
  _anonymous_namespace_ *v47;
  uint64_t *v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  re::AudioGeneratorAsset *v55;
  re::AudioGeneratorAsset *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _OWORD __buf[2];
  _BYTE v68[12];
  _BYTE v69[20];
  int v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  unsigned __int8 v77[8];
  __int128 v78;
  __int128 v79;
  char v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int16 v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)(a1 + 316);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = (unsigned int *)(a1 + 324);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  canModifyState = (re *)re::ecs2::AudioPlayerComponent::canModifyState(*(re::ecs2::AudioPlayerComponent **)(a1 + 16));
  if ((canModifyState & 1) == 0)
  {
    v26 = *re::audioLogObjects(canModifyState);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v27 = *(_QWORD *)(a1 + 304);
      if (!v27)
        v27 = *(_QWORD *)(a1 + 352);
      LODWORD(__buf[0]) = 134217984;
      *(_QWORD *)((char *)__buf + 4) = v27;
      v28 = "AudioPlayerComponent (entityID=%llu) cannot modify state because it is not owned.";
      goto LABEL_31;
    }
    return 0;
  }
  v9 = *((_QWORD *)a2 + 1);
  if (!v9)
  {
    v26 = *re::audioLogObjects(canModifyState);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v29 = *(_QWORD *)(a1 + 304);
      if (!v29)
        v29 = *(_QWORD *)(a1 + 352);
      LODWORD(__buf[0]) = 134217984;
      *(_QWORD *)((char *)__buf + 4) = v29;
      v28 = "AudioPlayerComponent (entityID=%llu) received null asset";
LABEL_31:
      _os_log_error_impl(&dword_224FE9000, v26, OS_LOG_TYPE_ERROR, v28, (uint8_t *)__buf, 0xCu);
      return 0;
    }
    return 0;
  }
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
    v30 = *re::audioLogObjects(canModifyState);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__buf[0]) = 0;
      _os_log_fault_impl(&dword_224FE9000, v30, OS_LOG_TYPE_FAULT, "AudioPlayerComponent cannot prepare component without valid entity", (uint8_t *)__buf, 2u);
    }
    return 0;
  }
  v11 = atomic_load((unsigned int *)(v9 + 704));
  if (v11 != 2)
    re::AssetHandle::loadAsync(a2);
  *(_QWORD *)&__buf[0] = 0;
  do
  {
    arc4random_buf(__buf, 8uLL);
    v12 = *(_QWORD *)&__buf[0];
  }
  while (*(_QWORD *)&__buf[0] < 0x3E8uLL);
  v65 = *(_QWORD *)&__buf[0];
  if (re::internal::enableSignposts(0, 0))
  {
    re::ecs2::AudioPlayerComponent::getOrInitializePrivateEntityID((re::ecs2::AudioPlayerComponent *)a1);
    re::AssetHandle::assetInfo(a2);
    kdebug_trace();
  }
  ShouldRedactSensitiveInfoFromLogs = (re *)REAudioShouldRedactSensitiveInfoFromLogs();
  v14 = (int)ShouldRedactSensitiveInfoFromLogs;
  v15 = (id)*re::audioLogObjects(ShouldRedactSensitiveInfoFromLogs);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if (v14)
  {
    if (v16)
    {
      v17 = re::AssetHandle::assetInfo(a2);
      v18 = (char *)v17 + 137;
      if ((v17[17] & 1) != 0)
        v18 = (char *)v17[18];
      v19 = *(_QWORD *)(a1 + 304);
      if (!v19)
        v19 = *(_QWORD *)(a1 + 352);
      v20 = *(_QWORD *)(v10 + 296);
      v21 = v10;
      do
      {
        v22 = v21;
        v21 = *(_QWORD *)(v21 + 24);
      }
      while (v21);
      v23 = *(_QWORD *)(v22 + 16);
      v24 = *(_DWORD *)(v10 + 288) & 1;
      LODWORD(__buf[0]) = 134219267;
      *(_QWORD *)((char *)__buf + 4) = v12;
      WORD6(__buf[0]) = 2085;
      *(_QWORD *)((char *)__buf + 14) = v18;
      WORD3(__buf[1]) = 2048;
      *((_QWORD *)&__buf[1] + 1) = v20;
      *(_WORD *)v68 = 2048;
      *(_QWORD *)&v68[2] = v19;
      *(_WORD *)&v68[10] = 2048;
      *(_QWORD *)v69 = v23;
      *(_WORD *)&v69[8] = 1024;
      *(_DWORD *)&v69[10] = v24;
      v25 = "AudioPlayerComponent::prepare() Preparing token=%llu asset='%{sensitive}s' on RE Entity %llu (PHASE entity %"
            "llu) in scene %p isActive=%d";
LABEL_44:
      _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, v25, (uint8_t *)__buf, 0x3Au);
    }
  }
  else if (v16)
  {
    v33 = re::AssetHandle::assetInfo(a2);
    v34 = (char *)v33 + 137;
    if ((v33[17] & 1) != 0)
      v34 = (char *)v33[18];
    v35 = *(_QWORD *)(a1 + 304);
    if (!v35)
      v35 = *(_QWORD *)(a1 + 352);
    v36 = *(_QWORD *)(v10 + 296);
    v37 = v10;
    do
    {
      v38 = v37;
      v37 = *(_QWORD *)(v37 + 24);
    }
    while (v37);
    v39 = *(_QWORD *)(v38 + 16);
    v40 = *(_DWORD *)(v10 + 288) & 1;
    LODWORD(__buf[0]) = 134219266;
    *(_QWORD *)((char *)__buf + 4) = v12;
    WORD6(__buf[0]) = 2080;
    *(_QWORD *)((char *)__buf + 14) = v34;
    WORD3(__buf[1]) = 2048;
    *((_QWORD *)&__buf[1] + 1) = v36;
    *(_WORD *)v68 = 2048;
    *(_QWORD *)&v68[2] = v35;
    *(_WORD *)&v68[10] = 2048;
    *(_QWORD *)v69 = v39;
    *(_WORD *)&v69[8] = 1024;
    *(_DWORD *)&v69[10] = v40;
    v25 = "AudioPlayerComponent::prepare() Preparing token=%llu asset='%s' on RE Entity %llu (PHASE entity %llu) in scene %p isActive=%d";
    goto LABEL_44;
  }

  memset(__buf, 0, sizeof(__buf));
  *(_QWORD *)v68 = 9;
  *(_DWORD *)&v68[8] = 1065353216;
  *(_OWORD *)&v69[4] = 0uLL;
  v70 = 0;
  v71 = 1065353216;
  v72 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v73 = _D0;
  v74 = 0;
  v75 = 0;
  v76 = 1065353216;
  v77[0] = 0;
  v80 = 0;
  v82 = 0uLL;
  *((_QWORD *)&v81 + 1) = 0;
  v47 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v81, 0);
  LODWORD(v83) = 1;
  *(_QWORD *)((char *)&v83 + 4) = 0x3E051EB800000000;
  HIDWORD(v83) = 1106247680;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  re::DynamicString::setCapacity(&v85, 0);
  v87 = 0;
  v48 = re::AssetHandle::operator=((uint64_t *)__buf + 1, (uint64_t *)a2);
  HIBYTE(v87) = v14;
  *(_QWORD *)&__buf[0] = 1;
  *(_QWORD *)v68 = 4;
  v83 = *(_OWORD *)(a1 + 208);
  v49 = *(_DWORD *)(a1 + 284);
  v76 = *(_DWORD *)(a1 + 256);
  *(_DWORD *)&v69[12] = 0;
  v50 = *(_DWORD *)(a1 + 276);
  *(_DWORD *)&v69[16] = *(_DWORD *)(a1 + 280);
  v70 = v50;
  v71 = v49;
  v51 = *((_QWORD *)a2 + 1);
  if (v51)
  {
    v52 = *(uint64_t **)(v51 + 264);
    v53 = re::AudioGeneratorAsset::assetType((re::AudioGeneratorAsset *)v48);
    if (v52 == v53)
    {
      arc4random_buf(&v84, 8uLL);
      arc4random_buf((char *)&v84 + 8, 8uLL);
    }
  }
  else
  {
    v53 = re::AudioGeneratorAsset::assetType((re::AudioGeneratorAsset *)v48);
  }
  if (v11 == 2)
  {
    v54 = *((_QWORD *)a2 + 1);
    if (v54)
    {
      v55 = *(re::AudioGeneratorAsset **)(v54 + 264);
      v56 = (re::AudioGeneratorAsset *)re::AudioFileAsset::assetType((re::AudioFileAsset *)v53);
      if (v55 == v56)
      {
        v57 = re::AssetHandle::loadedAsset<re::AudioFileAsset>(a2);
        v56 = (re::AudioGeneratorAsset *)re::Optional<re::DynamicString>::operator=(v77, (unsigned __int8 *)(v57 + 56));
      }
    }
    else
    {
      v56 = (re::AudioGeneratorAsset *)re::AudioFileAsset::assetType((re::AudioFileAsset *)v53);
    }
    v58 = *((_QWORD *)a2 + 1);
    if (v58)
    {
      v59 = *(uint64_t **)(v58 + 264);
      if (v59 == re::AudioGeneratorAsset::assetType(v56))
      {
        v60 = re::AssetHandle::loadedAsset<re::AudioGeneratorAsset>(a2);
        re::Optional<re::DynamicString>::operator=(v77, (unsigned __int8 *)(v60 + 8));
      }
    }
    else
    {
      re::AudioGeneratorAsset::assetType(v56);
    }
  }
  re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace<re::AudioSourceSyncState&>(a1 + 32, (uint64_t *)&v65, (uint64_t)__buf);
  v61 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 32, (uint64_t *)&v65);
  if (v61)
  {
    v62 = v61;
    v63 = re::ecs2::AudioPlayerComponent::selectInputMode((re::ecs2::AudioPlayerComponent *)a1, v65);
    *(_BYTE *)(v62 + 152) = v63;
    if (v63)
    {
      *(_DWORD *)(v62 + 192) = 0;
      *(_DWORD *)(a1 + 208) = 0;
    }
  }
  v66 = v65;
  v64 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 32, (uint64_t *)&v66);
  re::ecs2::AudioPlayerComponent::createSourceStateForUnmatchedSyncState((re::ecs2::AudioPlayerComponent *)a1, v66, v64, 0, 0);
  v31 = v65;
  if ((_QWORD)v85)
  {
    if ((BYTE8(v85) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v85 + 40))();
    v85 = 0u;
    v86 = 0u;
  }
  if ((_QWORD)v81)
  {
    if ((BYTE8(v81) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v81 + 40))();
    v81 = 0u;
    v82 = 0u;
  }
  if (v77[0] && (_QWORD)v78)
  {
    if ((BYTE8(v78) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v78 + 40))();
    v78 = 0u;
    v79 = 0u;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)__buf + 8));
  return v31;
}

unint64_t re::ecs2::AudioPlayerComponent::getOrInitializePrivateEntityID(re::ecs2::AudioPlayerComponent *this)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  re::ecs2::NetworkComponent *v5;
  int v6;
  unint64_t __buf;

  result = *((_QWORD *)this + 38);
  v3 = *((_QWORD *)this + 44);
  if (result)
  {
    if (result != v3)
      *((_QWORD *)this + 44) = result;
    return result;
  }
  result = *((_QWORD *)this + 44);
  if (v3)
    return result;
  v4 = *((_QWORD *)this + 2);
  if (!v4)
  {
    for (__buf = 0; __buf < 0x3E8; result = __buf)
      arc4random_buf(&__buf, 8uLL);
    *((_QWORD *)this + 44) = __buf;
    goto LABEL_12;
  }
  result = *(_QWORD *)(v4 + 296);
  *((_QWORD *)this + 44) = result;
  v5 = *(re::ecs2::NetworkComponent **)(v4 + 200);
  if (!v5 || (v6 = re::ecs2::NetworkComponent::owningProcessType(v5), result = *((_QWORD *)this + 44), !v6))
LABEL_12:
    *((_QWORD *)this + 38) = result;
  return result;
}

re::DynamicString *re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace<re::AudioSourceSyncState&>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  re::DynamicString *result;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  __int128 v46;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  v9 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1
    || (v9 = v8 % *(unsigned int *)(a1 + 24),
        v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9),
        (_DWORD)v10 == 0x7FFFFFFF))
  {
LABEL_3:
    v11 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v11 == 0x7FFFFFFF)
    {
      v11 = *(unsigned int *)(a1 + 32);
      v12 = v11;
      if ((_DWORD)v11 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
        v12 = *(_DWORD *)(a1 + 32);
        v6 = *a2;
      }
      *(_DWORD *)(a1 + 32) = v12 + 1;
      v13 = *(_QWORD *)(a1 + 16);
      v14 = *(_DWORD *)(v13 + 288 * v11 + 8);
    }
    else
    {
      v13 = *(_QWORD *)(a1 + 16);
      v14 = *(_DWORD *)(v13 + 288 * v11 + 8);
      *(_DWORD *)(a1 + 36) = v14 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v13 + 288 * v11 + 8) = v14 | 0x80000000;
    v15 = v9;
    *(_DWORD *)(*(_QWORD *)(a1 + 16) + 288 * v11 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 288 * v11 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9);
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 288 * v11) = v8;
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 288 * v11 + 16) = v6;
    v16 = *(_QWORD *)(a1 + 16);
    v17 = v16 + 288 * v11;
    *(_QWORD *)(v17 + 24) = *(_QWORD *)a3;
    re::AssetHandle::AssetHandle((re::AssetHandle *)(v17 + 32), (const re::AssetHandle *)(a3 + 8));
    *(_OWORD *)(v17 + 56) = *(_OWORD *)(a3 + 32);
    v18 = *(_OWORD *)(a3 + 48);
    v19 = *(_OWORD *)(a3 + 64);
    v20 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(v17 + 116) = *(_OWORD *)(a3 + 92);
    *(_OWORD *)(v17 + 104) = v20;
    *(_OWORD *)(v17 + 88) = v19;
    *(_OWORD *)(v17 + 72) = v18;
    v21 = *(unsigned __int8 *)(a3 + 112);
    *(_BYTE *)(v17 + 136) = v21;
    if (v21)
      re::DynamicString::DynamicString((re::DynamicString *)(v16 + 288 * v11 + 144), (const re::DynamicString *)(a3 + 120));
    v22 = v16 + 288 * v11;
    *(_BYTE *)(v22 + 176) = *(_BYTE *)(a3 + 152);
    re::DynamicString::DynamicString((re::DynamicString *)(v22 + 184), (const re::DynamicString *)(a3 + 160));
    v23 = *(_OWORD *)(a3 + 192);
    *(_OWORD *)(v22 + 232) = *(_OWORD *)(a3 + 208);
    *(_OWORD *)(v22 + 216) = v23;
    result = re::DynamicString::DynamicString((re::DynamicString *)(v22 + 248), (const re::DynamicString *)(a3 + 224));
    *(_WORD *)(v22 + 280) = *(_WORD *)(a3 + 256);
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v15) = v11;
    ++*(_DWORD *)(a1 + 28);
    goto LABEL_30;
  }
  v25 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v25 + 288 * v10 + 16) != v6)
  {
    v26 = *(_DWORD *)(v25 + 288 * v10 + 8);
    v10 = v26 & 0x7FFFFFFF;
    if ((v26 & 0x7FFFFFFF) == 0x7FFFFFFF)
      goto LABEL_3;
  }
  v27 = v25 + 288 * v10;
  v30 = *(_QWORD *)(v27 + 248);
  v29 = (_OWORD *)(v27 + 248);
  v28 = v30;
  if (v30)
  {
    if ((*(_BYTE *)(v25 + 288 * v10 + 256) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 40))(v28, *(_QWORD *)(v25 + 288 * v10 + 264));
    *v29 = 0u;
    v29[1] = 0u;
  }
  v31 = v25 + 288 * v10;
  v34 = *(_QWORD *)(v31 + 184);
  v33 = (_OWORD *)(v31 + 184);
  v32 = v34;
  if (v34)
  {
    if ((*(_BYTE *)(v25 + 288 * v10 + 192) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 40))(v32, *(_QWORD *)(v25 + 288 * v10 + 200));
    *v33 = 0u;
    v33[1] = 0u;
  }
  if (*(_BYTE *)(v25 + 288 * v10 + 136))
  {
    v35 = v25 + 288 * v10;
    v38 = *(_QWORD *)(v35 + 144);
    v37 = v35 + 144;
    v36 = v38;
    if (v38)
    {
      if ((*(_BYTE *)(v37 + 8) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 40))(v36, *(_QWORD *)(v37 + 16));
      *(_OWORD *)v37 = 0u;
      *(_OWORD *)(v37 + 16) = 0u;
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(v25 + 288 * v10 + 32));
  v39 = *(_QWORD *)(a1 + 16);
  v40 = v39 + 288 * v10;
  *(_QWORD *)(v40 + 24) = *(_QWORD *)a3;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(v40 + 32), (const re::AssetHandle *)(a3 + 8));
  *(_OWORD *)(v40 + 56) = *(_OWORD *)(a3 + 32);
  v41 = *(_OWORD *)(a3 + 48);
  v42 = *(_OWORD *)(a3 + 64);
  v43 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v40 + 116) = *(_OWORD *)(a3 + 92);
  *(_OWORD *)(v40 + 104) = v43;
  *(_OWORD *)(v40 + 88) = v42;
  *(_OWORD *)(v40 + 72) = v41;
  v44 = *(unsigned __int8 *)(a3 + 112);
  *(_BYTE *)(v40 + 136) = v44;
  if (v44)
    re::DynamicString::DynamicString((re::DynamicString *)(v39 + 288 * v10 + 144), (const re::DynamicString *)(a3 + 120));
  v45 = v39 + 288 * v10;
  *(_BYTE *)(v45 + 176) = *(_BYTE *)(a3 + 152);
  re::DynamicString::DynamicString((re::DynamicString *)(v45 + 184), (const re::DynamicString *)(a3 + 160));
  v46 = *(_OWORD *)(a3 + 192);
  *(_OWORD *)(v45 + 232) = *(_OWORD *)(a3 + 208);
  *(_OWORD *)(v45 + 216) = v46;
  result = re::DynamicString::DynamicString((re::DynamicString *)(v45 + 248), (const re::DynamicString *)(a3 + 224));
  *(_WORD *)(v45 + 280) = *(_WORD *)(a3 + 256);
LABEL_30:
  ++*(_DWORD *)(a1 + 40);
  return result;
}

uint64_t re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + 288 * v4 + 16) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 288 * v4 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v4 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v6 + 288 * v4 + 16) == v2)
        return v6 + 288 * v4 + 24;
    }
    return 0;
  }
  return v6 + 288 * v4 + 24;
}

uint64_t re::ecs2::AudioPlayerComponent::selectInputMode(re::ecs2::AudioPlayerComponent *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  const __int16 *v6;
  int16x8_t v7;
  int16x8_t *v8;
  int v9;
  int16x8_t *v10;
  uint64_t v11;
  uint16x8_t v12;
  const __int16 *v13;
  int16x8_t v14;
  int v15;
  int16x8_t *v16;
  uint64_t v17;
  uint16x8_t v18;
  uint64_t result;
  const __int16 *v20;
  int16x8_t v21;
  int v22;
  uint16x8_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  re::AudioFileGroupAsset *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  re::AudioFileAsset *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;

  v2 = *((_QWORD *)this + 2);
  if (!v2)
    return 0;
  v5 = *(unsigned __int16 *)(v2 + 82);
  if (*(_WORD *)(v2 + 82))
  {
    v6 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                         + 16);
    v7 = vld1q_dup_s16(v6);
    v8 = *(int16x8_t **)(v2 + 88);
    v9 = 1;
    v10 = v8;
    v11 = *(unsigned __int16 *)(v2 + 82);
    while (1)
    {
      v12 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v7, *v10), (int8x16_t)xmmword_2260F1E80);
      v12.i16[0] = vmaxvq_u16(v12);
      if (v12.i32[0])
        break;
      v9 -= 8;
      ++v10;
      if (!--v11)
        goto LABEL_8;
    }
    if (v12.u16[0] - v9 < *(unsigned __int16 *)(v2 + 80))
      return 0;
LABEL_8:
    v13 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                          + 16);
    v14 = vld1q_dup_s16(v13);
    v15 = 1;
    v16 = *(int16x8_t **)(v2 + 88);
    v17 = *(unsigned __int16 *)(v2 + 82);
    while (1)
    {
      v18 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v14, *v16), (int8x16_t)xmmword_2260F1E80);
      v18.i16[0] = vmaxvq_u16(v18);
      if (v18.i32[0])
        break;
      v15 -= 8;
      ++v16;
      if (!--v17)
        goto LABEL_14;
    }
    if (v18.u16[0] - v15 < *(unsigned __int16 *)(v2 + 80))
      return 2;
LABEL_14:
    v20 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                          + 16);
    v21 = vld1q_dup_s16(v20);
    v22 = 1;
    while (1)
    {
      v23 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v21, *v8), (int8x16_t)xmmword_2260F1E80);
      v23.i16[0] = vmaxvq_u16(v23);
      if (v23.i32[0])
        break;
      v22 -= 8;
      ++v8;
      if (!--v5)
        goto LABEL_20;
    }
    if (v23.u16[0] - v22 < *(unsigned __int16 *)(v2 + 80))
      return 1;
  }
LABEL_20:
  if (re::ecs2::AudioPlayerComponent::hasInputModeOverride(this, a2))
    return re::ecs2::AudioPlayerComponent::getInputModeOverride(this, a2);
  v42 = a2;
  result = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 32, &v42);
  if (result)
  {
    v24 = result;
    v25 = *(_QWORD *)(result + 16);
    if (!v25)
      return 0;
    v26 = atomic_load((unsigned int *)(v25 + 704));
    if (v26 != 2)
      return 0;
    v27 = (re::AudioFileGroupAsset *)(result + 8);
    v28 = *(_QWORD *)(result + 16);
    if (v28)
    {
      v29 = *(uint64_t **)(v28 + 264);
      v30 = re::AudioFileAsset::assetType((re::AudioFileAsset *)result);
      if (v29 == v30)
      {
        v31 = (re::AudioFileAsset *)(v24 + 8);
        return *(unsigned __int8 *)(re::AssetHandle::loadedAsset<re::AudioFileAsset>(v31) + 52);
      }
    }
    else
    {
      v30 = re::AudioFileAsset::assetType((re::AudioFileAsset *)result);
    }
    v32 = *(_QWORD *)(v24 + 16);
    if (v32)
    {
      v33 = *(uint64_t **)(v32 + 264);
      v34 = re::AudioGeneratorAsset::assetType((re::AudioGeneratorAsset *)v30);
      if (v33 == v34)
        return 0;
    }
    else
    {
      v34 = re::AudioGeneratorAsset::assetType((re::AudioGeneratorAsset *)v30);
    }
    v35 = *(_QWORD *)(v24 + 16);
    if (v35)
    {
      v36 = *(uint64_t **)(v35 + 264);
      if (v36 == re::AudioFileGroupAsset::assetType((re::AudioFileGroupAsset *)v34))
      {
        result = re::AssetHandle::loadedAsset<re::AudioFileGroupAsset>(v27);
        if (!result)
          return result;
        v37 = result;
        if (*(_QWORD *)(result + 24))
        {
          v38 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8);
          if (v38)
          {
            v39 = *(uint64_t **)(v38 + 264);
            if (v39 == re::AudioFileAsset::assetType((re::AudioFileAsset *)result))
            {
              v40 = *(_QWORD *)(*(_QWORD *)(v37 + 40) + 8);
              if (v40)
              {
                v41 = atomic_load((unsigned int *)(v40 + 704));
                if (v41 == 2)
                {
                  v31 = *(re::AudioFileAsset **)(v37 + 40);
                  return *(unsigned __int8 *)(re::AssetHandle::loadedAsset<re::AudioFileAsset>(v31) + 52);
                }
              }
            }
          }
          else
          {
            re::AudioFileAsset::assetType((re::AudioFileAsset *)result);
          }
        }
      }
    }
    else
    {
      re::AudioFileGroupAsset::assetType((re::AudioFileGroupAsset *)v34);
    }
    return 0;
  }
  return result;
}

uint64_t re::ecs2::AudioPlayerComponent::prepare(re::ecs2::AudioPlayerComponent **this, __CFString *a2)
{
  unsigned int *v4;
  unsigned int v5;
  re *canModifyState;
  re *v7;
  NSObject *v8;
  re::ecs2::AudioPlayerComponent *v9;
  const char *v10;
  re::ecs2::AudioPlayerComponent *v11;
  re::ecs2::AudioPlayerComponent *v12;
  uint64_t v13;
  _anonymous_namespace_ *v15;
  _anonymous_namespace_ *v21;
  __CFString *v22;
  uint64_t v23;
  re *v24;
  NSObject *v25;
  re::ecs2::AudioPlayerComponent *v26;
  uint64_t v27;
  _BYTE v28[22];
  __int16 v29;
  __CFString *v30;
  uint8_t buf[16];
  __int128 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  char v44;
  __int128 v45;
  __int128 v46;
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int16 v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)this + 79;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  canModifyState = (re *)re::ecs2::AudioPlayerComponent::canModifyState(this[2]);
  if ((canModifyState & 1) == 0)
  {
    v8 = *re::audioLogObjects(canModifyState);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v11 = this[38];
      if (!v11)
        v11 = this[44];
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v11;
      v10 = "AudioPlayerComponent (entityID=%llu) cannot modify state because it is not owned.";
      goto LABEL_18;
    }
    return 0;
  }
  if (!a2)
  {
    v8 = *re::audioLogObjects(canModifyState);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v12 = this[38];
      if (!v12)
        v12 = this[44];
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v12;
      v10 = "AudioPlayerComponent (entityID=%llu) received null sts label";
      goto LABEL_18;
    }
    return 0;
  }
  v7 = (re *)-[__CFString isEqualToString:](a2, "isEqualToString:", &stru_24EDA2070);
  if ((_DWORD)v7)
  {
    v8 = *re::audioLogObjects(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = this[38];
      if (!v9)
        v9 = this[44];
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v9;
      v10 = "AudioPlayerComponent (entityID=%llu) received empty sts label";
LABEL_18:
      _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, v10, buf, 0xCu);
      return 0;
    }
    return 0;
  }
  *(_QWORD *)buf = 0;
  do
  {
    arc4random_buf(buf, 8uLL);
    v13 = *(_QWORD *)buf;
  }
  while (*(_QWORD *)buf < 0x3E8uLL);
  v27 = *(_QWORD *)buf;
  *(_OWORD *)buf = 0u;
  v32 = 0u;
  v33 = 9;
  v34 = 1065353216;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 1065353216;
  v39 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v40 = _D0;
  v41 = 0;
  v42 = 0;
  v43 = 1065353216;
  v44 = 0;
  v47 = 0;
  v49 = 0uLL;
  *((_QWORD *)&v48 + 1) = 0;
  v21 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v48, 0);
  *(_QWORD *)((char *)&v50 + 4) = 0x3E051EB800000000;
  LODWORD(v50) = 1;
  HIDWORD(v50) = 1106247680;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  re::DynamicString::setCapacity(&v52, 0);
  v54 = 0;
  v22 = objc_retainAutorelease(a2);
  *(_QWORD *)v28 = -[__CFString UTF8String](v22, "UTF8String");
  *(_QWORD *)&v28[8] = strlen(*(const char **)v28);
  re::DynamicString::operator=((re::DynamicString *)&v52, (uint64_t)v28);
  *(_QWORD *)buf = 1;
  v33 = 4;
  v50 = *((_OWORD *)this + 13);
  LODWORD(v38) = *((_DWORD *)this + 71);
  re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace<re::AudioSourceSyncState&>((uint64_t)(this + 4), &v27, (uint64_t)buf);
  *(_QWORD *)v28 = v13;
  v23 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)(this + 4), (uint64_t *)v28);
  re::ecs2::AudioPlayerComponent::createSourceStateForUnmatchedSyncState((re::ecs2::AudioPlayerComponent *)this, *(unint64_t *)v28, v23, 0, 0);
  v25 = *re::audioLogObjects(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    v26 = this[38];
    if (!v26)
      v26 = this[44];
    *(_DWORD *)v28 = 134218498;
    *(_QWORD *)&v28[4] = v26;
    *(_WORD *)&v28[12] = 2048;
    *(_QWORD *)&v28[14] = v13;
    v29 = 2112;
    v30 = v22;
    _os_log_impl(&dword_224FE9000, v25, OS_LOG_TYPE_DEFAULT, "AudioPlayerComponent (entityID=%llu) Prepared source state token %llu with sts label %@", v28, 0x20u);
  }
  if ((_QWORD)v52)
  {
    if ((BYTE8(v52) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v52 + 40))();
    v52 = 0u;
    v53 = 0u;
  }
  if ((_QWORD)v48)
  {
    if ((BYTE8(v48) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v48 + 40))();
    v48 = 0u;
    v49 = 0u;
  }
  if (v44 && (_QWORD)v45)
  {
    if ((BYTE8(v45) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v45 + 40))();
    v45 = 0u;
    v46 = 0u;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&buf[8]);
  return v13;
}

unint64_t re::ecs2::AudioPlayerComponent::prepare(uint64_t a1, void *a2, int a3, int a4, double a5, double a6)
{
  re *v11;
  re *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  re *canModifyState;
  re *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  re *v23;
  NSObject *v24;
  const char *v25;
  NSObject *v26;
  NSObject *v27;
  uint64_t v28;
  uint32_t v29;
  NSObject *v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  const char *v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  unint64_t v39;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  re::ecs2::NetworkComponent *v52;
  _anonymous_namespace_ *v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  re::AudioService *v62;
  _BOOL8 v63;
  NSObject *v64;
  NSObject *v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE buf[12];
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  re *v74;
  __int16 v75;
  unint64_t v76;
  _OWORD __buf[2];
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  char v89;
  __int128 v90;
  __int128 v91;
  char v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int16 v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  v11 = a2;
  v12 = v11;
  v13 = (unsigned int *)(a1 + 316);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  v15 = (unsigned int *)(a1 + 324);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  v17 = *(_QWORD **)(a1 + 16);
  if (!v17)
  {
    v27 = *re::audioLogObjects(v11);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      goto LABEL_34;
    LODWORD(__buf[0]) = 138412546;
    *(_QWORD *)((char *)__buf + 4) = v12;
    WORD6(__buf[0]) = 2048;
    *(_QWORD *)((char *)__buf + 14) = a1;
    v25 = "cannot prepare external stream %@ on component %p that does not have entity";
LABEL_21:
    v26 = v27;
    goto LABEL_22;
  }
  canModifyState = (re *)re::ecs2::AudioPlayerComponent::canModifyState(*(re::ecs2::AudioPlayerComponent **)(a1 + 16));
  if ((canModifyState & 1) == 0)
  {
    v27 = *re::audioLogObjects(canModifyState);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      goto LABEL_34;
    v28 = *(_QWORD *)(a1 + 304);
    if (!v28)
      v28 = *(_QWORD *)(a1 + 352);
    LODWORD(__buf[0]) = 134218240;
    *(_QWORD *)((char *)__buf + 4) = v28;
    WORD6(__buf[0]) = 2048;
    *(_QWORD *)((char *)__buf + 14) = a1;
    v25 = "AudioPlayerComponent (entityID=%llu) %p cannot modify state because it is not owned.";
    goto LABEL_21;
  }
  if (!v12)
  {
    v30 = *re::audioLogObjects(canModifyState);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      goto LABEL_34;
    v31 = *(_QWORD *)(a1 + 304);
    if (!v31)
      v31 = *(_QWORD *)(a1 + 352);
    v32 = v30;
    v33 = v17[35];
    LODWORD(__buf[0]) = 134218498;
    *(_QWORD *)((char *)__buf + 4) = v31;
    WORD6(__buf[0]) = 2048;
    *(_QWORD *)((char *)__buf + 14) = a1;
    WORD3(__buf[1]) = 2080;
    *((_QWORD *)&__buf[1] + 1) = v33;
    v34 = "AudioPlayerComponent (entityID=%llu) %p (entity %s) received nil external stream UUID";
LABEL_32:
    _os_log_error_impl(&dword_224FE9000, v32, OS_LOG_TYPE_ERROR, v34, (uint8_t *)__buf, 0x20u);

    goto LABEL_34;
  }
  v102 = 0uLL;
  v19 = (re *)-[re getUUIDBytes:](v12, "getUUIDBytes:", &v102);
  v100 = 0;
  v101 = 0;
  if (v102 == 0)
  {
    v35 = *re::audioLogObjects(v19);
    if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      goto LABEL_34;
    v36 = *(_QWORD *)(a1 + 304);
    if (!v36)
      v36 = *(_QWORD *)(a1 + 352);
    v32 = v35;
    v37 = v17[35];
    LODWORD(__buf[0]) = 134218498;
    *(_QWORD *)((char *)__buf + 4) = v36;
    WORD6(__buf[0]) = 2048;
    *(_QWORD *)((char *)__buf + 14) = a1;
    WORD3(__buf[1]) = 2080;
    *((_QWORD *)&__buf[1] + 1) = v37;
    v34 = "AudioPlayerComponent (entityID=%llu) %p (entity %s) received all-zero external stream UUID";
    goto LABEL_32;
  }
  v20 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v17 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
  if (!v20)
  {
    v38 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      goto LABEL_34;
    LODWORD(__buf[0]) = 138412290;
    *(_QWORD *)((char *)__buf + 4) = v12;
    v25 = "cannot prepare external stream %@ b/c failed to create transient component";
    v26 = v38;
    v29 = 12;
    goto LABEL_23;
  }
  v21 = v20;
  *(_QWORD *)&__buf[0] = 0;
  do
    arc4random_buf(__buf, 8uLL);
  while (*(_QWORD *)&__buf[0] < 0x3E8uLL);
  v69 = *(_QWORD *)&__buf[0];
  v22 = (unint64_t *)(v21 + 88);
  v23 = (re *)re::HashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v21 + 88, (uint64_t *)&v69);
  if (v23)
  {
    v24 = *re::audioLogObjects(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__buf[0]) = 138412546;
      *(_QWORD *)((char *)__buf + 4) = v12;
      WORD6(__buf[0]) = 2048;
      *(_QWORD *)((char *)__buf + 14) = v69;
      v25 = "cannot prepare external stream %@ with token %llu that collides with existing external stream";
      v26 = v24;
LABEL_22:
      v29 = 22;
LABEL_23:
      _os_log_error_impl(&dword_224FE9000, v26, OS_LOG_TYPE_ERROR, v25, (uint8_t *)__buf, v29);
    }
LABEL_34:
    v39 = 0;
    goto LABEL_35;
  }
  v41 = v69;
  v42 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v69 ^ (v69 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v69 ^ (v69 >> 30))) >> 27));
  v43 = v42 ^ (v42 >> 31);
  v44 = *v22;
  if (!*v22)
    goto LABEL_38;
  v44 = v43 % *(unsigned int *)(v21 + 112);
  v45 = *(unsigned int *)(*(_QWORD *)(v21 + 96) + 4 * v44);
  if ((_DWORD)v45 == 0x7FFFFFFF)
    goto LABEL_38;
  v68 = *(_QWORD *)(v21 + 104);
  if (*(_QWORD *)(v68 + 48 * v45 + 16) != v69)
  {
    while (1)
    {
      LODWORD(v45) = *(_DWORD *)(v68 + 48 * v45 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v45 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v68 + 48 * v45 + 16) == v69)
        goto LABEL_44;
    }
LABEL_38:
    v46 = *(unsigned int *)(v21 + 124);
    if ((_DWORD)v46 == 0x7FFFFFFF)
    {
      v46 = *(unsigned int *)(v21 + 120);
      v47 = v46;
      if ((_DWORD)v46 == *(_DWORD *)(v21 + 112))
      {
        re::HashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(v21 + 88, 2 * *(_DWORD *)(v21 + 116));
        LODWORD(v44) = v43 % *(unsigned int *)(v21 + 112);
        v47 = *(_DWORD *)(v21 + 120);
        v41 = v69;
      }
      *(_DWORD *)(v21 + 120) = v47 + 1;
      v48 = *(_QWORD *)(v21 + 104);
      v49 = *(_DWORD *)(v48 + 48 * v46 + 8);
    }
    else
    {
      v48 = *(_QWORD *)(v21 + 104);
      v49 = *(_DWORD *)(v48 + 48 * v46 + 8);
      *(_DWORD *)(v21 + 124) = v49 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v48 + 48 * v46 + 8) = v49 | 0x80000000;
    v50 = *(_QWORD *)(v21 + 96);
    *(_DWORD *)(*(_QWORD *)(v21 + 104) + 48 * v46 + 8) = *(_DWORD *)(*(_QWORD *)(v21 + 104) + 48 * v46 + 8) & 0x80000000 | *(_DWORD *)(v50 + 4 * v44);
    *(_QWORD *)(*(_QWORD *)(v21 + 104) + 48 * v46) = v43;
    *(_QWORD *)(*(_QWORD *)(v21 + 104) + 48 * v46 + 16) = v41;
    v51 = *(_QWORD *)(v21 + 104) + 48 * v46;
    *(_DWORD *)(v51 + 24) = a3;
    *(_DWORD *)(v51 + 28) = a4;
    *(double *)(v51 + 32) = a6;
    *(double *)(v51 + 40) = a5;
    *(_DWORD *)(v50 + 4 * v44) = v46;
    ++*(_DWORD *)(v21 + 116);
    ++*(_DWORD *)(v21 + 128);
  }
LABEL_44:
  v52 = (re::ecs2::NetworkComponent *)v17[25];
  if (v52)
    re::ecs2::NetworkComponent::markDirty(v52, (const re::ecs2::Component *)v21);
  memset(__buf, 0, sizeof(__buf));
  v78 = 9;
  v79 = 1065353216;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v83 = 1065353216;
  v84 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v85 = _D0;
  v86 = 0;
  v87 = 0;
  v88 = 1065353216;
  v89 = 0;
  v92 = 0;
  v94 = 0uLL;
  *((_QWORD *)&v93 + 1) = 0;
  v58 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v93, 0);
  *(_QWORD *)((char *)&v95 + 4) = 0x3E051EB800000000;
  LODWORD(v95) = 1;
  HIDWORD(v95) = 1106247680;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  re::DynamicString::setCapacity(&v97, 0);
  v99 = 0;
  *(_QWORD *)&__buf[0] = 1;
  v78 = 4;
  v95 = *(_OWORD *)(a1 + 208);
  v96 = v102;
  v59 = *(_DWORD *)(a1 + 284);
  v88 = *(_DWORD *)(a1 + 272);
  LODWORD(v81) = 0;
  v60 = *(_DWORD *)(a1 + 276);
  HIDWORD(v81) = *(_DWORD *)(a1 + 280);
  v82 = v60;
  v83 = v59;
  re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace<re::AudioSourceSyncState&>(a1 + 32, (uint64_t *)&v69, (uint64_t)__buf);
  *(_QWORD *)buf = v69;
  v61 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 32, (uint64_t *)buf);
  re::ecs2::AudioPlayerComponent::createSourceStateForUnmatchedSyncState((re::ecs2::AudioPlayerComponent *)a1, *(unint64_t *)buf, v61, 0, 0);
  v62 = (re::AudioService *)re::ecs2::AudioPlayerComponent::audioService((re::ecs2::AudioPlayerComponent *)a1);
  if (v62)
  {
    re::ecs2::AudioPlayerComponent::updateSharedAcousticProperties((re::ecs2::AudioPlayerComponent *)a1, v69, v62);
  }
  else
  {
    v64 = *re::audioLogObjects(0);
    v63 = os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT);
    if (v63)
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v69;
      _os_log_impl(&dword_224FE9000, v64, OS_LOG_TYPE_DEFAULT, "stream token %llu will not receive shared acoustic property overrides (i.e. default writes)", buf, 0xCu);
    }
  }
  v65 = *re::audioLogObjects((re *)v63);
  if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
  {
    v66 = v65;
    v67 = v17[35];
    *(_DWORD *)buf = 134218754;
    *(_QWORD *)&buf[4] = a1;
    v71 = 2080;
    v72 = v67;
    v73 = 2112;
    v74 = v12;
    v75 = 2048;
    v76 = v69;
    _os_log_impl(&dword_224FE9000, v66, OS_LOG_TYPE_DEFAULT, "AudioPlayerComponent %p (entity %s) preparing source state with external stream UUID %@ and stream token %llu", buf, 0x2Au);

  }
  v39 = v69;
  if ((_QWORD)v97)
  {
    if ((BYTE8(v97) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v97 + 40))();
    v97 = 0u;
    v98 = 0u;
  }
  if ((_QWORD)v93)
  {
    if ((BYTE8(v93) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v93 + 40))();
    v93 = 0u;
    v94 = 0u;
  }
  if (v89 && (_QWORD)v90)
  {
    if ((BYTE8(v90) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v90 + 40))();
    v90 = 0u;
    v91 = 0u;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)__buf + 8));
LABEL_35:

  return v39;
}

void re::ecs2::AudioPlayerComponent::updateSharedAcousticProperties(re::ecs2::AudioPlayerComponent *this, uint64_t a2, re::AudioService *a3)
{
  uint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  re::ecs2::NetworkComponent *v11;
  NSObject *v12;
  _BYTE v13[24];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v13 = a2;
  v6 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 32, (uint64_t *)v13);
  if (v6)
  {
    v7 = v6;
    v8 = (*(float (**)(re::AudioService *))(*(_QWORD *)a3 + 656))(a3);
    v9 = __exp10f(v8 / 20.0);
    *(float *)(v7 + 80) = v9;
    *(float *)(v7 + 84) = v9;
    *(_QWORD *)(v7 + 96) = 0;
    *(float *)(v7 + 56) = (*(float (**)(re::AudioService *))(*(_QWORD *)a3 + 664))(a3);
    v10 = *((_QWORD *)this + 2);
    if (v10)
    {
      v11 = *(re::ecs2::NetworkComponent **)(v10 + 200);
      if (v11)
        re::ecs2::NetworkComponent::markDirty(v11, this);
    }
  }
  else
  {
    v12 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v13 = 134217984;
      *(_QWORD *)&v13[4] = a2;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "Can't update shared acoustic properties for unknown sync state %llu", v13, 0xCu);
    }
  }
}

BOOL re::ecs2::AudioPlayerComponent::shouldCreateSourceStateForUnmatchedSyncState(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v3;
  unint64_t v4;
  _BOOL8 result;

  result = 1;
  if ((a3 & 0xFFFFFFFD) != 0)
  {
    if (a3 != 1)
      return 0;
    v3 = *(_QWORD *)(a2 + 232);
    v4 = (v3 & 1) != 0 ? v3 >> 1 : v3 >> 1;
    if (!v4 && (*(_QWORD *)(a2 + 16) || *(_OWORD *)(a2 + 208) == 0))
      return 0;
  }
  return result;
}

void re::ecs2::AudioPlayerComponent::createSourceStateForUnmatchedSyncState(re::ecs2::AudioPlayerComponent *this, unint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  re *v15;
  int v16;
  NSObject *v17;
  _BOOL8 v18;
  NSObject *v19;
  _QWORD *v20;
  char *v21;
  const char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  re::AudioSourceState *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  re::ecs2::TransformComponent **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  double *v41;
  double *v42;
  double *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  OpaqueCMClock *v47;
  re *v48;
  int v49;
  NSObject *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  re::TimebaseService *TimebaseService;
  uint64_t v60;
  re::AudioSourceState *v61;
  uint8_t v62[16];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _BYTE buf[32];
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v10 = *((_QWORD *)this + 2);
  if (!v10)
    goto LABEL_7;
  v11 = *((_QWORD *)this + 2);
  do
  {
    v12 = v11;
    v11 = *(_QWORD *)(v11 + 24);
  }
  while (v11);
  if (*(_QWORD *)(v12 + 16))
  {
    do
    {
      v13 = v10;
      v10 = *(_QWORD *)(v10 + 24);
    }
    while (v10);
    v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 104) + 272) >> 1;
  }
  else
  {
LABEL_7:
    v14 = -1;
  }
  v15 = (re *)re::ecs2::AudioPlayerComponent::getOrInitializePrivateEntityID(this);
  v16 = *(unsigned __int8 *)(a3 + 257);
  v17 = *re::audioLogObjects(v15);
  v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
  if (v16)
  {
    if (v18)
    {
      v19 = v17;
      v20 = re::AssetHandle::assetInfo((re::AssetHandle *)(a3 + 8));
      if ((v20[17] & 1) != 0)
        v21 = (char *)v20[18];
      else
        v21 = (char *)v20 + 137;
      *(_DWORD *)buf = 134219011;
      *(_QWORD *)&buf[4] = v15;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v14;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = a2;
      LOWORD(v67) = 1024;
      *(_DWORD *)((char *)&v67 + 2) = a4;
      WORD3(v67) = 2085;
      *((_QWORD *)&v67 + 1) = v21;
      v22 = "AudioPlayerComponent (entityID=%llu, sceneID=%llu) Creating audio source state for token=%llu, owningProcess"
            "Type=%d, REAsset='%{sensitive}s'";
LABEL_19:
      _os_log_impl(&dword_224FE9000, v19, OS_LOG_TYPE_DEFAULT, v22, buf, 0x30u);

    }
  }
  else if (v18)
  {
    v19 = v17;
    v23 = re::AssetHandle::assetInfo((re::AssetHandle *)(a3 + 8));
    if ((v23[17] & 1) != 0)
      v24 = (char *)v23[18];
    else
      v24 = (char *)v23 + 137;
    *(_DWORD *)buf = 134219010;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v14;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = a2;
    LOWORD(v67) = 1024;
    *(_DWORD *)((char *)&v67 + 2) = a4;
    WORD3(v67) = 2080;
    *((_QWORD *)&v67 + 1) = v24;
    v22 = "AudioPlayerComponent (entityID=%llu, sceneID=%llu) Creating audio source state for token=%llu, owningProcessTy"
          "pe=%d, REAsset='%s'";
    goto LABEL_19;
  }
  v25 = re::globalAllocators((re *)v18);
  v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25[2] + 32))(v25[2], 816, 16);
  v27 = re::AudioSourceState::AudioSourceState((re::AudioSourceState *)v26);
  v61 = v27;
  *((_QWORD *)v27 + 3) = *(_QWORD *)a3;
  re::AssetHandle::operator=((uint64_t *)v27 + 4, (uint64_t *)(a3 + 8));
  *(_OWORD *)(v26 + 56) = *(_OWORD *)(a3 + 32);
  v28 = *(_OWORD *)(a3 + 48);
  v29 = *(_OWORD *)(a3 + 64);
  v30 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v26 + 116) = *(_OWORD *)(a3 + 92);
  *(_OWORD *)(v26 + 104) = v30;
  *(_OWORD *)(v26 + 88) = v29;
  *(_OWORD *)(v26 + 72) = v28;
  re::Optional<re::DynamicString>::operator=((unsigned __int8 *)(v26 + 136), (unsigned __int8 *)(a3 + 112));
  *(_BYTE *)(v26 + 176) = *(_BYTE *)(a3 + 152);
  re::DynamicString::operator=((re::DynamicString *)(v26 + 184), (re::DynamicString *)(a3 + 160));
  v31 = *(_OWORD *)(a3 + 192);
  *(_OWORD *)(v26 + 232) = *(_OWORD *)(a3 + 208);
  *(_OWORD *)(v26 + 216) = v31;
  re::DynamicString::operator=((re::DynamicString *)(v26 + 248), (re::DynamicString *)(a3 + 224));
  *(_WORD *)(v26 + 280) = *(_WORD *)(a3 + 256);
  *(_QWORD *)(v26 + 480) = this;
  *(_QWORD *)(v26 + 680) = a2;
  *(_QWORD *)(v26 + 448) = v14;
  *(_BYTE *)(v26 + 488) = a4 == 0;
  *(_BYTE *)(v26 + 476) = *(_BYTE *)(a3 + 152);
  *(_QWORD *)(v26 + 496) = v15;
  *(_BYTE *)(v26 + 672) = 1;
  v32 = (re::ecs2::TransformComponent **)*((_QWORD *)this + 2);
  if (!v32)
    goto LABEL_26;
  v33 = *((_QWORD *)this + 2);
  do
  {
    v34 = v33;
    v33 = *(_QWORD *)(v33 + 24);
  }
  while (v33);
  v35 = *(_QWORD *)(v34 + 16);
  if (v35)
  {
    v36 = *(_QWORD *)(v35 + 56);
    if (v36)
    {
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 32))(v36);
      v32 = (re::ecs2::TransformComponent **)*((_QWORD *)this + 2);
    }
  }
  else
  {
LABEL_26:
    v36 = 0;
  }
  re::ecs2::TransformHelper::computeWorldMatrixForRendering(v32, v36, buf);
  v37 = *(_OWORD *)buf;
  v38 = *(_OWORD *)&buf[16];
  v39 = v67;
  v40 = v68;
  *(_OWORD *)(v26 + 384) = *(_OWORD *)buf;
  *(_OWORD *)(v26 + 400) = v38;
  *(_OWORD *)(v26 + 416) = v39;
  *(_OWORD *)(v26 + 432) = v40;
  *(_OWORD *)v62 = v37;
  v63 = v38;
  v64 = v39;
  v65 = v40;
  re::audio::cleanUpTransformForPHASE((float32x4_t *)v62, v41, v42, v43, (uint64_t)buf);
  v44 = *(_OWORD *)&buf[16];
  v45 = v67;
  v46 = v68;
  *(_OWORD *)(v26 + 320) = *(_OWORD *)buf;
  *(_OWORD *)(v26 + 336) = v44;
  *(_OWORD *)(v26 + 352) = v45;
  *(_OWORD *)(v26 + 368) = v46;
  if (*(_BYTE *)(v26 + 488) && *(_QWORD *)(a3 + 16) && !*(_QWORD *)(v26 + 72))
  {
    v47 = re::ecs2::AudioPlayerComponent::copyPreferredMasterClock(this);
    *(_QWORD *)buf = 0;
    v48 = (re *)CMTimebaseCreateWithSourceClock((CFAllocatorRef)*MEMORY[0x24BDBD240], v47, (CMTimebaseRef *)buf);
    if ((_DWORD)v48)
    {
      v49 = (int)v48;
      v50 = *re::audioLogObjects(v48);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v62 = 67109120;
        *(_DWORD *)&v62[4] = v49;
        _os_log_error_impl(&dword_224FE9000, v50, OS_LOG_TYPE_ERROR, "Failed to create timebase: %d", v62, 8u);
      }
    }
    else
    {
      re::AudioSourceState::setTimebase((re::AudioSourceState *)v26, *(CFTypeRef *)buf, 0, (void (__cdecl *)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))AudioPlayerComponentHandleTimebaseTimeJumpedOrEffectiveRateChanged);
    }
    if (*(_QWORD *)buf)
      CFRelease(*(CFTypeRef *)buf);
    CFRelease(v47);
  }
  re::DynamicArray<re::SharedPtr<re::AssetLoadRequest>>::add((re::ecs2::AudioPlayerComponent *)((char *)this + 128), (uint64_t *)&v61);
  v51 = *((_QWORD *)this + 10);
  v52 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v53 = v52 ^ (v52 >> 31);
  if (v51)
  {
    v51 = v53 % *((unsigned int *)this + 26);
    v54 = *(unsigned int *)(*((_QWORD *)this + 11) + 4 * v51);
    if ((_DWORD)v54 != 0x7FFFFFFF)
    {
      v60 = *((_QWORD *)this + 12);
      if (*(_QWORD *)(v60 + 32 * v54 + 16) == a2)
        goto LABEL_45;
      while (1)
      {
        v54 = *(_DWORD *)(v60 + 32 * v54 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v54 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v60 + 32 * v54 + 16) == a2)
          goto LABEL_45;
      }
    }
  }
  v55 = *((unsigned int *)this + 29);
  if ((_DWORD)v55 == 0x7FFFFFFF)
  {
    v55 = *((unsigned int *)this + 28);
    v56 = v55;
    if ((_DWORD)v55 == *((_DWORD *)this + 26))
    {
      re::HashTable<unsigned long long,re::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)this + 80, 2 * *((_DWORD *)this + 27));
      LODWORD(v51) = v53 % *((unsigned int *)this + 26);
      v56 = *((_DWORD *)this + 28);
    }
    *((_DWORD *)this + 28) = v56 + 1;
    v57 = *((_QWORD *)this + 12);
    v58 = *(_DWORD *)(v57 + 32 * v55 + 8);
  }
  else
  {
    v57 = *((_QWORD *)this + 12);
    v58 = *(_DWORD *)(v57 + 32 * v55 + 8);
    *((_DWORD *)this + 29) = v58 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v57 + 32 * v55 + 8) = v58 | 0x80000000;
  *(_DWORD *)(*((_QWORD *)this + 12) + 32 * v55 + 8) = *(_DWORD *)(*((_QWORD *)this + 12) + 32 * v55 + 8) & 0x80000000 | *(_DWORD *)(*((_QWORD *)this + 11) + 4 * v51);
  *(_QWORD *)(*((_QWORD *)this + 12) + 32 * v55) = v53;
  *(_QWORD *)(*((_QWORD *)this + 12) + 32 * v55 + 16) = a2;
  *(_QWORD *)(*((_QWORD *)this + 12) + 32 * v55 + 24) = v26;
  *(_DWORD *)(*((_QWORD *)this + 11) + 4 * v51) = v55;
  ++*((_DWORD *)this + 27);
  ++*((_DWORD *)this + 30);
LABEL_45:
  if (re::ecs2::AudioPlayerComponent::syncStateIsReadyToCompletePreparation(this, (_QWORD *)a3, a4) && a5)
  {
    TimebaseService = (re::TimebaseService *)re::ecs2::AudioPlayerComponent::getTimebaseService(*((re::ecs2::AudioPlayerComponent **)this
                                                                                                + 2));
    re::ecs2::AudioPlayerComponent::completePreparation(this, a2, (re::AudioSourceSyncState *)a3, TimebaseService);
  }
  if (v26)

}

_QWORD *re::ecs2::AudioPlayerComponent::isPrepared(re::ecs2::AudioPlayerComponent *this, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;

  v5 = a2;
  result = (_QWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 80, &v5);
  if (result)
  {
    v4 = result;
    result = (_QWORD *)re::ecs2::AudioPlayerComponent::audioService(this);
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 200))(result, *v4);
  }
  return result;
}

void AudioPlayerComponentHandleTimebaseTimeJumpedOrEffectiveRateChanged(__CFNotificationCenter *a1, char *a2, const __CFString *a3, OpaqueCMTimebase *a4, const __CFDictionary *a5)
{
  re::ecs2::AudioPlayerComponent *v6;
  re::AudioFileAsset *v11;
  re::AudioFileAsset *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  double EffectiveRate;
  OpaqueCMTimebase *v20;
  double v21;
  _BOOL4 v22;
  re *v23;
  re *v24;
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  int v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  char v33;
  NSObject *v34;
  CFComparisonResult v35;
  NSObject *v36;
  NSObject *v37;
  NSObject *v38;
  const __CFDictionary *Value;
  CMClockRef HostTimeClock;
  re *v41;
  re *v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  int v51;
  uint64_t *v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  NSObject *v56;
  CMTimeValue v57;
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;
  int v61;
  int v62;
  NSObject *v63;
  uint64_t v64;
  OpaqueCMClock *v65;
  Float64 Seconds;
  re::ecs2::AudioPlayerComponent *v67;
  CMTime v68;
  CMTime v69;
  CMTime v70;
  CMTime v71;
  CMTime v72;
  CMTime time2;
  CMTime time1;
  CMTime rhs;
  CMTime lhs;
  CMTime v77;
  CMTime hostTime;
  CMTime v79;
  CMTime v80;
  CMTime v81;
  CMTime fireTime;
  _QWORD handler[9];
  CMTime time;
  CMTime v85;
  uint8_t buf[4];
  uint64_t v87;
  __int16 v88;
  Float64 v89;
  CMTime v90;
  uint64_t v91;
  __int16 v92;
  int v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  v6 = (re::ecs2::AudioPlayerComponent *)*((_QWORD *)a2 + 60);
  if (!v6)
    return;
  v11 = (re::AudioFileAsset *)re::ecs2::AudioPlayerComponent::audioService(v6);
  if (!v11)
  {
    if (a2[664])
      a2[664] = 0;
    if (a2[652])
      a2[652] = 0;
    if (a2[624])
      a2[624] = 0;
    return;
  }
  v12 = v11;
  v13 = *((_QWORD *)a2 + 5);
  if (v13)
  {
    v14 = *(uint64_t **)(v13 + 264);
    v15 = re::AudioFileAsset::assetType(v11);
    if (v14 == v15)
      goto LABEL_15;
  }
  else
  {
    v15 = re::AudioFileAsset::assetType(v11);
  }
  v16 = *((_QWORD *)a2 + 5);
  if (!v16)
  {
    re::AudioFileGroupAsset::assetType((re::AudioFileGroupAsset *)v15);
    goto LABEL_18;
  }
  v17 = *(uint64_t **)(v16 + 264);
  if (v17 != re::AudioFileGroupAsset::assetType((re::AudioFileGroupAsset *)v15))
  {
LABEL_18:
    v18 = 0;
    goto LABEL_19;
  }
LABEL_15:
  if (!(*(unsigned int (**)(re::AudioFileAsset *))(*(_QWORD *)v12 + 544))(v12))
    return;
  v18 = 1;
LABEL_19:
  EffectiveRate = CMTimebaseGetEffectiveRate(a4);
  v20 = (OpaqueCMTimebase *)*((_QWORD *)a2 + 87);
  if (v20)
  {
    v21 = CMTimebaseGetEffectiveRate(v20);
    v22 = v21 <= 4.0 && v21 >= 0.25;
  }
  else
  {
    v22 = 0;
  }
  memset(&v85, 0, sizeof(v85));
  CMTimebaseGetTime(&v85, a4);
  v23 = (re *)(*(uint64_t (**)(re::AudioFileAsset *, char *))(*(_QWORD *)v12 + 200))(v12, a2);
  if (!(_DWORD)v23 || !a2[478])
  {
    v23 = (re *)(*(uint64_t (**)(re::AudioFileAsset *, char *))(*(_QWORD *)v12 + 216))(v12, a2);
    if ((_DWORD)v23)
    {
      re::AudioSourceState::setTimebaseUserInfo((re::AudioSourceState *)a2, a5);
      v25 = re::globalAllocators(v24);
      v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25[2] + 32))(v25[2], 32, 8);
      *(_OWORD *)v26 = 0u;
      *(_OWORD *)(v26 + 16) = 0u;
      v27 = (char *)CFStringCompare(a3, (CFStringRef)*MEMORY[0x24BDC0DA0], 0);
      if (v27)
        v28 = 5;
      else
        v28 = 6;
      *(_DWORD *)v26 = v28;
      *(_QWORD *)(v26 + 8) = *((_QWORD *)a2 + 85);
      v29 = (_QWORD *)*((_QWORD *)a2 + 60);
      v31 = (uint64_t *)v29[42];
      v30 = v29[43];
      if ((unint64_t)v31 >= v30)
      {
        v44 = v29[41];
        v45 = ((uint64_t)v31 - v44) >> 3;
        if ((unint64_t)(v45 + 1) >> 61)
          abort();
        v46 = v30 - v44;
        v47 = v46 >> 2;
        if (v46 >> 2 <= (unint64_t)(v45 + 1))
          v47 = v45 + 1;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
          v48 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v48 = v47;
        if (v48)
          v48 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v48);
        else
          v49 = 0;
        v52 = (uint64_t *)(v48 + 8 * v45);
        v53 = v48 + 8 * v49;
        *v52 = v26;
        v32 = v52 + 1;
        v54 = (char *)v29[41];
        v27 = (char *)v29[42];
        if (v27 != v54)
        {
          do
          {
            v55 = *((_QWORD *)v27 - 1);
            v27 -= 8;
            *--v52 = v55;
          }
          while (v27 != v54);
          v27 = (char *)v29[41];
        }
        v29[41] = v52;
        v29[42] = v32;
        v29[43] = v53;
        if (v27)
          operator delete(v27);
      }
      else
      {
        *v31 = v26;
        v32 = v31 + 1;
      }
      v29[42] = v32;
      v56 = *re::audioLogObjects((re *)v27);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        v57 = *((_QWORD *)a2 + 62);
        v58 = *((_QWORD *)a2 + 56);
        v59 = v56;
        v60 = *((_QWORD *)a2 + 85);
        v61 = *(_DWORD *)v26;
        LODWORD(v90.value) = 134218752;
        *(CMTimeValue *)((char *)&v90.value + 4) = v57;
        LOWORD(v90.flags) = 2048;
        *(_QWORD *)((char *)&v90.flags + 2) = v58;
        HIWORD(v90.epoch) = 2048;
        v91 = v60;
        v92 = 1024;
        v93 = v61;
        _os_log_impl(&dword_224FE9000, v59, OS_LOG_TYPE_DEFAULT, "AudioPlayerComponent(entityID=%llu, sceneID=%llu) token %llu, resend action %u as the REPhaseSoundEvent is being prepared", (uint8_t *)&v90, 0x26u);

      }
      return;
    }
  }
  v33 = EffectiveRate == 0.0 || v22;
  if ((v33 & 1) == 0)
  {
    v34 = *re::audioLogObjects(v23);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v90.value) = 134217984;
      *(double *)((char *)&v90.value + 4) = EffectiveRate;
      _os_log_error_impl(&dword_224FE9000, v34, OS_LOG_TYPE_ERROR, "Rate (%0.2f) set outside of allowable bounds [0.25, 4.0]. Silencing player.", (uint8_t *)&v90, 0xCu);
    }
  }
  v35 = CFStringCompare(a3, (CFStringRef)*MEMORY[0x24BDC0DB0], 0);
  if (v35 && v22 && a2[664] && *((double *)a2 + 82) != 0.0)
    return;
  if (v22 && (time = v85, CMTimeGetSeconds(&time) < -0.02))
  {
    if (!*((_QWORD *)a2 + 89))
    {
      v36 = dispatch_source_create(MEMORY[0x24BDACA18], 0, 0, *(dispatch_queue_t *)(*((_QWORD *)a2 + 60) + 288));
      handler[0] = MEMORY[0x24BDAC760];
      handler[1] = 3221225472;
      handler[2] = ___Z66AudioPlayerComponentHandleTimebaseTimeJumpedOrEffectiveRateChangedP22__CFNotificationCenterPvPK10__CFStringPKvPK14__CFDictionary_block_invoke;
      handler[3] = &__block_descriptor_72_e5_v8__0l;
      handler[4] = a2;
      handler[5] = a1;
      handler[6] = a2;
      handler[7] = a3;
      handler[8] = a4;
      dispatch_source_set_event_handler(v36, handler);
      re::AudioSourceState::setTimebaseDispatchSource((uint64_t)a2, v36);

    }
    re::AudioSourceState::setTimebaseUserInfo((re::AudioSourceState *)a2, a5);
    v37 = *((id *)a2 + 89);
    CMTimeMakeWithSeconds(&fireTime, -0.02, 1000);
    CMTimebaseSetTimerDispatchSourceNextFireTime(a4, v37, &fireTime, 0);

    v22 = 0;
  }
  else
  {
    v38 = *((_QWORD *)a2 + 89);
    if (v38)
    {
      v81 = *(CMTime *)*(_QWORD *)&MEMORY[0x24BDC0D58];
      CMTimebaseSetTimerDispatchSourceNextFireTime(a4, v38, &v81, 0);
    }
  }
  Value = (const __CFDictionary *)CFDictionaryGetValue(a5, (const void *)*MEMORY[0x24BDC0D98]);
  memset(&v90, 0, sizeof(v90));
  if (Value)
    CMTimeMakeFromDictionary(&v90, Value);
  else
    v90 = *(CMTime *)*(_QWORD *)&MEMORY[0x24BDC0D40];
  memset(&v80, 0, sizeof(v80));
  v79 = *(CMTime *)*(_QWORD *)&MEMORY[0x24BDC0D88];
  HostTimeClock = CMClockGetHostTimeClock();
  CMSyncConvertTime(&v80, &v79, a4, HostTimeClock);
  hostTime = v80;
  v41 = (re *)CMClockConvertHostTimeToSystemUnits(&hostTime);
  v42 = v41;
  if (v22)
  {
    v43 = *re::audioLogObjects(v41);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
    {
      v63 = v43;
      v64 = *((_QWORD *)a2 + 85);
      lhs = v80;
      v65 = CMClockGetHostTimeClock();
      CMClockGetTime(&rhs, v65);
      CMTimeSubtract(&v77, &lhs, &rhs);
      Seconds = CMTimeGetSeconds(&v77);
      *(_DWORD *)buf = 134218240;
      v87 = v64;
      v88 = 2048;
      v89 = Seconds;
      _os_log_debug_impl(&dword_224FE9000, v63, OS_LOG_TYPE_DEBUG, "playing token %llu %0.3f sec from now.", buf, 0x16u);

      if (v18)
        goto LABEL_55;
LABEL_93:
      v68 = v90;
      (*(void (**)(re::AudioFileAsset *, char *, BOOL, re *, CMTime *, double))(*(_QWORD *)v12 + 208))(v12, a2, v35 == kCFCompareEqualTo, v42, &v68, EffectiveRate);
      return;
    }
  }
  if (!v18)
    goto LABEL_93;
LABEL_55:
  if (v35)
  {
    if (!a2[664] || EffectiveRate != *((double *)a2 + 82))
    {
      *((double *)a2 + 82) = EffectiveRate;
      a2[664] = 1;
      if (v22)
      {
        if (a2[652])
          a2[652] = 0;
        if (a2[624])
          a2[624] = 0;
      }
      v69 = v90;
      (*(void (**)(re::AudioFileAsset *, char *, _QWORD, re *, CMTime *, double))(*(_QWORD *)v12 + 208))(v12, a2, 0, v42, &v69, EffectiveRate);
    }
    return;
  }
  v50 = a2 + 628;
  if (!a2[652])
  {
    *v50 = *(_OWORD *)&v90.value;
    *(_QWORD *)(a2 + 644) = v90.epoch;
    goto LABEL_88;
  }
  if (!a2[624])
    goto LABEL_77;
  time1 = v90;
  *(_OWORD *)&time2.value = *v50;
  time2.epoch = *(_QWORD *)(a2 + 644);
  if (CMTimeCompare(&time1, &time2))
    goto LABEL_77;
  v72 = v80;
  if (!a2[624])
  {
    v67 = (re::ecs2::AudioPlayerComponent *)std::__throw_bad_optional_access[abi:nn180100]();
    re::ecs2::AudioPlayerComponent::syncStateIsReadyToCompletePreparation(v67);
    return;
  }
  v71 = *(CMTime *)(a2 + 25);
  if (CMTimeCompare(&v72, &v71))
  {
LABEL_77:
    v51 = a2[652];
    *v50 = *(_OWORD *)&v90.value;
    *(_QWORD *)(a2 + 644) = v90.epoch;
    if (v51)
    {
LABEL_89:
      v62 = a2[624];
      *((CMTime *)a2 + 25) = v80;
      if (!v62)
        a2[624] = 1;
      v70 = v90;
      (*(void (**)(re::AudioFileAsset *, char *, uint64_t, re *, CMTime *, double))(*(_QWORD *)v12 + 208))(v12, a2, 1, v42, &v70, EffectiveRate);
      return;
    }
LABEL_88:
    a2[652] = 1;
    goto LABEL_89;
  }
}

uint64_t re::ecs2::AudioPlayerComponent::syncStateIsReadyToCompletePreparation(re::ecs2::AudioPlayerComponent *this, _QWORD *a2, int a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  re *v9;
  int v10;
  NSObject *v11;
  uint64_t result;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  re *v31;
  int v32;
  void *__p[2];
  char v34;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v7 = *((_QWORD *)this + 2);
    do
    {
      v8 = v7;
      v7 = *(_QWORD *)(v7 + 24);
    }
    while (v7);
    if (*(_QWORD *)(v8 + 16) && (*(_BYTE *)(v3 + 288) & 1) != 0)
    {
      v14 = re::ecs2::AudioPlayerComponent::audioService(this);
      if (a3)
      {
        v15 = *((_QWORD *)this + 2);
        if (v15)
        {
          v16 = v14;
          v14 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v15 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
          if (v14)
          {
            if (*(_QWORD *)(v14 + 32) && v16 != 0)
            {
              v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 544))(v16);
              if ((_DWORD)v14)
              {
                v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 112))(v16);
                if ((v14 & 1) == 0)
                {
                  std::string::basic_string[abi:nn180100]<0>(__p, "[RE/ECS] [Update] The reason that this AudioSource is not able to complete preparation is due to the host still recovering from media services crash.");
                  v31 = (re *)re::audio::throttledLog(OS_LOG_TYPE_DEBUG, (__int128 *)__p);
                  v32 = (int)v31;
                  if (v34 < 0)
                    operator delete(__p[0]);
                  if (!v32)
                    return 0;
                  v11 = *re::audioLogObjects(v31);
                  result = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
                  if (!(_DWORD)result)
                    return result;
                  LOWORD(__p[0]) = 0;
                  v13 = "[RE/ECS] [Update] The reason that this AudioSource is not able to complete preparation is due to"
                        " the host still recovering from media services crash.";
                  goto LABEL_12;
                }
              }
            }
          }
        }
      }
      v18 = a2[29];
      if ((v18 & 1) != 0)
        v19 = v18 >> 1;
      else
        v19 = v18 >> 1;
      if (!v19)
      {
        v20 = a2[2];
        if (v20)
        {
          v21 = atomic_load((unsigned int *)(v20 + 704));
          if (v21 != 2)
            return 0;
          v22 = a2[2];
          if (v22)
          {
            v23 = *(uint64_t **)(v22 + 264);
            v24 = re::AudioFileAsset::assetType((re::AudioFileAsset *)v14);
            if (v23 == v24)
              return *(_BYTE *)(re::AssetHandle::loadedAsset<re::AudioFileAsset>((re::AudioFileAsset *)(a2 + 1)) + 153) != 0;
          }
          else
          {
            v24 = re::AudioFileAsset::assetType((re::AudioFileAsset *)v14);
          }
          v25 = a2[2];
          if (v25)
          {
            v26 = *(uint64_t **)(v25 + 264);
            v27 = re::AudioFileGroupAsset::assetType((re::AudioFileGroupAsset *)v24);
            if (v26 == v27)
            {
              v28 = re::AssetHandle::loadedAsset<re::AudioFileGroupAsset>((re::AudioFileGroupAsset *)(a2 + 1));
              return re::AudioFileGroupAsset::isCompletelyLoaded(v28);
            }
          }
          else
          {
            v27 = re::AudioFileGroupAsset::assetType((re::AudioFileGroupAsset *)v24);
          }
          v29 = a2[2];
          if (!v29)
          {
            re::AudioGeneratorAsset::assetType((re::AudioGeneratorAsset *)v27);
            return 0;
          }
          v30 = *(uint64_t **)(v29 + 264);
          if (v30 != re::AudioGeneratorAsset::assetType((re::AudioGeneratorAsset *)v27))
            return 0;
        }
        else if (!a2[26] && !a2[27])
        {
          return 0;
        }
      }
      return 1;
    }
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "[RE/ECS] [Update] The reason that this AudioSource is not able to complete preparation is due to the fact that the entity is not active.");
  v9 = (re *)re::audio::throttledLog(OS_LOG_TYPE_DEBUG, (__int128 *)__p);
  v10 = (int)v9;
  if ((v34 & 0x80000000) == 0)
  {
    if (!(_DWORD)v9)
      return 0;
    goto LABEL_10;
  }
  operator delete(__p[0]);
  if (v10)
  {
LABEL_10:
    v11 = *re::audioLogObjects(v9);
    result = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
    if (!(_DWORD)result)
      return result;
    LOWORD(__p[0]) = 0;
    v13 = "[RE/ECS] [Update] The reason that this AudioSource is not able to complete preparation is due to the fact that"
          " the entity is not active.";
LABEL_12:
    _os_log_debug_impl(&dword_224FE9000, v11, OS_LOG_TYPE_DEBUG, v13, (uint8_t *)__p, 2u);
  }
  return 0;
}

void re::ecs2::AudioPlayerComponent::completePreparation(re::ecs2::AudioPlayerComponent *this, unint64_t a2, re::AudioSourceSyncState *a3, re::TimebaseService *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  re::ecs2::Entity *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  NSObject *v17;
  NSObject *v18;
  BOOL v19;
  re *v20;
  uint64_t v21;
  unsigned int v22;
  re::AudioGeneratorAsset *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  re *v28;
  int v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  void *v33;
  const char *v34;
  NSObject *v35;
  void *v36;
  unint64_t v37;
  re::AudioGeneratorAsset *v38;
  uint64_t v39;
  uint64_t *v40;
  re *v41;
  id v42;
  void *v43;
  id v44;
  void (*v45)(uint64_t, uint64_t, __int128 *, _QWORD *);
  id v46;
  NSObject *v47;
  _QWORD v48[4];
  id v49;
  id v50;
  id v51[4];
  __int128 v52;
  uint64_t v53;
  _QWORD v54[4];
  id v55[10];
  unint64_t v56;
  void *__p[2];
  char v58;
  _BYTE buf[32];
  char v60;
  uint64_t v61;
  char v62;
  char v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v56 = a2;
  v7 = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 80, (uint64_t *)&v56);
  if (!v7)
    return;
  v8 = *(_QWORD *)v7;
  if (*(_QWORD *)(*(_QWORD *)v7 + 448) == -1)
    return;
  v9 = re::ecs2::AudioPlayerComponent::audioService(this);
  if (v9)
  {
    if (!*((_QWORD *)this + 36))
      return;
    v11 = *((_QWORD *)this + 2);
    if (!v11)
      return;
    v12 = v9;
    v13 = *((_QWORD *)this + 2);
    do
    {
      v14 = v13;
      v13 = *(_QWORD *)(v13 + 24);
    }
    while (v13);
    if (!*(_QWORD *)(v14 + 16))
      return;
    v15 = *((_QWORD *)a3 + 29);
    if ((v15 & 1) != 0)
      v16 = v15 >> 1;
    else
      v16 = v15 >> 1;
    if (v16)
    {
      *(_BYTE *)(v8 + 478) = 1;
      return;
    }
    if (!*((_QWORD *)a3 + 2) && (*((_QWORD *)a3 + 26) || *((_QWORD *)a3 + 27)))
    {
      v26 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v11 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
      if (v26)
      {
        v27 = re::HashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v26 + 88, (uint64_t *)&v56);
        if (v27)
        {
          *(_WORD *)buf = 0;
          buf[2] = 0;
          v60 = 0;
          v63 = 0;
          v64 = 0;
          *(_QWORD *)&buf[4] = *(_QWORD *)v27;
          *(_OWORD *)&buf[16] = *(_OWORD *)(v27 + 8);
          (*(void (**)(uint64_t, unint64_t, _BYTE *))(*(_QWORD *)v12 + 600))(v12, v56, buf);
          *(_BYTE *)(v8 + 478) = 1;
          if (v60 && v61 && (v62 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v61 + 40))();
          return;
        }
        v35 = *re::audioLogObjects(0);
        if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          return;
        v18 = v35;
        re::AudioSourceSyncState::externalStreamUUID(a3);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v33;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v56;
        v34 = "[RE/ECS] [Prepare] Cannot prepare external stream %@ (token=%llu) without accompanying stream state";
      }
      else
      {
        v32 = *re::audioLogObjects(0);
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          return;
        v18 = v32;
        re::AudioSourceSyncState::externalStreamUUID(a3);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v33;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v56;
        v34 = "[RE/ECS] [Prepare] Cannot prepare external stream %@ (token=%llu) without an attached transient component";
      }
      _os_log_error_impl(&dword_224FE9000, v18, OS_LOG_TYPE_ERROR, v34, buf, 0x16u);

      goto LABEL_45;
    }
    if (!a4)
      return;
    re::ecs2::AudioSessionComponent::NearestAudioSessionUpEntityHierarchy(*((re::ecs2::AudioSessionComponent **)this + 2), v10);
    v18 = objc_claimAutoreleasedReturnValue();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 744))(v12))
      v19 = v18 == 0;
    else
      v19 = 0;
    if (v19)
    {
      snprintf(buf, 0x64uLL, "audiosessionrequirement%llu", v56);
      std::string::basic_string[abi:nn180100]<0>(__p, buf);
      v28 = (re *)re::audio::throttledLog(OS_LOG_TYPE_ERROR, (__int128 *)__p);
      v29 = (int)v28;
      if (v58 < 0)
        operator delete(__p[0]);
      if (v29)
      {
        v30 = *re::audioLogObjects(v28);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__p[0]) = 134217984;
          *(void **)((char *)__p + 4) = (void *)v56;
          _os_log_error_impl(&dword_224FE9000, v30, OS_LOG_TYPE_ERROR, "Not preparing token %llu because it does not have a required audio session", (uint8_t *)__p, 0xCu);
        }
      }
      goto LABEL_45;
    }
    objc_storeStrong((id *)(v8 + 464), v18);
    v21 = *((_QWORD *)a3 + 2);
    if (!v21 || (v22 = atomic_load((unsigned int *)(v21 + 704)), v22 != 2))
    {
      v31 = *re::audioLogObjects(v20);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v56;
        _os_log_fault_impl(&dword_224FE9000, v31, OS_LOG_TYPE_FAULT, "Cannot prepare token %llu with not loaded asset", buf, 0xCu);
      }
      goto LABEL_45;
    }
    v23 = (re::AudioGeneratorAsset *)re::ecs2::AudioPlayerComponent::completeTimebasePreparation(this, v56, a3, a4);
    if (!(_DWORD)v23)
    {
LABEL_45:

      return;
    }
    v24 = *(_QWORD *)(v8 + 40);
    if (v24)
    {
      v25 = *(uint64_t **)(v24 + 264);
      if (v25 == re::AudioGeneratorAsset::assetType(v23) && *(_BYTE *)(v8 + 488))
      {
        v55[3] = (id)MEMORY[0x24BDAC760];
        v55[4] = (id)3221225472;
        v55[5] = ___ZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS_20AudioSourceSyncStateEPNS_15TimebaseServiceE_block_invoke;
        v55[6] = &__block_descriptor_56_e33_v24__0__AUAudioUnit_8__NSError_16l;
        v55[7] = this;
        v55[8] = (id)v56;
        v55[9] = (id)v11;
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 560))(v12);
      }
    }
    else
    {
      re::AudioGeneratorAsset::assetType(v23);
    }
    v36 = (void *)re::ecs2::AudioPlayerComponent::getOrInitializePrivateEntityID(this);
    objc_initWeak(__p, *(id *)(v8 + 800));
    v37 = v56;
    v54[0] = MEMORY[0x24BDAC760];
    v54[1] = 3221225472;
    v54[2] = ___ZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS_20AudioSourceSyncStateEPNS_15TimebaseServiceE_block_invoke_26;
    v54[3] = &unk_24ED5AFE8;
    objc_copyWeak(v55, __p);
    v55[1] = (id)v56;
    v55[2] = v36;
    v38 = (re::AudioGeneratorAsset *)(*(uint64_t (**)(uint64_t, unint64_t, _QWORD *))(*(_QWORD *)v12 + 680))(v12, v37, v54);
    v39 = *(_QWORD *)(v8 + 40);
    if (v39)
    {
      v40 = *(uint64_t **)(v39 + 264);
      if (v40 == re::AudioGeneratorAsset::assetType(v38))
        goto LABEL_57;
    }
    else
    {
      re::AudioGeneratorAsset::assetType(v38);
    }
    v41 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 544))(v12);
    if ((v41 & 1) == 0)
    {
      v47 = *re::audioLogObjects(v41);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v8;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v56;
        _os_log_impl(&dword_224FE9000, v47, OS_LOG_TYPE_DEFAULT, "[RE/PHASE] [Prepare] Preparing sourceState: %p with token: %llu as client of shared simulation", buf, 0x16u);
      }
      re::ecs2::AudioPlayerComponent::setRandomPlaybackPositionForTokenIfAppropriate(this, v56);
      *(_BYTE *)(v8 + 478) = 1;
      re::ecs2::AudioPlayerComponent::triggerPendingActions((re::ecs2::AudioPlayerComponent **)this);
      goto LABEL_63;
    }
LABEL_57:
    *(_BYTE *)(v8 + 476) = re::ecs2::AudioPlayerComponent::selectInputMode(this, v56);
    if (!*(_BYTE *)(v8 + 720))
      re::ecs2::AudioPlayerComponent::setRandomPlaybackPositionForTokenIfAppropriate(this, v56);
    memset(buf, 0, 24);
    (*(void (**)(_BYTE *__return_ptr, re::TimebaseService *, _QWORD))(*(_QWORD *)a4 + 112))(buf, a4, *((_QWORD *)a3 + 6));
    *(_BYTE *)(v8 + 479) = 1;
    v42 = *((id *)this + 36);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 616))(v12);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = *(_OWORD *)buf;
    v53 = *(_QWORD *)&buf[16];
    v48[0] = MEMORY[0x24BDAC760];
    v48[1] = 3221225472;
    v48[2] = ___ZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS_20AudioSourceSyncStateEPNS_15TimebaseServiceE_block_invoke_28;
    v48[3] = &unk_24ED5B010;
    v51[1] = this;
    v49 = v43;
    v51[2] = (id)v56;
    v44 = v43;
    objc_copyWeak(v51, __p);
    v50 = v42;
    v51[3] = v36;
    v45 = *(void (**)(uint64_t, uint64_t, __int128 *, _QWORD *))(*(_QWORD *)v12 + 192);
    v46 = v42;
    v45(v12, v8, &v52, v48);

    objc_destroyWeak(v51);
LABEL_63:
    objc_destroyWeak(v55);
    objc_destroyWeak(__p);
    goto LABEL_45;
  }
  v17 = *re::audioLogObjects(0);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_224FE9000, v17, OS_LOG_TYPE_ERROR, "[RE/ECS] [Prepare] Cannot prepare with no AudioService", buf, 2u);
  }
}

uint64_t re::ecs2::AudioPlayerComponent::hasInputModeOverride(re::ecs2::AudioPlayerComponent *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v4 = a2;
  v2 = *((_QWORD *)this + 2);
  if (!v2)
    return 0;
  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
  if (result)
    return re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(result + 40, &v4) != 0;
  return result;
}

uint64_t re::ecs2::AudioPlayerComponent::getInputModeOverride(re::ecs2::AudioPlayerComponent *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t result;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;

  v12 = a2;
  v2 = *((_QWORD *)this + 2);
  if (!v2)
  {
    v6 = *re::audioLogObjects(this);
    result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    v11 = 0;
    v7 = "cannot get override input mode from component that does not have entity";
    v8 = (uint8_t *)&v11;
    goto LABEL_11;
  }
  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
  if (!v3)
  {
    v6 = *re::audioLogObjects(0);
    result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    v10 = 0;
    v7 = "cannot get override input mode b/c does not have transient component";
    v8 = (uint8_t *)&v10;
    goto LABEL_11;
  }
  v4 = (unsigned __int8 *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v3 + 40, &v12);
  if (v4)
    return *v4;
  v6 = *re::audioLogObjects(0);
  result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    v9 = 0;
    v7 = "cannot get override input mode b/c does not have matching token in transient component";
    v8 = (uint8_t *)&v9;
LABEL_11:
    _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
    return 0;
  }
  return result;
}

void re::ecs2::AudioPlayerComponent::preparationCompleteCallback(re::ecs2::AudioPlayerComponent *this, re::AudioSourceState *a2, re::ecs2::AudioPlayerComponent *a3, NSError *a4)
{
  re::ecs2::AudioPlayerComponent *v6;
  re::ecs2::AudioPlayerComponent *v7;
  uint64_t v8;
  void *v9;
  int v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  re *v14;
  re *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  re::EventBus *v21;
  uint64_t v22;
  void *AudioUnit;
  uint64_t v24;
  void *Type;
  _BYTE v26[24];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = v6;
  *((_BYTE *)this + 479) = 0;
  v8 = *((_QWORD *)this + 85);
  if (v6
    && (-[re::ecs2::AudioPlayerComponent domain](v6, "domain"),
        v9 = (void *)objc_claimAutoreleasedReturnValue(),
        v10 = objc_msgSend(v9, "isEqualToString:", CFSTR("com.apple.re.internal")),
        v9,
        v10))
  {
    v11 = *re::audioLogObjects(v6);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v26 = 134218242;
      *(_QWORD *)&v26[4] = v8;
      *(_WORD *)&v26[12] = 2112;
      *(_QWORD *)&v26[14] = v7;
      v12 = "Error preparing source %llu: %@";
LABEL_21:
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, v12, v26, 0x16u);
    }
  }
  else
  {
    v13 = *((_QWORD *)this + 5);
    if (v13)
      v14 = *(re **)(v13 + 264);
    else
      v14 = 0;
    v15 = (re *)re::AudioGeneratorAsset::assetType(v6);
    if (v14 == v15)
    {
      if (*((_BYTE *)this + 488))
      {
        v16 = *((_QWORD *)a2 + 2);
        if (v16)
        {
          v17 = *((_QWORD *)a2 + 2);
          do
          {
            v18 = v17;
            v17 = *(_QWORD *)(v17 + 24);
          }
          while (v17);
          if (*(_QWORD *)(v18 + 16))
          {
            v19 = *((_QWORD *)a2 + 2);
            do
            {
              v20 = v19;
              v19 = *(_QWORD *)(v19 + 24);
            }
            while (v19);
            v21 = *(re::EventBus **)(*(_QWORD *)(v20 + 16) + 288);
            if (v21)
            {
              v22 = *((_QWORD *)this + 57);
              *(_QWORD *)v26 = v8;
              *(_QWORD *)&v26[8] = v22;
              *(_QWORD *)&v26[16] = v7;
              AudioUnit = re::EventBus::getTypeId<REAudioPlayerDidCreateAudioUnitEvent>();
              re::EventBus::publish(v21, v16, (uint64_t)AudioUnit, (uint64_t)v26, 0x18uLL, 0);
              v24 = *((_QWORD *)this + 57);
              *(_QWORD *)v26 = v8;
              *(_QWORD *)&v26[8] = v24;
              *(_QWORD *)&v26[16] = v7;
              Type = re::EventBus::getTypeId<REAudioPlayerDidPrepareAudioUnitEvent>();
              v15 = (re *)re::EventBus::publish(v21, v16, (uint64_t)Type, (uint64_t)v26, 0x18uLL, 0);
            }
          }
        }
      }
    }
    if (!v7)
    {
      *((_BYTE *)this + 478) = 1;
      re::ecs2::AudioPlayerComponent::triggerPendingActions((re::ecs2::AudioPlayerComponent **)a2);
      goto LABEL_23;
    }
    v11 = *re::audioLogObjects(v15);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v26 = 134218242;
      *(_QWORD *)&v26[4] = v8;
      *(_WORD *)&v26[12] = 2112;
      *(_QWORD *)&v26[14] = v7;
      v12 = "Could not complete preparation for token %llu, error = %@";
      goto LABEL_21;
    }
  }
LABEL_23:

}

void re::ecs2::AudioPlayerComponent::triggerPendingActions(re::ecs2::AudioPlayerComponent **this)
{
  int canModifyState;
  re::ecs2::AudioPlayerComponent *v3;
  int v4;
  const __CFString *v5;
  _DWORD *v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  re::ecs2::AudioPlayerComponent *v11;
  re::ecs2::AudioPlayerComponent *v12;
  re *v13;
  uint64_t *v14;
  re *v15;
  int v16;
  NSObject *v17;
  re::ecs2::AudioPlayerComponent *v18;
  _DWORD *v19;
  re::ecs2::AudioPlayerComponent *v20;
  re::ecs2::AudioPlayerComponent *v21;
  uint64_t v22;
  re::AudioSourceState **v23;
  re::AudioSourceState *v24;
  re::AudioSourceSyncState *v25;
  uint64_t v26;
  int v27;
  re::AudioSourceSyncState *v28;
  re::AudioSourceSyncState *v29;
  uint64_t v30;
  re::AudioGeneratorAsset *v31;
  uint64_t v32;
  NSObject *v33;
  CMTimeValue v34;
  const __CFDictionary *v35;
  __CFNotificationCenter *LocalCenter;
  OpaqueCMTimebase *v37;
  char *v38;
  const __CFString *v39;
  uint64_t *v40;
  double v41;
  OpaqueCMTimebase *v42;
  uint64_t v43;
  uint64_t v44;
  __CFString *v45;
  _BYTE time[32];
  int v47;
  uint64_t v48;
  _BYTE __p[12];
  __int16 v50;
  int v51;
  char v52;
  CMTime __str[6];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  canModifyState = re::ecs2::AudioPlayerComponent::canModifyState(this[2]);
  v47 = 0;
  memset(time, 0, sizeof(time));
  v48 = 0x7FFFFFFFLL;
  v3 = this[41];
  if (v3 != this[42])
  {
    v4 = canModifyState;
    v45 = (__CFString *)*MEMORY[0x24BDC0DA0];
    v5 = (const __CFString *)*MEMORY[0x24BDC0DB0];
    do
    {
      v6 = *(_DWORD **)v3;
      v7 = (unint64_t *)(*(_QWORD *)v3 + 8);
      if (!re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)time, (uint64_t *)v7))
      {
        v8 = re::ecs2::AudioPlayerComponent::sourceStateForToken((re::ecs2::AudioPlayerComponent *)this, *v7);
        if (v8)
        {
          v9 = v8;
          if (re::ecs2::AudioPlayerComponent::audioService((re::ecs2::AudioPlayerComponent *)this))
          {
            v10 = re::ecs2::AudioPlayerComponent::audioService((re::ecs2::AudioPlayerComponent *)this);
            if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 200))(v10, v9))
            {
              if (*(_BYTE *)(v9 + 478))
              {
                v11 = this[41];
                if (*v6 == 3)
                {
                  v12 = this[42];
                }
                else
                {
                  v12 = this[42];
                  if (v11 == v12)
                  {
LABEL_25:
                    v19 = 0;
                  }
                  else
                  {
                    v18 = this[41];
                    while (1)
                    {
                      v19 = *(_DWORD **)v18;
                      if (*(_QWORD *)(*(_QWORD *)v18 + 8) == *v7 && *v19 == 3)
                        break;
                      v18 = (re::ecs2::AudioPlayerComponent *)((char *)v18 + 8);
                      if (v18 == v12)
                        goto LABEL_25;
                    }
                  }
                  if (v19)
                    v6 = v19;
                }
                v20 = this[41];
                if (v11 != v12)
                {
                  while (*(_DWORD **)v20 != v6)
                  {
                    v20 = (re::ecs2::AudioPlayerComponent *)((char *)v20 + 8);
                    if (v20 == v12)
                    {
                      v20 = v12;
                      break;
                    }
                  }
                }
                if (v20 != v12)
                {
                  v21 = (re::ecs2::AudioPlayerComponent *)((char *)v20 + 8);
                  if ((re::ecs2::AudioPlayerComponent *)((char *)v20 + 8) != v12)
                  {
                    do
                    {
                      if (*(_DWORD **)v21 != v6)
                      {
                        *(_QWORD *)v20 = *(_QWORD *)v21;
                        v20 = (re::ecs2::AudioPlayerComponent *)((char *)v20 + 8);
                      }
                      v21 = (re::ecs2::AudioPlayerComponent *)((char *)v21 + 8);
                    }
                    while (v21 != v12);
                    v12 = this[42];
                  }
                }
                if (v12 != v20)
                  this[42] = v20;
                re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)time);
                *(_QWORD *)__p = *((_QWORD *)v6 + 1);
                v22 = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)(this + 10), (uint64_t *)__p);
                if (v22)
                {
                  v23 = (re::AudioSourceState **)v22;
                  v22 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)(this + 4), (uint64_t *)__p);
                  v24 = *v23;
                  switch(*v6)
                  {
                    case 0:
                      if (v4)
                        v25 = (re::AudioSourceSyncState *)v22;
                      else
                        v25 = 0;
                      re::ecs2::AudioPlayerComponent::doPlay((re::ecs2::AudioPlayerComponent *)this, *((_QWORD *)v6 + 1), *v23, v25);
                      break;
                    case 1:
                      if (v4)
                        v28 = (re::AudioSourceSyncState *)v22;
                      else
                        v28 = 0;
                      v22 = re::ecs2::AudioPlayerComponent::doPause((re::ecs2::AudioPlayerComponent *)this, *((_QWORD *)v6 + 1), *v23, v28);
                      break;
                    case 2:
                      if (v4)
                        v29 = (re::AudioSourceSyncState *)v22;
                      else
                        v29 = 0;
                      re::ecs2::AudioPlayerComponent::doStop((re::ecs2::AudioPlayerComponent *)this, *((_QWORD *)v6 + 1), *v23, v29);
                      break;
                    case 3:
                      v22 = re::ecs2::AudioPlayerComponent::audioService((re::ecs2::AudioPlayerComponent *)this);
                      if (!v22)
                        break;
                      v30 = v22;
                      v31 = (re::AudioGeneratorAsset *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 544))(v22);
                      if ((v31 & 1) != 0)
                        goto LABEL_56;
                      v43 = *((_QWORD *)v24 + 5);
                      if (v43)
                      {
                        v44 = *(_QWORD *)(v43 + 264);
                        v22 = (uint64_t)re::AudioGeneratorAsset::assetType(v31);
                        if (v44 == v22)
                        {
                          v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 552))(v30);
                          if ((_DWORD)v22)
LABEL_56:
                            v22 = (*(uint64_t (**)(uint64_t, re::AudioSourceState *, float, double))(*(_QWORD *)v30 + 288))(v30, v24, *((float *)v6 + 4), *((float *)v6 + 5));
                        }
                      }
                      else
                      {
                        v22 = (uint64_t)re::AudioGeneratorAsset::assetType(v31);
                      }
                      break;
                    case 4:
                      if (*((_BYTE *)v24 + 720))
                      {
                        v32 = *((_QWORD *)v6 + 1);
                        v33 = *re::audioLogObjects((re *)v22);
                        v22 = os_log_type_enabled(v33, OS_LOG_TYPE_ERROR);
                        if ((_DWORD)v22)
                        {
                          v34 = (CMTimeValue)this[38];
                          if (!v34)
                            v34 = (CMTimeValue)this[44];
                          LODWORD(__str[0].value) = 134218240;
                          *(CMTimeValue *)((char *)&__str[0].value + 4) = v34;
                          LOWORD(__str[0].flags) = 2048;
                          *(_QWORD *)((char *)&__str[0].flags + 2) = v32;
                          _os_log_error_impl(&dword_224FE9000, v33, OS_LOG_TYPE_ERROR, "AudioPlayerComponent::doSetPlaybackPositionFor() (entityID=%llu) cannot seek un-owned playback token %llu.", (uint8_t *)__str, 0x16u);
                        }
                      }
                      else
                      {
                        v41 = *((double *)v6 + 3);
                        CMTimeMakeWithSeconds(__str, v41, 48000);
                        v42 = (OpaqueCMTimebase *)*((_QWORD *)v24 + 87);
                        *(CMTime *)time = __str[0];
                        v22 = CMTimebaseSetTime(v42, (CMTime *)time);
                        if (*((_BYTE *)v24 + 736) && *((double *)v24 + 91) == v41)
                          *((_BYTE *)v24 + 736) = 0;
                      }
                      break;
                    case 5:
                      v35 = re::AudioSourceState::copyTimebaseUserInfo(*((re::AudioSourceState **)v24 + 88));
                      LocalCenter = CFNotificationCenterGetLocalCenter();
                      v37 = (OpaqueCMTimebase *)*((_QWORD *)v24 + 87);
                      v38 = (char *)v24;
                      v39 = v5;
                      goto LABEL_64;
                    case 6:
                      v35 = re::AudioSourceState::copyTimebaseUserInfo(*((re::AudioSourceState **)v24 + 88));
                      LocalCenter = CFNotificationCenterGetLocalCenter();
                      v37 = (OpaqueCMTimebase *)*((_QWORD *)v24 + 87);
                      v38 = (char *)v24;
                      v39 = v45;
LABEL_64:
                      AudioPlayerComponentHandleTimebaseTimeJumpedOrEffectiveRateChanged(LocalCenter, v38, v39, v37, v35);
                      CFRelease(v35);
                      break;
                    default:
                      break;
                  }
                }
                v40 = re::globalAllocators((re *)v22);
                (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v40[2] + 40))(v40[2], v6);
                v47 = 0;
                memset(time, 0, sizeof(time));
                v48 = 0x7FFFFFFFLL;
                v3 = this[41];
                continue;
              }
            }
          }
        }
        v13 = (re *)re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)time, (uint64_t *)v7);
        v14 = re::audioLogObjects(v13);
        if (os_log_type_enabled((os_log_t)*v14, OS_LOG_TYPE_DEBUG))
        {
          snprintf((char *)__str, 0x8DuLL, "AudioPlayerComponent::nextReadyAction() - token %llu not ready for action %d", *((_QWORD *)v6 + 1), *v6);
          std::string::basic_string[abi:nn180100]<0>(__p, (char *)__str);
          v15 = (re *)re::audio::throttledLog(OS_LOG_TYPE_DEBUG, (__int128 *)__p);
          v16 = (int)v15;
          if (v52 < 0)
          {
            operator delete(*(void **)__p);
            if (v16)
            {
LABEL_15:
              v17 = *re::audioLogObjects(v15);
              if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
              {
                v26 = *((_QWORD *)v6 + 1);
                v27 = *v6;
                *(_DWORD *)__p = 134218240;
                *(_QWORD *)&__p[4] = v26;
                v50 = 1024;
                v51 = v27;
                _os_log_debug_impl(&dword_224FE9000, v17, OS_LOG_TYPE_DEBUG, "AudioPlayerComponent::nextReadyAction() - token %llu not ready for action %d", __p, 0x12u);
              }
            }
          }
          else if ((_DWORD)v15)
          {
            goto LABEL_15;
          }
        }
      }
      v3 = (re::ecs2::AudioPlayerComponent *)((char *)v3 + 8);
    }
    while (v3 != this[42]);
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)time);
}

uint64_t re::ecs2::AudioPlayerComponent::completeTimebasePreparation(re::ecs2::AudioPlayerComponent *this, uint64_t a2, re::AudioSourceSyncState *a3, re::TimebaseService *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  CFTypeRef v14;
  re::ecs2::Entity *SceneDataEntity;
  re::AudioFileAsset *v16;
  re::AudioFileAsset *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  void *v23;
  CFTypeRef v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  _BOOL8 v28;
  OpaqueCMClock *v29;
  re *v30;
  NSObject *v31;
  re::ecs2::NetworkComponent *v32;
  NSObject *v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  CFTypeRef cf;
  uint64_t v39;
  uint8_t buf[4];
  uint64_t v41;
  __int16 v42;
  int v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v39 = a2;
  result = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 80, &v39);
  if (result)
  {
    v8 = *((_QWORD *)this + 2);
    if (!v8)
      return 0;
    v9 = *(_QWORD *)result;
    v10 = *((_QWORD *)this + 2);
    do
    {
      v11 = v10;
      v10 = *(_QWORD *)(v10 + 24);
    }
    while (v10);
    v12 = *(_QWORD *)(v11 + 16);
    if (!v12)
      return 0;
    v13 = *(void **)(v9 + 696);
    if (v13)
    {
      v13 = (void *)CFRetain(v13);
      v14 = v13;
    }
    else
    {
      v14 = 0;
    }
    cf = v14;
    if (*(_BYTE *)(v9 + 488) && !*((_QWORD *)a3 + 6) && v14)
    {
      buf[0] = 0;
      SceneDataEntity = makeSceneDataEntity(v12, (uint64_t)buf, 1, re::ecs2::Scene::kSharedSceneDataEntityID, 1);
      v16 = (re::AudioFileAsset *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TimebaseComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      v17 = v16;
      v18 = *(_QWORD *)(v9 + 40);
      if (v18)
      {
        v19 = *(uint64_t **)(v18 + 264);
        v20 = re::AudioFileAsset::assetType(v16);
        if (v19 == v20)
        {
          v21 = (unsigned __int8 *)(re::AssetHandle::loadedAsset<re::AudioFileAsset>((re::AudioSourceSyncState *)((char *)a3 + 8))
                                  + 152);
LABEL_25:
          v28 = *v21 == 0;
          goto LABEL_35;
        }
      }
      else
      {
        v20 = re::AudioFileAsset::assetType(v16);
      }
      v26 = *(_QWORD *)(v9 + 40);
      if (v26)
      {
        v27 = *(uint64_t **)(v26 + 264);
        if (v27 == re::AudioGeneratorAsset::assetType((re::AudioGeneratorAsset *)v20))
        {
          v21 = (unsigned __int8 *)(re::AssetHandle::loadedAsset<re::AudioGeneratorAsset>((re::AudioSourceSyncState *)((char *)a3 + 8))
                                  + 88);
          goto LABEL_25;
        }
      }
      else
      {
        re::AudioGeneratorAsset::assetType((re::AudioGeneratorAsset *)v20);
      }
      v28 = 1;
LABEL_35:
      *((_QWORD *)a3 + 6) = (*(uint64_t (**)(re::TimebaseService *, CFTypeRef, uint64_t, _BOOL8))(*(_QWORD *)a4 + 64))(a4, v14, (uint64_t)v17 + 32, v28);
      v32 = *(re::ecs2::NetworkComponent **)(v8 + 200);
      if (v32)
        re::ecs2::NetworkComponent::markDirty(v32, this);
      goto LABEL_37;
    }
    if (v14)
    {
LABEL_37:
      CFRelease(v14);
      return 1;
    }
    if (*(_QWORD *)a3)
    {
      if (!*((_QWORD *)a3 + 6))
      {
        v33 = *re::audioLogObjects((re *)v13);
        result = os_log_type_enabled(v33, OS_LOG_TYPE_INFO);
        if (!(_DWORD)result)
          return result;
        *(_DWORD *)buf = 134217984;
        v41 = v39;
        _os_log_impl(&dword_224FE9000, v33, OS_LOG_TYPE_INFO, "[RE/ECS] token %llu doesn't have valid timebase ID yet", buf, 0xCu);
        return 0;
      }
      v22 = *(_QWORD *)a4;
      if (*(_BYTE *)(v9 + 488))
      {
        v23 = (void *)(*(uint64_t (**)(re::TimebaseService *))(v22 + 104))(a4);
        v24 = v23;
        v25 = 0;
        cf = v23;
        if (!v23)
          goto LABEL_42;
      }
      else
      {
        v23 = (void *)(*(uint64_t (**)(re::TimebaseService *))(v22 + 96))(a4);
        v24 = v23;
        cf = v23;
        v25 = 1;
        if (!v23)
        {
LABEL_42:
          v34 = (id)*re::audioLogObjects((re *)v23);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
          {
            v35 = *((_QWORD *)a3 + 6);
            v36 = *((_QWORD *)this + 2);
            if (v36)
            {
              v37 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v36 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
              if (v37)
                v36 = *(_QWORD *)(v37 + 32);
              else
                v36 = 0;
            }
            *(_DWORD *)buf = 134218496;
            v41 = v35;
            v42 = 1024;
            v43 = v25;
            v44 = 2048;
            v45 = v36;
            _os_log_error_impl(&dword_224FE9000, v34, OS_LOG_TYPE_ERROR, "[RE/ECS] Timebase %llu (readonly %d) from connection %llu not available", buf, 0x1Cu);
          }

          return 0;
        }
      }
    }
    else
    {
      v29 = re::ecs2::AudioPlayerComponent::copyPreferredMasterClock(this);
      v30 = (re *)CMTimebaseCreateWithSourceClock((CFAllocatorRef)*MEMORY[0x24BDBD240], v29, (CMTimebaseRef *)&cf);
      if ((_DWORD)v30)
      {
        v31 = *re::audioLogObjects(v30);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_224FE9000, v31, OS_LOG_TYPE_ERROR, "[RE/ECS] Failed to create timebase", buf, 2u);
        }
        cf = 0;
      }
      CFRelease(v29);
      v25 = 0;
      v24 = cf;
      if (!cf)
        goto LABEL_42;
    }
    re::AudioSourceState::setTimebase((re::AudioSourceState *)v9, v24, v25, (void (__cdecl *)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))AudioPlayerComponentHandleTimebaseTimeJumpedOrEffectiveRateChanged);
    v14 = cf;
    if (!cf)
      return 1;
    goto LABEL_37;
  }
  return result;
}

void ___ZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS_20AudioSourceSyncStateEPNS_15TimebaseServiceE_block_invoke(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  re *v6;
  re *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::EventBus *v14;
  uint64_t v15;
  void *Type;
  uint64_t v17;
  _BYTE v18[24];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  v8 = a1[4];
  if (v6 && (v9 = *re::audioLogObjects(v6), os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)))
  {
    v17 = a1[5];
    *(_DWORD *)v18 = 134218242;
    *(_QWORD *)&v18[4] = v17;
    *(_WORD *)&v18[12] = 2112;
    *(_QWORD *)&v18[14] = v7;
    _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "[RE/PHASE] Error instantiating audio unit for token %llu: error = %@", v18, 0x16u);
    if (!v8)
      goto LABEL_12;
  }
  else if (!v8)
  {
    goto LABEL_12;
  }
  v10 = *(_QWORD *)(v8 + 16);
  if (v10)
  {
    v11 = *(_QWORD *)(v8 + 16);
    do
    {
      v12 = v11;
      v11 = *(_QWORD *)(v11 + 24);
    }
    while (v11);
    if (*(_QWORD *)(v12 + 16))
    {
      do
      {
        v13 = v10;
        v10 = *(_QWORD *)(v10 + 24);
      }
      while (v10);
      v14 = *(re::EventBus **)(*(_QWORD *)(v13 + 16) + 288);
      if (v14)
      {
        v15 = a1[6];
        if (v15)
        {
          *(_QWORD *)v18 = a1[5];
          *(_QWORD *)&v18[8] = v5;
          *(_QWORD *)&v18[16] = v7;
          Type = re::EventBus::getTypeId<REAudioPlayerDidPrepareAudioUnitEvent>();
          re::EventBus::publish(v14, v15, (uint64_t)Type, (uint64_t)v18, 0x18uLL, 0);
        }
      }
    }
  }
LABEL_12:

}

void ___ZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS_20AudioSourceSyncStateEPNS_15TimebaseServiceE_block_invoke_26(uint64_t a1, void *a2, uint64_t a3)
{
  id WeakRetained;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    v8 = *(_QWORD *)(objc_msgSend(WeakRetained, "state") + 480);
    if (!v8)
    {
      v11 = *re::audioLogObjects(0);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *(_QWORD *)(a1 + 40);
        v12 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 134218240;
        v23 = v12;
        v24 = 2048;
        v25 = v13;
        _os_log_impl(&dword_224FE9000, v11, OS_LOG_TYPE_DEFAULT, "[RE/ECS] [Update] AudioPlayerComponent (entityID=%llu) enqueuing state change callback to be called on ecs tick for token %llu", buf, 0x16u);
      }
      v14 = objc_msgSend(v7, "state");
      v15 = v7;
      v16 = *(_QWORD *)(a1 + 40);
      v17 = operator new(0x28uLL);
      *v17 = &off_24ED5B168;
      v17[1] = v15;
      v17[2] = v16;
      v17[3] = a2;
      v17[4] = a3;
      v21 = v17;
      re::AudioSourceState::enqueuePendingCallback(v14, (uint64_t)v20);
      v18 = v21;
      if (v21 == v20)
      {
        v19 = 4;
        v18 = v20;
      }
      else
      {
        if (!v21)
          goto LABEL_13;
        v19 = 5;
      }
      (*(void (**)(void))(*v18 + 8 * v19))();
      goto LABEL_13;
    }
    re::ecs2::AudioPlayerComponent::playbackStateDidChange(v8, *(_QWORD *)(a1 + 40), a2, a3);
  }
  else
  {
    v9 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 134217984;
      v23 = v10;
      _os_log_impl(&dword_224FE9000, v9, OS_LOG_TYPE_DEFAULT, "[RE/ECS] [Update] SourceState was deallocated. Cannot invoke state change callback for token %llu", buf, 0xCu);
    }
  }
LABEL_13:

}

void re::ecs2::AudioPlayerComponent::setRandomPlaybackPositionForTokenIfAppropriate(re::ecs2::AudioPlayerComponent *this, unint64_t a2)
{
  uint64_t v4;
  re::AssetHandle *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  _BYTE v12[8];
  uint64_t v13;

  v4 = re::ecs2::AudioPlayerComponent::sourceStateForToken(this, a2);
  v5 = re::AssetHandle::AssetHandle((re::AssetHandle *)v12, (const re::AssetHandle *)(v4 + 32));
  if (v13)
  {
    v6 = *(uint64_t **)(v13 + 264);
    if (v6 == re::AudioFileAsset::assetType(v5))
    {
      v7 = re::AssetHandle::loadedAsset<re::AudioFileAsset>((re::AudioFileAsset *)v12);
      if (v7)
      {
        v8 = v7;
        if (*(_BYTE *)(v7 + 101))
        {
          v9 = drand48();
          v10 = (double)*(unint64_t *)(v8 + 136);
          objc_msgSend(*(id *)(*(_QWORD *)(v8 + 8) + 8), "sampleRate");
          re::ecs2::AudioPlayerComponent::setPlaybackPositionFor(this, a2, v9 * (v10 / v11));
        }
      }
    }
  }
  else
  {
    re::AudioFileAsset::assetType(v5);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
}

void ___ZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS_20AudioSourceSyncStateEPNS_15TimebaseServiceE_block_invoke_28(uint64_t a1, void *a2)
{
  re::ecs2::AudioPlayerComponent *v3;
  uint64_t v4;
  re *v5;
  NSObject *v6;
  uint64_t v7;
  id WeakRetained;
  re *v9;
  re::AudioSourceState *v10;
  re::ecs2::AudioPlayerComponent *v11;
  NSError *v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  re::ecs2::AudioPlayerComponent *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _BYTE v24[24];
  _BYTE *v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = (re *)objc_msgSend(*(id *)(a1 + 32), "isCancelled");
  if (!(_DWORD)v5)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    if (!objc_msgSend(WeakRetained, "state"))
    {
      v13 = *re::audioLogObjects(0);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v14 = *(_QWORD *)(a1 + 64);
        *(_DWORD *)buf = 134217984;
        v27 = v14;
        _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "[RE/ECS] [Update] SourceState was deallocated. Cannot invoke state change callback for token %llu", buf, 0xCu);
      }
      goto LABEL_16;
    }
    v9 = (re *)objc_msgSend(WeakRetained, "state");
    v10 = (re::AudioSourceState *)*((_QWORD *)v9 + 60);
    if (v10)
    {
      v11 = (re::ecs2::AudioPlayerComponent *)objc_msgSend(WeakRetained, "state");
      re::ecs2::AudioPlayerComponent::preparationCompleteCallback(v11, v10, v3, v12);
LABEL_16:

      goto LABEL_17;
    }
    v15 = *re::audioLogObjects(v9);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *(_QWORD *)(a1 + 64);
      v16 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)buf = 134218240;
      v27 = v16;
      v28 = 2048;
      v29 = v17;
      _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, "[RE/ECS] [Update] AudioPlayerComponent (entityID=%llu) enqueuing state change callback to be called on ecs tick for token %llu", buf, 0x16u);
    }
    v18 = objc_msgSend(WeakRetained, "state");
    v19 = WeakRetained;
    v20 = v3;
    v21 = operator new(0x20uLL);
    *v21 = &off_24ED5B1E8;
    v21[1] = v4;
    v21[2] = v19;
    v21[3] = v20;
    v25 = v21;
    re::AudioSourceState::enqueuePendingCallback(v18, (uint64_t)v24);
    v22 = v25;
    if (v25 == v24)
    {
      v23 = 4;
      v22 = v24;
    }
    else
    {
      if (!v25)
        goto LABEL_16;
      v23 = 5;
    }
    (*(void (**)(void))(*v22 + 8 * v23))();
    goto LABEL_16;
  }
  v6 = *re::audioLogObjects(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v7 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 134217984;
    v27 = v7;
    _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "[RE/PHASE] REEngine was deallocated. cannot invoke preparation callback for token %llu", buf, 0xCu);
  }
LABEL_17:

}

void re::ecs2::AudioPlayerComponent::setOneShotSound(re::ecs2::AudioPlayerComponent **this, uint64_t a2)
{
  re *canModifyState;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  __int16 v9;
  __int16 v10;
  uint64_t v11;

  canModifyState = (re *)re::ecs2::AudioPlayerComponent::canModifyState(this[2]);
  if ((canModifyState & 1) == 0)
  {
    v6 = *re::audioLogObjects(canModifyState);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      return;
    v10 = 0;
    v7 = "AudioPlayerComponent cannot modify state because it is not owned.";
    v8 = (uint8_t *)&v10;
LABEL_9:
    _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
    return;
  }
  v11 = a2;
  v5 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)(this + 4), &v11);
  if (v5)
  {
    *(_BYTE *)(v5 + 76) = 1;
    return;
  }
  v6 = *re::audioLogObjects(0);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v9 = 0;
    v7 = "AudioPlayerComponent cannot access sync state for unknown playback token.";
    v8 = (uint8_t *)&v9;
    goto LABEL_9;
  }
}

void re::ecs2::AudioPlayerComponent::destroy(re::ecs2::AudioPlayerComponent **this, unint64_t a2)
{
  re *canModifyState;
  uint64_t v5;
  unint64_t v6;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  re::ecs2::AudioPlayerComponent *v12;
  uint64_t v13;
  re::ecs2::AudioPlayerComponent *v14;
  NSObject *v15;
  re::ecs2::AudioPlayerComponent *v16;
  unsigned int v17;
  int v18;
  int v19;
  re::ecs2::AudioPlayerComponent *v20;
  uint64_t v21;
  const re::ecs2::Component *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int *v32;
  int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int *v46;
  int v47;
  int v48;
  re::ecs2::NetworkComponent *v49;
  _BYTE v50[12];
  __int16 v51;
  unint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  canModifyState = (re *)re::ecs2::AudioPlayerComponent::canModifyState(this[2]);
  if ((canModifyState & 1) != 0)
  {
    *(_QWORD *)v50 = a2;
    v5 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)(this + 4), (uint64_t *)v50);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 232);
      if (!((v6 & 1) != 0 ? v6 >> 1 : v6 >> 1))
      {
        v8 = (unsigned int *)this + 81;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
      }
    }
    if (this[4])
    {
      v10 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
      v11 = (v10 ^ (v10 >> 31)) % *((unsigned int *)this + 14);
      v12 = this[5];
      v13 = *((unsigned int *)v12 + v11);
      if ((_DWORD)v13 != 0x7FFFFFFF)
      {
        v14 = this[6];
        if (*((_QWORD *)v14 + 36 * v13 + 2) == a2)
        {
          *((_DWORD *)v12 + v11) = *((_DWORD *)v14 + 72 * v13 + 2) & 0x7FFFFFFF;
LABEL_20:
          re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free((uint64_t)this[6] + 288 * v13);
          *((_DWORD *)this[6] + 72 * v13 + 2) = *((_DWORD *)this[6] + 72 * v13 + 2) & 0x80000000 | *((_DWORD *)this + 17);
          --*((_DWORD *)this + 15);
          v19 = *((_DWORD *)this + 18) + 1;
          *((_DWORD *)this + 17) = v13;
          *((_DWORD *)this + 18) = v19;
        }
        else
        {
          while (1)
          {
            v17 = v13;
            v18 = *((_DWORD *)v14 + 72 * v13 + 2);
            v13 = v18 & 0x7FFFFFFF;
            if ((v18 & 0x7FFFFFFF) == 0x7FFFFFFF)
              break;
            if (*((_QWORD *)v14 + 36 * v13 + 2) == a2)
            {
              *((_DWORD *)v14 + 72 * v17 + 2) = *((_DWORD *)v14 + 72 * v17 + 2) & 0x80000000 | *((_DWORD *)v14
                                                                                               + 72 * v13
                                                                                               + 2) & 0x7FFFFFFF;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v20 = this[2];
    if (v20)
    {
      v21 = re::ecs2::EntityComponentCollection::get((re::ecs2::AudioPlayerComponent *)((char *)v20 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
      if (v21)
      {
        v22 = (const re::ecs2::Component *)v21;
        if (*(_QWORD *)(v21 + 88))
        {
          v23 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
          v24 = (v23 ^ (v23 >> 31)) % *(unsigned int *)(v21 + 112);
          v25 = *(_QWORD *)(v21 + 96);
          v26 = *(unsigned int *)(v25 + 4 * v24);
          if ((_DWORD)v26 != 0x7FFFFFFF)
          {
            v27 = *(_QWORD *)(v21 + 104);
            if (*(_QWORD *)(v27 + 48 * v26 + 16) == a2)
            {
              *(_DWORD *)(v25 + 4 * v24) = *(_DWORD *)(v27 + 48 * v26 + 8) & 0x7FFFFFFF;
LABEL_30:
              v29 = *(_QWORD *)(v21 + 104);
              v30 = v29 + 48 * v26;
              v33 = *(_DWORD *)(v30 + 8);
              v32 = (int *)(v30 + 8);
              v31 = v33;
              if (v33 < 0)
              {
                *v32 = v31 & 0x7FFFFFFF;
                v29 = *(_QWORD *)(v21 + 104);
                v31 = *(_DWORD *)(v29 + 48 * v26 + 8);
              }
              *(_DWORD *)(v29 + 48 * v26 + 8) = *(_DWORD *)(v21 + 124) | v31 & 0x80000000;
              --*(_DWORD *)(v21 + 116);
              v34 = *(_DWORD *)(v21 + 128) + 1;
              *(_DWORD *)(v21 + 124) = v26;
              *(_DWORD *)(v21 + 128) = v34;
            }
            else
            {
              while (1)
              {
                v28 = v26;
                LODWORD(v26) = *(_DWORD *)(v27 + 48 * v26 + 8) & 0x7FFFFFFF;
                if ((_DWORD)v26 == 0x7FFFFFFF)
                  break;
                if (*(_QWORD *)(v27 + 48 * v26 + 16) == a2)
                {
                  *(_DWORD *)(v27 + 48 * v28 + 8) = *(_DWORD *)(v27 + 48 * v28 + 8) & 0x80000000 | *(_DWORD *)(v27 + 48 * v26 + 8) & 0x7FFFFFFF;
                  goto LABEL_30;
                }
              }
            }
          }
        }
        if (*(_QWORD *)(v21 + 40))
        {
          v35 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
          v36 = (v35 ^ (v35 >> 31)) % *(unsigned int *)(v21 + 64);
          v37 = *(_QWORD *)(v21 + 48);
          v38 = *(unsigned int *)(v37 + 4 * v36);
          if ((_DWORD)v38 != 0x7FFFFFFF)
          {
            v39 = *(_QWORD *)(v21 + 56);
            v40 = v39 + 32 * v38;
            if (*(_QWORD *)(v40 + 16) == a2)
            {
              *(_DWORD *)(v37 + 4 * v36) = *(_DWORD *)(v40 + 8) & 0x7FFFFFFF;
LABEL_40:
              v43 = *(_QWORD *)(v21 + 56);
              v44 = v43 + 32 * v38;
              v47 = *(_DWORD *)(v44 + 8);
              v46 = (int *)(v44 + 8);
              v45 = v47;
              if (v47 < 0)
              {
                *v46 = v45 & 0x7FFFFFFF;
                v43 = *(_QWORD *)(v21 + 56);
                v45 = *(_DWORD *)(v43 + 32 * v38 + 8);
              }
              *(_DWORD *)(v43 + 32 * v38 + 8) = *(_DWORD *)(v21 + 76) | v45 & 0x80000000;
              --*(_DWORD *)(v21 + 68);
              v48 = *(_DWORD *)(v21 + 80) + 1;
              *(_DWORD *)(v21 + 76) = v38;
              *(_DWORD *)(v21 + 80) = v48;
            }
            else
            {
              while (1)
              {
                v41 = v38;
                v38 = *(_DWORD *)(v39 + 32 * v38 + 8) & 0x7FFFFFFF;
                if ((_DWORD)v38 == 0x7FFFFFFF)
                  break;
                v42 = v39 + 32 * v38;
                if (*(_QWORD *)(v42 + 16) == a2)
                {
                  *(_DWORD *)(v39 + 32 * v41 + 8) = *(_DWORD *)(v39 + 32 * v41 + 8) & 0x80000000 | *(_DWORD *)(v42 + 8) & 0x7FFFFFFF;
                  goto LABEL_40;
                }
              }
            }
          }
        }
        v49 = (re::ecs2::NetworkComponent *)*((_QWORD *)this[2] + 25);
        if (v49)
          re::ecs2::NetworkComponent::markDirty(v49, v22);
      }
    }
  }
  else
  {
    v15 = *re::audioLogObjects(canModifyState);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = this[38];
      if (!v16)
        v16 = this[44];
      *(_DWORD *)v50 = 134218240;
      *(_QWORD *)&v50[4] = v16;
      v51 = 2048;
      v52 = a2;
      _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "AudioPlayerComponent (entityID=%llu) cannot modify state for token %llu because it is not owned.", v50, 0x16u);
    }
  }
}

void re::ecs2::AudioPlayerComponent::play(uint64_t a1, unint64_t a2, int a3)
{
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  re::AudioFileAsset *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint32_t v18;
  re::ecs2::AudioPlayerTelemetryReporter *v19;
  re::ecs2::AudioPlayerTelemetryReporter *v20;
  uint64_t v21;
  uint64_t v22;
  re::ecs2::AudioPlayerTelemetryReporter *v23;
  re::ecs2::AudioPlayerTelemetryReporter *v24;
  uint64_t Instance;
  int v26;
  uint64_t v27;
  re::ecs2::AudioPlayerTelemetryReporter *v28;
  re::ecs2::AudioPlayerTelemetryReporter *v29;
  re *canModifyState;
  re::ecs2::NetworkComponent *v31;
  re::ecs2::NetworkComponent *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  int64_t v80;
  void *v81;
  unint64_t v82;
  _BYTE block[24];
  void *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v6 = (unsigned int *)(a1 + 312);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v82 = a2;
  *(_QWORD *)block = a2;
  v8 = (_QWORD *)re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 32, (uint64_t *)block);
  if (!v8)
    goto LABEL_21;
  v9 = v8;
  v10 = (re::AudioFileAsset *)(v8 + 1);
  v11 = v8[2];
  if (v11)
  {
    v12 = *(uint64_t **)(v11 + 264);
    v13 = re::AudioFileAsset::assetType((re::AudioFileAsset *)v8);
    if (v12 != v13)
      goto LABEL_6;
    v28 = (re::ecs2::AudioPlayerTelemetryReporter *)re::AssetHandle::loadedAsset<re::AudioFileAsset>(v10);
    if (!v28)
      goto LABEL_21;
    v29 = v28;
    Instance = re::ecs2::AudioPlayerTelemetryReporter::getInstance(v28);
    v26 = *((_DWORD *)v29 + 27);
    v27 = *((_QWORD *)v29 + 14);
LABEL_19:
    *(_QWORD *)block = MEMORY[0x24BDAC760];
    *(_QWORD *)&block[8] = 3221225472;
    *(_QWORD *)&block[16] = ___ZN2re4ecs228AudioPlayerTelemetryReporter31updateCalibrationModeStatisticsE22REAudioCalibrationModed_block_invoke;
    v84 = &__block_descriptor_52_e5_v8__0l;
    v85 = Instance;
    v87 = v26;
    v86 = v27;
    dispatch_async((dispatch_queue_t)re::ecs2::AudioPlayerTelemetryReporter::m_playerQueue, block);
    goto LABEL_21;
  }
  if (v8[26] || v8[27])
  {
    v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(_QWORD *)(a1 + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
    if (!v22)
      goto LABEL_21;
    v23 = (re::ecs2::AudioPlayerTelemetryReporter *)re::HashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v22 + 88, (uint64_t *)&v82);
    if (!v23)
      goto LABEL_21;
    v24 = v23;
    Instance = re::ecs2::AudioPlayerTelemetryReporter::getInstance(v23);
    v26 = *((_DWORD *)v24 + 1);
    v27 = *((_QWORD *)v24 + 1);
    goto LABEL_19;
  }
  v13 = re::AudioFileAsset::assetType((re::AudioFileAsset *)v8);
LABEL_6:
  v14 = v9[2];
  if (v14)
  {
    v15 = *(uint64_t **)(v14 + 264);
    if (v15 == re::AudioFileGroupAsset::assetType((re::AudioFileGroupAsset *)v13))
    {
      v16 = re::AssetHandle::loadedAsset<re::AudioFileGroupAsset>(v10);
      if (v16)
      {
        v17 = v16;
        v18 = arc4random_uniform(*(_DWORD *)(v16 + 24));
        if (*(_QWORD *)(v17 + 24) > (unint64_t)v18)
        {
          v19 = (re::ecs2::AudioPlayerTelemetryReporter *)re::AssetHandle::loadedAsset<re::AudioFileAsset>((re::AudioFileAsset *)(*(_QWORD *)(v17 + 40) + 24 * v18));
          if (v19)
          {
            v20 = v19;
            v21 = re::ecs2::AudioPlayerTelemetryReporter::getInstance(v19);
            re::ecs2::AudioPlayerTelemetryReporter::updateCalibrationModeStatistics(v21, *((_DWORD *)v20 + 27), *((double *)v20 + 14));
          }
        }
      }
    }
  }
  else
  {
    re::AudioFileGroupAsset::assetType((re::AudioFileGroupAsset *)v13);
  }
LABEL_21:
  canModifyState = (re *)re::ecs2::AudioPlayerComponent::canModifyState(*(re::ecs2::AudioPlayerComponent **)(a1 + 16));
  if ((canModifyState & 1) == 0)
  {
    v36 = *re::audioLogObjects(canModifyState);
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      return;
    v37 = *(_QWORD *)(a1 + 304);
    if (!v37)
      v37 = *(_QWORD *)(a1 + 352);
    *(_DWORD *)block = 134218240;
    *(_QWORD *)&block[4] = v37;
    *(_WORD *)&block[12] = 2048;
    *(_QWORD *)&block[14] = a2;
    v38 = "AudioPlayerComponent (entityID=%llu) cannot modify state for token %llu because it is not owned.";
    goto LABEL_39;
  }
  v31 = re::ecs2::AudioPlayerComponent::sourceStateForToken((re::ecs2::AudioPlayerComponent *)a1, a2);
  if (!v31)
  {
    v36 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      return;
    v39 = *(_QWORD *)(a1 + 304);
    if (!v39)
      v39 = *(_QWORD *)(a1 + 352);
    *(_DWORD *)block = 134218240;
    *(_QWORD *)&block[4] = v39;
    *(_WORD *)&block[12] = 2048;
    *(_QWORD *)&block[14] = a2;
    v38 = "AudioPlayerComponent (entityID=%llu) cannot access state for unknown playback token %llu.";
    goto LABEL_39;
  }
  v32 = v31;
  *(_QWORD *)block = a2;
  v33 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 32, (uint64_t *)block);
  if (!v33)
  {
    v36 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      return;
    v40 = *(_QWORD *)(a1 + 304);
    if (!v40)
      v40 = *(_QWORD *)(a1 + 352);
    *(_DWORD *)block = 134218240;
    *(_QWORD *)&block[4] = v40;
    *(_WORD *)&block[12] = 2048;
    *(_QWORD *)&block[14] = a2;
    v38 = "AudioPlayerComponent (entityID=%llu) cannot access sync state for unknown playback token %llu.";
LABEL_39:
    _os_log_error_impl(&dword_224FE9000, v36, OS_LOG_TYPE_ERROR, v38, block, 0x16u);
    return;
  }
  if (*((_BYTE *)v32 + 720))
    return;
  v34 = v33;
  v35 = re::internal::enableSignposts(0, 0);
  if ((_DWORD)v35)
  {
    re::AssetHandle::assetInfo((re::AssetHandle *)(v34 + 8));
    v35 = kdebug_trace();
  }
  *((_DWORD *)v32 + 181) = 2;
  v41 = re::globalAllocators((re *)v35);
  v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v41[2] + 32))(v41[2], 32, 8);
  v43 = v42;
  *(_OWORD *)v42 = 0u;
  *(_OWORD *)(v42 + 16) = 0u;
  *(_QWORD *)block = v42;
  *(_QWORD *)(v42 + 8) = a2;
  if (a3 == 1)
  {
    v45 = *(uint64_t **)(a1 + 336);
    v51 = *(_QWORD *)(a1 + 344);
    if ((unint64_t)v45 < v51)
    {
LABEL_49:
      *v45 = v42;
      v52 = v45 + 1;
LABEL_79:
      *(_QWORD *)(a1 + 336) = v52;
      return;
    }
    v60 = *(_QWORD *)(a1 + 328);
    v61 = ((uint64_t)v45 - v60) >> 3;
    if (!((unint64_t)(v61 + 1) >> 61))
    {
      v62 = v51 - v60;
      v63 = v62 >> 2;
      if (v62 >> 2 <= (unint64_t)(v61 + 1))
        v63 = v61 + 1;
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
        v64 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v64 = v63;
      if (v64)
        v64 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v64);
      else
        v65 = 0;
      v68 = (uint64_t *)(v64 + 8 * v61);
      v69 = v64 + 8 * v65;
      *v68 = v43;
      v52 = v68 + 1;
      v71 = *(char **)(a1 + 328);
      v70 = *(char **)(a1 + 336);
      if (v70 != v71)
      {
        do
        {
          v72 = *((_QWORD *)v70 - 1);
          v70 -= 8;
          *--v68 = v72;
        }
        while (v70 != v71);
        v70 = *(char **)(a1 + 328);
      }
      *(_QWORD *)(a1 + 328) = v68;
      *(_QWORD *)(a1 + 336) = v52;
      *(_QWORD *)(a1 + 344) = v69;
      if (v70)
        operator delete(v70);
      goto LABEL_79;
    }
LABEL_91:
    abort();
  }
  if (a3)
    return;
  v45 = *(uint64_t **)(a1 + 328);
  v44 = *(uint64_t **)(a1 + 336);
  v46 = *(_QWORD *)(a1 + 344);
  if ((unint64_t)v44 < v46)
  {
    if (v45 != v44)
    {
      v47 = (char *)(v45 + 1);
      v48 = v44 - 1;
      v49 = *(_QWORD **)(a1 + 336);
      while (v48 < v44)
      {
        v50 = *v48++;
        *v49++ = v50;
      }
      *(_QWORD *)(a1 + 336) = v49;
      if (v44 != (uint64_t *)v47)
        memmove(&v44[-(((char *)v44 - v47) >> 3)], v45, (char *)v44 - v47);
      v66 = *(_QWORD *)block;
      if (v45 > (uint64_t *)block)
        v66 = v43;
      *v45 = v66;
      return;
    }
    goto LABEL_49;
  }
  v53 = v44 - v45 + 1;
  if (v53 >> 61)
    goto LABEL_91;
  v54 = v46 - (_QWORD)v45;
  if (v54 >> 2 > v53)
    v53 = v54 >> 2;
  if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
    v55 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v55 = v53;
  if (v55)
  {
    v56 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v55);
    v58 = v56;
    if (v57)
    {
      v59 = &v56[8 * v57];
    }
    else
    {
      v73 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(1uLL);
      v59 = &v73[8 * v74];
      if (v58)
        operator delete(v58);
      v58 = v73;
    }
  }
  else
  {
    v58 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(1uLL);
    v59 = &v58[8 * v67];
  }
  *(_QWORD *)v58 = v43;
  v75 = v58 + 8;
  v76 = *(uint64_t **)(a1 + 328);
  if (v76 != v45)
  {
    v77 = v45;
    do
    {
      v78 = *--v77;
      *((_QWORD *)v58 - 1) = v78;
      v58 -= 8;
    }
    while (v77 != v76);
  }
  v79 = *(uint64_t **)(a1 + 336);
  v80 = (char *)v79 - (char *)v45;
  if (v79 != v45)
    memmove(v75, v45, (char *)v79 - (char *)v45);
  v81 = *(void **)(a1 + 328);
  *(_QWORD *)(a1 + 328) = v58;
  *(_QWORD *)(a1 + 336) = &v75[v80];
  *(_QWORD *)(a1 + 344) = v59;
  if (v81)
    operator delete(v81);
}

void re::ecs2::AudioPlayerComponent::stop(re::ecs2::AudioPlayerComponent **this, unint64_t a2)
{
  re *canModifyState;
  re::ecs2::NetworkComponent *v5;
  re::ecs2::NetworkComponent *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  re::ecs2::AudioPlayerComponent *v11;
  const char *v12;
  re::ecs2::AudioPlayerComponent *v13;
  re::ecs2::AudioPlayerComponent *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  re::ecs2::AudioPlayerComponent *v18;
  uint64_t *v19;
  re::ecs2::AudioPlayerComponent *v20;
  re::ecs2::AudioPlayerComponent *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  re::ecs2::AudioPlayerComponent *v27;
  re::ecs2::AudioPlayerComponent *v28;
  re::ecs2::AudioPlayerComponent *v29;
  re::ecs2::AudioPlayerComponent *v30;
  uint64_t v31;
  _BYTE v32[12];
  __int16 v33;
  unint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  canModifyState = (re *)re::ecs2::AudioPlayerComponent::canModifyState(this[2]);
  if ((canModifyState & 1) == 0)
  {
    v10 = *re::audioLogObjects(canModifyState);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      return;
    v11 = this[38];
    if (!v11)
      v11 = this[44];
    *(_DWORD *)v32 = 134218240;
    *(_QWORD *)&v32[4] = v11;
    v33 = 2048;
    v34 = a2;
    v12 = "AudioPlayerComponent (entityID=%llu) cannot modify state for token %llu because it is not owned.";
    goto LABEL_19;
  }
  v5 = re::ecs2::AudioPlayerComponent::sourceStateForToken((re::ecs2::AudioPlayerComponent *)this, a2);
  if (!v5)
  {
    v10 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      return;
    v13 = this[38];
    if (!v13)
      v13 = this[44];
    *(_DWORD *)v32 = 134218240;
    *(_QWORD *)&v32[4] = v13;
    v33 = 2048;
    v34 = a2;
    v12 = "AudioPlayerComponent (entityID=%llu) cannot access state for unknown playback token %llu.";
    goto LABEL_19;
  }
  v6 = v5;
  *(_QWORD *)v32 = a2;
  v7 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)(this + 4), (uint64_t *)v32);
  if (!v7)
  {
    v10 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      return;
    v14 = this[38];
    if (!v14)
      v14 = this[44];
    *(_DWORD *)v32 = 134218240;
    *(_QWORD *)&v32[4] = v14;
    v33 = 2048;
    v34 = a2;
    v12 = "AudioPlayerComponent (entityID=%llu) cannot access sync state for unknown playback token %llu.";
LABEL_19:
    _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, v12, v32, 0x16u);
    return;
  }
  if (!*((_BYTE *)v6 + 720))
  {
    v8 = v7;
    v9 = re::internal::enableSignposts(0, 0);
    if ((_DWORD)v9)
    {
      re::AssetHandle::assetInfo((re::AssetHandle *)(v8 + 8));
      v9 = kdebug_trace();
    }
    *((_DWORD *)v6 + 181) = 3;
    v15 = re::globalAllocators((re *)v9);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 32, 8);
    v17 = v16;
    *(_OWORD *)v16 = 0u;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_DWORD *)v16 = 2;
    *(_QWORD *)(v16 + 8) = a2;
    v19 = (uint64_t *)this[42];
    v18 = this[43];
    if (v19 >= (uint64_t *)v18)
    {
      v21 = this[41];
      v22 = ((char *)v19 - (char *)v21) >> 3;
      if ((unint64_t)(v22 + 1) >> 61)
        abort();
      v23 = v18 - v21;
      v24 = v23 >> 2;
      if (v23 >> 2 <= (unint64_t)(v22 + 1))
        v24 = v22 + 1;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
        v25 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      if (v25)
        v25 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v25);
      else
        v26 = 0;
      v27 = (re::ecs2::AudioPlayerComponent *)(v25 + 8 * v22);
      v28 = (re::ecs2::AudioPlayerComponent *)(v25 + 8 * v26);
      *(_QWORD *)v27 = v17;
      v20 = (re::ecs2::AudioPlayerComponent *)((char *)v27 + 8);
      v30 = this[41];
      v29 = this[42];
      if (v29 != v30)
      {
        do
        {
          v31 = *((_QWORD *)v29 - 1);
          v29 = (re::ecs2::AudioPlayerComponent *)((char *)v29 - 8);
          *((_QWORD *)v27 - 1) = v31;
          v27 = (re::ecs2::AudioPlayerComponent *)((char *)v27 - 8);
        }
        while (v29 != v30);
        v29 = this[41];
      }
      this[41] = v27;
      this[42] = v20;
      this[43] = v28;
      if (v29)
        operator delete(v29);
    }
    else
    {
      *v19 = v16;
      v20 = (re::ecs2::AudioPlayerComponent *)(v19 + 1);
    }
    this[42] = v20;
  }
}

void re::ecs2::AudioPlayerComponent::pause(re::ecs2::AudioPlayerComponent **this, unint64_t a2)
{
  re *canModifyState;
  re::ecs2::NetworkComponent *v5;
  re::ecs2::NetworkComponent *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  re::ecs2::AudioPlayerComponent *v11;
  const char *v12;
  re::ecs2::AudioPlayerComponent *v13;
  re::ecs2::AudioPlayerComponent *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  re::ecs2::AudioPlayerComponent *v18;
  uint64_t *v19;
  re::ecs2::AudioPlayerComponent *v20;
  re::ecs2::AudioPlayerComponent *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  re::ecs2::AudioPlayerComponent *v27;
  re::ecs2::AudioPlayerComponent *v28;
  re::ecs2::AudioPlayerComponent *v29;
  re::ecs2::AudioPlayerComponent *v30;
  uint64_t v31;
  _BYTE v32[12];
  __int16 v33;
  unint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  canModifyState = (re *)re::ecs2::AudioPlayerComponent::canModifyState(this[2]);
  if ((canModifyState & 1) == 0)
  {
    v10 = *re::audioLogObjects(canModifyState);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      return;
    v11 = this[38];
    if (!v11)
      v11 = this[44];
    *(_DWORD *)v32 = 134218240;
    *(_QWORD *)&v32[4] = v11;
    v33 = 2048;
    v34 = a2;
    v12 = "AudioPlayerComponent (entityID=%llu) cannot modify state for token %llu because it is not owned.";
    goto LABEL_19;
  }
  v5 = re::ecs2::AudioPlayerComponent::sourceStateForToken((re::ecs2::AudioPlayerComponent *)this, a2);
  if (!v5)
  {
    v10 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      return;
    v13 = this[38];
    if (!v13)
      v13 = this[44];
    *(_DWORD *)v32 = 134218240;
    *(_QWORD *)&v32[4] = v13;
    v33 = 2048;
    v34 = a2;
    v12 = "AudioPlayerComponent (entityID=%llu) cannot access state for unknown playback token %llu.";
    goto LABEL_19;
  }
  v6 = v5;
  *(_QWORD *)v32 = a2;
  v7 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)(this + 4), (uint64_t *)v32);
  if (!v7)
  {
    v10 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      return;
    v14 = this[38];
    if (!v14)
      v14 = this[44];
    *(_DWORD *)v32 = 134218240;
    *(_QWORD *)&v32[4] = v14;
    v33 = 2048;
    v34 = a2;
    v12 = "AudioPlayerComponent (entityID=%llu) cannot access sync state for unknown playback token %llu.";
LABEL_19:
    _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, v12, v32, 0x16u);
    return;
  }
  if (!*((_BYTE *)v6 + 720))
  {
    v8 = v7;
    v9 = re::internal::enableSignposts(0, 0);
    if ((_DWORD)v9)
    {
      re::AssetHandle::assetInfo((re::AssetHandle *)(v8 + 8));
      v9 = kdebug_trace();
    }
    *((_DWORD *)v6 + 181) = 1;
    v15 = re::globalAllocators((re *)v9);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 32, 8);
    v17 = v16;
    *(_OWORD *)v16 = 0u;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = a2;
    v19 = (uint64_t *)this[42];
    v18 = this[43];
    if (v19 >= (uint64_t *)v18)
    {
      v21 = this[41];
      v22 = ((char *)v19 - (char *)v21) >> 3;
      if ((unint64_t)(v22 + 1) >> 61)
        abort();
      v23 = v18 - v21;
      v24 = v23 >> 2;
      if (v23 >> 2 <= (unint64_t)(v22 + 1))
        v24 = v22 + 1;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
        v25 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      if (v25)
        v25 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v25);
      else
        v26 = 0;
      v27 = (re::ecs2::AudioPlayerComponent *)(v25 + 8 * v22);
      v28 = (re::ecs2::AudioPlayerComponent *)(v25 + 8 * v26);
      *(_QWORD *)v27 = v17;
      v20 = (re::ecs2::AudioPlayerComponent *)((char *)v27 + 8);
      v30 = this[41];
      v29 = this[42];
      if (v29 != v30)
      {
        do
        {
          v31 = *((_QWORD *)v29 - 1);
          v29 = (re::ecs2::AudioPlayerComponent *)((char *)v29 - 8);
          *((_QWORD *)v27 - 1) = v31;
          v27 = (re::ecs2::AudioPlayerComponent *)((char *)v27 - 8);
        }
        while (v29 != v30);
        v29 = this[41];
      }
      this[41] = v27;
      this[42] = v20;
      this[43] = v28;
      if (v29)
        operator delete(v29);
    }
    else
    {
      *v19 = v16;
      v20 = (re::ecs2::AudioPlayerComponent *)(v19 + 1);
    }
    this[42] = v20;
  }
}

void re::ecs2::AudioPlayerComponent::doPlay(re::ecs2::AudioPlayerComponent *this, CMTimeValue a2, re::AudioSourceState *a3, re::AudioSourceSyncState *a4)
{
  OpaqueCMTimebase *v8;
  re *v9;
  NSObject *v10;
  CMClockOrTimebaseRef v11;
  CFTypeID v12;
  CFTypeID TypeID;
  uint64_t v14;
  double v15;
  uint64_t v16;
  unsigned int v17;
  re::AssetHandle *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  double v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  const re::AssetHandle *v29;
  re::AssetHandle *v30;
  uint64_t *v31;
  int v32;
  NSObject *v33;
  _BOOL4 v34;
  CMTimeValue v35;
  NSObject *v36;
  _QWORD *v37;
  char *v38;
  const char *v39;
  CMTimeValue v40;
  _QWORD *v41;
  char *v42;
  int v43;
  NSObject *v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  const char *v54;
  _QWORD *v55;
  char *v56;
  double Rate;
  double v58;
  CMTime v59;
  CMTime lhs;
  CMTime time;
  CMTime v62;
  CMTime buf;
  double v64;
  __int16 v65;
  char *v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a3 + 720))
    return;
  v8 = (OpaqueCMTimebase *)*((_QWORD *)a3 + 87);
  if (CMTimebaseGetRate(v8) != 0.0)
  {
    v10 = *re::audioLogObjects(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.value) = 134217984;
      *(CMTimeValue *)((char *)&buf.value + 4) = a2;
      _os_log_impl(&dword_224FE9000, v10, OS_LOG_TYPE_DEFAULT, "token %llu is already playing", (uint8_t *)&buf, 0xCu);
    }
    return;
  }
  v11 = CMTimebaseCopySource(v8);
  v12 = CFGetTypeID(v11);
  TypeID = CMTimebaseGetTypeID();
  CFRelease(v11);
  v15 = 0.0;
  if (v12 != TypeID)
  {
    v16 = *((_QWORD *)a3 + 5);
    if (v16)
    {
      v17 = atomic_load((unsigned int *)(v16 + 704));
      if (v17 == 2)
      {
        v18 = (re::AudioSourceState *)((char *)a3 + 32);
        v19 = *((_QWORD *)a3 + 5);
        if (v19)
        {
          v20 = *(uint64_t **)(v19 + 264);
          v21 = re::AudioFileAsset::assetType((re::AudioFileAsset *)v14);
          if (v20 == v21)
          {
            v14 = re::AssetHandle::loadedAsset<re::AudioFileAsset>((re::AudioSourceState *)((char *)a3 + 32));
            v22 = *(double *)(v14 + 144);
LABEL_42:
            if (v22 >= 0.0)
            {
              v15 = v22;
              if (v22 > 0.5)
                v15 = 0.5;
            }
            goto LABEL_45;
          }
        }
        else
        {
          v21 = re::AudioFileAsset::assetType((re::AudioFileAsset *)v14);
        }
        v23 = *((_QWORD *)a3 + 5);
        if (v23)
        {
          v24 = *(uint64_t **)(v23 + 264);
          v25 = re::AudioGeneratorAsset::assetType((re::AudioGeneratorAsset *)v21);
          if (v24 == v25)
          {
            v14 = re::AssetHandle::loadedAsset<re::AudioGeneratorAsset>((re::AudioSourceState *)((char *)a3 + 32));
            v22 = *(double *)(v14 + 96);
            goto LABEL_42;
          }
        }
        else
        {
          v25 = re::AudioGeneratorAsset::assetType((re::AudioGeneratorAsset *)v21);
        }
        v26 = *((_QWORD *)a3 + 5);
        if (v26)
        {
          v27 = *(uint64_t **)(v26 + 264);
          v28 = re::AudioFileGroupAsset::assetType((re::AudioFileGroupAsset *)v25);
          if (v27 == v28)
          {
            v14 = re::AssetHandle::loadedAsset<re::AudioFileGroupAsset>((re::AudioSourceState *)((char *)a3 + 32));
            if (!*(_QWORD *)(v14 + 24))
              goto LABEL_45;
            v29 = (const re::AssetHandle *)re::DynamicArray<re::AssetHandle>::operator[](v14 + 8, 0);
            v30 = re::AssetHandle::AssetHandle((re::AssetHandle *)&buf, v29);
            if (*(_QWORD *)&buf.timescale)
            {
              v31 = *(uint64_t **)(*(_QWORD *)&buf.timescale + 264);
              v22 = 0.0;
              if (v31 == re::AudioFileAsset::assetType(v30))
                v22 = *(double *)(re::AssetHandle::loadedAsset<re::AudioFileAsset>((re::AudioFileAsset *)&buf) + 144);
            }
            else
            {
              re::AudioFileAsset::assetType(v30);
              v22 = 0.0;
            }
            re::AssetHandle::~AssetHandle((re::AssetHandle *)&buf);
            goto LABEL_42;
          }
        }
        else
        {
          v28 = re::AudioFileGroupAsset::assetType((re::AudioFileGroupAsset *)v25);
        }
        v32 = *((unsigned __int8 *)a3 + 281);
        v33 = *re::audioLogObjects((re *)v28);
        v34 = os_log_type_enabled(v33, OS_LOG_TYPE_ERROR);
        if (v32)
        {
          if (!v34)
            return;
          v35 = *((_QWORD *)this + 38);
          if (!v35)
            v35 = *((_QWORD *)this + 44);
          v36 = v33;
          v37 = re::AssetHandle::assetInfo(v18);
          if ((v37[17] & 1) != 0)
            v38 = (char *)v37[18];
          else
            v38 = (char *)v37 + 137;
          LODWORD(buf.value) = 134218499;
          *(CMTimeValue *)((char *)&buf.value + 4) = v35;
          LOWORD(buf.flags) = 2048;
          *(_QWORD *)((char *)&buf.flags + 2) = a2;
          HIWORD(buf.epoch) = 2085;
          v64 = *(double *)&v38;
          v39 = "AudioPlayerComponent (entityID=%llu) token %llu cannot play unknown asset type '%{sensitive}s'.";
        }
        else
        {
          if (!v34)
            return;
          v40 = *((_QWORD *)this + 38);
          if (!v40)
            v40 = *((_QWORD *)this + 44);
          v36 = v33;
          v41 = re::AssetHandle::assetInfo(v18);
          if ((v41[17] & 1) != 0)
            v42 = (char *)v41[18];
          else
            v42 = (char *)v41 + 137;
          LODWORD(buf.value) = 134218498;
          *(CMTimeValue *)((char *)&buf.value + 4) = v40;
          LOWORD(buf.flags) = 2048;
          *(_QWORD *)((char *)&buf.flags + 2) = a2;
          HIWORD(buf.epoch) = 2080;
          v64 = *(double *)&v42;
          v39 = "AudioPlayerComponent (entityID=%llu) token %llu cannot play unknown asset type '%s'.";
        }
        _os_log_error_impl(&dword_224FE9000, v36, OS_LOG_TYPE_ERROR, v39, (uint8_t *)&buf, 0x20u);

        return;
      }
    }
  }
LABEL_45:
  v43 = *((unsigned __int8 *)a3 + 281);
  v44 = (id)*re::audioLogObjects((re *)v14);
  v45 = os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);
  if (v43)
  {
    if (v45)
    {
      v46 = *((_QWORD *)this + 2);
      if (v46
        && (v47 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v46 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType)) != 0)
      {
        v48 = *(_QWORD *)(v47 + 32);
      }
      else
      {
        v48 = 0;
      }
      v52 = re::AssetHandle::assetInfo((re::AudioSourceState *)((char *)a3 + 32));
      if ((v52[17] & 1) != 0)
        v53 = (char *)v52[18];
      else
        v53 = (char *)v52 + 137;
      LODWORD(buf.value) = 134218755;
      *(CMTimeValue *)((char *)&buf.value + 4) = a2;
      LOWORD(buf.flags) = 2048;
      *(_QWORD *)((char *)&buf.flags + 2) = v48;
      HIWORD(buf.epoch) = 2048;
      v64 = v15 * 1000.0;
      v65 = 2085;
      v66 = v53;
      v54 = "Setting token %llu from connection %llu to play with alignment delay %0.2f msec, REAsset = '%{sensitive}s'";
LABEL_64:
      _os_log_impl(&dword_224FE9000, v44, OS_LOG_TYPE_DEFAULT, v54, (uint8_t *)&buf, 0x2Au);
    }
  }
  else if (v45)
  {
    v49 = *((_QWORD *)this + 2);
    if (v49
      && (v50 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v49 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType)) != 0)
    {
      v51 = *(_QWORD *)(v50 + 32);
    }
    else
    {
      v51 = 0;
    }
    v55 = re::AssetHandle::assetInfo((re::AudioSourceState *)((char *)a3 + 32));
    if ((v55[17] & 1) != 0)
      v56 = (char *)v55[18];
    else
      v56 = (char *)v55 + 137;
    LODWORD(buf.value) = 134218754;
    *(CMTimeValue *)((char *)&buf.value + 4) = a2;
    LOWORD(buf.flags) = 2048;
    *(_QWORD *)((char *)&buf.flags + 2) = v51;
    HIWORD(buf.epoch) = 2048;
    v64 = v15 * 1000.0;
    v65 = 2080;
    v66 = v56;
    v54 = "Setting token %llu from connection %llu to play with alignment delay %0.2f msec, REAsset = '%s'";
    goto LABEL_64;
  }

  if (a4)
    *((_QWORD *)a4 + 4) = 1;
  Rate = CMTimebaseGetRate(v8);
  v58 = *((float *)a3 + 78);
  if (Rate != v58)
  {
    if (v15 != 0.0)
    {
      memset(&buf, 0, sizeof(buf));
      CMTimeMakeWithSeconds(&buf, v15, 1000000000);
      memset(&v62, 0, sizeof(v62));
      CMTimebaseGetTime(&v62, v8);
      lhs = v62;
      v59 = buf;
      CMTimeSubtract(&time, &lhs, &v59);
      CMTimebaseSetTime(v8, &time);
      v58 = *((float *)a3 + 78);
    }
    CMTimebaseSetRate(v8, v58);
  }
}

void re::ecs2::AudioPlayerComponent::doStopAll(re::ecs2::AudioPlayerComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  re::AudioSourceState *v9;
  re::AudioSourceSyncState *v10;
  int v11;
  int v12;
  unint64_t v13;

  v2 = *((unsigned int *)this + 28);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = (int *)(*((_QWORD *)this + 12) + 8);
    while (1)
    {
      v5 = *v4;
      v4 += 8;
      if (v5 < 0)
        break;
      if (v2 == ++v3)
      {
        LODWORD(v3) = *((_DWORD *)this + 28);
        break;
      }
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if ((_DWORD)v2 != (_DWORD)v3)
  {
    v6 = v3;
    do
    {
      v7 = *((_QWORD *)this + 12) + 32 * v6;
      v9 = *(re::AudioSourceState **)(v7 + 24);
      v13 = *(_QWORD *)(v7 + 16);
      v8 = v13;
      v10 = (re::AudioSourceSyncState *)re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 32, (uint64_t *)&v13);
      re::ecs2::AudioPlayerComponent::doStop(this, v8, v9, v10);
      if (*((_DWORD *)this + 28) <= (v3 + 1))
        v11 = v3 + 1;
      else
        v11 = *((_DWORD *)this + 28);
      v12 = v3;
      while (1)
      {
        v6 = (v12 + 1);
        if (v11 - 1 == v12)
          break;
        ++v12;
        LODWORD(v3) = v6;
        if ((*(_DWORD *)(*((_QWORD *)this + 12) + 32 * v6 + 8) & 0x80000000) != 0)
          goto LABEL_17;
      }
      LODWORD(v3) = v11;
LABEL_17:
      ;
    }
    while ((_DWORD)v2 != (_DWORD)v3);
  }
}

uint64_t re::ecs2::AudioPlayerComponent::doPause(re::ecs2::AudioPlayerComponent *this, uint64_t a2, re::AudioSourceState *a3, re::AudioSourceSyncState *a4)
{
  int v9;
  NSObject *v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  const char *v20;
  _QWORD *v21;
  char *v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a3 + 720))
    return 0;
  v9 = *((unsigned __int8 *)a3 + 281);
  v10 = (id)*re::audioLogObjects(this);
  v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    if (!v11)
      goto LABEL_23;
    v12 = *((_QWORD *)this + 2);
    if (v12
      && (v13 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v12 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType)) != 0)
    {
      v14 = *(_QWORD *)(v13 + 32);
    }
    else
    {
      v14 = 0;
    }
    v18 = re::AssetHandle::assetInfo((re::AudioSourceState *)((char *)a3 + 32));
    if ((v18[17] & 1) != 0)
      v19 = (char *)v18[18];
    else
      v19 = (char *)v18 + 137;
    v23 = 134218499;
    v24 = a2;
    v25 = 2048;
    v26 = v14;
    v27 = 2085;
    v28 = v19;
    v20 = "Setting token %llu from connection %llu to pause, REAsset = '%{sensitive}s'";
  }
  else
  {
    if (!v11)
      goto LABEL_23;
    v15 = *((_QWORD *)this + 2);
    if (v15
      && (v16 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v15 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType)) != 0)
    {
      v17 = *(_QWORD *)(v16 + 32);
    }
    else
    {
      v17 = 0;
    }
    v21 = re::AssetHandle::assetInfo((re::AudioSourceState *)((char *)a3 + 32));
    if ((v21[17] & 1) != 0)
      v22 = (char *)v21[18];
    else
      v22 = (char *)v21 + 137;
    v23 = 134218498;
    v24 = a2;
    v25 = 2048;
    v26 = v17;
    v27 = 2080;
    v28 = v22;
    v20 = "Setting token %llu from connection %llu to pause, REAsset = '%s'";
  }
  _os_log_impl(&dword_224FE9000, v10, OS_LOG_TYPE_DEFAULT, v20, (uint8_t *)&v23, 0x20u);
LABEL_23:

  if (a4)
  {
    if (*((_QWORD *)a4 + 4) == 1)
      *((_QWORD *)a4 + 4) = 3;
  }
  if (CMTimebaseGetRate(*((CMTimebaseRef *)a3 + 87)) == 0.0)
    return 0;
  CMTimebaseSetRate(*((CMTimebaseRef *)a3 + 87), 0.0);
  return 1;
}

void re::ecs2::AudioPlayerComponent::resumeAll(re::ecs2::AudioPlayerComponent **this)
{
  re *canModifyState;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  NSObject *v7;
  re::ecs2::AudioPlayerComponent *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  re::ecs2::AudioPlayerComponent *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  canModifyState = (re *)re::ecs2::AudioPlayerComponent::canModifyState(this[2]);
  if ((canModifyState & 1) != 0)
  {
    v3 = *((unsigned int *)this + 28);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = (int *)((char *)this[12] + 8);
      while (1)
      {
        v6 = *v5;
        v5 += 8;
        if (v6 < 0)
          break;
        if (v3 == ++v4)
        {
          LODWORD(v4) = *((_DWORD *)this + 28);
          break;
        }
      }
    }
    else
    {
      LODWORD(v4) = 0;
    }
    if ((_DWORD)v3 != (_DWORD)v4)
    {
      v9 = v4;
      do
      {
        re::ecs2::AudioPlayerComponent::play((uint64_t)this, *((_QWORD *)this[12] + 4 * v9 + 2), 1);
        if (*((_DWORD *)this + 28) <= (v4 + 1))
          v10 = v4 + 1;
        else
          v10 = *((_DWORD *)this + 28);
        v11 = v4;
        while (1)
        {
          v9 = (v11 + 1);
          if (v10 - 1 == v11)
            break;
          ++v11;
          LODWORD(v4) = v9;
          if ((*((_DWORD *)this[12] + 8 * v9 + 2) & 0x80000000) != 0)
            goto LABEL_22;
        }
        LODWORD(v4) = v10;
LABEL_22:
        ;
      }
      while ((_DWORD)v3 != (_DWORD)v4);
    }
  }
  else
  {
    v7 = *re::audioLogObjects(canModifyState);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = this[38];
      if (!v8)
        v8 = this[44];
      v12 = 134217984;
      v13 = v8;
      _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "AudioPlayerComponent::resumeAll() (entityID=%llu) cannot modify state because component is not owned.", (uint8_t *)&v12, 0xCu);
    }
  }
}

void re::ecs2::AudioPlayerComponent::stopAll(re::ecs2::AudioPlayerComponent **this)
{
  re *canModifyState;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  NSObject *v7;
  re::ecs2::AudioPlayerComponent *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  re::ecs2::AudioPlayerComponent *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  canModifyState = (re *)re::ecs2::AudioPlayerComponent::canModifyState(this[2]);
  if ((canModifyState & 1) != 0)
  {
    v3 = *((unsigned int *)this + 28);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = (int *)((char *)this[12] + 8);
      while (1)
      {
        v6 = *v5;
        v5 += 8;
        if (v6 < 0)
          break;
        if (v3 == ++v4)
        {
          LODWORD(v4) = *((_DWORD *)this + 28);
          break;
        }
      }
    }
    else
    {
      LODWORD(v4) = 0;
    }
    if ((_DWORD)v3 != (_DWORD)v4)
    {
      v9 = v4;
      do
      {
        re::ecs2::AudioPlayerComponent::stop(this, *((_QWORD *)this[12] + 4 * v9 + 2));
        if (*((_DWORD *)this + 28) <= (v4 + 1))
          v10 = v4 + 1;
        else
          v10 = *((_DWORD *)this + 28);
        v11 = v4;
        while (1)
        {
          v9 = (v11 + 1);
          if (v10 - 1 == v11)
            break;
          ++v11;
          LODWORD(v4) = v9;
          if ((*((_DWORD *)this[12] + 8 * v9 + 2) & 0x80000000) != 0)
            goto LABEL_22;
        }
        LODWORD(v4) = v10;
LABEL_22:
        ;
      }
      while ((_DWORD)v3 != (_DWORD)v4);
    }
  }
  else
  {
    v7 = *re::audioLogObjects(canModifyState);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = this[38];
      if (!v8)
        v8 = this[44];
      v12 = 134217984;
      v13 = v8;
      _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "AudioPlayerComponent::stopAll() (entityID=%llu) cannot modify state because component is not owned.", (uint8_t *)&v12, 0xCu);
    }
  }
}

void re::ecs2::AudioPlayerComponent::pauseAll(re::ecs2::AudioPlayerComponent **this)
{
  re *canModifyState;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  NSObject *v7;
  re::ecs2::AudioPlayerComponent *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  re::ecs2::AudioPlayerComponent *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  canModifyState = (re *)re::ecs2::AudioPlayerComponent::canModifyState(this[2]);
  if ((canModifyState & 1) != 0)
  {
    v3 = *((unsigned int *)this + 28);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = (int *)((char *)this[12] + 8);
      while (1)
      {
        v6 = *v5;
        v5 += 8;
        if (v6 < 0)
          break;
        if (v3 == ++v4)
        {
          LODWORD(v4) = *((_DWORD *)this + 28);
          break;
        }
      }
    }
    else
    {
      LODWORD(v4) = 0;
    }
    if ((_DWORD)v3 != (_DWORD)v4)
    {
      v9 = v4;
      do
      {
        re::ecs2::AudioPlayerComponent::pause(this, *((_QWORD *)this[12] + 4 * v9 + 2));
        if (*((_DWORD *)this + 28) <= (v4 + 1))
          v10 = v4 + 1;
        else
          v10 = *((_DWORD *)this + 28);
        v11 = v4;
        while (1)
        {
          v9 = (v11 + 1);
          if (v10 - 1 == v11)
            break;
          ++v11;
          LODWORD(v4) = v9;
          if ((*((_DWORD *)this[12] + 8 * v9 + 2) & 0x80000000) != 0)
            goto LABEL_22;
        }
        LODWORD(v4) = v10;
LABEL_22:
        ;
      }
      while ((_DWORD)v3 != (_DWORD)v4);
    }
  }
  else
  {
    v7 = *re::audioLogObjects(canModifyState);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = this[38];
      if (!v8)
        v8 = this[44];
      v12 = 134217984;
      v13 = v8;
      _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "AudioPlayerComponent::pauseAll() (entityID=%llu) cannot modify state because component is not owned.", (uint8_t *)&v12, 0xCu);
    }
  }
}

double re::ecs2::AudioPlayerComponent::playbackPositionFor(CMTimeValue *this, unint64_t a2)
{
  re::ecs2::NetworkComponent *v4;
  re::ecs2::NetworkComponent *v5;
  Float64 Seconds;
  NSObject *v7;
  double v8;
  CMTimeValue v9;
  re::AssetHandle *v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  double v15;
  int v16;
  double v17;
  double v18;
  double v20;
  double v21;
  double v22;
  CMTime v23;
  CMTime buf;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = re::ecs2::AudioPlayerComponent::sourceStateForToken((re::ecs2::AudioPlayerComponent *)this, a2);
  if (v4)
  {
    v5 = v4;
    if (*((_BYTE *)v4 + 736))
    {
      Seconds = *((double *)v4 + 91);
    }
    else
    {
      memset(&buf, 0, sizeof(buf));
      CMTimebaseGetTime(&buf, *((CMTimebaseRef *)v4 + 87));
      v23 = buf;
      Seconds = CMTimeGetSeconds(&v23);
    }
    v8 = 0.0;
    if (Seconds >= 0.0)
    {
      v10 = re::AssetHandle::AssetHandle((re::AssetHandle *)&buf, (re::ecs2::NetworkComponent *)((char *)v5 + 32));
      if (*(_QWORD *)&buf.timescale)
      {
        v11 = atomic_load((unsigned int *)(*(_QWORD *)&buf.timescale + 704));
        if (v11 == 2)
        {
          v12 = *(uint64_t **)(*(_QWORD *)&buf.timescale + 264);
          if (v12 == re::AudioFileAsset::assetType(v10))
          {
            v13 = re::AssetHandle::loadedAsset<re::AudioFileAsset>((re::AudioFileAsset *)&buf);
            v14 = *(_QWORD *)(v13 + 136);
            objc_msgSend(*(id *)(*(_QWORD *)(v13 + 8) + 8), "sampleRate");
            v16 = *(_DWORD *)(v13 + 96);
            if (v16)
            {
              v8 = (double)v14 / v15;
              if (v16 < 0 || Seconds < v8 * (double)v16)
              {
                v17 = remainder(Seconds, v8);
                v18 = -0.0;
                if (v17 < 0.0)
                  v18 = v8;
                v8 = v17 + v18;
              }
            }
            else
            {
              v20 = (double)*(unint64_t *)(v13 + 136);
              objc_msgSend(*(id *)(*(_QWORD *)(v13 + 8) + 8), "sampleRate");
              v22 = v20 / v21;
              if (Seconds <= v22)
                v8 = Seconds;
              else
                v8 = v22;
            }
          }
          else
          {
            v8 = Seconds;
          }
        }
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&buf);
    }
  }
  else
  {
    v7 = *re::audioLogObjects(0);
    v8 = 0.0;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v9 = this[38];
      if (!v9)
        v9 = this[44];
      LODWORD(buf.value) = 134218240;
      *(CMTimeValue *)((char *)&buf.value + 4) = v9;
      LOWORD(buf.flags) = 2048;
      *(_QWORD *)((char *)&buf.flags + 2) = a2;
      _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "AudioPlayerComponent::playbackPositionFor() (entityID=%llu) cannot access state for unknown playback token %llu.", (uint8_t *)&buf, 0x16u);
    }
  }
  return v8;
}

void re::ecs2::AudioPlayerComponent::setPlaybackPositionFor(re::ecs2::AudioPlayerComponent *this, unint64_t a2, double a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  __int16 v30;
  unint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v6 = re::ecs2::AudioPlayerComponent::sourceStateForToken(this, a2);
  if (v6)
  {
    if (*(_BYTE *)(v6 + 720))
    {
      v7 = *re::audioLogObjects((re *)v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v8 = *((_QWORD *)this + 38);
        if (!v8)
          v8 = *((_QWORD *)this + 44);
        v28 = 134218240;
        v29 = v8;
        v30 = 2048;
        v31 = a2;
        v9 = "AudioPlayerComponent::setPlaybackPositionFor() (entityID=%llu) cannot seek un-owned playback token %llu.";
LABEL_11:
        _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, v9, (uint8_t *)&v28, 0x16u);
      }
    }
    else
    {
      *(double *)(v6 + 728) = a3;
      *(_BYTE *)(v6 + 736) = 1;
      v11 = re::globalAllocators((re *)v6);
      v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11[2] + 32))(v11[2], 32, 8);
      v13 = v12;
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
      *(_DWORD *)v12 = 4;
      *(_QWORD *)(v12 + 8) = a2;
      *(_QWORD *)(v12 + 16) = 0;
      *(double *)(v12 + 24) = a3;
      v15 = (uint64_t *)*((_QWORD *)this + 42);
      v14 = *((_QWORD *)this + 43);
      if ((unint64_t)v15 >= v14)
      {
        v17 = *((_QWORD *)this + 41);
        v18 = ((uint64_t)v15 - v17) >> 3;
        if ((unint64_t)(v18 + 1) >> 61)
          abort();
        v19 = v14 - v17;
        v20 = v19 >> 2;
        if (v19 >> 2 <= (unint64_t)(v18 + 1))
          v20 = v18 + 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        if (v21)
          v21 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v21);
        else
          v22 = 0;
        v23 = (uint64_t *)(v21 + 8 * v18);
        v24 = v21 + 8 * v22;
        *v23 = v13;
        v16 = v23 + 1;
        v26 = (char *)*((_QWORD *)this + 41);
        v25 = (char *)*((_QWORD *)this + 42);
        if (v25 != v26)
        {
          do
          {
            v27 = *((_QWORD *)v25 - 1);
            v25 -= 8;
            *--v23 = v27;
          }
          while (v25 != v26);
          v25 = (char *)*((_QWORD *)this + 41);
        }
        *((_QWORD *)this + 41) = v23;
        *((_QWORD *)this + 42) = v16;
        *((_QWORD *)this + 43) = v24;
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v15 = v12;
        v16 = v15 + 1;
      }
      *((_QWORD *)this + 42) = v16;
    }
  }
  else
  {
    v7 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v10 = *((_QWORD *)this + 38);
      if (!v10)
        v10 = *((_QWORD *)this + 44);
      v28 = 134218240;
      v29 = v10;
      v30 = 2048;
      v31 = a2;
      v9 = "AudioPlayerComponent::setPlaybackPositionFor() (entityID=%llu) cannot access state for unknown playback token %llu.";
      goto LABEL_11;
    }
  }
}

float re::ecs2::AudioPlayerComponent::playbackSpeed(re::ecs2::AudioPlayerComponent *this, unint64_t a2)
{
  re::ecs2::NetworkComponent *v4;
  float v5;
  NSObject *v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = re::ecs2::AudioPlayerComponent::sourceStateForToken(this, a2);
  if (v4)
    return *((float *)v4 + 78);
  v6 = *re::audioLogObjects(0);
  v5 = 0.0;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v8 = *((_QWORD *)this + 38);
    if (!v8)
      v8 = *((_QWORD *)this + 44);
    v9 = 134218240;
    v10 = v8;
    v11 = 2048;
    v12 = a2;
    _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "AudioPlayerComponent::playbackSpeed() (entityID=%llu) cannot access state for unknown playback token %llu.", (uint8_t *)&v9, 0x16u);
  }
  return v5;
}

void re::ecs2::AudioPlayerComponent::setPlaybackSpeed(re::ecs2::AudioPlayerComponent **this, unint64_t a2, float a3)
{
  re *canModifyState;
  re::ecs2::NetworkComponent *v7;
  NSObject *v8;
  re::ecs2::AudioPlayerComponent *v9;
  const char *v10;
  OpaqueCMTimebase *v11;
  re::ecs2::AudioPlayerComponent *v12;
  int v13;
  re::ecs2::AudioPlayerComponent *v14;
  __int16 v15;
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  canModifyState = (re *)re::ecs2::AudioPlayerComponent::canModifyState(this[2]);
  if ((canModifyState & 1) != 0)
  {
    v7 = re::ecs2::AudioPlayerComponent::sourceStateForToken((re::ecs2::AudioPlayerComponent *)this, a2);
    if (v7 && !*((_BYTE *)v7 + 720))
    {
      *((float *)v7 + 78) = a3;
      v11 = (OpaqueCMTimebase *)*((_QWORD *)v7 + 87);
      if (CMTimebaseGetRate(v11) != 0.0)
        CMTimebaseSetRate(v11, a3);
    }
    else
    {
      v8 = *re::audioLogObjects(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v9 = this[38];
        if (!v9)
          v9 = this[44];
        v13 = 134218240;
        v14 = v9;
        v15 = 2048;
        v16 = a2;
        v10 = "AudioPlayerComponent::setPlaybackSpeed() (entityID=%llu) cannot access state for unknown playback token %llu.";
LABEL_15:
        _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&v13, 0x16u);
      }
    }
  }
  else
  {
    v8 = *re::audioLogObjects(canModifyState);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v12 = this[38];
      if (!v12)
        v12 = this[44];
      v13 = 134218240;
      v14 = v12;
      v15 = 2048;
      v16 = a2;
      v10 = "AudioPlayerComponent::setPlaybackSpeed() (entityID=%llu) cannot modify state for token %llu because it is not owned.";
      goto LABEL_15;
    }
  }
}

void re::ecs2::AudioPlayerComponent::overrideInputMode(re *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v5;
  const re::ecs2::Component *v6;
  uint64_t v7;
  _BYTE *v8;
  NSObject *v9;
  const char *v10;
  re::ecs2::NetworkComponent *v11;
  uint64_t v12;
  uint64_t v13;

  v13 = a2;
  v3 = *((_QWORD *)a1 + 2);
  if (!v3)
  {
    v9 = *re::audioLogObjects(a1);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      return;
    LOWORD(v12) = 0;
    v10 = "cannot override input mode on component that does not have entity";
LABEL_9:
    _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&v12, 2u);
    return;
  }
  v5 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
  if (!v5)
  {
    v9 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      return;
    LOWORD(v12) = 0;
    v10 = "cannot override input mode b/c failed to create transient component";
    goto LABEL_9;
  }
  v6 = (const re::ecs2::Component *)v5;
  v7 = v5 + 40;
  v8 = (_BYTE *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v5 + 40, &v13);
  if (v8)
  {
    *v8 = a3;
  }
  else
  {
    HIDWORD(v12) = 6553601;
    LOBYTE(v12) = a3;
    re::HashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<re::ecs2::TransientAudioState&>(v7, &v13, &v12);
  }
  v11 = *(re::ecs2::NetworkComponent **)(v3 + 200);
  if (v11)
    re::ecs2::NetworkComponent::markDirty(v11, v6);
}

uint64_t re::HashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<re::ecs2::TransientAudioState&>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 32 * v10 + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 32 * v10;
  return v12 + 24;
}

float re::ecs2::AudioPlayerComponent::reverbSendLevel(re::ecs2::AudioPlayerComponent *this, uint64_t a2)
{
  uint64_t v3;
  float v4;
  NSObject *v5;
  _BOOL8 v6;
  _anonymous_namespace_ *v12;
  uint64_t v14;
  uint64_t v15;
  uint8_t buf[32];
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[3];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  v3 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 32, &v15);
  if (v3)
    return *(float *)(v3 + 56);
  v5 = *re::audioLogObjects(0);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if (v6)
  {
    v14 = *((_QWORD *)this + 38);
    if (!v14)
      v14 = *((_QWORD *)this + 44);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v14;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v15;
    _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "AudioPlayerComponent::reverbSendLevel() (entityID=%llu) cannot access state for unknown playback token %llu.", buf, 0x16u);
  }
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0uLL;
  memset(v24, 0, sizeof(v24));
  memset(buf, 0, sizeof(buf));
  v17 = 9;
  v18 = 1065353216;
  v19 = 0uLL;
  v20 = 0x3F80000000000000uLL;
  __asm { FMOV            V0.2S, #1.0 }
  v21 = _D0;
  v22 = 0;
  v23 = 1065353216;
  BYTE8(v24[2]) = 0;
  v31 = 0;
  v26 = 0uLL;
  v12 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v25, 0);
  *(_QWORD *)((char *)&v27 + 4) = 0x3E051EB800000000;
  LODWORD(v27) = 1;
  HIDWORD(v27) = 1106247680;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  re::DynamicString::setCapacity(&v29, 0);
  LOWORD(v31) = 0;
  v4 = *((float *)&v19 + 2);
  if ((_QWORD)v29)
  {
    if ((BYTE8(v29) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v29 + 40))();
    v29 = 0u;
    v30 = 0u;
  }
  if ((_QWORD)v25)
  {
    if ((BYTE8(v25) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v25 + 40))();
    v25 = 0u;
    v26 = 0u;
  }
  if (LOBYTE(v24[0]) && *((_QWORD *)&v24[0] + 1))
  {
    if ((v24[1] & 1) != 0)
      (*(void (**)(void))(**((_QWORD **)&v24[0] + 1) + 40))();
    memset((char *)v24 + 8, 0, 32);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&buf[8]);
  return v4;
}

void re::ecs2::AudioPlayerComponent::setReverbSendLevel(re::ecs2::AudioPlayerComponent **this, uint64_t a2, float a3)
{
  re *canModifyState;
  uint64_t v7;
  NSObject *v8;
  re::ecs2::AudioPlayerComponent *v9;
  const char *v10;
  NSObject *v11;
  NSObject *v12;
  re::ecs2::AudioPlayerComponent *v13;
  uint64_t v14;
  uint8_t buf[4];
  re::ecs2::AudioPlayerComponent *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  canModifyState = (re *)re::ecs2::AudioPlayerComponent::canModifyState(this[2]);
  if ((canModifyState & 1) == 0)
  {
    v8 = *re::audioLogObjects(canModifyState);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      return;
    v9 = this[38];
    if (!v9)
      v9 = this[44];
    *(_DWORD *)buf = 134218240;
    v16 = v9;
    v17 = 2048;
    v18 = a2;
    v10 = "AudioPlayerComponent::setReverbSendLevel() (entityID=%llu) cannot modify state for token %llu because it is not owned.";
    v11 = v8;
LABEL_13:
    _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, v10, buf, 0x16u);
    return;
  }
  v7 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)(this + 4), &v14);
  if (v7)
  {
    *(float *)(v7 + 56) = a3;
    return;
  }
  v12 = *re::audioLogObjects(0);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = this[38];
    if (!v13)
      v13 = this[44];
    *(_DWORD *)buf = 134218240;
    v16 = v13;
    v17 = 2048;
    v18 = v14;
    v10 = "AudioPlayerComponent::setReverbSendLevel() (entityID=%llu) cannot modify state for unknown playback token %llu.";
    v11 = v12;
    goto LABEL_13;
  }
}

float re::ecs2::AudioPlayerComponent::directSendLevel(re::ecs2::AudioPlayerComponent *this, uint64_t a2)
{
  uint64_t v3;
  float v4;
  NSObject *v5;
  _BOOL8 v6;
  _anonymous_namespace_ *v12;
  uint64_t v14;
  uint64_t v15;
  uint8_t buf[32];
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[3];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  v3 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 32, &v15);
  if (v3)
    return *(float *)(v3 + 72);
  v5 = *re::audioLogObjects(0);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if (v6)
  {
    v14 = *((_QWORD *)this + 38);
    if (!v14)
      v14 = *((_QWORD *)this + 44);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v14;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v15;
    _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "AudioPlayerComponent::directSendLevel() (entityID=%llu) cannot access state for unknown playback token %llu.", buf, 0x16u);
  }
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0uLL;
  memset(v24, 0, sizeof(v24));
  memset(buf, 0, sizeof(buf));
  v17 = 9;
  v18 = 1065353216;
  v19 = 0uLL;
  v20 = 0x3F80000000000000uLL;
  __asm { FMOV            V0.2S, #1.0 }
  v21 = _D0;
  v22 = 0;
  v23 = 1065353216;
  BYTE8(v24[2]) = 0;
  v31 = 0;
  v26 = 0uLL;
  v12 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v25, 0);
  *(_QWORD *)((char *)&v27 + 4) = 0x3E051EB800000000;
  LODWORD(v27) = 1;
  HIDWORD(v27) = 1106247680;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  re::DynamicString::setCapacity(&v29, 0);
  LOWORD(v31) = 0;
  v4 = *((float *)&v19 + 2);
  if ((_QWORD)v29)
  {
    if ((BYTE8(v29) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v29 + 40))();
    v29 = 0u;
    v30 = 0u;
  }
  if ((_QWORD)v25)
  {
    if ((BYTE8(v25) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v25 + 40))();
    v25 = 0u;
    v26 = 0u;
  }
  if (LOBYTE(v24[0]) && *((_QWORD *)&v24[0] + 1))
  {
    if ((v24[1] & 1) != 0)
      (*(void (**)(void))(**((_QWORD **)&v24[0] + 1) + 40))();
    memset((char *)v24 + 8, 0, 32);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&buf[8]);
  return v4;
}

void re::ecs2::AudioPlayerComponent::setDirectSendLevel(re::ecs2::AudioPlayerComponent **this, uint64_t a2, float a3)
{
  re *canModifyState;
  uint64_t v7;
  NSObject *v8;
  re::ecs2::AudioPlayerComponent *v9;
  const char *v10;
  NSObject *v11;
  NSObject *v12;
  re::ecs2::AudioPlayerComponent *v13;
  uint64_t v14;
  uint8_t buf[4];
  re::ecs2::AudioPlayerComponent *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  canModifyState = (re *)re::ecs2::AudioPlayerComponent::canModifyState(this[2]);
  if ((canModifyState & 1) == 0)
  {
    v8 = *re::audioLogObjects(canModifyState);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      return;
    v9 = this[38];
    if (!v9)
      v9 = this[44];
    *(_DWORD *)buf = 134218240;
    v16 = v9;
    v17 = 2048;
    v18 = a2;
    v10 = "AudioPlayerComponent::setDirectSendLevel() (entityID=%llu) cannot modify state for token %llu because it is not owned.";
    v11 = v8;
LABEL_13:
    _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, v10, buf, 0x16u);
    return;
  }
  v7 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)(this + 4), &v14);
  if (v7)
  {
    *(float *)(v7 + 72) = a3;
    return;
  }
  v12 = *re::audioLogObjects(0);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = this[38];
    if (!v13)
      v13 = this[44];
    *(_DWORD *)buf = 134218240;
    v16 = v13;
    v17 = 2048;
    v18 = v14;
    v10 = "AudioPlayerComponent::setDirectSendLevel() (entityID=%llu) cannot modify state for unknown playback token %llu.";
    v11 = v12;
    goto LABEL_13;
  }
}

BOOL re::ecs2::AudioPlayerComponent::deferToSystemAcousticTuning(re::ecs2::AudioPlayerComponent *this, uint64_t a2)
{
  uint64_t v3;
  _BOOL8 result;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t buf[4];
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v3 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 32, &v7);
  if (v3)
    return *(_BYTE *)(v3 + 256) != 0;
  v5 = *re::audioLogObjects(0);
  result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    v6 = *((_QWORD *)this + 38);
    if (!v6)
      v6 = *((_QWORD *)this + 44);
    *(_DWORD *)buf = 134218240;
    v9 = v6;
    v10 = 2048;
    v11 = v7;
    _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "AudioPlayerComponent::deferToSystemAcousticTuning() (entityID=%llu) cannot access deferToSystemAcousticTuning for unknown playback token %llu.", buf, 0x16u);
    return 0;
  }
  return result;
}

void re::ecs2::AudioPlayerComponent::setDeferToSystemAcousticTuning(re::ecs2::AudioPlayerComponent **this, uint64_t a2, char a3)
{
  re *canModifyState;
  uint64_t v7;
  NSObject *v8;
  re::ecs2::AudioPlayerComponent *v9;
  const char *v10;
  NSObject *v11;
  NSObject *v12;
  re::ecs2::AudioPlayerComponent *v13;
  uint64_t v14;
  uint8_t buf[4];
  re::ecs2::AudioPlayerComponent *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  canModifyState = (re *)re::ecs2::AudioPlayerComponent::canModifyState(this[2]);
  if ((canModifyState & 1) == 0)
  {
    v8 = *re::audioLogObjects(canModifyState);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      return;
    v9 = this[38];
    if (!v9)
      v9 = this[44];
    *(_DWORD *)buf = 134218240;
    v16 = v9;
    v17 = 2048;
    v18 = a2;
    v10 = "AudioPlayerComponent::setDeferToSystemAcousticTuning() (entityID=%llu) cannot modify deferToSystemAcousticTuni"
          "ng for token %llu because it is not owned.";
    v11 = v8;
LABEL_13:
    _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, v10, buf, 0x16u);
    return;
  }
  v7 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)(this + 4), &v14);
  if (v7)
  {
    *(_BYTE *)(v7 + 256) = a3;
    return;
  }
  v12 = *re::audioLogObjects(0);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = this[38];
    if (!v13)
      v13 = this[44];
    *(_DWORD *)buf = 134218240;
    v16 = v13;
    v17 = 2048;
    v18 = v14;
    v10 = "AudioPlayerComponent::setDeferToSystemAcousticTuning() (entityID=%llu) cannot modify deferToSystemAcousticTuni"
          "ng for unknown playback token %llu.";
    v11 = v12;
    goto LABEL_13;
  }
}

float re::ecs2::AudioPlayerComponent::currentLinearGainForToken(re::ecs2::AudioPlayerComponent *this, unint64_t a2)
{
  re::ecs2::NetworkComponent *v3;
  re::ecs2::NetworkComponent *v4;
  uint64_t v5;
  float result;

  v3 = re::ecs2::AudioPlayerComponent::sourceStateForToken(this, a2);
  if (!v3)
    return 0.0;
  v4 = v3;
  v5 = re::ecs2::AudioPlayerComponent::audioService(this);
  if (!v5)
    return 0.0;
  (*(void (**)(uint64_t, re::ecs2::NetworkComponent *))(*(_QWORD *)v5 + 296))(v5, v4);
  return result;
}

void re::ecs2::AudioPlayerComponent::setComponentFade(re::ecs2::AudioPlayerComponent **this, float a2, float a3)
{
  re *canModifyState;
  float v7;
  float v8;
  NSObject *v9;
  re::ecs2::AudioPlayerComponent *v10;
  int v11;
  re::ecs2::AudioPlayerComponent *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  canModifyState = (re *)re::ecs2::AudioPlayerComponent::canModifyState(this[2]);
  if ((canModifyState & 1) != 0)
  {
    v7 = 0.0;
    v8 = 4.0;
    if (a2 <= 4.0)
      v8 = a2;
    if (a2 >= 0.0)
      v7 = v8;
    if (*((float *)this + 57) == v7 && *((double *)this + 29) == 0.0)
      a3 = 0.0;
    *((double *)this + 29) = a3;
    *((float *)this + 57) = v7;
    ++*((_DWORD *)this + 60);
    if (a3 <= 0.0)
    {
      *((float *)this + 56) = v7;
      this[29] = 0;
      *((_BYTE *)this + 252) = 1;
    }
    else if (*((_BYTE *)this + 252))
    {
      v7 = *((float *)this + 56);
    }
    else
    {
      *((float *)this + 56) = v7;
    }
    *((float *)this + 68) = log10f(v7) * 20.0;
  }
  else
  {
    v9 = *re::audioLogObjects(canModifyState);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = this[38];
      if (!v10)
        v10 = this[44];
      v11 = 134217984;
      v12 = v10;
      _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "AudioPlayerComponent::setComponentFade (entityID=%llu) cannot modify state because entity is not owned", (uint8_t *)&v11, 0xCu);
    }
  }
}

void re::ecs2::AudioPlayerComponent::fadeToGain(re::ecs2::AudioPlayerComponent **this, unint64_t a2, float a3, double a4)
{
  re *canModifyState;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  re::ecs2::NetworkComponent *v13;
  NSObject *v14;
  re::ecs2::AudioPlayerComponent *v15;
  const char *v16;
  NSObject *v17;
  NSObject *v18;
  re::ecs2::AudioPlayerComponent *v19;
  re::ecs2::NetworkComponent *v20;
  unint64_t v21;
  uint8_t buf[4];
  re::ecs2::AudioPlayerComponent *v23;
  __int16 v24;
  unint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v21 = a2;
  canModifyState = (re *)re::ecs2::AudioPlayerComponent::canModifyState(this[2]);
  if ((canModifyState & 1) == 0)
  {
    v14 = *re::audioLogObjects(canModifyState);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      return;
    v15 = this[38];
    if (!v15)
      v15 = this[44];
    *(_DWORD *)buf = 134218240;
    v23 = v15;
    v24 = 2048;
    v25 = a2;
    v16 = "AudioPlayerComponent::fadeToGain() (entityID=%llu) cannot modify state for token %llu because it is not owned.";
    v17 = v14;
LABEL_23:
    _os_log_error_impl(&dword_224FE9000, v17, OS_LOG_TYPE_ERROR, v16, buf, 0x16u);
    return;
  }
  v9 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)(this + 4), (uint64_t *)&v21);
  if (!v9)
  {
    v18 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      return;
    v19 = this[38];
    if (!v19)
      v19 = this[44];
    *(_DWORD *)buf = 134218240;
    v23 = v19;
    v24 = 2048;
    v25 = v21;
    v16 = "AudioPlayerComponent::fadeToGain() (entityID=%llu) cannot modify state for unknown playback token %llu.";
    v17 = v18;
    goto LABEL_23;
  }
  v10 = v9;
  v11 = 4.0;
  if (a3 <= 4.0)
    v11 = a3;
  if (a3 >= 0.0)
    v12 = v11;
  else
    v12 = 0.0;
  if (*(float *)(v9 + 84) == v12 && *(double *)(v9 + 96) == 0.0)
    a4 = *(double *)(v9 + 96);
  *(double *)(v9 + 96) = a4;
  *(float *)(v9 + 84) = v12;
  ++*(_DWORD *)(v9 + 88);
  if (a4 <= 0.0)
  {
    *(float *)(v9 + 80) = v12;
    v20 = re::ecs2::AudioPlayerComponent::sourceStateForToken((re::ecs2::AudioPlayerComponent *)this, v21);
    if (v20)
    {
      *((_BYTE *)v20 + 292) = 1;
      *(_QWORD *)(v10 + 96) = 0;
    }
  }
  else
  {
    v13 = re::ecs2::AudioPlayerComponent::sourceStateForToken((re::ecs2::AudioPlayerComponent *)this, v21);
    if (!v13 || !*((_BYTE *)v13 + 292))
      *(float *)(v10 + 80) = v12;
  }
}

void re::ecs2::AudioPlayerComponent::doFadeToGain(re::ecs2::AudioPlayerComponent *this, uint64_t a2, float a3, double a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v8 = re::globalAllocators(this);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 32, 8);
  v10 = v9;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_DWORD *)v9 = 3;
  *(_QWORD *)(v9 + 8) = a2;
  v11 = a4;
  *(float *)(v9 + 16) = a3;
  *(float *)(v9 + 20) = v11;
  v13 = (uint64_t *)*((_QWORD *)this + 42);
  v12 = *((_QWORD *)this + 43);
  if ((unint64_t)v13 >= v12)
  {
    v15 = *((_QWORD *)this + 41);
    v16 = ((uint64_t)v13 - v15) >> 3;
    if ((unint64_t)(v16 + 1) >> 61)
      abort();
    v17 = v12 - v15;
    v18 = v17 >> 2;
    if (v17 >> 2 <= (unint64_t)(v16 + 1))
      v18 = v16 + 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    if (v19)
      v19 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v19);
    else
      v20 = 0;
    v21 = (uint64_t *)(v19 + 8 * v16);
    v22 = v19 + 8 * v20;
    *v21 = v10;
    v14 = v21 + 1;
    v24 = (char *)*((_QWORD *)this + 41);
    v23 = (char *)*((_QWORD *)this + 42);
    if (v23 != v24)
    {
      do
      {
        v25 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *--v21 = v25;
      }
      while (v23 != v24);
      v23 = (char *)*((_QWORD *)this + 41);
    }
    *((_QWORD *)this + 41) = v21;
    *((_QWORD *)this + 42) = v14;
    *((_QWORD *)this + 43) = v22;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *v13 = v9;
    v14 = v13 + 1;
  }
  *((_QWORD *)this + 42) = v14;
}

BOOL re::ecs2::AudioPlayerComponent::isPlaying(re::ecs2::AudioPlayerComponent *this, unint64_t a2)
{
  uint64_t v2;
  re::ecs2::NetworkComponent *v6;

  v2 = *((_QWORD *)this + 2);
  if (!v2 || (*(_BYTE *)(v2 + 288) & 1) == 0)
    return 0;
  v6 = re::ecs2::AudioPlayerComponent::sourceStateForToken(this, a2);
  return v6 && *((_DWORD *)v6 + 181) == 2 || re::ecs2::AudioPlayerComponent::playbackStateForToken(this, a2) == 1;
}

uint64_t re::ecs2::AudioPlayerComponent::playbackStateForToken(re::ecs2::AudioPlayerComponent *this, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  v3 = a2;
  result = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 80, &v3);
  if (result)
  {
    if (*(_QWORD *)result)
      return playbackStateFromTimebase(*(OpaqueCMTimebase **)(*(_QWORD *)result + 696));
    else
      return 0;
  }
  return result;
}

BOOL re::ecs2::AudioPlayerComponent::isAnythingPlaying(re::ecs2::AudioPlayerComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  _BOOL8 result;
  uint64_t v7;
  int v8;
  int v9;

  v2 = *((unsigned int *)this + 28);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = (int *)(*((_QWORD *)this + 12) + 8);
    while (1)
    {
      v5 = *v4;
      v4 += 8;
      if (v5 < 0)
        break;
      if (v2 == ++v3)
      {
        LODWORD(v3) = *((_DWORD *)this + 28);
        break;
      }
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if ((_DWORD)v2 == (_DWORD)v3)
    return 0;
  v7 = v3;
  while (1)
  {
    result = re::ecs2::AudioPlayerComponent::isPlaying(this, *(_QWORD *)(*((_QWORD *)this + 12) + 32 * v7 + 16));
    if (result)
      return 1;
    if (*((_DWORD *)this + 28) <= (v3 + 1))
      v8 = v3 + 1;
    else
      v8 = *((_DWORD *)this + 28);
    while (1)
    {
      v7 = (v3 + 1);
      if (v8 - 1 == (_DWORD)v3)
        break;
      LODWORD(v3) = v3 + 1;
      v9 = v7;
      if ((*(_DWORD *)(*((_QWORD *)this + 12) + 32 * v7 + 8) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v9 = v8;
LABEL_18:
    LODWORD(v3) = v9;
    if ((_DWORD)v2 == v9)
      return result;
  }
}

uint64_t re::ecs2::AudioPlayerComponent::forEachToken(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  re::ecs2::AudioPlayerComponent *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(unsigned int *)(result + 64);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (_DWORD *)(*(_QWORD *)(result + 48) + 8);
    while ((*v6 & 0x80000000) == 0)
    {
      v6 += 72;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(result + 64);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v7 = v5;
    while (1)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 288 * v7 + 16);
      v8 = *(_QWORD *)(a2 + 24);
      if (!v8)
        break;
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 48))(v8, &v13);
      v9 = *(_DWORD *)(v3 + 64);
      if (v9 <= (int)v5 + 1)
        v10 = v5 + 1;
      else
        v10 = *(_DWORD *)(v3 + 64);
      while (1)
      {
        v7 = (v5 + 1);
        if (v10 - 1 == (_DWORD)v5)
          break;
        LODWORD(v5) = v5 + 1;
        v11 = v7;
        if ((*(_DWORD *)(*(_QWORD *)(v3 + 48) + 288 * v7 + 8) & 0x80000000) != 0)
          goto LABEL_17;
      }
      v11 = v10;
LABEL_17:
      LODWORD(v5) = v11;
      if (v9 == v11)
        return result;
    }
    v12 = (re::ecs2::AudioPlayerComponent *)std::__throw_bad_function_call[abi:nn180100]();
    return re::ecs2::AudioPlayerComponent::firstToken(v12);
  }
  return result;
}

uint64_t re::ecs2::AudioPlayerComponent::firstToken(re::ecs2::AudioPlayerComponent *this)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;

  v1 = *((unsigned int *)this + 16);
  if ((_DWORD)v1)
  {
    v2 = 0;
    v3 = (_DWORD *)(*((_QWORD *)this + 6) + 8);
    while ((*v3 & 0x80000000) == 0)
    {
      v3 += 72;
      if (v1 == ++v2)
      {
        LODWORD(v2) = *((_DWORD *)this + 16);
        break;
      }
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  if ((_DWORD)v1 == (_DWORD)v2)
    return 0;
  else
    return *(_QWORD *)(*((_QWORD *)this + 6) + 288 * v2 + 16);
}

void re::ecs2::AudioPlayerComponent::setParameterValue(re::ecs2::AudioPlayerComponent **this, unint64_t a2, unint64_t a3, float a4)
{
  re *canModifyState;
  re::ecs2::NetworkComponent *v9;
  re::ecs2::NetworkComponent *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  re::ecs2::AudioPlayerComponent *v17;
  const char *v18;
  re::ecs2::AudioPlayerComponent *v19;
  float v20;
  unint64_t v21;
  uint8_t buf[4];
  re::ecs2::AudioPlayerComponent *v23;
  __int16 v24;
  unint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v21 = a3;
  v20 = a4;
  canModifyState = (re *)re::ecs2::AudioPlayerComponent::canModifyState(this[2]);
  if ((canModifyState & 1) == 0)
  {
    v16 = *re::audioLogObjects(canModifyState);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      return;
    v17 = this[38];
    if (!v17)
      v17 = this[44];
    *(_DWORD *)buf = 134218240;
    v23 = v17;
    v24 = 2048;
    v25 = a2;
    v18 = "AudioPlayerComponent::setParameterValue() (entityID=%llu) cannot modify state for token %llu because it is not owned.";
LABEL_17:
    _os_log_error_impl(&dword_224FE9000, v16, OS_LOG_TYPE_ERROR, v18, buf, 0x16u);
    return;
  }
  v9 = re::ecs2::AudioPlayerComponent::sourceStateForToken((re::ecs2::AudioPlayerComponent *)this, a2);
  if (!v9)
  {
    v16 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      return;
    v19 = this[38];
    if (!v19)
      v19 = this[44];
    *(_DWORD *)buf = 134218240;
    v23 = v19;
    v24 = 2048;
    v25 = a2;
    v18 = "AudioPlayerComponent::setParameterValue() (entityID=%llu) cannot modify state for unknown playback token %llu.";
    goto LABEL_17;
  }
  v10 = v9;
  v11 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) >> 27));
  v12 = v11 ^ (v11 >> 31);
  if (!*((_QWORD *)v9 + 63))
  {
    LODWORD(v13) = 0;
    goto LABEL_19;
  }
  v13 = v12 % *((unsigned int *)v9 + 132);
  v14 = *(unsigned int *)(*((_QWORD *)v9 + 64) + 4 * v13);
  if ((_DWORD)v14 == 0x7FFFFFFF)
  {
LABEL_19:
    re::HashTable<unsigned long long,float,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy((uint64_t)v9 + 504, v13, v12, &v21, &v20);
    goto LABEL_20;
  }
  v15 = *((_QWORD *)v9 + 65);
  while (*(_QWORD *)(v15 + 32 * v14 + 16) != a3)
  {
    v14 = *(_DWORD *)(v15 + 32 * v14 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v14 == 0x7FFFFFFF)
      goto LABEL_19;
  }
  *(float *)(v15 + 32 * v14 + 24) = a4;
LABEL_20:
  ++*((_DWORD *)v10 + 136);
}

float re::ecs2::AudioPlayerComponent::getParameterValue(re::ecs2::AudioPlayerComponent *this, uint64_t a2, unint64_t a3)
{
  re *v6;
  uint64_t v7;
  float v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v14;
  _BYTE v15[12];
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v15 = a2;
  v6 = (re *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 80, (uint64_t *)v15);
  if (v6 && (v7 = *(_QWORD *)v6) != 0)
  {
    v8 = 0.0;
    if (*(_QWORD *)(v7 + 504))
    {
      v9 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) >> 27));
      v10 = *(unsigned int *)(*(_QWORD *)(v7 + 512) + 4 * ((v9 ^ (v9 >> 31)) % *(unsigned int *)(v7 + 528)));
      if ((_DWORD)v10 != 0x7FFFFFFF)
      {
        v11 = *(_QWORD *)(v7 + 520);
        if (*(_QWORD *)(v11 + 32 * v10 + 16) == a3)
        {
          return *(float *)(v11 + 32 * v10 + 24);
        }
        else
        {
          while (1)
          {
            v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v10 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v11 + 32 * v10 + 16) == a3)
              return *(float *)(v11 + 32 * v10 + 24);
          }
        }
      }
    }
  }
  else
  {
    v12 = *re::audioLogObjects(v6);
    v8 = 0.0;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v14 = *((_QWORD *)this + 38);
      if (!v14)
        v14 = *((_QWORD *)this + 44);
      *(_DWORD *)v15 = 134218240;
      *(_QWORD *)&v15[4] = v14;
      v16 = 2048;
      v17 = a2;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "AudioPlayerComponent::getParameterValue() (entityID=%llu) cannot access state for unknown playback token %llu.", v15, 0x16u);
    }
  }
  return v8;
}

void re::ecs2::AudioPlayerComponent::doDestroy(re::ecs2::AudioPlayerComponent **this, unint64_t a2)
{
  NSObject *v4;
  re::ecs2::AudioPlayerComponent *v5;
  NSObject *v6;
  re::ecs2::AudioPlayerComponent *v7;
  re::ecs2::AudioPlayerComponent *v8;
  re::ecs2::AudioPlayerComponent *v9;
  re::ecs2::AudioPlayerComponent *v10;
  uint64_t v11;
  re::ecs2::NetworkComponent *v12;
  re *v13;
  re *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  re::ecs2::AudioPlayerComponent *v18;
  uint64_t v19;
  re::ecs2::AudioPlayerComponent *v20;
  char *v21;
  NSObject *v22;
  unsigned int v23;
  char *v24;
  re::ecs2::AudioPlayerComponent *v25;
  char *v26;
  int v27;
  int *v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  re::ecs2::AudioPlayerComponent *v33;
  uint64_t v34;
  re::ecs2::AudioPlayerComponent *v35;
  char *v36;
  unsigned int v37;
  char *v38;
  re::ecs2::AudioPlayerComponent *v39;
  char *v40;
  int v41;
  int *v42;
  int v43;
  uint64_t TimebaseService;
  re::ecs2::AudioPlayerComponent *v45;
  uint64_t v46;
  re::ecs2::AudioPlayerComponent *v47;
  uint64_t v48;
  re::ecs2::Entity *SceneDataEntity;
  uint64_t v50;
  void *v51;
  char *v52;
  re::ecs2::AudioPlayerComponent *v53;
  unint64_t v54;
  char *v55;
  re::ecs2::NetworkComponent **v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  re *v63;
  re *v64;
  re::ecs2::AudioPlayerComponent *v65;
  re::ecs2::NetworkComponent *v66;
  re::ecs2::AudioPlayerComponent *v67;
  re::ecs2::AudioPlayerComponent *v68;
  uint64_t v69;
  uint64_t *v70;
  re *v71;
  re::ecs2::AudioPlayerComponent *i;
  uint64_t v73;
  uint64_t *v74;
  _OWORD buf[5];
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v4 = *re::audioLogObjects((re *)this);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = this[38];
    if (!v5)
      v5 = this[44];
    v6 = v4;
    v7 = this[2];
    if (!v7)
      goto LABEL_10;
    v8 = this[2];
    do
    {
      v9 = v8;
      v8 = (re::ecs2::AudioPlayerComponent *)*((_QWORD *)v8 + 3);
    }
    while (v8);
    if (*((_QWORD *)v9 + 2))
    {
      do
      {
        v10 = v7;
        v7 = (re::ecs2::AudioPlayerComponent *)*((_QWORD *)v7 + 3);
      }
      while (v7);
      v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 2) + 104) + 272) >> 1;
    }
    else
    {
LABEL_10:
      v11 = -1;
    }
    LODWORD(buf[0]) = 134218496;
    *(_QWORD *)((char *)buf + 4) = a2;
    WORD6(buf[0]) = 2048;
    *(_QWORD *)((char *)buf + 14) = v5;
    WORD3(buf[1]) = 2048;
    *((_QWORD *)&buf[1] + 1) = v11;
    _os_log_impl(&dword_224FE9000, v6, OS_LOG_TYPE_DEFAULT, "AudioPlayerComponent::doDestroy(token=%llu) (entityID=%llu, sceneID=%llu)", (uint8_t *)buf, 0x20u);

  }
  v12 = re::ecs2::AudioPlayerComponent::sourceStateForToken((re::ecs2::AudioPlayerComponent *)this, a2);
  v13 = (re *)re::ecs2::AudioPlayerComponent::audioService((re::ecs2::AudioPlayerComponent *)this);
  v14 = v13;
  if (v12)
  {
    v15 = a2 ^ (a2 >> 30);
    if (this[10])
    {
      v16 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v15) ^ ((0xBF58476D1CE4E5B9 * v15) >> 27));
      v17 = (v16 ^ (v16 >> 31)) % *((unsigned int *)this + 26);
      v18 = this[11];
      v19 = *((unsigned int *)v18 + v17);
      if ((_DWORD)v19 != 0x7FFFFFFF)
      {
        v20 = this[12];
        v21 = (char *)v20 + 32 * v19;
        if (*((_QWORD *)v21 + 2) == a2)
        {
          *((_DWORD *)v18 + v17) = *((_DWORD *)v21 + 2) & 0x7FFFFFFF;
LABEL_22:
          v25 = this[12];
          v26 = (char *)v25 + 32 * v19;
          v29 = *((_DWORD *)v26 + 2);
          v28 = (int *)(v26 + 8);
          v27 = v29;
          if (v29 < 0)
          {
            *v28 = v27 & 0x7FFFFFFF;
            v25 = this[12];
            v27 = *((_DWORD *)v25 + 8 * v19 + 2);
          }
          *((_DWORD *)v25 + 8 * v19 + 2) = *((_DWORD *)this + 29) | v27 & 0x80000000;
          --*((_DWORD *)this + 27);
          v30 = *((_DWORD *)this + 30) + 1;
          *((_DWORD *)this + 29) = v19;
          *((_DWORD *)this + 30) = v30;
        }
        else
        {
          while (1)
          {
            v23 = v19;
            v19 = *((_DWORD *)v20 + 8 * v19 + 2) & 0x7FFFFFFF;
            if ((_DWORD)v19 == 0x7FFFFFFF)
              break;
            v24 = (char *)v20 + 32 * v19;
            if (*((_QWORD *)v24 + 2) == a2)
            {
              *((_DWORD *)v20 + 8 * v23 + 2) = *((_DWORD *)v20 + 8 * v23 + 2) & 0x80000000 | *((_DWORD *)v24 + 2) & 0x7FFFFFFF;
              goto LABEL_22;
            }
          }
        }
      }
    }
    if (this[49])
    {
      v31 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v15) ^ ((0xBF58476D1CE4E5B9 * v15) >> 27));
      v32 = (v31 ^ (v31 >> 31)) % *((unsigned int *)this + 104);
      v33 = this[50];
      v34 = *((unsigned int *)v33 + v32);
      if ((_DWORD)v34 != 0x7FFFFFFF)
      {
        v35 = this[51];
        v36 = (char *)v35 + 32 * v34;
        if (*((_QWORD *)v36 + 2) == a2)
        {
          *((_DWORD *)v33 + v32) = *((_DWORD *)v36 + 2) & 0x7FFFFFFF;
LABEL_32:
          v39 = this[51];
          v40 = (char *)v39 + 32 * v34;
          v43 = *((_DWORD *)v40 + 2);
          v42 = (int *)(v40 + 8);
          v41 = v43;
          if (v43 < 0)
          {
            *v42 = v41 & 0x7FFFFFFF;
            v39 = this[51];
            v41 = *((_DWORD *)v39 + 8 * v34 + 2);
          }
          *((_DWORD *)v39 + 8 * v34 + 2) = *((_DWORD *)this + 107) | v41 & 0x80000000;
          *((_DWORD *)this + 107) = v34;
          --*((_DWORD *)this + 105);
          ++*((_DWORD *)this + 108);
        }
        else
        {
          while (1)
          {
            v37 = v34;
            v34 = *((_DWORD *)v35 + 8 * v34 + 2) & 0x7FFFFFFF;
            if ((_DWORD)v34 == 0x7FFFFFFF)
              break;
            v38 = (char *)v35 + 32 * v34;
            if (*((_QWORD *)v38 + 2) == a2)
            {
              *((_DWORD *)v35 + 8 * v37 + 2) = *((_DWORD *)v35 + 8 * v37 + 2) & 0x80000000 | *((_DWORD *)v38 + 2) & 0x7FFFFFFF;
              goto LABEL_32;
            }
          }
        }
      }
    }
    if (v13)
    {
      *((_QWORD *)v12 + 56) = -1;
      (*(void (**)(re *, re::ecs2::NetworkComponent *))(*(_QWORD *)v13 + 280))(v13, v12);
      if (!*((_QWORD *)v12 + 5) && (*((_QWORD *)v12 + 29) || *((_QWORD *)v12 + 30)))
        (*(void (**)(re *, unint64_t))(*(_QWORD *)v14 + 624))(v14, a2);
    }
    TimebaseService = re::ecs2::AudioPlayerComponent::getTimebaseService(this[2]);
    v45 = this[2];
    if (v45)
    {
      v46 = TimebaseService;
      do
      {
        v47 = v45;
        v45 = (re::ecs2::AudioPlayerComponent *)*((_QWORD *)v45 + 3);
      }
      while (v45);
      if (TimebaseService)
      {
        v48 = *((_QWORD *)v47 + 2);
        if (v48)
        {
          LOBYTE(buf[0]) = 0;
          SceneDataEntity = makeSceneDataEntity(v48, (uint64_t)buf, 1, re::ecs2::Scene::kSharedSceneDataEntityID, 1);
          v50 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TimebaseComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          if (v50)
            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v46 + 72))(v46, *((_QWORD *)v12 + 87), v50 + 32);
        }
      }
    }
    v51 = (char *)v12 + 8;
    v52 = (char *)v12 + 8;
    v53 = this[20];
    v54 = (unint64_t)this[18];
    v55 = (char *)v53 + 8 * v54;
    v56 = (re::ecs2::NetworkComponent **)v53;
    if (v54)
    {
      v57 = 8 * v54;
      v56 = (re::ecs2::NetworkComponent **)this[20];
      while (*v56 != v12)
      {
        ++v56;
        v57 -= 8;
        if (!v57)
        {
          v56 = (re::ecs2::NetworkComponent **)((char *)v53 + 8 * v54);
          break;
        }
      }
    }
    v58 = ((char *)v56 - (char *)v53) >> 3;
    if (v58 != v54)
    {
      if (v54 <= v58)
      {
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v59 = v54 - 1;
      if (v54 - 1 > v58)
      {
        v60 = *((_QWORD *)v53 + v58);
        *((_QWORD *)v53 + v58) = *((_QWORD *)v55 - 1);
        *((_QWORD *)v55 - 1) = v60;
        v53 = this[20];
      }
      v61 = (char *)v53 + 8 * v54;
      v62 = *((_QWORD *)v61 - 1);
      if (v62)
      {

        *((_QWORD *)v61 - 1) = 0;
        v59 = (uint64_t)this[18] - 1;
      }
      this[18] = (re::ecs2::AudioPlayerComponent *)v59;
      ++*((_DWORD *)this + 38);
    }

  }
  else
  {
    v22 = *re::audioLogObjects(v13);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 134217984;
      *(_QWORD *)((char *)buf + 4) = a2;
      _os_log_error_impl(&dword_224FE9000, v22, OS_LOG_TYPE_ERROR, "Removing a source state that doesn't exist! (%llu)", (uint8_t *)buf, 0xCu);
    }
  }
  *(_QWORD *)&buf[0] = a2;
  v63 = (re *)re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)(this + 4), (uint64_t *)buf);
  v64 = v63;
  v65 = this[2];
  if (v65 && (v66 = (re::ecs2::NetworkComponent *)*((_QWORD *)v65 + 25)) != 0)
  {
    v63 = (re *)re::ecs2::NetworkComponent::owningProcessType(*((re::ecs2::NetworkComponent **)v65 + 25));
    if (v64 && !(_DWORD)v63)
    {
      *((_QWORD *)v64 + 6) = 0;
      re::ecs2::NetworkComponent::markDirty(v66, (const re::ecs2::Component *)this);
    }
  }
  else if (v63)
  {
    *((_QWORD *)v63 + 6) = 0;
  }
  v67 = this[41];
  v68 = this[42];
  if (v67 != v68)
  {
    while (1)
    {
      v69 = *(_QWORD *)v67;
      if (*(_QWORD *)(*(_QWORD *)v67 + 8) == a2)
        break;
      v67 = (re::ecs2::AudioPlayerComponent *)((char *)v67 + 8);
      if (v67 == v68)
      {
        v67 = this[42];
        goto LABEL_78;
      }
    }
    v70 = re::globalAllocators(v63);
    v71 = (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v70[2] + 40))(v70[2], v69);
    if (v67 != v68)
    {
      for (i = (re::ecs2::AudioPlayerComponent *)((char *)v67 + 8);
            i != v68;
            i = (re::ecs2::AudioPlayerComponent *)((char *)i + 8))
      {
        v73 = *(_QWORD *)i;
        if (*(_QWORD *)(*(_QWORD *)i + 8) == a2)
        {
          v74 = re::globalAllocators(v71);
          v71 = (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v74[2] + 40))(v74[2], v73);
        }
        else
        {
          *(_QWORD *)v67 = v73;
          v67 = (re::ecs2::AudioPlayerComponent *)((char *)v67 + 8);
        }
      }
    }
  }
LABEL_78:
  if (v67 != this[42])
    this[42] = v67;
  if (v14)
  {
    (*(void (**)(re *, unint64_t))(*(_QWORD *)v14 + 568))(v14, a2);
    (*(void (**)(re *, unint64_t, _QWORD))(*(_QWORD *)v14 + 680))(v14, a2, 0);
  }
}

uint64_t playbackStateFromTimebase(OpaqueCMTimebase *a1)
{
  CMTime time;

  if (!a1)
    return 13;
  if (CMTimebaseGetEffectiveRate(a1) != 0.0)
    return 1;
  CMTimebaseGetTime(&time, a1);
  if (CMTimeGetSeconds(&time) == 0.0)
    return 0;
  else
    return 3;
}

BOOL re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + 288 * v4 + 16) == v2)
    return 1;
  do
  {
    LODWORD(v4) = *(_DWORD *)(v6 + 288 * v4 + 8) & 0x7FFFFFFF;
    result = (_DWORD)v4 != 0x7FFFFFFF;
  }
  while ((_DWORD)v4 != 0x7FFFFFFF && *(_QWORD *)(v6 + 288 * v4 + 16) != v2);
  return result;
}

CFDictionaryRef re::AudioSourceState::copyTimebaseUserInfo(re::AudioSourceState *this)
{
  if (this)
    return (CFDictionaryRef)CFRetain(this);
  else
    return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, 0, 0, 0, 0);
}

void re::AudioSourceState::setTimebaseUserInfo(re::AudioSourceState *this, const __CFDictionary *a2)
{
  const void *v3;
  CFDictionaryRef Copy;

  v3 = (const void *)*((_QWORD *)this + 88);
  if (a2)
    Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], a2);
  else
    Copy = 0;
  *((_QWORD *)this + 88) = Copy;
  if (v3)
    CFRelease(v3);
}

void ___Z66AudioPlayerComponentHandleTimebaseTimeJumpedOrEffectiveRateChangedP22__CFNotificationCenterPvPK10__CFStringPKvPK14__CFDictionary_block_invoke(uint64_t a1)
{
  const __CFDictionary *v2;

  v2 = re::AudioSourceState::copyTimebaseUserInfo(*(re::AudioSourceState **)(*(_QWORD *)(a1 + 32) + 704));
  AudioPlayerComponentHandleTimebaseTimeJumpedOrEffectiveRateChanged(*(__CFNotificationCenter **)(a1 + 40), *(void **)(a1 + 48), *(const __CFString **)(a1 + 56), *(const void **)(a1 + 64), v2);
  CFRelease(v2);
}

void re::ecs2::AudioPlayerComponent::setComponentDirectivityMode(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  uint8_t v6[16];

  *(_DWORD *)(a1 + 208) = a2;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v4)
      *(_DWORD *)(v4 + 40) = a2;
  }
  else
  {
    v5 = *re::audioLogObjects((re *)a1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Unable to set directivity on audio player component with no entity.", v6, 2u);
    }
  }
}

void re::ecs2::AudioPlayerComponent::setComponentDirectivityFocus(re::ecs2::AudioPlayerComponent *this, float a2)
{
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  uint8_t v6[16];

  *((float *)this + 53) = a2;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v4)
      *(_DWORD *)(v4 + 44) = *((_DWORD *)this + 53);
  }
  else
  {
    v5 = *re::audioLogObjects(this);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Unable to set directivity focus on audio player component with no entity.", v6, 2u);
    }
  }
}

void re::ecs2::AudioPlayerComponent::setComponentDirectivitySphericalCap(re::ecs2::AudioPlayerComponent *this, float a2, float a3)
{
  uint64_t v3;
  uint64_t v5;
  NSObject *v6;
  uint8_t v7[16];

  *((float *)this + 54) = a2;
  *((float *)this + 55) = a3;
  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v5 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v5)
      *(_QWORD *)(v5 + 48) = *((_QWORD *)this + 27);
  }
  else
  {
    v6 = *re::audioLogObjects(this);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v7 = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Unable to set spherical cap directivity parameters on audio player component with no entity.", v7, 2u);
    }
  }
}

uint64_t re::ecs2::AudioPlayerComponent::getSizeOfAudioPlayerComponent(re::ecs2::AudioPlayerComponent *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  re::AssetManager *v9;
  uint64_t v10;
  const re::AssetHandle *v11;
  uint64_t v12;
  _BYTE v14[24];

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    return 0;
  do
  {
    v3 = v1;
    v1 = *(_QWORD *)(v1 + 24);
  }
  while (v1);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 56);
  if (!v5)
    return 0;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  v7 = re::ServiceLocator::serviceOrNull<re::AssetService>(v6);
  v8 = *((_QWORD *)this + 23);
  if (!v8)
    return 0;
  v9 = (re::AssetManager *)v7;
  v10 = 0;
  v11 = (const re::AssetHandle *)*((_QWORD *)this + 25);
  v12 = 24 * v8;
  do
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)v14, v11);
    v10 += re::AssetManager::assetByteSize(v9, (re::AssetHandle *)v14);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v14);
    v11 = (const re::AssetHandle *)((char *)v11 + 24);
    v12 -= 24;
  }
  while (v12);
  return v10;
}

uint64_t re::ecs2::AudioPlayerComponent::copySizeWithPathOfAssetsInAudioComponent(re::ecs2::AudioPlayerComponent *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  re::AssetManager *v10;
  uint64_t v11;
  const re::AssetHandle *v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  char *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  _BYTE v23[24];

  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *((_QWORD *)this + 2);
  if (!v3)
    goto LABEL_12;
  do
  {
    v4 = v3;
    v3 = *(_QWORD *)(v3 + 24);
  }
  while (v3);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5 && (v6 = *(_QWORD *)(v5 + 56)) != 0)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v8 = re::ServiceLocator::serviceOrNull<re::AssetService>(v7);
    v9 = *((_QWORD *)this + 23);
    if (v9)
    {
      v10 = (re::AssetManager *)v8;
      v11 = 0;
      v12 = (const re::AssetHandle *)*((_QWORD *)this + 25);
      v13 = 24 * v9;
      do
      {
        re::AssetHandle::AssetHandle((re::AssetHandle *)v23, v12);
        v14 = (void *)MEMORY[0x24BDD17C8];
        v15 = re::AssetHandle::assetInfo((re::AssetHandle *)v23);
        if ((v15[13] & 1) != 0)
          v16 = (char *)v15[14];
        else
          v16 = (char *)v15 + 105;
        objc_msgSend(v14, "stringWithCString:encoding:", v16, 4);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = re::AssetManager::assetByteSize(v10, (re::AssetHandle *)v23);
        v11 += v18;
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", v18);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "setObject:forKey:", v19, v17);

        re::AssetHandle::~AssetHandle((re::AssetHandle *)v23);
        v12 = (const re::AssetHandle *)((char *)v12 + 24);
        v13 -= 24;
      }
      while (v13);
    }
    else
    {
      v11 = 0;
    }
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", v11);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKey:", v21, CFSTR("TotalSize"));

    v20 = objc_msgSend(v2, "copy");
  }
  else
  {
LABEL_12:
    v20 = 0;
  }

  return v20;
}

uint64_t re::ecs2::AudioPlayerComponent::clearAllSourceStates(re::ecs2::AudioPlayerComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  uint64_t v6;
  unint64_t *v7;
  int v8;
  int v9;
  _QWORD *i;
  uint64_t v11;
  re::ecs2::NetworkComponent *v12;
  BOOL v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  int v21;
  __int128 v23;
  __int128 v24;
  int v25;

  re::ecs2::AudioPlayerComponent::doStopAll(this);
  v23 = 0u;
  v24 = 0u;
  v25 = 1065353216;
  v2 = *((unsigned int *)this + 28);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = (int *)(*((_QWORD *)this + 12) + 8);
    while (1)
    {
      v5 = *v4;
      v4 += 8;
      if (v5 < 0)
        break;
      if (v2 == ++v3)
      {
        LODWORD(v3) = *((_DWORD *)this + 28);
        break;
      }
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if ((_DWORD)v2 != (_DWORD)v3)
  {
    v6 = v3;
    do
    {
      v7 = (unint64_t *)(*((_QWORD *)this + 12) + 32 * v6 + 16);
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)&v23, v7, v7);
      if (*((_DWORD *)this + 28) <= (v3 + 1))
        v8 = v3 + 1;
      else
        v8 = *((_DWORD *)this + 28);
      v9 = v3;
      while (1)
      {
        v6 = (v9 + 1);
        if (v8 - 1 == v9)
          break;
        ++v9;
        LODWORD(v3) = v6;
        if ((*(_DWORD *)(*((_QWORD *)this + 12) + 32 * v6 + 8) & 0x80000000) != 0)
          goto LABEL_17;
      }
      LODWORD(v3) = v8;
LABEL_17:
      ;
    }
    while ((_DWORD)v2 != (_DWORD)v3);
    for (i = (_QWORD *)v24; i; i = (_QWORD *)*i)
      re::ecs2::AudioPlayerComponent::doDestroy((re::ecs2::AudioPlayerComponent **)this, i[2]);
  }
  v11 = *((_QWORD *)this + 2);
  if (!v11)
  {
    v12 = 0;
    goto LABEL_24;
  }
  v12 = *(re::ecs2::NetworkComponent **)(v11 + 200);
  if (!v12)
  {
LABEL_24:
    v14 = 0;
    v13 = 1;
    goto LABEL_25;
  }
  v13 = re::ecs2::NetworkComponent::owningProcessType(*(re::ecs2::NetworkComponent **)(v11 + 200)) != 0;
  v14 = v13;
LABEL_25:
  if (re::ecs2::AudioPlayerComponent::audioService(this))
  {
    v15 = re::ecs2::AudioPlayerComponent::audioService(this);
    if ((((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 544))(v15) | v14) & 1) == 0)
    {
      v16 = *((unsigned int *)this + 16);
      if ((_DWORD)v16)
      {
        v17 = 0;
        v18 = (_DWORD *)(*((_QWORD *)this + 6) + 8);
        while ((*v18 & 0x80000000) == 0)
        {
          v18 += 72;
          if (v16 == ++v17)
          {
            LODWORD(v17) = *((_DWORD *)this + 16);
            break;
          }
        }
      }
      else
      {
        LODWORD(v17) = 0;
      }
      if ((_DWORD)v16 != (_DWORD)v17)
      {
        v19 = v17;
        do
        {
          *(_QWORD *)(*((_QWORD *)this + 6) + 288 * v19 + 56) = 4;
          if (v16 <= (int)v17 + 1)
            v20 = v17 + 1;
          else
            v20 = v16;
          v21 = v17;
          while (1)
          {
            v19 = (v21 + 1);
            if (v20 - 1 == v21)
              break;
            ++v21;
            LODWORD(v17) = v19;
            if ((*(_DWORD *)(*((_QWORD *)this + 6) + 288 * v19 + 8) & 0x80000000) != 0)
              goto LABEL_43;
          }
          LODWORD(v17) = v20;
LABEL_43:
          ;
        }
        while ((_DWORD)v16 != (_DWORD)v17);
      }
    }
  }
  if (!v13)
  {
    re::ecs2::Component::markDirty(this);
    re::ecs2::NetworkComponent::markDirty(v12, this);
  }
  return std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)&v23);
}

void re::ecs2::AudioPlayerSystem::willAddSystemToECSService(re::ecs2::AudioPlayerSystem *this)
{
  uint64_t v2;
  uint64_t Instance;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 5);
  Instance = re::ecs2::AudioPlayerTelemetryReporter::getInstance(this);
  re::ecs2::AudioPlayerTelemetryReporter::initializeTimerWith(Instance, *((void **)this + 13), (uint64_t)this);
  if (v2)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    v5 = re::ServiceLocator::serviceOrNull<re::Engine>(v4);
    if (v5)
      objc_storeStrong((id *)this + 13, *(id *)(v5 + 432));
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    *((_QWORD *)this + 20) = re::ServiceLocator::serviceOrNull<re::AudioSceneService>(v6);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    *((_QWORD *)this + 21) = re::ServiceLocator::serviceOrNull<re::TimebaseService>(v7);
    *((_QWORD *)this + 22) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  }
}

void re::ecs2::AudioPlayerSystem::willRemoveSystemFromECSService(re::ecs2::AudioPlayerSystem *this)
{
  if (re::ecs2::AudioPlayerTelemetryReporter::m_playerQueue)
    dispatch_sync((dispatch_queue_t)re::ecs2::AudioPlayerTelemetryReporter::m_playerQueue, &__block_literal_global_4_0);
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
}

uint64_t re::ecs2::AudioPlayerSystem::willAddSceneToECSService(uint64_t this, re::ecs2::Scene *a2)
{
  uint64_t v2;
  re::ecs2::SceneComponentTable *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[7];
  _QWORD v13[5];
  _QWORD v14[5];
  re::ecs2::Scene *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  if (a2)
  {
    v2 = this;
    v3 = (re::ecs2::Scene *)((char *)a2 + 200);
    v4 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v16 = v2;
    v17 = re::ecs2::AudioPlayerSystem::didAddComponents;
    v18 = 0;
    v19 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::createSubscription<re::ecs2::AudioPlayerSystem>(re::ecs2::AudioPlayerSystem *,REEventHandlerResult (re::ecs2::AudioPlayerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Slice<re::ecs2::AudioPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioPlayerComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 128), (uint64_t)&v16);
    v5 = re::ecs2::SceneComponentTable::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v16 = v2;
    v17 = re::ecs2::AudioPlayerSystem::didAddChannelAudioComponents;
    v18 = 0;
    v19 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>,re::Slice<re::ecs2::ChannelAudioComponent*>>::createSubscription<re::ecs2::AudioPlayerSystem>(re::ecs2::AudioPlayerSystem *,REEventHandlerResult (re::ecs2::AudioPlayerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>*,re::Slice<re::ecs2::ChannelAudioComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>,re::Slice<re::ecs2::ChannelAudioComponent*>>::Subscription const&,re::Slice<re::ecs2::ChannelAudioComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v5 + 128), (uint64_t)&v16);
    v6 = re::ecs2::SceneComponentTable::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v16 = v2;
    v17 = re::ecs2::AudioPlayerSystem::didAddAmbientAudioComponents;
    v18 = 0;
    v19 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>,re::Slice<re::ecs2::AmbientAudioComponent*>>::createSubscription<re::ecs2::AudioPlayerSystem>(re::ecs2::AudioPlayerSystem *,REEventHandlerResult (re::ecs2::AudioPlayerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>*,re::Slice<re::ecs2::AmbientAudioComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>,re::Slice<re::ecs2::AmbientAudioComponent*>>::Subscription const&,re::Slice<re::ecs2::AmbientAudioComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v6 + 128), (uint64_t)&v16);
    v7 = re::ecs2::SceneComponentTable::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v16 = v2;
    v17 = re::ecs2::AudioPlayerSystem::didAddSpatialAudioComponents;
    v18 = 0;
    v19 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SpatialAudioComponent>,re::Slice<re::ecs2::SpatialAudioComponent*>>::createSubscription<re::ecs2::AudioPlayerSystem>(re::ecs2::AudioPlayerSystem *,REEventHandlerResult (re::ecs2::AudioPlayerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::SpatialAudioComponent>*,re::Slice<re::ecs2::SpatialAudioComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SpatialAudioComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SpatialAudioComponent>,re::Slice<re::ecs2::SpatialAudioComponent*>>::Subscription const&,re::Slice<re::ecs2::SpatialAudioComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v7 + 128), (uint64_t)&v16);
    v16 = v2;
    v17 = re::ecs2::AudioPlayerSystem::willRemoveComponents;
    v18 = 0;
    v19 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::createSubscription<re::ecs2::AudioPlayerSystem>(re::ecs2::AudioPlayerSystem *,REEventHandlerResult (re::ecs2::AudioPlayerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Slice<re::ecs2::AudioPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioPlayerComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 392), (uint64_t)&v16);
    std::__hash_table<re::ecs2::Scene *,std::hash<re::ecs2::Scene *>,std::equal_to<re::ecs2::Scene *>,std::allocator<re::ecs2::Scene *>>::__emplace_unique_key_args<re::ecs2::Scene *,re::ecs2::Scene * const&>(v2 + 240, &v15, &v15);
    this = *(_QWORD *)(v2 + 160);
    if (this)
    {
      this = (*(uint64_t (**)(uint64_t, re::ecs2::Scene *))(*(_QWORD *)this + 16))(this, v15);
      if (this)
      {
        v8 = this;
        v9 = MEMORY[0x24BDAC760];
        v14[0] = MEMORY[0x24BDAC760];
        v14[1] = 3221225472;
        v14[2] = ___ZN2re4ecs217AudioPlayerSystem24willAddSceneToECSServiceEPNS0_5SceneE_block_invoke;
        v14[3] = &__block_descriptor_40_e5_v8__0l;
        v14[4] = v15;
        v10 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)this + 48))(this, v14);
        v16 = *(_QWORD *)(*((_QWORD *)v15 + 13) + 272) >> 1;
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((float *)(v2 + 200), v16, &v16)[3] = v10;
        v11 = *(_QWORD *)(*((_QWORD *)v15 + 13) + 272) >> 1;
        v13[0] = v9;
        v13[1] = 3221225472;
        v13[2] = ___ZN2re4ecs217AudioPlayerSystem24willAddSceneToECSServiceEPNS0_5SceneE_block_invoke_2;
        v13[3] = &__block_descriptor_40_e5_v8__0l;
        v13[4] = v15;
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v8 + 32))(v8, 513, v11, v13);
        v12[0] = v9;
        v12[1] = 3221225472;
        v12[2] = ___ZN2re4ecs217AudioPlayerSystem24willAddSceneToECSServiceEPNS0_5SceneE_block_invoke_3;
        v12[3] = &__block_descriptor_56_e5_v8__0l;
        v12[4] = v15;
        v12[5] = v8;
        v12[6] = v11;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v8 + 32))(v8, 769, v11, v12);
      }
    }
  }
  return this;
}

uint64_t ___ZN2re4ecs217AudioPlayerSystem24willAddSceneToECSServiceEPNS0_5SceneE_block_invoke(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  re::ecs2::AudioPlayerComponent **v3;
  uint64_t v4;
  re::ecs2::AudioPlayerComponent *v5;

  result = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*(_QWORD *)(a1 + 32) + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v2 = *(_QWORD *)(result + 24);
  if (v2)
  {
    v3 = *(re::ecs2::AudioPlayerComponent ***)(result + 40);
    v4 = 8 * v2;
    do
    {
      v5 = *v3++;
      result = re::ecs2::AudioPlayerComponent::clearAllSourceStates(v5);
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

void ___ZN2re4ecs217AudioPlayerSystem24willAddSceneToECSServiceEPNS0_5SceneE_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  re::ecs2::AudioPlayerComponent **v3;
  re::ecs2::AudioPlayerComponent **v4;
  re::ecs2::AudioPlayerComponent *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  re::ecs2::NetworkComponent *v13;

  v1 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*(_QWORD *)(a1 + 32) + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2)
  {
    v3 = *(re::ecs2::AudioPlayerComponent ***)(v1 + 40);
    v4 = &v3[v2];
    do
    {
      v5 = *v3;
      re::ecs2::AudioPlayerComponent::doStopAll(*v3);
      atomic_store(0, (unsigned int *)v5 + 80);
      v6 = *((unsigned int *)v5 + 16);
      if ((_DWORD)v6)
      {
        v7 = 0;
        v8 = (_DWORD *)(*((_QWORD *)v5 + 6) + 8);
        while ((*v8 & 0x80000000) == 0)
        {
          v8 += 72;
          if (v6 == ++v7)
          {
            LODWORD(v7) = *((_DWORD *)v5 + 16);
            break;
          }
        }
      }
      else
      {
        LODWORD(v7) = 0;
      }
      if ((_DWORD)v6 != (_DWORD)v7)
      {
        v9 = v7;
        do
        {
          *(_QWORD *)(*((_QWORD *)v5 + 6) + 288 * v9 + 72) = 0;
          if (v6 <= (int)v7 + 1)
            v10 = v7 + 1;
          else
            v10 = v6;
          v11 = v7;
          while (1)
          {
            v9 = (v11 + 1);
            if (v10 - 1 == v11)
              break;
            ++v11;
            LODWORD(v7) = v9;
            if ((*(_DWORD *)(*((_QWORD *)v5 + 6) + 288 * v9 + 8) & 0x80000000) != 0)
              goto LABEL_19;
          }
          LODWORD(v7) = v10;
LABEL_19:
          ;
        }
        while ((_DWORD)v6 != (_DWORD)v7);
      }
      v12 = *((_QWORD *)v5 + 2);
      if (v12)
      {
        v13 = *(re::ecs2::NetworkComponent **)(v12 + 200);
        if (v13)
        {
          if (!re::ecs2::NetworkComponent::owningProcessType(*(re::ecs2::NetworkComponent **)(v12 + 200)))
            re::ecs2::NetworkComponent::markDirty(v13, v5);
        }
      }
      ++v3;
    }
    while (v3 != v4);
  }
}

uint64_t ___ZN2re4ecs217AudioPlayerSystem24willAddSceneToECSServiceEPNS0_5SceneE_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  re::ecs2::AudioPlayerComponent **v4;
  uint64_t v5;
  re::ecs2::AudioPlayerComponent *v6;

  v2 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*(_QWORD *)(a1 + 32) + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
  {
    v4 = *(re::ecs2::AudioPlayerComponent ***)(v2 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      re::ecs2::AudioPlayerComponent::clearAllSourceStates(v6);
      v5 -= 8;
    }
    while (v5);
  }
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 88))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 48), 1);
}

uint64_t re::ecs2::AudioPlayerSystem::willRemoveSceneFromECSService(uint64_t this, re::ecs2::Scene *a2)
{
  uint64_t v2;
  re::ecs2::SceneComponentTable *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  re::ecs2::Scene *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v11 = a2;
  if (a2)
  {
    v2 = this;
    v3 = (re::ecs2::Scene *)((char *)a2 + 200);
    v4 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    *(_QWORD *)&v12 = v2;
    *((_QWORD *)&v12 + 1) = re::ecs2::AudioPlayerSystem::didAddComponents;
    v13 = 0;
    v14 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::createSubscription<re::ecs2::AudioPlayerSystem>(re::ecs2::AudioPlayerSystem *,REEventHandlerResult (re::ecs2::AudioPlayerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Slice<re::ecs2::AudioPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioPlayerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 128, &v12);
    *(_QWORD *)&v12 = v2;
    *((_QWORD *)&v12 + 1) = re::ecs2::AudioPlayerSystem::willRemoveComponents;
    v13 = 0;
    v14 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::createSubscription<re::ecs2::AudioPlayerSystem>(re::ecs2::AudioPlayerSystem *,REEventHandlerResult (re::ecs2::AudioPlayerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Slice<re::ecs2::AudioPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioPlayerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 392, &v12);
    v5 = re::ecs2::SceneComponentTable::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    *(_QWORD *)&v12 = v2;
    *((_QWORD *)&v12 + 1) = re::ecs2::AudioPlayerSystem::didAddChannelAudioComponents;
    v13 = 0;
    v14 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>,re::Slice<re::ecs2::ChannelAudioComponent*>>::createSubscription<re::ecs2::AudioPlayerSystem>(re::ecs2::AudioPlayerSystem *,REEventHandlerResult (re::ecs2::AudioPlayerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>*,re::Slice<re::ecs2::ChannelAudioComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>,re::Slice<re::ecs2::ChannelAudioComponent*>>::Subscription const&,re::Slice<re::ecs2::ChannelAudioComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v5 + 128, &v12);
    v6 = re::ecs2::SceneComponentTable::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    *(_QWORD *)&v12 = v2;
    *((_QWORD *)&v12 + 1) = re::ecs2::AudioPlayerSystem::didAddAmbientAudioComponents;
    v13 = 0;
    v14 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>,re::Slice<re::ecs2::AmbientAudioComponent*>>::createSubscription<re::ecs2::AudioPlayerSystem>(re::ecs2::AudioPlayerSystem *,REEventHandlerResult (re::ecs2::AudioPlayerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>*,re::Slice<re::ecs2::AmbientAudioComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>,re::Slice<re::ecs2::AmbientAudioComponent*>>::Subscription const&,re::Slice<re::ecs2::AmbientAudioComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v6 + 128, &v12);
    v7 = re::ecs2::SceneComponentTable::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    *(_QWORD *)&v12 = v2;
    *((_QWORD *)&v12 + 1) = re::ecs2::AudioPlayerSystem::didAddSpatialAudioComponents;
    v13 = 0;
    v14 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SpatialAudioComponent>,re::Slice<re::ecs2::SpatialAudioComponent*>>::createSubscription<re::ecs2::AudioPlayerSystem>(re::ecs2::AudioPlayerSystem *,REEventHandlerResult (re::ecs2::AudioPlayerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::SpatialAudioComponent>*,re::Slice<re::ecs2::SpatialAudioComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SpatialAudioComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SpatialAudioComponent>,re::Slice<re::ecs2::SpatialAudioComponent*>>::Subscription const&,re::Slice<re::ecs2::SpatialAudioComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v7 + 128, &v12);
    std::__hash_table<re::ecs2::Scene *,std::hash<re::ecs2::Scene *>,std::equal_to<re::ecs2::Scene *>,std::allocator<re::ecs2::Scene *>>::__erase_unique<re::ecs2::Scene *>((_QWORD *)(v2 + 240), &v11);
    this = *(_QWORD *)(v2 + 160);
    if (this)
    {
      this = (*(uint64_t (**)(uint64_t, re::ecs2::Scene *))(*(_QWORD *)this + 16))(this, v11);
      if (this)
      {
        v8 = this;
        *(_QWORD *)&v12 = *(_QWORD *)(*((_QWORD *)v11 + 13) + 272) >> 1;
        v9 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((float *)(v2 + 200), v12, &v12);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 56))(v8, v9[3]);
        v10 = *(_QWORD *)(*((_QWORD *)v11 + 13) + 272) >> 1;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, 513, v10);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, 769, v10);
      }
    }
  }
  return this;
}

uint64_t re::ecs2::AudioPlayerSystem::didAddComponents(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  re *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t TimebaseService;
  uint64_t v43;
  re::TimebaseService *v44;
  unsigned int v45;
  unsigned int v46;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  id obj;
  _QWORD *v53;
  uint64_t v54;
  uint8_t buf[4];
  unint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  int v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v51 = *(_QWORD *)(a2 + 120);
  v7 = *(_QWORD *)(*(_QWORD *)(v51 + 104) + 272);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
  v9 = re::ServiceLocator::serviceOrNull<re::Engine>(v8);
  if (v9)
  {
    obj = *(id *)(v9 + 432);
  }
  else
  {
    obj = (id)MEMORY[0x24BDAC9B8];
    v10 = MEMORY[0x24BDAC9B8];
  }
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
  v12 = re::ServiceLocator::serviceOrNull<re::SharedClockService>(v11);
  if (a4)
  {
    v13 = v12;
    v48 = &a3[a4];
    v49 = v7 >> 1;
    v54 = a1 + 112;
    v50 = v12;
    do
    {
      v14 = *a3;
      if (v13)
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
      v15 = (id)*re::audioLogObjects((re *)v12);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *(_QWORD *)(v14 + 304);
        if (!v16)
          v16 = *(_QWORD *)(v14 + 352);
        v17 = *(_QWORD *)(v14 + 16);
        if (v17)
        {
          v18 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v17 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
          if (v18)
            v17 = *(_QWORD *)(v18 + 32);
          else
            v17 = 0;
        }
        v19 = *(_QWORD *)(v14 + 144);
        v20 = *(_DWORD *)(v14 + 60);
        *(_DWORD *)buf = 134219008;
        v56 = v16;
        v57 = 2048;
        v58 = v14;
        v59 = 2048;
        v60 = v17;
        v61 = 2048;
        v62 = v19;
        v63 = 1024;
        v64 = v20;
        _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, "Adding AudioPlayerComponent (entityID=%llu) %p (connection=%llu) with %zu source states and %u sync states.", buf, 0x30u);
      }
      v53 = a3;

      objc_storeStrong((id *)(v14 + 288), obj);
      v21 = *(_QWORD *)(v14 + 144);
      if (v21)
      {
        v22 = *(_QWORD **)(v14 + 160);
        v23 = &v22[v21];
        do
        {
          v24 = (_QWORD *)*v22;
          if (*v22)
            v25 = v24 + 1;
          v24[56] = v49;
          v26 = v24[85];
          v27 = re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v54, v51);
          if (v27)
          {
            if (*(_QWORD *)v27)
            {
              v28 = 0x94D049BB133111EBLL
                  * ((0xBF58476D1CE4E5B9 * (v26 ^ (v26 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v26 ^ (v26 >> 30))) >> 27));
              v29 = *(unsigned int *)(*(_QWORD *)(v27 + 8) + 4 * ((v28 ^ (v28 >> 31)) % *(unsigned int *)(v27 + 24)));
              if ((_DWORD)v29 != 0x7FFFFFFF)
              {
                v30 = *(_QWORD *)(v27 + 16);
                while (*(_QWORD *)(v30 + 32 * v29 + 16) != v26)
                {
                  v29 = *(_DWORD *)(v30 + 32 * v29 + 8) & 0x7FFFFFFF;
                  if ((_DWORD)v29 == 0x7FFFFFFF)
                    goto LABEL_29;
                }
                re::HashTable<unsigned long long,re::SharedPtr<re::AudioSourceState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(v27, v26);
                v32 = *re::audioLogObjects(v31);
                if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 134217984;
                  v56 = v26;
                  _os_log_impl(&dword_224FE9000, v32, OS_LOG_TYPE_DEFAULT, "[RE/ECS] [Update] didAddSourceState() matched a stale source state to an AudioPlayerComponent with token: %llu", buf, 0xCu);
                }
              }
            }
          }
LABEL_29:

          ++v22;
        }
        while (v22 != v23);
      }
      v33 = *(unsigned int *)(v14 + 64);
      if ((_DWORD)v33)
      {
        v34 = 0;
        v35 = (_DWORD *)(*(_QWORD *)(v14 + 48) + 8);
        while ((*v35 & 0x80000000) == 0)
        {
          v35 += 72;
          if (v33 == ++v34)
          {
            LODWORD(v34) = *(_DWORD *)(v14 + 64);
            break;
          }
        }
      }
      else
      {
        LODWORD(v34) = 0;
      }
      if ((_DWORD)v33 != (_DWORD)v34)
      {
        v36 = v34;
        do
        {
          v37 = *(_QWORD *)(v14 + 48);
          v38 = v37 + 288 * v36;
          v12 = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v14 + 80, (uint64_t *)(v38 + 16));
          if (v12)
          {
            if (*(_BYTE *)(*(_QWORD *)v12 + 488))
            {
              v39 = v37 + 288 * v36;
              v41 = *(_QWORD *)(v39 + 72);
              v40 = (_QWORD *)(v39 + 72);
              if (v41)
              {
                TimebaseService = re::ecs2::AudioPlayerComponent::getTimebaseService(*(re::ecs2::AudioPlayerComponent **)(v14 + 16));
                v12 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)TimebaseService + 120))(TimebaseService, *v40);
                if ((v12 & 1) == 0)
                {
                  *v40 = 0;
                  v43 = *(_QWORD *)(v38 + 16);
                  v44 = (re::TimebaseService *)re::ecs2::AudioPlayerComponent::getTimebaseService(*(re::ecs2::AudioPlayerComponent **)(v14 + 16));
                  v12 = re::ecs2::AudioPlayerComponent::completeTimebasePreparation((re::ecs2::AudioPlayerComponent *)v14, v43, (re::AudioSourceSyncState *)(v38 + 24), v44);
                }
              }
            }
          }
          v45 = *(_DWORD *)(v14 + 64);
          if (v45 <= (int)v34 + 1)
            v45 = v34 + 1;
          while (1)
          {
            v36 = (v34 + 1);
            if (v45 - 1 == (_DWORD)v34)
              break;
            LODWORD(v34) = v34 + 1;
            v46 = v36;
            if ((*(_DWORD *)(*(_QWORD *)(v14 + 48) + 288 * v36 + 8) & 0x80000000) != 0)
              goto LABEL_49;
          }
          v46 = v45;
LABEL_49:
          LODWORD(v34) = v46;
        }
        while ((_DWORD)v33 != v46);
      }
      a3 = v53 + 1;
      v13 = v50;
    }
    while (v53 + 1 != v48);
  }

  return 0;
}

uint64_t re::ecs2::AudioPlayerSystem::didAddChannelAudioComponents(re *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  re::ecs2::EntityComponentCollection *v8;
  uint64_t v9;
  const __int16 *v10;
  int16x8_t *v11;
  int16x8_t v12;
  int v13;
  int16x8_t *v14;
  uint64_t v15;
  uint16x8_t v16;
  const __int16 *v17;
  int16x8_t v18;
  int v19;
  uint16x8_t v20;
  NSObject *v21;
  uint8_t buf[16];

  if (a4)
  {
    v4 = a3;
    v5 = a3 + 8 * a4;
    v6 = (int8x16_t)xmmword_2260F1E80;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)v4 + 16);
      if (v7)
      {
        v8 = (re::ecs2::EntityComponentCollection *)(v7 + 32);
        v9 = *(unsigned __int16 *)(v7 + 82);
        if (*(_WORD *)(v7 + 82))
        {
          v10 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                + 16);
          v11 = *(int16x8_t **)(v7 + 88);
          v12 = vld1q_dup_s16(v10);
          v13 = 1;
          v14 = v11;
          v15 = *(unsigned __int16 *)(v7 + 82);
          while (1)
          {
            v16 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v12, *v14), v6);
            v16.i16[0] = vmaxvq_u16(v16);
            if (v16.i32[0])
              break;
            v13 -= 8;
            ++v14;
            if (!--v15)
              goto LABEL_10;
          }
          if (v16.u16[0] - v13 < *(unsigned __int16 *)(v7 + 80))
          {
LABEL_15:
            v21 = *re::audioLogObjects(a1);
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_224FE9000, v21, OS_LOG_TYPE_DEFAULT, "An entity may only have a single audio component at a time. The previous audio component is being removed.", buf, 2u);
            }
            re::ecs2::EntityComponentCollection::remove(v8, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            re::ecs2::EntityComponentCollection::remove(v8, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            goto LABEL_18;
          }
LABEL_10:
          v17 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                + 16);
          v18 = vld1q_dup_s16(v17);
          v19 = 1;
          while (1)
          {
            v20 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v18, *v11), v6);
            v20.i16[0] = vmaxvq_u16(v20);
            if (v20.i32[0])
              break;
            v19 -= 8;
            ++v11;
            if (!--v9)
              goto LABEL_18;
          }
          if (v20.u16[0] - v19 < *(unsigned __int16 *)(v7 + 80))
            goto LABEL_15;
        }
LABEL_18:
        a1 = (re *)re::ecs2::EntityComponentCollection::getOrAdd(v8, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        v6 = (int8x16_t)xmmword_2260F1E80;
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  return 0;
}

uint64_t re::ecs2::AudioPlayerSystem::didAddAmbientAudioComponents(re *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  re::ecs2::EntityComponentCollection *v8;
  uint64_t v9;
  const __int16 *v10;
  int16x8_t *v11;
  int16x8_t v12;
  int v13;
  int16x8_t *v14;
  uint64_t v15;
  uint16x8_t v16;
  const __int16 *v17;
  int16x8_t v18;
  int v19;
  uint16x8_t v20;
  NSObject *v21;
  uint8_t buf[16];

  if (a4)
  {
    v4 = a3;
    v5 = a3 + 8 * a4;
    v6 = (int8x16_t)xmmword_2260F1E80;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)v4 + 16);
      if (v7)
      {
        v8 = (re::ecs2::EntityComponentCollection *)(v7 + 32);
        v9 = *(unsigned __int16 *)(v7 + 82);
        if (*(_WORD *)(v7 + 82))
        {
          v10 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                + 16);
          v11 = *(int16x8_t **)(v7 + 88);
          v12 = vld1q_dup_s16(v10);
          v13 = 1;
          v14 = v11;
          v15 = *(unsigned __int16 *)(v7 + 82);
          while (1)
          {
            v16 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v12, *v14), v6);
            v16.i16[0] = vmaxvq_u16(v16);
            if (v16.i32[0])
              break;
            v13 -= 8;
            ++v14;
            if (!--v15)
              goto LABEL_10;
          }
          if (v16.u16[0] - v13 < *(unsigned __int16 *)(v7 + 80))
          {
LABEL_15:
            v21 = *re::audioLogObjects(a1);
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_224FE9000, v21, OS_LOG_TYPE_DEFAULT, "An entity may only have a single audio component at a time. The previous audio component is being removed.", buf, 2u);
            }
            re::ecs2::EntityComponentCollection::remove(v8, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            re::ecs2::EntityComponentCollection::remove(v8, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            goto LABEL_18;
          }
LABEL_10:
          v17 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                + 16);
          v18 = vld1q_dup_s16(v17);
          v19 = 1;
          while (1)
          {
            v20 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v18, *v11), v6);
            v20.i16[0] = vmaxvq_u16(v20);
            if (v20.i32[0])
              break;
            v19 -= 8;
            ++v11;
            if (!--v9)
              goto LABEL_18;
          }
          if (v20.u16[0] - v19 < *(unsigned __int16 *)(v7 + 80))
            goto LABEL_15;
        }
LABEL_18:
        a1 = (re *)re::ecs2::EntityComponentCollection::getOrAdd(v8, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        v6 = (int8x16_t)xmmword_2260F1E80;
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  return 0;
}

uint64_t re::ecs2::AudioPlayerSystem::didAddSpatialAudioComponents(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  int8x16_t v6;
  uint64_t v7;
  uint64_t v8;
  re::ecs2::EntityComponentCollection *v9;
  uint64_t v10;
  const __int16 *v11;
  int16x8_t *v12;
  int16x8_t v13;
  int v14;
  int16x8_t *v15;
  uint64_t v16;
  uint16x8_t v17;
  const __int16 *v18;
  int16x8_t v19;
  int v20;
  uint16x8_t v21;
  NSObject *v22;
  uint8_t buf[16];

  if (a4)
  {
    v4 = a3;
    v5 = &a3[a4];
    v6 = (int8x16_t)xmmword_2260F1E80;
    do
    {
      v7 = *v4;
      v8 = *(_QWORD *)(*v4 + 16);
      if (v8)
      {
        v9 = (re::ecs2::EntityComponentCollection *)(v8 + 32);
        v10 = *(unsigned __int16 *)(v8 + 82);
        if (*(_WORD *)(v8 + 82))
        {
          v11 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                + 16);
          v12 = *(int16x8_t **)(v8 + 88);
          v13 = vld1q_dup_s16(v11);
          v14 = 1;
          v15 = v12;
          v16 = *(unsigned __int16 *)(v8 + 82);
          while (1)
          {
            v17 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v13, *v15), v6);
            v17.i16[0] = vmaxvq_u16(v17);
            if (v17.i32[0])
              break;
            v14 -= 8;
            ++v15;
            if (!--v16)
              goto LABEL_10;
          }
          if (v17.u16[0] - v14 < *(unsigned __int16 *)(v8 + 80))
          {
LABEL_15:
            v22 = *re::audioLogObjects((re *)a1);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_224FE9000, v22, OS_LOG_TYPE_DEFAULT, "An entity may only have a single audio component at a time. The previous audio component is being removed.", buf, 2u);
            }
            re::ecs2::EntityComponentCollection::remove(v9, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            re::ecs2::EntityComponentCollection::remove(v9, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            goto LABEL_18;
          }
LABEL_10:
          v18 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                + 16);
          v19 = vld1q_dup_s16(v18);
          v20 = 1;
          while (1)
          {
            v21 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v19, *v12), v6);
            v21.i16[0] = vmaxvq_u16(v21);
            if (v21.i32[0])
              break;
            v20 -= 8;
            ++v12;
            if (!--v10)
              goto LABEL_18;
          }
          if (v21.u16[0] - v20 < *(unsigned __int16 *)(v8 + 80))
            goto LABEL_15;
        }
LABEL_18:
        a1 = re::ecs2::EntityComponentCollection::getOrAdd(v9, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        v6 = (int8x16_t)xmmword_2260F1E80;
        *(_QWORD *)(a1 + 276) = *(_QWORD *)(v7 + 28);
        *(_DWORD *)(a1 + 284) = *(_DWORD *)(v7 + 36);
      }
      ++v4;
    }
    while (v4 != v5);
  }
  return 0;
}

uint64_t re::ecs2::AudioPlayerSystem::willRemoveComponents(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  re::ecs2::AudioPlayerTelemetryReporter *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t Instance;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  re *v17;
  NSObject *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  NSObject *v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  void *v60;
  _QWORD *v62;
  unint64_t v63;
  re::ecs2::AudioPlayerTelemetryReporter *v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _BYTE block[24];
  void *v70;
  _BYTE v71[12];
  unsigned int v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a2 + 120);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
  v9 = (re::ecs2::AudioPlayerTelemetryReporter *)re::ServiceLocator::serviceOrNull<re::SharedClockService>(v8);
  v64 = v9;
  if (a4)
  {
    v62 = &a3[a4];
    v10 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) >> 27));
    v65 = (unint64_t *)(a1 + 112);
    v66 = v10 ^ (v10 >> 31);
    v63 = v7;
    while (1)
    {
      v11 = (_QWORD *)*a3;
      Instance = re::ecs2::AudioPlayerTelemetryReporter::getInstance(v9);
      v13 = (unsigned int *)(v11 + 39);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(0, v13));
      v15 = (unsigned int *)v11 + 79;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(0, v15));
      *(_QWORD *)block = MEMORY[0x24BDAC760];
      *(_QWORD *)&block[8] = 3221225472;
      *(_QWORD *)&block[16] = ___ZN2re4ecs228AudioPlayerTelemetryReporter11updateCountEjj_block_invoke;
      v70 = &__block_descriptor_48_e5_v8__0l;
      *(_QWORD *)v71 = Instance;
      *(_DWORD *)&v71[8] = v14;
      v72 = v16;
      dispatch_async((dispatch_queue_t)re::ecs2::AudioPlayerTelemetryReporter::m_playerQueue, block);
      v68 = v11;
      if (v11[18])
      {
        v18 = (id)*re::audioLogObjects(v17);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          v19 = v11;
          v20 = v11[38];
          if (!v20)
            v20 = v19[44];
          v21 = v19[2];
          if (v21)
          {
            v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v21 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
            if (v22)
              v21 = *(_QWORD *)(v22 + 32);
            else
              v21 = 0;
          }
          v23 = v68[18];
          *(_DWORD *)block = 134218752;
          *(_QWORD *)&block[4] = v20;
          v11 = v68;
          *(_WORD *)&block[12] = 2048;
          *(_QWORD *)&block[14] = v68;
          *(_WORD *)&block[22] = 2048;
          v70 = (void *)v21;
          *(_WORD *)v71 = 2048;
          *(_QWORD *)&v71[2] = v23;
          _os_log_impl(&dword_224FE9000, v18, OS_LOG_TYPE_DEFAULT, "Removing AudioPlayerComponent (entityID=%llu) %p (connection=%llu) with %zu source states", block, 0x2Au);
        }

      }
      v24 = *v65;
      v67 = a3;
      if (!*v65
        || (v24 = v66 % *(unsigned int *)(a1 + 136),
            v25 = *(unsigned int *)(*(_QWORD *)(a1 + 120) + 4 * v24),
            (_DWORD)v25 == 0x7FFFFFFF))
      {
LABEL_22:
        v27 = *(unsigned int *)(a1 + 148);
        if ((_DWORD)v27 == 0x7FFFFFFF)
        {
          v27 = *(unsigned int *)(a1 + 144);
          v28 = v27;
          if ((_DWORD)v27 == *(_DWORD *)(a1 + 136))
          {
            re::HashTable<re::ecs2::Scene const*,re::HashTable<unsigned long long,re::SharedPtr<re::AudioSourceState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::setCapacity((uint64_t)v65, 2 * *(_DWORD *)(a1 + 140));
            v24 = v66 % *(unsigned int *)(a1 + 136);
            v28 = *(_DWORD *)(a1 + 144);
          }
          *(_DWORD *)(a1 + 144) = v28 + 1;
          v29 = *(_QWORD *)(a1 + 128);
          v30 = *(_DWORD *)(v29 + 72 * v27 + 8);
        }
        else
        {
          v29 = *(_QWORD *)(a1 + 128);
          v30 = *(_DWORD *)(v29 + 72 * v27 + 8);
          *(_DWORD *)(a1 + 148) = v30 & 0x7FFFFFFF;
        }
        *(_DWORD *)(v29 + 72 * v27 + 8) = v30 | 0x80000000;
        *(_DWORD *)(*(_QWORD *)(a1 + 128) + 72 * v27 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 128) + 72 * v27 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 120) + 4 * v24);
        *(_QWORD *)(*(_QWORD *)(a1 + 128) + 72 * v27) = v66;
        *(_QWORD *)(*(_QWORD *)(a1 + 128) + 72 * v27 + 16) = v7;
        v31 = *(_QWORD *)(a1 + 128) + 72 * v27;
        *(_OWORD *)(v31 + 56) = 0u;
        *(_OWORD *)(v31 + 40) = 0u;
        *(_OWORD *)(v31 + 24) = 0u;
        *(_DWORD *)(v31 + 60) = 0x7FFFFFFF;
        *(_DWORD *)(*(_QWORD *)(a1 + 120) + 4 * v24) = v27;
        ++*(_DWORD *)(a1 + 140);
        ++*(_DWORD *)(a1 + 152);
        v32 = *(_QWORD *)(a1 + 128) + 72 * v27 + 24;
        v11 = v68;
      }
      else
      {
        v26 = *(_QWORD *)(a1 + 128);
        while (*(_QWORD *)(v26 + 72 * v25 + 16) != v7)
        {
          LODWORD(v25) = *(_DWORD *)(v26 + 72 * v25 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v25 == 0x7FFFFFFF)
            goto LABEL_22;
        }
        v32 = v26 + 72 * v25 + 24;
      }
      v33 = v11[18];
      if (v33)
        break;
LABEL_58:
      v56 = (uint64_t *)v68[41];
      v57 = (uint64_t *)v68[42];
      if (v56 != v57)
      {
        do
        {
          v58 = *v56;
          if (*v56)
          {
            v59 = re::globalAllocators(v17);
            v17 = (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v59[2] + 40))(v59[2], v58);
          }
          ++v56;
        }
        while (v56 != v57);
        v56 = (uint64_t *)v68[41];
      }
      v68[42] = v56;
      v7 = v63;
      if (v64)
        (*(void (**)(re::ecs2::AudioPlayerTelemetryReporter *))(*(_QWORD *)v64 + 40))(v64);
      v60 = (void *)v68[36];
      v68[36] = 0;

      a3 = v67 + 1;
      if (v67 + 1 == v62)
        return 0;
    }
    v34 = (uint64_t *)v68[20];
    v35 = &v34[v33];
    while (1)
    {
      v36 = *v34;
      if (*v34)
        v17 = (re *)(id)(v36 + 8);
      v37 = *(_QWORD *)(v36 + 680);
      v38 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v37 ^ (v37 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v37 ^ (v37 >> 30))) >> 27));
      v39 = v38 ^ (v38 >> 31);
      if (!*(_QWORD *)v32)
        break;
      v40 = v39 % *(unsigned int *)(v32 + 24);
      v41 = *(unsigned int *)(*(_QWORD *)(v32 + 8) + 4 * v40);
      if ((_DWORD)v41 == 0x7FFFFFFF)
        goto LABEL_40;
      v42 = *(_QWORD *)(v32 + 16);
      while (*(_QWORD *)(v42 + 32 * v41 + 16) != v37)
      {
        v43 = *(_DWORD *)(v42 + 32 * v41 + 8);
        v41 = v43 & 0x7FFFFFFF;
        if ((v43 & 0x7FFFFFFF) == 0x7FFFFFFF)
          goto LABEL_40;
      }
      v52 = v42 + 32 * v41;
      v55 = *(_QWORD *)(v52 + 24);
      v54 = (_QWORD *)(v52 + 24);
      v53 = v55;
      if (v55)
      {

        *v54 = 0;
        v42 = *(_QWORD *)(v32 + 16);
      }
      *(_QWORD *)(v42 + 32 * v41 + 24) = v36;
      if (v36)
        v17 = (re *)(id)(v36 + 8);
LABEL_48:
      ++*(_DWORD *)(v32 + 40);
      v49 = *re::audioLogObjects(v17);
      v17 = (re *)os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v17)
      {
        v50 = v49;
        v51 = *(_QWORD *)(v36 + 680);
        *(_DWORD *)block = 134217984;
        *(_QWORD *)&block[4] = v51;
        _os_log_impl(&dword_224FE9000, v50, OS_LOG_TYPE_DEFAULT, "[RE/ECS] [Update] Added stale source state with token: %llu", block, 0xCu);

LABEL_51:
        goto LABEL_52;
      }
      if (v36)
        goto LABEL_51;
LABEL_52:
      if (++v34 == v35)
        goto LABEL_58;
    }
    v40 = 0;
LABEL_40:
    v44 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v44 == 0x7FFFFFFF)
    {
      v44 = *(unsigned int *)(v32 + 32);
      v45 = v44;
      if ((_DWORD)v44 == *(_DWORD *)(v32 + 24))
      {
        re::HashTable<unsigned long long,re::SharedPtr<re::SharedObject>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(v32, 2 * *(_DWORD *)(v32 + 28));
        v40 = v39 % *(unsigned int *)(v32 + 24);
        v45 = *(_DWORD *)(v32 + 32);
      }
      *(_DWORD *)(v32 + 32) = v45 + 1;
      v46 = *(_QWORD *)(v32 + 16);
      v47 = *(_DWORD *)(v46 + 32 * v44 + 8);
    }
    else
    {
      v46 = *(_QWORD *)(v32 + 16);
      v47 = *(_DWORD *)(v46 + 32 * v44 + 8);
      *(_DWORD *)(v32 + 36) = v47 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v46 + 32 * v44 + 8) = v47 | 0x80000000;
    v48 = *(_QWORD *)(v32 + 8);
    *(_DWORD *)(*(_QWORD *)(v32 + 16) + 32 * v44 + 8) = *(_DWORD *)(*(_QWORD *)(v32 + 16) + 32 * v44 + 8) & 0x80000000 | *(_DWORD *)(v48 + 4 * v40);
    *(_QWORD *)(*(_QWORD *)(v32 + 16) + 32 * v44) = v39;
    *(_QWORD *)(*(_QWORD *)(v32 + 16) + 32 * v44 + 16) = v37;
    *(_QWORD *)(*(_QWORD *)(v32 + 16) + 32 * v44 + 24) = v36;
    if (v36)
    {
      v17 = (re *)(id)(v36 + 8);
      v48 = *(_QWORD *)(v32 + 8);
    }
    *(_DWORD *)(v48 + 4 * v40) = v44;
    ++*(_DWORD *)(v32 + 28);
    goto LABEL_48;
  }
  return 0;
}

uint64_t re::ecs2::AudioPlayerSystem::update(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v6;
  re *isStatisticCollectionEnabled;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64x2_t *v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  float v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  re *v81;
  NSObject *v82;
  int v83;
  int v84;
  unint64_t v85;
  uint64_t OwnerPeerID;
  __int128 v87;
  uint64_t v88;
  float v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  re *canModifyState;
  NSObject *v101;
  uint64_t v102;
  uint64_t v103;
  int *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  re::AudioSourceState *v109;
  unint64_t *v110;
  int v111;
  int v112;
  NSObject *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  re *v124;
  OpaqueCMTimebase *v125;
  BOOL v126;
  CMClockOrTimebaseRef v127;
  const void *v128;
  uint64_t (*v129)(_QWORD);
  NSObject *v130;
  uint64_t v131;
  int v132;
  int v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  int *v144;
  int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  float v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int *v155;
  int v156;
  uint64_t v157;
  int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  int v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  re::audio **v171;
  NSObject *v172;
  uint8_t *v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  id v178;
  re::ecs2::NetworkComponent *v179;
  int v180;
  const re::ecs2::Component *v181;
  const re::ecs2::Component *v182;
  uint64_t v183;
  _OWORD *v184;
  float v185;
  __CFString *v186;
  __CFString *v187;
  unsigned __int8 v188;
  void *v189;
  void *v190;
  id v191;
  void *v192;
  void *v193;
  id v194;
  const char *v195;
  size_t v196;
  size_t v197;
  uint8_t *v198;
  uint64_t v199;
  uint8_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _DWORD *v204;
  uint8_t *v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int v210;
  uint64_t v211;
  re::AssetHandle *v212;
  uint64_t *v213;
  uint64_t *v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  re::ecs2::NetworkComponent *v222;
  int v223;
  NSObject *v224;
  uint64_t v225;
  unsigned int v226;
  re::AudioFileAsset *v227;
  _QWORD *v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  float updated;
  re::AudioGeneratorAsset *v237;
  uint64_t v238;
  unint64_t v239;
  int v240;
  re::GainController *v241;
  _QWORD *v242;
  uint64_t v243;
  char v244;
  int v245;
  float v246;
  float v247;
  re::GainController *v248;
  re::GainController *v249;
  float v250;
  uint64_t v251;
  float *v252;
  float v253;
  float v254;
  int v255;
  BOOL v256;
  float v257;
  double v258;
  BOOL v259;
  float v260;
  int v261;
  uint64_t v262;
  uint64_t *v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  float v267;
  double v268;
  float v269;
  re::DynamicString *v270;
  re *IsReadyToCompletePreparation;
  __int128 *v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  uint64_t v277;
  OpaqueCMTimebase *v278;
  double EffectiveRate;
  uint64_t v280;
  float v281;
  uint64_t v282;
  OpaqueCMTimebase *v283;
  double v284;
  double v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  unsigned int v290;
  int v291;
  int v292;
  NSObject *v293;
  NSObject *v294;
  uint64_t v295;
  _DWORD *v296;
  uint64_t v297;
  uint64_t v298;
  int *v299;
  int v300;
  uint64_t v301;
  unsigned int v302;
  int v303;
  int v304;
  double *v305;
  double *v306;
  double *v307;
  uint64_t v308;
  uint64_t v309;
  _DWORD *v310;
  uint64_t v311;
  unsigned int v312;
  uint64_t v313;
  uint64_t v314;
  unsigned int v315;
  unsigned int v316;
  uint64_t v317;
  uint64_t *v318;
  uint64_t v319;
  id v320;
  unint64_t v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int *v328;
  int v329;
  uint64_t v330;
  unint64_t *v331;
  uint64_t v332;
  uint64_t *v333;
  float v334;
  float v335;
  uint64_t *v336;
  float *v337;
  uint64_t v338;
  unint64_t v339;
  unint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  uint64_t v346;
  int v347;
  uint64_t v348;
  void *v349;
  void *v350;
  double v351;
  int v352;
  int v353;
  unsigned int v354;
  uint64_t v355;
  int *v356;
  int v357;
  uint64_t v358;
  uint64_t v359;
  unsigned int v360;
  int v361;
  unsigned int v362;
  uint64_t v363;
  int v364;
  unsigned int v365;
  uint64_t Instance;
  uint64_t v367;
  re::ecs2::AudioPlayerTelemetryReporter *v368;
  uint64_t v369;
  __int128 v370;
  uint64_t v371;
  re::TimebaseService *v372;
  int v373;
  uint64_t v374;
  uint64_t v375;
  re::GainController *v376;
  uint64_t *v377;
  __int128 v378;
  unsigned int *v379;
  __int128 v380;
  re::DynamicString *v381[2];
  int v382;
  __int128 v383;
  __int128 v384;
  uint64_t v385;
  unint64_t v386;
  uint64_t *v387;
  int v388;
  int v389;
  _QWORD *v390;
  __int128 v391;
  float v392;
  uint64_t v393;
  __int128 v394;
  uint64_t *v395;
  int v396;
  __int128 v397;
  uint64_t v398;
  uint64_t *v399;
  re::AudioService *v400;
  uint64_t v401;
  _BYTE v402[16];
  uint64_t v403[2];
  char v404[8];
  re::internal::AssetEntry *v405;
  unint64_t v406;
  uint64_t v407;
  _DWORD *v408;
  __int128 v409;
  __int128 v410;
  unsigned int v411;
  uint64_t v412;
  _OWORD v413[2];
  int v414;
  uint64_t v415;
  __int128 v416;
  unint64_t v417;
  _QWORD v418[3];
  uint64_t v419;
  _QWORD *v420;
  _BYTE immediateSourceTime[32];
  __int128 v422;
  __int128 v423;
  uint8_t buf[16];
  __int128 v425;
  __int128 v426;
  __int128 v427;
  uint64_t v428;

  v428 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = result;
    if (*(_QWORD *)(result + 160))
    {
      v6 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v403);
      isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v6);
      if ((_DWORD)isStatisticCollectionEnabled)
      {
        v8 = re::profilerThreadContext(isStatisticCollectionEnabled);
        v9 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        v10 = v9 ? *(_QWORD *)(v9 + 24) : 0;
        v11 = *(int64x2_t **)(v8 + 152);
        if (v11)
        {
          v12 = v11[576].u64[0];
          if (v12 >= v10)
            v12 = v10;
          v11[576].i64[0] = v12;
          v13 = v11[576].u64[1];
          if (v13 <= v10)
            v13 = v10;
          v11[576].i64[1] = v13;
          v14 = vdupq_n_s64(1uLL);
          v14.i64[0] = v10;
          v11[577] = vaddq_s64(v11[577], v14);
          *(_BYTE *)(v8 + 184) = 0;
        }
      }
      re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v402, 3059, v3);
      v15 = (re *)(*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160), a2);
      if (v15)
      {
        v16 = v15;
        *(_QWORD *)buf = a2;
        *(_QWORD *)&buf[8] = v3;
        v17 = re::globalAllocators(v15)[2];
        v418[0] = &off_24ED5B3E8;
        v418[1] = buf;
        v419 = v17;
        v420 = v418;
        (*(void (**)(re *, _QWORD *))(*(_QWORD *)v16 + 800))(v16, v418);
        if (v420)
        {
          (*(void (**)(_QWORD *))*v420)(v420);
          if (v420 != v418)
            (*(void (**)(uint64_t))(*(_QWORD *)v419 + 40))(v419);
          v420 = 0;
        }
      }
      if ((a3 & 0x100000000) != 0)
      {
        v95 = *(_QWORD *)(*(_QWORD *)(a2 + 240)
                        + 8
                        * *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                          + 8));
        v96 = *(_QWORD *)(v95 + 24);
        if (v96)
        {
          v97 = *(uint64_t **)(v95 + 40);
          v98 = &v97[v96];
          do
          {
            v99 = *v97;
            canModifyState = (re *)re::ecs2::AudioPlayerComponent::canModifyState(*(re::ecs2::AudioPlayerComponent **)(*v97 + 16));
            if ((canModifyState & 1) == 0)
            {
              v101 = *re::audioLogObjects(canModifyState);
              if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
              {
                v113 = v101;
                v114 = *(_QWORD *)(v99 + 16);
                if (!v114)
                  goto LABEL_135;
                v115 = *(_QWORD *)(v99 + 16);
                do
                {
                  v116 = v115;
                  v115 = *(_QWORD *)(v115 + 24);
                }
                while (v115);
                if (*(_QWORD *)(v116 + 16))
                {
                  do
                  {
                    v118 = v114;
                    v114 = *(_QWORD *)(v114 + 24);
                  }
                  while (v114);
                  v117 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v118 + 16) + 104) + 272) >> 1;
                }
                else
                {
LABEL_135:
                  v117 = -1;
                }
                *(_DWORD *)buf = 134217984;
                *(_QWORD *)&buf[4] = v117;
                _os_log_error_impl(&dword_224FE9000, v113, OS_LOG_TYPE_ERROR, "AudioPlayerComponent::doSuspendAll cannot modify state. Scene ID: %llu", buf, 0xCu);

              }
            }
            v102 = *(unsigned int *)(v99 + 112);
            if ((_DWORD)v102)
            {
              v103 = 0;
              v104 = (int *)(*(_QWORD *)(v99 + 96) + 8);
              while (1)
              {
                v105 = *v104;
                v104 += 8;
                if (v105 < 0)
                  break;
                if (v102 == ++v103)
                {
                  LODWORD(v103) = *(_DWORD *)(v99 + 112);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v103) = 0;
            }
            if ((_DWORD)v102 != (_DWORD)v103)
            {
              v106 = v103;
              do
              {
                v107 = *(_QWORD *)(v99 + 96) + 32 * v106;
                v108 = *(_QWORD *)(v107 + 16);
                v109 = *(re::AudioSourceState **)(v107 + 24);
                v110 = (unint64_t *)(v107 + 16);
                if (re::ecs2::AudioPlayerComponent::doPause((re::ecs2::AudioPlayerComponent *)v99, v108, v109, 0))re::ecs2::AudioPlayerComponent::play(v99, *v110, 0);
                if (*(_DWORD *)(v99 + 112) <= (v103 + 1))
                  v111 = v103 + 1;
                else
                  v111 = *(_DWORD *)(v99 + 112);
                while (1)
                {
                  v106 = (v103 + 1);
                  if (v111 - 1 == (_DWORD)v103)
                    break;
                  LODWORD(v103) = v103 + 1;
                  v112 = v106;
                  if ((*(_DWORD *)(*(_QWORD *)(v99 + 96) + 32 * v106 + 8) & 0x80000000) != 0)
                    goto LABEL_128;
                }
                v112 = v111;
LABEL_128:
                LODWORD(v103) = v112;
              }
              while ((_DWORD)v102 != v112);
            }
            ++v97;
          }
          while (v97 != v98);
        }
      }
      else
      {
        v392 = *(float *)&a3;
        v18 = *(_QWORD *)(a2 + 240);
        v19 = *(_QWORD *)(v18
                        + 8
                        * *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                          + 8));
        v20 = *(_QWORD *)(v19 + 24);
        if (v20)
        {
          v21 = *(uint64_t **)(v19 + 40);
          v22 = 8 * v20;
          do
          {
            v23 = *v21;
            v24 = *(_QWORD *)(*v21 + 16);
            if (v24)
            {
              v25 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v24 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
              v26 = v25;
              v27 = *(float *)(v23 + 32);
              if (*(float *)(v25 + 280) != v27)
                *(float *)(v25 + 280) = v27;
              v28 = *(float *)(v23 + 28);
              if (*(float *)(v25 + 276) != v28)
                *(float *)(v25 + 276) = v28;
              v29 = *(float *)(v23 + 36);
              if (*(float *)(v25 + 284) != v29)
                *(float *)(v25 + 284) = v29;
              v30 = *(_QWORD *)(v23 + 40);
              v31 = *(_QWORD *)(v23 + 48);
              if (*(_DWORD *)(v25 + 208) != (_DWORD)v30
                || *(float *)(v25 + 212) != *((float *)&v30 + 1)
                || *(float *)(v25 + 216) != *(float *)&v31
                || *(float *)(v25 + 220) != *((float *)&v31 + 1))
              {
                *(_QWORD *)(v25 + 208) = v30;
                *(_QWORD *)(v25 + 216) = v31;
              }
              v32 = __exp10f(*(float *)(v23 + 56) / 20.0);
              if (*(float *)(v26 + 228) != v32)
              {
                re::ecs2::AudioPlayerComponent::setComponentFade((re::ecs2::AudioPlayerComponent **)v26, v32, 0.0);
                *(_DWORD *)(v26 + 272) = *(_DWORD *)(v23 + 56);
              }
            }
            ++v21;
            v22 -= 8;
          }
          while (v22);
          v18 = *(_QWORD *)(a2 + 240);
        }
        v385 = v3;
        v33 = *(_QWORD *)(v18
                        + 8
                        * *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                          + 8));
        v34 = *(_QWORD *)(v33 + 24);
        if (v34)
        {
          v35 = *(uint64_t **)(v33 + 40);
          v36 = 8 * v34;
          do
          {
            v37 = *v35;
            v38 = *(_QWORD *)(*v35 + 16);
            if (v38)
            {
              v39 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v38 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
              v40 = __exp10f(*(float *)(v37 + 28) / 20.0);
              if (*(float *)(v39 + 228) != v40)
              {
                re::ecs2::AudioPlayerComponent::setComponentFade((re::ecs2::AudioPlayerComponent **)v39, v40, 0.0);
                *(_DWORD *)(v39 + 272) = *(_DWORD *)(v37 + 28);
              }
            }
            ++v35;
            v36 -= 8;
          }
          while (v36);
          v18 = *(_QWORD *)(a2 + 240);
        }
        v386 = a2;
        v41 = *(_QWORD *)(v18
                        + 8
                        * *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                          + 8));
        v42 = *(_QWORD *)(v41 + 24);
        if (v42)
        {
          v43 = *(uint64_t **)(v41 + 40);
          v44 = 8 * v42;
          do
          {
            v45 = *v43;
            v46 = *(_QWORD *)(*v43 + 16);
            if (v46)
            {
              v47 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v46 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
              v48 = __exp10f(*(float *)(v45 + 28) / 20.0);
              if (*(float *)(v47 + 228) != v48)
              {
                re::ecs2::AudioPlayerComponent::setComponentFade((re::ecs2::AudioPlayerComponent **)v47, v48, 0.0);
                *(_DWORD *)(v47 + 272) = *(_DWORD *)(v45 + 28);
              }
            }
            ++v43;
            v44 -= 8;
          }
          while (v44);
          v18 = *(_QWORD *)(v386 + 240);
        }
        v49 = *(_QWORD *)(v18
                        + 8
                        * *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                          + 8));
        v50 = *(_QWORD *)(v49 + 24);
        if (v50)
        {
          v51 = *(uint64_t **)(v49 + 40);
          v52 = 8 * v50;
          do
          {
            v53 = *v51;
            v54 = __exp10f(*(float *)(*v51 + 272) / 20.0);
            if (*(float *)(v53 + 228) != v54)
              re::ecs2::AudioPlayerComponent::setComponentFade((re::ecs2::AudioPlayerComponent **)v53, v54, 0.0);
            v55 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(_QWORD *)(v53 + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            v56 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(_QWORD *)(v53 + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            v57 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(_QWORD *)(v53 + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            if (!v55 || (v58 = *(float *)(v53 + 272), *(float *)(v55 + 56) == v58))
            {
              if (!v56 || (v59 = *(float *)(v53 + 272), *(float *)(v56 + 28) == v59))
              {
                if (v57)
                {
                  v60 = *(float *)(v53 + 272);
                  if (*(float *)(v57 + 28) != v60)
                    *(float *)(v57 + 28) = v60;
                }
              }
              else
              {
                *(float *)(v56 + 28) = v59;
              }
            }
            else
            {
              *(float *)(v55 + 56) = v58;
            }
            ++v51;
            v52 -= 8;
          }
          while (v52);
        }
        v390 = (_QWORD *)(v385 + 112);
        v61 = re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v385 + 112, v386);
        if (v61)
        {
          v62 = *(_QWORD *)(*(_QWORD *)(v386 + 240)
                          + 8
                          * *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                            + 8));
          v63 = *(_QWORD *)(v62 + 24);
          if (v63)
          {
            v64 = v61;
            v65 = *(uint64_t **)(v62 + 40);
            v395 = &v65[v63];
            while (1)
            {
              v66 = *v65;
              v67 = *(unsigned int *)(*v65 + 64);
              if ((_DWORD)v67)
              {
                v68 = 0;
                v69 = (_DWORD *)(*(_QWORD *)(v66 + 48) + 8);
                while ((*v69 & 0x80000000) == 0)
                {
                  v69 += 72;
                  if (v67 == ++v68)
                  {
                    LODWORD(v68) = *(_DWORD *)(*v65 + 64);
                    break;
                  }
                }
              }
              else
              {
                LODWORD(v68) = 0;
              }
              if ((_DWORD)v67 != (_DWORD)v68)
                break;
LABEL_100:
              if (++v65 == v395)
                goto LABEL_101;
            }
            v70 = v68;
            while (1)
            {
              v71 = *(_QWORD *)(*(_QWORD *)(v66 + 48) + 288 * v70 + 16);
              *(_QWORD *)immediateSourceTime = v71;
              if (!*(_QWORD *)v64)
                goto LABEL_92;
              v72 = 0x94D049BB133111EBLL
                  * ((0xBF58476D1CE4E5B9 * (v71 ^ (v71 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v71 ^ (v71 >> 30))) >> 27));
              v73 = v72 ^ (v72 >> 31);
              v74 = *(unsigned int *)(*(_QWORD *)(v64 + 8) + 4 * (v73 % *(unsigned int *)(v64 + 24)));
              if ((_DWORD)v74 == 0x7FFFFFFF)
                goto LABEL_92;
              v75 = *(_QWORD *)(v64 + 16);
              while (*(_QWORD *)(v75 + 32 * v74 + 16) != v71)
              {
                v74 = *(_DWORD *)(v75 + 32 * v74 + 8) & 0x7FFFFFFF;
                if ((_DWORD)v74 == 0x7FFFFFFF)
                  goto LABEL_92;
              }
              v76 = (uint64_t *)(v75 + 32 * v74);
              v77 = v76[3];
              v76 += 3;
              *(_QWORD *)(v77 + 480) = v66;
              re::DynamicArray<re::SharedPtr<re::AssetLoadRequest>>::add((_anonymous_namespace_ *)(v66 + 128), v76);
              *(_QWORD *)buf = *v76;
              if (*(_QWORD *)(v66 + 80))
              {
                v78 = v73 % *(unsigned int *)(v66 + 104);
                v79 = *(unsigned int *)(*(_QWORD *)(v66 + 88) + 4 * v78);
                if ((_DWORD)v79 != 0x7FFFFFFF)
                {
                  v80 = *(_QWORD *)(v66 + 96);
                  while (*(_QWORD *)(v80 + 32 * v79 + 16) != v71)
                  {
                    v79 = *(_DWORD *)(v80 + 32 * v79 + 8) & 0x7FFFFFFF;
                    if ((_DWORD)v79 == 0x7FFFFFFF)
                      goto LABEL_89;
                  }
                  goto LABEL_90;
                }
              }
              else
              {
                LODWORD(v78) = 0;
              }
LABEL_89:
              re::HashTable<unsigned long long,re::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(v66 + 80, v78, v73, immediateSourceTime, buf);
              ++*(_DWORD *)(v66 + 120);
LABEL_90:
              re::HashTable<unsigned long long,re::SharedPtr<re::AudioSourceState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(v64, v71);
              v82 = *re::audioLogObjects(v81);
              if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 134217984;
                *(_QWORD *)&buf[4] = v71;
                _os_log_impl(&dword_224FE9000, v82, OS_LOG_TYPE_DEFAULT, "[RE/ECS] [Update] Stale source state with token: %llu matched to syncState", buf, 0xCu);
              }
LABEL_92:
              if (*(_DWORD *)(v66 + 64) <= (v68 + 1))
                v83 = v68 + 1;
              else
                v83 = *(_DWORD *)(v66 + 64);
              while (1)
              {
                v70 = (v68 + 1);
                if (v83 - 1 == (_DWORD)v68)
                  break;
                LODWORD(v68) = v68 + 1;
                v84 = v70;
                if ((*(_DWORD *)(*(_QWORD *)(v66 + 48) + 288 * v70 + 8) & 0x80000000) != 0)
                  goto LABEL_99;
              }
              v84 = v83;
LABEL_99:
              LODWORD(v68) = v84;
              if ((_DWORD)v67 == v84)
                goto LABEL_100;
            }
          }
        }
LABEL_101:
        v85 = v386;
        OwnerPeerID = re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)v390, v386);
        v88 = v385;
        v89 = v392;
        if (OwnerPeerID)
        {
          v90 = OwnerPeerID;
          v91 = *(unsigned int *)(OwnerPeerID + 32);
          if ((_DWORD)v91)
          {
            v92 = 0;
            v93 = (int *)(*(_QWORD *)(OwnerPeerID + 16) + 8);
            while (1)
            {
              v94 = *v93;
              v93 += 8;
              if (v94 < 0)
                break;
              if (v91 == ++v92)
              {
                LODWORD(v92) = *(_DWORD *)(OwnerPeerID + 32);
                break;
              }
            }
          }
          else
          {
            LODWORD(v92) = 0;
          }
          if ((_DWORD)v91 != (_DWORD)v92)
          {
            v119 = v92;
            do
            {
              v120 = *(_QWORD *)(v90 + 16) + 32 * v119;
              v121 = *(_QWORD *)(v120 + 24);
              v122 = *(_QWORD *)(v88 + 160);
              *(_QWORD *)(v121 + 448) = -1;
              v123 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v122 + 16))(v122, v85);
              v124 = (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v123 + 280))(v123, v121);
              *(_BYTE *)(v121 + 478) = 0;
              if (!*(_BYTE *)(v121 + 720))
              {
                *(_QWORD *)(v121 + 56) = 0;
                v125 = *(OpaqueCMTimebase **)(v121 + 696);
                v126 = !v125 || *(_QWORD *)(v121 + 480) == 0;
                if (!v126)
                {
                  v127 = CMTimebaseCopySource(*(CMTimebaseRef *)(v121 + 696));
                  *(_OWORD *)buf = *MEMORY[0x24BDC0D88];
                  *(_QWORD *)&v425 = *(_QWORD *)(MEMORY[0x24BDC0D88] + 16);
                  CMSyncGetTime((CMTime *)immediateSourceTime, v127);
                  CMTimebaseSetRateAndAnchorTime(v125, 0.0, (CMTime *)buf, (CMTime *)immediateSourceTime);
                  v128 = v127;
                  v88 = v385;
                  CFRelease(v128);
                }
              }
              v129 = *(uint64_t (**)(_QWORD))(v121 + 688);
              if (v129)
                v124 = (re *)v129(*(_QWORD *)(v121 + 680));
              v130 = *re::audioLogObjects(v124);
              OwnerPeerID = os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)OwnerPeerID)
              {
                v131 = *(_QWORD *)(v120 + 16);
                *(_DWORD *)buf = 134217984;
                *(_QWORD *)&buf[4] = v131;
                _os_log_impl(&dword_224FE9000, v130, OS_LOG_TYPE_DEFAULT, "[RE/ECS] [Update] stopSourceState() stopping stale token: %llu", buf, 0xCu);
              }
              if (*(_DWORD *)(v90 + 32) <= (v92 + 1))
                v132 = v92 + 1;
              else
                v132 = *(_DWORD *)(v90 + 32);
              v85 = v386;
              while (1)
              {
                v119 = (v92 + 1);
                if (v132 - 1 == (_DWORD)v92)
                  break;
                LODWORD(v92) = v92 + 1;
                v133 = v119;
                if ((*(_DWORD *)(*(_QWORD *)(v90 + 16) + 32 * v119 + 8) & 0x80000000) != 0)
                  goto LABEL_160;
              }
              v133 = v132;
LABEL_160:
              LODWORD(v92) = v133;
            }
            while ((_DWORD)v91 != v133);
          }
          v89 = v392;
          if (*v390)
          {
            v134 = 0x94D049BB133111EBLL
                 * ((0xBF58476D1CE4E5B9 * (v85 ^ (v85 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v85 ^ (v85 >> 30))) >> 27));
            v135 = (v134 ^ (v134 >> 31)) % *(unsigned int *)(v88 + 136);
            v136 = *(_QWORD *)(v88 + 120);
            v137 = *(unsigned int *)(v136 + 4 * v135);
            if ((_DWORD)v137 != 0x7FFFFFFF)
            {
              v138 = *(_QWORD *)(v88 + 128);
              if (*(_QWORD *)(v138 + 72 * v137 + 16) == v85)
              {
                *(_DWORD *)(v136 + 4 * v135) = *(_DWORD *)(v138 + 72 * v137 + 8) & 0x7FFFFFFF;
LABEL_168:
                v141 = *(_QWORD *)(v88 + 128);
                v142 = v141 + 72 * v137;
                v145 = *(_DWORD *)(v142 + 8);
                v144 = (int *)(v142 + 8);
                v143 = v145;
                if (v145 < 0)
                {
                  *v144 = v143 & 0x7FFFFFFF;
                  re::HashTable<unsigned long long,re::SharedPtr<re::RealityFile>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)(v141 + 72 * v137 + 24));
                  v141 = *(_QWORD *)(v88 + 128);
                  v143 = *(_DWORD *)(v141 + 72 * v137 + 8);
                }
                *(_DWORD *)(v141 + 72 * v137 + 8) = *(_DWORD *)(v88 + 148) | v143 & 0x80000000;
                --*(_DWORD *)(v88 + 140);
                v146 = *(_DWORD *)(v88 + 152) + 1;
                *(_DWORD *)(v88 + 148) = v137;
                *(_DWORD *)(v88 + 152) = v146;
              }
              else
              {
                while (1)
                {
                  v139 = v137;
                  v140 = *(_DWORD *)(v138 + 72 * v137 + 8);
                  v137 = v140 & 0x7FFFFFFF;
                  if ((v140 & 0x7FFFFFFF) == 0x7FFFFFFF)
                    break;
                  if (*(_QWORD *)(v138 + 72 * v137 + 16) == v85)
                  {
                    *(_DWORD *)(v138 + 72 * v139 + 8) = *(_DWORD *)(v138 + 72 * v139 + 8) & 0x80000000 | *(_DWORD *)(v138 + 72 * v137 + 8) & 0x7FFFFFFF;
                    goto LABEL_168;
                  }
                }
              }
            }
          }
        }
        v147 = *(_QWORD *)(*(_QWORD *)(v85 + 240)
                         + 8
                         * *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                           + 8));
        v148 = *(_QWORD *)(v147 + 24);
        if (v148)
        {
          v149 = v89;
          v150 = *(uint64_t **)(v147 + 40);
          v151 = &v150[v148];
          do
          {
            v152 = *v150;
            v153 = *(unsigned int *)(*v150 + 112);
            if ((_DWORD)v153)
            {
              v154 = 0;
              v155 = (int *)(*(_QWORD *)(v152 + 96) + 8);
              while (1)
              {
                v156 = *v155;
                v155 += 8;
                if (v156 < 0)
                  break;
                if (v153 == ++v154)
                {
                  LODWORD(v154) = *(_DWORD *)(*v150 + 112);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v154) = 0;
            }
            if ((_DWORD)v153 != (_DWORD)v154)
            {
              v157 = v154;
              do
              {
                re::AudioSourceState::callPendingCallbacks(*(os_unfair_lock_s **)(*(_QWORD *)(v152 + 96) + 32 * v157 + 24));
                if (*(_DWORD *)(v152 + 112) <= (v154 + 1))
                  v158 = v154 + 1;
                else
                  v158 = *(_DWORD *)(v152 + 112);
                v159 = v154;
                while (1)
                {
                  v157 = (v159 + 1);
                  if (v158 - 1 == v159)
                    break;
                  ++v159;
                  LODWORD(v154) = v157;
                  if ((*(_DWORD *)(*(_QWORD *)(v152 + 96) + 32 * v157 + 8) & 0x80000000) != 0)
                    goto LABEL_189;
                }
                LODWORD(v154) = v158;
LABEL_189:
                ;
              }
              while ((_DWORD)v153 != (_DWORD)v154);
            }
            ++v150;
          }
          while (v150 != v151);
          v160 = *(_QWORD *)(*(_QWORD *)(v85 + 240)
                           + 8
                           * *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                             + 8));
          v161 = *(_QWORD *)(v160 + 24);
          if (v161)
          {
            v162 = 0;
            v163 = 0;
            v164 = *(uint64_t **)(v160 + 40);
            v377 = &v164[v161];
            v371 = *(_QWORD *)(*(_QWORD *)(v85 + 104) + 272) >> 1;
            *(_QWORD *)&v87 = 134217984;
            v370 = v87;
            while (1)
            {
              v401 = *v164;
              if (*(_QWORD *)(*v164 + 16))
                break;
LABEL_512:
              if (++v164 == v377)
                goto LABEL_517;
            }
            v387 = v164;
            v388 = v162;
            v389 = v163;
            OwnerPeerID = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v88 + 160) + 16))(*(_QWORD *)(v88 + 160), v85);
            v165 = v401;
            v400 = (re::AudioService *)OwnerPeerID;
            if (OwnerPeerID)
            {
              v166 = *(_QWORD *)(v401 + 16);
              if (!v166 || (*(_BYTE *)(v166 + 288) & 1) == 0)
              {
                v167 = *(_QWORD *)(v401 + 144);
                if (v167)
                {
                  v168 = *(uint64_t **)(v401 + 160);
                  v169 = 8 * v167;
                  do
                  {
                    v170 = *v168;
                    if (*v168)
                      OwnerPeerID = (uint64_t)(id)(v170 + 8);
                    if (*(_QWORD *)(v170 + 448) != -1)
                    {
                      v171 = *(re::audio ***)(v401 + 16);
                      if (v171)
                      {
                        v172 = (id)*re::audioLogObjects((re *)OwnerPeerID);
                        if (os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT))
                        {
                          re::audio::debugStringFromDeactivatedEntityState(v171, *(const re::ecs2::Entity **)(v170 + 680), (std::string *)buf);
                          v173 = buf;
                          if (SBYTE7(v425) < 0)
                            v173 = *(uint8_t **)buf;
                          *(_DWORD *)immediateSourceTime = 136446210;
                          *(_QWORD *)&immediateSourceTime[4] = v173;
                          _os_log_impl(&dword_224FE9000, v172, OS_LOG_TYPE_DEFAULT, "[RE/ECS] [Update] entity unexpectedly deactivated: %{public}s", immediateSourceTime, 0xCu);
                          if (SBYTE7(v425) < 0)
                            operator delete(*(void **)buf);
                        }

                      }
                    }
                    *(_QWORD *)(v170 + 448) = -1;
                    (*(void (**)(re::AudioService *, uint64_t))(*(_QWORD *)v400 + 280))(v400, v170);
                    *(_BYTE *)(v170 + 478) = 0;

                    ++v168;
                    v169 -= 8;
                  }
                  while (v169);
                }
                goto LABEL_511;
              }
              v372 = *(re::TimebaseService **)(v88 + 168);
              v174 = *(_QWORD *)(v401 + 144);
              if (v174)
              {
                v175 = *(uint64_t **)(v401 + 160);
                v176 = 8 * v174;
                do
                {
                  v177 = *v175;
                  if (*v175)
                    v178 = (id)(v177 + 8);
                  *(_QWORD *)(v177 + 448) = v371;

                  ++v175;
                  v176 -= 8;
                }
                while (v176);
                v166 = *(_QWORD *)(v401 + 16);
              }
              v179 = *(re::ecs2::NetworkComponent **)(v166 + 200);
              if (v179)
              {
                OwnerPeerID = *((_QWORD *)v179 + 4);
                if (OwnerPeerID && (OwnerPeerID = RESyncableGetOwnerPeerID()) != 0 || *(_BYTE *)(v401 + 296))
                {
                  v180 = re::ecs2::NetworkComponent::owningProcessType(v179);
LABEL_224:
                  v181 = (const re::ecs2::Component *)(*(uint64_t (**)(re::AudioService *))(*(_QWORD *)v400 + 720))(v400);
                  if (!v180)
                  {
                    v182 = v181;
                    v183 = *(_QWORD *)(v401 + 16);
                    if (v183)
                    {
                      v181 = (const re::ecs2::Component *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v183 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
                      if (v181)
                        v183 = *((_QWORD *)v181 + 4);
                      else
                        v183 = 0;
                    }
                    if ((const re::ecs2::Component *)v183 != v182)
                    {
                      v181 = (const re::ecs2::Component *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(*(_QWORD *)(v401 + 16)+ 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
                      *((_QWORD *)v181 + 4) = v182;
                      if (v179)
                        re::ecs2::NetworkComponent::markDirty(v179, v181);
                    }
                  }
                  v414 = 0;
                  memset(v413, 0, sizeof(v413));
                  v415 = 0x7FFFFFFFLL;
                  v411 = 0;
                  v409 = 0u;
                  v410 = 0u;
                  v412 = 0x7FFFFFFFLL;
                  *(_QWORD *)&buf[8] = 0;
                  v425 = 0uLL;
                  re::DynamicString::setCapacity(buf, 0);
                  v184 = (_OWORD *)(v401 + 208);
                  switch(*(_DWORD *)(v401 + 208))
                  {
                    case 0:
                    case 3:
                      goto LABEL_233;
                    case 1:
                      v185 = *(float *)(v401 + 212);
                      if (v185 < 0.125)
                        goto LABEL_233;
                      v186 = CFSTR("Simple-025");
                      if (v185 >= 0.375)
                      {
                        v186 = CFSTR("Simple-050");
                        if (v185 >= 0.625)
                        {
                          v186 = CFSTR("Simple-075");
                          if (v185 >= 0.875)
                          {
                            v186 = CFSTR("Simple-100");
                            if (v185 >= 1.125)
                            {
                              v186 = CFSTR("Simple-125");
                              if (v185 >= 1.375)
                              {
                                v186 = CFSTR("Simple-200");
                                if (v185 < 1.875)
                                  v186 = CFSTR("Simple-175");
                                if (v185 < 1.625)
                                  v186 = CFSTR("Simple-150");
                              }
                            }
                          }
                        }
                      }
                      v187 = v186;
                      v188 = atomic_load((unsigned __int8 *)&qword_254109D20);
                      if ((v188 & 1) == 0 && __cxa_guard_acquire(&qword_254109D20))
                      {
                        objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
                        qword_254109D18 = objc_claimAutoreleasedReturnValue();
                        __cxa_guard_release(&qword_254109D20);
                      }
                      objc_msgSend((id)qword_254109D18, "objectForKeyedSubscript:", v187, v370);
                      v189 = (void *)objc_claimAutoreleasedReturnValue();

                      if (!v189)
                      {
                        re::Bundle::reResourcesFramework((uint64_t)immediateSourceTime);
                        if (immediateSourceTime[0])
                          v190 = *(void **)&immediateSourceTime[8];
                        else
                          v190 = 0;
                        v191 = objc_retainAutorelease(v190);
                        if (immediateSourceTime[0])

                        objc_msgSend(v191, "pathForResource:ofType:", v187, CFSTR("ir"));
                        v192 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend((id)qword_254109D18, "setObject:forKeyedSubscript:", v192, v187);

                      }
                      objc_msgSend((id)qword_254109D18, "objectForKeyedSubscript:", v187);
                      v193 = (void *)objc_claimAutoreleasedReturnValue();

                      if (v193)
                      {
                        v194 = objc_retainAutorelease(v193);
                        v195 = (const char *)objc_msgSend(v194, "UTF8String");
                        v196 = strlen(v195);
                        *(_QWORD *)immediateSourceTime = v195;
                        *(_QWORD *)&immediateSourceTime[8] = v196;
                        re::DynamicString::operator=((re::DynamicString *)buf, (uint64_t)immediateSourceTime);

                      }
                      else
                      {
LABEL_233:
                        *(_QWORD *)immediateSourceTime = "omni";
                        *(_QWORD *)&immediateSourceTime[8] = 4;
LABEL_257:
                        re::DynamicString::operator=((re::DynamicString *)buf, (uint64_t)immediateSourceTime);
                      }
LABEL_258:
                      re::DynamicString::operator=((re::DynamicString *)(v401 + 360), (re::DynamicString *)buf);
                      if (*(_QWORD *)buf && (buf[8] & 1) != 0)
                        (*(void (**)(void))(**(_QWORD **)buf + 40))();
                      *(_QWORD *)buf = &off_24ED5B2E8;
                      *(_QWORD *)&buf[8] = v401;
                      *((_QWORD *)&v425 + 1) = buf;
                      re::ecs2::AudioPlayerComponent::forEachToken(v401, (uint64_t)buf);
                      v198 = (uint8_t *)*((_QWORD *)&v425 + 1);
                      if (*((uint8_t **)&v425 + 1) == buf)
                      {
                        v198 = buf;
                        v199 = 4;
                      }
                      else
                      {
                        if (!*((_QWORD *)&v425 + 1))
                          goto LABEL_266;
                        v199 = 5;
                      }
                      (*(void (**)(void))(*(_QWORD *)v198 + 8 * v199))();
LABEL_266:
                      *(_QWORD *)buf = &off_24ED5B368;
                      *(_QWORD *)&buf[8] = v401;
                      *((_QWORD *)&v425 + 1) = buf;
                      re::ecs2::AudioPlayerComponent::forEachToken(v401, (uint64_t)buf);
                      v200 = (uint8_t *)*((_QWORD *)&v425 + 1);
                      if (*((uint8_t **)&v425 + 1) == buf)
                      {
                        v200 = buf;
                        v201 = 4;
                      }
                      else
                      {
                        if (!*((_QWORD *)&v425 + 1))
                          goto LABEL_271;
                        v201 = 5;
                      }
                      (*(void (**)(void))(*(_QWORD *)v200 + 8 * v201))();
LABEL_271:
                      v373 = v180;
                      v407 = v401 + 224;
                      v408 = (_DWORD *)(v401 + 248);
                      re::GainController::updateGainStatus((re::GainController *)&v407, v149);
                      v379 = (unsigned int *)(v401 + 320);
                      atomic_store(0, (unsigned int *)(v401 + 320));
                      v202 = *(unsigned int *)(v401 + 64);
                      if ((_DWORD)v202)
                      {
                        v203 = 0;
                        v204 = (_DWORD *)(*(_QWORD *)(v401 + 48) + 8);
                        do
                        {
                          if ((*v204 & 0x80000000) != 0)
                            goto LABEL_277;
                          v204 += 72;
                          ++v203;
                        }
                        while (v202 != v203);
                        LODWORD(v203) = *(_DWORD *)(v401 + 64);
                      }
                      else
                      {
                        LODWORD(v203) = 0;
                      }
LABEL_277:
                      if ((_DWORD)v202 == (_DWORD)v203)
                        goto LABEL_278;
                      v208 = v203;
                      break;
                    case 2:
                      if (qword_254109D10 != -1)
                        dispatch_once(&qword_254109D10, &__block_literal_global_14);
                      v197 = strlen((const char *)qword_254109D00);
                      *(_QWORD *)immediateSourceTime = qword_254109D00;
                      *(_QWORD *)&immediateSourceTime[8] = v197;
                      goto LABEL_257;
                    default:
                      goto LABEL_258;
                  }
                  while (1)
                  {
                    v209 = *(_QWORD *)(v165 + 48);
                    if (*(_QWORD *)(v209 + 288 * v208 + 56) == 1)
                    {
                      do
                        v210 = __ldaxr(v379);
                      while (__stlxr(v210 + 1, v379));
                      v209 = *(_QWORD *)(v165 + 48);
                    }
                    v406 = 0;
                    v211 = 9 * v208;
                    v406 = *(_QWORD *)(v209 + 288 * v208 + 16);
                    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)v413, (uint64_t *)&v406);
                    v212 = re::AssetHandle::AssetHandle((re::AssetHandle *)v404, (const re::AssetHandle *)(*(_QWORD *)(v165 + 48) + 32 * v211 + 32));
                    if (v405)
                    {
                      v213 = (uint64_t *)*((_QWORD *)v405 + 33);
                      v214 = re::AudioFileAsset::assetType(v212);
                      if (v213 == v214)
                        goto LABEL_291;
                    }
                    else
                    {
                      v214 = re::AudioFileAsset::assetType(v212);
                    }
                    if (v405)
                    {
                      v215 = (uint64_t *)*((_QWORD *)v405 + 33);
                      v214 = re::AudioFileGroupAsset::assetType((re::AudioFileGroupAsset *)v214);
                      if (v215 == v214)
                      {
LABEL_291:
                        v216 = *(_QWORD *)(v165 + 16);
                        if (v216)
                        {
                          v214 = (uint64_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v216 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
                          if (v214)
                          {
                            if (v214[4])
                              goto LABEL_300;
                          }
                        }
                      }
                    }
                    else
                    {
                      v214 = re::AudioFileGroupAsset::assetType((re::AudioFileGroupAsset *)v214);
                    }
                    if (v405)
                    {
                      v217 = (uint64_t *)*((_QWORD *)v405 + 33);
                      v214 = re::AudioGeneratorAsset::assetType((re::AudioGeneratorAsset *)v214);
                      if (v217 == v214)
                        v214 = (uint64_t *)(*(uint64_t (**)(re::AudioService *))(*(_QWORD *)v400 + 496))(v400);
                    }
                    else
                    {
                      v214 = re::AudioGeneratorAsset::assetType((re::AudioGeneratorAsset *)v214);
                    }
LABEL_300:
                    if (v405)
                    {
                      v218 = (uint64_t *)*((_QWORD *)v405 + 33);
                      if (v218 == re::AudioFileAsset::assetType((re::AudioFileAsset *)v214))
                      {
                        v225 = re::AssetHandle::loadedAsset<re::AudioFileAsset>((re::AudioFileAsset *)v404);
                        if (v225)
                        {
                          if (*(_BYTE *)(v225 + 154))
                          {
                            if (v405)
                            {
                              v226 = atomic_load((unsigned int *)v405 + 176);
                              if (v226 == 2)
                              {
                                ++*((_DWORD *)v405 + 65);
                                v227 = (re::AudioFileAsset *)re::AssetHandle::loadedAsset<re::AudioFileAsset>((re::AudioFileAsset *)v404);
                                if (v227)
                                {
                                  re::AudioFileAsset::completeLoad(v227, *(AudioSceneService **)(v88 + 160));
                                  re::internal::AssetEntry::updateMutatedRuntimeAssetSize((os_unfair_lock_s *)v405);
                                  re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v405);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    v417 = v406;
                    v219 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v401 + 32, (uint64_t *)&v417);
                    v220 = re::ecs2::AudioPlayerComponent::audioService((re::ecs2::AudioPlayerComponent *)v165);
                    if (v220)
                    {
                      v221 = v220;
                      v222 = *(re::ecs2::NetworkComponent **)(*(_QWORD *)(v165 + 16) + 200);
                      v393 = v219;
                      if (v222)
                        v223 = re::ecs2::NetworkComponent::owningProcessType(v222);
                      else
                        v223 = 0;
                      v228 = (_QWORD *)(v401 + 80);
                      if (re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v401 + 80, (uint64_t *)&v417))
                      {
                        goto LABEL_317;
                      }
                      if (re::ecs2::AudioPlayerComponent::shouldCreateSourceStateForUnmatchedSyncState(0, v393, v223))
                      {
                        re::ecs2::AudioPlayerComponent::createSourceStateForUnmatchedSyncState((re::ecs2::AudioPlayerComponent *)v165, v417, v393, v223, 0);
                        v228 = (_QWORD *)(v401 + 80);
LABEL_317:
                        if (*v228)
                        {
                          v229 = 0x94D049BB133111EBLL
                               * ((0xBF58476D1CE4E5B9 * (v417 ^ (v417 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                   * (v417 ^ (v417 >> 30))) >> 27));
                          v230 = (v229 ^ (v229 >> 31)) % *(unsigned int *)(v165 + 104);
                          v231 = *(_QWORD *)(v165 + 96);
                          v232 = *(unsigned int *)(*(_QWORD *)(v165 + 88) + 4 * v230);
                          v233 = v393;
                          if ((_DWORD)v232 == 0x7FFFFFFF)
                          {
LABEL_321:
                            v232 = 0x7FFFFFFFLL;
                          }
                          else
                          {
                            while (*(_QWORD *)(v231 + 32 * v232 + 16) != v417)
                            {
                              v232 = *(_DWORD *)(v231 + 32 * v232 + 8) & 0x7FFFFFFF;
                              if (v232 == 0x7FFFFFFF)
                                goto LABEL_321;
                            }
                          }
                        }
                        else
                        {
                          v231 = *(_QWORD *)(v165 + 96);
                          v232 = 0x7FFFFFFFLL;
                          v233 = v393;
                        }
                        v382 = v223;
                        v234 = *(_QWORD *)(v231 + 32 * v232 + 24);
                        v235 = *(_QWORD *)(v233 + 96);
                        *(_QWORD *)immediateSourceTime = *(_QWORD *)(v233 + 80);
                        *(_QWORD *)&immediateSourceTime[8] = v235;
                        *(_DWORD *)&immediateSourceTime[16] = *(_DWORD *)(v233 + 88);
                        v398 = v234;
                        *(_QWORD *)&v416 = immediateSourceTime;
                        *((_QWORD *)&v416 + 1) = v234 + 288;
                        updated = re::GainController::updateGainStatus((re::GainController *)&v416, v149);
                        v237 = (re::AudioGeneratorAsset *)(*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v221 + 544))(v221, updated);
                        if ((v237 & 1) != 0)
                        {
LABEL_324:
                          *(_QWORD *)&v426 = 0;
                          *(_QWORD *)&v425 = 0;
                          memset(buf, 0, sizeof(buf));
                          DWORD2(v425) = 0;
                          re::DynamicArray<re::RigNodeConstraint>::growCapacity(buf, 1uLL);
                          v239 = *(_QWORD *)&buf[8];
                          v238 = v425;
                          v240 = DWORD2(v425);
                          v241 = (re::GainController *)v426;
                          v242 = (_QWORD *)(v426 + 16 * v425);
                          *v242 = v401 + 224;
                          v242[1] = v401 + 248;
                          v243 = v238 + 1;
                          *(_QWORD *)&v425 = v238 + 1;
                          DWORD2(v425) = v240 + 1;
                          if (v238 + 1 >= v239)
                          {
                            re::DynamicArray<re::RigNodeConstraint>::growCapacity(buf, v238 + 2);
                            v243 = v425;
                            v241 = (re::GainController *)v426;
                          }
                          *((_OWORD *)v241 + v243) = v416;
                          if (v243 != -1)
                          {
                            v244 = 0;
                            v396 = 0;
                            v245 = 0;
                            v374 = v243;
                            v375 = v417;
                            v246 = 0.0;
                            v247 = 1.0;
                            v248 = v241;
                            v376 = v241;
                            v249 = (re::GainController *)((char *)v241 + 16 * v243 + 16);
                            v250 = 1.0;
                            do
                            {
                              v251 = *(_QWORD *)v248;
                              v252 = (float *)*((_QWORD *)v248 + 1);
                              v253 = *(float *)(*(_QWORD *)v248 + 4);
                              v254 = *v252;
                              v255 = *(_DWORD *)(*(_QWORD *)v248 + 16);
                              v256 = *(_DWORD *)v252 != v255 && (*(double *)(v251 + 8) == 0.0 || *(float *)v251 != v253);
                              v257 = v252[2];
                              if (re::GainController::isFadeInProcess(v248))
                              {
                                ++v245;
                                v246 = *((double *)v252 + 2);
                                if (LODWORD(v254) != v255)
                                {
                                  v258 = *(double *)(v251 + 8);
                                  v259 = v258 <= 0.0;
                                  v260 = v258;
                                  if (!v259)
                                    v246 = v260;
                                  v261 = v396;
                                  if (!v259)
                                    v261 = v396 + 1;
                                  v396 = v261;
                                }
                              }
                              v250 = v250 * v253;
                              v247 = v247 * v257;
                              v244 |= v256;
                              v248 = (re::GainController *)((char *)v248 + 16);
                            }
                            while (v248 != v249);
                            if ((v244 & 1) != 0)
                            {
                              re::ecs2::AudioPlayerComponent::doFadeToGain((re::ecs2::AudioPlayerComponent *)v401, v375, v247, 0.0);
                              if (v245 == 1 && !v396)
                              {
                                v165 = v401;
                                v184 = (_OWORD *)(v401 + 208);
                                v233 = v393;
                                v241 = v376;
                                goto LABEL_362;
                              }
                            }
                            v233 = v393;
                            v241 = v376;
                            if (v396 == 1 && v245 == 1)
                            {
                              v165 = v401;
                              v184 = (_OWORD *)(v401 + 208);
                              goto LABEL_362;
                            }
                            v259 = v245 < 2;
                            v165 = v401;
                            v184 = (_OWORD *)(v401 + 208);
                            if (!v259)
                            {
                              v264 = 0;
                              v265 = (uint64_t)v376 + 8;
                              v266 = 16 * v374 + 16;
                              v267 = 1.0;
                              do
                              {
                                v268 = *(double *)(*(_QWORD *)v265 + 16);
                                if (v268 >= v149)
                                {
                                  v246 = v268;
                                  ++v264;
                                  v269 = *(float *)(*(_QWORD *)v265 + 8)
                                       + (float)(v149 * *(float *)(*(_QWORD *)v265 + 12));
                                }
                                else
                                {
                                  v269 = *(float *)(*(_QWORD *)(v265 - 8) + 4);
                                }
                                v267 = v267 * v269;
                                v265 += 16;
                                v266 -= 16;
                              }
                              while (v266);
                              if (v264 != 1)
                              {
                                v246 = v149;
                                v250 = v267;
                              }
LABEL_362:
                              re::ecs2::AudioPlayerComponent::doFadeToGain((re::ecs2::AudioPlayerComponent *)v165, v375, v250, v246);
                            }
                          }
                          if (v241 && *(_QWORD *)buf)
                            (*(void (**)(_QWORD, re::GainController *))(**(_QWORD **)buf + 40))(*(_QWORD *)buf, v241);
                        }
                        else
                        {
                          v262 = *(_QWORD *)(v398 + 40);
                          if (v262)
                          {
                            v263 = *(uint64_t **)(v262 + 264);
                            v126 = v263 == re::AudioGeneratorAsset::assetType(v237);
                            v233 = v393;
                            if (v126 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v221 + 552))(v221))
                              goto LABEL_324;
                          }
                          else
                          {
                            re::AudioGeneratorAsset::assetType(v237);
                          }
                        }
                        *(_DWORD *)(v398 + 288) = *(_DWORD *)&immediateSourceTime[16];
                        *(_BYTE *)(v398 + 292) = 0;
                        *(_DWORD *)(v233 + 104) = *(_DWORD *)(v165 + 256);
                        v270 = (re::DynamicString *)(v233 + 160);
                        IsReadyToCompletePreparation = re::DynamicString::operator=((re::DynamicString *)(v233 + 160), (re::DynamicString *)(v401 + 360));
                        v272 = (__int128 *)(v233 + 192);
                        *(_OWORD *)(v233 + 192) = *v184;
                        *(_DWORD *)(v233 + 68) = *(_DWORD *)(v165 + 284);
                        if (!*(_BYTE *)(v398 + 478) && !*(_BYTE *)(v398 + 479))
                        {
                          IsReadyToCompletePreparation = (re *)re::ecs2::AudioPlayerComponent::syncStateIsReadyToCompletePreparation((re::ecs2::AudioPlayerComponent *)v165, (_QWORD *)v233, v382);
                          if ((_DWORD)IsReadyToCompletePreparation)
                          {
                            *(_QWORD *)(v398 + 24) = *(_QWORD *)v233;
                            re::AssetHandle::operator=((uint64_t *)(v398 + 32), (uint64_t *)(v233 + 8));
                            *(_OWORD *)(v398 + 56) = *(_OWORD *)(v233 + 32);
                            v273 = *(_OWORD *)(v233 + 48);
                            v274 = *(_OWORD *)(v233 + 64);
                            v275 = *(_OWORD *)(v233 + 80);
                            *(_OWORD *)(v398 + 116) = *(_OWORD *)(v233 + 92);
                            *(_OWORD *)(v398 + 104) = v275;
                            *(_OWORD *)(v398 + 88) = v274;
                            *(_OWORD *)(v398 + 72) = v273;
                            re::Optional<re::DynamicString>::operator=((unsigned __int8 *)(v398 + 136), (unsigned __int8 *)(v233 + 112));
                            *(_BYTE *)(v398 + 176) = *(_BYTE *)(v233 + 152);
                            re::DynamicString::operator=((re::DynamicString *)(v398 + 184), (re::DynamicString *)(v233 + 160));
                            v276 = *v272;
                            *(_OWORD *)(v398 + 232) = *(_OWORD *)(v233 + 208);
                            *(_OWORD *)(v398 + 216) = v276;
                            re::DynamicString::operator=((re::DynamicString *)(v398 + 248), (re::DynamicString *)(v233 + 224));
                            *(_WORD *)(v398 + 280) = *(_WORD *)(v233 + 256);
                            re::ecs2::AudioPlayerComponent::completePreparation((re::ecs2::AudioPlayerComponent *)v165, v417, (re::AudioSourceSyncState *)v233, v372);
                          }
                        }
                        v277 = v233;
                        if (*(_QWORD *)v233)
                        {
                          v278 = *(OpaqueCMTimebase **)(v398 + 696);
                          if (v278)
                          {
                            EffectiveRate = CMTimebaseGetEffectiveRate(v278);
                            v277 = v393;
                            v280 = *(_QWORD *)v393;
                            if (EffectiveRate == 0.0)
                              EffectiveRate = 1.0;
                            v281 = EffectiveRate;
                            *(float *)(v393 + 40) = v281;
                            if (!v280)
                              goto LABEL_375;
                          }
                          else
                          {
                            v277 = v393;
                            *(_DWORD *)(v393 + 40) = 1065353216;
                          }
                        }
                        else
                        {
LABEL_375:
                          v282 = *(_QWORD *)(v277 + 32);
                          if (v282 != *(_QWORD *)(v398 + 56))
                          {
                            switch(v282)
                            {
                              case 0:
                                re::ecs2::AudioPlayerComponent::doStop((re::ecs2::AudioPlayerComponent *)v165, v417, (re::AudioSourceState *)v398, 0);
                                break;
                              case 1:
                                re::ecs2::AudioPlayerComponent::doPlay((re::ecs2::AudioPlayerComponent *)v165, v417, (re::AudioSourceState *)v398, 0);
                                break;
                              case 3:
                                re::ecs2::AudioPlayerComponent::doPause((re::ecs2::AudioPlayerComponent *)v165, v417, (re::AudioSourceState *)v398, 0);
                                break;
                              case 5:
                                v293 = *re::audioLogObjects(IsReadyToCompletePreparation);
                                if (os_log_type_enabled(v293, OS_LOG_TYPE_ERROR))
                                {
                                  v294 = v293;
                                  v295 = *(_QWORD *)(v398 + 680);
                                  *(_DWORD *)buf = v370;
                                  *(_QWORD *)&buf[4] = v295;
                                  _os_log_error_impl(&dword_224FE9000, v294, OS_LOG_TYPE_ERROR, "Sync state in error state, token: %llu", buf, 0xCu);

                                }
                                break;
                              default:
                                break;
                            }
                          }
                          v283 = *(OpaqueCMTimebase **)(v398 + 696);
                          v277 = v393;
                          if (v283)
                          {
                            v284 = CMTimebaseGetEffectiveRate(*(CMTimebaseRef *)(v398 + 696));
                            v285 = *(float *)(v393 + 40);
                            if (v284 != v285 && *(_QWORD *)(v393 + 32) == 1)
                              CMTimebaseSetRate(v283, v285);
                          }
                        }
                        *(_QWORD *)(v398 + 24) = *(_QWORD *)v277;
                        re::AssetHandle::operator=((uint64_t *)(v398 + 32), (uint64_t *)(v277 + 8));
                        *(_OWORD *)(v398 + 56) = *(_OWORD *)(v277 + 32);
                        v286 = *(_OWORD *)(v277 + 48);
                        v287 = *(_OWORD *)(v277 + 64);
                        v288 = *(_OWORD *)(v277 + 80);
                        *(_OWORD *)(v398 + 116) = *(_OWORD *)(v277 + 92);
                        *(_OWORD *)(v398 + 104) = v288;
                        *(_OWORD *)(v398 + 88) = v287;
                        *(_OWORD *)(v398 + 72) = v286;
                        re::Optional<re::DynamicString>::operator=((unsigned __int8 *)(v398 + 136), (unsigned __int8 *)(v277 + 112));
                        *(_BYTE *)(v398 + 176) = *(_BYTE *)(v277 + 152);
                        re::DynamicString::operator=((re::DynamicString *)(v398 + 184), v270);
                        v289 = *v272;
                        *(_OWORD *)(v398 + 232) = v272[1];
                        *(_OWORD *)(v398 + 216) = v289;
                        re::DynamicString::operator=((re::DynamicString *)(v398 + 248), (re::DynamicString *)(v277 + 224));
                        *(_WORD *)(v398 + 280) = *(_WORD *)(v277 + 256);
                        v88 = v385;
                      }
                    }
                    else
                    {
                      v224 = *re::audioLogObjects(0);
                      if (os_log_type_enabled(v224, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_error_impl(&dword_224FE9000, v224, OS_LOG_TYPE_ERROR, "Cannot applyCommandsForStateChanges with no AudioService", buf, 2u);
                      }
                    }
                    re::AssetHandle::~AssetHandle((re::AssetHandle *)v404);
                    v290 = *(_DWORD *)(v165 + 64);
                    if (v290 <= (int)v203 + 1)
                      v291 = v203 + 1;
                    else
                      v291 = *(_DWORD *)(v165 + 64);
                    while (1)
                    {
                      v208 = (v203 + 1);
                      if (v291 - 1 == (_DWORD)v203)
                        break;
                      LODWORD(v203) = v203 + 1;
                      v292 = v208;
                      if ((*(_DWORD *)(*(_QWORD *)(v165 + 48) + 288 * v208 + 8) & 0x80000000) != 0)
                        goto LABEL_391;
                    }
                    v292 = v291;
LABEL_391:
                    LODWORD(v203) = v292;
                    if (v290 == v292)
                    {
LABEL_278:
                      *(_QWORD *)buf = &off_24ED5B268;
                      *(_QWORD *)&buf[8] = v165;
                      *((_QWORD *)&v425 + 1) = buf;
                      re::ecs2::AudioPlayerComponent::forEachToken(v165, (uint64_t)buf);
                      v205 = (uint8_t *)*((_QWORD *)&v425 + 1);
                      if (*((uint8_t **)&v425 + 1) == buf)
                      {
                        v205 = buf;
                        v207 = 4;
                        v206 = v373;
LABEL_398:
                        (*(void (**)(void))(*(_QWORD *)v205 + 8 * v207))();
                      }
                      else
                      {
                        v206 = v373;
                        if (*((_QWORD *)&v425 + 1))
                        {
                          v207 = 5;
                          goto LABEL_398;
                        }
                      }
                      v296 = v408;
                      *v408 = *(_DWORD *)(v407 + 16);
                      *((_BYTE *)v296 + 4) = 0;
                      v297 = *(unsigned int *)(v165 + 112);
                      if ((_DWORD)v297)
                      {
                        v298 = 0;
                        v299 = (int *)(*(_QWORD *)(v165 + 96) + 8);
                        while (1)
                        {
                          v300 = *v299;
                          v299 += 8;
                          if (v300 < 0)
                            break;
                          if (v297 == ++v298)
                          {
                            LODWORD(v298) = *(_DWORD *)(v165 + 112);
                            break;
                          }
                        }
                      }
                      else
                      {
                        LODWORD(v298) = 0;
                      }
                      if ((_DWORD)v297 != (_DWORD)v298)
                      {
                        v301 = v298;
                        do
                        {
                          *(_QWORD *)buf = 0;
                          *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)(v165 + 96) + 32 * v301 + 16);
                          if (!re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)v413, (uint64_t *)buf))re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)&v409, (uint64_t *)buf);
                          v302 = *(_DWORD *)(v165 + 112);
                          if (v302 <= (int)v298 + 1)
                            v303 = v298 + 1;
                          else
                            v303 = *(_DWORD *)(v165 + 112);
                          while (1)
                          {
                            v301 = (v298 + 1);
                            if (v303 - 1 == (_DWORD)v298)
                              break;
                            LODWORD(v298) = v298 + 1;
                            v304 = v301;
                            if ((*(_DWORD *)(*(_QWORD *)(v165 + 96) + 32 * v301 + 8) & 0x80000000) != 0)
                              goto LABEL_416;
                          }
                          v304 = v303;
LABEL_416:
                          LODWORD(v298) = v304;
                        }
                        while (v302 != v304);
                      }
                      re::ecs2::TransformHelper::computeWorldMatrixForRendering(*(re::ecs2::TransformComponent ***)(v165 + 16), *(_QWORD *)(v88 + 176), buf);
                      v394 = v425;
                      v397 = *(_OWORD *)buf;
                      *(_OWORD *)immediateSourceTime = *(_OWORD *)buf;
                      *(_OWORD *)&immediateSourceTime[16] = v425;
                      v391 = v426;
                      v422 = v426;
                      v423 = v427;
                      v384 = v427;
                      re::audio::cleanUpTransformForPHASE((float32x4_t *)immediateSourceTime, v305, v306, v307, (uint64_t)buf);
                      *(_OWORD *)v381 = v425;
                      v383 = *(_OWORD *)buf;
                      v378 = v427;
                      v380 = v426;
                      if (!v206 && (*(unsigned int (**)(re::AudioService *))(*(_QWORD *)v400 + 672))(v400))
                      {
                        v308 = *(unsigned int *)(v165 + 64);
                        if ((_DWORD)v308)
                        {
                          v309 = 0;
                          v310 = (_DWORD *)(*(_QWORD *)(v165 + 48) + 8);
                          while ((*v310 & 0x80000000) == 0)
                          {
                            v310 += 72;
                            if (v308 == ++v309)
                            {
                              LODWORD(v309) = *(_DWORD *)(v165 + 64);
                              break;
                            }
                          }
                        }
                        else
                        {
                          LODWORD(v309) = 0;
                        }
                        if ((_DWORD)v308 != (_DWORD)v309)
                        {
                          v311 = v309;
                          v312 = *(_DWORD *)(v165 + 64);
                          do
                          {
                            v313 = *(_QWORD *)(v165 + 48);
                            v314 = v313 + 288 * v311;
                            if (!*(_QWORD *)(v314 + 40)
                              && (*(_QWORD *)(v313 + 288 * v311 + 232) || *(_QWORD *)(v313 + 288 * v311 + 240)))
                            {
                              re::ecs2::AudioPlayerComponent::updateSharedAcousticProperties((re::ecs2::AudioPlayerComponent *)v165, *(_QWORD *)(v314 + 16), v400);
                              v312 = *(_DWORD *)(v165 + 64);
                            }
                            if (v312 <= (int)v309 + 1)
                              v315 = v309 + 1;
                            else
                              v315 = v312;
                            while (1)
                            {
                              v311 = (v309 + 1);
                              if (v315 - 1 == (_DWORD)v309)
                                break;
                              LODWORD(v309) = v309 + 1;
                              v316 = v311;
                              if ((*(_DWORD *)(*(_QWORD *)(v165 + 48) + 288 * v311 + 8) & 0x80000000) != 0)
                                goto LABEL_438;
                            }
                            v316 = v315;
LABEL_438:
                            LODWORD(v309) = v316;
                          }
                          while ((_DWORD)v308 != v316);
                        }
                      }
                      v317 = *(_QWORD *)(v165 + 144);
                      if (!v317)
                      {
LABEL_493:
                        re::ecs2::AudioPlayerComponent::triggerPendingActions((re::ecs2::AudioPlayerComponent **)v165);
                        v354 = v411;
                        if (v411)
                        {
                          v355 = 0;
                          v356 = (int *)(v410 + 8);
                          v88 = v385;
                          v85 = v386;
                          while (1)
                          {
                            v357 = *v356;
                            v356 += 6;
                            if (v357 < 0)
                              break;
                            if (v411 == ++v355)
                            {
                              LODWORD(v355) = v411;
                              break;
                            }
                          }
                        }
                        else
                        {
                          LODWORD(v355) = 0;
                          v88 = v385;
                          v85 = v386;
                        }
                        if (v411 != (_DWORD)v355)
                        {
                          v358 = v355;
                          v359 = v410;
                          do
                          {
                            re::ecs2::AudioPlayerComponent::doDestroy((re::ecs2::AudioPlayerComponent **)v165, *(_QWORD *)(v359 + 24 * v358 + 16));
                            v359 = v410;
                            if (v411 <= (int)v355 + 1)
                              v360 = v355 + 1;
                            else
                              v360 = v411;
                            v361 = v355;
                            while (1)
                            {
                              v358 = (v361 + 1);
                              if (v360 - 1 == v361)
                                break;
                              ++v361;
                              LODWORD(v355) = v358;
                              if ((*(_DWORD *)(v410 + 24 * v358 + 8) & 0x80000000) != 0)
                                goto LABEL_509;
                            }
                            LODWORD(v355) = v360;
LABEL_509:
                            ;
                          }
                          while (v354 != (_DWORD)v355);
                        }
                        re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v409);
                        re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v413);
                        break;
                      }
                      v318 = *(uint64_t **)(v165 + 160);
                      v399 = &v318[v317];
                      while (2)
                      {
                        v319 = *v318;
                        if (*v318)
                          v320 = (id)(v319 + 8);
                        if (*(_BYTE *)(v319 + 672))
                        {
                          v321 = *(_QWORD *)(v319 + 256);
                          if ((v321 & 1) != 0)
                            v322 = v321 >> 1;
                          else
                            v322 = v321 >> 1;
                          if (v322 || !*(_QWORD *)(v319 + 40) && (*(_QWORD *)(v319 + 232) || *(_QWORD *)(v319 + 240)))
                          {
                            v323 = *(_QWORD *)(v165 + 16);
                            if (v323)
                            {
                              v324 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v323 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
                              if (v324)
                              {
                                *(_QWORD *)buf = *(_QWORD *)(v319 + 680);
                                v325 = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v324 + 40, (uint64_t *)buf);
                                if (v325)
                                  *(_DWORD *)(v319 + 472) = *(_DWORD *)(v325 + 4);
                              }
                            }
                            *(_BYTE *)(v319 + 476) = re::ecs2::AudioPlayerComponent::selectInputMode((re::ecs2::AudioPlayerComponent *)v165, *(_QWORD *)(v319 + 680));
                          }
                          *(_OWORD *)(v319 + 320) = v383;
                          *(_OWORD *)(v319 + 336) = *(_OWORD *)v381;
                          *(_OWORD *)(v319 + 352) = v380;
                          *(_OWORD *)(v319 + 368) = v378;
                          *(_OWORD *)(v319 + 384) = v397;
                          *(_OWORD *)(v319 + 400) = v394;
                          *(_OWORD *)(v319 + 416) = v391;
                          *(_OWORD *)(v319 + 432) = v384;
                          (*(void (**)(re::AudioService *, uint64_t))(*(_QWORD *)v400 + 280))(v400, v319);
                          v326 = *(unsigned int *)(v319 + 536);
                          if ((_DWORD)v326)
                          {
                            v327 = 0;
                            v328 = (int *)(*(_QWORD *)(v319 + 520) + 8);
                            while (1)
                            {
                              v329 = *v328;
                              v328 += 8;
                              if (v329 < 0)
                                break;
                              if (v326 == ++v327)
                              {
                                LODWORD(v327) = *(_DWORD *)(v319 + 536);
                                break;
                              }
                            }
                          }
                          else
                          {
                            LODWORD(v327) = 0;
                          }
                          if ((_DWORD)v326 == (_DWORD)v327)
                          {
                            if (!v319)
                            {
LABEL_488:
                              if (++v318 == v399)
                                goto LABEL_493;
                              continue;
                            }
                          }
                          else
                          {
                            v330 = v327;
                            v331 = (unint64_t *)(v319 + 552);
                            do
                            {
                              v332 = *(_QWORD *)(v319 + 520) + 32 * v330;
                              v334 = *(float *)(v332 + 24);
                              v333 = (uint64_t *)(v332 + 24);
                              v335 = v334;
                              v336 = v333 - 1;
                              v337 = (float *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v319 + 552, v333 - 1);
                              if (!v337 || *v337 != v335)
                              {
                                v338 = *v336;
                                v339 = 0xBF58476D1CE4E5B9 * (*v336 ^ ((unint64_t)*v336 >> 30));
                                v340 = (0x94D049BB133111EBLL * (v339 ^ (v339 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                        * (v339 ^ (v339 >> 27))) >> 31);
                                v341 = *v331;
                                if (!*v331
                                  || (v341 = v340 % *(unsigned int *)(v319 + 576),
                                      v342 = *(unsigned int *)(*(_QWORD *)(v319 + 560) + 4 * v341),
                                      (_DWORD)v342 == 0x7FFFFFFF))
                                {
LABEL_471:
                                  v344 = *(unsigned int *)(v319 + 588);
                                  if ((_DWORD)v344 == 0x7FFFFFFF)
                                  {
                                    v344 = *(unsigned int *)(v319 + 584);
                                    v345 = v344;
                                    if ((_DWORD)v344 == *(_DWORD *)(v319 + 576))
                                    {
                                      re::HashTable<unsigned long long,float,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(v319 + 552, 2 * *(_DWORD *)(v319 + 580));
                                      v341 = v340 % *(unsigned int *)(v319 + 576);
                                      v345 = *(_DWORD *)(v319 + 584);
                                      v338 = *v336;
                                    }
                                    *(_DWORD *)(v319 + 584) = v345 + 1;
                                    v346 = *(_QWORD *)(v319 + 568);
                                    v347 = *(_DWORD *)(v346 + 32 * v344 + 8);
                                  }
                                  else
                                  {
                                    v346 = *(_QWORD *)(v319 + 568);
                                    v347 = *(_DWORD *)(v346 + 32 * v344 + 8);
                                    *(_DWORD *)(v319 + 588) = v347 & 0x7FFFFFFF;
                                  }
                                  *(_DWORD *)(v346 + 32 * v344 + 8) = v347 | 0x80000000;
                                  v348 = *(_QWORD *)(v319 + 560);
                                  *(_DWORD *)(*(_QWORD *)(v319 + 568) + 32 * v344 + 8) = *(_DWORD *)(*(_QWORD *)(v319 + 568) + 32 * v344 + 8) & 0x80000000 | *(_DWORD *)(v348 + 4 * v341);
                                  *(_QWORD *)(*(_QWORD *)(v319 + 568) + 32 * v344) = v340;
                                  *(_QWORD *)(*(_QWORD *)(v319 + 568) + 32 * v344 + 16) = v338;
                                  *(_DWORD *)(*(_QWORD *)(v319 + 568) + 32 * v344 + 24) = *(_DWORD *)v333;
                                  *(_DWORD *)(v348 + 4 * v341) = v344;
                                  ++*(_DWORD *)(v319 + 580);
                                  v165 = v401;
                                }
                                else
                                {
                                  v343 = *(_QWORD *)(v319 + 568);
                                  while (*(_QWORD *)(v343 + 32 * v342 + 16) != v338)
                                  {
                                    v342 = *(_DWORD *)(v343 + 32 * v342 + 8) & 0x7FFFFFFF;
                                    if ((_DWORD)v342 == 0x7FFFFFFF)
                                      goto LABEL_471;
                                  }
                                  *(_DWORD *)(v343 + 32 * v342 + 24) = *(_DWORD *)v333;
                                }
                                ++*(_DWORD *)(v319 + 592);
                                objc_msgSend(*(id *)(v319 + 456), "parameterTree", v370);
                                v349 = (void *)objc_claimAutoreleasedReturnValue();
                                objc_msgSend(v349, "parameterWithAddress:", *v336);
                                v350 = (void *)objc_claimAutoreleasedReturnValue();
                                *(float *)&v351 = v335;
                                objc_msgSend(v350, "setValue:", v351);

                              }
                              if (*(_DWORD *)(v319 + 536) <= (v327 + 1))
                                v352 = v327 + 1;
                              else
                                v352 = *(_DWORD *)(v319 + 536);
                              while (1)
                              {
                                v330 = (v327 + 1);
                                if (v352 - 1 == (_DWORD)v327)
                                  break;
                                LODWORD(v327) = v327 + 1;
                                v353 = v330;
                                if ((*(_DWORD *)(*(_QWORD *)(v319 + 520) + 32 * v330 + 8) & 0x80000000) != 0)
                                  goto LABEL_486;
                              }
                              v353 = v352;
LABEL_486:
                              LODWORD(v327) = v353;
                            }
                            while ((_DWORD)v326 != v353);
                          }
                        }
                        break;
                      }

                      goto LABEL_488;
                    }
                  }
                }
              }
              else if (*(_BYTE *)(v401 + 296))
              {
                v180 = 0;
                goto LABEL_224;
              }
            }
LABEL_511:
            v362 = atomic_load((unsigned int *)(v165 + 320));
            v363 = v165;
            v364 = v389;
            v162 = v362 + v388;
            v365 = atomic_load((unsigned int *)(v363 + 324));
            v163 = v365 + v364;
            v164 = v387;
            goto LABEL_512;
          }
        }
        v163 = 0;
        v162 = 0;
LABEL_517:
        Instance = re::ecs2::AudioPlayerTelemetryReporter::getInstance((re::ecs2::AudioPlayerTelemetryReporter *)OwnerPeerID);
        v367 = MEMORY[0x24BDAC760];
        *(_QWORD *)buf = MEMORY[0x24BDAC760];
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&v425 = ___ZN2re4ecs228AudioPlayerTelemetryReporter25updateConcurrentPlayCountEj_block_invoke;
        *((_QWORD *)&v425 + 1) = &__block_descriptor_44_e5_v8__0l;
        *(_QWORD *)&v426 = Instance;
        DWORD2(v426) = v162;
        dispatch_async((dispatch_queue_t)re::ecs2::AudioPlayerTelemetryReporter::m_playerQueue, buf);
        v369 = re::ecs2::AudioPlayerTelemetryReporter::getInstance(v368);
        *(_QWORD *)buf = v367;
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&v425 = ___ZN2re4ecs228AudioPlayerTelemetryReporter28updateConcurrentPrepareCountEj_block_invoke;
        *((_QWORD *)&v425 + 1) = &__block_descriptor_44_e5_v8__0l;
        *(_QWORD *)&v426 = v369;
        DWORD2(v426) = v163;
        dispatch_async((dispatch_queue_t)re::ecs2::AudioPlayerTelemetryReporter::m_playerQueue, buf);
      }
      re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v402);
      return re::ProfilerTimeGuard<(re::ProfilerStatistic)120>::end((uint64_t)v403);
    }
  }
  return result;
}

void re::HashTable<unsigned long long,re::SharedPtr<re::AudioSourceState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;

  if (*(_QWORD *)a1)
  {
    v3 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    v4 = (v3 ^ (v3 >> 31)) % *(unsigned int *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(unsigned int *)(v5 + 4 * v4);
    if ((_DWORD)v6 != 0x7FFFFFFF)
    {
      v7 = *(_QWORD *)(a1 + 16);
      v8 = v7 + 32 * v6;
      if (*(_QWORD *)(v8 + 16) == a2)
      {
        *(_DWORD *)(v5 + 4 * v4) = *(_DWORD *)(v8 + 8) & 0x7FFFFFFF;
LABEL_8:
        v12 = *(_QWORD *)(a1 + 16) + 32 * v6;
        v13 = *(_DWORD *)(v12 + 8);
        if (v13 < 0)
        {
          *(_DWORD *)(v12 + 8) = v13 & 0x7FFFFFFF;
          v16 = *(_QWORD *)(v12 + 24);
          v15 = (_QWORD *)(v12 + 24);
          v14 = v16;
          if (v16)
          {

            *v15 = 0;
          }
        }
        v17 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v6 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v6 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
        --*(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 36) = v6;
        *(_DWORD *)(a1 + 40) = v17 + 1;
      }
      else
      {
        while (1)
        {
          v9 = v6;
          v10 = *(_DWORD *)(v7 + 32 * v6 + 8);
          v6 = v10 & 0x7FFFFFFF;
          if ((v10 & 0x7FFFFFFF) == 0x7FFFFFFF)
            break;
          v11 = v7 + 32 * v6;
          if (*(_QWORD *)(v11 + 16) == a2)
          {
            *(_DWORD *)(v7 + 32 * v9 + 8) = *(_DWORD *)(v7 + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(v11 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
}

double re::internal::defaultConstruct<re::ecs2::v1::AudioSourceState>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_QWORD *)&result = 1065353216;
  *(_QWORD *)(a3 + 32) = 1065353216;
  *(_DWORD *)(a3 + 40) = 6553601;
  return result;
}

void re::internal::defaultDestruct<re::ecs2::v1::AudioSourceState>(int a1, int a2, re::AssetHandle *this)
{
  re::AssetHandle::~AssetHandle(this);
}

double re::internal::defaultConstructV2<re::ecs2::v1::AudioSourceState>(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)&result = 1065353216;
  *(_QWORD *)(a1 + 32) = 1065353216;
  *(_DWORD *)(a1 + 40) = 6553601;
  return result;
}

uint64_t *re::ecs2::v1::allocInfo_AudioPlayerComponent(re::ecs2::v1 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254109CC0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254109CC0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410A0A8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410A0B8 = 0;
    qword_25410A0C8 = 0;
    qword_25410A0D0 = 0xFFFFFFFFLL;
    qword_25410A0A8 = (uint64_t)&off_24ED7DAA8;
    qword_25410A0D8 = (uint64_t)"AudioPlayerComponent";
    dword_25410A0E0 = 0;
    xmmword_25410A0E8 = 0u;
    xmmword_25410A0F8 = 0u;
    xmmword_25410A108 = 0u;
    qword_25410A118 = 0;
    __cxa_guard_release(&qword_254109CC0);
  }
  return &qword_25410A0A8;
}

void re::ecs2::v1::initInfo_AudioPlayerComponent(re::ecs2::v1 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;

  v21[0] = 0x913565130F19710CLL;
  v21[1] = "AudioPlayerComponent";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  v4 = atomic_load((unsigned __int8 *)&qword_254109CC8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254109CC8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254109DA0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::HashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get((uint64_t)v9, v10);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "sourceStatesByToken";
      *(_QWORD *)(v11 + 16) = &qword_254109E98;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254109DA8 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v14 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "registeredAssets";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x7800000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254109DB0 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_BOOL((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "autoplay";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0xA000000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_254109DB8 = v19;
      __cxa_guard_release(&qword_254109CC8);
    }
  }
  *((_QWORD *)this + 2) = 0xA800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254109DA0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::v1::AudioPlayerComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::v1::AudioPlayerComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::v1::AudioPlayerComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::v1::AudioPlayerComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v20 = v22;
}

void re::IntrospectionInfo<re::HashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  uint64_t *v3;
  _OWORD *v4;
  unsigned __int8 v5;
  uint64_t *v6;
  unsigned __int8 v7;
  const re::IntrospectionBase *v8;
  unsigned __int8 v9;
  re::IntrospectionRegistry *v10;
  const re::IntrospectionBase *v11;
  const char *v12;
  __int128 v13;
  int v14;
  re::IntrospectionRegistry *v15;
  const re::IntrospectionBase *v16;
  const char *v17;
  __int128 v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _anonymous_namespace_ *v25;
  uint64_t v26;
  uint64_t v27;
  re *v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  void *v39;
  uint64_t v40;
  uint64_t *v41;
  const re::IntrospectionBase *v42;
  void *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  const char *v52;
  _QWORD v53[2];
  __int128 v54;
  __int128 v55;
  uint64_t *v56;

  v2 = atomic_load((unsigned __int8 *)&qword_254109D50);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254109D50))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_254109E98);
    qword_254109E98 = (uint64_t)&off_24ED5B4A8;
    __cxa_guard_release(&qword_254109D50);
  }
  v3 = &qword_254109000;
  if ((byte_254109C89 & 1) == 0)
  {
    v4 = re::introspect_uint64_t((re *)1, a2);
    v5 = atomic_load((unsigned __int8 *)&qword_254109D58);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254109D58))
    {
      re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_254109DC0);
      __cxa_guard_release(&qword_254109D58);
    }
    if ((byte_254109C8A & 1) == 0)
    {
      byte_254109C8A = 1;
      v6 = (uint64_t *)qword_254109CB8;
      if (!qword_254109CB8)
      {
        v7 = atomic_load((unsigned __int8 *)&qword_254109CA8);
        if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254109CA8))
        {
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410A030, 0);
          *(_QWORD *)(v27 + 22) = 0;
          qword_25410A040 = 0;
          *(_QWORD *)&xmmword_25410A050 = 0;
          *((_QWORD *)&xmmword_25410A050 + 1) = 0xFFFFFFFFLL;
          qword_25410A030 = (uint64_t)&off_24ED7DAA8;
          qword_25410A060 = (uint64_t)"AudioSourceState";
          dword_25410A068 = 0;
          *(_OWORD *)(v27 + 64) = 0u;
          *(_OWORD *)(v27 + 80) = 0u;
          *(_OWORD *)(v27 + 96) = 0u;
          qword_25410A0A0 = 0;
          __cxa_guard_release(&qword_254109CA8);
        }
        qword_254109CB8 = (uint64_t)&qword_25410A030;
        *(_QWORD *)&v55 = 0xC107D1832D9E740;
        *((_QWORD *)&v55 + 1) = "AudioSourceState";
        re::StringID::destroyString((re::StringID *)&v55);
        xmmword_25410A050 = v51;
        v9 = atomic_load((unsigned __int8 *)&qword_254109CB0);
        if ((v9 & 1) == 0)
        {
          v28 = (re *)__cxa_guard_acquire(&qword_254109CB0);
          if ((_DWORD)v28)
          {
            v29 = re::introspectionAllocator(v28);
            v31 = re::introspect_AssetHandle((re *)1, v30);
            v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
            *(_DWORD *)v32 = 1;
            *(_QWORD *)(v32 + 8) = "asset";
            *(_QWORD *)(v32 + 16) = v31;
            *(_QWORD *)(v32 + 24) = 0;
            *(_QWORD *)(v32 + 32) = 1;
            *(_DWORD *)(v32 + 40) = 0;
            *(_QWORD *)(v32 + 48) = 0;
            *(_QWORD *)(v32 + 56) = 0;
            *(_DWORD *)(v32 + 64) = 0;
            qword_254109D80 = v32;
            v33 = re::introspectionAllocator((re *)v32);
            v35 = re::introspect_uint32_t((re *)1, v34);
            v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
            *(_DWORD *)v36 = 1;
            *(_QWORD *)(v36 + 8) = "layoutTag";
            *(_QWORD *)(v36 + 16) = v35;
            *(_QWORD *)(v36 + 24) = 0;
            *(_QWORD *)(v36 + 32) = 0x2800000002;
            *(_DWORD *)(v36 + 40) = 0;
            *(_QWORD *)(v36 + 48) = 0;
            *(_QWORD *)(v36 + 56) = 0;
            *(_DWORD *)(v36 + 64) = 0;
            qword_254109D88 = v36;
            v37 = re::introspectionAllocator((re *)v36);
            v39 = re::introspect_float((re *)1, v38);
            v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
            *(_DWORD *)v40 = 1;
            *(_QWORD *)(v40 + 8) = "playbackSpeed";
            *(_QWORD *)(v40 + 16) = v39;
            *(_QWORD *)(v40 + 24) = 0;
            *(_QWORD *)(v40 + 32) = 0x2000000003;
            *(_DWORD *)(v40 + 40) = 0;
            *(_QWORD *)(v40 + 48) = 0;
            *(_QWORD *)(v40 + 56) = 0;
            *(_DWORD *)(v40 + 64) = 0;
            qword_254109D90 = v40;
            v41 = re::introspectionAllocator((re *)v40);
            v43 = re::introspect_float((re *)1, v42);
            v44 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v41 + 32))(v41, 72, 8);
            *(_DWORD *)v44 = 1;
            *(_QWORD *)(v44 + 8) = "reverbSendLevel";
            *(_QWORD *)(v44 + 16) = v43;
            v3 = &qword_254109000;
            *(_QWORD *)(v44 + 24) = 0;
            *(_QWORD *)(v44 + 32) = 0x2400000004;
            *(_DWORD *)(v44 + 40) = 0;
            *(_QWORD *)(v44 + 48) = 0;
            *(_QWORD *)(v44 + 56) = 0;
            *(_DWORD *)(v44 + 64) = 0;
            qword_254109D98 = v44;
            __cxa_guard_release(&qword_254109CB0);
          }
        }
        qword_25410A040 = 0x3000000008;
        v6 = &qword_25410A030;
        dword_25410A048 = 8;
        word_25410A04C = 0;
        dword_25410A068 = 4;
        qword_25410A070 = (uint64_t)&qword_254109D80;
        qword_25410A078 = (uint64_t)re::internal::defaultConstruct<re::ecs2::v1::AudioSourceState>;
        qword_25410A080 = (uint64_t)re::internal::defaultDestruct<re::ecs2::v1::AudioSourceState>;
        qword_25410A090 = 0;
        qword_25410A088 = 0;
        qword_25410A098 = (uint64_t)re::internal::defaultConstructV2<re::ecs2::v1::AudioSourceState>;
        qword_25410A0A0 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::v1::AudioSourceState>;
        re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25410A030, v8);
        v55 = v51;
      }
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254109DC0, 0);
      qword_254109DD0 = 0x800000001;
      dword_254109DD8 = 8;
      word_254109DDC = 0;
      *(_QWORD *)&xmmword_254109DE0 = 0;
      *((_QWORD *)&xmmword_254109DE0 + 1) = 0xFFFFFFFFLL;
      qword_254109DC0 = (uint64_t)&off_24ED30800;
      qword_254109DF0 = (uint64_t)v6;
      unk_254109DF8 = 0;
      re::IntrospectionRegistry::add(v10, v11);
      re::getPrettyTypeName((re *)&qword_254109DC0, (const re::IntrospectionBase *)&v51);
      if ((BYTE8(v51) & 1) != 0)
        v12 = v52;
      else
        v12 = (char *)&v51 + 9;
      if ((_QWORD)v51 && (BYTE8(v51) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v51 + 40))();
      if ((unint64_t)v55 >> 1 == 94623636
        && (*((char **)&v55 + 1) == "char*" || !strcmp(*((const char **)&v55 + 1), "char*")))
      {
        v13 = v51;
      }
      else
      {
        v51 = *((_OWORD *)v6 + 2);
        v13 = v54;
      }
      xmmword_254109DE0 = v13;
      re::StringID::destroyString((re::StringID *)&v55);
    }
    if ((*((_BYTE *)v3 + 3209) & 1) == 0)
    {
      byte_254109C89 = 1;
      v14 = dword_254109DD8;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254109E98, 0);
      qword_254109EA8 = 0x3000000007;
      dword_254109EB0 = v14;
      word_254109EB4 = 0;
      *(_QWORD *)&xmmword_254109EB8 = 0;
      *((_QWORD *)&xmmword_254109EB8 + 1) = 0xFFFFFFFFLL;
      qword_254109EC8 = (uint64_t)v4;
      qword_254109ED0 = 0;
      qword_254109ED8 = (uint64_t)&qword_254109DC0;
      qword_254109EE0 = 0;
      qword_254109E98 = (uint64_t)&off_24ED5B4A8;
      re::IntrospectionRegistry::add(v15, v16);
      re::getPrettyTypeName((re *)&qword_254109E98, (const re::IntrospectionBase *)&v51);
      if ((BYTE8(v51) & 1) != 0)
        v17 = v52;
      else
        v17 = (char *)&v51 + 9;
      if ((_QWORD)v51 && (BYTE8(v51) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v51 + 40))();
      v18 = v4[2];
      v46 = xmmword_254109DE0;
      v47 = v18;
      v19 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v48);
      if (v19)
      {
        v20 = *v19;
        *((_QWORD *)&v45 + 1) = v20;
      }
      else
      {
        *(_QWORD *)&v51 = 0x449AD97C4B77BED4;
        *((_QWORD *)&v51 + 1) = "_CompareFunc";
        v21 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v51);
        if (v21)
        {
          v22 = *v21;
          re::StringID::destroyString((re::StringID *)&v51);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v51);
          *(_QWORD *)&v55 = 0x449AD97C4B77BED4;
          *((_QWORD *)&v55 + 1) = "_CompareFunc";
          v22 = *((_QWORD *)&v51 + 1);
          v23 = (void *)v51;
          re::StringID::destroyString((re::StringID *)&v55);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v55, (uint64_t)&v51 + 8);
        if (!v23
          || (v24 = *v56,
              *(_QWORD *)&v51 = v22,
              *((_QWORD *)&v51 + 1) = v24,
              LODWORD(v52) = -1,
              (v25 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(v55 + 768, (uint64_t *)&v51)) == 0)|| !*(_QWORD *)v25)
        {
          v54 = v47;
          v53[0] = v23;
          v53[1] = v22;
        }
        v49 = v46;
        v50 = v47;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v51, v48, 1, 0x30uLL, 8uLL, &v50, &v49);
        re::TypeBuilder::setConstructor((uint64_t)&v51, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v51, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v51, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v51, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v51, v26);
      }
      xmmword_254109EB8 = v45;
      re::StringID::destroyString((re::StringID *)v48);
    }
  }
}

double re::internal::defaultConstruct<re::ecs2::v1::AudioPlayerComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_QWORD *)this + 20) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED5B548;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_DWORD *)(v3 + 64) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v3 + 68) = 0x7FFFFFFFLL;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *(_BYTE *)(v3 + 160) = 0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::v1::AudioPlayerComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::v1::AudioPlayerComponent>(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED5B548;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_DWORD *)(v1 + 64) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v1 + 68) = 0x7FFFFFFFLL;
  *(_QWORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_DWORD *)(v1 + 104) = 0;
  *(_QWORD *)(v1 + 152) = 0;
  *(_BYTE *)(v1 + 160) = 0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_DWORD *)(v1 + 144) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::v1::AudioPlayerComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::v1::introspect_AudioPlayerComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioPlayerComponent", (uint64_t (*)(re::internal *))re::ecs2::v1::allocInfo_AudioPlayerComponent, (re::IntrospectionBase *(*)(void))re::ecs2::v1::initInfo_AudioPlayerComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::v1::AudioPlayerComponent>, this);
}

uint64_t *re::ecs2::allocInfo_ChannelAudioComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254109CD0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254109CD0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410A120, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410A130 = 0;
    qword_25410A140 = 0;
    qword_25410A148 = 0xFFFFFFFFLL;
    qword_25410A120 = (uint64_t)&off_24ED7DAA8;
    qword_25410A150 = (uint64_t)"ChannelAudioComponent";
    dword_25410A158 = 0;
    xmmword_25410A160 = 0u;
    xmmword_25410A170 = 0u;
    xmmword_25410A180 = 0u;
    qword_25410A190 = 0;
    __cxa_guard_release(&qword_254109CD0);
  }
  return &qword_25410A120;
}

void re::ecs2::initInfo_ChannelAudioComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0xD5EC3C99B0BB5314;
  v14[1] = "ChannelAudioComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_254109CD8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254109CD8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254109D60 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_float((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "gain";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1C00000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254109D68 = v12;
      __cxa_guard_release(&qword_254109CD8);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254109D60;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ChannelAudioComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ChannelAudioComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ChannelAudioComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ChannelAudioComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<re::ecs2::ChannelAudioComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED5A480;
  *(_DWORD *)(v3 + 28) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::ChannelAudioComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::ChannelAudioComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED5A480;
  *(_DWORD *)(v1 + 28) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::ChannelAudioComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_ChannelAudioComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ChannelAudioComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ChannelAudioComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ChannelAudioComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ChannelAudioComponent>, this);
}

uint64_t *re::ecs2::allocInfo_AmbientAudioComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254109CE0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254109CE0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410A198, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410A1A8 = 0;
    qword_25410A1B8 = 0;
    qword_25410A1C0 = 0xFFFFFFFFLL;
    qword_25410A198 = (uint64_t)&off_24ED7DAA8;
    qword_25410A1C8 = (uint64_t)"AmbientAudioComponent";
    dword_25410A1D0 = 0;
    xmmword_25410A1D8 = 0u;
    xmmword_25410A1E8 = 0u;
    xmmword_25410A1F8 = 0u;
    qword_25410A208 = 0;
    __cxa_guard_release(&qword_254109CE0);
  }
  return &qword_25410A198;
}

void re::ecs2::initInfo_AmbientAudioComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x6EAB480046526CBELL;
  v14[1] = "AmbientAudioComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_254109CE8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254109CE8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254109D70 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_float((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "gain";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1C00000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254109D78 = v12;
      __cxa_guard_release(&qword_254109CE8);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254109D70;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AmbientAudioComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AmbientAudioComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AmbientAudioComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AmbientAudioComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<re::ecs2::AmbientAudioComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED5A500;
  *(_DWORD *)(v3 + 28) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::AmbientAudioComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::AmbientAudioComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED5A500;
  *(_DWORD *)(v1 + 28) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::AmbientAudioComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_AmbientAudioComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AmbientAudioComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AmbientAudioComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AmbientAudioComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AmbientAudioComponent>, this);
}

uint64_t *re::ecs2::allocInfo_SpatialAudioComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254109CF0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254109CF0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410A210, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410A220 = 0;
    qword_25410A230 = 0;
    qword_25410A238 = 0xFFFFFFFFLL;
    qword_25410A210 = (uint64_t)&off_24ED7DAA8;
    qword_25410A240 = (uint64_t)"SpatialAudioComponent";
    dword_25410A248 = 0;
    xmmword_25410A250 = 0u;
    xmmword_25410A260 = 0u;
    xmmword_25410A270 = 0u;
    qword_25410A280 = 0;
    __cxa_guard_release(&qword_254109CF0);
  }
  return &qword_25410A210;
}

void re::ecs2::initInfo_SpatialAudioComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  void *v39;
  uint64_t v40;
  __int128 v41;
  _QWORD v42[2];
  __int128 v43;

  v42[0] = 0xB3E78A7CC19C6796;
  v42[1] = "SpatialAudioComponent";
  re::StringID::destroyString((re::StringID *)v42);
  *((_OWORD *)this + 2) = v43;
  v4 = atomic_load((unsigned __int8 *)&qword_254109CF8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254109CF8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254109E00 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_float((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "gain";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x3800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254109E08 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_float((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "directLevel";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x1C00000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254109E10 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_float((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "reverbLevel";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x2000000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_254109E18 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = introspect_REAudioSourceDirectivityMode(1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "sourceDirectivityMode";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x2800000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_254109E20 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_float((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "directivityFocus";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x2C00000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_254109E28 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::introspect_float((re *)1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "sphericalCapDiameter";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x3000000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_254109E30 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v35 = re::introspect_float((re *)1, v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "sphericalCapOpeningAngle";
      *(_QWORD *)(v36 + 16) = v35;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0x3400000007;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_254109E38 = v36;
      v37 = re::introspectionAllocator((re *)v36);
      v39 = re::introspect_float((re *)1, v38);
      v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
      *(_DWORD *)v40 = 1;
      *(_QWORD *)(v40 + 8) = "rolloffFactor";
      *(_QWORD *)(v40 + 16) = v39;
      *(_QWORD *)(v40 + 24) = 0;
      *(_QWORD *)(v40 + 32) = 0x2400000008;
      *(_DWORD *)(v40 + 40) = 0;
      *(_QWORD *)(v40 + 48) = 0;
      *(_QWORD *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_254109E40 = v40;
      __cxa_guard_release(&qword_254109CF8);
    }
  }
  *((_QWORD *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 9;
  *((_QWORD *)this + 8) = &qword_254109E00;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::SpatialAudioComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::SpatialAudioComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SpatialAudioComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SpatialAudioComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v41 = v43;
}

double re::internal::defaultConstruct<re::ecs2::SpatialAudioComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED5A580;
  *(_DWORD *)(v3 + 28) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 36) = 0x13F800000;
  result = 6.14672757e-10;
  *(_OWORD *)(v3 + 44) = xmmword_22610D440;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::SpatialAudioComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::SpatialAudioComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED5A580;
  *(_DWORD *)(v1 + 28) = 0;
  *(_DWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 36) = 0x13F800000;
  result = 6.14672757e-10;
  *(_OWORD *)(v1 + 44) = xmmword_22610D440;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::SpatialAudioComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_SpatialAudioComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SpatialAudioComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SpatialAudioComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SpatialAudioComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SpatialAudioComponent>, this);
}

void re::ecs2::AudioPlayerSystem::~AudioPlayerSystem(re::ecs2::AudioPlayerSystem *this)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 240);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 200);
  re::HashTable<re::ecs2::Scene const*,re::HashTable<unsigned long long,re::SharedPtr<re::AudioSourceState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 14);

  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 240);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 200);
  re::HashTable<re::ecs2::Scene const*,re::HashTable<unsigned long long,re::SharedPtr<re::AudioSourceState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 14);

  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::AudioPlayerSystem::typeInfo(re::ecs2::AudioPlayerSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioPlayerSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioPlayerSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioPlayerSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioPlayerSystem>, 0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t std::__throw_bad_optional_access[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_optional_access was thrown in -fno-exceptions mode");
  return ___ZL14getHumanIRPathv_block_invoke();
}

void ___ZL14getHumanIRPathv_block_invoke()
{
  id v0;
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  const char *v5;
  _BYTE v6[8];
  id v7;

  re::Bundle::reResourcesFramework((uint64_t)v6);
  if (v6[0])
    v0 = v7;
  else
    v0 = 0;
  v1 = objc_retainAutorelease(v0);
  if (v6[0])

  objc_msgSend(v1, "pathForResource:ofType:", CFSTR("Human"), CFSTR("ir"));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_254109D08;
  qword_254109D08 = v2;

  v4 = objc_msgSend((id)qword_254109D08, "UTF8String");
  v5 = "";
  if (v4)
    v5 = (const char *)v4;
  qword_254109D00 = (uint64_t)v5;
}

double re::HashTable<re::ecs2::Scene const*,re::HashTable<unsigned long long,re::SharedPtr<re::AudioSourceState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::HashTable<unsigned long long,re::SharedPtr<re::RealityFile>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)(v6 + 24));
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 72;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

_QWORD *re::IntrospectionHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::DynamicString,re::USKTextureProvider,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4, uint64_t *a5)
{
  _anonymous_namespace_ *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  re::IntrospectionBase *v22;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[3];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = 0;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  memset(v33, 0, sizeof(v33));
  v24 = 0u;
  v25 = 0u;
  v26 = 9;
  v27 = 1065353216;
  v28 = 0uLL;
  v29 = 0x3F80000000000000uLL;
  __asm { FMOV            V0.2S, #1.0 }
  v30 = _D0;
  v31 = 0;
  v32 = 1065353216;
  BYTE8(v33[2]) = 0;
  v35 = 0uLL;
  v15 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v34, 0);
  LODWORD(v36) = 1;
  *(_QWORD *)((char *)&v36 + 4) = 0x3E051EB800000000;
  HIDWORD(v36) = 1106247680;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  re::DynamicString::setCapacity(&v38, 0);
  LOWORD(v40) = 0;
  v22 = (re::IntrospectionBase *)re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(a4, a5, (uint64_t)&v24);
  if ((_QWORD)v38)
  {
    if ((BYTE8(v38) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v38 + 40))(v38, v39, v16, v17, v18, v19, v20, v21, v24, *((_QWORD *)&v24 + 1), v25, *((_QWORD *)&v25 + 1), v26, v27);
    v38 = 0u;
    v39 = 0u;
  }
  if ((_QWORD)v34)
  {
    if ((BYTE8(v34) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v34 + 40))();
    v34 = 0u;
    v35 = 0u;
  }
  if (LOBYTE(v33[0]) && *((_QWORD *)&v33[0] + 1))
  {
    if ((v33[1] & 1) != 0)
      (*(void (**)(void))(**((_QWORD **)&v33[0] + 1) + 40))();
    memset((char *)v33 + 8, 0, 32);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&v24 + 8));
  re::introspectionInitElement(a2, a3, a1[8], v22);
  return v22;
}

uint64_t re::IntrospectionHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  int v11;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (_DWORD *)(*(_QWORD *)(a2 + 16) + 8);
    while ((*v7 & 0x80000000) == 0)
    {
      v7 += 72;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v9 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 288 * v9 + 16, *(_QWORD *)(a2 + 16) + 288 * v9 + 24);
    if (!(_DWORD)result)
      break;
    v10 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v9 = (v6 + 1);
      if (v10 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v11 = v9;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 288 * v9 + 8) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v11 = v10;
LABEL_18:
    LODWORD(v6) = v11;
  }
  while ((_DWORD)v5 != v11);
  return result;
}

double re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 288;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    v4 = (_OWORD *)(a1 + 248);
    v3 = *(_QWORD *)(a1 + 248);
    *((_DWORD *)v4 - 60) = v1 & 0x7FFFFFFF;
    if (v3)
    {
      if ((*(_BYTE *)(a1 + 256) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 264));
      *v4 = 0u;
      v4[1] = 0u;
    }
    v5 = *(_QWORD *)(a1 + 184);
    if (v5)
    {
      if ((*(_BYTE *)(a1 + 192) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(a1 + 200));
      *(_OWORD *)(a1 + 184) = 0u;
      *(_OWORD *)(a1 + 200) = 0u;
    }
    if (*(_BYTE *)(a1 + 136))
    {
      v6 = *(_QWORD *)(a1 + 144);
      if (v6)
      {
        if ((*(_BYTE *)(a1 + 152) & 1) != 0)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(a1 + 160));
        *(_OWORD *)(a1 + 144) = 0u;
        *(_OWORD *)(a1 + 160) = 0u;
      }
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 32));
  }
}

void re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::USKTextureProvider,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v13[16] = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v9 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = v7 + 16;
        do
        {
          if ((*(_DWORD *)(v11 - 8) & 0x80000000) != 0)
            re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v11 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v11 - 16), v11, v11 + 8);
          v11 += 288;
          --v10;
        }
        while (v10);
      }
      re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 288 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 288 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 288 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 288 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 288 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 288 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 288 * v9 + 16) = *a4;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = v13 + 288 * v9;
  *(_QWORD *)(v14 + 24) = *(_QWORD *)a5;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  *(_QWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 40) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = 0;
  v15 = *(_QWORD *)(v14 + 32);
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = v15;
  v16 = *(_QWORD *)(v14 + 48);
  *(_QWORD *)(v14 + 48) = *(_QWORD *)(a5 + 24);
  *(_QWORD *)(a5 + 24) = v16;
  v17 = *(_OWORD *)(a5 + 48);
  v18 = *(_OWORD *)(a5 + 64);
  v19 = *(_OWORD *)(a5 + 80);
  *(_OWORD *)(v14 + 116) = *(_OWORD *)(a5 + 92);
  *(_OWORD *)(v14 + 104) = v19;
  *(_OWORD *)(v14 + 88) = v18;
  *(_OWORD *)(v14 + 72) = v17;
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(a5 + 32);
  LODWORD(v16) = *(unsigned __int8 *)(a5 + 112);
  *(_BYTE *)(v14 + 136) = v16;
  if ((_DWORD)v16)
  {
    v20 = v13 + 288 * v9;
    *(_OWORD *)(v20 + 144) = 0u;
    *(_OWORD *)(v20 + 160) = 0u;
    *(_QWORD *)(v20 + 168) = *(_QWORD *)(a5 + 144);
    v21 = *(_QWORD *)(a5 + 128);
    *(_QWORD *)(v20 + 144) = *(_QWORD *)(a5 + 120);
    *(_QWORD *)(a5 + 120) = 0;
    v22 = *(_QWORD *)(a5 + 136);
    *(_QWORD *)(a5 + 144) = 0;
    v24 = *(_QWORD *)(v20 + 152);
    v23 = *(_QWORD *)(v20 + 160);
    *(_QWORD *)(v20 + 152) = v21;
    *(_QWORD *)(v20 + 160) = v22;
    *(_QWORD *)(a5 + 128) = v24;
    *(_QWORD *)(a5 + 136) = v23;
  }
  v25 = v13 + 288 * v9;
  *(_BYTE *)(v25 + 176) = *(_BYTE *)(a5 + 152);
  *(_OWORD *)(v25 + 184) = 0u;
  *(_OWORD *)(v25 + 200) = 0u;
  *(_QWORD *)(v25 + 208) = *(_QWORD *)(a5 + 184);
  v26 = *(_QWORD *)(a5 + 168);
  *(_QWORD *)(v25 + 184) = *(_QWORD *)(a5 + 160);
  *(_QWORD *)(a5 + 160) = 0;
  v27 = *(_QWORD *)(a5 + 176);
  *(_QWORD *)(a5 + 184) = 0;
  v29 = *(_QWORD *)(v25 + 192);
  v28 = *(_QWORD *)(v25 + 200);
  *(_QWORD *)(v25 + 192) = v26;
  *(_QWORD *)(v25 + 200) = v27;
  *(_QWORD *)(a5 + 168) = v29;
  *(_QWORD *)(a5 + 176) = v28;
  v30 = *(_OWORD *)(a5 + 192);
  *(_OWORD *)(v25 + 232) = *(_OWORD *)(a5 + 208);
  *(_OWORD *)(v25 + 216) = v30;
  *(_OWORD *)(v25 + 264) = 0u;
  *(_OWORD *)(v25 + 248) = 0u;
  *(_QWORD *)(v25 + 272) = *(_QWORD *)(a5 + 248);
  v31 = *(_QWORD *)(a5 + 232);
  *(_QWORD *)(v25 + 248) = *(_QWORD *)(a5 + 224);
  *(_QWORD *)(a5 + 224) = 0;
  v32 = *(_QWORD *)(a5 + 240);
  *(_QWORD *)(a5 + 248) = 0;
  v34 = *(_QWORD *)(v25 + 256);
  v33 = *(_QWORD *)(v25 + 264);
  *(_QWORD *)(v25 + 256) = v31;
  *(_QWORD *)(v25 + 264) = v32;
  *(_QWORD *)(a5 + 232) = v34;
  *(_QWORD *)(a5 + 240) = v33;
  *(_WORD *)(v25 + 280) = *(_WORD *)(a5 + 256);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    if (*(_DWORD *)(a1 + 32))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free(*(_QWORD *)(a1 + 16) + v3);
        ++v4;
        v3 += 288;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

uint64_t re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unsigned int v23;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v23 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v22 = *(_QWORD *)(a1 + 16) + 288 * v23;
    return v22 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 288 * v10 + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + 288 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = 9 * v10;
  v13 = v11 + 288 * v10;
  v14 = *(_QWORD *)(v13 + 40);
  *(_QWORD *)(v13 + 40) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = v14;
  v15 = *(_QWORD *)(v13 + 32);
  *(_QWORD *)(v13 + 32) = 0;
  v16 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(v13 + 24) = *(_QWORD *)a3;
  *(_QWORD *)(v13 + 32) = v16;
  *(_QWORD *)(a3 + 8) = v15;
  v17 = *(_QWORD *)(v13 + 48);
  *(_QWORD *)(v13 + 48) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = v17;
  *(_OWORD *)(v13 + 56) = *(_OWORD *)(a3 + 32);
  v18 = *(_OWORD *)(a3 + 48);
  v19 = *(_OWORD *)(a3 + 64);
  v20 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v13 + 116) = *(_OWORD *)(a3 + 92);
  *(_OWORD *)(v13 + 104) = v20;
  *(_OWORD *)(v13 + 88) = v19;
  *(_OWORD *)(v13 + 72) = v18;
  re::Optional<re::DynamicString>::operator=((unsigned __int8 *)(v13 + 136), (_QWORD *)(a3 + 112));
  *(_BYTE *)(v13 + 176) = *(_BYTE *)(a3 + 152);
  re::DynamicString::operator=((re::DynamicString *)(v13 + 184), (re::DynamicString *)(a3 + 160));
  v21 = *(_OWORD *)(a3 + 192);
  *(_OWORD *)(v13 + 232) = *(_OWORD *)(a3 + 208);
  *(_OWORD *)(v13 + 216) = v21;
  re::DynamicString::operator=((re::DynamicString *)(v13 + 248), (re::DynamicString *)(a3 + 224));
  *(_WORD *)(v13 + 280) = *(_WORD *)(a3 + 256);
  ++*(_DWORD *)(a1 + 40);
  v22 = *(_QWORD *)(a1 + 16) + 32 * v12;
  return v22 + 24;
}

void re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::DynamicString,re::USKTextureProvider,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a1);
  return re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a1);
    re::HashTable<re::DynamicString,re::USKTextureProvider,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, uint64_t *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(a1, a4, (uint64_t)Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v7 = a1[3];
        v8 = *(_DWORD *)(v7 + 32);
        v9 = v4 + 1;
        do
        {
          LODWORD(v5) = v9;
          *((_DWORD *)a1 + 8) = v9;
          if (v9 >= v8)
            break;
          v10 = *(_DWORD *)(*(_QWORD *)(v7 + 16) + 288 * v9++ + 8);
        }
        while ((v10 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = (_DWORD *)(*(_QWORD *)(v2 + 16) + 8);
        while ((*v6 & 0x80000000) == 0)
        {
          v6 += 72;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 288 * *(unsigned int *)(a1 + 32) + 16;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 288 * *(unsigned int *)(a1 + 32) + 24;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioSourceSyncState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

re::ecs2::AudioPlayerSystem *re::ecs2::AudioPlayerSystem::AudioPlayerSystem(re::ecs2::AudioPlayerSystem *this)
{
  _QWORD *v2;
  uint64_t v3;
  id v4;

  re::ecs2::System::System((uint64_t)this, 1, 1);
  *v2 = &off_24ED5B5C8;
  v3 = MEMORY[0x24BDAC9B8];
  v4 = MEMORY[0x24BDAC9B8];
  *((_QWORD *)this + 13) = v3;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 36) = 0;
  *(_QWORD *)((char *)this + 148) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_QWORD *)this + 28) = 0;
  *((_DWORD *)this + 58) = 1065353216;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_DWORD *)this + 68) = 1065353216;
  return this;
}

id re::internal::defaultRetain<re::ecs2::AudioPlayerSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AudioPlayerSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

double re::HashTable<unsigned long long,void({block_pointer} {__strong})(unsigned long long,REAudioPlaybackState,REAudioPlaybackState),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;

          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 32;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<unsigned long long,void({block_pointer} {__strong})(unsigned long long,REAudioPlaybackState,REAudioPlaybackState),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long long,void({block_pointer} {__strong})(unsigned long long,REAudioPlaybackState,REAudioPlaybackState),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (_QWORD *)(*(_QWORD *)&v13[16] + v10 + 16), (const void **)(*(_QWORD *)&v13[16] + v10 + 24));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long long,void({block_pointer} {__strong})(unsigned long long,REAudioPlaybackState,REAudioPlaybackState),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<unsigned long long,void({block_pointer} {__strong})(unsigned long long,REAudioPlaybackState,REAudioPlaybackState),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, const void **a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,void({block_pointer} {__strong})(unsigned long long,REAudioPlaybackState,REAudioPlaybackState),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 32 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v10) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v10 + 16) = *a4;
  v14 = *(_QWORD *)(a1 + 16) + 32 * v10;
  *(_QWORD *)(v14 + 24) = _Block_copy(*a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::DynamicArray<re::AssetHandle>::removeAt(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = v4 + 24 * v2;
    v6 = (__int128 *)(v4 + 24 * a2);
    v7 = *v6;
    *(_QWORD *)v6 = 0;
    v8 = *(_QWORD *)(v5 - 16);
    *(_QWORD *)v6 = *(_QWORD *)(v5 - 24);
    *((_QWORD *)v6 + 1) = v8;
    *(_OWORD *)(v5 - 24) = v7;
    v9 = *((_QWORD *)v6 + 2);
    *((_QWORD *)v6 + 2) = *(_QWORD *)(v5 - 8);
    *(_QWORD *)(v5 - 8) = v9;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(*(_QWORD *)(a1 + 32) + 24 * v2 - 24));
  --*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::HashTable<unsigned long long,void (*)(unsigned long long),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<void (*&)(unsigned long long)>(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::ecs2::Scene const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,re::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v13[16] = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v9 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = (_QWORD *)(v7 + 16);
        do
        {
          if ((*(_DWORD *)(v11 - 1) & 0x80000000) != 0)
            re::HashTable<unsigned long long,re::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(v11 - 2) % (unint64_t)*(unsigned int *)(a1 + 24), *(v11 - 2), v11, v11 + 1);
          v11 += 4;
          --v10;
        }
        while (v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<unsigned long long,re::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t result, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  v8 = result;
  v9 = *(unsigned int *)(result + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(result + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(result + 24))
    {
      result = re::HashTable<unsigned long long,re::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(result, (2 * *(_DWORD *)(result + 28)));
      a2 = a3 % *(unsigned int *)(v8 + 24);
      v10 = *(_DWORD *)(v8 + 32);
    }
    *(_DWORD *)(v8 + 32) = v10 + 1;
    v11 = *(_QWORD *)(v8 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(result + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(result + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(v8 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v8 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(v8 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(v8 + 16) + 32 * v9 + 16) = *a4;
  *(_QWORD *)(*(_QWORD *)(v8 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(v8 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(v8 + 28);
  return result;
}

void *re::EventBus::getTypeId<REAudioPlayerDidCreateAudioUnitEvent>()
{
  unsigned __int8 v0;
  _UNKNOWN **v1;
  int v3;
  const char *v4;

  v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if ((v0 & 1) == 0)
  {
    v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (v3)
    {
      re::EventBus::getTypeId<REAudioPlayerDidCreateAudioUnitEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"36REAudioPlayerDidCreateAudioUnitEvent" & 0x7FFFFFFFFFFFFFFFLL), v4);
      v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    }
  }
  return v1[84];
}

void *re::EventBus::getTypeId<REAudioPlayerDidPrepareAudioUnitEvent>()
{
  unsigned __int8 v0;
  _UNKNOWN **v1;
  int v3;
  const char *v4;

  v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if ((v0 & 1) == 0)
  {
    v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (v3)
    {
      re::EventBus::getTypeId<REAudioPlayerDidPrepareAudioUnitEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"37REAudioPlayerDidPrepareAudioUnitEvent" & 0x7FFFFFFFFFFFFFFFLL), v4);
      v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    }
  }
  return v1[86];
}

uint64_t _ZNSt3__110__function6__funcIZZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS2_20AudioSourceSyncStateEPNS2_15TimebaseServiceEEUb_E3__0NS_9allocatorIS9_EEFvvEED1Ev(uint64_t a1)
{

  return a1;
}

void _ZNSt3__110__function6__funcIZZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS2_20AudioSourceSyncStateEPNS2_15TimebaseServiceEEUb_E3__0NS_9allocatorIS9_EEFvvEED0Ev(uint64_t a1)
{

  JUMPOUT(0x2276933B8);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS2_20AudioSourceSyncStateEPNS2_15TimebaseServiceEEUb_E3__0NS_9allocatorIS9_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x28uLL);
  *v2 = &off_24ED5B168;
  v2[1] = *(id *)(a1 + 8);
  *((_OWORD *)v2 + 1) = *(_OWORD *)(a1 + 16);
  v2[4] = *(_QWORD *)(a1 + 32);
  return v2;
}

__n128 _ZNKSt3__110__function6__funcIZZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS2_20AudioSourceSyncStateEPNS2_15TimebaseServiceEEUb_E3__0NS_9allocatorIS9_EEFvvEE7__cloneEPNS0_6__baseISC_EE(uint64_t a1, __n128 *a2)
{
  unint64_t v4;
  __n128 result;

  a2->n128_u64[0] = (unint64_t)&off_24ED5B168;
  a2->n128_u64[1] = (unint64_t)*(id *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 32);
  result = *(__n128 *)(a1 + 16);
  a2[1] = result;
  a2[2].n128_u64[0] = v4;
  return result;
}

void _ZNSt3__110__function6__funcIZZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS2_20AudioSourceSyncStateEPNS2_15TimebaseServiceEEUb_E3__0NS_9allocatorIS9_EEFvvEE7destroyEv(uint64_t a1)
{

}

void _ZNSt3__110__function6__funcIZZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS2_20AudioSourceSyncStateEPNS2_15TimebaseServiceEEUb_E3__0NS_9allocatorIS9_EEFvvEE18destroy_deallocateEv(id *a1)
{

  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS2_20AudioSourceSyncStateEPNS2_15TimebaseServiceEEUb_E3__0NS_9allocatorIS9_EEFvvEEclEv(uint64_t a1)
{
  re::ecs2::AudioPlayerComponent::playbackStateDidChange(*(_QWORD *)(objc_msgSend(*(id *)(a1 + 8), "state") + 480), *(_QWORD *)(a1 + 16), *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t _ZNKSt3__110__function6__funcIZZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS2_20AudioSourceSyncStateEPNS2_15TimebaseServiceEEUb_E3__0NS_9allocatorIS9_EEFvvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS_20AudioSourceSyncStateEPNS_15TimebaseServiceEEUb_E3__0))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS2_20AudioSourceSyncStateEPNS2_15TimebaseServiceEEUb_E3__0NS_9allocatorIS9_EEFvvEE11target_typeEv()
{
  return &_ZTIZZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS_20AudioSourceSyncStateEPNS_15TimebaseServiceEEUb_E3__0;
}

uint64_t _ZNSt3__110__function6__funcIZZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS2_20AudioSourceSyncStateEPNS2_15TimebaseServiceEEUb0_E3__1NS_9allocatorIS9_EEFvvEED1Ev(uint64_t a1)
{

  return a1;
}

void _ZNSt3__110__function6__funcIZZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS2_20AudioSourceSyncStateEPNS2_15TimebaseServiceEEUb0_E3__1NS_9allocatorIS9_EEFvvEED0Ev(uint64_t a1)
{

  JUMPOUT(0x2276933B8);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS2_20AudioSourceSyncStateEPNS2_15TimebaseServiceEEUb0_E3__1NS_9allocatorIS9_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v2 = operator new(0x20uLL);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  *v2 = &off_24ED5B1E8;
  v2[1] = v3;
  v2[2] = v4;
  v2[3] = *(id *)(a1 + 24);
  return v2;
}

id _ZNKSt3__110__function6__funcIZZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS2_20AudioSourceSyncStateEPNS2_15TimebaseServiceEEUb0_E3__1NS_9allocatorIS9_EEFvvEE7__cloneEPNS0_6__baseISC_EE(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  id result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(void **)(a1 + 16);
  *a2 = &off_24ED5B1E8;
  a2[1] = v4;
  a2[2] = v5;
  result = *(id *)(a1 + 24);
  a2[3] = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS2_20AudioSourceSyncStateEPNS2_15TimebaseServiceEEUb0_E3__1NS_9allocatorIS9_EEFvvEE7destroyEv(uint64_t a1)
{

}

void _ZNSt3__110__function6__funcIZZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS2_20AudioSourceSyncStateEPNS2_15TimebaseServiceEEUb0_E3__1NS_9allocatorIS9_EEFvvEE18destroy_deallocateEv(id *a1)
{

  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS2_20AudioSourceSyncStateEPNS2_15TimebaseServiceEEUb0_E3__1NS_9allocatorIS9_EEFvvEEclEv(uint64_t a1)
{
  re::ecs2::AudioPlayerComponent *v2;
  re::AudioSourceState *v3;
  NSError *v4;

  v2 = (re::ecs2::AudioPlayerComponent *)objc_msgSend(*(id *)(a1 + 16), "state");
  v3 = *(re::AudioSourceState **)(objc_msgSend(*(id *)(a1 + 16), "state") + 480);
  re::ecs2::AudioPlayerComponent::preparationCompleteCallback(v2, v3, *(re::ecs2::AudioPlayerComponent **)(a1 + 24), v4);
}

uint64_t _ZNKSt3__110__function6__funcIZZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS2_20AudioSourceSyncStateEPNS2_15TimebaseServiceEEUb0_E3__1NS_9allocatorIS9_EEFvvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS_20AudioSourceSyncStateEPNS_15TimebaseServiceEEUb0_E3__1))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS2_20AudioSourceSyncStateEPNS2_15TimebaseServiceEEUb0_E3__1NS_9allocatorIS9_EEFvvEE11target_typeEv()
{
  return &_ZTIZZN2re4ecs220AudioPlayerComponent19completePreparationEyPNS_20AudioSourceSyncStateEPNS_15TimebaseServiceEEUb0_E3__1;
}

uint64_t re::HashTable<unsigned long long,float,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _DWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,float,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  v13 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,float,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long long,float,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (_QWORD *)(*(_QWORD *)&v13[16] + v10 + 16), (_DWORD *)(*(_QWORD *)&v13[16] + v10 + 24));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

void std::__function::__func<re::ecs2::AudioPlayerComponent::applyGainForAllPlaybackTokens(void)::$_0,std::allocator<re::ecs2::AudioPlayerComponent::applyGainForAllPlaybackTokens(void)::$_0>,void ()(unsigned long long)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::ecs2::AudioPlayerComponent::applyGainForAllPlaybackTokens(void)::$_0,std::allocator<re::ecs2::AudioPlayerComponent::applyGainForAllPlaybackTokens(void)::$_0>,void ()(unsigned long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED5B268;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::ecs2::AudioPlayerComponent::applyGainForAllPlaybackTokens(void)::$_0,std::allocator<re::ecs2::AudioPlayerComponent::applyGainForAllPlaybackTokens(void)::$_0>,void ()(unsigned long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED5B268;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::ecs2::AudioPlayerComponent::applyGainForAllPlaybackTokens(void)::$_0,std::allocator<re::ecs2::AudioPlayerComponent::applyGainForAllPlaybackTokens(void)::$_0>,void ()(unsigned long long)>::operator()(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 8);
  LODWORD(v3) = 0x7FFFFFFF;
  if (*(_QWORD *)(v2 + 32))
  {
    v4 = *a2;
    v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
    v6 = *(unsigned int *)(*(_QWORD *)(v2 + 40)
                         + 4
                         * (((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31))
                          % *(unsigned int *)(v2 + 56)));
    if ((_DWORD)v6 != 0x7FFFFFFF)
    {
      v7 = *(_QWORD *)(v2 + 48);
      LODWORD(v3) = v6;
      if (*(_QWORD *)(v7 + 288 * v6 + 16) != v4)
      {
        v3 = v6;
        while (1)
        {
          LODWORD(v3) = *(_DWORD *)(v7 + 288 * v3 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v3 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v7 + 288 * v3 + 16) == v4)
            goto LABEL_9;
        }
        LODWORD(v3) = 0x7FFFFFFF;
      }
    }
  }
LABEL_9:
  *(_DWORD *)(*(_QWORD *)(v2 + 48) + 288 * v3 + 128) = *(_DWORD *)(v2 + 256);
  return result;
}

uint64_t std::__function::__func<re::ecs2::AudioPlayerComponent::applyGainForAllPlaybackTokens(void)::$_0,std::allocator<re::ecs2::AudioPlayerComponent::applyGainForAllPlaybackTokens(void)::$_0>,void ()(unsigned long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::ecs2::AudioPlayerComponent::applyGainForAllPlaybackTokens(void)::$_0,std::allocator<re::ecs2::AudioPlayerComponent::applyGainForAllPlaybackTokens(void)::$_0>,void ()(unsigned long long)>::target_type()
{
}

void std::__function::__func<re::ecs2::AudioPlayerComponent::applyDirectLevelForAllPlaybackTokens(void)::$_0,std::allocator<re::ecs2::AudioPlayerComponent::applyDirectLevelForAllPlaybackTokens(void)::$_0>,void ()(unsigned long long)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::ecs2::AudioPlayerComponent::applyDirectLevelForAllPlaybackTokens(void)::$_0,std::allocator<re::ecs2::AudioPlayerComponent::applyDirectLevelForAllPlaybackTokens(void)::$_0>,void ()(unsigned long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED5B2E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::ecs2::AudioPlayerComponent::applyDirectLevelForAllPlaybackTokens(void)::$_0,std::allocator<re::ecs2::AudioPlayerComponent::applyDirectLevelForAllPlaybackTokens(void)::$_0>,void ()(unsigned long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED5B2E8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::ecs2::AudioPlayerComponent::applyDirectLevelForAllPlaybackTokens(void)::$_0,std::allocator<re::ecs2::AudioPlayerComponent::applyDirectLevelForAllPlaybackTokens(void)::$_0>,void ()(unsigned long long)>::operator()(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 8);
  LODWORD(v3) = 0x7FFFFFFF;
  if (*(_QWORD *)(v2 + 32))
  {
    v4 = *a2;
    v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
    v6 = *(unsigned int *)(*(_QWORD *)(v2 + 40)
                         + 4
                         * (((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31))
                          % *(unsigned int *)(v2 + 56)));
    if ((_DWORD)v6 != 0x7FFFFFFF)
    {
      v7 = *(_QWORD *)(v2 + 48);
      LODWORD(v3) = v6;
      if (*(_QWORD *)(v7 + 288 * v6 + 16) != v4)
      {
        v3 = v6;
        while (1)
        {
          LODWORD(v3) = *(_DWORD *)(v7 + 288 * v3 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v3 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v7 + 288 * v3 + 16) == v4)
            goto LABEL_9;
        }
        LODWORD(v3) = 0x7FFFFFFF;
      }
    }
  }
LABEL_9:
  *(_DWORD *)(*(_QWORD *)(v2 + 48) + 288 * v3 + 88) = *(_DWORD *)(v2 + 276);
  return result;
}

uint64_t std::__function::__func<re::ecs2::AudioPlayerComponent::applyDirectLevelForAllPlaybackTokens(void)::$_0,std::allocator<re::ecs2::AudioPlayerComponent::applyDirectLevelForAllPlaybackTokens(void)::$_0>,void ()(unsigned long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::ecs2::AudioPlayerComponent::applyDirectLevelForAllPlaybackTokens(void)::$_0,std::allocator<re::ecs2::AudioPlayerComponent::applyDirectLevelForAllPlaybackTokens(void)::$_0>,void ()(unsigned long long)>::target_type()
{
}

void std::__function::__func<re::ecs2::AudioPlayerComponent::applyReverbLevelForAllPlaybackTokens(void)::$_0,std::allocator<re::ecs2::AudioPlayerComponent::applyReverbLevelForAllPlaybackTokens(void)::$_0>,void ()(unsigned long long)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::ecs2::AudioPlayerComponent::applyReverbLevelForAllPlaybackTokens(void)::$_0,std::allocator<re::ecs2::AudioPlayerComponent::applyReverbLevelForAllPlaybackTokens(void)::$_0>,void ()(unsigned long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED5B368;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::ecs2::AudioPlayerComponent::applyReverbLevelForAllPlaybackTokens(void)::$_0,std::allocator<re::ecs2::AudioPlayerComponent::applyReverbLevelForAllPlaybackTokens(void)::$_0>,void ()(unsigned long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED5B368;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::ecs2::AudioPlayerComponent::applyReverbLevelForAllPlaybackTokens(void)::$_0,std::allocator<re::ecs2::AudioPlayerComponent::applyReverbLevelForAllPlaybackTokens(void)::$_0>,void ()(unsigned long long)>::operator()(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 8);
  LODWORD(v3) = 0x7FFFFFFF;
  if (*(_QWORD *)(v2 + 32))
  {
    v4 = *a2;
    v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
    v6 = *(unsigned int *)(*(_QWORD *)(v2 + 40)
                         + 4
                         * (((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31))
                          % *(unsigned int *)(v2 + 56)));
    if ((_DWORD)v6 != 0x7FFFFFFF)
    {
      v7 = *(_QWORD *)(v2 + 48);
      LODWORD(v3) = v6;
      if (*(_QWORD *)(v7 + 288 * v6 + 16) != v4)
      {
        v3 = v6;
        while (1)
        {
          LODWORD(v3) = *(_DWORD *)(v7 + 288 * v3 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v3 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v7 + 288 * v3 + 16) == v4)
            goto LABEL_9;
        }
        LODWORD(v3) = 0x7FFFFFFF;
      }
    }
  }
LABEL_9:
  *(_DWORD *)(*(_QWORD *)(v2 + 48) + 288 * v3 + 84) = *(_DWORD *)(v2 + 280);
  return result;
}

uint64_t std::__function::__func<re::ecs2::AudioPlayerComponent::applyReverbLevelForAllPlaybackTokens(void)::$_0,std::allocator<re::ecs2::AudioPlayerComponent::applyReverbLevelForAllPlaybackTokens(void)::$_0>,void ()(unsigned long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::ecs2::AudioPlayerComponent::applyReverbLevelForAllPlaybackTokens(void)::$_0,std::allocator<re::ecs2::AudioPlayerComponent::applyReverbLevelForAllPlaybackTokens(void)::$_0>,void ()(unsigned long long)>::target_type()
{
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::createSubscription<re::ecs2::AudioPlayerSystem>(re::ecs2::AudioPlayerSystem *,REEventHandlerResult (re::ecs2::AudioPlayerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Slice<re::ecs2::AudioPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioPlayerComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>,re::Slice<re::ecs2::ChannelAudioComponent*>>::createSubscription<re::ecs2::AudioPlayerSystem>(re::ecs2::AudioPlayerSystem *,REEventHandlerResult (re::ecs2::AudioPlayerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>*,re::Slice<re::ecs2::ChannelAudioComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>,re::Slice<re::ecs2::ChannelAudioComponent*>>::Subscription const&,re::Slice<re::ecs2::ChannelAudioComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>,re::Slice<re::ecs2::AmbientAudioComponent*>>::createSubscription<re::ecs2::AudioPlayerSystem>(re::ecs2::AudioPlayerSystem *,REEventHandlerResult (re::ecs2::AudioPlayerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>*,re::Slice<re::ecs2::AmbientAudioComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>,re::Slice<re::ecs2::AmbientAudioComponent*>>::Subscription const&,re::Slice<re::ecs2::AmbientAudioComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SpatialAudioComponent>,re::Slice<re::ecs2::SpatialAudioComponent*>>::createSubscription<re::ecs2::AudioPlayerSystem>(re::ecs2::AudioPlayerSystem *,REEventHandlerResult (re::ecs2::AudioPlayerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::SpatialAudioComponent>*,re::Slice<re::ecs2::SpatialAudioComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SpatialAudioComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SpatialAudioComponent>,re::Slice<re::ecs2::SpatialAudioComponent*>>::Subscription const&,re::Slice<re::ecs2::SpatialAudioComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = a2;
  i[2] = *a3;
  i[3] = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v21)
          {
            v22 = v21[1];
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
            v27 = (_QWORD *)*v21;
            if (*v21)
            {
              do
              {
                v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(_QWORD *)&prime)
                    v28 %= *(_QWORD *)&prime;
                }
                else
                {
                  v28 &= *(_QWORD *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  *v21 = *v27;
                  *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
                  v27 = v21;
                }
                v28 = v22;
LABEL_55:
                v21 = v27;
                v27 = (_QWORD *)*v27;
                v22 = v28;
              }
              while (v27);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v33 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v33)
          operator delete(v33);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v30)
  {
    *i = *v30;
LABEL_72:
    *v30 = i;
    goto LABEL_73;
  }
  *i = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = i;
  v29[v3] = a1 + 4;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return i;
}

void re::internal::CallableRef<re::ecs2::AudioPlayerSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_0,re::Optional<simd_float4x4> ()(unsigned long long)>::~CallableRef()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::CallableRef<re::ecs2::AudioPlayerSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_0,re::Optional<simd_float4x4> ()(unsigned long long)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  std::invoke[abi:nn180100]<re::ecs2::AudioPlayerSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_0 const&,unsigned long long>(a3, **(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *a2);
}

uint64_t re::internal::CallableRef<re::ecs2::AudioPlayerSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_0,re::Optional<simd_float4x4> ()(unsigned long long)>::cloneInto(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;

  v2 = *(_OWORD **)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5B450;
  *(_OWORD *)(a2 + 8) = *v2;
  return a2;
}

uint64_t re::internal::CallableRef<re::ecs2::AudioPlayerSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_0,re::Optional<simd_float4x4> ()(unsigned long long)>::moveInto(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t re::internal::CallableRef<re::ecs2::AudioPlayerSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_0,re::Optional<simd_float4x4> ()(unsigned long long)>::size()
{
  return 24;
}

void std::invoke[abi:nn180100]<re::ecs2::AudioPlayerSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_0 const&,unsigned long long>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  double *v9;
  double *v10;
  double *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  _OWORD v16[4];
  float32x4_t v17[4];
  _OWORD v18[4];

  *(_QWORD *)&v18[0] = a4;
  v7 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a2 + 152, (uint64_t *)v18);
  if (!v7)
  {
    v8 = *(_QWORD *)(a2 + 104);
    if (*(_QWORD *)(v8 + 296) == *(_QWORD *)&v18[0])
      goto LABEL_3;
LABEL_5:
    v15 = 0;
    goto LABEL_6;
  }
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    goto LABEL_5;
LABEL_3:
  re::ecs2::TransformHelper::computeWorldMatrixForRendering((re::ecs2::TransformComponent **)v8, *(_QWORD *)(a3 + 176), v16);
  v17[0] = (float32x4_t)v16[0];
  v17[1] = (float32x4_t)v16[1];
  v17[2] = (float32x4_t)v16[2];
  v17[3] = (float32x4_t)v16[3];
  re::audio::cleanUpTransformForPHASE(v17, v9, v10, v11, (uint64_t)v18);
  v12 = v18[1];
  v13 = v18[2];
  v14 = v18[3];
  *(_OWORD *)(a1 + 16) = v18[0];
  *(_OWORD *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 48) = v13;
  *(_OWORD *)(a1 + 64) = v14;
  v15 = 1;
LABEL_6:
  *(_BYTE *)a1 = v15;
}

void re::internal::Callable<re::ecs2::AudioPlayerSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_0,re::Optional<simd_float4x4> ()(unsigned long long)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::ecs2::AudioPlayerSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_0,re::Optional<simd_float4x4> ()(unsigned long long)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  std::invoke[abi:nn180100]<re::ecs2::AudioPlayerSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_0 const&,unsigned long long>(a3, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *a2);
}

uint64_t re::internal::Callable<re::ecs2::AudioPlayerSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_0,re::Optional<simd_float4x4> ()(unsigned long long)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED5B450;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::AudioPlayerSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_0,re::Optional<simd_float4x4> ()(unsigned long long)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED5B450;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::AudioPlayerSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_0,re::Optional<simd_float4x4> ()(unsigned long long)>::size()
{
  return 24;
}

void re::HashTable<re::ecs2::Scene const*,re::HashTable<unsigned long long,re::SharedPtr<re::AudioSourceState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  signed int v24;
  _BYTE v25[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v25, 0, 36);
      *(_QWORD *)&v25[36] = 0x7FFFFFFFLL;
      re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v25, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v25;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v25[8];
      *(_OWORD *)v25 = v5;
      *(_QWORD *)&v25[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v25[24];
      *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v25[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = (_DWORD *)(v6 + 60);
        do
        {
          if ((*(v13 - 13) & 0x80000000) != 0)
          {
            v14 = *(_QWORD *)(v13 - 15);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<re::ecs2::Scene const*,re::HashTable<unsigned long long,re::SharedPtr<re::AudioSourceState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 72 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 72 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 72 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v17) = v14;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v17 + 16) = *(_QWORD *)(v13 - 11);
            v21 = *(_QWORD *)(a1 + 16) + 72 * v17;
            *(_DWORD *)(v21 + 56) = 0;
            *(_OWORD *)(v21 + 40) = 0u;
            *(_OWORD *)(v21 + 24) = 0u;
            *(_QWORD *)(v21 + 60) = 0x7FFFFFFFLL;
            *(_QWORD *)(v21 + 24) = *(_QWORD *)(v13 - 9);
            *(_QWORD *)(v13 - 9) = 0;
            v22 = *(_QWORD *)(v21 + 32);
            *(_QWORD *)(v21 + 32) = *(_QWORD *)(v13 - 7);
            *(_QWORD *)(v13 - 7) = v22;
            v23 = *(_QWORD *)(v21 + 40);
            *(_QWORD *)(v21 + 40) = *(_QWORD *)(v13 - 5);
            *(_QWORD *)(v13 - 5) = v23;
            LODWORD(v23) = *(_DWORD *)(v21 + 48);
            *(_DWORD *)(v21 + 48) = *(v13 - 3);
            *(v13 - 3) = v23;
            LODWORD(v23) = *(_DWORD *)(v21 + 52);
            *(_DWORD *)(v21 + 52) = *(v13 - 2);
            *(v13 - 2) = v23;
            LODWORD(v23) = *(_DWORD *)(v21 + 56);
            *(_DWORD *)(v21 + 56) = *(v13 - 1);
            *(v13 - 1) = v23;
            LODWORD(v23) = *(_DWORD *)(v21 + 60);
            *(_DWORD *)(v21 + 60) = *v13;
            *v13 = v23;
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 18;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::ecs2::Scene const*,re::HashTable<unsigned long long,re::SharedPtr<re::AudioSourceState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)v25);
    }
  }
  else
  {
    if (a2)
      v24 = a2;
    else
      v24 = 3;
  }
}

_QWORD *re::IntrospectionHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, uint64_t *a5)
{
  re::IntrospectionBase *v8;
  uint64_t v10;

  v10 = 0;
  v8 = (re::IntrospectionBase *)re::HashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 8;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 32 * v10 + 16, *(_QWORD *)(a2 + 16) + 32 * v10 + 24);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 32 * v10 + 8) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

void re::HashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v13[16] = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v9 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = v7 + 16;
        do
        {
          if ((*(_DWORD *)(v11 - 8) & 0x80000000) != 0)
            re::HashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v11 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v11 - 16), v11, v11 + 8);
          v11 += 32;
          --v10;
        }
        while (v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::HashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16);
    v10 = v13;
    return v12 + 32 * v10 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 32 * v10 + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_QWORD *)(v11 + 32 * v10 + 24) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16);
  return v12 + 32 * v10 + 24;
}

void re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1);
  return re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1);
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, uint64_t *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + 32 * v4 + 16) != v2)
  {
    while (1)
    {
      v4 = *(_DWORD *)(v6 + 32 * v4 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v4 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v6 + 32 * v4 + 16) == v2)
        return v6 + 32 * v4 + 24;
    }
    return 0;
  }
  return v6 + 32 * v4 + 24;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 32 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = (int *)(*(_QWORD *)(v2 + 16) + 8);
        while (1)
        {
          v7 = *v6;
          v6 += 8;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 16;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 24;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::v1::AudioSourceState *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::ecs2::v1::AudioPlayerComponent::~AudioPlayerComponent(re::ecs2::v1::AudioPlayerComponent *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED5B548;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 120);
  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 10) = 0;
    ++*((_DWORD *)this + 26);
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED5B548;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 120);
  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 10) = 0;
    ++*((_DWORD *)this + 26);
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::v1::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)0>::allocator()
{
  return MEMORY[0x38];
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::v1::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)0>::commonComponentIndex()
{
  return -1;
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::v1::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)0>::componentType()
{
  return 0;
}

uint64_t *re::ecs2::allocInfo_BillboardComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_181);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_181))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410A2A8, 0);
    *(uint64_t *)((char *)&qword_25410A2B8 + 6) = 0;
    qword_25410A2B8 = 0;
    qword_25410A2C8 = 0;
    qword_25410A2D0 = 0xFFFFFFFFLL;
    qword_25410A2A8 = (uint64_t)&off_24ED7DAA8;
    qword_25410A2D8 = (uint64_t)"BillboardComponent";
    dword_25410A2E0 = 0;
    xmmword_25410A2E8 = 0u;
    unk_25410A2F8 = 0u;
    xmmword_25410A308 = 0u;
    qword_25410A318 = 0;
    __cxa_guard_release(&_MergedGlobals_181);
  }
  return &qword_25410A2A8;
}

void re::ecs2::initInfo_BillboardComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x627F7D68FFE4F13CLL;
  v14[1] = "BillboardComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_25410A290);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410A290);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410A298 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_float((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "blendFactor";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x5000000004;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410A2A0 = v12;
      __cxa_guard_release(&qword_25410A290);
    }
  }
  *((_QWORD *)this + 2) = 0x6000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25410A298;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::BillboardComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::BillboardComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::BillboardComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::BillboardComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

double re::internal::defaultConstruct<re::ecs2::BillboardComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED5A600;
  result = 0.0078125;
  *(_OWORD *)(v3 + 32) = xmmword_2260E5F20;
  *(_OWORD *)(v3 + 48) = xmmword_2260E5F40;
  *(_OWORD *)(v3 + 64) = xmmword_2260E5F20;
  *(_DWORD *)(v3 + 80) = 1065353216;
  *(_WORD *)(v3 + 84) = 1;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::BillboardComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::BillboardComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED5A600;
  result = 0.0078125;
  *(_OWORD *)(v1 + 32) = xmmword_2260E5F20;
  *(_OWORD *)(v1 + 48) = xmmword_2260E5F40;
  *(_OWORD *)(v1 + 64) = xmmword_2260E5F20;
  *(_DWORD *)(v1 + 80) = 1065353216;
  *(_WORD *)(v1 + 84) = 1;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::BillboardComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_BillboardComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BillboardComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_BillboardComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_BillboardComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::BillboardComponent>, this);
}

void re::PeerVideoStreamingDecoder::~PeerVideoStreamingDecoder(VTDecompressionSessionRef *this)
{
  VTDecompressionSessionRef v2;

  v2 = *this;
  if (*this)
  {
    VTDecompressionSessionInvalidate(*this);
    CFRelease(v2);
    *this = 0;
  }
}

void re::PeerVideoStreamingDecoder::decodeFrame(VTDecompressionSessionRef *a1, opaqueCMSampleBuffer *a2, uint64_t a3, id *a4)
{
  const opaqueCMFormatDescription *FormatDescription;
  VTDecompressionSessionRef v9;
  void *v10;
  const __CFDictionary *v11;
  re *v12;
  int v13;
  NSObject *v14;
  re *v15;
  NSObject *v16;
  re *v17;
  int v18;
  NSObject *v19;
  OpaqueVTDecompressionSession *v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  re *v25;
  int v26;
  NSObject *v27;
  VTSessionRef session;
  _QWORD aBlock[4];
  id v30;
  VTDecompressionSessionRef *v31;
  _BYTE v32[24];
  uint64_t v33;
  _BYTE *v34;
  uint8_t buf[4];
  int v36;
  _QWORD v37[2];
  uint8_t v38[8];
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
    kdebug_trace();
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  if (*a1)
  {
    if (VTDecompressionSessionCanAcceptFormatDescription(*a1, FormatDescription))
      goto LABEL_23;
    v9 = *a1;
    if (*a1)
    {
      VTDecompressionSessionInvalidate(*a1);
      CFRelease(v9);
    }
  }
  v37[0] = *MEMORY[0x24BDC56B8];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", 1111970369);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v37[1] = *MEMORY[0x24BDC5690];
  *(_QWORD *)v38 = v10;
  v39 = MEMORY[0x24BDBD1C8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v38, v37, 2);
  v11 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

  session = 0;
  v12 = (re *)VTDecompressionSessionCreate(0, FormatDescription, MEMORY[0x24BDBD1B8], v11, 0, (VTDecompressionSessionRef *)&session);
  v13 = (int)v12;
  v14 = *re::peerVideoStreamingLogObjects(v12);
  if (v13)
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v36 = v13;
      _os_log_error_impl(&dword_224FE9000, v14, OS_LOG_TYPE_ERROR, "Error creating decompression session, errCode: %d.", buf, 8u);
    }

    *a1 = 0;
LABEL_12:
    v16 = *re::peerVideoStreamingLogObjects(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v38 = 0;
      _os_log_error_impl(&dword_224FE9000, v16, OS_LOG_TYPE_ERROR, "Failed to create decompression session", v38, 2u);
    }
    if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
      kdebug_trace();
    return;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_224FE9000, v14, OS_LOG_TYPE_DEFAULT, "Created decompression session", buf, 2u);
  }
  v17 = (re *)VTSessionSetProperty(session, (CFStringRef)*MEMORY[0x24BDF9430], (CFTypeRef)*MEMORY[0x24BDBD270]);
  if ((_DWORD)v17)
  {
    v18 = (int)v17;
    v19 = *re::peerVideoStreamingLogObjects(v17);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v36 = v18;
      _os_log_error_impl(&dword_224FE9000, v19, OS_LOG_TYPE_ERROR, "Failed to enable RealTime, errCode: %d.", buf, 8u);
    }
  }
  v20 = (OpaqueVTDecompressionSession *)session;

  *a1 = v20;
  if (!v20)
    goto LABEL_12;
LABEL_23:
  applesauce::dispatch::v1::queue::get(a4);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN2re25PeerVideoStreamingDecoder11decodeFrameEP20opaqueCMSampleBufferNS_8FunctionIFvONS_16OutputVideoFrameEEEEN10applesauce8dispatch2v15queueE_block_invoke;
  aBlock[3] = &unk_24ED5B660;
  v31 = a1;
  v22 = v21;
  v23 = *(_QWORD *)(a3 + 24);
  v30 = v22;
  v33 = v23;
  v34 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v32, a3);
  v24 = _Block_copy(aBlock);
  v25 = (re *)VTDecompressionSessionDecodeFrameWithOutputHandler(*a1, a2, 1u, 0, v24);
  if ((_DWORD)v25)
  {
    v26 = (int)v25;
    v27 = *re::peerVideoStreamingLogObjects(v25);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v38 = 67109120;
      *(_DWORD *)&v38[4] = v26;
      _os_log_error_impl(&dword_224FE9000, v27, OS_LOG_TYPE_ERROR, "Failed to decode frame, errCode: %d", v38, 8u);
    }
  }

  if (v34)
  {
    (**(void (***)(_BYTE *))v34)(v34);
    if (v34 != v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 40))(v33);
    v34 = 0;
  }

}

id applesauce::dispatch::v1::queue::get(id *this)
{
  return *this;
}

uint64_t ___ZN2re25PeerVideoStreamingDecoder11decodeFrameEP20opaqueCMSampleBufferNS_8FunctionIFvONS_16OutputVideoFrameEEEEN10applesauce8dispatch2v15queueE_block_invoke(re *a1, int a2, char a3, CFTypeRef cf, uint64_t *a5)
{
  NSObject *v6;
  uint64_t result;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  _QWORD v16[5];
  _BYTE v17[24];
  uint64_t v18;
  _BYTE *v19;
  uint8_t buf[4];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v6 = *re::peerVideoStreamingLogObjects(a1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v21) = a2;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Error decoding frame, errCode: %d", buf, 8u);
    }
    result = re::internal::enableSignposts(0, 0);
    if ((_DWORD)result)
    {
      result = re::internal::enableHighFrequencyNetworkTracing(0, 0);
      if ((_DWORD)result)
        return kdebug_trace();
    }
  }
  else if ((a3 & 2) != 0)
  {
    v13 = *re::peerVideoStreamingLogObjects(a1);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *a5;
      *(_DWORD *)buf = 134217984;
      v21 = v14;
      _os_log_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEFAULT, "Decoder dropped frame with timestamp %lld", buf, 0xCu);
    }
    result = re::internal::enableSignposts(0, 0);
    if ((_DWORD)result)
    {
      result = re::internal::enableHighFrequencyNetworkTracing(0, 0);
      if ((_DWORD)result)
        return kdebug_trace();
    }
  }
  else if (cf)
  {
    CFRetain(cf);
    v11 = *((_QWORD *)a1 + 4);
    v16[0] = MEMORY[0x24BDAC760];
    v16[1] = 3321888768;
    v16[2] = ___ZN2re25PeerVideoStreamingDecoder11decodeFrameEP20opaqueCMSampleBufferNS_8FunctionIFvONS_16OutputVideoFrameEEEEN10applesauce8dispatch2v15queueE_block_invoke_1;
    v16[3] = &__block_descriptor_80_a8_40c46_ZTSN2re8FunctionIFvONS_16OutputVideoFrameEEEE_e5_v8__0l;
    v12 = *((_QWORD *)a1 + 9);
    v16[4] = cf;
    v18 = v12;
    v19 = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v17, (uint64_t)a1 + 48);
    dispatch_async(v11, v16);
    if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
      kdebug_trace();
    result = (uint64_t)v19;
    if (v19)
    {
      result = (**(uint64_t (***)(_BYTE *))v19)(v19);
      if (v19 != v17)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
    }
  }
  else
  {
    v15 = *re::peerVideoStreamingLogObjects(a1);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "CVImageBuffer for decoded frame is null", buf, 2u);
    }
    result = re::internal::enableSignposts(0, 0);
    if ((_DWORD)result)
    {
      result = re::internal::enableHighFrequencyNetworkTracing(0, 0);
      if ((_DWORD)result)
        return kdebug_trace();
    }
  }
  return result;
}

void ___ZN2re25PeerVideoStreamingDecoder11decodeFrameEP20opaqueCMSampleBufferNS_8FunctionIFvONS_16OutputVideoFrameEEEEN10applesauce8dispatch2v15queueE_block_invoke_1(uint64_t a1)
{
  const void *v2;
  const void *v3;
  CFTypeRef cf[2];

  v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRetain(*(CFTypeRef *)(a1 + 32));
    CFRetain(v2);
    CFRelease(v2);
    v3 = *(const void **)(a1 + 32);
  }
  else
  {
    v3 = 0;
  }
  cf[0] = v2;
  cf[1] = 0;
  CFRelease(v3);
  (*(void (**)(_QWORD, CFTypeRef *))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), cf);
  if (cf[0])
    CFRelease(cf[0]);
}

uint64_t __copy_helper_block_a8_40c46_ZTSN2re8FunctionIFvONS_16OutputVideoFrameEEEE(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(a1 + 40, a2 + 40);
}

uint64_t (***__destroy_helper_block_a8_40c46_ZTSN2re8FunctionIFvONS_16OutputVideoFrameEEEE(uint64_t a1))(_QWORD)
{
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 40);
}

uint64_t __copy_helper_block_a8_48c46_ZTSN2re8FunctionIFvONS_16OutputVideoFrameEEEE(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = 0;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(a1 + 48, a2 + 48);
}

uint64_t (***__destroy_helper_block_a8_48c46_ZTSN2re8FunctionIFvONS_16OutputVideoFrameEEEE(uint64_t a1))(_QWORD)
{
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 48);
}

re::ecs2::BillboardManagerStateTracking *re::ecs2::BillboardManagerStateTracking::BillboardManagerStateTracking(re::ecs2::BillboardManagerStateTracking *this)
{
  _OWORD *v2;
  _QWORD v4[2];
  _QWORD v5[4];

  v5[3] = *MEMORY[0x24BDAC8D0];
  v2 = (_OWORD *)re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::HierarchyStateTracking((uint64_t)this);
  *(_QWORD *)v2 = &off_24ED5B6A0;
  *(_OWORD *)((char *)v2 + 248) = 0u;
  v2 = (_OWORD *)((char *)v2 + 248);
  v2[1] = 0u;
  v2[2] = 0u;
  *(_OWORD *)((char *)v2 + 44) = 0u;
  *(_QWORD *)((char *)this + 308) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_DWORD *)this + 88) = 0;
  *(_QWORD *)((char *)this + 356) = 0x7FFFFFFFLL;
  *((_BYTE *)this + 368) = 0;
  v5[0] = re::ecs2::ComponentImpl<re::ecs2::BillboardComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[1] = re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[2] = re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v4[0] = v5;
  v4[1] = 3;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)v2, (uint64_t)v4);
  return this;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::HierarchyStateTracking(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;

  *(_QWORD *)a1 = off_24ED5B950;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v2 = a1 + 56;
  *(_QWORD *)(a1 + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  v3 = a1 + 104;
  *(_QWORD *)(a1 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  v4 = a1 + 152;
  *(_QWORD *)(a1 + 188) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  v5 = a1 + 200;
  *(_QWORD *)(a1 + 236) = 0x7FFFFFFFLL;
  return a1;
}

uint64_t re::ecs2::BillboardManagerStateTracking::billboardComponentAddOrActivateEventHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;

  v4 = a2;
  v3 = 1;
  re::HashTable<re::ecs2::Entity const*,BOOL,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 272, &v4, &v3);
  return 0;
}

uint64_t re::ecs2::BillboardManagerStateTracking::billboardComponentAddOrActivateEventHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;

  v4 = a2;
  v3 = 1;
  re::HashTable<re::ecs2::Entity const*,BOOL,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 272, &v4, &v3);
  return 0;
}

uint64_t re::ecs2::BillboardManagerStateTracking::billboardComponentRemoveOrDeactivateEventHandler<REComponentWillRemoveEvent>(uint64_t a1, unint64_t a2)
{
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::remove(a1 + 272, a2);
  return 0;
}

uint64_t re::ecs2::BillboardManagerStateTracking::billboardComponentRemoveOrDeactivateEventHandler<REComponentWillDeactivateEvent>(uint64_t a1, unint64_t a2)
{
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::remove(a1 + 272, a2);
  return 0;
}

uint64_t re::ecs2::BillboardManagerStateTracking::physicsBodyAddOrActivateEventHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::EntityComponentCollection *v3;
  uint64_t v5;

  v5 = a2;
  v3 = (re::ecs2::EntityComponentCollection *)(a2 + 32);
  if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)&& re::ecs2::EntityComponentCollection::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType))
  {
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 320, &v5);
    *(_BYTE *)(a1 + 368) = 1;
  }
  return 0;
}

uint64_t re::ecs2::BillboardManagerStateTracking::physicsBodyAddOrActivateEventHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::EntityComponentCollection *v3;
  uint64_t v5;

  v5 = a2;
  v3 = (re::ecs2::EntityComponentCollection *)(a2 + 32);
  if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)&& re::ecs2::EntityComponentCollection::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType))
  {
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 320, &v5);
    *(_BYTE *)(a1 + 368) = 1;
  }
  return 0;
}

uint64_t re::ecs2::BillboardManagerStateTracking::physicsBodyRemoveOrDeactivateEventHandler<REComponentWillRemoveEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::EntityComponentCollection *v3;
  uint64_t v5;

  v5 = a2;
  v3 = (re::ecs2::EntityComponentCollection *)(a2 + 32);
  if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)|| re::ecs2::EntityComponentCollection::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType))
  {
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 320, &v5);
    *(_BYTE *)(a1 + 368) = 1;
  }
  return 0;
}

uint64_t re::ecs2::BillboardManagerStateTracking::physicsBodyRemoveOrDeactivateEventHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::EntityComponentCollection *v3;
  uint64_t v5;

  v5 = a2;
  v3 = (re::ecs2::EntityComponentCollection *)(a2 + 32);
  if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)|| re::ecs2::EntityComponentCollection::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType))
  {
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 320, &v5);
    *(_BYTE *)(a1 + 368) = 1;
  }
  return 0;
}

uint64_t re::ecs2::BillboardManagerStateTracking::physicsBodyReparentEventHandler<RESceneEntityDidReparentEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::EntityComponentCollection *v3;

  v3 = (re::ecs2::EntityComponentCollection *)(a2 + 32);
  if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)&& re::ecs2::EntityComponentCollection::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType))
  {
    *(_BYTE *)(a1 + 368) = 1;
  }
  return 0;
}

double re::ecs2::BillboardManagerStateTracking::buildPerEntityStateForDirtyEntityHierarchies(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  signed int v4;
  unsigned int v5;
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t i;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  int *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  int *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  unsigned int v82;
  uint64_t v83;
  int *v84;
  int v85;
  double result;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  re::ecs2::TransformComponent **v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE *v106;
  int v107;
  _BYTE *v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD *v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  unsigned int v124;
  unsigned int v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t *v136;
  __int128 v137;
  __int128 v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141[2];
  uint64_t v142;
  unsigned int v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  simd_float4x4 v148;
  re::ecs2::TransformComponent **v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  _BYTE v155[32];
  __int128 v156;
  simd_float4x4 v157;
  simd_float4x4 v158;

  if (*(_DWORD *)(a1 + 300) && (*(_DWORD *)(a2 + 28) || *(_BYTE *)(a1 + 368)))
  {
    v136 = (uint64_t *)(a1 + 272);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::HashSetBase((uint64_t)v141, a2);
    if (!*(_BYTE *)(a1 + 368))
    {
LABEL_103:
      *(_QWORD *)&v155[24] = 0;
      v154 = 0u;
      memset(v155, 0, 20);
      v62 = v143;
      if (v143)
      {
        v63 = 0;
        v64 = (int *)(v142 + 8);
        while (1)
        {
          v65 = *v64;
          v64 += 6;
          if (v65 < 0)
            break;
          if (v143 == ++v63)
          {
            LODWORD(v63) = v143;
            break;
          }
        }
      }
      else
      {
        LODWORD(v63) = 0;
      }
      if (v143 != (_DWORD)v63)
      {
        v66 = v63;
        v67 = v142;
        v68 = v143;
        do
        {
          v69 = *(_QWORD *)(v67 + 24 * v66 + 16);
          v70 = *(_QWORD *)(v69 + 328);
          if (v70)
          {
            v71 = *(uint64_t **)(v69 + 344);
            v72 = 8 * v70;
            do
            {
              v73 = *v71;
              if (*v71)
                v74 = (id)(v73 + 8);
              *(_QWORD *)&v150 = v73;
              if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)v141, (uint64_t *)&v150))
              {
                *(_QWORD *)&v150 = v73;
                re::Queue<re::internal::AssetLoadItem *>::enqueue(&v154, &v150);
              }
              if (v73)

              ++v71;
              v72 -= 8;
            }
            while (v72);
            v68 = v143;
            v67 = v142;
          }
          if (v68 <= (int)v63 + 1)
            v75 = v63 + 1;
          else
            v75 = v68;
          while (1)
          {
            v66 = (v63 + 1);
            if (v75 - 1 == (_DWORD)v63)
              break;
            LODWORD(v63) = v63 + 1;
            v76 = v66;
            if ((*(_DWORD *)(v67 + 24 * v66 + 8) & 0x80000000) != 0)
              goto LABEL_128;
          }
          v76 = v75;
LABEL_128:
          LODWORD(v63) = v76;
        }
        while (v62 != v76);
        while (*(_QWORD *)v155)
        {
          v148.columns[0].i64[0] = 0;
          v148.columns[0].i64[0] = re::Queue<re::internal::AssetLoadItem *>::dequeue((uint64_t)&v154, v3);
          re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add((uint64_t)v141, (uint64_t *)&v148);
          v77 = *(_QWORD *)(v148.columns[0].i64[0] + 328);
          if (v77)
          {
            v78 = *(uint64_t **)(v148.columns[0].i64[0] + 344);
            v79 = 8 * v77;
            do
            {
              v80 = *v78;
              if (*v78)
                v81 = (id)(v80 + 8);
              *(_QWORD *)&v150 = v80;
              if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)v141, (uint64_t *)&v150))
              {
                *(_QWORD *)&v150 = v80;
                re::Queue<re::internal::AssetLoadItem *>::enqueue(&v154, &v150);
              }
              if (v80)

              ++v78;
              v79 -= 8;
            }
            while (v79);
          }
        }
      }
      if ((_QWORD)v154 && *(_QWORD *)&v155[24])
        (*(void (**)(_QWORD))(*(_QWORD *)v154 + 40))(v154);
      v139 = 0;
      v137 = 0u;
      v138 = 0u;
      v140 = 0x7FFFFFFFLL;
      v82 = v143;
      if (v143)
      {
        v83 = 0;
        v84 = (int *)(v142 + 8);
        while (1)
        {
          v85 = *v84;
          v84 += 6;
          if (v85 < 0)
            break;
          if (v143 == ++v83)
          {
            LODWORD(v83) = v143;
            break;
          }
        }
      }
      else
      {
        LODWORD(v83) = 0;
      }
      if (v143 == (_DWORD)v83)
      {
LABEL_150:
        re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v137);
        return re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v141);
      }
      v87 = v83;
      v88 = v142;
      v134 = v143;
      v135 = a1 + 56;
      while (1)
      {
        v89 = *(_QWORD *)(v88 + 24 * v87 + 16);
        v149 = (re::ecs2::TransformComponent **)v89;
        if (v89)
          break;
LABEL_206:
        v88 = v142;
        if (v143 <= (int)v83 + 1)
          v124 = v83 + 1;
        else
          v124 = v143;
        while (1)
        {
          v87 = (v83 + 1);
          if (v124 - 1 == (_DWORD)v83)
            break;
          LODWORD(v83) = v83 + 1;
          v125 = v87;
          if ((*(_DWORD *)(v142 + 24 * v87 + 8) & 0x80000000) != 0)
            goto LABEL_213;
        }
        v125 = v124;
LABEL_213:
        LODWORD(v83) = v125;
        if (v82 == v125)
          goto LABEL_150;
      }
      v90 = *(_QWORD *)(v89 + 24);
      if (v90)
      {
        while (1)
        {
          if ((*(_BYTE *)(v90 + 288) & 0x80) != 0)
          {
            v93 = 0;
            v90 = 0;
            goto LABEL_165;
          }
          if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v90 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BillboardComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType))
          {
            v93 = (re::ecs2::TransformComponent **)v90;
            goto LABEL_165;
          }
          if ((_QWORD)v137)
          {
            v91 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v90 ^ (v90 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v90 ^ (v90 >> 30))) >> 27));
            v92 = *(unsigned int *)(*((_QWORD *)&v137 + 1) + 4 * ((v91 ^ (v91 >> 31)) % DWORD2(v138)));
            if ((_DWORD)v92 != 0x7FFFFFFF)
              break;
          }
LABEL_161:
          v90 = *(_QWORD *)(v90 + 24);
          if (!v90)
            goto LABEL_162;
        }
        while (*(_QWORD *)(v138 + 32 * v92 + 16) != v90)
        {
          v92 = *(_DWORD *)(v138 + 32 * v92 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v92 == 0x7FFFFFFF)
            goto LABEL_161;
        }
        v93 = *(re::ecs2::TransformComponent ***)(v138 + 32 * v92 + 24);
      }
      else
      {
LABEL_162:
        v93 = 0;
      }
LABEL_165:
      if (v90 != v89 && v93 != (re::ecs2::TransformComponent **)v89)
      {
        v94 = v89;
        do
        {
          v95 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v94 ^ (v94 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v94 ^ (v94 >> 30))) >> 27));
          v96 = v95 ^ (v95 >> 31);
          v97 = v137;
          if (!(_QWORD)v137
            || (v97 = v96 % DWORD2(v138),
                v98 = *(unsigned int *)(*((_QWORD *)&v137 + 1) + 4 * v97),
                (_DWORD)v98 == 0x7FFFFFFF))
          {
LABEL_172:
            v99 = v140;
            if ((_DWORD)v140 == 0x7FFFFFFF)
            {
              v99 = v139;
              v100 = v139;
              if (v139 == DWORD2(v138))
              {
                re::HashTable<re::ecs2::Entity const*,re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity((uint64_t)&v137, 2 * HIDWORD(v138));
                v100 = v139;
                v97 = v96 % DWORD2(v138);
              }
              v139 = v100 + 1;
              v101 = v138;
              v102 = *(_DWORD *)(v138 + 32 * v99 + 8);
            }
            else
            {
              v101 = v138;
              v102 = *(_DWORD *)(v138 + 32 * v140 + 8);
              LODWORD(v140) = v102 & 0x7FFFFFFF;
            }
            v103 = v101 + 32 * v99;
            *(_DWORD *)(v103 + 8) = v102 | 0x80000000;
            v104 = *((_QWORD *)&v137 + 1);
            *(_DWORD *)(v103 + 8) = *(_DWORD *)(*((_QWORD *)&v137 + 1) + 4 * v97) | 0x80000000;
            *(_QWORD *)v103 = v96;
            *(_QWORD *)(v103 + 16) = v94;
            *(_QWORD *)(v103 + 24) = v93;
            *(_DWORD *)(v104 + 4 * v97) = v99;
            ++HIDWORD(v138);
            ++HIDWORD(v140);
          }
          else
          {
            while (*(_QWORD *)(v138 + 32 * v98 + 16) != v94)
            {
              v98 = *(_DWORD *)(v138 + 32 * v98 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v98 == 0x7FFFFFFF)
                goto LABEL_172;
            }
          }
          v105 = *(_QWORD *)(v94 + 24);
          if (v105)
          {
            if ((*(_BYTE *)(v105 + 288) & 0x80) != 0)
              v94 = 0;
            else
              v94 = *(_QWORD *)(v94 + 24);
          }
          else
          {
            v94 = 0;
          }
        }
        while (v90 != v94 && v93 != (re::ecs2::TransformComponent **)v94);
      }
      v106 = (_BYTE *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v136, v89);
      if (v106 && *v106)
      {
        v107 = 1;
        if (!v93)
          goto LABEL_194;
      }
      else
      {
        v107 = 0;
        if (!v93)
          goto LABEL_194;
      }
      v108 = (_BYTE *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v136, (unint64_t)v93);
      if (v108 && *v108)
      {
        if (!v107)
        {
          v119 = re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add<>(v135, (uint64_t *)&v149);
          *(_BYTE *)(v119 + 72) = 0;
          *(_QWORD *)(v119 + 64) = v93;
          re::ecs2::TransformComponent::worldMatrix4x4F(v93, (const re::ecs2::Entity *)1, &v148);
          v158 = __invert_f4(v148);
          v131 = (float32x4_t)v158.columns[0];
          v133 = (float32x4_t)v158.columns[1];
          v127 = (float32x4_t)v158.columns[3];
          v129 = (float32x4_t)v158.columns[2];
          re::ecs2::TransformComponent::worldMatrix4x4F(v149, (const re::ecs2::Entity *)1, &v144);
          v120 = 0;
          v150 = v144;
          v151 = v145;
          v152 = v146;
          v153 = v147;
          do
          {
            *(float32x4_t *)&v155[v120 - 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v131, COERCE_FLOAT(*(__int128 *)((char *)&v150 + v120))), v133, *(float32x2_t *)((char *)&v150 + v120), 1), v129, *(float32x4_t *)((char *)&v150 + v120), 2), v127, *(float32x4_t *)((char *)&v150 + v120), 3);
            v120 += 16;
          }
          while (v120 != 64);
          v121 = *(_OWORD *)v155;
          v122 = *(_OWORD *)&v155[16];
          v123 = v156;
          *(_OWORD *)v119 = v154;
          *(_OWORD *)(v119 + 16) = v121;
          *(_OWORD *)(v119 + 32) = v122;
          *(_OWORD *)(v119 + 48) = v123;
          goto LABEL_205;
        }
        v109 = 1;
        goto LABEL_196;
      }
LABEL_194:
      if ((v107 & 1) == 0)
      {
        re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(v135, v89);
LABEL_205:
        v82 = v134;
        goto LABEL_206;
      }
      v109 = 0;
LABEL_196:
      v110 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v89 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BillboardComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      v111 = re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add<>(v135, (uint64_t *)&v149);
      v112 = (_OWORD *)v111;
      *(_BYTE *)(v111 + 72) = 1;
      *(_OWORD *)(v111 + 80) = *(_OWORD *)(v110 + 32);
      *(_OWORD *)(v111 + 96) = *(_OWORD *)(v110 + 48);
      *(_OWORD *)(v111 + 112) = *(_OWORD *)(v110 + 64);
      *(_DWORD *)(v111 + 128) = *(_DWORD *)(v110 + 80);
      *(_WORD *)(v111 + 132) = *(_WORD *)(v110 + 84);
      if (v109)
      {
        *(_QWORD *)(v111 + 64) = v93;
        re::ecs2::TransformComponent::worldMatrix4x4F(v93, (const re::ecs2::Entity *)1, &v148);
        v157 = __invert_f4(v148);
        v130 = (float32x4_t)v157.columns[0];
        v132 = (float32x4_t)v157.columns[1];
        v126 = (float32x4_t)v157.columns[3];
        v128 = (float32x4_t)v157.columns[2];
        re::ecs2::TransformComponent::worldMatrix4x4F(v149, (const re::ecs2::Entity *)1, &v144);
        v113 = 0;
        v150 = v144;
        v151 = v145;
        v152 = v146;
        v153 = v147;
        do
        {
          *(float32x4_t *)&v155[v113 - 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v130, COERCE_FLOAT(*(__int128 *)((char *)&v150 + v113))), v132, *(float32x2_t *)((char *)&v150 + v113), 1), v128, *(float32x4_t *)((char *)&v150 + v113), 2), v126, *(float32x4_t *)((char *)&v150 + v113), 3);
          v113 += 16;
        }
        while (v113 != 64);
        v114 = *(_OWORD *)v155;
        v115 = *(_OWORD *)&v155[16];
        v116 = v156;
        *v112 = v154;
        v112[1] = v114;
        v112[2] = v115;
        v112[3] = v116;
      }
      else
      {
        re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v89, (const re::ecs2::Entity *)1, &v154);
        v117 = *(_OWORD *)v155;
        *v112 = v154;
        v112[1] = v117;
        v118 = v156;
        v112[2] = *(_OWORD *)&v155[16];
        v112[3] = v118;
      }
      goto LABEL_205;
    }
    v154 = 0u;
    memset(v155, 0, 20);
    *(_QWORD *)&v155[20] = 0x7FFFFFFFLL;
    if (*v136)
    {
      if (*(_DWORD *)(a1 + 300) <= 3u)
        v4 = 3;
      else
        v4 = *(_DWORD *)(a1 + 300);
      re::HashTable<re::ecs2::Entity const*,BOOL,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init((uint64_t)&v154, *v136, v4);
      v5 = *(_DWORD *)&v155[8];
      if (*(_DWORD *)&v155[12])
      {
        if (*(_DWORD *)&v155[8])
          memset_pattern16(*((void **)&v154 + 1), &memset_pattern_12, 4 * *(unsigned int *)&v155[8]);
        v6 = *(unsigned int *)&v155[16];
        if (*(_DWORD *)&v155[16])
        {
          v7 = (_DWORD *)(*(_QWORD *)v155 + 8);
          do
          {
            if ((*v7 & 0x80000000) != 0)
              *v7 &= ~0x80000000;
            v7 += 8;
            --v6;
          }
          while (v6);
        }
        *(_QWORD *)&v155[12] = 0;
        *(_DWORD *)&v155[20] = 0x7FFFFFFF;
        ++*(_DWORD *)&v155[24];
      }
      v8 = *(_DWORD *)(a1 + 300);
      if (v5 < v8)
        re::HashTable<re::ecs2::Entity const*,BOOL,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity((uint64_t)&v154, v8);
      v9 = *(_DWORD *)(a1 + 304);
      if (v9)
      {
        v10 = 0;
        for (i = 0; i < v9; ++i)
        {
          v12 = (uint64_t *)(*(_QWORD *)(a1 + 288) + v10);
          if ((v12[1] & 0x80000000) != 0)
          {
            v13 = *v12;
            v14 = *(unsigned int *)&v155[20];
            v15 = *v12 % (unint64_t)*(unsigned int *)&v155[8];
            if (*(_DWORD *)&v155[20] == 0x7FFFFFFF)
            {
              v14 = *(unsigned int *)&v155[16];
              v16 = *(_DWORD *)&v155[16];
              if (*(_DWORD *)&v155[16] == *(_DWORD *)&v155[8])
              {
                re::HashTable<re::ecs2::Entity const*,BOOL,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity((uint64_t)&v154, 2 * *(_DWORD *)&v155[12]);
                v16 = *(_DWORD *)&v155[16];
                v15 = v13 % *(unsigned int *)&v155[8];
              }
              *(_DWORD *)&v155[16] = v16 + 1;
              v17 = *(_QWORD *)v155;
              v18 = *(_DWORD *)(*(_QWORD *)v155 + 32 * v14 + 8);
            }
            else
            {
              v17 = *(_QWORD *)v155;
              v18 = *(_DWORD *)(*(_QWORD *)v155 + 32 * *(unsigned int *)&v155[20] + 8);
              *(_DWORD *)&v155[20] = v18 & 0x7FFFFFFF;
            }
            v19 = v17 + 32 * v14;
            *(_DWORD *)(v19 + 8) = v18 | 0x80000000;
            v20 = *((_QWORD *)&v154 + 1);
            *(_DWORD *)(v19 + 8) = *(_DWORD *)(*((_QWORD *)&v154 + 1) + 4 * v15) | 0x80000000;
            *(_QWORD *)v19 = v13;
            *(_QWORD *)(v19 + 16) = v12[2];
            *(_BYTE *)(v19 + 24) = *((_BYTE *)v12 + 24);
            *(_DWORD *)(v20 + 4 * v15) = v14;
            ++*(_DWORD *)&v155[12];
            v9 = *(_DWORD *)(a1 + 304);
          }
          v10 += 32;
        }
        if (v9)
        {
LABEL_31:
          v21 = 0;
          v22 = (int *)(*(_QWORD *)(a1 + 288) + 8);
          while (1)
          {
            v23 = *v22;
            v22 += 8;
            if (v23 < 0)
              break;
            if (v9 == ++v21)
            {
              LODWORD(v21) = v9;
              break;
            }
          }
LABEL_37:
          if (v9 != (_DWORD)v21)
          {
            v24 = v21;
            v25 = *(_QWORD *)(a1 + 288);
            do
            {
              *(_BYTE *)(v25 + 32 * v24 + 24) = 1;
              v25 = *(_QWORD *)(a1 + 288);
              if (v9 <= (int)v21 + 1)
                v26 = v21 + 1;
              else
                v26 = v9;
              v27 = v21;
              while (1)
              {
                v24 = (v27 + 1);
                if (v26 - 1 == v27)
                  break;
                ++v27;
                LODWORD(v21) = v24;
                if ((*(_DWORD *)(v25 + 32 * v24 + 8) & 0x80000000) != 0)
                  goto LABEL_47;
              }
              LODWORD(v21) = v26;
LABEL_47:
              ;
            }
            while (v9 != (_DWORD)v21);
          }
          v28 = *(unsigned int *)(a1 + 352);
          if ((_DWORD)v28)
          {
            v29 = 0;
            v30 = (int *)(*(_QWORD *)(a1 + 336) + 8);
            while (1)
            {
              v31 = *v30;
              v30 += 6;
              if (v31 < 0)
                break;
              if (v28 == ++v29)
              {
                LODWORD(v29) = *(_DWORD *)(a1 + 352);
                break;
              }
            }
          }
          else
          {
            LODWORD(v29) = 0;
          }
          if ((_DWORD)v28 == (_DWORD)v29)
            goto LABEL_77;
          v32 = v29;
          v33 = *(_QWORD *)(a1 + 336);
          v34 = *(_QWORD *)(a1 + 272);
          do
          {
            v35 = *(_QWORD *)(v33 + 24 * v32 + 16);
            if (!v35)
              goto LABEL_69;
            v36 = *(unsigned int *)(a1 + 296);
            v37 = *(_QWORD *)(a1 + 280);
            do
            {
              if (!v34)
                goto LABEL_66;
              v38 = 0x94D049BB133111EBLL
                  * ((0xBF58476D1CE4E5B9 * (v35 ^ (v35 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v35 ^ (v35 >> 30))) >> 27));
              v39 = *(unsigned int *)(v37 + 4 * ((v38 ^ (v38 >> 31)) % v36));
              if ((_DWORD)v39 == 0x7FFFFFFF)
                goto LABEL_66;
              v40 = *(_QWORD *)(a1 + 288);
              while (*(_QWORD *)(v40 + 32 * v39 + 16) != v35)
              {
                v39 = *(_DWORD *)(v40 + 32 * v39 + 8) & 0x7FFFFFFF;
                if ((_DWORD)v39 == 0x7FFFFFFF)
                  goto LABEL_66;
              }
              v41 = v40 + 32 * v39;
              v43 = *(unsigned __int8 *)(v41 + 24);
              v42 = (_BYTE *)(v41 + 24);
              if (!v43)
                break;
              *v42 = 0;
LABEL_66:
              v35 = *(_QWORD *)(v35 + 24);
            }
            while (v35 && (*(_BYTE *)(v35 + 288) & 0x80) == 0);
            v33 = *(_QWORD *)(a1 + 336);
LABEL_69:
            if (v28 <= (int)v29 + 1)
              v44 = v29 + 1;
            else
              v44 = v28;
            while (1)
            {
              v32 = (v29 + 1);
              if (v44 - 1 == (_DWORD)v29)
                break;
              LODWORD(v29) = v29 + 1;
              v45 = v32;
              if ((*(_DWORD *)(v33 + 24 * v32 + 8) & 0x80000000) != 0)
                goto LABEL_76;
            }
            v45 = v44;
LABEL_76:
            LODWORD(v29) = v45;
          }
          while ((_DWORD)v28 != v45);
LABEL_77:
          v46 = *(_DWORD *)&v155[16];
          if (*(_DWORD *)&v155[16])
          {
            v47 = 0;
            v48 = (int *)(*(_QWORD *)v155 + 8);
            while (1)
            {
              v49 = *v48;
              v48 += 8;
              if (v49 < 0)
                break;
              if (*(unsigned int *)&v155[16] == ++v47)
              {
                LODWORD(v47) = *(_DWORD *)&v155[16];
                break;
              }
            }
          }
          else
          {
            LODWORD(v47) = 0;
          }
          if (*(_DWORD *)&v155[16] != (_DWORD)v47)
          {
            v50 = v47;
            v51 = *(_QWORD *)v155;
            do
            {
              v52 = v51 + 32 * v50;
              v55 = *(_QWORD *)(v52 + 16);
              v53 = v52 + 16;
              v54 = v55;
              if (*v136)
              {
                v56 = 0x94D049BB133111EBLL
                    * ((0xBF58476D1CE4E5B9 * (v54 ^ (v54 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v54 ^ (v54 >> 30))) >> 27));
                v57 = (v56 ^ (v56 >> 31)) % *(unsigned int *)(a1 + 296);
                v58 = *(_QWORD *)(a1 + 288);
                v59 = *(unsigned int *)(*(_QWORD *)(a1 + 280) + 4 * v57);
                if ((_DWORD)v59 != 0x7FFFFFFF)
                {
                  while (*(_QWORD *)(v58 + 32 * v59 + 16) != v54)
                  {
                    v59 = *(_DWORD *)(v58 + 32 * v59 + 8) & 0x7FFFFFFF;
                    if (v59 == 0x7FFFFFFF)
                      goto LABEL_91;
                  }
                  goto LABEL_92;
                }
              }
              else
              {
                v58 = *(_QWORD *)(a1 + 288);
              }
LABEL_91:
              v59 = 0x7FFFFFFFLL;
LABEL_92:
              if (*(unsigned __int8 *)(v53 + 8) != *(unsigned __int8 *)(v58 + 32 * v59 + 24))
                re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add((uint64_t)v141, (uint64_t *)v53);
              if (v46 <= (int)v47 + 1)
                v60 = v47 + 1;
              else
                v60 = v46;
              while (1)
              {
                v50 = (v47 + 1);
                if (v60 - 1 == (_DWORD)v47)
                  break;
                LODWORD(v47) = v47 + 1;
                v61 = v50;
                if ((*(_DWORD *)(v51 + 32 * v50 + 8) & 0x80000000) != 0)
                  goto LABEL_101;
              }
              v61 = v60;
LABEL_101:
              LODWORD(v47) = v61;
            }
            while (v46 != v61);
          }
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v154);
          *(_BYTE *)(a1 + 368) = 0;
          goto LABEL_103;
        }
      }
    }
    else
    {
      v9 = *(_DWORD *)(a1 + 304);
      if (v9)
        goto LABEL_31;
    }
    LODWORD(v21) = 0;
    goto LABEL_37;
  }
  return result;
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add<>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a2;
  v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  v7 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v7 = v6 % *(unsigned int *)(a1 + 24);
    v8 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v7);
    if ((_DWORD)v8 != 0x7FFFFFFF)
    {
      v16 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(v16 + 176 * v8 + 16) == v4)
      {
LABEL_12:
        v15 = v16 + 176 * v8;
        return v15 + 32;
      }
      while (1)
      {
        LODWORD(v8) = *(_DWORD *)(v16 + 176 * v8 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v8 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v16 + 176 * v8 + 16) == v4)
          goto LABEL_12;
      }
    }
  }
  v9 = *(_DWORD *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    v9 = *(_DWORD *)(a1 + 32);
    v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v7) = v6 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
      v4 = *a2;
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 176 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 176 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 176 * v9;
  *(_DWORD *)(v11 + v13 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v13) = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v13 + 16) = v4;
  v14 = *(_QWORD *)(a1 + 16) + v13;
  *(_OWORD *)(v14 + 32) = xmmword_2260E5F10;
  *(_OWORD *)(v14 + 48) = xmmword_2260E5F20;
  *(_OWORD *)(v14 + 64) = xmmword_2260E5F40;
  *(_OWORD *)(v14 + 80) = xmmword_2260E5D70;
  *(_QWORD *)(v14 + 96) = 0;
  *(_BYTE *)(v14 + 104) = 0;
  *(_OWORD *)(v14 + 112) = xmmword_2260E5F20;
  *(_OWORD *)(v14 + 128) = xmmword_2260E5F40;
  *(_OWORD *)(v14 + 144) = xmmword_2260E5F20;
  *(_DWORD *)(v14 + 160) = 1065353216;
  *(_WORD *)(v14 + 164) = 0;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v7) = v9;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 16) + v13;
  return v15 + 32;
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int *v11;
  int v12;
  int v13;

  if (*(_QWORD *)result)
  {
    v2 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    v3 = (v2 ^ (v2 >> 31)) % *(unsigned int *)(result + 24);
    v4 = *(_QWORD *)(result + 8);
    v5 = *(unsigned int *)(v4 + 4 * v3);
    if ((_DWORD)v5 != 0x7FFFFFFF)
    {
      v6 = *(_QWORD *)(result + 16);
      if (*(_QWORD *)(v6 + 176 * v5 + 16) == a2)
      {
        *(_DWORD *)(v4 + 4 * v3) = *(_DWORD *)(v6 + 176 * v5 + 8) & 0x7FFFFFFF;
LABEL_8:
        v8 = *(_QWORD *)(result + 16);
        v9 = v8 + 176 * v5;
        v12 = *(_DWORD *)(v9 + 8);
        v11 = (int *)(v9 + 8);
        v10 = v12;
        if (v12 < 0)
        {
          *v11 = v10 & 0x7FFFFFFF;
          v8 = *(_QWORD *)(result + 16);
          v10 = *(_DWORD *)(v8 + 176 * v5 + 8);
        }
        v13 = *(_DWORD *)(result + 40);
        *(_DWORD *)(v8 + 176 * v5 + 8) = *(_DWORD *)(result + 36) | v10 & 0x80000000;
        --*(_DWORD *)(result + 28);
        *(_DWORD *)(result + 36) = v5;
        *(_DWORD *)(result + 40) = v13 + 1;
      }
      else
      {
        while (1)
        {
          v7 = v5;
          LODWORD(v5) = *(_DWORD *)(v6 + 176 * v5 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v5 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v6 + 176 * v5 + 16) == a2)
          {
            *(_DWORD *)(v6 + 176 * v7 + 8) = *(_DWORD *)(v6 + 176 * v7 + 8) & 0x80000000 | *(_DWORD *)(v6 + 176 * v5 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
  return result;
}

void re::ecs2::BillboardManager::registerScene(re::ecs2::BillboardManager *this, re::ecs2::Scene *a2)
{
  re::EventBus *v2;
  re *v3;
  re *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  re *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  re *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  re *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  re *v24;
  re *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  re *v30;
  re *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  re *v37;
  re::EventBus *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  re *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  re *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  re *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  re *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  re *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  re *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  re *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  re *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  re *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  re *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  re *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  re *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  re *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  re *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  re *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  re *v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  re *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  re *v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  re *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  re *v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  re *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  re *v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unsigned int v187;
  uint64_t v188;
  re *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  re *v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v213;
  _BYTE v214[24];
  uint64_t v215;
  _BYTE *v216;
  _BYTE v217[24];
  uint64_t v218;
  re *v219;
  _BYTE v220[24];
  uint64_t v221;
  re *v222;
  _BYTE v223[24];
  uint64_t v224;
  re *v225;
  _BYTE v226[24];
  uint64_t v227;
  re *v228;
  _BYTE v229[24];
  uint64_t v230;
  re *v231;
  _BYTE v232[24];
  uint64_t v233;
  re *v234;
  _BYTE v235[24];
  uint64_t v236;
  re *v237;
  _BYTE v238[24];
  uint64_t v239;
  re *v240;
  _BYTE v241[24];
  uint64_t v242;
  re *v243;
  _BYTE v244[24];
  uint64_t v245;
  re *v246;
  uint64_t v247[3];
  uint64_t v248;
  uint64_t *v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  int v253;
  _BYTE v254[24];
  uint64_t v255;
  re *v256;
  uint64_t v257;

  v257 = *MEMORY[0x24BDAC8D0];
  v213 = (unint64_t)a2;
  v247[0] = (uint64_t)a2;
  v2 = (re::EventBus *)*((_QWORD *)a2 + 36);
  if (!v2)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) An event bus is expected for this system to track entity state changes.", "eventBus", "registerScene", 100);
    _os_crash();
    __break(1u);
  }
  v3 = (re::ecs2::BillboardManager *)((char *)this + 16);
  v250 = 0uLL;
  LODWORD(v251) = 1;
  v252 = 0uLL;
  *((_QWORD *)&v251 + 1) = 0;
  v253 = 0;
  v4 = (re *)(*(uint64_t (**)(re *))(*(_QWORD *)v3 + 16))(v3);
  if (v5)
  {
    v6 = (uint64_t *)v4;
    v7 = 8 * v5;
    do
    {
      v8 = *v6;
      v255 = re::globalAllocators(v4)[2];
      v9 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v255 + 32))(v255, 32, 0);
      *(_QWORD *)v9 = &off_24ED5B990;
      *((_QWORD *)v9 + 1) = v3;
      *((_QWORD *)v9 + 2) = re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>;
      *((_QWORD *)v9 + 3) = 0;
      v256 = v9;
      v10 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v2, (uint64_t)v254, v8, 0);
      v12 = v11;
      v13 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v250);
      *v13 = v10;
      v13[1] = v12;
      if (v256)
      {
        (**(void (***)(re *))v256)(v256);
        if (v256 != (re *)v254)
          (*(void (**)(uint64_t))(*(_QWORD *)v255 + 40))(v255);
      }
      re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(v3, v2, (uint64_t)&v250, v8);
      v4 = (re *)re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(v3, v2, (uint64_t)&v250, v8);
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v14 = (re *)(*(uint64_t (**)(re *))(*(_QWORD *)v3 + 24))(v3);
  if (v15)
  {
    v16 = (uint64_t *)v14;
    v17 = 8 * v15;
    do
    {
      v18 = *v16++;
      re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(v3, v2, (uint64_t)&v250, v18);
      v14 = (re *)re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(v3, v2, (uint64_t)&v250, v18);
      v17 -= 8;
    }
    while (v17);
  }
  v255 = re::globalAllocators(v14)[2];
  v19 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v255 + 32))(v255, 32, 0);
  *(_QWORD *)v19 = &off_24ED5BA98;
  *((_QWORD *)v19 + 1) = v3;
  *((_QWORD *)v19 + 2) = re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>;
  *((_QWORD *)v19 + 3) = 0;
  v256 = v19;
  v20 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v2, (uint64_t)v254, 0, 0);
  v22 = v21;
  v23 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v250);
  *v23 = v20;
  v23[1] = v22;
  v24 = v256;
  if (v256)
  {
    v24 = (re *)(**(uint64_t (***)(re *))v256)(v256);
    if (v256 != (re *)v254)
      v24 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v255 + 40))(v255);
  }
  v255 = re::globalAllocators(v24)[2];
  v25 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v255 + 32))(v255, 32, 0);
  *(_QWORD *)v25 = &off_24ED5BAF0;
  *((_QWORD *)v25 + 1) = v3;
  *((_QWORD *)v25 + 2) = re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::invalidateEntityHierarchyEventHandler<RESceneEntityDidActivateEvent>;
  *((_QWORD *)v25 + 3) = 0;
  v256 = v25;
  v26 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidActivateEvent>(v2, (uint64_t)v254, 0, 0);
  v28 = v27;
  v29 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v250);
  *v29 = v26;
  v29[1] = v28;
  v30 = v256;
  if (v256)
  {
    v30 = (re *)(**(uint64_t (***)(re *))v256)(v256);
    if (v256 != (re *)v254)
      v30 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v255 + 40))(v255);
  }
  v255 = re::globalAllocators(v30)[2];
  v31 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v255 + 32))(v255, 32, 0);
  *(_QWORD *)v31 = &off_24ED5BB48;
  *((_QWORD *)v31 + 1) = v3;
  *((_QWORD *)v31 + 2) = re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::invalidateEntityHierarchyEventHandler<RESceneEntityWillDeactivateEvent>;
  *((_QWORD *)v31 + 3) = 0;
  v256 = v31;
  v32 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillDeactivateEvent>(v2, (uint64_t)v254, 0, 0);
  v34 = v33;
  v35 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v250);
  *v35 = v32;
  v35[1] = v34;
  if (v256)
  {
    (**(void (***)(re *))v256)(v256);
    if (v256 != (re *)v254)
      (*(void (**)(uint64_t))(*(_QWORD *)v255 + 40))(v255);
  }
  v36 = (_QWORD *)((char *)this + 168);
  re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 168, v247, (uint64_t)&v250);
  re::HashSetBase<re::ecs2::Scene const*,re::ecs2::Scene const*,re::internal::ValueAsKey<re::ecs2::Scene const*>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 24, v247);
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)&v250);
  v37 = (re *)v250;
  if ((_QWORD)v250 && (v251 & 1) == 0)
    v37 = (re *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v250 + 40))(v250, v252);
  v38 = (re::EventBus *)*((_QWORD *)a2 + 36);
  if (v38)
  {
    LODWORD(v39) = 0x7FFFFFFF;
    v40 = (unint64_t)a2 ^ ((unint64_t)a2 >> 30);
    if (*v36)
    {
      v41 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v40) ^ ((0xBF58476D1CE4E5B9 * v40) >> 27));
      v42 = *(unsigned int *)(*((_QWORD *)this + 22) + 4 * ((v41 ^ (v41 >> 31)) % *((unsigned int *)this + 48)));
      if ((_DWORD)v42 != 0x7FFFFFFF)
      {
        v43 = *((_QWORD *)this + 23);
        if (*(re::ecs2::Scene **)(v43 + 80 * v42 + 16) == a2)
        {
          LODWORD(v39) = v42;
        }
        else
        {
          v39 = v42;
          while (1)
          {
            LODWORD(v39) = *(_DWORD *)(v43 + 80 * v39 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v39 == 0x7FFFFFFF)
              break;
            if (*(re::ecs2::Scene **)(v43 + 80 * v39 + 16) == a2)
              goto LABEL_33;
          }
          LODWORD(v39) = 0x7FFFFFFF;
        }
      }
    }
LABEL_33:
    v44 = *((_QWORD *)this + 23) + 80 * v39 + 24;
    *((_QWORD *)&v251 + 1) = re::globalAllocators(v37)[2];
    *(_QWORD *)&v252 = 0;
    v45 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)&v251 + 1) + 32))(*((_QWORD *)&v251 + 1), 32, 0);
    *v45 = &off_24ED5B798;
    v45[1] = v3;
    v45[2] = re::ecs2::BillboardManagerStateTracking::billboardComponentAddOrActivateEventHandler<REComponentDidAddEvent>;
    v45[3] = 0;
    *(_QWORD *)&v252 = v45;
    v46 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v38, (uint64_t)&v250, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BillboardComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v48 = v47;
    v49 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v44);
    *v49 = v46;
    v49[1] = v48;
    v50 = (re *)v252;
    if ((_QWORD)v252)
    {
      v50 = (re *)(**(uint64_t (***)(_QWORD))v252)(v252);
      if ((__int128 *)v252 != &v250)
        v50 = (re *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)&v251 + 1) + 40))(*((_QWORD *)&v251 + 1));
      *(_QWORD *)&v252 = 0;
    }
    if (*v36)
    {
      v51 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v40) ^ ((0xBF58476D1CE4E5B9 * v40) >> 27));
      v52 = (v51 ^ (v51 >> 31)) % *((unsigned int *)this + 48);
      v53 = *((_QWORD *)this + 23);
      v54 = *(unsigned int *)(*((_QWORD *)this + 22) + 4 * v52);
      v55 = 0x7FFFFFFF;
      if ((_DWORD)v54 != 0x7FFFFFFF)
      {
        if (*(re::ecs2::Scene **)(v53 + 80 * v54 + 16) == a2)
        {
LABEL_42:
          v55 = v54;
        }
        else
        {
          while (1)
          {
            LODWORD(v54) = *(_DWORD *)(v53 + 80 * v54 + 8) & 0x7FFFFFFF;
            v55 = 0x7FFFFFFF;
            if ((_DWORD)v54 == 0x7FFFFFFF)
              break;
            if (*(re::ecs2::Scene **)(v53 + 80 * v54 + 16) == a2)
              goto LABEL_42;
          }
        }
      }
    }
    else
    {
      v53 = *((_QWORD *)this + 23);
      v55 = 0x7FFFFFFF;
    }
    v56 = v53 + 80 * v55 + 24;
    v255 = re::globalAllocators(v50)[2];
    v256 = 0;
    v57 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v255 + 32))(v255, 32, 0);
    *(_QWORD *)v57 = &off_24ED5B7F0;
    *((_QWORD *)v57 + 1) = v3;
    *((_QWORD *)v57 + 2) = re::ecs2::BillboardManagerStateTracking::billboardComponentAddOrActivateEventHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v57 + 3) = 0;
    v256 = v57;
    v58 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v38, (uint64_t)v254, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BillboardComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v60 = v59;
    v61 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v56);
    *v61 = v58;
    v61[1] = v60;
    v62 = v256;
    if (v256)
    {
      v62 = (re *)(**(uint64_t (***)(re *))v256)(v256);
      if (v256 != (re *)v254)
        v62 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v255 + 40))(v255);
      v256 = 0;
    }
    if (*v36)
    {
      v63 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v40) ^ ((0xBF58476D1CE4E5B9 * v40) >> 27));
      v64 = (v63 ^ (v63 >> 31)) % *((unsigned int *)this + 48);
      v65 = *((_QWORD *)this + 23);
      v66 = *(unsigned int *)(*((_QWORD *)this + 22) + 4 * v64);
      v67 = 0x7FFFFFFF;
      if ((_DWORD)v66 != 0x7FFFFFFF)
      {
        if (*(re::ecs2::Scene **)(v65 + 80 * v66 + 16) == a2)
        {
LABEL_53:
          v67 = v66;
        }
        else
        {
          while (1)
          {
            LODWORD(v66) = *(_DWORD *)(v65 + 80 * v66 + 8) & 0x7FFFFFFF;
            v67 = 0x7FFFFFFF;
            if ((_DWORD)v66 == 0x7FFFFFFF)
              break;
            if (*(re::ecs2::Scene **)(v65 + 80 * v66 + 16) == a2)
              goto LABEL_53;
          }
        }
      }
    }
    else
    {
      v65 = *((_QWORD *)this + 23);
      v67 = 0x7FFFFFFF;
    }
    v68 = v65 + 80 * v67 + 24;
    v248 = re::globalAllocators(v62)[2];
    v249 = 0;
    v69 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v248 + 32))(v248, 32, 0);
    *v69 = (uint64_t)&off_24ED5B848;
    v69[1] = (uint64_t)v3;
    v69[2] = (uint64_t)re::ecs2::BillboardManagerStateTracking::billboardComponentRemoveOrDeactivateEventHandler<REComponentWillRemoveEvent>;
    v69[3] = 0;
    v249 = v69;
    v70 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v38, (uint64_t)v247, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BillboardComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v72 = v71;
    v73 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v68);
    *v73 = v70;
    v73[1] = v72;
    v74 = (re *)v249;
    if (v249)
    {
      v74 = (re *)(*(uint64_t (**)(uint64_t *))*v249)(v249);
      if (v249 != v247)
        v74 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v248 + 40))(v248);
      v249 = 0;
    }
    if (*v36)
    {
      v75 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v40) ^ ((0xBF58476D1CE4E5B9 * v40) >> 27));
      v76 = (v75 ^ (v75 >> 31)) % *((unsigned int *)this + 48);
      v77 = *((_QWORD *)this + 23);
      v78 = *(unsigned int *)(*((_QWORD *)this + 22) + 4 * v76);
      v79 = 0x7FFFFFFF;
      if ((_DWORD)v78 != 0x7FFFFFFF)
      {
        if (*(re::ecs2::Scene **)(v77 + 80 * v78 + 16) == a2)
        {
LABEL_64:
          v79 = v78;
        }
        else
        {
          while (1)
          {
            LODWORD(v78) = *(_DWORD *)(v77 + 80 * v78 + 8) & 0x7FFFFFFF;
            v79 = 0x7FFFFFFF;
            if ((_DWORD)v78 == 0x7FFFFFFF)
              break;
            if (*(re::ecs2::Scene **)(v77 + 80 * v78 + 16) == a2)
              goto LABEL_64;
          }
        }
      }
    }
    else
    {
      v77 = *((_QWORD *)this + 23);
      v79 = 0x7FFFFFFF;
    }
    v80 = v77 + 80 * v79 + 24;
    v245 = re::globalAllocators(v74)[2];
    v246 = 0;
    v81 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v245 + 32))(v245, 32, 0);
    *(_QWORD *)v81 = &off_24ED5B8A0;
    *((_QWORD *)v81 + 1) = v3;
    *((_QWORD *)v81 + 2) = re::ecs2::BillboardManagerStateTracking::billboardComponentRemoveOrDeactivateEventHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v81 + 3) = 0;
    v246 = v81;
    v82 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v38, (uint64_t)v244, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BillboardComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v84 = v83;
    v85 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v80);
    *v85 = v82;
    v85[1] = v84;
    v86 = v246;
    if (v246)
    {
      v86 = (re *)(**(uint64_t (***)(re *))v246)(v246);
      if (v246 != (re *)v244)
        v86 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v245 + 40))(v245);
      v246 = 0;
    }
    if (*v36)
    {
      v87 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v40) ^ ((0xBF58476D1CE4E5B9 * v40) >> 27));
      v88 = (v87 ^ (v87 >> 31)) % *((unsigned int *)this + 48);
      v89 = *((_QWORD *)this + 23);
      v90 = *(unsigned int *)(*((_QWORD *)this + 22) + 4 * v88);
      v91 = 0x7FFFFFFF;
      if ((_DWORD)v90 != 0x7FFFFFFF)
      {
        if (*(re::ecs2::Scene **)(v89 + 80 * v90 + 16) == a2)
        {
LABEL_75:
          v91 = v90;
        }
        else
        {
          while (1)
          {
            LODWORD(v90) = *(_DWORD *)(v89 + 80 * v90 + 8) & 0x7FFFFFFF;
            v91 = 0x7FFFFFFF;
            if ((_DWORD)v90 == 0x7FFFFFFF)
              break;
            if (*(re::ecs2::Scene **)(v89 + 80 * v90 + 16) == a2)
              goto LABEL_75;
          }
        }
      }
    }
    else
    {
      v89 = *((_QWORD *)this + 23);
      v91 = 0x7FFFFFFF;
    }
    v92 = v89 + 80 * v91 + 24;
    v242 = re::globalAllocators(v86)[2];
    v243 = 0;
    v93 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v242 + 32))(v242, 32, 0);
    *(_QWORD *)v93 = &off_24ED5B798;
    *((_QWORD *)v93 + 1) = v3;
    *((_QWORD *)v93 + 2) = re::ecs2::BillboardManagerStateTracking::physicsBodyAddOrActivateEventHandler<REComponentDidAddEvent>;
    *((_QWORD *)v93 + 3) = 0;
    v243 = v93;
    v94 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v38, (uint64_t)v241, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v96 = v95;
    v97 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v92);
    *v97 = v94;
    v97[1] = v96;
    v98 = v243;
    if (v243)
    {
      v98 = (re *)(**(uint64_t (***)(re *))v243)(v243);
      if (v243 != (re *)v241)
        v98 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v242 + 40))(v242);
      v243 = 0;
    }
    if (*v36)
    {
      v99 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v40) ^ ((0xBF58476D1CE4E5B9 * v40) >> 27));
      v100 = (v99 ^ (v99 >> 31)) % *((unsigned int *)this + 48);
      v101 = *((_QWORD *)this + 23);
      v102 = *(unsigned int *)(*((_QWORD *)this + 22) + 4 * v100);
      v103 = 0x7FFFFFFF;
      if ((_DWORD)v102 != 0x7FFFFFFF)
      {
        if (*(re::ecs2::Scene **)(v101 + 80 * v102 + 16) == a2)
        {
LABEL_86:
          v103 = v102;
        }
        else
        {
          while (1)
          {
            LODWORD(v102) = *(_DWORD *)(v101 + 80 * v102 + 8) & 0x7FFFFFFF;
            v103 = 0x7FFFFFFF;
            if ((_DWORD)v102 == 0x7FFFFFFF)
              break;
            if (*(re::ecs2::Scene **)(v101 + 80 * v102 + 16) == a2)
              goto LABEL_86;
          }
        }
      }
    }
    else
    {
      v101 = *((_QWORD *)this + 23);
      v103 = 0x7FFFFFFF;
    }
    v104 = v101 + 80 * v103 + 24;
    v239 = re::globalAllocators(v98)[2];
    v240 = 0;
    v105 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v239 + 32))(v239, 32, 0);
    *(_QWORD *)v105 = &off_24ED5B7F0;
    *((_QWORD *)v105 + 1) = v3;
    *((_QWORD *)v105 + 2) = re::ecs2::BillboardManagerStateTracking::physicsBodyAddOrActivateEventHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v105 + 3) = 0;
    v240 = v105;
    v106 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v38, (uint64_t)v238, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v108 = v107;
    v109 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v104);
    *v109 = v106;
    v109[1] = v108;
    v110 = v240;
    if (v240)
    {
      v110 = (re *)(**(uint64_t (***)(re *))v240)(v240);
      if (v240 != (re *)v238)
        v110 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v239 + 40))(v239);
      v240 = 0;
    }
    if (*v36)
    {
      v111 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v40) ^ ((0xBF58476D1CE4E5B9 * v40) >> 27));
      v112 = (v111 ^ (v111 >> 31)) % *((unsigned int *)this + 48);
      v113 = *((_QWORD *)this + 23);
      v114 = *(unsigned int *)(*((_QWORD *)this + 22) + 4 * v112);
      v115 = 0x7FFFFFFF;
      if ((_DWORD)v114 != 0x7FFFFFFF)
      {
        if (*(re::ecs2::Scene **)(v113 + 80 * v114 + 16) == a2)
        {
LABEL_97:
          v115 = v114;
        }
        else
        {
          while (1)
          {
            LODWORD(v114) = *(_DWORD *)(v113 + 80 * v114 + 8) & 0x7FFFFFFF;
            v115 = 0x7FFFFFFF;
            if ((_DWORD)v114 == 0x7FFFFFFF)
              break;
            if (*(re::ecs2::Scene **)(v113 + 80 * v114 + 16) == a2)
              goto LABEL_97;
          }
        }
      }
    }
    else
    {
      v113 = *((_QWORD *)this + 23);
      v115 = 0x7FFFFFFF;
    }
    v116 = v113 + 80 * v115 + 24;
    v236 = re::globalAllocators(v110)[2];
    v237 = 0;
    v117 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v236 + 32))(v236, 32, 0);
    *(_QWORD *)v117 = &off_24ED5B848;
    *((_QWORD *)v117 + 1) = v3;
    *((_QWORD *)v117 + 2) = re::ecs2::BillboardManagerStateTracking::physicsBodyRemoveOrDeactivateEventHandler<REComponentWillRemoveEvent>;
    *((_QWORD *)v117 + 3) = 0;
    v237 = v117;
    v118 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v38, (uint64_t)v235, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v120 = v119;
    v121 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v116);
    *v121 = v118;
    v121[1] = v120;
    v122 = v237;
    if (v237)
    {
      v122 = (re *)(**(uint64_t (***)(re *))v237)(v237);
      if (v237 != (re *)v235)
        v122 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v236 + 40))(v236);
      v237 = 0;
    }
    if (*v36)
    {
      v123 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v40) ^ ((0xBF58476D1CE4E5B9 * v40) >> 27));
      v124 = (v123 ^ (v123 >> 31)) % *((unsigned int *)this + 48);
      v125 = *((_QWORD *)this + 23);
      v126 = *(unsigned int *)(*((_QWORD *)this + 22) + 4 * v124);
      v127 = 0x7FFFFFFF;
      if ((_DWORD)v126 != 0x7FFFFFFF)
      {
        if (*(re::ecs2::Scene **)(v125 + 80 * v126 + 16) == a2)
        {
LABEL_108:
          v127 = v126;
        }
        else
        {
          while (1)
          {
            LODWORD(v126) = *(_DWORD *)(v125 + 80 * v126 + 8) & 0x7FFFFFFF;
            v127 = 0x7FFFFFFF;
            if ((_DWORD)v126 == 0x7FFFFFFF)
              break;
            if (*(re::ecs2::Scene **)(v125 + 80 * v126 + 16) == a2)
              goto LABEL_108;
          }
        }
      }
    }
    else
    {
      v125 = *((_QWORD *)this + 23);
      v127 = 0x7FFFFFFF;
    }
    v128 = v125 + 80 * v127 + 24;
    v233 = re::globalAllocators(v122)[2];
    v234 = 0;
    v129 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v233 + 32))(v233, 32, 0);
    *(_QWORD *)v129 = &off_24ED5B8A0;
    *((_QWORD *)v129 + 1) = v3;
    *((_QWORD *)v129 + 2) = re::ecs2::BillboardManagerStateTracking::physicsBodyRemoveOrDeactivateEventHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v129 + 3) = 0;
    v234 = v129;
    v130 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v38, (uint64_t)v232, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v132 = v131;
    v133 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v128);
    *v133 = v130;
    v133[1] = v132;
    v134 = v234;
    if (v234)
    {
      v134 = (re *)(**(uint64_t (***)(re *))v234)(v234);
      if (v234 != (re *)v232)
        v134 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v233 + 40))(v233);
      v234 = 0;
    }
    if (*v36)
    {
      v135 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v40) ^ ((0xBF58476D1CE4E5B9 * v40) >> 27));
      v136 = (v135 ^ (v135 >> 31)) % *((unsigned int *)this + 48);
      v137 = *((_QWORD *)this + 23);
      v138 = *(unsigned int *)(*((_QWORD *)this + 22) + 4 * v136);
      v139 = 0x7FFFFFFF;
      if ((_DWORD)v138 != 0x7FFFFFFF)
      {
        if (*(re::ecs2::Scene **)(v137 + 80 * v138 + 16) == a2)
        {
LABEL_119:
          v139 = v138;
        }
        else
        {
          while (1)
          {
            LODWORD(v138) = *(_DWORD *)(v137 + 80 * v138 + 8) & 0x7FFFFFFF;
            v139 = 0x7FFFFFFF;
            if ((_DWORD)v138 == 0x7FFFFFFF)
              break;
            if (*(re::ecs2::Scene **)(v137 + 80 * v138 + 16) == a2)
              goto LABEL_119;
          }
        }
      }
    }
    else
    {
      v137 = *((_QWORD *)this + 23);
      v139 = 0x7FFFFFFF;
    }
    v140 = v137 + 80 * v139 + 24;
    v230 = re::globalAllocators(v134)[2];
    v231 = 0;
    v141 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v230 + 32))(v230, 32, 0);
    *(_QWORD *)v141 = &off_24ED5B8F8;
    *((_QWORD *)v141 + 1) = v3;
    *((_QWORD *)v141 + 2) = re::ecs2::BillboardManagerStateTracking::physicsBodyReparentEventHandler<RESceneEntityDidReparentEvent>;
    *((_QWORD *)v141 + 3) = 0;
    v231 = v141;
    v142 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v38, (uint64_t)v229, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v144 = v143;
    v145 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v140);
    *v145 = v142;
    v145[1] = v144;
    v146 = v231;
    if (v231)
    {
      v146 = (re *)(**(uint64_t (***)(re *))v231)(v231);
      if (v231 != (re *)v229)
        v146 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v230 + 40))(v230);
      v231 = 0;
    }
    if (*v36)
    {
      v147 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v40) ^ ((0xBF58476D1CE4E5B9 * v40) >> 27));
      v148 = (v147 ^ (v147 >> 31)) % *((unsigned int *)this + 48);
      v149 = *((_QWORD *)this + 23);
      v150 = *(unsigned int *)(*((_QWORD *)this + 22) + 4 * v148);
      v151 = 0x7FFFFFFF;
      if ((_DWORD)v150 != 0x7FFFFFFF)
      {
        if (*(re::ecs2::Scene **)(v149 + 80 * v150 + 16) == a2)
        {
LABEL_130:
          v151 = v150;
        }
        else
        {
          while (1)
          {
            LODWORD(v150) = *(_DWORD *)(v149 + 80 * v150 + 8) & 0x7FFFFFFF;
            v151 = 0x7FFFFFFF;
            if ((_DWORD)v150 == 0x7FFFFFFF)
              break;
            if (*(re::ecs2::Scene **)(v149 + 80 * v150 + 16) == a2)
              goto LABEL_130;
          }
        }
      }
    }
    else
    {
      v149 = *((_QWORD *)this + 23);
      v151 = 0x7FFFFFFF;
    }
    v152 = v149 + 80 * v151 + 24;
    v227 = re::globalAllocators(v146)[2];
    v228 = 0;
    v153 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v227 + 32))(v227, 32, 0);
    *(_QWORD *)v153 = &off_24ED5B798;
    *((_QWORD *)v153 + 1) = v3;
    *((_QWORD *)v153 + 2) = re::ecs2::BillboardManagerStateTracking::physicsBodyAddOrActivateEventHandler<REComponentDidAddEvent>;
    *((_QWORD *)v153 + 3) = 0;
    v228 = v153;
    v154 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v38, (uint64_t)v226, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v156 = v155;
    v157 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v152);
    *v157 = v154;
    v157[1] = v156;
    v158 = v228;
    if (v228)
    {
      v158 = (re *)(**(uint64_t (***)(re *))v228)(v228);
      if (v228 != (re *)v226)
        v158 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v227 + 40))(v227);
      v228 = 0;
    }
    if (*v36)
    {
      v159 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v40) ^ ((0xBF58476D1CE4E5B9 * v40) >> 27));
      v160 = (v159 ^ (v159 >> 31)) % *((unsigned int *)this + 48);
      v161 = *((_QWORD *)this + 23);
      v162 = *(unsigned int *)(*((_QWORD *)this + 22) + 4 * v160);
      v163 = 0x7FFFFFFF;
      if ((_DWORD)v162 != 0x7FFFFFFF)
      {
        if (*(re::ecs2::Scene **)(v161 + 80 * v162 + 16) == a2)
        {
LABEL_141:
          v163 = v162;
        }
        else
        {
          while (1)
          {
            LODWORD(v162) = *(_DWORD *)(v161 + 80 * v162 + 8) & 0x7FFFFFFF;
            v163 = 0x7FFFFFFF;
            if ((_DWORD)v162 == 0x7FFFFFFF)
              break;
            if (*(re::ecs2::Scene **)(v161 + 80 * v162 + 16) == a2)
              goto LABEL_141;
          }
        }
      }
    }
    else
    {
      v161 = *((_QWORD *)this + 23);
      v163 = 0x7FFFFFFF;
    }
    v164 = v161 + 80 * v163 + 24;
    v224 = re::globalAllocators(v158)[2];
    v225 = 0;
    v165 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v224 + 32))(v224, 32, 0);
    *(_QWORD *)v165 = &off_24ED5B7F0;
    *((_QWORD *)v165 + 1) = v3;
    *((_QWORD *)v165 + 2) = re::ecs2::BillboardManagerStateTracking::physicsBodyAddOrActivateEventHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v165 + 3) = 0;
    v225 = v165;
    v166 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v38, (uint64_t)v223, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v168 = v167;
    v169 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v164);
    *v169 = v166;
    v169[1] = v168;
    v170 = v225;
    if (v225)
    {
      v170 = (re *)(**(uint64_t (***)(re *))v225)(v225);
      if (v225 != (re *)v223)
        v170 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v224 + 40))(v224);
      v225 = 0;
    }
    if (*v36)
    {
      v171 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v40) ^ ((0xBF58476D1CE4E5B9 * v40) >> 27));
      v172 = (v171 ^ (v171 >> 31)) % *((unsigned int *)this + 48);
      v173 = *((_QWORD *)this + 23);
      v174 = *(unsigned int *)(*((_QWORD *)this + 22) + 4 * v172);
      v175 = 0x7FFFFFFF;
      if ((_DWORD)v174 != 0x7FFFFFFF)
      {
        if (*(re::ecs2::Scene **)(v173 + 80 * v174 + 16) == a2)
        {
LABEL_152:
          v175 = v174;
        }
        else
        {
          while (1)
          {
            LODWORD(v174) = *(_DWORD *)(v173 + 80 * v174 + 8) & 0x7FFFFFFF;
            v175 = 0x7FFFFFFF;
            if ((_DWORD)v174 == 0x7FFFFFFF)
              break;
            if (*(re::ecs2::Scene **)(v173 + 80 * v174 + 16) == a2)
              goto LABEL_152;
          }
        }
      }
    }
    else
    {
      v173 = *((_QWORD *)this + 23);
      v175 = 0x7FFFFFFF;
    }
    v176 = v173 + 80 * v175 + 24;
    v221 = re::globalAllocators(v170)[2];
    v177 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v221 + 32))(v221, 32, 0);
    *(_QWORD *)v177 = &off_24ED5B848;
    *((_QWORD *)v177 + 1) = v3;
    *((_QWORD *)v177 + 2) = re::ecs2::BillboardManagerStateTracking::physicsBodyRemoveOrDeactivateEventHandler<REComponentWillRemoveEvent>;
    *((_QWORD *)v177 + 3) = 0;
    v222 = v177;
    v178 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v38, (uint64_t)v220, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v180 = v179;
    v181 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v176);
    *v181 = v178;
    v181[1] = v180;
    v182 = v222;
    if (v222)
    {
      v182 = (re *)(**(uint64_t (***)(re *))v222)(v222);
      if (v222 != (re *)v220)
        v182 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v221 + 40))(v221);
      v222 = 0;
    }
    if (*v36)
    {
      v183 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v40) ^ ((0xBF58476D1CE4E5B9 * v40) >> 27));
      v184 = (v183 ^ (v183 >> 31)) % *((unsigned int *)this + 48);
      v185 = *((_QWORD *)this + 23);
      v186 = *(unsigned int *)(*((_QWORD *)this + 22) + 4 * v184);
      v187 = 0x7FFFFFFF;
      if ((_DWORD)v186 != 0x7FFFFFFF)
      {
        if (*(re::ecs2::Scene **)(v185 + 80 * v186 + 16) == a2)
        {
LABEL_163:
          v187 = v186;
        }
        else
        {
          while (1)
          {
            LODWORD(v186) = *(_DWORD *)(v185 + 80 * v186 + 8) & 0x7FFFFFFF;
            v187 = 0x7FFFFFFF;
            if ((_DWORD)v186 == 0x7FFFFFFF)
              break;
            if (*(re::ecs2::Scene **)(v185 + 80 * v186 + 16) == a2)
              goto LABEL_163;
          }
        }
      }
    }
    else
    {
      v185 = *((_QWORD *)this + 23);
      v187 = 0x7FFFFFFF;
    }
    v188 = v185 + 80 * v187 + 24;
    v218 = re::globalAllocators(v182)[2];
    v189 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v218 + 32))(v218, 32, 0);
    *(_QWORD *)v189 = &off_24ED5B8A0;
    *((_QWORD *)v189 + 1) = v3;
    *((_QWORD *)v189 + 2) = re::ecs2::BillboardManagerStateTracking::physicsBodyRemoveOrDeactivateEventHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v189 + 3) = 0;
    v219 = v189;
    v190 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v38, (uint64_t)v217, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v192 = v191;
    v193 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v188);
    *v193 = v190;
    v193[1] = v192;
    v194 = v219;
    if (v219)
    {
      v194 = (re *)(**(uint64_t (***)(re *))v219)(v219);
      if (v219 != (re *)v217)
        v194 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v218 + 40))(v218);
      v219 = 0;
    }
    if (*v36)
    {
      v195 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v40) ^ ((0xBF58476D1CE4E5B9 * v40) >> 27));
      v196 = (v195 ^ (v195 >> 31)) % *((unsigned int *)this + 48);
      v197 = *((_QWORD *)this + 23);
      v198 = *(unsigned int *)(*((_QWORD *)this + 22) + 4 * v196);
      v199 = 0x7FFFFFFF;
      if ((_DWORD)v198 != 0x7FFFFFFF)
      {
        if (*(re::ecs2::Scene **)(v197 + 80 * v198 + 16) == a2)
        {
LABEL_174:
          v199 = v198;
        }
        else
        {
          while (1)
          {
            LODWORD(v198) = *(_DWORD *)(v197 + 80 * v198 + 8) & 0x7FFFFFFF;
            v199 = 0x7FFFFFFF;
            if ((_DWORD)v198 == 0x7FFFFFFF)
              break;
            if (*(re::ecs2::Scene **)(v197 + 80 * v198 + 16) == a2)
              goto LABEL_174;
          }
        }
      }
    }
    else
    {
      v197 = *((_QWORD *)this + 23);
      v199 = 0x7FFFFFFF;
    }
    v200 = v197 + 80 * v199 + 24;
    v215 = re::globalAllocators(v194)[2];
    v201 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v215 + 32))(v215, 32, 0);
    *v201 = &off_24ED5B8F8;
    v201[1] = v3;
    v201[2] = re::ecs2::BillboardManagerStateTracking::physicsBodyReparentEventHandler<RESceneEntityDidReparentEvent>;
    v201[3] = 0;
    v216 = v201;
    v202 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v38, (uint64_t)v214, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v204 = v203;
    v205 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v200);
    *v205 = v202;
    v205[1] = v204;
    if (v216)
    {
      (**(void (***)(_BYTE *))v216)(v216);
      if (v216 != v214)
        (*(void (**)(uint64_t))(*(_QWORD *)v215 + 40))(v215);
    }
  }
  if (!*((_QWORD *)this + 1))
    *((_QWORD *)this + 1) = *((_QWORD *)a2 + 7);
  v251 = 0u;
  v252 = 0u;
  v250 = 0u;
  v206 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v213 ^ (v213 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v213 ^ (v213 >> 30))) >> 27));
  v207 = v206 ^ (v206 >> 31);
  if (*((_QWORD *)this + 54))
  {
    v208 = v207 % *((unsigned int *)this + 114);
    v209 = *(unsigned int *)(*((_QWORD *)this + 55) + 4 * v208);
    if ((_DWORD)v209 != 0x7FFFFFFF)
    {
      v210 = *((_QWORD *)this + 56);
      if (*(_QWORD *)(v210 + 80 * v209 + 16) == v213)
        return;
      while (1)
      {
        LODWORD(v209) = *(_DWORD *)(v210 + 80 * v209 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v209 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v210 + 80 * v209 + 16) == v213)
          return;
      }
    }
  }
  else
  {
    LODWORD(v208) = 0;
  }
  re::HashTable<re::ecs2::Scene const*,re::ecs2::CameraPosition,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove((uint64_t)this + 432, v208, v207, &v213, (uint64_t)&v250);
  ++*((_DWORD *)this + 118);
}

uint64_t re::ecs2::BillboardManager::unregisterScene(re::ecs2::BillboardManager *this, re::ecs2::Scene *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  re::ecs2::Scene *v14;

  v14 = a2;
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 24, (uint64_t *)&v14);
  v3 = *((_QWORD *)v14 + 13);
  v4 = *(_QWORD *)(v3 + 328);
  if (v4)
  {
    v5 = *(_QWORD *)(v3 + 344);
    v6 = 8 * v4;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)v5 + 288) & 1) != 0)
        (*(void (**)(char *))(*((_QWORD *)this + 2) + 40))((char *)this + 16);
      v5 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  v7 = (char *)this + 168;
  result = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)v7, (uint64_t *)&v14);
  if (result)
  {
    v9 = *((_QWORD *)v14 + 36);
    if (v9)
    {
      v10 = result;
      v11 = *(_QWORD *)(result + 40);
      if (v11)
      {
        for (i = 0; i != v11; ++i)
        {
          v13 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v10, i);
          re::EventBus::unsubscribe(v9, *(_QWORD *)v13, *(_QWORD *)(v13 + 8));
        }
      }
    }
    return re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v7, (uint64_t *)&v14);
  }
  return result;
}

void re::ecs2::BillboardManager::update(re::ecs2::BillboardManager *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int *v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  __int128 v46[4];

  if (*((_DWORD *)this + 79))
  {
    v2 = (char *)this + 16;
    v3 = (char *)this + 120;
    (*(void (**)(char *, char *))(*((_QWORD *)this + 2) + 32))((char *)this + 16, (char *)this + 120);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear((uint64_t)v3);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear((uint64_t)(v2 + 200));
    v4 = *((unsigned int *)v2 + 112);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = (int *)(*((_QWORD *)this + 56) + 8);
      while (1)
      {
        v7 = *v6;
        v6 += 20;
        if (v7 < 0)
          break;
        if (v4 == ++v5)
        {
          LODWORD(v5) = *((_DWORD *)v2 + 112);
          break;
        }
      }
    }
    else
    {
      LODWORD(v5) = 0;
    }
    if ((_DWORD)v4 != (_DWORD)v5)
    {
      v8 = v5;
      do
      {
        *(_BYTE *)(*((_QWORD *)this + 56) + 80 * v8 + 32) = 0;
        if (v4 <= (int)v5 + 1)
          v9 = v5 + 1;
        else
          v9 = v4;
        v10 = v5;
        while (1)
        {
          v8 = (v10 + 1);
          if (v9 - 1 == v10)
            break;
          ++v10;
          LODWORD(v5) = v8;
          if ((*(_DWORD *)(*((_QWORD *)this + 56) + 80 * v8 + 8) & 0x80000000) != 0)
            goto LABEL_18;
        }
        LODWORD(v5) = v9;
LABEL_18:
        ;
      }
      while ((_DWORD)v4 != (_DWORD)v5);
    }
    if (re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken != -1)
      dispatch_once(&re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken, &__block_literal_global_25);
    if (re::ecs2::gIsBillboardEnabled)
      v11 = (char *)this + 72;
    else
      v11 = 0;
    if (re::ecs2::gIsBillboardEnabled)
    {
      v12 = *((unsigned int *)this + 128);
      if ((_DWORD)v12)
      {
        v13 = 0;
        v14 = (int *)(*((_QWORD *)this + 62) + 8);
        while (1)
        {
          v15 = *v14;
          v14 += 44;
          if (v15 < 0)
            break;
          if (v12 == ++v13)
          {
            LODWORD(v13) = *((_DWORD *)this + 128);
            break;
          }
        }
      }
      else
      {
        LODWORD(v13) = 0;
      }
      if ((_DWORD)v12 != (_DWORD)v13)
      {
        v22 = v13;
        v23 = *((_DWORD *)this + 128);
        do
        {
          v24 = *((_QWORD *)this + 62);
          v25 = *(_QWORD *)(v24 + 176 * v22 + 16);
          if (re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::containsKey((uint64_t)v11, v25))
          {
            *(_BYTE *)(v24 + 176 * v22 + 32) = 0;
          }
          else if (*((_QWORD *)this + 60))
          {
            v26 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v25 ^ (v25 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v25 ^ (v25 >> 30))) >> 27));
            v27 = (v26 ^ (v26 >> 31)) % *((unsigned int *)this + 126);
            v28 = *((_QWORD *)this + 61);
            v29 = *(unsigned int *)(v28 + 4 * v27);
            if ((_DWORD)v29 != 0x7FFFFFFF)
            {
              if (*(_QWORD *)(v24 + 176 * v29 + 16) == v25)
              {
                *(_DWORD *)(v28 + 4 * v27) = *(_DWORD *)(v24 + 176 * v29 + 8) & 0x7FFFFFFF;
LABEL_51:
                v31 = *((_QWORD *)this + 62);
                v32 = v31 + 176 * v29;
                v35 = *(_DWORD *)(v32 + 8);
                v34 = (int *)(v32 + 8);
                v33 = v35;
                if (v35 < 0)
                {
                  *v34 = v33 & 0x7FFFFFFF;
                  v31 = *((_QWORD *)this + 62);
                  v33 = *(_DWORD *)(v31 + 176 * v29 + 8);
                }
                *(_DWORD *)(v31 + 176 * v29 + 8) = *((_DWORD *)this + 129) | v33 & 0x80000000;
                *((_DWORD *)this + 129) = v29;
                --*((_DWORD *)this + 127);
                ++*((_DWORD *)this + 130);
                v23 = *((_DWORD *)this + 128);
              }
              else
              {
                while (1)
                {
                  v30 = v29;
                  v29 = *(_DWORD *)(v24 + 176 * v29 + 8) & 0x7FFFFFFF;
                  if (v29 == 0x7FFFFFFF)
                    break;
                  if (*(_QWORD *)(v24 + 176 * v29 + 16) == v25)
                  {
                    *(_DWORD *)(v24 + 176 * v30 + 8) = *(_DWORD *)(v24 + 176 * v30 + 8) & 0x80000000 | *(_DWORD *)(v24 + 176 * v29 + 8) & 0x7FFFFFFF;
                    goto LABEL_51;
                  }
                }
              }
            }
          }
          if (v23 <= (int)v13 + 1)
            v36 = v13 + 1;
          else
            v36 = v23;
          while (1)
          {
            v22 = (v13 + 1);
            if (v36 - 1 == (_DWORD)v13)
              break;
            LODWORD(v13) = v13 + 1;
            v37 = v22;
            if ((*(_DWORD *)(*((_QWORD *)this + 62) + 176 * v22 + 8) & 0x80000000) != 0)
              goto LABEL_61;
          }
          v37 = v36;
LABEL_61:
          LODWORD(v13) = v37;
        }
        while ((_DWORD)v12 != v37);
      }
    }
    else if (*((_DWORD *)this + 127))
    {
      v16 = *((unsigned int *)this + 126);
      if ((_DWORD)v16)
        memset_pattern16(*((void **)this + 61), &memset_pattern_12, 4 * v16);
      v17 = *((_DWORD *)this + 128);
      if (v17)
      {
        v18 = 0;
        v19 = 176 * v17;
        do
        {
          v20 = *((_QWORD *)this + 62) + v18;
          v21 = *(_DWORD *)(v20 + 8);
          if (v21 < 0)
            *(_DWORD *)(v20 + 8) = v21 & 0x7FFFFFFF;
          v18 += 176;
        }
        while (v19 != v18);
      }
      *((_DWORD *)this + 129) = 0x7FFFFFFF;
      *(_QWORD *)((char *)this + 508) = 0;
      ++*((_DWORD *)this + 130);
    }
    if (re::ecs2::gIsBillboardEnabled)
      v38 = (char *)this + 72;
    else
      v38 = 0;
    if (re::ecs2::gIsBillboardEnabled)
    {
      v39 = *((unsigned int *)this + 26);
      if ((_DWORD)v39)
      {
        v40 = 0;
        v41 = (int *)(*((_QWORD *)this + 11) + 8);
        while (1)
        {
          v42 = *v41;
          v41 += 44;
          if (v42 < 0)
            break;
          if (v39 == ++v40)
          {
            LODWORD(v40) = *((_DWORD *)this + 26);
            break;
          }
        }
      }
      else
      {
        LODWORD(v40) = 0;
      }
      if ((_DWORD)v39 != (_DWORD)v40)
      {
        v43 = v40;
        do
        {
          re::ecs2::BillboardManager::getBillboardedTransform((float32x4_t *)this, *(re::ecs2::TransformComponent ***)(*((_QWORD *)v38 + 2) + 176 * v43 + 16), v46);
          if (*((_DWORD *)this + 26) <= (v40 + 1))
            v44 = v40 + 1;
          else
            v44 = *((_DWORD *)this + 26);
          v45 = v40;
          while (1)
          {
            v43 = (v45 + 1);
            if (v44 - 1 == v45)
              break;
            ++v45;
            LODWORD(v40) = v43;
            if ((*(_DWORD *)(*((_QWORD *)v38 + 2) + 176 * v43 + 8) & 0x80000000) != 0)
              goto LABEL_82;
          }
          LODWORD(v40) = v44;
LABEL_82:
          ;
        }
        while ((_DWORD)v39 != (_DWORD)v40);
      }
    }
  }
}

uint64_t re::ecs2::BillboardManager::billboardDataPerEntity(re::ecs2::BillboardManager *this)
{
  if (re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken != -1)
    dispatch_once(&re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken, &__block_literal_global_25);
  if (re::ecs2::gIsBillboardEnabled)
    return (uint64_t)this + 72;
  else
    return 0;
}

BOOL re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::containsKey(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 176 * v3 + 16) == a2)
    return 1;
  do
  {
    LODWORD(v3) = *(_DWORD *)(v5 + 176 * v3 + 8) & 0x7FFFFFFF;
    result = (_DWORD)v3 != 0x7FFFFFFF;
  }
  while ((_DWORD)v3 != 0x7FFFFFFF && *(_QWORD *)(v5 + 176 * v3 + 16) != a2);
  return result;
}

void re::ecs2::BillboardManager::getBillboardedTransform(float32x4_t *this@<X0>, re::ecs2::TransformComponent **a2@<X1>, _OWORD *a3@<X8>)
{
  float32x4_t v6;
  re::ecs2::TransformComponent **v7;
  re::ecs2::TransformComponent **v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  uint64_t PerspectiveCameraInScene;
  float32x4_t *v18;
  float32x4_t *v19;
  int v20;
  uint64_t v21;
  _BYTE *v22;
  int v23;
  __int128 v24;
  float32x4_t v25[3];

  if (a2)
  {
    if (re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken != -1)
      dispatch_once(&re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken, &__block_literal_global_25);
    if (re::ecs2::gIsBillboardEnabled
      && re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::containsKey((uint64_t)&this[4].i64[1], (unint64_t)a2))
    {
      if (this[25].i8[0])
      {
        LOBYTE(v24) = 1;
        v6 = this[26];
LABEL_8:
        v25[0] = v6;
LABEL_9:
        re::ecs2::BillboardManager::getBillboardedTransformByCamera((uint64_t)a2, (uint64_t)this, v25, 1, a3);
        return;
      }
      v7 = a2;
      do
      {
        v8 = v7;
        v7 = (re::ecs2::TransformComponent **)v7[3];
      }
      while (v7);
      if (this[27].i64[0])
      {
        v9 = (unint64_t)v8[2];
        v10 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) >> 27));
        v11 = *(unsigned int *)(this[27].i64[1] + 4 * ((v10 ^ (v10 >> 31)) % this[28].u32[2]));
        if ((_DWORD)v11 != 0x7FFFFFFF)
        {
          v12 = this[28].i64[0];
          if (*(_QWORD *)(v12 + 80 * v11 + 16) == v9)
          {
LABEL_20:
            v14 = v12 + 80 * v11;
            v16 = *(unsigned __int8 *)(v14 + 32);
            v15 = (_BYTE *)(v14 + 32);
            if (v16)
            {
              LOBYTE(v24) = *(_BYTE *)(v12 + 80 * v11 + 48);
              if ((_BYTE)v24)
              {
                v6 = *(float32x4_t *)(v12 + 80 * v11 + 64);
                goto LABEL_8;
              }
            }
            else
            {
              PerspectiveCameraInScene = re::ecs2::PerspectiveCameraComponent::firstPerspectiveCameraInScene(v9);
              if (PerspectiveCameraInScene
                || (PerspectiveCameraInScene = re::ecs2::OrthographicCameraComponent::firstOrthographicCameraInScene(v9)) != 0
                || (PerspectiveCameraInScene = re::ecs2::CustomMatrixCameraComponent::firstCustomMatrixCameraInScene(v9)) != 0)
              {
                re::ecs2::TransformComponent::worldMatrix4x4F(*(re::ecs2::TransformComponent ***)(PerspectiveCameraInScene + 16), (const re::ecs2::Entity *)1, &v24);
                LOBYTE(v24) = 1;
                v25[0] = v25[2];
                v18 = (float32x4_t *)(v12 + 80 * v11);
                v20 = v18[3].u8[0];
                v19 = v18 + 3;
                if (!v20)
                  v19->i8[0] = 1;
                v19[1] = v25[0];
                *v15 = 1;
                goto LABEL_9;
              }
              v21 = v12 + 80 * v11;
              v23 = *(unsigned __int8 *)(v21 + 48);
              v22 = (_BYTE *)(v21 + 48);
              if (v23)
                *v22 = 0;
              *v15 = 1;
            }
          }
          else
          {
            while (1)
            {
              v13 = *(_DWORD *)(v12 + 80 * v11 + 8);
              v11 = v13 & 0x7FFFFFFF;
              if ((v13 & 0x7FFFFFFF) == 0x7FFFFFFF)
                break;
              if (*(_QWORD *)(v12 + 80 * v11 + 16) == v9)
                goto LABEL_20;
            }
          }
        }
      }
    }
    re::ecs2::TransformComponent::worldMatrix4x4F(a2, (const re::ecs2::Entity *)1, a3);
  }
  else
  {
    *a3 = xmmword_2260E5F10;
    a3[1] = xmmword_2260E5F20;
    a3[2] = xmmword_2260E5F40;
    a3[3] = xmmword_2260E5D70;
  }
}

uint64_t re::makeQuaternionFromMatrix<float>(float32x4_t *a1)
{
  float32x4_t v1;
  int32x4_t v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float v8;
  float32x4_t v9;
  int32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  float v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  unsigned __int32 v26;
  float32x2_t v32;
  float v33;
  float32x2_t v34;
  float32x2_t v35;
  float v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float v43;
  unsigned int v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;

  v1 = a1[1];
  v2 = (int32x4_t)vmulq_f32(*a1, *a1);
  v2.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v2, 2), vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.i8, 1))).u32[0];
  v3 = vrsqrte_f32((float32x2_t)v2.u32[0]);
  v4 = vmul_f32(v3, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v3, v3)));
  v5 = vmulq_n_f32(*a1, vmul_f32(v4, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v4, v4))).f32[0]);
  v6 = vmulq_f32(v1, v5);
  v7 = vmulq_f32(v5, v5);
  v8 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0];
  v9 = vsubq_f32(v1, vmulq_n_f32(v5, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0]/ v8));
  v10 = (int32x4_t)vmulq_f32(v9, v9);
  v10.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 2), vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1))).u32[0];
  *(float32x2_t *)v7.f32 = vrsqrte_f32((float32x2_t)v10.u32[0]);
  *(float32x2_t *)v7.f32 = vmul_f32(*(float32x2_t *)v7.f32, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32)));
  v11 = vmulq_n_f32(v9, vmul_f32(*(float32x2_t *)v7.f32, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32))).f32[0]);
  v12 = a1[2];
  v13 = vmulq_f32(v5, v12);
  v14 = vmulq_n_f32(v5, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0]/ v8);
  v15 = vmulq_f32(v12, v11);
  v16 = vsubq_f32(v12, v14);
  v14.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0];
  v17 = vmulq_f32(v11, v11);
  v18 = vsubq_f32(v16, vmulq_n_f32(v11, v14.f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0]));
  v19 = (int32x4_t)vmulq_f32(v18, v18);
  v19.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v19, 2), vadd_f32(*(float32x2_t *)v19.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 1))).u32[0];
  *(float32x2_t *)v17.f32 = vrsqrte_f32((float32x2_t)v19.u32[0]);
  *(float32x2_t *)v17.f32 = vmul_f32(*(float32x2_t *)v17.f32, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32)));
  v20 = (int32x4_t)vmulq_n_f32(v18, vmul_f32(*(float32x2_t *)v17.f32, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32))).f32[0]);
  v21 = (float)(v5.f32[0] + v11.f32[1]) + *(float *)&v20.i32[2];
  if (v21 >= 0.0)
  {
    v33 = sqrtf(v21 + 1.0);
    v34 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33));
    v35 = vmul_f32(v34, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33), v34));
    return (uint64_t)vmul_n_f32(vsub_f32((float32x2_t)*(_OWORD *)&vzip2q_s32((int32x4_t)v11, vuzp1q_s32((int32x4_t)v11, v20)), (float32x2_t)*(_OWORD *)&vtrn2q_s32(v20, vzip2q_s32(v20, (int32x4_t)v5))), vmul_f32(v35, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33), v35)).f32[0]);
  }
  else if (v5.f32[0] < v11.f32[1] || v5.f32[0] < *(float *)&v20.i32[2])
  {
    v36 = 1.0 - v5.f32[0];
    if (v11.f32[1] >= *(float *)&v20.i32[2])
    {
      v43 = sqrtf(v11.f32[1] + (float)(v36 - *(float *)&v20.i32[2]));
      *(float *)&v44 = v43 + v43;
      v45 = vrecpe_f32((float32x2_t)v44);
      v46 = vmul_f32(v45, vrecps_f32((float32x2_t)v44, v45));
      v47.i32[0] = vmul_f32(v46, vrecps_f32((float32x2_t)v44, v46)).u32[0];
      v46.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v5.f32, 1), *(float32x2_t *)v11.f32).u32[0];
      v46.i32[1] = v44;
      v47.i32[1] = 0.25;
      return (uint64_t)vmul_f32(v46, v47);
    }
    else
    {
      v37 = (float32x2_t)__PAIR64__(v5.u32[1], COERCE_UNSIGNED_INT(sqrtf((float)(v36 - v11.f32[1]) + *(float *)&v20.i32[2])));
      v38 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32((int32x4_t)v5, (int32x4_t)v11), *(float32x2_t *)v20.i8);
      v39 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.f32, 0);
      v39.i32[0] = 2.0;
      v39.i32[0] = vmul_f32(v37, v39).u32[0];
      v40 = vrecpe_f32((float32x2_t)v39.u32[0]);
      v41 = vmul_f32(v40, vrecps_f32((float32x2_t)v39.u32[0], v40));
      v32 = vmul_n_f32(v38, vmul_f32(v41, vrecps_f32((float32x2_t)v39.u32[0], v41)).f32[0]);
      __asm { FMOV            V2.2S, #0.25 }
    }
  }
  else
  {
    v22 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.f32, 0);
    v23 = vadd_f32(*(float32x2_t *)v5.f32, v22);
    v22.i32[0] = 2.0;
    v22.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v5.u32[1], COERCE_UNSIGNED_INT(sqrtf(v5.f32[0] + (float)((float)(1.0 - v11.f32[1])- *(float *)&v20.i32[2])))), v22).u32[0];
    v22.i32[1] = v23.i32[1];
    v24 = vrecpe_f32((float32x2_t)v22.u32[0]);
    v25 = vmul_f32(v24, vrecps_f32((float32x2_t)v22.u32[0], v24));
    v26 = vmul_f32(v25, vrecps_f32((float32x2_t)v22.u32[0], v25)).u32[0];
    __asm { FMOV            V5.2S, #0.25 }
    _D5.i32[1] = v26;
    return (uint64_t)vmul_f32(v22, _D5);
  }
  return (uint64_t)v32;
}

uint64_t re::ecs2::BillboardManager::setHeadPosition(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;

  v3 = *a2;
  if (*(_BYTE *)(result + 400))
  {
    v2 = *a2;
  }
  else
  {
    *(_BYTE *)(result + 400) = 1;
    v2 = v3;
  }
  *(_OWORD *)(result + 416) = v2;
  return result;
}

BOOL re::ecs2::BillboardManager::isEntityUnderBillboardInfluence(uint64_t a1, unint64_t a2)
{
  if (re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken != -1)
    dispatch_once(&re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken, &__block_literal_global_25);
  return re::ecs2::gIsBillboardEnabled
      && re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::containsKey(a1 + 72, a2);
}

BOOL re::ecs2::isBillboardResultChanged(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int32x4_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int32x4_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x4_t v15;
  float32x4_t v17;
  int32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int32x4_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x4_t v26;

  if (re::ecs2::BillboardService::getBillboardTransformChangeThreshold(void)::onceToken != -1)
    dispatch_once(&re::ecs2::BillboardService::getBillboardTransformChangeThreshold(void)::onceToken, &__block_literal_global_5_0);
  v4 = vsubq_f32(a1[3], a2[3]);
  v5 = vmulq_f32(v4, v4);
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0] > *(float *)&re::ecs2::gBillboardTransformChangeThreshold)return 1;
  v6 = a1[1];
  v7 = (int32x4_t)vmulq_f32(v6, v6);
  v7.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v7, 2), vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1))).u32[0];
  v8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
  v9 = vmul_f32(v8, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v8, v8)));
  v10 = vmulq_n_f32(v6, vmul_f32(v9, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v9, v9))).f32[0]);
  v11 = a2[1];
  v12 = (int32x4_t)vmulq_f32(v11, v11);
  v12.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v12, 2), vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.i8, 1))).u32[0];
  v13 = vrsqrte_f32((float32x2_t)v12.u32[0]);
  v14 = vmul_f32(v13, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v13, v13)));
  v15 = vmulq_f32(v10, vmulq_n_f32(v11, vmul_f32(v14, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v14, v14))).f32[0]));
  if ((float)(1.0
             - vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0]) > *(float *)&re::ecs2::gBillboardTransformChangeThreshold)return 1;
  v17 = a1[2];
  v18 = (int32x4_t)vmulq_f32(v17, v17);
  v18.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v18, 2), vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1))).u32[0];
  v19 = vrsqrte_f32((float32x2_t)v18.u32[0]);
  v20 = vmul_f32(v19, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v19, v19)));
  v21 = vmulq_n_f32(v17, vmul_f32(v20, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v20, v20))).f32[0]);
  v22 = a2[2];
  v23 = (int32x4_t)vmulq_f32(v22, v22);
  v23.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v23, 2), vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.i8, 1))).u32[0];
  v24 = vrsqrte_f32((float32x2_t)v23.u32[0]);
  v25 = vmul_f32(v24, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v24, v24)));
  v26 = vmulq_f32(v21, vmulq_n_f32(v22, vmul_f32(v25, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v25, v25))).f32[0]));
  return (float)(1.0
               - vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0]) > *(float *)&re::ecs2::gBillboardTransformChangeThreshold;
}

void re::ecs2::BillboardManager::getBillboardedTransformByCamera(uint64_t this@<X2>, uint64_t a2@<X0>, float32x4_t *a3@<X1>, int a4@<W3>, _OWORD *a5@<X8>)
{
  float32x4_t v10;
  float32x4_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  float32x4_t *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _anonymous_namespace_ *v24;
  _anonymous_namespace_ *v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t *v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float v41;
  uint64_t v42;
  float32x4_t *v43;
  float32x4_t *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  float v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int v52;
  float32x4_t v53;
  int v54;
  float32x4_t v55;
  float32x4_t v56;
  float v57;
  float v58;
  float32x4_t v59;
  float v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x4_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x4_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x4_t v69;
  float32x4_t v70;
  int32x4_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x4_t v74;
  int32x4_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x4_t v78;
  int32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int32x4_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  int32x4_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  int32x4_t v95;
  float32x2_t v96;
  float32x2_t v97;
  int32x4_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  int32x4_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x4_t v107;
  int32x4_t v108;
  float32x2_t v109;
  float32x2_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  int32x4_t v114;
  float32x2_t v115;
  float32x2_t v116;
  float32x4_t v117;
  int8x16_t v118;
  float32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  int32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  int32x4_t v128;
  float32x2_t v129;
  float32x2_t v130;
  float32x4_t v131;
  float32x4_t v132;
  int32x4_t v133;
  float32x2_t v134;
  float32x2_t v135;
  float32x4_t v136;
  float32x4_t v137;
  int32x4_t v138;
  float32x2_t v139;
  float32x2_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float v148;
  float32x4_t v149;
  float v150;
  float32x4_t v151;
  float v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  uint64_t v157;
  float32x4_t v158;
  uint64_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float v163;
  float32x4_t v164;
  int8x16_t v165;
  float32x4_t v166;
  int8x16_t v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float32x2_t v177;
  float32x2_t v178;
  float v179;
  float32x4_t v180;
  int8x16_t v181;
  float32x2_t v182;
  float32x4_t v183;
  unsigned __int32 v184;
  float32x2_t v185;
  float32x2_t v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  uint64_t v196;
  unint64_t v197;
  __int128 v198;
  unint64_t *v199;
  uint64_t v200;
  _OWORD *v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  re::EventBus *v207;
  uint64_t v208;
  uint64_t v209;
  re::EventBus *v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  float32x4_t *v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  uint64_t *v240;
  uint64_t v241;
  int v242;
  unint64_t v243;
  unint64_t *v244;
  float32x4_t v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  uint64_t v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  float32x4_t v254[3];
  float32x4_t v255[4];

  v249 = this;
  if (!this)
  {
    *a5 = xmmword_2260E5F10;
    a5[1] = xmmword_2260E5F20;
    v12 = xmmword_2260E5F40;
    v13 = xmmword_2260E5D70;
    goto LABEL_9;
  }
  if (re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken != -1)
    dispatch_once(&re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken, &__block_literal_global_25);
  if (!re::ecs2::gIsBillboardEnabled)
    goto LABEL_7;
  if (!re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::containsKey(a2 + 72, this))goto LABEL_7;
  re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)this, (const re::ecs2::Entity *)1, &v231);
  v10 = vsubq_f32((float32x4_t)v234, *a3);
  v11 = vmulq_f32(v10, v10);
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]) < 1.0e-10)goto LABEL_7;
  if (!*(_QWORD *)(a2 + 480))
    goto LABEL_13;
  v14 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (this ^ ((unint64_t)this >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                            * (this ^ ((unint64_t)this >> 30))) >> 27));
  v15 = *(unsigned int *)(*(_QWORD *)(a2 + 488) + 4 * ((v14 ^ (v14 >> 31)) % *(unsigned int *)(a2 + 504)));
  if ((_DWORD)v15 == 0x7FFFFFFF)
    goto LABEL_13;
  v200 = *(_QWORD *)(a2 + 496);
  if (*(_QWORD *)(v200 + 176 * v15 + 16) == this)
  {
LABEL_83:
    v17 = (float32x4_t *)(v200 + 176 * v15 + 32);
    if (!a4 || !v17->i8[0])
    {
      v16 = 1;
      goto LABEL_14;
    }
    v201 = (_OWORD *)(v200 + 176 * v15);
    v202 = v201[8];
    *a5 = v201[7];
    a5[1] = v202;
    v12 = v201[9];
    v13 = v201[10];
LABEL_9:
    a5[2] = v12;
    a5[3] = v13;
    return;
  }
  while (1)
  {
    LODWORD(v15) = *(_DWORD *)(v200 + 176 * v15 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v15 == 0x7FFFFFFF)
      break;
    if (*(_QWORD *)(v200 + 176 * v15 + 16) == this)
      goto LABEL_83;
  }
LABEL_13:
  v16 = 0;
  v17 = 0;
LABEL_14:
  v18 = xmmword_2260E5F10;
  v19 = xmmword_2260E5F20;
  v245 = (float32x4_t)xmmword_2260E5F10;
  v246 = xmmword_2260E5F20;
  v20 = xmmword_2260E5F40;
  v21 = xmmword_2260E5D70;
  v247 = xmmword_2260E5F40;
  v248 = xmmword_2260E5D70;
  if (re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken != -1)
  {
    dispatch_once(&re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken, &__block_literal_global_25);
    v21 = xmmword_2260E5D70;
    v19 = xmmword_2260E5F20;
    v20 = xmmword_2260E5F40;
    v18 = xmmword_2260E5F10;
  }
  if (re::ecs2::gIsBillboardEnabled)
    v22 = a2 + 72;
  else
    v22 = 0;
  if (!re::ecs2::gIsBillboardEnabled)
    goto LABEL_7;
  v219 = v21;
  v220 = v19;
  v221 = v20;
  v222 = v18;
  v240 = 0;
  v241 = 0;
  v242 = 1;
  v243 = 0;
  v244 = 0;
  v23 = re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a2 + 72, this);
  if (!v23)
  {
LABEL_7:
    re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)this, (const re::ecs2::Entity *)1, a5);
    return;
  }
  v218 = v17;
  if (!*(_BYTE *)(v23 + 72))
  {
    v221 = *(_OWORD *)(v23 + 32);
    v222 = *(_OWORD *)v23;
    v219 = *(_OWORD *)(v23 + 48);
    v220 = *(_OWORD *)(v23 + 16);
  }
  v24 = (_anonymous_namespace_ *)re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a2 + 72, this);
  if (!v24)
  {
LABEL_86:
    v40 = (float32x4_t)xmmword_2260E5D70;
    v39 = (float32x4_t)xmmword_2260E5F10;
    v38 = (float32x4_t)xmmword_2260E5F20;
    v37 = (float32x4_t)xmmword_2260E5F40;
    goto LABEL_87;
  }
  v25 = v24;
  v26 = 0;
  v27 = 1;
  do
  {
    if (!*((_BYTE *)v25 + 72))
      goto LABEL_43;
    if (v240)
    {
      if ((v27 & 1) == 0)
      {
        v28 = v26 + 1;
        if (v26 < v243 || v243 >= v28)
          goto LABEL_40;
        v30 = 2 * v243;
        goto LABEL_36;
      }
      if (v26 - 8 < 0xFFFFFFFFFFFFFFF7)
      {
        v28 = v26 + 1;
        v30 = 16;
LABEL_36:
        if (v30 <= v28)
          v31 = v28;
        else
          v31 = v30;
        re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(&v240, v31);
        v27 = v242;
      }
    }
    else
    {
      re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(&v240, v26 + 1);
      v27 = v242 + 2;
      v242 += 2;
    }
LABEL_40:
    v32 = v244;
    v33 = v241;
    if ((v27 & 1) != 0)
      v32 = &v243;
    v32[v241] = (unint64_t)v25;
    v26 = v33 + 1;
    v241 = v33 + 1;
    v27 = v242 + 2;
    v242 += 2;
LABEL_43:
    v24 = (_anonymous_namespace_ *)re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v22, *((_QWORD *)v25 + 8));
    v25 = v24;
  }
  while (v24);
  if (!v26)
    goto LABEL_86;
  v34 = v244;
  if ((v27 & 1) != 0)
    v35 = &v243;
  else
    v35 = v244;
  v36 = &v35[v26];
  v37 = (float32x4_t)xmmword_2260E5F40;
  v38 = (float32x4_t)xmmword_2260E5F20;
  v39 = (float32x4_t)xmmword_2260E5F10;
  v40 = (float32x4_t)xmmword_2260E5D70;
  v41 = 1.0;
  do
  {
    v42 = 0;
    v44 = (float32x4_t *)*--v36;
    v43 = v44;
    v45 = (__int128)v44[1];
    v46 = (__int128)v44[2];
    v47 = (__int128)v44[3];
    v250 = (__int128)*v44;
    v251 = v45;
    v252 = v46;
    v253 = v47;
    do
    {
      *(float32x4_t *)((char *)&v231 + v42) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v39, COERCE_FLOAT(*(__int128 *)((char *)&v250 + v42))), v38, *(float32x2_t *)((char *)&v250 + v42), 1), v37, *(float32x4_t *)((char *)&v250 + v42), 2), v40, *(float32x4_t *)((char *)&v250 + v42), 3);
      v42 += 16;
    }
    while (v42 != 64);
    v39 = v231;
    v38 = (float32x4_t)v232;
    v37 = (float32x4_t)v233;
    v40 = (float32x4_t)v234;
    v48 = v43[8].f32[0];
    if (v48 >= 0.0001)
    {
      v49 = v43[6];
      v50 = v43[7];
      v51 = v43[5];
      v52 = v43[8].u8[4];
      v53 = *a3;
      v54 = v43[8].u8[5];
      v55 = vmulq_f32(v231, v231);
      v56 = vmulq_f32((float32x4_t)v232, (float32x4_t)v232);
      LODWORD(v57) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2), vaddq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1))).u32[0];
      LODWORD(v58) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2), vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1))).u32[0];
      v59 = vmulq_f32((float32x4_t)v233, (float32x4_t)v233);
      LODWORD(v60) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 2), vaddq_f32(v59, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 1))).u32[0];
      v61 = vrsqrte_f32((float32x2_t)LODWORD(v57));
      v62 = vmul_f32(v61, vrsqrts_f32((float32x2_t)LODWORD(v57), vmul_f32(v61, v61)));
      v63 = vmulq_n_f32(v231, vmul_f32(v62, vrsqrts_f32((float32x2_t)LODWORD(v57), vmul_f32(v62, v62))).f32[0]);
      v64 = vrsqrte_f32((float32x2_t)LODWORD(v58));
      v65 = vmul_f32(v64, vrsqrts_f32((float32x2_t)LODWORD(v58), vmul_f32(v64, v64)));
      v66 = vmulq_n_f32((float32x4_t)v232, vmul_f32(v65, vrsqrts_f32((float32x2_t)LODWORD(v58), vmul_f32(v65, v65))).f32[0]);
      v67 = vrsqrte_f32((float32x2_t)LODWORD(v60));
      v68 = vmul_f32(v67, vrsqrts_f32((float32x2_t)LODWORD(v60), vmul_f32(v67, v67)));
      v69 = vmulq_n_f32((float32x4_t)v233, vmul_f32(v68, vrsqrts_f32((float32x2_t)LODWORD(v60), vmul_f32(v68, v68))).f32[0]);
      v255[0] = v63;
      v255[1] = v66;
      v255[2] = v69;
      v70 = vsubq_f32(v53, (float32x4_t)v234);
      v71 = (int32x4_t)vmulq_f32(v70, v70);
      v71.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v71, 2), vadd_f32(*(float32x2_t *)v71.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v71.i8, 1))).u32[0];
      v72 = vrsqrte_f32((float32x2_t)v71.u32[0]);
      v73 = vmul_f32(v72, vrsqrts_f32((float32x2_t)v71.u32[0], vmul_f32(v72, v72)));
      v74 = vmulq_n_f32(v70, vmul_f32(v73, vrsqrts_f32((float32x2_t)v71.u32[0], vmul_f32(v73, v73))).f32[0]);
      if (v54)
      {
        v75 = (int32x4_t)vmulq_f32(v50, v50);
        v75.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v75, 2), vadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v75.i8, 1))).u32[0];
        v76 = vrsqrte_f32((float32x2_t)v75.u32[0]);
        v77 = vmul_f32(v76, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v76, v76)));
        v78 = vmulq_n_f32(v50, vmul_f32(v77, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v77, v77))).f32[0]);
        if (!v52)
        {
          v79 = vzip2q_s32((int32x4_t)v63, (int32x4_t)v69);
          v80 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v63, (int32x4_t)v69), (int32x4_t)v66);
          v81 = (float32x4_t)vtrn2q_s32((int32x4_t)v63, (int32x4_t)v66);
          v81.i32[2] = v69.i32[1];
          v51 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v80, v78.f32[0]), v81, *(float32x2_t *)v78.f32, 1), (float32x4_t)vzip1q_s32(v79, vdupq_laneq_s32((int32x4_t)v66, 2)), v78, 2);
        }
        v82 = (int32x4_t)vmulq_f32(v51, v51);
        v82.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v82, 2), vadd_f32(*(float32x2_t *)v82.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v82.i8, 1))).u32[0];
        v83 = vrsqrte_f32((float32x2_t)v82.u32[0]);
        v84 = vmul_f32(v83, vrsqrts_f32((float32x2_t)v82.u32[0], vmul_f32(v83, v83)));
        v85 = vmulq_n_f32(v51, vmul_f32(v84, vrsqrts_f32((float32x2_t)v82.u32[0], vmul_f32(v84, v84))).f32[0]);
        v86 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v78, (int32x4_t)v78), (int8x16_t)v78, 0xCuLL);
        v87 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v74, (int32x4_t)v74), (int8x16_t)v74, 0xCuLL), vnegq_f32(v78)), v74, v86);
        v88 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v87, (int32x4_t)v87), (int8x16_t)v87, 0xCuLL);
        v89 = (int32x4_t)vmulq_f32(v87, v87);
        v89.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v89.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v89, 2), *(float32x2_t *)v89.i8)).u32[0];
        v90 = vrsqrte_f32((float32x2_t)v89.u32[0]);
        v91 = vmul_f32(v90, vrsqrts_f32((float32x2_t)v89.u32[0], vmul_f32(v90, v90)));
        v92 = vmulq_n_f32(v88, vmul_f32(v91, vrsqrts_f32((float32x2_t)v89.u32[0], vmul_f32(v91, v91))).f32[0]);
        v93 = vmlaq_f32(vmulq_f32(v86, vnegq_f32(v92)), v78, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v92, (int32x4_t)v92), (int8x16_t)v92, 0xCuLL));
        v94 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v93, (int32x4_t)v93), (int8x16_t)v93, 0xCuLL);
        v95 = (int32x4_t)vmulq_f32(v93, v93);
        v95.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v95.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v95, 2), *(float32x2_t *)v95.i8)).u32[0];
        v96 = vrsqrte_f32((float32x2_t)v95.u32[0]);
        v97 = vmul_f32(v96, vrsqrts_f32((float32x2_t)v95.u32[0], vmul_f32(v96, v96)));
        v74 = vmulq_n_f32(v94, vmul_f32(v97, vrsqrts_f32((float32x2_t)v95.u32[0], vmul_f32(v97, v97))).f32[0]);
        v98 = (int32x4_t)vmulq_f32(v49, v49);
        v98.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v98, 2), vadd_f32(*(float32x2_t *)v98.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v98.i8, 1))).u32[0];
        v99 = vrsqrte_f32((float32x2_t)v98.u32[0]);
        v100 = vmul_f32(v99, vrsqrts_f32((float32x2_t)v98.u32[0], vmul_f32(v99, v99)));
        v101 = vmulq_n_f32(v49, vmul_f32(v100, vrsqrts_f32((float32x2_t)v98.u32[0], vmul_f32(v100, v100))).f32[0]);
        v102 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v101, (int32x4_t)v101), (int8x16_t)v101, 0xCuLL), vnegq_f32(v85)), v101, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v85, (int32x4_t)v85), (int8x16_t)v85, 0xCuLL));
        v103 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v102, (int32x4_t)v102), (int8x16_t)v102, 0xCuLL);
        v104 = (int32x4_t)vmulq_f32(v102, v102);
        v104.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v104.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v104, 2), *(float32x2_t *)v104.i8)).u32[0];
        v105 = vrsqrte_f32((float32x2_t)v104.u32[0]);
        v106 = vmul_f32(v105, vrsqrts_f32((float32x2_t)v104.u32[0], vmul_f32(v105, v105)));
        v107 = vmulq_n_f32(v103, vmul_f32(v106, vrsqrts_f32((float32x2_t)v104.u32[0], vmul_f32(v106, v106))).f32[0]);
      }
      else
      {
        v108 = (int32x4_t)vmulq_f32(v49, v49);
        v108.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v108, 2), vadd_f32(*(float32x2_t *)v108.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v108.i8, 1))).u32[0];
        v109 = vrsqrte_f32((float32x2_t)v108.u32[0]);
        v110 = vmul_f32(v109, vrsqrts_f32((float32x2_t)v108.u32[0], vmul_f32(v109, v109)));
        v101 = vmulq_n_f32(v49, vmul_f32(v110, vrsqrts_f32((float32x2_t)v108.u32[0], vmul_f32(v110, v110))).f32[0]);
        if (v52)
        {
          v111 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v101, (int32x4_t)v101), (int8x16_t)v101, 0xCuLL);
          v112 = vmlaq_f32(vmulq_f32(v111, vnegq_f32(v51)), v101, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), (int8x16_t)v51, 0xCuLL));
          v113 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v112, (int32x4_t)v112), (int8x16_t)v112, 0xCuLL);
          v114 = (int32x4_t)vmulq_f32(v112, v112);
          v114.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v114.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v114, 2), *(float32x2_t *)v114.i8)).u32[0];
          v115 = vrsqrte_f32((float32x2_t)v114.u32[0]);
          v116 = vmul_f32(v115, vrsqrts_f32((float32x2_t)v114.u32[0], vmul_f32(v115, v115)));
          v107 = vmulq_n_f32(v113, vmul_f32(v116, vrsqrts_f32((float32x2_t)v114.u32[0], vmul_f32(v116, v116))).f32[0]);
        }
        else
        {
          v117 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v63, v49.f32[0]), v66, *(float32x2_t *)v49.f32, 1), v69, v49, 2);
          v118 = (int8x16_t)vmulq_f32(v117, (float32x4_t)xmmword_2261027D0);
          v119 = vmlaq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v118, (int32x4_t)v118), v118, 0xCuLL), (float32x4_t)xmmword_2260E5F40, v117);
          v120 = vzip1q_s32((int32x4_t)v63, (int32x4_t)v69);
          v121 = vzip2q_s32((int32x4_t)v63, (int32x4_t)v69);
          v122 = (float32x4_t)vtrn2q_s32((int32x4_t)v63, (int32x4_t)v66);
          v122.i32[2] = v69.i32[1];
          v123 = vmlaq_lane_f32(vmlaq_n_f32(vmulq_laneq_f32((float32x4_t)vzip1q_s32(v120, (int32x4_t)v66), v119, 2), v122, v119.f32[0]), (float32x4_t)vzip1q_s32(v121, vdupq_laneq_s32((int32x4_t)v66, 2)), *(float32x2_t *)v119.f32, 1);
          v124 = (int32x4_t)vmulq_f32(v123, v123);
          v124.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v124, 2), vadd_f32(*(float32x2_t *)v124.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v124.i8, 1))).u32[0];
          *(float32x2_t *)v122.f32 = vrsqrte_f32((float32x2_t)v124.u32[0]);
          *(float32x2_t *)v122.f32 = vmul_f32(*(float32x2_t *)v122.f32, vrsqrts_f32((float32x2_t)v124.u32[0], vmul_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v122.f32)));
          v107 = vmulq_n_f32(v123, vmul_f32(*(float32x2_t *)v122.f32, vrsqrts_f32((float32x2_t)v124.u32[0], vmul_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v122.f32))).f32[0]);
          v111 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v101, (int32x4_t)v101), (int8x16_t)v101, 0xCuLL);
        }
        v125 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v74, (int32x4_t)v74), (int8x16_t)v74, 0xCuLL);
        v126 = vmlaq_f32(vmulq_f32(v125, (float32x4_t)xmmword_2261027B0), (float32x4_t)xmmword_2260E5F40, v74);
        v127 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v126, (int32x4_t)v126), (int8x16_t)v126, 0xCuLL);
        v128 = (int32x4_t)vmulq_f32(v126, v126);
        v128.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v128.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v128, 2), *(float32x2_t *)v128.i8)).u32[0];
        v129 = vrsqrte_f32((float32x2_t)v128.u32[0]);
        v130 = vmul_f32(v129, vrsqrts_f32((float32x2_t)v128.u32[0], vmul_f32(v129, v129)));
        v92 = vmulq_n_f32(v127, vmul_f32(v130, vrsqrts_f32((float32x2_t)v128.u32[0], vmul_f32(v130, v130))).f32[0]);
        v131 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v92, (int32x4_t)v92), (int8x16_t)v92, 0xCuLL), vnegq_f32(v74)), v92, v125);
        v132 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v131, (int32x4_t)v131), (int8x16_t)v131, 0xCuLL);
        v133 = (int32x4_t)vmulq_f32(v131, v131);
        v133.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v133.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v133, 2), *(float32x2_t *)v133.i8)).u32[0];
        v134 = vrsqrte_f32((float32x2_t)v133.u32[0]);
        v135 = vmul_f32(v134, vrsqrts_f32((float32x2_t)v133.u32[0], vmul_f32(v134, v134)));
        v78 = vmulq_n_f32(v132, vmul_f32(v135, vrsqrts_f32((float32x2_t)v133.u32[0], vmul_f32(v135, v135))).f32[0]);
        v136 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v107, (int32x4_t)v107), (int8x16_t)v107, 0xCuLL), vnegq_f32(v101)), v107, v111);
        v137 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v136, (int32x4_t)v136), (int8x16_t)v136, 0xCuLL);
        v138 = (int32x4_t)vmulq_f32(v136, v136);
        v138.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v138.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v138, 2), *(float32x2_t *)v138.i8)).u32[0];
        v139 = vrsqrte_f32((float32x2_t)v138.u32[0]);
        v140 = vmul_f32(v139, vrsqrts_f32((float32x2_t)v138.u32[0], vmul_f32(v139, v139)));
        v85 = vmulq_n_f32(v137, vmul_f32(v140, vrsqrts_f32((float32x2_t)v138.u32[0], vmul_f32(v140, v140))).f32[0]);
      }
      v141 = vmulq_f32(v107, (float32x4_t)xmmword_2260E5F10);
      v142 = vmulq_f32(v85, (float32x4_t)xmmword_2260E5F10);
      v143 = vmulq_f32(v101, (float32x4_t)xmmword_2260E5F10);
      v144 = vmulq_f32(v107, (float32x4_t)xmmword_2260E5F20);
      v145 = vmulq_f32(v85, (float32x4_t)xmmword_2260E5F20);
      v146 = vmulq_f32(v101, (float32x4_t)xmmword_2260E5F20);
      v147 = vmulq_f32(v107, (float32x4_t)xmmword_2260E5F40);
      LODWORD(v148) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v147, 2), vaddq_f32(v147, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v147.f32, 1))).u32[0];
      v149 = vmulq_f32(v85, (float32x4_t)xmmword_2260E5F40);
      LODWORD(v150) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v149, 2), vaddq_f32(v149, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v149.f32, 1))).u32[0];
      v151 = vmulq_f32(v101, (float32x4_t)xmmword_2260E5F40);
      LODWORD(v152) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v151, 2), vaddq_f32(v151, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v151.f32, 1))).u32[0];
      v153 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v92, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v144, 2), vaddq_f32(v144, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v144.f32, 1))).f32[0]), v78, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v145, 2), vaddq_f32(v145, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v145.f32, 1))).f32[0]), v74, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v146, 2), vaddq_f32(v146, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v146.f32, 1))).f32[0]);
      v154 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v92, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v141, 2), vaddq_f32(v141, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v141.f32, 1))).f32[0]), v78, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v142, 2), vaddq_f32(v142, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v142.f32, 1))).f32[0]), v74, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v143, 2), vaddq_f32(v143, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v143.f32, 1))).f32[0]);
      v155 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v92, v148), v78, v150), v74, v152);
      v254[0] = v154;
      v254[1] = v153;
      v254[2] = v155;
      if (v48 < 0.9999)
      {
        v225 = v58;
        v226 = v57;
        v227 = v60;
        v228 = (float32x4_t)v234;
        v156.i64[0] = re::makeQuaternionFromMatrix<float>(v255);
        v156.i64[1] = v157;
        v230 = v156;
        v158.i64[0] = re::makeQuaternionFromMatrix<float>(v254);
        v158.i64[1] = v159;
        v160 = vmulq_f32(v230, v158);
        v161 = (float32x4_t)vextq_s8((int8x16_t)v160, (int8x16_t)v160, 8uLL);
        *(float32x2_t *)v160.f32 = vadd_f32(*(float32x2_t *)v160.f32, *(float32x2_t *)v161.f32);
        v160.f32[0] = vaddv_f32(*(float32x2_t *)v160.f32);
        v161.i32[0] = 0;
        v162 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v160, v161)), 0), (int8x16_t)vnegq_f32(v158), (int8x16_t)v158);
        v163 = 1.0;
        v164 = vsubq_f32(v230, v162);
        v165 = (int8x16_t)vmulq_f32(v164, v164);
        v229 = v162;
        v166 = vaddq_f32(v162, v230);
        v167 = (int8x16_t)vmulq_f32(v166, v166);
        v168 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v165.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v165, v165, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v167.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v167, v167, 8uLL)))));
        v169 = v168 + v168;
        v170 = 1.0;
        if ((float)(v168 + v168) != 0.0)
          v170 = sinf(v168 + v168) / v169;
        v171 = (float)(1.0 - v48) * v169;
        if (v171 != 0.0)
        {
          v223 = v170;
          v172 = sinf((float)(1.0 - v48) * v169);
          v170 = v223;
          v163 = v172 / v171;
        }
        v173 = v48 * v169;
        v174 = 1.0;
        if (v173 != 0.0)
        {
          v224 = v170;
          v175 = sinf(v173);
          v170 = v224;
          v174 = v175 / v173;
        }
        v176 = v170;
        v177 = vrecpe_f32((float32x2_t)LODWORD(v170));
        v178 = vmul_f32(v177, vrecps_f32((float32x2_t)LODWORD(v176), v177));
        v179 = vmul_f32(v178, vrecps_f32((float32x2_t)LODWORD(v176), v178)).f32[0];
        v178.f32[0] = (float)(1.0 - v48) * (float)(v179 * v163);
        v180 = vmlaq_f32(vmulq_n_f32(v229, v48 * (float)(v179 * v174)), v230, (float32x4_t)vdupq_lane_s32((int32x2_t)v178, 0));
        v181 = (int8x16_t)vmulq_f32(v180, v180);
        v154 = (float32x4_t)vextq_s8(v181, v181, 8uLL);
        v182 = vadd_f32(*(float32x2_t *)v181.i8, *(float32x2_t *)v154.f32);
        if (vaddv_f32(v182) == 0.0)
        {
          v183 = (float32x4_t)xmmword_2260E5D70;
        }
        else
        {
          v184 = vadd_f32(v182, (float32x2_t)vdup_lane_s32((int32x2_t)v182, 1)).u32[0];
          v185 = vrsqrte_f32((float32x2_t)v184);
          v186 = vmul_f32(v185, vrsqrts_f32((float32x2_t)v184, vmul_f32(v185, v185)));
          v183 = vmulq_n_f32(v180, vmul_f32(v186, vrsqrts_f32((float32x2_t)v184, vmul_f32(v186, v186))).f32[0]);
        }
        v60 = v227;
        v40 = v228;
        v41 = 1.0;
        v58 = v225;
        v57 = v226;
        v187 = (float)(v183.f32[0] + v183.f32[0]) * v183.f32[0];
        v188 = vmuls_lane_f32(v183.f32[1] + v183.f32[1], *(float32x2_t *)v183.f32, 1);
        v189 = vmuls_lane_f32(v183.f32[2] + v183.f32[2], v183, 2);
        v190 = vmuls_lane_f32(v183.f32[0] + v183.f32[0], *(float32x2_t *)v183.f32, 1);
        v191 = vmuls_lane_f32(v183.f32[0] + v183.f32[0], v183, 2);
        v192 = vmuls_lane_f32(v183.f32[1] + v183.f32[1], v183, 2);
        v193 = vmuls_lane_f32(v183.f32[0] + v183.f32[0], v183, 3);
        v194 = vmuls_lane_f32(v183.f32[1] + v183.f32[1], v183, 3);
        v195 = vmuls_lane_f32(v183.f32[2] + v183.f32[2], v183, 3);
        v154.f32[0] = 1.0 - (float)(v188 + v189);
        v154.f32[1] = v190 + v195;
        v154.f32[2] = v191 - v194;
        v153.f32[0] = v190 - v195;
        v153.f32[1] = 1.0 - (float)(v187 + v189);
        v153.f32[2] = v192 + v193;
        v155.f32[0] = v191 + v194;
        v155.f32[1] = v192 - v193;
        v155.f32[2] = 1.0 - (float)(v187 + v188);
      }
      v196 = 0;
      LODWORD(v197) = 0;
      HIDWORD(v197) = sqrtf(v58);
      *(_QWORD *)&v198 = 0;
      *((_QWORD *)&v198 + 1) = COERCE_UNSIGNED_INT(sqrtf(v60));
      v250 = COERCE_UNSIGNED_INT(sqrtf(v57));
      v251 = v197;
      v252 = v198;
      do
      {
        *(float32x4_t *)((char *)&v231 + v196) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v154, COERCE_FLOAT(*(__int128 *)((char *)&v250 + v196))), v153, *(float32x2_t *)((char *)&v250 + v196), 1), v155, *(float32x4_t *)((char *)&v250 + v196), 2);
        v196 += 16;
      }
      while (v196 != 48);
      v39 = v231;
      v38 = (float32x4_t)v232;
      v37 = (float32x4_t)v233;
      v39.i32[3] = 0;
      v38.i32[3] = 0;
      v37.i32[3] = 0;
      v40.f32[3] = v41;
      v27 = v242;
      v34 = v244;
    }
    if ((v27 & 1) != 0)
      v199 = &v243;
    else
      v199 = v34;
  }
  while (v36 != v199);
LABEL_87:
  v203 = 0;
  v250 = v222;
  v251 = v220;
  v252 = v221;
  v253 = v219;
  do
  {
    *(float32x4_t *)((char *)&v231 + v203) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v39, COERCE_FLOAT(*(__int128 *)((char *)&v250 + v203))), v38, *(float32x2_t *)((char *)&v250 + v203), 1), v37, *(float32x4_t *)((char *)&v250 + v203), 2), v40, *(float32x4_t *)((char *)&v250 + v203), 3);
    v203 += 16;
  }
  while (v203 != 64);
  v245 = v231;
  v246 = v232;
  v247 = v233;
  v248 = v234;
  v204 = (uint64_t)v218;
  if ((a4 & 1) != 0)
  {
    if ((v16 & 1) != 0)
    {
      if (re::ecs2::isBillboardResultChanged(&v245, v218 + 1))
      {
        v205 = this;
        do
        {
          v206 = v205;
          v205 = *(_QWORD *)(v205 + 24);
        }
        while (v205);
        v207 = *(re::EventBus **)(*(_QWORD *)(v206 + 16) + 288);
        v231.i64[0] = this;
        re::EventBus::publish<re::ecs2::Entity,REBillboardTransformChangedEvent>(v207, this, (uint64_t)&v231);
        goto LABEL_99;
      }
    }
    else
    {
      v208 = this;
      do
      {
        v209 = v208;
        v208 = *(_QWORD *)(v208 + 24);
      }
      while (v208);
      v210 = *(re::EventBus **)(*(_QWORD *)(v209 + 16) + 288);
      v231.i64[0] = this;
      re::EventBus::publish<re::ecs2::Entity,REBillboardTransformChangedEvent>(v210, this, (uint64_t)&v231);
      v238 = 0u;
      v239 = 0u;
      v236 = 0u;
      v237 = 0u;
      v234 = 0u;
      v235 = 0u;
      v232 = 0u;
      v233 = 0u;
      v231 = 0u;
      v204 = re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardTransform,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a2 + 480, &v249, &v231);
LABEL_99:
      v212 = v247;
      v211 = v248;
      v213 = v246;
      *(float32x4_t *)(v204 + 16) = v245;
      *(_OWORD *)(v204 + 32) = v213;
      *(_OWORD *)(v204 + 48) = v212;
      *(_OWORD *)(v204 + 64) = v211;
    }
    v214 = v246;
    *(float32x4_t *)(v204 + 80) = v245;
    *(_OWORD *)(v204 + 96) = v214;
    v215 = v248;
    *(_OWORD *)(v204 + 112) = v247;
    *(_OWORD *)(v204 + 128) = v215;
    *(_BYTE *)v204 = 1;
  }
  v216 = v246;
  *a5 = v245;
  a5[1] = v216;
  v217 = v248;
  a5[2] = v247;
  a5[3] = v217;
  if (v240)
  {
    if ((v242 & 1) == 0)
      (*(void (**)(void))(*v240 + 40))();
  }
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 176 * v3 + 16) != a2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 176 * v3 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v3 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v5 + 176 * v3 + 16) == a2)
        return v5 + 176 * v3 + 32;
    }
    return 0;
  }
  return v5 + 176 * v3 + 32;
}

uint64_t re::EventBus::publish<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3)
{
  __guard Type;

  Type = re::EventBus::getTypeId<REBillboardTransformChangedEvent>();
  return re::EventBus::publish(a1, a2, Type, a3, 8uLL, 0);
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardTransform,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardTransform,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 176 * v13;
    return v12 + 32;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 176 * v10 + 16) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 176 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 176 * v10;
  return v12 + 32;
}

void re::ecs2::BillboardManager::flushDirtyComponentsQueueAndUpdatePerEntityStateData(re::ecs2::BillboardManager *this)
{
  re::ecs2::ECSManager *v2;
  char *v3;
  uint64_t v4;

  v2 = (re::ecs2::ECSManager *)*((_QWORD *)this + 1);
  if (v2)
    re::ecs2::ECSManager::flushComponentToMarkDirtyQueue(v2);
  if (*((_DWORD *)this + 37))
  {
    v4 = *((_QWORD *)this + 2);
    v3 = (char *)this + 16;
    (*(void (**)(char *, char *))(v4 + 32))(v3, v3 + 104);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear((uint64_t)(v3 + 104));
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear((uint64_t)(v3 + 200));
  }
}

void re::ecs2::BillboardManagerStateTracking::~BillboardManagerStateTracking(re::ecs2::BillboardManagerStateTracking *this)
{
  re::ecs2::BillboardManagerStateTracking::~BillboardManagerStateTracking(this);
  JUMPOUT(0x2276933B8);
}

{
  double v2;
  uint64_t v3;

  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 40);
  v2 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 34);
  v3 = *((_QWORD *)this + 31);
  if (v3)
  {
    if (*((_QWORD *)this + 32))
    {
      (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 33), v2);
      *((_QWORD *)this + 32) = 0;
      *((_QWORD *)this + 33) = 0;
    }
    *((_QWORD *)this + 31) = 0;
  }
  *(_QWORD *)this = off_24ED5B950;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 25);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 19);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 13);
  re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 7);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1);
}

uint64_t re::ecs2::BillboardManagerStateTracking::trackedComponents(re::ecs2::BillboardManagerStateTracking *this)
{
  return *((_QWORD *)this + 33);
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::trackedActivationComponents()
{
  return 0;
}

void re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::clearEntityHierarchyStateData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE v17[120];

  if (*(_DWORD *)(a1 + 84))
  {
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v17);
    v11[0] = 0;
    v11[1] = 0;
    v12 = 1;
    v14 = 0;
    v15 = 0;
    v13 = 0;
    v16 = 0;
    re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v11, (uint64_t)v17, 1uLL);
    *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v11) = a2;
    v4 = v15;
    if (v15)
    {
      v5 = a1 + 56;
      do
      {
        v6 = *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v11, v4 - 1);
        re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v11, --v15);
        ++v16;
        re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(v5, v6);
        v7 = *(_QWORD *)(v6 + 328);
        if (v7)
        {
          v8 = *(uint64_t **)(v6 + 344);
          v9 = 8 * v7;
          do
          {
            v10 = *v8++;
            *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v11) = v10;
            v9 -= 8;
          }
          while (v9);
        }
        v4 = v15;
      }
      while (v15);
    }
    re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v11);
    if (v11[0])
    {
      if ((v12 & 1) == 0)
        (*(void (**)(void))(*(_QWORD *)v11[0] + 40))();
    }
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v17);
  }
}

void re::ecs2::BillboardManager::~BillboardManager(re::ecs2::BillboardManager *this)
{
  re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60);
  re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 54);
  re::ecs2::BillboardManagerStateTracking::~BillboardManagerStateTracking((re::ecs2::BillboardManager *)((char *)this + 16));
}

{
  re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)this + 60);
  re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 54);
  re::ecs2::BillboardManagerStateTracking::~BillboardManagerStateTracking((re::ecs2::BillboardManager *)((char *)this + 16));
  JUMPOUT(0x2276933B8);
}

void re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5B798;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5B798;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5B7F0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5B7F0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5B848;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5B848;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5B8A0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5B8A0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5B8F8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5B8F8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BillboardManagerStateTracking,REEventHandlerResult (re::ecs2::BillboardManagerStateTracking::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

uint64_t re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::HashSetBase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u)
      v5 = 3;
    else
      v5 = *(_DWORD *)(a2 + 28);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init(a1, v4, v5);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::copy(a1, a2);
  }
  return a1;
}

void re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;

  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsCopy(a1, *(_QWORD *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v8, v8 + 16, (_QWORD *)(v8 + 16));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 24;
    }
  }
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::trackedComponents()
{
  return 0;
}

double re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((_DWORD *)a1 + 8);
    if (v3)
    {
      v4 = 0;
      v5 = 176 * v3;
      do
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 176;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 176 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_12, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _BYTE v14[24];
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = re::globalAllocators(a1)[2];
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 32, 0);
  *v8 = &off_24ED5B9E8;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::invalidateEntityHierarchyEventHandler<REComponentDidActivateEvent>;
  v8[3] = 0;
  v16 = v8;
  v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(a2, (uint64_t)v14, a4, 0);
  v11 = v10;
  v12 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *v12 = v9;
  v12[1] = v11;
  result = (uint64_t)v16;
  if (v16)
  {
    result = (**(uint64_t (***)(_BYTE *))v16)(v16);
    if (v16 != v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _BYTE v14[24];
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = re::globalAllocators(a1)[2];
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 32, 0);
  *v8 = &off_24ED5BA40;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::invalidateEntityHierarchyEventHandler<REComponentWillDeactivateEvent>;
  v8[3] = 0;
  v16 = v8;
  v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(a2, (uint64_t)v14, a4, 0);
  v11 = v10;
  v12 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *v12 = v9;
  v12[1] = v11;
  result = (uint64_t)v16;
  if (v16)
  {
    result = (**(uint64_t (***)(_BYTE *))v16)(v16);
    if (v16 != v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5B990;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5B990;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::invalidateEntityHierarchyEventHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5B9E8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5B9E8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::invalidateEntityHierarchyEventHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5BA40;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5BA40;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5BA98;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5BA98;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::invalidateEntityHierarchyEventHandler<RESceneEntityDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  if (!*(_BYTE *)(a2 + 371))
  {
    v3 = a1 + 200;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v5);
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v5);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5BAF0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5BAF0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::invalidateEntityHierarchyEventHandler<RESceneEntityWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  v3 = a1 + 200;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 104, &v5);
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(v3, &v5);
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5BB48;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5BB48;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::BillboardData>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::HashTable<re::ecs2::Entity const*,BOOL,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(uint64_t result, uint64_t *a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(_QWORD *)result)
  {
    v9 = v8 % *(unsigned int *)(result + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(result + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = *(_QWORD *)(result + 16);
      if (*(_QWORD *)(v11 + 32 * v10 + 16) == v6)
        return result;
      while (1)
      {
        v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v11 + 32 * v10 + 16) == v6)
          return result;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  result = re::HashTable<re::ecs2::Entity const*,BOOL,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(result, v9, v8, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

uint64_t re::HashTable<re::ecs2::Entity const*,BOOL,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _BYTE *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Entity const*,BOOL,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  v13 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::ecs2::Entity const*,BOOL,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Entity const*,BOOL,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v13[16] = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v9 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = v7 + 16;
        do
        {
          if ((*(_DWORD *)(v11 - 8) & 0x80000000) != 0)
            re::HashTable<re::ecs2::Entity const*,BOOL,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(a1, *(_QWORD *)(v11 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v11 - 16), (_QWORD *)v11, (_BYTE *)(v11 + 8));
          v11 += 32;
          --v10;
        }
        while (v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

void re::HashTable<re::ecs2::Entity const*,BOOL,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_12, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<re::ecs2::Entity const*,re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  signed int v21;
  _BYTE v22[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(_QWORD *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Entity const*,BOOL,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init((uint64_t)v22, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v22;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)v22 = v5;
      *(_QWORD *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = (_QWORD *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v13 - 1) & 0x80000000) != 0)
          {
            v14 = *(v13 - 2);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<re::ecs2::Entity const*,re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 32 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17) = v14;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 16) = *v13;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 24) = v13[1];
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 4;
          --v10;
        }
        while (v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2)
      v21 = a2;
    else
      v21 = 3;
  }
}

void re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  signed int v31;
  _BYTE v32[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v32, 0, 36);
      *(_QWORD *)&v32[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init((uint64_t)v32, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v32;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v32[8];
      *(_OWORD *)v32 = v5;
      *(_QWORD *)&v32[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v32[24];
      *(_OWORD *)&v32[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v32[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = 0;
        v13 = v7;
        v14 = DWORD1(v9);
        do
        {
          v15 = (uint64_t *)(*(_QWORD *)&v32[16] + v11);
          if ((*(_DWORD *)(*(_QWORD *)&v32[16] + v11 + 8) & 0x80000000) != 0)
          {
            v16 = *v15;
            v17 = *(unsigned int *)(a1 + 24);
            v18 = *v15 % v17;
            v19 = *(_DWORD *)(a1 + 36);
            if (v19 == 0x7FFFFFFF)
            {
              v19 = *(_DWORD *)(a1 + 32);
              v20 = v19;
              if (v19 == (_DWORD)v17)
              {
                re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(a1, (2 * v14));
                v18 = v16 % *(unsigned int *)(a1 + 24);
                v20 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v20 + 1;
              v21 = *(_QWORD *)(a1 + 16);
              v22 = *(_DWORD *)(v21 + 176 * v19 + 8);
            }
            else
            {
              v21 = *(_QWORD *)(a1 + 16);
              v22 = *(_DWORD *)(v21 + 176 * v19 + 8);
              *(_DWORD *)(a1 + 36) = v22 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v21 + 176 * v19 + 8) = v22 | 0x80000000;
            v23 = *(_QWORD *)(a1 + 16) + 176 * v19;
            *(_DWORD *)(v23 + 8) = *(_DWORD *)(v23 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v18);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 176 * v19) = v16;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 176 * v19 + 16) = v15[2];
            v24 = (_OWORD *)(*(_QWORD *)(a1 + 16) + 176 * v19);
            v24[2] = *((_OWORD *)v15 + 2);
            v25 = *((_OWORD *)v15 + 3);
            v26 = *((_OWORD *)v15 + 4);
            v27 = *((_OWORD *)v15 + 6);
            v24[5] = *((_OWORD *)v15 + 5);
            v24[6] = v27;
            v24[3] = v25;
            v24[4] = v26;
            v28 = *((_OWORD *)v15 + 7);
            v29 = *((_OWORD *)v15 + 8);
            v30 = *((_OWORD *)v15 + 10);
            v24[9] = *((_OWORD *)v15 + 9);
            v24[10] = v30;
            v24[7] = v28;
            v24[8] = v29;
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v18) = v19;
            v14 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v14;
            v10 = *(_DWORD *)&v32[32];
          }
          ++v12;
          v11 += 176;
        }
        while (v12 < v10);
      }
      re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)v32);
    }
  }
  else
  {
    if (a2)
      v31 = a2;
    else
      v31 = 3;
  }
}

void re::HashTable<re::ecs2::Scene const*,re::ecs2::CameraPosition,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _BYTE v28[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(_QWORD *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<re::ecs2::Scene const*,re::ecs2::CameraPosition,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::init((uint64_t)v28, v13, v12);
          v15 = *(_OWORD *)v28;
          *(_OWORD *)v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v28[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v28[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<re::ecs2::Scene const*,re::ecs2::CameraPosition,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 16);
              v21 += 80;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 80 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 80 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 80 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9 + 16) = *a4;
  v25 = *(_QWORD *)(a1 + 16);
  v26 = v25 + 80 * v9;
  *(_BYTE *)(v26 + 32) = *(_BYTE *)a5;
  v27 = *(unsigned __int8 *)(a5 + 16);
  *(_BYTE *)(v26 + 48) = v27;
  if (v27)
    *(_OWORD *)(v25 + 80 * v9 + 64) = *(_OWORD *)(a5 + 32);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

void re::HashTable<re::ecs2::Scene const*,re::ecs2::CameraPosition,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 80 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_12, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardTransform,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _OWORD *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v34[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v34, 0, 36);
          *(_QWORD *)&v34[36] = 0x7FFFFFFFLL;
          re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init((uint64_t)v34, v13, v12);
          v15 = *(_OWORD *)v34;
          *(_OWORD *)v34 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v34[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v34[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v34[24];
          *(_OWORD *)&v34[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v34[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardTransform,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 16);
              v21 += 176;
              --v20;
            }
            while (v20);
          }
          re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)v34);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 176 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 176 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  v25 = 176 * v9;
  *(_DWORD *)(v22 + v25 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v25 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v25 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v25) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v25 + 16) = *a4;
  v26 = (_OWORD *)(*(_QWORD *)(a1 + 16) + v25);
  v26[2] = *a5;
  v27 = a5[1];
  v28 = a5[2];
  v29 = a5[4];
  v26[5] = a5[3];
  v26[6] = v29;
  v26[3] = v27;
  v26[4] = v28;
  v30 = a5[5];
  v31 = a5[6];
  v32 = a5[8];
  v26[9] = a5[7];
  v26[10] = v32;
  v26[7] = v30;
  v26[8] = v31;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::ecs2::RigComponent::updateRigRuntimeData(_QWORD *a1, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t *a7)
{
  re::RigAsset *v14;
  const re::MeshAsset *v15;
  const re::MeshNameMap *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  const re::AssetType *v23;
  re::RigAsset *v24;
  const re::RigAsset *v25;
  uint64_t *v26;
  uint64_t *v27;
  NSObject *v28;
  uint64_t v29;
  unint64_t v30;
  uint8_t buf[16];

  v14 = (re::RigAsset *)re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)(a5 + 32));
  v15 = v14;
  if (a6)
    v16 = (const re::MeshNameMap *)(a6 + 216);
  else
    v16 = (re::RigAsset *)((char *)v14 + 448);
  v17 = *(_QWORD *)(a5 + 40);
  if (v17)
    v18 = *(_QWORD *)(v17 + 664);
  else
    v18 = 0;
  v19 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) >> 27));
  v20 = (*((_QWORD *)v16 + 1)
       + ((v18 ^ (v19 >> 31) ^ v19) << 6)
       + ((v18 ^ (v19 >> 31) ^ v19) >> 2)
       - 0x61C8864680B583E9) ^ v18 ^ (v19 >> 31) ^ v19;
  v21 = a1[5];
  if (a2)
  {
    if (v21)
    {
      v22 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v21 ^ (v21 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v21 ^ (v21 >> 30))) >> 27));
      v20 ^= (v20 << 6) - 0x61C8864680B583E9 + (v20 >> 2) + (*(_QWORD *)(v21 + 664) ^ (v22 >> 31) ^ v22);
      v23 = *(const re::AssetType **)(v21 + 264);
      v24 = (re::RigAsset *)re::AssetHandle::assetWithType((re::AssetHandle *)(a1 + 4), v23, 0);
      v25 = v24;
      if (a1[7])
      {
        a1[7] = 0;
        re::DynamicArray<re::RigDefinition>::deinit((uint64_t)(a1 + 8));
        v24 = (re::RigAsset *)re::DynamicArray<re::MeshRigGraphIndex>::deinit((uint64_t)(a1 + 18));
      }
      goto LABEL_16;
    }
  }
  else if (v21)
  {
    re::AssetHandle::loadAsync((re::AssetHandle *)(a1 + 4));
  }
  if (v20 != a1[7])
  {
    a1[7] = v20;
    re::DynamicArray<re::RigDefinition>::deinit((uint64_t)(a1 + 8));
    re::DynamicArray<re::MeshRigGraphIndex>::deinit((uint64_t)(a1 + 18));
    re::RigAsset::init((re::RigAsset *)(a1 + 8), v15, 0);
    v20 = a1[7];
  }
  v25 = (const re::RigAsset *)(a1 + 8);
  v24 = (re::RigAsset *)re::RigAsset::assetType(v14);
  v23 = v24;
LABEL_16:
  v26 = re::RigAsset::assetType(v24);
  if (v26 == (uint64_t *)v23)
  {
    v29 = a1[24];
    re::RigRuntimeData::update((re::RigRuntimeData *)(a1 + 23), v25, v15, v16, v20);
    if (v29 == a1[24])
      return;
LABEL_23:
    re::ecs2::Component::markDirty(a1);
    return;
  }
  v27 = re::RigGraphAsset::assetType((re::RigGraphAsset *)v26);
  if (v27 == (uint64_t *)v23)
  {
    v30 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) >> 27));
    re::RigRuntimeData::update((re::RigEnvironment *)(a1 + 23), (uint64_t)v25, v15, (uint64_t)v16, a3, a7, a4, ((v30 ^ (v30 >> 31)) - 0x61C8864680B583E9 + (v20 << 6) + (v20 >> 2)) ^ v20);
    goto LABEL_23;
  }
  v28 = *re::ecsComponentsLogObjects((re *)v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_224FE9000, v28, OS_LOG_TYPE_DEFAULT, "Unknown rig asset type", buf, 2u);
  }
}

BOOL re::ecs2::RigComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v22, a5, 0);
  v8 = v22;
  v9 = v23;
  v22 = a4;
  v23 = v8;
  v24 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v23);
      v15 = *(_QWORD *)v14;
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v14 + 16) + 176);
      if (v16 && *(_QWORD *)(v16 + 40))
      {
        v17 = v22;
        v18 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v23);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v17, v18, *(_QWORD *)(a3 + 40));
      }
      else
      {
        v19 = v22;
        v20 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v23);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v19, v20, *(_QWORD *)(a3 + 32));
        re::RigRuntimeData::clear((re::RigRuntimeData *)(v15 + 184));
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v23);
    }
    while (v23 != a5 || (unsigned __int16)v24 != 0xFFFF || WORD1(v24) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t result;
  uint64_t v9;

  result = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  if (!a4 && (result != a2 || (_DWORD)v9 != (_DWORD)a3 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0))
    return (*(uint64_t (**)(_QWORD, re::ecs2::ComponentBucketsBase **, unint64_t))(**((_QWORD **)*a1 + 28)
                                                                                                  + 16))(*((_QWORD *)*a1 + 28), a1, result);
  return result;
}

BOOL re::ecs2::RigComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  re::ecs2::RigComponentHelper **v20;
  const re::ecs2::RigComponent *v21;
  re::ecs2::RigComponentHelper *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  re::ecs2::PhysicsSimulationData *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  re::ecs2::EntityComponentCollection *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  re::RigGraphAsset *v36;
  uint64_t *v37;
  uint64_t *v38;
  unsigned int v39;
  re::ecs2::ComponentBucketsBase **v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v47 = 0;
  v48 = 0;
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 40) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40));
  v10 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v9);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)(a3 + 8);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 40))(v11, v12);
    v47 = v13;
    v48 = v14;
  }
  v43 = (re::ecs2::ComponentBucketsBase **)a3;
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v44, a5, 0);
  v16 = v44;
  v15 = v45;
  v44 = a4;
  v45 = v16;
  v46 = v15;
  if (v16 != a5
    || ((v17 = (unsigned __int16)v15, v18 = v15 & 0xFFFF0000, v17 == 0xFFFF)
      ? (v19 = v18 == 4294901760)
      : (v19 = 0),
        !v19))
  {
    do
    {
      v20 = (re::ecs2::RigComponentHelper **)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v45);
      v22 = *v20;
      v23 = *((_QWORD *)*v20 + 2);
      v24 = *(_QWORD *)(*(_QWORD *)(v23 + 176) + 40);
      if (v24)
      {
        v25 = atomic_load((unsigned int *)(v24 + 704));
        if (v25 == 2)
        {
          v26 = re::ecs2::RigComponentHelper::areAssetAndDependenciesLoaded(*v20, v21);
          v27 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(&v47, v23);
          if (v27 && (v28 = re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v27)) != 0)
          {
            v29 = *(_QWORD *)(v28 + 56);
            objc_storeWeak((id *)v22 + 61, (id)(v28 + 8));
          }
          else
          {
            v29 = 0;
          }
          v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 40) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40));
          v31 = (re::ecs2::EntityComponentCollection *)(v23 + 32);
          v32 = *(_QWORD *)(v23 + 176);
          v33 = re::ecs2::EntityComponentCollection::get(v31, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          v34 = (unint64_t *)re::ecs2::EntityComponentCollection::get(v31, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          re::ecs2::RigComponent::updateRigRuntimeData(v22, v26, v29, v30, v32, v33, v34);
          if (v26)
          {
            v35 = v44;
            v36 = (re::RigGraphAsset *)re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v45);
            v37 = re::RigGraphAsset::assetType(v36);
            v38 = (uint64_t *)*((_QWORD *)v22 + 5);
            if (v38)
              v38 = (uint64_t *)v38[33];
            if (v37 == v38)
              v39 = 3;
            else
              v39 = 1;
            re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState(v43, v35, (unint64_t)v36, v39);
          }
        }
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v45);
    }
    while (v45 != a5 || (unsigned __int16)v46 != 0xFFFF || WORD1(v46) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::RigComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  re::ecs2::PhysicsSimulationData *v22;
  uint64_t v23;
  char *WeakRetained;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  re::ecs2::EntityComponentCollection *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  void *v32;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v38 = 0;
  v39 = 0;
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 40) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40));
  v9 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v8);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)(a3 + 8);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, v11);
    v38 = v12;
    v39 = v13;
  }
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v35, a5, 0);
  v15 = v35;
  v14 = v36;
  v35 = a4;
  v36 = v15;
  v37 = v14;
  if (v15 != a5
    || ((v16 = (unsigned __int16)v14, v17 = v14 & 0xFFFF0000, v16 == 0xFFFF)
      ? (v18 = v17 == 4294901760)
      : (v18 = 0),
        !v18))
  {
    do
    {
      v19 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v36);
      v20 = *(_QWORD *)v19;
      v21 = *(_QWORD *)(*(_QWORD *)v19 + 16);
      v22 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(&v38, v21);
      if (v22)
        v23 = re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v22);
      else
        v23 = 0;
      WeakRetained = (char *)objc_loadWeakRetained((id *)(v20 + 488));
      if (WeakRetained)
        v25 = WeakRetained - 8;
      else
        v25 = 0;
      if (WeakRetained)

      if (v25 != (char *)v23)
      {
        if (v23)
          v26 = *(_QWORD *)(v23 + 56);
        else
          v26 = 0;
        v27 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 40) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40));
        v28 = (re::ecs2::EntityComponentCollection *)(v21 + 32);
        v29 = *(_QWORD *)(v21 + 176);
        v30 = re::ecs2::EntityComponentCollection::get(v28, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        v31 = (unint64_t *)re::ecs2::EntityComponentCollection::get(v28, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        re::ecs2::RigComponent::updateRigRuntimeData((_QWORD *)v20, 1, v26, v27, v29, v30, v31);
        if (v23)
          v32 = (void *)(v23 + 8);
        else
          v32 = 0;
        objc_storeWeak((id *)(v20 + 488), v32);
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v36);
    }
    while (v36 != a5 || (unsigned __int16)v37 != 0xFFFF || WORD1(v37) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::RigSystem::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *WeakRetained;
  uint64_t v5;
  id *v6;
  unint64_t v7;
  uint64_t v8;
  id *v9;
  uint64_t v10;
  uint64_t v11;
  re *isStatisticCollectionEnabled;
  uint64_t v13;
  int64x2_t *v14;
  unint64_t v15;
  unint64_t v16;
  int64x2_t v17;
  _anonymous_namespace_ *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t FirstBitSet;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  _BYTE v50[16];
  uint64_t v51[2];
  _QWORD v52[2];
  _QWORD v53[2];
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  _QWORD v61[3];
  uint64_t v62;

  v52[0] = a2;
  v52[1] = a3;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v51);
  WeakRetained = (id *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 120))(*(_QWORD *)(a1 + 40));
  if (v5)
  {
    v6 = WeakRetained;
    v7 = 0;
    v8 = 8 * v5;
    do
    {
      WeakRetained = (id *)objc_loadWeakRetained(v6);
      if (WeakRetained)
      {
        v9 = WeakRetained;
        v10 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(WeakRetained + 24), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (v10)
          v11 = *(_QWORD *)(v10 + 24);
        else
          v11 = 0;
        v7 += v11;

      }
      ++v6;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    v7 = 0;
  }
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)WeakRetained);
  if ((isStatisticCollectionEnabled & 1) != 0)
  {
    v13 = re::profilerThreadContext(isStatisticCollectionEnabled);
    v14 = *(int64x2_t **)(v13 + 152);
    if (v14)
    {
      v15 = v14[440].u64[0];
      if (v15 >= v7)
        v15 = v7;
      v14[440].i64[0] = v15;
      v16 = v14[440].u64[1];
      if (v16 <= v7)
        v16 = v7;
      v14[440].i64[1] = v16;
      v17 = vdupq_n_s64(1uLL);
      v17.i64[0] = v7;
      v14[441] = vaddq_s64(v14[441], v17);
      *(_BYTE *)(v13 + 184) = 0;
    }
  }
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v50, 3037, a1);
  v18 = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned long long,2ul>::DynamicOverflowArray((uint64_t)&v58, (uint64_t *)(a1 + 272));
  v61[2] = *(_QWORD *)(a1 + 312);
  v54 = 1;
  v55 = 0;
  v56 = 0;
  v53[1] = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v53, 0);
  v54 += 2;
  v19 = *(_QWORD *)(a1 + 312);
  if ((v19 & 0x3F) != 0)
    v20 = (v19 >> 6) + 1;
  else
    v20 = v19 >> 6;
  v57 = *(_QWORD *)(a1 + 312);
  v62 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)v53, v20, &v62);
  v21 = *(_DWORD *)(a1 + 288);
  if ((v21 & 1) != 0)
    v22 = (_QWORD *)(a1 + 296);
  else
    v22 = *(_QWORD **)(a1 + 304);
  v23 = *(_QWORD *)(a1 + 280);
  v24 = (uint64_t *)(a1 + 296);
  while (1)
  {
    v25 = a1 + 296;
    if ((v21 & 1) == 0)
      v25 = *(_QWORD *)(a1 + 304);
    if (v22 == (_QWORD *)(v25 + 8 * v23))
      break;
    *v22++ = 0;
    v21 = *(_DWORD *)(a1 + 288);
  }
  v26 = v61;
  if ((v60 & 1) == 0)
    v26 = (unint64_t *)v61[1];
  v27 = v59;
  if ((v59 & 0x3FFFFFFFFFFFFFFLL) != 0)
  {
    v28 = 0;
    while (1)
    {
      v30 = *v26++;
      v29 = v30;
      if (v30)
        break;
      v28 -= 64;
      if (!--v27)
        goto LABEL_49;
    }
    v31 = __clz(__rbit64(v29));
    if (v31 + 1 != v28)
    {
      FirstBitSet = v31 - v28;
      do
      {
        v33 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 104, FirstBitSet);
        v34 = *(_QWORD *)(*v33 + 224);
        v35 = v33[3];
        v36 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v33[2] + 8, v35);
        if (*(_DWORD *)(v36 + 40))
          v37 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v34 + 24))(v34, v52, v33, v35, v36, 0);
        else
          v37 = 0;
        v38 = v33[5];
        v39 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v33[2] + 8, v38);
        if (*(_DWORD *)(v39 + 40))
          v37 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, v52, v33, v38, v39, 0);
        v40 = v33[6];
        v41 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v33[2] + 8, v40);
        if (*(_DWORD *)(v41 + 40))
        {
          if (((v37 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v34 + 40))(v34, v52, v33, v40, v41, 0)) & 1) == 0)goto LABEL_47;
        }
        else if (!v37)
        {
LABEL_47:
          re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v53, FirstBitSet);
          goto LABEL_48;
        }
        re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v53, FirstBitSet);
LABEL_48:
        FirstBitSet = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)&v58, FirstBitSet + 1);
      }
      while (FirstBitSet != -1);
    }
  }
LABEL_49:
  re::DynamicBitset<unsigned long long,64ul>::orWithBitSet(a1 + 272, (uint64_t)v53);
  if (*(_BYTE *)(a1 + 336))
  {
    v42 = *(_QWORD *)(a1 + 280);
    v43 = *(_DWORD *)(a1 + 288);
    if (v42 >= 0xB)
    {
      if ((v43 & 1) == 0)
        v24 = *(uint64_t **)(a1 + 304);
      v44 = 8 * v42;
      while (!*v24)
      {
        ++v24;
        v44 -= 8;
        if (!v44)
          goto LABEL_65;
      }
      goto LABEL_63;
    }
    if ((v43 & 1) == 0)
      v24 = *(uint64_t **)(a1 + 304);
    if (v42)
    {
      v45 = 0;
      v46 = 8 * v42;
      do
      {
        v47 = *v24++;
        v45 |= v47;
        v46 -= 8;
      }
      while (v46);
      if (v45)
      {
LABEL_63:
        v48 = *(re::ecs2::System **)(a1 + 320);
        if (!*((_BYTE *)v48 + 86))
          re::ecs2::System::queueToRun(v48, 0.0);
      }
    }
  }
LABEL_65:
  if (v53[0] && (v54 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v53[0] + 40))();
  if (v58 && (v60 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v58 + 40))();
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v50);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v51);
}

uint64_t re::ecs2::RigSystem::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  re *isStatisticCollectionEnabled;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64x2_t *v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  re::ecs2::System *v33;
  _BYTE v35[16];
  uint64_t v36[2];
  _QWORD v37[2];
  uint64_t v38;

  v37[0] = a3;
  v37[1] = a4;
  v6 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v36);
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v6);
  if ((_DWORD)isStatisticCollectionEnabled)
  {
    v8 = re::profilerThreadContext(isStatisticCollectionEnabled);
    v9 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v10 = v9 ? *(_QWORD *)(v9 + 24) : 0;
    v11 = *(int64x2_t **)(v8 + 152);
    if (v11)
    {
      v12 = v11[440].u64[0];
      if (v12 >= v10)
        v12 = v10;
      v11[440].i64[0] = v12;
      v13 = v11[440].u64[1];
      if (v13 <= v10)
        v13 = v10;
      v11[440].i64[1] = v13;
      v14 = vdupq_n_s64(1uLL);
      v14.i64[0] = v10;
      v11[441] = vaddq_s64(v11[441], v14);
      *(_BYTE *)(v8 + 184) = 0;
    }
  }
  re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v35, 3037, a1);
  v38 = a2;
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 168)
                  + 16
                  * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 160), &v38)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 272, v15);
  v16 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 104, v15);
  v17 = *(_QWORD *)(*v16 + 224);
  v18 = v16[3];
  v19 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v16[2] + 8, v18);
  if (*(_DWORD *)(v19 + 40))
    v20 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v17 + 24))(v17, v37, v16, v18, v19, 0);
  else
    v20 = 0;
  v21 = v16[5];
  v22 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v16[2] + 8, v21);
  if (*(_DWORD *)(v22 + 40))
    v20 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, v37, v16, v21, v22, 0);
  v23 = v16[6];
  v24 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v16[2] + 8, v23);
  if (*(_DWORD *)(v24 + 40))
  {
    if (((v20 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v17 + 40))(v17, v37, v16, v23, v24, 0)) & 1) == 0)goto LABEL_19;
    goto LABEL_18;
  }
  if (v20)
LABEL_18:
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 272, v15);
LABEL_19:
  if (!*(_BYTE *)(a1 + 336))
    goto LABEL_39;
  v25 = *(_QWORD *)(a1 + 280);
  v26 = *(_DWORD *)(a1 + 288);
  if (v25 >= 0xB)
  {
    if ((v26 & 1) != 0)
      v27 = (_QWORD *)(a1 + 296);
    else
      v27 = *(_QWORD **)(a1 + 304);
    v29 = 8 * v25;
    while (!*v27)
    {
      ++v27;
      v29 -= 8;
      if (!v29)
        goto LABEL_39;
    }
LABEL_37:
    v33 = *(re::ecs2::System **)(a1 + 320);
    if (!*((_BYTE *)v33 + 86))
      re::ecs2::System::queueToRun(v33, 0.0);
    goto LABEL_39;
  }
  if ((v26 & 1) != 0)
  {
    v28 = (uint64_t *)(a1 + 296);
    if (!v25)
      goto LABEL_39;
  }
  else
  {
    v28 = *(uint64_t **)(a1 + 304);
    if (!v25)
      goto LABEL_39;
  }
  v30 = 0;
  v31 = 8 * v25;
  do
  {
    v32 = *v28++;
    v30 |= v32;
    v31 -= 8;
  }
  while (v31);
  if (v30)
    goto LABEL_37;
LABEL_39:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v35);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v36);
}

void re::ecs2::RigSystem::willAddSceneToECSService(re::ecs2::RigSystem *this, re::ecs2::Scene *a2)
{
  char *v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57[2];
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _OWORD v66[5];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)this + 104;
  v57[0] = (uint64_t)a2;
  v5 = (re::ecs2::RigSystem *)((char *)this + 224);
  v6 = *((_QWORD *)this + 29);
  v7 = *((_DWORD *)this + 60);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)this + 248);
    else
      v8 = (_QWORD *)*((_QWORD *)this + 32);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)this + 248);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)this + 32);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 224, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::RigSystem *)((char *)this + 160), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    v15 = (char *)this + 272;
    v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  v56 = 0u;
  v49 = 0u;
  *(_QWORD *)&v50 = 0;
  *((_QWORD *)&v50 + 1) = -1;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v54 = 1;
  v55 = 0uLL;
  v17 = *((_QWORD *)this + 18);
  *(_QWORD *)&v56 = 0;
  v18 = *((_QWORD *)this + 14);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 13, (v17 + 4) >> 2);
    v18 = *((_QWORD *)this + 14);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 858;
    v62 = 2048;
    v63 = v17 >> 2;
    v64 = 2048;
    v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*((_BYTE *)this + 120) & 1) != 0)
    v19 = (char *)this + 128;
  else
    v19 = (char *)*((_QWORD *)this + 17);
  v20 = *(_QWORD *)&v19[8 * (v17 >> 2)];
  ++*((_QWORD *)this + 18);
  ++*((_DWORD *)this + 38);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v49;
  v23 = v50;
  v24 = v51;
  *(_QWORD *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  v26 = *((_QWORD *)this + 18);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(_QWORD *)&v66[0] = *((_QWORD *)this + 18) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::RigSystem *)((char *)this + 160), v57, (uint64_t *)v66);
  v28 = *((_QWORD *)this + 18);
  v29 = *((_QWORD *)this + 33);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *((_QWORD *)this + 33) = v28;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *((_QWORD *)this + 33) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*((_BYTE *)this + 240) & 1) != 0)
      v33 = (char *)this + 248;
    else
      v33 = (char *)*((_QWORD *)this + 32);
    *(_QWORD *)&v33[8 * *((_QWORD *)this + 29) - 8] &= v31;
  }
  v34 = *((_QWORD *)this + 18);
  v35 = *((_QWORD *)this + 39);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *((_QWORD *)this + 39) = v34;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::RigSystem *)((char *)this + 272), v36, &v49);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *((_QWORD *)this + 39) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*((_BYTE *)this + 288) & 1) != 0)
      v39 = (char *)this + 296;
    else
      v39 = (char *)*((_QWORD *)this + 38);
    *(_QWORD *)&v39[8 * *((_QWORD *)this + 35) - 8] &= v37;
  }
  v16 = *(_QWORD *)&v66[0];
  v15 = (char *)this + 272;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((_BYTE *)this + 336))
    return;
  v40 = *((_QWORD *)this + 35);
  v41 = *((_DWORD *)this + 72);
  if (v40 >= 0xB)
  {
    if ((v41 & 1) != 0)
      v42 = (_QWORD *)((char *)this + 296);
    else
      v42 = (_QWORD *)*((_QWORD *)this + 38);
    v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44)
        return;
    }
LABEL_65:
    v48 = (re::ecs2::System *)*((_QWORD *)this + 40);
    if (!*((_BYTE *)v48 + 86))
      re::ecs2::System::queueToRun(v48, 0.0);
    return;
  }
  if ((v41 & 1) != 0)
  {
    v43 = (uint64_t *)((char *)this + 296);
    if (!v40)
      return;
  }
  else
  {
    v43 = (uint64_t *)*((_QWORD *)this + 38);
    if (!v40)
      return;
  }
  v45 = 0;
  v46 = 8 * v40;
  do
  {
    v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45)
    goto LABEL_65;
}

uint64_t re::ecs2::RigSystem::willRemoveSceneFromECSService(re::ecs2::RigSystem *this, re::ecs2::Scene *a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re::ecs2::ComponentBucketsBase *v15;
  re::ecs2::Scene *v16;

  v16 = a2;
  v3 = (uint64_t *)((char *)this + 160);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 20, &v16);
  if (result != -1)
  {
    v5 = *((_QWORD *)this + 21) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 224, *(_QWORD *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 272, *(_QWORD *)(v5 + 8));
    v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 104, *(_QWORD *)(v5 + 8));
    if (*v6)
    {
      v7 = v6;
      *v6 = 0;
      v8 = v6 + 1;
      v9 = *(_QWORD *)(v6[1] + 288);
      if (v9)
      {
        v10 = v6[12];
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      v13 = 0;
      v14 = v7 + 3;
      do
      {
        v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(_QWORD *)v15)
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_RigComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_182);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_182))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410A348, 0);
    *(uint64_t *)((char *)&qword_25410A358 + 6) = 0;
    qword_25410A358 = 0;
    qword_25410A368 = 0;
    qword_25410A370 = 0xFFFFFFFFLL;
    qword_25410A348 = (uint64_t)&off_24ED7DAA8;
    qword_25410A378 = (uint64_t)"RigComponent";
    dword_25410A380 = 0;
    unk_25410A388 = 0u;
    unk_25410A398 = 0u;
    unk_25410A3A8 = 0u;
    qword_25410A3B8 = 0;
    __cxa_guard_release(&_MergedGlobals_182);
  }
  return &qword_25410A348;
}

void re::ecs2::initInfo_RigComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x3C4B66CFEC8413DALL;
  v14[1] = "RigComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_25410A328);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410A328);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410A338 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_AssetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "rigAssetHandle";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410A340 = v12;
      __cxa_guard_release(&qword_25410A328);
    }
  }
  *((_QWORD *)this + 2) = 0x1F000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25410A338;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::RigComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::RigComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RigComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RigComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

ArcSharedObject *re::internal::defaultConstruct<re::ecs2::RigComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::RigComponent>(a3);
}

void re::internal::defaultDestruct<re::ecs2::RigComponent>(int a1, int a2, re::ecs2::RigComponent *this)
{
  re::ecs2::RigComponent::~RigComponent(this);
}

uint64_t re::ecs2::introspect_RigComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RigComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RigComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RigComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RigComponent>, this);
}

uint64_t *re::ecs2::allocInfo_RigSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410A330);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410A330))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410A3C0, 0);
    *(uint64_t *)((char *)&qword_25410A3D0 + 6) = 0;
    qword_25410A3D0 = 0;
    qword_25410A3E0 = 0;
    qword_25410A3E8 = 0xFFFFFFFFLL;
    qword_25410A3C0 = (uint64_t)&off_24ED7DAA8;
    qword_25410A3F0 = (uint64_t)"RigSystem";
    dword_25410A3F8 = 0;
    xmmword_25410A400 = 0u;
    unk_25410A410 = 0u;
    xmmword_25410A420 = 0u;
    qword_25410A430 = 0;
    __cxa_guard_release(&qword_25410A330);
  }
  return &qword_25410A3C0;
}

void re::ecs2::initInfo_RigSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x84A3ECD4567ELL;
  v5[1] = "RigSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_RigSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::RigSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::RigSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::RigSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::RigSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RigSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RigSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::RigSystem *re::internal::defaultConstruct<re::ecs2::RigSystem>(uint64_t a1, uint64_t a2, re::ecs2::RigSystem *a3)
{
  return re::ecs2::RigSystem::RigSystem(a3);
}

void *re::internal::defaultDestruct<re::ecs2::RigSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;

  a3[43] = &off_24ED5BBA0;
  v4 = a3[45];
  if (v4)
  {
    if (a3[46])
    {
      v5 = a3 + 46;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[47]);
      *v5 = 0;
      a3[47] = 0;
    }
    a3[45] = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 13);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::RigSystem>(_QWORD *a1)
{
  uint64_t v2;

  a1[43] = &off_24ED5BBA0;
  v2 = a1[45];
  if (v2)
  {
    if (a1[46])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[47]);
      a1[46] = 0;
      a1[47] = 0;
    }
    a1[45] = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 13);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_RigSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RigSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RigSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RigSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RigSystem>, this);
}

uint64_t re::ecs2::RigComponentStateImpl::dependsOnComponents(re::ecs2::RigComponentStateImpl *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::RigComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 3;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState(a2, v11, v7, 0);
      }
      ++v6;
    }
    while (v6 != 7);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

void re::ecs2::RigSystem::~RigSystem(re::ecs2::RigSystem *this)
{
  uint64_t v2;

  *((_QWORD *)this + 43) = &off_24ED5BBA0;
  v2 = *((_QWORD *)this + 45);
  if (v2)
  {
    if (*((_QWORD *)this + 46))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 47));
      *((_QWORD *)this + 46) = 0;
      *((_QWORD *)this + 47) = 0;
    }
    *((_QWORD *)this + 45) = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 13);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  *((_QWORD *)this + 43) = &off_24ED5BBA0;
  v2 = *((_QWORD *)this + 45);
  if (v2)
  {
    if (*((_QWORD *)this + 46))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 47));
      *((_QWORD *)this + 46) = 0;
      *((_QWORD *)this + 47) = 0;
    }
    *((_QWORD *)this + 45) = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 13);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::RigSystem::typeInfo(re::ecs2::RigSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RigSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RigSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RigSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RigSystem>, 0);
}

uint64_t re::DynamicBitset<unsigned long long,64ul>::orWithBitSet(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 40);
  if (v4 > *(_QWORD *)(a1 + 40))
  {
    if ((v4 & 0x3F) != 0)
      v5 = (v4 >> 6) + 1;
    else
      v5 = v4 >> 6;
    *(_QWORD *)(a1 + 40) = v4;
    v11 = 0;
    re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)a1, v5, &v11);
  }
  v6 = *(_QWORD *)(a2 + 8);
  if (v6 >= *(_QWORD *)(a1 + 8))
    v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      v8 = *(_QWORD *)(a2 + 32);
      if ((*(_BYTE *)(a2 + 16) & 1) != 0)
        v8 = a2 + 24;
      v9 = a1 + 24;
      if ((*(_BYTE *)(a1 + 16) & 1) == 0)
        v9 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(v9 + 8 * i) |= *(_QWORD *)(v8 + 8 * i);
    }
  }
  return a1;
}

uint64_t re::DynamicOverflowArray<unsigned long long,2ul>::DynamicOverflowArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[1];
    *(_QWORD *)a1 = v3;
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, v5);
    *(_DWORD *)(a1 + 16) += 2;
    re::DynamicOverflowArray<unsigned long long,2ul>::copy(a1, (uint64_t)a2);
  }
  return a1;
}

void *re::DynamicOverflowArray<unsigned long long,2ul>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  const void *v5;
  void *result;
  const void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= *(_QWORD *)(a1 + 8))
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, *(_QWORD *)(a2 + 8));
    if ((*(_BYTE *)(a2 + 16) & 1) != 0)
      v7 = (const void *)(a2 + 24);
    else
      v7 = *(const void **)(a2 + 32);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_DWORD *)(a1 + 16);
    if ((v9 & 1) != 0)
    {
      v10 = (void *)(a1 + 24);
      if (!v8)
      {
LABEL_18:
        if ((v9 & 1) != 0)
          v11 = a1 + 24;
        else
          v11 = *(_QWORD *)(a1 + 32);
        v12 = *(_QWORD *)(a1 + 8);
        v13 = (void *)(v11 + 8 * v12);
        if ((*(_DWORD *)(a2 + 16) & 1) != 0)
          v14 = a2 + 24;
        else
          v14 = *(_QWORD *)(a2 + 32);
        result = memcpy(v13, (const void *)(v14 + 8 * v12), 8 * v4 - 8 * v12);
        goto LABEL_25;
      }
    }
    else
    {
      v10 = *(void **)(a1 + 32);
      if (!v8)
        goto LABEL_18;
    }
    memmove(v10, v7, 8 * v8);
    v9 = *(_DWORD *)(a1 + 16);
    goto LABEL_18;
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    v5 = (const void *)(a2 + 24);
  else
    v5 = *(const void **)(a2 + 32);
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    result = *(void **)(a1 + 32);
    if (!v4)
      goto LABEL_25;
    goto LABEL_15;
  }
  result = (void *)(a1 + 24);
  if (v4)
LABEL_15:
    result = memmove(result, v5, 8 * v4);
LABEL_25:
  *(_QWORD *)(a1 + 8) = v4;
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED5BC90;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED5BCE8;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED5BD40;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED5BD98;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED5BC90;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED5BCE8;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED5BD40;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED5BD98;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5BC90;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5BC90;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5BCE8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5BCE8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5BD40;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5BD40;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5BD98;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5BD98;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigComponent>,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

ArcSharedObject *re::make::shared::unsafelyInplace<re::ecs2::RigComponent>(ArcSharedObject *a1)
{
  uint64_t v2;

  *((_OWORD *)a1 + 29) = 0u;
  *((_OWORD *)a1 + 30) = 0u;
  *((_OWORD *)a1 + 27) = 0u;
  *((_OWORD *)a1 + 28) = 0u;
  *((_OWORD *)a1 + 25) = 0u;
  *((_OWORD *)a1 + 26) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((_OWORD *)a1 + 24) = 0u;
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 20) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_24ED44018;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_DWORD *)(v2 + 128) = 0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_DWORD *)(v2 + 168) = 0;
  *(_QWORD *)(v2 + 176) = 0;
  *(_QWORD *)(v2 + 184) = 0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 76) = 0u;
  *(_QWORD *)(v2 + 192) = -1;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_DWORD *)(v2 + 296) = 1;
  *(_QWORD *)(v2 + 312) = 0;
  *(_QWORD *)(v2 + 320) = 0;
  *(_DWORD *)(v2 + 328) = 0;
  *(_QWORD *)(v2 + 304) = 0;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 384) = 0u;
  *(_OWORD *)(v2 + 400) = 0u;
  *(_OWORD *)(v2 + 416) = 0u;
  *(_OWORD *)(v2 + 428) = 0u;
  *(_QWORD *)(v2 + 444) = 0x7FFFFFFFLL;
  *(_QWORD *)(v2 + 464) = 0;
  *(_QWORD *)(v2 + 472) = 0;
  *(_QWORD *)(v2 + 456) = 0;
  *((_BYTE *)a1 + 480) = 0;
  objc_initWeak((id *)(v2 + 488), 0);
  return a1;
}

re::ecs2::RigSystem *re::ecs2::RigSystem::RigSystem(re::ecs2::RigSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  _QWORD v12[2];
  void *v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)v2 = &off_24ED5BC08;
  v3 = v2 + 344;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  v4 = v2 + 104;
  *(_DWORD *)(v2 + 120) = 1;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  *(_DWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  v5 = (_QWORD *)(v2 + 224);
  *(_OWORD *)(v2 + 160) = 0u;
  v6 = (_QWORD *)(v2 + 160);
  *(_DWORD *)(v2 + 240) = 1;
  v7 = (_QWORD *)(v2 + 272);
  *(_OWORD *)(v2 + 248) = 0u;
  *(_QWORD *)(v2 + 280) = 0;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_DWORD *)(v2 + 288) = 1;
  *(_OWORD *)(v2 + 321) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v5, 0);
  *((_DWORD *)this + 60) += 2;
  *((_QWORD *)this + 33) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 72) += 2;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = this;
  *((_QWORD *)this + 41) = v3;
  *((_BYTE *)this + 336) = 1;
  LOWORD(v13) = 257;
  HIDWORD(v13) = 1023969417;
  LOBYTE(v14) = 0;
  re::ecs2::System::setTaskOptions(this, (uint64_t *)&v13);
  *((_QWORD *)this + 43) = &off_24ED5BBA0;
  *((_QWORD *)this + 44) = this;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 45) = 0;
  v13 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v14 = re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v12[0] = &v13;
  v12[1] = 2;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((re::ecs2::RigSystem *)((char *)this + 360), (uint64_t)v12);
  return this;
}

id re::internal::defaultRetain<re::ecs2::RigSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::RigSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

void *re::ecs2::introspect_TextAnchor(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  uint64_t v15;
  re::IntrospectionBasic *v16;
  uint64_t v17[2];
  __int128 v18;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "TopLeft";
      re::ecs2::introspect_TextAnchor(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = 1;
      *(_QWORD *)(v15 + 16) = "Center";
      qword_2558285D0 = v15;
    }
  }
  {
    v16 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::ecs2::introspect_TextAnchor(BOOL)::info, "TextAnchor", 4, 4, 1, 1);
    *(_QWORD *)v16 = &off_24ED7D9E8;
    *((_QWORD *)v16 + 8) = &re::ecs2::introspect_TextAnchor(BOOL)::enumTable;
    *((_DWORD *)v16 + 4) = 9;
  }
  if (v2)
  {
    if ((re::ecs2::introspect_TextAnchor(BOOL)::isInitialized & 1) != 0)
      return &re::ecs2::introspect_TextAnchor(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    v5 = re::ecs2::introspect_TextAnchor(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    if ((v5 & 1) != 0)
      return &re::ecs2::introspect_TextAnchor(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::ecs2::introspect_TextAnchor(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::ecs2::introspect_TextAnchor(BOOL)::info;
    }
  }
  re::ecs2::introspect_TextAnchor(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::ecs2::introspect_TextAnchor(BOOL)::info, a2);
  v17[0] = 0x106ABB8C40F4C4;
  v17[1] = (uint64_t)"TextAnchor";
  xmmword_255828600 = v18;
  re::StringID::destroyString((re::StringID *)v17);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::ecs2::introspect_TextAnchor(BOOL)::info;
}

void re::internal::registerEnumType<re::ecs2::TextAnchor>(re::TypeRegistry *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unint64_t j;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  StringID v31;
  _QWORD v32[2];
  _QWORD v33[61];

  v33[0] = 0x607DD0F01DCLL;
  v33[1] = "uint32_t";
  v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, v33);
  if (!v8)
  {
    re::StringID::destroyString((re::StringID *)v33);
    goto LABEL_29;
  }
  v9 = *v8;
  re::StringID::destroyString((re::StringID *)v33);
  if (!a1)
  {
LABEL_29:
    re::internal::assertLog((re::internal *)5, v11, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, a3[1]);
    _os_crash();
    __break(1u);
    return;
  }
  v12 = *(unsigned int **)(a2 + 64);
  v32[0] = a1;
  v32[1] = v9;
  re::TypeBuilder::beginEnumType((uint64_t)v33, a3, 1, 1, (uint64_t)v32);
  v13 = *v12;
  if ((_DWORD)v13)
  {
    for (i = 0; i < v13; ++i)
    {
      v15 = *(_QWORD *)(*((_QWORD *)v12 + 1) + 8 * i);
      if (*(_DWORD *)v15 == 1)
      {
        v16 = *(char **)(v15 + 16);
        if (v16)
        {
          v17 = *v16;
          if (*v16)
          {
            v18 = v16[1];
            if (v18)
            {
              v19 = (unsigned __int8 *)(v16 + 2);
              do
              {
                v17 = 31 * v17 + v18;
                v20 = *v19++;
                v18 = v20;
              }
              while (v20);
            }
          }
        }
        else
        {
          v17 = 0;
        }
        v21 = *(_QWORD *)(v15 + 8);
        *(_QWORD *)&v31.var0 = 2 * v17;
        v31.var1 = v16;
        re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v33, v21, &v31);
        re::StringID::destroyString((re::StringID *)&v31);
        v13 = *v12;
      }
    }
    if (v13)
    {
      for (j = 0; j < v13; ++j)
      {
        v23 = *(_QWORD *)(*((_QWORD *)v12 + 1) + 8 * j);
        if (*(_DWORD *)v23 == 2)
        {
          v24 = *(char **)(v23 + 16);
          if (v24)
          {
            v25 = *v24;
            if (*v24)
            {
              v26 = v24[1];
              if (v26)
              {
                v27 = (unsigned __int8 *)(v24 + 2);
                do
                {
                  v25 = 31 * v25 + v26;
                  v28 = *v27++;
                  v26 = v28;
                }
                while (v28);
              }
            }
          }
          else
          {
            v25 = 0;
          }
          v29 = *(_QWORD *)(v23 + 8);
          *(_QWORD *)&v31.var0 = 2 * v25;
          v31.var1 = v24;
          re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v33, v29, &v31);
          re::StringID::destroyString((re::StringID *)&v31);
          v13 = *v12;
        }
      }
    }
  }
  re::TypeBuilder::commitTo((re::TypeBuilder *)v33, a1, a4);
  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v33, v30);
}

double re::ecs2::downgradeDynamicTextComponentFromFall2023@<D0>(re::ecs2 *this@<X0>, _BYTE *a2@<X8>)
{
  char v6;
  double result;
  __int128 v8;
  char v9;
  __int128 v10;
  char v11;

  v6 = *((_BYTE *)this + 112);
  v8 = *((_OWORD *)this + 6);
  v9 = v6;
  re::ColorGamut4F::as((uint64_t)&v8, 0, 3, (uint64_t)&v10);
  result = *(double *)&v10;
  *((_OWORD *)this + 6) = v10;
  *((_BYTE *)this + 112) = v11;
  *a2 = 1;
  return result;
}

uint64_t *re::ecs2::allocInfo_DynamicTextComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410A440);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410A440))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410A488, 0);
    *(uint64_t *)((char *)&qword_25410A498 + 6) = 0;
    qword_25410A498 = 0;
    qword_25410A4A8 = 0;
    qword_25410A4B0 = 0xFFFFFFFFLL;
    qword_25410A488 = (uint64_t)&off_24ED7DAA8;
    qword_25410A4B8 = (uint64_t)"DynamicTextComponent";
    dword_25410A4C0 = 0;
    unk_25410A4C8 = 0u;
    unk_25410A4D8 = 0u;
    unk_25410A4E8 = 0u;
    qword_25410A4F8 = 0;
    __cxa_guard_release(&qword_25410A440);
  }
  return &qword_25410A488;
}

void re::ecs2::initInfo_DynamicTextComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  void *v21;
  uint64_t v22;
  uint64_t *v23;
  const re::IntrospectionBase *v24;
  void *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  _QWORD v30[2];
  __int128 v31;

  v30[0] = 0x7EF097E9DE0238E2;
  v30[1] = "DynamicTextComponent";
  re::StringID::destroyString((re::StringID *)v30);
  *((_OWORD *)this + 2) = v31;
  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_183);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&_MergedGlobals_183);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410A450 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_Vector4F((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "color";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x6000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_25410A458 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v14 = re::IntrospectionInfo<re::DynamicString>::get(1, v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "text";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x2000000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_25410A460 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      re::ecs2::introspect_TextAnchor((re::ecs2 *)1, v17);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "anchor";
      *(_QWORD *)(v18 + 16) = &re::ecs2::introspect_TextAnchor(BOOL)::info;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x4000000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_25410A468 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::introspect_AssetHandle((re *)1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "fontAssetHandle";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x4800000004;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_25410A470 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v25 = re::introspect_ColorGamut((re *)1, v24);
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "colorGamut";
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0x7000000005;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_25410A478 = v26;
      v27 = re::introspectionAllocator((re *)v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 64, 8);
      *(_DWORD *)v28 = 6;
      *(_QWORD *)(v28 + 8) = 1;
      *(_QWORD *)(v28 + 16) = 0;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0;
      *(_BYTE *)(v28 + 40) = 1;
      *(_QWORD *)(v28 + 48) = re::ecs2::downgradeDynamicTextComponentFromFall2023;
      *(_DWORD *)(v28 + 56) = 2;
      qword_25410A480 = v28;
      __cxa_guard_release(&_MergedGlobals_183);
    }
  }
  *((_QWORD *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_25410A450;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::DynamicTextComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::DynamicTextComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::DynamicTextComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DynamicTextComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v29 = v31;
}

uint64_t re::internal::defaultConstruct<re::ecs2::DynamicTextComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::DynamicTextComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::DynamicTextComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 72));
  v4 = *(_QWORD *)(a3 + 32);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 40) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 48));
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
  }
  *(_QWORD *)a3 = &off_24ED426B8;
  return objc_destructInstance((id)(a3 + 8));
}

void *re::internal::defaultDestructV2<re::ecs2::DynamicTextComponent>(uint64_t a1)
{
  uint64_t v2;

  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 72));
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 48));
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
  }
  *(_QWORD *)a1 = &off_24ED426B8;
  return objc_destructInstance((id)(a1 + 8));
}

uint64_t re::ecs2::introspect_DynamicTextComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DynamicTextComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DynamicTextComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DynamicTextComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DynamicTextComponent>, this);
}

uint64_t *re::ecs2::allocInfo_DynamicTextSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410A448);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410A448))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410A500, 0);
    *(uint64_t *)((char *)&qword_25410A510 + 6) = 0;
    qword_25410A510 = 0;
    qword_25410A520 = 0;
    qword_25410A528 = 0xFFFFFFFFLL;
    qword_25410A500 = (uint64_t)&off_24ED7DAA8;
    qword_25410A530 = (uint64_t)"DynamicTextSystem";
    dword_25410A538 = 0;
    unk_25410A540 = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_25410A570 = 0;
    __cxa_guard_release(&qword_25410A448);
  }
  return &qword_25410A500;
}

void re::ecs2::initInfo_DynamicTextSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x67A59726D7E78E76;
  v5[1] = "DynamicTextSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_DynamicTextSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::DynamicTextSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::DynamicTextSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::DynamicTextSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::DynamicTextSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::DynamicTextSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DynamicTextSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::DynamicTextSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3;
  double result;

  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *(_QWORD *)(v3 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)v3 = &off_24ED5BDF0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::DynamicTextSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::DynamicTextSystem>(_OWORD *a1)
{
  uint64_t v1;
  double result;

  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  *(_QWORD *)(v1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_QWORD *)v1 = &off_24ED5BDF0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::DynamicTextSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_DynamicTextSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DynamicTextSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DynamicTextSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DynamicTextSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DynamicTextSystem>, this);
}

uint64_t re::ecs2::DynamicTextComponent::computeObjectSpaceSize(re::ecs2::DynamicTextComponent *this, re::TextManager *a2)
{
  uint64_t v3;
  unsigned int v4;
  double v6;
  double v7;
  __n128 v8;
  uint64_t v9;
  NSObject *v10;
  int v12;
  re::ecs2::DynamicTextComponent *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 10);
  if (!v3)
  {
    v10 = *re::ecsComponentsLogObjects(this);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v12 = 134217984;
      v13 = this;
      _os_log_impl(&dword_224FE9000, v10, OS_LOG_TYPE_DEFAULT, "DynamicTextComponent %p has null font asset.", (uint8_t *)&v12, 0xCu);
    }
    return 0;
  }
  v4 = atomic_load((unsigned int *)(v3 + 704));
  if (v4 != 2)
    return 0;
  re::makeFontID((re::ecs2::DynamicTextComponent *)((char *)this + 72), (re::StringID *)&v12);
  v9 = re::TextManager::computeSize((_BOOL8)a2, (re::ecs2::DynamicTextComponent *)((char *)this + 32), (const re::FontID *)&v12, v6, v7, v8);
  re::StringID::destroyString((re::StringID *)&v12);
  return v9;
}

uint64_t re::ecs2::DynamicTextSystem::updateScenes(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _UNKNOWN **v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  re::ecs2::DynamicTextComponent **v12;
  uint64_t v13;
  uint64_t v14;
  _anonymous_namespace_ *v15;
  int v16;
  signed int v17;
  _anonymous_namespace_ *v18;
  _anonymous_namespace_ *v19;
  uint64_t v20;
  re::ecs2::DynamicTextComponent **v21;
  uint64_t v22;
  char *var1;
  __int32 v24;
  uint64_t v25;
  int *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int32 v39;
  __int32 v40;
  double v41;
  re::ecs2::DynamicTextComponent **v42;
  re::ecs2::TransformComponent **v43;
  re *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  float32x4_t v51;
  char v52;
  __int128 v53;
  uint8_t v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  unint64_t v61;
  re::StringID *v62;
  float32x4_t v63;
  float32x4_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  re::DynamicString **v69;
  unsigned int v70;
  uint64_t v71;
  int *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  os_unfair_lock_s *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unsigned int v87;
  re::TextManager *v88;
  __int128 v89;
  char v90;
  float32x4_t v91;
  StringID v92;
  float32x4_t v93;
  float32x4_t v94;
  re::ecs2::DynamicTextComponent *v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  unsigned int v99;
  uint64_t v100;
  _BYTE v101[16];
  uint64_t v102[2];
  StringID v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint8_t buf[16];
  StringID v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;

  v2 = result;
  v121 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(result + 104);
  if (!v3 || (*(_BYTE *)(v3 + 424) & 0x10) != 0)
  {
    v4 = a2[1];
    if (v4)
    {
      v5 = (_QWORD *)*a2;
      v6 = *a2 + 8 * v4;
      v7 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
      v84 = v6;
      v86 = result;
      do
      {
        v8 = *v5;
        if (*v5)
        {
          v9 = *(_QWORD *)(v2 + 112);
          if (!v9)
          {
            re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateSceneInternal", 114);
            _os_crash();
            __break(1u);
          }
          v88 = *(re::TextManager **)(v9 + 72);
          if (v88)
          {
            v10 = *(unsigned __int8 **)(v9 + 152);
            v85 = v5;
            if (v10)
              v87 = *v10;
            else
              v87 = 0;
            re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v102);
            re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v8 + 200), (const re::ecs2::ComponentTypeBase *)v7[52]);
            re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v101, 3019, v2);
            v11 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v8 + 200), (const re::ecs2::ComponentTypeBase *)v7[52]);
            if (v11)
            {
              v12 = *(re::ecs2::DynamicTextComponent ***)(v11 + 40);
              v13 = *(_QWORD *)(v11 + 24);
            }
            else
            {
              v12 = 0;
              v13 = 0;
            }
            v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 136) + 24))(*(_QWORD *)(v2 + 136));
            v15 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
            v16 = *((_DWORD *)v15 + 31);
            if (!v16)
              v16 = *((_DWORD *)v15 + 4);
            v17 = v16 + 1;
            v99 = 0;
            v97 = 0u;
            v98 = 0u;
            v100 = 0x7FFFFFFFLL;
            v113.i32[0] = 0;
            *(_OWORD *)buf = 0u;
            v112 = (StringID)0;
            *(uint64_t *)((char *)v113.i64 + 4) = 0x7FFFFFFFLL;
            if (v13)
            {
              v20 = 8 * v13;
              v21 = v12;
              do
              {
                v22 = (uint64_t)*v21++;
                v91.i64[0] = 0;
                (*(void (**)(StringID *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v14 + 8))(&v103, v14, *(_QWORD *)(v22 + 16));
                if (v103.var0)
                  var1 = v103.var1;
                else
                  var1 = 0;
                v91.i64[0] = (uint64_t)var1;
                v103.var0 = 0;
                v19 = (_anonymous_namespace_ *)re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<int>((uint64_t)buf, (uint64_t *)&v91, (int *)&v103);
                ++*(_QWORD *)v19;
                v20 -= 8;
              }
              while (v20);
            }
            v24 = v113.i32[0];
            if (v113.i32[0])
            {
              v25 = 0;
              v26 = (int *)(*(_QWORD *)&v112.var0 + 8);
              while (1)
              {
                v27 = *v26;
                v26 += 8;
                if (v27 < 0)
                  break;
                if (v113.u32[0] == ++v25)
                {
                  LODWORD(v25) = v113.i32[0];
                  break;
                }
              }
            }
            else
            {
              LODWORD(v25) = 0;
            }
            if (v113.i32[0] != (_DWORD)v25)
            {
              v28 = v25;
              v29 = *(_QWORD *)&v112.var0;
              do
              {
                v30 = v29 + 32 * v28;
                v31 = *(_QWORD *)(v30 + 24);
                v105.i64[0] = 0;
                v103.var1 = 0;
                v104.i64[0] = 0;
                *(_QWORD *)&v103.var0 = 0;
                v104.i32[2] = 0;
                re::DynamicArray<re::RenderText>::setCapacity(&v103, v31);
                v34 = *(_QWORD *)(v30 + 16);
                v33 = (_QWORD *)(v30 + 16);
                v32 = v34;
                ++v104.i32[2];
                v35 = 0x94D049BB133111EBLL
                    * ((0xBF58476D1CE4E5B9 * (v34 ^ (v34 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v34 ^ (v34 >> 30))) >> 27));
                v36 = v35 ^ (v35 >> 31);
                if ((_QWORD)v97)
                {
                  v37 = v36 % DWORD2(v98);
                  v38 = *(unsigned int *)(*((_QWORD *)&v97 + 1) + 4 * v37);
                  if ((_DWORD)v38 != 0x7FFFFFFF)
                  {
                    while (*(_QWORD *)(v98 + (v38 << 6) + 16) != v32)
                    {
                      v38 = *(_DWORD *)(v98 + (v38 << 6) + 8) & 0x7FFFFFFF;
                      if ((_DWORD)v38 == 0x7FFFFFFF)
                        goto LABEL_36;
                    }
                    goto LABEL_37;
                  }
                }
                else
                {
                  LODWORD(v37) = 0;
                }
LABEL_36:
                re::HashTable<unsigned long long,re::DynamicArray<re::RenderText>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)&v97, v37, v36, v33, (uint64_t)&v103);
                ++HIDWORD(v100);
LABEL_37:
                v19 = (_anonymous_namespace_ *)re::DynamicArray<re::RenderText>::deinit((uint64_t)&v103);
                v29 = *(_QWORD *)&v112.var0;
                if (v113.i32[0] <= (v25 + 1))
                  v39 = v25 + 1;
                else
                  v39 = v113.i32[0];
                while (1)
                {
                  v28 = (v25 + 1);
                  if (v39 - 1 == (_DWORD)v25)
                    break;
                  LODWORD(v25) = v25 + 1;
                  v40 = v28;
                  if ((*(_DWORD *)(*(_QWORD *)&v112.var0 + 32 * v28 + 8) & 0x80000000) != 0)
                    goto LABEL_44;
                }
                v40 = v39;
LABEL_44:
                LODWORD(v25) = v40;
              }
              while (v24 != v40);
            }
            v41 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)buf);
            v96 = (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(v86 + 144) + 16))(*(_QWORD *)(v86 + 144), v41);
            if (v13)
            {
              v42 = &v12[v13];
              do
              {
                v95 = *v12;
                v43 = (re::ecs2::TransformComponent **)*((_QWORD *)v95 + 2);
                v44 = (re *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)&v96, (unint64_t)v43);
                if (*(_BYTE *)v44)
                {
                  v45 = *((_QWORD *)v95 + 10);
                  if (v45)
                  {
                    v46 = *((_QWORD *)v95 + 5);
                    if ((v46 & 1) != 0)
                      v47 = v46 >> 1;
                    else
                      v47 = v46 >> 1;
                    if (v47)
                    {
                      v48 = atomic_load((unsigned int *)(v45 + 704));
                      if (v48 == 2)
                      {
                        re::ecs2::TransformComponent::worldMatrix4x4F(v43, (const re::ecs2::Entity *)1, &v91);
                        if (*((_DWORD *)v95 + 16) == 1)
                        {
                          v49 = re::ecs2::DynamicTextComponent::computeObjectSpaceSize(v95, v88);
                          v50 = 0;
                          v51 = vnegq_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v91, *(float *)&v49 * 0.5), (float32x4_t)0, (float32x4_t)v92), (float32x4_t)0, v93), vmlaq_f32(vmlaq_n_f32(vmulq_f32(v91, (float32x4_t)0), (float32x4_t)v92, *((float *)&v49 + 1) * -0.5), (float32x4_t)0, v93)));
                          v51.i32[3] = 1.0;
                          v103 = (StringID)v91;
                          v104 = (float32x4_t)v92;
                          v105 = v93;
                          v106 = v94;
                          do
                          {
                            *(float32x4_t *)&buf[v50] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2260E5F10, COERCE_FLOAT(*(_OWORD *)((char *)&v103 + v50))), (float32x4_t)xmmword_2260E5F20, *(float32x2_t *)((char *)&v103.var0 + v50), 1), (float32x4_t)xmmword_2260E5F40, *(float32x4_t *)((char *)&v103 + v50), 2), v51, *(float32x4_t *)((char *)&v103 + v50), 3);
                            v50 += 16;
                          }
                          while (v50 != 64);
                          v91 = *(float32x4_t *)buf;
                          v92 = v112;
                          v93 = v113;
                          v94 = v114;
                        }
                        re::StringID::invalid((re::StringID *)buf);
                        v112.var1 = (char *)0x3F8000003F800000;
                        *(_QWORD *)&v112.var0 = 0x3F8000003F800000;
                        v113 = 0u;
                        v114 = 0u;
                        v115 = 0u;
                        v116 = 0u;
                        v117 = -1;
                        v118 = 0;
                        v119 = 0;
                        v120 = re::kInvalidStringRenderHandle;
                        v52 = *((_BYTE *)v95 + 112);
                        v89 = *((_OWORD *)v95 + 6);
                        v90 = v52;
                        re::ColorGamut4F::as((uint64_t)&v89, v87, 1, (uint64_t)&v103);
                        v112 = v103;
                        re::makeFontID((re::ecs2::DynamicTextComponent *)((char *)v95 + 72), (re::StringID *)&v89);
                        v53 = v89;
                        *(_QWORD *)&v89 = 0;
                        *((_QWORD *)&v89 + 1) = &str_110;
                        v54 = buf[0];
                        v55 = *(char **)&buf[8];
                        *(_OWORD *)buf = v53;
                        *(_QWORD *)&v103.var0 = v53 & 0xFFFFFFFFFFFFFFFELL | v54 & 1;
                        v103.var1 = v55;
                        re::StringID::destroyString((re::StringID *)&v103);
                        re::StringID::destroyString((re::StringID *)&v89);
                        v113 = v91;
                        v114 = (float32x4_t)v92;
                        v115 = v93;
                        v116 = v94;
                        re::StringID::invalid((re::StringID *)&v103);
                        v104.i64[0] = 0x3F8000003F800000;
                        v104.i64[1] = 0x3F8000003F800000;
                        v105 = 0u;
                        v106 = 0u;
                        v107 = 0u;
                        v108 = 0u;
                        v109 = 0u;
                        v110 = -1;
                        re::TextManager::drawDynamicText((uint64_t)v88, (uint64_t)&v103, (_QWORD *)v95 + 4, (uint64_t)buf);
                        (*(void (**)(__int128 *__return_ptr, uint64_t, re::ecs2::TransformComponent **))(*(_QWORD *)v14 + 8))(&v89, v14, v43);
                        if ((_BYTE)v89)
                          v56 = *((_QWORD *)&v89 + 1);
                        else
                          v56 = 0;
                        if ((_QWORD)v97)
                        {
                          v57 = 0x94D049BB133111EBLL
                              * ((0xBF58476D1CE4E5B9 * (v56 ^ (v56 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                * (v56 ^ (v56 >> 30))) >> 27));
                          v58 = *(unsigned int *)(*((_QWORD *)&v97 + 1) + 4 * ((v57 ^ (v57 >> 31)) % DWORD2(v98)));
                          if ((_DWORD)v58 == 0x7FFFFFFF)
                          {
LABEL_65:
                            v59 = 0;
                          }
                          else
                          {
                            while (*(_QWORD *)(v98 + (v58 << 6) + 16) != v56)
                            {
                              v58 = *(_DWORD *)(v98 + (v58 << 6) + 8) & 0x7FFFFFFF;
                              if ((_DWORD)v58 == 0x7FFFFFFF)
                                goto LABEL_65;
                            }
                            v59 = v98 + (v58 << 6) + 24;
                          }
                        }
                        else
                        {
                          v59 = 0;
                        }
                        v61 = *(_QWORD *)(v59 + 16);
                        if (v61 >= *(_QWORD *)(v59 + 8))
                        {
                          re::DynamicArray<re::RenderText>::growCapacity((_QWORD *)v59, v61 + 1);
                          v61 = *(_QWORD *)(v59 + 16);
                        }
                        v62 = re::StringID::StringID((re::StringID *)(*(_QWORD *)(v59 + 32) + (v61 << 7)), &v103);
                        v63 = v104;
                        v64 = v106;
                        *((float32x4_t *)v62 + 2) = v105;
                        *((float32x4_t *)v62 + 3) = v64;
                        *((float32x4_t *)v62 + 1) = v63;
                        v65 = v107;
                        v66 = v108;
                        v67 = v109;
                        *((_QWORD *)v62 + 14) = v110;
                        *((_OWORD *)v62 + 5) = v66;
                        *((_OWORD *)v62 + 6) = v67;
                        *((_OWORD *)v62 + 4) = v65;
                        ++*(_QWORD *)(v59 + 16);
                        ++*(_DWORD *)(v59 + 24);
                        re::StringID::destroyString((re::StringID *)&v103);
                        re::StringID::destroyString((re::StringID *)buf);
                      }
                      else
                      {
                        re::AssetHandle::loadAsync((re::ecs2::DynamicTextComponent *)((char *)v95 + 72));
                      }
                    }
                  }
                  else
                  {
                    v60 = *re::ecsComponentsLogObjects(v44);
                    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 134217984;
                      *(_QWORD *)&buf[4] = &v95;
                      _os_log_impl(&dword_224FE9000, v60, OS_LOG_TYPE_DEFAULT, "DynamicTextComponent %p has null font asset.", buf, 0xCu);
                    }
                  }
                }
                ++v12;
              }
              while (v12 != v42);
            }
            v68 = *(_QWORD *)(*(_QWORD *)(v86 + 112) + 104);
            if (v68)
              v69 = (re::DynamicString **)re::RenderFrameBox::get(v68 + 344, 0xFFFFFFFFFFFFFFFuLL);
            else
              v69 = 0;
            v70 = v99;
            if (v99)
            {
              v71 = 0;
              v72 = (int *)(v98 + 8);
              while (1)
              {
                v73 = *v72;
                v72 += 16;
                if (v73 < 0)
                  break;
                if (v99 == ++v71)
                {
                  LODWORD(v71) = v99;
                  break;
                }
              }
            }
            else
            {
              LODWORD(v71) = 0;
            }
            if (v99 != (_DWORD)v71)
            {
              v74 = v71;
              v75 = v98;
              v76 = v99;
              do
              {
                v77 = v75 + (v74 << 6);
                v78 = (_QWORD *)(v77 + 40);
                if (*(_QWORD *)(v77 + 40))
                {
                  re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot((re::ecs2::RenderingSubsystem *)v8, *(const re::ecs2::Scene **)(v77 + 16), v69, buf);
                  if (*v78)
                  {
                    *(_QWORD *)&v103.var0 = *(_QWORD *)buf >> 1;
                    v79 = re::RenderFrameData::stream((re::RenderFrameData *)(v69 + 33), (const re::WeakStringID *)&v103);
                    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v79 + 48) + 712))(*(_QWORD *)(v79 + 48), v78 - 2);
                    v76 = v99;
                    v75 = v98;
                  }
                  re::StringID::destroyString((re::StringID *)buf);
                }
                if (v76 <= (int)v71 + 1)
                  v80 = v71 + 1;
                else
                  v80 = v76;
                while (1)
                {
                  v74 = (v71 + 1);
                  if (v80 - 1 == (_DWORD)v71)
                    break;
                  LODWORD(v71) = v71 + 1;
                  v81 = v74;
                  if ((*(_DWORD *)(v75 + (v74 << 6) + 8) & 0x80000000) != 0)
                    goto LABEL_97;
                }
                v81 = v80;
LABEL_97:
                LODWORD(v71) = v81;
              }
              while (v70 != v81);
            }
            re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot((re::ecs2::RenderingSubsystem *)v8, 0, v69, buf);
            v2 = v86;
            v82 = *(_QWORD *)(*(_QWORD *)(v86 + 112) + 104);
            if (v82)
              v83 = *(os_unfair_lock_s **)(v82 + 304);
            else
              v83 = 0;
            v6 = v84;
            v7 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
            v5 = v85;
            *(_QWORD *)&v103.var0 = *(_QWORD *)buf >> 1;
            re::DebugRenderer::appendDebugTextToRenderFrame(v83, (re::RenderFrame *)v69, (const re::WeakStringID *)&v103);
            re::StringID::destroyString((re::StringID *)buf);
            re::HashTable<unsigned long long,re::DynamicArray<re::RenderText>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v97);
            re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v101);
            result = re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v102);
          }
        }
        ++v5;
      }
      while (v5 != (_QWORD *)v6);
    }
  }
  return result;
}

void re::ecs2::DynamicTextSystem::~DynamicTextSystem(re::ecs2::DynamicTextSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::DynamicTextSystem::typeInfo(re::ecs2::DynamicTextSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DynamicTextSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DynamicTextSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DynamicTextSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DynamicTextSystem>, 0);
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::DynamicTextComponent>(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v2 = (_QWORD *)(a1 + 32);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = off_24ED5A680;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  re::DynamicString::setCapacity(v2, 0);
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0x3F8000003F800000;
  *(_QWORD *)(a1 + 104) = 0x3F8000003F800000;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::DynamicTextSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::DynamicTextSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

double re::HashTable<unsigned long long,re::DynamicArray<re::RenderText>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicArray<re::RenderText>::deinit(v6 + 24);
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 64;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

_QWORD *re::DynamicArray<re::RenderText>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RenderText>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 57)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 128, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 7;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 7, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[16 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *v8 = 0;
          v8[1] = (uint64_t)&str_110;
          v13 = v8[14];
          v14 = *((_OWORD *)v8 + 4);
          v15 = *((_OWORD *)v8 + 6);
          *((_OWORD *)v11 + 5) = *((_OWORD *)v8 + 5);
          *((_OWORD *)v11 + 6) = v15;
          *((_OWORD *)v11 + 4) = v14;
          v17 = *((_OWORD *)v8 + 2);
          v16 = *((_OWORD *)v8 + 3);
          *((_OWORD *)v11 + 1) = *((_OWORD *)v8 + 1);
          *((_OWORD *)v11 + 2) = v17;
          *((_OWORD *)v11 + 3) = v16;
          v11[14] = v13;
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 16;
          v11 += 16;
        }
        while (v8 != v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderText>::deinit(uint64_t a1)
{
  uint64_t result;
  re::StringID *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(re::StringID **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = v4 << 7;
        do
        {
          re::StringID::destroyString(v3);
          v3 = (re::StringID *)((char *)v3 + 128);
          v5 -= 128;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(re::StringID **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::StringID *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::HashTable<unsigned long long,re::DynamicArray<re::RenderText>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(_QWORD *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v28, v13, v12);
          v15 = *(_OWORD *)v28;
          *(_OWORD *)v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v28[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v28[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::DynamicArray<re::RenderText>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 64;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::DynamicArray<re::RenderText>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + (v9 << 6) + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6)) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 16) = *a4;
  v25 = *(_QWORD *)(a1 + 16) + (v9 << 6);
  *(_QWORD *)(v25 + 56) = 0;
  *(_DWORD *)(v25 + 48) = 0;
  *(_QWORD *)(v25 + 32) = 0;
  *(_QWORD *)(v25 + 40) = 0;
  *(_QWORD *)(v25 + 24) = 0;
  *(_QWORD *)(v25 + 24) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(v25 + 32) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = 0;
  v26 = *(_QWORD *)(v25 + 40);
  *(_QWORD *)(v25 + 40) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v26;
  v27 = *(_QWORD *)(v25 + 56);
  *(_QWORD *)(v25 + 56) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v27;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v25 + 48);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

_QWORD *re::DynamicArray<re::RenderText>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RenderText>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderText>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t *re::ecs2::allocInfo_ReplayEntityState(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_184);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_184))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410A5E0, 0);
    *(uint64_t *)((char *)&qword_25410A5F0 + 6) = 0;
    qword_25410A5F0 = 0;
    qword_25410A600 = 0;
    qword_25410A608 = 0xFFFFFFFFLL;
    qword_25410A5E0 = (uint64_t)&off_24ED7DAA8;
    qword_25410A610 = (uint64_t)"ReplayEntityState";
    dword_25410A618 = 0;
    unk_25410A620 = 0u;
    unk_25410A630 = 0u;
    unk_25410A640 = 0u;
    qword_25410A650 = 0;
    __cxa_guard_release(&_MergedGlobals_184);
  }
  return &qword_25410A5E0;
}

void re::ecs2::initInfo_ReplayEntityState(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;

  v19[0] = 0xB913E3D0408EBFCELL;
  v19[1] = "ReplayEntityState";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  v4 = atomic_load((unsigned __int8 *)&qword_25410A580);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410A580);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::DynamicString>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "name";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_25410A5C8 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_uint64_t((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "parent";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x2000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_25410A5D0 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_uint8_t((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "active";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x2800000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_25410A5D8 = v17;
      __cxa_guard_release(&qword_25410A580);
    }
  }
  *((_QWORD *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_25410A5C8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ReplayEntityState>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ReplayEntityState>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ReplayEntityState>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ReplayEntityState>;
  re::IntrospectionRegistry::add(this, v3);
  v18 = v20;
}

_QWORD *re::internal::defaultConstruct<re::ecs2::ReplayEntityState>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return re::DynamicString::setCapacity((_QWORD *)a3, 0);
}

double re::internal::defaultDestruct<re::ecs2::ReplayEntityState>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  double result;

  if (*a3)
  {
    if ((a3[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 40))(*a3, a3[2]);
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }
  return result;
}

_QWORD *re::internal::defaultConstructV2<re::ecs2::ReplayEntityState>(_anonymous_namespace_ *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  return re::DynamicString::setCapacity(a1, 0);
}

double re::internal::defaultDestructV2<re::ecs2::ReplayEntityState>(uint64_t *a1)
{
  uint64_t v2;
  double result;

  v2 = *a1;
  if (v2)
  {
    if ((a1[1] & 1) != 0)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[2]);
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

double re::ecs2::StateRecorderSystem::StateRecorderSystem(re::ecs2::StateRecorderSystem *this)
{
  uint64_t v1;
  double result;

  re::ecs2::System::System((uint64_t)this, 2);
  *(_QWORD *)v1 = &off_24ED5BE80;
  *(_WORD *)(v1 + 104) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 140) = 0u;
  *(_QWORD *)(v1 + 156) = 0x7FFFFFFFLL;
  *(_QWORD *)(v1 + 208) = 0;
  *(_BYTE *)(v1 + 216) = 0;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_DWORD *)(v1 + 256) = 0;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_QWORD *)(v1 + 184) = 0;
  *(_QWORD *)(v1 + 192) = 0;
  *(_QWORD *)(v1 + 176) = 0;
  *(_BYTE *)(v1 + 200) = 0;
  *(_QWORD *)(v1 + 260) = 0x7FFFFFFFLL;
  *(_QWORD *)(v1 + 304) = 0;
  *(_QWORD *)(v1 + 272) = 0;
  *(_QWORD *)(v1 + 280) = 0;
  *(_DWORD *)(v1 + 296) = 0;
  *(_QWORD *)(v1 + 288) = 0;
  return result;
}

uint64_t re::ecs2::StateRecorderSystem::willAddSystemToECSService(re::ecs2::StateRecorderSystem *this)
{
  re::ecs2::StateRecorderSystem *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];
  char v12;

  v1 = this;
  if (!*((_BYTE *)this + 200))
  {
    v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
    this = (re::ecs2::StateRecorderSystem *)re::ServiceLocator::serviceOrNull<re::TraceService>(v2);
    *((_QWORD *)v1 + 23) = this;
  }
  v3 = re::globalAllocators(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 616, 8);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  re::DynamicString::setCapacity((_QWORD *)v4, 0);
  *(_QWORD *)(v4 + 48) = 0;
  *(_DWORD *)(v4 + 56) = -1;
  *(_QWORD *)(v4 + 96) = 0;
  *(_OWORD *)(v4 + 60) = 0u;
  *(_OWORD *)(v4 + 76) = 0u;
  re::ecs2::ECSJSONSerializer::ECSJSONSerializer((re::ecs2::ECSJSONSerializer *)(v4 + 104));
  v5 = atomic_load((unsigned __int8 *)&qword_25410A5A0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_25410A5A0))
  {
    qword_25410A598 = re::internal::getOrCreateInfo((re::internal *)"ReplayEntityState", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ReplayEntityState, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ReplayEntityState, (void (*)(re::IntrospectionBase *))&unk_25410A588, 0);
    __cxa_guard_release(&qword_25410A5A0);
  }
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  v11[0] = 0xB913E3D0408EBFCELL;
  v11[1] = "ReplayEntityState";
  v6 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v11);
  if (v6)
  {
    v7 = *v6;
  }
  else
  {
    v8 = 0;
    v7 = 0xFFFFFFFFLL;
  }
  *(_QWORD *)(v4 + 48) = v8;
  *(_QWORD *)(v4 + 56) = v7;
  re::StringID::destroyString((re::StringID *)v11);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear(v4 + 392);
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFuncs((_QWORD *)(v4 + 104));
  (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 104) + 32))(v4 + 104);
  *(_DWORD *)(v4 + 384) = *(_DWORD *)(*(_QWORD *)(v4 + 376) + 24);
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  *((_QWORD *)v1 + 26) = v4;
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v1 + 5) + 32))(*((_QWORD *)v1 + 5));
  result = re::ServiceLocator::serviceOrNull<re::EventBus>(v9);
  *((_QWORD *)v1 + 24) = result;
  return result;
}

re::ecs2::StateRecorderSystem *re::ecs2::StateRecorderSystem::willAddSceneToECSService(re::ecs2::StateRecorderSystem *this, re::EventBus **a2)
{
  if (*((_BYTE *)this + 104))
    return re::ecs2::StateRecorderSystem::startRecordingScene(this, a2);
  return this;
}

re::ecs2::StateRecorderSystem *re::ecs2::StateRecorderSystem::startRecordingScene(re::ecs2::StateRecorderSystem *this, re::EventBus **a2)
{
  re::EventBus *v3;
  re *v4;
  re *v5;
  unint64_t v6;
  __n128 v7;
  re *v8;
  re *v9;
  unint64_t v10;
  __n128 v11;
  re *v12;
  re *v13;
  unint64_t v14;
  __n128 v15;
  re *v16;
  re *v17;
  unint64_t v18;
  __n128 v19;
  re *v20;
  re *v21;
  unint64_t v22;
  __n128 v23;
  re *v24;
  re *v25;
  unint64_t v26;
  __n128 v27;
  re *v28;
  re *v29;
  unint64_t v30;
  __n128 v31;
  re *v32;
  _QWORD *v33;
  unint64_t v34;
  __n128 v35;
  __n128 v37;
  _QWORD v38[3];
  int v39;
  uint64_t v40;
  re::ecs2::Scene *v41;
  _BYTE v42[24];
  uint64_t v43;
  _BYTE *v44;
  _BYTE v45[24];
  uint64_t v46;
  re *v47;
  _BYTE v48[24];
  uint64_t v49;
  re *v50;
  _BYTE v51[24];
  uint64_t v52;
  re *v53;
  _BYTE v54[24];
  uint64_t v55;
  re *v56;
  _BYTE v57[24];
  uint64_t v58;
  re *v59;
  _BYTE v60[24];
  uint64_t v61;
  re *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v41 = (re::ecs2::Scene *)a2;
  v3 = a2[36];
  if (v3)
  {
    v40 = 0;
    v38[1] = 0;
    v38[2] = 0;
    v39 = 0;
    v4 = (re *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(v38, 8uLL);
    ++v39;
    v64 = re::globalAllocators(v4)[2];
    v65 = 0;
    v5 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
    *(_QWORD *)v5 = &off_24ED5BF08;
    *((_QWORD *)v5 + 1) = this;
    *((_QWORD *)v5 + 2) = re::ecs2::StateRecorderSystem::onEntityAdded;
    *((_QWORD *)v5 + 3) = 0;
    v65 = v5;
    v37.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidAddEvent>(v3, (uint64_t)v63, 0, 0);
    v37.n128_u64[1] = v6;
    v7 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)v38, &v37);
    v8 = v65;
    if (v65)
    {
      v8 = (re *)(**(uint64_t (***)(re *, __n128))v65)(v65, v7);
      if (v65 != (re *)v63)
        v8 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
      v65 = 0;
    }
    v61 = re::globalAllocators(v8)[2];
    v62 = 0;
    v9 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
    *(_QWORD *)v9 = &off_24ED5BF70;
    *((_QWORD *)v9 + 1) = this;
    *((_QWORD *)v9 + 2) = re::ecs2::StateRecorderSystem::onEntityRemoved;
    *((_QWORD *)v9 + 3) = 0;
    v62 = v9;
    v37.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v3, (uint64_t)v60, 0, 0);
    v37.n128_u64[1] = v10;
    v11 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)v38, &v37);
    v12 = v62;
    if (v62)
    {
      v12 = (re *)(**(uint64_t (***)(re *, __n128))v62)(v62, v11);
      if (v62 != (re *)v60)
        v12 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
      v62 = 0;
    }
    v58 = re::globalAllocators(v12)[2];
    v13 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v58 + 32))(v58, 32, 0);
    *(_QWORD *)v13 = &off_24ED5BFC8;
    *((_QWORD *)v13 + 1) = this;
    *((_QWORD *)v13 + 2) = re::ecs2::StateRecorderSystem::onEntityDidActivate;
    *((_QWORD *)v13 + 3) = 0;
    v59 = v13;
    v37.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidActivateEvent>(v3, (uint64_t)v57, 0, 0);
    v37.n128_u64[1] = v14;
    v15 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)v38, &v37);
    v16 = v59;
    if (v59)
    {
      v16 = (re *)(**(uint64_t (***)(re *, __n128))v59)(v59, v15);
      if (v59 != (re *)v57)
        v16 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 40))(v58);
      v59 = 0;
    }
    v55 = re::globalAllocators(v16)[2];
    v17 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v55 + 32))(v55, 32, 0);
    *(_QWORD *)v17 = &off_24ED5C020;
    *((_QWORD *)v17 + 1) = this;
    *((_QWORD *)v17 + 2) = re::ecs2::StateRecorderSystem::onEntityWillDeactivate;
    *((_QWORD *)v17 + 3) = 0;
    v56 = v17;
    v37.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillDeactivateEvent>(v3, (uint64_t)v54, 0, 0);
    v37.n128_u64[1] = v18;
    v19 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)v38, &v37);
    v20 = v56;
    if (v56)
    {
      v20 = (re *)(**(uint64_t (***)(re *, __n128))v56)(v56, v19);
      if (v56 != (re *)v54)
        v20 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 40))(v55);
      v56 = 0;
    }
    v52 = re::globalAllocators(v20)[2];
    v21 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v52 + 32))(v52, 32, 0);
    *(_QWORD *)v21 = &off_24ED5C078;
    *((_QWORD *)v21 + 1) = this;
    *((_QWORD *)v21 + 2) = re::ecs2::StateRecorderSystem::onEntityReparented;
    *((_QWORD *)v21 + 3) = 0;
    v53 = v21;
    v37.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v3, (uint64_t)v51, 0, 0);
    v37.n128_u64[1] = v22;
    v23 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)v38, &v37);
    v24 = v53;
    if (v53)
    {
      v24 = (re *)(**(uint64_t (***)(re *, __n128))v53)(v53, v23);
      if (v53 != (re *)v51)
        v24 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 40))(v52);
      v53 = 0;
    }
    v49 = re::globalAllocators(v24)[2];
    v25 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v49 + 32))(v49, 32, 0);
    *(_QWORD *)v25 = &off_24ED5C0D0;
    *((_QWORD *)v25 + 1) = this;
    *((_QWORD *)v25 + 2) = re::ecs2::StateRecorderSystem::onComponentAdded;
    *((_QWORD *)v25 + 3) = 0;
    v50 = v25;
    v37.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v3, (uint64_t)v48, 0, 0);
    v37.n128_u64[1] = v26;
    v27 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)v38, &v37);
    v28 = v50;
    if (v50)
    {
      v28 = (re *)(**(uint64_t (***)(re *, __n128))v50)(v50, v27);
      if (v50 != (re *)v48)
        v28 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 40))(v49);
      v50 = 0;
    }
    v46 = re::globalAllocators(v28)[2];
    v29 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 32, 0);
    *(_QWORD *)v29 = &off_24ED5C128;
    *((_QWORD *)v29 + 1) = this;
    *((_QWORD *)v29 + 2) = re::ecs2::StateRecorderSystem::onComponentDidChange;
    *((_QWORD *)v29 + 3) = 0;
    v47 = v29;
    v37.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v3, (uint64_t)v45, 0, 0);
    v37.n128_u64[1] = v30;
    v31 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)v38, &v37);
    v32 = v47;
    if (v47)
    {
      v32 = (re *)(**(uint64_t (***)(re *, __n128))v47)(v47, v31);
      if (v47 != (re *)v45)
        v32 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
      v47 = 0;
    }
    v43 = re::globalAllocators(v32)[2];
    v33 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v43 + 32))(v43, 32, 0);
    *v33 = &off_24ED5C180;
    v33[1] = this;
    v33[2] = re::ecs2::StateRecorderSystem::onComponentRemoved;
    v33[3] = 0;
    v44 = v33;
    v37.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v3, (uint64_t)v42, 0, 0);
    v37.n128_u64[1] = v34;
    v35 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)v38, &v37);
    if (v44)
    {
      (**(void (***)(_BYTE *, __n128))v44)(v44, v35);
      if (v44 != v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 40))(v43);
      v44 = 0;
    }
    re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 120, (uint64_t *)&v41, (uint64_t)v38);
    if (v38[0] && v40)
      (*(void (**)(void))(*(_QWORD *)v38[0] + 40))();
    a2 = (re::EventBus **)v41;
  }
  return re::ecs2::StateRecorderSystem::recordAllEntities(this, *((re::ecs2::Entity ****)a2[13] + 44));
}

uint64_t re::ecs2::StateRecorderSystem::willRemoveSceneFromECSService(uint64_t this, unint64_t a2)
{
  if (*(_BYTE *)(this + 104))
    return re::ecs2::StateRecorderSystem::stopRecordingScene(this, a2);
  return this;
}

uint64_t re::ecs2::StateRecorderSystem::stopRecordingScene(uint64_t this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v14 = a2;
  v2 = *(_QWORD *)(a2 + 288);
  if (v2)
  {
    v3 = this + 120;
    LODWORD(v4) = 0x7FFFFFFF;
    if (*(_QWORD *)(this + 120))
    {
      v5 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
      v6 = *(unsigned int *)(*(_QWORD *)(this + 128) + 4 * ((v5 ^ (v5 >> 31)) % *(unsigned int *)(this + 144)));
      if ((_DWORD)v6 != 0x7FFFFFFF)
      {
        v7 = *(_QWORD *)(this + 136);
        if (*(_QWORD *)(v7 + (v6 << 6) + 16) == a2)
        {
          LODWORD(v4) = v6;
        }
        else
        {
          v4 = v6;
          while (1)
          {
            v4 = *(_DWORD *)(v7 + (v4 << 6) + 8) & 0x7FFFFFFF;
            if ((_DWORD)v4 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v7 + (v4 << 6) + 16) == a2)
              goto LABEL_11;
          }
          LODWORD(v4) = 0x7FFFFFFF;
        }
      }
    }
LABEL_11:
    v8 = *(_QWORD *)(this + 136) + ((unint64_t)v4 << 6);
    v9 = *(_QWORD *)(v8 + 40);
    if (v9)
    {
      v10 = *(uint64_t **)(v8 + 56);
      v11 = &v10[2 * v9];
      do
      {
        v12 = *v10;
        v13 = v10[1];
        v10 += 2;
        re::EventBus::unsubscribe(v2, v12, v13);
      }
      while (v10 != v11);
    }
    return re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove(v3, (uint64_t *)&v14);
  }
  return this;
}

re *re::ecs2::StateRecorderSystem::willRemoveSystemFromECSService(re::ecs2::StateRecorderSystem *this)
{
  re *result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = re::ecs2::StateRecorderSystem::stopRecording(this);
  v3 = (_QWORD *)*((_QWORD *)this + 26);
  if (v3)
  {
    v4 = re::globalAllocators(result)[2];
    v3[13] = &off_24ED37338;
    v5 = v3[72];
    if (v5)
    {
      if (v3[76])
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      v3[76] = 0;
      v3[73] = 0;
      v3[74] = 0;
      v3[72] = 0;
      ++*((_DWORD *)v3 + 150);
    }
    v6 = v3[67];
    if (v6)
    {
      if (v3[71])
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
      v3[71] = 0;
      v3[68] = 0;
      v3[69] = 0;
      v3[67] = 0;
      ++*((_DWORD *)v3 + 140);
    }
    v7 = v3[62];
    if (v7)
    {
      if (v3[66])
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
      v3[66] = 0;
      v3[63] = 0;
      v3[64] = 0;
      v3[62] = 0;
      ++*((_DWORD *)v3 + 130);
    }
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v3 + 56);
    re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)(v3 + 13));
    v8 = v3[8];
    if (v8)
    {
      if (v3[12])
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
      v3[12] = 0;
      v3[9] = 0;
      v3[10] = 0;
      v3[8] = 0;
      ++*((_DWORD *)v3 + 22);
    }
    if (*v3)
    {
      if ((v3[1] & 1) != 0)
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v3 + 40))(*v3, v3[2]);
      *(_OWORD *)v3 = 0u;
      *((_OWORD *)v3 + 1) = 0u;
    }
    result = (re *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 24) = 0;
  return result;
}

re::EventBus *re::ecs2::StateRecorderSystem::stopRecording(re::EventBus *this)
{
  uint64_t v1;
  re *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  unsigned __int8 v12;
  re::EventBus *v13;
  const char *v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 104))
  {
    v1 = (uint64_t)this;
    *((_BYTE *)this + 104) = 0;
    if (*((_BYTE *)this + 216))
    {
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)this + 224);
      v2 = (re *)re::DynamicArray<re::TraceEntry>::clear((_QWORD *)(v1 + 272));
      *(_BYTE *)(v1 + 216) = 0;
      v3 = *re::ecsComponentsLogObjects(v2);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v16) = 0;
        _os_log_impl(&dword_224FE9000, v3, OS_LOG_TYPE_DEFAULT, "[StateRecorderSystem] Targeted mode stopped", (uint8_t *)&v16, 2u);
      }
    }
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 40) + 32))(*(_QWORD *)(v1 + 40));
    v5 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v4);
    if (v5)
    {
      v6 = v5;
      *(_QWORD *)&v16 = v1;
      *((_QWORD *)&v16 + 1) = re::ecs2::StateRecorderSystem::onEntityMetadataUpdated;
      v17 = 0;
      v18 = re::Event<re::NetworkSystem,re::ecs2::Entity *>::createSubscription<re::ecs2::StateRecorderSystem>(re::ecs2::StateRecorderSystem *,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::NetworkSystem*,re::ecs2::Entity *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Entity *>::Subscription const&,re::ecs2::Entity *&&)#1}::__invoke;
      re::Event<re::GeometricObjectBase>::removeSubscription(v5 + 616, &v16);
      *(_QWORD *)&v16 = v1;
      *((_QWORD *)&v16 + 1) = re::ecs2::StateRecorderSystem::onLocalComponentDidUpdated;
      v17 = 0;
      v18 = re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<re::ecs2::StateRecorderSystem>(re::ecs2::StateRecorderSystem *,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke;
      re::Event<re::GeometricObjectBase>::removeSubscription(v6 + 880, &v16);
      *(_QWORD *)&v16 = v1;
      *((_QWORD *)&v16 + 1) = re::ecs2::StateRecorderSystem::onEntityUpdatedFromNetwork;
      v17 = 0;
      v18 = re::Event<re::NetworkSystem,re::ecs2::Entity *>::createSubscription<re::ecs2::StateRecorderSystem>(re::ecs2::StateRecorderSystem *,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::NetworkSystem*,re::ecs2::Entity *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Entity *>::Subscription const&,re::ecs2::Entity *&&)#1}::__invoke;
      re::Event<re::GeometricObjectBase>::removeSubscription(v6 + 88, &v16);
      *(_QWORD *)&v16 = v1;
      *((_QWORD *)&v16 + 1) = re::ecs2::StateRecorderSystem::onComponentUpdatedFromNetwork;
      v17 = 0;
      v18 = re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<re::ecs2::StateRecorderSystem>(re::ecs2::StateRecorderSystem *,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke;
      re::Event<re::GeometricObjectBase>::removeSubscription(v6 + 352, &v16);
    }
    while (*(_DWORD *)(v1 + 148))
    {
      v7 = *(unsigned int *)(v1 + 152);
      v8 = *(_QWORD *)(v1 + 136);
      v9 = 0;
      if ((_DWORD)v7)
      {
        v10 = (int *)(v8 + 8);
        while (1)
        {
          v11 = *v10;
          v10 += 16;
          if (v11 < 0)
            break;
          if (v7 == ++v9)
          {
            LODWORD(v9) = *(_DWORD *)(v1 + 152);
            break;
          }
        }
      }
      re::ecs2::StateRecorderSystem::stopRecordingScene(v1, *(_QWORD *)(v8 + ((unint64_t)v9 << 6) + 16));
    }
    re::internal::destroyPersistent<re::TraceDelta>((re *)"stopRecording", 265, *(_QWORD *)(v1 + 168));
    *(_QWORD *)(v1 + 168) = 0;
    this = *(re::EventBus **)(v1 + 192);
    if (this)
    {
      v12 = atomic_load((unsigned __int8 *)&qword_25410A5C0);
      if ((v12 & 1) == 0)
      {
        v13 = *(re::EventBus **)(v1 + 192);
        v15 = __cxa_guard_acquire(&qword_25410A5C0);
        this = v13;
        if (v15)
        {
          qword_25410A5B8 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"N2re4ecs225StateRecorderDidStopEventE" & 0x7FFFFFFFFFFFFFFFLL), v14);
          __cxa_guard_release(&qword_25410A5C0);
          this = v13;
        }
      }
      return (re::EventBus *)re::EventBus::publish(this, v1, qword_25410A5B8, (uint64_t)&v16, 1uLL, 0);
    }
  }
  return this;
}

uint64_t re::ecs2::StateRecorderSystem::onEntityMetadataUpdated(re::ecs2::StateRecorderSystem *this, re::NetworkSystem *a2, re::ecs2::Entity *a3)
{
  _QWORD *v5;

  re::ecs2::StateRecorderSystem::logEntityUpdated((uint64_t)this, (uint64_t)a3, 1);
  v5 = (_QWORD *)*((_QWORD *)a3 + 25);
  if (v5)
    re::ecs2::StateRecorderSystem::logComponentUpdated((uint64_t)this, v5, 1);
  return 0;
}

uint64_t re::ecs2::StateRecorderSystem::onLocalComponentDidUpdated(re::ecs2::StateRecorderSystem *this, re::NetworkSystem *a2, re::ecs2::Component *a3)
{
  re::ecs2::StateRecorderSystem::logComponentUpdated((uint64_t)this, a3, 1);
  return 0;
}

uint64_t re::ecs2::StateRecorderSystem::onEntityUpdatedFromNetwork(re::ecs2::StateRecorderSystem *this, re::NetworkSystem *a2, re::ecs2::Entity *a3)
{
  re::ecs2::StateRecorderSystem::logEntityUpdated((uint64_t)this, (uint64_t)a3, 2);
  return 0;
}

uint64_t re::ecs2::StateRecorderSystem::onComponentUpdatedFromNetwork(re::ecs2::StateRecorderSystem *this, re::NetworkSystem *a2, re::ecs2::Component *a3)
{
  re::ecs2::StateRecorderSystem::logComponentUpdated((uint64_t)this, a3, 2);
  return 0;
}

_QWORD *re::DynamicArray<re::TraceEntry>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = result;
  v2 = result[2];
  result[2] = 0;
  if (v2)
  {
    v3 = v2 << 6;
    v4 = (_QWORD *)(result[4] + 56);
    do
    {
      result = (_QWORD *)*(v4 - 4);
      if (result)
      {
        if (*v4)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
        *v4 = 0;
        *(v4 - 3) = 0;
        *(v4 - 2) = 0;
        *(v4 - 4) = 0;
        ++*((_DWORD *)v4 - 2);
      }
      v4 += 8;
      v3 -= 64;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

re *re::internal::destroyPersistent<re::TraceDelta>(re *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::DynamicArray<re::TraceEntry>::deinit(a3 + 16);
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

re::ecs2::StateRecorderSystem *re::ecs2::StateRecorderSystem::recordAllEntities(re::ecs2::StateRecorderSystem *this, re::ecs2::Entity ***a2)
{
  re::ecs2::StateRecorderSystem *v3;
  re::ecs2::Entity **v4;
  re::ecs2::Entity **v5;
  uint64_t v6;
  re::ecs2::Entity *v7;

  v3 = this;
  if (a2)
    this = (re::ecs2::StateRecorderSystem *)re::ecs2::StateRecorderSystem::recordEntity(this, (re::ecs2::Entity *)a2);
  v4 = a2[41];
  if (v4)
  {
    v5 = a2[43];
    v6 = 8 * (_QWORD)v4;
    do
    {
      v7 = *v5;
      if (!*((_BYTE *)v3 + 216)
        || (this = (re::ecs2::StateRecorderSystem *)re::ecs2::StateRecorderSystem::isAppTLE(v3, *v5), (_DWORD)this))
      {
        this = (re::ecs2::StateRecorderSystem *)re::ecs2::StateRecorderSystem::recordAllDescendants(v3, (re::ecs2::Entity ***)v7);
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  return this;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  _BYTE v9[24];
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a2 + 24);
  v11 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a2);
  v7 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidAddEvent>(a1, 0, (uint64_t)v9, a3, a4);
  if (v11)
  {
    (**(void (***)(_BYTE *))v11)(v11);
    if (v11 != v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  }
  return v7;
}

uint64_t re::ecs2::StateRecorderSystem::onEntityAdded(re::ecs2::StateRecorderSystem *this, re::ecs2::Entity *a2, re::ecs2::Entity **a3)
{
  uint64_t v6;
  re::ecs2::Entity *v7;
  uint64_t v8;
  uint64_t OwnerPeerID;
  re::ecs2::Entity *v10;
  char v11;
  uint64_t v13;

  if (a2)
  {
    if (*((_BYTE *)this + 216) && re::ecs2::StateRecorderSystem::shouldEntityBeInAppEntitySet(this, a2))
    {
      v6 = *((_QWORD *)a2 + 3);
      v7 = a2;
      if (v6)
      {
        v7 = a2;
        if ((*(_BYTE *)(v6 + 288) & 0x80) == 0)
        {
          do
          {
            v7 = (re::ecs2::Entity *)v6;
            v6 = *(_QWORD *)(v6 + 24);
          }
          while (v6 && (*(_BYTE *)(v6 + 288) & 0x80) == 0);
        }
      }
      v13 = *((_QWORD *)v7 + 37);
      if (!re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)this + 224, &v13))re::ecs2::StateRecorderSystem::recordAllDescendants(this, (re::ecs2::Entity ***)v7);
    }
    v8 = *((_QWORD *)a2 + 25);
    if (v8 && *(_QWORD *)(v8 + 32))
    {
      OwnerPeerID = RESyncableGetOwnerPeerID();
      v10 = *a3;
      if (OwnerPeerID)
      {
        v11 = 2;
LABEL_16:
        re::ecs2::StateRecorderSystem::logEntityAdded(this, v10, v11);
        return 0;
      }
    }
    else
    {
      v10 = *a3;
    }
    v11 = 1;
    goto LABEL_16;
  }
  return 0;
}

uint64_t re::ecs2::StateRecorderSystem::onEntityRemoved(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::StateRecorderSystem::logEntityRemoved(a1, *(_QWORD *)(*(_QWORD *)a3 + 296));
  return 0;
}

uint64_t re::ecs2::StateRecorderSystem::onEntityDidActivate(uint64_t a1, uint64_t a2)
{
  re::ecs2::StateRecorderSystem::logEntityUpdated(a1, a2, 1);
  return 0;
}

uint64_t re::ecs2::StateRecorderSystem::onEntityWillDeactivate(uint64_t a1, uint64_t a2)
{
  re::ecs2::StateRecorderSystem::logEntityUpdated(a1, a2, 1);
  return 0;
}

uint64_t re::ecs2::StateRecorderSystem::onEntityReparented(re::ecs2::StateRecorderSystem *a1, re::ecs2::Entity *a2, uint64_t a3)
{
  BOOL v6;
  int shouldEntityBeInAppEntitySet;
  uint64_t v8;
  re::ecs2::Entity ***v9;
  re::ecs2::Entity ***v10;
  re::ecs2::Entity **v12;

  if (!*((_BYTE *)a1 + 216))
    goto LABEL_14;
  v12 = (re::ecs2::Entity **)*((_QWORD *)a2 + 37);
  v6 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)a1 + 224, (uint64_t *)&v12);
  shouldEntityBeInAppEntitySet = re::ecs2::StateRecorderSystem::shouldEntityBeInAppEntitySet(a1, a2);
  if (!v6)
  {
    if (!shouldEntityBeInAppEntitySet)
      return 0;
    v8 = *((_QWORD *)a2 + 3);
    v9 = (re::ecs2::Entity ***)a2;
    if (v8)
    {
      v9 = (re::ecs2::Entity ***)a2;
      if ((*(_BYTE *)(v8 + 288) & 0x80) == 0)
      {
        do
        {
          v9 = (re::ecs2::Entity ***)v8;
          v8 = *(_QWORD *)(v8 + 24);
        }
        while (v8 && (*(_BYTE *)(v8 + 288) & 0x80) == 0);
      }
    }
    v12 = v9[37];
    if (re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)a1 + 224, (uint64_t *)&v12))
    {
      v10 = (re::ecs2::Entity ***)a2;
    }
    else
    {
      v10 = v9;
    }
    re::ecs2::StateRecorderSystem::recordAllDescendants(a1, v10);
LABEL_14:
    re::ecs2::StateRecorderSystem::logEntityUpdated((uint64_t)a1, *(_QWORD *)(a3 + 8), 1);
    return 0;
  }
  if ((shouldEntityBeInAppEntitySet & 1) != 0)
    goto LABEL_14;
  re::ecs2::StateRecorderSystem::logEntityRemoved((uint64_t)a1, *((_QWORD *)a2 + 37));
  return 0;
}

uint64_t re::ecs2::StateRecorderSystem::onComponentAdded(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  const re::ecs2::ComponentTypeBase *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = *(const re::ecs2::ComponentTypeBase **)(a3 + 8);
  v6 = (_QWORD *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), v5);
  if (v6)
  {
    re::ecs2::StateRecorderSystem::logComponentAdded(a1, v6);
  }
  else
  {
    v7 = *re::ecsComponentsLogObjects(0);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v9 = a2[37];
      v10 = a2[35];
      v11 = *((_QWORD *)v5 + 4);
      v12 = 134218499;
      v13 = v9;
      v14 = 2081;
      v15 = v10;
      v16 = 2081;
      v17 = v11;
      _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "[StateRecorderSystem] Received onComponentAdded event for entity id=%llu, name=%{private}s, component=%{private}s, but entity doesn't have such component.", (uint8_t *)&v12, 0x20u);
    }
  }
  return 0;
}

uint64_t re::ecs2::StateRecorderSystem::onComponentDidChange(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  const re::ecs2::ComponentTypeBase *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = *(const re::ecs2::ComponentTypeBase **)(a3 + 8);
  v6 = (_QWORD *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), v5);
  if (v6)
  {
    re::ecs2::StateRecorderSystem::logComponentUpdated(a1, v6, 1);
  }
  else
  {
    v7 = *re::ecsComponentsLogObjects(0);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v9 = a2[37];
      v10 = a2[35];
      v11 = *((_QWORD *)v5 + 4);
      v12 = 134218499;
      v13 = v9;
      v14 = 2081;
      v15 = v10;
      v16 = 2081;
      v17 = v11;
      _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "[StateRecorderSystem] Received onComponentDidChange event for entity id=%llu, name=%{private}s, component=%{private}s, but entity doesn't have such component.", (uint8_t *)&v12, 0x20u);
    }
  }
  return 0;
}

uint64_t re::ecs2::StateRecorderSystem::onComponentRemoved(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  const re::ecs2::ComponentTypeBase *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  __n128 v11;
  NSObject *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[22];
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v5 = *(const re::ecs2::ComponentTypeBase **)(a3 + 8);
  v6 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), v5);
  if (v6)
  {
    v7 = (_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 16);
    if (v8)
    {
      if (!*(_BYTE *)(a1 + 216)
        || (*(_QWORD *)v17 = *(_QWORD *)(v8 + 296),
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a1 + 224, (uint64_t *)v17)))
      {
        v9 = *(_QWORD *)(a1 + 168);
        if (v9)
        {
          v10 = (_anonymous_namespace_ *)(v9 + 16);
          *(_QWORD *)v17 = *(_QWORD *)(v7[2] + 296);
          *(_QWORD *)&v17[8] = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v7 + 40))(v7) + 24) >> 1;
          *(_WORD *)&v17[16] = 259;
          v23 = 0;
          v22 = 0;
          v20 = 0;
          v21 = 0;
          v19 = 0;
          v11 = re::DynamicArray<re::TraceEntry>::add(v10, (__n128 *)v17);
          if (v19)
          {
            if (v23)
              (*(void (**)(__n128))(*(_QWORD *)v19 + 40))(v11);
          }
        }
      }
    }
  }
  else
  {
    v12 = *re::ecsComponentsLogObjects(0);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v14 = a2[37];
      v15 = a2[35];
      v16 = *((_QWORD *)v5 + 4);
      *(_DWORD *)v17 = 134218499;
      *(_QWORD *)&v17[4] = v14;
      *(_WORD *)&v17[12] = 2081;
      *(_QWORD *)&v17[14] = v15;
      v18 = 2081;
      v19 = v16;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "[StateRecorderSystem] Received onComponentRemoved event for entity id=%llu, name=%{private}s, component=%{private}s, but entity doesn't have such component.", v17, 0x20u);
    }
  }
  return 0;
}

unint64_t re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + ((unint64_t)v13 << 6);
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + (v10 << 6) + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + (v10 << 6) + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + (v10 << 6);
  return v12 + 24;
}

uint64_t re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;

  if (!*(_QWORD *)a1)
    return 0;
  v3 = *a2;
  v4 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(v6 + 4 * v5);
  if ((_DWORD)v7 == 0x7FFFFFFF)
    return 0;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = v9 + (v7 << 6);
  if (*(_QWORD *)(v10 + 16) != v3)
  {
    while (1)
    {
      v11 = v7;
      v12 = *(_DWORD *)(v9 + (v7 << 6) + 8);
      v7 = v12 & 0x7FFFFFFF;
      if ((v12 & 0x7FFFFFFF) == 0x7FFFFFFF)
        return 0;
      v13 = v9 + (v7 << 6);
      if (*(_QWORD *)(v13 + 16) == v3)
      {
        *(_DWORD *)(v9 + ((unint64_t)v11 << 6) + 8) = *(_DWORD *)(v9 + ((unint64_t)v11 << 6) + 8) & 0x80000000 | *(_DWORD *)(v13 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v10 + 8) & 0x7FFFFFFF;
LABEL_9:
  re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::EntryWithHash::free(*(_QWORD *)(a1 + 16) + (v7 << 6));
  v14 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v7 << 6) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v7 << 6) + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v14 + 1;
  return 1;
}

void re::ecs2::StateRecorderSystem::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  id *v6;
  uint64_t v7;
  uint64_t v8;
  char *WeakRetained;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  _DWORD *v24;
  uint64_t v25;
  re *v26;
  uint64_t v27;
  NSObject *v28;
  re::EventBus *v29;
  unsigned __int8 v30;
  uint64_t v31;
  id *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  re::EventBus *v39;
  void *updated;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  size_t v48;
  __n128 v49;
  double Current;
  uint64_t v51;
  double v52;
  double *v53;
  uint64_t v54;
  uint64_t v55;
  id *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  re::ecs2::ComponentTypeRegistry *v60;
  char *v61;
  uint64_t v62;
  os_unfair_lock_s *v63;
  void **v64;
  uint64_t i;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const re::ecs2::ComponentTypeBase *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  re *v73;
  uint64_t v74;
  size_t v75;
  uint64_t v76;
  _anonymous_namespace_ *v77;
  NSObject *v78;
  NSObject *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  re *v85;
  uint64_t *v86;
  uint64_t v87;
  const char *v88;
  id *v89;
  _BYTE v91[22];
  char v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint8_t v99[4];
  char *v100;
  _BYTE v101[12];
  __int16 v102;
  char *v103;
  __n128 buf;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  void (**v108)(google::protobuf::io::CopyingOutputStreamAdaptor *__hidden);
  void **v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v115 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 120))(*(_QWORD *)(a1 + 40));
  if (v5)
  {
    v6 = (id *)v4;
    v7 = 0;
    v8 = 8 * v5;
    do
    {
      WeakRetained = (char *)objc_loadWeakRetained(v6);
      if (WeakRetained)
      {
        v10 = WeakRetained;
        v11 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(WeakRetained + 192), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (v11)
          v12 = *(_QWORD *)(v11 + 24);
        else
          v12 = 0;
        v7 += v12;

      }
      ++v6;
      v8 -= 8;
    }
    while (v8);
  }
  v13 = a1;
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v91, 3089, a1);
  if (a3 != 1)
    goto LABEL_115;
  v14 = *(_QWORD *)(a1 + 184);
  if (v14 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 72))(v14) || *(_BYTE *)(a1 + 105))
  {
    v15 = 1;
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 184);
    if (!v15)
    {
      if (!*(_BYTE *)(a1 + 104))
        goto LABEL_46;
      goto LABEL_45;
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 96))(v15);
  }
  if (*(_BYTE *)(a1 + 104))
  {
    if ((v15 & 1) != 0)
    {
      v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 88))(*(_QWORD *)(a1 + 184));
      if ((v15 & 1) == 0)
      {
        v16 = *(_QWORD *)(a1 + 168);
        *(_QWORD *)(v16 + 8) = 0;
        re::DynamicArray<re::TraceEntry>::clear((_QWORD *)(v16 + 16));
        **(_BYTE **)(a1 + 168) = 3;
        v17 = *(_QWORD *)(a1 + 184);
        if (v17 && ((*(void (**)(uint64_t))(*(_QWORD *)v17 + 104))(v17), v18))
        {
          *(_BYTE *)(a1 + 216) = 1;
        }
        else if (*(_BYTE *)(a1 + 216))
        {
          *(_BYTE *)(a1 + 216) = 0;
        }
        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a1 + 224);
        re::DynamicArray<re::TraceEntry>::clear((_QWORD *)(a1 + 272));
        v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 104))(*(_QWORD *)(a1 + 40));
        v35 = *(_QWORD *)(v15 + 24);
        if (v35)
        {
          v36 = *(uint64_t **)(v15 + 40);
          v37 = 8 * v35;
          do
          {
            v38 = *v36++;
            v15 = (uint64_t)re::ecs2::StateRecorderSystem::recordAllEntities((re::ecs2::StateRecorderSystem *)a1, *(re::ecs2::Entity ****)(*(_QWORD *)(v38 + 104) + 352));
            v37 -= 8;
          }
          while (v37);
        }
      }
      goto LABEL_46;
    }
LABEL_45:
    v15 = (uint64_t)re::ecs2::StateRecorderSystem::stopRecording((re::EventBus *)a1);
    goto LABEL_46;
  }
  if ((_DWORD)v15)
  {
    *(_BYTE *)(a1 + 104) = 1;
    v19 = re::globalAllocators((re *)v15);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19[2] + 32))(v19[2], 56, 8);
    *(_OWORD *)v20 = 0u;
    *(_OWORD *)(v20 + 16) = 0u;
    *(_OWORD *)(v20 + 32) = 0u;
    *(_QWORD *)(v20 + 48) = 0;
    *(_QWORD *)(a1 + 168) = v20;
    *(_BYTE *)v20 = 1;
    v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
    v22 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v21);
    if (v22)
    {
      v24 = (_DWORD *)v22;
      buf.n128_u64[0] = a1;
      buf.n128_u64[1] = (unint64_t)re::ecs2::StateRecorderSystem::onEntityMetadataUpdated;
      v105 = 0;
      v106 = re::Event<re::NetworkSystem,re::ecs2::Entity *>::createSubscription<re::ecs2::StateRecorderSystem>(re::ecs2::StateRecorderSystem *,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::NetworkSystem*,re::ecs2::Entity *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Entity *>::Subscription const&,re::ecs2::Entity *&&)#1}::__invoke;
      re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v22 + 616), (uint64_t)&buf);
      buf.n128_u64[0] = a1;
      buf.n128_u64[1] = (unint64_t)re::ecs2::StateRecorderSystem::onLocalComponentDidUpdated;
      v105 = 0;
      v106 = re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<re::ecs2::StateRecorderSystem>(re::ecs2::StateRecorderSystem *,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke;
      re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(v24 + 220, (uint64_t)&buf);
      buf.n128_u64[0] = a1;
      buf.n128_u64[1] = (unint64_t)re::ecs2::StateRecorderSystem::onEntityUpdatedFromNetwork;
      v105 = 0;
      v106 = re::Event<re::NetworkSystem,re::ecs2::Entity *>::createSubscription<re::ecs2::StateRecorderSystem>(re::ecs2::StateRecorderSystem *,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::NetworkSystem*,re::ecs2::Entity *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Entity *>::Subscription const&,re::ecs2::Entity *&&)#1}::__invoke;
      re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(v24 + 22, (uint64_t)&buf);
      buf.n128_u64[0] = a1;
      buf.n128_u64[1] = (unint64_t)re::ecs2::StateRecorderSystem::onComponentUpdatedFromNetwork;
      v105 = 0;
      v106 = re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<re::ecs2::StateRecorderSystem>(re::ecs2::StateRecorderSystem *,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke;
      v23.n128_f64[0] = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(v24 + 88, (uint64_t)&buf);
    }
    v25 = *(_QWORD *)(a1 + 184);
    if (v25)
    {
      v26 = (re *)(*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v25 + 104))(v25, v23);
      if (v27)
      {
        *(_BYTE *)(a1 + 216) = 1;
        v28 = *re::ecsComponentsLogObjects(v26);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          buf.n128_u16[0] = 0;
          _os_log_impl(&dword_224FE9000, v28, OS_LOG_TYPE_DEFAULT, "[StateRecorderSystem] Targeted mode started", (uint8_t *)&buf, 2u);
        }
      }
    }
    v29 = *(re::EventBus **)(a1 + 192);
    if (v29)
    {
      v30 = atomic_load((unsigned __int8 *)&qword_25410A5B0);
      if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_25410A5B0))
      {
        qword_25410A5A8 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"N2re4ecs227StateRecorderWillStartEventE" & 0x7FFFFFFFFFFFFFFFLL), v88);
        __cxa_guard_release(&qword_25410A5B0);
      }
      re::EventBus::publish(v29, a1, qword_25410A5A8, (uint64_t)&buf, 1uLL, 0);
    }
    v15 = (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 40) + 120))(*(_QWORD *)(a1 + 40), v23);
    if (v31)
    {
      v32 = (id *)v15;
      v33 = 8 * v31;
      do
      {
        v15 = (uint64_t)objc_loadWeakRetained(v32);
        if (v15)
        {
          v34 = (void *)v15;
          re::ecs2::StateRecorderSystem::startRecordingScene((re::ecs2::StateRecorderSystem *)a1, (re::EventBus **)(v15 - 8));

        }
        ++v32;
        v33 -= 8;
      }
      while (v33);
    }
  }
LABEL_46:
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_115;
  v39 = *(re::EventBus **)(a1 + 192);
  if (v39)
  {
    updated = re::EventBus::getTypeId<re::ecs2::StateRecorderWillUpdateEvent>();
    v15 = re::EventBus::publish(v39, a1, (uint64_t)updated, (uint64_t)&buf, 1uLL, 0);
  }
  v41 = re::ecs2::ComponentTypeRegistry::instance((re::ecs2::ComponentTypeRegistry *)v15);
  v42 = (uint64_t)v41;
  v43 = *((_QWORD *)v41 + 3);
  if (v43 != *(_QWORD *)(a1 + 176))
    goto LABEL_52;
  v41 = (char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 80))(*(_QWORD *)(a1 + 184));
  if ((v41 & 1) == 0)
  {
    v43 = *(_QWORD *)(v42 + 24);
LABEL_52:
    *(_QWORD *)(a1 + 176) = v43;
    v44 = re::globalAllocators((re *)v41);
    v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v44[2] + 32))(v44[2], 56, 8);
    *(_OWORD *)v45 = 0u;
    *(_OWORD *)(v45 + 16) = 0u;
    *(_OWORD *)(v45 + 32) = 0u;
    *(_QWORD *)(v45 + 48) = 0;
    *(_QWORD *)v101 = v45;
    *(_BYTE *)v45 = 4;
    if (*(_QWORD *)(v42 + 24))
    {
      v46 = 0;
      do
      {
        v47 = re::ecs2::ComponentTypeRegistry::operator[](v42, v46);
        v48 = strlen(*(const char **)(v47 + 32));
        buf.n128_u64[0] = *(_QWORD *)(v47 + 32);
        buf.n128_u64[1] = v48;
        re::DynamicArray<unsigned char>::DynamicArray((uint64_t)&v94, (uint64_t)&buf);
        buf = (__n128)(*(_QWORD *)(v47 + 24) >> 1);
        LOWORD(v105) = 1;
        re::DynamicArray<BOOL>::DynamicArray((uint64_t)&v106, &v94);
        v49 = re::DynamicArray<re::TraceEntry>::add((_anonymous_namespace_ *)(v45 + 16), &buf);
        if (v106 && v110)
          (*(void (**)(__n128))(*(_QWORD *)v106 + 40))(v49);
        if (v94 && v97)
          (*(void (**)(__n128))(*(_QWORD *)v94 + 40))(v49);
        ++v46;
      }
      while (v46 < *(_QWORD *)(v42 + 24));
    }
    Current = CFAbsoluteTimeGetCurrent();
    v13 = a1;
    if (Current < *(double *)(a1 + 112) + 0.0001)
      Current = *(double *)(a1 + 112) + 0.0001;
    *(double *)(v45 + 8) = Current;
    *(double *)(a1 + 112) = Current;
    re::TraceDelta::sort((re::TraceDelta *)v45);
    re::TraceDelta::reduce((_QWORD *)v45);
    v51 = *(_QWORD *)(a1 + 184);
    if (v51)
    {
      *(_QWORD *)v101 = 0;
      buf.n128_u64[0] = v45;
      (*(void (**)(uint64_t, __n128 *))(*(_QWORD *)v51 + 16))(v51, &buf);
      std::unique_ptr<re::TraceDelta,re::REDeleter<re::TraceDelta>>::~unique_ptr[abi:nn180100]((re *)&buf);
    }
    std::unique_ptr<re::TraceDelta,re::REDeleter<re::TraceDelta>>::~unique_ptr[abi:nn180100]((re *)v101);
  }
  if (*(_BYTE *)(v13 + 216))
    re::ecs2::StateRecorderSystem::processDeferredEntries((re::ecs2::StateRecorderSystem *)v13);
  v52 = CFAbsoluteTimeGetCurrent();
  if (v52 < *(double *)(v13 + 112) + 0.0001)
    v52 = *(double *)(v13 + 112) + 0.0001;
  v53 = *(double **)(v13 + 168);
  v53[1] = v52;
  *(double *)(v13 + 112) = v52;
  re::TraceDelta::sort((re::TraceDelta *)v53);
  re::TraceDelta::reduce(*(_QWORD **)(v13 + 168));
  v54 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 40) + 120))(*(_QWORD *)(v13 + 40));
  if (v55)
  {
    v56 = (id *)v54;
    v89 = (id *)(v54 + 8 * v55);
    do
    {
      v57 = objc_loadWeakRetained(v56);
      if (v57)
      {
        v58 = v57;
        v59 = *(_QWORD *)(v13 + 168);
        v60 = re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v92);
        v61 = re::ecs2::ComponentTypeRegistry::instance(v60);
        v62 = *(_QWORD *)(v59 + 32);
        if (v62)
        {
          v63 = (os_unfair_lock_s *)v61;
          v64 = (void **)(*(_QWORD *)(v59 + 48) + 56);
          for (i = v62 << 6; i; i -= 64)
          {
            if (*((unsigned __int8 *)v64 - 40) - 1 <= 1)
            {
              buf.n128_u64[0] = (unint64_t)*(v64 - 7);
              v66 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)(v58 + 18), (uint64_t *)&buf);
              if (v66)
              {
                v67 = *(_QWORD *)(v66 + 8);
                if (!v67)
                  goto LABEL_98;
              }
              else
              {
                v67 = v58[12];
                if (*(_QWORD *)(v67 + 296) != buf.n128_u64[0])
                  goto LABEL_98;
              }
              v68 = (uint64_t)*(v64 - 6);
              if (v68)
              {
                v69 = (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentTypeRegistry::componentTypeWithHash(v63, v68);
                if (!v69)
                  goto LABEL_98;
                v70 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v67 + 32), v69);
                if (!v70)
                  goto LABEL_98;
                v71 = v70;
                v72 = *(_QWORD *)(v13 + 208);
                *(_QWORD *)(v72 + 80) = 0;
                ++*(_DWORD *)(v72 + 88);
                buf.n128_u16[4] = 0;
                buf.n128_u64[0] = (unint64_t)&off_24ED7C190;
                v105 = v72 + 64;
                v106 = &unk_24ED7C1E8;
                v107 = 0;
                v108 = &off_24ED1E8F0;
                v109 = &v106;
                LOWORD(v110) = 0;
                v111 = 0;
                v112 = 0;
                v113 = 0x2000;
                v114 = 0;
                re::ecs2::serializeComponent<re::ecs2::ECSJSONSerializer>(v72 + 104, v70, (uint64_t)&buf, (uint64_t)&v94);
                if ((_BYTE)v94)
                {
                  buf.n128_u8[8] = 0;
                  google::protobuf::io::CopyingOutputStreamAdaptor::Flush((google::protobuf::io::CopyingOutputStreamAdaptor *)&v108);
                  re::DynamicArray<BOOL>::resize((uint64_t)(v64 - 4), *(_QWORD *)(v72 + 80));
                  memcpy(*v64, *(const void **)(v72 + 96), *(_QWORD *)(v72 + 80));
                }
                else
                {
                  v79 = *re::ecsComponentsLogObjects(v73);
                  if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
                  {
                    v81 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 40))(v71) + 32);
                    v82 = (char *)&v97 + 1;
                    if ((v97 & 1) != 0)
                      v82 = v98;
                    *(_DWORD *)v101 = 136315394;
                    *(_QWORD *)&v101[4] = v81;
                    v102 = 2080;
                    v103 = v82;
                    _os_log_error_impl(&dword_224FE9000, v79, OS_LOG_TYPE_ERROR, "[StateRecorderSystem] Failed to serialize %s. Details: %s", v101, 0x16u);
                  }
                }
                if (!(_BYTE)v94 && v96 && (v97 & 1) != 0)
                  (*(void (**)(void))(*(_QWORD *)v96 + 40))();
              }
              else
              {
                v74 = *(_QWORD *)(v13 + 208);
                v75 = strlen(*(const char **)(v67 + 280));
                buf.n128_u64[0] = *(_QWORD *)(v67 + 280);
                buf.n128_u64[1] = v75;
                re::DynamicString::operator=((re::DynamicString *)v74, (uint64_t)&buf);
                *(_BYTE *)(v74 + 40) = (*(_BYTE *)(v67 + 288) & 8) != 0;
                v76 = *(_QWORD *)(v67 + 24);
                if (v76)
                  v76 = *(_QWORD *)(v76 + 296);
                *(_QWORD *)(v74 + 32) = v76;
                *(_QWORD *)(v74 + 80) = 0;
                ++*(_DWORD *)(v74 + 88);
                buf.n128_u16[4] = 0;
                buf.n128_u64[0] = (unint64_t)&off_24ED7C190;
                v105 = v74 + 64;
                v106 = &unk_24ED7C1E8;
                v107 = 0;
                v108 = &off_24ED1E8F0;
                v109 = &v106;
                LOWORD(v110) = 0;
                v111 = 0;
                v112 = 0;
                v113 = 0x2000;
                v114 = 0;
                re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v93);
                re::TypeRegistry::typeInfo(*(re **)(v74 + 376), (re **)(v74 + 48), &v94);
                re::TypeInfo::TypeInfo((uint64_t)v101, (uint64_t)&v95);
                v77 = re::ecs2::serializeObject<re::ecs2::ECSJSONSerializer>(v74 + 104, v74, (uint64_t)v101, (uint64_t)&buf, (uint64_t)&v94);
                if ((_BYTE)v94)
                {
                  buf.n128_u8[8] = 0;
                  google::protobuf::io::CopyingOutputStreamAdaptor::Flush((google::protobuf::io::CopyingOutputStreamAdaptor *)&v108);
                  re::DynamicArray<BOOL>::resize((uint64_t)(v64 - 4), *(_QWORD *)(v74 + 80));
                  memcpy(*v64, *(const void **)(v74 + 96), *(_QWORD *)(v74 + 80));
                }
                else
                {
                  v78 = *re::ecsComponentsLogObjects(v77);
                  if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
                  {
                    v80 = (char *)&v97 + 1;
                    if ((v97 & 1) != 0)
                      v80 = v98;
                    *(_DWORD *)v99 = 136315138;
                    v100 = v80;
                    _os_log_error_impl(&dword_224FE9000, v78, OS_LOG_TYPE_ERROR, "[StateRecorderSystem] Failed to serialize entity state. Details: %s", v99, 0xCu);
                  }
                }
                if (!(_BYTE)v94 && v96 && (v97 & 1) != 0)
                  (*(void (**)(void))(*(_QWORD *)v96 + 40))();
                re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v93);
              }
              re::DynamicArrayBufferedOutputStream::~DynamicArrayBufferedOutputStream((re::DynamicArrayBufferedOutputStream *)&buf);
              v13 = a1;
            }
LABEL_98:
            v64 += 8;
          }
        }
        re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v92);

      }
      ++v56;
    }
    while (v56 != v89);
  }
  v83 = *(_QWORD *)(v13 + 184);
  v84 = *(_QWORD *)(v13 + 168);
  if (v83)
  {
    buf.n128_u64[0] = *(_QWORD *)(v13 + 168);
    (*(void (**)(uint64_t, __n128 *))(*(_QWORD *)v83 + 16))(v83, &buf);
    v85 = std::unique_ptr<re::TraceDelta,re::REDeleter<re::TraceDelta>>::~unique_ptr[abi:nn180100]((re *)&buf);
    v86 = re::globalAllocators(v85);
    v87 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v86[2] + 32))(v86[2], 56, 8);
    *(_OWORD *)v87 = 0u;
    *(_OWORD *)(v87 + 16) = 0u;
    *(_OWORD *)(v87 + 32) = 0u;
    *(_QWORD *)(v87 + 48) = 0;
    *(_QWORD *)(v13 + 168) = v87;
  }
  else
  {
    *(_QWORD *)(v84 + 8) = 0;
    re::DynamicArray<re::TraceEntry>::clear((_QWORD *)(v84 + 16));
    v87 = *(_QWORD *)(v13 + 168);
  }
  *(_BYTE *)v87 = 1;
LABEL_115:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v91);
}

__n128 re::DynamicArray<re::TraceEntry>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4;
  __n128 *v5;
  __n128 result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::TraceEntry>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = (__n128 *)(*((_QWORD *)this + 4) + (v4 << 6));
  result = *a2;
  v5[1].n128_u16[0] = a2[1].n128_u16[0];
  *v5 = result;
  v5[3].n128_u64[1] = 0;
  v5[2].n128_u64[0] = 0;
  v5[2].n128_u64[1] = 0;
  v5[1].n128_u64[1] = 0;
  v5[3].n128_u32[0] = 0;
  v7 = a2[2].n128_u64[0];
  v5[1].n128_u64[1] = a2[1].n128_u64[1];
  v5[2].n128_u64[0] = v7;
  a2[1].n128_u64[1] = 0;
  a2[2].n128_u64[0] = 0;
  v8 = v5[2].n128_u64[1];
  v5[2].n128_u64[1] = a2[2].n128_u64[1];
  a2[2].n128_u64[1] = v8;
  v9 = v5[3].n128_u64[1];
  v5[3].n128_u64[1] = a2[3].n128_u64[1];
  a2[3].n128_u64[1] = v9;
  ++a2[3].n128_u32[0];
  ++v5[3].n128_u32[0];
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::ecs2::StateRecorderSystem::recordEntity(re::ecs2::StateRecorderSystem *this, re::ecs2::Entity *a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  _QWORD *v8;

  result = (uint64_t)re::ecs2::StateRecorderSystem::logEntityAdded(this, a2, 1);
  v5 = *((_QWORD *)a2 + 7);
  if (v5)
  {
    v6 = (_QWORD **)*((_QWORD *)a2 + 9);
    v7 = 8 * v5;
    do
    {
      v8 = *v6++;
      result = re::ecs2::StateRecorderSystem::logComponentAdded((uint64_t)this, v8);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t re::ecs2::StateRecorderSystem::recordAllDescendants(re::ecs2::StateRecorderSystem *this, re::ecs2::Entity ***a2)
{
  uint64_t result;
  re::ecs2::Entity **v5;
  re::ecs2::Entity **v6;
  uint64_t v7;
  re::ecs2::Entity *v8;

  result = re::ecs2::StateRecorderSystem::recordEntity(this, (re::ecs2::Entity *)a2);
  v5 = a2[41];
  if (v5)
  {
    v6 = a2[43];
    v7 = 8 * (_QWORD)v5;
    do
    {
      v8 = *v6++;
      result = re::ecs2::StateRecorderSystem::recordAllDescendants(this, v8);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

_BYTE *re::ecs2::StateRecorderSystem::logEntityAdded(_BYTE *this, re::ecs2::Entity *a2, char a3)
{
  _BYTE *v5;
  uint64_t v6;
  __n128 v7;
  __n128 v8;
  char v9;
  char v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v5 = this;
  if (this[216])
  {
    this = (_BYTE *)re::ecs2::StateRecorderSystem::shouldEntityBeInAppEntitySet((re::ecs2::StateRecorderSystem *)this, a2);
    if (!(_DWORD)this)
      return this;
    v8.n128_u64[0] = *((_QWORD *)a2 + 37);
    this = (_BYTE *)re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)(v5 + 224), (uint64_t *)&v8);
  }
  v6 = *((_QWORD *)v5 + 21);
  if (v6)
  {
    v8 = (__n128)*((unint64_t *)a2 + 37);
    v9 = 1;
    v10 = a3;
    v15 = 0;
    v12 = 0;
    v13 = 0;
    v11 = 0;
    v14 = 0;
    v7 = re::DynamicArray<re::TraceEntry>::add((_anonymous_namespace_ *)(v6 + 16), &v8);
    this = v11;
    if (v11)
    {
      if (v15)
        return (_BYTE *)(*(uint64_t (**)(__n128))(*(_QWORD *)v11 + 40))(v7);
    }
  }
  return this;
}

uint64_t re::ecs2::StateRecorderSystem::logComponentAdded(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  _anonymous_namespace_ *v6;
  uint64_t v7;
  __int128 v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  *(_QWORD *)&v8 = *(_QWORD *)(a2[2] + 296);
  result = (*(uint64_t (**)(_QWORD *))(*a2 + 40))(a2);
  *((_QWORD *)&v8 + 1) = *(_QWORD *)(result + 24) >> 1;
  v9 = 257;
  v14 = 0;
  v13 = 0;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  if (*(_BYTE *)(a1 + 216)
    && (v7 = *(_QWORD *)(a2[2] + 296),
        result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a1 + 224, &v7), (result & 1) == 0))
  {
    v6 = (_anonymous_namespace_ *)(a1 + 272);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 168);
    if (!v5)
      return result;
    v6 = (_anonymous_namespace_ *)(v5 + 16);
  }
  re::DynamicArray<re::TraceEntry>::add(v6, &v8);
  result = v10;
  if (v10)
  {
    if (v14)
      return (*(uint64_t (**)(void))(*(_QWORD *)v10 + 40))();
  }
  return result;
}

uint64_t re::ecs2::StateRecorderSystem::logComponentUpdated(uint64_t result, _QWORD *a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _anonymous_namespace_ *v8;
  __n128 v9;
  __n128 v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v3 = a2[2];
  if (v3)
  {
    v6 = result;
    if (!*(_BYTE *)(result + 216)
      || (v10.n128_u64[0] = *(_QWORD *)(v3 + 296),
          result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(result + 224, (uint64_t *)&v10), (result & 1) != 0))
    {
      v7 = *(_QWORD *)(v6 + 168);
      if (v7)
      {
        v8 = (_anonymous_namespace_ *)(v7 + 16);
        v10.n128_u64[0] = *(_QWORD *)(a2[2] + 296);
        v10.n128_u64[1] = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*a2 + 40))(a2) + 24) >> 1;
        v11 = 2;
        v12 = a3;
        v17 = 0;
        v16 = 0;
        v14 = 0;
        v15 = 0;
        v13 = 0;
        v9 = re::DynamicArray<re::TraceEntry>::add(v8, &v10);
        result = v13;
        if (v13)
        {
          if (v17)
            return (*(uint64_t (**)(__n128))(*(_QWORD *)v13 + 40))(v9);
        }
      }
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::TraceEntry>::add(_anonymous_namespace_ *this, __int128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::TraceEntry>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + (v4 << 6);
  v6 = *a2;
  *(_WORD *)(v5 + 16) = *((_WORD *)a2 + 8);
  *(_OWORD *)v5 = v6;
  result = re::DynamicArray<BOOL>::DynamicArray(v5 + 24, (uint64_t *)a2 + 3);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::ecs2::StateRecorderSystem::logEntityUpdated(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  __n128 v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v5 = result;
  if (!*(_BYTE *)(result + 216)
    || (v8.n128_u64[0] = *(_QWORD *)(a2 + 296),
        result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(result + 224, (uint64_t *)&v8), (result & 1) != 0))
  {
    v6 = *(_QWORD *)(v5 + 168);
    if (v6)
    {
      v8 = (__n128)*(unint64_t *)(a2 + 296);
      v9 = 2;
      v10 = a3;
      v15 = 0;
      v12 = 0;
      v13 = 0;
      v11 = 0;
      v14 = 0;
      v7 = re::DynamicArray<re::TraceEntry>::add((_anonymous_namespace_ *)(v6 + 16), &v8);
      result = v11;
      if (v11)
      {
        if (v15)
          return (*(uint64_t (**)(__n128))(*(_QWORD *)v11 + 40))(v7);
      }
    }
  }
  return result;
}

uint64_t re::ecs2::StateRecorderSystem::logEntityRemoved(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v6 = (unint64_t)a2;
  v7 = 259;
  v12 = 0;
  v9 = 0;
  v10 = 0;
  v8 = 0;
  v11 = 0;
  if (*(_BYTE *)(a1 + 216))
  {
    v5 = a2;
    if (!re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a1 + 224, &v5))goto LABEL_6;
    re::DynamicArray<re::TraceEntry>::add((_anonymous_namespace_ *)(a1 + 272), &v6);
  }
  v3 = *(_QWORD *)(a1 + 168);
  if (v3)
    re::DynamicArray<re::TraceEntry>::add((_anonymous_namespace_ *)(v3 + 16), &v6);
LABEL_6:
  result = v8;
  if (v8)
  {
    if (v12)
      return (*(uint64_t (**)(void))(*(_QWORD *)v8 + 40))();
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_StateRecorderSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410A590);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410A590))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410A658, 0);
    *(uint64_t *)((char *)&qword_25410A668 + 6) = 0;
    qword_25410A668 = 0;
    qword_25410A678 = 0;
    qword_25410A680 = 0xFFFFFFFFLL;
    qword_25410A658 = (uint64_t)&off_24ED7DAA8;
    qword_25410A688 = (uint64_t)"StateRecorderSystem";
    dword_25410A690 = 0;
    xmmword_25410A698 = 0u;
    unk_25410A6A8 = 0u;
    xmmword_25410A6B8 = 0u;
    qword_25410A6C8 = 0;
    __cxa_guard_release(&qword_25410A590);
  }
  return &qword_25410A658;
}

void re::ecs2::initInfo_StateRecorderSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x8307BF99908B0EBCLL;
  v5[1] = "StateRecorderSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x13800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_StateRecorderSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::StateRecorderSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::StateRecorderSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::StateRecorderSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::StateRecorderSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::StateRecorderSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::StateRecorderSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::StateRecorderSystem>(int a1, int a2, re::ecs2::StateRecorderSystem *this)
{
  return re::ecs2::StateRecorderSystem::StateRecorderSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::StateRecorderSystem>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::DynamicArray<re::TraceEntry>::deinit((uint64_t)(a3 + 34));
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a3 + 28);
  re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(a3 + 15);
  *a3 = (uint64_t)&off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::StateRecorderSystem>(uint64_t *a1)
{
  re::DynamicArray<re::TraceEntry>::deinit((uint64_t)(a1 + 34));
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a1 + 28);
  re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(a1 + 15);
  *a1 = (uint64_t)&off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_StateRecorderSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"StateRecorderSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_StateRecorderSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_StateRecorderSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::StateRecorderSystem>, this);
}

void re::ecs2::StateRecorderSystem::~StateRecorderSystem(re::ecs2::StateRecorderSystem *this)
{
  re::DynamicArray<re::TraceEntry>::deinit((uint64_t)this + 272);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28);
  re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 15);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::DynamicArray<re::TraceEntry>::deinit((uint64_t)this + 272);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28);
  re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 15);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::StateRecorderSystem::typeInfo(re::ecs2::StateRecorderSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"StateRecorderSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_StateRecorderSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_StateRecorderSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::StateRecorderSystem>, 0);
}

void re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5BF08;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5BF08;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5BF70;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5BF70;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5BFC8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5BFC8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5C020;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5C020;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5C078;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5C078;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5C0D0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5C0D0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5C128;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5C128;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5C180;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5C180;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::StateRecorderSystem,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::size()
{
  return 32;
}

uint64_t re::DynamicArray<re::TraceEntry>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = v4 << 6;
        v6 = (_QWORD *)(v3 + 56);
        do
        {
          v7 = *(v6 - 4);
          if (v7)
          {
            if (*v6)
              (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
            *v6 = 0;
            *(v6 - 3) = 0;
            *(v6 - 2) = 0;
            *(v6 - 4) = 0;
            ++*((_DWORD *)v6 - 2);
          }
          v6 += 8;
          v5 -= 64;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::Event<re::NetworkSystem,re::ecs2::Entity *>::createSubscription<re::ecs2::StateRecorderSystem>(re::ecs2::StateRecorderSystem *,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::NetworkSystem*,re::ecs2::Entity *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Entity *>::Subscription const&,re::ecs2::Entity *&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3);
}

uint64_t re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<re::ecs2::StateRecorderSystem>(re::ecs2::StateRecorderSystem *,REEventHandlerResult (re::ecs2::StateRecorderSystem::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3);
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  void *Type;
  unint64_t EventInfo;
  uint64_t v12;
  uint64_t (**v14[6])();
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  Type = re::EventBus::getTypeId<RESceneEntityDidAddEvent>();
  EventInfo = re::EventBus::addOrGetEventInfo(a1, (uint64_t)Type);
  re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>(a3, a5, v14);
  v12 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)v14, a2, a4);
  if (v16)
  {
    ((void (*)(uint64_t (***)()))**v16)(v16);
    if (v16 != v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return v12;
}

uint64_t re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>@<X0>(uint64_t a1@<X2>, char a2@<W4>, uint64_t (***a3)()@<X8>)
{
  re *v4;
  uint64_t v5;
  uint64_t (**v6)();
  re *v7;
  uint64_t result;
  _BYTE v9[24];
  uint64_t (**v10)();
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10 = *(uint64_t (***)())(a1 + 24);
  v11 = 0;
  if ((a2 & 1) != 0)
  {
    v7 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a1);
    v5 = re::globalAllocators(v7)[2];
    v6 = &off_24ED5C1D8;
  }
  else
  {
    v4 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a1);
    v5 = re::globalAllocators(v4)[2];
    v6 = &off_24ED5C230;
  }
  a3[6] = (uint64_t (**)())v5;
  a3[7] = 0;
  *a3 = v6;
  a3[4] = v10;
  a3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a3 + 1), (uint64_t)v9);
  a3[7] = (uint64_t (**)())a3;
  result = (uint64_t)v11;
  if (v11)
  {
    result = (**(uint64_t (***)(_BYTE *))v11)(v11);
    if (v11 != v9)
      return (*((uint64_t (**)(uint64_t (**)()))*v10 + 5))(v10);
  }
  return result;
}

void *re::EventBus::getTypeId<RESceneEntityDidAddEvent>()
{
  unsigned __int8 v0;
  _UNKNOWN **v1;
  int v3;
  const char *v4;

  v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if ((v0 & 1) == 0)
  {
    v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (v3)
    {
      re::EventBus::getTypeId<RESceneEntityDidAddEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"24RESceneEntityDidAddEvent" & 0x7FFFFFFFFFFFFFFFLL), v4);
      v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    }
  }
  return v1[98];
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED5C1D8;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED5C1D8;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
  return 1;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED5C1D8;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED5C1D8;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED5C230;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED5C230;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED5C230;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED5C230;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

uint64_t re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + (v9 << 6) + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + (v9 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + (v9 << 6) + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6)) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 16) = *a4;
  v13 = *(_QWORD *)(a1 + 16) + (v9 << 6);
  *(_QWORD *)(v13 + 56) = 0;
  *(_DWORD *)(v13 + 48) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  v14 = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(v13 + 24) = *(_QWORD *)a5;
  *(_QWORD *)(v13 + 32) = v14;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v15 = *(_QWORD *)(v13 + 40);
  *(_QWORD *)(v13 + 40) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v15;
  v16 = *(_QWORD *)(v13 + 56);
  *(_QWORD *)(v13 + 56) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v16;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v13 + 48);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 24);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 64;
        }
        while (v11 < v9);
      }
      re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

void *re::EventBus::getTypeId<re::ecs2::StateRecorderWillUpdateEvent>()
{
  unsigned __int8 v0;
  _UNKNOWN **v1;
  int v3;
  const char *v4;

  v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if ((v0 & 1) == 0)
  {
    v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (v3)
    {
      re::EventBus::getTypeId<re::ecs2::StateRecorderWillUpdateEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"N2re4ecs228StateRecorderWillUpdateEventE" & 0x7FFFFFFFFFFFFFFFLL), v4);
      v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    }
  }
  return v1[96];
}

re *std::unique_ptr<re::TraceDelta,re::REDeleter<re::TraceDelta>>::~unique_ptr[abi:nn180100](re *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    v3 = re::globalAllocators(a1)[2];
    re::DynamicArray<re::TraceEntry>::deinit(v2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return a1;
}

uint64_t re::DynamicArray<unsigned char>::DynamicArray(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    re::DynamicArray<BOOL>::setCapacity((_QWORD *)a1, v3);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<REFrameAnalysisBottleneck>::copy((_QWORD *)a1, 0, *(char **)a2, *(_QWORD *)(a2 + 8));
  }
  return a1;
}

_QWORD *re::DynamicArray<re::TraceEntry>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::TraceEntry>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::TraceEntry>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::TraceEntry>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::TraceEntry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 6;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v9 << 6;
        v11 = (_QWORD *)(v8 + 56);
        v12 = v7;
        do
        {
          v13 = *(_OWORD *)(v11 - 7);
          *((_WORD *)v12 + 8) = *((_WORD *)v11 - 20);
          *(_OWORD *)v12 = v13;
          v12[7] = 0;
          v12[4] = 0;
          v12[5] = 0;
          v12[3] = 0;
          *((_DWORD *)v12 + 12) = 0;
          v14 = *(v11 - 3);
          v12[3] = *(v11 - 4);
          *(v11 - 4) = 0;
          v12[4] = v14;
          *(v11 - 3) = 0;
          v15 = v12[5];
          v12[5] = *(v11 - 2);
          *(v11 - 2) = v15;
          v16 = v12[7];
          v12[7] = *v11;
          *v11 = v16;
          ++*((_DWORD *)v11 - 2);
          ++*((_DWORD *)v12 + 12);
          v17 = *(v11 - 4);
          if (v17)
          {
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
            *v11 = 0;
            *(v11 - 3) = 0;
            *(v11 - 2) = 0;
            *(v11 - 4) = 0;
            ++*((_DWORD *)v11 - 2);
          }
          v11 += 8;
          v12 += 8;
          v10 -= 64;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

id re::internal::defaultRetain<re::ecs2::StateRecorderSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::StateRecorderSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

void ___ZN2re4ecs212ShadowHelper32forceEnableMeshProjectiveShadowsEv_block_invoke(uint64_t a1, const char *a2)
{
  re *v2;
  NSObject *v3;
  uint8_t v4[14];
  char v5;
  char v6;

  re::Defaults::BOOLValue((re::Defaults *)"forceEnableMeshProjectiveShadows", a2, &v5);
  if (v5)
  {
    re::ecs2::ShadowHelper::forceEnableMeshProjectiveShadows(void)::g_forceEnableMeshProjectiveShadows = v6;
    if (v6)
    {
      v3 = *re::ecsComponentsLogObjects(v2);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v4 = 0;
        _os_log_impl(&dword_224FE9000, v3, OS_LOG_TYPE_DEFAULT, "Mesh Projective Shadows have been force-enabled. Planar Projective Shadows will be disabled.", v4, 2u);
      }
    }
  }
}

void ___ZN2re4ecs212ShadowHelper25enableShadowTechniqueLogsEv_block_invoke(uint64_t a1, const char *a2)
{
  char v2[2];

  re::Defaults::BOOLValue((re::Defaults *)"Shadow.LogTechnique", a2, v2);
  if (v2[0])
    re::ecs2::ShadowHelper::enableShadowTechniqueLogs(void)::g_enableShadowTechniqueLogs = v2[1];
}

void re::ecs2::ShadowHelper::findShadowReceiverAnchor(uint64_t a1@<X0>, _QWORD *a2@<X1>, const re::ecs2::ComponentTypeBase *a3@<X2>, int a4@<W3>, char *a5@<X8>)
{
  uint64_t v8;
  uint64_t v10;
  char v11;
  float32x4_t *v12;
  uint64_t v13;
  const re::ecs2::AnchorComponent *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v8 = a1;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a2 + 8))(&v19, *a2, a1);
  if ((_BYTE)v19)
    v10 = v20;
  else
    v10 = 0;
  if (v8)
  {
    v11 = 0;
    while (1)
    {
      if (a3
        && (v11 & 1) != 0
        && re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v8 + 32), a3))
      {
        goto LABEL_29;
      }
      if (a4 == 2)
        goto LABEL_16;
      if (a4 != 1)
        break;
      v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v8 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchorShadowMarker,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v15)
      {
LABEL_31:
        goto LABEL_32;
      }
      v12 = *(float32x4_t **)(v8 + 128);
      v17 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v8 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v12)
      {
        v14 = (const re::ecs2::AnchorComponent *)v17;
        if (v17)
        {
          if (v12[2].i8[9] || (*(_DWORD *)(v17 + 32) - 3) <= 1)
          {
LABEL_28:
LABEL_32:
            v18 = 1;
            goto LABEL_30;
          }
        }
      }
LABEL_17:
      v8 = *(_QWORD *)(v8 + 24);
      if (v8 && (*(_BYTE *)(v8 + 288) & 0x80) == 0)
      {
        (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a2 + 8))(&v19, *a2, v8);
        v16 = v20;
        if (!(_BYTE)v19)
          v16 = 0;
        v11 = 1;
        if (v10 == v16)
          continue;
      }
      goto LABEL_29;
    }
    if (a4)
      goto LABEL_17;
    v12 = *(float32x4_t **)(v8 + 128);
    v13 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v8 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v12)
    {
      v14 = (const re::ecs2::AnchorComponent *)v13;
      if (v13)
      {
        if (v12[2].i8[9] || (*(_DWORD *)(v13 + 32) - 3) <= 1)
          goto LABEL_28;
      }
    }
LABEL_16:
    v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v8 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchorShadowMarker,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v15)
      goto LABEL_31;
    goto LABEL_17;
  }
LABEL_29:
  v18 = 0;
LABEL_30:
  *a5 = v18;
}

__n128 re::ecs2::`anonymous namespace'::shadowReceiverAnchorFromAnchor@<Q0>(float32x4_t *this@<X0>, const re::ecs2::AnchorComponent *a2@<X1>, uint64_t a3@<X8>)
{
  float32x4_t v4;
  float32x4_t v5;
  __n128 result;
  float32x4_t v7;
  int32x4_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int32x4_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int32x4_t v24;

  v4 = this[3];
  v5 = this[4];
  v7 = this[5];
  result = (__n128)this[6];
  v8 = (int32x4_t)vmulq_f32(v4, v4);
  v8.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v8, 2), vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1))).u32[0];
  v9 = vrsqrte_f32((float32x2_t)v8.u32[0]);
  v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v9, v9)));
  v11 = vmulq_n_f32(v4, vmul_f32(v10, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v10, v10))).f32[0]);
  v12 = vmulq_f32(v5, v11);
  v13 = vmulq_f32(v11, v11);
  v13.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0];
  v14 = vsubq_f32(v5, vmulq_n_f32(v11, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0]/ v13.f32[0]));
  v15 = (int32x4_t)vmulq_f32(v14, v14);
  v15.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v15, 2), vadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.i8, 1))).u32[0];
  v16 = vrsqrte_f32((float32x2_t)v15.u32[0]);
  v17 = vmul_f32(v16, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(v16, v16)));
  v15.i32[0] = vmul_f32(v17, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(v17, v17))).u32[0];
  v18 = vmulq_f32(v7, v11);
  v19 = vmulq_n_f32(v14, *(float *)v15.i32);
  v20 = vsubq_f32(v7, vmulq_n_f32(v11, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]/ v13.f32[0]));
  v21 = vmulq_f32(v7, v19);
  v22 = vmulq_f32(v19, v19);
  v23 = vsubq_f32(v20, vmulq_n_f32(v19, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0]));
  v24 = (int32x4_t)vmulq_f32(v23, v23);
  v24.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v24, 2), vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 1))).u32[0];
  *(float32x2_t *)v22.f32 = vrsqrte_f32((float32x2_t)v24.u32[0]);
  *(float32x2_t *)v22.f32 = vmul_f32(*(float32x2_t *)v22.f32, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32)));
  *(float32x4_t *)a3 = v11;
  *(float32x4_t *)(a3 + 16) = v19;
  *(float32x4_t *)(a3 + 32) = vmulq_n_f32(v23, vmul_f32(*(float32x2_t *)v22.f32, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32))).f32[0]);
  *(__n128 *)(a3 + 48) = result;
  *(_DWORD *)(a3 + 64) = *((_DWORD *)a2 + 8);
  return result;
}

uint64_t re::ecs2::`anonymous namespace'::shadowReceiverAnchorFromAnchorShadowMarker@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  float32x4_t v3;
  int32x4_t v4;
  unsigned __int32 v5;
  float32x4_t v6;
  float32x4_t v7;
  int32x4_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int32x4_t v13;
  float32x2_t v14;
  float32x2_t v15;

  v3 = *(float32x4_t *)(this + 32);
  v4 = (int32x4_t)vmulq_f32(v3, v3);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(this + 48);
  v5 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v4, 2), vadd_f32(*(float32x2_t *)v4.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v4.i8, 1))).u32[0];
  *(float32x2_t *)v4.i8 = vrsqrte_f32((float32x2_t)v5);
  *(float32x2_t *)v4.i8 = vmul_f32(*(float32x2_t *)v4.i8, vrsqrts_f32((float32x2_t)v5, vmul_f32(*(float32x2_t *)v4.i8, *(float32x2_t *)v4.i8)));
  v6 = vmulq_n_f32(v3, vmul_f32(*(float32x2_t *)v4.i8, vrsqrts_f32((float32x2_t)v5, vmul_f32(*(float32x2_t *)v4.i8, *(float32x2_t *)v4.i8))).f32[0]);
  if (fabsf(v6.f32[2]) >= 0.00001)
  {
    v7.i32[0] = 0;
    v7.f32[1] = -v6.f32[2];
    v7.i64[1] = v6.u32[1];
  }
  else
  {
    v7.i64[1] = 0;
    v7.f32[0] = -v6.f32[1];
    v7.i32[1] = v6.i32[0];
  }
  v8 = (int32x4_t)vmulq_f32(v7, v7);
  v8.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v8, 2), vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1))).u32[0];
  v9 = vrsqrte_f32((float32x2_t)v8.u32[0]);
  v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v9, v9)));
  v11 = vmulq_n_f32(v7, vmul_f32(v10, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v10, v10))).f32[0]);
  v12 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL), vnegq_f32(v6)), v11, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL));
  v13 = (int32x4_t)vmulq_f32(v12, v12);
  v13.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v13, 2), *(float32x2_t *)v13.i8)).u32[0];
  v14 = vrsqrte_f32((float32x2_t)v13.u32[0]);
  v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v14, v14)));
  *(float32x4_t *)a2 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL), vmul_f32(v15, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v15, v15))).f32[0]);
  *(float32x4_t *)(a2 + 16) = v6;
  *(float32x4_t *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 64) = 3;
  return this;
}

float32x4_t re::ecs2::ShadowHelper::expandSkinnedMeshBoundingBox@<Q0>(float32x4_t *a1@<X0>, uint64_t a2@<X1>, float32x4_t *a3@<X8>)
{
  float32x4_t v5;
  float32x4_t *v6;
  float32x4_t result;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  uint64_t v14;
  re::MeshBoundingBoxes *v15;
  uint64_t v16;
  unint64_t i;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24[4];
  _OWORD v25[2];

  v5 = a1[1];
  *a3 = *a1;
  a3[1] = v5;
  v6 = (float32x4_t *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(a2 + 32));
  if (v6)
  {
    v8 = *(_QWORD *)(a2 + 16);
    v24[0] = (float32x4_t)xmmword_2260E5F10;
    v24[1] = (float32x4_t)xmmword_2260E5F20;
    v24[2] = (float32x4_t)xmmword_2260E5F40;
    v24[3] = (float32x4_t)xmmword_2260E5D70;
    re::MeshAsset::aabbFromMesh(v6, v24, (uint64_t)v25);
    v9 = *a3;
    v10 = a3[1];
    v9.i32[3] = 0;
    v11 = (float32x4_t)v25[0];
    v12 = (float32x4_t)v25[1];
    v11.i32[3] = 0;
    v10.i32[3] = 0;
    v12.i32[3] = 0;
    v22 = vmaxnmq_f32(v10, v12);
    v23 = vminnmq_f32(v9, v11);
    *a3 = v23;
    a3[1] = v22;
    v13 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v8 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 96);
      if (v14)
        v15 = (re::MeshBoundingBoxes *)(v14 + 80);
      else
        v15 = 0;
      if (v14)
      {
        v16 = *(_QWORD *)(v14 + 104);
        if (v16)
        {
          for (i = 0; i != v16; ++i)
          {
            v18 = re::MeshBoundingBoxes::boundingBox(v15, i);
            v20 = v22;
            v19 = v23;
            v19.i32[3] = 0;
            result = *(float32x4_t *)v18;
            v21 = *(float32x4_t *)(v18 + 16);
            result.i32[3] = 0;
            v20.i32[3] = 0;
            v21.i32[3] = 0;
            v22 = vmaxnmq_f32(v20, v21);
            v23 = vminnmq_f32(v19, result);
            *a3 = v23;
            a3[1] = v22;
          }
        }
      }
    }
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_AnchorShadowMarker(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_185);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_185))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410A6E8, 0);
    *(uint64_t *)((char *)&qword_25410A6F8 + 6) = 0;
    qword_25410A6F8 = 0;
    qword_25410A708 = 0;
    qword_25410A710 = 0xFFFFFFFFLL;
    qword_25410A6E8 = (uint64_t)&off_24ED7DAA8;
    qword_25410A718 = (uint64_t)"AnchorShadowMarker";
    dword_25410A720 = 0;
    unk_25410A728 = 0u;
    unk_25410A738 = 0u;
    unk_25410A748 = 0u;
    qword_25410A758 = 0;
    __cxa_guard_release(&_MergedGlobals_185);
  }
  return &qword_25410A6E8;
}

void re::ecs2::initInfo_AnchorShadowMarker(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x12136136298219DELL;
  v10[1] = "AnchorShadowMarker";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_25410A6E0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410A6E0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410A6D8 = v8;
      __cxa_guard_release(&qword_25410A6E0);
    }
  }
  *((_QWORD *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_25410A6D8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AnchorShadowMarker>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AnchorShadowMarker>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AnchorShadowMarker>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AnchorShadowMarker>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

double re::internal::defaultConstruct<re::ecs2::AnchorShadowMarker>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_WORD *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED5A700;
  result = 0.0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_BYTE *)(v3 + 64) = 0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::AnchorShadowMarker>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::AnchorShadowMarker>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED5A700;
  result = 0.0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_BYTE *)(v1 + 64) = 0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::AnchorShadowMarker>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AnchorShadowMarker(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnchorShadowMarker", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AnchorShadowMarker, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AnchorShadowMarker, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AnchorShadowMarker>, this);
}

uint64_t re::ecs2::AnchorShadowMarker::setFloorPlane(uint64_t a1, __int128 *a2, __int128 *a3)
{
  _OWORD *v4;
  _BOOL4 v5;
  int v6;
  uint64_t result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[33];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v10 = *a3;
  v11 = *a2;
  *(_OWORD *)&v12[1] = *a3;
  *(_OWORD *)&v12[17] = v11;
  if (!*(_BYTE *)(a1 + 64))
  {
    *(_OWORD *)v12 = v10;
    *(_OWORD *)&v12[16] = v11;
    v4 = (_OWORD *)(a1 + 80);
    goto LABEL_5;
  }
  v4 = (_OWORD *)(a1 + 80);
  v5 = re::SortingPlane::operator==((float *)(a1 + 80), (float *)&v12[1]);
  v6 = *(unsigned __int8 *)(a1 + 64);
  *(_OWORD *)v12 = v10;
  *(_OWORD *)&v12[16] = v11;
  if (!v6)
  {
LABEL_5:
    result = 1;
    *(_BYTE *)(a1 + 64) = 1;
    v8 = *(_OWORD *)v12;
    v9 = *(_OWORD *)&v12[16];
    goto LABEL_6;
  }
  result = !v5;
  v8 = v10;
  v9 = v11;
LABEL_6:
  *v4 = v8;
  v4[1] = v9;
  return result;
}

re::ecs2::PortalManagerStateTracking *re::ecs2::PortalManagerStateTracking::PortalManagerStateTracking(re::ecs2::PortalManagerStateTracking *this)
{
  _QWORD *v2;
  _QWORD v4[2];
  _QWORD v5[3];

  v5[2] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)re::ecs2::HierarchyStateTracking<unsigned long long>::HierarchyStateTracking((uint64_t)this);
  *v2 = &off_24ED5C308;
  *((_QWORD *)this + 61) = 0;
  *((_DWORD *)this + 124) = 0;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((_DWORD *)this + 150) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 468) = 0u;
  *(_QWORD *)((char *)this + 604) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  v5[0] = re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[1] = re::ecs2::ComponentImpl<re::ecs2::PortalComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v4[0] = v5;
  v4[1] = 2;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 32), (uint64_t)v4);
  return this;
}

uint64_t re::ecs2::HierarchyStateTracking<unsigned long long>::HierarchyStateTracking(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;

  *(_QWORD *)a1 = off_24ED5C440;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v2 = a1 + 56;
  *(_QWORD *)(a1 + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  v3 = a1 + 104;
  *(_QWORD *)(a1 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  v4 = a1 + 152;
  *(_QWORD *)(a1 + 188) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  v5 = a1 + 200;
  *(_QWORD *)(a1 + 236) = 0x7FFFFFFFLL;
  return a1;
}

uint64_t *re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::~HashSet(uint64_t *a1)
{
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a1);
  return a1;
}

uint64_t re::ecs2::PortalManagerStateTracking::trackedComponents(re::ecs2::PortalManagerStateTracking *this)
{
  return *((_QWORD *)this + 34);
}

void re::ecs2::PortalManagerStateTracking::buildPerEntityStateForDirtyEntityHierarchies(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __guard *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  __n128 v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t *v33;
  __n128 *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  int v48;
  uint64_t v49;
  uint64_t *v50;
  int v51;
  int v52;
  _anonymous_namespace_ *v53;
  _anonymous_namespace_ *v54;
  int v56;
  id location[3];
  __n128 v58;
  __n128 v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  int v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD v72[4];

  v72[1] = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v6 = *v5;
      v5 += 6;
      if (v6 < 0)
        break;
      if (v3 == ++v4)
      {
        LODWORD(v4) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if ((_DWORD)v3 != (_DWORD)v4)
  {
    v7 = v4;
    v54 = (_anonymous_namespace_ *)(a1 + 408);
    v8 = *(_QWORD *)(a2 + 16);
    v9 = (_QWORD *)(a1 + 56);
    v56 = *(_DWORD *)(a2 + 32);
    v53 = (_anonymous_namespace_ *)(a1 + 344);
    while (1)
    {
      v11 = *(_QWORD *)(v8 + 24 * v7 + 16);
      v12 = *(_QWORD *)(v11 + 208);
      v58.n128_u64[0] = v12;
      if (v12)
      {
        v13 = re::ecs2::PortalComponent::targetWorldRootToken(v12, *(_QWORD *)(a1 + 248));
        re::ecs2::PortalManagerStateTracking::addComponentForWorldId(a1, (unint64_t)v13, v58.n128_i64[0]);
        v14 = v58.n128_u64[0];
        v60 = (unint64_t)v13;
        v59.n128_u64[0] = v58.n128_u64[0];
        if (v13)
        {
          v15 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(v53, (unint64_t)v13);
          if (v15 == -1)
          {
            v71 = v14;
            v67 = 0u;
            v68 = 0u;
            LODWORD(v69) = 0;
            *(_QWORD *)((char *)&v69 + 4) = 0x7FFFFFFFLL;
            re::HashSetBase<re::ecs2::PortalComponent const*,re::ecs2::PortalComponent const*,re::internal::ValueAsKey<re::ecs2::PortalComponent const*>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::add((uint64_t)&v67, (uint64_t *)&v71);
            re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::addNew(v53, &v60, (uint64_t)&v67);
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v67);
          }
          else
          {
            re::HashSetBase<re::ecs2::PortalComponent const*,re::ecs2::PortalComponent const*,re::internal::ValueAsKey<re::ecs2::PortalComponent const*>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::add(*(_QWORD *)(a1 + 352) + 56 * v15 + 8, (uint64_t *)&v59);
          }
        }
        v16 = v58.n128_u64[0];
        *(_QWORD *)(v58.n128_u64[0] + 136) = v13;
        v17 = *(_QWORD *)(v16 + 48);
        v60 = v17;
        if (v17)
        {
          v18 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(v54, v17);
          if (v18 == -1)
          {
            v68 = 0u;
            v69 = 0u;
            v67 = 0u;
            DWORD1(v69) = 0x7FFFFFFF;
            v19 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::addNew(v54, &v60, (uint64_t)&v67);
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v67);
          }
          else
          {
            v19 = (_QWORD *)(*(_QWORD *)(a1 + 416) + 56 * v18 + 8);
          }
          re::HashSetBase<re::ecs2::PortalComponent const*,re::ecs2::PortalComponent const*,re::internal::ValueAsKey<re::ecs2::PortalComponent const*>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::add((uint64_t)v19, (uint64_t *)&v58);
          v16 = v58.n128_u64[0];
        }
        re::ecs2::EntityHandle::EntityHandle(location, (const re::ecs2::EntityHandle *)(v16 + 40));
        re::ecs2::EntityHandle::operator=((id *)(v16 + 144), location);
        re::ecs2::EntityHandle::reset(location);
        objc_destroyWeak(location);
        location[0] = 0;
      }
      v20 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v11 + 32), (const re::ecs2::ComponentTypeBase *)v10[420]);
      if (v20)
      {
        v21 = v20;
        re::ecs2::PortalManagerStateTracking::addComponentForWorldId(a1, *(_QWORD *)(v20 + 32), v20);
        *(_QWORD *)(v21 + 48) = *(_QWORD *)(v21 + 32);
      }
      v70 = v11;
      v22 = re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::containsKey(a1 + 56, (uint64_t *)&v70);
      v23 = v56;
      if (!v22)
        break;
LABEL_77:
      v8 = *(_QWORD *)(a2 + 16);
      if (*(_DWORD *)(a2 + 32) <= (v4 + 1))
        v51 = v4 + 1;
      else
        v51 = *(_DWORD *)(a2 + 32);
      while (1)
      {
        v7 = (v4 + 1);
        if (v51 - 1 == (_DWORD)v4)
          break;
        LODWORD(v4) = v4 + 1;
        v52 = v7;
        if ((*(_DWORD *)(v8 + 24 * v7 + 8) & 0x80000000) != 0)
          goto LABEL_84;
      }
      v52 = v51;
LABEL_84:
      LODWORD(v4) = v52;
      if (v23 == v52)
        return;
    }
    v24 = v70;
    do
    {
      v25 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v24 + 32), (const re::ecs2::ComponentTypeBase *)v10[420]);
      if (v25)
      {
        v26 = !*(_BYTE *)(v25 + 40) && v24 == v70;
        if (!v26)
        {
          v24 = *(_QWORD *)(v25 + 32);
          goto LABEL_34;
        }
      }
      v24 = *(_QWORD *)(v24 + 24);
      if (!v24)
        goto LABEL_34;
    }
    while ((*(_BYTE *)(v24 + 288) & 0x80) == 0);
    v24 = 0;
LABEL_34:
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)&v67);
    v60 = 0;
    v61 = 0;
    v62 = 1;
    v64 = 0;
    v65 = 0;
    v63 = 0;
    v66 = 0;
    re::BucketArray<re::ecs2::PortalManagerStateTracking::buildWorldIdsForEntityHierarchy(re::ecs2::Entity const*)::EntityWorldId,32ul>::init((uint64_t)&v60, (uint64_t)&v67, 1uLL);
    v59.n128_u64[0] = v70;
    v59.n128_u64[1] = v24;
    v27 = re::BucketArray<re::ecs2::PortalManagerStateTracking::buildWorldIdsForEntityHierarchy(re::ecs2::Entity const*)::EntityWorldId,32ul>::add((uint64_t)&v60, &v59);
    v28 = v65;
    if (v65)
    {
      while (1)
      {
        v59 = *(__n128 *)re::BucketArray<re::ecs2::PortalManagerStateTracking::buildWorldIdsForEntityHierarchy(re::ecs2::Entity const*)::EntityWorldId,32ul>::operator[]((uint64_t)&v60, --v28);
        re::BucketArray<re::ecs2::PortalManagerStateTracking::buildWorldIdsForEntityHierarchy(re::ecs2::Entity const*)::EntityWorldId,32ul>::operator[]((uint64_t)&v60, v28);
        v65 = v28;
        ++v66;
        if ((*(_BYTE *)(v59.n128_u64[0] + 288) & 1) != 0)
          break;
LABEL_64:
        if (!v28)
          goto LABEL_65;
      }
      LOBYTE(v71) = 0;
      v29 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v59.n128_u64[0] + 32), (const re::ecs2::ComponentTypeBase *)v10[420]);
      v30 = v29;
      if (v29)
      {
        v24 = *(_QWORD *)(v29 + 32);
        v31 = v71;
        if (*(_BYTE *)(v29 + 40))
        {
          if (!(_BYTE)v71)
            LOBYTE(v71) = 1;
          v72[0] = v24;
          v32 = v24;
          v33 = v72;
          if (!v24)
          {
LABEL_41:
            re::HashTable<re::ecs2::Entity const*,re::ecs2::EntityVisualProxyScopeData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(a1 + 56, (uint64_t *)&v59);
LABEL_57:
            v40 = *(_QWORD *)(v59.n128_u64[0] + 328);
            if (v40)
            {
              v41 = *(unint64_t **)(v59.n128_u64[0] + 344);
              v42 = 8 * v40;
              do
              {
                v44 = *v41++;
                v43 = v44;
                v45 = v59.n128_u64[1];
                if (v30)
                  v45 = v32;
                v58.n128_u64[0] = v43;
                v58.n128_u64[1] = v45;
                v27 = re::BucketArray<re::ecs2::PortalManagerStateTracking::buildWorldIdsForEntityHierarchy(re::ecs2::Entity const*)::EntityWorldId,32ul>::add((uint64_t)&v60, &v58);
                v42 -= 8;
              }
              while (v42);
              v28 = v65;
            }
            v24 = v32;
            goto LABEL_64;
          }
LABEL_47:
          v35 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v59.n128_u64[0] ^ (v59.n128_u64[0] >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                        * (v59.n128_u64[0] ^ (v59.n128_u64[0] >> 30))) >> 27));
          v36 = v35 ^ (v35 >> 31);
          if (*v9)
          {
            v37 = v36 % *(unsigned int *)(a1 + 80);
            v38 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * v37);
            if ((_DWORD)v38 != 0x7FFFFFFF)
            {
              v39 = *(_QWORD *)(a1 + 72);
              while (*(_QWORD *)(v39 + 32 * v38 + 16) != v59.n128_u64[0])
              {
                v38 = *(_DWORD *)(v39 + 32 * v38 + 8) & 0x7FFFFFFF;
                if ((_DWORD)v38 == 0x7FFFFFFF)
                  goto LABEL_54;
              }
              *(_QWORD *)(v39 + 32 * v38 + 24) = v24;
              goto LABEL_56;
            }
          }
          else
          {
            LODWORD(v37) = 0;
          }
LABEL_54:
          re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addEmplace<unsigned long long &>(a1 + 56, v37, v36, &v59, v33);
LABEL_56:
          ++*(_DWORD *)(a1 + 96);
          goto LABEL_57;
        }
      }
      else
      {
        v31 = v71;
      }
      v32 = v24;
      v26 = v31 == 0;
      v34 = (__n128 *)&v71;
      if (v26)
      {
        v34 = &v59;
        v33 = &v59.n128_u64[1];
      }
      else
      {
        v33 = v72;
      }
      v24 = v34->n128_u64[1];
      if (!v24)
        goto LABEL_41;
      goto LABEL_47;
    }
LABEL_65:
    v46 = v60;
    if (v61)
    {
      v47 = v64;
      v48 = v62;
      v49 = v61 - 1;
      do
      {
        if ((v48 & 1) != 0)
          v50 = &v63;
        else
          v50 = v47;
        (*(void (**)(unint64_t, uint64_t, __n128))(*(_QWORD *)v46 + 40))(v46, v50[v49], v27);
        v48 += 2;
        v62 = v48;
        --v49;
      }
      while (v49 != -1);
    }
    else
    {
      if (!v60)
      {
LABEL_76:
        re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)&v67);
        v23 = v56;
        goto LABEL_77;
      }
      LOBYTE(v48) = v62;
    }
    if ((v48 & 1) == 0)
      (*(void (**)(unint64_t, uint64_t *))(*(_QWORD *)v46 + 40))(v46, v64);
    goto LABEL_76;
  }
}

uint64_t re::ecs2::PortalManagerStateTracking::addComponentForWorldId(uint64_t result, unint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _anonymous_namespace_ *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28[2];

  v28[1] = *MEMORY[0x24BDAC8D0];
  v26 = a3;
  v27 = a2;
  if (a2)
  {
    v5 = (_QWORD *)result;
    v6 = (_anonymous_namespace_ *)(result + 280);
    v7 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)(result + 280), a2);
    if (v7 == -1)
    {
      v28[0] = a3;
      v23 = 0u;
      v24 = 0u;
      LODWORD(v25) = 0;
      *(_QWORD *)((char *)&v25 + 4) = 0x7FFFFFFFLL;
      re::HashSetBase<re::ecs2::Component const*,re::ecs2::Component const*,re::internal::ValueAsKey<re::ecs2::Component const*>,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>::add((uint64_t)&v23, v28);
      if (re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(v6, a2) == -1)re::HashBrown<unsigned long long,re::HashSet<re::ecs2::Component const*,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(v6, (uint64_t *)&v27, (uint64_t)&v23);
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v23);
      re::SmallHashSet<unsigned long long,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::add((uint64_t)(v5 + 59), (uint64_t *)&v27);
      result = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(v5 + 77, v27);
      if (result == -1)
      {
        if (!v5[84])
        {
        }
        v9 = v5[81];
        if (!v9 || (v10 = v5[79], v10 > 8 * v9))
        {
          result = re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(v5 + 77, 1u);
          v10 = v5[79];
        }
        v11 = 0xBF58476D1CE4E5B9;
        v12 = 0x94D049BB133111EBLL;
        v13 = (0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * (v27 ^ (v27 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v27 ^ (v27 >> 30))) >> 27))) ^ ((0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * (v27 ^ (v27 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v27 ^ (v27 >> 30))) >> 27))) >> 31);
        v14 = v10 >> 4;
        v15 = v5[77];
        v16 = v13 % v14;
        while (1)
        {
          v17 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v15 + 16 * v16)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
          if (v17 < 0x40)
            break;
          if (v16 + 1 == v14)
            v16 = 0;
          else
            ++v16;
          if (v16 == v13 % v14)
          {
            re::internal::assertLog((re::internal *)4, v8, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656, v23, v24, v25, v26);
            result = _os_crash();
            __break(1u);
            break;
          }
        }
        v18 = v15 + 16 * v16;
        v19 = *(unsigned __int8 *)(v18 + v17) == 255;
        *(_BYTE *)(v18 + v17) = v13 & 0x7F;
        v20 = v27;
        v21 = v5[78] + 16 * (v17 + 16 * v16);
        *(_QWORD *)v21 = v27;
        *(_DWORD *)(v21 + 8) = 1;
        ++v5[80];
        v5[81] -= v19;
        v22 = (((v20 ^ (v20 >> 30)) * v11) ^ (((v20 ^ (v20 >> 30)) * v11) >> 27)) * v12;
        v5[82] ^= (v22 >> 31) ^ v22;
      }
    }
    else
    {
      return re::HashSetBase<re::ecs2::Component const*,re::ecs2::Component const*,re::internal::ValueAsKey<re::ecs2::Component const*>,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>::add(v5[36] + 56 * v7 + 8, &v26);
    }
  }
  return result;
}

_QWORD *re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::addNew(_anonymous_namespace_ *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(a1, *a2);
  if (v6 == -1)
    return re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(a1, (uint64_t *)a2, a3);
  else
    return (_QWORD *)(*((_QWORD *)a1 + 1) + 56 * v6 + 8);
}

uint64_t re::HashSetBase<re::ecs2::PortalComponent const*,re::ecs2::PortalComponent const*,re::internal::ValueAsKey<re::ecs2::PortalComponent const*>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::add(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v4 = *a2;
  v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  v7 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v7)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % v7;
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v6 % v7));
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashSetBase<re::ecs2::PortalComponent const*,re::ecs2::PortalComponent const*,re::internal::ValueAsKey<re::ecs2::PortalComponent const*>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::addAsCopy(a1, v8, v6, (uint64_t)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 16) + 24 * v12;
    return v11 + 16;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v10 + 24 * v9 + 16) != v4)
  {
    LODWORD(v9) = *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v11 = v10 + 24 * v9;
  return v11 + 16;
}

BOOL re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::containsKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + 32 * v4 + 16) == v2)
    return 1;
  do
  {
    v4 = *(_DWORD *)(v6 + 32 * v4 + 8) & 0x7FFFFFFF;
    result = (_DWORD)v4 != 0x7FFFFFFF;
  }
  while ((_DWORD)v4 != 0x7FFFFFFF && *(_QWORD *)(v6 + 32 * v4 + 16) != v2);
  return result;
}

__n128 re::BucketArray<re::ecs2::PortalManagerStateTracking::buildWorldIdsForEntityHierarchy(re::ecs2::Entity const*)::EntityWorldId,32ul>::add(uint64_t a1, __n128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 8);
  if (v4 + 1 > 32 * v5)
  {
    re::BucketArray<re::ecs2::PortalManagerStateTracking::buildWorldIdsForEntityHierarchy(re::ecs2::Entity const*)::EntityWorldId,32ul>::setBucketsCapacity((_QWORD *)a1, (v4 + 32) >> 5);
    v5 = *(_QWORD *)(a1 + 8);
  }
  if (v5 <= v4 >> 5)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v6 = a1 + 24;
  else
    v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(v6 + 8 * (v4 >> 5));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  result = *a2;
  *(__n128 *)(v7 + 16 * (v4 & 0x1F)) = *a2;
  return result;
}

void re::ecs2::PortalManagerStateTracking::clearEntityHierarchyStateData(re::ecs2::PortalManagerStateTracking *this, const re::ecs2::Entity *a2)
{
  const re::ecs2::Entity *v2;
  re::ecs2::EntityComponentCollection *v4;
  _QWORD *v5;
  unint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  const re::ecs2::PortalComponent *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unint64_t *v32;
  id location[3];
  _QWORD *v34;

  v2 = a2;
  v4 = (const re::ecs2::Entity *)((char *)a2 + 32);
  v5 = (_QWORD *)*((_QWORD *)a2 + 26);
  v34 = v5;
  if (v5)
  {
    v6 = v5[17];
    re::ecs2::PortalManagerStateTracking::removeComponentForWorldId(this, v6, (unint64_t)v5);
    re::ecs2::PortalManagerStateTracking::removePortalComponentForWorldId(this, v6, (const re::ecs2::PortalComponent *)v5);
    re::ecs2::EntityHandle::EntityHandle(location, (const re::ecs2::EntityHandle *)(v5 + 18));
    v7 = location[1];
    re::ecs2::EntityHandle::reset(location);
    objc_destroyWeak(location);
    if (v7)
    {
      v8 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)this + 51, (unint64_t)v7);
      if (v8 != -1)
      {
        v9 = *((_QWORD *)this + 52) + 56 * v8;
        re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v9 + 8, (uint64_t *)&v34);
        if (!*(_DWORD *)(v9 + 36))
          re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::remove((__int128 *)((char *)this + 408), (unint64_t)v7);
      }
    }
  }
  v10 = re::ecs2::EntityComponentCollection::get(v4, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v10)
    re::ecs2::PortalManagerStateTracking::removeComponentForWorldId(this, *(_QWORD *)(v10 + 48), v10);
  v11 = (__int128 *)((char *)this + 408);
  v12 = *((_QWORD *)v2 + 37);
  v13 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)this + 51, v12);
  if (v13 == -1)
    goto LABEL_35;
  v14 = *((_QWORD *)this + 52) + 56 * v13;
  v15 = v14 + 8;
  v16 = *(unsigned int *)(v14 + 40);
  if ((_DWORD)v16)
  {
    v17 = 0;
    v18 = (int *)(*(_QWORD *)(v14 + 24) + 8);
    while (1)
    {
      v19 = *v18;
      v18 += 6;
      if (v19 < 0)
        break;
      if (v16 == ++v17)
      {
        LODWORD(v17) = v16;
        break;
      }
    }
  }
  else
  {
    LODWORD(v17) = 0;
  }
  if ((_DWORD)v16 == (_DWORD)v17)
    goto LABEL_34;
  v32 = (unint64_t *)v2;
  v20 = v17;
  do
  {
    v21 = *(const re::ecs2::PortalComponent **)(*(_QWORD *)(v15 + 16) + 24 * v20 + 16);
    v22 = *((_QWORD *)v21 + 17);
    re::ecs2::PortalManagerStateTracking::removeComponentForWorldId(this, v22, (unint64_t)v21);
    re::ecs2::PortalManagerStateTracking::removePortalComponentForWorldId(this, v22, v21);
    v23 = *((_QWORD *)v21 + 2);
    location[0] = (id)v23;
    v24 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v23 ^ (v23 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v23 ^ (v23 >> 30))) >> 27));
    v25 = v24 ^ (v24 >> 31);
    v26 = *((unsigned int *)this + 32);
    if (!(_DWORD)v26)
    {
      LODWORD(v27) = 0;
LABEL_24:
      re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsCopy((uint64_t)this + 104, v27, v25, (uint64_t)location, location);
      ++*((_DWORD *)this + 36);
      goto LABEL_25;
    }
    v27 = v25 % v26;
    v28 = *(unsigned int *)(*((_QWORD *)this + 14) + 4 * (v25 % v26));
    if ((_DWORD)v28 == 0x7FFFFFFF)
      goto LABEL_24;
    v29 = *((_QWORD *)this + 15);
    while (*(_QWORD *)(v29 + 24 * v28 + 16) != v23)
    {
      LODWORD(v28) = *(_DWORD *)(v29 + 24 * v28 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v28 == 0x7FFFFFFF)
        goto LABEL_24;
    }
LABEL_25:
    if (*(_DWORD *)(v15 + 32) <= (v17 + 1))
      v30 = v17 + 1;
    else
      v30 = *(_DWORD *)(v15 + 32);
    while (1)
    {
      v20 = (v17 + 1);
      if (v30 - 1 == (_DWORD)v17)
        break;
      LODWORD(v17) = v17 + 1;
      v31 = v20;
      if ((*(_DWORD *)(*(_QWORD *)(v15 + 16) + 24 * v20 + 8) & 0x80000000) != 0)
        goto LABEL_32;
    }
    v31 = v30;
LABEL_32:
    LODWORD(v17) = v31;
  }
  while ((_DWORD)v16 != v31);
  v11 = (__int128 *)((char *)this + 408);
  v2 = (const re::ecs2::Entity *)v32;
  v12 = v32[37];
LABEL_34:
  re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::remove(v11, v12);
LABEL_35:
  re::ecs2::HierarchyStateTracking<unsigned long long>::clearEntityHierarchyStateData((uint64_t)this, (uint64_t)v2);
}

uint64_t re::ecs2::PortalManagerStateTracking::removeComponentForWorldId(re::ecs2::PortalManagerStateTracking *this, unint64_t a2, unint64_t a3)
{
  __int128 *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int8x16_t *v25;
  int8x16_t v26;
  int8x8_t v27;
  char v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  unsigned int v48;
  uint64_t v49;
  int *v50;
  int v51;
  int8x16_t *v52;
  int8x16_t v53;
  int8x8_t v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;

  v6 = (__int128 *)((char *)this + 280);
  result = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)this + 35, a2);
  if (result != -1)
  {
    v8 = *((_QWORD *)this + 36) + 56 * result;
    v9 = v8 + 8;
    v10 = *(unsigned int *)(v8 + 32);
    if ((_DWORD)v10)
    {
      v11 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) >> 27));
      v12 = (v11 ^ (v11 >> 31)) % v10;
      v13 = *(_QWORD *)(v9 + 8);
      v14 = *(unsigned int *)(v13 + 4 * v12);
      if ((_DWORD)v14 != 0x7FFFFFFF)
      {
        v15 = *(_QWORD *)(v9 + 16);
        if (*(_QWORD *)(v15 + 24 * v14 + 16) == a3)
        {
          *(_DWORD *)(v13 + 4 * v12) = *(_DWORD *)(v15 + 24 * v14 + 8) & 0x7FFFFFFF;
LABEL_9:
          v17 = *(_QWORD *)(v9 + 16);
          v18 = v17 + 24 * v14;
          v21 = *(_DWORD *)(v18 + 8);
          v20 = (int *)(v18 + 8);
          v19 = v21;
          if (v21 < 0)
          {
            *v20 = v19 & 0x7FFFFFFF;
            v17 = *(_QWORD *)(v9 + 16);
            v19 = *(_DWORD *)(v17 + 24 * v14 + 8);
          }
          v22 = *(_DWORD *)(v9 + 40);
          *(_DWORD *)(v17 + 24 * v14 + 8) = *(_DWORD *)(v9 + 36) | v19 & 0x80000000;
          --*(_DWORD *)(v9 + 28);
          *(_DWORD *)(v9 + 36) = v14;
          *(_DWORD *)(v9 + 40) = v22 + 1;
        }
        else
        {
          while (1)
          {
            v16 = v14;
            LODWORD(v14) = *(_DWORD *)(v15 + 24 * v14 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v14 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v15 + 24 * v14 + 16) == a3)
            {
              *(_DWORD *)(v15 + 24 * v16 + 8) = *(_DWORD *)(v15 + 24 * v16 + 8) & 0x80000000 | *(_DWORD *)(v15 + 24 * v14 + 8) & 0x7FFFFFFF;
              goto LABEL_9;
            }
          }
        }
      }
    }
    if (!*(_DWORD *)(v9 + 28))
    {
      v23 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(v6, a2);
      if (v23 != -1)
      {
        v25 = (int8x16_t *)(*((_QWORD *)this + 35) + (v23 & 0xFFFFFFFFFFFFFFF0));
        v26.i64[0] = -1;
        v26.i64[1] = -1;
        v27 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v25, v26), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
        v28 = *(_QWORD *)&v27 ? -1 : 0x80;
        v25->i8[v23 & 0xF] = v28;
        v29 = (_QWORD *)(*((_QWORD *)this + 36) + 56 * v23);
        v30 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (*v29 ^ (*v29 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*v29 ^ (*v29 >> 30))) >> 27));
        *((_QWORD *)this + 40) ^= (v30 >> 31) ^ v30;
        re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v29 + 1);
        v31 = *(_QWORD *)&v27 ? *((_QWORD *)this + 39) + 1 : *((_QWORD *)this + 39);
        v32 = *((_QWORD *)this + 37);
        v33 = *((_QWORD *)this + 38) - 1;
        *((_QWORD *)this + 38) = v33;
        *((_QWORD *)this + 39) = v31;
        if (v32 >= 0x11 && v33 < v32 >> 2)
          re::HashBrown<unsigned long long,re::HashSet<re::ecs2::Component const*,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(v6, 0);
      }
      if (*((_DWORD *)this + 149))
      {
        v34 = *((unsigned int *)this + 148);
        if (!(_DWORD)v34
          || (v35 = 0x94D049BB133111EBLL
                  * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27)),
              v36 = (v35 ^ (v35 >> 31)) % v34,
              v37 = *((_QWORD *)this + 72),
              v38 = *(unsigned int *)(v37 + 4 * v36),
              (_DWORD)v38 == 0x7FFFFFFF))
        {
LABEL_45:
          result = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find((_QWORD *)this + 77, a2);
          if (result != -1)
          {
            v52 = (int8x16_t *)(*((_QWORD *)this + 77) + (result & 0xFFFFFFFFFFFFFFF0));
            v53.i64[0] = -1;
            v53.i64[1] = -1;
            v54 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v52, v53), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
            if (v54)
              v55 = -1;
            else
              v55 = 0x80;
            v52->i8[result & 0xF] = v55;
            v56 = *(_QWORD *)(*((_QWORD *)this + 78) + 16 * result);
            v57 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v56 ^ (v56 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v56 ^ (v56 >> 30))) >> 27));
            *((_QWORD *)this + 82) ^= (v57 >> 31) ^ v57;
            v58 = *((_QWORD *)this + 81);
            if (v54)
              ++v58;
            v59 = *((_QWORD *)this + 80) - 1;
            *((_QWORD *)this + 80) = v59;
            *((_QWORD *)this + 81) = v58;
            v60 = *((_QWORD *)this + 79);
            if (v60 >= 0x11 && v59 < v60 >> 2)
              return re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize((uint64_t *)this + 77, 0);
          }
          return result;
        }
        v39 = *((_QWORD *)this + 73);
        if (*(_QWORD *)(v39 + 16 * v38 + 8) != a2)
        {
          while (1)
          {
            v48 = v38;
            v38 = *(_DWORD *)(v39 + 16 * v38) & 0x7FFFFFFF;
            if ((_DWORD)v38 == 0x7FFFFFFF)
              goto LABEL_45;
            if (*(_QWORD *)(v39 + 16 * v38 + 8) == a2)
            {
              *(_DWORD *)(v39 + 16 * v48) = *(_DWORD *)(v39 + 16 * v48) & 0x80000000 | *(_DWORD *)(v39 + 16 * v38) & 0x7FFFFFFF;
              goto LABEL_41;
            }
          }
        }
        *(_DWORD *)(v37 + 4 * v36) = *(_DWORD *)(v39 + 16 * v38) & 0x7FFFFFFF;
LABEL_41:
        v49 = *((_QWORD *)this + 73);
        v50 = (int *)(v49 + 16 * v38);
        v51 = *v50;
        if (*v50 < 0)
        {
          *v50 = v51 & 0x7FFFFFFF;
          v49 = *((_QWORD *)this + 73);
          v51 = *(_DWORD *)(v49 + 16 * v38);
        }
        *(_DWORD *)(v49 + 16 * v38) = *((_DWORD *)this + 151) | v51 & 0x80000000;
        *((_DWORD *)this + 151) = v38;
        --*((_DWORD *)this + 149);
        v47 = (char *)this + 608;
      }
      else
      {
        v40 = (char *)this + 504;
        v41 = *((_QWORD *)this + 61);
        v42 = (char *)this + 8 * v41 + 504;
        v43 = (char *)this + 504;
        if (v41)
        {
          v44 = 8 * v41;
          v43 = (char *)this + 504;
          while (*(_QWORD *)v43 != a2)
          {
            v43 += 8;
            v44 -= 8;
            if (!v44)
            {
              v43 = (char *)this + 8 * v41 + 504;
              break;
            }
          }
        }
        v45 = (v43 - v40) >> 3;
        if (v45 == v41)
          goto LABEL_45;
        if (v41 <= v45)
        {
          re::internal::assertLog((re::internal *)6, v24, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "removeAt", 527, v45, v41);
          result = _os_crash();
          __break(1u);
          return result;
        }
        v46 = v41 - 1;
        if (v46 > v45)
          *(_QWORD *)&v40[8 * v45] = *((_QWORD *)v42 - 1);
        *((_QWORD *)this + 61) = v46;
        v47 = (char *)this + 496;
      }
      ++*(_DWORD *)v47;
      goto LABEL_45;
    }
  }
  return result;
}

void re::ecs2::PortalManagerStateTracking::removePortalComponentForWorldId(re::ecs2::PortalManagerStateTracking *this, unint64_t a2, const re::ecs2::PortalComponent *a3)
{
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  const re::ecs2::PortalComponent *v8;

  v8 = a3;
  v5 = (__int128 *)((char *)this + 344);
  v6 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)this + 43, a2);
  if (v6 != -1)
  {
    v7 = *((_QWORD *)this + 44) + 56 * v6;
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v7 + 8, (uint64_t *)&v8);
    if (!*(_DWORD *)(v7 + 36))
      re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::remove(v5, a2);
  }
}

void re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::remove(__int128 *a1, unint64_t a2)
{
  uint64_t v3;
  int8x16_t *v4;
  int8x16_t v5;
  int8x8_t v6;
  char v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v3 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(a1, a2);
  if (v3 != -1)
  {
    v4 = (int8x16_t *)(*(_QWORD *)a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v5.i64[0] = -1;
    v5.i64[1] = -1;
    v6 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v4, v5), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    if (v6)
      v7 = -1;
    else
      v7 = 0x80;
    v4->i8[v3 & 0xF] = v7;
    v8 = (_QWORD *)(*((_QWORD *)a1 + 1) + 56 * v3);
    v9 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (*v8 ^ (*v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*v8 ^ (*v8 >> 30))) >> 27));
    *((_QWORD *)a1 + 5) ^= (v9 >> 31) ^ v9;
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v8 + 1);
    if (v6)
      v10 = *((_QWORD *)a1 + 4) + 1;
    else
      v10 = *((_QWORD *)a1 + 4);
    v11 = *((_QWORD *)a1 + 2);
    v12 = *((_QWORD *)a1 + 3) - 1;
    *((_QWORD *)a1 + 3) = v12;
    *((_QWORD *)a1 + 4) = v10;
    if (v11 >= 0x11 && v12 < v11 >> 2)
      re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(a1, 0);
  }
}

void re::ecs2::HierarchyStateTracking<unsigned long long>::clearEntityHierarchyStateData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE v17[120];

  if (*(_DWORD *)(a1 + 84))
  {
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v17);
    v11[0] = 0;
    v11[1] = 0;
    v12 = 1;
    v14 = 0;
    v15 = 0;
    v13 = 0;
    v16 = 0;
    re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v11, (uint64_t)v17, 1uLL);
    *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v11) = a2;
    v4 = v15;
    if (v15)
    {
      v5 = a1 + 56;
      do
      {
        v10 = 0;
        v10 = *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v11, v4 - 1);
        re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v11, --v15);
        ++v16;
        re::HashTable<re::ecs2::Entity const*,re::ecs2::EntityVisualProxyScopeData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(v5, &v10);
        v6 = *(_QWORD *)(v10 + 328);
        if (v6)
        {
          v7 = *(uint64_t **)(v10 + 344);
          v8 = 8 * v6;
          do
          {
            v9 = *v7++;
            *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v11) = v9;
            v8 -= 8;
          }
          while (v8);
        }
        v4 = v15;
      }
      while (v15);
    }
    re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v11);
    if (v11[0])
    {
      if ((v12 & 1) == 0)
        (*(void (**)(void))(*(_QWORD *)v11[0] + 40))();
    }
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v17);
  }
}

uint64_t re::HashSetBase<re::ecs2::Component const*,re::ecs2::Component const*,re::internal::ValueAsKey<re::ecs2::Component const*>,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>::add(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v4 = *a2;
  v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  v7 = *(unsigned int *)(result + 24);
  if ((_DWORD)v7)
  {
    v8 = v6 % v7;
    v9 = *(unsigned int *)(*(_QWORD *)(result + 8) + 4 * (v6 % v7));
    if ((_DWORD)v9 != 0x7FFFFFFF)
    {
      v10 = *(_QWORD *)(result + 16);
      if (*(_QWORD *)(v10 + 24 * v9 + 16) == v4)
        return result;
      while (1)
      {
        LODWORD(v9) = *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v9 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v10 + 24 * v9 + 16) == v4)
          return result;
      }
    }
  }
  else
  {
    LODWORD(v8) = 0;
  }
  result = re::HashSetBase<re::ecs2::Component const*,re::ecs2::Component const*,re::internal::ValueAsKey<re::ecs2::Component const*>,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>::addAsCopy(result, v8, v6, a2);
  ++*(_DWORD *)(v3 + 40);
  return result;
}

uint64_t re::SmallHashSet<unsigned long long,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::add(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  if (*(_DWORD *)(a1 + 124))
  {
    v4 = a1 + 96;
    return re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(v4, a2);
  }
  v7 = (uint64_t *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (uint64_t *)(a1 + 32);
  if (v6)
  {
    v9 = 0;
    while (v8[v9] != *a2)
    {
      if (v6 == ++v9)
        goto LABEL_11;
    }
    if (v9 != v6)
      return (uint64_t)&v8[v9];
LABEL_11:
    if (v6 > 7)
    {
      v13 = *(uint64_t **)a1;
      if (!*(_QWORD *)a1)
      {
      }
      if (!*(_QWORD *)(a1 + 96))
        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::init(a1 + 96, (uint64_t)v13, 16);
      if (*v7)
      {
        v14 = 8 * *v7;
        do
        {
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(a1 + 96, v8++);
          v14 -= 8;
        }
        while (v14);
      }
      *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
      v4 = a1 + 96;
      return re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(v4, a2);
    }
  }
  v10 = re::DynamicInlineArray<unsigned long long,8ul>::ensureCapacity((_QWORD *)(a1 + 16), (uint64_t)a2);
  v12 = *v7;
  if (v10)
  {
    v8[v12++] = *a2;
    *(_QWORD *)(a1 + 16) = v12;
    ++*(_DWORD *)(a1 + 24);
  }
  if (v12)
    return (uint64_t)&v8[v12 - 1];
  re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, -1, 0);
  result = _os_crash();
  __break(1u);
  return result;
}

void *re::ecs2::PortalManagerQuery::perEntityStateMap(re::ecs2::PortalManagerQuery *this)
{
  uint64_t v1;
  unsigned __int8 v3;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return (void *)(v1 + 56);
  if ((v3 & 1) != 0
  {
    return &re::ecs2::PortalManagerQuery::perEntityStateMap(void)const::empty;
  }
  __cxa_atexit((void (*)(void *))re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::~HashTable, &re::ecs2::PortalManagerQuery::perEntityStateMap(void)const::empty, &dword_224FE9000);
  return &re::ecs2::PortalManagerQuery::perEntityStateMap(void)const::empty;
}

uint64_t *re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::~HashTable(uint64_t *a1)
{
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1);
  return a1;
}

_QWORD *re::ecs2::PortalManagerQuery::worldIdForEntity@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v5 = a2;
  v4 = result[1];
  if (v4
    && (result = (_QWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v4 + 56, &v5)) != 0)
  {
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = *result;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  return result;
}

uint64_t *re::ecs2::PortalManagerQuery::worldIds(re::ecs2::PortalManagerQuery *this)
{
  uint64_t v1;
  uint64_t *result;
  unsigned __int8 v3;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return (uint64_t *)(v1 + 472);
  v3 = atomic_load((unsigned __int8 *)&qword_2558330F0);
  result = &qword_255833100;
  if ((v3 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_2558330F0))
    {
      qword_255833100 = 0;
      dword_255833108 = 0;
      qword_255833110 = 0;
      dword_255833118 = 0;
      xmmword_255833160 = 0u;
      unk_255833170 = 0u;
      dword_255833180 = 0;
      *(_QWORD *)algn_255833184 = 0x7FFFFFFFLL;
      __cxa_atexit((void (*)(void *))re::SmallHashSet<unsigned long long,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::~SmallHashSet, &qword_255833100, &dword_224FE9000);
      __cxa_guard_release(&qword_2558330F0);
    }
    return &qword_255833100;
  }
  return result;
}

uint64_t re::ecs2::PortalManagerQuery::worldTypeForWorldId(re::ecs2::PortalManagerQuery *this, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = 0;
  if (a2)
  {
    v4 = *((_QWORD *)this + 1);
    if (v4)
      return *(unsigned int *)(*(_QWORD *)(v4 + 624)
                             + 16
                             * re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find((_QWORD *)(v4 + 616), a2)+ 8);
  }
  return result;
}

void *re::ecs2::PortalManagerQuery::portalsForWorldId(re::ecs2::PortalManagerQuery *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v5;
  unsigned __int8 v6;
  void *v7;
  __guard *v8;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)(v2 + 344), a2);
    if (v3 != -1)
      return (void *)(*(_QWORD *)(v2 + 352) + 56 * v3 + 8);
    v6 = atomic_load((unsigned __int8 *)&_MergedGlobals_65);
    if ((v6 & 1) != 0 || !__cxa_guard_acquire(&_MergedGlobals_65))
      return &_MergedGlobals_8;
    v7 = &_MergedGlobals_8;
    __cxa_atexit((void (*)(void *))re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::~HashSet, &_MergedGlobals_8, &dword_224FE9000);
    v8 = &_MergedGlobals_65;
  }
  else
  {
    v5 = atomic_load((unsigned __int8 *)&qword_2558330F8);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_2558330F8))
      return &unk_2540F7BE0;
    v7 = &unk_2540F7BE0;
    __cxa_atexit((void (*)(void *))re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::~HashSet, &unk_2540F7BE0, &dword_224FE9000);
    v8 = &qword_2558330F8;
  }
  __cxa_guard_release(v8);
  return v7;
}

uint64_t re::ecs2::PortalManager::init(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 256) = a2;
  *(_QWORD *)(result + 696) = result + 8;
  return result;
}

uint64_t re::ecs2::PortalManager::query(re::ecs2::PortalManager *this)
{
  if (*((_DWORD *)this + 35))
  {
    (*(void (**)(char *, char *))(*((_QWORD *)this + 1) + 32))((char *)this + 8, (char *)this + 112);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear((uint64_t)this + 112);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear((uint64_t)this + 208);
  }
  return (uint64_t)this + 688;
}

uint64_t re::ecs2::PortalManager::registerScene(re::ecs2::PortalManager *this, re::ecs2::Scene *a2)
{
  return re::ecs2::HierarchyStateTracking<unsigned long long>::registerScene((re::ecs2::PortalManager *)((char *)this + 8), (uint64_t)a2);
}

uint64_t re::ecs2::HierarchyStateTracking<unsigned long long>::registerScene(_anonymous_namespace_ *a1, uint64_t a2)
{
  re::EventBus *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD v15[2];
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v21 = a2;
  v2 = *(re::EventBus **)(a2 + 288);
  if (v2)
  {
    v15[0] = 0;
    v15[1] = 0;
    v16 = 1;
    v18 = 0;
    v19 = 0;
    v17 = 0;
    v20 = 0;
    v4 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)a1 + 16))(a1);
    if (v5)
    {
      v6 = (uint64_t *)v4;
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidChangeEvent>(a1, v2, (uint64_t)v15, v8);
        re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(a1, v2, (uint64_t)v15, v8);
        re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(a1, v2, (uint64_t)v15, v8);
        v7 -= 8;
      }
      while (v7);
    }
    v9 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)a1 + 24))(a1);
    if (v10)
    {
      v11 = (uint64_t *)v9;
      v12 = 8 * v10;
      do
      {
        v13 = *v11++;
        re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(a1, v2, (uint64_t)v15, v13);
        re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(a1, v2, (uint64_t)v15, v13);
        v12 -= 8;
      }
      while (v12);
    }
    re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<RESceneEntityDidReparentEvent>(a1, v2, (uint64_t)v15, 0);
    re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<RESceneEntityDidActivateEvent>(a1, v2, (uint64_t)v15, 0);
    re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<RESceneEntityWillDeactivateEvent>(a1, v2, (uint64_t)v15, 0);
    re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)a1 + 152, &v21, (uint64_t)v15);
    re::HashSetBase<re::ecs2::Scene const*,re::ecs2::Scene const*,re::internal::ValueAsKey<re::ecs2::Scene const*>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)a1 + 8, &v21);
    re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)v15);
    result = v15[0];
    if (v15[0])
    {
      if ((v16 & 1) == 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 40))();
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) An event bus is expected for this system to track entity state changes.", "eventBus", "registerScene", 100);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::ecs2::PortalManager::unregisterScene(re::ecs2::PortalManager *this, re::ecs2::Scene *a2)
{
  return re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::unregisterScene((uint64_t)this + 8, (uint64_t)a2);
}

void re::ecs2::PortalManager::updateWorldIds(re::ecs2::PortalManager *this)
{
  char *v1;
  char *v2;

  v1 = (char *)this + 8;
  v2 = (char *)this + 112;
  (*(void (**)(char *, char *))(*((_QWORD *)this + 1) + 32))((char *)this + 8, (char *)this + 112);
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear((uint64_t)v2);
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear((uint64_t)(v1 + 200));
}

void re::ecs2::PortalManagerStateTracking::~PortalManagerStateTracking(re::ecs2::PortalManagerStateTracking *this)
{
  re::ecs2::PortalManagerStateTracking::~PortalManagerStateTracking(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t v2;
  double v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24ED5C308;
  v2 = *((_QWORD *)this + 84);
  if (v2)
  {
    if (*((_QWORD *)this + 78))
      *((_QWORD *)this + 78) = 0;
    if (*((_QWORD *)this + 77))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
      *((_QWORD *)this + 77) = 0;
    }
    *(_OWORD *)((char *)this + 648) = 0u;
    *(_OWORD *)((char *)this + 664) = 0u;
    *(_OWORD *)((char *)this + 632) = 0u;
  }
  re::SmallHashSet<unsigned long long,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::~SmallHashSet((uint64_t)this + 472);
  re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 408);
  re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 344);
  v3 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 280);
  v4 = *((_QWORD *)this + 32);
  if (v4)
  {
    if (*((_QWORD *)this + 33))
    {
      (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 34), v3);
      *((_QWORD *)this + 33) = 0;
      *((_QWORD *)this + 34) = 0;
    }
    *((_QWORD *)this + 32) = 0;
  }
  re::ecs2::HierarchyStateTracking<unsigned long long>::~HierarchyStateTracking((uint64_t *)this);
}

uint64_t re::ecs2::HierarchyStateTracking<unsigned long long>::trackedActivationComponents()
{
  return 0;
}

void re::ecs2::PortalManager::~PortalManager(re::ecs2::PortalManager *this)
{
  re::ecs2::PortalManagerStateTracking::~PortalManagerStateTracking((re::ecs2::PortalManager *)((char *)this + 8));
}

{
  re::ecs2::PortalManagerStateTracking::~PortalManagerStateTracking((re::ecs2::PortalManager *)((char *)this + 8));
  JUMPOUT(0x2276933B8);
}

void re::HashSetBase<re::ecs2::Component const*,re::ecs2::Component const*,re::internal::ValueAsKey<re::ecs2::Component const*>,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_64, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 600);
    _os_crash();
    __break(1u);
  }
}

uint64_t *re::ecs2::HierarchyStateTracking<unsigned long long>::~HierarchyStateTracking(uint64_t *a1)
{
  uint64_t *v2;

  *a1 = (uint64_t)off_24ED5C440;
  v2 = a1 + 1;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a1 + 25);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(a1 + 19);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a1 + 13);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 7);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v2);
  return a1;
}

double re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  double result;

  if (*(_QWORD *)(a1 + 56))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3)
      {
        v4 = 56 * v3;
        v5 = (uint64_t *)(v2 + 8);
        do
        {
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v5);
          v5 += 7;
          v4 -= 56;
        }
        while (v4);
      }
      *(_QWORD *)(a1 + 8) = 0;
    }
    if (*(_QWORD *)a1)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56));
      *(_QWORD *)a1 = 0;
    }
    result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<unsigned long long>::trackedComponents()
{
  return 0;
}

uint64_t re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x16_t v7;
  int8x16_t v8;
  unint64_t v9;
  int8x16_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a1[7])
    return -1;
  v2 = a1[2];
  if (v2 < 0x10 || !a1[3])
    return -1;
  v3 = v2 >> 4;
  v4 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v5 = v4 ^ (v4 >> 31);
  v6 = v5 % v3;
  v7 = vdupq_n_s8(v5 & 0x7F);
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  v9 = v5 % v3;
  while (1)
  {
    v10 = *(int8x16_t *)(*a1 + 16 * v9);
    v11 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v7, v10), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    v12 = __clz(__rbit64(v11));
    if (v12 <= 0x3F)
      break;
LABEL_10:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v10, v8), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v9 + 1 == v3)
      v9 = 0;
    else
      ++v9;
    v14 = -1;
    if (v9 == v6)
      return v14;
  }
  v13 = 16 * v9;
  while (1)
  {
    v14 = v12 + v13;
    if (*(_QWORD *)(a1[1] + 56 * (v12 + v13)) == a2)
      return v14;
    if (v12 <= 0x3E)
    {
      v12 = __clz(__rbit64((-2 << v12) & v11));
      if (v12 < 0x40)
        continue;
    }
    goto LABEL_10;
  }
}

_QWORD *re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(_anonymous_namespace_ *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  _QWORD *result;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  int v47;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize((__int128 *)a1, 1u);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13);
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v11;
  v19 = *(_QWORD *)a3;
  v18 = *(_QWORD *)(a3 + 8);
  v39 = *a2;
  v17 = v39;
  v40 = v19;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v20 = *(_QWORD *)(a3 + 16);
  v41 = v18;
  v42 = v20;
  *(_QWORD *)(a3 + 16) = 0;
  v22 = *(_DWORD *)(a3 + 24);
  v21 = *(_DWORD *)(a3 + 28);
  v43 = v22;
  v44 = v21;
  v24 = *(_DWORD *)(a3 + 32);
  v23 = *(_DWORD *)(a3 + 36);
  v45 = v24;
  v46 = v23;
  v47 = 0;
  *(_OWORD *)(a3 + 24) = xmmword_2260F5A80;
  v25 = (uint64_t *)(*((_QWORD *)a1 + 1) + 56 * v16);
  v28 = v25 == &v39;
  *v25 = v17;
  v26 = (uint64_t)(v25 + 1);
  if (!v28)
  {
    v27 = *(_QWORD *)v26;
    if (*(_QWORD *)v26)
      v28 = v27 == v19;
    else
      v28 = 1;
    if (v28)
    {
      *(_QWORD *)v26 = v19;
      v40 = v27;
      v29 = *(_QWORD *)(v26 + 8);
      *(_QWORD *)(v26 + 8) = v18;
      v41 = v29;
      v30 = *(_QWORD *)(v26 + 16);
      *(_QWORD *)(v26 + 16) = v20;
      v42 = v30;
      LODWORD(v30) = *(_DWORD *)(v26 + 24);
      *(_DWORD *)(v26 + 24) = v22;
      v43 = v30;
      LODWORD(v30) = *(_DWORD *)(v26 + 28);
      *(_DWORD *)(v26 + 28) = v21;
      v44 = v30;
      LODWORD(v30) = *(_DWORD *)(v26 + 32);
      *(_DWORD *)(v26 + 32) = v24;
      v45 = v30;
      LODWORD(v30) = *(_DWORD *)(v26 + 36);
      *(_DWORD *)(v26 + 36) = v23;
      v46 = v30;
    }
    else
    {
      re::HashSetBase<re::ecs2::PortalComponent const*,re::ecs2::PortalComponent const*,re::internal::ValueAsKey<re::ecs2::PortalComponent const*>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::clear(v26);
      if (v19)
      {
        if (*(_DWORD *)(v26 + 24) < v44)
          re::HashSetBase<re::ecs2::PortalComponent const*,re::ecs2::PortalComponent const*,re::internal::ValueAsKey<re::ecs2::PortalComponent const*>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::setCapacity(v26, v44);
        v31 = v45;
        if (v45)
        {
          v32 = 0;
          v33 = 0;
          do
          {
            if ((*(_DWORD *)(v42 + v32 + 8) & 0x80000000) != 0)
            {
              re::HashSetBase<re::ecs2::PortalComponent const*,re::ecs2::PortalComponent const*,re::internal::ValueAsKey<re::ecs2::PortalComponent const*>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::addAsCopy(v26, *(_QWORD *)(v42 + v32) % (unint64_t)*(unsigned int *)(v26 + 24), *(_QWORD *)(v42 + v32), v42 + v32 + 16, (_QWORD *)(v42 + v32 + 16));
              v31 = v45;
            }
            ++v33;
            v32 += 24;
          }
          while (v33 < v31);
        }
        ++*(_DWORD *)(v26 + 40);
      }
    }
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(&v40);
  v34 = *((_QWORD *)a1 + 4) - (v15 == 255);
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v34;
  v35 = (unint64_t *)(*((_QWORD *)a1 + 1) + 56 * v16);
  v37 = *v35;
  result = v35 + 1;
  v38 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v37 ^ (v37 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v37 ^ (v37 >> 30))) >> 27));
  *((_QWORD *)a1 + 5) ^= (v38 >> 31) ^ v38;
  return result;
}

void re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(__int128 *a1, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int16 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  _BYTE v28[48];

  v3 = *((_QWORD *)a1 + 2);
  v4 = *((_QWORD *)a1 + 3) + a2;
  v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7)
    v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v7 = (v6 << 7) / 0x97;
  v8 = *((_QWORD *)a1 + 7);
  v27 = 0u;
  *(_OWORD *)v28 = 0u;
  if (v5 > v3)
    v9 = v7;
  else
    v9 = v4;
  memset(&v28[16], 0, 32);
  re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(&v27, v8, v9);
  v10 = *((_QWORD *)a1 + 2);
  if (v10 >= 0x10)
  {
    v11 = 0;
    v12 = v10 >> 4;
    while (1)
    {
      v13 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v14 = (unsigned __int16)~v13;
      if (v13 != 0xFFFF)
        break;
      v11 += 16;
      if (!--v12)
        goto LABEL_12;
    }
    v15 = __clz(__rbit64(v14)) + v11;
    while (v15 != -1)
    {
      re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(&v27, *((_QWORD *)a1 + 1) + 56 * v15, *((_QWORD *)a1 + 1) + 56 * v15 + 8);
      v22 = v15 >> 4;
      v10 = *((_QWORD *)a1 + 2);
      if (v15 >> 4 >= v10 >> 4)
        break;
      v23 = __clz(__rbit64((-2 << (v15 & 0xF)) & v14));
      if (v23 >= 0x40)
      {
        v24 = 16 * v22;
        v25 = ~v22 + (v10 >> 4);
        while (v25)
        {
          v14 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + v24 + 16)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
          v26 = __clz(__rbit64(v14));
          v24 += 16;
          --v25;
          if (v26 <= 0x3F)
          {
            v15 = v26 + v24;
            goto LABEL_20;
          }
        }
        break;
      }
      v15 = v23 + (v15 & 0xFFFFFFFFFFFFFFF0);
LABEL_20:
      ;
    }
  }
LABEL_12:
  v16 = *(_QWORD *)&v28[40];
  *(_QWORD *)&v28[40] = *((_QWORD *)a1 + 7);
  v17 = v27;
  v18 = *(_OWORD *)v28;
  v27 = *a1;
  *(_QWORD *)v28 = v10;
  v19 = *(_OWORD *)&v28[16];
  v20 = *(__int128 *)((char *)a1 + 40);
  *((_QWORD *)a1 + 6) = *(_QWORD *)&v28[32];
  *((_QWORD *)a1 + 7) = v16;
  *(_OWORD *)&v28[24] = v20;
  v21 = *(__int128 *)((char *)a1 + 24);
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v19;
  *(_OWORD *)&v28[8] = v21;
  re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)&v27);
}

_QWORD *re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = result;
  result[7] = a2;
  v4 = 151 * a3;
  v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    v6 = v5 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 57 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *v3 = result;
    if (v4 >= 0x80)
    {
      v7 = 0;
      *(_QWORD *)&v8 = -1;
      *((_QWORD *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      result = (_QWORD *)*v3;
    }
    v3[1] = &result[2 * v6];
    if (v3[2])
    {
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = v3[1] + v9;
        *(_OWORD *)(v11 + 16) = 0uLL;
        *(_OWORD *)(v11 + 32) = 0uLL;
        *(_QWORD *)(v11 + 48) = 0;
        *(_OWORD *)v11 = 0uLL;
        *(_DWORD *)(v11 + 44) = 0x7FFFFFFF;
        ++v10;
        v12 = v3[2];
        v9 += 56;
      }
      while (v10 < v12);
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v12;
  return result;
}

void re::HashSetBase<re::ecs2::PortalComponent const*,re::ecs2::PortalComponent const*,re::internal::ValueAsKey<re::ecs2::PortalComponent const*>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_64, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 24 * v3;
      do
      {
        v6 = *(_QWORD *)(a1 + 16) + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 24;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

void re::HashSetBase<re::ecs2::PortalComponent const*,re::ecs2::PortalComponent const*,re::internal::ValueAsKey<re::ecs2::PortalComponent const*>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::ecs2::Component const*,re::ecs2::Component const*,re::internal::ValueAsKey<re::ecs2::Component const*>,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashSetBase<re::ecs2::PortalComponent const*,re::ecs2::PortalComponent const*,re::internal::ValueAsKey<re::ecs2::PortalComponent const*>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::addAsCopy(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, (_QWORD *)(*(_QWORD *)&v13[16] + v10 + 16));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 24;
        }
        while (v11 < v9);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashSetBase<re::ecs2::PortalComponent const*,re::ecs2::PortalComponent const*,re::internal::ValueAsKey<re::ecs2::PortalComponent const*>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::ecs2::PortalComponent const*,re::ecs2::PortalComponent const*,re::internal::ValueAsKey<re::ecs2::PortalComponent const*>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v10 + 24 * v8 + 8) = v11 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

uint64_t re::BucketArray<re::ecs2::PortalManagerStateTracking::buildWorldIdsForEntityHierarchy(re::ecs2::Entity const*)::EntityWorldId,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::PortalManagerStateTracking::buildWorldIdsForEntityHierarchy(re::ecs2::Entity const*)::EntityWorldId,32ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::ecs2::PortalManagerStateTracking::buildWorldIdsForEntityHierarchy(re::ecs2::Entity const*)::EntityWorldId,32ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  int v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;

  v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      v4 = result[1];
      if (v4 > a2)
      {
        v5 = *((_DWORD *)result + 4);
        do
        {
          v6 = v3 + 3;
          if ((v5 & 1) == 0)
            v6 = (_QWORD *)v3[4];
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v3 + 40))(*v3, v6[v4 - 1]);
          v7 = *((_DWORD *)v3 + 4);
          v4 = v3[1] - 1;
          v3[1] = v4;
          v5 = v7 + 2;
          *((_DWORD *)v3 + 4) = v5;
        }
        while (v4 > a2);
      }
      if (v4 < a2)
      {
        v8 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 512, 0);
          v9 = result;
          if (*v3)
          {
            v10 = v3[1];
            v11 = *((_DWORD *)v3 + 4);
            if ((v11 & 1) == 0)
            {
              v12 = *v8;
              v14 = v10 >= *v8;
              v13 = v10 + 1;
              v14 = !v14 || v12 >= v13;
              if (v14)
                goto LABEL_24;
              v15 = 2 * v12;
              goto LABEL_20;
            }
            v13 = v10 + 1;
            if (v13 >= 3)
            {
              v15 = 4;
LABEL_20:
              if (v15 <= v13)
                v17 = v13;
              else
                v17 = v15;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v17);
              v11 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v16 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v16);
            v11 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v11;
          }
LABEL_24:
          v18 = v3 + 3;
          if ((v11 & 1) == 0)
            v18 = (_QWORD *)v3[4];
          v19 = v3[1];
          v18[v19++] = v9;
          v3[1] = v19;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v19 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::PortalManagerStateTracking::buildWorldIdsForEntityHierarchy(re::ecs2::Entity const*)::EntityWorldId,32ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 5)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 5)) + 16 * (a2 & 0x1F);
}

uint64_t re::HashSetBase<re::ecs2::Component const*,re::ecs2::Component const*,re::internal::ValueAsKey<re::ecs2::Component const*>,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;

  v7 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v7 == 0x7FFFFFFF)
  {
    v7 = *(unsigned int *)(a1 + 32);
    v8 = v7;
    if ((_DWORD)v7 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::ecs2::Component const*,re::ecs2::Component const*,re::internal::ValueAsKey<re::ecs2::Component const*>,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v8 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v8 + 1;
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_DWORD *)(v9 + 24 * v7 + 8);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_DWORD *)(v9 + 24 * v7 + 8);
    *(_DWORD *)(a1 + 36) = v10 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v9 + 24 * v7 + 8) = v10 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v7 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v7 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v7) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v7 + 16) = *a4;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v7;
  ++*(_DWORD *)(a1 + 28);
  return v7;
}

void re::HashSetBase<re::ecs2::Component const*,re::ecs2::Component const*,re::internal::ValueAsKey<re::ecs2::Component const*>,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  signed int v21;
  _BYTE v22[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(_QWORD *)&v22[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::ecs2::Component const*,re::ecs2::Component const*,re::internal::ValueAsKey<re::ecs2::Component const*>,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>::init((uint64_t)v22, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v22;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)v22 = v5;
      *(_QWORD *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = (_QWORD *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v13 - 1) & 0x80000000) != 0)
          {
            v14 = *(v13 - 2);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashSetBase<re::ecs2::Component const*,re::ecs2::Component const*,re::internal::ValueAsKey<re::ecs2::Component const*>,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 24 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 24 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 24 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17) = v14;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 16) = *v13;
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 3;
          --v10;
        }
        while (v10);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2)
      v21 = a2;
    else
      v21 = 3;
  }
}

void re::HashBrown<unsigned long long,re::HashSet<re::ecs2::Component const*,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(_anonymous_namespace_ *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  int v44;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long long,re::HashSet<re::ecs2::Component const*,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize((__int128 *)a1, 1u);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13);
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v11;
  v18 = *(_QWORD *)a3;
  v17 = *(_QWORD *)(a3 + 8);
  v40 = *a2;
  v41 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v19 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)&v42 = v17;
  *((_QWORD *)&v42 + 1) = v19;
  *(_QWORD *)(a3 + 16) = 0;
  v20 = *(_DWORD *)(a3 + 24);
  v21 = *(_DWORD *)(a3 + 28);
  *(_QWORD *)&v43 = __PAIR64__(v21, v20);
  v23 = *(unsigned int *)(a3 + 32);
  v22 = *(_DWORD *)(a3 + 36);
  DWORD2(v43) = *(_DWORD *)(a3 + 32);
  HIDWORD(v43) = v22;
  v44 = 0;
  *(_OWORD *)(a3 + 24) = xmmword_2260F5A80;
  v24 = *((_QWORD *)a1 + 1);
  *(_QWORD *)(v24 + 56 * v16) = v40;
  v25 = v24 + 56 * v16 + 8;
  if (*(_QWORD *)v25)
    v26 = *(_QWORD *)v25 == v18;
  else
    v26 = 1;
  if (v26)
  {
    v41 = *(_QWORD *)(v24 + 56 * v16 + 8);
    v27 = *(_OWORD *)(v24 + 56 * v16 + 16);
    *(_QWORD *)v25 = v18;
    *(_QWORD *)(v24 + 56 * v16 + 16) = v17;
    *(_QWORD *)(v24 + 56 * v16 + 24) = v19;
    v28 = *(_OWORD *)(v24 + 56 * v16 + 32);
    *(_DWORD *)(v24 + 56 * v16 + 32) = v20;
    *(_DWORD *)(v24 + 56 * v16 + 36) = v21;
    *(_DWORD *)(v24 + 56 * v16 + 40) = v23;
    *(_DWORD *)(v24 + 56 * v16 + 44) = v22;
    v42 = v27;
    v43 = v28;
  }
  else
  {
    if (*(_DWORD *)(v24 + 56 * v16 + 36))
    {
      v29 = *(unsigned int *)(v24 + 56 * v16 + 32);
      if ((_DWORD)v29)
        memset_pattern16(*(void **)(v24 + 56 * v16 + 16), &memset_pattern_64, 4 * v29);
      v30 = *(unsigned int *)(v25 + 32);
      if ((_DWORD)v30)
      {
        v31 = 0;
        v32 = 24 * v30;
        do
        {
          v33 = *(_QWORD *)(v25 + 16) + v31;
          v34 = *(_DWORD *)(v33 + 8);
          if (v34 < 0)
            *(_DWORD *)(v33 + 8) = v34 & 0x7FFFFFFF;
          v31 += 24;
        }
        while (v32 != v31);
      }
      *(_DWORD *)(v25 + 28) = 0;
      *(_DWORD *)(v25 + 32) = 0;
      v35 = *(_DWORD *)(v25 + 40) + 1;
      *(_DWORD *)(v25 + 36) = 0x7FFFFFFF;
      *(_DWORD *)(v25 + 40) = v35;
    }
    if (v18)
    {
      if (*(_DWORD *)(v25 + 24) < v21)
        re::HashSetBase<re::ecs2::Component const*,re::ecs2::Component const*,re::internal::ValueAsKey<re::ecs2::Component const*>,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>::setCapacity(v25, v21);
      if ((_DWORD)v23)
      {
        v36 = (_QWORD *)(v19 + 16);
        do
        {
          if ((*(_DWORD *)(v36 - 1) & 0x80000000) != 0)
            re::HashSetBase<re::ecs2::Component const*,re::ecs2::Component const*,re::internal::ValueAsKey<re::ecs2::Component const*>,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>::addAsCopy(v25, *(v36 - 2) % (unint64_t)*(unsigned int *)(v25 + 24), *(v36 - 2), v36);
          v36 += 3;
          --v23;
        }
        while (v23);
      }
      ++*(_DWORD *)(v25 + 40);
    }
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(&v41);
  v37 = *((_QWORD *)a1 + 4) - (v15 == 255);
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v37;
  v38 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 56 * v16);
  v39 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v38 ^ (v38 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v38 ^ (v38 >> 30))) >> 27));
  *((_QWORD *)a1 + 5) ^= (v39 >> 31) ^ v39;
}

void re::HashBrown<unsigned long long,re::HashSet<re::ecs2::Component const*,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(__int128 *a1, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int16 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  _BYTE v28[48];

  v3 = *((_QWORD *)a1 + 2);
  v4 = *((_QWORD *)a1 + 3) + a2;
  v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7)
    v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v7 = (v6 << 7) / 0x97;
  v8 = *((_QWORD *)a1 + 7);
  v27 = 0u;
  *(_OWORD *)v28 = 0u;
  if (v5 > v3)
    v9 = v7;
  else
    v9 = v4;
  memset(&v28[16], 0, 32);
  re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(&v27, v8, v9);
  v10 = *((_QWORD *)a1 + 2);
  if (v10 >= 0x10)
  {
    v11 = 0;
    v12 = v10 >> 4;
    while (1)
    {
      v13 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v14 = (unsigned __int16)~v13;
      if (v13 != 0xFFFF)
        break;
      v11 += 16;
      if (!--v12)
        goto LABEL_12;
    }
    v15 = __clz(__rbit64(v14)) + v11;
    while (v15 != -1)
    {
      re::HashBrown<unsigned long long,re::HashSet<re::ecs2::Component const*,re::Hash<re::ecs2::Component const*>,re::EqualTo<re::ecs2::Component const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(&v27, *((_QWORD *)a1 + 1) + 56 * v15, *((_QWORD *)a1 + 1) + 56 * v15 + 8);
      v22 = v15 >> 4;
      v10 = *((_QWORD *)a1 + 2);
      if (v15 >> 4 >= v10 >> 4)
        break;
      v23 = __clz(__rbit64((-2 << (v15 & 0xF)) & v14));
      if (v23 >= 0x40)
      {
        v24 = 16 * v22;
        v25 = ~v22 + (v10 >> 4);
        while (v25)
        {
          v14 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + v24 + 16)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
          v26 = __clz(__rbit64(v14));
          v24 += 16;
          --v25;
          if (v26 <= 0x3F)
          {
            v15 = v26 + v24;
            goto LABEL_20;
          }
        }
        break;
      }
      v15 = v23 + (v15 & 0xFFFFFFFFFFFFFFF0);
LABEL_20:
      ;
    }
  }
LABEL_12:
  v16 = *(_QWORD *)&v28[40];
  *(_QWORD *)&v28[40] = *((_QWORD *)a1 + 7);
  v17 = v27;
  v18 = *(_OWORD *)v28;
  v27 = *a1;
  *(_QWORD *)v28 = v10;
  v19 = *(_OWORD *)&v28[16];
  v20 = *(__int128 *)((char *)a1 + 40);
  *((_QWORD *)a1 + 6) = *(_QWORD *)&v28[32];
  *((_QWORD *)a1 + 7) = v16;
  *(_OWORD *)&v28[24] = v20;
  v21 = *(__int128 *)((char *)a1 + 24);
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v19;
  *(_OWORD *)&v28[8] = v21;
  re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)&v27);
}

uint64_t re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v4 = *a2;
  v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  v7 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v7)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % v7;
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v6 % v7));
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsCopy(a1, v8, v6, (uint64_t)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 16) + 16 * v12;
    return v11 + 8;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v10 + 16 * v9 + 8) != v4)
  {
    v9 = *(_DWORD *)(v10 + 16 * v9) & 0x7FFFFFFF;
    if ((_DWORD)v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v11 = v10 + 16 * v9;
  return v11 + 8;
}

void re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 16 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_64, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 600);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  int v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v7 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v7 == 0x7FFFFFFF)
  {
    v7 = *(unsigned int *)(a1 + 32);
    v8 = v7;
    if ((_DWORD)v7 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v8 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v8 + 1;
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 16 * v7);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 16 * v7);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  v12 = 16 * v7;
  *(_DWORD *)(v10 + v12) = v11 | 0x80000000;
  v13 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v12) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 16 * v7) & 0x80000000 | *(_DWORD *)(v13 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16 * v7 + 8) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v7;
  ++*(_DWORD *)(a1 + 28);
  return v7;
}

void re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 30));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsCopy(a1, v13 % *(unsigned int *)(a1 + 24), v13, *(_QWORD *)&v15[16] + v10 + 8, *(_QWORD *)&v15[16] + v10 + 8);
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 16;
        }
        while (v11 < v9);
      }
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

uint64_t re::DynamicInlineArray<unsigned long long,8ul>::ensureCapacity(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (*a1 <= 7uLL)
    return 1;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(uint64_t *a1, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int8x16_t v14;
  unsigned __int16 v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  __int128 v50;
  _BYTE v51[48];

  v3 = a1[2];
  v4 = a1[3] + a2;
  v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7)
    v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v7 = (v6 << 7) / 0x97;
  v8 = a1[7];
  v50 = 0u;
  *(_OWORD *)v51 = 0u;
  if (v5 > v3)
    v9 = v7;
  else
    v9 = v4;
  memset(&v51[16], 0, 32);
  v10 = (_anonymous_namespace_ *)re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(&v50, v8, v9);
  v11 = a1[2];
  if (v11 >= 0x10)
  {
    v12 = 0;
    v13 = v11 >> 4;
    v14 = (int8x16_t)xmmword_2260EE390;
    while (1)
    {
      v15 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v12)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v16 = (unsigned __int16)~v15;
      if (v15 != 0xFFFF)
        break;
      v12 += 16;
      if (!--v13)
        goto LABEL_12;
    }
    v17 = __clz(__rbit64(v16)) + v12;
    while (v17 != -1)
    {
      v27 = a1[1];
      if (!*(_QWORD *)&v51[40])
      {
        v49 = v14;
        v14 = v49;
      }
      if (!*(_QWORD *)&v51[16]
        || (v28 = *(_QWORD *)v51, *(_QWORD *)v51 > (unint64_t)(8 * *(_QWORD *)&v51[16])))
      {
        v48 = v14;
        v10 = (_anonymous_namespace_ *)re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(&v50, 1);
        v14 = v48;
        v28 = *(_QWORD *)v51;
      }
      v29 = (_QWORD *)(v27 + 16 * v17);
      v30 = 0xBF58476D1CE4E5B9 * (*v29 ^ (*v29 >> 30));
      v31 = (0x94D049BB133111EBLL * (v30 ^ (v30 >> 27))) ^ ((0x94D049BB133111EBLL * (v30 ^ (v30 >> 27))) >> 31);
      v32 = v28 >> 4;
      v33 = v31 % (v28 >> 4);
      v34 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v50 + 16 * v33)), v14)))), (int8x8_t)0x3830282018100800)));
      if (v34 >= 0x40)
      {
        do
        {
          if (v33 + 1 == v32)
            v33 = 0;
          else
            ++v33;
          v34 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v50 + 16 * v33)), v14)))), (int8x8_t)0x3830282018100800)));
        }
        while (v34 > 0x3F);
      }
      v35 = (int *)(v29 + 1);
      v36 = v50 + 16 * v33;
      v37 = *(unsigned __int8 *)(v36 + v34) == 255;
      *(_BYTE *)(v36 + v34) = v31 & 0x7F;
      v38 = *v29;
      v39 = *v35;
      v40 = *(_QWORD *)&v51[8];
      v41 = *((_QWORD *)&v50 + 1) + 16 * (v34 + 16 * v33);
      *(_QWORD *)v41 = v38;
      *(_DWORD *)(v41 + 8) = v39;
      *(_QWORD *)&v51[8] = v40 + 1;
      *(_QWORD *)&v51[16] -= v37;
      v42 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v38 ^ (v38 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v38 ^ (v38 >> 30))) >> 27));
      *(_QWORD *)&v51[24] ^= (v42 >> 31) ^ v42;
      v43 = v17 >> 4;
      v11 = a1[2];
      if (v17 >> 4 >= v11 >> 4)
        break;
      v44 = __clz(__rbit64((-2 << (v17 & 0xF)) & v16));
      if (v44 >= 0x40)
      {
        v45 = 16 * v43;
        v46 = ~v43 + (v11 >> 4);
        while (v46)
        {
          v16 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v45 + 16)), v14)))), (int8x8_t)0x3830282018100800);
          v47 = __clz(__rbit64(v16));
          v45 += 16;
          --v46;
          if (v47 <= 0x3F)
          {
            v17 = v47 + v45;
            goto LABEL_30;
          }
        }
        break;
      }
      v17 = v44 + (v17 & 0xFFFFFFFFFFFFFFF0);
LABEL_30:
      ;
    }
  }
LABEL_12:
  v19 = *(_QWORD *)&v51[40];
  *(_QWORD *)&v51[40] = a1[7];
  result = *(_QWORD *)&v51[40];
  v20 = v50;
  v21 = *(_OWORD *)v51;
  *(_QWORD *)v51 = v11;
  v22 = *a1;
  v23 = a1[1];
  *(_QWORD *)&v50 = *a1;
  *((_QWORD *)&v50 + 1) = v23;
  v24 = *(_OWORD *)&v51[16];
  v25 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v51[32];
  a1[7] = v19;
  *(_OWORD *)&v51[24] = v25;
  v26 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v20;
  *((_OWORD *)a1 + 1) = v21;
  *((_OWORD *)a1 + 2) = v24;
  *(_OWORD *)&v51[8] = v26;
  if (result)
  {
    if (v23)
      *((_QWORD *)&v50 + 1) = 0;
    if (v22)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

_QWORD *re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;

  v3 = result;
  result[7] = a2;
  v4 = 151 * a3;
  v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    v6 = v5 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 17 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *v3 = result;
    if (v4 >= 0x80)
    {
      v7 = 0;
      *(_QWORD *)&v8 = -1;
      *((_QWORD *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      result = (_QWORD *)*v3;
    }
    v9 = &result[2 * v6];
    v3[1] = v9;
    v10 = v3[2];
    if (v10)
    {
      v11 = v9 + 1;
      v12 = v3[2];
      do
      {
        *((_QWORD *)v11 - 1) = 0;
        *v11 = 0;
        v11 += 4;
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    v10 = 0;
    *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v10;
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidChangeEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _BYTE v14[24];
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = re::globalAllocators(a1)[2];
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 32, 0);
  *v8 = &off_24ED5C480;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<unsigned long long>::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>;
  v8[3] = 0;
  v16 = v8;
  v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(a2, (uint64_t)v14, a4, 0);
  v11 = v10;
  v12 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *v12 = v9;
  v12[1] = v11;
  result = (uint64_t)v16;
  if (v16)
  {
    result = (**(uint64_t (***)(_BYTE *))v16)(v16);
    if (v16 != v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _BYTE v14[24];
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = re::globalAllocators(a1)[2];
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 32, 0);
  *v8 = &off_24ED5C4D8;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<unsigned long long>::invalidateEntityHierarchyEventHandler<REComponentDidActivateEvent>;
  v8[3] = 0;
  v16 = v8;
  v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(a2, (uint64_t)v14, a4, 0);
  v11 = v10;
  v12 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *v12 = v9;
  v12[1] = v11;
  result = (uint64_t)v16;
  if (v16)
  {
    result = (**(uint64_t (***)(_BYTE *))v16)(v16);
    if (v16 != v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _BYTE v14[24];
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = re::globalAllocators(a1)[2];
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 32, 0);
  *v8 = &off_24ED5C530;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<unsigned long long>::invalidateEntityHierarchyEventHandler<REComponentWillDeactivateEvent>;
  v8[3] = 0;
  v16 = v8;
  v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(a2, (uint64_t)v14, a4, 0);
  v11 = v10;
  v12 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *v12 = v9;
  v12[1] = v11;
  result = (uint64_t)v16;
  if (v16)
  {
    result = (**(uint64_t (***)(_BYTE *))v16)(v16);
    if (v16 != v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<RESceneEntityDidReparentEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _BYTE v14[24];
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = re::globalAllocators(a1)[2];
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 32, 0);
  *v8 = &off_24ED5C588;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<unsigned long long>::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>;
  v8[3] = 0;
  v16 = v8;
  v9 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(a2, (uint64_t)v14, a4, 0);
  v11 = v10;
  v12 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *v12 = v9;
  v12[1] = v11;
  result = (uint64_t)v16;
  if (v16)
  {
    result = (**(uint64_t (***)(_BYTE *))v16)(v16);
    if (v16 != v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<RESceneEntityDidActivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _BYTE v14[24];
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = re::globalAllocators(a1)[2];
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 32, 0);
  *v8 = &off_24ED5C5E0;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<unsigned long long>::invalidateEntityHierarchyEventHandler<RESceneEntityDidActivateEvent>;
  v8[3] = 0;
  v16 = v8;
  v9 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidActivateEvent>(a2, (uint64_t)v14, a4, 0);
  v11 = v10;
  v12 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *v12 = v9;
  v12[1] = v11;
  result = (uint64_t)v16;
  if (v16)
  {
    result = (**(uint64_t (***)(_BYTE *))v16)(v16);
    if (v16 != v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<unsigned long long>::subscribeToEventToInvalidateEntityHierarchy<RESceneEntityWillDeactivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _BYTE v14[24];
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = re::globalAllocators(a1)[2];
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 32, 0);
  *v8 = &off_24ED5C638;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<unsigned long long>::invalidateEntityHierarchyEventHandler<RESceneEntityWillDeactivateEvent>;
  v8[3] = 0;
  v16 = v8;
  v9 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillDeactivateEvent>(a2, (uint64_t)v14, a4, 0);
  v11 = v10;
  v12 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *v12 = v9;
  v12[1] = v11;
  result = (uint64_t)v16;
  if (v16)
  {
    result = (**(uint64_t (***)(_BYTE *))v16)(v16);
    if (v16 != v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<unsigned long long>::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5C480;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5C480;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<unsigned long long>::invalidateEntityHierarchyEventHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5C4D8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5C4D8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<unsigned long long>::invalidateEntityHierarchyEventHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5C530;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5C530;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<unsigned long long>::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5C588;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5C588;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<unsigned long long>::invalidateEntityHierarchyEventHandler<RESceneEntityDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  if (!*(_BYTE *)(a2 + 371))
  {
    v3 = a1 + 200;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v5);
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v5);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5C5E0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5C5E0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<unsigned long long>::invalidateEntityHierarchyEventHandler<RESceneEntityWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  v3 = a1 + 200;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 104, &v5);
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(v3, &v5);
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5C638;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5C638;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<unsigned long long>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<unsigned long long>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::PeerVideoStreamingManager::~PeerVideoStreamingManager(re::PeerVideoStreamingManager *this)
{
  double v2;
  uint64_t v3;
  const void *v4;
  void *v5;

  if (*((_BYTE *)this + 32))
    re::PeerVideoStreamingManager::deinit(this);
  re::Event<re::Engine>::~Event((uint64_t *)this + 28);
  re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::deinit((uint64_t *)this + 22);
  v2 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::deinit((uint64_t *)this + 16);
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v3 + 40))(v3, v2);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 10) = 0;
    ++*((_DWORD *)this + 26);
  }
  v4 = (const void *)*((_QWORD *)this + 7);
  if (v4)
    CFRelease(v4);
  v5 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;

}

{
  re::PeerVideoStreamingManager::~PeerVideoStreamingManager(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::PeerVideoStreamingManager::deinit(re::PeerVideoStreamingManager *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    v3 = *((_QWORD *)this + 14);
    v4 = 8 * v2;
    do
    {
      v3 += 8;
      RESyncNetSessionRemoveObserver();
      v4 -= 8;
    }
    while (v4);
  }
  RESyncServiceRemoveObserver();
  RESyncRelease();
  RESyncRelease();
  result = *((_QWORD *)this + 28);
  if (result)
  {
    if (*((_QWORD *)this + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *((_QWORD *)this + 32) = 0;
    *((_QWORD *)this + 29) = 0;
    *((_QWORD *)this + 30) = 0;
    *((_QWORD *)this + 28) = 0;
    ++*((_DWORD *)this + 62);
  }
  return result;
}

uint64_t re::PeerVideoStreamingManager::setupSessionObs(re::PeerVideoStreamingManager *this)
{
  *((_QWORD *)this + 9) = RESyncNetSessionObserverCreate();
  RESyncNetSessionObserverOnReceiveData();
  return RESyncNetSessionObserverOnParticipantLeave();
}

uint64_t ___ZN2re25PeerVideoStreamingManager15setupSessionObsEv_block_invoke(re *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  re *v12;
  uint64_t v13;
  re *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD v26[4];
  _BYTE v27[184];
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = *((_QWORD *)a1 + 4);
  v9 = re::globalAllocators(a1)[2];
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, 40, 0);
  *(_QWORD *)v10 = &off_24ED5C7C0;
  *(_QWORD *)(v10 + 8) = v8;
  *(_QWORD *)(v10 + 16) = a3;
  *(_QWORD *)(v10 + 24) = a4;
  *(_DWORD *)(v10 + 32) = a5;
  v26[0] = &off_24ED7DDA8;
  v26[1] = a4;
  v26[2] = a4;
  v26[3] = a4 + a5;
  re::OPackReader::OPackReader((uint64_t)v27, (uint64_t)v26);
  v12 = (re *)re::OPackReader::next((re::OPackReader *)v27, v11);
  if ((_DWORD)v12 && v29 == 12)
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v14 = (re *)re::OPackReader::next((re::OPackReader *)v27, v13);
    if ((_DWORD)v14 && v29 == 13)
    {
      while (1)
      {
        v14 = (re *)re::OPackReader::next((re::OPackReader *)v27, v15);
        if (!(_DWORD)v14 || v29 != 6)
          break;
        if (v30 == 1)
        {
          v14 = (re *)re::OPackReader::next((re::OPackReader *)v27, v16);
          if (!(_DWORD)v14 || v29 != 6)
            goto LABEL_32;
          v25 = v30;
        }
        else if ((_BYTE)v30)
        {
          re::OPackReader::next((re::OPackReader *)v27, v16);
        }
        else
        {
          v14 = (re *)re::OPackReader::next((re::OPackReader *)v27, v16);
          if (!(_DWORD)v14 || v29 != 13)
            goto LABEL_32;
          while (1)
          {
            v14 = (re *)re::OPackReader::next((re::OPackReader *)v27, v17);
            if (!(_DWORD)v14 || v29 != 6)
              break;
            if (v30 == 1)
            {
              v14 = (re *)re::OPackReader::next((re::OPackReader *)v27, v15);
              if (!(_DWORD)v14 || v29 != 6)
                goto LABEL_32;
              v24 = v30;
            }
            else if ((_BYTE)v30)
            {
              re::OPackReader::next((re::OPackReader *)v27, v15);
            }
            else
            {
              v14 = (re *)re::OPackReader::next((re::OPackReader *)v27, v15);
              if (!(_DWORD)v14 || v29 != 6)
                goto LABEL_32;
              v23 = v30;
            }
          }
          if (v28 != 5)
            goto LABEL_32;
        }
      }
      if (v28 == 5)
      {
        (*(void (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v10 + 16))(v10, &v23, v27);
        goto LABEL_33;
      }
    }
LABEL_32:
    v18 = *re::peerVideoStreamingLogObjects(v14);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    v22 = 0;
    v19 = "Failed to read message header. Skipping reading payload.";
    v20 = (uint8_t *)&v22;
LABEL_35:
    _os_log_error_impl(&dword_224FE9000, v18, OS_LOG_TYPE_ERROR, v19, v20, 2u);
    goto LABEL_33;
  }
  v18 = *re::peerVideoStreamingLogObjects(v12);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v23) = 0;
    v19 = "Failed to read message. Unexpected OPack type. Skipping reading payload.";
    v20 = (uint8_t *)&v23;
    goto LABEL_35;
  }
LABEL_33:
  re::OPackReader::~OPackReader((re::OPackReader *)v27);
  (**(void (***)(uint64_t))v10)(v10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 40))(v9, v10);
}

uint64_t ___ZN2re25PeerVideoStreamingManager15setupSessionObsEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  _OWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  _BYTE *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  __int128 *v38;
  re *v39;
  NSObject *v40;
  uint64_t v41;
  __int128 v42;
  NSObject *v43;
  _BYTE *v44;
  _OWORD *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t *v48;
  unint64_t v49;
  char *v50;
  int v51;
  _OWORD *v52;
  uint64_t v53;
  _BYTE buf[12];
  __int16 v55;
  _BYTE v56[10];
  uint8_t v57[4];
  uint64_t v58;
  __int16 v59;
  _BYTE *v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  result = RESyncParticipantGetPeerID();
  v53 = result;
  v3 = *(unsigned int *)(v1 + 160);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = (_DWORD *)(*(_QWORD *)(v1 + 144) + 8);
    while ((*v5 & 0x80000000) == 0)
    {
      v5 += 84;
      if (v3 == ++v4)
      {
        LODWORD(v4) = *(_DWORD *)(v1 + 160);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if ((_DWORD)v3 != (_DWORD)v4)
  {
    v6 = v4;
    do
    {
      v7 = *(_QWORD *)(v1 + 144) + 336 * v6;
      result = re::DynamicArray<unsigned long long>::remove(v7 + 32, &v53);
      if ((_DWORD)result)
      {
        v8 = *re::peerVideoStreamingLogObjects((re *)result);
        result = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)result)
        {
          v9 = (uint64_t *)(v7 + 16);
          v10 = v53;
          v12 = *v9;
          v11 = v9[1];
          v13 = v8;
          re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&v48, v12, v11);
          v14 = (v49 & 1) != 0 ? v50 : (char *)&v49 + 1;
          *(_DWORD *)buf = 134218242;
          *(_QWORD *)&buf[4] = v10;
          v55 = 2080;
          *(_QWORD *)v56 = v14;
          _os_log_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEFAULT, "Peer %llu left. Removed as client from write end: %s", buf, 0x16u);

          result = (uint64_t)v48;
          if (v48)
          {
            if ((v49 & 1) != 0)
              result = (*(uint64_t (**)(void))(*v48 + 40))();
          }
        }
      }
      if (*(_DWORD *)(v1 + 160) <= (v4 + 1))
        v15 = v4 + 1;
      else
        v15 = *(_DWORD *)(v1 + 160);
      while (1)
      {
        v6 = (v4 + 1);
        if (v15 - 1 == (_DWORD)v4)
          break;
        LODWORD(v4) = v4 + 1;
        v16 = v6;
        if ((*(_DWORD *)(*(_QWORD *)(v1 + 144) + 336 * v6 + 8) & 0x80000000) != 0)
          goto LABEL_24;
      }
      v16 = v15;
LABEL_24:
      LODWORD(v4) = v16;
    }
    while ((_DWORD)v3 != v16);
  }
  v52 = 0;
  v49 = 0;
  v50 = 0;
  v48 = 0;
  v51 = 0;
  v17 = *(unsigned int *)(v1 + 208);
  if ((_DWORD)v17)
  {
    v18 = 0;
    v19 = (int *)(*(_QWORD *)(v1 + 192) + 8);
    while (1)
    {
      v20 = *v19;
      v19 += 42;
      if (v20 < 0)
        break;
      if (v17 == ++v18)
      {
        LODWORD(v18) = *(_DWORD *)(v1 + 208);
        break;
      }
    }
  }
  else
  {
    LODWORD(v18) = 0;
  }
  if ((_DWORD)v17 != (_DWORD)v18)
  {
    v21 = 0;
    v22 = 0;
    v46 = v1 + 176;
    v23 = v18;
    do
    {
      v24 = *(_QWORD *)(v1 + 192);
      v25 = v24 + 168 * v23;
      v26 = (uint64_t *)(v25 + 16);
      if (*(_QWORD *)(v25 + 40) == v53)
      {
        if (v22 >= v49)
        {
          if (v49 < v22 + 1)
          {
            if (v48)
            {
              v27 = 8;
              if (v49)
                v27 = 2 * v49;
              if (v27 <= v22 + 1)
                v28 = v22 + 1;
              else
                v28 = v27;
              re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v48, v28);
            }
            else
            {
              re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v48, v22 + 1);
              ++v51;
            }
          }
          v22 = (unint64_t)v50;
          v21 = v52;
        }
        v21[v22] = *(_OWORD *)v26;
        v22 = (unint64_t)++v50;
        ++v51;
      }
      result = re::DynamicArray<unsigned long long>::remove(v24 + 168 * v23 + 48, &v53);
      if ((_DWORD)result)
      {
        v29 = *re::peerVideoStreamingLogObjects((re *)result);
        result = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)result)
        {
          v30 = v53;
          v31 = *v26;
          v32 = v26[1];
          v33 = v29;
          re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)buf, v31, v32);
          v34 = &buf[9];
          if ((buf[8] & 1) != 0)
            v34 = *(_BYTE **)&v56[2];
          *(_DWORD *)v57 = 134218242;
          v58 = v30;
          v59 = 2080;
          v60 = v34;
          _os_log_impl(&dword_224FE9000, v33, OS_LOG_TYPE_DEFAULT, "Peer %llu left. Removed as proxy client from read end: %s", v57, 0x16u);

          result = *(_QWORD *)buf;
          if (*(_QWORD *)buf && (buf[8] & 1) != 0)
            result = (*(uint64_t (**)(void))(**(_QWORD **)buf + 40))();
        }
      }
      v35 = *(_DWORD *)(v1 + 208);
      if (v35 <= (int)v18 + 1)
        v35 = v18 + 1;
      while (1)
      {
        v23 = (v18 + 1);
        if (v35 - 1 == (_DWORD)v18)
          break;
        LODWORD(v18) = v18 + 1;
        v36 = v23;
        if ((*(_DWORD *)(*(_QWORD *)(v1 + 192) + 168 * v23 + 8) & 0x80000000) != 0)
          goto LABEL_59;
      }
      v36 = v35;
LABEL_59:
      LODWORD(v18) = v36;
    }
    while ((_DWORD)v17 != v36);
    v45 = v52;
    if (v22)
    {
      v37 = 16 * v22;
      v38 = v52;
      do
      {
        v47 = *v38;
        re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::remove(v46, (re::PeerVideoStreamId *)&v47);
        v40 = *re::peerVideoStreamingLogObjects(v39);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          v41 = v53;
          v42 = v47;
          v43 = v40;
          re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)buf, v42);
          v44 = (buf[8] & 1) != 0 ? *(_BYTE **)&v56[2] : &buf[9];
          *(_DWORD *)v57 = 134218242;
          v58 = v41;
          v59 = 2080;
          v60 = v44;
          _os_log_impl(&dword_224FE9000, v43, OS_LOG_TYPE_DEFAULT, "Peer %llu left. Removed read end: %s", v57, 0x16u);

          if (*(_QWORD *)buf)
          {
            if ((buf[8] & 1) != 0)
              (*(void (**)(void))(**(_QWORD **)buf + 40))();
          }
        }
        ++v38;
        v37 -= 16;
      }
      while (v37);
    }
    result = (uint64_t)v48;
    if (v48)
    {
      if (v45)
        return (*(uint64_t (**)(void))(*v48 + 40))();
    }
  }
  return result;
}

void re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::remove(uint64_t a1, re::PeerVideoStreamId *this)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  if (*(_QWORD *)a1)
  {
    v4 = re::PeerVideoStreamId::hash(this) % *(unsigned int *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(unsigned int *)(v5 + 4 * v4);
    if ((_DWORD)v6 != 0x7FFFFFFF)
    {
      v7 = *(_QWORD *)(a1 + 16);
      v8 = 0x7FFFFFFFLL;
      while (*(_QWORD *)(v7 + 168 * v6 + 16) != *(_QWORD *)this
           || *(_QWORD *)(v7 + 168 * v6 + 24) != *((_QWORD *)this + 1))
      {
        v8 = v6;
        v6 = *(_DWORD *)(v7 + 168 * v6 + 8) & 0x7FFFFFFF;
        if (v6 == 0x7FFFFFFF)
          return;
      }
      v9 = *(_DWORD *)(v7 + 168 * v6 + 8) & 0x7FFFFFFF;
      if (v8 == 0x7FFFFFFF)
        *(_DWORD *)(v5 + 4 * v4) = v9;
      else
        *(_DWORD *)(v7 + 168 * v8 + 8) = *(_DWORD *)(v7 + 168 * v8 + 8) & 0x80000000 | v9;
      re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::EntryWithHash::free(*(_QWORD *)(a1 + 16) + 168 * v6);
      v10 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)(*(_QWORD *)(a1 + 16) + 168 * v6 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 168 * v6 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
      --*(_DWORD *)(a1 + 28);
      *(_DWORD *)(a1 + 36) = v6;
      *(_DWORD *)(a1 + 40) = v10 + 1;
    }
  }
}

uint64_t re::PeerVideoStreamingManager::init(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t SessionCount;
  uint64_t v10;
  uint64_t i;
  uint64_t result;
  _QWORD v13[11];

  objc_storeStrong((id *)(a1 + 8), *(id *)a2);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 8);
  re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(a1 + 224), 0);
  ++*(_DWORD *)(a1 + 248);
  re::PeerVideoStreamingManager::setupSessionObs((re::PeerVideoStreamingManager *)a1);
  v7 = RESyncServiceObserverCreate();
  v8 = MEMORY[0x24BDAC760];
  *(_QWORD *)(a1 + 64) = v7;
  v13[6] = v8;
  v13[7] = 3221225472;
  v13[8] = ___ZN2re25PeerVideoStreamingManager4initERKNS0_6ConfigE_block_invoke;
  v13[9] = &__block_descriptor_40_e27_v16__0__RESyncNetSession__8l;
  v13[10] = a1;
  RESyncServiceObserverOnSessionDidAdd();
  v13[1] = v8;
  v13[2] = 3221225472;
  v13[3] = ___ZN2re25PeerVideoStreamingManager4initERKNS0_6ConfigE_block_invoke_2;
  v13[4] = &__block_descriptor_40_e27_v16__0__RESyncNetSession__8l;
  v13[5] = a1;
  RESyncServiceObserverOnSessionWillRemove();
  RESyncServiceAddObserver();
  SessionCount = RESyncServiceGetSessionCount();
  if (SessionCount)
  {
    v10 = SessionCount;
    for (i = 0; i != v10; ++i)
    {
      RESyncServiceGetSession();
      v13[0] = 0;
      v13[0] = RESyncSessionGetNetSession();
      if (v13[0])
      {
        re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)(a1 + 80), v13);
        RESyncNetSessionAddObserver();
      }
    }
  }
  result = RESyncServiceGetLocalPeerId();
  *(_QWORD *)(a1 + 40) = result;
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

uint64_t ___ZN2re25PeerVideoStreamingManager4initERKNS0_6ConfigE_block_invoke(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v7 = a2;
  v2 = *(_QWORD **)(result + 32);
  v3 = v2[14];
  v4 = v2[12];
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (_QWORD *)v2[14];
    while (*v6 != a2)
    {
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v6 = (_QWORD *)(v3 + 8 * v4);
        break;
      }
    }
  }
  else
  {
    v6 = (_QWORD *)v2[14];
  }
  if (v4 == ((uint64_t)v6 - v3) >> 3)
  {
    re::DynamicArray<re::TransitionCondition *>::add(v2 + 10, &v7);
    return RESyncNetSessionAddObserver();
  }
  return result;
}

uint64_t ___ZN2re25PeerVideoStreamingManager4initERKNS0_6ConfigE_block_invoke_2(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v3 = *(_QWORD *)(result + 32);
  v4 = *(_QWORD *)(v3 + 112);
  v5 = *(_QWORD *)(v3 + 96);
  if (v5)
  {
    v6 = 8 * v5;
    v7 = *(_QWORD **)(v3 + 112);
    while (*v7 != a2)
    {
      ++v7;
      v6 -= 8;
      if (!v6)
      {
        v7 = (_QWORD *)(v4 + 8 * v5);
        break;
      }
    }
  }
  else
  {
    v7 = *(_QWORD **)(v3 + 112);
  }
  if (v5 != ((uint64_t)v7 - v4) >> 3)
  {
    result = RESyncNetSessionRemoveObserver();
    v8 = *(_QWORD **)(v3 + 112);
    v9 = *(_QWORD *)(v3 + 96);
    v10 = &v8[v9];
    v11 = v8;
    if (v9)
    {
      v12 = 8 * v9;
      v11 = *(_QWORD **)(v3 + 112);
      while (*v11 != a2)
      {
        ++v11;
        v12 -= 8;
        if (!v12)
        {
          v11 = &v8[v9];
          break;
        }
      }
    }
    v13 = v11 - v8;
    if (v13 != v9)
    {
      if (v9 <= v13)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v14 = v9 - 1;
      if (v14 > v13)
        v8[v13] = *(v10 - 1);
      *(_QWORD *)(v3 + 96) = v14;
      ++*(_DWORD *)(v3 + 104);
    }
  }
  return result;
}

void re::PeerVideoStreamingManager::createStream(re::PeerVideoStreamingManager *this@<X0>, uint64_t a2@<X1>, re *a3@<X8>)
{
  uint64_t v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  re *v15;
  NSObject *v16;
  NSObject *v17;
  char *v18;
  int v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[6];
  _OWORD v23[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t buf[4];
  char *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)this + 5);
  *(_QWORD *)&v32 = v6;
  *((_QWORD *)&v32 + 1) = a2;
  v30 = 0u;
  v31 = 0u;
  memset(v29, 0, sizeof(v29));
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v24 = 0u;
  memset(v23, 0, sizeof(v23));
  v21 = 0u;
  memset(v22, 0, sizeof(v22));
  v20 = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v23, 0);
  *((_QWORD *)&v24 + 1) = 0;
  v25 = 0uLL;
  re::DynamicString::setCapacity(&v24, 0);
  v26 = 0uLL;
  *(_QWORD *)&v27 = 0;
  *((_QWORD *)&v27 + 1) = 0x3FF0000000000000;
  LOBYTE(v28) = 0;
  *((_QWORD *)&v28 + 1) = 0;
  *(_QWORD *)&v29[0] = 0;
  *(_OWORD *)((char *)v29 + 8) = *MEMORY[0x24BDC0D88];
  *((_QWORD *)&v29[1] + 1) = *(_QWORD *)(MEMORY[0x24BDC0D88] + 16);
  v30 = *(_OWORD *)((char *)v29 + 8);
  *(_QWORD *)&v31 = *((_QWORD *)&v29[1] + 1);
  BYTE8(v31) = 0;
  v8 = re::PeerVideoStreamId::hash((re::PeerVideoStreamId *)&v32);
  if (!*((_QWORD *)this + 16))
  {
    LODWORD(v9) = 0;
    goto LABEL_9;
  }
  v9 = v8 % *((unsigned int *)this + 38);
  v10 = *(unsigned int *)(*((_QWORD *)this + 17) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_9:
    v12 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::addAsMove((uint64_t)this + 128, v9, v8, &v32, (uint64_t)&v20);
    ++*((_DWORD *)this + 42);
    v13 = *((_QWORD *)this + 18) + 336 * v12;
    goto LABEL_10;
  }
  v11 = *((_QWORD *)this + 18);
  while (*(_QWORD *)(v11 + 336 * v10 + 16) != v6 || *(_QWORD *)(v11 + 336 * v10 + 24) != a2)
  {
    v10 = *(_DWORD *)(v11 + 336 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF)
      goto LABEL_9;
  }
  v13 = v11 + 336 * v10;
LABEL_10:
  v14 = v13 + 32;
  re::PeerVideoFileWriter::~PeerVideoFileWriter((re::PeerVideoFileWriter *)v23);
  re::PeerVideoStreamingEncoder::~PeerVideoStreamingEncoder((re::PeerVideoStreamingEncoder *)((char *)v22 + 8));
  v15 = (re *)v20;
  if ((_QWORD)v20 && *(_QWORD *)&v22[0])
    v15 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v20 + 40))();
  v16 = *re::peerVideoStreamingLogObjects(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    v17 = v16;
    re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&v20, v6, a2);
    if ((BYTE8(v20) & 1) != 0)
      v18 = (char *)v21;
    else
      v18 = (char *)&v20 + 9;
    v19 = *((_DWORD *)this + 39);
    *(_DWORD *)buf = 136315650;
    v34 = v18;
    v35 = 2048;
    v36 = v14 + 40;
    v37 = 1024;
    v38 = v19;
    _os_log_debug_impl(&dword_224FE9000, v17, OS_LOG_TYPE_DEBUG, "Created stream: %s with encoder 0x%p (count=%u)", buf, 0x1Cu);

    if ((_QWORD)v20 && (BYTE8(v20) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v20 + 40))();
  }
  *(_QWORD *)&v20 = this;
  re::make::shared::object<re::PeerVideoStreamHandle,re::PeerVideoStreamId &,re::PeerVideoStreamingManager *>(a3, (uint64_t *)&v32, (uint64_t *)&v20);
}

BOOL re::PeerVideoStreamingManager::hasClients(re *a1, uint64_t *a2)
{
  uint64_t v2;
  re::PeerVideoStreamId *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  __int16 v10;
  __int16 v11;

  v2 = *a2;
  v4 = *(_QWORD *)(v2 + 24);
  v3 = (re::PeerVideoStreamId *)(v2 + 24);
  if (!v4)
  {
    v7 = *re::peerVideoStreamingLogObjects(a1);
    result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v11 = 0;
    v8 = "Invalid stream handle in method hasClients";
    v9 = (uint8_t *)&v11;
LABEL_9:
    _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, v8, v9, 2u);
    return 0;
  }
  v5 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet((uint64_t)a1 + 128, v3);
  if (v5)
    return *(_QWORD *)(v5 + 16) != 0;
  v7 = *re::peerVideoStreamingLogObjects(0);
  result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v10 = 0;
    v8 = "No write end found for handle in method hasClients";
    v9 = (uint8_t *)&v10;
    goto LABEL_9;
  }
  return result;
}

uint64_t re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet(uint64_t a1, re::PeerVideoStreamId *this)
{
  uint64_t v4;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (re::PeerVideoStreamId::hash(this) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v5 + 336 * v4 + 16) != *(_QWORD *)this || *(_QWORD *)(v5 + 336 * v4 + 24) != *((_QWORD *)this + 1))
  {
    v4 = *(_DWORD *)(v5 + 336 * v4 + 8) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF)
      return 0;
  }
  return v5 + 336 * v4 + 32;
}

BOOL re::PeerVideoStreamingManager::newClientsAwaitingFrame(re *a1, uint64_t *a2)
{
  uint64_t v2;
  re::PeerVideoStreamId *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  __int16 v10;
  __int16 v11;

  v2 = *a2;
  v4 = *(_QWORD *)(v2 + 24);
  v3 = (re::PeerVideoStreamId *)(v2 + 24);
  if (!v4)
  {
    v7 = *re::peerVideoStreamingLogObjects(a1);
    result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v11 = 0;
    v8 = "Invalid stream handle in method newClientsAwaitingFrame";
    v9 = (uint8_t *)&v11;
LABEL_9:
    _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, v8, v9, 2u);
    return 0;
  }
  v5 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet((uint64_t)a1 + 128, v3);
  if (v5)
    return *(_BYTE *)(v5 + 112) != 0;
  v7 = *re::peerVideoStreamingLogObjects(0);
  result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v10 = 0;
    v8 = "No write end found for handle in method newClientsAwaitingFrame";
    v9 = (uint8_t *)&v10;
    goto LABEL_9;
  }
  return result;
}

uint64_t re::PeerVideoStreamingManager::createFrameForWriting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  re *v11;
  __CVBuffer *v12;
  const __CFAllocator *v13;
  size_t Width;
  size_t Height;
  re::PeerVideoStreamingUtils *PixelFormatType;
  uint64_t v17;
  int v18;
  re *v19;
  int v20;
  NSObject *v21;
  const char *v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  _BYTE *v30;
  const char *v31;
  uint64_t v32;
  re *v33;
  int v34;
  uint8_t *p_cacheOut;
  NSObject *v36;
  uint32_t v37;
  CVMetalTextureRef v38;
  CVPixelBufferRef v39;
  CVMetalTextureRef v40;
  const void *v41;
  const void *v42;
  NSObject *v43;
  NSObject *v44;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  CVMetalTextureRef v54;
  CVPixelBufferRef pixelBuffer;
  CVMetalTextureRef cacheOut;
  char v57;
  _BYTE v58[7];
  _BYTE *v59;
  uint8_t buf[4];
  _BYTE *v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(*(_QWORD *)a2 + 24))
  {
    v23 = *re::peerVideoStreamingLogObjects((re *)a1);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      LOWORD(cacheOut) = 0;
      _os_log_error_impl(&dword_224FE9000, v23, OS_LOG_TYPE_ERROR, "Failed to create frame for writing. Invalid stream handle.", (uint8_t *)&cacheOut, 2u);
    }
    return 0;
  }
  if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
    kdebug_trace();
  v10 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet(a1 + 128, (re::PeerVideoStreamId *)(*(_QWORD *)a2 + 24));
  if (!v10)
  {
    v24 = *re::peerVideoStreamingLogObjects(0);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v47 = *(_QWORD *)(*(_QWORD *)a2 + 24);
      v48 = *(_QWORD *)(*(_QWORD *)a2 + 32);
      v49 = v24;
      re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&cacheOut, v47, v48);
      v50 = (v57 & 1) != 0 ? v59 : v58;
      *(_DWORD *)buf = 136315138;
      v61 = v50;
      _os_log_error_impl(&dword_224FE9000, v49, OS_LOG_TYPE_ERROR, "Failed to create frame for writing. No write end found for handle %s.", buf, 0xCu);

      if (cacheOut)
      {
        if ((v57 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)cacheOut + 40))();
      }
    }
    return 0;
  }
  re::PeerVideoStreamingEncoder::createPixelBufferFromPool(v10 + 40, a3, &pixelBuffer);
  v12 = pixelBuffer;
  if (pixelBuffer)
  {
    if (*(_QWORD *)(a1 + 56))
    {
      v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    }
    else
    {
      v32 = re::ServiceLocator::serviceOrNull<re::RenderManager>(*(_QWORD *)(a1 + 16));
      if (!v32)
      {
        v43 = *re::peerVideoStreamingLogObjects(0);
        v19 = (re *)os_log_type_enabled(v43, OS_LOG_TYPE_ERROR);
        if (!(_DWORD)v19)
          goto LABEL_42;
        LOWORD(cacheOut) = 0;
        v22 = "Failed to create CVMetalTextureCache. No RenderManager";
        p_cacheOut = (uint8_t *)&cacheOut;
        v36 = v43;
        v37 = 2;
        goto LABEL_26;
      }
      cacheOut = 0;
      v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v33 = (re *)CVMetalTextureCacheCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, *(id *)(v32 + 184), 0, &cacheOut);
      if ((_DWORD)v33)
      {
        v34 = (int)v33;
        v21 = *re::peerVideoStreamingLogObjects(v33);
        v19 = (re *)os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
        if ((_DWORD)v19)
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v61) = v34;
          v22 = "Error creating texture cache: %d";
          goto LABEL_25;
        }
LABEL_42:
        v44 = *re::peerVideoStreamingLogObjects(v19);
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
          goto LABEL_43;
        v51 = *(_QWORD *)(*(_QWORD *)a2 + 24);
        v52 = *(_QWORD *)(*(_QWORD *)a2 + 32);
        v29 = v44;
        re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&cacheOut, v51, v52);
        if ((v57 & 1) != 0)
          v53 = v59;
        else
          v53 = v58;
        *(_DWORD *)buf = 136315138;
        v61 = v53;
        v31 = "Failed to create frame for writing. Could not create CVMetalTexture for stream %s";
LABEL_59:
        _os_log_error_impl(&dword_224FE9000, v29, OS_LOG_TYPE_ERROR, v31, buf, 0xCu);

        if (cacheOut && (v57 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)cacheOut + 40))();
        goto LABEL_43;
      }
      v46 = *(const void **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = cacheOut;
      if (v46)
        CFRelease(v46);
    }
    Width = CVPixelBufferGetWidth(v12);
    Height = CVPixelBufferGetHeight(v12);
    PixelFormatType = (re::PeerVideoStreamingUtils *)CVPixelBufferGetPixelFormatType(v12);
    v18 = re::PeerVideoStreamingUtils::mtlPixelFormatFromCVPixelFormat(PixelFormatType, v17);
    cacheOut = 0;
    v19 = (re *)CVMetalTextureCacheCreateTextureFromImage(v13, *(CVMetalTextureCacheRef *)(a1 + 56), v12, 0, (MTLPixelFormat)v18, Width, Height, 0, &cacheOut);
    if (!(_DWORD)v19)
    {
      v38 = cacheOut;
      v54 = cacheOut;
      if (cacheOut)
      {
        v39 = pixelBuffer;
        v40 = cacheOut;
        if (pixelBuffer)
        {
          CFRetain(pixelBuffer);
          CFRetain(v38);
          v40 = v39;
        }
        CFRetain(v40);
        CFRetain(v38);
        v42 = *(const void **)a4;
        v41 = *(const void **)(a4 + 8);
        *(_QWORD *)a4 = v39;
        *(_QWORD *)(a4 + 8) = v38;
        *(_QWORD *)(a4 + 16) = a5;
        if (v41)
          CFRelease(v41);
        if (v42)
          CFRelease(v42);
        CFRelease(v38);
        if (v39)
          CFRelease(v39);
        if (!re::internal::enableSignposts(0, 0)
          || !re::internal::enableHighFrequencyNetworkTracing(0, 0)
          || (kdebug_trace(), (v38 = v54) != 0))
        {
          CFRelease(v38);
        }
        v25 = 1;
        goto LABEL_44;
      }
      goto LABEL_42;
    }
    v20 = (int)v19;
    v21 = *re::peerVideoStreamingLogObjects(v19);
    v19 = (re *)os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
    if ((_DWORD)v19)
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v61) = v20;
      v22 = "Failed to create texture from image: %d";
LABEL_25:
      p_cacheOut = buf;
      v36 = v21;
      v37 = 8;
LABEL_26:
      _os_log_error_impl(&dword_224FE9000, v36, OS_LOG_TYPE_ERROR, v22, p_cacheOut, v37);
      goto LABEL_42;
    }
    goto LABEL_42;
  }
  v26 = *re::peerVideoStreamingLogObjects(v11);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    v27 = *(_QWORD *)(*(_QWORD *)a2 + 24);
    v28 = *(_QWORD *)(*(_QWORD *)a2 + 32);
    v29 = v26;
    re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&cacheOut, v27, v28);
    if ((v57 & 1) != 0)
      v30 = v59;
    else
      v30 = v58;
    *(_DWORD *)buf = 136315138;
    v61 = v30;
    v31 = "Failed to create frame for writing. Could not create pixel buffer for stream %s.";
    goto LABEL_59;
  }
LABEL_43:
  v25 = 0;
LABEL_44:
  if (pixelBuffer)
    CFRelease(pixelBuffer);
  return v25;
}

void re::PeerVideoStreamingManager::writeFrame(id *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  NSObject *v19;
  id v20;
  _BYTE v21[24];
  uint64_t v22;
  _BYTE *v23;
  uint8_t buf[24];
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(*a2 + 24))
  {
    if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
      kdebug_trace();
    v6 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet((uint64_t)(a1 + 16), (re::PeerVideoStreamId *)(*a2 + 24));
    if (v6)
    {
      v7 = v6;
      if (*(_QWORD *)(v6 + 16))
      {
        Width = CVPixelBufferGetWidth(*(CVPixelBufferRef *)a3);
        Height = CVPixelBufferGetHeight(*(CVPixelBufferRef *)a3);
        BytesPerRow = CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)a3);
        v11 = BytesPerRow * Height;
        v12 = *(_QWORD *)(a3 + 16);
        v13 = *a2;
        if (*a2)
          BytesPerRow = (size_t)(id)(v13 + 8);
        v14 = re::globalAllocators((re *)BytesPerRow)[2];
        v25 = v14;
        v15 = (uint8_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 56, 0);
        *(_QWORD *)v15 = &off_24ED5C828;
        *((_QWORD *)v15 + 1) = a1;
        *((_QWORD *)v15 + 2) = v13;
        *((_QWORD *)v15 + 3) = v11;
        *((_QWORD *)v15 + 4) = Width;
        *((_QWORD *)v15 + 5) = Height;
        *((_QWORD *)v15 + 6) = v12;
        v26 = v15;
        v16 = *(unsigned __int8 *)(v7 + 112);
        v22 = v14;
        v23 = 0;
        re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v21, (uint64_t)buf);
        v20 = a1[1];
        re::PeerVideoStreamingEncoder::encodeFrame(v7 + 40, (CVPixelBufferRef *)a3, v16, (uint64_t)v21, &v20);
        v17 = v20;
        v20 = 0;

        if (v23)
        {
          (**(void (***)(_BYTE *))v23)(v23);
          if (v23 != v21)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
          v23 = 0;
        }
        *(_BYTE *)(v7 + 112) = 0;
        if (v26)
        {
          (**(void (***)(uint8_t *))v26)(v26);
          if (v26 != buf)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        }
      }
      else if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
      {
        kdebug_trace();
      }
    }
    else
    {
      v19 = *re::peerVideoStreamingLogObjects(0);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_224FE9000, v19, OS_LOG_TYPE_ERROR, "Failed to write frame. No write end found for handle.", buf, 2u);
      }
      if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
        kdebug_trace();
    }
  }
  else
  {
    v18 = *re::peerVideoStreamingLogObjects((re *)a1);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v18, OS_LOG_TYPE_ERROR, "Failed to write frame. Invalid stream handle.", buf, 2u);
    }
  }
}

void re::PeerVideoStreamingManager::writeFrameToVideoFile(re *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, int a6, float64_t a7, double a8)
{
  uint64_t v16;
  _BYTE *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  __CFString *v23;
  NSObject *v24;
  const char *v25;
  id v26;
  _anonymous_namespace_ *v27;
  __CFString *v28;
  _anonymous_namespace_ *v29;
  re *v30;
  NSObject *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  _BYTE *v36;
  id v37;
  uint64_t v38;
  char v39;
  _BYTE v40[23];
  _BYTE buf[12];
  __int16 v42;
  id v43;
  __int16 v44;
  __CFString *v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(*(_QWORD *)a2 + 24))
  {
    v24 = *re::peerVideoStreamingLogObjects(a1);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v25 = "Failed to write frame to video file. Invalid stream handle.";
LABEL_13:
    _os_log_error_impl(&dword_224FE9000, v24, OS_LOG_TYPE_ERROR, v25, buf, 2u);
    return;
  }
  if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
    kdebug_trace();
  v16 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet((uint64_t)a1 + 128, (re::PeerVideoStreamId *)(*(_QWORD *)a2 + 24));
  if (!v16)
  {
    v24 = *re::peerVideoStreamingLogObjects(0);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v25 = "Failed to write frame to video file. No write end found for handle.";
    goto LABEL_13;
  }
  v17 = (_BYTE *)v16;
  if (!*(_BYTE *)(v16 + 296))
  {
    v18 = a4;
    objc_msgSend(v18, "URLByDeletingPathExtension");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "absoluteString");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "stringByAppendingFormat:", CFSTR("_%llu"), a5);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v18, "pathExtension");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (v22)
    {
      objc_msgSend(v18, "pathExtension");
      v23 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v23 = CFSTR("mov");
    }

    v26 = objc_retainAutorelease(v21);
    v27 = (_anonymous_namespace_ *)objc_msgSend(v26, "UTF8String");
    re::DynamicString::operator=((re::DynamicString *)(v17 + 128), (re::DynamicString *)buf);
    if (*(_QWORD *)buf && (buf[8] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)buf + 40))();
    v28 = objc_retainAutorelease(v23);
    v29 = (_anonymous_namespace_ *)-[__CFString UTF8String](v28, "UTF8String");
    re::DynamicString::operator=((re::DynamicString *)(v17 + 160), (re::DynamicString *)buf);
    v30 = *(re **)buf;
    if (*(_QWORD *)buf && (buf[8] & 1) != 0)
      v30 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)buf + 40))();
    v31 = *re::peerVideoStreamingLogObjects(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      v37 = v18;
      v32 = v26;
      v34 = *(_QWORD *)(*(_QWORD *)a2 + 24);
      v33 = *(_QWORD *)(*(_QWORD *)a2 + 32);
      v35 = v31;
      re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&v38, v34, v33);
      v26 = v32;
      if ((v39 & 1) != 0)
        v36 = *(_BYTE **)&v40[7];
      else
        v36 = v40;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v36;
      v42 = 2112;
      v43 = v32;
      v44 = 2112;
      v45 = v28;
      _os_log_impl(&dword_224FE9000, v35, OS_LOG_TYPE_DEFAULT, "Set video file writer output path for write end: %s, output path: %@.%@", buf, 0x20u);

      if (v38 && (v39 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v38 + 40))();
      v18 = v37;
    }
    v17[296] = 1;

  }
  re::PeerVideoFileWriter::appendFrame((uint64_t)(v17 + 128), a3, a5, a6, a7, a8);
  if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
    kdebug_trace();
}

void re::PeerVideoStreamingManager::stopAllVideoFileWriters(re::PeerVideoStreamingManager *this)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  re *v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD v14[6];
  _QWORD v15[3];
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = *((unsigned int *)this + 40);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = (_DWORD *)(*((_QWORD *)this + 18) + 8);
    while ((*v4 & 0x80000000) == 0)
    {
      v4 += 84;
      if (v2 == ++v3)
      {
        LODWORD(v3) = *((_DWORD *)this + 40);
        break;
      }
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if ((_DWORD)v2 != (_DWORD)v3)
  {
    v5 = v3;
    v6 = *((_DWORD *)this + 40);
    do
    {
      v7 = *((_QWORD *)this + 18);
      v8 = v7 + 336 * v5;
      if (*(_BYTE *)(v8 + 328))
      {
        v14[0] = MEMORY[0x24BDAC760];
        v14[1] = 3221225472;
        v9 = v7 + 336 * v5;
        v10 = v9 + 160;
        v14[2] = ___ZN2re25PeerVideoStreamingManager23stopAllVideoFileWritersEv_block_invoke;
        v14[3] = &__block_descriptor_48_e5_v8__0l;
        v14[4] = v9 + 16;
        v14[5] = v9 + 32;
        v11 = (re *)_Block_copy(v14);
        v16 = re::globalAllocators(v11)[2];
        v17 = 0;
        v15[0] = &off_24ED5C890;
        v15[1] = _Block_copy(v11);
        v17 = v15;
        re::PeerVideoFileWriter::flush(v10, (uint64_t)v15);
        if (v17)
        {
          (*(void (**)(_QWORD *))*v17)(v17);
          if (v17 != v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
          v17 = 0;
        }

        *(_BYTE *)(v8 + 328) = 0;
        v6 = *((_DWORD *)this + 40);
      }
      if (v6 <= (int)v3 + 1)
        v12 = v3 + 1;
      else
        v12 = v6;
      while (1)
      {
        v5 = (v3 + 1);
        if (v12 - 1 == (_DWORD)v3)
          break;
        LODWORD(v3) = v3 + 1;
        v13 = v5;
        if ((*(_DWORD *)(*((_QWORD *)this + 18) + 336 * v5 + 8) & 0x80000000) != 0)
          goto LABEL_22;
      }
      v13 = v12;
LABEL_22:
      LODWORD(v3) = v13;
    }
    while ((_DWORD)v2 != v13);
  }
}

double ___ZN2re25PeerVideoStreamingManager23stopAllVideoFileWritersEv_block_invoke(re *a1)
{
  NSObject *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _BYTE *v7;
  double result;
  uint64_t v9;
  char v10;
  _BYTE v11[23];
  uint8_t buf[4];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = *re::peerVideoStreamingLogObjects(a1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (uint64_t *)*((_QWORD *)a1 + 4);
    v4 = *v3;
    v5 = v3[1];
    v6 = v2;
    re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&v9, v4, v5);
    if ((v10 & 1) != 0)
      v7 = *(_BYTE **)&v11[7];
    else
      v7 = v11;
    *(_DWORD *)buf = 136315138;
    v13 = v7;
    _os_log_impl(&dword_224FE9000, v6, OS_LOG_TYPE_DEFAULT, "Flushed video file writer for write end: %s", buf, 0xCu);

    if (v9 && (v10 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v9 + 40))();
  }
  *(_QWORD *)&result = re::PeerVideoFileWriter::destroy((re::PeerVideoFileWriter *)(*((_QWORD *)a1 + 5) + 128)).n128_u64[0];
  return result;
}

uint64_t `anonymous namespace'::makeMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  re::zerocopy *v8;
  _QWORD v9[2];
  char v10;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v9[0] = &off_24ED7DD00;
  v9[1] = a1;
  v8 = (re::zerocopy *)v9;
  v10 = -46;
  re::zerocopy::writeAll((re::zerocopy *)v9, (re::zerocopy::WriteStream *)&v10, (char *)1);
  v10 = -30;
  re::zerocopy::writeAll((re::zerocopy *)v9, (re::zerocopy::WriteStream *)&v10, (char *)1);
  v10 = 8;
  re::zerocopy::writeAll((re::zerocopy *)v9, (re::zerocopy::WriteStream *)&v10, (char *)1);
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v10 = -30;
  re::zerocopy::writeAll((re::zerocopy *)v9, (re::zerocopy::WriteStream *)&v10, (char *)1);
  v10 = 8;
  re::zerocopy::writeAll((re::zerocopy *)v9, (re::zerocopy::WriteStream *)&v10, (char *)1);
  re::OPackWriter::writeInteger(&v8, v5);
  v10 = 9;
  re::zerocopy::writeAll((re::zerocopy *)v9, (re::zerocopy::WriteStream *)&v10, (char *)1);
  re::OPackWriter::writeInteger(&v8, v6);
  v10 = 9;
  re::zerocopy::writeAll((re::zerocopy *)v9, (re::zerocopy::WriteStream *)&v10, (char *)1);
  re::OPackWriter::writeInteger(&v8, *(unsigned int *)(a2 + 16));
  return (*(uint64_t (**)(_QWORD, re::zerocopy **))(**(_QWORD **)(a3 + 32) + 16))(*(_QWORD *)(a3 + 32), &v8);
}

uint64_t re::PeerVideoStreamingManager::makeUnsubscribeMessage(re *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];
  int v7;
  _QWORD v8[3];
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v6[0] = a2;
  v6[1] = a3;
  v7 = 2;
  v4 = re::globalAllocators(a1)[2];
  v8[0] = &off_24ED5C950;
  v9 = v4;
  v10 = v8;
  result = (uint64_t)v10;
  if (v10)
  {
    result = (*(uint64_t (**)(_QWORD *))*v10)(v10);
    if (v10 != v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  }
  return result;
}

void re::PeerVideoStreamingManager::connectToStream(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, re *a5@<X8>)
{
  uint64_t v10;
  _BOOL8 v11;
  NSObject *v12;
  const char *v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  VTDecompressionSessionRef v19;
  re *v20;
  re *v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t *v24;
  _QWORD v25[5];
  id location;
  __int128 v27;
  id to;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  id *p_to;
  int v33;
  uint64_t v34;
  VTDecompressionSessionRef session;
  uint64_t v36;
  char v37;
  CFTypeRef cf;
  char v39;
  char v40;
  uint64_t v41;
  _BYTE buf[22];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v27 = a3;
  *((_QWORD *)&v27 + 1) = a4;
  if (!a3)
  {
    v12 = *re::peerVideoStreamingLogObjects((re *)a1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      LOWORD(to) = 0;
      v13 = "Failed to connect to stream. Invalid stream id.";
      goto LABEL_21;
    }
LABEL_22:
    *(_QWORD *)a5 = 0;
    return;
  }
  v10 = a1 + 176;
  v11 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::containsKey(a1 + 176, (re::PeerVideoStreamId *)&v27);
  if (v11)
  {
    v12 = *re::peerVideoStreamingLogObjects((re *)v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      LOWORD(to) = 0;
      v13 = "There is already a connection to this stream. Multiple connections are unsupported.";
LABEL_21:
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&to, 2u);
      goto LABEL_22;
    }
    goto LABEL_22;
  }
  if (!*(_QWORD *)(a1 + 96) || !**(_QWORD **)(a1 + 112))
  {
    v12 = *re::peerVideoStreamingLogObjects((re *)v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      LOWORD(to) = 0;
      v13 = "Failed to connect to stream. Could not get Session";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  to = (id)a1;
  re::make::shared::object<re::PeerVideoStreamHandle,re::PeerVideoStreamId &,re::PeerVideoStreamingManager *>(a5, (uint64_t *)&v27, (uint64_t *)&to);
  if (*(_QWORD *)a5)
    v14 = (void *)(*(_QWORD *)a5 + 8);
  else
    v14 = 0;
  objc_initWeak(&location, v14);
  to = 0;
  objc_copyWeak(&to, &location);
  v29 = a2;
  v30 = 0;
  v31 = 0;
  p_to = 0;
  v33 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  session = 0;
  v36 = 0;
  v34 = 0;
  v37 = 0;
  v15 = re::PeerVideoStreamId::hash((re::PeerVideoStreamId *)&v27);
  if (*(_QWORD *)(a1 + 176))
  {
    v16 = v15 % *(unsigned int *)(a1 + 200);
    v17 = *(unsigned int *)(*(_QWORD *)(a1 + 184) + 4 * v16);
    if ((_DWORD)v17 != 0x7FFFFFFF)
    {
      v18 = *(_QWORD *)(a1 + 192);
      while (*(_QWORD *)(v18 + 168 * v17 + 16) != a3 || *(_QWORD *)(v18 + 168 * v17 + 24) != a4)
      {
        v17 = *(_DWORD *)(v18 + 168 * v17 + 8) & 0x7FFFFFFF;
        if (v17 == 0x7FFFFFFF)
          goto LABEL_25;
      }
      goto LABEL_28;
    }
  }
  else
  {
    LODWORD(v16) = 0;
  }
LABEL_25:
  re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::addAsMove(v10, v16, v15, &v27, (uint64_t)&to);
  ++*(_DWORD *)(a1 + 216);
  if (v37 && cf)
    CFRelease(cf);
LABEL_28:
  v19 = session;
  if (session)
  {
    VTDecompressionSessionInvalidate(session);
    CFRelease(v19);
    session = 0;
  }
  if (v30)
  {
    if (v34)
      (*(void (**)(void))(*v30 + 40))();
    v34 = 0;
    v31 = 0;
    p_to = 0;
    v30 = 0;
    ++v33;
  }
  objc_destroyWeak(&to);
  to = 0;
  objc_destroyWeak(&location);
  location = 0;
  *(_QWORD *)buf = a3;
  *(_QWORD *)&buf[8] = a4;
  *(_DWORD *)&buf[16] = 1;
  v31 = re::globalAllocators(v20)[2];
  p_to = &to;
  to = &off_24ED5C8E8;
  if (p_to)
  {
    (*(void (**)(id *))*p_to)(p_to);
    if (p_to != &to)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
  }
  v21 = (re *)RESyncNetSessionSendData();
  v22 = *re::peerVideoStreamingLogObjects(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    v23 = v22;
    re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&to, a3, a4);
    v24 = (v29 & 1) != 0 ? v30 : (uint64_t *)((char *)&v29 + 1);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v24;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = a2;
    _os_log_impl(&dword_224FE9000, v23, OS_LOG_TYPE_DEFAULT, "Opened read end for: %s, served by %llu. Sent subscribe message.", buf, 0x16u);

    if (to)
    {
      if ((v29 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)to + 40))();
    }
  }
  if (v25[0])
  {
    if (v25[4])
      (*(void (**)(void))(*(_QWORD *)v25[0] + 40))();
  }
}

BOOL re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::containsKey(uint64_t a1, re::PeerVideoStreamId *this)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v2 = 0x7FFFFFFFLL;
  if (*(_QWORD *)a1)
  {
    v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (re::PeerVideoStreamId::hash(this) % *(unsigned int *)(a1 + 24)));
    if ((_DWORD)v5 != 0x7FFFFFFF)
    {
      v6 = *(_QWORD *)(a1 + 16);
      v2 = 0x7FFFFFFFLL;
      while (*(_QWORD *)(v6 + 168 * v5 + 16) != *(_QWORD *)this
           || *(_QWORD *)(v6 + 168 * v5 + 24) != *((_QWORD *)this + 1))
      {
        v5 = *(_DWORD *)(v6 + 168 * v5 + 8) & 0x7FFFFFFF;
        if (v5 == 0x7FFFFFFF)
          return v2 != 0x7FFFFFFF;
      }
      v2 = v5;
    }
  }
  return v2 != 0x7FFFFFFF;
}

BOOL re::PeerVideoStreamingManager::consumeFrame(re *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  re::PeerVideoStreamId *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 result;
  NSObject *v14;
  const char *v15;
  uint8_t v16[8];
  CFTypeRef cf;

  v3 = *a2;
  v5 = *(_QWORD *)(v3 + 24);
  v4 = (re::PeerVideoStreamId *)(v3 + 24);
  if (!v5)
  {
    v14 = *re::peerVideoStreamingLogObjects(a1);
    result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_WORD *)v16 = 0;
    v15 = "Failed to consume frame. Invalid handle.";
LABEL_13:
    _os_log_error_impl(&dword_224FE9000, v14, OS_LOG_TYPE_ERROR, v15, v16, 2u);
    return 0;
  }
  v7 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet((uint64_t)a1 + 176, v4);
  if (!v7)
  {
    v14 = *re::peerVideoStreamingLogObjects(0);
    result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_WORD *)v16 = 0;
    v15 = "Failed to consume frame. There is no read end for the given handle.";
    goto LABEL_13;
  }
  v8 = v7;
  v10 = *(unsigned __int8 *)(v7 + 72);
  v9 = v7 + 72;
  if (!v10)
    return 0;
  v11 = *a3;
  *a3 = *(_QWORD *)(v8 + 80);
  *(_QWORD *)(v8 + 80) = v11;
  a3[1] = *(_QWORD *)(v8 + 88);
  v16[0] = 0;
  re::Optional<re::OutputVideoFrame>::operator=(v9, v16);
  if (v16[0] && cf)
    CFRelease(cf);
  v12 = a3[1];
  if (*(_BYTE *)(v8 + 112))
  {
    *(_QWORD *)(v8 + 120) = v12;
    return 1;
  }
  else
  {
    result = 1;
    *(_BYTE *)(v8 + 112) = 1;
    *(_QWORD *)(v8 + 120) = v12;
  }
  return result;
}

uint64_t re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet(uint64_t a1, re::PeerVideoStreamId *this)
{
  uint64_t v4;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (re::PeerVideoStreamId::hash(this) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v5 + 168 * v4 + 16) != *(_QWORD *)this || *(_QWORD *)(v5 + 168 * v4 + 24) != *((_QWORD *)this + 1))
  {
    v4 = *(_DWORD *)(v5 + 168 * v4 + 8) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF)
      return 0;
  }
  return v5 + 168 * v4 + 32;
}

uint64_t re::Optional<re::OutputVideoFrame>::operator=(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;

  v3 = *a2;
  if (*(_BYTE *)a1)
    v4 = 0;
  else
    v4 = v3 == 0;
  if (!v4)
  {
    if (*(_BYTE *)a1)
      v5 = v3 == 0;
    else
      v5 = 0;
    if (v5)
    {
      v9 = *(const void **)(a1 + 8);
      if (v9)
        CFRelease(v9);
      *(_BYTE *)a1 = 0;
    }
    else
    {
      if (*(_BYTE *)a1)
        v6 = 1;
      else
        v6 = v3 == 0;
      if (v6)
      {
        v7 = *(_QWORD *)(a1 + 8);
        v8 = *((_QWORD *)a2 + 2);
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = v7;
        *(_QWORD *)(a1 + 16) = v8;
      }
      else
      {
        *(_BYTE *)a1 = 1;
        v10 = *((_QWORD *)a2 + 2);
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = 0;
        *(_QWORD *)(a1 + 16) = v10;
      }
    }
  }
  return a1;
}

BOOL re::PeerVideoStreamingManager::peekFrame(re *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  re::PeerVideoStreamId *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  _BOOL8 result;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  __int16 v15;
  __int16 v16;

  v3 = *a2;
  v5 = *(_QWORD *)(v3 + 24);
  v4 = (re::PeerVideoStreamId *)(v3 + 24);
  if (!v5)
  {
    v12 = *re::peerVideoStreamingLogObjects(a1);
    result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v16 = 0;
    v13 = "Failed to peek frame. Invalid handle.";
    v14 = (uint8_t *)&v16;
LABEL_13:
    _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, v13, v14, 2u);
    return 0;
  }
  v7 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet((uint64_t)a1 + 176, v4);
  if (!v7)
  {
    v12 = *re::peerVideoStreamingLogObjects(0);
    result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v15 = 0;
    v13 = "Failed to peek frame. There is no read end for the given handle.";
    v14 = (uint8_t *)&v15;
    goto LABEL_13;
  }
  v8 = v7;
  if (!*(_BYTE *)(v7 + 72))
    return 0;
  v9 = *(const void **)a3;
  v10 = *(const void **)(v7 + 80);
  *(_QWORD *)a3 = v10;
  if (v10)
    CFRetain(v10);
  if (v9)
    CFRelease(v9);
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(v8 + 88);
  return 1;
}

void re::PeerVideoStreamingManager::lastConsumedFrameNumber(re *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  re::PeerVideoStreamId *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  __int16 v12;
  __int16 v13;

  v4 = *a2;
  v6 = *(_QWORD *)(v4 + 24);
  v5 = (re::PeerVideoStreamId *)(v4 + 24);
  if (!v6)
  {
    v9 = *re::peerVideoStreamingLogObjects(a1);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
LABEL_8:
      *(_BYTE *)a3 = 0;
      return;
    }
    v13 = 0;
    v10 = "Failed to get last consumed frame number. Invalid handle.";
    v11 = (uint8_t *)&v13;
LABEL_11:
    _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, v10, v11, 2u);
    goto LABEL_8;
  }
  v7 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet((uint64_t)a1 + 176, v5);
  if (!v7)
  {
    v9 = *re::peerVideoStreamingLogObjects(0);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_8;
    v12 = 0;
    v10 = "Failed to get last consumed frame number. No read end for handle.";
    v11 = (uint8_t *)&v12;
    goto LABEL_11;
  }
  v8 = *(unsigned __int8 *)(v7 + 112);
  *(_BYTE *)a3 = v8;
  if (v8)
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(v7 + 120);
}

uint64_t re::PeerVideoStreamingManager::streamStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  if (!a2)
    return 0;
  if (re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet(a1 + 128, (re::PeerVideoStreamId *)v5))
  {
    return 2;
  }
  if (re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet(a1 + 176, (re::PeerVideoStreamId *)v5))
  {
    return 3;
  }
  return 1;
}

void re::PeerVideoStreamingManager::setUserData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  re::PeerVideoStreamId *v4;
  uint64_t v5;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  __int16 v21;

  v3 = *a2;
  v4 = (re::PeerVideoStreamId *)(*a2 + 24);
  v5 = *(_QWORD *)v4;
  if (!*(_QWORD *)v4)
  {
    v13 = *re::peerVideoStreamingLogObjects((re *)a1);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      return;
    v21 = 0;
    v14 = "Error setting userData. Invalid handle";
    v15 = (uint8_t *)&v21;
LABEL_22:
    _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, v14, v15, 2u);
    return;
  }
  v8 = (uint64_t *)(a1 + 128);
  if (re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::containsKey(a1 + 128, (re::PeerVideoStreamId *)(*a2 + 24)))
  {
    v9 = *v8;
    v10 = 0x7FFFFFFFLL;
    if (v9)
    {
      v11 = *(unsigned int *)(*(_QWORD *)(a1 + 136) + 4
                                                    * (re::PeerVideoStreamId::hash(v4) % *(unsigned int *)(a1 + 152)));
      if ((_DWORD)v11 != 0x7FFFFFFF)
      {
        v12 = *(_QWORD *)(a1 + 144);
        v10 = 0x7FFFFFFFLL;
        while (*(_QWORD *)(v12 + 336 * v11 + 16) != v5 || *(_QWORD *)(v12 + 336 * v11 + 24) != *(_QWORD *)(v3 + 32))
        {
          v11 = *(_DWORD *)(v12 + 336 * v11 + 8) & 0x7FFFFFFF;
          if (v11 == 0x7FFFFFFF)
            goto LABEL_24;
        }
        v10 = v11;
      }
    }
LABEL_24:
    *(_QWORD *)(*(_QWORD *)(a1 + 144) + 336 * v10 + 152) = a3;
    return;
  }
  v16 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::containsKey(a1 + 176, v4);
  if (!v16)
  {
    v13 = *re::peerVideoStreamingLogObjects((re *)v16);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      return;
    v20 = 0;
    v14 = "Error setting userData. No read or write end for handle.";
    v15 = (uint8_t *)&v20;
    goto LABEL_22;
  }
  v17 = 0x7FFFFFFFLL;
  if (*(_QWORD *)(a1 + 176))
  {
    v18 = *(unsigned int *)(*(_QWORD *)(a1 + 184) + 4 * (re::PeerVideoStreamId::hash(v4) % *(unsigned int *)(a1 + 200)));
    if ((_DWORD)v18 != 0x7FFFFFFF)
    {
      v19 = *(_QWORD *)(a1 + 192);
      v17 = 0x7FFFFFFFLL;
      while (*(_QWORD *)(v19 + 168 * v18 + 16) != v5 || *(_QWORD *)(v19 + 168 * v18 + 24) != *(_QWORD *)(v3 + 32))
      {
        v18 = *(_DWORD *)(v19 + 168 * v18 + 8) & 0x7FFFFFFF;
        if (v18 == 0x7FFFFFFF)
          goto LABEL_26;
      }
      v17 = v18;
    }
  }
LABEL_26:
  *(_QWORD *)(*(_QWORD *)(a1 + 192) + 168 * v17 + 160) = a3;
}

BOOL re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::containsKey(uint64_t a1, re::PeerVideoStreamId *this)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v2 = 0x7FFFFFFFLL;
  if (*(_QWORD *)a1)
  {
    v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (re::PeerVideoStreamId::hash(this) % *(unsigned int *)(a1 + 24)));
    if ((_DWORD)v5 != 0x7FFFFFFF)
    {
      v6 = *(_QWORD *)(a1 + 16);
      v2 = 0x7FFFFFFFLL;
      while (*(_QWORD *)(v6 + 336 * v5 + 16) != *(_QWORD *)this
           || *(_QWORD *)(v6 + 336 * v5 + 24) != *((_QWORD *)this + 1))
      {
        v5 = *(_DWORD *)(v6 + 336 * v5 + 8) & 0x7FFFFFFF;
        if (v5 == 0x7FFFFFFF)
          return v2 != 0x7FFFFFFF;
      }
      v2 = v5;
    }
  }
  return v2 != 0x7FFFFFFF;
}

void re::PeerVideoStreamingManager::getUserData(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  re::PeerVideoStreamId *v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  __int16 v24;

  v4 = *a2;
  v5 = (re::PeerVideoStreamId *)(*a2 + 24);
  v6 = *(_QWORD *)v5;
  if (!*(_QWORD *)v5)
  {
    v13 = *re::peerVideoStreamingLogObjects((re *)a1);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_21;
    v24 = 0;
    v14 = "Error getting userData. Invalid handle";
    v15 = (uint8_t *)&v24;
    goto LABEL_28;
  }
  v8 = (uint64_t *)(a1 + 128);
  if (!re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::containsKey(a1 + 128, (re::PeerVideoStreamId *)(*a2 + 24)))
  {
    v16 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::containsKey(a1 + 176, v5);
    if (v16)
    {
      v17 = 0x7FFFFFFFLL;
      if (*(_QWORD *)(a1 + 176))
      {
        v18 = *(unsigned int *)(*(_QWORD *)(a1 + 184)
                              + 4 * (re::PeerVideoStreamId::hash(v5) % *(unsigned int *)(a1 + 200)));
        if ((_DWORD)v18 != 0x7FFFFFFF)
        {
          v19 = *(_QWORD *)(a1 + 192);
          v17 = 0x7FFFFFFFLL;
          while (*(_QWORD *)(v19 + 168 * v18 + 16) != v6 || *(_QWORD *)(v19 + 168 * v18 + 24) != *(_QWORD *)(v4 + 32))
          {
            v18 = *(_DWORD *)(v19 + 168 * v18 + 8) & 0x7FFFFFFF;
            if (v18 == 0x7FFFFFFF)
              goto LABEL_25;
          }
          v17 = v18;
        }
      }
LABEL_25:
      v22 = *(_QWORD *)(a1 + 192) + 168 * v17;
      *(_BYTE *)a3 = 1;
      v21 = *(_QWORD *)(v22 + 160);
      goto LABEL_26;
    }
    v13 = *re::peerVideoStreamingLogObjects((re *)v16);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
LABEL_21:
      *(_BYTE *)a3 = 0;
      return;
    }
    v23 = 0;
    v14 = "Error getting userData. No read or write end for handle.";
    v15 = (uint8_t *)&v23;
LABEL_28:
    _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, v14, v15, 2u);
    goto LABEL_21;
  }
  v9 = *v8;
  v10 = 0x7FFFFFFFLL;
  if (v9)
  {
    v11 = *(unsigned int *)(*(_QWORD *)(a1 + 136) + 4 * (re::PeerVideoStreamId::hash(v5) % *(unsigned int *)(a1 + 152)));
    if ((_DWORD)v11 != 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(a1 + 144);
      v10 = 0x7FFFFFFFLL;
      while (*(_QWORD *)(v12 + 336 * v11 + 16) != v6 || *(_QWORD *)(v12 + 336 * v11 + 24) != *(_QWORD *)(v4 + 32))
      {
        v11 = *(_DWORD *)(v12 + 336 * v11 + 8) & 0x7FFFFFFF;
        if (v11 == 0x7FFFFFFF)
          goto LABEL_23;
      }
      v10 = v11;
    }
  }
LABEL_23:
  v20 = *(_QWORD *)(a1 + 144) + 336 * v10;
  *(_BYTE *)a3 = 1;
  v21 = *(_QWORD *)(v20 + 152);
LABEL_26:
  *(_QWORD *)(a3 + 8) = v21;
}

uint64_t re::PeerVideoStreamingManager::clientCount(re::PeerVideoStreamingManager *this)
{
  return *((unsigned __int16 *)this + 24);
}

void re::PeerVideoStreamingManager::close(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  re *v7;
  re *v8;
  NSObject *v9;
  NSObject *v10;
  _BYTE *v11;
  re *v12;
  uint64_t v13;
  uint64_t v14;
  re *v15;
  uint64_t *v16;
  re *v17;
  NSObject *v18;
  NSObject *v19;
  _BYTE *v20;
  int v21;
  re *v22;
  re *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  _BYTE *v27;
  NSObject *v28;
  _BYTE *v29;
  re *v30;
  char v31;
  _BYTE v32[7];
  _BYTE *v33;
  uint64_t v34;
  _QWORD aBlock[5];
  __int128 v36;
  __int128 v37;
  uint8_t buf[4];
  _BYTE *v39;
  __int16 v40;
  int v41;
  _QWORD v42[3];
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v37 = a2;
  *((_QWORD *)&v37 + 1) = a3;
  v6 = a1 + 128;
  if (!re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::containsKey(a1 + 128, (re::PeerVideoStreamId *)&v37))
  {
    if (!re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::containsKey(a1 + 176, (re::PeerVideoStreamId *)&v37))return;
    if (*(_QWORD *)(a1 + 176))
    {
      v13 = *(unsigned int *)(*(_QWORD *)(a1 + 184)
                            + 4
                            * (re::PeerVideoStreamId::hash((re::PeerVideoStreamId *)&v37) % *(unsigned int *)(a1 + 200)));
      if ((_DWORD)v13 != 0x7FFFFFFF)
      {
        v14 = *(_QWORD *)(a1 + 192);
        do
        {
          if (*(_QWORD *)(v14 + 168 * v13 + 16) == a2 && *(_QWORD *)(v14 + 168 * v13 + 24) == a3)
            break;
          v13 = *(_DWORD *)(v14 + 168 * v13 + 8) & 0x7FFFFFFF;
        }
        while (v13 != 0x7FFFFFFF);
      }
    }
    re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::remove(a1 + 176, (re::PeerVideoStreamId *)&v37);
    if (*(_QWORD *)(a1 + 96) && **(_QWORD **)(a1 + 112))
    {
      re::PeerVideoStreamingManager::makeUnsubscribeMessage((re *)&v30, a2, a3);
      RESyncNetSessionSendData();
      v23 = v30;
      if (!v30 || !v34)
        goto LABEL_35;
    }
    else
    {
      v24 = *re::peerVideoStreamingLogObjects(v22);
      v23 = (re *)os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
      if (!(_DWORD)v23)
        goto LABEL_35;
      v28 = v24;
      re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&v30, a2, a3);
      v29 = (v31 & 1) != 0 ? v33 : v32;
      *(_DWORD *)buf = 136315138;
      v39 = v29;
      _os_log_error_impl(&dword_224FE9000, v28, OS_LOG_TYPE_ERROR, "Failed to send unsubscribe while closing read end %s. No Session", buf, 0xCu);

      v23 = v30;
      if (!v30 || (v31 & 1) == 0)
        goto LABEL_35;
    }
    v23 = (re *)(*(uint64_t (**)(re *))(*(_QWORD *)v23 + 40))(v23);
LABEL_35:
    v25 = *re::peerVideoStreamingLogObjects(v23);
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      return;
    v26 = v25;
    re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&v30, a2, a3);
    if ((v31 & 1) != 0)
      v27 = v33;
    else
      v27 = v32;
    *(_DWORD *)buf = 136315138;
    v39 = v27;
    _os_log_impl(&dword_224FE9000, v26, OS_LOG_TYPE_DEFAULT, "Closed read end: %s.", buf, 0xCu);

    goto LABEL_40;
  }
  v7 = (re *)re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet(v6, (re::PeerVideoStreamId *)&v37);
  if (*((_BYTE *)v7 + 296))
  {
    v8 = v7;
    v9 = *re::peerVideoStreamingLogObjects(v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = v9;
      re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&v30, a2, a3);
      v11 = (v31 & 1) != 0 ? v33 : v32;
      *(_DWORD *)buf = 136315138;
      v39 = v11;
      _os_log_impl(&dword_224FE9000, v10, OS_LOG_TYPE_DEFAULT, "Write end %s is active, deferring close until after flush", buf, 0xCu);

      if (v30)
      {
        if ((v31 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v30 + 40))();
      }
    }
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZN2re25PeerVideoStreamingManager5closeENS_17PeerVideoStreamIdE_block_invoke;
    aBlock[3] = &__block_descriptor_56_e5_v8__0l;
    aBlock[4] = a1;
    v36 = v37;
    v12 = (re *)_Block_copy(aBlock);
    v43 = re::globalAllocators(v12)[2];
    v42[0] = &off_24ED5C890;
    v42[1] = _Block_copy(v12);
    v44 = v42;
    re::PeerVideoFileWriter::flush((uint64_t)v8 + 128, (uint64_t)v42);
    if (v44)
    {
      (*(void (**)(_QWORD *))*v44)(v44);
      if (v44 != v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 40))(v43);
      v44 = 0;
    }

    *((_BYTE *)v8 + 296) = 0;
    return;
  }
  v15 = (re *)re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::remove(v6, (re::PeerVideoStreamId *)&v37);
  v16 = re::peerVideoStreamingLogObjects(v15);
  v17 = (re *)re::PeerVideoStreamingLogObjects::loggingEnabled((re::PeerVideoStreamingLogObjects *)v16);
  if (!(_DWORD)v17)
    return;
  v18 = *re::peerVideoStreamingLogObjects(v17);
  if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    return;
  v19 = v18;
  re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&v30, a2, a3);
  if ((v31 & 1) != 0)
    v20 = v33;
  else
    v20 = v32;
  v21 = *(_DWORD *)(a1 + 156);
  *(_DWORD *)buf = 136315394;
  v39 = v20;
  v40 = 1024;
  v41 = v21;
  _os_log_impl(&dword_224FE9000, v19, OS_LOG_TYPE_DEFAULT, "Closed write end: %s (count=%u)", buf, 0x12u);

LABEL_40:
  if (v30 && (v31 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v30 + 40))();
}

uint64_t ___ZN2re25PeerVideoStreamingManager5closeENS_17PeerVideoStreamIdE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _BYTE *v7;
  re *v8;
  NSObject *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  char v17;
  _BYTE v18[7];
  _BYTE *v19;
  uint8_t buf[4];
  _BYTE *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = a1[4];
  v3 = *re::peerVideoStreamingLogObjects((re *)a1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = a1[5];
    v5 = a1[6];
    v6 = v3;
    re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&v16, v4, v5);
    v7 = (v17 & 1) != 0 ? v19 : v18;
    *(_DWORD *)buf = 136315138;
    v21 = v7;
    _os_log_impl(&dword_224FE9000, v6, OS_LOG_TYPE_DEFAULT, "Flushed video file writer for write end: %s", buf, 0xCu);

    if (v16)
    {
      if ((v17 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v16 + 40))();
    }
  }
  v8 = (re *)re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::remove(v2 + 128, (re::PeerVideoStreamId *)(a1 + 5));
  v9 = *re::peerVideoStreamingLogObjects(v8);
  result = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)result)
  {
    v11 = a1[5];
    v12 = a1[6];
    v13 = v9;
    re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)&v16, v11, v12);
    if ((v17 & 1) != 0)
      v14 = v19;
    else
      v14 = v18;
    v15 = *(_DWORD *)(v2 + 156);
    *(_DWORD *)buf = 136315394;
    v21 = v14;
    v22 = 1024;
    v23 = v15;
    _os_log_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEFAULT, "Closed write end: %s (count=%u)", buf, 0x12u);

    result = v16;
    if (v16)
    {
      if ((v17 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v16 + 40))();
    }
  }
  return result;
}

unint64_t re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::remove(unint64_t result, re::PeerVideoStreamId *this)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  if (*(_QWORD *)result)
  {
    v3 = result;
    result = re::PeerVideoStreamId::hash(this);
    v4 = result % *(unsigned int *)(v3 + 24);
    v5 = *(_QWORD *)(v3 + 8);
    v6 = *(unsigned int *)(v5 + 4 * v4);
    if ((_DWORD)v6 != 0x7FFFFFFF)
    {
      v7 = *(_QWORD *)(v3 + 16);
      v8 = 0x7FFFFFFFLL;
      while (*(_QWORD *)(v7 + 336 * v6 + 16) != *(_QWORD *)this
           || *(_QWORD *)(v7 + 336 * v6 + 24) != *((_QWORD *)this + 1))
      {
        v8 = v6;
        v6 = *(_DWORD *)(v7 + 336 * v6 + 8) & 0x7FFFFFFF;
        if (v6 == 0x7FFFFFFF)
          return result;
      }
      v9 = *(_DWORD *)(v7 + 336 * v6 + 8) & 0x7FFFFFFF;
      if (v8 == 0x7FFFFFFF)
        *(_DWORD *)(v5 + 4 * v4) = v9;
      else
        *(_DWORD *)(v7 + 336 * v8 + 8) = *(_DWORD *)(v7 + 336 * v8 + 8) & 0x80000000 | v9;
      result = (unint64_t)re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::EntryWithHash::free((_DWORD *)(*(_QWORD *)(v3 + 16) + 336 * v6));
      v10 = *(_DWORD *)(v3 + 40);
      *(_DWORD *)(*(_QWORD *)(v3 + 16) + 336 * v6 + 8) = *(_DWORD *)(*(_QWORD *)(v3 + 16) + 336 * v6 + 8) & 0x80000000 | *(_DWORD *)(v3 + 36);
      --*(_DWORD *)(v3 + 28);
      *(_DWORD *)(v3 + 36) = v6;
      *(_DWORD *)(v3 + 40) = v10 + 1;
    }
  }
  return result;
}

uint64_t re::PeerVideoStreamingManager::newFrameEvent(re::PeerVideoStreamingManager *this)
{
  return (uint64_t)this + 224;
}

void _ZN2re8internal8CallableIZZNS_25PeerVideoStreamingManager15setupSessionObsEvEUb_E3__0FvRKN12_GLOBAL__N_113MessageHeaderERNS_11OPackReaderEEJEED0Ev()
{
  JUMPOUT(0x2276933B8);
}

void _ZNK2re8internal8CallableIZZNS_25PeerVideoStreamingManager15setupSessionObsEvEUb_E3__0FvRKN12_GLOBAL__N_113MessageHeaderERNS_11OPackReaderEEJEEclES7_S9_(re *a1, uint64_t a2, re::OPackReader *a3)
{
  uint64_t v4;
  int v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  _BOOL8 v21;
  opaqueCMSampleBuffer *v22;
  re *v23;
  uint64_t v24;
  opaqueCMSampleBuffer *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  re *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  NSObject *v40;
  _BOOL8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  const char *v50;
  NSObject *v51;
  NSObject *v52;
  _BYTE *v53;
  NSObject *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  CFTypeRef *v60;
  re *v61;
  NSObject *v62;
  CFTypeRef v63;
  NSObject *v64;
  _BYTE *v65;
  const char *v66;
  _BOOL8 v67;
  NSObject *v68;
  _BYTE *v69;
  _BOOL8 v70;
  NSObject *v71;
  _BYTE *v72;
  uint8_t *v73;
  NSObject *v74;
  uint32_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  CFTypeRef *v80;
  re *v81;
  NSObject *v82;
  CFTypeRef v83;
  _BYTE *v84;
  id v85;
  opaqueCMSampleBuffer *v86;
  CFTypeRef cf;
  _BYTE v88[22];
  re *v89;
  _BYTE *v90;
  _BYTE buf[12];
  _BYTE *v92;
  re *v93;
  _BYTE *v94;
  __int128 v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a1 + 1);
  v5 = *(_DWORD *)(a2 + 16);
  if (v5 != 3)
  {
    if (v5 != 2)
    {
      if (v5 != 1)
      {
        v39 = *re::peerVideoStreamingLogObjects(a1);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_224FE9000, v39, OS_LOG_TYPE_ERROR, "Received unknown message type.", buf, 2u);
        }
        return;
      }
      v6 = (const void *)*((_QWORD *)a1 + 2);
      v7 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)&v95 = *(_QWORD *)a2;
      *((_QWORD *)&v95 + 1) = v8;
      cf = v6;
      v9 = *re::peerVideoStreamingLogObjects(a1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v6;
        _os_log_impl(&dword_224FE9000, v9, OS_LOG_TYPE_DEFAULT, "Received subscribe message from peer %llu", buf, 0xCu);
      }
      re::OPackReader::next(a3, v10);
      if (re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::containsKey(v4 + 128, (re::PeerVideoStreamId *)&v95))
      {
        v11 = 0x7FFFFFFFLL;
        if (*(_QWORD *)(v4 + 128))
        {
          v12 = *(unsigned int *)(*(_QWORD *)(v4 + 136)
                                + 4
                                * (re::PeerVideoStreamId::hash((re::PeerVideoStreamId *)&v95)
                                 % *(unsigned int *)(v4 + 152)));
          if ((_DWORD)v12 != 0x7FFFFFFF)
          {
            v13 = *(_QWORD *)(v4 + 144);
            v11 = 0x7FFFFFFFLL;
            while (*(_QWORD *)(v13 + 336 * v12 + 16) != v7 || *(_QWORD *)(v13 + 336 * v12 + 24) != v8)
            {
              v12 = *(_DWORD *)(v13 + 336 * v12 + 8) & 0x7FFFFFFF;
              if (v12 == 0x7FFFFFFF)
                goto LABEL_88;
            }
            v11 = v12;
          }
        }
LABEL_88:
        v55 = *(_QWORD *)(v4 + 144);
        v56 = (_QWORD *)(v55 + 336 * v11);
        v57 = v56[8];
        v58 = v56[6];
        if (v58)
        {
          v59 = 8 * v58;
          v60 = (CFTypeRef *)v56[8];
          while (*v60 != cf)
          {
            ++v60;
            v59 -= 8;
            if (!v59)
            {
              v60 = (CFTypeRef *)(v57 + 8 * v58);
              break;
            }
          }
        }
        else
        {
          v60 = (CFTypeRef *)v56[8];
        }
        if (v58 != ((uint64_t)v60 - v57) >> 3)
          return;
        v61 = (re *)re::DynamicArray<re::TransitionCondition *>::add(v56 + 4, &cf);
        *(_BYTE *)(v55 + 336 * v11 + 144) = 1;
        ++*(_WORD *)(v4 + 48);
        v62 = *re::peerVideoStreamingLogObjects(v61);
        if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
          return;
        v63 = cf;
        v64 = v62;
        re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)buf, v7, v8);
        if ((buf[8] & 1) != 0)
          v65 = v92;
        else
          v65 = &buf[9];
        *(_DWORD *)v88 = 134218242;
        *(_QWORD *)&v88[4] = v63;
        *(_WORD *)&v88[12] = 2080;
        *(_QWORD *)&v88[14] = v65;
        v66 = "Added client %llu to write end %s";
LABEL_128:
        v73 = v88;
        v74 = v64;
        v75 = 22;
        goto LABEL_129;
      }
      v45 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::containsKey(v4 + 176, (re::PeerVideoStreamId *)&v95);
      if (v45)
      {
        v46 = 0x7FFFFFFFLL;
        if (*(_QWORD *)(v4 + 176))
        {
          v47 = *(unsigned int *)(*(_QWORD *)(v4 + 184)
                                + 4
                                * (re::PeerVideoStreamId::hash((re::PeerVideoStreamId *)&v95)
                                 % *(unsigned int *)(v4 + 200)));
          if ((_DWORD)v47 != 0x7FFFFFFF)
          {
            v48 = *(_QWORD *)(v4 + 192);
            v46 = 0x7FFFFFFFLL;
            while (*(_QWORD *)(v48 + 168 * v47 + 16) != v7 || *(_QWORD *)(v48 + 168 * v47 + 24) != v8)
            {
              v47 = *(_DWORD *)(v48 + 168 * v47 + 8) & 0x7FFFFFFF;
              if (v47 == 0x7FFFFFFF)
                goto LABEL_116;
            }
            v46 = v47;
          }
        }
LABEL_116:
        v76 = (_QWORD *)(*(_QWORD *)(v4 + 192) + 168 * v46);
        v77 = v76[10];
        v78 = v76[8];
        if (v78)
        {
          v79 = 8 * v78;
          v80 = (CFTypeRef *)v76[10];
          while (*v80 != cf)
          {
            ++v80;
            v79 -= 8;
            if (!v79)
            {
              v80 = (CFTypeRef *)(v77 + 8 * v78);
              break;
            }
          }
        }
        else
        {
          v80 = (CFTypeRef *)v76[10];
        }
        if (v78 != ((uint64_t)v80 - v77) >> 3)
          return;
        v81 = (re *)re::DynamicArray<re::TransitionCondition *>::add(v76 + 6, &cf);
        ++*(_WORD *)(v4 + 48);
        v82 = *re::peerVideoStreamingLogObjects(v81);
        if (!os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
          return;
        v83 = cf;
        v64 = v82;
        re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)buf, v7, v8);
        if ((buf[8] & 1) != 0)
          v84 = v92;
        else
          v84 = &buf[9];
        *(_DWORD *)v88 = 134218242;
        *(_QWORD *)&v88[4] = v83;
        *(_WORD *)&v88[12] = 2080;
        *(_QWORD *)&v88[14] = v84;
        v66 = "Added proxy client %llu to read end %s";
        goto LABEL_128;
      }
      v49 = *re::peerVideoStreamingLogObjects((re *)v45);
      if (!os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
        return;
      *(_WORD *)buf = 0;
      v50 = "Received subscribe message for nonexisting stream id.";
LABEL_68:
      _os_log_impl(&dword_224FE9000, v49, OS_LOG_TYPE_DEFAULT, v50, buf, 2u);
      return;
    }
    v31 = (const void *)*((_QWORD *)a1 + 2);
    v32 = *(_QWORD *)a2;
    v33 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)v88 = *(_QWORD *)a2;
    *(_QWORD *)&v88[8] = v33;
    cf = v31;
    v34 = *re::peerVideoStreamingLogObjects(a1);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v31;
      _os_log_impl(&dword_224FE9000, v34, OS_LOG_TYPE_DEFAULT, "Received unsubscribe message from peer %llu", buf, 0xCu);
    }
    re::OPackReader::next(a3, v35);
    if (re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::containsKey(v4 + 128, (re::PeerVideoStreamId *)v88))
    {
      v36 = 0x7FFFFFFFLL;
      if (*(_QWORD *)(v4 + 128))
      {
        v37 = *(unsigned int *)(*(_QWORD *)(v4 + 136)
                              + 4
                              * (re::PeerVideoStreamId::hash((re::PeerVideoStreamId *)v88) % *(unsigned int *)(v4 + 152)));
        if ((_DWORD)v37 != 0x7FFFFFFF)
        {
          v38 = *(_QWORD *)(v4 + 144);
          v36 = 0x7FFFFFFFLL;
          while (*(_QWORD *)(v38 + 336 * v37 + 16) != v32 || *(_QWORD *)(v38 + 336 * v37 + 24) != v33)
          {
            v37 = *(_DWORD *)(v38 + 336 * v37 + 8) & 0x7FFFFFFF;
            if (v37 == 0x7FFFFFFF)
              goto LABEL_101;
          }
          v36 = v37;
        }
      }
LABEL_101:
      v67 = re::DynamicArray<unsigned long long>::remove(*(_QWORD *)(v4 + 144) + 336 * v36 + 32, &cf);
      if (!v67)
        return;
      --*(_WORD *)(v4 + 48);
      v68 = *re::peerVideoStreamingLogObjects((re *)v67);
      if (!os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
        return;
      v64 = v68;
      re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)buf, v32, v33);
      if ((buf[8] & 1) != 0)
        v69 = v92;
      else
        v69 = &buf[9];
      LODWORD(v95) = 136315138;
      *(_QWORD *)((char *)&v95 + 4) = v69;
      v66 = "Removed as client from write end: %s";
    }
    else
    {
      v41 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::containsKey(v4 + 176, (re::PeerVideoStreamId *)v88);
      if (!v41)
      {
        v49 = *re::peerVideoStreamingLogObjects((re *)v41);
        if (!os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
          return;
        *(_WORD *)buf = 0;
        v50 = "Received unsubscribe message for nonexisting stream id.";
        goto LABEL_68;
      }
      v42 = 0x7FFFFFFFLL;
      if (*(_QWORD *)(v4 + 176))
      {
        v43 = *(unsigned int *)(*(_QWORD *)(v4 + 184)
                              + 4
                              * (re::PeerVideoStreamId::hash((re::PeerVideoStreamId *)v88) % *(unsigned int *)(v4 + 200)));
        if ((_DWORD)v43 != 0x7FFFFFFF)
        {
          v44 = *(_QWORD *)(v4 + 192);
          v42 = 0x7FFFFFFFLL;
          while (*(_QWORD *)(v44 + 168 * v43 + 16) != v32 || *(_QWORD *)(v44 + 168 * v43 + 24) != v33)
          {
            v43 = *(_DWORD *)(v44 + 168 * v43 + 8) & 0x7FFFFFFF;
            if (v43 == 0x7FFFFFFF)
              goto LABEL_108;
          }
          v42 = v43;
        }
      }
LABEL_108:
      v70 = re::DynamicArray<unsigned long long>::remove(*(_QWORD *)(v4 + 192) + 168 * v42 + 48, &cf);
      if (!v70)
        return;
      --*(_WORD *)(v4 + 48);
      v71 = *re::peerVideoStreamingLogObjects((re *)v70);
      if (!os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
        return;
      v64 = v71;
      re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)buf, v32, v33);
      if ((buf[8] & 1) != 0)
        v72 = v92;
      else
        v72 = &buf[9];
      LODWORD(v95) = 136315138;
      *(_QWORD *)((char *)&v95 + 4) = v72;
      v66 = "Removed as proxy client from read end: %s";
    }
    v73 = (uint8_t *)&v95;
    v74 = v64;
    v75 = 12;
LABEL_129:
    _os_log_impl(&dword_224FE9000, v74, OS_LOG_TYPE_DEFAULT, v66, v73, v75);

    v30 = *(re **)buf;
    if (*(_QWORD *)buf && (buf[8] & 1) != 0)
      goto LABEL_131;
    return;
  }
  v15 = *(_QWORD *)a2;
  v14 = *(_QWORD *)(a2 + 8);
  v16 = *((_QWORD *)a1 + 2);
  *(_QWORD *)&v95 = *(_QWORD *)a2;
  *((_QWORD *)&v95 + 1) = v14;
  v17 = re::internal::enableSignposts(0, 0);
  if ((_DWORD)v17)
  {
    v17 = re::internal::enableHighFrequencyNetworkTracing(0, 0);
    if ((_DWORD)v17)
      v17 = kdebug_trace();
  }
  if (!*(_QWORD *)(v4 + 96) || !**(_QWORD **)(v4 + 112))
  {
    v40 = *re::peerVideoStreamingLogObjects((re *)v17);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v40, OS_LOG_TYPE_ERROR, "Failed to process frame message. No Session available.", buf, 2u);
    }
    if (!re::internal::enableSignposts(0, 0) || !re::internal::enableHighFrequencyNetworkTracing(0, 0))
      return;
LABEL_47:
    kdebug_trace();
    return;
  }
  v18 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet(v4 + 176, (re::PeerVideoStreamId *)&v95);
  if (!v18)
  {
    v51 = *re::peerVideoStreamingLogObjects(0);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
    {
      v52 = v51;
      re::DynamicString::format((re::DynamicString *)"%llu_%llu", (re::DynamicString *)buf, v15, v14);
      v53 = (buf[8] & 1) != 0 ? v92 : &buf[9];
      *(_DWORD *)v88 = 136315138;
      *(_QWORD *)&v88[4] = v53;
      _os_log_impl(&dword_224FE9000, v52, OS_LOG_TYPE_DEFAULT, "Received frame message for unknown stream id %s. Sending unsubscribe.", v88, 0xCu);

      if (*(_QWORD *)buf)
      {
        if ((buf[8] & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)buf + 40))();
      }
    }
    re::PeerVideoStreamingManager::makeUnsubscribeMessage((re *)buf, v15, v14);
    RESyncNetSessionSendData();
    if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
      kdebug_trace();
    v30 = *(re **)buf;
    if (*(_QWORD *)buf && v94)
      goto LABEL_131;
    return;
  }
  v20 = v18;
  v86 = 0;
  cf = 0;
  v21 = re::PeerVideoStreamingUtils::readCMSampleBuffer(a3, (re::OPackReader *)(v18 + 64), (CMTimeValue *)&cf, &v86, v19);
  if (!v21)
  {
    v54 = *re::peerVideoStreamingLogObjects((re *)v21);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v54, OS_LOG_TYPE_ERROR, "Failed to read CMSampleBuffer", buf, 2u);
    }
    if (!re::internal::enableSignposts(0, 0) || !re::internal::enableHighFrequencyNetworkTracing(0, 0))
      return;
    goto LABEL_47;
  }
  v22 = v86;
  v23 = (re *)re::globalAllocators((re *)v21)[2];
  v93 = v23;
  v24 = (*(uint64_t (**)(re *, uint64_t, _QWORD))(*(_QWORD *)v23 + 32))(v23, 48, 0);
  *(_QWORD *)v24 = &off_24ED5CA00;
  *(_QWORD *)(v24 + 8) = v4;
  *(_OWORD *)(v24 + 16) = v95;
  *(_QWORD *)(v24 + 32) = v22;
  *(_QWORD *)(v24 + 40) = v16;
  v94 = (_BYTE *)v24;
  v25 = (opaqueCMSampleBuffer *)cf;
  v89 = v23;
  v90 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v88, (uint64_t)buf);
  v85 = *(id *)(v4 + 8);
  re::PeerVideoStreamingDecoder::decodeFrame((VTDecompressionSessionRef *)(v20 + 56), v25, (uint64_t)v88, &v85);
  v26 = v85;
  v85 = 0;

  if (v90)
  {
    (**(void (***)(_BYTE *))v90)(v90);
    if (v90 != v88)
      (*(void (**)(re *))(*(_QWORD *)v89 + 40))(v89);
    v90 = 0;
  }
  CFRelease(cf);
  v27 = *(_QWORD *)(v20 + 32);
  if (v27)
  {
    v28 = *(_QWORD *)(v20 + 48);
    v29 = 8 * v27;
    do
    {
      v28 += 8;
      RESyncNetSessionSendDataUnreliableUnordered();
      v29 -= 8;
    }
    while (v29);
  }
  if (v94)
  {
    (**(void (***)(_BYTE *))v94)(v94);
    if (v94 != buf)
    {
      v30 = v93;
LABEL_131:
      (*(void (**)(re *))(*(_QWORD *)v30 + 40))(v30);
    }
  }
}

uint64_t _ZNK2re8internal8CallableIZZNS_25PeerVideoStreamingManager15setupSessionObsEvEUb_E3__0FvRKN12_GLOBAL__N_113MessageHeaderERNS_11OPackReaderEEJEE9cloneIntoEPv(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5C7C0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t _ZN2re8internal8CallableIZZNS_25PeerVideoStreamingManager15setupSessionObsEvEUb_E3__0FvRKN12_GLOBAL__N_113MessageHeaderERNS_11OPackReaderEEJEE8moveIntoEPv(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5C7C0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t _ZNK2re8internal8CallableIZZNS_25PeerVideoStreamingManager15setupSessionObsEvEUb_E3__0FvRKN12_GLOBAL__N_113MessageHeaderERNS_11OPackReaderEEJEE4sizeEv()
{
  return 40;
}

_QWORD *re::internal::Callable<re::PeerVideoStreamingManager::writeFrame(re::SharedPtr<re::PeerVideoStreamHandle>,re::InputVideoFrame const&)::$_0,void ()(opaqueCMSampleBuffer *)>::~Callable(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24ED5C828;
  v2 = a1[2];
  if (v2)
  {

    a1[2] = 0;
  }
  return a1;
}

void re::internal::Callable<re::PeerVideoStreamingManager::writeFrame(re::SharedPtr<re::PeerVideoStreamHandle>,re::InputVideoFrame const&)::$_0,void ()(opaqueCMSampleBuffer *)>::~Callable(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24ED5C828;
  v2 = a1[2];
  if (v2)
  {

    a1[2] = 0;
  }
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::writeFrame(re::SharedPtr<re::PeerVideoStreamHandle>,re::InputVideoFrame const&)::$_0,void ()(opaqueCMSampleBuffer *)>::operator()(_QWORD *a1, CMSampleBufferRef *a2)
{
  opaqueCMSampleBuffer *v3;
  uint64_t v4;
  size_t TotalSampleSize;
  int NumSamples;
  const __CFArray *SampleAttachmentsArray;
  re *Count;
  int v9;
  NSObject *v10;
  re::PeerVideoStreamId *v11;
  re *v12;
  re *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  NSObject *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[5];
  __int128 v25;
  int v26;
  _BYTE buf[24];
  size_t v28;
  _BYTE v29[10];
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = a1[1];
  TotalSampleSize = CMSampleBufferGetTotalSampleSize(*a2);
  NumSamples = CMSampleBufferGetNumSamples(v3);
  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(v3, 0);
  Count = (re *)CFArrayGetCount(SampleAttachmentsArray);
  v9 = (int)Count;
  v10 = *re::peerVideoStreamingLogObjects(Count);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    v21 = a1[3];
    v22 = a1[4];
    v23 = a1[5];
    *(_DWORD *)buf = 134219520;
    *(_QWORD *)&buf[4] = v21;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = TotalSampleSize;
    *(_WORD *)&buf[22] = 2048;
    v28 = v21 / TotalSampleSize;
    *(_WORD *)v29 = 2048;
    *(_QWORD *)&v29[2] = v22;
    v30 = 2048;
    v31 = v23;
    v32 = 1024;
    v33 = NumSamples;
    v34 = 1024;
    v35 = v9;
    _os_log_debug_impl(&dword_224FE9000, v10, OS_LOG_TYPE_DEBUG, "Encode succeeded. Input buffer size: %lu. Encoded buffer size: %lu. Compression factor: %lu, w: %zu, h: %zu, n:%d/%d", buf, 0x40u);
  }
  v11 = (re::PeerVideoStreamId *)(a1[2] + 24);
  v12 = (re *)re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet(v4 + 128, v11);
  if (!v12 || (v13 = v12, !*((_QWORD *)v12 + 2)))
  {
    result = re::internal::enableSignposts(0, 0);
    if (!(_DWORD)result)
      return result;
    result = re::internal::enableHighFrequencyNetworkTracing(0, 0);
    if (!(_DWORD)result)
      return result;
    return kdebug_trace();
  }
  if (*(_QWORD *)(v4 + 96) && **(_QWORD **)(v4 + 112))
  {
    v14 = a1[6];
    v25 = *(_OWORD *)v11;
    v26 = 3;
    v15 = re::globalAllocators(v12)[2];
    *(_QWORD *)buf = &off_24ED5C9A8;
    *(_QWORD *)&buf[8] = v3;
    *(_QWORD *)&buf[16] = v14;
    v28 = v15;
    *(_QWORD *)v29 = buf;
    if (*(_QWORD *)v29)
    {
      (***(void (****)(_QWORD))v29)(*(_QWORD *)v29);
      if (*(_BYTE **)v29 != buf)
        (*(void (**)(size_t))(*(_QWORD *)v28 + 40))(v28);
    }
    v16 = *((_QWORD *)v13 + 2);
    if (v16)
    {
      v17 = *((_QWORD *)v13 + 4);
      v18 = 8 * v16;
      do
      {
        v17 += 8;
        RESyncNetSessionSendDataUnreliableUnordered();
        v18 -= 8;
      }
      while (v18);
    }
    if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
      kdebug_trace();
    result = v24[0];
    if (v24[0])
    {
      if (v24[4])
        return (*(uint64_t (**)(void))(*(_QWORD *)v24[0] + 40))();
    }
    return result;
  }
  v20 = *re::peerVideoStreamingLogObjects(v12);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_224FE9000, v20, OS_LOG_TYPE_ERROR, "No Session available in OnEncodeSucceeded", buf, 2u);
  }
  result = re::internal::enableSignposts(0, 0);
  if ((_DWORD)result)
  {
    result = re::internal::enableHighFrequencyNetworkTracing(0, 0);
    if ((_DWORD)result)
      return kdebug_trace();
  }
  return result;
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::writeFrame(re::SharedPtr<re::PeerVideoStreamHandle>,re::InputVideoFrame const&)::$_0,void ()(opaqueCMSampleBuffer *)>::cloneInto(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  __int128 v7;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24ED5C828;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (v4)
    v6 = (id)(v4 + 8);
  v7 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v7;
  return a2;
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::writeFrame(re::SharedPtr<re::PeerVideoStreamHandle>,re::InputVideoFrame const&)::$_0,void ()(opaqueCMSampleBuffer *)>::moveInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5C828;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  v2 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::writeFrame(re::SharedPtr<re::PeerVideoStreamHandle>,re::InputVideoFrame const&)::$_0,void ()(opaqueCMSampleBuffer *)>::size()
{
  return 56;
}

uint64_t re::internal::Callable<void({block_pointer} {__strong})(void),void ()(void)>::~Callable(uint64_t a1)
{

  return a1;
}

void re::internal::Callable<void({block_pointer} {__strong})(void),void ()(void)>::~Callable(uint64_t a1)
{

  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<void({block_pointer} {__strong})(void),void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

_QWORD *re::internal::Callable<void({block_pointer} {__strong})(void),void ()(void)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED5C890;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

_QWORD *re::internal::Callable<void({block_pointer} {__strong})(void),void ()(void)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED5C890;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

uint64_t re::internal::Callable<void({block_pointer} {__strong})(void),void ()(void)>::size()
{
  return 16;
}

void re::internal::Callable<re::PeerVideoStreamingManager::makeSubscribeMessage(re::PeerVideoStreamId)::$_0,void ()(re::OPackWriter &)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::makeSubscribeMessage(re::PeerVideoStreamId)::$_0,void ()(re::OPackWriter &)>::operator()(uint64_t a1, re::zerocopy **a2)
{
  char v3;

  v3 = 4;
  return re::zerocopy::writeAll(*a2, (re::zerocopy::WriteStream *)&v3, (char *)1);
}

_QWORD *re::internal::Callable<re::PeerVideoStreamingManager::makeSubscribeMessage(re::PeerVideoStreamId)::$_0,void ()(re::OPackWriter &)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED5C8E8;
  return result;
}

_QWORD *re::internal::Callable<re::PeerVideoStreamingManager::makeSubscribeMessage(re::PeerVideoStreamId)::$_0,void ()(re::OPackWriter &)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED5C8E8;
  return result;
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::makeSubscribeMessage(re::PeerVideoStreamId)::$_0,void ()(re::OPackWriter &)>::size()
{
  return 16;
}

void re::internal::Callable<re::PeerVideoStreamingManager::makeUnsubscribeMessage(re::PeerVideoStreamId)::$_0,void ()(re::OPackWriter &)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::makeUnsubscribeMessage(re::PeerVideoStreamId)::$_0,void ()(re::OPackWriter &)>::operator()(uint64_t a1, re::zerocopy **a2)
{
  char v3;

  v3 = 4;
  return re::zerocopy::writeAll(*a2, (re::zerocopy::WriteStream *)&v3, (char *)1);
}

_QWORD *re::internal::Callable<re::PeerVideoStreamingManager::makeUnsubscribeMessage(re::PeerVideoStreamId)::$_0,void ()(re::OPackWriter &)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED5C950;
  return result;
}

_QWORD *re::internal::Callable<re::PeerVideoStreamingManager::makeUnsubscribeMessage(re::PeerVideoStreamId)::$_0,void ()(re::OPackWriter &)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED5C950;
  return result;
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::makeUnsubscribeMessage(re::PeerVideoStreamId)::$_0,void ()(re::OPackWriter &)>::size()
{
  return 16;
}

void re::internal::Callable<re::PeerVideoStreamingManager::makeFrameMessage(re::PeerVideoStreamId,opaqueCMSampleBuffer *,unsigned long long)::$_0,void ()(re::OPackWriter &)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::makeFrameMessage(re::PeerVideoStreamId,opaqueCMSampleBuffer *,unsigned long long)::$_0,void ()(re::OPackWriter &)>::operator()(uint64_t a1, re::zerocopy **this)
{
  return re::PeerVideoStreamingUtils::writeCMSampleBuffer(this, *(re::OPackWriter **)(a1 + 8), *(opaqueCMSampleBuffer **)(a1 + 16));
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::makeFrameMessage(re::PeerVideoStreamId,opaqueCMSampleBuffer *,unsigned long long)::$_0,void ()(re::OPackWriter &)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED5C9A8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::makeFrameMessage(re::PeerVideoStreamId,opaqueCMSampleBuffer *,unsigned long long)::$_0,void ()(re::OPackWriter &)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED5C9A8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::makeFrameMessage(re::PeerVideoStreamId,opaqueCMSampleBuffer *,unsigned long long)::$_0,void ()(re::OPackWriter &)>::size()
{
  return 24;
}

void re::internal::Callable<re::PeerVideoStreamingManager::processFrameMessage(unsigned long long,re::PeerVideoStreamId,re::OPackReader &,void const*,unsigned long)::$_0,void ()(re::OutputVideoFrame &&)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::processFrameMessage(unsigned long long,re::PeerVideoStreamId,re::OPackReader &,void const*,unsigned long)::$_0,void ()(re::OutputVideoFrame &&)>::operator()(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t result;
  const void *v10;
  uint64_t v11;
  id WeakRetained;
  char *v13;
  void *v14;
  char *v15;
  char *v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  _anonymous_namespace_ *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _OWORD *v31;
  __int128 v32;
  char *v33;
  _BYTE v34[40];
  int v35;
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  unint64_t v40;
  __int16 v41;
  unint64_t v42;
  CFTypeRef cf[2];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v4 = a1[1];
  v5 = re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::tryGet(v4 + 176, (re::PeerVideoStreamId *)(a1 + 2));
  if (v5)
  {
    v6 = v5;
    if (*(_BYTE *)(v5 + 96))
    {
      v8 = a1 + 4;
      v7 = a1[4];
      if (v7 <= *(_QWORD *)(v5 + 104))
      {
LABEL_51:
        result = re::internal::enableSignposts(0, 0);
        if ((_DWORD)result)
        {
          result = re::internal::enableHighFrequencyNetworkTracing(0, 0);
          if ((_DWORD)result)
            return kdebug_trace();
        }
        return result;
      }
    }
    else
    {
      v8 = a1 + 4;
      v7 = a1[4];
      if (!v7)
        goto LABEL_51;
      *(_BYTE *)(v5 + 96) = 1;
    }
    *(_QWORD *)(v5 + 104) = v7;
    LOBYTE(cf[0]) = 1;
    v10 = *(const void **)a2;
    v11 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a2 = 0;
    cf[1] = v10;
    *(_QWORD *)&v44 = v11;
    re::Optional<re::OutputVideoFrame>::operator=(v5 + 72, (unsigned __int8 *)cf);
    if (LOBYTE(cf[0]) && cf[1])
      CFRelease(cf[1]);
    *(_QWORD *)(v6 + 88) = *v8;
    WeakRetained = objc_loadWeakRetained((id *)v6);
    if (WeakRetained)
    {

      v13 = (char *)objc_loadWeakRetained((id *)v6);
      v14 = v13;
      v15 = v13 - 8;
      if (!v13)
        v15 = 0;
      v33 = v15;
      if (v13)
        v16 = v13;
      v17 = *(_DWORD *)(v4 + 304);
      *(_DWORD *)(v4 + 304) = v17 + 1;
      if (*(_QWORD *)(v4 + 240))
      {
        v18 = 0;
        do
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v4 + 256) + 32 * v18 + 24))(v4) == 1)
            re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((_QWORD *)(v4 + 224), v18);
          else
            ++v18;
        }
        while (v18 < *(_QWORD *)(v4 + 240));
        v17 = *(_DWORD *)(v4 + 304) - 1;
      }
      *(_DWORD *)(v4 + 304) = v17;
      if (!v17)
      {
        v19 = *(_QWORD *)(v4 + 280);
        if (v19)
        {
          v20 = 0;
          for (i = 0; i != v19; ++i)
          {
            v22 = *(_QWORD *)(v4 + 280);
            if (v22 <= i)
            {
              v46 = 0u;
              v47 = 0u;
              v44 = 0u;
              v45 = 0u;
              *(_OWORD *)cf = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v35 = 136315906;
              v36 = "operator[]";
              v37 = 1024;
              v38 = 789;
              v39 = 2048;
              v40 = i;
              v41 = 2048;
              v42 = v22;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            v23 = *(_QWORD *)(v4 + 296) + v20;
            v24 = *(_OWORD *)(v23 + 16);
            *(_OWORD *)v34 = *(_OWORD *)v23;
            *(_OWORD *)&v34[16] = v24;
            *(_QWORD *)&v34[32] = *(_QWORD *)(v23 + 32);
            if (v34[0])
            {
              v25 = (_anonymous_namespace_ *)re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::indexOf((uint64_t)cf, *(_QWORD *)(v4 + 240), *(char **)(v4 + 256), &v34[8]);
              if (!LOBYTE(cf[0]))
              {
                v26 = *(_QWORD *)(v4 + 232);
                v27 = *(_QWORD *)(v4 + 240);
                if (v27 >= v26)
                {
                  v28 = v27 + 1;
                  if (v26 < v27 + 1)
                  {
                    if (*(_QWORD *)(v4 + 224))
                    {
                      if (v26)
                        v29 = 2 * v26;
                      else
                        v29 = 8;
                      if (v29 <= v28)
                        v30 = v27 + 1;
                      else
                        v30 = v29;
                      re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v4 + 224), v30);
                    }
                    else
                    {
                      re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v4 + 224), v28);
                      ++*(_DWORD *)(v4 + 248);
                    }
                  }
                  v27 = *(_QWORD *)(v4 + 240);
                }
                v31 = (_OWORD *)(*(_QWORD *)(v4 + 256) + 32 * v27);
                v32 = *(_OWORD *)&v34[24];
                *v31 = *(_OWORD *)&v34[8];
                v31[1] = v32;
                ++*(_QWORD *)(v4 + 240);
                ++*(_DWORD *)(v4 + 248);
              }
            }
            else
            {
              re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::indexOf((uint64_t)cf, *(_QWORD *)(v4 + 240), *(char **)(v4 + 256), &v34[8]);
              if (LOBYTE(cf[0]))
                re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((_QWORD *)(v4 + 224), (unint64_t)cf[1]);
            }
            v20 += 40;
          }
        }
      }
      if (v33)

      if (v14)
    }
    goto LABEL_51;
  }
  result = re::internal::enableSignposts(0, 0);
  if ((_DWORD)result)
  {
    result = re::internal::enableHighFrequencyNetworkTracing(0, 0);
    if ((_DWORD)result)
      return kdebug_trace();
  }
  return result;
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::processFrameMessage(unsigned long long,re::PeerVideoStreamId,re::OPackReader &,void const*,unsigned long)::$_0,void ()(re::OutputVideoFrame &&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  *(_QWORD *)a2 = &off_24ED5CA00;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::processFrameMessage(unsigned long long,re::PeerVideoStreamId,re::OPackReader &,void const*,unsigned long)::$_0,void ()(re::OutputVideoFrame &&)>::moveInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  *(_QWORD *)a2 = &off_24ED5CA00;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::PeerVideoStreamingManager::processFrameMessage(unsigned long long,re::PeerVideoStreamId,re::OPackReader &,void const*,unsigned long)::$_0,void ()(re::OutputVideoFrame &&)>::size()
{
  return 48;
}

double re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::EntryWithHash::free((_DWORD *)(a1[2] + v3));
        ++v4;
        v3 += 336;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

_DWORD *re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::EntryWithHash::free(_DWORD *result)
{
  int v1;
  _DWORD *v2;

  v1 = result[2];
  if (v1 < 0)
  {
    v2 = result;
    result[2] = v1 & 0x7FFFFFFF;
    re::PeerVideoFileWriter::~PeerVideoFileWriter((re::PeerVideoFileWriter *)(result + 40));
    re::PeerVideoStreamingEncoder::~PeerVideoStreamingEncoder((re::PeerVideoStreamingEncoder *)(v2 + 18));
    result = (_DWORD *)*((_QWORD *)v2 + 4);
    if (result)
    {
      if (*((_QWORD *)v2 + 8))
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 40))(result);
      *((_QWORD *)v2 + 8) = 0;
      *((_QWORD *)v2 + 5) = 0;
      *((_QWORD *)v2 + 6) = 0;
      *((_QWORD *)v2 + 4) = 0;
      ++v2[14];
    }
  }
  return result;
}

double re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 168;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1;
  const void *v3;
  uint64_t v4;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(a1 + 8) = v1 & 0x7FFFFFFF;
    if (*(_BYTE *)(a1 + 104))
    {
      v3 = *(const void **)(a1 + 112);
      if (v3)
        CFRelease(v3);
    }
    re::PeerVideoStreamingDecoder::~PeerVideoStreamingDecoder((VTDecompressionSessionRef *)(a1 + 88));
    v4 = *(_QWORD *)(a1 + 48);
    if (v4)
    {
      if (*(_QWORD *)(a1 + 80))
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
      *(_QWORD *)(a1 + 80) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 48) = 0;
      ++*(_DWORD *)(a1 + 72);
    }
    objc_destroyWeak((id *)(a1 + 32));
    *(_QWORD *)(a1 + 32) = 0;
  }
}

void re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 336 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 168 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _OWORD *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v36[44];

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v10 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v36, 0, 36);
          *(_QWORD *)&v36[36] = 0x7FFFFFFFLL;
          re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::init((uint64_t)v36, v14, v13);
          v16 = *(_OWORD *)v36;
          *(_OWORD *)v36 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v36[16];
          *(_QWORD *)&v36[16] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v17;
          v19 = *(_OWORD *)&v36[24];
          *(_OWORD *)&v36[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v36[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = 0;
            v22 = 0;
            do
            {
              if ((*(_DWORD *)(*(_QWORD *)&v36[16] + v21 + 8) & 0x80000000) != 0)
              {
                re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v36[16] + v21) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v36[16] + v21), *(_QWORD *)&v36[16] + v21 + 16, *(_QWORD *)&v36[16] + v21 + 32);
                v20 = *(_DWORD *)&v36[32];
              }
              ++v22;
              v21 += 336;
            }
            while (v22 < v20);
          }
          re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamWriteEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::deinit((uint64_t *)v36);
        }
      }
      else
      {
        if (v13)
          v25 = 2 * v12;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 336 * v10 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 336 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  v26 = 336 * v10;
  *(_DWORD *)(v23 + v26 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v26) = a3;
  *(_OWORD *)(*(_QWORD *)(a1 + 16) + v26 + 16) = *a4;
  v27 = *(_QWORD *)(a1 + 16) + v26;
  *(_QWORD *)(v27 + 64) = 0;
  *(_DWORD *)(v27 + 56) = 0;
  *(_QWORD *)(v27 + 40) = 0;
  *(_QWORD *)(v27 + 48) = 0;
  *(_QWORD *)(v27 + 32) = 0;
  *(_QWORD *)(v27 + 32) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(v27 + 40) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = 0;
  v28 = *(_QWORD *)(v27 + 48);
  *(_QWORD *)(v27 + 48) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v28;
  v29 = *(_QWORD *)(v27 + 64);
  *(_QWORD *)(v27 + 64) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v29;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v27 + 56);
  *(_QWORD *)(v27 + 72) = 0;
  *(_QWORD *)(v27 + 80) = 0;
  v27 += 72;
  *(_DWORD *)(v27 + 16) = 0;
  *(_QWORD *)(v27 + 32) = 0;
  *(_QWORD *)(v27 + 40) = 0;
  *(_QWORD *)(v27 + 24) = 0;
  *(_DWORD *)(v27 + 48) = 0;
  *(_QWORD *)(v27 + 56) = 0;
  *(_QWORD *)(v27 + 64) = 0;
  re::PeerVideoStreamingEncoder::operator=((__int128 *)v27, (__int128 *)(a5 + 40));
  *(_OWORD *)(v27 + 72) = *(_OWORD *)(a5 + 112);
  re::DynamicString::DynamicString((re::DynamicString *)(v27 + 88), (const re::DynamicString *)(a5 + 128));
  re::DynamicString::DynamicString((re::DynamicString *)(v27 + 120), (const re::DynamicString *)(a5 + 160));
  v30 = *(_OWORD *)(a5 + 192);
  v31 = *(_OWORD *)(a5 + 208);
  *(_OWORD *)(v27 + 184) = *(_OWORD *)(a5 + 224);
  *(_OWORD *)(v27 + 168) = v31;
  *(_OWORD *)(v27 + 152) = v30;
  v32 = *(_OWORD *)(a5 + 240);
  v33 = *(_OWORD *)(a5 + 256);
  v34 = *(_OWORD *)(a5 + 272);
  *(_QWORD *)(v27 + 248) = *(_QWORD *)(a5 + 288);
  *(_OWORD *)(v27 + 232) = v34;
  *(_OWORD *)(v27 + 216) = v33;
  *(_OWORD *)(v27 + 200) = v32;
  *(_BYTE *)(v27 + 256) = *(_BYTE *)(a5 + 296);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::make::shared::object<re::PeerVideoStreamHandle,re::PeerVideoStreamId &,re::PeerVideoStreamingManager *>(re *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v6;
  _anonymous_namespace_ *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = re::globalAllocators(a1);
  v7 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
  v9 = *a2;
  v8 = a2[1];
  v10 = *a3;
  ArcSharedObject::ArcSharedObject(v7, 0);
  *(_QWORD *)v7 = &off_24ED48DB8;
  *((_QWORD *)v7 + 3) = v9;
  *((_QWORD *)v7 + 4) = v8;
  *((_QWORD *)v7 + 5) = v10;
  *(_QWORD *)a1 = v7;
}

void re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _OWORD *a4, uint64_t a5)
{
  unsigned int v10;
  unsigned int v11;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  _BYTE v35[44];

  v10 = *(_DWORD *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    v10 = *(_DWORD *)(a1 + 32);
    v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = v10 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v35, 0, 36);
          *(_QWORD *)&v35[36] = 0x7FFFFFFFLL;
          re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::init((uint64_t)v35, v14, v13);
          v16 = *(_OWORD *)v35;
          *(_OWORD *)v35 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v35[16];
          *(_QWORD *)&v35[16] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v17;
          v19 = *(_OWORD *)&v35[24];
          *(_OWORD *)&v35[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v35[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = 0;
            v22 = 0;
            do
            {
              if ((*(_DWORD *)(*(_QWORD *)&v35[16] + v21 + 8) & 0x80000000) != 0)
              {
                re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v35[16] + v21) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v35[16] + v21), *(_QWORD *)&v35[16] + v21 + 16, *(_QWORD *)&v35[16] + v21 + 32);
                v20 = *(_DWORD *)&v35[32];
              }
              ++v22;
              v21 += 168;
            }
            while (v22 < v20);
          }
          re::HashTable<re::PeerVideoStreamId,re::StreamingInternal::StreamReadEnd,re::Hash<re::PeerVideoStreamId>,re::EqualTo<re::PeerVideoStreamId>,true,false>::deinit((uint64_t *)v35);
        }
      }
      else
      {
        if (v13)
          v25 = 2 * v12;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 168 * v10 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 168 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  v26 = 168 * v10;
  *(_DWORD *)(v23 + v26 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v26) = a3;
  *(_OWORD *)(*(_QWORD *)(a1 + 16) + v26 + 16) = *a4;
  v27 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v27 + v26 + 32) = 0;
  v28 = v27 + v26 + 32;
  objc_moveWeak((id *)v28, (id *)a5);
  v29 = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(v28 + 48) = 0;
  *(_QWORD *)(v28 + 8) = v29;
  *(_QWORD *)(v28 + 16) = 0;
  *(_DWORD *)(v28 + 40) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  *(_QWORD *)(v28 + 16) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(v28 + 24) = *(_QWORD *)(a5 + 24);
  *(_QWORD *)(a5 + 24) = 0;
  v30 = *(_QWORD *)(v28 + 32);
  *(_QWORD *)(v28 + 32) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v30;
  v31 = *(_QWORD *)(v28 + 48);
  *(_QWORD *)(v28 + 48) = *(_QWORD *)(a5 + 48);
  *(_QWORD *)(a5 + 48) = v31;
  ++*(_DWORD *)(a5 + 40);
  ++*(_DWORD *)(v28 + 40);
  *(_OWORD *)(v28 + 56) = *(_OWORD *)(a5 + 56);
  LODWORD(v31) = *(unsigned __int8 *)(a5 + 72);
  *(_BYTE *)(v28 + 72) = v31;
  if ((_DWORD)v31)
  {
    v32 = v27 + 168 * v10;
    *(_QWORD *)(v32 + 112) = *(_QWORD *)(a5 + 80);
    *(_QWORD *)(a5 + 80) = 0;
    *(_QWORD *)(v32 + 120) = *(_QWORD *)(a5 + 88);
  }
  v33 = *(unsigned __int8 *)(a5 + 96);
  *(_BYTE *)(v27 + 168 * v10 + 128) = v33;
  if (v33)
    *(_QWORD *)(v27 + 168 * v10 + 136) = *(_QWORD *)(a5 + 104);
  v34 = *(unsigned __int8 *)(a5 + 112);
  *(_BYTE *)(v27 + 168 * v10 + 144) = v34;
  if (v34)
    *(_QWORD *)(v27 + 168 * v10 + 152) = *(_QWORD *)(a5 + 120);
  *(_QWORD *)(v27 + 168 * v10 + 160) = *(_QWORD *)(a5 + 128);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
}

id *re::ecs2::PhysicsConstraintsComponent::PhysicsConstraintsComponent(id *this)
{
  uint64_t v2;

  ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0);
  *(_QWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_24ED5CA68;
  re::StringID::invalid((re::StringID *)(v2 + 32));
  this[6] = 0;
  this[7] = 0;
  *((_DWORD *)this + 18) = 0;
  this[8] = 0;
  this[15] = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 0;
  objc_initWeak(this + 16, 0);
  return this;
}

uint64_t re::ecs2::PhysicsConstraintsComponent::syncConstraintArrays(re::ecs2::PhysicsConstraintsComponent *this, char a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  re::ecs2::PhysicsSimulationService *v12;
  re::ecs2::PhysicsSimulationData *v13;
  _BOOL4 v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  float32x4_t *v19;
  uint32x4_t v20;
  float32x4_t *v21;
  uint32x4_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  re::Constraint **v29;
  _QWORD *WeakRetained;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  void (***v34)(_QWORD);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _BOOL8 v39;
  uint64_t v40;
  void *v41;
  uint64_t result;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  _QWORD v47[2];
  unint64_t v48;
  int v49;
  void *__dst;
  uint64_t v51;
  _BYTE v52[38];
  re::Constraint *v53[2];
  float32x4_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)((char *)this + 88);
  v4 = *((_QWORD *)this + 11);
  __dst = 0;
  v47[1] = 0;
  v48 = 0;
  v47[0] = 0;
  v49 = 0;
  if (v4)
  {
    v6 = *((_QWORD *)this + 13);
    v47[0] = v4;
    re::DynamicArray<float *>::setCapacity(v47, v6);
    ++v49;
    v7 = *((_QWORD *)this + 13);
    if (v7 >= v48)
    {
      re::DynamicArray<float *>::setCapacity(v47, *((_QWORD *)this + 13));
      v8 = v48;
      if (v48)
      {
        memmove(__dst, *((const void **)this + 15), 8 * v48);
        v8 = v48;
      }
      memcpy((char *)__dst + 8 * v8, (const void *)(*((_QWORD *)this + 15) + 8 * v8), 8 * v7 - 8 * v8);
    }
    else if (v7)
    {
      memmove(__dst, *((const void **)this + 15), 8 * v7);
    }
    v48 = v7;
  }
  *((_QWORD *)this + 13) = 0;
  ++*((_DWORD *)this + 28);
  v9 = *((_QWORD *)this + 2);
  if (!v9)
    goto LABEL_41;
  do
  {
    v10 = v9;
    v9 = *(_QWORD *)(v9 + 24);
  }
  while (v9);
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v10 + 16) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 56));
  v12 = (re::ecs2::PhysicsSimulationService *)re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v11);
  if (v12)
  {
    v13 = re::ecs2::PhysicsSimulationService::physicsSimulationForEntity(v12, *((const re::ecs2::Entity **)this + 2));
    v14 = v13 == 0;
    if (v13 && (a2 & 1) == 0)
    {
      if (*((_QWORD *)this + 8))
      {
        v15 = 0;
        do
        {
          v16 = *((_QWORD *)this + 10);
          if ((v15 & 0x80000000) != 0)
            goto LABEL_28;
          if (v15 >= v48)
            goto LABEL_28;
          v17 = (_QWORD *)*((_QWORD *)__dst + v15);
          if (!v17)
            goto LABEL_28;
          if (!re::StringID::operator==((_QWORD *)(v16 + 304 * v15 + 8), v17 + 3))
            goto LABEL_28;
          v18 = *(_DWORD *)(v16 + 304 * v15);
          if (v18 != (*(unsigned int (**)(_QWORD *))(*v17 + 32))(v17))
            goto LABEL_28;
          v19 = (float32x4_t *)(v16 + 304 * v15);
          v43 = v19[5];
          v45 = v19[4];
          (*(void (**)(re::Constraint **__return_ptr, _QWORD *))(*v17 + 40))(v53, v17);
          v20 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v45, *(float32x4_t *)v53));
          v20.i32[3] = v20.i32[2];
          if ((vmaxvq_u32(v20) & 0x80000000) != 0
            || (vmaxvq_u32((uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v43, v54))) & 0x80000000) != 0
            || (v21 = (float32x4_t *)(v16 + 304 * v15),
                v44 = v21[10],
                v46 = v21[9],
                (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*v17 + 48))(v52, v17),
                v22 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v46, *(float32x4_t *)v52)),
                v22.i32[3] = v22.i32[2],
                (vmaxvq_u32(v22) & 0x80000000) != 0)
            || (vmaxvq_u32((uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v44, *(float32x4_t *)&v52[16]))) & 0x80000000) != 0)
          {
LABEL_28:
            v53[0] = 0;
            v24 = *((_QWORD *)this + 2);
            do
            {
              v25 = v24;
              v24 = *(_QWORD *)(v24 + 24);
            }
            while (v24);
            v53[0] = re::ecs2::PhysicsConstraint::makeJoint((re::ecs2::PhysicsConstraint *)(v16 + 304 * v15), *(re::ecs2::Scene **)(v25 + 16));
            re::DynamicArray<re::TransitionCondition *>::add(v5, v53);
            if (v53[0])
            {
              v26 = *((_QWORD *)v13 + 23);
              v27 = *((_QWORD *)v13 + 21);
              if (v27)
              {
                v28 = 8 * v27;
                v29 = (re::Constraint **)*((_QWORD *)v13 + 23);
                while (*v29 != v53[0])
                {
                  ++v29;
                  v28 -= 8;
                  if (!v28)
                  {
                    v29 = (re::Constraint **)(v26 + 8 * v27);
                    break;
                  }
                }
              }
              else
              {
                v29 = (re::Constraint **)*((_QWORD *)v13 + 23);
              }
              if (v27 == ((uint64_t)v29 - v26) >> 3)
                re::PhysicsJointCollection::add((re::ecs2::PhysicsSimulationData *)((char *)v13 + 136), v53[0]);
            }
          }
          else
          {
            v23 = v48;
            if (v48 <= v15)
            {
              v51 = 0;
              v56 = 0u;
              v57 = 0u;
              v54 = 0u;
              v55 = 0u;
              *(_OWORD *)v53 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v52 = 136315906;
              *(_QWORD *)&v52[4] = "operator[]";
              *(_WORD *)&v52[12] = 1024;
              *(_DWORD *)&v52[14] = 789;
              *(_WORD *)&v52[18] = 2048;
              *(_QWORD *)&v52[20] = v15;
              *(_WORD *)&v52[28] = 2048;
              *(_QWORD *)&v52[30] = v23;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_63:
              v51 = 0;
              v56 = 0u;
              v57 = 0u;
              v54 = 0u;
              v55 = 0u;
              *(_OWORD *)v53 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v52 = 136315906;
              *(_QWORD *)&v52[4] = "operator[]";
              *(_WORD *)&v52[12] = 1024;
              *(_DWORD *)&v52[14] = 789;
              *(_WORD *)&v52[18] = 2048;
              *(_QWORD *)&v52[20] = v15;
              *(_WORD *)&v52[28] = 2048;
              *(_QWORD *)&v52[30] = v23;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            re::DynamicArray<re::TransitionCondition *>::add(v5, (_QWORD *)__dst + v15);
            v23 = v48;
            if (v48 <= v15)
              goto LABEL_63;
            *((_QWORD *)__dst + v15) = 0;
          }
          ++v15;
        }
        while (*((_QWORD *)this + 8) > v15);
      }
      v14 = 0;
    }
  }
  else
  {
LABEL_41:
    v13 = 0;
    v14 = 1;
  }
  WeakRetained = objc_loadWeakRetained((id *)this + 16);
  if (WeakRetained)
  {
    v31 = WeakRetained;

    v32 = v48;
    if (v48)
    {
      v33 = 0;
      do
      {
        v34 = (void (***)(_QWORD))*((_QWORD *)__dst + v33);
        if (v34)
        {
          v35 = v31[22];
          v36 = v31[20];
          if (v36)
          {
            v37 = 8 * v36;
            v38 = (_QWORD *)v31[22];
            while ((void (***)(_QWORD))*v38 != v34)
            {
              ++v38;
              v37 -= 8;
              if (!v37)
              {
                v38 = (_QWORD *)(v35 + 8 * v36);
                break;
              }
            }
          }
          else
          {
            v38 = (_QWORD *)v31[22];
          }
          if (v36 != ((uint64_t)v38 - v35) >> 3)
          {
            v53[0] = *((re::Constraint **)__dst + v33);
            v39 = re::DynamicArray<re::Allocator const*>::removeStable(v31 + 18, v53);
            v40 = re::globalAllocators((re *)v39)[2];
            (**v34)(v34);
            (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v40 + 40))(v40, v34);
            v32 = v48;
          }
        }
        ++v33;
      }
      while (v32 > v33);
    }
  }
  if (v14)
    v41 = 0;
  else
    v41 = (char *)v13 + 8;
  objc_storeWeak((id *)this + 16, v41);
  *((_BYTE *)this + 25) = 0;
  result = v47[0];
  if (v47[0])
  {
    if (__dst)
      return (*(uint64_t (**)(void))(*(_QWORD *)v47[0] + 40))();
  }
  return result;
}

void *re::ecs2::PhysicsConstraintsComponent::addOrReplacePhysicsConstraint(re::ecs2::PhysicsConstraintsComponent *this, const re::ecs2::PhysicsConstraint *a2, unint64_t a3)
{
  uint64_t *v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void *result;
  re::Constraint *v20;
  const re::ecs2::Entity *v21;
  const re::ecs2::Entity *v22;
  const re::ecs2::Entity *v23;
  uint64_t v24;
  re::ecs2::PhysicsSimulationService *v25;
  re::ecs2::PhysicsSimulationData *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v5 = (uint64_t *)((char *)a2 + 8);
  v6 = *((_QWORD *)this + 8);
  if (!v6)
    goto LABEL_12;
  v8 = 0;
  v9 = *((_QWORD *)this + 10);
  v10 = v9;
  do
  {
    if (re::StringID::operator==((_QWORD *)(v10 + 8), v5))
    {
      if (v6 > v8)
      {
        *(_DWORD *)v10 = *(_DWORD *)a2;
        re::StringID::operator=((unint64_t *)(v10 + 8), v5);
        *(_BYTE *)(v10 + 24) = *((_BYTE *)a2 + 24);
        re::ecs2::EntityHandle::operator=((id *)(v10 + 32), (id *)a2 + 4);
        v35 = *((_OWORD *)a2 + 5);
        *(_OWORD *)(v10 + 64) = *((_OWORD *)a2 + 4);
        *(_OWORD *)(v10 + 80) = v35;
        re::StringID::operator=((unint64_t *)(v10 + 96), (uint64_t *)a2 + 12);
        re::ecs2::EntityHandle::operator=((id *)(v10 + 112), (id *)a2 + 14);
        *(_OWORD *)(v10 + 144) = *((_OWORD *)a2 + 9);
        v36 = *((_OWORD *)a2 + 10);
        v37 = *((_OWORD *)a2 + 11);
        v38 = *((_OWORD *)a2 + 13);
        *(_OWORD *)(v10 + 192) = *((_OWORD *)a2 + 12);
        *(_OWORD *)(v10 + 208) = v38;
        *(_OWORD *)(v10 + 160) = v36;
        *(_OWORD *)(v10 + 176) = v37;
        v39 = *((_OWORD *)a2 + 14);
        v40 = *((_OWORD *)a2 + 15);
        v41 = *((_OWORD *)a2 + 17);
        *(_OWORD *)(v10 + 256) = *((_OWORD *)a2 + 16);
        *(_OWORD *)(v10 + 272) = v41;
        *(_OWORD *)(v10 + 224) = v39;
        *(_OWORD *)(v10 + 240) = v40;
        result = re::StringID::operator=((unint64_t *)(v10 + 288), (uint64_t *)a2 + 36);
        goto LABEL_17;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_19;
    }
    ++v8;
    v10 += 304;
  }
  while (v6 != v8);
  if (v6 > a3)
  {
    v11 = v9 + 304 * a3;
    *(_DWORD *)v11 = *(_DWORD *)a2;
    re::StringID::operator=((unint64_t *)(v11 + 8), v5);
    *(_BYTE *)(v11 + 24) = *((_BYTE *)a2 + 24);
    re::ecs2::EntityHandle::operator=((id *)(v11 + 32), (id *)a2 + 4);
    v12 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(v11 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(v11 + 80) = v12;
    re::StringID::operator=((unint64_t *)(v11 + 96), (uint64_t *)a2 + 12);
    re::ecs2::EntityHandle::operator=((id *)(v11 + 112), (id *)a2 + 14);
    *(_OWORD *)(v11 + 144) = *((_OWORD *)a2 + 9);
    v13 = *((_OWORD *)a2 + 10);
    v14 = *((_OWORD *)a2 + 11);
    v15 = *((_OWORD *)a2 + 13);
    *(_OWORD *)(v11 + 192) = *((_OWORD *)a2 + 12);
    *(_OWORD *)(v11 + 208) = v15;
    *(_OWORD *)(v11 + 160) = v13;
    *(_OWORD *)(v11 + 176) = v14;
    v16 = *((_OWORD *)a2 + 14);
    v17 = *((_OWORD *)a2 + 15);
    v18 = *((_OWORD *)a2 + 17);
    *(_OWORD *)(v11 + 256) = *((_OWORD *)a2 + 16);
    *(_OWORD *)(v11 + 272) = v18;
    *(_OWORD *)(v11 + 224) = v16;
    *(_OWORD *)(v11 + 240) = v17;
    result = re::StringID::operator=((unint64_t *)(v11 + 288), (uint64_t *)a2 + 36);
    if (*((_QWORD *)this + 13) > a3)
    {
      v20 = *(re::Constraint **)(*((_QWORD *)this + 15) + 8 * a3);
      if (v20)
      {
        v21 = *(const re::ecs2::Entity **)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(**((_QWORD **)v20 + 5)
                                                                                           + 16))(*((_QWORD **)v20 + 5))
                                                     + 72)
                                         + 40);
        v22 = v21;
        do
        {
          v23 = v22;
          v22 = (const re::ecs2::Entity *)*((_QWORD *)v22 + 3);
        }
        while (v22);
        v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v23 + 2) + 56) + 32))(*(_QWORD *)(*((_QWORD *)v23 + 2) + 56));
        v25 = (re::ecs2::PhysicsSimulationService *)re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v24);
        v26 = re::ecs2::PhysicsSimulationService::physicsSimulationForEntity(v25, v21);
        if (*((_QWORD *)this + 13) > a3)
        {
          *(_QWORD *)(*((_QWORD *)this + 15) + 8 * a3) = 0;
          result = re::PhysicsSimulation::addConstraintToDelete(v26, v20);
          goto LABEL_17;
        }
LABEL_19:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
  }
  else
  {
LABEL_12:
    if (v6 >= *((_QWORD *)this + 7))
    {
      re::DynamicArray<re::ecs2::PhysicsConstraint>::growCapacity((_QWORD *)this + 6, v6 + 1);
      v6 = *((_QWORD *)this + 8);
    }
    v27 = *((_QWORD *)this + 10) + 304 * v6;
    *(_DWORD *)v27 = *(_DWORD *)a2;
    re::StringID::StringID((re::StringID *)(v27 + 8), (const StringID *)v5);
    *(_BYTE *)(v27 + 24) = *((_BYTE *)a2 + 24);
    re::ecs2::EntityHandle::EntityHandle((id *)(v27 + 32), (const re::ecs2::PhysicsConstraint *)((char *)a2 + 32));
    v28 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(v27 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(v27 + 80) = v28;
    re::StringID::StringID((re::StringID *)(v27 + 96), (const StringID *)a2 + 6);
    re::ecs2::EntityHandle::EntityHandle((id *)(v27 + 112), (const re::ecs2::PhysicsConstraint *)((char *)a2 + 112));
    *(_OWORD *)(v27 + 144) = *((_OWORD *)a2 + 9);
    v29 = *((_OWORD *)a2 + 10);
    v30 = *((_OWORD *)a2 + 11);
    v31 = *((_OWORD *)a2 + 13);
    *(_OWORD *)(v27 + 192) = *((_OWORD *)a2 + 12);
    *(_OWORD *)(v27 + 208) = v31;
    *(_OWORD *)(v27 + 160) = v29;
    *(_OWORD *)(v27 + 176) = v30;
    v32 = *((_OWORD *)a2 + 14);
    v33 = *((_OWORD *)a2 + 15);
    v34 = *((_OWORD *)a2 + 17);
    *(_OWORD *)(v27 + 256) = *((_OWORD *)a2 + 16);
    *(_OWORD *)(v27 + 272) = v34;
    *(_OWORD *)(v27 + 224) = v32;
    *(_OWORD *)(v27 + 240) = v33;
    result = re::StringID::StringID((re::StringID *)(v27 + 288), (const StringID *)a2 + 18);
    ++*((_QWORD *)this + 8);
    ++*((_DWORD *)this + 18);
  }
LABEL_17:
  *((_BYTE *)this + 25) = 1;
  return result;
}

re::ecs2::PhysicsSimulationData *re::ecs2::PhysicsSimulationService::physicsSimulationForEntity(re::ecs2::PhysicsSimulationService *this, const re::ecs2::Entity *a2)
{
  const re::ecs2::Entity *v4;
  const re::ecs2::Entity *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  re::ecs2::PhysicsSimulationData *result;
  uint64_t v10[2];

  v4 = a2;
  do
  {
    v5 = v4;
    v4 = (const re::ecs2::Entity *)*((_QWORD *)v4 + 3);
  }
  while (v4);
  v6 = *((_QWORD *)v5 + 2);
  v7 = (*(uint64_t (**)(re::ecs2::PhysicsSimulationService *))(*(_QWORD *)this + 24))(this);
  v8 = (*(uint64_t (**)(re::ecs2::PhysicsSimulationService *, uint64_t))(*(_QWORD *)this + 40))(this, v6);
  v10[0] = v7;
  v10[1] = v8;
  result = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v10, (uint64_t)a2);
  if (result)
    return (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(result);
  return result;
}

void re::ecs2::PhysicsConstraintsComponent::removePhysicsConstraint(re::ecs2::PhysicsConstraintsComponent *this, const re::StringID *a2)
{
  uint64_t v2;
  unint64_t v5;
  _QWORD *i;

  v2 = *((_QWORD *)this + 8);
  if (v2)
  {
    v5 = 0;
    for (i = (_QWORD *)(*((_QWORD *)this + 10) + 8); !re::StringID::operator==(i, a2); i += 38)
    {
      if (v2 == ++v5)
        return;
    }
    re::DynamicArray<re::ecs2::PhysicsConstraint>::removeAt((uint64_t)this + 48, v5);
    if (v5 < *((_QWORD *)this + 13))
      re::DynamicArray<re::internal::AnimationCompositionChainBase *>::removeAt((uint64_t)this + 88, v5);
    *((_BYTE *)this + 25) = 1;
  }
}

void re::DynamicArray<re::ecs2::PhysicsConstraint>::removeAt(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _OWORD v29[5];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 <= a2)
  {
    memset(v29, 0, sizeof(v29));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = v4 + 304 * v2;
    v6 = v5 - 304;
    v7 = v4 + 304 * a2;
    *(_DWORD *)v7 = *(_DWORD *)(v5 - 304);
    v8 = *(_QWORD *)(v5 - 296);
    v9 = *(_QWORD *)(v5 - 288);
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = &str_110;
    v10 = *(_QWORD *)(v7 + 16);
    v11 = v8 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v7 + 8) & 1;
    *(_QWORD *)(v7 + 16) = v9;
    *(_QWORD *)&v29[0] = v11;
    *((_QWORD *)&v29[0] + 1) = v10;
    *(_QWORD *)(v7 + 8) = v8;
    re::StringID::destroyString((re::StringID *)v29);
    *(_BYTE *)(v7 + 24) = *(_BYTE *)(v5 - 280);
    re::ecs2::EntityHandle::operator=((id *)(v7 + 32), v5 - 272);
    v12 = *(_QWORD *)(v5 - 208);
    v13 = *(_QWORD *)(v5 - 200);
    *(_QWORD *)(v5 - 208) = 0;
    *(_QWORD *)(v5 - 200) = &str_110;
    v14 = *(_QWORD *)(v7 + 104);
    v15 = v12 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v7 + 96) & 1;
    v16 = *(_OWORD *)(v5 - 224);
    *(_OWORD *)(v7 + 64) = *(_OWORD *)(v5 - 240);
    *(_OWORD *)(v7 + 80) = v16;
    *(_QWORD *)(v7 + 104) = v13;
    *(_QWORD *)&v29[0] = v15;
    *((_QWORD *)&v29[0] + 1) = v14;
    *(_QWORD *)(v7 + 96) = v12;
    re::StringID::destroyString((re::StringID *)v29);
    re::ecs2::EntityHandle::operator=((id *)(v7 + 112), v5 - 192);
    *(_OWORD *)(v7 + 144) = *(_OWORD *)(v5 - 160);
    v17 = *(_OWORD *)(v5 - 144);
    v18 = *(_OWORD *)(v5 - 128);
    v19 = *(_OWORD *)(v5 - 96);
    *(_OWORD *)(v7 + 192) = *(_OWORD *)(v5 - 112);
    *(_OWORD *)(v7 + 208) = v19;
    *(_OWORD *)(v7 + 160) = v17;
    *(_OWORD *)(v7 + 176) = v18;
    v20 = *(_OWORD *)(v5 - 80);
    v21 = *(_OWORD *)(v5 - 64);
    v22 = *(_OWORD *)(v5 - 48);
    v23 = *(_OWORD *)(v5 - 32);
    v24 = *(_QWORD *)(v5 - 16);
    v25 = *(_QWORD *)(v5 - 8);
    *(_QWORD *)(v5 - 16) = 0;
    *(_QWORD *)(v5 - 8) = &str_110;
    v26 = *(_QWORD *)(v7 + 296);
    v27 = v24 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v7 + 288) & 1;
    *(_OWORD *)(v7 + 256) = v22;
    *(_OWORD *)(v7 + 272) = v23;
    *(_OWORD *)(v7 + 224) = v20;
    *(_OWORD *)(v7 + 240) = v21;
    *(_QWORD *)(v7 + 296) = v25;
    *(_QWORD *)&v29[0] = v27;
    *((_QWORD *)&v29[0] + 1) = v26;
    *(_QWORD *)(v7 + 288) = v24;
    re::StringID::destroyString((re::StringID *)v29);
    v2 = *(_QWORD *)(a1 + 16);
  }
  v28 = *(_QWORD *)(a1 + 32) + 304 * v2;
  re::StringID::destroyString((re::StringID *)(v28 - 16));
  re::ecs2::EntityHandle::reset((id *)(v28 - 192));
  objc_destroyWeak((id *)(v28 - 192));
  *(_QWORD *)(v28 - 192) = 0;
  re::StringID::destroyString((re::StringID *)(v28 - 208));
  re::ecs2::EntityHandle::reset((id *)(v28 - 272));
  objc_destroyWeak((id *)(v28 - 272));
  *(_QWORD *)(v28 - 272) = 0;
  re::StringID::destroyString((re::StringID *)(v28 - 296));
  --*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
}

void re::ecs2::PhysicsConstraintsComponent::removePhysicsConstraintLeaveJoint(re::ecs2::PhysicsConstraintsComponent *this, const re::StringID *a2)
{
  uint64_t v2;
  unint64_t v5;
  _QWORD *i;

  v2 = *((_QWORD *)this + 8);
  if (v2)
  {
    v5 = 0;
    for (i = (_QWORD *)(*((_QWORD *)this + 10) + 8); !re::StringID::operator==(i, a2); i += 38)
    {
      if (v2 == ++v5)
        return;
    }
    re::DynamicArray<re::ecs2::PhysicsConstraint>::removeAt((uint64_t)this + 48, v5);
  }
}

_QWORD *re::ecs2::PhysicsConstraintsComponent::deferDeleteConstraint(re::ecs2::PhysicsConstraintsComponent *this, re::Constraint *a2)
{
  const re::ecs2::Entity *v2;
  const re::ecs2::Entity *v3;
  const re::ecs2::Entity *v4;
  uint64_t v5;
  re::ecs2::PhysicsSimulationService *v6;
  re::ecs2::PhysicsSimulationData *v7;
  re::Constraint *v9;

  v9 = a2;
  re::DynamicArray<unsigned long long>::remove((uint64_t)this + 88, &v9);
  v2 = *(const re::ecs2::Entity **)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)v9 + 5) + 16))(*((_QWORD *)v9 + 5))
                                              + 72)
                                  + 40);
  v3 = v2;
  do
  {
    v4 = v3;
    v3 = (const re::ecs2::Entity *)*((_QWORD *)v3 + 3);
  }
  while (v3);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v4 + 2) + 56) + 32))(*(_QWORD *)(*((_QWORD *)v4 + 2) + 56));
  v6 = (re::ecs2::PhysicsSimulationService *)re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v5);
  v7 = re::ecs2::PhysicsSimulationService::physicsSimulationForEntity(v6, v2);
  return re::PhysicsSimulation::addConstraintToDelete(v7, v9);
}

unint64_t re::ecs2::PhysicsConstraintsComponent::pinNameA(re::ecs2::PhysicsConstraintsComponent *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *((_QWORD *)this + 8);
  if (a2 >= v2 - 1)
    v3 = v2 - 1;
  else
    v3 = a2;
  if (v2 <= v3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((_QWORD *)this + 10) + 304 * v3 + 96;
}

unint64_t *re::ecs2::PhysicsConstraintsComponent::setPinNameA(re::ecs2::PhysicsConstraintsComponent *this, unint64_t a2, const re::StringID *a3)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *((_QWORD *)this + 8);
  if (a2 >= v3 - 1)
    v4 = v3 - 1;
  else
    v4 = a2;
  if (v3 <= v4)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return re::StringID::operator=((unint64_t *)(*((_QWORD *)this + 10) + 304 * v4 + 96), (uint64_t *)a3);
}

unint64_t re::ecs2::PhysicsConstraintsComponent::pinNameB(re::ecs2::PhysicsConstraintsComponent *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *((_QWORD *)this + 8);
  if (a2 >= v2 - 1)
    v3 = v2 - 1;
  else
    v3 = a2;
  if (v2 <= v3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((_QWORD *)this + 10) + 304 * v3 + 288;
}

unint64_t *re::ecs2::PhysicsConstraintsComponent::setPinNameB(re::ecs2::PhysicsConstraintsComponent *this, unint64_t a2, const re::StringID *a3)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *((_QWORD *)this + 8);
  if (a2 >= v3 - 1)
    v4 = v3 - 1;
  else
    v4 = a2;
  if (v3 <= v4)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return re::StringID::operator=((unint64_t *)(*((_QWORD *)this + 10) + 304 * v4 + 288), (uint64_t *)a3);
}

_QWORD *re::ecs2::PhysicsConstraintsComponent::setLinearLimits(_QWORD *result, unint64_t a2, uint64_t a3, double a4)
{
  uint64_t v5;
  unsigned int v7;
  int8x8_t v8;
  _QWORD *v9;
  _OWORD v10[5];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (result[8] <= a2)
  {
    memset(v10, 0, sizeof(v10));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5 = result[10];
  if (fabsf(*(float *)&a4) == INFINITY || *((float *)&a4 + 1) == INFINITY)
    v7 = -1;
  else
    v7 = 0;
  v8 = vbsl_s8((int8x8_t)vdup_n_s32(v7), (int8x8_t)0xBF8000003F800000, *(int8x8_t *)&a4);
  switch((_DWORD)a3)
  {
    case 2:
      *(int8x8_t *)(v5 + 304 * a2 + 256) = v8;
      break;
    case 1:
      *(int8x8_t *)(v5 + 304 * a2 + 248) = v8;
      break;
    case 0:
      *(int8x8_t *)(v5 + 304 * a2 + 240) = v8;
      break;
  }
  if (result[13] > a2)
  {
    v9 = *(_QWORD **)(result[15] + 8 * a2);
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 32))(v9);
    if ((_DWORD)result == 6)
    {
      *(int8x8_t *)&v10[0] = v8;
      return (_QWORD *)re::Generic6DOFConstraint::setLinearLimit((uint64_t)v9, a3, v10);
    }
    else if ((_DWORD)result == 4)
    {
      v9[7] = v8;
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 56))(v9);
    }
  }
  return result;
}

__n64 re::ecs2::PhysicsConstraintsComponent::linearLimits(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v3;
  __n64 result;
  uint64_t v5;
  unsigned __int32 *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(a1 + 64) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v3 = *(_QWORD *)(a1 + 80);
  if (a3 == 2)
  {
    v8 = v3 + 304 * a2;
    result.n64_u32[0] = *(_DWORD *)(v8 + 256);
    v6 = (unsigned __int32 *)(v8 + 260);
  }
  else if (a3 == 1)
  {
    v7 = v3 + 304 * a2;
    result.n64_u32[0] = *(_DWORD *)(v7 + 248);
    v6 = (unsigned __int32 *)(v7 + 252);
  }
  else
  {
    result.n64_u64[0] = 0;
    if (a3)
      return result;
    v5 = v3 + 304 * a2;
    result.n64_u32[0] = *(_DWORD *)(v5 + 240);
    v6 = (unsigned __int32 *)(v5 + 244);
  }
  result.n64_u32[1] = *v6;
  return result;
}

_QWORD *re::ecs2::PhysicsConstraintsComponent::setAngularLimits(_QWORD *result, unint64_t a2, uint64_t a3, double a4)
{
  uint64_t v5;
  unsigned int v7;
  int8x8_t v8;
  int8x8_t *v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  int32x2_t v19;
  _OWORD v20[5];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (result[8] <= a2)
  {
    memset(v20, 0, sizeof(v20));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5 = result[10];
  if (fabsf(*(float *)&a4) == INFINITY || *((float *)&a4 + 1) == INFINITY)
    v7 = -1;
  else
    v7 = 0;
  v8 = vbsl_s8((int8x8_t)vdup_n_s32(v7), (int8x8_t)0xBF8000003F800000, *(int8x8_t *)&a4);
  switch((_DWORD)a3)
  {
    case 2:
      *(int8x8_t *)(v5 + 304 * a2 + 280) = v8;
      break;
    case 1:
      *(int8x8_t *)(v5 + 304 * a2 + 272) = v8;
      break;
    case 0:
      *(int8x8_t *)(v5 + 304 * a2 + 264) = v8;
      break;
  }
  if (result[13] > a2)
  {
    v19 = (int32x2_t)v8;
    v9 = *(int8x8_t **)(result[15] + 8 * a2);
    result = (_QWORD *)(*(uint64_t (**)(int8x8_t *))(*(_QWORD *)v9 + 32))(v9);
    if ((_DWORD)result == 6)
    {
      *(int32x2_t *)&v20[0] = v19;
      return (_QWORD *)re::Generic6DOFConstraint::setAngularLimit((uint64_t)v9, a3, v20);
    }
    else
    {
      v10.i32[1] = v19.i32[1];
      if ((_DWORD)result == 3)
      {
        return (_QWORD *)re::HingeJoint::setAngularLimit((uint64_t)v9, *(double *)&v19, *(float *)&v19.i32[1]);
      }
      else if ((_DWORD)result == 2)
      {
        if ((_DWORD)a3 == 1)
        {
          v11.i32[0] = vdup_lane_s32(v19, 1).u32[0];
          v11.i32[1] = v9[7].i32[1];
          v12 = (float32x2_t)vdup_n_s32(0x40490FDBu);
          v13 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v11, v12), (int8x8_t)v12, (int8x8_t)v11);
        }
        else
        {
          v10.i32[0] = v9[7].i32[0];
          v14 = (float32x2_t)vdup_n_s32(0x40490FDBu);
          v13 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v10, v14), (int8x8_t)v14, (int8x8_t)v10);
        }
        __asm { FMOV            V1.2S, #-1.0 }
        v9[7] = vbsl_s8((int8x8_t)vcgt_f32(_D1, v13), (int8x8_t)_D1, (int8x8_t)v13);
        return (_QWORD *)(*(uint64_t (**)(int8x8_t *))(*(_QWORD *)v9 + 56))(v9);
      }
    }
  }
  return result;
}

uint64_t re::ecs2::PhysicsConstraintsComponent::collisionEnabled(re::ecs2::PhysicsConstraintsComponent *this, unint64_t a2)
{
  if (*((_QWORD *)this + 8) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned __int8 *)(*((_QWORD *)this + 10) + 304 * a2 + 24);
}

uint64_t re::ecs2::PhysicsConstraintsComponent::setCollisionEnabled(uint64_t this, unint64_t a2, char a3)
{
  if (*(_QWORD *)(this + 64) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_BYTE *)(*(_QWORD *)(this + 80) + 304 * a2 + 24) = a3;
  return this;
}

uint64_t *re::ecs2::allocInfo_PhysicsConstraintsComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410A770);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410A770))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410A7D8, 0);
    *(uint64_t *)((char *)&qword_25410A7E8 + 6) = 0;
    qword_25410A7E8 = 0;
    qword_25410A7F8 = 0;
    qword_25410A800 = 0xFFFFFFFFLL;
    qword_25410A7D8 = (uint64_t)&off_24ED7DAA8;
    qword_25410A808 = (uint64_t)"PhysicsConstraintsComponent";
    dword_25410A810 = 0;
    unk_25410A818 = 0u;
    unk_25410A828 = 0u;
    unk_25410A838 = 0u;
    qword_25410A848 = 0;
    __cxa_guard_release(&qword_25410A770);
  }
  return &qword_25410A7D8;
}

void re::ecs2::initInfo_PhysicsConstraintsComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  re::IntrospectionRegistry *v14;
  const re::IntrospectionBase *v15;
  const char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29[2];
  __int128 v30;
  unint64_t v31;
  _QWORD v32[60];

  v31 = 0xC606B99E7D5E985CLL;
  v32[0] = "PhysicsConstraintsComponent";
  re::StringID::destroyString((re::StringID *)&v31);
  *((_OWORD *)this + 2) = v26;
  v4 = atomic_load((unsigned __int8 *)&qword_25410A768);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410A768);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410A780 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = atomic_load((unsigned __int8 *)&qword_25410A778);
      if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_25410A778))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410A798, 0);
        *(uint64_t *)((char *)&qword_25410A7A8 + 6) = 0;
        qword_25410A7A8 = 0;
        *(_QWORD *)&xmmword_25410A7B8 = 0;
        *((_QWORD *)&xmmword_25410A7B8 + 1) = 0xFFFFFFFFLL;
        qword_25410A798 = (uint64_t)&off_24ED1FA08;
        qword_25410A7D0 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_25410A7C8);
        qword_25410A798 = (uint64_t)&off_24ED5CAE8;
        __cxa_guard_release(&qword_25410A778);
      }
      if ((_MergedGlobals_186 & 1) == 0)
      {
        v11 = re::ecs2::introspect_PhysicsConstraint((re::IntrospectionBase **)1);
        if ((_MergedGlobals_186 & 1) == 0)
        {
          v12 = v11;
          _MergedGlobals_186 = 1;
          v13 = *(_DWORD *)(v11 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410A798, 0);
          qword_25410A7A8 = 0x2800000003;
          dword_25410A7B0 = v13;
          word_25410A7B4 = 0;
          *(_QWORD *)&xmmword_25410A7B8 = 0;
          *((_QWORD *)&xmmword_25410A7B8 + 1) = 0xFFFFFFFFLL;
          qword_25410A7C8 = v12;
          qword_25410A7D0 = 0;
          qword_25410A798 = (uint64_t)&off_24ED5CAE8;
          re::IntrospectionRegistry::add(v14, v15);
          re::getPrettyTypeName((re *)&qword_25410A798, (const re::IntrospectionBase *)&v31);
          if ((v32[0] & 1) != 0)
            v16 = (const char *)v32[1];
          else
            v16 = (char *)v32 + 1;
          if (v31 && (v32[0] & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v31 + 40))();
          v28 = *(_OWORD *)(v12 + 32);
          v17 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v29);
          if (v17)
          {
            v18 = *v17;
            *((_QWORD *)&v27 + 1) = v18;
          }
          else
          {
            v30 = v28;
            re::TypeBuilder::beginListType((uint64_t)&v31, v29, 1, 0x28uLL, 8uLL, &v30);
            re::TypeBuilder::setConstructor((uint64_t)&v31, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v31, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v31, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v31, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v31, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v31, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v31, v19);
          }
          xmmword_25410A7B8 = v27;
          re::StringID::destroyString((re::StringID *)v29);
        }
      }
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "m_constraints";
      *(_QWORD *)(v20 + 16) = &qword_25410A798;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x3000000001;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_25410A788 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::introspect_BOOL((re *)1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "m_dirty";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x1900000002;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_25410A790 = v24;
      __cxa_guard_release(&qword_25410A768);
    }
  }
  *((_QWORD *)this + 2) = 0x8800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_25410A780;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PhysicsConstraintsComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PhysicsConstraintsComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PhysicsConstraintsComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PhysicsConstraintsComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v25 = v26;
}

id *re::internal::defaultConstruct<re::ecs2::PhysicsConstraintsComponent>(int a1, int a2, id *this)
{
  return re::ecs2::PhysicsConstraintsComponent::PhysicsConstraintsComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::PhysicsConstraintsComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PhysicsConstraintsComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PhysicsConstraintsComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PhysicsConstraintsComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsConstraintsComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsConstraintsComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsConstraintsComponent>, this);
}

void re::ecs2::PhysicsConstraintsComponent::~PhysicsConstraintsComponent(id *this)
{
  re::ecs2::PhysicsConstraintsComponent::~PhysicsConstraintsComponent(this);
  JUMPOUT(0x2276933B8);
}

{
  id v2;

  *this = &off_24ED5CA68;
  objc_destroyWeak(this + 16);
  this[16] = 0;
  v2 = this[11];
  if (v2)
  {
    if (this[15])
      (*(void (**)(id))(*(_QWORD *)v2 + 40))(v2);
    this[15] = 0;
    this[12] = 0;
    this[13] = 0;
    this[11] = 0;
    ++*((_DWORD *)this + 28);
  }
  re::DynamicArray<re::ecs2::PhysicsConstraint>::deinit((uint64_t)(this + 6));
  re::StringID::destroyString((re::StringID *)(this + 4));
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

_QWORD *re::DynamicArray<re::ecs2::PhysicsConstraint>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::ecs2::PhysicsConstraint>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::PhysicsConstraint>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::ecs2::PhysicsConstraint>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::PhysicsConstraint>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x130uLL))
        {
          v2 = 304 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 304 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 304, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 304 * v9;
        v11 = (uint64_t)(v7 + 14);
        v12 = v8 + 112;
        do
        {
          *(_DWORD *)(v11 - 112) = *(_DWORD *)(v12 - 112);
          v13 = *(_QWORD *)(v12 - 104);
          *(_QWORD *)(v11 - 104) = *(_QWORD *)(v11 - 104) & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v12 - 104) & 1;
          *(_QWORD *)(v11 - 104) = *(_QWORD *)(v12 - 104) & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
          *(_QWORD *)(v11 - 96) = *(_QWORD *)(v12 - 96);
          *(_QWORD *)(v12 - 96) = &str_110;
          *(_QWORD *)(v12 - 104) = 0;
          *(_BYTE *)(v11 - 88) = *(_BYTE *)(v12 - 88);
          re::ecs2::EntityHandle::EntityHandle(v11 - 80, v12 - 80);
          v14 = *(_OWORD *)(v12 - 32);
          *(_OWORD *)(v11 - 48) = *(_OWORD *)(v12 - 48);
          *(_OWORD *)(v11 - 32) = v14;
          v15 = *(_QWORD *)(v12 - 16);
          *(_QWORD *)(v11 - 16) = *(_QWORD *)(v11 - 16) & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v12 - 16) & 1;
          *(_QWORD *)(v11 - 16) = *(_QWORD *)(v12 - 16) & 0xFFFFFFFFFFFFFFFELL | v15 & 1;
          *(_QWORD *)(v11 - 8) = *(_QWORD *)(v12 - 8);
          *(_QWORD *)(v12 - 8) = &str_110;
          *(_QWORD *)(v12 - 16) = 0;
          re::ecs2::EntityHandle::EntityHandle(v11, v12);
          *(_OWORD *)(v11 + 32) = *(_OWORD *)(v12 + 32);
          v16 = *(_OWORD *)(v12 + 48);
          v17 = *(_OWORD *)(v12 + 64);
          v18 = *(_OWORD *)(v12 + 96);
          *(_OWORD *)(v11 + 80) = *(_OWORD *)(v12 + 80);
          *(_OWORD *)(v11 + 96) = v18;
          *(_OWORD *)(v11 + 48) = v16;
          *(_OWORD *)(v11 + 64) = v17;
          v19 = *(_OWORD *)(v12 + 112);
          v20 = *(_OWORD *)(v12 + 128);
          v21 = *(_OWORD *)(v12 + 160);
          *(_OWORD *)(v11 + 144) = *(_OWORD *)(v12 + 144);
          *(_OWORD *)(v11 + 160) = v21;
          *(_OWORD *)(v11 + 112) = v19;
          *(_OWORD *)(v11 + 128) = v20;
          v22 = *(_QWORD *)(v12 + 176);
          *(_QWORD *)(v11 + 176) = *(_QWORD *)(v11 + 176) & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v12 + 176) & 1;
          *(_QWORD *)(v11 + 176) = *(_QWORD *)(v12 + 176) & 0xFFFFFFFFFFFFFFFELL | v22 & 1;
          *(_QWORD *)(v11 + 184) = *(_QWORD *)(v12 + 184);
          *(_QWORD *)(v12 + 184) = &str_110;
          *(_QWORD *)(v12 + 176) = 0;
          re::StringID::destroyString((re::StringID *)(v12 + 176));
          re::ecs2::EntityHandle::reset((id *)v12);
          objc_destroyWeak((id *)v12);
          *(_QWORD *)v12 = 0;
          re::StringID::destroyString((re::StringID *)(v12 - 16));
          re::ecs2::EntityHandle::reset((id *)(v12 - 80));
          objc_destroyWeak((id *)(v12 - 80));
          *(_QWORD *)(v12 - 80) = 0;
          re::StringID::destroyString((re::StringID *)(v12 - 104));
          v11 += 304;
          v23 = v12 + 192;
          v12 += 304;
        }
        while (v23 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::PhysicsConstraint>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::PhysicsConstraint>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::PhysicsConstraint>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::PhysicsConstraint>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::PhysicsConstraint>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::PhysicsConstraint>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::ecs2::PhysicsConstraint>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::ecs2::PhysicsConstraint>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::PhysicsConstraint>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::ecs2::PhysicsConstraint>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::ecs2::PhysicsConstraint>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::ecs2::PhysicsConstraint>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::PhysicsConstraint>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;
  re::IntrospectionBase *v19;
  int v22;
  uint64_t v23;
  void *v24;
  char v25;
  id v26[4];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  void *v30;
  id v31[4];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  void *v42;

  re::ecs2::PhysicsConstraint::PhysicsConstraint((re::ecs2::PhysicsConstraint *)&v22);
  v7 = *(_QWORD *)(a4 + 16);
  if (v7 >= *(_QWORD *)(a4 + 8))
  {
    re::DynamicArray<re::ecs2::PhysicsConstraint>::growCapacity((_QWORD *)a4, v7 + 1);
    v7 = *(_QWORD *)(a4 + 16);
  }
  v8 = *(_QWORD *)(a4 + 32) + 304 * v7;
  *(_DWORD *)v8 = v22;
  v9 = v23;
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFFELL | v23 & 1;
  *(_QWORD *)(v8 + 8) = v23 & 0xFFFFFFFFFFFFFFFELL | v9 & 1;
  *(_QWORD *)(v8 + 16) = v24;
  v23 = 0;
  v24 = &str_110;
  *(_BYTE *)(v8 + 24) = v25;
  re::ecs2::EntityHandle::EntityHandle(v8 + 32, (uint64_t)v26);
  v10 = v28;
  *(_OWORD *)(v8 + 64) = v27;
  *(_OWORD *)(v8 + 80) = v10;
  v11 = v29;
  *(_QWORD *)(v8 + 96) = *(_QWORD *)(v8 + 96) & 0xFFFFFFFFFFFFFFFELL | v29 & 1;
  *(_QWORD *)(v8 + 96) = v29 & 0xFFFFFFFFFFFFFFFELL | v11 & 1;
  *(_QWORD *)(v8 + 104) = v30;
  v29 = 0;
  v30 = &str_110;
  re::ecs2::EntityHandle::EntityHandle(v8 + 112, (uint64_t)v31);
  *(_OWORD *)(v8 + 144) = v32;
  v12 = v33;
  v13 = v34;
  v14 = v36;
  *(_OWORD *)(v8 + 192) = v35;
  *(_OWORD *)(v8 + 208) = v14;
  *(_OWORD *)(v8 + 160) = v12;
  *(_OWORD *)(v8 + 176) = v13;
  v15 = v37;
  v16 = v38;
  v17 = v40;
  *(_OWORD *)(v8 + 256) = v39;
  *(_OWORD *)(v8 + 272) = v17;
  *(_OWORD *)(v8 + 224) = v15;
  *(_OWORD *)(v8 + 240) = v16;
  v18 = v41;
  *(_QWORD *)(v8 + 288) = *(_QWORD *)(v8 + 288) & 0xFFFFFFFFFFFFFFFELL | v41 & 1;
  *(_QWORD *)(v8 + 288) = v41 & 0xFFFFFFFFFFFFFFFELL | v18 & 1;
  *(_QWORD *)(v8 + 296) = v42;
  v41 = 0;
  v42 = &str_110;
  ++*(_QWORD *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::StringID::destroyString((re::StringID *)&v41);
  re::ecs2::EntityHandle::reset(v31);
  objc_destroyWeak(v31);
  v31[0] = 0;
  re::StringID::destroyString((re::StringID *)&v29);
  re::ecs2::EntityHandle::reset(v26);
  objc_destroyWeak(v26);
  v26[0] = 0;
  re::StringID::destroyString((re::StringID *)&v23);
  v19 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 304 * *(_QWORD *)(a4 + 16) - 304);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v19);
  return v19;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::PhysicsConstraint>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::PhysicsConstraint>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 304 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 304 * a3;
}

uint64_t re::DynamicArray<re::ecs2::PhysicsConstraint>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 0;
        v6 = 304 * v4;
        do
        {
          v7 = v3 + v5;
          re::StringID::destroyString((re::StringID *)(v3 + v5 + 288));
          re::ecs2::EntityHandle::reset((id *)(v3 + v5 + 112));
          objc_destroyWeak((id *)(v3 + v5 + 112));
          *(_QWORD *)(v7 + 112) = 0;
          re::StringID::destroyString((re::StringID *)(v3 + v5 + 96));
          re::ecs2::EntityHandle::reset((id *)(v3 + v5 + 32));
          objc_destroyWeak((id *)(v3 + v5 + 32));
          *(_QWORD *)(v7 + 32) = 0;
          re::StringID::destroyString((re::StringID *)(v3 + v5 + 8));
          v5 += 304;
        }
        while (v6 != v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::DynamicArray<re::ecs2::PhysicsConstraint>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  re::StringID *v9;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v7 = 304 * a2 + 288;
    v8 = a2;
    do
    {
      v9 = (re::StringID *)(*(_QWORD *)(a1 + 32) + v7);
      re::StringID::destroyString(v9);
      re::ecs2::EntityHandle::reset((id *)v9 - 22);
      objc_destroyWeak((id *)v9 - 22);
      *((_QWORD *)v9 - 22) = 0;
      re::StringID::destroyString((re::StringID *)((char *)v9 - 192));
      re::ecs2::EntityHandle::reset((id *)v9 - 32);
      objc_destroyWeak((id *)v9 - 32);
      *((_QWORD *)v9 - 32) = 0;
      re::StringID::destroyString((re::StringID *)((char *)v9 - 280));
      ++v8;
      v7 += 304;
    }
    while (v8 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ecs2::PhysicsConstraint>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 304 * v4;
      do
      {
        re::ecs2::PhysicsConstraint::PhysicsConstraint((re::ecs2::PhysicsConstraint *)(*(_QWORD *)(a1 + 32) + v6));
        v6 += 304;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::ecs2::PhysicsConstraint>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _anonymous_namespace_ *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _BYTE v17[32];
  _BYTE v18[8];
  uint64_t v19;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = 0;
      v10 = *(_QWORD *)(a1 + 32);
      v11 = 304 * v8;
      do
      {
        v12 = v10 + v9;
        re::StringID::destroyString((re::StringID *)(v10 + v9 + 288));
        re::ecs2::EntityHandle::reset((id *)(v10 + v9 + 112));
        objc_destroyWeak((id *)(v10 + v9 + 112));
        *(_QWORD *)(v12 + 112) = 0;
        re::StringID::destroyString((re::StringID *)(v10 + v9 + 96));
        re::ecs2::EntityHandle::reset((id *)(v10 + v9 + 32));
        objc_destroyWeak((id *)(v10 + v9 + 32));
        *(_QWORD *)(v12 + 32) = 0;
        re::StringID::destroyString((re::StringID *)(v10 + v9 + 8));
        v9 += 304;
      }
      while (v11 != v9);
    }
  }
  else
  {
    re::DynamicArray<re::ecs2::PhysicsConstraint>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::ecs2::PhysicsConstraint>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::ecs2::PhysicsConstraint>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v18);
    re::TypeInfo::TypeInfo((uint64_t)v17, (uint64_t)&v19);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14)
    {
      v15 = *(char **)(a1 + 32);
      v16 = 304 * v14;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v17, v15, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v17, (void **)v15, a3, 0);
        v15 += 304;
        v16 -= 304;
      }
      while (v16);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 304 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 304 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsConstraint>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void re::internal::defaultConstruct<re::ecs2::DirectParameterTextureEntry>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

void re::internal::defaultDestruct<re::ecs2::DirectParameterTextureEntry>(int a1, int a2, re::AssetHandle *this)
{
  re::AssetHandle::~AssetHandle(this);
}

_QWORD *re::internal::defaultConstructV2<re::ecs2::DirectParameterTextureEntry>(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

re::ecs2::DirectParameterBuffer *re::internal::defaultConstruct<re::ecs2::DirectParameterBuffer>(int a1, int a2, re::ecs2::DirectParameterBuffer *this)
{
  return re::ecs2::DirectParameterBuffer::DirectParameterBuffer(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::DirectParameterBuffer>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::DirectParameterBuffer>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void re::internal::defaultConstruct<re::ecs2::DirectParameterHandle>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
}

void re::internal::defaultDestruct<re::ecs2::DirectParameterHandle>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)a3)
  {

    *(_QWORD *)a3 = 0;
  }
}

_QWORD *re::internal::defaultConstructV2<re::ecs2::DirectParameterHandle>(_QWORD *result)
{
  *result = 0;
  return result;
}

void re::internal::defaultDestructV2<re::ecs2::DirectParameterHandle>(uint64_t a1)
{
  if (*(_QWORD *)a1)
  {

    *(_QWORD *)a1 = 0;
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::ecs2::DirectParameterHandle>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  unsigned __int8 v15;
  uint64_t *v16;
  unsigned __int8 v17;
  const re::IntrospectionBase *v18;
  unsigned __int8 v19;
  re::IntrospectionRegistry *v20;
  const re::IntrospectionBase *v21;
  const char *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned __int8 v31;
  uint64_t *v32;
  unsigned __int8 v33;
  const re::IntrospectionBase *v34;
  unsigned __int8 v35;
  int v36;
  re::IntrospectionRegistry *v37;
  const re::IntrospectionBase *v38;
  const char *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  re *v45;
  uint64_t *v46;
  const re::IntrospectionBase *v47;
  void *v48;
  uint64_t v49;
  uint64_t *v50;
  const re::IntrospectionBase *v51;
  void *v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  const char *v60;
  __int128 v61[2];

  v0 = atomic_load((unsigned __int8 *)&qword_25410A8E0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25410A8E0))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_25410A9B0);
    qword_25410A9B0 = (uint64_t)&off_24ED5CCA8;
    __cxa_guard_release(&qword_25410A8E0);
  }
  if ((byte_25410A852 & 1) == 0)
  {
    v1 = (uint64_t *)qword_25410A8A0;
    if (qword_25410A8A0)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_25410A898);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25410A898))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410AB20, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_25410AB30 = 0;
      *(_QWORD *)&xmmword_25410AB40 = 0;
      *((_QWORD *)&xmmword_25410AB40 + 1) = 0xFFFFFFFFLL;
      qword_25410AB20 = (uint64_t)&off_24ED7DAA8;
      qword_25410AB50 = (uint64_t)"DirectParameterHandle";
      dword_25410AB58 = 0;
      xmmword_25410AB60 = 0u;
      *(_OWORD *)&qword_25410AB70 = 0u;
      xmmword_25410AB80 = 0u;
      qword_25410AB90 = 0;
      __cxa_guard_release(&qword_25410A898);
    }
    qword_25410A8A0 = (uint64_t)&qword_25410AB20;
    *(_QWORD *)&v59 = 0xB22795DB5F39CFD0;
    *((_QWORD *)&v59 + 1) = "DirectParameterHandle";
    re::StringID::destroyString((re::StringID *)&v59);
    xmmword_25410AB40 = v54;
    v4 = atomic_load((unsigned __int8 *)&qword_25410A890);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_25410A890);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v15 = atomic_load((unsigned __int8 *)&qword_25410A8D8);
        if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_25410A8D8))
        {
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410A970, 0);
          *(uint64_t *)((char *)&qword_25410A980 + 6) = 0;
          qword_25410A980 = 0;
          *(_QWORD *)&xmmword_25410A990 = 0;
          *((_QWORD *)&xmmword_25410A990 + 1) = 0xFFFFFFFFLL;
          qword_25410A970 = (uint64_t)&off_24ED30800;
          qword_25410A9A8 = 0;
          re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_25410A9A0);
          __cxa_guard_release(&qword_25410A8D8);
        }
        if ((byte_25410A851 & 1) == 0)
        {
          byte_25410A851 = 1;
          v16 = (uint64_t *)qword_25410A880;
          if (!qword_25410A880)
          {
            v17 = atomic_load((unsigned __int8 *)&qword_25410A870);
            if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_25410A870))
            {
              ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410AAA8, 0);
              *(_QWORD *)(v25 + 22) = 0;
              qword_25410AAB8 = 0;
              *(_QWORD *)&xmmword_25410AAC8 = 0;
              *((_QWORD *)&xmmword_25410AAC8 + 1) = 0xFFFFFFFFLL;
              qword_25410AAA8 = (uint64_t)&off_24ED7DAA8;
              qword_25410AAD8 = (uint64_t)"DirectParameterBuffer";
              dword_25410AAE0 = 0;
              *(_OWORD *)(v25 + 64) = 0u;
              *(_OWORD *)(v25 + 80) = 0u;
              *(_OWORD *)(v25 + 96) = 0u;
              qword_25410AB18 = 0;
              __cxa_guard_release(&qword_25410A870);
            }
            qword_25410A880 = (uint64_t)&qword_25410AAA8;
            *(_QWORD *)&v59 = 0xB22795DB4CEC1C00;
            *((_QWORD *)&v59 + 1) = "DirectParameterBuffer";
            re::StringID::destroyString((re::StringID *)&v59);
            xmmword_25410AAC8 = v55;
            v19 = atomic_load((unsigned __int8 *)&qword_25410A878);
            if ((v19 & 1) == 0)
            {
              v26 = (re *)__cxa_guard_acquire(&qword_25410A878);
              if ((_DWORD)v26)
              {
                v27 = re::introspectionAllocator(v26);
                v28 = re::introspect_DirectResourceId((re::IntrospectionBase **)1);
                v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 72, 8);
                *(_DWORD *)v29 = 1;
                *(_QWORD *)(v29 + 8) = "resourceID";
                *(_QWORD *)(v29 + 16) = v28;
                *(_QWORD *)(v29 + 24) = 0;
                *(_QWORD *)(v29 + 32) = 0x1800000001;
                *(_DWORD *)(v29 + 40) = 0;
                *(_QWORD *)(v29 + 48) = 0;
                *(_QWORD *)(v29 + 56) = 0;
                *(_DWORD *)(v29 + 64) = 0;
                qword_25410A900 = v29;
                v30 = re::introspectionAllocator((re *)v29);
                v31 = atomic_load((unsigned __int8 *)&qword_25410A8D0);
                if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_25410A8D0))
                {
                  ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410A930, 0);
                  *(uint64_t *)((char *)&qword_25410A940 + 6) = 0;
                  qword_25410A940 = 0;
                  *(_QWORD *)&xmmword_25410A950 = 0;
                  *((_QWORD *)&xmmword_25410A950 + 1) = 0xFFFFFFFFLL;
                  qword_25410A930 = (uint64_t)&off_24ED1FA08;
                  qword_25410A968 = 0;
                  re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_25410A960);
                  qword_25410A930 = (uint64_t)&off_24ED5CC10;
                  __cxa_guard_release(&qword_25410A8D0);
                }
                if ((_MergedGlobals_187 & 1) == 0)
                {
                  v32 = (uint64_t *)qword_25410A868;
                  if (qword_25410A868)
                    goto LABEL_53;
                  v33 = atomic_load((unsigned __int8 *)&qword_25410A858);
                  if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_25410A858))
                  {
                    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410AA30, 0);
                    *(_QWORD *)(v44 + 22) = 0;
                    qword_25410AA40 = 0;
                    *(_QWORD *)&xmmword_25410AA50 = 0;
                    *((_QWORD *)&xmmword_25410AA50 + 1) = 0xFFFFFFFFLL;
                    qword_25410AA30 = (uint64_t)&off_24ED7DAA8;
                    qword_25410AA60 = (uint64_t)"DirectParameterTextureEntry";
                    dword_25410AA68 = 0;
                    xmmword_25410AA70 = 0u;
                    *(_OWORD *)&qword_25410AA80 = 0u;
                    xmmword_25410AA90 = 0u;
                    qword_25410AAA0 = 0;
                    __cxa_guard_release(&qword_25410A858);
                  }
                  qword_25410A868 = (uint64_t)&qword_25410AA30;
                  *(_QWORD *)&v61[0] = 0x9695A29D8174CBAELL;
                  *((_QWORD *)&v61[0] + 1) = "DirectParameterTextureEntry";
                  re::StringID::destroyString((re::StringID *)v61);
                  xmmword_25410AA50 = v59;
                  v35 = atomic_load((unsigned __int8 *)&qword_25410A860);
                  if ((v35 & 1) == 0)
                  {
                    v45 = (re *)__cxa_guard_acquire(&qword_25410A860);
                    if ((_DWORD)v45)
                    {
                      v46 = re::introspectionAllocator(v45);
                      v48 = re::introspect_AssetHandle((re *)1, v47);
                      v49 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 72, 8);
                      *(_DWORD *)v49 = 1;
                      *(_QWORD *)(v49 + 8) = "textureAsset";
                      *(_QWORD *)(v49 + 16) = v48;
                      *(_QWORD *)(v49 + 24) = 0;
                      *(_QWORD *)(v49 + 32) = 1;
                      *(_DWORD *)(v49 + 40) = 0;
                      *(_QWORD *)(v49 + 48) = 0;
                      *(_QWORD *)(v49 + 56) = 0;
                      *(_DWORD *)(v49 + 64) = 0;
                      qword_25410A8F0 = v49;
                      v50 = re::introspectionAllocator((re *)v49);
                      v52 = re::introspect_size_t((re *)1, v51);
                      v53 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v50 + 32))(v50, 72, 8);
                      *(_DWORD *)v53 = 1;
                      *(_QWORD *)(v53 + 8) = "offset";
                      *(_QWORD *)(v53 + 16) = v52;
                      *(_QWORD *)(v53 + 24) = 0;
                      *(_QWORD *)(v53 + 32) = 0x1800000002;
                      *(_DWORD *)(v53 + 40) = 0;
                      *(_QWORD *)(v53 + 48) = 0;
                      *(_QWORD *)(v53 + 56) = 0;
                      *(_DWORD *)(v53 + 64) = 0;
                      qword_25410A8F8 = v53;
                      __cxa_guard_release(&qword_25410A860);
                    }
                  }
                  qword_25410AA40 = 0x2000000008;
                  v32 = &qword_25410AA30;
                  dword_25410AA48 = 8;
                  word_25410AA4C = 0;
                  dword_25410AA68 = 2;
                  *(_QWORD *)&xmmword_25410AA70 = &qword_25410A8F0;
                  *((_QWORD *)&xmmword_25410AA70 + 1) = re::internal::defaultConstruct<re::ecs2::DirectParameterTextureEntry>;
                  qword_25410AA80 = (uint64_t)re::internal::defaultDestruct<re::ecs2::DirectParameterTextureEntry>;
                  *(_QWORD *)&xmmword_25410AA90 = 0;
                  qword_25410AA88 = 0;
                  *((_QWORD *)&xmmword_25410AA90 + 1) = re::internal::defaultConstructV2<re::ecs2::DirectParameterTextureEntry>;
                  qword_25410AAA0 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::DirectParameterTextureEntry>;
                  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25410AA30, v34);
                  v61[0] = v59;
                  if ((_MergedGlobals_187 & 1) == 0)
                  {
LABEL_53:
                    _MergedGlobals_187 = 1;
                    v36 = *((_DWORD *)v32 + 6);
                    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410A930, 0);
                    qword_25410A940 = 0x2800000003;
                    dword_25410A948 = v36;
                    word_25410A94C = 0;
                    *(_QWORD *)&xmmword_25410A950 = 0;
                    *((_QWORD *)&xmmword_25410A950 + 1) = 0xFFFFFFFFLL;
                    qword_25410A960 = (uint64_t)v32;
                    qword_25410A968 = 0;
                    qword_25410A930 = (uint64_t)&off_24ED5CC10;
                    re::IntrospectionRegistry::add(v37, v38);
                    re::getPrettyTypeName((re *)&qword_25410A930, (const re::IntrospectionBase *)&v59);
                    if ((BYTE8(v59) & 1) != 0)
                      v39 = v60;
                    else
                      v39 = (char *)&v59 + 9;
                    if ((_QWORD)v59 && (BYTE8(v59) & 1) != 0)
                      (*(void (**)(void))(*(_QWORD *)v59 + 40))();
                    v57 = *((_OWORD *)v32 + 2);
                    v40 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v58);
                    if (v40)
                    {
                      v41 = *v40;
                      *((_QWORD *)&v56 + 1) = v41;
                    }
                    else
                    {
                      v61[0] = v57;
                      re::TypeBuilder::beginListType((uint64_t)&v59, (uint64_t *)&v58, 1, 0x28uLL, 8uLL, v61);
                      re::TypeBuilder::setConstructor((uint64_t)&v59, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
                      re::TypeBuilder::setDestructor((uint64_t)&v59, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
                      re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v59, 1);
                      re::TypeBuilder::setListAccessors((uint64_t)&v59, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
                      re::TypeBuilder::setListIndexer((uint64_t)&v59, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
                      re::TypeBuilder::setListIterator((uint64_t)&v59, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
                      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v59, v42);
                    }
                    xmmword_25410A950 = v56;
                    re::StringID::destroyString((re::StringID *)&v58);
                  }
                }
                v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v30 + 32))(v30, 72, 8);
                *(_DWORD *)v43 = 1;
                *(_QWORD *)(v43 + 8) = "textures";
                *(_QWORD *)(v43 + 16) = &qword_25410A930;
                *(_QWORD *)(v43 + 24) = 0;
                *(_QWORD *)(v43 + 32) = 0x2800000002;
                *(_DWORD *)(v43 + 40) = 0;
                *(_QWORD *)(v43 + 48) = 0;
                *(_QWORD *)(v43 + 56) = 0;
                *(_DWORD *)(v43 + 64) = 0;
                qword_25410A908 = v43;
                __cxa_guard_release(&qword_25410A878);
              }
            }
            qword_25410AAB8 = 0x5800000008;
            v16 = &qword_25410AAA8;
            dword_25410AAC0 = 8;
            dword_25410AAE0 = 2;
            qword_25410AAE8 = (uint64_t)&qword_25410A900;
            unk_25410AAF0 = re::internal::defaultConstruct<re::ecs2::DirectParameterBuffer>;
            word_25410AAC4 = 0;
            qword_25410AAF8 = (uint64_t)re::internal::defaultDestruct<re::ecs2::DirectParameterBuffer>;
            unk_25410AB00 = re::internal::defaultRetain<re::ecs2::DirectParameterBuffer>(void)::{lambda(void *)#1}::__invoke;
            qword_25410AB08 = (uint64_t)re::internal::defaultRelease<re::ecs2::DirectParameterBuffer>(void)::{lambda(void *)#1}::__invoke;
            qword_25410AB10 = (uint64_t)re::internal::defaultConstructV2<re::ecs2::DirectParameterBuffer>;
            qword_25410AB18 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::DirectParameterBuffer>;
            re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25410AAA8, v18);
            v59 = v55;
          }
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410A970, 0);
          qword_25410A980 = 0x800000001;
          dword_25410A988 = 8;
          word_25410A98C = 0;
          *(_QWORD *)&xmmword_25410A990 = 0;
          *((_QWORD *)&xmmword_25410A990 + 1) = 0xFFFFFFFFLL;
          qword_25410A970 = (uint64_t)&off_24ED30800;
          qword_25410A9A0 = (uint64_t)v16;
          qword_25410A9A8 = 0;
          re::IntrospectionRegistry::add(v20, v21);
          re::getPrettyTypeName((re *)&qword_25410A970, (const re::IntrospectionBase *)&v59);
          if ((BYTE8(v59) & 1) != 0)
            v22 = v60;
          else
            v22 = (char *)&v59 + 9;
          if ((_QWORD)v59 && (BYTE8(v59) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v59 + 40))();
          if (*(_QWORD *)&v61[0] >> 1 == 94623636
            && (*((char **)&v61[0] + 1) == "char*" || !strcmp(*((const char **)&v61[0] + 1), "char*")))
          {
            v23 = v59;
          }
          else
          {
            v59 = *((_OWORD *)v16 + 2);
            v23 = v58;
          }
          xmmword_25410A990 = v23;
          re::StringID::destroyString((re::StringID *)v61);
        }
        v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v24 = 1;
        *(_QWORD *)(v24 + 8) = "dataRawPtr";
        *(_QWORD *)(v24 + 16) = &qword_25410A970;
        *(_QWORD *)(v24 + 24) = 0;
        *(_QWORD *)(v24 + 32) = 1;
        *(_DWORD *)(v24 + 40) = 0;
        *(_QWORD *)(v24 + 48) = 0;
        *(_QWORD *)(v24 + 56) = 0;
        *(_DWORD *)(v24 + 64) = 0;
        qword_25410A888 = v24;
        __cxa_guard_release(&qword_25410A890);
      }
    }
    qword_25410AB30 = 0x800000008;
    v1 = &qword_25410AB20;
    dword_25410AB38 = 8;
    word_25410AB3C = 0;
    dword_25410AB58 = 1;
    *(_QWORD *)&xmmword_25410AB60 = &qword_25410A888;
    *((_QWORD *)&xmmword_25410AB60 + 1) = re::internal::defaultConstruct<re::ecs2::DirectParameterHandle>;
    qword_25410AB70 = (uint64_t)re::internal::defaultDestruct<re::ecs2::DirectParameterHandle>;
    *(_QWORD *)&xmmword_25410AB80 = 0;
    qword_25410AB78 = 0;
    *((_QWORD *)&xmmword_25410AB80 + 1) = re::internal::defaultConstructV2<re::ecs2::DirectParameterHandle>;
    qword_25410AB90 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::DirectParameterHandle>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25410AB20, v3);
    v59 = v54;
    if ((byte_25410A852 & 1) == 0)
    {
LABEL_7:
      byte_25410A852 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410A9B0, 0);
      qword_25410A9C0 = 0x2800000003;
      dword_25410A9C8 = v5;
      word_25410A9CC = 0;
      *(_QWORD *)&xmmword_25410A9D0 = 0;
      *((_QWORD *)&xmmword_25410A9D0 + 1) = 0xFFFFFFFFLL;
      qword_25410A9E0 = (uint64_t)v1;
      unk_25410A9E8 = 0;
      qword_25410A9B0 = (uint64_t)&off_24ED5CCA8;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_25410A9B0, (const re::IntrospectionBase *)&v59);
      if ((BYTE8(v59) & 1) != 0)
        v8 = v60;
      else
        v8 = (char *)&v59 + 9;
      if ((_QWORD)v59 && (BYTE8(v59) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v59 + 40))();
      v57 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v58);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v56 + 1) = v10;
      }
      else
      {
        v61[0] = v57;
        re::TypeBuilder::beginListType((uint64_t)&v59, (uint64_t *)&v58, 1, 0x28uLL, 8uLL, v61);
        re::TypeBuilder::setConstructor((uint64_t)&v59, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v59, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v59, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v59, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v59, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v59, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v59, v11);
      }
      xmmword_25410A9D0 = v56;
      re::StringID::destroyString((re::StringID *)&v58);
    }
  }
}

double re::internal::defaultConstruct<re::ecs2::SerializableDirectMaterialParameters>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::SerializableDirectMaterialParameters>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(a3 + 40);
  return re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(a3);
}

double re::internal::defaultConstructV2<re::ecs2::SerializableDirectMaterialParameters>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::SerializableDirectMaterialParameters>(uint64_t a1)
{
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(a1 + 40);
  return re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(a1);
}

uint64_t *re::ecs2::allocInfo_DirectMaterialParametersArrayComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410A8C0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410A8C0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410AC10, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410AC20 = 0;
    qword_25410AC30 = 0;
    qword_25410AC38 = 0xFFFFFFFFLL;
    qword_25410AC10 = (uint64_t)&off_24ED7DAA8;
    qword_25410AC40 = (uint64_t)"DirectMaterialParametersArrayComponent";
    dword_25410AC48 = 0;
    xmmword_25410AC50 = 0u;
    unk_25410AC60 = 0u;
    xmmword_25410AC70 = 0u;
    qword_25410AC80 = 0;
    __cxa_guard_release(&qword_25410A8C0);
  }
  return &qword_25410AC10;
}

void re::ecs2::initInfo_DirectMaterialParametersArrayComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0x5523AF574B6F6F3CLL;
  v12[1] = "DirectMaterialParametersArrayComponent";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_25410A8C8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410A8C8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410A920 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>>::get();
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "serializedMaterialParameters";
      *(_QWORD *)(v10 + 16) = &qword_25410A9F0;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0x2000000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_25410A928 = v10;
      __cxa_guard_release(&qword_25410A8C8);
    }
  }
  *((_QWORD *)this + 2) = 0x4800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25410A920;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::DirectMaterialParametersArrayComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::DirectMaterialParametersArrayComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::DirectMaterialParametersArrayComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DirectMaterialParametersArrayComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

void re::IntrospectionInfo<re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20[2];
  __int128 v21;
  const char *v22;
  __int128 v23;

  v0 = atomic_load((unsigned __int8 *)&qword_25410A8E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25410A8E8))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_25410A9F0);
    qword_25410A9F0 = (uint64_t)&off_24ED5CD40;
    __cxa_guard_release(&qword_25410A8E8);
  }
  if ((byte_25410A853 & 1) == 0)
  {
    v1 = (uint64_t *)qword_25410A8B8;
    if (qword_25410A8B8)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_25410A8A8);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25410A8A8))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410AB98, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_25410ABA8 = 0;
      *(_QWORD *)&xmmword_25410ABB8 = 0;
      *((_QWORD *)&xmmword_25410ABB8 + 1) = 0xFFFFFFFFLL;
      qword_25410AB98 = (uint64_t)&off_24ED7DAA8;
      qword_25410ABC8 = (uint64_t)"SerializableDirectMaterialParameters";
      dword_25410ABD0 = 0;
      xmmword_25410ABD8 = 0u;
      *(_OWORD *)&qword_25410ABE8 = 0u;
      xmmword_25410ABF8 = 0u;
      qword_25410AC08 = 0;
      __cxa_guard_release(&qword_25410A8A8);
    }
    qword_25410A8B8 = (uint64_t)&qword_25410AB98;
    *(_QWORD *)&v23 = 0xDF87169B5D9F64F2;
    *((_QWORD *)&v23 + 1) = "SerializableDirectMaterialParameters";
    re::StringID::destroyString((re::StringID *)&v23);
    xmmword_25410ABB8 = v21;
    v4 = atomic_load((unsigned __int8 *)&qword_25410A8B0);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_25410A8B0);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        re::IntrospectionInfo<re::DynamicArray<re::ecs2::DirectParameterHandle>>::get();
        v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v15 = 1;
        *(_QWORD *)(v15 + 8) = "vertexBufferData";
        *(_QWORD *)(v15 + 16) = &qword_25410A9B0;
        *(_QWORD *)(v15 + 24) = 0;
        *(_QWORD *)(v15 + 32) = 1;
        *(_DWORD *)(v15 + 40) = 0;
        *(_QWORD *)(v15 + 48) = 0;
        *(_QWORD *)(v15 + 56) = 0;
        *(_DWORD *)(v15 + 64) = 0;
        qword_25410A910 = v15;
        v16 = re::introspectionAllocator((re *)v15);
        re::IntrospectionInfo<re::DynamicArray<re::ecs2::DirectParameterHandle>>::get();
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "fragmentBufferData";
        *(_QWORD *)(v17 + 16) = &qword_25410A9B0;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 0x2800000002;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_25410A918 = v17;
        __cxa_guard_release(&qword_25410A8B0);
      }
    }
    qword_25410ABA8 = 0x5000000008;
    v1 = &qword_25410AB98;
    dword_25410ABB0 = 8;
    word_25410ABB4 = 0;
    dword_25410ABD0 = 2;
    *(_QWORD *)&xmmword_25410ABD8 = &qword_25410A910;
    *((_QWORD *)&xmmword_25410ABD8 + 1) = re::internal::defaultConstruct<re::ecs2::SerializableDirectMaterialParameters>;
    qword_25410ABE8 = (uint64_t)re::internal::defaultDestruct<re::ecs2::SerializableDirectMaterialParameters>;
    *(_QWORD *)&xmmword_25410ABF8 = 0;
    qword_25410ABF0 = 0;
    *((_QWORD *)&xmmword_25410ABF8 + 1) = re::internal::defaultConstructV2<re::ecs2::SerializableDirectMaterialParameters>;
    qword_25410AC08 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::SerializableDirectMaterialParameters>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25410AB98, v3);
    v23 = v21;
    if ((byte_25410A853 & 1) == 0)
    {
LABEL_7:
      byte_25410A853 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410A9F0, 0);
      qword_25410AA00 = 0x2800000003;
      dword_25410AA08 = v5;
      word_25410AA0C = 0;
      *(_QWORD *)&xmmword_25410AA10 = 0;
      *((_QWORD *)&xmmword_25410AA10 + 1) = 0xFFFFFFFFLL;
      qword_25410AA20 = (uint64_t)v1;
      unk_25410AA28 = 0;
      qword_25410A9F0 = (uint64_t)&off_24ED5CD40;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_25410A9F0, (const re::IntrospectionBase *)&v21);
      if ((BYTE8(v21) & 1) != 0)
        v8 = v22;
      else
        v8 = (char *)&v21 + 9;
      if ((_QWORD)v21 && (BYTE8(v21) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v21 + 40))();
      v19 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v20);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v18 + 1) = v10;
      }
      else
      {
        v23 = v19;
        re::TypeBuilder::beginListType((uint64_t)&v21, v20, 1, 0x28uLL, 8uLL, &v23);
        re::TypeBuilder::setConstructor((uint64_t)&v21, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v21, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v21, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v21, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v21, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v21, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v21, v11);
      }
      xmmword_25410AA10 = v18;
      re::StringID::destroyString((re::StringID *)v20);
    }
  }
}

void re::internal::defaultConstruct<re::ecs2::DirectMaterialParametersArrayComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_QWORD *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED5A780;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 56) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::DirectMaterialParametersArrayComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::DirectMaterialParametersArrayComponent>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED5A780;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 56) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::DirectMaterialParametersArrayComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_DirectMaterialParametersArrayComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DirectMaterialParametersArrayComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DirectMaterialParametersArrayComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DirectMaterialParametersArrayComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DirectMaterialParametersArrayComponent>, this);
}

uint64_t re::DynamicArray<objc_object  {objcproto8DRBuffer}* {__strong}>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  void *v9;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<objc_object  {objcproto8DRBuffer}* {__strong}>::copy(a1, (uint64_t)a2);
      }
      else
      {
        v6 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = 0;
        if (v6)
        {
          v7 = *(void ***)(a1 + 32);
          v8 = 8 * v6;
          do
          {
            v9 = *v7++;

            v8 -= 8;
          }
          while (v8);
        }
      }
      ++*(_DWORD *)(a1 + 24);
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<REResourceSharingClientObject * {__strong}>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<objc_object  {objcproto8DRBuffer}* {__strong}>::copy(a1, (uint64_t)a2);
    }
  }
  return a1;
}

re::ecs2::DirectParameterBuffer *re::ecs2::DirectParameterBuffer::DirectParameterBuffer(re::ecs2::DirectParameterBuffer *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)this = &off_24ED5CB80;
  uuid_copy((unsigned __int8 *)this + 24, UUID_NULL);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  return this;
}

re::ecs2::DirectParameterBuffer *re::ecs2::DirectParameterBuffer::DirectParameterBuffer(re::ecs2::DirectParameterBuffer *this, const re::DirectResourceAssetTracker *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)this = &off_24ED5CB80;
  uuid_copy((unsigned __int8 *)this + 24, UUID_NULL);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  re::ecs2::createBuffer((uint64_t)a2);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v4;

  DRBufferAsResource();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  DRResourceGetIdentifier();

  return this;
}

id re::ecs2::createBuffer(uint64_t a1)
{
  void *v2;
  id v3;
  void *Buffer;
  void *v5;
  id v6;
  re *v7;
  NSObject *v8;
  NSObject *v10;
  uint8_t buf[4];
  const char *CStringPtr;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)DRBufferDescriptorCreate();
  DRBufferDescriptorSetCapacity();
  DRBufferDescriptorSetSizeMultiple();
  v3 = *(id *)(a1 + 32);
  Buffer = (void *)DRContextCreateBuffer();
  v5 = Buffer;
  if (Buffer)
  {
    v6 = Buffer;
  }
  else
  {
    v7 = (re *)CFErrorCopyDescription(0);
    v8 = *re::graphicsLogObjects(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v10 = v8;
      *(_DWORD *)buf = 136315138;
      CStringPtr = CFStringGetCStringPtr((CFStringRef)v7, 0x8000100u);
      _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, "Unable to create direct buffer: %s", buf, 0xCu);

    }
    CFRelease(v7);
  }

  return v5;
}

void re::ecs2::DirectParameterBuffer::~DirectParameterBuffer(id *this)
{
  *this = &off_24ED5CB80;

  re::DynamicArray<re::ecs2::ProbeResource>::deinit((uint64_t)(this + 5));
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
}

{
  re::ecs2::DirectParameterBuffer::~DirectParameterBuffer(this);
  JUMPOUT(0x2276933B8);
}

re::ecs2::DirectParameterBuffer *re::ecs2::DirectParameterBuffer::DirectParameterBuffer(re::ecs2::DirectParameterBuffer *this, const re::ecs2::DirectParameterBuffer *a2, const re::DirectResourceAssetTracker *a3)
{
  void **v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  uuid_t dst;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)this = &off_24ED5CB80;
  uuid_copy((unsigned __int8 *)this + 24, UUID_NULL);
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  uuid_copy(dst, (const unsigned __int8 *)a2 + 24);
  v6 = (void **)re::HashTable<re::DirectResourceId,DRResource_s *,re::Hash<re::DirectResourceId>,re::EqualTo<re::DirectResourceId>,true,false>::tryGet((uint64_t)a3 + 40, dst);
  if (v6)
    v7 = *v6;
  else
    v7 = 0;
  v8 = v7;
  DRResourceAsBuffer();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  DRBufferGetBytesUsed();
  re::ecs2::createBuffer((uint64_t)a3);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v10;

  DRBufferAsResource();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  DRResourceGetIdentifier();

  v13 = v9;
  DRBufferReplace();

  re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::operator=((re::ecs2::DirectParameterBuffer *)((char *)this + 40), (const re::ecs2::DirectParameterBuffer *)((char *)a2 + 40));
  return this;
}

re::AssetHandle *re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::operator=(re::AssetHandle *a1, re::AssetHandle *a2)
{
  uint64_t v4;
  unint64_t v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::copy((uint64_t)a1, (uint64_t)a2);
        ++*((_DWORD *)a1 + 6);
      }
      else
      {
        re::DynamicArray<re::ecs2::ProbeResource>::clear(a1);
      }
    }
    else if (v4)
    {
      v5 = *((_QWORD *)a2 + 2);
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::setCapacity(a1, v5);
      ++*((_DWORD *)a1 + 6);
      re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::copy((uint64_t)a1, (uint64_t)a2);
    }
  }
  return a1;
}

void re::ecs2::DirectParameterBuffer::resize(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  re::ecs2::createBuffer(a2);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v3;

  DRBufferAsResource();
  v5 = (id)objc_claimAutoreleasedReturnValue();
  DRResourceGetIdentifier();

}

uint64_t re::ecs2::DirectParameterBuffer::getSize(uint64_t a1, uint64_t a2)
{
  id *v3;
  id v4;
  void *v5;
  uint64_t BytesUsed;
  uuid_t dst;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  uuid_copy(dst, (const unsigned __int8 *)(a1 + 24));
  v3 = (id *)re::HashTable<re::DirectResourceId,DRResource_s *,re::Hash<re::DirectResourceId>,re::EqualTo<re::DirectResourceId>,true,false>::tryGet(a2 + 40, dst);
  if (!v3)
  {
    v4 = 0;
    goto LABEL_6;
  }
  v4 = *v3;
  if (!v4)
  {
LABEL_6:
    BytesUsed = 0;
    goto LABEL_9;
  }
  DRResourceAsBuffer();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
    BytesUsed = DRBufferGetBytesUsed();
  else
    BytesUsed = 0;

LABEL_9:
  return BytesUsed;
}

__n128 re::ecs2::DirectMaterialParametersArrayComponent::resolveSerializedParameters@<Q0>(re::ecs2::DirectMaterialParametersArrayComponent *this@<X0>, const re::DirectResourceAssetTracker *a2@<X1>, uint64_t a3@<X8>, __n128 result@<Q0>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  void **v11;
  void *v12;
  id v13;
  void *v14;
  unint64_t v15;
  void **v16;
  void *v17;
  id v18;
  void *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32[3];
  int v33;
  _OWORD v34[2];
  int v35;
  uint64_t v36;
  uuid_t v37;
  uuid_t uu2;
  uuid_t dst;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
  v5 = *((_QWORD *)this + 6);
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = (_QWORD *)*((_QWORD *)this + 8);
    v28 = &v8[10 * v5];
    v9 = (char *)a2 + 40;
    result = 0uLL;
    do
    {
      v33 = 0;
      memset(v32, 0, sizeof(v32));
      v36 = 0;
      v34[0] = result;
      v34[1] = result;
      v35 = 0;
      if (v8[2])
      {
        v10 = 0;
        do
        {
          uuid_copy(dst, (const unsigned __int8 *)(*(_QWORD *)(v8[4] + 8 * v10) + 24));
          uuid_copy(uu2, dst);
          v11 = (void **)re::HashTable<re::DirectResourceId,DRResource_s *,re::Hash<re::DirectResourceId>,re::EqualTo<re::DirectResourceId>,true,false>::tryGet((uint64_t)v9, uu2);
          if (v11)
            v12 = *v11;
          else
            v12 = 0;
          v13 = v12;
          DRResourceAsBuffer();
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v31 = v14;
          if (v14)
          {
            re::DynamicArray<NSObject  {objcproto18OS_dispatch_source}* {__strong}>::add((_anonymous_namespace_ *)v32, &v31);
          }
          else
          {
            v30 = 0;
            re::DynamicArray<NSObject  {objcproto18OS_dispatch_source}* {__strong}>::add((_anonymous_namespace_ *)v32, &v30);
          }

          ++v10;
        }
        while (v10 < v8[2]);
      }
      if (v8[7])
      {
        v15 = 0;
        do
        {
          uuid_copy(dst, (const unsigned __int8 *)(*(_QWORD *)(v8[9] + 8 * v15) + 24));
          uuid_copy(v37, dst);
          v16 = (void **)re::HashTable<re::DirectResourceId,DRResource_s *,re::Hash<re::DirectResourceId>,re::EqualTo<re::DirectResourceId>,true,false>::tryGet((uint64_t)v9, v37);
          if (v16)
            v17 = *v16;
          else
            v17 = 0;
          v18 = v17;
          DRResourceAsBuffer();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v31 = v19;
          if (v19)
          {
            re::DynamicArray<NSObject  {objcproto18OS_dispatch_source}* {__strong}>::add((_anonymous_namespace_ *)((char *)v34 + 8), &v31);
          }
          else
          {
            v29 = 0;
            re::DynamicArray<NSObject  {objcproto18OS_dispatch_source}* {__strong}>::add((_anonymous_namespace_ *)((char *)v34 + 8), &v29);
          }

          ++v15;
        }
        while (v15 < v8[7]);
      }
      v20 = *(_QWORD *)(a3 + 8);
      if (v7 >= v20)
      {
        v21 = 0uLL;
        if (v20 < v7 + 1)
        {
          if (*(_QWORD *)a3)
          {
            v22 = 2 * v20;
            v23 = v20 == 0;
            v24 = 8;
            if (!v23)
              v24 = v22;
            if (v24 <= v7 + 1)
              v25 = v7 + 1;
            else
              v25 = v24;
            re::DynamicArray<re::ecs2::ResolvedDirectParameters>::setCapacity((_QWORD *)a3, v25);
          }
          else
          {
            re::DynamicArray<re::ecs2::ResolvedDirectParameters>::setCapacity((_QWORD *)a3, v7 + 1);
            ++*(_DWORD *)(a3 + 24);
          }
          v21 = 0uLL;
        }
        v7 = *(_QWORD *)(a3 + 16);
        v6 = *(_QWORD *)(a3 + 32);
      }
      else
      {
        v21 = 0uLL;
      }
      v26 = v6 + 80 * v7;
      *(_QWORD *)v26 = 0;
      *(_QWORD *)(v26 + 8) = 0;
      *(_DWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 16) = 0;
      v27 = v26 + 40;
      *(_QWORD *)(v26 + 72) = 0;
      *(_OWORD *)(v26 + 32) = v21;
      *(_OWORD *)(v26 + 48) = v21;
      *(_DWORD *)(v26 + 64) = 0;
      re::DynamicArray<objc_object  {objcproto8DRBuffer}* {__strong}>::operator=(v26, v32);
      re::DynamicArray<objc_object  {objcproto8DRBuffer}* {__strong}>::operator=(v27, (uint64_t *)v34 + 1);
      v7 = *(_QWORD *)(a3 + 16) + 1;
      *(_QWORD *)(a3 + 16) = v7;
      ++*(_DWORD *)(a3 + 24);
      re::DynamicArray<re::ObjCObject>::deinit((uint64_t)v34 + 8);
      this = (re::ecs2::DirectMaterialParametersArrayComponent *)re::DynamicArray<re::ObjCObject>::deinit((uint64_t)v32);
      result = 0uLL;
      v8 += 10;
    }
    while (v8 != v28);
  }
  return result;
}

_QWORD *re::ecs2::DirectMaterialParametersArrayComponent::getParameterData@<X0>(_QWORD *this@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (this[6] <= a3)
    goto LABEL_10;
  v5 = this[8];
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      v6 = v5 + 80 * a3;
      if (*(_QWORD *)(v6 + 16) > a4)
      {
        v7 = *(_QWORD *)(v6 + 32);
        goto LABEL_8;
      }
    }
LABEL_10:
    *a5 = 0;
    return this;
  }
  if (*(_QWORD *)(v5 + 80 * a3 + 56) <= a4)
    goto LABEL_10;
  v7 = *(_QWORD *)(v5 + 80 * a3 + 72);
LABEL_8:
  v8 = *(_QWORD *)(v7 + 8 * a4);
  *a5 = v8;
  if (v8)
    return (id)(v8 + 8);
  return this;
}

void re::ecs2::DirectMaterialParametersArrayComponent::setParameterData(_QWORD *a1, char a2, unint64_t a3, unint64_t a4, uint64_t *a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  if ((a2 & 3) != 0)
  {
    v10 = a1[6];
    if (v10 <= a3)
    {
      re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::resize(a1 + 4, a3 + 1);
      v10 = a1[6];
    }
    if (v10 <= a3)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      v11 = a1[8];
      if ((a2 & 1) == 0)
      {
LABEL_10:
        if ((a2 & 2) == 0)
          return;
        v14 = v11 + 80 * a3;
        v17 = *(_QWORD *)(v14 + 56);
        v16 = (unint64_t *)(v14 + 56);
        v15 = v17;
        if (v17 <= a4)
        {
          re::DynamicArray<re::ecs2::DirectParameterHandle>::resize(v11 + 80 * a3 + 40, a4 + 1);
          v15 = *v16;
        }
        if (v15 > a4)
        {
          re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(*(_QWORD *)(v11 + 80 * a3 + 72) + 8 * a4), *a5);
          return;
        }
LABEL_18:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v12 = v11 + 80 * a3;
      v13 = *(_QWORD *)(v12 + 16);
      if (v13 <= a4)
      {
        re::DynamicArray<re::ecs2::DirectParameterHandle>::resize(v11 + 80 * a3, a4 + 1);
        v13 = *(_QWORD *)(v12 + 16);
      }
      if (v13 > a4)
      {
        re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(*(_QWORD *)(v12 + 32) + 8 * a4), *a5);
        goto LABEL_10;
      }
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_18;
  }
}

_QWORD *re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = 80 * a2;
    v9 = a2;
    do
    {
      v10 = v3[4] + v8;
      re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v10 + 40);
      result = (_QWORD *)re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v10);
      ++v9;
      v8 += 80;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::setCapacity(result, a2);
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 80 * v4;
      do
      {
        v7 = v3[4] + v6;
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)(v7 + 72) = 0;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_DWORD *)(v7 + 64) = 0;
        v6 += 80;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void re::DynamicArray<re::ecs2::DirectParameterHandle>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v5 = a2;
    do
    {
      v6 = *(_QWORD *)(a1 + 32);
      v7 = *(_QWORD *)(v6 + 8 * v5);
      if (v7)
      {

        *(_QWORD *)(v6 + 8 * v5) = 0;
        v4 = *(_QWORD *)(a1 + 16);
      }
      ++v5;
    }
    while (v5 < v4);
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ecs2::DirectParameterHandle>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    if (a2 > v4)
      bzero((void *)(*(_QWORD *)(a1 + 32) + 8 * v4), 8 * (a2 - v4));
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

BOOL re::ecs2::DirectMaterialParametersArrayComponent::isBufferShared(re::ecs2::DirectMaterialParametersArrayComponent *this, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (*((_QWORD *)this + 6) <= a2)
    return 0;
  v3 = *((_QWORD *)this + 8);
  v4 = v3 + 80 * a2;
  return *(_QWORD *)(v4 + 16) > a3
      && *(_QWORD *)(v3 + 80 * a2 + 56) > a3
      && uuid_compare((const unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * a3) + 24), (const unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v3 + 80 * a2 + 72) + 8 * a3) + 24)) == 0;
}

void re::ecs2::DirectMaterialParametersArrayComponent::clearBufferData(re::ecs2::DirectMaterialParametersArrayComponent *this, char a2, unint64_t a3)
{
  if (*((_QWORD *)this + 6) > a3)
  {
    if ((a2 & 1) != 0)
      re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear(*((_QWORD *)this + 8) + 80 * a3);
    if ((a2 & 2) != 0)
    {
      if (*((_QWORD *)this + 6) <= a3)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear(*((_QWORD *)this + 8) + 80 * a3 + 40);
    }
  }
}

uint64_t ___ZN2re4ecs2L10copyBufferEPU18objcproto8DRBuffer11objc_objectS2__block_invoke()
{
  return DRBufferRead();
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::DirectParameterTextureEntry>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::DirectParameterTextureEntry>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::DirectParameterTextureEntry>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::DirectParameterTextureEntry>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::ProbeResource>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::DirectParameterTextureEntry>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::ecs2::ProbeResource>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::DirectParameterTextureEntry>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::DirectParameterTextureEntry>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  _OWORD v10[2];

  memset(v10, 0, sizeof(v10));
  re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::add(this, (uint64_t *)v10);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 32 * *((_QWORD *)this + 2) - 32);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::DirectParameterTextureEntry>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::DirectParameterTextureEntry>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 32 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 32 * a3;
}

_QWORD *re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  re::AssetHandle *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 32 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (re::AssetHandle *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 32 * v9;
        v11 = v7;
        do
        {
          *v11 = 0;
          v11[1] = 0;
          v11[2] = 0;
          v11[1] = *((_QWORD *)v8 + 1);
          *((_QWORD *)v8 + 1) = 0;
          v12 = *v11;
          *v11 = 0;
          *v11 = *(_QWORD *)v8;
          *(_QWORD *)v8 = v12;
          v13 = v11[2];
          v14 = *((_QWORD *)v8 + 3);
          v11[2] = *((_QWORD *)v8 + 2);
          *((_QWORD *)v8 + 2) = v13;
          v11[3] = v14;
          re::AssetHandle::~AssetHandle(v8);
          v8 = (re::AssetHandle *)((char *)v8 + 32);
          v11 += 4;
          v10 -= 32;
        }
        while (v10);
        v8 = (re::AssetHandle *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, re::AssetHandle *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 32 * a2;
    v9 = a2;
    do
    {
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(*(_QWORD *)(a1 + 32) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 32 * v4;
      do
      {
        v7 = (_OWORD *)(*(_QWORD *)(a1 + 32) + v6);
        *v7 = 0uLL;
        v7[1] = 0uLL;
        v6 += 32;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::add(_QWORD *this, uint64_t *a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = (uint64_t *)(v3[4] + 32 * v4);
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  v5[1] = a2[1];
  a2[1] = 0;
  v6 = *v5;
  *v5 = 0;
  *v5 = *a2;
  *a2 = v6;
  v7 = v5[2];
  v8 = a2[3];
  v5[2] = a2[2];
  a2[2] = v7;
  v5[3] = v8;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

_QWORD *re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::ProbeResource>::clear((re::AssetHandle *)a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::ProbeResource>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 32 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 32;
        v11 -= 32;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 32 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 32 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterTextureEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

id re::internal::defaultRetain<re::ecs2::DirectParameterBuffer>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::DirectParameterBuffer>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::DirectParameterHandle>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::DirectParameterHandle>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::DirectParameterHandle>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::DirectParameterHandle>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::DirectParameterHandle>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::ecs2::DirectParameterHandle>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::DirectParameterHandle>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::ecs2::DirectParameterHandle>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::ecs2::DirectParameterHandle>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::ecs2::DirectParameterHandle>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::DirectParameterHandle>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  re::IntrospectionBase *v13;

  v9 = *(_QWORD *)(a4 + 8);
  v8 = *(_QWORD *)(a4 + 16);
  if (v8 >= v9)
  {
    v10 = v8 + 1;
    if (v9 < v8 + 1)
    {
      if (*(_QWORD *)a4)
      {
        v11 = 2 * v9;
        if (!v9)
          v11 = 8;
        if (v11 <= v10)
          v12 = v10;
        else
          v12 = v11;
        re::DynamicArray<re::ecs2::DirectParameterHandle>::setCapacity((_QWORD *)a4, v12);
      }
      else
      {
        re::DynamicArray<re::ecs2::DirectParameterHandle>::setCapacity((_QWORD *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    v8 = *(_QWORD *)(a4 + 16);
  }
  v13 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 8 * v8);
  *(_QWORD *)v13 = 0;
  *(_QWORD *)(a4 + 16) = v8 + 1;
  ++*(_DWORD *)(a4 + 24);
  re::introspectionInitElement(a2, a3, a1[6], v13);
  return v13;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::DirectParameterHandle>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::DirectParameterHandle>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 8 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 8 * a3;
}

_QWORD *re::DynamicArray<re::ecs2::DirectParameterHandle>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  id v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::DirectParameterHandle>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 61)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 8, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 8 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 8 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 8 * v9;
        v11 = v7;
        do
        {
          v12 = *v8;
          *v11 = *v8;
          if (v12)
            v13 = (id)(v12 + 8);
          if (*v8)
          {

            *v8 = 0;
          }
          ++v8;
          ++v11;
          v10 -= 8;
        }
        while (v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::ecs2::DirectParameterHandle>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::ecs2::DirectParameterHandle>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::ecs2::DirectParameterHandle>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 8 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 8;
        v11 -= 8;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 8 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 8 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::DirectParameterHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::SerializableDirectMaterialParameters>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::SerializableDirectMaterialParameters>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::SerializableDirectMaterialParameters>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SerializableDirectMaterialParameters>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::SerializableDirectMaterialParameters>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::SerializableDirectMaterialParameters>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::SerializableDirectMaterialParameters>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  re::IntrospectionBase *v18;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v8 = 0uLL;
  v24 = 0u;
  v23 = 0u;
  v22 = 0u;
  v9 = *(_QWORD *)(a4 + 8);
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= v9)
  {
    v11 = v10 + 1;
    if (v9 < v10 + 1)
    {
      if (*(_QWORD *)a4)
      {
        v12 = 2 * v9;
        v13 = v9 == 0;
        v14 = 8;
        if (!v13)
          v14 = v12;
        if (v14 <= v11)
          v15 = v11;
        else
          v15 = v14;
        re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::setCapacity((_QWORD *)a4, v15);
      }
      else
      {
        re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::setCapacity((_QWORD *)a4, v11);
        ++*(_DWORD *)(a4 + 24);
      }
      v8 = 0uLL;
    }
    v10 = *(_QWORD *)(a4 + 16);
  }
  v16 = *(_QWORD *)(a4 + 32) + 80 * v10;
  *(_OWORD *)v16 = v8;
  v20 = v8;
  *(_QWORD *)(v16 + 16) = 0;
  v21 = 0;
  *(_QWORD *)(v16 + 32) = 0;
  *((_QWORD *)&v22 + 1) = 0;
  LODWORD(v22) = 1;
  *(_DWORD *)(v16 + 24) = 1;
  *(_QWORD *)(v16 + 40) = 0;
  *(_OWORD *)(v16 + 48) = v8;
  *(_DWORD *)(v16 + 64) = 0;
  v23 = v8;
  v17 = *(_QWORD *)(v16 + 56);
  *(_QWORD *)(v16 + 56) = 0;
  *(_QWORD *)&v24 = v17;
  *(_QWORD *)(v16 + 72) = 0;
  v25 = 0;
  DWORD2(v24) = 1;
  ++*(_DWORD *)(v16 + 64);
  ++*(_QWORD *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)&v23);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)&v20);
  v18 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 80 * *(_QWORD *)(a4 + 16) - 80);
  re::introspectionInitElement(a2, a3, a1[6], v18);
  return v18;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SerializableDirectMaterialParameters>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SerializableDirectMaterialParameters>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 80 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 80 * a3;
}

_QWORD *re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x50uLL))
        {
          v2 = 80 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 80 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 80, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = v8 + 80 * v9;
        do
        {
          v12 = v8 + v10;
          v13 = &v7[v10 / 8];
          v13[4] = 0;
          v13[1] = 0;
          v13[2] = 0;
          *v13 = 0;
          *((_DWORD *)v13 + 6) = 0;
          v14 = *(_QWORD *)(v8 + v10 + 8);
          *v13 = *(_QWORD *)(v8 + v10);
          v13[1] = v14;
          *(_QWORD *)v12 = 0;
          *(_QWORD *)(v12 + 8) = 0;
          v15 = v7[v10 / 8 + 2];
          v13[2] = *(_QWORD *)(v8 + v10 + 16);
          *(_QWORD *)(v12 + 16) = v15;
          v16 = v7[v10 / 8 + 4];
          v13[4] = *(_QWORD *)(v8 + v10 + 32);
          *(_QWORD *)(v12 + 32) = v16;
          *(_DWORD *)(v12 + 24) = *(_DWORD *)(v8 + v10 + 24) + 1;
          *((_DWORD *)v13 + 6) = LODWORD(v7[v10 / 8 + 3]) + 1;
          v13[9] = 0;
          v13[6] = 0;
          v13[7] = 0;
          v13[5] = 0;
          *((_DWORD *)v13 + 16) = 0;
          v17 = (_QWORD *)(v8 + v10 + 40);
          v18 = *(_QWORD *)(v8 + v10 + 48);
          v13[5] = *v17;
          *v17 = 0;
          v13[6] = v18;
          *(_QWORD *)(v12 + 48) = 0;
          v19 = v7[v10 / 8 + 7];
          v13[7] = *(_QWORD *)(v8 + v10 + 56);
          *(_QWORD *)(v12 + 56) = v19;
          v20 = v7[v10 / 8 + 9];
          v13[9] = *(_QWORD *)(v8 + v10 + 72);
          *(_QWORD *)(v12 + 72) = v20;
          *(_DWORD *)(v12 + 64) = *(_DWORD *)(v8 + v10 + 64) + 1;
          *((_DWORD *)v13 + 16) = LODWORD(v7[v10 / 8 + 8]) + 1;
          re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v17);
          re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v8 + v10);
          v10 += 80;
        }
        while (v12 + 80 != v11);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE v15[32];
  _BYTE v16[8];
  uint64_t v17;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = 80 * v8;
      do
      {
        re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v9 + 40);
        re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v9);
        v9 += 80;
        v10 -= 80;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  v11 = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::SerializableDirectMaterialParameters>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
    {
      v13 = *(char **)(a1 + 32);
      v14 = 80 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 80;
        v14 -= 80;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 80 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 80 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableDirectMaterialParameters>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void re::DynamicArray<objc_object  {objcproto8DRBuffer}* {__strong}>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void **v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= *(_QWORD *)(a1 + 16))
  {
    re::DynamicArray<REResourceSharingClientObject * {__strong}>::setCapacity((_QWORD *)a1, *(_QWORD *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<objc_object  {objcproto8DRBuffer}* {__strong}*,objc_object  {objcproto8DRBuffer}* {__strong},objc_object  {objcproto8DRBuffer}* {__strong}>(*(void ***)(a2 + 32), (void **)(*(_QWORD *)(a2 + 32) + 8 * *(_QWORD *)(a1 + 16)), *(id **)(a1 + 32));
    v9 = *(_QWORD *)(a1 + 16);
    if (v9 != v4)
    {
      v10 = (void **)(*(_QWORD *)(a2 + 32) + 8 * v9);
      v11 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v9);
      v12 = 8 * v4 - 8 * v9;
      do
      {
        v13 = *v10++;
        *v11++ = v13;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<objc_object  {objcproto8DRBuffer}* {__strong}*,objc_object  {objcproto8DRBuffer}* {__strong},objc_object  {objcproto8DRBuffer}* {__strong}>(*(void ***)(a2 + 32), (void **)(*(_QWORD *)(a2 + 32) + 8 * v4), *(id **)(a1 + 32));
    v5 = *(_QWORD *)(a1 + 16);
    if (v4 != v5)
    {
      v6 = (void **)(*(_QWORD *)(a1 + 32) + 8 * v4);
      v7 = 8 * v5 - 8 * v4;
      do
      {
        v8 = *v6++;

        v7 -= 8;
      }
      while (v7);
    }
  }
  *(_QWORD *)(a1 + 16) = v4;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<objc_object  {objcproto8DRBuffer}* {__strong}*,objc_object  {objcproto8DRBuffer}* {__strong},objc_object  {objcproto8DRBuffer}* {__strong}>(void **a1, void **a2, id *location)
{
  void **v5;
  void *v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5++;
      objc_storeStrong(location++, v6);
    }
    while (v5 != a2);
  }
}

uint64_t *re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const re::AssetHandle *v10;
  uint64_t v11;
  re::AssetHandle *v12;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= *(_QWORD *)(a1 + 16))
  {
    re::DynamicArray<re::ecs2::DirectParameterTextureEntry>::setCapacity((_QWORD *)a1, *(_QWORD *)(a2 + 16));
    result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::ecs2::DirectParameterTextureEntry *,re::ecs2::DirectParameterTextureEntry *,re::ecs2::DirectParameterTextureEntry *,0>(*(uint64_t **)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + 32 * *(_QWORD *)(a1 + 16)), *(uint64_t **)(a1 + 32));
    v9 = *(_QWORD *)(a1 + 16);
    if (v9 != v4)
    {
      v10 = (const re::AssetHandle *)(*(_QWORD *)(a2 + 32) + 32 * v9);
      result = (uint64_t *)(*(_QWORD *)(a1 + 32) + 32 * v9);
      v11 = 32 * v4 - 32 * v9;
      do
      {
        v12 = re::AssetHandle::AssetHandle((re::AssetHandle *)result, v10);
        *((_QWORD *)v12 + 3) = *((_QWORD *)v10 + 3);
        v10 = (const re::AssetHandle *)((char *)v10 + 32);
        result = (uint64_t *)((char *)v12 + 32);
        v11 -= 32;
      }
      while (v11);
    }
  }
  else
  {
    result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::ecs2::DirectParameterTextureEntry *,re::ecs2::DirectParameterTextureEntry *,re::ecs2::DirectParameterTextureEntry *,0>(*(uint64_t **)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + 32 * v4), *(uint64_t **)(a1 + 32));
    v6 = *(_QWORD *)(a1 + 16);
    if (v4 != v6)
    {
      result = (uint64_t *)(*(_QWORD *)(a1 + 32) + 32 * v4);
      v7 = 32 * v6 - 32 * v4;
      do
      {
        re::AssetHandle::~AssetHandle((re::AssetHandle *)result);
        result = (uint64_t *)(v8 + 32);
        v7 -= 32;
      }
      while (v7);
    }
  }
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

uint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::ecs2::DirectParameterTextureEntry *,re::ecs2::DirectParameterTextureEntry *,re::ecs2::DirectParameterTextureEntry *,0>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;

  if (result != a2)
  {
    v5 = result;
    do
    {
      result = re::AssetHandle::operator=(a3, v5);
      a3[3] = v5[3];
      v5 += 4;
      a3 += 4;
    }
    while (v5 != a2);
  }
  return result;
}

_QWORD *re::DynamicArray<re::ecs2::ResolvedDirectParameters>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::ResolvedDirectParameters>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x50uLL))
        {
          v2 = 80 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 80 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 80, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 80 * v9;
        v11 = (uint64_t)v7;
        do
        {
          *(_QWORD *)v11 = 0;
          *(_QWORD *)(v11 + 8) = 0;
          *(_DWORD *)(v11 + 24) = 0;
          *(_QWORD *)(v11 + 16) = 0;
          *(_QWORD *)(v11 + 72) = 0;
          *(_OWORD *)(v11 + 32) = 0u;
          *(_OWORD *)(v11 + 48) = 0u;
          *(_DWORD *)(v11 + 64) = 0;
          re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v11, v8);
          re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v11 + 40, v8 + 40);
          re::DynamicArray<re::ObjCObject>::deinit(v8 + 40);
          re::DynamicArray<re::ObjCObject>::deinit(v8);
          v8 += 80;
          v11 += 80;
          v10 -= 80;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

re::AudioMultiSceneManager *re::AudioMultiSceneManager::AudioMultiSceneManager(re::AudioMultiSceneManager *this)
{
  REAudioManagerNotificationListener *v2;
  void *v3;

  *(_QWORD *)this = &off_24ED5CDD8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 12) = (char *)this + 104;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_DWORD *)((char *)this + 127) = 0;
  *((_DWORD *)this + 42) = 1065353216;
  *((_QWORD *)this + 22) = 0;
  v2 = -[REAudioManagerNotificationListener initWithOwner:]([REAudioManagerNotificationListener alloc], "initWithOwner:", this);
  v3 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v2;

  return this;
}

void re::AudioMultiSceneManager::~AudioMultiSceneManager(re::AudioMultiSceneManager *this)
{
  os_unfair_lock_s *v2;
  void *v3;
  _QWORD *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t j;
  void *v8;
  void *v9;

  *(_QWORD *)this = &off_24ED5CDD8;
  v2 = (os_unfair_lock_s *)((char *)this + 180);
  os_unfair_lock_lock((os_unfair_lock_t)this + 45);
  objc_msgSend(*((id *)this + 1), "stop");
  v3 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;

  for (i = (_QWORD *)*((_QWORD *)this + 9); i; i = (_QWORD *)*i)
  {
    v5 = i[3];
    objc_msgSend(**(id **)(v5 + 312), "cancel");
    std::__hash_table<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,true>,std::__unordered_map_equal<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,true>,std::allocator<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>>>::clear(v5 + 320);
  }
  if (*((_QWORD *)this + 10))
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>>>::__deallocate_node(*((_QWORD **)this + 9));
    *((_QWORD *)this + 9) = 0;
    v6 = *((_QWORD *)this + 8);
    if (v6)
    {
      for (j = 0; j != v6; ++j)
        *(_QWORD *)(*((_QWORD *)this + 7) + 8 * j) = 0;
    }
    *((_QWORD *)this + 10) = 0;
  }
  os_unfair_lock_unlock(v2);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>>>::__deallocate_node(*((_QWORD **)this + 19));
  v8 = (void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v8)
    operator delete(v8);

  std::__tree<unsigned long long>::destroy((uint64_t)this + 96, *((_QWORD **)this + 13));
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>>>::__deallocate_node(*((_QWORD **)this + 9));
  v9 = (void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
    operator delete(v9);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>>>::~__hash_table((uint64_t)this + 16);

}

{
  re::AudioMultiSceneManager::~AudioMultiSceneManager(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::AudioMultiSceneManager::audioService(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t result;
  NSObject *v11;
  unint64_t v12;
  uint8_t buf[16];

  if (!a2)
  {
    v11 = *re::audioLogObjects((re *)a1);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "AudioMultiSceneManager::audioService() called with a null scene.", buf, 2u);
    }
    return 0;
  }
  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 104) + 272) >> 1;
  v12 = v2;
  v3 = (_QWORD *)a1[13];
  if (v3)
  {
    v4 = a1 + 13;
    do
    {
      v5 = v3[4];
      v6 = v5 >= v2;
      if (v5 >= v2)
        v7 = v3;
      else
        v7 = v3 + 1;
      if (v6)
        v4 = v3;
      v3 = (_QWORD *)*v7;
    }
    while (*v7);
    if (v4 != a1 + 13 && v2 >= v4[4])
      return 0;
  }
  v8 = a1 + 7;
  if (std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>(a1 + 7, v2))
  {
    return std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::AudioManager_PHASE>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::AudioManager_PHASE>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::AudioManager_PHASE>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::AudioManager_PHASE>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v8, v2, (uint64_t *)&v12)[3];
  }
  re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) AudioMultiSceneManager::audioService() called on scene that isn't registered.", "m_audioServices.find(sceneID) != m_audioServices.end()", "audioService", 40);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::AudioMultiSceneManager::audioService(re::AudioMultiSceneManager *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 9);
  if (v1)
    return *(_QWORD *)(v1 + 24);
  else
    return 0;
}

void re::AudioMultiSceneManager::registerScene(re::AudioMultiSceneManager *this, const re::ecs2::Scene *a2)
{
  uint64_t *v3;
  re *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  std::__shared_weak_count *shared_owners;
  unint64_t v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  uint64_t v35[2];
  uint8_t buf[16];
  unint64_t v37;
  _QWORD v38[3];
  _QWORD *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    re::internal::assertLog((re::internal *)4, 0, "assertion failure: '%s' (%s:line %i) AudioMultiSceneManager::registerScene() called with nullptr scene.", "scene != nullptr", "registerScene", 54);
    _os_crash();
    __break(1u);
  }
  v37 = *(_QWORD *)(*((_QWORD *)a2 + 13) + 272) >> 1;
  v3 = (uint64_t *)((char *)this + 56);
  v4 = (re *)std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>((_QWORD *)this + 7, v37);
  if (v4)
  {
    v5 = *re::audioLogObjects(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "[RE/ECS] AudioMultiSceneManager::registerScene called on scene that is already reigstered", buf, 2u);
    }
    return;
  }
  v6 = (std::__shared_weak_count *)operator new(0x3A0uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED3DE38;
  v8 = (uint64_t)&v6[1].__shared_owners_;
  re::AudioManager_PHASE::AudioManager_PHASE((id **)&v6[1].__shared_owners_);
  shared_owners = (std::__shared_weak_count *)v6[22].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      goto LABEL_18;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    v6[22].__vftable = (std::__shared_weak_count_vtbl *)v8;
    v6[22].__shared_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v14 = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v6[22].__vftable = (std::__shared_weak_count_vtbl *)v8;
    v6[22].__shared_owners_ = (uint64_t)v6;
  }
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_18:
  v35[0] = (uint64_t)&v6[1].__shared_owners_;
  v35[1] = (uint64_t)v6;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  re::AudioMultiSceneManager::configureNewAudioService((uint64_t)this, v35);
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  v19 = std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::AudioManager_PHASE>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::AudioManager_PHASE>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::AudioManager_PHASE>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::AudioManager_PHASE>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v3, v37, (uint64_t *)&v37);
  do
    v20 = __ldxr(p_shared_owners);
  while (__stxr(v20 + 1, p_shared_owners));
  v21 = (std::__shared_weak_count *)v19[4];
  v19[3] = v8;
  v19[4] = v6;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (!*((_QWORD *)this + 5))
    goto LABEL_37;
  v38[0] = &off_24ED5CF88;
  v38[1] = this;
  v39 = v38;
  re::AudioManager_PHASE::loadAssetsOnSceneRegister(v8, (uint64_t)v38);
  v24 = v39;
  if (v39 == v38)
  {
    v25 = 4;
    v24 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_37;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_37:
  os_unfair_lock_lock((os_unfair_lock_t)this + 45);
  if (*((_QWORD *)this + 20))
  {
    v26 = (_QWORD *)*((_QWORD *)this + 19);
    if (!v26)
      goto LABEL_49;
    do
    {
      v27 = v26[3];
      v28 = (std::__shared_weak_count *)v26[4];
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
        re::AudioMultiSceneManager::loadAudioToSingleService((uint64_t)this, v8, v27, v28);
        do
          v31 = __ldaxr(v29);
        while (__stlxr(v31 - 1, v29));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      else
      {
        re::AudioMultiSceneManager::loadAudioToSingleService((uint64_t)this, v8, v27, 0);
      }
      v26 = (_QWORD *)*v26;
    }
    while (v26);
    if (*((_QWORD *)this + 20))
    {
LABEL_49:
      std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>>>::__deallocate_node(*((_QWORD **)this + 19));
      *((_QWORD *)this + 19) = 0;
      v32 = *((_QWORD *)this + 18);
      if (v32)
      {
        for (i = 0; i != v32; ++i)
          *(_QWORD *)(*((_QWORD *)this + 17) + 8 * i) = 0;
      }
      *((_QWORD *)this + 20) = 0;
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)this + 45);
  do
    v34 = __ldaxr(p_shared_owners);
  while (__stlxr(v34 - 1, p_shared_owners));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void re::AudioMultiSceneManager::configureNewAudioService(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD v10[5];
  char v11;

  v4 = *a2;
  v5 = *(_BYTE *)(a1 + 128);
  *(_BYTE *)(v4 + 272) = v5;
  v6 = *(NSObject **)(v4 + 536);
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = ___ZN2re18AudioManager_PHASE24setExternalSourceControlEb_block_invoke;
  v10[3] = &__block_descriptor_41_e5_v8__0l;
  v10[4] = v4;
  v11 = v5;
  dispatch_async(v6, v10);
  v7 = *a2;
  v8 = *(unsigned __int8 *)(a1 + 129);
  *(_BYTE *)(v7 + 56) = v8;
  v9 = *(_QWORD *)(v7 + 64);
  if (v8)
  {
    if (!v9)
      goto LABEL_5;
  }
  else if (v9)
  {
LABEL_5:
    re::AudioManager::configureSTS((re::AudioManager *)v7);
    v7 = *a2;
  }
  *(_BYTE *)(v7 + 552) = *(_BYTE *)(a1 + 130);
  re::AudioManager_PHASE::setEngineQueue(v7, *(void **)(a1 + 120));
}

void re::AudioMultiSceneManager::loadAudioToSingleService(uint64_t a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v11 = a3;
  v12 = a4;
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v13[0] = &off_24ED5D128;
  v13[1] = a2;
  v13[2] = a1;
  v14 = v13;
  (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)a2 + 576))(a2, &v11, v13);
  v6 = v14;
  if (v14 == v13)
  {
    v7 = 4;
    v6 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_9;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_9:
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

uint64_t *re::AudioMultiSceneManager::unregisterScene(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *result;
  unint64_t v17;
  _QWORD v18[2];
  char v19;

  v3 = (_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 104) + 272) >> 1;
  v5 = std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>((_QWORD *)(a1 + 56), v4);
  if (v5)
  {
    v17 = v4;
    v7 = *(int8x8_t *)(a1 + 64);
    v8 = v5[1];
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      if (v8 >= *(_QWORD *)&v7)
        v8 %= *(_QWORD *)&v7;
    }
    else
    {
      v8 &= *(_QWORD *)&v7 - 1;
    }
    v10 = *(_QWORD **)(*v3 + 8 * v8);
    do
    {
      v11 = v10;
      v10 = (_QWORD *)*v10;
    }
    while (v10 != v5);
    if (v11 == (_QWORD *)(a1 + 72))
      goto LABEL_19;
    v12 = v11[1];
    if (v9.u32[0] > 1uLL)
    {
      if (v12 >= *(_QWORD *)&v7)
        v12 %= *(_QWORD *)&v7;
    }
    else
    {
      v12 &= *(_QWORD *)&v7 - 1;
    }
    if (v12 != v8)
    {
LABEL_19:
      if (!*v5)
        goto LABEL_20;
      v13 = *(_QWORD *)(*v5 + 8);
      if (v9.u32[0] > 1uLL)
      {
        if (v13 >= *(_QWORD *)&v7)
          v13 %= *(_QWORD *)&v7;
      }
      else
      {
        v13 &= *(_QWORD *)&v7 - 1;
      }
      if (v13 != v8)
LABEL_20:
        *(_QWORD *)(*v3 + 8 * v8) = 0;
    }
    v14 = *v5;
    if (*v5)
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (v9.u32[0] > 1uLL)
      {
        if (v15 >= *(_QWORD *)&v7)
          v15 %= *(_QWORD *)&v7;
      }
      else
      {
        v15 &= *(_QWORD *)&v7 - 1;
      }
      if (v15 != v8)
      {
        *(_QWORD *)(*v3 + 8 * v15) = v11;
        v14 = *v5;
      }
    }
    *v11 = v14;
    *v5 = 0;
    --*(_QWORD *)(a1 + 80);
    v18[0] = v5;
    v18[1] = a1 + 72;
    v19 = 1;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
    return std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t **)(a1 + 96), &v17, (uint64_t *)&v17);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) AudioMultiSceneManager::unregisterScene() called on scene that isn't registered.", "audioService != m_audioServices.end()", "unregisterScene", 89);
    result = (uint64_t *)_os_crash();
    __break(1u);
  }
  return result;
}

void re::AudioMultiSceneManager::clearRecentlyDeletedScenes(re::AudioMultiSceneManager *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + 104);
  std::__tree<unsigned long long>::destroy((uint64_t)this + 96, *((_QWORD **)this + 13));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
}

void re::AudioMultiSceneManager::setEngineQueue(uint64_t a1, void *a2)
{
  _QWORD *i;
  id v5;

  v5 = a2;
  objc_storeStrong((id *)(a1 + 120), a2);
  for (i = *(_QWORD **)(a1 + 72); i; i = (_QWORD *)*i)
    re::AudioManager_PHASE::setEngineQueue(i[3], v5);

}

id re::AudioMultiSceneManager::getEngineQueue(id *this)
{
  return this[15];
}

void re::AudioMultiSceneManager::configureEnterFramePhase(re *a1, uint64_t *a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[16];
  _BYTE v10[21];
  _BYTE v11[24];
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD v15[3];
  int v16;
  uint64_t v17;
  StringID v18;
  _BYTE v19[21];
  _QWORD v20[3];
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v18.var0 = 0x4BF9C6AA1E4AE526;
  v18.var1 = "Audio Before Frame Update";
  *(_WORD *)v19 = 1;
  v5 = (char *)a1 + 56;
  *(_DWORD *)&v19[4] = 0;
  v19[8] = 0;
  *(_WORD *)&v19[12] = 260;
  *(_DWORD *)&v19[16] = 1023969417;
  v19[20] = 0;
  v6 = re::globalAllocators(a1)[2];
  v20[0] = &off_24ED5CED8;
  v20[1] = v5;
  v21 = v6;
  v22 = v20;
  v7 = *a2;
  v28 = 0;
  v27 = 0;
  v25 = 0;
  v26 = 0;
  v23 = v7;
  v24 = 0;
  re::StringID::StringID((re::StringID *)v9, &v18);
  *(_OWORD *)v10 = *(_OWORD *)v19;
  *(_QWORD *)&v10[13] = *(_QWORD *)&v19[13];
  v12 = v21;
  v13 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v11, (uint64_t)v20);
  v14 = v23;
  re::DynamicArray<unsigned long>::DynamicArray((uint64_t)v15, &v24);
  v8 = *(_QWORD *)(a3 + 24);
  if (!v8)
    std::__throw_bad_function_call[abi:nn180100]();
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 48))(v8, v9);
  if (v15[0])
  {
    if (v17)
      (*(void (**)(void))(*(_QWORD *)v15[0] + 40))();
    v17 = 0;
    memset(v15, 0, sizeof(v15));
    ++v16;
  }
  if (v13)
  {
    (**(void (***)(_BYTE *))v13)(v13);
    if (v13 != v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    v13 = 0;
  }
  re::StringID::destroyString((re::StringID *)v9);
  if (v24)
  {
    if (v28)
      (*(void (**)(void))(*(_QWORD *)v24 + 40))();
    v28 = 0;
    v25 = 0;
    v26 = 0;
    v24 = 0;
    ++v27;
  }
  if (v22)
  {
    (*(void (**)(_QWORD *))*v22)(v22);
    if (v22 != v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
    v22 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v18);
}

void re::AudioMultiSceneManager::configureCommitPhase(re *a1, uint64_t *a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[16];
  _BYTE v10[21];
  _BYTE v11[24];
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD v15[3];
  int v16;
  uint64_t v17;
  StringID v18;
  _BYTE v19[21];
  _QWORD v20[3];
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v18.var0 = 0xEA0359364ADC6754;
  v18.var1 = "Audio After Frame Update";
  *(_WORD *)v19 = 1;
  v5 = (char *)a1 + 56;
  *(_DWORD *)&v19[4] = 0;
  v19[8] = 0;
  *(_WORD *)&v19[12] = 260;
  *(_DWORD *)&v19[16] = 1023969417;
  v19[20] = 0;
  v6 = re::globalAllocators(a1)[2];
  v20[0] = &off_24ED5CF30;
  v20[1] = v5;
  v21 = v6;
  v22 = v20;
  v7 = *a2;
  v28 = 0;
  v27 = 0;
  v25 = 0;
  v26 = 0;
  v23 = v7;
  v24 = 0;
  re::StringID::StringID((re::StringID *)v9, &v18);
  *(_OWORD *)v10 = *(_OWORD *)v19;
  *(_QWORD *)&v10[13] = *(_QWORD *)&v19[13];
  v12 = v21;
  v13 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v11, (uint64_t)v20);
  v14 = v23;
  re::DynamicArray<unsigned long>::DynamicArray((uint64_t)v15, &v24);
  v8 = *(_QWORD *)(a3 + 24);
  if (!v8)
    std::__throw_bad_function_call[abi:nn180100]();
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 48))(v8, v9);
  if (v15[0])
  {
    if (v17)
      (*(void (**)(void))(*(_QWORD *)v15[0] + 40))();
    v17 = 0;
    memset(v15, 0, sizeof(v15));
    ++v16;
  }
  if (v13)
  {
    (**(void (***)(_BYTE *))v13)(v13);
    if (v13 != v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    v13 = 0;
  }
  re::StringID::destroyString((re::StringID *)v9);
  if (v24)
  {
    if (v28)
      (*(void (**)(void))(*(_QWORD *)v24 + 40))();
    v28 = 0;
    v25 = 0;
    v26 = 0;
    v24 = 0;
    ++v27;
  }
  if (v22)
  {
    (*(void (**)(_QWORD *))*v22)(v22);
    if (v22 != v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
    v22 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v18);
}

void re::AudioMultiSceneManager::setIsExternalSourceControl(re::AudioMultiSceneManager *this, char a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  NSObject *v7;
  _QWORD v8[5];
  char v9;

  *((_BYTE *)this + 128) = a2;
  v2 = (_QWORD *)*((_QWORD *)this + 9);
  if (v2)
  {
    v4 = MEMORY[0x24BDAC760];
    do
    {
      v5 = v2[3];
      v6 = *((_BYTE *)this + 128);
      *(_BYTE *)(v5 + 272) = v6;
      v7 = *(NSObject **)(v5 + 536);
      v8[0] = v4;
      v8[1] = 3221225472;
      v8[2] = ___ZN2re18AudioManager_PHASE24setExternalSourceControlEb_block_invoke;
      v8[3] = &__block_descriptor_41_e5_v8__0l;
      v8[4] = v5;
      v9 = v6;
      dispatch_async(v7, v8);
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
}

uint64_t re::AudioMultiSceneManager::getIsExternalSourceControl(re::AudioMultiSceneManager *this)
{
  return *((unsigned __int8 *)this + 128);
}

void re::AudioMultiSceneManager::setIsSTSControl(re::AudioMultiSceneManager *this, char a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;

  *((_BYTE *)this + 129) = a2;
  v2 = (_QWORD *)*((_QWORD *)this + 9);
  if (v2)
  {
    while (1)
    {
      v4 = v2[3];
      *(_BYTE *)(v4 + 56) = a2 != 0;
      v5 = *(_QWORD *)(v4 + 64);
      if (a2)
      {
        if (v5)
          goto LABEL_7;
      }
      else if (!v5)
      {
        goto LABEL_7;
      }
      re::AudioManager::configureSTS((re::AudioManager *)v4);
LABEL_7:
      v2 = (_QWORD *)*v2;
      if (!v2)
        return;
      a2 = *((_BYTE *)this + 129);
    }
  }
}

uint64_t re::AudioMultiSceneManager::getIsSTSControl(re::AudioMultiSceneManager *this)
{
  return *((unsigned __int8 *)this + 129);
}

uint64_t re::AudioMultiSceneManager::setIsHostingSharedAudioSimulation(uint64_t this, char a2)
{
  _QWORD *i;

  *(_BYTE *)(this + 130) = a2;
  for (i = *(_QWORD **)(this + 72); i; i = (_QWORD *)*i)
    *(_BYTE *)(i[3] + 552) = a2;
  return this;
}

uint64_t re::AudioMultiSceneManager::getIsHostingSharedAudioSimulation(re::AudioMultiSceneManager *this)
{
  return *((unsigned __int8 *)this + 130);
}

void re::AudioMultiSceneManager::triggerNotification(uint64_t a1, int a2)
{
  uint64_t **i;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  for (i = *(uint64_t ***)(a1 + 72); i; i = (uint64_t **)*i)
  {
    re::AudioManager_PHASE::triggerNotification((re::AudioManager *)i[3], a2);
    if (a2 == 3)
    {
      v5 = (uint64_t)i[3];
      v8[0] = &off_24ED5D018;
      v8[1] = a1;
      v9 = v8;
      re::AudioManager_PHASE::loadAssetsOnReset(v5, (uint64_t)v8);
      v6 = v9;
      if (v9 == v8)
      {
        v6 = v8;
        v7 = 4;
        goto LABEL_7;
      }
      if (v9)
      {
        v7 = 5;
LABEL_7:
        (*(void (**)(void))(*v6 + 8 * v7))();
      }
    }
  }
}

void re::AudioMultiSceneManager::forceShutdown(re::AudioMultiSceneManager *this)
{
  _QWORD *i;
  uint64_t v2;

  for (i = (_QWORD *)*((_QWORD *)this + 9); i; i = (_QWORD *)*i)
  {
    v2 = i[3];
    objc_msgSend(**(id **)(v2 + 312), "cancel");
    std::__hash_table<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,true>,std::__unordered_map_equal<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,true>,std::allocator<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>>>::clear(v2 + 320);
  }
}

uint64_t re::AudioMultiSceneManager::updateEngine(uint64_t this)
{
  uint64_t **i;

  for (i = *(uint64_t ***)(this + 72); i; i = (uint64_t **)*i)
    this = re::AudioManager_PHASE::updateEngine((re::AudioManager_PHASE *)i[3]);
  return this;
}

void re::AudioMultiSceneManager::loadAudio(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  os_unfair_lock_s *v23;
  re *v24;
  NSObject *v25;
  std::__shared_weak_count *v26;
  unint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  float v37;
  float v38;
  _BOOL8 v39;
  unint64_t v40;
  unint64_t v41;
  int8x8_t prime;
  void *v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint8x8_t v48;
  unint64_t v49;
  uint8x8_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint8_t buf[8];
  uint64_t v70;
  char v71;
  _QWORD v72[3];
  _QWORD *v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 80))
  {
    v23 = (os_unfair_lock_s *)(a1 + 180);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 180));
    v25 = *re::audioLogObjects(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v25, OS_LOG_TYPE_DEFAULT, "[RE] [AudioMultiSceneManager] loadAudio called with no audio service. Caching the payload.", buf, 2u);
    }
    v27 = a2[1];
    v26 = (std::__shared_weak_count *)a2[2];
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v29 = __ldxr(p_shared_owners);
      while (__stxr(v29 + 1, p_shared_owners));
    }
    v30 = *a2;
    v31 = *(_QWORD *)(a1 + 144);
    if (v31)
    {
      v32 = (uint8x8_t)vcnt_s8((int8x8_t)v31);
      v32.i16[0] = vaddlv_u8(v32);
      if (v32.u32[0] > 1uLL)
      {
        v2 = *a2;
        if (v31 <= v30)
          v2 = v30 % v31;
      }
      else
      {
        v2 = (v31 - 1) & v30;
      }
      v33 = *(_QWORD **)(*(_QWORD *)(a1 + 136) + 8 * v2);
      if (v33)
      {
        v34 = (_QWORD *)*v33;
        if (*v33)
        {
          do
          {
            v35 = v34[1];
            if (v35 == v30)
            {
              if (v34[2] == v30)
                goto LABEL_113;
            }
            else
            {
              if (v32.u32[0] > 1uLL)
              {
                if (v35 >= v31)
                  v35 %= v31;
              }
              else
              {
                v35 &= v31 - 1;
              }
              if (v35 != v2)
                break;
            }
            v34 = (_QWORD *)*v34;
          }
          while (v34);
        }
      }
    }
    v36 = (_QWORD *)(a1 + 152);
    v34 = operator new(0x28uLL);
    v70 = a1 + 152;
    *v34 = 0;
    v34[1] = v30;
    v34[3] = 0;
    v34[4] = 0;
    v34[2] = v30;
    v71 = 1;
    v37 = (float)(unint64_t)(*(_QWORD *)(a1 + 160) + 1);
    v38 = *(float *)(a1 + 168);
    if (v31 && (float)(v38 * (float)v31) >= v37)
    {
LABEL_103:
      v55 = *(_QWORD *)(a1 + 136);
      v56 = *(_QWORD **)(v55 + 8 * v2);
      if (v56)
      {
        *v34 = *v56;
      }
      else
      {
        v57 = (_QWORD *)*v36;
        *v34 = *v36;
        *v36 = v34;
        *(_QWORD *)(v55 + 8 * v2) = v36;
        if (!v57)
        {
LABEL_112:
          *(_QWORD *)buf = 0;
          ++*(_QWORD *)(a1 + 160);
          std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
LABEL_113:
          if (v26)
          {
            v59 = (unint64_t *)&v26->__shared_owners_;
            do
              v60 = __ldxr(v59);
            while (__stxr(v60 + 1, v59));
          }
          v61 = (std::__shared_weak_count *)v34[4];
          v34[3] = v27;
          v34[4] = v26;
          if (v61)
          {
            v62 = (unint64_t *)&v61->__shared_owners_;
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
          if (v26)
          {
            v64 = (unint64_t *)&v26->__shared_owners_;
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          os_unfair_lock_unlock(v23);
          return;
        }
        v58 = v57[1];
        if ((v31 & (v31 - 1)) != 0)
        {
          if (v58 >= v31)
            v58 %= v31;
        }
        else
        {
          v58 &= v31 - 1;
        }
        v56 = (_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v58);
      }
      *v56 = v34;
      goto LABEL_112;
    }
    v39 = 1;
    if (v31 >= 3)
      v39 = (v31 & (v31 - 1)) != 0;
    v40 = v39 | (2 * v31);
    v41 = vcvtps_u32_f32(v37 / v38);
    if (v40 <= v41)
      prime = (int8x8_t)v41;
    else
      prime = (int8x8_t)v40;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v31 = *(_QWORD *)(a1 + 144);
    }
    if (*(_QWORD *)&prime > v31)
      goto LABEL_69;
    if (*(_QWORD *)&prime < v31)
    {
      v49 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 160) / *(float *)(a1 + 168));
      if (v31 < 3 || (v50 = (uint8x8_t)vcnt_s8((int8x8_t)v31), v50.i16[0] = vaddlv_u8(v50), v50.u32[0] > 1uLL))
      {
        v49 = std::__next_prime(v49);
      }
      else
      {
        v51 = 1 << -(char)__clz(v49 - 1);
        if (v49 >= 2)
          v49 = v51;
      }
      if (*(_QWORD *)&prime <= v49)
        prime = (int8x8_t)v49;
      if (*(_QWORD *)&prime >= v31)
      {
        v31 = *(_QWORD *)(a1 + 144);
      }
      else
      {
        if (prime)
        {
LABEL_69:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v43 = operator new(8 * *(_QWORD *)&prime);
          v44 = *(void **)(a1 + 136);
          *(_QWORD *)(a1 + 136) = v43;
          if (v44)
            operator delete(v44);
          v45 = 0;
          *(int8x8_t *)(a1 + 144) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v45++) = 0;
          while (*(_QWORD *)&prime != v45);
          v46 = (_QWORD *)*v36;
          if (*v36)
          {
            v47 = v46[1];
            v48 = (uint8x8_t)vcnt_s8(prime);
            v48.i16[0] = vaddlv_u8(v48);
            if (v48.u32[0] > 1uLL)
            {
              if (v47 >= *(_QWORD *)&prime)
                v47 %= *(_QWORD *)&prime;
            }
            else
            {
              v47 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v47) = v36;
            v52 = (_QWORD *)*v46;
            if (*v46)
            {
              do
              {
                v53 = v52[1];
                if (v48.u32[0] > 1uLL)
                {
                  if (v53 >= *(_QWORD *)&prime)
                    v53 %= *(_QWORD *)&prime;
                }
                else
                {
                  v53 &= *(_QWORD *)&prime - 1;
                }
                if (v53 != v47)
                {
                  v54 = *(_QWORD *)(a1 + 136);
                  if (!*(_QWORD *)(v54 + 8 * v53))
                  {
                    *(_QWORD *)(v54 + 8 * v53) = v46;
                    goto LABEL_94;
                  }
                  *v46 = *v52;
                  *v52 = **(_QWORD **)(*(_QWORD *)(a1 + 136) + 8 * v53);
                  **(_QWORD **)(*(_QWORD *)(a1 + 136) + 8 * v53) = v52;
                  v52 = v46;
                }
                v53 = v47;
LABEL_94:
                v46 = v52;
                v52 = (_QWORD *)*v52;
                v47 = v53;
              }
              while (v52);
            }
          }
          v31 = (unint64_t)prime;
          goto LABEL_98;
        }
        v66 = *(void **)(a1 + 136);
        *(_QWORD *)(a1 + 136) = 0;
        if (v66)
          operator delete(v66);
        v31 = 0;
        *(_QWORD *)(a1 + 144) = 0;
      }
    }
LABEL_98:
    if ((v31 & (v31 - 1)) != 0)
    {
      if (v31 <= v30)
        v2 = v30 % v31;
      else
        v2 = v30;
    }
    else
    {
      v2 = (v31 - 1) & v30;
    }
    goto LABEL_103;
  }
  v5 = *(_QWORD **)(a1 + 72);
  v6 = v5[2];
  v8 = a2[1];
  v7 = (std::__shared_weak_count *)a2[2];
  if (v7)
  {
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v5 = *(_QWORD **)(a1 + 72);
    if (!v5)
    {
LABEL_31:
      v21 = (unint64_t *)&v7->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      return;
    }
  }
  v11 = (unint64_t *)&v7->__shared_owners_;
  do
  {
    while (1)
    {
      v12 = v5[3];
      if (v5[2] != v6)
        break;
      if (v7)
      {
        do
          v13 = __ldxr(v11);
        while (__stxr(v13 + 1, v11));
        re::AudioMultiSceneManager::loadAudioToSingleService(a1, v12, v8, v7);
        do
          v14 = __ldaxr(v11);
        while (__stlxr(v14 - 1, v11));
        v15 = v7;
        if (!v14)
        {
LABEL_28:
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          goto LABEL_29;
        }
        v5 = (_QWORD *)*v5;
        if (!v5)
          goto LABEL_31;
      }
      else
      {
        re::AudioMultiSceneManager::loadAudioToSingleService(a1, v5[3], v8, 0);
        v5 = (_QWORD *)*v5;
        if (!v5)
          return;
      }
    }
    v67 = v8;
    v68 = v7;
    if (v7)
    {
      do
        v16 = __ldxr(v11);
      while (__stxr(v16 + 1, v11));
    }
    v72[0] = &off_24ED5D098;
    v73 = v72;
    re::AudioManager_PHASE::loadAudio(v12, &v67, (uint64_t)v72);
    v17 = v73;
    if (v73 == v72)
    {
      v17 = v72;
      v18 = 4;
      goto LABEL_23;
    }
    if (v73)
    {
      v18 = 5;
LABEL_23:
      (*(void (**)(_QWORD *))(*v17 + 8 * v18))(v17);
    }
    v15 = v68;
    if (v68)
    {
      v19 = (unint64_t *)&v68->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
        goto LABEL_28;
    }
LABEL_29:
    v5 = (_QWORD *)*v5;
  }
  while (v5);
  if (v7)
    goto LABEL_31;
}

void re::AudioMultiSceneManager::unloadAudio(int8x8_t *this, unint64_t a2)
{
  _QWORD *v4;
  char v5;
  uint64_t v6;
  id v7;
  re *v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  int8x8_t v14;
  uint8x8_t v15;
  unint64_t v16;
  int8x8_t **v17;
  int8x8_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int8x8_t v22;
  int8x8_t *v23;
  int8x8_t *v24;
  unint64_t v25;
  unint64_t v26;
  int8x8_t v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE block[24];
  void *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v29 = a2;
  if (this[10])
  {
    v4 = (_QWORD *)this[9];
    if (!v4)
      goto LABEL_12;
    v5 = 0;
    v6 = MEMORY[0x24BDAC760];
    do
    {
      while (1)
      {
        v7 = **(id **)(v4[3] + 312);
        v8 = (re *)objc_msgSend(v7, "isCancelled");
        if (!(_DWORD)v8)
          break;
        v11 = *re::audioLogObjects(v8);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          v12 = v4[3];
          *(_DWORD *)block = 134218240;
          *(_QWORD *)&block[4] = a2;
          *(_WORD *)&block[12] = 2048;
          *(_QWORD *)&block[14] = v12;
          _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "[RE] [AudioMultiSceneManager] REEngine was deallocated. Cannot unload audio asset: %llu from audioService %p", block, 0x16u);
        }

        v4 = (_QWORD *)*v4;
        v5 = 1;
        if (!v4)
          return;
      }
      v9 = v4[3];
      v10 = *(NSObject **)(v9 + 536);
      *(_QWORD *)block = v6;
      *(_QWORD *)&block[8] = 3221225472;
      *(_QWORD *)&block[16] = ___ZN2re18AudioManager_PHASE11unloadAssetEy_block_invoke;
      v31 = &__block_descriptor_48_e5_v8__0l;
      v32 = v9;
      v33 = a2;
      dispatch_async(v10, block);

      v4 = (_QWORD *)*v4;
    }
    while (v4);
    if ((v5 & 1) == 0)
    {
LABEL_12:
      v13 = (os_unfair_lock_s *)&this[22];
      os_unfair_lock_lock((os_unfair_lock_t)&this[22]);
      std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>>>::__erase_unique<unsigned long long>(&this[2], &v29);
      goto LABEL_58;
    }
  }
  else
  {
    v13 = (os_unfair_lock_s *)&this[22] + 1;
    os_unfair_lock_lock((os_unfair_lock_t)&this[22] + 1);
    v14 = this[18];
    if (v14)
    {
      v15 = (uint8x8_t)vcnt_s8(v14);
      v15.i16[0] = vaddlv_u8(v15);
      if (v15.u32[0] > 1uLL)
      {
        v16 = a2;
        if (*(_QWORD *)&v14 <= a2)
          v16 = a2 % *(_QWORD *)&v14;
      }
      else
      {
        v16 = (*(_QWORD *)&v14 - 1) & a2;
      }
      v17 = *(int8x8_t ***)(*(_QWORD *)&this[17] + 8 * v16);
      if (v17)
      {
        v18 = *v17;
        if (v18)
        {
          v19 = *(_QWORD *)&v14 - 1;
          do
          {
            v20 = (unint64_t)v18[1];
            if (v20 == a2)
            {
              if (*(_QWORD *)&v18[2] == a2)
              {
                v21 = (unint64_t)v18[1];
                if (v15.u32[0] > 1uLL)
                {
                  if (v21 >= *(_QWORD *)&v14)
                    v21 %= *(_QWORD *)&v14;
                }
                else
                {
                  v21 &= v19;
                }
                v22 = this[17];
                v23 = *(int8x8_t **)(*(_QWORD *)&v22 + 8 * v21);
                do
                {
                  v24 = v23;
                  v23 = (int8x8_t *)*v23;
                }
                while (v23 != v18);
                if (v24 == &this[19])
                  goto LABEL_48;
                v25 = (unint64_t)v24[1];
                if (v15.u32[0] > 1uLL)
                {
                  if (v25 >= *(_QWORD *)&v14)
                    v25 %= *(_QWORD *)&v14;
                }
                else
                {
                  v25 &= v19;
                }
                if (v25 != v21)
                {
LABEL_48:
                  if (!*(_QWORD *)v18)
                    goto LABEL_49;
                  v26 = *(_QWORD *)(*(_QWORD *)v18 + 8);
                  if (v15.u32[0] > 1uLL)
                  {
                    if (v26 >= *(_QWORD *)&v14)
                      v26 %= *(_QWORD *)&v14;
                  }
                  else
                  {
                    v26 &= v19;
                  }
                  if (v26 != v21)
LABEL_49:
                    *(_QWORD *)(*(_QWORD *)&v22 + 8 * v21) = 0;
                }
                v27 = *v18;
                if (*v18)
                {
                  v28 = *(_QWORD *)(*(_QWORD *)&v27 + 8);
                  if (v15.u32[0] > 1uLL)
                  {
                    if (v28 >= *(_QWORD *)&v14)
                      v28 %= *(_QWORD *)&v14;
                  }
                  else
                  {
                    v28 &= v19;
                  }
                  if (v28 != v21)
                  {
                    *(_QWORD *)(*(_QWORD *)&this[17] + 8 * v28) = v24;
                    v27 = *v18;
                  }
                }
                *v24 = v27;
                *v18 = 0;
                --*(_QWORD *)&this[20];
                *(_QWORD *)block = v18;
                *(_QWORD *)&block[8] = this + 19;
                block[16] = 1;
                std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,void *>>>>::reset[abi:ne180100]((uint64_t)block);
                break;
              }
            }
            else
            {
              if (v15.u32[0] > 1uLL)
              {
                if (v20 >= *(_QWORD *)&v14)
                  v20 %= *(_QWORD *)&v14;
              }
              else
              {
                v20 &= v19;
              }
              if (v20 != v16)
                break;
            }
            v18 = (int8x8_t *)*v18;
          }
          while (v18);
        }
      }
    }
LABEL_58:
    os_unfair_lock_unlock(v13);
  }
}

void re::AudioMultiSceneManager::simulateMediaServicesLostNotification(re::AudioMultiSceneManager *this)
{
  void *v2;
  id v3;
  void *v4;
  id v5;

  v2 = (void *)*((_QWORD *)this + 1);
  v3 = objc_alloc(MEMORY[0x24BDD16C8]);
  objc_msgSend(*((id *)this + 1), "audioSessionToFollow");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v3, "initWithName:object:userInfo:", CFSTR("AVAudioSessionMediaServicesWereLostNotification"), v5, MEMORY[0x24BDBD1B8]);
  objc_msgSend(v2, "servicesLost:", v4);

}

void re::AudioMultiSceneManager::simulateMediaServicesResetNotification(re::AudioMultiSceneManager *this)
{
  void *v2;
  id v3;
  void *v4;
  id v5;

  v2 = (void *)*((_QWORD *)this + 1);
  v3 = objc_alloc(MEMORY[0x24BDD16C8]);
  objc_msgSend(*((id *)this + 1), "audioSessionToFollow");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v3, "initWithName:object:userInfo:", CFSTR("AVAudioSessionMediaServicesWereResetNotification"), v5, MEMORY[0x24BDBD1B8]);
  objc_msgSend(v2, "servicesReset:", v4);

}

BOOL re::AudioMultiSceneManager::assetIsLoaded(os_unfair_lock_s *this, unint64_t a2)
{
  os_unfair_lock_s *v3;
  _BOOL8 v4;
  unint64_t v6;

  v6 = a2;
  v3 = this + 44;
  os_unfair_lock_lock(this + 44);
  v4 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>(&this[4]._os_unfair_lock_opaque, &v6) != 0;
  os_unfair_lock_unlock(v3);
  return v4;
}

void re::internal::Callable<re::AudioMultiSceneManager::configureEnterFramePhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::AudioMultiSceneManager::configureEnterFramePhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::operator()(uint64_t a1)
{
  uint64_t **i;
  uint64_t v4[2];

  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v4);
  for (i = *(uint64_t ***)(*(_QWORD *)(a1 + 8) + 16); i; i = (uint64_t **)*i)
    re::AudioManager_PHASE::beforeFrameUpdate((re::AudioManager_PHASE *)i[3]);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)22>::end((uint64_t)v4);
}

_QWORD *re::internal::Callable<re::AudioMultiSceneManager::configureEnterFramePhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED5CED8;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::AudioMultiSceneManager::configureEnterFramePhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED5CED8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::AudioMultiSceneManager::configureEnterFramePhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::size()
{
  return 16;
}

uint64_t re::ProfilerTimeGuard<(re::ProfilerStatistic)22>::end(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  int64x2_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64x2_t v7;

  if (*(_QWORD *)result && *(_QWORD *)(*(_QWORD *)result + 152))
  {
    v1 = (_QWORD *)result;
    result = mach_absolute_time();
    v2 = *v1;
    v3 = *(int64x2_t **)(*v1 + 152);
    if (v3)
    {
      v4 = result - v1[1];
      v5 = v3[92].u64[0];
      if (v5 >= v4)
        v5 = result - v1[1];
      v3[92].i64[0] = v5;
      v6 = v3[92].u64[1];
      if (v6 <= v4)
        v6 = v4;
      v3[92].i64[1] = v6;
      v7 = vdupq_n_s64(1uLL);
      v7.i64[0] = v4;
      v3[93] = vaddq_s64(v3[93], v7);
      *(_BYTE *)(v2 + 184) = 0;
    }
    *v1 = 0;
  }
  return result;
}

void re::internal::Callable<re::AudioMultiSceneManager::configureCommitPhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::AudioMultiSceneManager::configureCommitPhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::operator()(uint64_t a1)
{
  uint64_t **i;
  uint64_t v4[2];

  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v4);
  for (i = *(uint64_t ***)(*(_QWORD *)(a1 + 8) + 16); i; i = (uint64_t **)*i)
    re::AudioManager_PHASE::afterFrameUpdate((re::AudioManager_PHASE *)i[3]);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)22>::end((uint64_t)v4);
}

_QWORD *re::internal::Callable<re::AudioMultiSceneManager::configureCommitPhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED5CF30;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::AudioMultiSceneManager::configureCommitPhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED5CF30;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::AudioMultiSceneManager::configureCommitPhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::size()
{
  return 16;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::AudioManager_PHASE>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::AudioManager_PHASE>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::AudioManager_PHASE>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::AudioManager_PHASE>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  void *v35;
  _QWORD v36[2];
  char v37;

  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = a1 + 2;
  i = operator new(0x28uLL);
  v36[1] = a1 + 2;
  *i = 0;
  i[1] = a2;
  v13 = *a3;
  i[3] = 0;
  i[4] = 0;
  i[2] = v13;
  v37 = 1;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = a1[1];
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v26 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = (void *)*a1;
          *a1 = (uint64_t)v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*v12;
          if (*v12)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v24) = v12;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v30))
                  {
                    *(_QWORD *)(*a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*a1 + 8 * v30);
                  **(_QWORD **)(*a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_55:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v35 = (void *)*a1;
        *a1 = 0;
        if (v35)
          operator delete(v35);
        v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v31 = *a1;
  v32 = *(_QWORD **)(*a1 + 8 * v3);
  if (v32)
  {
    *i = *v32;
LABEL_72:
    *v32 = i;
    goto LABEL_73;
  }
  *i = *v12;
  *v12 = i;
  *(_QWORD *)(v31 + 8 * v3) = v12;
  if (*i)
  {
    v33 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v33 >= v7)
        v33 %= v7;
    }
    else
    {
      v33 &= v7 - 1;
    }
    v32 = (_QWORD *)(*a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  v36[0] = 0;
  ++a1[3];
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEAudioScene>>,void *>>>>::reset[abi:ne180100]((uint64_t)v36);
  return i;
}

void std::__function::__func<re::AudioMultiSceneManager::registerScene(re::ecs2::Scene const*)::$_0,std::allocator<re::AudioMultiSceneManager::registerScene(re::ecs2::Scene const*)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::AudioMultiSceneManager::registerScene(re::ecs2::Scene const*)::$_0,std::allocator<re::AudioMultiSceneManager::registerScene(re::ecs2::Scene const*)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED5CF88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::AudioMultiSceneManager::registerScene(re::ecs2::Scene const*)::$_0,std::allocator<re::AudioMultiSceneManager::registerScene(re::ecs2::Scene const*)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED5CF88;
  a2[1] = v2;
  return result;
}

void std::__function::__func<re::AudioMultiSceneManager::registerScene(re::ecs2::Scene const*)::$_0,std::allocator<re::AudioMultiSceneManager::registerScene(re::ecs2::Scene const*)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  os_unfair_lock_s *v3;

  v3 = *(os_unfair_lock_s **)(a1 + 8);
  os_unfair_lock_lock(v3 + 44);
  std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>>::unordered_map(a2, (uint64_t)&v3[4]);
  os_unfair_lock_unlock(v3 + 44);
}

uint64_t std::__function::__func<re::AudioMultiSceneManager::registerScene(re::ecs2::Scene const*)::$_0,std::allocator<re::AudioMultiSceneManager::registerScene(re::ecs2::Scene const*)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::AudioMultiSceneManager::registerScene(re::ecs2::Scene const*)::$_0,std::allocator<re::AudioMultiSceneManager::registerScene(re::ecs2::Scene const*)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::target_type()
{
}

uint64_t std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>>::unordered_map(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,std::shared_ptr<re::PersistedAssetData>> const&>(a1, i + 2, i + 2);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,std::shared_ptr<re::PersistedAssetData>> const&>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[2];
  char v28;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  i = operator new(0x28uLL);
  v27[0] = i;
  v27[1] = a1 + 16;
  *i = 0;
  i[1] = v6;
  v13 = a3[1];
  i[2] = *a3;
  i[3] = v13;
  v14 = a3[2];
  i[4] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v28 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v7 || (float)(v18 * (float)v7) < v17)
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::__rehash<true>(a1, v22);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *i = *v24;
LABEL_41:
    *v24 = i;
    goto LABEL_42;
  }
  *i = *v12;
  *v12 = i;
  *(_QWORD *)(v23 + 8 * v3) = v12;
  if (*i)
  {
    v25 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_41;
  }
LABEL_42:
  v27[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void std::__function::__func<re::AudioMultiSceneManager::triggerNotification(REAudioNotificationType)::$_0,std::allocator<re::AudioMultiSceneManager::triggerNotification(REAudioNotificationType)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::AudioMultiSceneManager::triggerNotification(REAudioNotificationType)::$_0,std::allocator<re::AudioMultiSceneManager::triggerNotification(REAudioNotificationType)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED5D018;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::AudioMultiSceneManager::triggerNotification(REAudioNotificationType)::$_0,std::allocator<re::AudioMultiSceneManager::triggerNotification(REAudioNotificationType)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED5D018;
  a2[1] = v2;
  return result;
}

void std::__function::__func<re::AudioMultiSceneManager::triggerNotification(REAudioNotificationType)::$_0,std::allocator<re::AudioMultiSceneManager::triggerNotification(REAudioNotificationType)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  os_unfair_lock_s *v3;

  v3 = *(os_unfair_lock_s **)(a1 + 8);
  os_unfair_lock_lock(v3 + 44);
  std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>>::unordered_map(a2, (uint64_t)&v3[4]);
  os_unfair_lock_unlock(v3 + 44);
}

uint64_t std::__function::__func<re::AudioMultiSceneManager::triggerNotification(REAudioNotificationType)::$_0,std::allocator<re::AudioMultiSceneManager::triggerNotification(REAudioNotificationType)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::AudioMultiSceneManager::triggerNotification(REAudioNotificationType)::$_0,std::allocator<re::AudioMultiSceneManager::triggerNotification(REAudioNotificationType)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::target_type()
{
}

void std::__function::__func<re::AudioMultiSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0,std::allocator<re::AudioMultiSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::AudioMultiSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0,std::allocator<re::AudioMultiSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED5D098;
  return result;
}

void std::__function::__func<re::AudioMultiSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0,std::allocator<re::AudioMultiSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED5D098;
}

void std::__function::__func<re::AudioMultiSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0,std::allocator<re::AudioMultiSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::operator()(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t std::__function::__func<re::AudioMultiSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0,std::allocator<re::AudioMultiSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::AudioMultiSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0,std::allocator<re::AudioMultiSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::target_type()
{
}

void std::__function::__func<re::AudioMultiSceneManager::loadAudioToSingleService(re::AudioService *,std::shared_ptr<re::AudioAssetPayload>)::$_0,std::allocator<re::AudioMultiSceneManager::loadAudioToSingleService(re::AudioService *,std::shared_ptr<re::AudioAssetPayload>)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::AudioMultiSceneManager::loadAudioToSingleService(re::AudioService *,std::shared_ptr<re::AudioAssetPayload>)::$_0,std::allocator<re::AudioMultiSceneManager::loadAudioToSingleService(re::AudioService *,std::shared_ptr<re::AudioAssetPayload>)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24ED5D128;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::AudioMultiSceneManager::loadAudioToSingleService(re::AudioService *,std::shared_ptr<re::AudioAssetPayload>)::$_0,std::allocator<re::AudioMultiSceneManager::loadAudioToSingleService(re::AudioService *,std::shared_ptr<re::AudioAssetPayload>)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED5D128;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<re::AudioMultiSceneManager::loadAudioToSingleService(re::AudioService *,std::shared_ptr<re::AudioAssetPayload>)::$_0,std::allocator<re::AudioMultiSceneManager::loadAudioToSingleService(re::AudioService *,std::shared_ptr<re::AudioAssetPayload>)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::operator()(re *a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  os_unfair_lock_s *v4;
  _QWORD *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t v12;
  uint8_t buf[24];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = (std::__shared_weak_count *)a2[1];
  v10 = (_QWORD *)*a2;
  v3 = v10;
  v11 = v2;
  *a2 = 0;
  a2[1] = 0;
  if (v3 && *v3)
  {
    v4 = (os_unfair_lock_s *)*((_QWORD *)a1 + 2);
    os_unfair_lock_lock(v4 + 44);
    v12 = v3[13];
    *(_QWORD *)buf = &v12;
    v5 = std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t)&v4[4], &v12, (uint64_t)&std::piecewise_construct, (_QWORD **)buf);
    std::shared_ptr<std::atomic<re::VideoReturn>>::operator=[abi:nn180100](v5 + 3, (uint64_t *)&v10);
    os_unfair_lock_unlock(v4 + 44);
    v2 = v11;
    if (!v11)
      return;
  }
  else
  {
    v6 = *re::audioLogObjects(a1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v9 = v3[13];
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v9;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "[RE] [AudioMultiSceneManager] Cannot add asset: %llu to assetGenerators with a null generator block.", buf, 0xCu);
      if (!v2)
        return;
    }
    else if (!v2)
    {
      return;
    }
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t std::__function::__func<re::AudioMultiSceneManager::loadAudioToSingleService(re::AudioService *,std::shared_ptr<re::AudioAssetPayload>)::$_0,std::allocator<re::AudioMultiSceneManager::loadAudioToSingleService(re::AudioService *,std::shared_ptr<re::AudioAssetPayload>)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::AudioMultiSceneManager::loadAudioToSingleService(re::AudioService *,std::shared_ptr<re::AudioAssetPayload>)::$_0,std::allocator<re::AudioMultiSceneManager::loadAudioToSingleService(re::AudioService *,std::shared_ptr<re::AudioAssetPayload>)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::target_type()
{
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x28uLL);
  v24[1] = a1 + 16;
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  i[4] = 0;
  v25 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return i;
}

_DWORD *re::ecs2::SkeletalPoseBufferComponent::initializeBufferRanges(_DWORD *this, const re::MeshAsset *a2, const re::MeshNameMap *a3, const re::SkeletalPoseRigMappingData *a4)
{
  const re::SkeletalPoseRigMappingData *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unsigned __int16 v23;
  int v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  const re::SkeletalPoseRigMappingData *v29;
  int v30;
  int *v31;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  const re::MeshAsset *v36;
  _anonymous_namespace_ *v37;
  _QWORD *v38;
  int v40;
  const char *v41;
  __int16 v42;
  int v43;
  __int16 v44;
  unint64_t v45;
  __int16 v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 11) == *((_QWORD *)a4 + 1))
    return this;
  v4 = a4;
  v6 = (uint64_t)this;
  v7 = *((_QWORD *)a4 + 32);
  v8 = *((_QWORD *)this + 14);
  if (v8 < v7)
  {
    if (*((_QWORD *)this + 13) < v7)
    {
      re::DynamicArray<re::Matrix4x4<float>>::setCapacity((_QWORD *)this + 12, *((_QWORD *)a4 + 32));
      v8 = *(_QWORD *)(v6 + 112);
    }
    v9 = v7 - v8;
    if (v7 > v8)
    {
      v10 = v8 << 6;
      do
      {
        v11 = (_OWORD *)(*(_QWORD *)(v6 + 128) + v10);
        *v11 = xmmword_2260E5F10;
        v11[1] = xmmword_2260E5F20;
        v11[2] = xmmword_2260E5F40;
        v11[3] = xmmword_2260E5D70;
        v10 += 64;
        --v9;
      }
      while (v9);
    }
    goto LABEL_10;
  }
  if (v8 > v7)
  {
LABEL_10:
    *(_QWORD *)(v6 + 112) = v7;
    ++*(_DWORD *)(v6 + 120);
  }
  v37 = (_anonymous_namespace_ *)(v6 + 136);
  this = re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::clear((_QWORD *)(v6 + 136));
  v12 = *((_QWORD *)a3 + 30);
  v38 = (_QWORD *)v6;
  if (*(_QWORD *)(v6 + 144) < (unint64_t)v12)
  {
    this = re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::setCapacity(v37, *((_QWORD *)a3 + 30));
    v12 = *((_QWORD *)a3 + 30);
  }
  if (v12)
  {
    v13 = (unsigned int *)*((_QWORD *)a3 + 31);
    v35 = &v13[v12];
    v36 = a2;
    do
    {
      v14 = *v13;
      v15 = *((_QWORD *)a2 + 55);
      v16 = re::MeshNameMap::modelIndex(a3, *v13);
      v17 = *((_QWORD *)a2 + 52);
      if (v17 <= v16)
      {
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v48 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v40 = 136315906;
        v41 = "operator[]";
        v42 = 1024;
        v43 = 797;
        v44 = 2048;
        v45 = v16;
        v46 = 2048;
        v47 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      this = (_DWORD *)re::DataArray<re::MeshModel>::tryGet(v15 + 8, *(_QWORD *)(*((_QWORD *)a2 + 54) + 8 * v16));
      if (this)
      {
        v18 = (uint64_t)this;
        this = (_DWORD *)re::MeshNameMap::meshPartStartIndexForInstance(a3, v14);
        v19 = *(_QWORD *)(v18 + 176);
        if (v19)
        {
          v20 = *(unsigned __int16 *)(v19 + 8);
          v21 = *((_QWORD *)v36 + 117);
          LOWORD(v40) = 0;
          if (v20)
          {
            v22 = (int)this;
            v23 = 0;
            v24 = 0;
            v25 = 0;
            do
            {
              v26 = *(_QWORD *)(v18 + 176);
              if (v26 && *(_QWORD *)(v26 + 8) > (unint64_t)v23)
                v27 = *(unsigned int *)(*(_QWORD *)(v26 + 16) + 72 * v23 + 4);
              else
                v27 = 0xFFFFFFFFLL;
              if (v21 > v27)
              {
                v28 = re::MeshNameMap::skinnedPartIndexForPartInstance(a3, v22 + v23);
                v29 = v4;
                this = (_DWORD *)re::SkeletalPoseRigMappingData::jointTransformStartAndEndIndex(v4, v28);
                v30 = this[1];
                if (v30)
                {
                  v31 = this;
                  if (v24 != *this || v25 != v30)
                  {
                    *(_QWORD *)&v48 = __PAIR64__(*this, v14);
                    DWORD2(v48) = v30;
                    *(_QWORD *)&v51 = 0;
                    *(_QWORD *)&v50 = 0;
                    v49 = 0uLL;
                    DWORD2(v50) = 0;
                    re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::add(v37, (uint64_t *)&v48);
                    if ((_QWORD)v49 && (_QWORD)v51)
                      (*(void (**)(void))(*(_QWORD *)v49 + 40))();
                    v33 = v38[21];
                    v34 = v38[19] - 1;
                    if (*(_QWORD *)(v33 + 56 * v34 + 24) < v20)
                      re::DynamicArray<unsigned short>::setCapacity((_QWORD *)(v33 + 56 * v34 + 16), v20);
                    v24 = *v31;
                    v25 = v31[1];
                  }
                  this = re::DynamicArray<unsigned short>::add((_QWORD *)(v38[21] + 56 * v38[19] - 40), &v40);
                }
                v4 = v29;
              }
              v23 = v40 + 1;
              LOWORD(v40) = v23;
            }
            while (v20 > v23);
          }
        }
        a2 = v36;
      }
      ++v13;
    }
    while (v13 != v35);
  }
  v38[11] = *((_QWORD *)v4 + 1);
  return this;
}

_QWORD *re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = result;
  v2 = result[2];
  result[2] = 0;
  if (v2)
  {
    v3 = 56 * v2;
    v4 = (_QWORD *)(result[4] + 48);
    do
    {
      result = (_QWORD *)*(v4 - 4);
      if (result)
      {
        if (*v4)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
        *v4 = 0;
        *(v4 - 3) = 0;
        *(v4 - 2) = 0;
        *(v4 - 4) = 0;
        ++*((_DWORD *)v4 - 2);
      }
      v4 += 7;
      v3 -= 56;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::add(_anonymous_namespace_ *result, uint64_t *a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  v5 = *((_QWORD *)result + 2);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)result)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::setCapacity(result, v10);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    v5 = *((_QWORD *)v3 + 2);
  }
  v11 = *((_QWORD *)v3 + 4) + 56 * v5;
  v12 = *a2;
  *(_DWORD *)(v11 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v11 = v12;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_DWORD *)(v11 + 40) = 0;
  v13 = a2[3];
  *(_QWORD *)(v11 + 16) = a2[2];
  *(_QWORD *)(v11 + 24) = v13;
  a2[2] = 0;
  a2[3] = 0;
  v14 = *(_QWORD *)(v11 + 32);
  *(_QWORD *)(v11 + 32) = a2[4];
  a2[4] = v14;
  v15 = *(_QWORD *)(v11 + 48);
  *(_QWORD *)(v11 + 48) = a2[6];
  a2[6] = v15;
  ++*((_DWORD *)a2 + 10);
  ++*(_DWORD *)(v11 + 40);
  ++*((_QWORD *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

id *re::ecs2::SkeletalPoseBufferComponent::resetDeformerInputs(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id *v8;
  void *v9;
  re *inited;
  uint64_t v11;
  id location;
  _QWORD v14[3];
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v8 = (id *)(a1 + 32);
  if (a2)
    v9 = (void *)(a2 + 8);
  else
    v9 = 0;
  inited = (re *)objc_initWeak(&location, v9);
  memset(v14, 0, sizeof(v14));
  v15 = re::globalAllocators(inited)[2];
  v16 = 0;
  re::FramePersistentPtr<re::ecs2::SkeletalPoseBufferComponent::SkeletalPoseBufferInputs,re::FrameManager>::reset(v8, &location, a3, (uint64_t)v14);
  if (v16)
  {
    (*(void (**)(_QWORD *))*v16)(v16);
    if (v16 != v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  objc_destroyWeak(&location);
  if (a5)
  {
    v11 = 168 * a5;
    do
    {
      ++*(_BYTE *)(a4 + 2);
      *(_QWORD *)(a4 + 40) = 0;
      ++*(_BYTE *)(a4 + 15);
      *(_QWORD *)(a4 + 144) = 0;
      a4 += 168;
      v11 -= 168;
    }
    while (v11);
  }
  return v8;
}

re::ecs2::SkeletalPoseBufferComponentStateImpl *re::ecs2::SkeletalPoseBufferComponentStateImpl::SkeletalPoseBufferComponentStateImpl(re::ecs2::SkeletalPoseBufferComponentStateImpl *this)
{
  uint64_t *v2;
  uint64_t v4[2];
  _QWORD v5[2];
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24ED5D1A8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 5) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  v2 = (uint64_t *)((char *)this + 24);
  v6[0] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v6[1] = re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v6[2] = re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v5[0] = v6;
  v5[1] = 3;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::FixedArray((_anonymous_namespace_ *)v4, (uint64_t)v5);
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=(v2, v4);
  if (v4[0] && v4[1])
    (*(void (**)(void))(*(_QWORD *)v4[0] + 40))();
  return this;
}

BOOL re::ecs2::SkeletalPoseBufferComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v17;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;

  v8 = a1;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 104))(v9);
  else
    v10 = 0;
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v63, a5, 0);
  v11 = v63;
  v12 = v64;
  v63 = a4;
  v64 = v11;
  v65 = v12;
  v13 = (unsigned __int16)v12;
  v14 = v12 & 0xFFFF0000;
  if (v11 != a5 || v13 != 0xFFFF || v14 != 4294901760)
  {
    v61 = v10;
    v62 = (unint64_t *)(a3 + 40);
    v17 = (unint64_t *)(a3 + 32);
    __asm { FMOV            V8.2S, #1.0 }
    v59 = v8;
    v60 = a3;
    while (1)
    {
      v22 = (uint64_t *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v64);
      v23 = *v22;
      v24 = *(_QWORD *)(*v22 + 16);
      v25 = *(_QWORD *)(v24 + 184);
      v26 = *(_QWORD **)(*v22 + 40);
      if (v26)
      {
        if (v25)
        {
          v27 = *(_QWORD *)(v25 + 248) != *v26 || v10 == 0;
          if (!v27 && v26[1] == v10)
            goto LABEL_81;
          v28 = *(_QWORD *)(v8 + 8);
          v29 = *(_QWORD *)(v25 + 392);
          if (v29)
          {
            v31 = *(_QWORD *)(v29 + 88);
            v30 = *(_QWORD *)(v29 + 96);
          }
          else
          {
            v31 = 0;
            v30 = 0;
          }
        }
        else
        {
          v31 = 0;
          v30 = 0;
          v28 = *(_QWORD *)(v8 + 8);
        }
        re::ecs2::SkeletalPoseBufferComponent::resetDeformerInputs(*v22, *(_QWORD *)(v28 + 136), 0, v30, v31);
      }
      v32 = *(_QWORD *)(v24 + 176);
      v33 = !v32 || v25 == 0;
      v34 = v17;
      if (!v33)
      {
        v34 = v17;
        if (*(_QWORD *)(v32 + 40))
        {
          v34 = v17;
          if (*(_QWORD *)(v23 + 112))
          {
            v34 = v62;
            if (*(_QWORD *)(v23 + 184) != *(_QWORD *)(v23 + 88))
              break;
          }
        }
      }
LABEL_80:
      v56 = v63;
      v57 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v64);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v56, v57, *v34);
LABEL_81:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v64);
      if (v64 == a5 && (unsigned __int16)v65 == 0xFFFF && WORD1(v65) == 0xFFFF)
        return *(_DWORD *)(a5 + 40) != 0;
    }
    *(_QWORD *)(v23 + 192) = 0;
    memset_pattern16((void *)(v23 + 200), &unk_22610D490, 0x40uLL);
    v35 = *(_QWORD *)(v23 + 600);
    *(_QWORD *)(v23 + 600) = 0;
    if (v35)
    {
      v36 = v35 << 7;
      v37 = (_QWORD *)(*(_QWORD *)(v23 + 616) + 64);
      do
      {
        v38 = v37[5];
        if (v38)
        {
          if (v37[6])
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 40))(v38, v37[7]);
            v37[6] = 0;
            v37[7] = 0;
          }
          v37[5] = 0;
        }
        v39 = v37[1];
        if (v39)
        {
          if (v37[2])
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v39 + 40))(v39, v37[3]);
            v37[2] = 0;
            v37[3] = 0;
          }
          v37[1] = 0;
        }
        v40 = *(v37 - 2);
        if (v40)
        {
          if (*(v37 - 1))
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v40 + 40))(v40, *v37);
            *(v37 - 1) = 0;
            *v37 = 0;
          }
          *(v37 - 2) = 0;
        }
        v41 = *(v37 - 7);
        if (v41)
        {
          if (*(v37 - 3))
            (*(void (**)(uint64_t))(*(_QWORD *)v41 + 40))(v41);
          *(v37 - 3) = 0;
          *(v37 - 6) = 0;
          *(v37 - 5) = 0;
          *(v37 - 7) = 0;
          ++*((_DWORD *)v37 - 8);
        }
        v37 += 16;
        v36 -= 128;
      }
      while (v36);
      v42 = *(_QWORD *)(v23 + 600);
      v10 = v61;
    }
    else
    {
      v42 = 0;
    }
    ++*(_DWORD *)(v23 + 608);
    v43 = *(_QWORD *)(v23 + 152);
    if (v42 >= v43)
    {
      if (v42 <= v43)
      {
LABEL_79:
        *(_QWORD *)(v23 + 184) = *(_QWORD *)(v23 + 88);
        v34 = v62;
        goto LABEL_80;
      }
      v47 = (v43 << 7) | 0x40;
      v48 = *(_QWORD *)(v23 + 152);
      do
      {
        v49 = *(_QWORD *)(v23 + 616);
        v50 = (_QWORD *)(v49 + v47);
        v51 = *(_QWORD *)(v49 + v47 + 40);
        if (v51)
        {
          if (v50[6])
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v51 + 40))(v51, *(_QWORD *)(v49 + v47 + 56));
            v50[6] = 0;
            v50[7] = 0;
          }
          v50[5] = 0;
        }
        v52 = v50[1];
        if (v52)
        {
          if (*(_QWORD *)(v49 + v47 + 16))
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v52 + 40))(v52, *(_QWORD *)(v49 + v47 + 24));
            *(_QWORD *)(v49 + v47 + 16) = 0;
            *(_QWORD *)(v49 + v47 + 24) = 0;
          }
          v50[1] = 0;
        }
        v53 = *(v50 - 2);
        if (v53)
        {
          if (*(_QWORD *)(v49 + v47 - 8))
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 40))(v53, *(_QWORD *)(v49 + v47));
            *(_QWORD *)(v49 + v47 - 8) = 0;
            *(_QWORD *)(v49 + v47) = 0;
          }
          *(v50 - 2) = 0;
        }
        v54 = v49 + v47;
        v55 = *(_QWORD *)(v49 + v47 - 56);
        if (v55)
        {
          if (*(_QWORD *)(v54 - 24))
            (*(void (**)(uint64_t))(*(_QWORD *)v55 + 40))(v55);
          *(_QWORD *)(v54 - 24) = 0;
          *(_QWORD *)(v49 + v47 - 48) = 0;
          *(_QWORD *)(v49 + v47 - 40) = 0;
          *(_QWORD *)(v49 + v47 - 56) = 0;
          ++*(_DWORD *)(v49 + v47 - 32);
        }
        ++v48;
        v47 += 128;
      }
      while (v48 < *(_QWORD *)(v23 + 600));
    }
    else
    {
      if (*(_QWORD *)(v23 + 592) < v43)
      {
        re::DynamicArray<re::ecs2::SkeletalPoseBufferComponent::MeshBoundsEstimatorForJointRange>::setCapacity((_QWORD *)(v23 + 584), *(_QWORD *)(v23 + 152));
        v42 = *(_QWORD *)(v23 + 600);
      }
      v44 = v43 - v42;
      if (v43 > v42)
      {
        v45 = v42 << 7;
        do
        {
          v46 = *(_QWORD *)(v23 + 616) + v45;
          *(_DWORD *)v46 = -1;
          *(_QWORD *)(v46 + 16) = 0;
          *(_QWORD *)(v46 + 24) = 0;
          *(_QWORD *)(v46 + 8) = 0;
          *(_DWORD *)(v46 + 32) = 0;
          *(_OWORD *)(v46 + 40) = 0u;
          *(_OWORD *)(v46 + 56) = 0u;
          *(_OWORD *)(v46 + 72) = 0u;
          *(_QWORD *)(v46 + 88) = 0;
          *(_QWORD *)(v46 + 96) = _D8;
          *(_QWORD *)(v46 + 112) = 0;
          *(_QWORD *)(v46 + 120) = 0;
          v45 += 128;
          *(_QWORD *)(v46 + 104) = 0;
          --v44;
        }
        while (v44);
      }
    }
    *(_QWORD *)(v23 + 600) = v43;
    ++*(_DWORD *)(v23 + 608);
    v8 = v59;
    a3 = v60;
    v10 = v61;
    goto LABEL_79;
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::SkeletalPoseBufferComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7;
  re::DeformerFeatureFlags *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  re *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  re *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  re::MeshNameMap *v32;
  _anonymous_namespace_ *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  int started;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  unsigned __int16 *v59;
  unint64_t v60;
  uint64_t i;
  unsigned int v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  re::SkinnedMeshBoundsEstimator *v76;
  unsigned int v77;
  uint64_t v78;
  void **v79;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unsigned __int16 *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  float32x4_t *v89;
  uint64_t v90;
  unint64_t v91;
  __int128 *v92;
  __int128 *v93;
  unint64_t v94;
  uint64_t v95;
  unsigned int v96;
  double v97;
  double v98;
  double v99;
  double v100;
  __int128 *v101;
  __int128 *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unsigned __int16 *v110;
  uint64_t v111;
  id v112;
  _anonymous_namespace_ *v113;
  unint64_t v114;
  uint64_t v115;
  __int128 *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  float32x4_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  NSObject *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v137;
  re::DeformerFeatureFlags *v139;
  uint64_t v140;
  re::ecs2::MeshDeformationComponent *v141;
  re::ecs2::MeshComponent *v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  re::MeshNameMap *v146;
  uint64_t v147;
  _anonymous_namespace_ *v148;
  uint64_t v149;
  re::SkinnedMeshBoundsEstimator *v150;
  _DWORD *v151;
  _DWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t v155;
  const void **v156;
  uint64_t v157;
  id v158;
  unint64_t v159;
  unint64_t v160;
  id *v161;
  int isSkinningAssignLoggingEnabled;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  __int128 *v168;
  uint64_t v169;
  int *v170;
  uint64_t v171;
  _QWORD v172[8];
  id v173[2];
  id v174[2];
  id v175[2];
  char v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _BYTE v180[28];
  __int16 v181;
  unint64_t v182;
  uint8_t buf[32];
  __int128 v184;
  __int128 v185;
  __int128 v186;
  _OWORD v187[3];
  __int128 v188;
  __int128 v189;
  uint64_t v190;

  v7 = a1;
  v190 = *MEMORY[0x24BDAC8D0];
  v149 = re::RenderManager::perFrameAllocator(*(re::RenderManager **)(a1 + 8));
  v8 = *(re::DeformerFeatureFlags **)(v7 + 16);
  v140 = *(_QWORD *)(v7 + 8);
  v9 = *(_QWORD *)(v140 + 136);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(_QWORD *)(v9 + 32);
  if (v8)
  {
    v8 = (re::DeformerFeatureFlags *)(*(uint64_t (**)(re::DeformerFeatureFlags *))(*(_QWORD *)v8 + 104))(v8);
    v139 = v8;
  }
  else
  {
    v139 = 0;
  }
  isSkinningAssignLoggingEnabled = re::DeformerFeatureFlags::isSkinningAssignLoggingEnabled(v8);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)buf, a5, 0);
  v177 = a4;
  v178 = *(_QWORD *)buf;
  v179 = *(_QWORD *)&buf[8];
  if (*(_QWORD *)buf != a5
    || *(unsigned __int16 *)&buf[8] != 0xFFFFLL
    || (*(_DWORD *)&buf[8] & 0xFFFF0000) != 0xFFFF0000)
  {
    v143 = v11 & 0xFFFFFFFFFFFFFFFLL;
    v144 = v11 & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)v10 << 60);
    v137 = a5;
    v155 = v7;
    do
    {
      v12 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v178);
      v13 = *(_QWORD **)v12;
      v14 = *(_QWORD **)(*(_QWORD *)v12 + 16);
      v15 = (re *)v14[23];
      if (*((_QWORD *)v15 + 30))
      {
        v142 = (re::ecs2::MeshComponent *)v14[22];
        v153 = v13;
        v16 = (_QWORD *)v13[5];
        if (!v16 || *((_QWORD *)v15 + 31) != *v16)
        {
          v154 = v14;
          v17 = v13[16];
          v18 = v13[14];
          v19 = *((_QWORD *)v15 + 49);
          v20 = *(_QWORD *)(v19 + 88);
          v21 = *(_QWORD *)(v19 + 96);
          v22 = *(_QWORD *)(v7 + 8);
          v23 = v15;
          v24 = re::globalAllocators(v15);
          v25 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24[2] + 32))(v24[2], 48, 8);
          v141 = v23;
          v26 = *((_QWORD *)v23 + 31);
          v27 = objc_msgSend(*(id *)(v140 + 184), sel_newBufferWithBytes_length_options_, v17, v18 << 6, 0);
          *v25 = v26;
          v25[1] = v139;
          v25[2] = v27;
          v25[3] = 0;
          v25[4] = 0;
          v25[5] = 0;
          v28 = *(_QWORD *)(v22 + 136);
          v29 = v20;
          v157 = v21;
          v161 = re::ecs2::SkeletalPoseBufferComponent::resetDeformerInputs((uint64_t)v153, v28, v25, v21, v20);
          if (v27)

          v30 = (_QWORD *)re::AssetHandle::asset<re::MeshAsset>((re::ecs2::MeshComponent *)((char *)v142 + 32));
          v31 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v154 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          if (v31)
            v32 = (re::MeshNameMap *)(v31 + 216);
          else
            v32 = (re::MeshNameMap *)(v30 + 56);
          v33 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v154 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
          v153[22] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v155 + 8) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v155 + 8) + 136) + 16) << 60);
          v34 = v161[1];
          v34[4] = v29;
          if (v29)
          {
            if (v29 >> 60)
              goto LABEL_161;
            v34[5] = v35;
            if (!v35)
            {
LABEL_162:
              re::internal::assertLog((re::internal *)4, v37, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
              _os_crash();
              __break(1u);
LABEL_163:
              v172[0] = 0;
              v188 = 0u;
              v189 = 0u;
              memset(v187, 0, sizeof(v187));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v180 = 136315906;
              *(_QWORD *)&v180[4] = "operator[]";
              *(_WORD *)&v180[12] = 1024;
              *(_DWORD *)&v180[14] = 797;
              *(_WORD *)&v180[18] = 2048;
              *(_QWORD *)&v180[20] = 0;
              v181 = 2048;
              v182 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            v38 = (_QWORD *)v35;
            if (v29 != 1)
            {
              bzero((void *)v35, 16 * v29 - 16);
              v38 += 2 * v29 - 2;
            }
            *v38 = 0;
            v38[1] = 0;
          }
          v148 = v33;
          v160 = v29;
          v39 = v153[19];
          if (v39)
          {
            v40 = 0;
            v41 = v153[21];
            v145 = v153[19];
            v146 = v32;
            v163 = v30;
            v147 = v41;
            do
            {
              v42 = (unsigned int *)(v41 + 56 * v40);
              if (*v42 >= *((_DWORD *)v32 + 54))
              {
                if (isSkinningAssignLoggingEnabled)
                {
                  v48 = *re::ecsComponentsLogObjects((re *)v35);
                  v35 = os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT);
                  if ((_DWORD)v35)
                  {
                    v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v155 + 8) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL;
                    v50 = v154[35];
                    *(_DWORD *)buf = 134218242;
                    *(_QWORD *)&buf[4] = v49;
                    *(_WORD *)&buf[12] = 2080;
                    *(_QWORD *)&buf[14] = v50;
                    _os_log_impl(&dword_224FE9000, v48, OS_LOG_TYPE_DEFAULT, "[DeformerLogging] Frame[%llu]: Entity[%s] has mismatched mesh joints from mesh scene data.", buf, 0x16u);
                  }
                }
              }
              else
              {
                v159 = v40;
                v43 = v30[55];
                v44 = re::MeshNameMap::modelIndex(v32, *v42);
                v29 = v30[52];
                if (v29 <= v44)
                  goto LABEL_156;
                v35 = re::DataArray<re::MeshModel>::tryGet(v43 + 8, *(_QWORD *)(v30[54] + 8 * v44));
                v40 = v159;
                if (v35)
                {
                  v45 = (_QWORD *)v35;
                  v46 = *(_QWORD *)(v35 + 176);
                  if (v46)
                    v47 = *(_QWORD *)(v46 + 8);
                  else
                    v47 = 0;
                  started = re::MeshNameMap::meshPartStartIndexForInstance(v32, *v42);
                  v52 = v41 + 56 * v159;
                  v53 = *(_DWORD *)(v52 + 4);
                  v152 = (_DWORD *)(v52 + 4);
                  v54 = *(unsigned int *)(v52 + 8);
                  v151 = (_DWORD *)(v52 + 8);
                  v55 = (uint64_t)*((id *)v161[1] + 2);
                  v158 = (id)v55;
                  v58 = *(_QWORD *)(v52 + 32);
                  v57 = (unint64_t *)(v52 + 32);
                  v56 = v58;
                  v59 = (unsigned __int16 *)v57[2];
                  v156 = (const void **)(v57 + 2);
                  if (v58)
                  {
                    v60 = (v53 << 6) | (unint64_t)(v54 << 38);
                    for (i = 2 * v56; i; i -= 2)
                    {
                      v62 = *v59;
                      if (v62 >= v47)
                      {
                        if (isSkinningAssignLoggingEnabled)
                        {
                          v71 = *re::ecsComponentsLogObjects((re *)v55);
                          v55 = os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT);
                          if ((_DWORD)v55)
                          {
                            v72 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v155 + 8) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL;
                            v73 = v154[35];
                            *(_DWORD *)buf = 134218242;
                            *(_QWORD *)&buf[4] = v72;
                            *(_WORD *)&buf[12] = 2080;
                            *(_QWORD *)&buf[14] = v73;
                            _os_log_impl(&dword_224FE9000, v71, OS_LOG_TYPE_DEFAULT, "[DeformerLogging] Frame[%llu]: Entity[%s] has mismatched mesh part indices from skinning data.", buf, 0x16u);
                          }
                        }
                      }
                      else
                      {
                        v55 = re::MeshDeformationRuntimeData::absoluteDeformedMeshPartIndex((re::ecs2::MeshDeformationComponent *)((char *)v141 + 232), started + v62);
                        if (v160 > v55)
                        {
                          v63 = v55;
                          *(_QWORD *)v180 = v158;
                          *(_QWORD *)&v180[8] = v60;
                          v64 = v161[1];
                          v44 = v64[4];
                          if (v44 <= v63)
                            goto LABEL_153;
                          v65 = v64[5] + 16 * v63;
                          NS::SharedPtr<MTL::Texture>::operator=((void **)v65, (void **)v180);
                          *(_QWORD *)(v65 + 8) = *(_QWORD *)&v180[8];
                          v55 = *(_QWORD *)v180;
                          if (*(_QWORD *)v180)

                          v66 = v161[1];
                          v44 = v66[4];
                          if (v44 <= v63)
                            goto LABEL_154;
                          v67 = v157 + 168 * v63;
                          v68 = v66[5] + 16 * v63;
                          ++*(_BYTE *)(v67 + 2);
                          *(_QWORD *)(v67 + 40) = v68;
                          v69 = v161[1];
                          v44 = v69[4];
                          if (v44 <= v63)
                            goto LABEL_155;
                          v70 = v69[5] + 16 * v63;
                          ++*(_BYTE *)(v67 + 15);
                          *(_QWORD *)(v157 + 168 * v63 + 144) = v70;
                        }
                      }
                      ++v59;
                    }
                  }
                  v44 = v153[75];
                  v29 = v159;
                  if (v44 <= v159)
                    goto LABEL_157;
                  v74 = v153[77];
                  v75 = v74 + (v159 << 7);
                  v76 = (re::SkinnedMeshBoundsEstimator *)(v75 + 48);
                  v77 = *v42;
                  v150 = (re::SkinnedMeshBoundsEstimator *)(v75 + 48);
                  if (*(_DWORD *)v75 == *v42)
                  {
                    v78 = *(_QWORD *)(v75 + 24);
                    if (v78 == *v57 && !memcmp(*(const void **)(v74 + (v159 << 7) + 40), *v156, 2 * v78))
                      goto LABEL_102;
                  }
                  *(_DWORD *)v75 = v77;
                  v79 = (void **)(v75 + 8);
                  if ((unint64_t *)(v75 + 8) != v57 - 2)
                  {
                    v80 = (void *)*(v57 - 2);
                    if (*v79)
                    {
                      if (v80)
                      {
                        re::DynamicArray<unsigned short>::copy(v79, (uint64_t)(v57 - 2));
                        v81 = v74 + (v159 << 7);
                      }
                      else
                      {
                        v81 = v74 + (v159 << 7);
                        *(_QWORD *)(v81 + 24) = 0;
                      }
                      ++*(_DWORD *)(v81 + 32);
                    }
                    else if (v80)
                    {
                      v82 = *v57;
                      *v79 = v80;
                      re::DynamicArray<unsigned short>::setCapacity(v79, v82);
                      ++*(_DWORD *)(v74 + (v159 << 7) + 32);
                      re::DynamicArray<unsigned short>::copy(v79, (uint64_t)(v57 - 2));
                    }
                  }
                  v83 = *v57;
                  *(_DWORD *)&buf[16] = 1;
                  v184 = 0uLL;
                  *(_QWORD *)&buf[8] = 0;
                  *(_QWORD *)buf = v149;
                  re::DynamicOverflowArray<re::AABB,8ul>::setCapacity(buf, v83);
                  *(_DWORD *)&buf[16] += 2;
                  if (!*v57)
                    goto LABEL_163;
                  v44 = (unint64_t)(v45 + 12);
                  v84 = (unsigned __int16 *)*v156;
                  v85 = 2 * *v57;
                  do
                  {
                    v86 = *v84;
                    v87 = v45[7];
                    if (v87 <= v86)
                    {
                      v172[0] = 0;
                      v188 = 0u;
                      v189 = 0u;
                      memset(v187, 0, sizeof(v187));
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v180 = 136315906;
                      *(_QWORD *)&v180[4] = "operator[]";
                      *(_WORD *)&v180[12] = 1024;
                      *(_DWORD *)&v180[14] = 476;
                      *(_WORD *)&v180[18] = 2048;
                      *(_QWORD *)&v180[20] = v86;
                      v181 = 2048;
                      v182 = v87;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
                      goto LABEL_152;
                    }
                    v88 = v45[8];
                    v89 = (float32x4_t *)(v88 + 560 * *v84 + 432);
                    if (v86 >= v47
                      || ((v90 = v45[22]) == 0 || *(_QWORD *)(v90 + 8) <= v86
                        ? (v91 = 0xFFFFFFFFLL)
                        : (v91 = *(unsigned int *)(*(_QWORD *)(v90 + 16) + 72 * *v84 + 4)),
                          v163[117] <= v91))
                    {
                      re::DynamicOverflowArray<re::AABB,8ul>::add((uint64_t)buf, (uint64_t)v89);
                    }
                    else
                    {
                      re::AABB::transform(v89, (float32x4_t *)(v88 + 560 * *v84 + 368), (uint64_t)v187);
                      re::DynamicOverflowArray<re::AABB,8ul>::ensureCapacity((_anonymous_namespace_ *)buf);
                      if ((buf[16] & 1) != 0)
                        v92 = &v184;
                      else
                        v92 = (__int128 *)*((_QWORD *)&v184 + 1);
                      v93 = &v92[2 * *(_QWORD *)&buf[8]];
                      *v93 = v187[0];
                      v93[1] = v187[1];
                      ++*(_QWORD *)&buf[8];
                      *(_DWORD *)&buf[16] += 2;
                    }
                    ++v84;
                    v85 -= 2;
                  }
                  while (v85);
                  if (!*v57)
                    goto LABEL_163;
                  v94 = *(unsigned __int16 *)*v156;
                  v176 = 0;
                  re::SkinningModelUtil::inverseBindPoseBufferForPart(v45 + 12, v94, v175);
                  v174[0] = 0;
                  v174[1] = 0;
                  re::SkinningModelUtil::skinnedInfluenceDataBuffer((uint64_t)(v45 + 12), v94, &v176, (uint64_t)v174);
                  re::ReadOnlyCPUAccessibleBufferSliceContent::make(v174, (uint64_t)v187);
                  re::ReadOnlyCPUAccessibleBufferSliceContent::make(v175, (uint64_t)v180);
                  v95 = v45[22];
                  if (v95 && *(_QWORD *)(v95 + 8) > v94)
                    v96 = *(unsigned __int8 *)(*(_QWORD *)(v95 + 16) + 72 * v94 + 2);
                  else
                    v96 = 0;
                  re::SkinningModelUtil::skinnedEndIndicesBuffer((_QWORD *)v44, v94, v173);
                  re::ReadOnlyCPUAccessibleBufferSliceContent::make(v173, (uint64_t)v172);
                  if (v96)
                  {
                    v76 = v150;
                    goto LABEL_81;
                  }
                  v76 = v150;
                  if (LOBYTE(v172[0]))
                  {
                    v170 = (int *)v172[1];
                    v171 = v172[2] >> 2;
                  }
                  else
                  {
LABEL_81:
                    v170 = 0;
                    v171 = 0;
                  }
                  re::SkinnedMeshBoundsEstimator::deinit(v76);
                  if (v176)
                  {
                    if ((buf[16] & 1) != 0)
                      v101 = &v184;
                    else
                      v101 = (__int128 *)*((_QWORD *)&v184 + 1);
                    v168 = v101;
                    v169 = *(_QWORD *)&buf[8];
                    v166 = *(_QWORD *)&v180[8];
                    v167 = *(_QWORD *)&v180[16] >> 6;
                    v164 = *((_QWORD *)&v187[0] + 1);
                    v165 = *(_QWORD *)&v187[1] >> 2;
                    re::SkinnedMeshBoundsEstimator::init<re::PackedSkinningInfluence>((uint64_t)v76, (uint64_t)&v168, (uint64_t)&v166, &v164, &v170, v96, v97, v98, v99, v100);
                  }
                  else
                  {
                    if ((buf[16] & 1) != 0)
                      v102 = &v184;
                    else
                      v102 = (__int128 *)*((_QWORD *)&v184 + 1);
                    v168 = v102;
                    v169 = *(_QWORD *)&buf[8];
                    v166 = *(_QWORD *)&v180[8];
                    v167 = *(_QWORD *)&v180[16] >> 6;
                    v164 = *((_QWORD *)&v187[0] + 1);
                    v165 = *(_QWORD *)&v187[1] >> 3;
                    re::SkinnedMeshBoundsEstimator::init<re::SkinningInfluence>((uint64_t)v76, (uint64_t)&v168, (uint64_t)&v166, &v164, &v170, v96, v97, v98, v99);
                  }
                  re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)v172);
                  if (v173[0])

                  re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)v180);
                  re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)v187);
                  if (v174[0])

                  if (v175[0])
                  if (*(_QWORD *)buf && (buf[16] & 1) == 0)
                    (*(void (**)(void))(**(_QWORD **)buf + 40))();
LABEL_102:
                  v103 = v153[24];
                  v104 = 8;
                  if (v103 > 8)
                    v104 = v153[24];
                  v105 = v104 - 8;
                  v29 = v159;
                  do
                  {
                    if (v103 <= v105)
                      goto LABEL_123;
                    v106 = --v103 & 7;
                  }
                  while ((v153[(v103 & 7) + 25] & 0xFFFFFFFFFFFFFFFuLL) > v143);
                  v107 = *v57;
                  *(_DWORD *)&buf[16] = 1;
                  v184 = 0uLL;
                  *(_QWORD *)&buf[8] = 0;
                  *(_QWORD *)buf = v149;
                  re::DynamicOverflowArray<re::AABB,8ul>::setCapacity(buf, v107);
                  *(_DWORD *)&buf[16] += 2;
                  v109 = *v57;
                  if (*v57)
                  {
                    v110 = (unsigned __int16 *)*v156;
                    v111 = 2 * v109;
                    do
                    {
                      v112 = re::ecs2::DynamicBoundingBoxComponent::boundingBoxForMeshPartForFrame((uint64_t)v148, v144, started + *v110);
                      if (v112)
                        re::DynamicOverflowArray<re::AABB,8ul>::add((uint64_t)buf, (uint64_t)v112);
                      ++v110;
                      v111 -= 2;
                    }
                    while (v111);
                    v109 = *v57;
                    v29 = v159;
                    v76 = v150;
                  }
                  if (*(_QWORD *)&buf[8] == v109)
                  {
                    v113 = v76;
                    v44 = *v152;
                    v114 = v153[5 * v106 + 35];
                    v29 = v114 + 1;
                    if (v114 + 1 > v44)
                    {
                      v115 = *v151;
                      if (v115 + v44 <= v114)
                      {
                        *(_QWORD *)&v187[0] = v153[5 * v106 + 37] + (v44 << 6);
                        *((_QWORD *)&v187[0] + 1) = v115;
                        if ((buf[16] & 1) != 0)
                          v116 = &v184;
                        else
                          v116 = (__int128 *)*((_QWORD *)&v184 + 1);
                        *(_QWORD *)v180 = v116;
                        *(_QWORD *)&v180[8] = v109;
                        v76 = v113;
                        re::SkinnedMeshBoundsEstimator::updateKnownBoundingBoxes(v113, (uint64_t)v180, v187);
                        v29 = v159;
                        goto LABEL_120;
                      }
LABEL_160:
                      re::internal::assertLog((re::internal *)7, v108, "assertion failure: '%s' (%s:line %i) Invalid count. index = %zu, count = %zu, array size = %zu", "endIndexExclusive <= m_size", "slice", 1129, v44, v115, v114);
                      _os_crash();
                      __break(1u);
LABEL_161:
                      re::internal::assertLog((re::internal *)6, v36, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, v29);
                      _os_crash();
                      __break(1u);
                      goto LABEL_162;
                    }
LABEL_159:
                    v172[0] = 0;
                    v188 = 0u;
                    v189 = 0u;
                    memset(v187, 0, sizeof(v187));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v180 = 136315906;
                    *(_QWORD *)&v180[4] = "slice";
                    *(_WORD *)&v180[12] = 1024;
                    *(_DWORD *)&v180[14] = 1119;
                    *(_WORD *)&v180[18] = 2048;
                    *(_QWORD *)&v180[20] = v44;
                    v181 = 2048;
                    v182 = v29;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                    goto LABEL_160;
                  }
LABEL_120:
                  if (*(_QWORD *)buf && (buf[16] & 1) == 0)
                    (*(void (**)(void))(**(_QWORD **)buf + 40))();
LABEL_123:
                  v117 = (*v151 + *v152);
                  v118 = v153[14];
                  *(_QWORD *)&v187[0] = v153[16];
                  *((_QWORD *)&v187[0] + 1) = v118;
                  *(_QWORD *)buf = re::MutableSlice<re::Matrix4x4<float>>::range(v187, *v152, v117);
                  *(_QWORD *)&buf[8] = v119;
                  re::SkinnedMeshBoundsEstimator::updateEstimatedBoundingBoxes((uint64_t)v76, (uint64_t)buf, v120);
                  v44 = v153[75];
                  if (v44 <= v29)
                    goto LABEL_158;
                  v121 = v153[77] + (v29 << 7);
                  v122 = *(_QWORD *)(v121 + 80);
                  v41 = v147;
                  if (v122)
                  {
                    v85 = 0;
                    v44 = *(_QWORD *)(v121 + 88);
                    while (1)
                    {
                      v47 = *v57;
                      if (*v57 <= v85)
                        break;
                      re::ecs2::DynamicBoundingBoxComponent::setMeshPartEstimatedBoundingBox(v148, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v155 + 8) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v155 + 8) + 136) + 16) << 60), started + *((unsigned __int16 *)*v156 + v85++), (_OWORD *)v44);
                      v44 += 32;
                      if (v122 == v85)
                        goto LABEL_128;
                    }
LABEL_152:
                    *(_QWORD *)v180 = 0;
                    v185 = 0u;
                    v186 = 0u;
                    v184 = 0u;
                    memset(buf, 0, sizeof(buf));
                    v63 = MEMORY[0x24BDACB70];
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    LODWORD(v187[0]) = 136315906;
                    *(_QWORD *)((char *)v187 + 4) = "operator[]";
                    WORD6(v187[0]) = 1024;
                    *(_DWORD *)((char *)v187 + 14) = 797;
                    WORD1(v187[1]) = 2048;
                    *(_QWORD *)((char *)&v187[1] + 4) = v85;
                    WORD6(v187[1]) = 2048;
                    *(_QWORD *)((char *)&v187[1] + 14) = v47;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_153:
                    v172[0] = 0;
                    v185 = 0u;
                    v186 = 0u;
                    v184 = 0u;
                    memset(buf, 0, sizeof(buf));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    LODWORD(v187[0]) = 136315906;
                    *(_QWORD *)((char *)v187 + 4) = "operator[]";
                    WORD6(v187[0]) = 1024;
                    *(_DWORD *)((char *)v187 + 14) = 468;
                    WORD1(v187[1]) = 2048;
                    *(_QWORD *)((char *)&v187[1] + 4) = v63;
                    WORD6(v187[1]) = 2048;
                    *(_QWORD *)((char *)&v187[1] + 14) = v44;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_154:
                    *(_QWORD *)v180 = 0;
                    v185 = 0u;
                    v186 = 0u;
                    v184 = 0u;
                    memset(buf, 0, sizeof(buf));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    LODWORD(v187[0]) = 136315906;
                    *(_QWORD *)((char *)v187 + 4) = "operator[]";
                    WORD6(v187[0]) = 1024;
                    *(_DWORD *)((char *)v187 + 14) = 468;
                    WORD1(v187[1]) = 2048;
                    *(_QWORD *)((char *)&v187[1] + 4) = v63;
                    WORD6(v187[1]) = 2048;
                    *(_QWORD *)((char *)&v187[1] + 14) = v44;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_155:
                    *(_QWORD *)v180 = 0;
                    v185 = 0u;
                    v186 = 0u;
                    v184 = 0u;
                    memset(buf, 0, sizeof(buf));
                    v29 = MEMORY[0x24BDACB70];
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    LODWORD(v187[0]) = 136315906;
                    *(_QWORD *)((char *)v187 + 4) = "operator[]";
                    WORD6(v187[0]) = 1024;
                    *(_DWORD *)((char *)v187 + 14) = 468;
                    WORD1(v187[1]) = 2048;
                    *(_QWORD *)((char *)&v187[1] + 4) = v63;
                    WORD6(v187[1]) = 2048;
                    *(_QWORD *)((char *)&v187[1] + 14) = v44;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_156:
                    *(_QWORD *)v180 = 0;
                    v185 = 0u;
                    v186 = 0u;
                    v184 = 0u;
                    memset(buf, 0, sizeof(buf));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    LODWORD(v187[0]) = 136315906;
                    *(_QWORD *)((char *)v187 + 4) = "operator[]";
                    WORD6(v187[0]) = 1024;
                    *(_DWORD *)((char *)v187 + 14) = 797;
                    WORD1(v187[1]) = 2048;
                    *(_QWORD *)((char *)&v187[1] + 4) = v44;
                    WORD6(v187[1]) = 2048;
                    *(_QWORD *)((char *)&v187[1] + 14) = v29;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_157:
                    *(_QWORD *)v180 = 0;
                    v185 = 0u;
                    v186 = 0u;
                    v184 = 0u;
                    memset(buf, 0, sizeof(buf));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    LODWORD(v187[0]) = 136315906;
                    *(_QWORD *)((char *)v187 + 4) = "operator[]";
                    WORD6(v187[0]) = 1024;
                    *(_DWORD *)((char *)v187 + 14) = 789;
                    WORD1(v187[1]) = 2048;
                    *(_QWORD *)((char *)&v187[1] + 4) = v29;
                    WORD6(v187[1]) = 2048;
                    *(_QWORD *)((char *)&v187[1] + 14) = v44;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_158:
                    *(_QWORD *)v180 = 0;
                    v185 = 0u;
                    v186 = 0u;
                    v184 = 0u;
                    memset(buf, 0, sizeof(buf));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    LODWORD(v187[0]) = 136315906;
                    *(_QWORD *)((char *)v187 + 4) = "operator[]";
                    WORD6(v187[0]) = 1024;
                    *(_DWORD *)((char *)v187 + 14) = 797;
                    WORD1(v187[1]) = 2048;
                    *(_QWORD *)((char *)&v187[1] + 4) = v29;
                    WORD6(v187[1]) = 2048;
                    *(_QWORD *)((char *)&v187[1] + 14) = v44;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                    goto LABEL_159;
                  }
LABEL_128:
                  v30 = v163;
                  v39 = v145;
                  v32 = v146;
                  v35 = (uint64_t)v158;
                  v40 = v159;
                  if (v158)

                }
              }
              ++v40;
            }
            while (v40 != v39);
          }
          re::ecs2::Component::markDirty(v148);
          v7 = v155;
          v123 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v155 + 8) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v155 + 8) + 136) + 16) << 60);
          v124 = v153[14];
          *(_QWORD *)&v187[0] = v153[16];
          *((_QWORD *)&v187[0] + 1) = v124;
          re::DynamicArray<re::Matrix4x4<float>>::DynamicArray((uint64_t)buf, (uint64_t)v187);
          v126 = v153[24];
          v125 = v153 + 24;
          v153[24] = v126 + 1;
          v127 = -v126 & 7;
          v128 = v126 & 7;
          if (v126 <= 0)
            v128 = -v127;
          v125[v128 + 1] = v123;
          re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v125[5 * v128 + 9], (uint64_t)buf);
          if (*(_QWORD *)buf && (_QWORD)v184)
            (*(void (**)(void))(**(_QWORD **)buf + 40))();
          a5 = v137;
          v15 = v141;
        }
        if (re::ecs2::MeshDeformationComponent::areRequiredAssetsLoaded(v15, v142))
        {
          v129 = v177;
          v130 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v178);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v129, v130, *(_QWORD *)(a3 + 48));
        }
      }
      else if (isSkinningAssignLoggingEnabled)
      {
        v131 = *re::ecsComponentsLogObjects(v15);
        if (os_log_type_enabled(v131, OS_LOG_TYPE_INFO))
        {
          v132 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL;
          v133 = v14[35];
          *(_DWORD *)buf = 134218242;
          *(_QWORD *)&buf[4] = v132;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v133;
          _os_log_impl(&dword_224FE9000, v131, OS_LOG_TYPE_INFO, "[DeformerLogging] Frame[%llu]: Mesh Deformation Assets still loading for Entity - %s", buf, 0x16u);
        }
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v178);
    }
    while (v178 != a5 || (unsigned __int16)v179 != 0xFFFF || WORD1(v179) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

__n128 re::DynamicOverflowArray<re::AABB,8ul>::add(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  __n128 result;
  __int128 v7;

  re::DynamicOverflowArray<re::AABB,8ul>::ensureCapacity((_anonymous_namespace_ *)a1);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 32;
  else
    v4 = *(_QWORD *)(a1 + 40);
  v5 = (_OWORD *)(v4 + 32 * *(_QWORD *)(a1 + 8));
  result = *(__n128 *)a2;
  v7 = *(_OWORD *)(a2 + 16);
  *v5 = *(_OWORD *)a2;
  v5[1] = v7;
  ++*(_QWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

id re::ecs2::DynamicBoundingBoxComponent::boundingBoxForMeshPartForFrame(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 40);
  if (v3 && *(_QWORD *)(v3 + 40) > a3)
  {
    v4 = *(_QWORD *)(v3 + 48);
    v5 = *(_QWORD *)(v4 + 136 * a3);
    v6 = 8;
    if (v5 > 8)
      v6 = *(_QWORD *)(v4 + 136 * a3);
    v7 = v6 - 8;
    while (v5 > v7)
    {
      if ((*(_QWORD *)(v4 + 136 * a3 + 8 * (--v5 & 7) + 8) & 0xFFFFFFFFFFFFFFFuLL) <= (a2 & 0xFFFFFFFFFFFFFFFuLL))
        return objc_msgSend(*(id *)(v4 + 136 * a3 + 8 * (v5 & 7) + 72), sel_contents);
    }
  }
  return 0;
}

uint64_t re::MutableSlice<re::Matrix4x4<float>>::range(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. fromInclusive = %zu, size = %zu", "fromInclusive < size()", "range", 648, a2, v3);
    _os_crash();
    __break(1u);
  }
  else if (v3 >= a3)
  {
    return *a1 + (a2 << 6);
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. toExclusive = %zu, size = %zu", "toExclusive <= size()", "range", 649, a2, v3);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::ecs2::SkeletalPoseBufferSystem::updateScenes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  re::ecs2::System *v27;
  uint64_t v29;
  _BYTE v30[16];
  uint64_t v31[2];
  _QWORD v32[2];
  uint64_t v33;

  v32[0] = a3;
  v32[1] = a4;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v31);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v30, 3144, a1);
  v6 = *(_QWORD *)(a1 + 104);
  if (v6)
  {
    if ((*(_BYTE *)(v6 + 424) & 0x10) != 0)
    {
      v7 = *(_QWORD *)(a2 + 8);
      if (v7)
      {
        v8 = *(uint64_t **)a2;
        v29 = *(_QWORD *)a2 + 8 * v7;
        while (1)
        {
          v33 = *v8;
          v9 = *(_QWORD *)(*(_QWORD *)(a1 + 224)
                         + 16
                         * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 216), &v33)+ 8);
          re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 328, v9);
          v10 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 160, v9);
          v11 = *(_QWORD *)(*v10 + 224);
          v12 = v10[3];
          v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v10[2] + 8, v12);
          if (*(_DWORD *)(v13 + 40))
            v14 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v11 + 24))(v11, v32, v10, v12, v13, 0);
          else
            v14 = 0;
          v15 = v10[5];
          v16 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v10[2] + 8, v15);
          if (*(_DWORD *)(v16 + 40))
            v14 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, v32, v10, v15, v16, 0);
          v17 = v10[6];
          v18 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v10[2] + 8, v17);
          if (*(_DWORD *)(v18 + 40))
            break;
          if (v14)
            goto LABEL_12;
LABEL_13:
          if (*(_BYTE *)(a1 + 392))
          {
            v19 = *(_QWORD *)(a1 + 336);
            v20 = *(_DWORD *)(a1 + 344);
            if (v19 < 0xB)
            {
              v23 = (uint64_t *)(a1 + 352);
              if ((v20 & 1) == 0)
                v23 = *(uint64_t **)(a1 + 360);
              if (!v19)
                goto LABEL_31;
              v24 = 0;
              v25 = 8 * v19;
              do
              {
                v26 = *v23++;
                v24 |= v26;
                v25 -= 8;
              }
              while (v25);
              if (!v24)
                goto LABEL_31;
            }
            else
            {
              v21 = (_QWORD *)(a1 + 352);
              if ((v20 & 1) == 0)
                v21 = *(_QWORD **)(a1 + 360);
              v22 = 8 * v19;
              while (!*v21)
              {
                ++v21;
                v22 -= 8;
                if (!v22)
                  goto LABEL_31;
              }
            }
            v27 = *(re::ecs2::System **)(a1 + 376);
            if (!*((_BYTE *)v27 + 86))
              re::ecs2::System::queueToRun(v27, 0.0);
          }
LABEL_31:
          if (++v8 == (uint64_t *)v29)
            goto LABEL_32;
        }
        if (((v14 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v11 + 40))(v11, v32, v10, v17, v18, 0)) & 1) == 0)goto LABEL_13;
LABEL_12:
        re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 328, v9);
        goto LABEL_13;
      }
    }
  }
LABEL_32:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v30);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v31);
}

uint64_t re::ecs2::SkeletalPoseBufferSystem::willAddSystemToECSService(re::ecs2::SkeletalPoseBufferSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
  v2 = *((_QWORD *)this + 14);
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::ecs2::ThrottleService>(v3);
  *((_QWORD *)this + 51) = v2;
  *((_QWORD *)this + 52) = result;
  return result;
}

double re::ecs2::SkeletalPoseBufferSystem::willRemoveSystemFromECSService(re::ecs2::SkeletalPoseBufferSystem *this)
{
  double result;

  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_QWORD *)this + 19) = 0;
  return result;
}

void re::ecs2::SkeletalPoseBufferSystem::willAddSceneToECSService(re::ecs2::SkeletalPoseBufferSystem *this, re::ecs2::Scene *a2)
{
  char *v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57[2];
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _OWORD v66[5];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)this + 160;
  v57[0] = (uint64_t)a2;
  v5 = (re::ecs2::SkeletalPoseBufferSystem *)((char *)this + 280);
  v6 = *((_QWORD *)this + 36);
  v7 = *((_DWORD *)this + 74);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)this + 304);
    else
      v8 = (_QWORD *)*((_QWORD *)this + 39);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)this + 304);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)this + 39);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 280, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::SkeletalPoseBufferSystem *)((char *)this + 216), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    v15 = (char *)this + 328;
    v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  v56 = 0u;
  v49 = 0u;
  *(_QWORD *)&v50 = 0;
  *((_QWORD *)&v50 + 1) = -1;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v54 = 1;
  v55 = 0uLL;
  v17 = *((_QWORD *)this + 25);
  *(_QWORD *)&v56 = 0;
  v18 = *((_QWORD *)this + 21);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 20, (v17 + 4) >> 2);
    v18 = *((_QWORD *)this + 21);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 858;
    v62 = 2048;
    v63 = v17 >> 2;
    v64 = 2048;
    v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*((_BYTE *)this + 176) & 1) != 0)
    v19 = (char *)this + 184;
  else
    v19 = (char *)*((_QWORD *)this + 24);
  v20 = *(_QWORD *)&v19[8 * (v17 >> 2)];
  ++*((_QWORD *)this + 25);
  ++*((_DWORD *)this + 52);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v49;
  v23 = v50;
  v24 = v51;
  *(_QWORD *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  v26 = *((_QWORD *)this + 25);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(_QWORD *)&v66[0] = *((_QWORD *)this + 25) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::SkeletalPoseBufferSystem *)((char *)this + 216), v57, (uint64_t *)v66);
  v28 = *((_QWORD *)this + 25);
  v29 = *((_QWORD *)this + 40);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *((_QWORD *)this + 40) = v28;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *((_QWORD *)this + 40) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*((_BYTE *)this + 296) & 1) != 0)
      v33 = (char *)this + 304;
    else
      v33 = (char *)*((_QWORD *)this + 39);
    *(_QWORD *)&v33[8 * *((_QWORD *)this + 36) - 8] &= v31;
  }
  v34 = *((_QWORD *)this + 25);
  v35 = *((_QWORD *)this + 46);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *((_QWORD *)this + 46) = v34;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::SkeletalPoseBufferSystem *)((char *)this + 328), v36, &v49);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *((_QWORD *)this + 46) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*((_BYTE *)this + 344) & 1) != 0)
      v39 = (char *)this + 352;
    else
      v39 = (char *)*((_QWORD *)this + 45);
    *(_QWORD *)&v39[8 * *((_QWORD *)this + 42) - 8] &= v37;
  }
  v16 = *(_QWORD *)&v66[0];
  v15 = (char *)this + 328;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((_BYTE *)this + 392))
    return;
  v40 = *((_QWORD *)this + 42);
  v41 = *((_DWORD *)this + 86);
  if (v40 >= 0xB)
  {
    if ((v41 & 1) != 0)
      v42 = (_QWORD *)((char *)this + 352);
    else
      v42 = (_QWORD *)*((_QWORD *)this + 45);
    v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44)
        return;
    }
LABEL_65:
    v48 = (re::ecs2::System *)*((_QWORD *)this + 47);
    if (!*((_BYTE *)v48 + 86))
      re::ecs2::System::queueToRun(v48, 0.0);
    return;
  }
  if ((v41 & 1) != 0)
  {
    v43 = (uint64_t *)((char *)this + 352);
    if (!v40)
      return;
  }
  else
  {
    v43 = (uint64_t *)*((_QWORD *)this + 45);
    if (!v40)
      return;
  }
  v45 = 0;
  v46 = 8 * v40;
  do
  {
    v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45)
    goto LABEL_65;
}

uint64_t re::ecs2::SkeletalPoseBufferSystem::willRemoveSceneFromECSService(re::ecs2::SkeletalPoseBufferSystem *this, re::ecs2::Scene *a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re::ecs2::ComponentBucketsBase *v15;
  re::ecs2::Scene *v16;

  v16 = a2;
  v3 = (uint64_t *)((char *)this + 216);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 27, &v16);
  if (result != -1)
  {
    v5 = *((_QWORD *)this + 28) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 280, *(_QWORD *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 328, *(_QWORD *)(v5 + 8));
    v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 160, *(_QWORD *)(v5 + 8));
    if (*v6)
    {
      v7 = v6;
      *v6 = 0;
      v8 = v6 + 1;
      v9 = *(_QWORD *)(v6[1] + 288);
      if (v9)
      {
        v10 = v6[12];
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      v13 = 0;
      v14 = v7 + 3;
      do
      {
        v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(_QWORD *)v15)
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

double re::internal::defaultConstruct<re::ecs2::SkinnedMeshJointRange>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)a3 = 0xFFFFFFFFLL;
  *(_DWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 40) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::SkinnedMeshJointRange>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v4;

  v4 = (_QWORD *)(a3 + 16);
  result = *(_QWORD *)(a3 + 16);
  if (result)
  {
    if (*(_QWORD *)(a3 + 48))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a3 + 48) = 0;
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    ++*(_DWORD *)(a3 + 40);
  }
  return result;
}

double re::internal::defaultConstructV2<re::ecs2::SkinnedMeshJointRange>(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)a1 = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::SkinnedMeshJointRange>(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 16);
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    if (*(_QWORD *)(a1 + 48))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 48) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 40);
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_SkeletalPoseBufferComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410ACB0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410ACB0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410AE08, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410AE18 = 0;
    qword_25410AE28 = 0;
    qword_25410AE30 = 0xFFFFFFFFLL;
    qword_25410AE08 = (uint64_t)&off_24ED7DAA8;
    qword_25410AE38 = (uint64_t)"SkeletalPoseBufferComponent";
    dword_25410AE40 = 0;
    xmmword_25410AE48 = 0u;
    unk_25410AE58 = 0u;
    xmmword_25410AE68 = 0u;
    qword_25410AE78 = 0;
    __cxa_guard_release(&qword_25410ACB0);
  }
  return &qword_25410AE08;
}

void re::ecs2::initInfo_SkeletalPoseBufferComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned __int8 v13;
  uint64_t *v14;
  unsigned __int8 v15;
  const re::IntrospectionBase *v16;
  unsigned __int8 v17;
  int v18;
  re::IntrospectionRegistry *v19;
  const re::IntrospectionBase *v20;
  const char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  re *v31;
  uint64_t *v32;
  const re::IntrospectionBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t *v36;
  const re::IntrospectionBase *v37;
  void *v38;
  uint64_t v39;
  uint64_t *v40;
  const re::IntrospectionBase *v41;
  void *v42;
  uint64_t v43;
  const re::IntrospectionBase *v44;
  uint64_t *v45;
  unsigned __int8 v46;
  _DWORD *v47;
  uint64_t v48;
  int v49;
  re::IntrospectionRegistry *v50;
  const re::IntrospectionBase *v51;
  const char *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62[2];
  __int128 v63;
  __int128 v64;
  const char *v65;

  *(_QWORD *)&v64 = 0xCDC652ECDEE0A8A6;
  *((_QWORD *)&v64 + 1) = "SkeletalPoseBufferComponent";
  re::StringID::destroyString((re::StringID *)&v64);
  *((_OWORD *)this + 2) = v58;
  v4 = atomic_load((unsigned __int8 *)&qword_25410ACA8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410ACA8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410ACF0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::IntrospectionInfo<re::DynamicArray<re::Matrix4x4<float>>>::get(1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "m_totalAbsoluteJointTransforms";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x6000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_25410ACF8 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v13 = atomic_load((unsigned __int8 *)&qword_25410ACC8);
      if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_25410ACC8))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410AD50, 0);
        *(uint64_t *)((char *)&qword_25410AD60 + 6) = 0;
        qword_25410AD60 = 0;
        *(_QWORD *)&xmmword_25410AD70 = 0;
        *((_QWORD *)&xmmword_25410AD70 + 1) = 0xFFFFFFFFLL;
        qword_25410AD50 = (uint64_t)&off_24ED1FA08;
        qword_25410AD88 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_25410AD80);
        qword_25410AD50 = (uint64_t)&off_24ED5D498;
        __cxa_guard_release(&qword_25410ACC8);
      }
      if ((byte_25410AC89 & 1) == 0)
      {
        v14 = (uint64_t *)qword_25410ACA0;
        if (qword_25410ACA0)
          goto LABEL_10;
        v15 = atomic_load((unsigned __int8 *)&qword_25410AC90);
        if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_25410AC90))
        {
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410AD90, 0);
          *(_QWORD *)(v30 + 22) = 0;
          qword_25410ADA0 = 0;
          *(_QWORD *)&xmmword_25410ADB0 = 0;
          *((_QWORD *)&xmmword_25410ADB0 + 1) = 0xFFFFFFFFLL;
          qword_25410AD90 = (uint64_t)&off_24ED7DAA8;
          qword_25410ADC0 = (uint64_t)"SkinnedMeshJointRange";
          dword_25410ADC8 = 0;
          xmmword_25410ADD0 = 0u;
          *(_OWORD *)&qword_25410ADE0 = 0u;
          xmmword_25410ADF0 = 0u;
          qword_25410AE00 = 0;
          __cxa_guard_release(&qword_25410AC90);
        }
        qword_25410ACA0 = (uint64_t)&qword_25410AD90;
        *(_QWORD *)&v64 = 0x49833F28F7FA4720;
        *((_QWORD *)&v64 + 1) = "SkinnedMeshJointRange";
        re::StringID::destroyString((re::StringID *)&v64);
        xmmword_25410ADB0 = v59;
        v17 = atomic_load((unsigned __int8 *)&qword_25410AC98);
        if ((v17 & 1) == 0)
        {
          v31 = (re *)__cxa_guard_acquire(&qword_25410AC98);
          if ((_DWORD)v31)
          {
            v32 = re::introspectionAllocator(v31);
            v34 = re::introspect_uint32_t((re *)1, v33);
            v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v32 + 32))(v32, 72, 8);
            *(_DWORD *)v35 = 1;
            *(_QWORD *)(v35 + 8) = "instanceIndex";
            *(_QWORD *)(v35 + 16) = v34;
            *(_QWORD *)(v35 + 24) = 0;
            *(_QWORD *)(v35 + 32) = 1;
            *(_DWORD *)(v35 + 40) = 0;
            *(_QWORD *)(v35 + 48) = 0;
            *(_QWORD *)(v35 + 56) = 0;
            *(_DWORD *)(v35 + 64) = 0;
            qword_25410ACD0 = v35;
            v36 = re::introspectionAllocator((re *)v35);
            v38 = re::introspect_uint32_t((re *)1, v37);
            v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 72, 8);
            *(_DWORD *)v39 = 1;
            *(_QWORD *)(v39 + 8) = "jointRangeStartIndex";
            *(_QWORD *)(v39 + 16) = v38;
            *(_QWORD *)(v39 + 24) = 0;
            *(_QWORD *)(v39 + 32) = 0x400000002;
            *(_DWORD *)(v39 + 40) = 0;
            *(_QWORD *)(v39 + 48) = 0;
            *(_QWORD *)(v39 + 56) = 0;
            *(_DWORD *)(v39 + 64) = 0;
            qword_25410ACD8 = v39;
            v40 = re::introspectionAllocator((re *)v39);
            v42 = re::introspect_uint32_t((re *)1, v41);
            v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 72, 8);
            *(_DWORD *)v43 = 1;
            *(_QWORD *)(v43 + 8) = "jointRangeSize";
            *(_QWORD *)(v43 + 16) = v42;
            *(_QWORD *)(v43 + 24) = 0;
            *(_QWORD *)(v43 + 32) = 0x800000003;
            *(_DWORD *)(v43 + 40) = 0;
            *(_QWORD *)(v43 + 48) = 0;
            *(_QWORD *)(v43 + 56) = 0;
            *(_DWORD *)(v43 + 64) = 0;
            qword_25410ACE0 = v43;
            v45 = re::introspectionAllocator((re *)v43);
            v46 = atomic_load((unsigned __int8 *)&qword_25410ACC0);
            if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_25410ACC0))
            {
              ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410AD10, 0);
              *(uint64_t *)((char *)&qword_25410AD20 + 6) = 0;
              qword_25410AD20 = 0;
              *(_QWORD *)&xmmword_25410AD30 = 0;
              *((_QWORD *)&xmmword_25410AD30 + 1) = 0xFFFFFFFFLL;
              qword_25410AD10 = (uint64_t)&off_24ED1FA08;
              qword_25410AD48 = 0;
              re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_25410AD40);
              qword_25410AD10 = (uint64_t)&off_24ED5D400;
              __cxa_guard_release(&qword_25410ACC0);
            }
            if ((_MergedGlobals_188 & 1) == 0)
            {
              v47 = re::introspect_uint16_t((re *)1, v44);
              if ((_MergedGlobals_188 & 1) == 0)
              {
                v48 = (uint64_t)v47;
                _MergedGlobals_188 = 1;
                v49 = v47[6];
                ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410AD10, 0);
                qword_25410AD20 = 0x2800000003;
                dword_25410AD28 = v49;
                word_25410AD2C = 0;
                *(_QWORD *)&xmmword_25410AD30 = 0;
                *((_QWORD *)&xmmword_25410AD30 + 1) = 0xFFFFFFFFLL;
                qword_25410AD40 = v48;
                qword_25410AD48 = 0;
                qword_25410AD10 = (uint64_t)&off_24ED5D400;
                re::IntrospectionRegistry::add(v50, v51);
                re::getPrettyTypeName((re *)&qword_25410AD10, (const re::IntrospectionBase *)&v64);
                if ((BYTE8(v64) & 1) != 0)
                  v52 = v65;
                else
                  v52 = (char *)&v64 + 9;
                if ((_QWORD)v64 && (BYTE8(v64) & 1) != 0)
                  (*(void (**)(void))(*(_QWORD *)v64 + 40))();
                v61 = *(_OWORD *)(v48 + 32);
                v53 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v62);
                if (v53)
                {
                  v54 = *v53;
                  *((_QWORD *)&v60 + 1) = v54;
                }
                else
                {
                  v63 = v61;
                  re::TypeBuilder::beginListType((uint64_t)&v64, v62, 1, 0x28uLL, 8uLL, &v63);
                  re::TypeBuilder::setConstructor((uint64_t)&v64, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
                  re::TypeBuilder::setDestructor((uint64_t)&v64, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
                  re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v64, 1);
                  re::TypeBuilder::setListAccessors((uint64_t)&v64, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
                  re::TypeBuilder::setListIndexer((uint64_t)&v64, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
                  re::TypeBuilder::setListIterator((uint64_t)&v64, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
                  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v64, v55);
                }
                xmmword_25410AD30 = v60;
                re::StringID::destroyString((re::StringID *)v62);
              }
            }
            v56 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v45 + 32))(v45, 72, 8);
            *(_DWORD *)v56 = 1;
            *(_QWORD *)(v56 + 8) = "partIndices";
            *(_QWORD *)(v56 + 16) = &qword_25410AD10;
            *(_QWORD *)(v56 + 24) = 0;
            *(_QWORD *)(v56 + 32) = 0x1000000004;
            *(_DWORD *)(v56 + 40) = 0;
            *(_QWORD *)(v56 + 48) = 0;
            *(_QWORD *)(v56 + 56) = 0;
            *(_DWORD *)(v56 + 64) = 0;
            qword_25410ACE8 = v56;
            __cxa_guard_release(&qword_25410AC98);
          }
        }
        qword_25410ADA0 = 0x3800000008;
        v14 = &qword_25410AD90;
        dword_25410ADA8 = 8;
        word_25410ADAC = 0;
        dword_25410ADC8 = 4;
        *(_QWORD *)&xmmword_25410ADD0 = &qword_25410ACD0;
        *((_QWORD *)&xmmword_25410ADD0 + 1) = re::internal::defaultConstruct<re::ecs2::SkinnedMeshJointRange>;
        qword_25410ADE0 = (uint64_t)re::internal::defaultDestruct<re::ecs2::SkinnedMeshJointRange>;
        unk_25410ADE8 = 0;
        *(_QWORD *)&xmmword_25410ADF0 = 0;
        *((_QWORD *)&xmmword_25410ADF0 + 1) = re::internal::defaultConstructV2<re::ecs2::SkinnedMeshJointRange>;
        qword_25410AE00 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::SkinnedMeshJointRange>;
        re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25410AD90, v16);
        v64 = v59;
        if ((byte_25410AC89 & 1) == 0)
        {
LABEL_10:
          byte_25410AC89 = 1;
          v18 = *((_DWORD *)v14 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410AD50, 0);
          qword_25410AD60 = 0x2800000003;
          *(_DWORD *)algn_25410AD68 = v18;
          *(_WORD *)&algn_25410AD68[4] = 0;
          *(_QWORD *)&xmmword_25410AD70 = 0;
          *((_QWORD *)&xmmword_25410AD70 + 1) = 0xFFFFFFFFLL;
          qword_25410AD80 = v14;
          qword_25410AD88 = 0;
          qword_25410AD50 = (uint64_t)&off_24ED5D498;
          re::IntrospectionRegistry::add(v19, v20);
          re::getPrettyTypeName((re *)&qword_25410AD50, (const re::IntrospectionBase *)&v64);
          if ((BYTE8(v64) & 1) != 0)
            v21 = v65;
          else
            v21 = (char *)&v64 + 9;
          if ((_QWORD)v64 && (BYTE8(v64) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v64 + 40))();
          v61 = *((_OWORD *)v14 + 2);
          v22 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v62);
          if (v22)
          {
            v23 = *v22;
            *((_QWORD *)&v60 + 1) = v23;
          }
          else
          {
            v63 = v61;
            re::TypeBuilder::beginListType((uint64_t)&v64, v62, 1, 0x28uLL, 8uLL, &v63);
            re::TypeBuilder::setConstructor((uint64_t)&v64, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v64, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v64, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v64, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v64, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v64, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v64, v24);
          }
          xmmword_25410AD70 = v60;
          re::StringID::destroyString((re::StringID *)v62);
        }
      }
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "m_jointTransformRanges";
      *(_QWORD *)(v25 + 16) = &qword_25410AD50;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x8800000002;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_25410AD00 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v28 = re::introspect_size_t((re *)1, v27);
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = "m_processedJointTransformRangeHash";
      *(_QWORD *)(v29 + 16) = v28;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0x5800000003;
      *(_DWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_25410AD08 = v29;
      __cxa_guard_release(&qword_25410ACA8);
    }
  }
  *((_QWORD *)this + 2) = 0x27000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_25410ACF0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::SkeletalPoseBufferComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::SkeletalPoseBufferComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SkeletalPoseBufferComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SkeletalPoseBufferComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v57 = v58;
}

_QWORD *re::internal::defaultConstruct<re::ecs2::SkeletalPoseBufferComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::SkeletalPoseBufferComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::SkeletalPoseBufferComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::SkeletalPoseBufferComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_SkeletalPoseBufferComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalPoseBufferComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SkeletalPoseBufferComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SkeletalPoseBufferComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SkeletalPoseBufferComponent>, this);
}

uint64_t *re::ecs2::allocInfo_SkeletalPoseBufferSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410ACB8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410ACB8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410AE80, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410AE90 = 0;
    qword_25410AEA0 = 0;
    qword_25410AEA8 = 0xFFFFFFFFLL;
    qword_25410AE80 = (uint64_t)&off_24ED7DAA8;
    qword_25410AEB0 = (uint64_t)"SkeletalPoseBufferSystem";
    dword_25410AEB8 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_25410AEF0 = 0;
    __cxa_guard_release(&qword_25410ACB8);
  }
  return &qword_25410AE80;
}

void re::ecs2::initInfo_SkeletalPoseBufferSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xCEA160DB8A90D532;
  v5[1] = "SkeletalPoseBufferSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1C000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_SkeletalPoseBufferSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::SkeletalPoseBufferSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::SkeletalPoseBufferSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::SkeletalPoseBufferSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::SkeletalPoseBufferSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SkeletalPoseBufferSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SkeletalPoseBufferSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::SkeletalPoseBufferSystem *re::internal::defaultConstruct<re::ecs2::SkeletalPoseBufferSystem>(int a1, int a2, re::ecs2::SkeletalPoseBufferSystem *this)
{
  return re::ecs2::SkeletalPoseBufferSystem::SkeletalPoseBufferSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::SkeletalPoseBufferSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;

  a3[50] = &off_24ED5D1A8;
  v4 = a3[53];
  if (v4)
  {
    if (a3[54])
    {
      v5 = a3 + 54;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[55]);
      *v5 = 0;
      a3[55] = 0;
    }
    a3[53] = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 20);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::SkeletalPoseBufferSystem>(_QWORD *a1)
{
  uint64_t v2;

  a1[50] = &off_24ED5D1A8;
  v2 = a1[53];
  if (v2)
  {
    if (a1[54])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[55]);
      a1[54] = 0;
      a1[55] = 0;
    }
    a1[53] = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 20);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_SkeletalPoseBufferSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalPoseBufferSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SkeletalPoseBufferSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SkeletalPoseBufferSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SkeletalPoseBufferSystem>, this);
}

uint64_t re::ecs2::SkeletalPoseBufferComponentStateImpl::dependsOnComponents(re::ecs2::SkeletalPoseBufferComponentStateImpl *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::SkeletalPoseBufferComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 24;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
      }
      v6 += 8;
    }
    while (v6 != 56);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::SkeletalPoseBufferComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::SkeletalPoseBufferSystem::~SkeletalPoseBufferSystem(re::ecs2::SkeletalPoseBufferSystem *this)
{
  uint64_t v2;

  *((_QWORD *)this + 50) = &off_24ED5D1A8;
  v2 = *((_QWORD *)this + 53);
  if (v2)
  {
    if (*((_QWORD *)this + 54))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 55));
      *((_QWORD *)this + 54) = 0;
      *((_QWORD *)this + 55) = 0;
    }
    *((_QWORD *)this + 53) = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 20);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  *((_QWORD *)this + 50) = &off_24ED5D1A8;
  v2 = *((_QWORD *)this + 53);
  if (v2)
  {
    if (*((_QWORD *)this + 54))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 55));
      *((_QWORD *)this + 54) = 0;
      *((_QWORD *)this + 55) = 0;
    }
    *((_QWORD *)this + 53) = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 20);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::SkeletalPoseBufferSystem::typeInfo(re::ecs2::SkeletalPoseBufferSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalPoseBufferSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SkeletalPoseBufferSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SkeletalPoseBufferSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SkeletalPoseBufferSystem>, 0);
}

_QWORD *re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          v2 = 56 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 56 * v9;
        v11 = (_QWORD *)(v8 + 48);
        v12 = v7;
        do
        {
          v13 = *(v11 - 6);
          *((_DWORD *)v12 + 2) = *((_DWORD *)v11 - 10);
          *v12 = v13;
          v12[6] = 0;
          v12[3] = 0;
          v12[4] = 0;
          v12[2] = 0;
          *((_DWORD *)v12 + 10) = 0;
          v14 = *(v11 - 3);
          v12[2] = *(v11 - 4);
          *(v11 - 4) = 0;
          v12[3] = v14;
          *(v11 - 3) = 0;
          v15 = v12[4];
          v12[4] = *(v11 - 2);
          *(v11 - 2) = v15;
          v16 = v12[6];
          v12[6] = *v11;
          *v11 = v16;
          ++*((_DWORD *)v11 - 2);
          ++*((_DWORD *)v12 + 10);
          v17 = *(v11 - 4);
          if (v17)
          {
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
            *v11 = 0;
            *(v11 - 3) = 0;
            *(v11 - 2) = 0;
            *(v11 - 4) = 0;
            ++*((_DWORD *)v11 - 2);
          }
          v11 += 7;
          v12 += 7;
          v10 -= 56;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::ecs2::SkeletalPoseBufferComponent::MeshBoundsEstimatorForJointRange>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::SkeletalPoseBufferComponent::MeshBoundsEstimatorForJointRange>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 57)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 128, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 7;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 7, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_30;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_30:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = v9 << 7;
        do
        {
          v12 = &v7[v10 / 8];
          v13 = v8 + v10;
          v14 = *(_DWORD *)(v8 + v10);
          v12[5] = 0;
          v12[2] = 0;
          v12[3] = 0;
          v12[1] = 0;
          *((_DWORD *)v12 + 8) = 0;
          v16 = (_QWORD *)(v8 + v10 + 8);
          v15 = *v16;
          *(_DWORD *)v12 = v14;
          v17 = *(_QWORD *)(v8 + v10 + 16);
          v12[1] = v15;
          *v16 = 0;
          v12[2] = v17;
          *(_QWORD *)(v13 + 16) = 0;
          v18 = v7[v10 / 8 + 3];
          v12[3] = *(_QWORD *)(v8 + v10 + 24);
          *(_QWORD *)(v13 + 24) = v18;
          v19 = v7[v10 / 8 + 5];
          v12[5] = *(_QWORD *)(v8 + v10 + 40);
          *(_QWORD *)(v13 + 40) = v19;
          *(_DWORD *)(v13 + 32) = *(_DWORD *)(v8 + v10 + 32) + 1;
          *((_DWORD *)v12 + 8) = LODWORD(v7[v10 / 8 + 4]) + 1;
          v12[7] = 0;
          v12[8] = 0;
          v12[6] = 0;
          v21 = (uint64_t *)(v8 + v10 + 56);
          v20 = *v21;
          v12[6] = *(_QWORD *)(v8 + v10 + 48);
          *(_QWORD *)(v13 + 48) = 0;
          v12[7] = v20;
          *v21 = 0;
          v22 = v7[v10 / 8 + 8];
          v12[8] = *(_QWORD *)(v8 + v10 + 64);
          *(_QWORD *)(v13 + 64) = v22;
          v12[10] = 0;
          v12[11] = 0;
          v12[9] = 0;
          v24 = (uint64_t *)(v8 + v10 + 80);
          v23 = *v24;
          v12[9] = *(_QWORD *)(v8 + v10 + 72);
          *(_QWORD *)(v13 + 72) = 0;
          v12[10] = v23;
          *v24 = 0;
          v25 = v7[v10 / 8 + 11];
          v12[11] = *(_QWORD *)(v8 + v10 + 88);
          *(_QWORD *)(v13 + 88) = v25;
          v12[12] = *(_QWORD *)(v8 + v10 + 96);
          v12[13] = 0;
          v12[14] = 0;
          v12[15] = 0;
          v26 = *(_QWORD *)(v8 + v10 + 112);
          v12[13] = *(_QWORD *)(v8 + v10 + 104);
          v12[14] = v26;
          *(_QWORD *)(v13 + 104) = 0;
          *(_QWORD *)(v13 + 112) = 0;
          v27 = v7[v10 / 8 + 15];
          v12[15] = *(_QWORD *)(v8 + v10 + 120);
          *(_QWORD *)(v13 + 120) = v27;
          if (*(_QWORD *)(v8 + v10 + 104))
            *(_QWORD *)(v13 + 104) = 0;
          v28 = *(_QWORD *)(v13 + 72);
          if (v28)
          {
            if (*v24)
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 40))(v28, *(_QWORD *)(v13 + 88));
              *v24 = 0;
              *(_QWORD *)(v8 + v10 + 88) = 0;
            }
            *(_QWORD *)(v13 + 72) = 0;
          }
          v29 = *(_QWORD *)(v13 + 48);
          if (v29)
          {
            if (*v21)
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 40))(v29, *(_QWORD *)(v13 + 64));
              *v21 = 0;
              *(_QWORD *)(v8 + v10 + 64) = 0;
            }
            *(_QWORD *)(v13 + 48) = 0;
          }
          if (*v16)
          {
            if (*(_QWORD *)(v13 + 40))
              (*(void (**)(_QWORD))(*(_QWORD *)*v16 + 40))(*v16);
            *(_QWORD *)(v13 + 40) = 0;
            *(_QWORD *)(v8 + v10 + 16) = 0;
            *(_QWORD *)(v8 + v10 + 24) = 0;
            *v16 = 0;
            ++*(_DWORD *)(v13 + 32);
          }
          v10 += 128;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_30;
    }
  }
  return result;
}

void **re::DynamicArray<unsigned short>::copy(void **result, uint64_t a2)
{
  void **v3;
  unint64_t v4;
  void *v5;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= (unint64_t)result[2])
  {
    re::DynamicArray<unsigned short>::setCapacity(result, *(_QWORD *)(a2 + 16));
    v5 = v3[2];
    if (v5)
    {
      memmove(v3[4], *(const void **)(a2 + 32), 2 * (_QWORD)v5);
      v5 = v3[2];
    }
    result = (void **)memcpy((char *)v3[4] + 2 * (_QWORD)v5, (const void *)(*(_QWORD *)(a2 + 32) + 2 * (_QWORD)v5), 2 * v4 - 2 * (_QWORD)v5);
  }
  else if (v4)
  {
    result = (void **)memmove(result[4], *(const void **)(a2 + 32), 2 * v4);
  }
  v3[2] = (void *)v4;
  return result;
}

_QWORD *re::DynamicOverflowArray<re::AABB,8ul>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  int v17;

  v4 = result;
  v5 = *result;
  if (a2 && !v5)
  {
    result = (_QWORD *)re::DynamicOverflowArray<re::AABB,8ul>::setCapacity(v4, a2);
    v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)result + 4);
  if ((v7 & 1) != 0)
    v8 = 8;
  else
    v8 = result[4];
  if (v8 != a2)
  {
    v9 = result[1];
    if (v9 <= a2 && (a2 > 8 || (v7 & 1) == 0))
    {
      if (a2 < 9)
      {
        v14 = result + 4;
        v15 = v4[5];
        if ((v7 & 1) != 0)
          v16 = v4 + 4;
        else
          v16 = (const void *)v4[5];
        memcpy(v14, v16, 32 * v9);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v15);
        v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 59)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 32, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        v2 = 32 * a2;
        v10 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(*result, 32 * a2, 16);
        if (v10)
        {
          v12 = v10;
          if ((v4[2] & 1) != 0)
            v13 = v4 + 4;
          else
            v13 = (const void *)v4[5];
          result = memcpy(v10, v13, 32 * v4[1]);
          v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[5]);
            v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[4] = a2;
          v4[5] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*v4 + 8));
      result = (_QWORD *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::AABB,8ul>::ensureCapacity(_anonymous_namespace_ *result)
{
  _anonymous_namespace_ *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = result;
  if (*(_QWORD *)result)
  {
    v2 = *((_QWORD *)result + 1);
    if ((*((_BYTE *)result + 16) & 1) != 0)
      v3 = 8;
    else
      v3 = *((_QWORD *)result + 4);
    if (v2 >= v3)
      return re::DynamicOverflowArray<re::AABB,8ul>::growCapacity(result, v2 + 1);
  }
  else
  {
    v4 = *((_QWORD *)v1 + 1) + 1;
    result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::AABB,8ul>::setCapacity(v1, v4);
    *((_DWORD *)v1 + 4) += 2;
  }
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::AABB,8ul>::growCapacity(_anonymous_namespace_ *result, unint64_t a2)
{
  unint64_t v2;
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;

  v2 = a2;
  v3 = result;
  if (!*(_QWORD *)result)
  {
    result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::AABB,8ul>::setCapacity(v3, v2);
    *((_DWORD *)v3 + 4) += 2;
    return result;
  }
  if ((*((_BYTE *)result + 16) & 1) != 0)
  {
    if (a2 <= 8)
      return result;
    v5 = 16;
  }
  else
  {
    v4 = *((_QWORD *)result + 4);
    if (v4 >= a2)
      return result;
    v5 = 2 * v4;
  }
  if (v5 > a2)
    a2 = v5;
  return (_anonymous_namespace_ *)re::DynamicOverflowArray<re::AABB,8ul>::setCapacity(result, a2);
}

uint64_t re::DynamicArray<re::Matrix4x4<float>>::DynamicArray(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    re::DynamicArray<re::Matrix4x4<float>>::setCapacity((_QWORD *)a1, v3);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::Matrix4x4<float>>::copy((_QWORD *)a1, 0, *(char **)a2, *(_QWORD *)(a2 + 8));
  }
  return a1;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED5D2A0;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED5D2F8;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED5D350;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED5D3A8;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED5D2A0;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED5D2F8;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED5D350;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED5D3A8;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5D2A0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5D2A0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5D2F8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5D2F8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5D350;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5D350;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED5D3A8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED5D3A8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

_QWORD *re::IntrospectionDynamicArray<unsigned short>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<unsigned short>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<unsigned short>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<unsigned short>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<unsigned short>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<unsigned short>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

void re::IntrospectionDynamicArray<unsigned short>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<unsigned short>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<unsigned short>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<unsigned short>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<unsigned short>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  __int16 v10;

  v10 = 0;
  re::DynamicArray<unsigned short>::add(this, &v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 2 * *((_QWORD *)this + 2) - 2);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<unsigned short>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<unsigned short>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 2 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 2 * a3;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<unsigned short>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::Allocator *v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  v8 = *(re::Allocator **)a1;
  if (v8 == a3)
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    if (v8)
    {
      if (*(_QWORD *)(a1 + 32))
        (*(void (**)(re::Allocator *))(*(_QWORD *)v8 + 40))(v8);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)a1 = a3;
    re::DynamicArray<unsigned short>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<unsigned short>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(char **)(a1 + 32);
      v12 = 2 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 2;
        v12 -= 2;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 2 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 2 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<unsigned short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::SkinnedMeshJointRange>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::SkinnedMeshJointRange>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::SkinnedMeshJointRange>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SkinnedMeshJointRange>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::SkinnedMeshJointRange>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::SkinnedMeshJointRange>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::SkinnedMeshJointRange>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *a4)
{
  re::IntrospectionBase *v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v11 = 0u;
  v13 = 0;
  v14 = 0;
  v10 = 0xFFFFFFFFLL;
  v12 = 0uLL;
  re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::add(a4, &v10);
  if (*((_QWORD *)&v11 + 1) && v14)
    (*(void (**)(void))(**((_QWORD **)&v11 + 1) + 40))();
  v8 = (re::IntrospectionBase *)(*((_QWORD *)a4 + 4) + 56 * *((_QWORD *)a4 + 2) - 56);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SkinnedMeshJointRange>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SkinnedMeshJointRange>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 56 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 56 * a3;
}

_QWORD *re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = 56 * a2;
    v9 = a2;
    do
    {
      v10 = v3[4];
      v11 = v10 + v8;
      result = *(_QWORD **)(v10 + v8 + 16);
      if (result)
      {
        if (*(_QWORD *)(v11 + 48))
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
        *(_QWORD *)(v11 + 48) = 0;
        *(_QWORD *)(v10 + v8 + 24) = 0;
        *(_QWORD *)(v10 + v8 + 32) = 0;
        *(_QWORD *)(v10 + v8 + 16) = 0;
        ++*(_DWORD *)(v10 + v8 + 40);
        v4 = v3[2];
      }
      ++v9;
      v8 += 56;
    }
    while (v9 < v4);
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::setCapacity(result, a2);
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 56 * v4;
      do
      {
        v7 = v3[4] + v6;
        *(_QWORD *)v7 = 0xFFFFFFFFLL;
        *(_DWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 48) = 0;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 40) = 0;
        v6 += 56;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::clear((_QWORD *)a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  v8 = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::SkinnedMeshJointRange>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 56 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 56;
        v11 -= 56;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 56 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 56 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SkinnedMeshJointRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::make::shared::unsafelyInplace<re::ecs2::SkeletalPoseBufferComponent>(_QWORD *a1)
{
  re *inited;
  uint64_t i;
  _QWORD *v4;

  bzero(a1, 0x270uLL);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  a1[2] = 0;
  *((_BYTE *)a1 + 24) = 0;
  *a1 = &off_24ED5A858;
  inited = (re *)objc_initWeak((id *)a1 + 4, 0);
  a1[5] = 0;
  a1[9] = re::globalAllocators(inited)[2];
  *(_OWORD *)((char *)a1 + 108) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_DWORD *)a1 + 40) = 0;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  a1[21] = 0;
  a1[22] = 0xFFFFFFFFFFFFFFFLL;
  a1[23] = 0;
  a1[24] = 0;
  memset_pattern16(a1 + 25, &unk_22610D490, 0x40uLL);
  for (i = 0; i != 40; i += 5)
  {
    v4 = &a1[i];
    v4[37] = 0;
    v4[34] = 0;
    v4[35] = 0;
    v4[33] = 0;
    *((_DWORD *)v4 + 72) = 0;
  }
  a1[77] = 0;
  a1[74] = 0;
  a1[75] = 0;
  a1[73] = 0;
  *((_DWORD *)a1 + 152) = 0;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::SkeletalPoseBufferSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::SkeletalPoseBufferSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_ScopeLanePair(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410AF00);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410AF00))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410B040, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410B050 = 0;
    qword_25410B060 = 0;
    qword_25410B068 = 0xFFFFFFFFLL;
    qword_25410B040 = (uint64_t)&off_24ED7DAA8;
    qword_25410B070 = (uint64_t)"ScopeLanePair";
    dword_25410B078 = 0;
    xmmword_25410B080 = 0u;
    unk_25410B090 = 0u;
    xmmword_25410B0A0 = 0u;
    qword_25410B0B0 = 0;
    __cxa_guard_release(&qword_25410AF00);
  }
  return &qword_25410B040;
}

void re::ecs2::initInfo_ScopeLanePair(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;

  v15[0] = 0x5EF9E11BBFF1A274;
  v15[1] = "ScopeLanePair";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  v4 = atomic_load((unsigned __int8 *)&qword_25410AF08);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410AF08);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::DynamicString>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "scope";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_25410AF68 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::IntrospectionInfo<re::DynamicString>::get(1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "lane";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x2000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_25410AF70 = v13;
      __cxa_guard_release(&qword_25410AF08);
    }
  }
  *((_QWORD *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25410AF68;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ScopeLanePair>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ScopeLanePair>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ScopeLanePair>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ScopeLanePair>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v16;
}

_QWORD *re::internal::defaultConstruct<re::ecs2::ScopeLanePair>(_anonymous_namespace_ *a1, uint64_t a2, _OWORD *a3)
{
  _OWORD *v3;
  _anonymous_namespace_ *v4;

  v3 = a3;
  *a3 = 0u;
  a3[1] = 0u;
  v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  v3[2] = 0u;
  v3[3] = 0u;
  v3 += 2;
  return re::DynamicString::setCapacity(v3, 0);
}

double re::internal::defaultDestruct<re::ecs2::ScopeLanePair>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _OWORD *v5;
  double result;

  v5 = a3 + 4;
  v4 = a3[4];
  if (v4)
  {
    if ((a3[5] & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[6]);
    result = 0.0;
    *v5 = 0u;
    v5[1] = 0u;
  }
  if (*a3)
  {
    if ((a3[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 40))(*a3, a3[2]);
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }
  return result;
}

_QWORD *re::internal::defaultConstructV2<re::ecs2::ScopeLanePair>(_anonymous_namespace_ *a1)
{
  _anonymous_namespace_ *v1;
  _anonymous_namespace_ *v2;

  v1 = a1;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v1, 0);
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  v1 = (_anonymous_namespace_ *)((char *)v1 + 32);
  return re::DynamicString::setCapacity(v1, 0);
}

double re::internal::defaultDestructV2<re::ecs2::ScopeLanePair>(_QWORD *a1)
{
  uint64_t v2;
  _OWORD *v3;
  double result;

  v3 = a1 + 4;
  v2 = a1[4];
  if (v2)
  {
    if ((a1[5] & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[6]);
    result = 0.0;
    *v3 = 0u;
    v3[1] = 0u;
  }
  if (*a1)
  {
    if ((a1[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, a1[2]);
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

uint64_t re::ecs2::introspect_ScopeLanePair(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ScopeLanePair", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ScopeLanePair, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ScopeLanePair, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ScopeLanePair>, this);
}

uint64_t *re::ecs2::allocInfo_CameraViewport(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410AF10);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410AF10))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410B0B8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410B0C8 = 0;
    qword_25410B0D8 = 0;
    qword_25410B0E0 = 0xFFFFFFFFLL;
    qword_25410B0B8 = (uint64_t)&off_24ED7DAA8;
    qword_25410B0E8 = (uint64_t)"CameraViewport";
    dword_25410B0F0 = 0;
    xmmword_25410B0F8 = 0u;
    unk_25410B108 = 0u;
    xmmword_25410B118 = 0u;
    qword_25410B128 = 0;
    __cxa_guard_release(&qword_25410AF10);
  }
  return &qword_25410B0B8;
}

void re::ecs2::initInfo_CameraViewport(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[2];
  __int128 v24;

  v23[0] = 0xF750B41F86BFEE16;
  v23[1] = "CameraViewport";
  re::StringID::destroyString((re::StringID *)v23);
  *((_OWORD *)this + 2) = v24;
  v4 = atomic_load((unsigned __int8 *)&qword_25410AF18);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410AF18);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_float((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "originX";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_25410AF88 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_float((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "originY";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x400000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_25410AF90 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_float((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "width";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x800000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_25410AF98 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_float((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "height";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0xC00000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_25410AFA0 = v21;
      __cxa_guard_release(&qword_25410AF18);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_25410AF88;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::CameraViewport>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::CameraViewport>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::CameraViewport>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::CameraViewport>;
  re::IntrospectionRegistry::add(this, v3);
  v22 = v24;
}

double re::internal::defaultConstruct<re::ecs2::CameraViewport>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  double result;

  result = 0.0;
  *a3 = xmmword_22610BC10;
  return result;
}

double re::internal::defaultConstructV2<re::ecs2::CameraViewport>(_OWORD *a1)
{
  double result;

  result = 0.0;
  *a1 = xmmword_22610BC10;
  return result;
}

uint64_t re::ecs2::introspect_CameraViewport(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CameraViewport", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CameraViewport, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CameraViewport, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CameraViewport>, this);
}

void re::ecs2::introspect_CameraOrientation(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  StringID v34;
  _QWORD v35[2];
  _QWORD v36[61];

  v2 = atomic_load((unsigned __int8 *)&qword_25410AF20);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_25410AF20);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Portrait";
      qword_25410AF78 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = 1;
      *(_QWORD *)(v30 + 16) = "Landscape";
      qword_25410AF80 = v30;
      __cxa_guard_release(&qword_25410AF20);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25410AF28);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25410AF28))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25410AFF8, "CameraOrientation", 4, 4, 1, 1);
    qword_25410AFF8 = (uint64_t)&off_24ED7D9E8;
    qword_25410B038 = (uint64_t)&re::ecs2::introspect_CameraOrientation(BOOL)::enumTable;
    dword_25410B008 = 9;
    __cxa_guard_release(&qword_25410AF28);
  }
  if ((_MergedGlobals_189 & 1) == 0)
  {
    _MergedGlobals_189 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25410AFF8, a2);
    v32 = 0x586A12A243D84296;
    v33 = "CameraOrientation";
    v36[0] = 208862;
    v36[1] = "int";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v36);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v36);
      v6 = (unsigned int *)qword_25410B038;
      v35[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v34.var0 = 2 * v12;
            v34.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v16, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v34.var0 = 2 * v20;
              v34.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v24, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v25);
      xmmword_25410B018 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "CameraOrientation", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t *re::ecs2::allocInfo_PerspectiveCameraComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410AF30);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410AF30))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410B130, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410B140 = 0;
    qword_25410B150 = 0;
    qword_25410B158 = 0xFFFFFFFFLL;
    qword_25410B130 = (uint64_t)&off_24ED7DAA8;
    qword_25410B160 = (uint64_t)"PerspectiveCameraComponent";
    dword_25410B168 = 0;
    xmmword_25410B170 = 0u;
    unk_25410B180 = 0u;
    xmmword_25410B190 = 0u;
    qword_25410B1A0 = 0;
    __cxa_guard_release(&qword_25410AF30);
  }
  return &qword_25410B130;
}

void re::ecs2::initInfo_PerspectiveCameraComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  uint64_t v23;
  __int128 v24;
  _QWORD v25[2];
  __int128 v26;

  v25[0] = 0x7E1E37D6BC901B38;
  v25[1] = "PerspectiveCameraComponent";
  re::StringID::destroyString((re::StringID *)v25);
  *((_OWORD *)this + 2) = v26;
  v4 = atomic_load((unsigned __int8 *)&qword_25410AF38);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410AF38);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410AFA8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_float((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "near";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1C00000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410AFB0 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_float((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "far";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x2000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25410AFB8 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_float((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "fieldOfView";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x2400000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_25410AFC0 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      re::ecs2::introspect_CameraOrientation((re::ecs2 *)v21, v22);
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = "cameraOrientation";
      *(_QWORD *)(v23 + 16) = &qword_25410AFF8;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = 0x2800000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_25410AFC8 = v23;
      __cxa_guard_release(&qword_25410AF38);
    }
  }
  *((_QWORD *)this + 2) = 0x11000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_25410AFA8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PerspectiveCameraComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PerspectiveCameraComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PerspectiveCameraComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PerspectiveCameraComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v24 = v26;
}

void re::internal::defaultConstruct<re::ecs2::PerspectiveCameraComponent>(int a1, int a2, re::ecs2::PerspectiveCameraComponent *this)
{
  re::ecs2::PerspectiveCameraComponent::PerspectiveCameraComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::PerspectiveCameraComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PerspectiveCameraComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PerspectiveCameraComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PerspectiveCameraComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PerspectiveCameraComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PerspectiveCameraComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PerspectiveCameraComponent>, this);
}

uint64_t *re::ecs2::allocInfo_OrthographicCameraComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410AF40);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410AF40))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410B1A8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410B1B8 = 0;
    qword_25410B1C8 = 0;
    qword_25410B1D0 = 0xFFFFFFFFLL;
    qword_25410B1A8 = (uint64_t)&off_24ED7DAA8;
    qword_25410B1D8 = (uint64_t)"OrthographicCameraComponent";
    dword_25410B1E0 = 0;
    xmmword_25410B1E8 = 0u;
    unk_25410B1F8 = 0u;
    xmmword_25410B208 = 0u;
    qword_25410B218 = 0;
    __cxa_guard_release(&qword_25410AF40);
  }
  return &qword_25410B1A8;
}

void re::ecs2::initInfo_OrthographicCameraComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  uint64_t v23;
  __int128 v24;
  _QWORD v25[2];
  __int128 v26;

  v25[0] = 0x869DF0D89BEB39D0;
  v25[1] = "OrthographicCameraComponent";
  re::StringID::destroyString((re::StringID *)v25);
  *((_OWORD *)this + 2) = v26;
  v4 = atomic_load((unsigned __int8 *)&qword_25410AF48);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410AF48);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410AFD0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_float((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "near";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1C00000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410AFD8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_float((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "far";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x2000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25410AFE0 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_float((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "scale";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x2400000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_25410AFE8 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      re::ecs2::introspect_CameraOrientation((re::ecs2 *)v21, v22);
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = "cameraOrientation";
      *(_QWORD *)(v23 + 16) = &qword_25410AFF8;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = 0x2800000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_25410AFF0 = v23;
      __cxa_guard_release(&qword_25410AF48);
    }
  }
  *((_QWORD *)this + 2) = 0xF000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_25410AFD0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::OrthographicCameraComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::OrthographicCameraComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::OrthographicCameraComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::OrthographicCameraComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v24 = v26;
}

double re::internal::defaultConstruct<re::ecs2::OrthographicCameraComponent>(int a1, int a2, re::ecs2::OrthographicCameraComponent *this)
{
  return re::ecs2::OrthographicCameraComponent::OrthographicCameraComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::OrthographicCameraComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::OrthographicCameraComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_OrthographicCameraComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"OrthographicCameraComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_OrthographicCameraComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_OrthographicCameraComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::OrthographicCameraComponent>, this);
}

uint64_t *re::ecs2::allocInfo_CustomMatrixCameraComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410AF50);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410AF50))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410B220, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410B230 = 0;
    qword_25410B240 = 0;
    qword_25410B248 = 0xFFFFFFFFLL;
    qword_25410B220 = (uint64_t)&off_24ED7DAA8;
    qword_25410B250 = (uint64_t)"CustomMatrixCameraComponent";
    dword_25410B258 = 0;
    xmmword_25410B260 = 0u;
    unk_25410B270 = 0u;
    xmmword_25410B280 = 0u;
    qword_25410B290 = 0;
    __cxa_guard_release(&qword_25410AF50);
  }
  return &qword_25410B220;
}

void re::ecs2::initInfo_CustomMatrixCameraComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x9A2110E153E34C8CLL;
  v10[1] = "CustomMatrixCameraComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_25410AF60);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410AF60);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410AF58 = v8;
      __cxa_guard_release(&qword_25410AF60);
    }
  }
  *((_QWORD *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_25410AF58;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::CustomMatrixCameraComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::CustomMatrixCameraComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::CustomMatrixCameraComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::CustomMatrixCameraComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

re::ecs2::CustomMatrixCameraComponent *re::internal::defaultConstruct<re::ecs2::CustomMatrixCameraComponent>(int a1, int a2, re::ecs2::CustomMatrixCameraComponent *this)
{
  return re::ecs2::CustomMatrixCameraComponent::CustomMatrixCameraComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::CustomMatrixCameraComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::CustomMatrixCameraComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_CustomMatrixCameraComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CustomMatrixCameraComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CustomMatrixCameraComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CustomMatrixCameraComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CustomMatrixCameraComponent>, this);
}

void re::ecs2::PerspectiveCameraComponent::PerspectiveCameraComponent(re::ecs2::PerspectiveCameraComponent *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED5D530;
  *(_QWORD *)(v1 + 28) = 0x7F8000003C23D70ALL;
  *(_QWORD *)(v1 + 36) = 1115815936;
  *(_BYTE *)(v1 + 44) = 1;
  *(_BYTE *)(v1 + 176) = 0;
  *(_OWORD *)(v1 + 192) = xmmword_2260E5F40;
  v2 = 208;
  do
  {
    v3 = (_QWORD *)(v1 + v2);
    *v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    v3[3] = 0x3F80000000000000;
    v2 += 32;
  }
  while (v3 + 4 != (_QWORD *)(v1 + 272));
  *(_OWORD *)(v1 + 48) = xmmword_2260E5F10;
  *(_OWORD *)(v1 + 64) = xmmword_2260E5F20;
  *(_OWORD *)(v1 + 80) = xmmword_2260E5F40;
  *(_OWORD *)(v1 + 96) = xmmword_2260E5D70;
  *(_OWORD *)(v1 + 112) = xmmword_2260E5F10;
  *(_OWORD *)(v1 + 128) = xmmword_2260E5F20;
  *(_OWORD *)(v1 + 144) = xmmword_2260E5F40;
  *(_OWORD *)(v1 + 160) = xmmword_2260E5D70;
}

uint64_t re::ecs2::PerspectiveCameraComponent::firstPerspectiveCameraInScene(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;

  v1 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
       + 8);
  if (*(_QWORD *)(a1 + 224) <= v1)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8 * v1);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 0;
  v4 = *(uint64_t **)(v2 + 40);
  v5 = 8 * v3;
  while (1)
  {
    result = *v4;
    if ((*(_BYTE *)(*(_QWORD *)(*v4 + 16) + 288) & 1) != 0)
      break;
    ++v4;
    v5 -= 8;
    if (!v5)
      return 0;
  }
  return result;
}

__n128 re::ecs2::PerspectiveCameraComponent::calculateWorldPose@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  __n128 result;
  float32x4_t v21;
  float32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  _BYTE v25[16];
  float32x4_t v26;
  float32x4_t v27;

  re::ecs2::TransformComponent::worldSRT(*(re::ecs2::TransformComponent ***)(a1 + 16), (const re::ecs2::Entity *)1, (uint64_t)v25);
  v21 = v26;
  v22 = v27;
  re::ecs2::PerspectiveCameraComponent::localEyePose((_OWORD *)a1, a2, (uint64_t)&v23);
  _Q6 = (int32x4_t)v21;
  v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q6, _Q6), (int8x16_t)v21, 0xCuLL);
  v8 = vnegq_f32(v21);
  v9 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v23, v23), (int8x16_t)v23, 0xCuLL), v8), (float32x4_t)v23, v7);
  v10 = (int8x16_t)vaddq_f32(v9, v9);
  v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), v10, 0xCuLL);
  v12 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL), v8), v11, v7);
  v13 = vaddq_f32(vaddq_f32((float32x4_t)v23, vmulq_laneq_f32(v11, v21, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), v12, 0xCuLL));
  _Q3 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v24, v24), (int8x16_t)v24, 0xCuLL), v8), (float32x4_t)v24, v7);
  result = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q3, (int32x4_t)_Q3), _Q3, 0xCuLL), (float32x4_t)v24, v21, 3), v21, (float32x4_t)v24, 3);
  _S2 = v24.i32[3];
  __asm { FMLA            S3, S2, V6.S[3] }
  result.n128_u32[3] = _Q3.i32[0];
  *(float32x4_t *)a3 = vaddq_f32(v22, v13);
  *(__n128 *)(a3 + 16) = result;
  return result;
}

_OWORD *re::ecs2::PerspectiveCameraComponent::localEyePose@<X0>(_OWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;

  if ((_DWORD)a2 == 2)
  {
    v3 = result[15];
    v4 = result[16];
LABEL_7:
    *(_OWORD *)a3 = v3;
    *(_OWORD *)(a3 + 16) = v4;
    return result;
  }
  if ((_DWORD)a2 == 1)
  {
    v3 = result[13];
    v4 = result[14];
    goto LABEL_7;
  }
  if ((_DWORD)a2)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid Camera Eye.", "!\"Unreachable code\"", "localEyePose", 143);
    result = (_OWORD *)_os_crash();
    __break(1u);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0x3F80000000000000;
  }
  return result;
}

float re::ecs2::PerspectiveCameraComponent::calculateProjection@<S0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  _OWORD v5[4];

  *(_DWORD *)a2 = 0;
  *(_OWORD *)(a2 + 4) = xmmword_226117740;
  *(_QWORD *)(a2 + 20) = 0xBDCCCCCD3DCCCCCDLL;
  *(_BYTE *)(a2 + 28) = 0;
  *(_OWORD *)(a2 + 32) = xmmword_2260E5F40;
  *(_DWORD *)(a2 + 48) = 1;
  *(_QWORD *)(a2 + 56) = 0;
  re::Projection::makePerspectiveFieldOfViewReverseDepth((float)(a1[9] * 3.1416) / 180.0, a3, a1[7], a1[8], v5);
  return re::Projection::setFromMatrix4x4F(a2, (uint64_t)v5);
}

float re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect(uint64_t a1, float *a2, float a3)
{
  float v3;
  float v4;
  float v5;
  float result;
  float v7;
  float v8;
  float v9;

  if (*(_DWORD *)(a1 + 40))
  {
    v3 = (float)(a2[5] + a2[6]) * 0.5;
    v4 = (float)((float)(a2[4] - a2[3]) * 0.5) / a3;
    v5 = v3 + v4;
    result = v3 - v4;
    a2[5] = v5;
    a2[6] = result;
  }
  else
  {
    v7 = (float)(a2[3] + a2[4]) * 0.5;
    v8 = (float)((float)(a2[5] - a2[6]) * 0.5) * a3;
    v9 = v7 + v8;
    result = v7 - v8;
    a2[3] = result;
    a2[4] = v9;
  }
  return result;
}

__n128 re::ecs2::PerspectiveCameraComponent::localEyePoseMatrix@<Q0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  __int128 v18;
  float v19;
  float v20;
  __int128 v21;
  __int128 v22;
  __n128 result;
  __n128 v24;
  float v25;
  float v26;
  float v27;
  float v28;

  re::ecs2::PerspectiveCameraComponent::localEyePose(a1, a2, (uint64_t)&v24);
  v4 = v25;
  v5 = v26;
  v6 = v4 + v4;
  v7 = v5 + v5;
  v8 = v27;
  v9 = v8 + v8;
  v10 = v4 * (float)(v4 + v4);
  v11 = v5 * (float)(v5 + v5);
  v12 = v8 * (float)(v8 + v8);
  v13 = v6 * v26;
  v14 = v6 * v27;
  v15 = v7 * v27;
  v16 = v7 * v28;
  v17 = v9 * v28;
  HIDWORD(v18) = 0;
  *(float *)&v18 = 1.0 - (float)(v11 + v12);
  *((float *)&v18 + 1) = (float)(v6 * v26) + v17;
  *((float *)&v18 + 2) = (float)(v6 * v27) - v16;
  v19 = v6 * v28;
  v20 = 1.0 - (float)(v10 + v12);
  HIDWORD(v21) = 0;
  *(float *)&v21 = v13 - v17;
  *((float *)&v21 + 1) = v20;
  *((float *)&v21 + 2) = v15 + v19;
  HIDWORD(v22) = 0;
  *(float *)&v22 = v14 + v16;
  *((float *)&v22 + 1) = v15 - v19;
  *((float *)&v22 + 2) = 1.0 - (float)(v10 + v11);
  *(_OWORD *)a3 = v18;
  *(_OWORD *)(a3 + 16) = v21;
  result = v24;
  result.n128_u32[3] = 1.0;
  *(_OWORD *)(a3 + 32) = v22;
  *(__n128 *)(a3 + 48) = result;
  return result;
}

uint64_t re::ecs2::PerspectiveCameraComponent::setLocalEyePose(uint64_t result, _OWORD *a2, int a3)
{
  _OWORD *v3;
  __int128 v4;

  if (a3)
  {
    if (a3 == 2)
    {
      v3 = (_OWORD *)(result + 240);
    }
    else
    {
      if (a3 != 1)
      {
        re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Invalid Camera Eye.", "!\"Unreachable code\"", "setLocalEyePose", 162);
        result = _os_crash();
        __break(1u);
        return result;
      }
      v3 = (_OWORD *)(result + 208);
    }
    v4 = a2[1];
    *v3 = *a2;
    v3[1] = v4;
  }
  return result;
}

uint64_t re::ecs2::PerspectiveCameraComponent::setLocalEyePoseFromMatrix(uint64_t a1, uint64_t a2, int a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v14;
  BOOL v15;
  float v16;
  unsigned int v17;
  float32x2_t v18;
  float32x2_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  unsigned int v27;
  float32x2_t v28;
  float32x2_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float32x2_t v35;
  float32x2_t v36;
  float v37;
  float v38;
  unsigned int v39;
  float32x2_t v40;
  float32x2_t v41;
  __int128 v42;
  float v43;
  float v44;
  float v45;
  _OWORD v47[2];

  v4 = *(float *)a2;
  v3 = *(float *)(a2 + 4);
  v5 = *(float *)(a2 + 8);
  v6 = *(float *)(a2 + 16);
  v7 = *(float *)(a2 + 20);
  v8 = *(float *)(a2 + 24);
  v9 = *(float *)(a2 + 32);
  v10 = *(float *)(a2 + 36);
  v11 = *(float *)(a2 + 40);
  v12 = (float)(*(float *)a2 + v7) + v11;
  if (v12 >= 0.0)
  {
    v33 = sqrtf(v12 + 1.0);
    v34 = v33 + v33;
    v35 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33));
    v36 = vmul_f32(v35, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33), v35));
    v37 = vmul_f32(v36, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33), v36)).f32[0];
    *(float *)&v42 = (float)(v8 - v10) * v37;
    v43 = (float)(v9 - v5) * v37;
    v44 = (float)(v3 - v6) * v37;
    v45 = v34 * 0.25;
  }
  else if (v4 < v7 || v4 < v11)
  {
    v14 = 1.0 - v4;
    v15 = v7 < v11;
    v16 = sqrtf((float)(v14 - v7) + v11);
    *(float *)&v17 = v16 + v16;
    v18 = vrecpe_f32((float32x2_t)v17);
    v19 = vmul_f32(v18, vrecps_f32((float32x2_t)v17, v18));
    v20 = vmul_f32(v19, vrecps_f32((float32x2_t)v17, v19)).f32[0];
    v21 = (float)(v5 + v9) * v20;
    v22 = v8 + v10;
    v23 = v22 * v20;
    v24 = *(float *)&v17 * 0.25;
    v25 = (float)(v3 - v6) * v20;
    v26 = sqrtf(v7 + (float)(v14 - v11));
    *(float *)&v27 = v26 + v26;
    v28 = vrecpe_f32((float32x2_t)v27);
    v29 = vmul_f32(v28, vrecps_f32((float32x2_t)v27, v28));
    v29.f32[0] = vmul_f32(v29, vrecps_f32((float32x2_t)v27, v29)).f32[0];
    v30 = (float)(v3 + v6) * v29.f32[0];
    v31 = *(float *)&v27 * 0.25;
    v32 = v22 * v29.f32[0];
    v45 = (float)(v9 - v5) * v29.f32[0];
    if (v15)
      *(float *)&v42 = v21;
    else
      *(float *)&v42 = v30;
    if (v15)
      v43 = v23;
    else
      v43 = v31;
    if (v15)
      v44 = v24;
    else
      v44 = v32;
    if (v15)
      v45 = v25;
  }
  else
  {
    v38 = sqrtf(v4 + (float)((float)(1.0 - v7) - v11));
    *(float *)&v39 = v38 + v38;
    v40 = vrecpe_f32((float32x2_t)v39);
    v41 = vmul_f32(v40, vrecps_f32((float32x2_t)v39, v40));
    v41.f32[0] = vmul_f32(v41, vrecps_f32((float32x2_t)v39, v41)).f32[0];
    *(float *)&v42 = *(float *)&v39 * 0.25;
    v43 = (float)(v3 + v6) * v41.f32[0];
    v44 = (float)(v5 + v9) * v41.f32[0];
    v45 = (float)(v8 - v10) * v41.f32[0];
  }
  *((float *)&v42 + 1) = v43;
  *((_QWORD *)&v42 + 1) = __PAIR64__(LODWORD(v45), LODWORD(v44));
  v47[0] = *(_OWORD *)(a2 + 48);
  v47[1] = v42;
  return re::ecs2::PerspectiveCameraComponent::setLocalEyePose(a1, v47, a3);
}

double re::ecs2::OrthographicCameraComponent::OrthographicCameraComponent(re::ecs2::OrthographicCameraComponent *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  double result;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED5D580;
  *(_QWORD *)(v1 + 28) = 0x447A00003C23D70ALL;
  *(_QWORD *)(v1 + 36) = 1065353216;
  *(_BYTE *)(v1 + 44) = 1;
  v2 = 176;
  do
  {
    v3 = (_QWORD *)(v1 + v2);
    *v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    v3[3] = 0x3F80000000000000;
    v2 += 32;
  }
  while (v3 + 4 != (_QWORD *)(v1 + 240));
  *(_QWORD *)&result = 1065353216;
  *(_OWORD *)(v1 + 48) = xmmword_2260E5F10;
  *(_OWORD *)(v1 + 64) = xmmword_2260E5F20;
  *(_OWORD *)(v1 + 80) = xmmword_2260E5F40;
  *(_OWORD *)(v1 + 96) = xmmword_2260E5D70;
  *(_OWORD *)(v1 + 112) = xmmword_2260E5F10;
  *(_OWORD *)(v1 + 128) = xmmword_2260E5F20;
  *(_OWORD *)(v1 + 144) = xmmword_2260E5F40;
  *(_OWORD *)(v1 + 160) = xmmword_2260E5D70;
  return result;
}

uint64_t re::ecs2::OrthographicCameraComponent::firstOrthographicCameraInScene(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;

  v1 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
       + 8);
  if (*(_QWORD *)(a1 + 224) <= v1)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8 * v1);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 0;
  v4 = *(uint64_t **)(v2 + 40);
  v5 = 8 * v3;
  while (1)
  {
    result = *v4;
    if ((*(_BYTE *)(*(_QWORD *)(*v4 + 16) + 288) & 1) != 0)
      break;
    ++v4;
    v5 -= 8;
    if (!v5)
      return 0;
  }
  return result;
}

__n128 re::ecs2::OrthographicCameraComponent::calculateWorldPose@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  __n128 result;
  float32x4_t v21;
  float32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  _BYTE v25[16];
  float32x4_t v26;
  float32x4_t v27;

  re::ecs2::TransformComponent::worldSRT(*(re::ecs2::TransformComponent ***)(a1 + 16), (const re::ecs2::Entity *)1, (uint64_t)v25);
  v21 = v26;
  v22 = v27;
  re::ecs2::OrthographicCameraComponent::localEyePose((_OWORD *)a1, a2, (uint64_t)&v23);
  _Q6 = (int32x4_t)v21;
  v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q6, _Q6), (int8x16_t)v21, 0xCuLL);
  v8 = vnegq_f32(v21);
  v9 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v23, v23), (int8x16_t)v23, 0xCuLL), v8), (float32x4_t)v23, v7);
  v10 = (int8x16_t)vaddq_f32(v9, v9);
  v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), v10, 0xCuLL);
  v12 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL), v8), v11, v7);
  v13 = vaddq_f32(vaddq_f32((float32x4_t)v23, vmulq_laneq_f32(v11, v21, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), v12, 0xCuLL));
  _Q3 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v24, v24), (int8x16_t)v24, 0xCuLL), v8), (float32x4_t)v24, v7);
  result = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q3, (int32x4_t)_Q3), _Q3, 0xCuLL), (float32x4_t)v24, v21, 3), v21, (float32x4_t)v24, 3);
  _S2 = v24.i32[3];
  __asm { FMLA            S3, S2, V6.S[3] }
  result.n128_u32[3] = _Q3.i32[0];
  *(float32x4_t *)a3 = vaddq_f32(v22, v13);
  *(__n128 *)(a3 + 16) = result;
  return result;
}

_OWORD *re::ecs2::OrthographicCameraComponent::localEyePose@<X0>(_OWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;

  if ((_DWORD)a2 == 2)
  {
    v3 = result[13];
    v4 = result[14];
LABEL_7:
    *(_OWORD *)a3 = v3;
    *(_OWORD *)(a3 + 16) = v4;
    return result;
  }
  if ((_DWORD)a2 == 1)
  {
    v3 = result[11];
    v4 = result[12];
    goto LABEL_7;
  }
  if ((_DWORD)a2)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid Camera Eye.", "!\"Unreachable code\"", "localEyePose", 241);
    result = (_OWORD *)_os_crash();
    __break(1u);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0x3F80000000000000;
  }
  return result;
}

float re::ecs2::OrthographicCameraComponent::calculateProjection@<S0>(float *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float v3;
  float v4;
  float32x2_t v5;
  float v6;
  float v7;
  __int128 v8;
  float v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  float v13;
  unint64_t v14;
  _OWORD v16[4];

  *(_DWORD *)a2 = 0;
  *(_OWORD *)(a2 + 4) = xmmword_226117740;
  *(_QWORD *)(a2 + 20) = 0xBDCCCCCD3DCCCCCDLL;
  *(_BYTE *)(a2 + 28) = 0;
  *(_OWORD *)(a2 + 32) = xmmword_2260E5F40;
  *(_DWORD *)(a2 + 48) = 1;
  *(_QWORD *)(a2 + 56) = 0;
  v4 = a1[8];
  v3 = a1[9];
  v5.f32[0] = v3 * a3;
  v6 = 2.0 / (float)(v5.f32[0] + v5.f32[0]);
  v7 = 2.0 / (float)(v3 + v3);
  v5.f32[1] = v3;
  *(float32x2_t *)&v8 = vdiv_f32(vsub_f32(v5, v5), vsub_f32(vneg_f32(v5), v5));
  v9 = v4 - a1[7];
  *(float *)&v10 = 1.0 / v9;
  *(float *)&v11 = v4 / v9;
  *(_QWORD *)&v12 = 0;
  v13 = v6;
  LODWORD(v14) = 0;
  *((float *)&v14 + 1) = v7;
  *((_QWORD *)&v12 + 1) = v10;
  *((_QWORD *)&v8 + 1) = __PAIR64__(1.0, v11);
  v16[0] = LODWORD(v13);
  v16[1] = v14;
  v16[2] = v12;
  v16[3] = v8;
  return re::Projection::setFromMatrix4x4F(a2, (uint64_t)v16);
}

__n128 re::ecs2::OrthographicCameraComponent::localEyePoseMatrix@<Q0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  __int128 v18;
  float v19;
  float v20;
  __int128 v21;
  __int128 v22;
  __n128 result;
  __n128 v24;
  float v25;
  float v26;
  float v27;
  float v28;

  re::ecs2::OrthographicCameraComponent::localEyePose(a1, a2, (uint64_t)&v24);
  v4 = v25;
  v5 = v26;
  v6 = v4 + v4;
  v7 = v5 + v5;
  v8 = v27;
  v9 = v8 + v8;
  v10 = v4 * (float)(v4 + v4);
  v11 = v5 * (float)(v5 + v5);
  v12 = v8 * (float)(v8 + v8);
  v13 = v6 * v26;
  v14 = v6 * v27;
  v15 = v7 * v27;
  v16 = v7 * v28;
  v17 = v9 * v28;
  HIDWORD(v18) = 0;
  *(float *)&v18 = 1.0 - (float)(v11 + v12);
  *((float *)&v18 + 1) = (float)(v6 * v26) + v17;
  *((float *)&v18 + 2) = (float)(v6 * v27) - v16;
  v19 = v6 * v28;
  v20 = 1.0 - (float)(v10 + v12);
  HIDWORD(v21) = 0;
  *(float *)&v21 = v13 - v17;
  *((float *)&v21 + 1) = v20;
  *((float *)&v21 + 2) = v15 + v19;
  HIDWORD(v22) = 0;
  *(float *)&v22 = v14 + v16;
  *((float *)&v22 + 1) = v15 - v19;
  *((float *)&v22 + 2) = 1.0 - (float)(v10 + v11);
  *(_OWORD *)a3 = v18;
  *(_OWORD *)(a3 + 16) = v21;
  result = v24;
  result.n128_u32[3] = 1.0;
  *(_OWORD *)(a3 + 32) = v22;
  *(__n128 *)(a3 + 48) = result;
  return result;
}

uint64_t re::ecs2::OrthographicCameraComponent::setLocalEyePose(uint64_t result, _OWORD *a2, int a3)
{
  _OWORD *v3;
  __int128 v4;

  if (a3)
  {
    if (a3 == 2)
    {
      v3 = (_OWORD *)(result + 208);
    }
    else
    {
      if (a3 != 1)
      {
        re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Invalid Camera Eye.", "!\"Unreachable code\"", "setLocalEyePose", 260);
        result = _os_crash();
        __break(1u);
        return result;
      }
      v3 = (_OWORD *)(result + 176);
    }
    v4 = a2[1];
    *v3 = *a2;
    v3[1] = v4;
  }
  return result;
}

uint64_t re::ecs2::OrthographicCameraComponent::setLocalEyePoseFromMatrix(uint64_t a1, uint64_t a2, int a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v14;
  BOOL v15;
  float v16;
  unsigned int v17;
  float32x2_t v18;
  float32x2_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  unsigned int v27;
  float32x2_t v28;
  float32x2_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float32x2_t v35;
  float32x2_t v36;
  float v37;
  float v38;
  unsigned int v39;
  float32x2_t v40;
  float32x2_t v41;
  __int128 v42;
  float v43;
  float v44;
  float v45;
  _OWORD v47[2];

  v4 = *(float *)a2;
  v3 = *(float *)(a2 + 4);
  v5 = *(float *)(a2 + 8);
  v6 = *(float *)(a2 + 16);
  v7 = *(float *)(a2 + 20);
  v8 = *(float *)(a2 + 24);
  v9 = *(float *)(a2 + 32);
  v10 = *(float *)(a2 + 36);
  v11 = *(float *)(a2 + 40);
  v12 = (float)(*(float *)a2 + v7) + v11;
  if (v12 >= 0.0)
  {
    v33 = sqrtf(v12 + 1.0);
    v34 = v33 + v33;
    v35 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33));
    v36 = vmul_f32(v35, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33), v35));
    v37 = vmul_f32(v36, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33), v36)).f32[0];
    *(float *)&v42 = (float)(v8 - v10) * v37;
    v43 = (float)(v9 - v5) * v37;
    v44 = (float)(v3 - v6) * v37;
    v45 = v34 * 0.25;
  }
  else if (v4 < v7 || v4 < v11)
  {
    v14 = 1.0 - v4;
    v15 = v7 < v11;
    v16 = sqrtf((float)(v14 - v7) + v11);
    *(float *)&v17 = v16 + v16;
    v18 = vrecpe_f32((float32x2_t)v17);
    v19 = vmul_f32(v18, vrecps_f32((float32x2_t)v17, v18));
    v20 = vmul_f32(v19, vrecps_f32((float32x2_t)v17, v19)).f32[0];
    v21 = (float)(v5 + v9) * v20;
    v22 = v8 + v10;
    v23 = v22 * v20;
    v24 = *(float *)&v17 * 0.25;
    v25 = (float)(v3 - v6) * v20;
    v26 = sqrtf(v7 + (float)(v14 - v11));
    *(float *)&v27 = v26 + v26;
    v28 = vrecpe_f32((float32x2_t)v27);
    v29 = vmul_f32(v28, vrecps_f32((float32x2_t)v27, v28));
    v29.f32[0] = vmul_f32(v29, vrecps_f32((float32x2_t)v27, v29)).f32[0];
    v30 = (float)(v3 + v6) * v29.f32[0];
    v31 = *(float *)&v27 * 0.25;
    v32 = v22 * v29.f32[0];
    v45 = (float)(v9 - v5) * v29.f32[0];
    if (v15)
      *(float *)&v42 = v21;
    else
      *(float *)&v42 = v30;
    if (v15)
      v43 = v23;
    else
      v43 = v31;
    if (v15)
      v44 = v24;
    else
      v44 = v32;
    if (v15)
      v45 = v25;
  }
  else
  {
    v38 = sqrtf(v4 + (float)((float)(1.0 - v7) - v11));
    *(float *)&v39 = v38 + v38;
    v40 = vrecpe_f32((float32x2_t)v39);
    v41 = vmul_f32(v40, vrecps_f32((float32x2_t)v39, v40));
    v41.f32[0] = vmul_f32(v41, vrecps_f32((float32x2_t)v39, v41)).f32[0];
    *(float *)&v42 = *(float *)&v39 * 0.25;
    v43 = (float)(v3 + v6) * v41.f32[0];
    v44 = (float)(v5 + v9) * v41.f32[0];
    v45 = (float)(v8 - v10) * v41.f32[0];
  }
  *((float *)&v42 + 1) = v43;
  *((_QWORD *)&v42 + 1) = __PAIR64__(LODWORD(v45), LODWORD(v44));
  v47[0] = *(_OWORD *)(a2 + 48);
  v47[1] = v42;
  return re::ecs2::OrthographicCameraComponent::setLocalEyePose(a1, v47, a3);
}

uint64_t re::ecs2::CustomMatrixCameraComponent::firstCustomMatrixCameraInScene(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;

  v1 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
       + 8);
  if (*(_QWORD *)(a1 + 224) <= v1)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8 * v1);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 0;
  v4 = *(uint64_t **)(v2 + 40);
  v5 = 8 * v3;
  while (1)
  {
    result = *v4;
    if ((*(_BYTE *)(*(_QWORD *)(*v4 + 16) + 288) & 1) != 0)
      break;
    ++v4;
    v5 -= 8;
    if (!v5)
      return 0;
  }
  return result;
}

re::ecs2::CustomMatrixCameraComponent *re::ecs2::CustomMatrixCameraComponent::CustomMatrixCameraComponent(re::ecs2::CustomMatrixCameraComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[4];
  _OWORD v11[4];

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_24ED5D5D0;
  *(_DWORD *)(v2 + 28) = 0;
  *(_BYTE *)(v2 + 32) = 0;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  v3 = 176;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  do
  {
    v4 = (_QWORD *)((char *)this + v3);
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = 0x3F80000000000000;
    v3 += 32;
  }
  while (v4 + 4 != (_QWORD *)(v2 + 240));
  *((_WORD *)this + 120) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  v11[0] = xmmword_22611B710;
  v11[1] = xmmword_22611B720;
  v11[2] = xmmword_22611B730;
  v11[3] = xmmword_22611B740;
  re::Projection::makeReverseDepth(v11, v10);
  v5 = v10[1];
  *((_OWORD *)this + 16) = v10[0];
  *((_OWORD *)this + 17) = v5;
  v6 = v10[3];
  *((_OWORD *)this + 18) = v10[2];
  *((_OWORD *)this + 19) = v6;
  v7 = *((_OWORD *)this + 17);
  *((_OWORD *)this + 20) = *((_OWORD *)this + 16);
  *((_OWORD *)this + 21) = v7;
  v8 = *((_OWORD *)this + 19);
  *((_OWORD *)this + 22) = *((_OWORD *)this + 18);
  *((_OWORD *)this + 23) = v8;
  *((_BYTE *)this + 32) = 1;
  *((_OWORD *)this + 3) = xmmword_2260E5F10;
  *((_OWORD *)this + 4) = xmmword_2260E5F20;
  *((_OWORD *)this + 5) = xmmword_2260E5F40;
  *((_OWORD *)this + 6) = xmmword_2260E5D70;
  *((_OWORD *)this + 7) = xmmword_2260E5F10;
  *((_OWORD *)this + 8) = xmmword_2260E5F20;
  *((_OWORD *)this + 9) = xmmword_2260E5F40;
  *((_OWORD *)this + 10) = xmmword_2260E5D70;
  return this;
}

void re::ecs2::CustomMatrixCameraComponent::calculateWorldPose(uint64_t a1@<X0>, uint64_t a2@<X1>, float32x4_t *a3@<X8>)
{
  unsigned __int8 *v6;
  int v7;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v17;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  char v30[16];
  float32x4_t v31;
  float32x4_t v32;

  if ((_DWORD)a2 == 2)
  {
    v6 = (unsigned __int8 *)(a1 + 241);
  }
  else
  {
    if ((_DWORD)a2 != 1)
    {
LABEL_7:
      re::ecs2::TransformComponent::worldSRT(*(re::ecs2::TransformComponent ***)(a1 + 16), (const re::ecs2::Entity *)1, (uint64_t)v30);
      v26 = v31;
      v27 = v32;
      re::ecs2::CustomMatrixCameraComponent::localEyePose(a1, a2, (float32x4_t *)&v28);
      _Q6 = (int32x4_t)v26;
      v9 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q6, _Q6), (int8x16_t)v26, 0xCuLL);
      v10 = vnegq_f32(v26);
      v11 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v28, v28), (int8x16_t)v28, 0xCuLL), v10), (float32x4_t)v28, v9);
      v12 = (int8x16_t)vaddq_f32(v11, v11);
      v13 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), v12, 0xCuLL);
      v14 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL), v10), v13, v9);
      v15 = vaddq_f32(vaddq_f32((float32x4_t)v28, vmulq_laneq_f32(v13, v26, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), v14, 0xCuLL));
      _Q3 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v29, v29), (int8x16_t)v29, 0xCuLL), v10), (float32x4_t)v29, v9);
      v17 = vmlaq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q3, (int32x4_t)_Q3), _Q3, 0xCuLL), (float32x4_t)v29, v26, 3), v26, (float32x4_t)v29, 3);
      _S2 = v29.i32[3];
      __asm { FMLA            S3, S2, V6.S[3] }
      v17.i32[3] = _Q3.i32[0];
      *a3 = vaddq_f32(v27, v15);
      a3[1] = v17;
      return;
    }
    v6 = (unsigned __int8 *)(a1 + 240);
  }
  v7 = *v6;
  if (v7 == 1)
  {
    if ((_DWORD)a2 == 2)
    {
      v23 = *(float32x4_t *)(a1 + 208);
      v24 = *(float32x4_t *)(a1 + 224);
    }
    else
    {
      v23 = *(float32x4_t *)(a1 + 176);
      v24 = *(float32x4_t *)(a1 + 192);
    }
    *a3 = v23;
    a3[1] = v24;
  }
  else
  {
    if (!v7)
      goto LABEL_7;
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid Camera Eye.", "!\"Unreachable code\"", "calculateWorldPose", 323);
    _os_crash();
    __break(1u);
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Invalid Camera Eye.", "!\"Unreachable code\"", "calculateWorldPose", 318);
    _os_crash();
    __break(1u);
  }
}

void re::ecs2::CustomMatrixCameraComponent::localEyePose(uint64_t a1@<X0>, uint64_t a2@<X1>, float32x4_t *a3@<X8>)
{
  __int128 v3;
  int v4;
  _OWORD *v5;
  __int128 v6;
  _OWORD v7[2];
  _OWORD v8[2];

  if ((_DWORD)a2 == 2)
  {
    v3 = *(_OWORD *)(a1 + 224);
    v7[0] = *(_OWORD *)(a1 + 208);
    v7[1] = v3;
    v4 = *(unsigned __int8 *)(a1 + 241);
    v5 = v7;
LABEL_7:
    re::ecs2::CustomMatrixCameraComponent::localEyePose(a1, (uint64_t)v5, v4, a3);
    return;
  }
  if ((_DWORD)a2 == 1)
  {
    v6 = *(_OWORD *)(a1 + 192);
    v8[0] = *(_OWORD *)(a1 + 176);
    v8[1] = v6;
    v4 = *(unsigned __int8 *)(a1 + 240);
    v5 = v8;
    goto LABEL_7;
  }
  if ((_DWORD)a2)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid Camera Eye.", "!\"Unreachable code\"", "localEyePose", 389);
    _os_crash();
    __break(1u);
  }
  else
  {
    a3->i64[0] = 0;
    a3->i64[1] = 0;
    a3[1].i64[0] = 0;
    a3[1].i64[1] = 0x3F80000000000000;
  }
}

uint64_t re::ecs2::CustomMatrixCameraComponent::projectionMatrix(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if ((_DWORD)a2 == 2)
    return a1 + 320;
  if (a2 <= 1)
    return a1 + 256;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid Camera Eye.", "!\"Unreachable code\"", "projectionMatrix", 335, v2, v3);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::ecs2::CustomMatrixCameraComponent::calculateProjection(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  *(_DWORD *)a3 = 0;
  *(_OWORD *)(a3 + 4) = xmmword_226117740;
  *(_QWORD *)(a3 + 20) = 0xBDCCCCCD3DCCCCCDLL;
  *(_BYTE *)(a3 + 28) = 0;
  *(_OWORD *)(a3 + 32) = xmmword_2260E5F40;
  *(_DWORD *)(a3 + 48) = 1;
  *(_QWORD *)(a3 + 56) = 0;
  if ((_DWORD)a2 == 2)
  {
    v3 = a1 + 320;
    goto LABEL_5;
  }
  if (a2 <= 1)
  {
    v3 = a1 + 256;
LABEL_5:
    re::Projection::setFromMatrix4x4F(a3, v3);
    return;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid Camera Eye.", "!\"Unreachable code\"", "calculateProjection", 347);
  _os_crash();
  __break(1u);
}

uint64_t re::ecs2::CustomMatrixCameraComponent::setProjectionFromMatrix(uint64_t result, __int128 *a2, unsigned int a3)
{
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (a3 == 2)
  {
    v3 = (_OWORD *)(result + 320);
    goto LABEL_5;
  }
  if (a3 <= 1)
  {
    v3 = (_OWORD *)(result + 256);
LABEL_5:
    v4 = *a2;
    v5 = a2[1];
    v6 = a2[3];
    v3[2] = a2[2];
    v3[3] = v6;
    *v3 = v4;
    v3[1] = v5;
    return result;
  }
  re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Invalid Camera Eye.", "!\"Unreachable code\"", "setProjectionFromMatrix", 365);
  result = _os_crash();
  __break(1u);
  return result;
}

float re::ecs2::CustomMatrixCameraComponent::adjustProjectionAspect(uint64_t a1, float *a2, float a3)
{
  float v3;
  float v4;
  float v5;
  float result;
  float v7;
  float v8;
  float v9;

  if (*(_DWORD *)(a1 + 28))
  {
    v3 = (float)(a2[5] + a2[6]) * 0.5;
    v4 = (float)((float)(a2[4] - a2[3]) * 0.5) / a3;
    v5 = v3 + v4;
    result = v3 - v4;
    a2[5] = v5;
    a2[6] = result;
  }
  else
  {
    v7 = (float)(a2[3] + a2[4]) * 0.5;
    v8 = (float)((float)(a2[5] - a2[6]) * 0.5) * a3;
    v9 = v7 + v8;
    result = v7 - v8;
    a2[3] = result;
    a2[4] = v9;
  }
  return result;
}

void re::ecs2::CustomMatrixCameraComponent::localEyePose(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, float32x4_t *a4@<X8>)
{
  float32x4_t v6;
  int8x16_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  char v28[16];
  float32x4_t v29;
  float32x4_t v30;

  if (a3 == 1)
  {
    re::ecs2::TransformComponent::worldSRT(*(re::ecs2::TransformComponent ***)(a1 + 16), (const re::ecs2::Entity *)1, (uint64_t)v28);
    _V1.S[3] = v29.i32[3];
    _Q2 = (int8x16_t)vnegq_f32(v29);
    v9 = (int8x16_t)vnegq_f32(v30);
    v10 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q2, (int32x4_t)_Q2), _Q2, 0xCuLL);
    v11 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), v9, 0xCuLL), v29), v10, v30);
    v12 = (int8x16_t)vaddq_f32(v11, v11);
    v13 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), v12, 0xCuLL);
    v14 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL), v29), v13, v10);
    v15 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v13, v29, 3), v30), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), v14, 0xCuLL));
    _Q5 = *(float32x4_t *)(a2 + 16);
    v17 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a2, *(int32x4_t *)a2), *(int8x16_t *)a2, 0xCuLL), v29), *(float32x4_t *)a2, v10);
    v18 = (int8x16_t)vaddq_f32(v17, v17);
    v19 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), v18, 0xCuLL);
    v20 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL), v29), v19, v10);
    v21 = vaddq_f32(vaddq_f32(*(float32x4_t *)a2, vmulq_laneq_f32(v19, v29, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), v20, 0xCuLL));
    v22 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q5, (int32x4_t)_Q5), (int8x16_t)_Q5, 0xCuLL), v29), _Q5, v10);
    v23 = vmlsq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), v22, 0xCuLL), _Q5, v29, 3), v29, _Q5, 3);
    _Q5.i32[0] = _Q5.i32[3];
    __asm { FMLA            S2, S5, V1.S[3] }
    v23.i32[3] = _Q2.i32[0];
    *a4 = vaddq_f32(v15, v21);
    a4[1] = v23;
  }
  else if (a3)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid pose reference", "!\"Unreachable code\"", "localEyePose", 404);
    _os_crash();
    __break(1u);
  }
  else
  {
    v6 = *(float32x4_t *)(a2 + 16);
    *a4 = *(float32x4_t *)a2;
    a4[1] = v6;
  }
}

__n128 re::ecs2::CustomMatrixCameraComponent::localEyePoseMatrix@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  __int128 v18;
  float v19;
  float v20;
  __int128 v21;
  __int128 v22;
  __n128 result;
  __n128 v24;
  float v25;
  float v26;
  float v27;
  float v28;

  re::ecs2::CustomMatrixCameraComponent::localEyePose(a1, a2, (float32x4_t *)&v24);
  v4 = v25;
  v5 = v26;
  v6 = v4 + v4;
  v7 = v5 + v5;
  v8 = v27;
  v9 = v8 + v8;
  v10 = v4 * (float)(v4 + v4);
  v11 = v5 * (float)(v5 + v5);
  v12 = v8 * (float)(v8 + v8);
  v13 = v6 * v26;
  v14 = v6 * v27;
  v15 = v7 * v27;
  v16 = v7 * v28;
  v17 = v9 * v28;
  HIDWORD(v18) = 0;
  *(float *)&v18 = 1.0 - (float)(v11 + v12);
  *((float *)&v18 + 1) = (float)(v6 * v26) + v17;
  *((float *)&v18 + 2) = (float)(v6 * v27) - v16;
  v19 = v6 * v28;
  v20 = 1.0 - (float)(v10 + v12);
  HIDWORD(v21) = 0;
  *(float *)&v21 = v13 - v17;
  *((float *)&v21 + 1) = v20;
  *((float *)&v21 + 2) = v15 + v19;
  HIDWORD(v22) = 0;
  *(float *)&v22 = v14 + v16;
  *((float *)&v22 + 1) = v15 - v19;
  *((float *)&v22 + 2) = 1.0 - (float)(v10 + v11);
  *(_OWORD *)a3 = v18;
  *(_OWORD *)(a3 + 16) = v21;
  result = v24;
  result.n128_u32[3] = 1.0;
  *(_OWORD *)(a3 + 32) = v22;
  *(__n128 *)(a3 + 48) = result;
  return result;
}

uint64_t re::ecs2::CustomMatrixCameraComponent::setEyePose(uint64_t result, _OWORD *a2, char a3, int a4)
{
  __int128 v4;
  __int128 v5;

  if (a4)
  {
    if (a4 == 2)
    {
      v5 = a2[1];
      *(_OWORD *)(result + 208) = *a2;
      *(_OWORD *)(result + 224) = v5;
      *(_BYTE *)(result + 241) = a3;
    }
    else if (a4 == 1)
    {
      v4 = a2[1];
      *(_OWORD *)(result + 176) = *a2;
      *(_OWORD *)(result + 192) = v4;
      *(_BYTE *)(result + 240) = a3;
    }
    else
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Invalid Camera Eye.", "!\"Unreachable code\"", "setEyePose", 441);
      result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::ecs2::CustomMatrixCameraComponent::setLocalEyePoseFromMatrix(uint64_t a1, uint64_t a2, int a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v14;
  BOOL v15;
  float v16;
  unsigned int v17;
  float32x2_t v18;
  float32x2_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  unsigned int v27;
  float32x2_t v28;
  float32x2_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float32x2_t v35;
  float32x2_t v36;
  float v37;
  float v38;
  unsigned int v39;
  float32x2_t v40;
  float32x2_t v41;
  __int128 v42;
  float v43;
  float v44;
  float v45;
  _OWORD v47[2];

  v4 = *(float *)a2;
  v3 = *(float *)(a2 + 4);
  v5 = *(float *)(a2 + 8);
  v6 = *(float *)(a2 + 16);
  v7 = *(float *)(a2 + 20);
  v8 = *(float *)(a2 + 24);
  v9 = *(float *)(a2 + 32);
  v10 = *(float *)(a2 + 36);
  v11 = *(float *)(a2 + 40);
  v12 = (float)(*(float *)a2 + v7) + v11;
  if (v12 >= 0.0)
  {
    v33 = sqrtf(v12 + 1.0);
    v34 = v33 + v33;
    v35 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33));
    v36 = vmul_f32(v35, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33), v35));
    v37 = vmul_f32(v36, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33), v36)).f32[0];
    *(float *)&v42 = (float)(v8 - v10) * v37;
    v43 = (float)(v9 - v5) * v37;
    v44 = (float)(v3 - v6) * v37;
    v45 = v34 * 0.25;
  }
  else if (v4 < v7 || v4 < v11)
  {
    v14 = 1.0 - v4;
    v15 = v7 < v11;
    v16 = sqrtf((float)(v14 - v7) + v11);
    *(float *)&v17 = v16 + v16;
    v18 = vrecpe_f32((float32x2_t)v17);
    v19 = vmul_f32(v18, vrecps_f32((float32x2_t)v17, v18));
    v20 = vmul_f32(v19, vrecps_f32((float32x2_t)v17, v19)).f32[0];
    v21 = (float)(v5 + v9) * v20;
    v22 = v8 + v10;
    v23 = v22 * v20;
    v24 = *(float *)&v17 * 0.25;
    v25 = (float)(v3 - v6) * v20;
    v26 = sqrtf(v7 + (float)(v14 - v11));
    *(float *)&v27 = v26 + v26;
    v28 = vrecpe_f32((float32x2_t)v27);
    v29 = vmul_f32(v28, vrecps_f32((float32x2_t)v27, v28));
    v29.f32[0] = vmul_f32(v29, vrecps_f32((float32x2_t)v27, v29)).f32[0];
    v30 = (float)(v3 + v6) * v29.f32[0];
    v31 = *(float *)&v27 * 0.25;
    v32 = v22 * v29.f32[0];
    v45 = (float)(v9 - v5) * v29.f32[0];
    if (v15)
      *(float *)&v42 = v21;
    else
      *(float *)&v42 = v30;
    if (v15)
      v43 = v23;
    else
      v43 = v31;
    if (v15)
      v44 = v24;
    else
      v44 = v32;
    if (v15)
      v45 = v25;
  }
  else
  {
    v38 = sqrtf(v4 + (float)((float)(1.0 - v7) - v11));
    *(float *)&v39 = v38 + v38;
    v40 = vrecpe_f32((float32x2_t)v39);
    v41 = vmul_f32(v40, vrecps_f32((float32x2_t)v39, v40));
    v41.f32[0] = vmul_f32(v41, vrecps_f32((float32x2_t)v39, v41)).f32[0];
    *(float *)&v42 = *(float *)&v39 * 0.25;
    v43 = (float)(v3 + v6) * v41.f32[0];
    v44 = (float)(v5 + v9) * v41.f32[0];
    v45 = (float)(v8 - v10) * v41.f32[0];
  }
  *((float *)&v42 + 1) = v43;
  *((_QWORD *)&v42 + 1) = __PAIR64__(LODWORD(v45), LODWORD(v44));
  v47[0] = *(_OWORD *)(a2 + 48);
  v47[1] = v42;
  return re::ecs2::CustomMatrixCameraComponent::setEyePose(a1, v47, 0, a3);
}

uint64_t re::ecs2::CustomMatrixCameraComponent::setWorldEyePoseFromMatrix(uint64_t a1, uint64_t a2, int a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v14;
  BOOL v15;
  float v16;
  unsigned int v17;
  float32x2_t v18;
  float32x2_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  unsigned int v27;
  float32x2_t v28;
  float32x2_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float32x2_t v35;
  float32x2_t v36;
  float v37;
  float v38;
  unsigned int v39;
  float32x2_t v40;
  float32x2_t v41;
  __int128 v42;
  float v43;
  float v44;
  float v45;
  _OWORD v47[2];

  v4 = *(float *)a2;
  v3 = *(float *)(a2 + 4);
  v5 = *(float *)(a2 + 8);
  v6 = *(float *)(a2 + 16);
  v7 = *(float *)(a2 + 20);
  v8 = *(float *)(a2 + 24);
  v9 = *(float *)(a2 + 32);
  v10 = *(float *)(a2 + 36);
  v11 = *(float *)(a2 + 40);
  v12 = (float)(*(float *)a2 + v7) + v11;
  if (v12 >= 0.0)
  {
    v33 = sqrtf(v12 + 1.0);
    v34 = v33 + v33;
    v35 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33));
    v36 = vmul_f32(v35, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33), v35));
    v37 = vmul_f32(v36, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v33 + v33), v36)).f32[0];
    *(float *)&v42 = (float)(v8 - v10) * v37;
    v43 = (float)(v9 - v5) * v37;
    v44 = (float)(v3 - v6) * v37;
    v45 = v34 * 0.25;
  }
  else if (v4 < v7 || v4 < v11)
  {
    v14 = 1.0 - v4;
    v15 = v7 < v11;
    v16 = sqrtf((float)(v14 - v7) + v11);
    *(float *)&v17 = v16 + v16;
    v18 = vrecpe_f32((float32x2_t)v17);
    v19 = vmul_f32(v18, vrecps_f32((float32x2_t)v17, v18));
    v20 = vmul_f32(v19, vrecps_f32((float32x2_t)v17, v19)).f32[0];
    v21 = (float)(v5 + v9) * v20;
    v22 = v8 + v10;
    v23 = v22 * v20;
    v24 = *(float *)&v17 * 0.25;
    v25 = (float)(v3 - v6) * v20;
    v26 = sqrtf(v7 + (float)(v14 - v11));
    *(float *)&v27 = v26 + v26;
    v28 = vrecpe_f32((float32x2_t)v27);
    v29 = vmul_f32(v28, vrecps_f32((float32x2_t)v27, v28));
    v29.f32[0] = vmul_f32(v29, vrecps_f32((float32x2_t)v27, v29)).f32[0];
    v30 = (float)(v3 + v6) * v29.f32[0];
    v31 = *(float *)&v27 * 0.25;
    v32 = v22 * v29.f32[0];
    v45 = (float)(v9 - v5) * v29.f32[0];
    if (v15)
      *(float *)&v42 = v21;
    else
      *(float *)&v42 = v30;
    if (v15)
      v43 = v23;
    else
      v43 = v31;
    if (v15)
      v44 = v24;
    else
      v44 = v32;
    if (v15)
      v45 = v25;
  }
  else
  {
    v38 = sqrtf(v4 + (float)((float)(1.0 - v7) - v11));
    *(float *)&v39 = v38 + v38;
    v40 = vrecpe_f32((float32x2_t)v39);
    v41 = vmul_f32(v40, vrecps_f32((float32x2_t)v39, v40));
    v41.f32[0] = vmul_f32(v41, vrecps_f32((float32x2_t)v39, v41)).f32[0];
    *(float *)&v42 = *(float *)&v39 * 0.25;
    v43 = (float)(v3 + v6) * v41.f32[0];
    v44 = (float)(v5 + v9) * v41.f32[0];
    v45 = (float)(v8 - v10) * v41.f32[0];
  }
  *((float *)&v42 + 1) = v43;
  *((_QWORD *)&v42 + 1) = __PAIR64__(LODWORD(v45), LODWORD(v44));
  v47[0] = *(_OWORD *)(a2 + 48);
  v47[1] = v42;
  return re::ecs2::CustomMatrixCameraComponent::setEyePose(a1, v47, 1, a3);
}

void re::ecs2::PerspectiveCameraComponent::~PerspectiveCameraComponent(re::ecs2::PerspectiveCameraComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::ecs2::OrthographicCameraComponent::~OrthographicCameraComponent(re::ecs2::OrthographicCameraComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::ecs2::CustomMatrixCameraComponent::~CustomMatrixCameraComponent(re::ecs2::CustomMatrixCameraComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::registerSerializationFunctions(re *this)
{
  uint64_t *v1;
  re *v2;
  const re::IntrospectionBase *v3;
  const re::IntrospectionBase *v4;
  const re::IntrospectionBase *v5;
  const re::IntrospectionBase *v6;
  const re::IntrospectionBase *v7;
  const re::IntrospectionBase *v8;
  const re::IntrospectionBase *v9;
  const re::IntrospectionBase *v10;
  const re::IntrospectionBase *v11;
  const re::IntrospectionBase *v12;
  const re::IntrospectionBase *v13;
  const re::IntrospectionBase *v14;
  const re::IntrospectionBase *v15;
  const re::IntrospectionBase *v16;
  std::__shared_mutex_base *v17;
  StringID v18;
  re *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;

  v17 = re::introspectionSharedMutex(this);
  std::__shared_mutex_base::lock(v17);
  v21 = 0x6DAE480279BALL;
  v22 = "Component";
  v1 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v21);
  if (v1)
  {
    v20 = *v1;
  }
  else
  {
    v2 = 0;
    v20 = 0xFFFFFFFFLL;
  }
  v19 = v2;
  re::StringID::destroyString((re::StringID *)&v21);
  *(_QWORD *)&v18.var0 = 0x7F36B44A9D0F5EC6;
  v18.var1 = "AssetBinarySerializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v3);
  v21 = 0x478E8020DEELL;
  v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E2CLL;
  v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E6ALL;
  v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020DEALL;
  v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E28;
  v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E66;
  v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E85D76;
  v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E94672;
  v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04EA2F6ELL;
  v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 154604394;
  v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x1EE51E553020190;
  v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 164778;
  v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x6E6EE0AE8D82AD26;
  v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  *(_QWORD *)&v18.var0 = 0x81C6E49267FF3CC8;
  v18.var1 = "AssetBinaryDeserializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v4);
  v21 = 0x478E8020DEELL;
  v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E2CLL;
  v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E6ALL;
  v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020DEALL;
  v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E28;
  v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E66;
  v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E85D76;
  v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E94672;
  v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04EA2F6ELL;
  v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 154604394;
  v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x1EE51E553020190;
  v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 164778;
  v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x6E6EE0AE8D82AD26;
  v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  *(_QWORD *)&v18.var0 = 0x3D2ADDFABE78EB94;
  v18.var1 = "AssetOPACKSerializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v5);
  v21 = 0x478E8020DEELL;
  v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E2CLL;
  v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E6ALL;
  v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020DEALL;
  v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E28;
  v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E66;
  v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E85D76;
  v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E94672;
  v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04EA2F6ELL;
  v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 154604394;
  v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x1EE51E553020190;
  v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 164778;
  v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x6E6EE0AE8D82AD26;
  v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  *(_QWORD *)&v18.var0 = 0x935762BFD538CE16;
  v18.var1 = "AssetOPACKDeserializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v6);
  v21 = 0x478E8020DEELL;
  v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E2CLL;
  v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E6ALL;
  v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020DEALL;
  v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E28;
  v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E66;
  v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E85D76;
  v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E94672;
  v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04EA2F6ELL;
  v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 154604394;
  v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x1EE51E553020190;
  v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 164778;
  v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x6E6EE0AE8D82AD26;
  v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  *(_QWORD *)&v18.var0 = 0x8EBD744EB006D4;
  v18.var1 = "AssetJSONSerializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v7);
  v21 = 0x478E8020DEELL;
  v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E2CLL;
  v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E6ALL;
  v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020DEALL;
  v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E28;
  v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E66;
  v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E85D76;
  v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E94672;
  v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04EA2F6ELL;
  v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 154604394;
  v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x1EE51E553020190;
  v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 164778;
  v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x6E6EE0AE8D82AD26;
  v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  *(_QWORD *)&v18.var0 = 0xD414A1634161956;
  v18.var1 = "AssetJSONDeserializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v8);
  v21 = 0x478E8020DEELL;
  v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E2CLL;
  v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E6ALL;
  v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020DEALL;
  v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E28;
  v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E66;
  v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E85D76;
  v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E94672;
  v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04EA2F6ELL;
  v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 154604394;
  v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x1EE51E553020190;
  v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 164778;
  v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x6E6EE0AE8D82AD26;
  v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  *(_QWORD *)&v18.var0 = 0xE1F66B0F30BD1E9ELL;
  v18.var1 = "ECSJSONSerializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v9);
  v21 = 0x478E8020DEELL;
  v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E2CLL;
  v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E6ALL;
  v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020DEALL;
  v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E28;
  v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E66;
  v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E85D76;
  v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E94672;
  v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04EA2F6ELL;
  v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 154604394;
  v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x1EE51E553020190;
  v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 164778;
  v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x6E6EE0AE8D82AD26;
  v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  *(_QWORD *)&v18.var0 = 0x3373FC80C73C66A0;
  v18.var1 = "ECSJSONDeserializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v10);
  v21 = 0x478E8020DEELL;
  v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E2CLL;
  v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E6ALL;
  v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020DEALL;
  v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E28;
  v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E66;
  v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E85D76;
  v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E94672;
  v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04EA2F6ELL;
  v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 154604394;
  v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x1EE51E553020190;
  v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 164778;
  v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x6E6EE0AE8D82AD26;
  v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  *(_QWORD *)&v18.var0 = 0x88B8E3BC1E0ECD0ALL;
  v18.var1 = "ECSOPACKSerializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v11);
  v21 = 0x478E8020DEELL;
  v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E2CLL;
  v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E6ALL;
  v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020DEALL;
  v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E28;
  v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E66;
  v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E85D76;
  v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E94672;
  v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04EA2F6ELL;
  v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 154604394;
  v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x1EE51E553020190;
  v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 164778;
  v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x6E6EE0AE8D82AD26;
  v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  *(_QWORD *)&v18.var0 = 0x337AFDA7A6DC2A0CLL;
  v18.var1 = "ECSOPACKDeserializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v12);
  v21 = 0x478E8020DEELL;
  v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E2CLL;
  v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E6ALL;
  v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020DEALL;
  v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E28;
  v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E66;
  v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E85D76;
  v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E94672;
  v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04EA2F6ELL;
  v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 154604394;
  v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x1EE51E553020190;
  v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 164778;
  v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x6E6EE0AE8D82AD26;
  v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  *(_QWORD *)&v18.var0 = 0xD66B7D4190E6B598;
  v18.var1 = "NetworkOPACKSerializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v13);
  v21 = 0x478E8020DEELL;
  v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E2CLL;
  v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E6ALL;
  v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020DEALL;
  v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E28;
  v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E66;
  v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E85D76;
  v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E94672;
  v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04EA2F6ELL;
  v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 154604394;
  v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x1EE51E553020190;
  v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 164778;
  v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x6E6EE0AE8D82AD26;
  v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  *(_QWORD *)&v18.var0 = 0xDEED4B9BC35C271ALL;
  v18.var1 = "NetworkOPACKDeserializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v14);
  v21 = 0x478E8020DEELL;
  v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E2CLL;
  v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E6ALL;
  v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020DEALL;
  v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E28;
  v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E66;
  v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E85D76;
  v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E94672;
  v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04EA2F6ELL;
  v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 154604394;
  v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x1EE51E553020190;
  v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 164778;
  v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x6E6EE0AE8D82AD26;
  v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  *(_QWORD *)&v18.var0 = 0x287C37956ADFC9C4;
  v18.var1 = "NetworkCompatSerializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v15);
  v21 = 0x478E8020DEELL;
  v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E2CLL;
  v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E6ALL;
  v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020DEALL;
  v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E28;
  v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E66;
  v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E85D76;
  v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E94672;
  v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04EA2F6ELL;
  v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 154604394;
  v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x1EE51E553020190;
  v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 164778;
  v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x6E6EE0AE8D82AD26;
  v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  *(_QWORD *)&v18.var0 = 0xEFB8C0610360E046;
  v18.var1 = "NetworkCompatDeserializer";
  re::introspect_Vector2F((re::IntrospectionBase **)1);
  re::introspect_Vector3F((re::IntrospectionBase **)1);
  re::introspect_Vector4F((re::IntrospectionBase **)1);
  re::introspect_Vector2D((re::IntrospectionBase **)1);
  re::introspect_Vector3D((re::IntrospectionBase **)1);
  re::introspect_Vector4D((re::IntrospectionBase **)1);
  re::introspect_Matrix2x2F((re::IntrospectionBase **)1);
  re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
  re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
  re::introspect_PoseF((re::IntrospectionBase **)1);
  re::introspect_QuaternionF((re::IntrospectionBase **)1);
  re::introspect_SRT((re::IntrospectionBase **)1);
  introspect_REAudioPlaybackState(1, v16);
  v21 = 0x478E8020DEELL;
  v22 = "Vector2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E2CLL;
  v22 = "Vector3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E6ALL;
  v22 = "Vector4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020DEALL;
  v22 = "Vector2D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E28;
  v22 = "Vector3D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x478E8020E66;
  v22 = "Vector4D";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E85D76;
  v22 = "Matrix2x2F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04E94672;
  v22 = "Matrix3x3F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0xF13AC04EA2F6ELL;
  v22 = "Matrix4x4F";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 154604394;
  v22 = "PoseF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x1EE51E553020190;
  v22 = "QuaternionF";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 164778;
  v22 = "SRT";
  re::StringID::destroyString((re::StringID *)&v21);
  v21 = 0x6E6EE0AE8D82AD26;
  v22 = "REAudioPlaybackState";
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  std::__shared_mutex_base::unlock(v17);
}

void re::registerSerializeSwiftCodableComponent(re *this, const char *a2)
{
  std::__shared_mutex_base *v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;
  _anonymous_namespace_ *v12;
  _anonymous_namespace_ *v13;
  _anonymous_namespace_ *v14;
  _anonymous_namespace_ *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  StringID v19;

  v3 = re::introspectionSharedMutex(this);
  std::__shared_mutex_base::lock(v3);
  *(_QWORD *)&v19.var0 = 0x7F36B44A9D0F5EC6;
  v19.var1 = "AssetBinarySerializer";
  v17 = 0;
  v18 = &str_110;
  re::StringID::destroyString((re::StringID *)&v17);
  re::StringID::destroyString((re::StringID *)&v19);
  *(_QWORD *)&v19.var0 = 0x81C6E49267FF3CC8;
  v19.var1 = "AssetBinaryDeserializer";
  v17 = 0;
  v18 = &str_110;
  re::StringID::destroyString((re::StringID *)&v17);
  re::StringID::destroyString((re::StringID *)&v19);
  *(_QWORD *)&v19.var0 = 0x3D2ADDFABE78EB94;
  v19.var1 = "AssetOPACKSerializer";
  v17 = 0;
  v18 = &str_110;
  re::StringID::destroyString((re::StringID *)&v17);
  re::StringID::destroyString((re::StringID *)&v19);
  *(_QWORD *)&v19.var0 = 0x935762BFD538CE16;
  v19.var1 = "AssetOPACKDeserializer";
  v17 = 0;
  v18 = &str_110;
  re::StringID::destroyString((re::StringID *)&v17);
  re::StringID::destroyString((re::StringID *)&v19);
  *(_QWORD *)&v19.var0 = 0x8EBD744EB006D4;
  v19.var1 = "AssetJSONSerializer";
  v17 = 0;
  v18 = &str_110;
  re::StringID::destroyString((re::StringID *)&v17);
  re::StringID::destroyString((re::StringID *)&v19);
  *(_QWORD *)&v19.var0 = 0xD414A1634161956;
  v19.var1 = "AssetJSONDeserializer";
  v17 = 0;
  v18 = &str_110;
  re::StringID::destroyString((re::StringID *)&v17);
  re::StringID::destroyString((re::StringID *)&v19);
  *(_QWORD *)&v19.var0 = 0xE1F66B0F30BD1E9ELL;
  v19.var1 = "ECSJSONSerializer";
  v17 = 0;
  v18 = &str_110;
  re::StringID::destroyString((re::StringID *)&v17);
  re::StringID::destroyString((re::StringID *)&v19);
  *(_QWORD *)&v19.var0 = 0x3373FC80C73C66A0;
  v19.var1 = "ECSJSONDeserializer";
  v17 = 0;
  v18 = &str_110;
  re::StringID::destroyString((re::StringID *)&v17);
  re::StringID::destroyString((re::StringID *)&v19);
  *(_QWORD *)&v19.var0 = 0x88B8E3BC1E0ECD0ALL;
  v19.var1 = "ECSOPACKSerializer";
  v17 = 0;
  v18 = &str_110;
  re::StringID::destroyString((re::StringID *)&v17);
  re::StringID::destroyString((re::StringID *)&v19);
  *(_QWORD *)&v19.var0 = 0x337AFDA7A6DC2A0CLL;
  v19.var1 = "ECSOPACKDeserializer";
  v17 = 0;
  v18 = &str_110;
  re::StringID::destroyString((re::StringID *)&v17);
  re::StringID::destroyString((re::StringID *)&v19);
  *(_QWORD *)&v19.var0 = 0xD66B7D4190E6B598;
  v19.var1 = "NetworkOPACKSerializer";
  v17 = 0;
  v18 = &str_110;
  re::StringID::destroyString((re::StringID *)&v17);
  re::StringID::destroyString((re::StringID *)&v19);
  *(_QWORD *)&v19.var0 = 0xDEED4B9BC35C271ALL;
  v19.var1 = "NetworkOPACKDeserializer";
  v17 = 0;
  v18 = &str_110;
  re::StringID::destroyString((re::StringID *)&v17);
  re::StringID::destroyString((re::StringID *)&v19);
  re::ecs2::IntrospectedNetworkTypeHelper::registerSwiftComponent(this, v16);
  std::__shared_mutex_base::unlock(v3);
}

void re::registerSerializeFunc<re::AssetBinarySerializer>(StringID *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  re *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[2];
  __int128 buf;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v8 = a2 + 200;
  v9 = (re *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a2 + 200, a3);
  if (v9 && a2)
  {
    v10 = *(_QWORD *)v9;
    v11 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v8, a1);
    if (v11)
    {
      v12 = *v11;
      v13 = a2;
    }
    else
    {
      re::TypeRegistry::declareType(a2, 8, a1, 1u, 0, &buf);
      v12 = *((_QWORD *)&buf + 1);
      v13 = buf;
    }
    v17[0] = a2;
    v17[1] = v10;
    v16[0] = v13;
    v16[1] = v12;
    re::TypeRegistry::addAttribute(a2, v17, -1, (uint64_t)v16, a4, 0);
  }
  else
  {
    v14 = *re::foundationSerializationLogObjects(v9);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = a3[1];
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v15;
      _os_log_impl(&dword_224FE9000, v14, OS_LOG_TYPE_DEFAULT, "Failed to register serialization function. Type \"%s\" not found in type registry.", (uint8_t *)&buf, 0xCu);
    }
  }
}

uint64_t re::ecs2::serializeSwiftCodableComponent<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t *v15;
  const char *v16;
  uint64_t result;
  _QWORD *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, _QWORD *, const char *);
  uint64_t v21;
  const __CFData *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *BytePtr;
  uint64_t v36[2];
  uint64_t v37;
  _QWORD *v38[4];
  _QWORD *v39[4];
  uint64_t v40[4];
  CFIndex Length;
  _QWORD v42[4];

  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 40))(a4);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14))
  {
    re::TypeMemberCollection::TypeMemberCollection((uint64_t)v36, *a5, a5[2]);
    re::TypeMemberCollection::operator[](v36, 0, (uint64_t)v38);
    re::TypeRegistry::typeInfo(v38[0], *v38[2], &Length);
    re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)v42);
    re::TypeRegistry::typeInfo(v39[0], v39[2][9], &Length);
    re::TypeInfo::TypeInfo((uint64_t)v40, (uint64_t)v42);
    v15 = (uint64_t *)re::TypeMemberCollection::TypeMemberCollection((uint64_t)&Length, v40[0], v40[2]);
    if (v42[3])
    {
      re::TypeMemberCollection::operator[](v15, 0, (uint64_t)v36);
      if (*(_QWORD *)(v37 + 8) >> 1 != 0x274B0FCFAA8)
        return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, a3, a4, (re::TypeInfo *)a5, a6, a7);
      v16 = *(const char **)(v37 + 16);
      if (v16 != "__JSON__")
      {
        if (strcmp(v16, "__JSON__"))
          return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, a3, a4, (re::TypeInfo *)a5, a6, a7);
      }
    }
  }
  v18 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 40))(a4);
  if ((*(unsigned int (**)(_QWORD *))(*v18 + 8))(v18)
    && (v20 = (uint64_t (*)(uint64_t, _QWORD *, const char *))v18[12]) != 0
    && (v21 = v20(a4, v18, "json")) != 0)
  {
    v22 = (const __CFData *)v21;
  }
  else
  {
    if (!re::ecs2::g_encodeComponent)
    {
      re::internal::assertLog((re::internal *)4, v19, "assertion failure: '%s' (%s:line %i) Swift Codable Encode Callback not registered", "g_encodeComponent", "serializeComponentAsEmbeddedJSON", 42);
      result = _os_crash();
      __break(1u);
      return result;
    }
    v22 = (const __CFData *)re::ecs2::g_encodeComponent(a4, v18, "json");
    if (!v22)
    {
      re::Encoder<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, v23, v24, v25, v26, v27, v28, v18[4]);
      return 0;
    }
  }
  Length = CFDataGetLength(v22);
  if (!Length)
  {
    re::Encoder<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, v29, v30, v31, v32, v33, v34, v18[4]);
    CFRelease(v22);
    return 0;
  }
  LODWORD(v36[0]) = 2;
  if (re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::beginPointer(a1 + 24, a2, a3, (int *)v36, 0))
  {
    LODWORD(v40[0]) = 2;
    if (re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::beginPointer(a1 + 24, a2, a3, (int *)v40, 0))
    {
      if (re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::beginString((_anonymous_namespace_ *)(a1 + 24), a2, a3, (unint64_t *)&Length, 0))
      {
        BytePtr = (char *)CFDataGetBytePtr(v22);
        re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeString(a1 + 24, BytePtr, 0);
        re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endString((_anonymous_namespace_ *)(a1 + 24));
      }
      re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endPointer((_anonymous_namespace_ *)(a1 + 24));
    }
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endPointer((_anonymous_namespace_ *)(a1 + 24));
  }
  CFRelease(v22);
  return *(_BYTE *)(a1 + 64) == 0;
}

uint64_t re::ecs2::serializeSwiftCodableComponent<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t *v15;
  const char *v16;
  uint64_t result;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  _BOOL4 v25;
  _BOOL4 v26;
  __CFData *Mutable;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __CFData *v33;
  char *MutableBytePtr;
  unsigned int (*v35)(uint64_t, _QWORD *, __CFData *, const char *);
  const char *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44[2];
  uint64_t v45;
  _QWORD *v46[4];
  _QWORD *v47[4];
  uint64_t v48[4];
  CFIndex v49;
  _QWORD v50[4];

  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 40))(a4);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14))
  {
    re::TypeMemberCollection::TypeMemberCollection((uint64_t)v44, *a5, a5[2]);
    re::TypeMemberCollection::operator[](v44, 0, (uint64_t)v46);
    re::TypeRegistry::typeInfo(v46[0], *v46[2], &v49);
    re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)v50);
    re::TypeRegistry::typeInfo(v47[0], v47[2][9], &v49);
    re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v50);
    v15 = (uint64_t *)re::TypeMemberCollection::TypeMemberCollection((uint64_t)&v49, v48[0], v48[2]);
    if (v50[3])
    {
      re::TypeMemberCollection::operator[](v15, 0, (uint64_t)v44);
      if (*(_QWORD *)(v45 + 8) >> 1 != 0x274B0FCFAA8)
        return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, a3, a4, (re::TypeInfo *)a5, a6, a7);
      v16 = *(const char **)(v45 + 16);
      if (v16 != "__JSON__")
      {
        if (strcmp(v16, "__JSON__"))
          return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, a3, a4, (re::TypeInfo *)a5, a6, a7);
      }
    }
  }
  v18 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 40))(a4);
  LODWORD(v44[0]) = 0;
  v24 = re::EncoderBinary<re::SeekableInputStream>::beginPointer((_anonymous_namespace_ *)(a1 + 24), a2, a3, (int *)v44, 0);
  result = 0;
  if (v24)
  {
    if (LODWORD(v44[0]) == 2)
    {
      v25 = re::EncoderBinary<re::SeekableInputStream>::beginPointer((_anonymous_namespace_ *)(a1 + 24), a2, a3, (int *)v44, 0);
      result = 0;
      if (!v25)
        return result;
      if (LODWORD(v44[0]) == 2)
      {
        v49 = 0;
        v26 = re::EncoderBinary<re::SeekableInputStream>::beginString(a1 + 24, (uint64_t)a2, a3, (char *)&v49, 0);
        result = 0;
        if (!v26)
          return result;
        if (v49)
        {
          Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], v49);
          if (Mutable)
          {
            v33 = Mutable;
            CFDataIncreaseLength(Mutable, v49);
            MutableBytePtr = (char *)CFDataGetMutableBytePtr(v33);
            re::EncoderBinary<re::SeekableInputStream>::serializeString(a1 + 24, MutableBytePtr, 0);
            re::EncoderBinary<re::SeekableInputStream>::endString((_anonymous_namespace_ *)(a1 + 24));
            re::EncoderBinary<re::SeekableInputStream>::endPointer((_anonymous_namespace_ *)(a1 + 24));
            re::EncoderBinary<re::SeekableInputStream>::endPointer((_anonymous_namespace_ *)(a1 + 24));
            if ((*(unsigned int (**)(_QWORD *))(*v18 + 8))(v18))
            {
              v35 = (unsigned int (*)(uint64_t, _QWORD *, __CFData *, const char *))v18[13];
              if (v35)
              {
                if (v35(a4, v18, v33, "json"))
                {
                  CFRelease(v33);
                  return *(_BYTE *)(a1 + 64) == 0;
                }
              }
            }
            v37 = re::ecs2::g_decodeComponent(a4, v18, v33, "json");
            CFRelease(v33);
            if ((v37 & 1) != 0)
              return *(_BYTE *)(a1 + 64) == 0;
            re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, "Failed to deserialize Swift Codable component of type %s.", v38, v39, v40, v41, v42, v18[4]);
          }
          else
          {
            re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, "Failed to allocate buffer for JSON data (size = %zu bytes).", v28, v29, v30, v31, v32, v49);
          }
          return 0;
        }
        v36 = "JSON data is empty.";
      }
      else
      {
        v36 = "JSON data not found.";
      }
    }
    else
    {
      v36 = "Object not found.";
    }
    re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, v36, v19, v20, v21, v22, v23, v43);
    return 0;
  }
  return result;
}

uint64_t re::ecs2::serializeSwiftCodableComponent<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t *v15;
  const char *v16;
  uint64_t result;
  _QWORD *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, _QWORD *, const char *);
  uint64_t v21;
  const __CFData *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *BytePtr;
  uint64_t v36[2];
  uint64_t v37;
  _QWORD *v38[4];
  _QWORD *v39[4];
  uint64_t v40[4];
  CFIndex Length;
  _QWORD v42[4];

  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 40))(a4);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14))
  {
    re::TypeMemberCollection::TypeMemberCollection((uint64_t)v36, *a5, a5[2]);
    re::TypeMemberCollection::operator[](v36, 0, (uint64_t)v38);
    re::TypeRegistry::typeInfo(v38[0], *v38[2], &Length);
    re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)v42);
    re::TypeRegistry::typeInfo(v39[0], v39[2][9], &Length);
    re::TypeInfo::TypeInfo((uint64_t)v40, (uint64_t)v42);
    v15 = (uint64_t *)re::TypeMemberCollection::TypeMemberCollection((uint64_t)&Length, v40[0], v40[2]);
    if (v42[3])
    {
      re::TypeMemberCollection::operator[](v15, 0, (uint64_t)v36);
      if (*(_QWORD *)(v37 + 8) >> 1 != 0x274B0FCFAA8)
        return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a3, a4, (re::TypeInfo *)a5, a6, a7);
      v16 = *(const char **)(v37 + 16);
      if (v16 != "__JSON__")
      {
        if (strcmp(v16, "__JSON__"))
          return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a3, a4, (re::TypeInfo *)a5, a6, a7);
      }
    }
  }
  v18 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 40))(a4);
  if ((*(unsigned int (**)(_QWORD *))(*v18 + 8))(v18)
    && (v20 = (uint64_t (*)(uint64_t, _QWORD *, const char *))v18[12]) != 0
    && (v21 = v20(a4, v18, "json")) != 0)
  {
    v22 = (const __CFData *)v21;
  }
  else
  {
    if (!re::ecs2::g_encodeComponent)
    {
      re::internal::assertLog((re::internal *)4, v19, "assertion failure: '%s' (%s:line %i) Swift Codable Encode Callback not registered", "g_encodeComponent", "serializeComponentAsEmbeddedJSON", 42);
      result = _os_crash();
      __break(1u);
      return result;
    }
    v22 = (const __CFData *)re::ecs2::g_encodeComponent(a4, v18, "json");
    if (!v22)
    {
      re::Encoder<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, v23, v24, v25, v26, v27, v28, v18[4]);
      return 0;
    }
  }
  Length = CFDataGetLength(v22);
  if (!Length)
  {
    re::Encoder<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, v29, v30, v31, v32, v33, v34, v18[4]);
    CFRelease(v22);
    return 0;
  }
  LODWORD(v36[0]) = 2;
  if (re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginPointer(a1 + 24, a2, a3, (int *)v36, 0))
  {
    LODWORD(v40[0]) = 2;
    if (re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginPointer(a1 + 24, a2, a3, (int *)v40, 0))
    {
      if (re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginString(a1 + 24, a2, a3, (unint64_t *)&Length, 0))
      {
        BytePtr = (char *)CFDataGetBytePtr(v22);
        re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeString(a1 + 24, BytePtr, 0);
        re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endString((_anonymous_namespace_ *)(a1 + 24));
      }
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endPointer((_anonymous_namespace_ *)(a1 + 24));
    }
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endPointer((_anonymous_namespace_ *)(a1 + 24));
  }
  CFRelease(v22);
  return *(_BYTE *)(a1 + 64) == 0;
}

uint64_t re::ecs2::serializeSwiftCodableComponent<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t *v15;
  const char *v16;
  uint64_t result;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  __CFData *Mutable;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __CFData *v33;
  char *MutableBytePtr;
  unsigned int (*v35)(uint64_t, _QWORD *, __CFData *, const char *);
  const char *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44[2];
  uint64_t v45;
  _QWORD *v46[4];
  _QWORD *v47[4];
  uint64_t v48[4];
  CFIndex v49;
  _QWORD v50[4];

  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 40))(a4);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14))
  {
    re::TypeMemberCollection::TypeMemberCollection((uint64_t)v44, *a5, a5[2]);
    re::TypeMemberCollection::operator[](v44, 0, (uint64_t)v46);
    re::TypeRegistry::typeInfo(v46[0], *v46[2], &v49);
    re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)v50);
    re::TypeRegistry::typeInfo(v47[0], v47[2][9], &v49);
    re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v50);
    v15 = (uint64_t *)re::TypeMemberCollection::TypeMemberCollection((uint64_t)&v49, v48[0], v48[2]);
    if (v50[3])
    {
      re::TypeMemberCollection::operator[](v15, 0, (uint64_t)v44);
      if (*(_QWORD *)(v45 + 8) >> 1 != 0x274B0FCFAA8)
        return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, a3, a4, (re::TypeInfo *)a5, a6, a7);
      v16 = *(const char **)(v45 + 16);
      if (v16 != "__JSON__")
      {
        if (strcmp(v16, "__JSON__"))
          return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, a3, a4, (re::TypeInfo *)a5, a6, a7);
      }
    }
  }
  v18 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 40))(a4);
  LODWORD(v44[0]) = 0;
  v24 = re::EncoderOPACK<re::SeekableInputStream>::beginPointer(a1 + 24, a2, a3, (int *)v44, 0);
  result = 0;
  if (v24)
  {
    if (LODWORD(v44[0]) == 2)
    {
      v25 = re::EncoderOPACK<re::SeekableInputStream>::beginPointer(a1 + 24, a2, a3, (int *)v44, 0);
      result = 0;
      if (!v25)
        return result;
      if (LODWORD(v44[0]) == 2)
      {
        v49 = 0;
        v26 = re::EncoderOPACK<re::SeekableInputStream>::beginString(a1 + 24, a2, a3, &v49, 0);
        result = 0;
        if (!v26)
          return result;
        if (v49)
        {
          Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], v49);
          if (Mutable)
          {
            v33 = Mutable;
            CFDataIncreaseLength(Mutable, v49);
            MutableBytePtr = (char *)CFDataGetMutableBytePtr(v33);
            re::EncoderOPACK<re::SeekableInputStream>::serializeString(a1 + 24, MutableBytePtr, 0);
            re::EncoderOPACK<re::SeekableInputStream>::endString((_anonymous_namespace_ *)(a1 + 24));
            re::EncoderOPACK<re::SeekableInputStream>::endPointer((_anonymous_namespace_ *)(a1 + 24));
            re::EncoderOPACK<re::SeekableInputStream>::endPointer((_anonymous_namespace_ *)(a1 + 24));
            if ((*(unsigned int (**)(_QWORD *))(*v18 + 8))(v18))
            {
              v35 = (unsigned int (*)(uint64_t, _QWORD *, __CFData *, const char *))v18[13];
              if (v35)
              {
                if (v35(a4, v18, v33, "json"))
                {
                  CFRelease(v33);
                  return *(_BYTE *)(a1 + 64) == 0;
                }
              }
            }
            v37 = re::ecs2::g_decodeComponent(a4, v18, v33, "json");
            CFRelease(v33);
            if ((v37 & 1) != 0)
              return *(_BYTE *)(a1 + 64) == 0;
            re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, "Failed to deserialize Swift Codable component of type %s.", v38, v39, v40, v41, v42, v18[4]);
          }
          else
          {
            re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, "Failed to allocate buffer for JSON data (size = %zu bytes).", v28, v29, v30, v31, v32, v49);
          }
          return 0;
        }
        v36 = "JSON data is empty.";
      }
      else
      {
        v36 = "JSON data not found.";
      }
    }
    else
    {
      v36 = "Object not found.";
    }
    re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, v36, v19, v20, v21, v22, v23, v43);
    return 0;
  }
  return result;
}

uint64_t re::ecs2::serializeSwiftCodableComponent<re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  _anonymous_namespace_ *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, _QWORD *, const char *);
  const __CFData *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const UInt8 *BytePtr;
  CFIndex Length;
  _BOOL8 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t result;
  const char *v31;

  v7 = (_anonymous_namespace_ *)(a1 + 24);
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 40))(a4);
  if ((*(unsigned int (**)(_QWORD *))(*v8 + 8))(v8))
  {
    v10 = (uint64_t (*)(uint64_t, _QWORD *, const char *))v8[12];
    if (v10)
    {
      v11 = (const __CFData *)v10(a4, v8, "json");
      if (v11)
        goto LABEL_6;
    }
  }
  if (re::ecs2::g_encodeComponent)
  {
    v11 = (const __CFData *)re::ecs2::g_encodeComponent(a4, v8, "json");
    if (!v11)
    {
      re::Encoder<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v7, a2, v12, v13, v14, v15, v16, v17, v8[4]);
      return 0;
    }
LABEL_6:
    if (CFDataGetLength(v11))
    {
      BytePtr = CFDataGetBytePtr(v11);
      Length = CFDataGetLength(v11);
      v31 = a2;
      v26 = *(_BYTE *)(a1 + 64) == 0;
      if (!*(_BYTE *)(a1 + 64))
      {
        v27 = Length;
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 152) + 48 * *(_QWORD *)(a1 + 136) - 44) & 0x20) != 0)
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 192), &v31);
        v28 = *(char **)(a1 + 192);
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v28);
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteRawValue((char **)v28, (uint64_t)BytePtr, v27);
        v29 = *(_QWORD *)(a1 + 152) + 48 * *(_QWORD *)(a1 + 136);
        ++*(_QWORD *)(v29 - 16);
      }
    }
    else
    {
      re::Encoder<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v7, a2, v18, v19, v20, v21, v22, v23, v8[4]);
      v26 = 0;
    }
    CFRelease(v11);
    return v26;
  }
  re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) Swift Codable Encode Callback not registered", "g_encodeComponent", "serializeComponentAsJSON", 163);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::ecs2::serializeSwiftCodableComponent<re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  unsigned int *JSONValue;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t result;
  const __CFAllocator *v13;
  const UInt8 *String;
  CFDataRef v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, _QWORD *, CFDataRef, const char *);
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;

  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 40))(a4);
  v24 = 0u;
  v25 = 0u;
  v26 = 0;
  v27 = 256;
  if (!*(_BYTE *)(a1 + 64))
  {
    v8 = (_QWORD *)v7;
    JSONValue = re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::readJSONValue((_anonymous_namespace_ *)(a1 + 24), a2, 0);
    if (JSONValue)
    {
      v28 = &v24;
      v29 = 0u;
      v30 = 0u;
      v31 = 0;
      v32 = 512;
      v33 = 324;
      v34 = 0;
      rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::Accept<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>(JSONValue, (uint64_t)&v28);
      v10 = *(_QWORD *)(a1 + 152) + 48 * *(_QWORD *)(a1 + 136);
      ++*(_QWORD *)(v10 - 16);
      if ((_QWORD)v30)
        (*(void (**)(void *))(*(_QWORD *)re::internal::RapidJSONAllocator::InstanceData::instance(void)::s_instance
                                       + 40))(re::internal::RapidJSONAllocator::InstanceData::instance(void)::s_instance);
      if (*((_QWORD *)&v29 + 1))
        (*(void (**)(void *))(*(_QWORD *)re::internal::RapidJSONAllocator::InstanceData::instance(void)::s_instance
                                       + 40))(re::internal::RapidJSONAllocator::InstanceData::instance(void)::s_instance);
    }
    if (!*(_BYTE *)(a1 + 64) && *((_QWORD *)&v25 + 1) != (_QWORD)v25)
    {
      v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      String = (const UInt8 *)rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>::GetString(&v24);
      v15 = CFDataCreateWithBytesNoCopy(v13, String, *((_QWORD *)&v25 + 1) - v25, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
      if ((*(unsigned int (**)(_QWORD *))(*v8 + 8))(v8))
      {
        v17 = (unsigned int (*)(uint64_t, _QWORD *, CFDataRef, const char *))v8[13];
        if (v17)
        {
          if (v17(a4, v8, v15, "json"))
          {
            CFRelease(v15);
LABEL_21:
            v11 = *(_BYTE *)(a1 + 64) == 0;
            goto LABEL_9;
          }
        }
      }
      if (!re::ecs2::g_decodeComponent)
      {
        re::internal::assertLog((re::internal *)4, v16, "assertion failure: '%s' (%s:line %i) Swift Codable Decode Callback not registered", "g_decodeComponent", "serializeComponentAsJSON", 204, (_QWORD)v24);
        result = _os_crash();
        __break(1u);
        return result;
      }
      v18 = re::ecs2::g_decodeComponent(a4, v8, v15, "json");
      CFRelease(v15);
      if ((v18 & 1) != 0)
        goto LABEL_21;
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, "Failed to deserialize Swift Codable component of type %s.", v19, v20, v21, v22, v23, v8[4]);
    }
  }
  v11 = 0;
LABEL_9:
  if ((_QWORD)v25)
    (*(void (**)(void *))(*(_QWORD *)re::internal::RapidJSONAllocator::InstanceData::instance(void)::s_instance
                                   + 40))(re::internal::RapidJSONAllocator::InstanceData::instance(void)::s_instance);
  if (*((_QWORD *)&v24 + 1))
    (*(void (**)(void *))(*(_QWORD *)re::internal::RapidJSONAllocator::InstanceData::instance(void)::s_instance
                                   + 40))(re::internal::RapidJSONAllocator::InstanceData::instance(void)::s_instance);
  return v11;
}

uint64_t re::ecs2::serializeSwiftCodableComponent<re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  _anonymous_namespace_ *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, _QWORD *, const char *);
  const __CFData *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const UInt8 *BytePtr;
  CFIndex Length;
  _BOOL8 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t result;
  const char *v31;

  v7 = (_anonymous_namespace_ *)(a1 + 24);
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 40))(a4);
  if ((*(unsigned int (**)(_QWORD *))(*v8 + 8))(v8))
  {
    v10 = (uint64_t (*)(uint64_t, _QWORD *, const char *))v8[12];
    if (v10)
    {
      v11 = (const __CFData *)v10(a4, v8, "json");
      if (v11)
        goto LABEL_6;
    }
  }
  if (re::ecs2::g_encodeComponent)
  {
    v11 = (const __CFData *)re::ecs2::g_encodeComponent(a4, v8, "json");
    if (!v11)
    {
      re::Encoder<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v7, a2, v12, v13, v14, v15, v16, v17, v8[4]);
      return 0;
    }
LABEL_6:
    if (CFDataGetLength(v11))
    {
      BytePtr = CFDataGetBytePtr(v11);
      Length = CFDataGetLength(v11);
      v31 = a2;
      v26 = *(_BYTE *)(a1 + 64) == 0;
      if (!*(_BYTE *)(a1 + 64))
      {
        v27 = Length;
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 152) + 48 * *(_QWORD *)(a1 + 136) - 44) & 0x20) != 0)
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 192), &v31);
        v28 = *(char **)(a1 + 192);
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v28);
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteRawValue((char **)v28, (uint64_t)BytePtr, v27);
        v29 = *(_QWORD *)(a1 + 152) + 48 * *(_QWORD *)(a1 + 136);
        ++*(_QWORD *)(v29 - 16);
      }
    }
    else
    {
      re::Encoder<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v7, a2, v18, v19, v20, v21, v22, v23, v8[4]);
      v26 = 0;
    }
    CFRelease(v11);
    return v26;
  }
  re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) Swift Codable Encode Callback not registered", "g_encodeComponent", "serializeComponentAsJSON", 163);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::ecs2::serializeSwiftCodableComponent<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t *v15;
  const char *v16;
  uint64_t result;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  __CFData *Mutable;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __CFData *v33;
  char *MutableBytePtr;
  unsigned int (*v35)(uint64_t, _QWORD *, __CFData *, const char *);
  const char *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44[2];
  uint64_t v45;
  _QWORD *v46[4];
  _QWORD *v47[4];
  uint64_t v48[4];
  CFIndex v49;
  _QWORD v50[4];

  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 40))(a4);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14))
  {
    re::TypeMemberCollection::TypeMemberCollection((uint64_t)v44, *a5, a5[2]);
    re::TypeMemberCollection::operator[](v44, 0, (uint64_t)v46);
    re::TypeRegistry::typeInfo(v46[0], *v46[2], &v49);
    re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)v50);
    re::TypeRegistry::typeInfo(v47[0], v47[2][9], &v49);
    re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)v50);
    v15 = (uint64_t *)re::TypeMemberCollection::TypeMemberCollection((uint64_t)&v49, v48[0], v48[2]);
    if (v50[3])
    {
      re::TypeMemberCollection::operator[](v15, 0, (uint64_t)v44);
      if (*(_QWORD *)(v45 + 8) >> 1 != 0x274B0FCFAA8)
        return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, a3, a4, (re::TypeInfo *)a5, a6, a7);
      v16 = *(const char **)(v45 + 16);
      if (v16 != "__JSON__")
      {
        if (strcmp(v16, "__JSON__"))
          return re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, a3, a4, (re::TypeInfo *)a5, a6, a7);
      }
    }
  }
  v18 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 40))(a4);
  LODWORD(v44[0]) = 0;
  v24 = re::EncoderOPACK<re::FixedArrayInputStream>::beginPointer(a1 + 24, a2, a3, (int *)v44, 0);
  result = 0;
  if (v24)
  {
    if (LODWORD(v44[0]) == 2)
    {
      v25 = re::EncoderOPACK<re::FixedArrayInputStream>::beginPointer(a1 + 24, a2, a3, (int *)v44, 0);
      result = 0;
      if (!v25)
        return result;
      if (LODWORD(v44[0]) == 2)
      {
        v49 = 0;
        v26 = re::EncoderOPACK<re::FixedArrayInputStream>::beginString(a1 + 24, a2, a3, &v49, 0);
        result = 0;
        if (!v26)
          return result;
        if (v49)
        {
          Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], v49);
          if (Mutable)
          {
            v33 = Mutable;
            CFDataIncreaseLength(Mutable, v49);
            MutableBytePtr = (char *)CFDataGetMutableBytePtr(v33);
            re::EncoderOPACK<re::FixedArrayInputStream>::serializeString(a1 + 24, MutableBytePtr, 0);
            re::EncoderOPACK<re::FixedArrayInputStream>::endString((_anonymous_namespace_ *)(a1 + 24));
            re::EncoderOPACK<re::FixedArrayInputStream>::endPointer((_anonymous_namespace_ *)(a1 + 24));
            re::EncoderOPACK<re::FixedArrayInputStream>::endPointer((_anonymous_namespace_ *)(a1 + 24));
            if ((*(unsigned int (**)(_QWORD *))(*v18 + 8))(v18))
            {
              v35 = (unsigned int (*)(uint64_t, _QWORD *, __CFData *, const char *))v18[13];
              if (v35)
              {
                if (v35(a4, v18, v33, "json"))
                {
                  CFRelease(v33);
                  return *(_BYTE *)(a1 + 64) == 0;
                }
              }
            }
            v37 = re::ecs2::g_decodeComponent(a4, v18, v33, "json");
            CFRelease(v33);
            if ((v37 & 1) != 0)
              return *(_BYTE *)(a1 + 64) == 0;
            re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, "Failed to deserialize Swift Codable component of type %s.", v38, v39, v40, v41, v42, v18[4]);
          }
          else
          {
            re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, "Failed to allocate buffer for JSON data (size = %zu bytes).", v28, v29, v30, v31, v32, v49);
          }
          return 0;
        }
        v36 = "JSON data is empty.";
      }
      else
      {
        v36 = "JSON data not found.";
      }
    }
    else
    {
      v36 = "Object not found.";
    }
    re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, v36, v19, v20, v21, v22, v23, v43);
    return 0;
  }
  return result;
}

double re::registerSerializationFunctions(void)::$_0::__invoke@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  double result;

  if (a1)
  {
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  }
  else
  {
    *a2 = 0;
    *(_QWORD *)&result = 0xFFFFFFFFLL;
    a2[1] = 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t re::serializeVector2F<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector3F<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector4F<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector2D<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v19 = 2;
  result = re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::beginArray((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, &v19, 4);
  if ((_DWORD)result)
  {
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<long long>(a1 + 24, "x", 0, a4, (uint64_t)"double", a7);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<long long>(a1 + 24, "y", 1, a4 + 8, (uint64_t)"double", a7);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeVector3D<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v19 = 3;
  result = re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::beginArray((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, &v19, 4);
  if ((_DWORD)result)
  {
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<long long>(a1 + 24, "x", 0, a4, (uint64_t)"double", a7);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<long long>(a1 + 24, "y", 1, a4 + 8, (uint64_t)"double", a7);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<long long>(a1 + 24, "z", 2, a4 + 16, (uint64_t)"double", a7);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeVector4D<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v19 = 4;
  result = re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::beginArray((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, &v19, 4);
  if ((_DWORD)result)
  {
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<long long>(a1 + 24, "x", 0, a4, (uint64_t)"double", a7);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<long long>(a1 + 24, "y", 1, a4 + 8, (uint64_t)"double", a7);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<long long>(a1 + 24, "z", 2, a4 + 16, (uint64_t)"double", a7);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<long long>(a1 + 24, "w", 3, a4 + 24, (uint64_t)"double", a7);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeMatrix2x2F<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v19 = 2;
  result = re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::beginArray((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, &v19, 4);
  if ((_DWORD)result)
  {
    re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
    re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 8, a7);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeMatrix3x3F<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v19 = 3;
  result = re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::beginArray((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, &v19, 4);
  if ((_DWORD)result)
  {
    re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
    re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 16, a7);
    re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 32, a7);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeMatrix4x4F<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v19 = 4;
  result = re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::beginArray((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, &v19, 4);
  if ((_DWORD)result)
  {
    re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
    re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 16, a7);
    re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 32, a7);
    re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column3", 3, a4 + 48, a7);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializePoseF<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  _OWORD v19[3];

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  if (*(_BYTE *)(a1 + 64))
    return 0;
  LOBYTE(v19[0]) = 1;
  DWORD1(v19[0]) = 0;
  *((_QWORD *)&v19[0] + 1) = a2;
  memset(&v19[1], 0, 32);
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((_QWORD *)(a1 + 24), v19);
  re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "position", 1, a4, a7);
  re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "orientation", 2, a4 + 16, a7);
  re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endObject((_anonymous_namespace_ *)(a1 + 24));
  return *(_BYTE *)(a1 + 64) == 0;
}

uint64_t re::serializeQuaternionF<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeSRT<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  _OWORD v19[3];

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  if (*(_BYTE *)(a1 + 64))
    return 0;
  LOBYTE(v19[0]) = 1;
  DWORD1(v19[0]) = 0;
  *((_QWORD *)&v19[0] + 1) = a2;
  memset(&v19[1], 0, 32);
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((_QWORD *)(a1 + 24), v19);
  re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "scale", 1, a4, a7);
  re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "rotation", 2, a4 + 16, a7);
  re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "translation", 3, a4 + 32, a7);
  re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endObject((_anonymous_namespace_ *)(a1 + 24));
  return *(_BYTE *)(a1 + 64) == 0;
}

uint64_t re::serializeAudioPlaybackState<re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>>(_BYTE *a1, const char *a2, const re::TypeInfo *a3, re::TypeInfo *a4, re::internal *a5, re::TypeInfo *this, uint64_t a7)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[32];
  _BYTE v19[32];
  _BYTE v20[8];
  _BYTE v21[32];

  if (a5 == this)
    return re::internal::serializeEnumAsBinary<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, a3, a4, a5, a5, a7);
  v14 = (_QWORD *)re::TypeInfo::enumConstants(this);
  if (v15)
  {
    v16 = 24 * v15;
    while (*v14 != 9)
    {
      v14 += 3;
      v16 -= 24;
      if (!v16)
        goto LABEL_6;
    }
    return re::serializeEnum<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(a1, a2, a3, a4, (uint64_t)a5, (uint64_t)this, a7);
  }
  else
  {
LABEL_6:
    re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 72), v20);
    re::TypeInfo::TypeInfo((uint64_t)v19, (uint64_t)v21);
    re::TypeRegistry::typeInfo(*(_QWORD **)this, *(_QWORD *)(*((_QWORD *)this + 2) + 72), v20);
    re::TypeInfo::TypeInfo((uint64_t)v18, (uint64_t)v21);
    if (a1[64])
      return 0;
    else
      return (*(uint64_t (**)(_BYTE *, const char *, const re::TypeInfo *, re::TypeInfo *, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, a3, a4, v19, v18, a7);
  }
}

BOOL re::serialize<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(_anonymous_namespace_ *a1, const char *a2, uint64_t a3, char *a4, char a5)
{
  _BOOL8 result;
  unint64_t v9;

  v9 = 2;
  result = re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::beginArray(a1, a2, a3, &v9, 4);
  if (result)
  {
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<int>((uint64_t)a1, "x", 0, a4, (uint64_t)"float", a5);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<int>((uint64_t)a1, "y", 1, a4 + 4, (uint64_t)"float", a5);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray(a1);
    return *((_BYTE *)a1 + 40) == 0;
  }
  return result;
}

{
  _BOOL8 result;
  unint64_t v9;

  v9 = 3;
  result = re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::beginArray(a1, a2, a3, &v9, 4);
  if (result)
  {
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<int>((uint64_t)a1, "x", 0, a4, (uint64_t)"float", a5);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<int>((uint64_t)a1, "y", 1, a4 + 4, (uint64_t)"float", a5);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<int>((uint64_t)a1, "z", 2, a4 + 8, (uint64_t)"float", a5);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray(a1);
    return *((_BYTE *)a1 + 40) == 0;
  }
  return result;
}

{
  _BOOL8 result;
  unint64_t v9;

  v9 = 4;
  result = re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::beginArray(a1, a2, a3, &v9, 4);
  if (result)
  {
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<int>((uint64_t)a1, "x", 0, a4, (uint64_t)"float", a5);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<int>((uint64_t)a1, "y", 1, a4 + 4, (uint64_t)"float", a5);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<int>((uint64_t)a1, "z", 2, a4 + 8, (uint64_t)"float", a5);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::serializeValue<int>((uint64_t)a1, "w", 3, a4 + 12, (uint64_t)"float", a5);
    re::EncoderBinary<re::DynamicArrayBufferedOutputStream>::endArray(a1);
    return *((_BYTE *)a1 + 40) == 0;
  }
  return result;
}

uint64_t re::serializeVector2F<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector3F<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector4F<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector2D<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v20 = **((_QWORD **)a5 + 2);
      v21 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v20 == (unsigned __int16)v21)
      {
        v23 = WORD1(v20) == WORD1(v21);
        v22 = (v21 ^ v20) & 0xFFFFFF00000000;
        v23 = v23 && v22 == 0;
        if (v23)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v24 = 2;
  result = re::EncoderBinary<re::SeekableInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)&v24, 4);
  if ((_DWORD)result)
  {
    if (v24 == 2)
    {
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<double>(a1 + 24, "x", 0, a4, (uint64_t)"double", a7);
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<double>(a1 + 24, "y", 1, a4 + 8, (uint64_t)"double", a7);
      re::EncoderBinary<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(_BYTE *)(a1 + 64) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize vector. Expected array length = 2, actual array length = %zu", v15, v16, v17, v18, v19, v24);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeVector3D<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v20 = **((_QWORD **)a5 + 2);
      v21 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v20 == (unsigned __int16)v21)
      {
        v23 = WORD1(v20) == WORD1(v21);
        v22 = (v21 ^ v20) & 0xFFFFFF00000000;
        v23 = v23 && v22 == 0;
        if (v23)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v24 = 3;
  result = re::EncoderBinary<re::SeekableInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)&v24, 4);
  if ((_DWORD)result)
  {
    if (v24 == 3)
    {
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<double>(a1 + 24, "x", 0, a4, (uint64_t)"double", a7);
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<double>(a1 + 24, "y", 1, a4 + 8, (uint64_t)"double", a7);
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<double>(a1 + 24, "z", 2, a4 + 16, (uint64_t)"double", a7);
      re::EncoderBinary<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(_BYTE *)(a1 + 64) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize vector. Expected array length = 3, actual array length = %zu", v15, v16, v17, v18, v19, v24);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeVector4D<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v20 = **((_QWORD **)a5 + 2);
      v21 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v20 == (unsigned __int16)v21)
      {
        v23 = WORD1(v20) == WORD1(v21);
        v22 = (v21 ^ v20) & 0xFFFFFF00000000;
        v23 = v23 && v22 == 0;
        if (v23)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v24 = 4;
  result = re::EncoderBinary<re::SeekableInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)&v24, 4);
  if ((_DWORD)result)
  {
    if (v24 == 4)
    {
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<double>(a1 + 24, "x", 0, a4, (uint64_t)"double", a7);
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<double>(a1 + 24, "y", 1, a4 + 8, (uint64_t)"double", a7);
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<double>(a1 + 24, "z", 2, a4 + 16, (uint64_t)"double", a7);
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<double>(a1 + 24, "w", 3, a4 + 24, (uint64_t)"double", a7);
      re::EncoderBinary<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(_BYTE *)(a1 + 64) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize vector. Expected array length = 4, actual array length = %zu", v15, v16, v17, v18, v19, v24);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeMatrix2x2F<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v20 = **((_QWORD **)a5 + 2);
      v21 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v20 == (unsigned __int16)v21)
      {
        v23 = WORD1(v20) == WORD1(v21);
        v22 = (v21 ^ v20) & 0xFFFFFF00000000;
        v23 = v23 && v22 == 0;
        if (v23)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v24 = 2;
  result = re::EncoderBinary<re::SeekableInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)&v24, 4);
  if ((_DWORD)result)
  {
    if (v24 == 2)
    {
      re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
      re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 8, a7);
      re::EncoderBinary<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(_BYTE *)(a1 + 64) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize matrix. Expected array length = 2, actual array length = %zu", v15, v16, v17, v18, v19, v24);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeMatrix3x3F<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v20 = **((_QWORD **)a5 + 2);
      v21 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v20 == (unsigned __int16)v21)
      {
        v23 = WORD1(v20) == WORD1(v21);
        v22 = (v21 ^ v20) & 0xFFFFFF00000000;
        v23 = v23 && v22 == 0;
        if (v23)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v24 = 3;
  result = re::EncoderBinary<re::SeekableInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)&v24, 4);
  if ((_DWORD)result)
  {
    if (v24 == 3)
    {
      re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
      re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 16, a7);
      re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 32, a7);
      re::EncoderBinary<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(_BYTE *)(a1 + 64) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize matrix. Expected array length = 3, actual array length = %zu", v15, v16, v17, v18, v19, v24);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeMatrix4x4F<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v20 = **((_QWORD **)a5 + 2);
      v21 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v20 == (unsigned __int16)v21)
      {
        v23 = WORD1(v20) == WORD1(v21);
        v22 = (v21 ^ v20) & 0xFFFFFF00000000;
        v23 = v23 && v22 == 0;
        if (v23)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v24 = 4;
  result = re::EncoderBinary<re::SeekableInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)&v24, 4);
  if ((_DWORD)result)
  {
    if (v24 == 4)
    {
      re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
      re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 16, a7);
      re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 32, a7);
      re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column3", 3, a4 + 48, a7);
      re::EncoderBinary<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(_BYTE *)(a1 + 64) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize matrix. Expected array length = 4, actual array length = %zu", v15, v16, v17, v18, v19, v24);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializePoseF<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  _OWORD v19[3];

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  if (*(_BYTE *)(a1 + 64))
    return 0;
  LOBYTE(v19[0]) = 1;
  DWORD1(v19[0]) = 0;
  *((_QWORD *)&v19[0] + 1) = a2;
  memset(&v19[1], 0, 32);
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((_QWORD *)(a1 + 24), v19);
  re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "position", 1, a4, a7);
  re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "orientation", 2, a4 + 16, a7);
  re::EncoderBinary<re::SeekableInputStream>::endObject((_anonymous_namespace_ *)(a1 + 24));
  return *(_BYTE *)(a1 + 64) == 0;
}

uint64_t re::serializeQuaternionF<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeSRT<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  _OWORD v19[3];

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  if (*(_BYTE *)(a1 + 64))
    return 0;
  LOBYTE(v19[0]) = 1;
  DWORD1(v19[0]) = 0;
  *((_QWORD *)&v19[0] + 1) = a2;
  memset(&v19[1], 0, 32);
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((_QWORD *)(a1 + 24), v19);
  re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "scale", 1, a4, a7);
  re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "rotation", 2, a4 + 16, a7);
  re::serialize<re::EncoderBinary<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "translation", 3, a4 + 32, a7);
  re::EncoderBinary<re::SeekableInputStream>::endObject((_anonymous_namespace_ *)(a1 + 24));
  return *(_BYTE *)(a1 + 64) == 0;
}

uint64_t re::serializeAudioPlaybackState<re::Serializer<re::EncoderBinary<re::SeekableInputStream>>>(_BYTE *a1, const char *a2, const re::TypeInfo *a3, uint64_t *a4, re::internal *a5, re::TypeInfo *this, uint64_t a7)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[32];
  _BYTE v25[32];
  _BYTE v26[8];
  _BYTE v27[32];

  if (a5 == this)
    return re::internal::serializeEnumAsBinary<re::EncoderBinary<re::SeekableInputStream>>((uint64_t)a1, a2, a3, a4, a5, a5, a7);
  v14 = (_QWORD *)re::TypeInfo::enumConstants(this);
  if (!v15)
  {
LABEL_6:
    v17 = *a4;
    re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 72), v26);
    re::TypeInfo::TypeInfo((uint64_t)v25, (uint64_t)v27);
    re::TypeRegistry::typeInfo(*(_QWORD **)this, *(_QWORD *)(*((_QWORD *)this + 2) + 72), v26);
    re::TypeInfo::TypeInfo((uint64_t)v24, (uint64_t)v27);
    if (!a1[64])
    {
      result = (*(uint64_t (**)(_BYTE *, const char *, const re::TypeInfo *, uint64_t *, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, a3, a4, v25, v24, a7);
      if (!(_DWORD)result)
        return result;
      if ((unint64_t)*a4 < 0xA && ((0x21Fu >> *a4) & 1) != 0)
        return 1;
      *a4 = v17;
      re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError((uint64_t)a1, 0, "Failed to read REAudioPlaybackState. Invalid value %zu.", v19, v20, v21, v22, v23, v17);
    }
    return 0;
  }
  v16 = 24 * v15;
  while (*v14 != 9)
  {
    v14 += 3;
    v16 -= 24;
    if (!v16)
      goto LABEL_6;
  }
  return re::serializeEnum<re::EncoderBinary<re::SeekableInputStream>>((uint64_t)a1, a2, a3, a4, (uint64_t)a5, (uint64_t)this, a7);
}

BOOL re::serialize<re::EncoderBinary<re::SeekableInputStream>>(_anonymous_namespace_ *a1, const char *a2, uint64_t a3, char *a4, char a5)
{
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = 2;
  result = re::EncoderBinary<re::SeekableInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v14, 4);
  if (result)
  {
    if (v14 == 2)
    {
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>((uint64_t)a1, "x", 0, a4, (uint64_t)"float", a5);
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>((uint64_t)a1, "y", 1, a4 + 4, (uint64_t)"float", a5);
      re::EncoderBinary<re::SeekableInputStream>::endArray(a1);
      return *((_BYTE *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError(a1, 0, "Failed to deserialize vector. Expected array length = 2, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

{
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = 3;
  result = re::EncoderBinary<re::SeekableInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v14, 4);
  if (result)
  {
    if (v14 == 3)
    {
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>((uint64_t)a1, "x", 0, a4, (uint64_t)"float", a5);
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>((uint64_t)a1, "y", 1, a4 + 4, (uint64_t)"float", a5);
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>((uint64_t)a1, "z", 2, a4 + 8, (uint64_t)"float", a5);
      re::EncoderBinary<re::SeekableInputStream>::endArray(a1);
      return *((_BYTE *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError(a1, 0, "Failed to deserialize vector. Expected array length = 3, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

{
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = 4;
  result = re::EncoderBinary<re::SeekableInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v14, 4);
  if (result)
  {
    if (v14 == 4)
    {
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>((uint64_t)a1, "x", 0, a4, (uint64_t)"float", a5);
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>((uint64_t)a1, "y", 1, a4 + 4, (uint64_t)"float", a5);
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>((uint64_t)a1, "z", 2, a4 + 8, (uint64_t)"float", a5);
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>((uint64_t)a1, "w", 3, a4 + 12, (uint64_t)"float", a5);
      re::EncoderBinary<re::SeekableInputStream>::endArray(a1);
      return *((_BYTE *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError(a1, 0, "Failed to deserialize vector. Expected array length = 4, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

{
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = 4;
  result = re::EncoderBinary<re::SeekableInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v14, 4);
  if (result)
  {
    if (v14 == 4)
    {
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>((uint64_t)a1, "x", 0, a4, (uint64_t)"float", a5);
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>((uint64_t)a1, "y", 1, a4 + 4, (uint64_t)"float", a5);
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>((uint64_t)a1, "z", 2, a4 + 8, (uint64_t)"float", a5);
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>((uint64_t)a1, "w", 3, a4 + 12, (uint64_t)"float", a5);
      re::EncoderBinary<re::SeekableInputStream>::endArray(a1);
      return *((_BYTE *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError(a1, 0, "Failed to deserialize quaternion. Expected array length = 4, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeVector2F<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector3F<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector4F<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector2D<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v19 = 2;
  result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginArray(a1 + 24, a2, (int)a3, &v19, 4);
  if ((_DWORD)result)
  {
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeDouble(a1 + 24, "x", 0, a4, a7);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeDouble(a1 + 24, "y", 1, a4 + 8, a7);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeVector3D<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v19 = 3;
  result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginArray(a1 + 24, a2, (int)a3, &v19, 4);
  if ((_DWORD)result)
  {
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeDouble(a1 + 24, "x", 0, a4, a7);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeDouble(a1 + 24, "y", 1, a4 + 8, a7);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeDouble(a1 + 24, "z", 2, a4 + 16, a7);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeVector4D<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v19 = 4;
  result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginArray(a1 + 24, a2, (int)a3, &v19, 4);
  if ((_DWORD)result)
  {
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeDouble(a1 + 24, "x", 0, a4, a7);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeDouble(a1 + 24, "y", 1, a4 + 8, a7);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeDouble(a1 + 24, "z", 2, a4 + 16, a7);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeDouble(a1 + 24, "w", 3, a4 + 24, a7);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeMatrix2x2F<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v19 = 2;
  result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginArray(a1 + 24, a2, (int)a3, &v19, 4);
  if ((_DWORD)result)
  {
    re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
    re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 8, a7);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeMatrix3x3F<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v19 = 3;
  result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginArray(a1 + 24, a2, (int)a3, &v19, 4);
  if ((_DWORD)result)
  {
    re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
    re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 16, a7);
    re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 32, a7);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeMatrix4x4F<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v19 = 4;
  result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginArray(a1 + 24, a2, (int)a3, &v19, 4);
  if ((_DWORD)result)
  {
    re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
    re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 16, a7);
    re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 32, a7);
    re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "column3", 3, a4 + 48, a7);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializePoseF<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  int v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v16 = **((_QWORD **)a5 + 2);
    v17 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v16 == (unsigned __int16)v17)
    {
      v19 = WORD1(v16) == WORD1(v17);
      v18 = (v17 ^ v16) & 0xFFFFFF00000000;
      v19 = v19 && v18 == 0;
      if (v19)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v14 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginObject(a1 + 24, a2, (int)a3, 0);
  result = 0;
  if (v14)
  {
    re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "position", 1, a4, a7);
    re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "orientation", 2, a4 + 16, a7);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeQuaternionF<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeSRT<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  int v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v16 = **((_QWORD **)a5 + 2);
    v17 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v16 == (unsigned __int16)v17)
    {
      v19 = WORD1(v16) == WORD1(v17);
      v18 = (v17 ^ v16) & 0xFFFFFF00000000;
      v19 = v19 && v18 == 0;
      if (v19)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v14 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginObject(a1 + 24, a2, (int)a3, 0);
  result = 0;
  if (v14)
  {
    re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "scale", 1, a4, a7);
    re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "rotation", 2, a4 + 16, a7);
    re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_anonymous_namespace_ *)(a1 + 24), "translation", 3, a4 + 32, a7);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeAudioPlaybackState<re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>(_BYTE *a1, const char *a2, const re::TypeInfo *a3, re::TypeInfo *a4, re::internal *a5, re::TypeInfo *this, uint64_t a7)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[32];
  _BYTE v19[32];
  _BYTE v20[8];
  _BYTE v21[32];

  if (a5 == this)
    return re::internal::serializeEnumAsBinary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a3, a4, a5, a5, a7);
  v14 = (_QWORD *)re::TypeInfo::enumConstants(this);
  if (v15)
  {
    v16 = 24 * v15;
    while (*v14 != 9)
    {
      v14 += 3;
      v16 -= 24;
      if (!v16)
        goto LABEL_6;
    }
    return re::serializeEnum<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a3, a4, (uint64_t)a5, (uint64_t)this, a7);
  }
  else
  {
LABEL_6:
    re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 72), v20);
    re::TypeInfo::TypeInfo((uint64_t)v19, (uint64_t)v21);
    re::TypeRegistry::typeInfo(*(_QWORD **)this, *(_QWORD *)(*((_QWORD *)this + 2) + 72), v20);
    re::TypeInfo::TypeInfo((uint64_t)v18, (uint64_t)v21);
    if (a1[64])
      return 0;
    else
      return (*(uint64_t (**)(_BYTE *, const char *, const re::TypeInfo *, re::TypeInfo *, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, a3, a4, v19, v18, a7);
  }
}

uint64_t re::serialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(_anonymous_namespace_ *a1, const char *a2, int a3, char *a4, char a5)
{
  uint64_t result;
  unint64_t v9;

  v9 = 2;
  result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginArray((uint64_t)a1, a2, a3, &v9, 4);
  if ((_DWORD)result)
  {
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeFloat((uint64_t)a1, "x", 0, a4, a5);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeFloat((uint64_t)a1, "y", 1, a4 + 4, a5);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endArray(a1);
    return *((_BYTE *)a1 + 40) == 0;
  }
  return result;
}

{
  uint64_t result;
  unint64_t v9;

  v9 = 3;
  result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginArray((uint64_t)a1, a2, a3, &v9, 4);
  if ((_DWORD)result)
  {
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeFloat((uint64_t)a1, "x", 0, a4, a5);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeFloat((uint64_t)a1, "y", 1, a4 + 4, a5);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeFloat((uint64_t)a1, "z", 2, a4 + 8, a5);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endArray(a1);
    return *((_BYTE *)a1 + 40) == 0;
  }
  return result;
}

{
  uint64_t result;
  unint64_t v9;

  v9 = 4;
  result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginArray((uint64_t)a1, a2, a3, &v9, 4);
  if ((_DWORD)result)
  {
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeFloat((uint64_t)a1, "x", 0, a4, a5);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeFloat((uint64_t)a1, "y", 1, a4 + 4, a5);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeFloat((uint64_t)a1, "z", 2, a4 + 8, a5);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeFloat((uint64_t)a1, "w", 3, a4 + 12, a5);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endArray(a1);
    return *((_BYTE *)a1 + 40) == 0;
  }
  return result;
}

uint64_t re::serializeVector2F<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector3F<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector4F<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector2D<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v20 = **((_QWORD **)a5 + 2);
      v21 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v20 == (unsigned __int16)v21)
      {
        v23 = WORD1(v20) == WORD1(v21);
        v22 = (v21 ^ v20) & 0xFFFFFF00000000;
        v23 = v23 && v22 == 0;
        if (v23)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v24 = 2;
  result = re::EncoderOPACK<re::SeekableInputStream>::beginArray(a1 + 24, a2, (int)a3, (char *)&v24, 4);
  if ((_DWORD)result)
  {
    if (v24 == 2)
    {
      re::EncoderOPACK<re::SeekableInputStream>::serializeDouble(a1 + 24, "x", 0, a4, a7);
      re::EncoderOPACK<re::SeekableInputStream>::serializeDouble(a1 + 24, "y", 1, a4 + 8, a7);
      re::EncoderOPACK<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(_BYTE *)(a1 + 64) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize vector. Expected array length = 2, actual array length = %zu", v15, v16, v17, v18, v19, v24);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeVector3D<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v20 = **((_QWORD **)a5 + 2);
      v21 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v20 == (unsigned __int16)v21)
      {
        v23 = WORD1(v20) == WORD1(v21);
        v22 = (v21 ^ v20) & 0xFFFFFF00000000;
        v23 = v23 && v22 == 0;
        if (v23)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v24 = 3;
  result = re::EncoderOPACK<re::SeekableInputStream>::beginArray(a1 + 24, a2, (int)a3, (char *)&v24, 4);
  if ((_DWORD)result)
  {
    if (v24 == 3)
    {
      re::EncoderOPACK<re::SeekableInputStream>::serializeDouble(a1 + 24, "x", 0, a4, a7);
      re::EncoderOPACK<re::SeekableInputStream>::serializeDouble(a1 + 24, "y", 1, a4 + 8, a7);
      re::EncoderOPACK<re::SeekableInputStream>::serializeDouble(a1 + 24, "z", 2, a4 + 16, a7);
      re::EncoderOPACK<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(_BYTE *)(a1 + 64) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize vector. Expected array length = 3, actual array length = %zu", v15, v16, v17, v18, v19, v24);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeVector4D<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v20 = **((_QWORD **)a5 + 2);
      v21 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v20 == (unsigned __int16)v21)
      {
        v23 = WORD1(v20) == WORD1(v21);
        v22 = (v21 ^ v20) & 0xFFFFFF00000000;
        v23 = v23 && v22 == 0;
        if (v23)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v24 = 4;
  result = re::EncoderOPACK<re::SeekableInputStream>::beginArray(a1 + 24, a2, (int)a3, (char *)&v24, 4);
  if ((_DWORD)result)
  {
    if (v24 == 4)
    {
      re::EncoderOPACK<re::SeekableInputStream>::serializeDouble(a1 + 24, "x", 0, a4, a7);
      re::EncoderOPACK<re::SeekableInputStream>::serializeDouble(a1 + 24, "y", 1, a4 + 8, a7);
      re::EncoderOPACK<re::SeekableInputStream>::serializeDouble(a1 + 24, "z", 2, a4 + 16, a7);
      re::EncoderOPACK<re::SeekableInputStream>::serializeDouble(a1 + 24, "w", 3, a4 + 24, a7);
      re::EncoderOPACK<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(_BYTE *)(a1 + 64) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize vector. Expected array length = 4, actual array length = %zu", v15, v16, v17, v18, v19, v24);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeMatrix2x2F<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v20 = **((_QWORD **)a5 + 2);
      v21 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v20 == (unsigned __int16)v21)
      {
        v23 = WORD1(v20) == WORD1(v21);
        v22 = (v21 ^ v20) & 0xFFFFFF00000000;
        v23 = v23 && v22 == 0;
        if (v23)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v24 = 2;
  result = re::EncoderOPACK<re::SeekableInputStream>::beginArray(a1 + 24, a2, (int)a3, (char *)&v24, 4);
  if ((_DWORD)result)
  {
    if (v24 == 2)
    {
      re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
      re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 8, a7);
      re::EncoderOPACK<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(_BYTE *)(a1 + 64) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize matrix. Expected array length = 2, actual array length = %zu", v15, v16, v17, v18, v19, v24);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeMatrix3x3F<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v20 = **((_QWORD **)a5 + 2);
      v21 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v20 == (unsigned __int16)v21)
      {
        v23 = WORD1(v20) == WORD1(v21);
        v22 = (v21 ^ v20) & 0xFFFFFF00000000;
        v23 = v23 && v22 == 0;
        if (v23)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v24 = 3;
  result = re::EncoderOPACK<re::SeekableInputStream>::beginArray(a1 + 24, a2, (int)a3, (char *)&v24, 4);
  if ((_DWORD)result)
  {
    if (v24 == 3)
    {
      re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
      re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 16, a7);
      re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 32, a7);
      re::EncoderOPACK<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(_BYTE *)(a1 + 64) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize matrix. Expected array length = 3, actual array length = %zu", v15, v16, v17, v18, v19, v24);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeMatrix4x4F<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v20 = **((_QWORD **)a5 + 2);
      v21 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v20 == (unsigned __int16)v21)
      {
        v23 = WORD1(v20) == WORD1(v21);
        v22 = (v21 ^ v20) & 0xFFFFFF00000000;
        v23 = v23 && v22 == 0;
        if (v23)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v24 = 4;
  result = re::EncoderOPACK<re::SeekableInputStream>::beginArray(a1 + 24, a2, (int)a3, (char *)&v24, 4);
  if ((_DWORD)result)
  {
    if (v24 == 4)
    {
      re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
      re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 16, a7);
      re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 32, a7);
      re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "column3", 3, a4 + 48, a7);
      re::EncoderOPACK<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return *(_BYTE *)(a1 + 64) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize matrix. Expected array length = 4, actual array length = %zu", v15, v16, v17, v18, v19, v24);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializePoseF<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  int v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v16 = **((_QWORD **)a5 + 2);
    v17 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v16 == (unsigned __int16)v17)
    {
      v19 = WORD1(v16) == WORD1(v17);
      v18 = (v17 ^ v16) & 0xFFFFFF00000000;
      v19 = v19 && v18 == 0;
      if (v19)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v14 = re::EncoderOPACK<re::SeekableInputStream>::beginObject(a1 + 24, a2, (int)a3, 0);
  result = 0;
  if (v14)
  {
    re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "position", 1, a4, a7);
    re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "orientation", 2, a4 + 16, a7);
    re::EncoderOPACK<re::SeekableInputStream>::endObject(a1 + 24);
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeQuaternionF<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), a2, (int)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeSRT<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  int v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v16 = **((_QWORD **)a5 + 2);
    v17 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v16 == (unsigned __int16)v17)
    {
      v19 = WORD1(v16) == WORD1(v17);
      v18 = (v17 ^ v16) & 0xFFFFFF00000000;
      v19 = v19 && v18 == 0;
      if (v19)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v14 = re::EncoderOPACK<re::SeekableInputStream>::beginObject(a1 + 24, a2, (int)a3, 0);
  result = 0;
  if (v14)
  {
    re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "scale", 1, a4, a7);
    re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "rotation", 2, a4 + 16, a7);
    re::serialize<re::EncoderOPACK<re::SeekableInputStream>>((_anonymous_namespace_ *)(a1 + 24), "translation", 3, a4 + 32, a7);
    re::EncoderOPACK<re::SeekableInputStream>::endObject(a1 + 24);
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeAudioPlaybackState<re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>>(_BYTE *a1, const char *a2, const re::TypeInfo *a3, uint64_t *a4, re::internal *a5, re::TypeInfo *this, uint64_t a7)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[32];
  _BYTE v25[32];
  _BYTE v26[8];
  _BYTE v27[32];

  if (a5 == this)
    return re::internal::serializeEnumAsBinary<re::EncoderOPACK<re::SeekableInputStream>>((uint64_t)a1, a2, a3, a4, a5, a5, a7);
  v14 = (_QWORD *)re::TypeInfo::enumConstants(this);
  if (!v15)
  {
LABEL_6:
    v17 = *a4;
    re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 72), v26);
    re::TypeInfo::TypeInfo((uint64_t)v25, (uint64_t)v27);
    re::TypeRegistry::typeInfo(*(_QWORD **)this, *(_QWORD *)(*((_QWORD *)this + 2) + 72), v26);
    re::TypeInfo::TypeInfo((uint64_t)v24, (uint64_t)v27);
    if (!a1[64])
    {
      result = (*(uint64_t (**)(_BYTE *, const char *, const re::TypeInfo *, uint64_t *, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, a3, a4, v25, v24, a7);
      if (!(_DWORD)result)
        return result;
      if ((unint64_t)*a4 < 0xA && ((0x21Fu >> *a4) & 1) != 0)
        return 1;
      *a4 = v17;
      re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError((uint64_t)a1, 0, "Failed to read REAudioPlaybackState. Invalid value %zu.", v19, v20, v21, v22, v23, v17);
    }
    return 0;
  }
  v16 = 24 * v15;
  while (*v14 != 9)
  {
    v14 += 3;
    v16 -= 24;
    if (!v16)
      goto LABEL_6;
  }
  return re::serializeEnum<re::EncoderOPACK<re::SeekableInputStream>>((uint64_t)a1, a2, a3, a4, (uint64_t)a5, (uint64_t)this, a7);
}

uint64_t re::serialize<re::EncoderOPACK<re::SeekableInputStream>>(_anonymous_namespace_ *a1, const char *a2, int a3, char *a4, char a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = 2;
  result = re::EncoderOPACK<re::SeekableInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v14, 4);
  if ((_DWORD)result)
  {
    if (v14 == 2)
    {
      re::EncoderOPACK<re::SeekableInputStream>::serializeFloat((uint64_t)a1, "x", 0, a4, a5);
      re::EncoderOPACK<re::SeekableInputStream>::serializeFloat((uint64_t)a1, "y", 1, a4 + 4, a5);
      re::EncoderOPACK<re::SeekableInputStream>::endArray(a1);
      return *((_BYTE *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError(a1, 0, "Failed to deserialize vector. Expected array length = 2, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = 3;
  result = re::EncoderOPACK<re::SeekableInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v14, 4);
  if ((_DWORD)result)
  {
    if (v14 == 3)
    {
      re::EncoderOPACK<re::SeekableInputStream>::serializeFloat((uint64_t)a1, "x", 0, a4, a5);
      re::EncoderOPACK<re::SeekableInputStream>::serializeFloat((uint64_t)a1, "y", 1, a4 + 4, a5);
      re::EncoderOPACK<re::SeekableInputStream>::serializeFloat((uint64_t)a1, "z", 2, a4 + 8, a5);
      re::EncoderOPACK<re::SeekableInputStream>::endArray(a1);
      return *((_BYTE *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError(a1, 0, "Failed to deserialize vector. Expected array length = 3, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = 4;
  result = re::EncoderOPACK<re::SeekableInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v14, 4);
  if ((_DWORD)result)
  {
    if (v14 == 4)
    {
      re::EncoderOPACK<re::SeekableInputStream>::serializeFloat((uint64_t)a1, "x", 0, a4, a5);
      re::EncoderOPACK<re::SeekableInputStream>::serializeFloat((uint64_t)a1, "y", 1, a4 + 4, a5);
      re::EncoderOPACK<re::SeekableInputStream>::serializeFloat((uint64_t)a1, "z", 2, a4 + 8, a5);
      re::EncoderOPACK<re::SeekableInputStream>::serializeFloat((uint64_t)a1, "w", 3, a4 + 12, a5);
      re::EncoderOPACK<re::SeekableInputStream>::endArray(a1);
      return *((_BYTE *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError(a1, 0, "Failed to deserialize vector. Expected array length = 4, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = 4;
  result = re::EncoderOPACK<re::SeekableInputStream>::beginArray((uint64_t)a1, a2, a3, (char *)&v14, 4);
  if ((_DWORD)result)
  {
    if (v14 == 4)
    {
      re::EncoderOPACK<re::SeekableInputStream>::serializeFloat((uint64_t)a1, "x", 0, a4, a5);
      re::EncoderOPACK<re::SeekableInputStream>::serializeFloat((uint64_t)a1, "y", 1, a4 + 4, a5);
      re::EncoderOPACK<re::SeekableInputStream>::serializeFloat((uint64_t)a1, "z", 2, a4 + 8, a5);
      re::EncoderOPACK<re::SeekableInputStream>::serializeFloat((uint64_t)a1, "w", 3, a4 + 12, a5);
      re::EncoderOPACK<re::SeekableInputStream>::endArray(a1);
      return *((_BYTE *)a1 + 40) == 0;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError(a1, 0, "Failed to deserialize quaternion. Expected array length = 4, actual array length = %zu", v9, v10, v11, v12, v13, v14);
      return 0;
    }
  }
  return result;
}

uint64_t re::serializeVector2F<re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector3F<re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector4F<re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeVector2D<re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, double *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v19 = 2;
  result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, &v19, 4);
  if ((_DWORD)result)
  {
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "x", 0, a4, a7);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "y", 1, a4 + 1, a7);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeVector3D<re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, double *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v19 = 3;
  result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, &v19, 4);
  if ((_DWORD)result)
  {
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "x", 0, a4, a7);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "y", 1, a4 + 1, a7);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "z", 2, a4 + 2, a7);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeVector4D<re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, double *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v19 = 4;
  result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, &v19, 4);
  if ((_DWORD)result)
  {
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "x", 0, a4, a7);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "y", 1, a4 + 1, a7);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "z", 2, a4 + 2, a7);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "w", 3, a4 + 3, a7);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeMatrix2x2F<re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v19 = 2;
  result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, &v19, 4);
  if ((_DWORD)result)
  {
    re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
    re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 2, a7);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeMatrix3x3F<re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v19 = 3;
  result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, &v19, 4);
  if ((_DWORD)result)
  {
    re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
    re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 4, a7);
    re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 8, a7);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeMatrix4x4F<re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v19 = 4;
  result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, &v19, 4);
  if ((_DWORD)result)
  {
    re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column0", 0, a4, a7);
    re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column1", 1, a4 + 4, a7);
    re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column2", 2, a4 + 8, a7);
    re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "column3", 3, a4 + 12, a7);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializePoseF<re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  _BOOL4 v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v16 = **((_QWORD **)a5 + 2);
    v17 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v16 == (unsigned __int16)v17)
    {
      v19 = WORD1(v16) == WORD1(v17);
      v18 = (v17 ^ v16) & 0xFFFFFF00000000;
      v19 = v19 && v18 == 0;
      if (v19)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v14 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, (uint64_t)a3, 0);
  result = 0;
  if (v14)
  {
    re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "position", 1, a4, a7);
    re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "orientation", 2, a4 + 4, a7);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::serializeQuaternionF<re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

uint64_t re::serializeSRT<re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re::TypeInfo *a5, const re::TypeInfo *a6, uint64_t a7)
{
  _BOOL4 v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v16 = **((_QWORD **)a5 + 2);
    v17 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v16 == (unsigned __int16)v17)
    {
      v19 = WORD1(v16) == WORD1(v17);
      v18 = (v17 ^ v16) & 0xFFFFFF00000000;
      v19 = v19 && v18 == 0;
      if (v19)
        goto LABEL_4;
    }
    return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    return re::serializeObject<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
LABEL_4:
  v14 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, (uint64_t)a3, 0);
  result = 0;
  if (v14)
  {
    re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "scale", 1, a4, a7);
    re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "rotation", 2, a4 + 4, a7);
    re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), "translation", 3, a4 + 8, a7);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

BOOL re::serialize<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(_anonymous_namespace_ *a1, const char *a2, uint64_t a3, float *a4, char a5)
{
  _BOOL8 result;
  uint64_t v9;

  v9 = 2;
  result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)a1, a2, a3, &v9, 4);
  if (result)
  {
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "x", 0, a4, a5);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "y", 1, a4 + 1, a5);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray(a1);
    return *((_BYTE *)a1 + 40) == 0;
  }
  return result;
}

{
  _BOOL8 result;
  uint64_t v9;

  v9 = 3;
  result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)a1, a2, a3, &v9, 4);
  if (result)
  {
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "x", 0, a4, a5);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "y", 1, a4 + 1, a5);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "z", 2, a4 + 2, a5);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray(a1);
    return *((_BYTE *)a1 + 40) == 0;
  }
  return result;
}

{
  _BOOL8 result;
  uint64_t v9;

  v9 = 4;
  result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)a1, a2, a3, &v9, 4);
  if (result)
  {
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "x", 0, a4, a5);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "y", 1, a4 + 1, a5);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "z", 2, a4 + 2, a5);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>((uint64_t)a1, "w", 3, a4 + 3, a5);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray(a1);
    return *((_BYTE *)a1 + 40) == 0;
  }
  return result;
}

unsigned int *re::serializeVector2F<re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  return (unsigned int *)re::serializeObject<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7);
}

unsigned int *re::serializeVector3F<re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  return (unsigned int *)re::serializeObject<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7);
}

unsigned int *re::serializeVector4F<re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (a5 == a6)
    return re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        return re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    return re::serialize<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, a4, a7);
  }
  return (unsigned int *)re::serializeObject<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7);
}

unsigned int *re::serializeVector2D<re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>>(uint64_t a1, char *a2, const re::TypeInfo *a3, double *a4, re *a5, const re::TypeInfo *a6, uint64_t a7)
{
  unsigned int *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v20 = **((_QWORD **)a5 + 2);
      v21 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v20 == (unsigned __int16)v21)
      {
        v23 = WORD1(v20) == WORD1(v21);
        v22 = (v21 ^ v20) & 0xFFFFFF00000000;
        v23 = v23 && v22 == 0;
        if (v23)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    return (unsigned int *)re::serializeObject<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7);
  }
LABEL_4:
  v24 = 2;
  result = re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((_anonymous_namespace_ *)(a1 + 24), a2, (uint64_t)a3, &v24, 4);
  if ((_DWORD)result)
  {
    if (v24 == 2)
    {
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "x", 0, a4, a7, (uint64_t)"double");
      re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, "y", 1, a4 + 1, a7, (uint64_t)"double");
      re::EncoderBinary<re::SeekableInputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
      return (unsigned int *)(*(_BYTE *)(a1 + 64) == 0);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), 0, "Failed to deserialize vector. Expected array length = 2, actual array length = %zu", v15, v16, v17, v18, v19, v24);
      return 0;
    }
  }
  return result;
}

