void *re::HashTable<re::ShadowPair,re::ShadowInfo,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, __int128 *a4, const void *a5)
{
  unsigned int v10;
  unsigned int v11;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  void *result;
  _BYTE v30[44];

  v10 = *(_DWORD *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    v10 = *(_DWORD *)(a1 + 32);
    v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = v10 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v30, 0, 36);
          *(_QWORD *)&v30[36] = 0x7FFFFFFFLL;
          re::HashTable<re::ShadowPair,re::ShadowInfo,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::init((uint64_t)v30, v14, v13);
          v16 = *(_OWORD *)v30;
          *(_OWORD *)v30 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v30[16];
          v18 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v30[16] = v18;
          *(_QWORD *)(a1 + 16) = v17;
          v20 = *(_OWORD *)&v30[24];
          *(_OWORD *)&v30[24] = *(_OWORD *)(a1 + 24);
          v19 = *(_DWORD *)&v30[32];
          *(_OWORD *)(a1 + 24) = v20;
          v21 = v19;
          if (v19)
          {
            v22 = v18 + 48;
            do
            {
              if ((*(_DWORD *)(v22 - 40) & 0x80000000) != 0)
                re::HashTable<re::ShadowPair,re::ShadowInfo,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 48) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 48), v22 - 32, v22);
              v22 += 1808;
              --v21;
            }
            while (v21);
          }
          re::HashTable<re::ShadowPair,re::ShadowInfo,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::deinit((uint64_t *)v30);
        }
      }
      else
      {
        if (v13)
          v25 = 2 * v12;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 1808 * v10 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 1808 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 1808 * v10 + 8) = v24 | 0x80000000;
  v26 = 1808 * v10;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v26) = a3;
  v27 = *(_QWORD *)(a1 + 16) + v26;
  v28 = *a4;
  *(_QWORD *)(v27 + 32) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(v27 + 16) = v28;
  result = memcpy((void *)(*(_QWORD *)(a1 + 16) + v26 + 48), a5, 0x6E0uLL);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

uint64_t re::HashTable<re::ShadowPair,re::AllocatedShadowHandle,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, __int128 *a4, __int128 *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  _BYTE v31[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v31, 0, 36);
          *(_QWORD *)&v31[36] = 0x7FFFFFFFLL;
          re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v31, v13, v12);
          v15 = *(_OWORD *)v31;
          *(_OWORD *)v31 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v31[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v31[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v31[24];
          *(_OWORD *)&v31[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v31[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = 0;
            v22 = v17 + 40;
            do
            {
              if ((*(_DWORD *)(v22 - 32) & 0x80000000) != 0)
                re::HashTable<re::ShadowPair,re::AllocatedShadowHandle,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 40) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 40), v22 - 24, v22);
              ++v21;
              v22 += 72;
            }
            while (v21 < v20);
          }
          re::HashTable<re::ShadowPair,re::AllocatedShadowHandle,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::deinit((uint64_t *)v31);
        }
      }
      else
      {
        if (v12)
          v25 = 2 * v11;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 72 * v9 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 72 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 72 * v9 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9) = a3;
  v26 = *(_QWORD *)(a1 + 16) + 72 * v9;
  v27 = *a4;
  *(_QWORD *)(v26 + 32) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(v26 + 16) = v27;
  v28 = *(_QWORD *)(a1 + 16) + 72 * v9;
  v29 = *a5;
  *(_OWORD *)(v28 + 56) = a5[1];
  *(_OWORD *)(v28 + 40) = v29;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

double re::HashTable<re::ShadowPair,re::ShadowInfo,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((_DWORD *)a1 + 8);
    if (v3)
    {
      v4 = 0;
      v5 = 1808 * v3;
      do
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 1808;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::WorldOrderedShadows::Range,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned long long,re::WorldOrderedShadows::Range,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 32 * v10 + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 32 * v10;
  return v12 + 24;
}

_QWORD *re::DynamicArray<re::AllocatedShadowHandle>::resizeUninitialized(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
  }
  else if (result[1] < a2)
  {
    result = re::DynamicArray<re::EvaluationRegister>::setCapacity(result, a2);
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::HashTable<unsigned long long,re::WorldOrderedShadows::Range,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::WorldOrderedShadows::Range,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,re::WorldOrderedShadows::Range,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long long,re::WorldOrderedShadows::Range,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (_QWORD *)(*(_QWORD *)&v13[16] + v10 + 16), (_QWORD *)(*(_QWORD *)&v13[16] + v10 + 24));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

void **re::DynamicArray<re::AllocatedShadowHandle>::copy(void **result, uint64_t a2)
{
  void **v3;
  unint64_t v4;
  void *v5;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= (unint64_t)result[2])
  {
    re::DynamicArray<re::EvaluationRegister>::setCapacity(result, *(_QWORD *)(a2 + 16));
    v5 = v3[2];
    if (v5)
    {
      memmove(v3[4], *(const void **)(a2 + 32), 32 * (_QWORD)v5 - 4);
      v5 = v3[2];
    }
    result = (void **)memcpy((char *)v3[4] + 32 * (_QWORD)v5, (const void *)(*(_QWORD *)(a2 + 32) + 32 * (_QWORD)v5), 32 * v4 - 32 * (_QWORD)v5);
  }
  else if (v4)
  {
    result = (void **)memmove(result[4], *(const void **)(a2 + 32), 32 * v4 - 4);
  }
  v3[2] = (void *)v4;
  return result;
}

uint64_t re::SkinningModelBuilder::addSkinnedMeshPartData(uint64_t a1, unsigned int a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v32;
  const char *v33;

  v32 = 0xA7268F0C3B45D55ELL;
  v33 = "skinningInfluences";
  v13 = re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a7, &v32);
  re::StringID::destroyString((re::StringID *)&v32);
  v32 = 0xF98D22D8F2059642;
  v33 = "influenceEndIndices";
  v14 = re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a7, &v32);
  re::StringID::destroyString((re::StringID *)&v32);
  v32 = 0x9E5069BE2D47B84ELL;
  v33 = "simplifiedSkinningInfluences";
  v15 = re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a7, &v32);
  re::StringID::destroyString((re::StringID *)&v32);
  v32 = 0xE79E9E6540401152;
  v33 = "simplifiedInfluenceEndIndices";
  v16 = re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a7, &v32);
  re::StringID::destroyString((re::StringID *)&v32);
  v17 = 0x100000000;
  if (!a3)
    v17 = 0;
  v18 = v17 | a2;
  if (a5)
    v19 = 0x10000000000;
  else
    v19 = 0;
  if (v13)
  {
    v20 = *(id *)v13;
    v21 = *(_QWORD *)(v13 + 8);
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  v22 = v18 | v19;
  if (v14)
  {
    v23 = *(id *)v14;
    v14 = *(_QWORD *)(v14 + 8);
  }
  else
  {
    v23 = 0;
  }
  v24 = v22 | (a4 << 48);
  if (v15)
  {
    v25 = *(id *)v15;
    v15 = *(_QWORD *)(v15 + 8);
  }
  else
  {
    v25 = 0;
  }
  v26 = v24 | (a6 << 56);
  if (v16)
  {
    v27 = *(id *)v16;
    v28 = *(_QWORD *)(v16 + 8);
  }
  else
  {
    v27 = 0;
    v28 = 0;
  }
  v29 = (_QWORD *)re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::addUninitialized(a1 + 80);
  *v29 = v26;
  v29[1] = 0;
  v29[2] = 0;
  v29[3] = 0;
  v29[4] = v20;
  v29[5] = v21;
  v29[6] = 0;
  v29[7] = 0;
  v29[8] = v23;
  v29[9] = v14;
  v29[11] = 0;
  v29[12] = 0;
  v29[10] = 0;
  v29[13] = v25;
  v29[14] = v15;
  v29[15] = 0;
  v29[16] = 0;
  v29[17] = v27;
  v29[18] = v28;
  if (v27)

  if (v25)
  if (v23)

  if (v20)
  return *(_QWORD *)(a1 + 120) - 1;
}

uint64_t re::SkinningModelBuilder::buildDeformationModel(re::SkinningModelBuilder *this, id *a2, DeformationModelData *a3)
{
  void *v5;
  _OWORD *v6;
  _anonymous_namespace_ *v7;
  uint64_t v8;
  _QWORD *var0;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t (**v32)();
  id v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  int v41;
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  unint64_t v46;
  __int16 v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  re::SkinningModelBuilder::generatePreparedSkinnedMeshPartData(this, 1, a2);
  if (a3->var0[2].var0.var0)
    (*(void (**)(_QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this);
  v5 = *(void **)this;
  v6 = (_OWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)this + 32))(*(_QWORD *)this, 48, 8);
  *v6 = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  v32 = &off_24ED7B198;
  v33 = v5;
  v35 = &v32;
  *(_QWORD *)&v51 = (char *)&v49 + 8;
  *((_QWORD *)&v49 + 1) = &off_24ED7B198;
  *(_QWORD *)&v50 = v5;
  *(_QWORD *)&v49 = 0;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)&a3->var0[2], (uint64_t)v6);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100](a3->var0[2].var0.var1.var0.var0.var0, (uint64_t)&v49 + 8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v49);
  v7 = (_anonymous_namespace_ *)v35;
  if (v35 == &v32)
  {
    v8 = 4;
    v7 = (_anonymous_namespace_ *)&v32;
  }
  else
  {
    if (!v35)
      goto LABEL_8;
    v8 = 5;
  }
  v7 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_8:
  var0 = a3->var0[2].var0.var0;
  v10 = *((_QWORD *)this + 15);
  var0[1] = v10;
  if (v10)
  {
    if (v10 < 0x38E38E38E38E38FLL)
    {
      var0[2] = v12;
      if (!v12)
        goto LABEL_29;
      v14 = v12;
      v15 = (char *)this + 80;
      if (v10 != 1)
      {
        bzero(v12, 72 * v10 - 72);
        v14 += 72 * v10 - 72;
      }
      *((_QWORD *)v14 + 8) = 0;
      *((_OWORD *)v14 + 2) = 0u;
      *((_OWORD *)v14 + 3) = 0u;
      *(_OWORD *)v14 = 0u;
      *((_OWORD *)v14 + 1) = 0u;
      re::FixedArray<re::Slice<unsigned int>>::init<>(var0 + 3, *(_QWORD *)this, *((_QWORD *)this + 2));
      re::FixedArray<re::BufferSlice>::operator=((_anonymous_namespace_ *)(var0 + 3), (uint64_t *)this + 1);
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::operator[]((uint64_t)v15, v17);
        v19 = *(_DWORD *)v18;
        LODWORD(v32) = *(_DWORD *)(v18 + 4);
        HIDWORD(v32) = v19;
        v20 = *(id *)(v18 + 64);
        v21 = *(_QWORD *)(v18 + 72);
        v33 = v20;
        v34 = v21;
        v22 = *(id *)(v18 + 32);
        v23 = *(_QWORD *)(v18 + 40);
        v35 = v22;
        v36 = v23;
        v24 = *(id *)(v18 + 136);
        v25 = *(_QWORD *)(v18 + 144);
        v37 = v24;
        v38 = v25;
        v26 = *(id *)(v18 + 104);
        v27 = *(_QWORD *)(v18 + 112);
        v39 = v26;
        v40 = v27;
        v28 = var0[1];
        if (v28 <= v17)
          break;
        v29 = var0[2] + v16;
        *(_QWORD *)v29 = v32;
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v29 + 8), &v33);
        *(_QWORD *)(v29 + 16) = v34;
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v29 + 24), &v35);
        *(_QWORD *)(v29 + 32) = v36;
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v29 + 40), &v37);
        *(_QWORD *)(v29 + 48) = v38;
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v29 + 56), &v39);
        *(_QWORD *)(v29 + 64) = v40;
        if (v39)
        {

          v39 = 0;
        }
        if (v37)
        {

          v37 = 0;
        }
        if (v35)
        {

          v35 = 0;
        }
        if (v33)

        ++v17;
        v16 += 72;
        if (v10 == v17)
          return 1;
      }
      v31 = 0;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v49 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v41 = 136315906;
      v42 = "operator[]";
      v43 = 1024;
      v44 = 468;
      v45 = 2048;
      v46 = v17;
      v47 = 2048;
      v48 = v28;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 72, v10, v31);
    _os_crash();
    __break(1u);
LABEL_29:
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
  }
  re::FixedArray<re::Slice<unsigned int>>::init<>(var0 + 3, *(_QWORD *)this, *((_QWORD *)this + 2));
  re::FixedArray<re::BufferSlice>::operator=((_anonymous_namespace_ *)(var0 + 3), (uint64_t *)this + 1);
  return 1;
}

void re::SkinningModelBuilder::generatePreparedSkinnedMeshPartData(re::SkinningModelBuilder *this, int a2, id *a3)
{
  unint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  id v18;
  void *v19;
  BOOL v20;
  id v21;
  void *v22;
  int v23;
  BOOL v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  id v30;
  uint64_t v31;

  v4 = *((_QWORD *)this + 8);
  v5 = (char *)this + 80;
  v6 = *((_QWORD *)this + 15);
  if (v4 <= v6)
  {
    if (v6)
      v12 = a2 == 0;
    else
      v12 = 1;
    if (!v12)
    {
      v13 = 0;
      do
      {
        v14 = re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::operator[]((uint64_t)v5, v13);
        v15 = v14;
        v16 = *(_DWORD *)(v14 + 44);
        if (*(_QWORD *)(v14 + 16))
          v17 = v16 == 0;
        else
          v17 = 0;
        if (v17)
        {
          v18 = objc_msgSend(*a3, sel_newBufferWithBytes_length_options_, *(_QWORD *)(v14 + 24));
          v30 = v18;
          LODWORD(v31) = 0;
          HIDWORD(v31) = objc_msgSend(v18, sel_length);
          NS::SharedPtr<MTL::Texture>::operator=((void **)(v15 + 32), &v30);
          v19 = v30;
          *(_QWORD *)(v15 + 40) = v31;
          if (v19)
          {

            v30 = 0;
          }
          if (v18)

          v16 = *(_DWORD *)(v15 + 44);
        }
        if (*(_QWORD *)(v15 + 56))
          v20 = v16 == 0;
        else
          v20 = 0;
        if (v20)
        {
          v21 = objc_msgSend(*a3, sel_newBufferWithBytes_length_options_, *(_QWORD *)(v15 + 48));
          v30 = v21;
          LODWORD(v31) = 0;
          HIDWORD(v31) = objc_msgSend(v21, sel_length);
          NS::SharedPtr<MTL::Texture>::operator=((void **)(v15 + 32), &v30);
          v22 = v30;
          *(_QWORD *)(v15 + 40) = v31;
          if (v22)
          {

            v30 = 0;
          }
          if (v21)

        }
        v23 = *(_DWORD *)(v15 + 116);
        if (*(_QWORD *)(v15 + 88))
          v24 = v23 == 0;
        else
          v24 = 0;
        if (v24)
        {
          v25 = objc_msgSend(*a3, sel_newBufferWithBytes_length_options_, *(_QWORD *)(v15 + 96));
          v30 = v25;
          LODWORD(v31) = 0;
          HIDWORD(v31) = objc_msgSend(v25, sel_length);
          NS::SharedPtr<MTL::Texture>::operator=((void **)(v15 + 104), &v30);
          v26 = v30;
          *(_QWORD *)(v15 + 112) = v31;
          if (v26)
          {

            v30 = 0;
          }
          if (v25)

          v23 = *(_DWORD *)(v15 + 116);
        }
        if (*(_QWORD *)(v15 + 128) && !v23)
        {
          v27 = objc_msgSend(*a3, sel_newBufferWithBytes_length_options_, *(_QWORD *)(v15 + 120));
          v30 = v27;
          LODWORD(v31) = 0;
          HIDWORD(v31) = objc_msgSend(v27, sel_length);
          NS::SharedPtr<MTL::Texture>::operator=((void **)(v15 + 104), &v30);
          v28 = v30;
          *(_QWORD *)(v15 + 112) = v31;
          if (v28)
          {

            v30 = 0;
          }
          if (v27)

        }
        ++v13;
      }
      while (v6 != v13);
    }
  }
  else if (v4 <= 4 * *((_QWORD *)this + 11)
         || (re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::setBucketsCapacity((uint64_t *)this + 10, (v4 + 3) >> 2), (v4 = *((_QWORD *)this + 8)) != 0))
  {
    v8 = 0;
    do
    {
      v9 = re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::operator[]((uint64_t)this + 24, v8);
      v10 = re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::addUninitialized((uint64_t)v5);
      *(_OWORD *)(v10 + 20) = 0u;
      *(_OWORD *)(v10 + 36) = 0u;
      *(_OWORD *)(v10 + 52) = 0u;
      *(_OWORD *)(v10 + 68) = 0u;
      *(_OWORD *)(v10 + 84) = 0u;
      *(_OWORD *)(v10 + 100) = 0u;
      *(_OWORD *)(v10 + 116) = 0u;
      *(_OWORD *)(v10 + 132) = 0u;
      *(_DWORD *)(v10 + 148) = 0;
      *(_OWORD *)(v10 + 4) = 0u;
      *(_DWORD *)v10 = *(_DWORD *)v9;
      re::SkinningModelBuilder::packInfluenceData((uint64_t *)this, a2, a3, (char *)(v10 + 4), (_BYTE *)(v10 + 6), (uint64_t *)(v10 + 8), v10 + 32, (int **)(v10 + 48), 0.0, v10 + 64, (uint64_t *)(v9 + 8), (int **)(v9 + 24), (uint64_t *)(v9 + 72));
      re::SkinningModelBuilder::packInfluenceData((uint64_t *)this, a2, a3, (char *)(v10 + 5), (_BYTE *)(v10 + 7), (uint64_t *)(v10 + 80), v10 + 104, (int **)(v10 + 120), v11, v10 + 136, (uint64_t *)(v9 + 40), (int **)(v9 + 56), (uint64_t *)(v9 + 72));
      ++v8;
    }
    while (v4 != v8);
  }
}

uint64_t re::FixedArray<re::BufferSlice>::operator=(_anonymous_namespace_ *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  if (!*(_QWORD *)a1)
  {
    v4 = a2[1];
    if (!v4)
      return (uint64_t)a1;
  }
  v5 = a2[1];
  if (*((_QWORD *)a1 + 1) == v5)
  {
    if (v5)
    {
      v6 = *a2;
      v7 = v6 + 16 * v5;
      v8 = *((_QWORD *)a1 + 2);
      do
      {
        NS::SharedPtr<MTL::Texture>::operator=((void **)v8, (void **)v6);
        *(_QWORD *)(v8 + 8) = *(_QWORD *)(v6 + 8);
        v6 += 16;
        v8 += 16;
      }
      while (v6 != v7);
    }
    return (uint64_t)a1;
  }
  re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::SkinningModelBuilder::buildAttributeDescriptor(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t *v26;
  _BYTE v27[18];
  __int16 v28;
  unint64_t v29;
  __int16 v30;
  unint64_t v31;
  __int128 v32[5];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  re::SkinningModelBuilder::generatePreparedSkinnedMeshPartData((re::SkinningModelBuilder *)a1, 0, 0);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 1);
  v5 = a1[15];
  v26 = a1;
  v6 = *a1;
  *(_QWORD *)(a2 + 16) = *a1;
  *(_QWORD *)(a2 + 24) = v5;
  if (v5)
  {
    if (v5 < 0x492492492492493)
    {
      v7 = (_DWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, 56 * v5, 8);
      *(_QWORD *)(a2 + 32) = v7;
      if (!v7)
        goto LABEL_25;
      v25 = (uint64_t)(a1 + 10);
      v9 = v5 - 1;
      if (v5 == 1)
      {
        *v7 = -1;
        v10 = v7 + 11;
        v11 = v7 + 1;
      }
      else
      {
        v10 = v7 + 11;
        do
        {
          *(v10 - 11) = -1;
          *(_OWORD *)(v10 - 2) = 0uLL;
          *(_OWORD *)(v10 - 10) = 0uLL;
          *(_OWORD *)(v10 - 6) = 0uLL;
          v10[2] = 0;
          *v10 = 0x7FFFFFFF;
          v10 += 14;
          --v9;
        }
        while (v9);
        *(v10 - 11) = -1;
        v11 = v10 - 10;
      }
      v12 = 0;
      v13 = 0;
      v11[12] = 0;
      *((_OWORD *)v11 + 1) = 0u;
      *((_OWORD *)v11 + 2) = 0u;
      *(_OWORD *)v11 = 0u;
      *v10 = 0x7FFFFFFF;
      while (1)
      {
        v14 = (_DWORD *)re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::operator[](v25, v13);
        v15 = *(_QWORD *)(a2 + 24);
        if (v15 <= v13)
          break;
        v16 = v14;
        v17 = *(_QWORD *)(a2 + 32) + v12;
        *(_DWORD *)v17 = *v14;
        *(_DWORD *)(v17 + 4) = v14[1];
        re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(v17 + 8, *v26, 3);
        if (*(_BYTE *)(v17 + 4))
          v18 = 4;
        else
          v18 = 8;
        *(_QWORD *)v27 = 0xA7268F0C3B45D55ELL;
        *(_QWORD *)&v27[8] = "skinningInfluences";
        v20 = *((_QWORD *)v16 + 2);
        v19 = *((_QWORD *)v16 + 3);
        *(_QWORD *)&v32[0] = v18;
        *((_QWORD *)&v32[0] + 1) = v19;
        *(_QWORD *)&v32[1] = v20;
        re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addNew(v17 + 8, (StringID *)v27, v32);
        re::StringID::destroyString((re::StringID *)v27);
        if (*((_QWORD *)v16 + 7))
        {
          *(_QWORD *)v27 = 0xF98D22D8F2059642;
          *(_QWORD *)&v27[8] = "influenceEndIndices";
          *(_QWORD *)&v32[0] = 4;
          *(__int128 *)((char *)v32 + 8) = *((_OWORD *)v16 + 3);
          re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addNew(v17 + 8, (StringID *)v27, v32);
          re::StringID::destroyString((re::StringID *)v27);
        }
        if (*(_BYTE *)(v17 + 5))
          v21 = 4;
        else
          v21 = 8;
        *(_QWORD *)v27 = 0x9E5069BE2D47B84ELL;
        *(_QWORD *)&v27[8] = "simplifiedSkinningInfluences";
        v23 = *((_QWORD *)v16 + 11);
        v22 = *((_QWORD *)v16 + 12);
        *(_QWORD *)&v32[0] = v21;
        *((_QWORD *)&v32[0] + 1) = v22;
        *(_QWORD *)&v32[1] = v23;
        re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addNew(v17 + 8, (StringID *)v27, v32);
        re::StringID::destroyString((re::StringID *)v27);
        if (*((_QWORD *)v16 + 16))
        {
          *(_QWORD *)v27 = 0xE79E9E6540401152;
          *(_QWORD *)&v27[8] = "simplifiedInfluenceEndIndices";
          *(_QWORD *)&v32[0] = 4;
          *(__int128 *)((char *)v32 + 8) = *(_OWORD *)(v16 + 30);
          re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addNew(v17 + 8, (StringID *)v27, v32);
          re::StringID::destroyString((re::StringID *)v27);
        }
        ++v13;
        v12 += 56;
        if (v5 == v13)
          return 1;
      }
      memset(v32, 0, sizeof(v32));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v27 = 136315906;
      *(_QWORD *)&v27[4] = "operator[]";
      *(_WORD *)&v27[12] = 1024;
      *(_DWORD *)&v27[14] = 468;
      v28 = 2048;
      v29 = v13;
      v30 = 2048;
      v31 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 56, v5);
    _os_crash();
    __break(1u);
LABEL_25:
    re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
  }
  return 1;
}

uint64_t re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addNew(uint64_t a1, StringID *a2, __int128 *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    result = re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return result;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    result = re::StringID::operator==((_QWORD *)(v10 + 48 * v9 + 8), a2);
    if ((result & 1) != 0)
      return result;
    v9 = *(_DWORD *)(v10 + 48 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

uint64_t re::SkinningModelBuilder::packInfluenceData(uint64_t *a1, int a2, id *a3, char *a4, _BYTE *a5, uint64_t *a6, uint64_t a7, int **a8, double a9, uint64_t a10, uint64_t *a11, int **a12, uint64_t *a13)
{
  uint64_t *v15;
  _BYTE *v16;
  char *v17;
  int *v20;
  int v21;
  uint64_t v22;
  int *v23;
  int v24;
  int v25;
  int v26;
  char v27;
  uint64_t v29;
  uint64_t v30;
  float *v31;
  uint64_t v32;
  float v33;
  _BOOL4 v34;
  uint64_t v36;
  id v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  int *v42;
  char v43;
  id v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int *v56;
  _DWORD *v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  float *v64;
  uint64_t v65;
  float v66;
  char v67;
  id v68;
  void *v69;
  uint64_t result;
  char v72;
  _QWORD v75[2];
  id v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;

  v15 = a6;
  v16 = a5;
  v17 = a4;
  v20 = a12[1];
  if (v20)
  {
    v21 = **a12;
    v22 = (uint64_t)v20 - 1;
    if (v22)
    {
      v23 = *a12 + 1;
      v24 = **a12;
      while (1)
      {
        v26 = *v23++;
        v25 = v26;
        if (v21 != v26 - v24)
          break;
        v24 = v25;
        if (!--v22)
          goto LABEL_9;
      }
      v21 = 0;
    }
LABEL_9:
    if (v21 >= 256 || v21 == 0)
      v27 = 0;
    else
      v27 = v21;
  }
  else
  {
    v27 = 0;
  }
  v29 = a11[1];
  if (!v29)
  {
    v41 = 0;
    v42 = 0;
    v83 = 0;
    v84 = 0;
    v85 = 0;
    v81 = 0;
    v82 = 0;
    v43 = 1;
    v79 = 0;
    v80 = 0;
    goto LABEL_77;
  }
  v30 = *a11;
  v31 = (float *)(*a11 + 4);
  v32 = 1;
  LODWORD(a9) = 1.0;
  do
  {
    if (*((_DWORD *)v31 - 1) > 0x3FFu)
    {
      v83 = 0;
      v84 = 0;
      v85 = 0;
      v81 = 0;
      v82 = 0;
      v79 = 0;
      v80 = 0;
      goto LABEL_34;
    }
    v33 = *v31;
    v31 += 2;
    v34 = v33 >= 0.0;
    if (v33 > 1.0)
      v34 = 0;
  }
  while (v34 && v29 != v32++);
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v81 = 0;
  v82 = 0;
  v79 = 0;
  v80 = 0;
  if (!v34)
  {
LABEL_34:
    if (a13[1])
    {
      v72 = v27;
      if (a2)
      {
        v45 = objc_msgSend(*a3, sel_newBufferWithLength_options_, 8 * v29, 0, a9);
        v76 = v45;
        LODWORD(v77) = 0;
        HIDWORD(v77) = objc_msgSend(v45, sel_length);
        NS::SharedPtr<MTL::Texture>::operator=(&v81, &v76);
        v82 = v77;
        if (v76)
        {

          v76 = 0;
        }
        v15 = a6;
        if (v45)

        v46 = (char *)objc_msgSend(v81, sel_contents);
        v48 = &v46[v82];
      }
      else
      {
        re::FixedArray<BOOL>::init<>(&v83, *a1, 8 * v29);
        v48 = v85;
        v15 = a6;
      }
      v16 = a5;
      v17 = a4;
      v52 = 0;
      v53 = a11[1];
      v55 = *a13;
      v54 = a13[1];
      v56 = (int *)(*a11 + 4);
      v57 = v48 + 4;
      do
      {
        if (v53 == v52)
        {
          re::internal::assertLog((re::internal *)6, v47, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v53, v53);
          _os_crash();
          __break(1u);
LABEL_86:
          re::internal::assertLog((re::internal *)6, v47, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v58, v54);
          _os_crash();
          __break(1u);
          goto LABEL_87;
        }
        v58 = *(v56 - 1);
        if (v54 <= v58)
          goto LABEL_86;
        v59 = *v56;
        v56 += 2;
        *(v57 - 1) = *(_DWORD *)(v55 + 4 * v58);
        *v57 = v59;
        v57 += 2;
        ++v52;
      }
      while (v29 != v52);
      v43 = 0;
LABEL_67:
      v27 = v72;
      if (v72)
        goto LABEL_68;
      if (!a2)
        goto LABEL_76;
    }
    else
    {
      v49 = v27;
      v50 = *a1;
      v75[0] = v30;
      v75[1] = 8 * v29;
      v77 = 0;
      v78 = 0;
      v76 = 0;
      re::FixedArray<BOOL>::init<>(&v76, v50, 8 * v29);
      re::FixedArray<unsigned char>::copy(&v76, (uint64_t)v75);
      re::FixedArray<float>::operator=(&v83, (uint64_t *)&v76);
      if (v76 && v77)
        (*(void (**)(void))(*(_QWORD *)v76 + 40))();
      if (!a2)
      {
        v43 = 0;
        v27 = v49;
        if (v49)
        {
          v41 = 0;
          v42 = 0;
          v15 = a6;
          v16 = a5;
          v17 = a4;
        }
        else
        {
          v15 = a6;
          v16 = a5;
          v17 = a4;
LABEL_76:
          v42 = *a12;
          v41 = 4 * (_QWORD)a12[1];
        }
        goto LABEL_77;
      }
      v51 = objc_msgSend(*a3, sel_newBufferWithBytes_length_options_, v30, 8 * v29, 0);
      v76 = v51;
      LODWORD(v77) = 0;
      HIDWORD(v77) = objc_msgSend(v51, sel_length);
      NS::SharedPtr<MTL::Texture>::operator=(&v81, &v76);
      v82 = v77;
      if (v76)
      {

        v76 = 0;
      }
      v15 = a6;
      v17 = a4;
      if (v51)

      v43 = 0;
      v27 = v49;
      v16 = a5;
      if (v49)
      {
LABEL_68:
        v41 = 0;
        v42 = 0;
        goto LABEL_77;
      }
    }
    v67 = v27;
    v68 = objc_msgSend(*a3, sel_newBufferWithBytes_length_options_, *a12, 4 * (_QWORD)a12[1], 0);
    v76 = v68;
    LODWORD(v77) = 0;
    HIDWORD(v77) = objc_msgSend(v68, sel_length);
    NS::SharedPtr<MTL::Texture>::operator=(&v79, &v76);
    v80 = v77;
    if (v76)
    {

      v76 = 0;
    }
    if (v68)

    v41 = 0;
    v42 = 0;
    v27 = v67;
LABEL_77:
    *v17 = v43;
    *v16 = v27;
    re::FixedArray<float>::operator=(v15, &v83);
    NS::SharedPtr<MTL::Texture>::operator=((void **)a7, &v81);
    *(_QWORD *)(a7 + 8) = v82;
    *a8 = v42;
    a8[1] = (int *)v41;
    NS::SharedPtr<MTL::Texture>::operator=((void **)a10, &v79);
    v69 = v79;
    *(_QWORD *)(a10 + 8) = v80;
    if (v69)

    if (v81)
    result = v83;
    if (v83)
    {
      if (v84)
        return (*(uint64_t (**)(void))(*(_QWORD *)v83 + 40))();
    }
    return result;
  }
  v72 = v27;
  v36 = 4 * v29;
  if (a2)
  {
    v37 = objc_msgSend(*a3, sel_newBufferWithLength_options_, v36, 0, a9);
    v76 = v37;
    LODWORD(v77) = 0;
    HIDWORD(v77) = objc_msgSend(v37, sel_length);
    NS::SharedPtr<MTL::Texture>::operator=(&v81, &v76);
    v82 = v77;
    if (v76)
    {

      v76 = 0;
    }
    if (v37)

    v38 = (char *)objc_msgSend(v81, sel_contents);
    v40 = &v38[v82];
  }
  else
  {
    re::FixedArray<BOOL>::init<>(&v83, *a1, v36);
    v40 = v85;
  }
  v60 = 0;
  v61 = a11[1];
  v63 = *a13;
  v62 = a13[1];
  v64 = (float *)(*a11 + 4);
  v17 = a4;
  while (v61 != v60)
  {
    *(float *)&v65 = *(v64 - 1);
    if (v62)
    {
      v65 = (int)v65;
      if (v62 <= (int)v65)
        goto LABEL_88;
      LODWORD(v65) = *(_DWORD *)(v63 + 4 * (int)v65);
    }
    v66 = *v64;
    v64 += 2;
    *(_DWORD *)&v40[4 * v60++] = (float)((float)(v66 * 4194300.0) + 0.5) | ((_DWORD)v65 << 22);
    if (v29 == v60)
    {
      v43 = 1;
      goto LABEL_67;
    }
  }
LABEL_87:
  re::internal::assertLog((re::internal *)6, v39, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v61, v61);
  _os_crash();
  __break(1u);
LABEL_88:
  re::internal::assertLog((re::internal *)6, v39, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v65, v62);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::SkinningModelUtil::inverseBindPoseBufferForPart@<X0>(_QWORD *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)this[10];
  if (!v4 || v4[1] <= a2 || (v5 = *(unsigned int *)(v4[2] + 72 * a2 + 4), (_DWORD)v5 == -1) || v4[4] <= v5)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v6 = v4[5] + 16 * v5;
    this = *(id *)v6;
    v7 = *(_QWORD *)(v6 + 8);
    *a3 = this;
    a3[1] = v7;
  }
  return this;
}

_QWORD *re::SkinningModelUtil::skinnedEndIndicesBuffer@<X0>(_QWORD *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = this[10];
  if (v4 && *(_QWORD *)(v4 + 8) > a2)
  {
    v5 = *(_QWORD *)(v4 + 16) + 72 * a2;
    this = *(id *)(v5 + 8);
    v6 = *(_QWORD *)(v5 + 16);
    *a3 = this;
    a3[1] = v6;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return this;
}

uint64_t re::SkinningModelUtil::skinnedInfluenceDataBuffer(uint64_t a1, unint64_t a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 80);
  if (!v4 || *(_QWORD *)(v4 + 8) <= a2)
    return 0;
  v6 = *(_QWORD *)(v4 + 16) + 72 * a2;
  *a3 = *(_BYTE *)v6;
  NS::SharedPtr<MTL::Texture>::operator=((void **)a4, (void **)(v6 + 24));
  *(_QWORD *)(a4 + 8) = *(_QWORD *)(v6 + 32);
  return 1;
}

void **re::SkinningDeformer::init(void **this, re::RenderManager *a2)
{
  re::SkinningDeformer *v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  _BYTE v10[12];
  unsigned int v11;
  _BYTE v12[12];
  unsigned int v13;
  _BYTE v14[12];
  unsigned int v15;
  _BYTE v16[12];
  re::VertexFormatInfo *v17;

  if (!*((_BYTE *)this + 16))
  {
    v2 = (re::SkinningDeformer *)this;
    v3 = 0;
    v4 = 1;
    *((_BYTE *)this + 16) = 1;
    do
    {
      v5 = 0;
      v6 = v4;
      v7 = 1;
      do
      {
        v8 = v7;
        LODWORD(v17) = 0;
        re::VertexFormatInfo::setVertexFormat((uint64_t)v16, (const VertexBufferFormat *)0xC, 0x1Eu);
        v9 = v5 & 1;
        re::SkinningDeformer::getPerformSkinningPipeline(v2, 0, (const re::VertexFormatInfo *)v17, 0, 0, 0, v3 & 1, v9, 0);
        LODWORD(v17) = 0;
        re::VertexFormatInfo::setVertexFormat((uint64_t)v16, (const VertexBufferFormat *)0xC, 0x1Eu);
        v15 = 0;
        re::VertexFormatInfo::setVertexFormat((uint64_t)v14, (const VertexBufferFormat *)0xC, 0x1Eu);
        v5 = 1;
        re::SkinningDeformer::getPerformSkinningPipeline(v2, 1, (const re::VertexFormatInfo *)v17, (const re::VertexFormatInfo *)v15, 0, 0, v3 & 1, v9, 0);
        LODWORD(v17) = 0;
        re::VertexFormatInfo::setVertexFormat((uint64_t)v16, (const VertexBufferFormat *)0xC, 0x1Eu);
        v15 = 0;
        re::VertexFormatInfo::setVertexFormat((uint64_t)v14, (const VertexBufferFormat *)0xC, 0x1Eu);
        v13 = 0;
        re::VertexFormatInfo::setVertexFormat((uint64_t)v12, (const VertexBufferFormat *)0xC, 0x1Eu);
        re::SkinningDeformer::getPerformSkinningPipeline(v2, 2, (const re::VertexFormatInfo *)v17, (const re::VertexFormatInfo *)v15, (const re::VertexFormatInfo *)v13, 0, v3 & 1, v9, 0);
        LODWORD(v17) = 0;
        re::VertexFormatInfo::setVertexFormat((uint64_t)v16, (const VertexBufferFormat *)0xC, 0x1Eu);
        v15 = 0;
        re::VertexFormatInfo::setVertexFormat((uint64_t)v14, (const VertexBufferFormat *)0xC, 0x1Eu);
        v13 = 0;
        re::VertexFormatInfo::setVertexFormat((uint64_t)v12, (const VertexBufferFormat *)0xC, 0x1Eu);
        v11 = 0;
        re::VertexFormatInfo::setVertexFormat((uint64_t)v10, (const VertexBufferFormat *)0xC, 0x1Eu);
        this = re::SkinningDeformer::getPerformSkinningPipeline(v2, 3, (const re::VertexFormatInfo *)v17, (const re::VertexFormatInfo *)v15, (const re::VertexFormatInfo *)v13, (const re::VertexFormatInfo *)v11, v3 & 1, v9, 0);
        v7 = 0;
      }
      while ((v8 & 1) != 0);
      v4 = 0;
      v3 = 1;
    }
    while ((v6 & 1) != 0);
  }
  return this;
}

void **re::SkinningDeformer::getPerformSkinningPipeline(re::SkinningDeformer *this, uint64_t a2, const re::VertexFormatInfo *a3, const re::VertexFormatInfo *a4, const re::VertexFormatInfo *a5, const re::VertexFormatInfo *a6, uint64_t a7, uint64_t a8, BOOL a9)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void **v12;
  uint64_t v13;
  _anonymous_namespace_ *v19;
  _anonymous_namespace_ *v20;
  _anonymous_namespace_ *v21;
  _anonymous_namespace_ *v22;
  _anonymous_namespace_ *v23;
  _anonymous_namespace_ *v24;
  _anonymous_namespace_ *v25;
  _anonymous_namespace_ *v26;
  re *v27;
  NSObject *v28;
  const char *v29;
  re *v30;
  void **ComputePipelineState;
  unint64_t v32;
  unint64_t v33;
  _OWORD v34[2];
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[2];
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[2];
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD v49[2];
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[8];
  uint64_t v55;
  char v56;
  _QWORD v57[4];
  _QWORD v58[3];
  int v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  char v64;
  uint8_t buf[8];
  __int16 v66;
  int v67;
  __int16 v68;
  _QWORD v69[6];

  v69[3] = *MEMORY[0x24BDAC8D0];
  v9 = a3 | (4 * (_DWORD)a4) | (16 * (_DWORD)a5) | ((_DWORD)a6 << 6);
  v10 = a2;
  v11 = (char *)this
      + 0x2000 * (unint64_t)a2
      + 32 * v9
      + 16 * a7
      + 8 * a8;
  v13 = *((_QWORD *)v11 + 3);
  v12 = (void **)(v11 + 24);
  if (!v13)
  {
    v32 = a7;
    v33 = a8;
    v54[0] = 0;
    v60 = 0;
    memset(v58, 0, sizeof(v58));
    v59 = 0;
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = 1;
    memset(v49, 0, sizeof(v49));
    v20 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v49, 0);
    v51 = 0;
    v52 = 0;
    v53 = 0;
    re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v49, v10);
    v50 = 33;
    v21 = (_anonymous_namespace_ *)re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v58, (re::DynamicString *)v49);
    memset(v44, 0, sizeof(v44));
    v22 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v44, 0);
    v46 = 0;
    v47 = 0;
    v48 = 0;
    re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v44, v9);
    v45 = 65569;
    v23 = (_anonymous_namespace_ *)re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v58, (re::DynamicString *)v44);
    memset(v39, 0, sizeof(v39));
    v24 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v39, 0);
    v41 = 0;
    v42 = 0;
    v43 = 0;
    re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v39, v32);
    v40 = 131125;
    v25 = (_anonymous_namespace_ *)re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v58, (re::DynamicString *)v39);
    memset(v34, 0, sizeof(v34));
    v26 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v34, 0);
    v36 = 0;
    v37 = 0;
    v38 = 0;
    re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v34, v33);
    v35 = 196661;
    v27 = (re *)re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v58, (re::DynamicString *)v34);
    if (a9)
    {
      v28 = *re::graphicsLogObjects(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109888;
        *(_DWORD *)&buf[4] = a2;
        v66 = 1024;
        v67 = v9;
        v68 = 1024;
        LODWORD(v69[0]) = a7;
        WORD2(v69[0]) = 1024;
        *(_DWORD *)((char *)v69 + 6) = a8;
        _os_log_impl(&dword_224FE9000, v28, OS_LOG_TYPE_DEFAULT, "Compiling performSkinning vfbc=%d ci=%d di=%d pi=%d", buf, 0x1Au);
      }
      re::DynamicString::format((re::DynamicString *)"vfbc=%d ci=%d di=%d pi=%d", (re::DynamicString *)buf, a2, v9, a7, a8);
      if ((v66 & 1) != 0)
        v30 = (re *)v69[0];
      else
        v30 = (re *)((char *)&v66 + 1);
      re::REAnalyticsEventShaderPermutationsForPerformSkinning(v30, v29);
      if (*(_QWORD *)buf && (v66 & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)buf + 40))();
    }
    ComputePipelineState = (void **)re::getOrCreateComputePipelineState(*((_QWORD *)this + 1), (uint64_t)v54);
    NS::SharedPtr<MTL::Texture>::operator=(v12, ComputePipelineState);
    if (v36)
    {
      if (v37)
      {
        (*(void (**)(void))(*(_QWORD *)v36 + 40))();
        v37 = 0;
        v38 = 0;
      }
      v36 = 0;
    }
    if (*(_QWORD *)&v34[0] && (BYTE8(v34[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v34[0] + 40))();
    if (v41)
    {
      if (v42)
      {
        (*(void (**)(void))(*(_QWORD *)v41 + 40))();
        v42 = 0;
        v43 = 0;
      }
      v41 = 0;
    }
    if (*(_QWORD *)&v39[0] && (BYTE8(v39[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v39[0] + 40))();
    if (v46)
    {
      if (v47)
      {
        (*(void (**)(void))(*(_QWORD *)v46 + 40))();
        v47 = 0;
        v48 = 0;
      }
      v46 = 0;
    }
    if (*(_QWORD *)&v44[0] && (BYTE8(v44[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v44[0] + 40))();
    if (v51)
    {
      if (v52)
      {
        (*(void (**)(void))(*(_QWORD *)v51 + 40))();
        v52 = 0;
        v53 = 0;
      }
      v51 = 0;
    }
    if (*(_QWORD *)&v49[0] && (BYTE8(v49[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v49[0] + 40))();
    re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v58);
    if (v57[0])
    {
      if ((v57[1] & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v57[0] + 40))();
      memset(v57, 0, sizeof(v57));
    }
    if (v54[0] && v55 && (v56 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v55 + 40))();
  }
  return v12;
}

uint64_t re::SkinningDeformer::addDeformationInstance@<X0>(uint64_t this@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v4;

  if (a2[1])
    v3 = 524318;
  else
    v3 = 524290;
  v4 = *(_BYTE *)(*(_QWORD *)(this + 8) + 256) ^ 1 | *a2;
  *(_QWORD *)a3 = 0xFFFFFFFFLL;
  *(_QWORD *)(a3 + 8) = v3;
  *(_QWORD *)(a3 + 16) = v3;
  *(_BYTE *)(a3 + 24) = v4 ^ 1;
  *(_QWORD *)(a3 + 32) = -1;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  return this;
}

uint64_t re::SkinningDeformer::allocateBuffers(re::SkinningDeformer *a1, unint64_t a2, unsigned int a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  _DWORD *v36;
  int v37;
  _OWORD *v38;
  uint64_t v39;
  _OWORD *v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  re::DeformerFeatureFlags *v48;
  _OWORD *v49;
  unint64_t v50;
  re *isSkinningAssignLoggingEnabled;
  NSObject *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned __int8 v60;
  uint64_t *v61;
  __int128 *v62;
  __int128 *v63;
  uint64_t *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  void **PerformSkinningPipeline;
  uint64_t v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  unsigned __int8 *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v97;
  unsigned int v98;
  re::FrameContext *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  _BOOL4 v110;
  unint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t *v116;
  int v117;
  __int16 v118;
  int v119;
  unsigned __int8 v120;
  int v121;
  __int16 v122;
  int v123;
  unsigned __int8 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  __int16 v135;
  _DWORD v136[3];
  __int16 v137;
  _DWORD v138[3];
  __int16 v139;
  _DWORD v140[3];
  __int16 v141;
  _DWORD v142[3];
  __int16 v143;
  unsigned int v144;
  _OWORD v145[5];
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  _BYTE v157[40];
  __int128 *v158;
  _DWORD *v159;
  uint64_t v160;
  __int128 *v161;
  _BYTE v162[68];
  uint64_t v163;

  v4 = (unint64_t)a4;
  v5 = a2;
  v163 = *MEMORY[0x24BDAC8D0];
  v6 = *a4;
  v107 = *(_QWORD *)(*a4 + 48);
  if (a3 == 1)
  {
    v7 = *(_QWORD *)(a2 + 24);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, 56, 8);
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    *(_DWORD *)(v8 + 16) = 1;
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    *(_DWORD *)(v8 + 48) = 0;
    v81 = v8;
  }
  else
  {
    v81 = 0;
  }
  if (v107)
  {
    v9 = 0;
    v105 = v6 + 8;
    v115 = (_QWORD *)v4;
    v99 = (re::FrameContext *)v5;
    do
    {
      v10 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v105, v9);
      v11 = *(_QWORD *)(v10 + 8);
      v12 = (_QWORD *)re::BucketArray<re::ActiveDeformation,8ul>::operator[](*(_QWORD *)(v4 + 8), v11);
      v14 = *(unsigned __int8 *)(v10 + 16);
      v15 = v12[42];
      if (v15 <= v14)
      {
        re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *(unsigned __int8 *)(v10 + 16), v15);
        _os_crash();
        __break(1u);
LABEL_63:
        re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v17);
        _os_crash();
        __break(1u);
LABEL_64:
        *(_QWORD *)v162 = 0;
        memset(v145, 0, sizeof(v145));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v157 = 136315906;
        *(_QWORD *)&v157[4] = "operator[]";
        *(_WORD *)&v157[12] = 1024;
        *(_DWORD *)&v157[14] = 476;
        *(_WORD *)&v157[18] = 2048;
        *(_QWORD *)&v157[20] = v104;
        *(_WORD *)&v157[28] = 2048;
        *(_QWORD *)&v157[30] = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_65:
        *(_QWORD *)v162 = 0;
        memset(v145, 0, sizeof(v145));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v157 = 136315906;
        *(_QWORD *)&v157[4] = "operator[]";
        *(_WORD *)&v157[12] = 1024;
        *(_DWORD *)&v157[14] = 476;
        *(_WORD *)&v157[18] = 2048;
        *(_QWORD *)&v157[20] = v5;
        *(_WORD *)&v157[28] = 2048;
        *(_QWORD *)&v157[30] = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_66:
        *(_QWORD *)v162 = 0;
        memset(v145, 0, sizeof(v145));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v157 = 136315906;
        *(_QWORD *)&v157[4] = "operator[]";
        *(_WORD *)&v157[12] = 1024;
        *(_DWORD *)&v157[14] = 476;
        *(_WORD *)&v157[18] = 2048;
        *(_QWORD *)&v157[20] = v4;
        *(_WORD *)&v157[28] = 2048;
        *(_QWORD *)&v157[30] = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_67:
        re::internal::assertLog((re::internal *)5, v57, "assertion failure: '%s' (%s:line %i) Unexpected vertex buffer index: %zu", "!\"Unreachable code\"", "allocateBuffers", 904, v5);
        _os_crash();
        __break(1u);
LABEL_68:
        re::internal::assertLog((re::internal *)5, v25, "assertion failure: '%s' (%s:line %i) Unsupported execution mode: %u.", "!\"Unreachable code\"", "allocateBuffers", 985, v30);
        _os_crash();
        __break(1u);
      }
      v16 = v12;
      v111 = v9;
      if (*(_QWORD *)(v12[44] + 40))
      {
        v17 = *(_QWORD *)(v4 + 48);
        if (v17 <= v11)
          goto LABEL_63;
        v101 = *(uint64_t **)(v12[44] + 40);
        v5 = v12[41];
        v18 = *(_QWORD *)(v4 + 40);
        v19 = v12[46];
        v20 = re::DataArray<re::MeshModel>::get(*(_QWORD *)(*((_QWORD *)a1 + 1) + 32) + 8, *(_QWORD *)(v19 + 16));
        v4 = *(_QWORD *)(v20 + 56);
        v104 = *((unsigned __int16 *)v16 + 196);
        if (v4 <= v104)
          goto LABEL_64;
        v90 = v20;
        v91 = v19;
        v21 = v18 + 312 * v11;
        v103 = *(_QWORD *)(v20 + 64);
        v22 = *(_QWORD *)v21;
        v113 = *(_QWORD *)(v5 + (v14 << 6) + 16);
        LOBYTE(v145[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v21, 1u);
        v23 = (_QWORD *)(v21 + 56);
        v24 = *(_DWORD *)(*(_QWORD *)(v21 + 64)
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(v21 + 56), (unsigned __int8 *)v145)+ 20);
        LOBYTE(v145[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v21, 1u);
        v4 = v21 + 120;
        v26 = *(unsigned __int16 *)(*(_QWORD *)(v21 + 128)
                                  + 20
                                  * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(v21 + 120), (unsigned __int8 *)v145)+ 4);
        v116 = (uint64_t *)(v21 + 64);
        v109 = v26;
        if ((*(_BYTE *)(v21 + 2) & 8) != 0)
        {
          LOBYTE(v145[0]) = 19;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized(v21, 0x13u);
          v27 = (_QWORD *)(v21 + 56);
          v28 = *(unsigned int *)(*(_QWORD *)(v21 + 64)
                                + 32
                                * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v23, (unsigned __int8 *)v145)+ 20);
          LOBYTE(v145[0]) = 19;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized(v21, 0x13u);
          v29 = *(unsigned __int16 *)(*(_QWORD *)(v21 + 128)
                                    + 20
                                    * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)v4, (unsigned __int8 *)v145)+ 4);
          if (v28 >= v29)
          {
            LOBYTE(v145[0]) = 21;
            v100 = v28 / v29;
            re::DeformationVertexBufferState::ensureVertexBufferInitialized(v21, 0x15u);
            v23 = (_QWORD *)(v21 + 56);
            if (*(_DWORD *)(*v116
                           + 32
                           * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v27, (unsigned __int8 *)v145)+ 20))
            {
              LOBYTE(v145[0]) = 22;
              re::DeformationVertexBufferState::ensureVertexBufferInitialized(v21, 0x16u);
              v110 = *(_DWORD *)(*v116
                               + 32
                               * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v27, (unsigned __int8 *)v145)+ 20) != 0;
            }
            else
            {
              v110 = 0;
            }
          }
          else
          {
            v100 = 0;
            v110 = 0;
            v23 = (_QWORD *)(v21 + 56);
          }
          v26 = v109;
        }
        else
        {
          v100 = 0;
          v110 = 0;
        }
        v108 = v24 / v26;
        v30 = a3;
        if (a3)
        {
          v114 = v113 & v22;
          if (a3 != 1)
            goto LABEL_68;
          v31 = *(_QWORD **)(v16[43] + 80);
          v5 = *((unsigned __int16 *)v16 + 196);
          v14 = v31[1];
          if (v14 <= v5)
            goto LABEL_65;
          v97 = v24;
          v32 = v31[2];
          v33 = v32 + 72 * *((unsigned __int16 *)v16 + 196);
          v4 = *(unsigned int *)(v33 + 4);
          v14 = v31[4];
          if (v14 <= v4)
            goto LABEL_66;
          v112 = v23;
          v94 = v31[5];
          v95 = *(unsigned int *)(v33 + 4);
          v34 = (unsigned __int8 *)(v32 + 72 * *((unsigned __int16 *)v16 + 196));
          v35 = *((unsigned __int16 *)v16 + 196);
          v5 = v34[2];
          v88 = v34 + 2;
          v89 = v34;
          v93 = (uint64_t *)(v94 + 16 * v4);
          v36 = (_DWORD *)v93 + 3;
          v37 = *((_DWORD *)v93 + 3) >> 6;
          v38 = (_OWORD *)(v103 + 560 * v104);
          *(_OWORD *)&v162[4] = v38[23];
          *(_OWORD *)&v162[20] = v38[24];
          *(_OWORD *)&v162[36] = v38[25];
          *(_OWORD *)&v162[52] = v38[26];
          re::FrameContext::perFrameAlloc(v99, 0x50uLL, 0x10uLL, (uint64_t)v145);
          v82 = HIDWORD(v145[0]);
          v83 = DWORD2(v145[0]);
          v84 = *(_QWORD *)&v145[1];
          v39 = *(_QWORD *)&v145[0] + DWORD2(v145[0]);
          *(_BYTE *)v39 = v5;
          *(_DWORD *)(v39 + 4) = v37;
          *(_DWORD *)(v39 + 8) = v108;
          *(_OWORD *)(v39 + 28) = *(_OWORD *)&v162[16];
          *(_OWORD *)(v39 + 44) = *(_OWORD *)&v162[32];
          *(_OWORD *)(v39 + 60) = *(_OWORD *)&v162[48];
          *(_DWORD *)(v39 + 76) = *(_DWORD *)&v162[64];
          *(_OWORD *)(v39 + 12) = *(_OWORD *)v162;
          v98 = v35;
          if (v110)
          {
            v40 = v38 + 23;
            v41 = *(_BYTE *)(v32 + 72 * v35 + 3);
            v5 = *v36 >> 6;
            *(_OWORD *)((char *)v145 + 4) = *v40;
            *(_OWORD *)((char *)&v145[1] + 4) = v40[1];
            *(_OWORD *)((char *)&v145[2] + 4) = v40[2];
            *(_OWORD *)((char *)&v145[3] + 4) = v40[3];
            re::FrameContext::perFrameAlloc(v99, 0x50uLL, 0x10uLL, (uint64_t)v157);
            v85 = *(unsigned int *)&v157[12];
            v86 = *(_QWORD *)&v157[16];
            v87 = *(unsigned int *)&v157[8];
            v42 = *(_QWORD *)v157 + *(unsigned int *)&v157[8];
            *(_BYTE *)v42 = v41;
            *(_DWORD *)(v42 + 4) = v5;
            *(_DWORD *)(v42 + 8) = v100;
            *(_OWORD *)(v42 + 28) = v145[1];
            *(_OWORD *)(v42 + 44) = v145[2];
            *(_OWORD *)(v42 + 60) = v145[3];
            *(_DWORD *)(v42 + 76) = v145[4];
            *(_OWORD *)(v42 + 12) = v145[0];
          }
          else
          {
            v85 = 0;
            v86 = 0;
            v87 = 0;
          }
          v45 = (_QWORD *)(v21 + 128);
          v46 = *v36;
          if (*((_DWORD *)v101 + 3) == (_DWORD)v46)
          {
            v47 = *((unsigned int *)v101 + 2);
            v102 = *v101;
            v92 = v47 | (v46 << 32);
          }
          else
          {
            v5 = (unint64_t)v99;
            re::FrameContext::perFrameAlloc(v99, v46, 0x10uLL, (uint64_t)v157);
            if (*(_DWORD *)&v157[12] >= 0x40u)
            {
              v49 = (_OWORD *)(*(_QWORD *)v157 + *(unsigned int *)&v157[8]);
              v50 = ((unint64_t)*(unsigned int *)&v157[12] >> 6) + 1;
              do
              {
                *v49 = xmmword_2260E5F10;
                v49[1] = xmmword_2260E5F20;
                v49[2] = xmmword_2260E5F40;
                v49[3] = xmmword_2260E5D70;
                --v50;
                v49 += 4;
              }
              while (v50 > 1);
            }
            v102 = *(_QWORD *)&v157[16];
            v92 = *(_QWORD *)&v157[8];
            isSkinningAssignLoggingEnabled = (re *)re::DeformerFeatureFlags::isSkinningAssignLoggingEnabled(v48);
            if ((_DWORD)isSkinningAssignLoggingEnabled)
            {
              v52 = *re::graphicsLogObjects(isSkinningAssignLoggingEnabled);
              if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
              {
                v76 = *((_QWORD *)v99 + 4) & 0xFFFFFFFFFFFFFFFLL;
                v77 = *(_QWORD *)(v91 + 8);
                v78 = *(_QWORD *)(v90 + 8);
                v79 = *(_QWORD *)(v103 + 560 * v104 + 512);
                LODWORD(v145[0]) = 134218754;
                *(_QWORD *)((char *)v145 + 4) = v76;
                WORD6(v145[0]) = 2080;
                *(_QWORD *)((char *)v145 + 14) = v77;
                WORD3(v145[1]) = 2080;
                *((_QWORD *)&v145[1] + 1) = v78;
                LOWORD(v145[2]) = 2080;
                *(_QWORD *)((char *)&v145[2] + 2) = v79;
                _os_log_error_impl(&dword_224FE9000, v52, OS_LOG_TYPE_ERROR, "[DeformerLogging] Frame[%llu]: Mesh Instance[%s] Model[%s] Part[%s] missing pose data.", (uint8_t *)v145, 0x2Au);
              }
            }
          }
          v143 = 0;
          v144 = 0;
          v141 = 0;
          memset(v142, 0, sizeof(v142));
          v139 = 0;
          memset(v140, 0, sizeof(v140));
          v137 = 0;
          memset(v138, 0, sizeof(v138));
          v134 = 0;
          v135 = 0;
          memset(v136, 0, sizeof(v136));
          v133 = 0uLL;
          v132 = 0uLL;
          v131 = 0uLL;
          v130 = 0uLL;
          v129 = 0uLL;
          v128 = 0uLL;
          v127 = 0uLL;
          v126 = 0uLL;
          v125 = 0uLL;
          *(_QWORD *)v157 = &v140[1];
          *(_QWORD *)&v157[8] = &v131;
          *(_QWORD *)&v157[16] = &v130;
          *(_QWORD *)&v157[24] = &v138[1];
          *(_QWORD *)&v157[32] = &v129;
          v158 = &v128;
          v159 = &v136[1];
          v160 = 0;
          v161 = &v127;
          v53 = v112;
          if (v114)
          {
            v54 = 0;
            v5 = __clz(__rbit64(v114));
            while (1)
            {
              LOBYTE(v145[0]) = v5;
              re::DeformationVertexBufferState::ensureVertexBufferInitialized(v21, v5);
              v55 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v53, (unsigned __int8 *)v145);
              v56 = *v116;
              LOBYTE(v145[0]) = v5;
              re::DeformationVertexBufferState::ensureVertexBufferInitialized(v21, v5);
              v58 = *v45
                  + 20
                  * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(v21 + 120), (unsigned __int8 *)v145);
              v59 = *(_DWORD *)(v58 + 4);
              v122 = *(_WORD *)(v58 + 8);
              v121 = v59;
              v123 = *(_DWORD *)(v58 + 12);
              v60 = *(_BYTE *)(v58 + 16);
              v124 = v60;
              if (v5 - 2 >= 3)
              {
                if (v5 == 1)
                {
                  v63 = &v132;
                  v62 = &v133;
                  v64 = (uint64_t *)&v142[1];
                }
                else
                {
                  if (v5 != 19)
                    goto LABEL_67;
                  v63 = &v125;
                  v62 = &v126;
                  v64 = &v134;
                }
                re::VertexFormatInfo::setVertexFormat((uint64_t)v64, (const VertexBufferFormat *)(unsigned __int16)v121, v60);
              }
              else
              {
                v61 = (uint64_t *)&v157[24 * v54];
                v62 = (__int128 *)v61[1];
                v63 = (__int128 *)v61[2];
                re::VertexFormatInfo::setVertexFormat(*v61, (const VertexBufferFormat *)(unsigned __int16)v121, v60);
                v54 = (v54 + 1);
                if (!v62)
                  goto LABEL_49;
              }
              v65 = *(_QWORD *)(v56 + 32 * v55 + 16);
              *(_QWORD *)v62 = *(_QWORD *)(v56 + 32 * v55 + 24);
              *((_QWORD *)v62 + 1) = v65;
LABEL_49:
              v66 = (_QWORD *)v16[45];
              v67 = v115[2];
              v117 = v121;
              v118 = v122;
              v119 = v123;
              v120 = v124;
              v68 = re::DeformationBufferAllocator::alloc(v66, v67, v5, (uint64_t)&v117, *(unsigned __int8 *)(v10 + 16), *(unsigned int *)(v56 + 32 * v55 + 20));
              v69 = re::DeformationBufferAllocator::allocationData((re::DeformationBufferAllocator *)v16[45], *(unsigned __int8 *)(v10 + 16), v68);
              v70 = objc_msgSend(*(id *)(v69 + 24), sel_contents);
              v71 = *(_QWORD *)(v69 + 24);
              *(_QWORD *)&v145[0] = v70;
              *((_QWORD *)&v145[0] + 1) = *(_QWORD *)(v69 + 32);
              *(_QWORD *)&v145[1] = v71;
              re::DeformationVertexBufferState::setOutputBuffer(v21, v5, 1, (uint64_t)v145, (uint64_t)&v121);
              *(_QWORD *)v63 = *(_QWORD *)(v69 + 24);
              *((_QWORD *)v63 + 1) = *(_QWORD *)(v69 + 32);
              if (v5 == 63 || (v114 & (-2 << v5)) == 0)
                goto LABEL_53;
              v5 = __clz(__rbit64(v114 & (-2 << v5)));
              v53 = v112;
              v45 = (_QWORD *)(v21 + 128);
            }
          }
          v54 = 0;
LABEL_53:
          if (v97 >= v109)
          {
            PerformSkinningPipeline = re::SkinningDeformer::getPerformSkinningPipeline(a1, v54, (const re::VertexFormatInfo *)v144, (const re::VertexFormatInfo *)v142[0], (const re::VertexFormatInfo *)v140[0], (const re::VertexFormatInfo *)v138[0], *v88 == 0, *v89, 1);
            if (*PerformSkinningPipeline)
            {
              *(_QWORD *)&v145[0] = PerformSkinningPipeline;
              *((_QWORD *)&v145[0] + 1) = v108;
              v73 = v32 + 72 * v98;
              v145[1] = *(_OWORD *)(v73 + 24);
              v145[2] = *(_OWORD *)(v73 + 8);
              v145[3] = v133;
              v145[4] = v132;
              v146 = *v93;
              v147 = *(_QWORD *)(v94 + 16 * v95 + 8);
              v148 = v102;
              v149 = v92;
              v150 = v84;
              v151 = v83 | (v82 << 32);
              v152 = v131;
              v153 = v130;
              v154 = v129;
              v155 = v128;
              v156 = v127;
            }
          }
          if (v110)
          {
            v74 = re::SkinningDeformer::getPerformSkinningPipeline(a1, 0, (const re::VertexFormatInfo *)v136[0], 0, 0, 0, *(_BYTE *)(v32 + 72 * v98 + 3) == 0, *(unsigned __int8 *)(v32 + 72 * v98 + 1), 1);
            if (*v74)
            {
              *(_QWORD *)&v145[0] = v74;
              *((_QWORD *)&v145[0] + 1) = v100;
              v75 = v32 + 72 * v98;
              v145[1] = *(_OWORD *)(v75 + 56);
              v145[2] = *(_OWORD *)(v75 + 40);
              v145[3] = v126;
              v145[4] = v125;
              v146 = *v93;
              v147 = *(_QWORD *)(v94 + 16 * v95 + 8);
              v148 = v102;
              v149 = v92;
              v150 = v86;
              v151 = v87 | (v85 << 32);
              v155 = 0u;
              v156 = 0u;
              v153 = 0u;
              v154 = 0u;
              v152 = 0u;
            }
          }
          v4 = (unint64_t)v115;
        }
        else
        {
          v4 = (unint64_t)v115;
          v5 = (unint64_t)v99;
          if ((v113 & v22) != 0)
          {
            v43 = v113 & v22;
            do
            {
              v44 = __clz(__rbit64(v43));
              re::FrameContext::perFrameAlloc(v99, 4 * (v108 + 2 * v108), 0x10uLL, (uint64_t)v145);
              *(_WORD *)&v157[4] = 257;
              *(_DWORD *)v157 = 65548;
              v157[12] = 30;
              *(_DWORD *)&v157[8] = 0;
              re::DeformationVertexBufferState::setOutputBuffer(v21, v44, 0, (uint64_t)v145, (uint64_t)v157);
              if (v44 == 63)
                break;
              v43 = v113 & v22 & (-2 << v44);
            }
            while (v43);
          }
        }
      }
      v9 = v111 + 1;
    }
    while (v111 + 1 != v107);
  }
  return v81;
}

uint64_t re::VertexFormatInfo::setVertexFormat(uint64_t this, const VertexBufferFormat *a2, unsigned __int8 a3)
{
  int v3;
  void *v4;

  *(_WORD *)(this + 8) = (_WORD)a2;
  if (a3 > 0x19u)
  {
    if (a3 == 26)
    {
      v3 = 1;
      v4 = re::unpackHalf3Data;
      goto LABEL_10;
    }
    if (a3 == 30)
    {
      v3 = 0;
      v4 = re::unpackFloat3Data;
      goto LABEL_10;
    }
  }
  else
  {
    if (a3 == 8)
    {
      v3 = 2;
      v4 = re::unpackUChar3NormalizedData;
      goto LABEL_10;
    }
    if (a3 == 11)
    {
      v3 = 3;
      v4 = re::unpackChar3NormalizedData;
LABEL_10:
      *(_QWORD *)this = v4;
      *(_DWORD *)(this + 12) = v3;
      return this;
    }
  }
  re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Unsupported format", "!\"Unreachable code\"", "setVertexFormat", 146);
  this = _os_crash();
  __break(1u);
  return this;
}

__n128 re::BucketArray<re::`anonymous namespace'::GpuAllocationData::SkinTask,8ul>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 result;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 8);
  if (v4 + 1 > 8 * v5)
  {
    v5 = *(_QWORD *)(a1 + 8);
  }
  if (v5 <= v4 >> 3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v6 = a1 + 24;
  else
    v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(v6 + 8 * (v4 >> 3));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  v8 = (_OWORD *)(v7 + 208 * (v4 & 7));
  v9 = *(_OWORD *)(a2 + 64);
  v11 = *(_OWORD *)(a2 + 16);
  v10 = *(_OWORD *)(a2 + 32);
  v8[3] = *(_OWORD *)(a2 + 48);
  v8[4] = v9;
  v8[1] = v11;
  v8[2] = v10;
  v12 = *(_OWORD *)(a2 + 128);
  v14 = *(_OWORD *)(a2 + 80);
  v13 = *(_OWORD *)(a2 + 96);
  v8[7] = *(_OWORD *)(a2 + 112);
  v8[8] = v12;
  v8[5] = v14;
  v8[6] = v13;
  v15 = *(_OWORD *)(a2 + 192);
  v17 = *(_OWORD *)(a2 + 144);
  v16 = *(_OWORD *)(a2 + 160);
  v8[11] = *(_OWORD *)(a2 + 176);
  v8[12] = v15;
  v8[9] = v17;
  v8[10] = v16;
  result = *(__n128 *)a2;
  *v8 = *(_OWORD *)a2;
  return result;
}

uint64_t re::SkinningDeformer::deformGPU(int a1, uint64_t a2, void **this)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id **v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  int64x2_t v21;
  _BYTE v22[28];
  __int16 v23;
  unint64_t v24;
  _OWORD v25[5];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  re::mtl::ComputeCommandEncoder::pushDebugGroup(this, (re::ns *)"Linear Blend Skinning");
  v8 = *(_QWORD *)(a2 + 40);
  if (v8)
  {
    v9 = 0;
    v21 = vdupq_n_s64(1uLL);
    do
    {
      v10 = *(_QWORD *)(a2 + 40);
      if (v10 <= v9)
      {
        re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, v9, v10);
        _os_crash();
        __break(1u);
LABEL_20:
        memset(v25, 0, sizeof(v25));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v22 = 136315906;
        *(_QWORD *)&v22[4] = "operator[]";
        *(_WORD *)&v22[12] = 1024;
        *(_DWORD *)&v22[14] = 866;
        *(_WORD *)&v22[18] = 2048;
        *(_QWORD *)&v22[20] = v3;
        v23 = 2048;
        v24 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v3 = v9 >> 3;
      v4 = *(_QWORD *)(a2 + 8);
      if (v4 <= v9 >> 3)
        goto LABEL_20;
      v11 = a2 + 24;
      if ((*(_BYTE *)(a2 + 16) & 1) == 0)
        v11 = *(_QWORD *)(a2 + 32);
      v3 = *(_QWORD *)(v11 + 8 * v3);
      v4 = v9 & 7;
      v12 = (id **)(v3 + 208 * v4);
      objc_msgSend(*this, "setComputePipelineState:", **v12);
      if (*((_DWORD *)v12 + 19))
      {
        v13 = v3 + 208 * v4;
        objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v13 + 48), *(unsigned int *)(v13 + 56), 0);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v13 + 64), *(unsigned int *)(v13 + 72), 1);
      }
      v14 = v3 + 208 * v4;
      objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v14 + 80), *(unsigned int *)(v14 + 88), 2);
      objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v14 + 96), *(unsigned int *)(v14 + 104), 3);
      objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v14 + 112), *(unsigned int *)(v14 + 120), 4);
      objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v14 + 16), *(unsigned int *)(v14 + 24), 5);
      if (*(_DWORD *)(v14 + 44))
        objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v3 + 208 * v4 + 32), *(unsigned int *)(v3 + 208 * v4 + 40), 6);
      if (*(_DWORD *)(v3 + 208 * v4 + 156))
      {
        v15 = v3 + 208 * v4;
        objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v15 + 128), *(unsigned int *)(v15 + 136), 7);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v15 + 144), *(unsigned int *)(v15 + 152), 8);
      }
      if (*(_DWORD *)(v3 + 208 * v4 + 188))
      {
        v16 = v3 + 208 * v4;
        objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v16 + 160), *(unsigned int *)(v16 + 168), 9);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v16 + 176), *(unsigned int *)(v16 + 184), 10);
      }
      if (*(_DWORD *)(v3 + 208 * v4 + 204))
        objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v3 + 208 * v4 + 192), *(unsigned int *)(v3 + 208 * v4 + 200), 11);
      v17 = *(_QWORD *)(v3 + 208 * v4 + 8);
      v18 = objc_msgSend(**v12, sel_threadExecutionWidth);
      v19 = *this;
      *(_QWORD *)&v25[0] = ((v17 + v18 - 1) / v18);
      *(int64x2_t *)((char *)v25 + 8) = v21;
      *(_QWORD *)v22 = v18;
      *(int64x2_t *)&v22[8] = v21;
      objc_msgSend(v19, "dispatchThreadgroups:threadsPerThreadgroup:", v25, v22);
      ++v9;
    }
    while (v8 != v9);
  }
  return objc_msgSend(*this, "popDebugGroup");
}

uint64_t re::SkinningDeformer::deformCPU(uint64_t result, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  float32x4_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  re *v21;
  uint64_t v22;
  uint64_t v23;
  re *v24;
  int v25;
  NSObject *v26;
  re *v27;
  re *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  _BOOL4 v45;
  uint64_t v46;
  int v47;
  float32x2_t v48;
  uint64_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int v52;
  float32x4_t v53;
  int32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  __int32 *v58;
  _DWORD *v59;
  signed int v60;
  float32x4_t v61;
  int8x16_t v62;
  float32x2_t v63;
  float32x2_t v64;
  uint64_t v65;
  NSObject *v66;
  NSObject *v67;
  NSObject *v68;
  unsigned int *v69;
  unsigned int *v70;
  _QWORD *v71;
  _QWORD *v72;
  _DWORD *v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned __int8 *v81;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  unsigned int v86;
  unsigned int v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint8_t v104[16];
  uint8_t v105[8];
  uint64_t v106;
  uint8_t v107[8];
  uint64_t v108;
  unsigned __int8 v109;
  uint8_t buf[4];
  _BYTE v111[14];
  __int16 v112;
  unint64_t v113;
  __int16 v114;
  unint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;

  v78 = result;
  v121 = *MEMORY[0x24BDAC8D0];
  v76 = *(_QWORD *)(*a3 + 48);
  if (v76)
  {
    v6 = a3;
    v7 = 0;
    v77 = *a3 + 8;
    while (1)
    {
      v9 = *(float32x4_t **)(re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v77, v7) + 8);
      v10 = v6[6];
      if (v10 <= (unint64_t)v9)
        goto LABEL_62;
      v11 = v6[5];
      v12 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](v6[1], (unint64_t)v9);
      v13 = re::DataArray<re::MeshModel>::get(*(_QWORD *)(*(_QWORD *)(v78 + 8) + 32) + 8, *(_QWORD *)(*(_QWORD *)(v12 + 368) + 16));
      v3 = *(unsigned __int16 *)(v12 + 392);
      v4 = *(_QWORD *)(v13 + 56);
      if (v4 <= v3)
      {
LABEL_63:
        *(_QWORD *)v107 = 0;
        v119 = 0u;
        v120 = 0u;
        v117 = 0u;
        v118 = 0u;
        v116 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)v111 = "operator[]";
        *(_WORD *)&v111[8] = 1024;
        *(_DWORD *)&v111[10] = 476;
        v112 = 2048;
        v113 = v3;
        v114 = 2048;
        v115 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_64:
        *(_QWORD *)v107 = 0;
        v119 = 0u;
        v120 = 0u;
        v117 = 0u;
        v118 = 0u;
        v116 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)v111 = "operator[]";
        *(_WORD *)&v111[8] = 1024;
        *(_DWORD *)&v111[10] = 476;
        v112 = 2048;
        v113 = v3;
        v114 = 2048;
        v115 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_65:
        *(_QWORD *)v107 = 0;
        v119 = 0u;
        v120 = 0u;
        v117 = 0u;
        v118 = 0u;
        v116 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)v111 = "operator[]";
        *(_WORD *)&v111[8] = 1024;
        *(_DWORD *)&v111[10] = 476;
        v112 = 2048;
        v113 = v4;
        v114 = 2048;
        v115 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v14 = *(_QWORD **)(*(_QWORD *)(v12 + 344) + 80);
      v4 = v14[1];
      if (v4 <= v3)
        goto LABEL_64;
      v15 = v14[2];
      v90 = v15 + 72 * *(unsigned __int16 *)(v12 + 392);
      v4 = *(unsigned int *)(v90 + 4);
      v5 = v14[4];
      if (v5 <= v4)
        goto LABEL_65;
      v102 = *(_QWORD *)(v13 + 64);
      v16 = *(_QWORD *)(*(_QWORD *)(v12 + 352) + 40);
      v17 = (_QWORD *)(v14[5] + 16 * v4);
      v4 = 1;
      LOBYTE(v116) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized(v11 + 312 * (_QWORD)v9, 1u);
      v18 = (_QWORD *)(v11 + 312 * (_QWORD)v9);
      v91 = v18 + 7;
      v92 = (uint64_t)v18;
      v93 = v18 + 8;
      v87 = *(_DWORD *)(v18[8]
                      + 32
                      * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v18 + 7, (unsigned __int8 *)&v116)+ 20);
      LOBYTE(v116) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v18, 1u);
      v88 = v18 + 15;
      v19 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v18 + 15, (unsigned __int8 *)&v116);
      v20 = v18[16];
      v5 = (unint64_t)(v18 + 16);
      v89 = (_QWORD *)v5;
      v86 = *(unsigned __int16 *)(v20 + 20 * v19 + 4);
      re::ReadOnlyCPUAccessibleBufferSliceContent::make(v17, (uint64_t)&v116);
      if (!(_BYTE)v116)
      {
        v26 = *re::graphicsLogObjects(v21);
        v6 = a3;
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_224FE9000, v26, OS_LOG_TYPE_DEFAULT, "Failure: Read metal buffer", buf, 2u);
        }
        goto LABEL_55;
      }
      v79 = v7;
      v22 = *((_QWORD *)&v116 + 1);
      v23 = v15 + 72 * v3;
      re::ReadOnlyCPUAccessibleBufferSliceContent::make((_QWORD *)(v23 + 8), (uint64_t)buf);
      v25 = *(unsigned __int8 *)(v23 + 2);
      v4 = v23 + 2;
      v81 = (unsigned __int8 *)v4;
      v6 = a3;
      if (v25)
        break;
      if (buf[0])
      {
        v80 = *(_QWORD *)&v111[4];
        goto LABEL_14;
      }
      v68 = *re::graphicsLogObjects(v24);
      v7 = v79;
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v107 = 0;
        _os_log_impl(&dword_224FE9000, v68, OS_LOG_TYPE_DEFAULT, "Failure: Read metal buffer", v107, 2u);
      }
LABEL_54:
      re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)buf);
LABEL_55:
      result = re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)&v116);
      if (++v7 == v76)
        return result;
    }
    v80 = 0;
LABEL_14:
    re::ReadOnlyCPUAccessibleBufferSliceContent::make((_QWORD *)(v15 + 72 * v3 + 24), (uint64_t)v107);
    if (v107[0])
    {
      v75 = v108;
      re::ReadOnlyCPUAccessibleBufferSliceContent::make((_QWORD *)v16, (uint64_t)v105);
      if (v105[0])
      {
        v29 = v106;
        v5 = *(unsigned int *)(v16 + 12);
        v104[0] = 21;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v92, 0x15u);
        v30 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v91, v104);
        v4 = *v93;
        v104[0] = 22;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v92, 0x16u);
        v31 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v91, v104);
        v32 = v11 + 312 * (_QWORD)v9;
        v33 = *(_QWORD *)(v32 + 16);
        v83 = (_QWORD *)(v32 + 16);
        if (v33)
        {
          v34 = v4 + 32 * v30;
          v72 = (_QWORD *)(v34 + 8);
          v35 = *v93 + 32 * v31;
          v36 = __clz(__rbit64(v33));
          v37 = v11 + 312 * (_QWORD)v9;
          v84 = (_QWORD *)(v37 + 192);
          v85 = (_QWORD *)(v37 + 184);
          v74 = (_DWORD *)(v34 + 20);
          v73 = (_DWORD *)(v35 + 20);
          v70 = (unsigned int *)(v34 + 16);
          v71 = (_QWORD *)(v35 + 8);
          v69 = (unsigned int *)(v35 + 16);
          v9 = (float32x4_t *)(v102 + 560 * v3 + 368);
          if (v87 / v86 <= 1)
            v38 = 1;
          else
            v38 = v87 / v86;
          v96 = v38;
          while (1)
          {
            v109 = v36;
            v3 = v92;
            re::DeformationVertexBufferState::ensureVertexBufferInitialized(v92, v36);
            v39 = *v89
                + 20
                * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v88, &v109);
            *(_QWORD *)v104 = 0;
            re::VertexFormatInfo::setVertexFormat((uint64_t)v104, (const VertexBufferFormat *)*(unsigned __int16 *)(v39 + 4), *(_BYTE *)(v39 + 16));
            v109 = v36;
            re::DeformationVertexBufferState::ensureVertexBufferInitialized(v92, v36);
            v40 = *v93
                + 32
                * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v91, &v109);
            v100 = *(_QWORD *)(v40 + 8);
            v4 = *(unsigned int *)(v40 + 16);
            v109 = v36;
            re::DeformationVertexBufferState::ensureVertexBufferInitialized(v92, v36);
            v41 = *v84
                + 32
                * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v85, &v109);
            v42 = *(_QWORD *)(v41 + 8);
            v44 = *(unsigned int *)(v41 + 16);
            v43 = *(_DWORD *)(v41 + 20);
            v45 = *(_BYTE *)v90 != 0;
            if (v36 == 19)
            {
              if (!*v74 || !*v73)
                goto LABEL_46;
              v103 = 19;
              v45 = 0;
              v94 = 0;
              v95 = *v72 + *v70;
              v3 = *v71 + *v69;
            }
            else
            {
              v103 = v36;
              v3 = v80;
              v94 = *v81;
              v95 = v75;
            }
            if (v87 >= v86)
            {
              v46 = 0;
              v47 = 0;
              v97 = v42 + v44;
              v98 = v43 / 0xC;
              v99 = *(uint64_t (**)(uint64_t, uint64_t))v104;
              v101 = v100 + v4;
              while (1)
              {
                if (v3)
                  v4 = *(unsigned int *)(v3 + 4 * v46);
                else
                  v4 = (v47 + v94);
                v48 = (float32x2_t)v99(v101, v46);
                v51 = 0uLL;
                v52 = v4 - v47;
                if ((int)v4 > v47)
                {
                  *(float32x2_t *)v53.f32 = v48;
                  v53.i64[1] = v49;
                  v54 = (int32x4_t)vaddq_f32(v9[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v9, v48.f32[0]), v9[1], v48, 1), v9[2], v53, 2));
                  v55 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.i8, 1);
                  v56 = (float32x4_t)vdupq_laneq_s32(v54, 2);
                  v57 = (float32x4_t)vdupq_laneq_s32(v54, 3);
                  v58 = (__int32 *)(v95 + 4 + 8 * v47);
                  v59 = (_DWORD *)(v95 + 4 * v47);
                  v51 = 0uLL;
                  do
                  {
                    if (v45)
                    {
                      v60 = *v59 >> 22;
                      v50.f32[0] = (float)(*v59 & 0x3FFFFF) * 0.00000023842;
                    }
                    else
                    {
                      v60 = *(v58 - 1);
                      v50.i32[0] = *v58;
                    }
                    v61 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(*(float32x4_t *)(v22 + ((uint64_t)v60 << 6)), *(float *)v54.i32), v55, *(float32x4_t *)(v22 + ((uint64_t)v60 << 6) + 16)), v56, *(float32x4_t *)(v22 + ((uint64_t)v60 << 6) + 32)), v57, *(float32x4_t *)(v22 + ((uint64_t)v60 << 6) + 48));
                    if (v5 >= 0x40)
                    {
                      if ((v5 >> 6) <= v60)
                      {
                        re::internal::assertLog((re::internal *)6, v49, *(double *)v51.i64, *(double *)v54.i64, *(double *)v55.i64, *(double *)v56.i64, *(double *)v57.i64, *(double *)v50.i64, *(double *)v61.i64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v60, v5 >> 6);
                        _os_crash();
                        __break(1u);
                        goto LABEL_61;
                      }
                      v61 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)(v29 + ((uint64_t)v60 << 6)), v61.f32[0]), *(float32x4_t *)(v29 + ((uint64_t)v60 << 6) + 16), *(float32x2_t *)v61.f32, 1), *(float32x4_t *)(v29 + ((uint64_t)v60 << 6) + 32), v61, 2), *(float32x4_t *)(v29 + ((uint64_t)v60 << 6) + 48), v61, 3);
                    }
                    v50 = vmulq_n_f32(v61, v50.f32[0]);
                    v51 = vaddq_f32(v51, v50);
                    v58 += 2;
                    ++v59;
                    --v52;
                  }
                  while (v52);
                }
                if (v103 != 1 && v103 != 19)
                {
                  v62 = (int8x16_t)vmulq_f32(v51, v51);
                  *(float32x2_t *)v62.i8 = vadd_f32(*(float32x2_t *)v62.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL));
                  v62.i32[0] = vadd_f32(*(float32x2_t *)v62.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v62.i8, 1)).u32[0];
                  v63 = vrsqrte_f32((float32x2_t)v62.u32[0]);
                  v64 = vmul_f32(v63, vrsqrts_f32((float32x2_t)v62.u32[0], vmul_f32(v63, v63)));
                  v51 = vmulq_n_f32(v51, vmul_f32(v64, vrsqrts_f32((float32x2_t)v62.u32[0], vmul_f32(v64, v64))).f32[0]);
                }
                if (v46 == v98)
                  break;
                v65 = v97 + 12 * v46;
                *(_QWORD *)v65 = v51.i64[0];
                *(_DWORD *)(v65 + 8) = v51.i32[2];
                ++v46;
                v47 = v4;
                if (v46 == v96)
                  goto LABEL_45;
              }
LABEL_61:
              re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v98, v98);
              _os_crash();
              __break(1u);
LABEL_62:
              re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v9, v10);
              _os_crash();
              __break(1u);
              goto LABEL_63;
            }
LABEL_45:
            LOBYTE(v36) = v103;
            if (v103 == 63)
              break;
LABEL_46:
            if ((*v83 & (-2 << v36)) == 0)
              break;
            v36 = __clz(__rbit64(*v83 & (-2 << v36)));
          }
        }
      }
      else
      {
        v67 = *re::graphicsLogObjects(v28);
        if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v104 = 0;
          _os_log_impl(&dword_224FE9000, v67, OS_LOG_TYPE_DEFAULT, "Failure: Read metal buffer", v104, 2u);
        }
      }
      re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)v105);
      v6 = a3;
    }
    else
    {
      v66 = *re::graphicsLogObjects(v27);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v105 = 0;
        _os_log_impl(&dword_224FE9000, v66, OS_LOG_TYPE_DEFAULT, "Failure: Read metal buffer", v105, 2u);
      }
    }
    re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result((uint64_t)v107);
    v7 = v79;
    goto LABEL_54;
  }
  return result;
}

void re::SkinningDeformer::~SkinningDeformer(re::SkinningDeformer *this)
{
  uint64_t i;
  void *v3;

  for (i = 32784; i != 16; i -= 8)
  {
    v3 = *(void **)((char *)this + i);
    if (v3)
    {

      *(_QWORD *)((char *)this + i) = 0;
    }
  }
}

{
  uint64_t v2;
  void *v3;

  v2 = 32784;
  while (1)
  {
    v3 = *(void **)((char *)this + v2);
    if (v3)
    {

      *(_QWORD *)((char *)this + v2) = 0;
    }
    v2 -= 8;
    if (v2 == 16)
      JUMPOUT(0x2276933B8);
  }
}

uint64_t re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 88 * (v2 & 3);
}

uint64_t re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 152 * (v2 & 3);
}

void _ZNSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_16SkinningDeformerENS2_12_GLOBAL__N_113SkinningModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISG_EEFvSF_EED0Ev()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_16SkinningDeformerENS2_12_GLOBAL__N_113SkinningModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISG_EEFvSF_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED7B198;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_16SkinningDeformerENS2_12_GLOBAL__N_113SkinningModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISG_EEFvSF_EE7__cloneEPNS0_6__baseISJ_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED7B198;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_16SkinningDeformerENS2_12_GLOBAL__N_113SkinningModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISG_EEFvSF_EEclEOSF_(uint64_t result, _QWORD **a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(result + 8);
    re::FixedArray<re::BufferSlice>::deinit(v2 + 3);
    if (*v2)
    {
      v4 = v2[1];
      if (v4)
      {
        v5 = 72 * v4;
        v6 = v2[2] + 40;
        do
        {
          v7 = *(void **)(v6 + 16);
          if (v7)
          {

            *(_QWORD *)(v6 + 16) = 0;
          }
          if (*(_QWORD *)v6)
          {

            *(_QWORD *)v6 = 0;
          }
          v8 = *(void **)(v6 - 16);
          if (v8)
          {

            *(_QWORD *)(v6 - 16) = 0;
          }
          v9 = *(void **)(v6 - 32);
          if (v9)
          {

            *(_QWORD *)(v6 - 32) = 0;
          }
          v6 += 72;
          v5 -= 72;
        }
        while (v5);
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v2 + 40))(*v2, v2[2]);
        v2[1] = 0;
        v2[2] = 0;
      }
      *v2 = 0;
    }
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_16SkinningDeformerENS2_12_GLOBAL__N_113SkinningModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISG_EEFvSF_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_16SkinningDeformerENS2_12_GLOBAL__N_113SkinningModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISG_EEFvSF_EE11target_typeEv()
{
}

uint64_t re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const StringID *a4, __int128 *a5)
{
  uint64_t v9;
  int v10;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  signed int v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  _BYTE v33[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v9 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v33, 0, 36);
          *(_QWORD *)&v33[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v33, v14, v13);
          v16 = *(_OWORD *)v33;
          *(_OWORD *)v33 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v33[16];
          v18 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v33[16] = v18;
          *(_QWORD *)(a1 + 16) = v17;
          v20 = *(_OWORD *)&v33[24];
          *(_OWORD *)&v33[24] = *(_OWORD *)(a1 + 24);
          v19 = *(_DWORD *)&v33[32];
          *(_OWORD *)(a1 + 24) = v20;
          v21 = v19;
          if (v19)
          {
            v22 = 0;
            v23 = v18 + 24;
            do
            {
              if ((*(_DWORD *)(v23 - 24) & 0x80000000) != 0)
              {
                v24 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(v23 - 16) >> 31) ^ (*(_QWORD *)(v23 - 16) >> 1));
                v25 = (0x94D049BB133111EBLL * (v24 ^ (v24 >> 27))) ^ ((0x94D049BB133111EBLL * (v24 ^ (v24 >> 27))) >> 31);
                re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v25 % *(unsigned int *)(a1 + 24), v25, v23 - 16, v23);
              }
              ++v22;
              v23 += 48;
            }
            while (v22 < v21);
          }
          re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v33);
        }
      }
      else
      {
        if (v13)
          v28 = 2 * v12;
        else
          v28 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v26 = *(_QWORD *)(a1 + 16);
    v27 = *(_DWORD *)(v26 + 48 * v9);
  }
  else
  {
    v26 = *(_QWORD *)(a1 + 16);
    v27 = *(_DWORD *)(v26 + 48 * v9);
    *(_DWORD *)(a1 + 36) = v27 & 0x7FFFFFFF;
  }
  v29 = 48 * v9;
  *(_DWORD *)(v26 + v29) = v27 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v29) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 8), a4);
  v30 = *(_QWORD *)(a1 + 16) + 48 * v9;
  v31 = *a5;
  *(_QWORD *)(v30 + 40) = *((_QWORD *)a5 + 2);
  *(_OWORD *)(v30 + 24) = v31;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::BucketArray<re::`anonymous namespace'::GpuAllocationData::SkinTask,8ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::`anonymous namespace'::GpuAllocationData::SkinTask,8ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  int v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;

  v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      v4 = result[1];
      if (v4 > a2)
      {
        v5 = *((_DWORD *)result + 4);
        do
        {
          v6 = v3 + 3;
          if ((v5 & 1) == 0)
            v6 = (_QWORD *)v3[4];
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v3 + 40))(*v3, v6[v4 - 1]);
          v7 = *((_DWORD *)v3 + 4);
          v4 = v3[1] - 1;
          v3[1] = v4;
          v5 = v7 + 2;
          *((_DWORD *)v3 + 4) = v5;
        }
        while (v4 > a2);
      }
      if (v4 < a2)
      {
        v8 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 1664, 0);
          v9 = result;
          if (*v3)
          {
            v10 = v3[1];
            v11 = *((_DWORD *)v3 + 4);
            if ((v11 & 1) == 0)
            {
              v12 = *v8;
              v14 = v10 >= *v8;
              v13 = v10 + 1;
              v14 = !v14 || v12 >= v13;
              if (v14)
                goto LABEL_24;
              v15 = 2 * v12;
              goto LABEL_20;
            }
            v13 = v10 + 1;
            if (v13 >= 3)
            {
              v15 = 4;
LABEL_20:
              if (v15 <= v13)
                v17 = v13;
              else
                v17 = v15;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v17);
              v11 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v16 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v16);
            v11 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v11;
          }
LABEL_24:
          v18 = v3 + 3;
          if ((v11 & 1) == 0)
            v18 = (_QWORD *)v3[4];
          v19 = v3[1];
          v18[v19++] = v9;
          v3[1] = v19;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v19 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

float32x4_t re::ColorManager::computeWPCMatrix@<Q0>(float32x4_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned __int8 v6;
  float v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t result;
  int v15;
  const char *v16;
  _QWORD v18[2];
  float v19;

  v3 = a2;
  if ((v6 & 1) == 0)
  {
    v3 = a2;
    if (v15)
    {
      re::Defaults::floatValue((re::Defaults *)"iblWPCStrength", v16, (uint64_t)&re::ColorManager::computeWPCMatrix(re::Matrix3x3<float> const&,re::DebugSettingsManager *)const::overrideWpcStrength);
      v3 = a2;
    }
  }
  v7 = *(float *)&dword_25582A174;
  if (!re::ColorManager::computeWPCMatrix(re::Matrix3x3<float> const&,re::DebugSettingsManager *)const::overrideWpcStrength)
    v7 = 1.0;
  v19 = v7;
  if (v3)
  {
    v18[0] = 0xFEE1A01690D44944;
    v18[1] = "colorpipe:wpcStrength";
    re::DebugSettingsManager::getWithErrorCode<float>(v3, v18, &v19);
    re::StringID::destroyString((re::StringID *)v18);
    v7 = v19;
  }
  v8 = vmulq_n_f32(*a1, v7);
  v9 = vmulq_n_f32(a1[1], v7);
  v10 = vmulq_n_f32(a1[2], v7);
  v11 = 1.0 - v7;
  v12 = vaddq_f32(v8, vmulq_n_f32((float32x4_t)xmmword_2260E5F10, v11));
  v13 = vaddq_f32(v9, vmulq_n_f32((float32x4_t)xmmword_2260E5F20, v11));
  *(_DWORD *)(a3 + 8) = v12.i32[2];
  *(_DWORD *)(a3 + 24) = v13.i32[2];
  result = vaddq_f32(vmulq_n_f32((float32x4_t)xmmword_2260E5F40, v11), v10);
  *(_QWORD *)a3 = v12.i64[0];
  *(_QWORD *)(a3 + 16) = v13.i64[0];
  *(_DWORD *)(a3 + 40) = result.i32[2];
  *(_QWORD *)(a3 + 32) = result.i64[0];
  return result;
}

uint64_t re::ColorManager::deinit(re::ColorManager *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    MEMORY[0x227693394](v2, 0x1000C8052888210);
    *((_QWORD *)this + 10) = 0;
  }
  result = *((_QWORD *)this + 1559);
  if (result)
  {
    result = MEMORY[0x227693394](result, 0x1000C8052888210);
    *((_QWORD *)this + 1559) = 0;
  }
  return result;
}

uint64_t re::ColorManager::setTargetDisplayTonemapLUTDomain(_QWORD *a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;

  v4 = (void *)a1[10];
  if (!v4)
    goto LABEL_4;
  v5 = a1[9];
  if (v5 != *a2)
  {
    MEMORY[0x227693394]();
    a1[10] = 0;
LABEL_4:
    v5 = *a2;
    if (*a2)
    {
      v4 = (void *)operator new[]();
      a1[10] = v4;
      v5 = *a2;
    }
    else
    {
      v4 = 0;
    }
  }
  a1[9] = v5;
  result = (uint64_t)memcpy(v4, (const void *)a2[1], 4 * *a2);
  if (a1[1558] != *a2 && *a2 != 0)
  {
    v8 = a1[1559];
    if (v8)
      MEMORY[0x227693394](v8, 0x1000C8052888210);
    result = operator new[]();
    a1[1559] = result;
    a1[1558] = *a2;
  }
  return result;
}

__n128 re::ColorManager::setTonemapUserParameters(re::ColorManager *this, const re::TonemapUserParameters *a2, const re::TonemapUserParameters *a3)
{
  re *v5;
  const re::TonemapUserParameters *v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v5 = (re::ColorManager *)((char *)this + 88);
  *((_BYTE *)this + 173) |= !re::haveSamePreBlendLUT((re::ColorManager *)((char *)this + 88), a2, a3);
  *((_BYTE *)this + 174) |= !re::haveSameExposure(v5, a2, v6);
  result = *(__n128 *)a2;
  v8 = *((_OWORD *)a2 + 1);
  v9 = *((_OWORD *)a2 + 2);
  *(_OWORD *)((char *)this + 129) = *(_OWORD *)((char *)a2 + 41);
  *(_OWORD *)((char *)this + 120) = v9;
  *(_OWORD *)((char *)this + 104) = v8;
  *(__n128 *)((char *)this + 88) = result;
  return result;
}

void re::ColorManager::updateTonemapLUTs(uint64_t a1, float *a2)
{
  uint64_t v4;
  float *v5;
  float *v6;
  float v7;
  unint64_t i;
  unint64_t j;

  if (*(_BYTE *)(a1 + 174) || *(_BYTE *)(a1 + 173))
  {
    v4 = *(_QWORD *)(a1 + 12464);
    if (v4)
    {
      v5 = *(float **)(a1 + 80);
      v6 = *(float **)(a1 + 12472);
      do
      {
        v7 = *v5++;
        *v6++ = re::computeTonemapping(a2, v7 * *a2);
        --v4;
      }
      while (v4);
    }
    if (!*(_BYTE *)(a1 + 67) && *(_BYTE *)(a1 + 173))
    {
      for (i = 0; i != 1024; ++i)
        *(float *)(a1 + 176 + 4 * i) = re::computeTonemapping(a2, a2[31] * (float)(*a2 * (float)((float)((float)i * 0.00097752) + 0.0)))* a2[32];
      for (j = 0; j != 1024; ++j)
        *(float *)(a1 + 4272 + 4 * j) = (float)(re::computeTonemappingInverse(a2, (float)((float)j * 0.00097752) + 0.0)
                                              * a2[1])
                                      * a2[6];
    }
    *(_WORD *)(a1 + 173) = 0;
  }
}

void re::ColorManager::updateISPTonemapLUTAccelerated(uint64_t a1)
{
  float *v1;
  uint64_t v2;
  float *v3;
  double v4;
  unint64_t v5;
  float v6;
  float *v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  const float *v13;
  uint64_t v14;
  unint64_t v15;
  float v16;
  float __S2;
  float __S1;
  float __B;
  float __A;
  float __C[1024];
  uint64_t v22;

  v4 = MEMORY[0x24BDAC7A8](a1);
  v22 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(v2 + 8);
  if (v5)
  {
    v6 = *(float *)&v4;
    v7 = v3;
    v8 = v2;
    v9 = v1;
    __A = 0.0;
    __B = (float)v5 * 0.00097656;
    vDSP_vramp(&__A, &__B, __C, 1, 0x400uLL);
    __S2 = 0.0;
    __S1 = 1.0;
    vDSP_vtabi(__C, 1, &__S1, &__S2, *(const float **)v8, *(_QWORD *)(v8 + 8), v9 + 2092, 1, 0x400uLL);
    re::computeTonemappingInverseAccelerated(v7, v9 + 2092, v9 + 2092, 0x400uLL);
    v11 = *(_QWORD *)(v8 + 8);
    v12 = (double)v11 * 0.1;
    if (v11 <= (unint64_t)v12)
    {
      re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, (unint64_t)v12, v11);
      _os_crash();
      __break(1u);
    }
    else
    {
      v13 = *(const float **)v8;
      v9[3122] = re::computeTonemappingInverse(v7, v13[(unint64_t)v12]) / 0.1;
      v15 = (unint64_t)(float)((float)(v9[3120] * (float)v11) / v6);
      if (v11 - 1 < v15)
        v15 = v11 - 1;
      if (v11 > v15)
      {
        v16 = v9[3121] + (float)(v13[v15] - v9[3121]) * 0.05;
        v9[3121] = v16;
        return;
      }
    }
    re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v15, v11);
    _os_crash();
    __break(1u);
  }
}

uint64_t *re::allocInfo_ColorManager(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_408);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_408))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411C198, 0);
    *(uint64_t *)((char *)&qword_25411C1A8 + 6) = 0;
    qword_25411C1A8 = 0;
    qword_25411C1B8 = 0;
    qword_25411C1C0 = 0xFFFFFFFFLL;
    qword_25411C198 = (uint64_t)&off_24ED7DAA8;
    qword_25411C1C8 = (uint64_t)"ColorManager";
    dword_25411C1D0 = 0;
    unk_25411C1D8 = 0u;
    unk_25411C1E8 = 0u;
    unk_25411C1F8 = 0u;
    qword_25411C208 = 0;
    __cxa_guard_release(&_MergedGlobals_408);
  }
  return &qword_25411C198;
}

void re::initInfo_ColorManager(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x31DB7AC1852E8DD4;
  v5[1] = "ColorManager";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x30D000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_ColorManager(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ColorManager>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ColorManager>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ColorManager>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ColorManager>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ColorManager>(int a1, int a2, re::ColorManager *this)
{
  return re::ColorManager::ColorManager(this);
}

uint64_t re::introspect_ColorManager(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ColorManager", (uint64_t (*)(re::internal *))re::allocInfo_ColorManager, (re::IntrospectionBase *(*)(void))re::initInfo_ColorManager, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ColorManager>, this);
}

float32x4_t *re::computeFrustumCorners@<X0>(float32x4_t *result@<X0>, uint64_t a2@<X1>, int a3@<W2>, float32x4_t *a4@<X8>, float32x4_t a5@<Q1>, float32x4_t a6@<Q2>, float32x4_t a7@<Q4>)
{
  float32x4_t v7;
  float32x4_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float v39;
  float32x4_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float32x4_t v50;
  __int128 v51;
  float32x4_t v52;
  float32x4_t v53;
  uint64_t v54;
  float32x4_t v55;
  float32x4_t v56;
  uint64_t v57;
  float32x4_t v58;
  float32x4_t v59;
  uint64_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;

  a4[6] = 0u;
  a4[7] = 0u;
  a4[4] = 0u;
  a4[5] = 0u;
  a4[2] = 0u;
  a4[3] = 0u;
  *a4 = 0u;
  a4[1] = 0u;
  if (*(_DWORD *)a2)
  {
    if (!a3)
      return result;
    v8 = *result;
    v9 = result[1].f32[0];
    v10 = result[1].f32[1];
    v11 = result[1].f32[2];
    v12 = result[1].f32[3];
    v13 = (float)(v9 + v9) * v11;
    v14 = (float)(v10 + v10) * v12;
    a6.f32[0] = v13 + v14;
    v15 = (float)(v10 + v10) * v11;
    v16 = (float)(v9 + v9) * v12;
    v17 = (float)(v9 + v9) * v9;
    v18 = (float)(v10 + v10) * v10;
    a6.f32[1] = v15 - v16;
    a6.f32[2] = 1.0 - (float)(v17 + v18);
    v19 = (float)(v9 + v9) * v10;
    v20 = (float)(v11 + v11) * v12;
    v7.f32[0] = v19 - v20;
    a7.f32[0] = (float)(v11 + v11) * v11;
    v7.f32[1] = 1.0 - (float)(v17 + a7.f32[0]);
    v7.f32[2] = v16 + v15;
    a7.f32[0] = 1.0 - (float)(v18 + a7.f32[0]);
    a7.f32[1] = v19 + v20;
    a7.f32[2] = v13 - v14;
    v21 = vsubq_f32(*result, vmulq_n_f32(a6, COERCE_FLOAT(*(_QWORD *)(a2 + 4))));
    v22 = vmulq_n_f32(a7, COERCE_FLOAT(*(_OWORD *)(a2 + 16)));
    v23 = vaddq_f32(v22, v21);
    v24 = vmulq_n_f32(v7, COERCE_FLOAT(*(_QWORD *)(a2 + 20)));
    v25 = vaddq_f32(v24, v23);
    v25.i32[3] = 1.0;
    v26 = vmulq_n_f32(v7, COERCE_FLOAT(*(_QWORD *)(a2 + 24)));
    v27 = vaddq_f32(v26, v23);
    v27.i32[3] = 1.0;
    *a4 = v25;
    a4[1] = v27;
    v28 = vmulq_n_f32(a7, COERCE_FLOAT(*(_QWORD *)(a2 + 12)));
    v29 = vaddq_f32(v28, v21);
    v30 = vaddq_f32(v24, v29);
    v30.i32[3] = 1.0;
    v31 = vaddq_f32(v26, v29);
    v31.i32[3] = 1.0;
    a4[2] = v30;
    a4[3] = v31;
    v32 = vsubq_f32(v8, vmulq_n_f32(a6, COERCE_FLOAT(*(_QWORD *)(a2 + 8))));
    v33 = vaddq_f32(v22, v32);
    v34 = vaddq_f32(v24, v33);
    v34.i32[3] = 1.0;
    v35 = vaddq_f32(v26, v33);
    v35.i32[3] = 1.0;
    a4[4] = v34;
    a4[5] = v35;
    v36 = vaddq_f32(v28, v32);
    v37 = vaddq_f32(v24, v36);
    v37.i32[3] = 1.0;
    a4[6] = v37;
    v38 = vaddq_f32(v26, v36);
    v38.i32[3] = 1.0;
  }
  else
  {
    a5.i32[0] = result[1].i32[0];
    a6.i32[0] = result[1].i32[1];
    v39 = result[1].f32[2];
    a7.i32[0] = result[1].i32[3];
    v40 = *result;
    v41 = a6.f32[0] + a6.f32[0];
    v42 = (float)(a5.f32[0] + a5.f32[0]) * a5.f32[0];
    v43 = (float)(a6.f32[0] + a6.f32[0]) * a6.f32[0];
    v44 = (float)(v39 + v39) * v39;
    a6.f32[0] = (float)(a5.f32[0] + a5.f32[0]) * a6.f32[0];
    v45 = (float)(a5.f32[0] + a5.f32[0]) * v39;
    v46 = v41 * v39;
    v47 = (float)(a5.f32[0] + a5.f32[0]) * a7.f32[0];
    v48 = v41 * a7.f32[0];
    a7.f32[0] = (float)(v39 + v39) * a7.f32[0];
    a5.f32[0] = 1.0 - (float)(v43 + v44);
    a5.f32[1] = a6.f32[0] + a7.f32[0];
    a5.f32[2] = v45 - v48;
    a6.f32[0] = a6.f32[0] - a7.f32[0];
    a6.f32[1] = 1.0 - (float)(v42 + v44);
    a6.f32[2] = v47 + v46;
    a7.f32[0] = v45 + v48;
    a7.f32[1] = v46 - v47;
    a7.f32[2] = 1.0 - (float)(v42 + v43);
    v49 = *(float *)(a2 + 4);
    v50 = vaddq_f32(*result, vmulq_n_f32(a7, -v49));
    v51 = *(_OWORD *)(a2 + 16);
    v52 = vmulq_n_f32(a5, *(float *)&v51);
    v53 = vaddq_f32(v50, v52);
    v54 = *(_QWORD *)(a2 + 12);
    v55 = vmulq_n_f32(a5, *(float *)&v54);
    v56 = vaddq_f32(v50, v55);
    v57 = *(_QWORD *)(a2 + 20);
    v58 = vmulq_n_f32(a6, *(float *)&v57);
    v59 = vaddq_f32(v58, v53);
    v60 = *(_QWORD *)(a2 + 24);
    v61 = vmulq_n_f32(a6, *(float *)&v60);
    v62 = vaddq_f32(v61, v53);
    v63 = vaddq_f32(v58, v56);
    v64 = vaddq_f32(v61, v56);
    v59.i32[3] = 1.0;
    v62.i32[3] = 1.0;
    *a4 = v59;
    a4[1] = v62;
    v63.i32[3] = 1.0;
    v64.i32[3] = 1.0;
    a4[2] = v63;
    a4[3] = v64;
    if (a3 && (v65 = *(float *)(a2 + 8), v65 != INFINITY))
    {
      v69 = vaddq_f32(v40, vmulq_n_f32(a7, -v65));
      v70 = 1.0 / v49;
      v71 = vmulq_n_f32(a5, v65);
      v72 = vmulq_n_f32(a6, v65);
      v73 = vaddq_f32(v69, vmulq_n_f32(vmulq_n_f32(v71, *(float *)&v51), v70));
      v74 = vaddq_f32(v69, vmulq_n_f32(vmulq_n_f32(vmulq_f32(a5, v71), *(float *)&v54), v70));
      v75 = vmulq_n_f32(vmulq_n_f32(v72, *(float *)&v57), v70);
      v76 = vaddq_f32(v75, v73);
      v77 = vmulq_n_f32(vmulq_n_f32(v72, *(float *)&v60), v70);
      v78 = vaddq_f32(v77, v73);
      v79 = vaddq_f32(v75, v74);
      v38 = vaddq_f32(v77, v74);
      v76.i32[3] = 1.0;
      v78.i32[3] = 1.0;
      a4[4] = v76;
      a4[5] = v78;
      v79.i32[3] = 1.0;
      a4[6] = v79;
      v38.i32[3] = 1.0;
    }
    else
    {
      v66 = vaddq_f32(v58, v52);
      v67 = vaddq_f32(v61, v52);
      v68 = vaddq_f32(v58, v55);
      v38 = vaddq_f32(v61, v55);
      v66.i32[3] = 0;
      v67.i32[3] = 0;
      a4[4] = v66;
      a4[5] = v67;
      v68.i32[3] = 0;
      a4[6] = v68;
      v38.i32[3] = 0;
    }
  }
  a4[7] = v38;
  return result;
}

unint64_t re::computeCullingPlanes@<X0>(float32x4_t *this@<X0>, const re::RenderCamera *a2@<X1>, const re::Projection *a3@<X2>, float32x4_t *a4@<X8>, float32x4_t a5@<Q1>, float32x4_t a6@<Q2>, float32x4_t a7@<Q3>, float32x4_t a8@<Q4>, float32x4_t a9@<Q6>)
{
  int v9;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  unint64_t result;
  uint64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float v38;
  float32x4_t v39;
  float32x4_t v40;
  unint64_t v41;
  float v42;
  uint64_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t *v65;
  unint64_t v66;
  uint64_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x16_t v70;
  float32x4_t v71;
  float32x4_t v72;
  unint64_t v73;
  uint64_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int8x16_t v77;
  float32x4_t v78;
  float32x4_t v79;
  unint64_t v80;
  uint64_t v81;
  float32x4_t v82;
  float32x4_t v83;
  int8x16_t v84;
  float32x4_t v85;
  float32x4_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  float32x4_t v90;
  float32x4_t v91;
  int8x16_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  __int128 v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;

  v9 = (int)a3;
  a4->i64[0] = 0;
  a4->i32[2] = 0;
  if (*(_DWORD *)a2)
  {
    v107 = *this;
    v12 = this[1].f32[0];
    v13 = this[1].f32[1];
    a6.i32[0] = this[1].i32[2];
    v14 = this[1].f32[3];
    a8.f32[0] = v12 + v12;
    v15 = v13 + v13;
    v16 = (float)(v12 + v12) * v12;
    v17 = (float)(v13 + v13) * v13;
    v18 = (float)(a6.f32[0] + a6.f32[0]) * a6.f32[0];
    v19 = a8.f32[0] * v13;
    v20 = a8.f32[0] * a6.f32[0];
    v21 = v15 * a6.f32[0];
    v22 = a8.f32[0] * v14;
    v23 = v15 * v14;
    a6.f32[0] = (float)(a6.f32[0] + a6.f32[0]) * v14;
    a8.f32[0] = 1.0 - (float)(v17 + v18);
    a8.f32[1] = v19 + a6.f32[0];
    a8.f32[2] = v20 - (float)(v15 * v14);
    a6.f32[0] = v19 - a6.f32[0];
    a6.f32[1] = 1.0 - (float)(v16 + v18);
    a6.f32[2] = v22 + v21;
    v102 = a8;
    v104 = a6;
    v100 = *((_OWORD *)a2 + 1);
    re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(0, (uint64_t)a2);
    v24 = vmulq_f32(v102, vaddq_f32(v107, vmulq_n_f32(v102, *(float *)&v100)));
    v25 = v102;
    v25.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0];
    a4[1] = v25;
    LODWORD(v100) = *(_QWORD *)((char *)a2 + 12);
    re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(1uLL, v26);
    v27 = vnegq_f32(v102);
    v28 = vmulq_f32(vaddq_f32(v107, vmulq_n_f32(v102, *(float *)&v100)), v27);
    v27.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0];
    a4[2] = v27;
    v102.i32[0] = *(_QWORD *)((char *)a2 + 20);
    re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(2uLL, v29);
    v30 = vmulq_f32(v104, vaddq_f32(v107, vmulq_n_f32(v104, v102.f32[0])));
    v31 = v104;
    v31.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).f32[0];
    a4[3] = v31;
    v102.i32[0] = *((_QWORD *)a2 + 3);
    result = re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(3uLL, v32);
    v35 = vnegq_f32(v104);
    v36 = vmulq_f32(vaddq_f32(v107, vmulq_n_f32(v104, v102.f32[0])), v35);
    v37 = vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1));
    v35.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), v37).f32[0];
    a4[4] = v35;
    a4->i64[0] = 4;
    a4->i32[2] = 4;
    if (v9)
    {
      v37.f32[0] = v20 + v23;
      v37.f32[1] = v21 - v22;
      v37.f32[2] = 1.0 - (float)(v16 + v17);
      v105 = v37;
      v38 = *((float *)a2 + 2);
      re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(4uLL, v34);
      v39 = vnegq_f32(v105);
      v40 = vmulq_f32(vaddq_f32(v107, vmulq_n_f32(v105, -v38)), v39);
      v39.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0];
      a4[5] = v39;
      v41 = 5;
      a4->i64[0] = 5;
      a4->i32[2] = 5;
      v42 = *((float *)a2 + 1);
      result = re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(5uLL, v43);
      v44 = v105;
      v45 = vaddq_f32(v107, vmulq_n_f32(v105, -v42));
      v46 = v105;
LABEL_4:
      v47 = vmulq_f32(v45, v44);
      v46.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 2), vaddq_f32(v47, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.f32, 1))).f32[0];
      a4[v41 + 1] = v46;
      ++a4->i64[0];
      ++a4->i32[2];
    }
  }
  else
  {
    v48 = this[1].f32[0];
    a5.i32[0] = this[1].i32[1];
    v49 = this[1].f32[2];
    a7.i32[0] = this[1].i32[3];
    v50 = v48 + v48;
    v51 = a5.f32[0] + a5.f32[0];
    a9.f32[0] = v49 + v49;
    v52 = (float)(v48 + v48) * v48;
    v53 = (float)(a5.f32[0] + a5.f32[0]) * a5.f32[0];
    v54 = (float)(v49 + v49) * v49;
    a5.f32[0] = v50 * a5.f32[0];
    v55 = v50 * v49;
    v56 = v51 * v49;
    v57 = v50 * a7.f32[0];
    v58 = v51 * a7.f32[0];
    a7.f32[0] = a9.f32[0] * a7.f32[0];
    a9.f32[0] = 1.0 - (float)(v53 + v54);
    a9.f32[1] = a5.f32[0] + a7.f32[0];
    a9.f32[2] = v55 - v58;
    a5.f32[0] = a5.f32[0] - a7.f32[0];
    a5.f32[1] = 1.0 - (float)(v52 + v54);
    a5.f32[2] = v57 + v56;
    a7.f32[0] = v55 + v58;
    a7.f32[1] = v56 - v57;
    a7.f32[2] = 1.0 - (float)(v52 + v53);
    v96 = a7;
    v108 = *this;
    v97 = vaddq_f32(*this, vmulq_n_f32(a7, -*((float *)a2 + 1)));
    v98 = vsubq_f32(*this, v97);
    v59 = vaddq_f32(vmulq_n_f32(a9, COERCE_FLOAT(*((_OWORD *)a2 + 1))), v97);
    v60 = vaddq_f32(vmulq_n_f32(a9, COERCE_FLOAT(*(_QWORD *)((char *)a2 + 12))), v97);
    v61 = vmulq_n_f32(a5, COERCE_FLOAT(*(_QWORD *)((char *)a2 + 20)));
    v62 = vmulq_n_f32(a5, COERCE_FLOAT(*((_QWORD *)a2 + 3)));
    v99 = vaddq_f32(v61, v59);
    v101 = vaddq_f32(v61, v60);
    v103 = vaddq_f32(v62, v59);
    v106 = vaddq_f32(v62, v60);
    re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(0, (uint64_t)a2);
    v63 = vmulq_f32(v97, v98);
    v64 = v98;
    v64.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v63, 2), vaddq_f32(v63, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 1))).f32[0];
    v65 = a4 + 1;
    a4[a4->i64[0] + 1] = v64;
    v66 = a4->i64[0] + 1;
    a4->i64[0] = v66;
    ++a4->i32[2];
    re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(v66, v67);
    v68 = vsubq_f32(v103, v108);
    v69 = vsubq_f32(v99, v103);
    v70 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v69, (int32x4_t)v69), (int8x16_t)v69, 0xCuLL), vnegq_f32(v68)), v69, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v68, (int32x4_t)v68), (int8x16_t)v68, 0xCuLL));
    v71 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v70, (int32x4_t)v70), v70, 0xCuLL);
    v72 = vmulq_f32(v108, v71);
    v71.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v72, 2), vaddq_f32(v72, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v72.f32, 1))).f32[0];
    v65[v66] = v71;
    v73 = a4->i64[0] + 1;
    a4->i64[0] = v73;
    ++a4->i32[2];
    re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(v73, v74);
    v75 = vsubq_f32(v99, v108);
    v76 = vsubq_f32(v101, v99);
    v77 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v76, (int32x4_t)v76), (int8x16_t)v76, 0xCuLL), vnegq_f32(v75)), v76, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v75, (int32x4_t)v75), (int8x16_t)v75, 0xCuLL));
    v78 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v77, (int32x4_t)v77), v77, 0xCuLL);
    v79 = vmulq_f32(v108, v78);
    v78.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v79, 2), vaddq_f32(v79, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v79.f32, 1))).f32[0];
    v65[v73] = v78;
    v80 = a4->i64[0] + 1;
    a4->i64[0] = v80;
    ++a4->i32[2];
    re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(v80, v81);
    v82 = vsubq_f32(v101, v108);
    v83 = vsubq_f32(v106, v101);
    v84 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v83, (int32x4_t)v83), (int8x16_t)v83, 0xCuLL), vnegq_f32(v82)), v83, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v82, (int32x4_t)v82), (int8x16_t)v82, 0xCuLL));
    v85 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v84, (int32x4_t)v84), v84, 0xCuLL);
    v86 = vmulq_f32(v108, v85);
    v85.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v86, 2), vaddq_f32(v86, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.f32, 1))).f32[0];
    v65[v80] = v85;
    v87 = a4->i64[0] + 1;
    a4->i64[0] = v87;
    ++a4->i32[2];
    result = re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(v87, v88);
    v90 = vsubq_f32(v106, v108);
    v91 = vsubq_f32(v103, v106);
    v92 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v91, (int32x4_t)v91), (int8x16_t)v91, 0xCuLL), vnegq_f32(v90)), v91, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v90, (int32x4_t)v90), (int8x16_t)v90, 0xCuLL));
    v93 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v92, (int32x4_t)v92), v92, 0xCuLL);
    v94 = vmulq_f32(v108, v93);
    v93.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v94, 2), vaddq_f32(v94, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v94.f32, 1))).f32[0];
    v65[v87] = v93;
    v41 = a4->i64[0] + 1;
    a4->i64[0] = v41;
    ++a4->i32[2];
    if (v9)
    {
      v95 = *((float *)a2 + 2);
      if (v95 != INFINITY)
      {
        result = re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(v41, v89);
        v45 = vnegq_f32(v98);
        v44 = vaddq_f32(v108, vmulq_n_f32(v96, -v95));
        v46 = v45;
        goto LABEL_4;
      }
    }
  }
  return result;
}

unint64_t re::buildCullingPlanes@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  char v15;
  float v16;
  float v17;
  float v18;
  float v19;
  unint64_t result;
  __n128 v21;
  float v22;
  float32x4_t v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  __n128 v29;
  float v30;
  float32x4_t v31;
  float32x4_t v32;

  v6 = 0;
  v7 = 0;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  v8 = a1 + 16;
  v9 = a1 + 32;
  v10 = a1 + 48;
  v11 = a3 + 16;
  v12 = 1;
  do
  {
    v13 = v12;
    v14 = 1;
    do
    {
      v15 = v14;
      v16 = *(float *)(a1 + 4 * v7);
      if ((v14 & 1) != 0)
      {
        v16 = -v16;
        v30 = (float)-*(float *)(v8 + 4 * v7) - *(float *)(a1 + 28);
        a4.n128_f32[0] = (float)-*(float *)(v9 + 4 * v7) - *(float *)(a1 + 44);
        v29 = a4;
        v17 = -*(float *)(v10 + 4 * v7);
      }
      else
      {
        v30 = *(float *)(v8 + 4 * v7) - *(float *)(a1 + 28);
        a4.n128_f32[0] = *(float *)(v9 + 4 * v7) - *(float *)(a1 + 44);
        v29 = a4;
        v17 = *(float *)(v10 + 4 * v7);
      }
      v18 = *(float *)(a1 + 12);
      v19 = *(float *)(a1 + 60);
      result = re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(v6, a2);
      v14 = 0;
      a4.n128_f32[0] = v16 - v18;
      a4.n128_f32[1] = v30;
      v21 = v29;
      a4.n128_u32[2] = v29.n128_u32[0];
      a4.n128_f32[3] = v17 - v19;
      *(__n128 *)(v11 + 16 * v6) = a4;
      v6 = *(_QWORD *)a3 + 1;
      *(_QWORD *)a3 = v6;
      ++*(_DWORD *)(a3 + 8);
    }
    while ((v15 & 1) != 0);
    v12 = 0;
    v7 = 1;
  }
  while ((v13 & 1) != 0);
  v21.n128_u32[0] = *(_DWORD *)(a1 + 8);
  v22 = *(float *)(a1 + 24);
  v23 = (float32x4_t)v21;
  v23.f32[1] = v22;
  v24 = *(float *)(a1 + 40);
  v25 = vnegq_f32(v23);
  v25.f32[2] = -v24;
  v26 = vmulq_f32(v25, v25);
  v27 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1)));
  if (sqrtf(v27.f32[0]) > 0.0)
  {
    v25.f32[3] = -*(float *)(a1 + 56);
    v31 = v25;
    result = re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(v6, a2);
    *(float32x4_t *)(v11 + 16 * v6) = v31;
    v6 = *(_QWORD *)a3 + 1;
    *(_QWORD *)a3 = v6;
    ++*(_DWORD *)(a3 + 8);
    v21.n128_u32[0] = *(_DWORD *)(a1 + 8);
    v22 = *(float *)(a1 + 24);
    v24 = *(float *)(a1 + 40);
  }
  v27.f32[0] = (float)-*(float *)(a1 + 12) - v21.n128_f32[0];
  v27.f32[1] = (float)-*(float *)(a1 + 28) - v22;
  v27.f32[2] = (float)-*(float *)(a1 + 44) - v24;
  v28 = vmulq_f32(v27, v27);
  if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0]) > 0.0)
  {
    v27.f32[3] = (float)-*(float *)(a1 + 60) - *(float *)(a1 + 56);
    v32 = v27;
    result = re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(v6, a2);
    *(float32x4_t *)(v11 + 16 * v6) = v32;
    ++*(_QWORD *)a3;
    ++*(_DWORD *)(a3 + 8);
  }
  return result;
}

double re::buildCullingFrustum@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  unsigned int v4;
  char v5;
  uint64_t v6;
  __n128 v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  char v11;
  uint64_t v12;
  char v13;
  const float *v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  const float *v19;
  float32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  float32x4_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  double result;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];

  v4 = 0;
  v5 = 0;
  v6 = 0;
  v40[1] = *MEMORY[0x24BDAC8D0];
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v40[0] = 0x3F80000000000000;
  v7 = *(__n128 *)a2;
  v8 = *((float32x4_t *)a2 + 1);
  v9 = *((float32x4_t *)a2 + 2);
  v10 = *((float32x4_t *)a2 + 3);
  do
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v14 = (const float *)v40 + v6;
    v15 = vld1q_dup_f32(v14);
    v39 = 0x3F800000BF800000;
    do
    {
      v16 = 0;
      v17 = 0;
      v18 = v11;
      v19 = (const float *)&v40[-1] + v12;
      v20 = vld1q_dup_f32(v19);
      v38 = 0x3F800000BF800000;
      v21 = (int)v4;
      LODWORD(v22) = 8 - v4;
      if (v4 <= 8)
        v22 = v22;
      else
        v22 = 0;
      do
      {
        v23 = v16;
        v24 = vaddq_f32(v10, vmlaq_f32(vmlaq_f32(vmulq_n_f32((float32x4_t)v7, *((float *)&v38 + v17)), v20, v8), v15, v9));
        if (v24.f32[3] != 0.0)
          v24 = vdivq_f32(v24, (float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 3));
        if (v17 == v22)
        {
          re::internal::assertLog((re::internal *)6, v17, v16, v7.n128_f64[0], *(double *)v8.i64, *(double *)v9.i64, *(double *)v10.i64, 0.00781250557, *(double *)v15.i64, *(double *)v20.i64, *(double *)v24.i64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v21, 8);
          _os_crash();
          __break(1u);
        }
        *(&v30 + v21++) = (__int128)v24;
        ++v4;
        v16 = 1;
        v17 = 1;
      }
      while ((v23 & 1) == 0);
      v11 = 1;
      v12 = 1;
    }
    while ((v18 & 1) == 0);
    v5 = 1;
    v6 = 1;
  }
  while ((v13 & 1) == 0);
  re::buildCullingPlanes(a1, 1, (uint64_t)a3, v7);
  v25 = v35;
  a3[11] = v34;
  a3[12] = v25;
  v26 = v37;
  a3[13] = v36;
  a3[14] = v26;
  v27 = v31;
  a3[7] = v30;
  a3[8] = v27;
  result = *(double *)&v32;
  v29 = v33;
  a3[9] = v32;
  a3[10] = v29;
  return result;
}

uint64_t re::boundingBoxIntersectFrustums(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x16_t v5;
  int8x16_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int8x16_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int8x16_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x16_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int8x16_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int8x16_t v64;
  uint64_t result;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  char v72;
  uint64_t v73;
  int v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;

  re::transformedAABBVertices(a1, (float32x4_t *)a2, &v81);
  v5 = *(int8x16_t *)(a2 + 16);
  v6 = *(int8x16_t *)(a2 + 32);
  v7 = vmulq_f32(*(float32x4_t *)a2, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v6, v6, 0xCuLL), v6, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), v5, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), v6, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v5, v5, 0xCuLL), v5, 8uLL)));
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0] >= 0.0)
  {
    v38 = vsubq_f32(v81, v82);
    v39 = vsubq_f32(v84, v81);
    v40 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v39, (int32x4_t)v39), (int8x16_t)v39, 0xCuLL), vnegq_f32(v38)), v39, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v38, (int32x4_t)v38), (int8x16_t)v38, 0xCuLL));
    v41 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v40, (int32x4_t)v40), v40, 0xCuLL);
    v42 = vmulq_f32(v82, v41);
    v41.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).f32[0];
    v43 = vsubq_f32(v85, v81);
    v44 = vsubq_f32(v88, v85);
    v45 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v44), (int8x16_t)v44, 0xCuLL), vnegq_f32(v43)), v44, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v43, (int32x4_t)v43), (int8x16_t)v43, 0xCuLL));
    v46 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), v45, 0xCuLL);
    v47 = vmulq_f32(v81, v46);
    v46.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 2), vaddq_f32(v47, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.f32, 1))).f32[0];
    v48 = vsubq_f32(v86, v85);
    v49 = vsubq_f32(v87, v86);
    v50 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL), vnegq_f32(v48)), v49, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v48, (int32x4_t)v48), (int8x16_t)v48, 0xCuLL));
    v51 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), v50, 0xCuLL);
    v52 = vmulq_f32(v85, v51);
    v51.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 2), vaddq_f32(v52, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 1))).f32[0];
    v53 = vsubq_f32(v82, v86);
    v54 = vsubq_f32(v83, v82);
    v55 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v54, (int32x4_t)v54), (int8x16_t)v54, 0xCuLL), vnegq_f32(v53)), v54, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), (int8x16_t)v53, 0xCuLL));
    v56 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v55, (int32x4_t)v55), v55, 0xCuLL);
    v57 = vmulq_f32(v86, v56);
    v56.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 2), vaddq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v57.f32, 1))).f32[0];
    v75 = v41;
    v76 = v46;
    v77 = v51;
    v78 = v56;
    v58 = vsubq_f32(v84, v83);
    v59 = vsubq_f32(v88, v84);
    v60 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v59, (int32x4_t)v59), (int8x16_t)v59, 0xCuLL), vnegq_f32(v58)), v59, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v58, (int32x4_t)v58), (int8x16_t)v58, 0xCuLL));
    v32 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v60, (int32x4_t)v60), v60, 0xCuLL);
    v61 = vmulq_f32(v83, v32);
    v32.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v61, 2), vaddq_f32(v61, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v61.f32, 1))).f32[0];
    v62 = vsubq_f32(v85, v82);
    v63 = vsubq_f32(v81, v85);
    v64 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v63, (int32x4_t)v63), (int8x16_t)v63, 0xCuLL), vnegq_f32(v62)), v63, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v62, (int32x4_t)v62), (int8x16_t)v62, 0xCuLL));
    v36 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v64, (int32x4_t)v64), v64, 0xCuLL);
    v37 = vmulq_f32(v82, v36);
  }
  else
  {
    v8 = vsubq_f32(v81, v84);
    v9 = vsubq_f32(v82, v81);
    v10 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL), vnegq_f32(v8)), v9, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL));
    v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), v10, 0xCuLL);
    v12 = vmulq_f32(v84, v11);
    v11.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0];
    v13 = vsubq_f32(v85, v88);
    v14 = vsubq_f32(v81, v85);
    v15 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), (int8x16_t)v14, 0xCuLL), vnegq_f32(v13)), v14, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL));
    v16 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), v15, 0xCuLL);
    v17 = vmulq_f32(v88, v16);
    v16.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0];
    v18 = vsubq_f32(v86, v87);
    v19 = vsubq_f32(v85, v86);
    v20 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL), vnegq_f32(v18)), v19, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL));
    v21 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), v20, 0xCuLL);
    v22 = vmulq_f32(v87, v21);
    v21.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0];
    v23 = vsubq_f32(v82, v83);
    v24 = vsubq_f32(v86, v82);
    v25 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL), vnegq_f32(v23)), v24, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), (int8x16_t)v23, 0xCuLL));
    v26 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), v25, 0xCuLL);
    v27 = vmulq_f32(v83, v26);
    v26.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0];
    v75 = v11;
    v76 = v16;
    v77 = v21;
    v78 = v26;
    v28 = vsubq_f32(v84, v88);
    v29 = vsubq_f32(v83, v84);
    v30 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29), (int8x16_t)v29, 0xCuLL), vnegq_f32(v28)), v29, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), (int8x16_t)v28, 0xCuLL));
    v32 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), v30, 0xCuLL);
    v31 = vmulq_f32(v88, v32);
    v32.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).f32[0];
    v33 = vsubq_f32(v85, v81);
    v34 = vsubq_f32(v82, v85);
    v35 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL), vnegq_f32(v33)), v34, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v33, (int32x4_t)v33), (int8x16_t)v33, 0xCuLL));
    v36 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), v35, 0xCuLL);
    v37 = vmulq_f32(v81, v36);
  }
  v36.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))).f32[0];
  v79 = v32;
  v80 = v36;
  v73 = 6;
  v74 = 6;
  result = 1;
  if (*(_QWORD *)a3 == 1)
  {
    v72 = 1;
    result = re::boxVerticesIntersectPlanesForFrustumCulling((uint64_t)&v81, a3 + 32, *(_QWORD *)(a3 + 16), &v72, *(unsigned __int8 *)(a3 + 544));
    if ((_DWORD)result && v72)
      return re::frustumVerticesIntersectWithBox((unint64_t *)(a3 + 240), 0, &v75, 6);
  }
  else if (*(_QWORD *)a3 == 2)
  {
    v72 = 1;
    v66 = *(unsigned __int8 *)(a3 + 544);
    v67 = re::boxVerticesIntersectPlanesForFrustumCulling((uint64_t)&v81, a3 + 32, *(_QWORD *)(a3 + 16), &v72, v66);
    if (v67 && v72)
    {
      v68 = re::frustumVerticesIntersectWithBox((unint64_t *)(a3 + 240), 0, &v75, 6);
      v70 = *(_QWORD *)a3;
      v72 = 1;
      if (v70 < 2)
      {
        re::internal::assertLog((re::internal *)6, v69, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 1, v70);
        result = _os_crash();
        __break(1u);
        return result;
      }
      v67 = v68;
      v66 = *(unsigned __int8 *)(a3 + 544);
    }
    else
    {
      v72 = 1;
    }
    v71 = re::boxVerticesIntersectPlanesForFrustumCulling((uint64_t)&v81, a3 + 144, *(_QWORD *)(a3 + 128), &v72, v66 != 0);
    if (v71)
    {
      if (v72)
        v71 = re::frustumVerticesIntersectWithBox((unint64_t *)(a3 + 240), 1, &v75, v73);
    }
    return v67 | v71;
  }
  return result;
}

uint64_t re::transformedAABBVertices@<X0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  __n128 v13[8];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  memset(v13, 0, sizeof(v13));
  result = re::AABB::extractCorners(a1, v13, 8uLL, (__n128)0);
  v6 = 0;
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  do
  {
    v11 = vaddq_f32(v10, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, COERCE_FLOAT(*(_OWORD *)&v13[v6])), v8, (float32x2_t)v13[v6].n128_u64[0], 1), v9, (float32x4_t)v13[v6], 2));
    v12 = vdivq_f32(v11, (float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 3));
    v12.i32[3] = 1.0;
    a3[v6++] = v12;
  }
  while (v6 != 8);
  return result;
}

uint64_t re::boxVerticesIntersectPlanesForFrustumCulling(uint64_t result, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int8x16_t v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  char v15;

  if ((int)a3 < 1)
  {
    v13 = 0;
    result = 1;
  }
  else
  {
    v5 = result;
    v6 = 0;
    v7 = 0;
    LOBYTE(result) = 1;
    do
    {
      v8 = 0;
      v9 = 0;
      if (v6 == 5)
        v10 = a5;
      else
        v10 = 1;
      do
      {
        v11 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a2 + 16 * v6), *(float32x4_t *)(v5 + v8));
        if (vaddv_f32(vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL))) > 0.0)
          v12 = v10;
        else
          v12 = 0;
        v9 += v12;
        v8 += 16;
      }
      while (v8 != 128);
      result = result & (v9 != 8);
      v7 = v7 - v9 + 8;
      ++v6;
    }
    while (v6 != (int)a3);
    v13 = v7;
  }
  if (*a4)
    v14 = v13 == 8 * a3;
  else
    v14 = 1;
  v15 = !v14;
  *a4 = v15;
  return result;
}

uint64_t re::frustumVerticesIntersectWithBox(unint64_t *a1, uint64_t a2, float32x4_t *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  float32x4_t *v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  float32x4_t *i;
  int8x16_t v11;

  v4 = *a1;
  if (!*a1)
    return 1;
  if (v4 <= (int)a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, (int)a2, v4);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v5 = a1[18 * (int)a2 + 2];
  if (!v5 || !a4)
    return 1;
  v6 = &a3[a4];
  v7 = (uint64_t)&a1[18 * (int)a2 + 4];
  result = 1;
  do
  {
    v9 = v5;
    for (i = (float32x4_t *)v7; ; ++i)
    {
      v11 = (int8x16_t)vmulq_f32(*a3, *i);
      if (vaddv_f32(vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL))) <= 0.0)
        break;
      if (!--v9)
        return 0;
    }
    ++a3;
  }
  while (a3 != v6);
  return result;
}

uint64_t re::buildCullingFrustum@<X0>(uint64_t result@<X0>, _DWORD *a2@<X1>, unsigned int a3@<W2>, _BYTE *a4@<X3>, uint64_t a5@<X8>, float32x4_t a6@<Q2>, float32x4_t a7@<Q4>)
{
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float32x4_t v24;
  simd_float4 v25;
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  simd_float4 v32;
  uint64_t v33;
  uint64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t v44;
  __int128 *v45;
  __int128 v46;
  __int128 v47;
  float v48;
  float v49;
  float32x4_t *v50;
  unint64_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  _BOOL4 v63;
  char v64;
  char v65;
  const float *v66;
  float32x4_t *v67;
  __int32 *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  float32x4_t v72;
  int8x16_t v73;
  float32x4_t v74;
  float32x4_t v75;
  uint64_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t v79;
  float32x4_t v80;
  float32x4_t v81;
  uint64_t v82;
  float32x4_t v83;
  int8x16_t v84;
  float32x4_t v85;
  float32x4_t v86;
  uint64_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int8x16_t v90;
  float32x4_t v91;
  float32x4_t v92;
  uint64_t v93;
  uint64_t v94;
  float32x4_t v95;
  int8x16_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  int8x16_t v101;
  float32x4_t v102;
  float32x4_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _DWORD *v107;
  uint64_t v110;
  char v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float v120;
  float v121;
  float32x4_t v122;
  float32x4_t v123;
  simd_float4 v124;
  simd_float4 v125;
  float32x4_t v126;
  simd_float4x4 v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  _OWORD v143[4];
  _OWORD v144[4];
  uint64_t v145;
  simd_float4x4 v146;

  v7 = a4;
  v8 = a5;
  v145 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 240) = 0;
  *(_DWORD *)(a5 + 248) = 0;
  *(_BYTE *)(a5 + 544) = 0;
  if (*a2)
  {
    if (a3)
    {
      v9 = result + 16;
      v10 = (float *)(a2 + 3);
      v11 = a3;
      do
      {
        v126 = *(float32x4_t *)(v9 - 16);
        v12 = *(float *)v9;
        v13 = *(float *)(v9 + 4);
        a6.i32[0] = *(_DWORD *)(v9 + 8);
        v14 = *(float *)(v9 + 12);
        a7.f32[0] = v12 + v12;
        v15 = v13 + v13;
        v16 = (float)(v12 + v12) * v12;
        v17 = (float)(v13 + v13) * v13;
        v18 = (float)(a6.f32[0] + a6.f32[0]) * a6.f32[0];
        v19 = a7.f32[0] * v13;
        v20 = a7.f32[0] * a6.f32[0];
        v21 = v15 * a6.f32[0];
        v22 = a7.f32[0] * v14;
        v23 = v15 * v14;
        a6.f32[0] = (float)(a6.f32[0] + a6.f32[0]) * v14;
        a7.f32[0] = 1.0 - (float)(v17 + v18);
        a7.f32[1] = v19 + a6.f32[0];
        a7.f32[2] = v20 - (float)(v15 * v14);
        a6.f32[0] = v19 - a6.f32[0];
        a6.f32[1] = 1.0 - (float)(v16 + v18);
        a6.f32[2] = v22 + v21;
        v124 = (simd_float4)a7;
        v125 = (simd_float4)a6;
        v120 = v10[1];
        re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(0, (uint64_t)a2);
        v24 = vmulq_f32((float32x4_t)v124, vaddq_f32(v126, vmulq_n_f32((float32x4_t)v124, v120)));
        v25 = v124;
        v25.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0];
        v127.columns[1] = v25;
        v121 = *v10;
        re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(1uLL, v26);
        v27 = vnegq_f32((float32x4_t)v124);
        v28 = vmulq_f32(vaddq_f32(v126, vmulq_n_f32((float32x4_t)v124, v121)), v27);
        v27.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0];
        v127.columns[2] = (simd_float4)v27;
        v27.f32[0] = v10[2];
        v124 = (simd_float4)v27;
        re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(2uLL, v29);
        v30 = vmulq_f32((float32x4_t)v125, vaddq_f32(v126, vmulq_n_f32((float32x4_t)v125, v124.f32[0])));
        v31 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1)));
        v32 = v125;
        v32.f32[3] = -v31.f32[0];
        v127.columns[3] = v32;
        v31.f32[0] = v10[3];
        v124 = (simd_float4)v31;
        re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(3uLL, v33);
        v37 = vnegq_f32((float32x4_t)v125);
        v35 = vmulq_f32(vaddq_f32(v126, vmulq_n_f32((float32x4_t)v125, v124.f32[0])), v37);
        v36 = vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1));
        v37.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), v36).f32[0];
        v128 = v37;
        v127.columns[0].i64[0] = 4;
        v127.columns[0].i32[2] = 4;
        if (*v7)
        {
          v36.f32[0] = v20 + v23;
          v36.f32[1] = v21 - v22;
          v36.f32[2] = 1.0 - (float)(v16 + v17);
          v37.f32[0] = *(v10 - 1);
          v124 = (simd_float4)v37;
          v125 = (simd_float4)v36;
          re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(4uLL, v34);
          v38 = vmulq_f32((float32x4_t)v125, vaddq_f32(v126, vmulq_n_f32((float32x4_t)v125, v124.f32[0])));
          v39 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1)));
          v40 = (float32x4_t)v125;
          v40.f32[3] = -v39.f32[0];
          v129 = v40;
          v39.f32[0] = *(v10 - 2);
          v124 = (simd_float4)v39;
          re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(5uLL, v41);
          v42 = vnegq_f32((float32x4_t)v125);
          v43 = vmulq_f32(vaddq_f32(v126, vmulq_n_f32((float32x4_t)v125, v124.f32[0])), v42);
          v42.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).f32[0];
          v130 = v42;
          v127.columns[0].i64[0] = 6;
          v127.columns[0].i32[2] = 6;
        }
        result = re::DynamicInlineArray<re::DynamicInlineArray<re::PlaneF,6ul>,2ul>::add(v8, (uint64_t *)&v127);
        v9 += 32;
        v10 += 16;
        --v11;
      }
      while (v11);
    }
    goto LABEL_37;
  }
  if (!a3)
    goto LABEL_37;
  v44 = 0;
  v104 = a3;
  v105 = a5 + 240;
  v106 = result;
  v107 = a2;
  do
  {
    v45 = (__int128 *)&a2[16 * v44];
    v46 = v45[1];
    v132 = *v45;
    v133 = v46;
    v47 = v45[3];
    v134 = v45[2];
    v135 = v47;
    v48 = *((float *)&v132 + 2);
    BYTE12(v133) = 0;
    v49 = 1000.0;
    if (*((float *)&v132 + 2) != INFINITY)
      v49 = *((float *)&v132 + 2);
    *((float *)&v132 + 2) = v49;
    v110 = v44;
    v50 = (float32x4_t *)(result + 32 * v44);
    v113 = *v50;
    re::Projection::computeMatrix4x4F((re::Projection *)&v132, (uint64_t)v144);
    re::RenderCamera::computeInverseTransform(v50, (uint64_t)v143);
    v51 = 0;
    v52 = (float32x4_t)v144[0];
    v53 = (float32x4_t)v144[1];
    v54 = (float32x4_t)v144[2];
    v55 = (float32x4_t)v144[3];
    v136 = v143[0];
    v137 = (float32x4_t)v143[1];
    v138 = (float32x4_t)v143[2];
    v139 = (float32x4_t)v143[3];
    do
    {
      v127.columns[v51 / 0x10] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v52, COERCE_FLOAT(*(__int128 *)((char *)&v136 + v51))), v53, *(float32x2_t *)((char *)&v136 + v51), 1), v54, *(float32x4_t *)((char *)&v136 + v51), 2), v55, *(float32x4_t *)((char *)&v136 + v51), 3);
      v51 += 16;
    }
    while (v51 != 64);
    v146 = __invert_f4(v127);
    v118 = (float32x4_t)v146.columns[1];
    v122 = (float32x4_t)v146.columns[0];
    v114 = (float32x4_t)v146.columns[3];
    v116 = (float32x4_t)v146.columns[2];
    v57 = 0;
    LODWORD(v58) = 0;
    v59 = 0;
    v60 = 0;
    v127.columns[0].i64[0] = 0;
    v127.columns[0].i32[2] = 0;
    *(_QWORD *)&v136 = 1065353216;
    do
    {
      v61 = 0;
      v62 = 0;
      v111 = v59;
      v146.columns[0].i32[0] = *((_DWORD *)&v136 + v60);
      *(_QWORD *)&v144[0] = 0x3F800000BF800000;
      v63 = v146.columns[0].f32[0] == 0.0 && v48 == INFINITY;
      v124 = (simd_float4)vdupq_lane_s32(*(int32x2_t *)v146.columns[0].f32, 0);
      do
      {
        v64 = 0;
        v65 = v61;
        v66 = (const float *)v144 + v62;
        v146.columns[0] = (simd_float4)vld1q_dup_f32(v66);
        v125 = v146.columns[0];
        *(_QWORD *)&v143[0] = 0x3F800000BF800000;
        v67 = (float32x4_t *)(&v124 + (int)v58);
        v58 = (int)v58;
        v68 = (__int32 *)v143;
        v69 = 1;
        do
        {
          v70 = v64;
          if (v63)
          {
            if (v57 <= v58 - 4)
            {
              re::internal::assertLog((re::internal *)6, v56, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v58 - 4, v57);
              _os_crash();
              __break(1u);
LABEL_39:
              re::internal::assertLog((re::internal *)6, v56, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, 0, 0);
              _os_crash();
              __break(1u);
LABEL_40:
              re::internal::assertLog((re::internal *)6, v56, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, 1, 1);
              _os_crash();
              __break(1u);
LABEL_41:
              re::internal::assertLog((re::internal *)6, v56, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, 3, v57);
              _os_crash();
              __break(1u);
              goto LABEL_42;
            }
            v146.columns[0].i64[0] = v67->i64[0];
            v146.columns[0].i32[2] = v67->i32[2];
            v126 = (float32x4_t)v146.columns[0];
            re::DynamicInlineArray<re::Vector4<float>,8ul>::ensureCapacity(v57, v56);
            v146.columns[0] = (simd_float4)vsubq_f32(v126, v113);
            v146.columns[0].i32[3] = 0;
          }
          else
          {
            v146.columns[0].i32[0] = *v68;
            v126 = (float32x4_t)v146.columns[0];
            re::DynamicInlineArray<re::Vector4<float>,8ul>::ensureCapacity(v57, v56);
            v146.columns[0] = (simd_float4)vaddq_f32(v114, vmlaq_f32(vmlaq_f32(vmulq_n_f32(v122, v126.f32[0]), (float32x4_t)v125, v118), (float32x4_t)v124, v116));
            v146.columns[0] = (simd_float4)vdivq_f32((float32x4_t)v146.columns[0], (float32x4_t)vdupq_laneq_s32((int32x4_t)v146.columns[0], 3));
            v146.columns[0].i32[3] = 1.0;
          }
          v127.columns[v57 + 1] = v146.columns[0];
          v71 = v127.columns[0].i64[0];
          v57 = ++v127.columns[0].i64[0];
          ++v127.columns[0].i32[2];
          ++v58;
          v68 = (__int32 *)v143 + v69;
          ++v67;
          v64 = 1;
          v69 = 2;
        }
        while ((v70 & 1) == 0);
        v61 = 1;
        v62 = 1;
      }
      while ((v65 & 1) == 0);
      v59 = 1;
      v60 = 1;
    }
    while ((v111 & 1) == 0);
    if (!v57)
      goto LABEL_39;
    v8 = a5;
    v7 = a4;
    if (!v71)
      goto LABEL_40;
    if (v57 <= 3)
      goto LABEL_41;
    v124 = v127.columns[2];
    v125 = (simd_float4)v128;
    v126 = (float32x4_t)v127.columns[1];
    re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(0, v56);
    v72 = vsubq_f32((float32x4_t)v124, v126);
    v117 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v72, (int32x4_t)v72), (int8x16_t)v72, 0xCuLL);
    v119 = v72;
    v115 = vsubq_f32((float32x4_t)v125, (float32x4_t)v124);
    v112 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v115, (int32x4_t)v115), (int8x16_t)v115, 0xCuLL);
    v73 = (int8x16_t)vmlaq_f32(vmulq_f32(v112, vnegq_f32(v72)), v115, v117);
    v74 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v73, (int32x4_t)v73), v73, 0xCuLL);
    v75 = vmulq_f32(v126, v74);
    v74.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v75, 2), vaddq_f32(v75, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v75.f32, 1))).f32[0];
    v137 = v74;
    v123 = (float32x4_t)v127.columns[3];
    re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(1uLL, v76);
    v77 = vsubq_f32(v123, v113);
    v78 = vsubq_f32(v126, v123);
    v79 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v78, (int32x4_t)v78), (int8x16_t)v78, 0xCuLL), vnegq_f32(v77)), v78, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v77, (int32x4_t)v77), (int8x16_t)v77, 0xCuLL));
    v80 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v79, (int32x4_t)v79), v79, 0xCuLL);
    v81 = vmulq_f32(v113, v80);
    v80.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v81, 2), vaddq_f32(v81, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.f32, 1))).f32[0];
    v138 = v80;
    re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(2uLL, v82);
    v83 = vsubq_f32((float32x4_t)v124, v113);
    v84 = (int8x16_t)vmlaq_f32(vmulq_f32(v112, vnegq_f32(v83)), v115, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v83, (int32x4_t)v83), (int8x16_t)v83, 0xCuLL));
    v85 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v84, (int32x4_t)v84), v84, 0xCuLL);
    v86 = vmulq_f32(v113, v85);
    v85.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v86, 2), vaddq_f32(v86, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.f32, 1))).f32[0];
    v139 = v85;
    re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(3uLL, v87);
    v88 = vsubq_f32((float32x4_t)v125, v113);
    v89 = vsubq_f32(v123, (float32x4_t)v125);
    v90 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v89, (int32x4_t)v89), (int8x16_t)v89, 0xCuLL), vnegq_f32(v88)), v89, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v88, (int32x4_t)v88), (int8x16_t)v88, 0xCuLL));
    v91 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v90, (int32x4_t)v90), v90, 0xCuLL);
    v92 = vmulq_f32(v113, v91);
    v91.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v92, 2), vaddq_f32(v92, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v92.f32, 1))).f32[0];
    v140 = v91;
    re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(4uLL, v93);
    v95 = vsubq_f32(v126, v113);
    v96 = (int8x16_t)vmlaq_f32(vmulq_f32(v117, vnegq_f32(v95)), v119, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v95, (int32x4_t)v95), (int8x16_t)v95, 0xCuLL));
    v97 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v96, (int32x4_t)v96), v96, 0xCuLL);
    v98 = vmulq_f32(v113, v97);
    v97.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v98, 2), vaddq_f32(v98, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.f32, 1))).f32[0];
    v141 = v97;
    *(_QWORD *)&v136 = 5;
    DWORD2(v136) = 5;
    if (*a4 && v48 != INFINITY)
    {
      if (v57 > 7)
      {
        v124 = (simd_float4)v130;
        v125 = (simd_float4)v131;
        v126 = v129;
        re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(5uLL, v94);
        v99 = vsubq_f32((float32x4_t)v124, (float32x4_t)v125);
        v100 = vsubq_f32(v126, (float32x4_t)v124);
        v101 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v100, (int32x4_t)v100), (int8x16_t)v100, 0xCuLL), vnegq_f32(v99)), v100, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v99, (int32x4_t)v99), (int8x16_t)v99, 0xCuLL));
        v102 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v101, (int32x4_t)v101), v101, 0xCuLL);
        v103 = vmulq_f32((float32x4_t)v125, v102);
        v102.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v103, 2), vaddq_f32(v103, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v103.f32, 1))).f32[0];
        v142 = v102;
        *(_QWORD *)&v136 = 6;
        DWORD2(v136) = 6;
        goto LABEL_34;
      }
LABEL_42:
      re::internal::assertLog((re::internal *)6, v94, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, 7, v57);
      _os_crash();
      __break(1u);
    }
LABEL_34:
    re::DynamicInlineArray<re::DynamicInlineArray<re::PlaneF,6ul>,2ul>::add(a5, (uint64_t *)&v136);
    if (a4[1])
      re::DynamicInlineArray<re::DynamicInlineArray<re::Vector4<float>,8ul>,2ul>::add(v105, (uint64_t *)&v127);
    v44 = v110 + 1;
    result = v106;
    a2 = v107;
  }
  while (v110 + 1 != v104);
LABEL_37:
  *(_BYTE *)(v8 + 544) = *v7;
  return result;
}

uint64_t re::DynamicInlineArray<re::DynamicInlineArray<re::PlaneF,6ul>,2ul>::add(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (*(_QWORD *)a1 >= 2uLL)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    v3 = a1 + 112 * *(_QWORD *)a1;
    *(_QWORD *)(v3 + 16) = 0;
    *(_DWORD *)(v3 + 24) = 0;
    v4 = *a2;
    result = (uint64_t)memcpy((void *)(v3 + 32), a2 + 2, 16 * *a2);
    *(_QWORD *)(v3 + 16) = v4;
    ++*(_QWORD *)a1;
    ++*(_DWORD *)(a1 + 8);
  }
  return result;
}

uint64_t re::DynamicInlineArray<re::DynamicInlineArray<re::Vector4<float>,8ul>,2ul>::add(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (*(_QWORD *)a1 >= 2uLL)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    v3 = a1 + 144 * *(_QWORD *)a1;
    *(_QWORD *)(v3 + 16) = 0;
    *(_DWORD *)(v3 + 24) = 0;
    v4 = *a2;
    result = (uint64_t)memcpy((void *)(v3 + 32), a2 + 2, 16 * *a2);
    *(_QWORD *)(v3 + 16) = v4;
    ++*(_QWORD *)a1;
    ++*(_DWORD *)(a1 + 8);
  }
  return result;
}

uint64_t re::isBoundingBoxInsidePlanes(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  uint64_t v4;
  float32x4_t *v5;
  uint64_t v6;
  uint64_t v7;
  int8x16_t v8;
  _OWORD v10[8];

  if (*(_QWORD *)(a2 + 8))
  {
    re::transformedAABBVertices(a1, a3, v10);
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      v5 = *(float32x4_t **)a2;
      v6 = *(_QWORD *)a2 + 16 * v4;
      do
      {
        v7 = 0;
        while (1)
        {
          v8 = (int8x16_t)vmulq_f32(*v5, (float32x4_t)v10[v7]);
          if (vaddv_f32(vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL))) <= 0.0)
            break;
          if (++v7 == 8)
            return 0;
        }
        ++v5;
      }
      while (v5 != (float32x4_t *)v6);
    }
  }
  return 1;
}

uint64_t re::isBoundingBoxInsidePlanesArray(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  float32x4_t *v6;
  uint64_t v7;
  uint64_t i;
  int8x16_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  float32x4_t *v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  _OWORD v17[8];

  if (a2->i64[0] == 1)
  {
    v10 = a2[1].i64[0];
    *(_QWORD *)&v17[0] = a2 + 2;
    *((_QWORD *)&v17[0] + 1) = v10;
    return re::isBoundingBoxInsidePlanes(a1, (uint64_t)v17, a3);
  }
  if (a2->i64[0] != 2)
    return 0;
  if (!a2[1].i64[0] || !a2[8].i64[0])
    return 1;
  re::transformedAABBVertices(a1, a3, v17);
  if (a2->i64[0])
  {
    v5 = a2[1].i64[0];
    if (v5)
    {
      v6 = a2 + 2;
      v7 = (uint64_t)&a2[v5 + 2];
LABEL_8:
      for (i = 0; i != 8; ++i)
      {
        v9 = (int8x16_t)vmulq_f32(*v6, (float32x4_t)v17[i]);
        if (vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL))) <= 0.0)
        {
          if (++v6 != (float32x4_t *)v7)
            goto LABEL_8;
          return 1;
        }
      }
      if (a2->i64[0] <= 1uLL)
        goto LABEL_27;
      v12 = a2[8].i64[0];
      if (v12)
      {
        v13 = a2 + 9;
        v14 = (uint64_t)&a2[v12 + 9];
        result = 1;
        do
        {
          v15 = 0;
          while (1)
          {
            v16 = (int8x16_t)vmulq_f32(*v13, (float32x4_t)v17[v15]);
            if (vaddv_f32(vadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL))) <= 0.0)
              break;
            if (++v15 == 8)
              return 0;
          }
          ++v13;
        }
        while (v13 != (float32x4_t *)v14);
        return result;
      }
    }
    return 1;
  }
  re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
  _os_crash();
  __break(1u);
LABEL_27:
  re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 1, 1);
  result = _os_crash();
  __break(1u);
  return result;
}

BOOL re::isBoundingSphereIntersectingFrustumPlanes(float32x4_t *a1, _QWORD *a2, double a3, double a4, float32x4_t a5)
{
  _QWORD *v5;
  float32x4_t v6;
  float v7;
  float32x4_t v8;
  float32x4_t v9;
  _BOOL8 result;

  if (!*a2)
    return 1;
  v5 = a2 + 2;
  v6 = *a1;
  LODWORD(v7) = HIDWORD(*(unsigned __int128 *)a1);
  do
  {
    a5.i64[0] = *v5;
    a5.i32[2] = *((_DWORD *)v5 + 2);
    v8 = vmulq_f32(a5, a5);
    v9 = vmulq_f32(v6, a5);
    a5 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1)));
    a5.f32[0] = (float)(*((float *)v5 + 3) + a5.f32[0])
              / sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0]);
    result = a5.f32[0] <= v7;
    v5 += 2;
  }
  while (a5.f32[0] <= v7 && v5 != &a2[2 * *a2 + 2]);
  return result;
}

uint64_t re::approxFrustumIntersectFrustum(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t *v2;
  uint64_t v3;
  int8x16_t v4;
  float32x4_t *v5;
  float32x4_t *v6;
  uint64_t v7;
  int8x16_t v8;
  uint64_t result;

  if (!a1->i64[0] || !a2->i64[0])
    return 1;
  v2 = a1 + 1;
  do
  {
    v3 = 0;
    while (1)
    {
      v4 = (int8x16_t)vmulq_f32(*v2, a2[v3 + 7]);
      if (vaddv_f32(vadd_f32(*(float32x2_t *)v4.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL))) <= 0.0)
        break;
      if (++v3 == 8)
        return 0;
    }
    ++v2;
  }
  while (v2 != &a1[a1->i64[0] + 1]);
  v5 = a1 + 7;
  v6 = a2 + 1;
  do
  {
    v7 = 0;
    while (1)
    {
      v8 = (int8x16_t)vmulq_f32(*v6, v5[v7]);
      if (vaddv_f32(vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL))) <= 0.0)
        break;
      result = 0;
      if (++v7 == 8)
        return result;
    }
    ++v6;
    result = 1;
  }
  while (v6 != &a2[a2->i64[0] + 1]);
  return result;
}

_DWORD *re::setResolvedTechniqueStateOverride(_DWORD *result, re::MaterialParameterTableLayers *this)
{
  unsigned int v2;
  _DWORD *v3;
  int v4;

  v2 = result[36];
  if (v2 != -1)
  {
    v3 = result;
    result = (_DWORD *)re::MaterialParameterTableLayers::getTechniqueAtIndex(this, v2);
    if (result)
    {
      if (*(_BYTE *)(*(_QWORD *)result + 2846))
      {
        *((_BYTE *)v3 + 176) = 1;
        v4 = v3[45];
        if ((v4 & 0x1000000) == 0)
          *((_BYTE *)v3 + 177) |= 4u;
        if ((v4 & 0x800000) == 0)
          *((_BYTE *)v3 + 177) |= 1u;
      }
    }
  }
  return result;
}

double re::bucketMeshPart(uint64_t a1, int8x16_t *a2, uint64_t a3, uint64_t a4, _WORD *a5)
{
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  re::MaterialParameterTable *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  char v35;
  char v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t v54;
  __int16 v55;
  unint64_t v56;
  _OWORD *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  int v69;
  uint64_t v71;
  char v73;
  unsigned int v74;
  unsigned int *v75;
  __int128 v76;
  __int128 v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int8x16_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  const char *v85;
  __int16 v86;
  int v87;
  __int16 v88;
  unint64_t v89;
  __int16 v90;
  unint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a3 + 24);
  v76 = 0u;
  v77 = 0u;
  v78 = 0;
  v79 = 0x7FFFFFFFLL;
  re::HashSetBase<unsigned int,unsigned int,re::internal::ValueAsKey<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::init((uint64_t)&v76, v8, 10);
  if (re::s_debugSettingsManager)
  {
    LOBYTE(v84) = 0;
    *(_QWORD *)&v92 = 0x38C0AA772CC1B274;
    *((_QWORD *)&v92 + 1) = "overrides:usepbrlite";
    v9 = re::DebugSettingsManager::getWithErrorCode<BOOL>(re::s_debugSettingsManager, &v92, &v84);
    re::StringID::destroyString((re::StringID *)&v92);
    v10 = v84;
    if (v9)
      v10 = 0;
    v73 = v10;
  }
  else
  {
    v73 = 0;
  }
  v11 = 0;
  v81 = vextq_s8(a2[3], a2[3], 8uLL);
  v12 = a2[2].i64[1] + 224;
  v82 = a2[4].i64[1];
  v83 = v12;
  while (1)
  {
    v13 = v81.i64[v11];
    if (v13)
    {
      *(_QWORD *)&v92 = a2[9].i64[0];
      if (re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(v13 + 1032, (uint64_t *)&v92))
      {
        break;
      }
    }
    if (++v11 == 4)
    {
      v69 = 1;
      goto LABEL_12;
    }
  }
  v69 = 0;
LABEL_12:
  v14 = 0;
  do
  {
    v71 = v14;
    v15 = (re::MaterialParameterTable *)v81.i64[v14];
    if (v15)
    {
      v16 = (unsigned int *)re::MaterialParameterTable::passTechniqueHashTable(v15, a2[9].i64[0], v69);
      v17 = v16[8];
      if ((_DWORD)v17)
      {
        v18 = 0;
        v19 = (int *)*((_QWORD *)v16 + 2);
        while (1)
        {
          v20 = *v19;
          v19 += 6;
          if (v20 < 0)
            break;
          if (v17 == ++v18)
          {
            LODWORD(v18) = v16[8];
            break;
          }
        }
      }
      else
      {
        LODWORD(v18) = 0;
      }
      if ((_DWORD)v17 != (_DWORD)v18)
      {
        v21 = v18;
        v22 = *((_QWORD *)v16 + 2);
        v23 = v16[8];
        v74 = v23;
        v75 = v16;
        while (1)
        {
          v24 = v22 + 24 * v21;
          v27 = *(_QWORD *)(v24 + 8);
          v26 = (uint64_t *)(v24 + 8);
          v25 = v27;
          if (DWORD2(v77))
          {
            v28 = *(unsigned int *)(*((_QWORD *)&v76 + 1) + 4 * (v25 % DWORD2(v77)));
            if ((_DWORD)v28 != 0x7FFFFFFF)
            {
              while (*(_QWORD *)(v77 + 16 * v28 + 8) != v25)
              {
                v28 = *(_DWORD *)(v77 + 16 * v28) & 0x7FFFFFFF;
                if ((_DWORD)v28 == 0x7FFFFFFF)
                  goto LABEL_28;
              }
              goto LABEL_49;
            }
          }
LABEL_28:
          v29 = re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a4, v26);
          if (!v29)
          {
            v40 = *(_QWORD *)(a3 + 24);
            v92 = 0uLL;
            LODWORD(v93) = 1;
            v94 = 0uLL;
            *((_QWORD *)&v93 + 1) = 0;
            LODWORD(v95) = 0;
            re::BucketArray<re::MeshPartDrawContext,128ul>::init((uint64_t)&v92, v40, 1uLL);
            DWORD2(v95) = 0;
            v29 = re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(a4, (unint64_t *)v26, (uint64_t)&v92);
            re::BucketArray<re::MeshPartDrawContext,128ul>::deinit((uint64_t)&v92);
            if ((_QWORD)v92)
            {
              if ((v93 & 1) == 0)
                (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v92 + 40))(v92, v94);
            }
          }
          *(_WORD *)(a1 + 148) = 0;
          *(_BYTE *)(a1 + 150) = 0;
          v30 = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a2[2].i64[1] + 24, v26 + 1);
          if (!v30)
            break;
          v31 = v30;
          v32 = *(char *)(v30 + 24);
          if ((v32 & 0x80000000) == 0)
          {
            v33 = a4;
            v34 = *(_DWORD *)(a1 + 180);
            if ((v34 & 0x400) != 0)
              v35 = 0;
            else
              v35 = -2;
            if ((v34 & 0x100) != 0)
              v36 = ((v34 >> 9) | 0xFE) + v35;
            else
              v36 = (v34 >> 9) & 3;
            if ((*(_DWORD *)(a1 + 180) & 0x700) == 0x100)
              v36 = v73;
            v37 = (char)(v36 + v32);
            v38 = *(_QWORD *)(v30 + 8);
            if (v37 >= (char)(v38 - 1))
              v37 = (char)(v38 - 1);
            v39 = v37 & ~(v37 >> 31);
            if (v38 <= v39)
            {
              v80 = 0;
              v95 = 0u;
              v96 = 0u;
              v93 = 0u;
              v94 = 0u;
              v92 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v84 = 136315906;
              v85 = "operator[]";
              v86 = 1024;
              v87 = 476;
              v88 = 2048;
              v89 = v39;
              v90 = 2048;
              v91 = v38;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)(v30 + 16) + 4 * v39);
            re::setResolvedTechniqueStateOverride((_DWORD *)a1, (re::MaterialParameterTableLayers *)a2);
            a4 = v33;
            goto LABEL_47;
          }
          v54 = *(_QWORD *)(v30 + 8);
          if (v54 >= 2)
          {
            v55 = (*a5)++;
            *(_WORD *)(a1 + 148) = v55;
LABEL_61:
            v56 = 0;
            do
            {
              *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)(v31 + 16) + 4 * v56);
              *(_BYTE *)(a1 + 150) = v56;
              re::setResolvedTechniqueStateOverride((_DWORD *)a1, (re::MaterialParameterTableLayers *)a2);
              v57 = (_OWORD *)re::BucketArray<re::MeshPartDrawContext,128ul>::addUninitialized(v29);
              v58 = *(_OWORD *)(a1 + 16);
              *v57 = *(_OWORD *)a1;
              v57[1] = v58;
              v59 = *(_OWORD *)(a1 + 80);
              v61 = *(_OWORD *)(a1 + 32);
              v60 = *(_OWORD *)(a1 + 48);
              v57[4] = *(_OWORD *)(a1 + 64);
              v57[5] = v59;
              v57[2] = v61;
              v57[3] = v60;
              v62 = *(_OWORD *)(a1 + 144);
              v64 = *(_OWORD *)(a1 + 96);
              v63 = *(_OWORD *)(a1 + 112);
              v57[8] = *(_OWORD *)(a1 + 128);
              v57[9] = v62;
              v57[6] = v64;
              v57[7] = v63;
              v65 = *(_OWORD *)(a1 + 208);
              v67 = *(_OWORD *)(a1 + 160);
              v66 = *(_OWORD *)(a1 + 176);
              v57[12] = *(_OWORD *)(a1 + 192);
              v57[13] = v65;
              v57[10] = v67;
              v57[11] = v66;
              ++v56;
            }
            while (v56 < *(_QWORD *)(v31 + 8));
            goto LABEL_48;
          }
          if (v54)
            goto LABEL_61;
LABEL_48:
          re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add((uint64_t)&v76, (unint64_t *)v26);
          LODWORD(v17) = v74;
          v23 = v75[8];
          v22 = *((_QWORD *)v75 + 2);
LABEL_49:
          if (v23 <= (int)v18 + 1)
            v52 = v18 + 1;
          else
            v52 = v23;
          while (1)
          {
            v21 = (v18 + 1);
            if (v52 - 1 == (_DWORD)v18)
              break;
            LODWORD(v18) = v18 + 1;
            v53 = v21;
            if ((*(_DWORD *)(v22 + 24 * v21) & 0x80000000) != 0)
              goto LABEL_56;
          }
          v53 = v52;
LABEL_56:
          LODWORD(v18) = v53;
          if ((_DWORD)v17 == v53)
            goto LABEL_21;
        }
        *(_DWORD *)(a1 + 144) = -1;
LABEL_47:
        v41 = (_OWORD *)re::BucketArray<re::MeshPartDrawContext,128ul>::addUninitialized(v29);
        v42 = *(_OWORD *)(a1 + 16);
        *v41 = *(_OWORD *)a1;
        v41[1] = v42;
        v43 = *(_OWORD *)(a1 + 80);
        v45 = *(_OWORD *)(a1 + 32);
        v44 = *(_OWORD *)(a1 + 48);
        v41[4] = *(_OWORD *)(a1 + 64);
        v41[5] = v43;
        v41[2] = v45;
        v41[3] = v44;
        v46 = *(_OWORD *)(a1 + 144);
        v48 = *(_OWORD *)(a1 + 96);
        v47 = *(_OWORD *)(a1 + 112);
        v41[8] = *(_OWORD *)(a1 + 128);
        v41[9] = v46;
        v41[6] = v48;
        v41[7] = v47;
        v49 = *(_OWORD *)(a1 + 208);
        v51 = *(_OWORD *)(a1 + 160);
        v50 = *(_OWORD *)(a1 + 176);
        v41[12] = *(_OWORD *)(a1 + 192);
        v41[13] = v49;
        v41[10] = v51;
        v41[11] = v50;
        goto LABEL_48;
      }
    }
LABEL_21:
    v14 = v71 + 1;
  }
  while (v71 != 3);
  return re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)&v76);
}

unint64_t re::DynamicInlineArray<re::PlaneF,6ul>::ensureCapacity(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (result > 5)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277, v2, v3);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

unint64_t re::DynamicInlineArray<re::Vector4<float>,8ul>::ensureCapacity(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (result > 7)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277, v2, v3);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::DrawCallSortKey<3ul,unsigned long long>::appendUInt8(uint64_t result, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (v3 >= 0x18)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) SortKey trying to use %zu bytes when it only has capacity for %zu.", "(size_t)inoutByteOffset + byteCount <= WordCount * sizeof(WordType)", "appendBytesToKey", 19, v3 + 1, 24);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    *(_BYTE *)(result - v3 + 23) = a2;
    ++*a3;
  }
  return result;
}

uint64_t re::DrawCallSortKey<3ul,unsigned long long>::appendUInt16(uint64_t result, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (v3 >= 0x17)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) SortKey trying to use %zu bytes when it only has capacity for %zu.", "(size_t)inoutByteOffset + byteCount <= WordCount * sizeof(WordType)", "appendBytesToKey", 19, v3 + 2, 24);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    *(_WORD *)(result - v3 + 22) = a2;
    *a3 += 2;
  }
  return result;
}

uint64_t re::DrawCallSortKey<3ul,unsigned long long>::appendUInt64(uint64_t result, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (v3 >= 0x11)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) SortKey trying to use %zu bytes when it only has capacity for %zu.", "(size_t)inoutByteOffset + byteCount <= WordCount * sizeof(WordType)", "appendBytesToKey", 19, v3 + 8, 24);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(result - v3 + 16) = a2;
    *a3 += 8;
  }
  return result;
}

uint64_t re::DrawCallSortKey<3ul,unsigned long long>::appendBytes(uint64_t a1, uint64_t a2, uint64_t a3, size_t __n, _BYTE *a5)
{
  uint64_t v5;
  char v7;
  uint64_t result;
  uint64_t v9;

  v9 = a2;
  v5 = *a5;
  if (v5 + __n >= 0x19)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) SortKey trying to use %zu bytes when it only has capacity for %zu.", "(size_t)inoutByteOffset + byteCount <= WordCount * sizeof(WordType)", "appendBytesToKey", 19, v5 + __n, 24);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    v7 = __n;
    result = (uint64_t)memcpy((void *)(a1 + (24 - __n - v5)), (char *)&v9 + a3, __n);
    *a5 += v7;
  }
  return result;
}

uint64_t re::DrawCallSortKey<4ul,unsigned long long>::appendFloat(uint64_t result, _BYTE *a2, float a3)
{
  uint64_t v3;

  v3 = *a2;
  if (v3 >= 0x1D)
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) SortKey trying to use %zu bytes when it only has capacity for %zu.", "(size_t)inoutByteOffset + byteCount <= WordCount * sizeof(WordType)", "appendBytesToKey", 19, v3 + 4, 32);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    *(_DWORD *)(result - v3 + 28) = ((SLODWORD(a3) >> 31) | 0x80000000) ^ LODWORD(a3);
    *a2 += 4;
  }
  return result;
}

uint64_t re::DrawCallSortKey<4ul,unsigned long long>::appendInt8(uint64_t result, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (v3 >= 0x20)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) SortKey trying to use %zu bytes when it only has capacity for %zu.", "(size_t)inoutByteOffset + byteCount <= WordCount * sizeof(WordType)", "appendBytesToKey", 19, v3 + 1, 32);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    *(_BYTE *)(result - v3 + 31) = a2 ^ 0x80;
    ++*a3;
  }
  return result;
}

uint64_t re::DrawCallSortKey<4ul,unsigned long long>::appendInt32(uint64_t result, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (v3 >= 0x1D)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) SortKey trying to use %zu bytes when it only has capacity for %zu.", "(size_t)inoutByteOffset + byteCount <= WordCount * sizeof(WordType)", "appendBytesToKey", 19, v3 + 4, 32);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    *(_DWORD *)(result - v3 + 28) = a2 ^ 0x80000000;
    *a3 += 4;
  }
  return result;
}

uint64_t re::DrawCallSortKey<4ul,unsigned long long>::appendUInt8(uint64_t result, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (v3 >= 0x20)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) SortKey trying to use %zu bytes when it only has capacity for %zu.", "(size_t)inoutByteOffset + byteCount <= WordCount * sizeof(WordType)", "appendBytesToKey", 19, v3 + 1, 32);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    *(_BYTE *)(result - v3 + 31) = a2;
    ++*a3;
  }
  return result;
}

uint64_t re::DrawCallSortKey<4ul,unsigned long long>::appendUInt16(uint64_t result, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (v3 >= 0x1F)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) SortKey trying to use %zu bytes when it only has capacity for %zu.", "(size_t)inoutByteOffset + byteCount <= WordCount * sizeof(WordType)", "appendBytesToKey", 19, v3 + 2, 32);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    *(_WORD *)(result - v3 + 30) = a2;
    *a3 += 2;
  }
  return result;
}

uint64_t re::DrawCallSortKey<4ul,unsigned long long>::appendUInt32(uint64_t result, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (v3 >= 0x1D)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) SortKey trying to use %zu bytes when it only has capacity for %zu.", "(size_t)inoutByteOffset + byteCount <= WordCount * sizeof(WordType)", "appendBytesToKey", 19, v3 + 4, 32);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    *(_DWORD *)(result - v3 + 28) = a2;
    *a3 += 4;
  }
  return result;
}

uint64_t re::DrawCallSortKey<5ul,unsigned long long>::appendFloat(uint64_t result, _BYTE *a2, float a3)
{
  uint64_t v3;

  v3 = *a2;
  if (v3 >= 0x25)
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) SortKey trying to use %zu bytes when it only has capacity for %zu.", "(size_t)inoutByteOffset + byteCount <= WordCount * sizeof(WordType)", "appendBytesToKey", 19, v3 + 4, 40);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    *(_DWORD *)(result - v3 + 36) = ((SLODWORD(a3) >> 31) | 0x80000000) ^ LODWORD(a3);
    *a2 += 4;
  }
  return result;
}

uint64_t re::DrawCallSortKey<5ul,unsigned long long>::appendInt8(uint64_t result, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (v3 >= 0x28)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) SortKey trying to use %zu bytes when it only has capacity for %zu.", "(size_t)inoutByteOffset + byteCount <= WordCount * sizeof(WordType)", "appendBytesToKey", 19, v3 + 1, 40);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    *(_BYTE *)(result - v3 + 39) = a2 ^ 0x80;
    ++*a3;
  }
  return result;
}

uint64_t re::DrawCallSortKey<5ul,unsigned long long>::appendInt32(uint64_t result, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (v3 >= 0x25)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) SortKey trying to use %zu bytes when it only has capacity for %zu.", "(size_t)inoutByteOffset + byteCount <= WordCount * sizeof(WordType)", "appendBytesToKey", 19, v3 + 4, 40);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    *(_DWORD *)(result - v3 + 36) = a2 ^ 0x80000000;
    *a3 += 4;
  }
  return result;
}

uint64_t re::DrawCallSortKey<5ul,unsigned long long>::appendUInt8(uint64_t result, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (v3 >= 0x28)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) SortKey trying to use %zu bytes when it only has capacity for %zu.", "(size_t)inoutByteOffset + byteCount <= WordCount * sizeof(WordType)", "appendBytesToKey", 19, v3 + 1, 40);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    *(_BYTE *)(result - v3 + 39) = a2;
    ++*a3;
  }
  return result;
}

uint64_t re::DrawCallSortKey<5ul,unsigned long long>::appendUInt16(uint64_t result, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (v3 >= 0x27)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) SortKey trying to use %zu bytes when it only has capacity for %zu.", "(size_t)inoutByteOffset + byteCount <= WordCount * sizeof(WordType)", "appendBytesToKey", 19, v3 + 2, 40);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    *(_WORD *)(result - v3 + 38) = a2;
    *a3 += 2;
  }
  return result;
}

uint64_t re::DrawCallSortKey<5ul,unsigned long long>::appendUInt32(uint64_t result, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (v3 >= 0x25)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) SortKey trying to use %zu bytes when it only has capacity for %zu.", "(size_t)inoutByteOffset + byteCount <= WordCount * sizeof(WordType)", "appendBytesToKey", 19, v3 + 4, 40);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    *(_DWORD *)(result - v3 + 36) = a2;
    *a3 += 4;
  }
  return result;
}

uint64_t re::OpenSubdivViewIndependentComputeStep::init(uint64_t this, re::RenderManager *a2)
{
  uint64_t v3;
  void **ComputePipelineState;
  _anonymous_namespace_ *v5;
  void **v6;
  uint64_t *v7;
  uint64_t v8;
  _BYTE v9[8];
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;

  if (!*(_BYTE *)(this + 8))
  {
    v3 = this;
    *(_BYTE *)(this + 8) = 1;
    *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 4);
    if (*((_BYTE *)a2 + 262))
    {
      v9[0] = 0;
      v18 = 0;
      v15 = 0;
      v16 = 0;
      v14 = 0;
      v17 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      ComputePipelineState = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v9);
      NS::SharedPtr<MTL::Texture>::operator=((void **)(v3 + 24), ComputePipelineState);
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v14);
      v5 = (_anonymous_namespace_ *)v12;
      if ((_QWORD)v12)
      {
        if ((BYTE8(v12) & 1) != 0)
          v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v12 + 40))();
        v12 = 0u;
        v13 = 0u;
      }
      if (v9[0])
      {
        v5 = (_anonymous_namespace_ *)v10;
        if (v10)
        {
          if ((v11 & 1) != 0)
            v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v10 + 40))();
        }
      }
      v9[0] = 0;
      v18 = 0;
      v15 = 0;
      v16 = 0;
      v14 = 0;
      v17 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v6 = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v9);
      v7 = (uint64_t *)(v3 + 32);
      NS::SharedPtr<MTL::Texture>::operator=((void **)(v3 + 32), v6);
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v14);
      this = v12;
      if ((_QWORD)v12)
      {
        if ((BYTE8(v12) & 1) != 0)
          this = (*(uint64_t (**)(void))(*(_QWORD *)v12 + 40))();
        v12 = 0u;
        v13 = 0u;
      }
      if (v9[0])
      {
        this = v10;
        if (v10)
        {
          if ((v11 & 1) != 0)
            this = (*(uint64_t (**)(void))(*(_QWORD *)v10 + 40))();
        }
      }
      v8 = *v7;
      if (*v7)
        LOBYTE(v8) = *(_QWORD *)(v3 + 24) != 0;
      *(_BYTE *)(v3 + 9) = v8;
    }
  }
  return this;
}

double re::OpenSubdivViewIndependentComputeStep::addDeformationInstance@<D0>(re::OpenSubdivViewIndependentComputeStep *this@<X0>, uint64_t a2@<X8>)
{
  char v3;
  double result;

  if (*((_BYTE *)this + 8))
  {
    if (*((_BYTE *)this + 9))
      v3 = 1;
    else
      v3 = 2;
  }
  else
  {
    v3 = 2;
  }
  *(_QWORD *)a2 = 0xFFFFFFFFLL;
  *(_QWORD *)&result = 7682;
  *(_OWORD *)(a2 + 8) = xmmword_22618DE00;
  *(_BYTE *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = -1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

uint64_t re::OpenSubdivViewIndependentComputeStep::allocateBuffers(re *a1, re::FrameContext *a2, unsigned int a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  re *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v36;
  int v37;
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  unint64_t v42;
  __int16 v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v6 = a4;
  v50 = *MEMORY[0x24BDAC8D0];
  v8 = *a4;
  v9 = *(_QWORD *)(*a4 + 48);
  re::globalAllocators(a1);
  v10 = *((_QWORD *)a2 + 3);
  v11 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, 24, 8);
  v12 = *((_QWORD *)a2 + 3);
  v11[1] = 0;
  v11[2] = 0;
  *v11 = 0;
  v36 = v9;
  re::FixedArray<re::FrameContextBuffer>::init<>(v11, v12, v9);
  v14 = re::globalAllocators(v13)[2];
  *(_QWORD *)&v45 = &off_24ED7B248;
  *((_QWORD *)&v46 + 1) = v14;
  *(_QWORD *)&v47 = &v45;
  v15 = (*(uint64_t (**)(uint64_t, uint64_t *, __int128 *))(*(_QWORD *)v10 + 16))(v10, v11, &v45);
  if ((_QWORD)v47)
  {
    (**(void (***)(_QWORD))v47)(v47);
    if ((__int128 *)v47 != &v45)
      (*(void (**)(_QWORD))(**((_QWORD **)&v46 + 1) + 40))(*((_QWORD *)&v46 + 1));
  }
  if (v9)
  {
    v16 = 0;
    v17 = 0;
    v32 = v6;
    v33 = v8 + 8;
    while (1)
    {
      v18 = *(_QWORD *)(re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v33, v17) + 8);
      v19 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](v6[1], v18);
      v21 = v6[6];
      if (v21 <= v18)
        break;
      v22 = v19;
      v23 = v6[5];
      v24 = re::DataArray<re::MeshModel>::get(*((_QWORD *)a1 + 2) + 8, *(_QWORD *)(*(_QWORD *)(v19 + 368) + 16));
      v4 = *(unsigned __int16 *)(v22 + 392);
      v5 = *(_QWORD *)(v24 + 56);
      if (v5 <= v4)
        goto LABEL_12;
      v5 = v23 + 312 * v18;
      v25 = *(_QWORD *)(v24 + 64);
      LOBYTE(v45) = 9;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized(v5, 9u);
      v26 = (unint64_t)*(unsigned int *)(*(_QWORD *)(v5 + 64)
                                              + 32
                                              * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(v5 + 56), (unsigned __int8 *)&v45)+ 20) >> 2;
      v27 = *(unsigned int *)(v25 + 560 * v4 + 528);
      re::FrameContext::perFrameAlloc(a2, 8uLL, 4uLL, (uint64_t)&v45);
      v28 = v45;
      v29 = v46;
      *(_QWORD *)(v45 + DWORD2(v45)) = v27 | (v26 << 32);
      v4 = *(_QWORD *)(v15 + 8);
      if (v4 <= v17)
        goto LABEL_13;
      v30 = *(_QWORD *)(v15 + 16) + v16;
      *(_OWORD *)v30 = v28;
      *(_QWORD *)(v30 + 16) = v29;
      re::FrameContext::perFrameAllocTail(a2, 12 * (v26 + v27), 0x10uLL, (uint64_t)&v45);
      LOWORD(v38) = 1025;
      v37 = 65548;
      LOBYTE(v39) = 30;
      HIDWORD(v38) = 0;
      re::DeformationVertexBufferState::setOutputBuffer(v5, 0xDu, a3, (uint64_t)&v45, (uint64_t)&v37);
      ++v17;
      v16 += 24;
      v6 = v32;
      if (v36 == v17)
        return v15;
    }
    re::internal::assertLog((re::internal *)6, v20, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v18, v21);
    _os_crash();
    __break(1u);
LABEL_12:
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v45 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v37 = 136315906;
    v38 = "operator[]";
    v39 = 1024;
    v40 = 476;
    v41 = 2048;
    v42 = v4;
    v43 = 2048;
    v44 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v45 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v37 = 136315906;
    v38 = "operator[]";
    v39 = 1024;
    v40 = 468;
    v41 = 2048;
    v42 = v17;
    v43 = 2048;
    v44 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return v15;
}

uint64_t re::OpenSubdivViewIndependentComputeStep::deformGPU(uint64_t a1, uint64_t a2, void **a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE v64[28];
  __int16 v65;
  unint64_t v66;
  _OWORD v67[2];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;

  v4 = a4;
  v7 = a1;
  v71 = *MEMORY[0x24BDAC8D0];
  v8 = *a4;
  v9 = objc_msgSend(*(id *)(a1 + 24), sel_maxTotalThreadsPerThreadgroup);
  v10 = *(_QWORD *)(v8 + 48);
  re::mtl::ComputeCommandEncoder::pushDebugGroup(a3, (re::ns *)"OpenSubdivViewIndependentComputeStep - copy positions");
  v63 = v10;
  if (v10)
  {
    v11 = v9;
    v12 = 0;
    v13 = 0;
    v61 = v7;
    v62 = v8 + 8;
    v57 = v11 - 1;
    v58 = v11;
    v59 = v4;
    v56 = v11;
    v60 = a2;
    while (1)
    {
      v14 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v62, v13);
      v16 = *(_QWORD *)(a2 + 8);
      if (v16 <= v13)
        break;
      v16 = *(_QWORD *)(v14 + 8);
      v17 = v4[6];
      if (v17 <= v16)
        goto LABEL_19;
      v18 = *(_QWORD *)(a2 + 16);
      v19 = v4[5];
      v20 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](v4[1], v16);
      if (*(_DWORD *)(v18 + v12 + 12))
      {
        v21 = v20;
        v22 = re::DataArray<re::MeshModel>::get(*(_QWORD *)(v7 + 16) + 8, *(_QWORD *)(*(_QWORD *)(v20 + 368) + 16));
        v4 = (uint64_t *)*(unsigned __int16 *)(v21 + 392);
        v10 = *(_QWORD *)(v22 + 56);
        if (v10 <= (unint64_t)v4)
          goto LABEL_22;
        v23 = *(_QWORD *)(v22 + 64);
        LOBYTE(v67[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v19 + 312 * v16, 1u);
        v24 = (_QWORD *)(v19 + 312 * v16);
        v16 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v24 + 7, (unsigned __int8 *)v67);
        v25 = v24[8];
        LOBYTE(v67[0]) = 13;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v24, 0xDu);
        v10 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v24 + 23, (unsigned __int8 *)v67);
        v26 = v24[24];
        v27 = (*(_DWORD *)(v23 + 560 * v4 + 528) + v57) / v58;
        objc_msgSend(*a3, "setComputePipelineState:", *(_QWORD *)(v61 + 24));
        objc_msgSend(*a3, "setBuffer:offset:atIndex:", *(_QWORD *)(v18 + v12 + 16), *(unsigned int *)(v18 + v12 + 8), 0);
        v28 = v25 + 32 * v16;
        a2 = v60;
        objc_msgSend(*a3, "setBuffer:offset:atIndex:", *(_QWORD *)(v28 + 24), *(unsigned int *)(v28 + 16), 1);
        objc_msgSend(*a3, "setBuffer:offset:atIndex:", *(_QWORD *)(v26 + 32 * v10 + 24), *(unsigned int *)(v26 + 32 * v10 + 16), 2);
        v29 = *a3;
        *(_QWORD *)&v67[0] = v27;
        v7 = v61;
        *(int64x2_t *)((char *)v67 + 8) = vdupq_n_s64(1uLL);
        *(_QWORD *)v64 = v56;
        *(_OWORD *)&v64[8] = *(_OWORD *)((char *)v67 + 8);
        objc_msgSend(v29, "dispatchThreadgroups:threadsPerThreadgroup:", v67, v64);
        v4 = v59;
      }
      ++v13;
      v12 += 24;
      if (v63 == v13)
      {
        objc_msgSend(*a3, "popDebugGroup");
        re::mtl::ComputeCommandEncoder::pushDebugGroup(a3, (re::ns *)"OpenSubdivViewIndependentComputeStep - apply stencils");
        v30 = 0;
        v13 = 0;
        while (1)
        {
          v31 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v62, v13);
          v12 = *(_QWORD *)(a2 + 8);
          if (v12 <= v13)
            break;
          v16 = *(_QWORD *)(v31 + 8);
          v33 = v4[6];
          if (v33 <= v16)
            goto LABEL_21;
          v34 = *(_QWORD *)(a2 + 16);
          v35 = v4[5];
          re::BucketArray<re::ActiveDeformation,8ul>::operator[](v4[1], v16);
          v36 = v34 + v30;
          if (*(_DWORD *)(v34 + v30 + 12))
          {
            v37 = (_QWORD *)(v35 + 312 * v16);
            LOBYTE(v67[0]) = 1;
            re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v37, 1u);
            v38 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v37 + 7, (unsigned __int8 *)v67);
            v52 = v37[8];
            v53 = v38;
            LOBYTE(v67[0]) = 12;
            re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v37, 0xCu);
            v39 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v37 + 7, (unsigned __int8 *)v67);
            v54 = v37[8];
            v55 = v39;
            LOBYTE(v67[0]) = 9;
            re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v37, 9u);
            v40 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v37 + 7, (unsigned __int8 *)v67);
            v41 = v37[8];
            LOBYTE(v67[0]) = 10;
            re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v37, 0xAu);
            v42 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v37 + 7, (unsigned __int8 *)v67);
            v43 = v37[8];
            LOBYTE(v67[0]) = 11;
            re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v37, 0xBu);
            v44 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v37 + 7, (unsigned __int8 *)v67);
            v50 = v37[8];
            v51 = v44;
            LOBYTE(v67[0]) = 13;
            re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v37, 0xDu);
            v10 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v37 + 23, (unsigned __int8 *)v67);
            v16 = v37[24];
            v45 = v41 + 32 * v40;
            v46 = (v57 + (*(_DWORD *)(v45 + 20) >> 2)) / v58;
            objc_msgSend(*a3, "setComputePipelineState:", *(_QWORD *)(v61 + 32));
            objc_msgSend(*a3, "setBuffer:offset:atIndex:", *(_QWORD *)(v36 + 16), *(unsigned int *)(v36 + 8), 0);
            objc_msgSend(*a3, "setBuffer:offset:atIndex:", *(_QWORD *)(v52 + 32 * v53 + 24), *(unsigned int *)(v52 + 32 * v53 + 16), 1);
            objc_msgSend(*a3, "setBuffer:offset:atIndex:", *(_QWORD *)(v45 + 24), *(unsigned int *)(v45 + 16), 2);
            v47 = v43 + 32 * v42;
            v4 = v59;
            objc_msgSend(*a3, "setBuffer:offset:atIndex:", *(_QWORD *)(v47 + 24), *(unsigned int *)(v47 + 16), 3);
            objc_msgSend(*a3, "setBuffer:offset:atIndex:", *(_QWORD *)(v54 + 32 * v55 + 24), *(unsigned int *)(v54 + 32 * v55 + 16), 4);
            objc_msgSend(*a3, "setBuffer:offset:atIndex:", *(_QWORD *)(v50 + 32 * v51 + 24), *(unsigned int *)(v50 + 32 * v51 + 16), 5);
            objc_msgSend(*a3, "setBuffer:offset:atIndex:", *(_QWORD *)(v16 + 32 * v10 + 24), *(unsigned int *)(v16 + 32 * v10 + 16), 6);
            v48 = *a3;
            *(_QWORD *)&v67[0] = v46;
            *(int64x2_t *)((char *)v67 + 8) = vdupq_n_s64(1uLL);
            *(_QWORD *)v64 = v56;
            *(_OWORD *)&v64[8] = *(_OWORD *)((char *)v67 + 8);
            objc_msgSend(v48, "dispatchThreadgroups:threadsPerThreadgroup:", v67, v64);
          }
          ++v13;
          v30 += 24;
          a2 = v60;
          if (v63 == v13)
            return objc_msgSend(*a3, "popDebugGroup");
        }
LABEL_20:
        v69 = 0u;
        v70 = 0u;
        v68 = 0u;
        memset(v67, 0, sizeof(v67));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v64 = 136315906;
        *(_QWORD *)&v64[4] = "operator[]";
        *(_WORD *)&v64[12] = 1024;
        *(_DWORD *)&v64[14] = 468;
        *(_WORD *)&v64[18] = 2048;
        *(_QWORD *)&v64[20] = v13;
        v65 = 2048;
        v66 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_21:
        re::internal::assertLog((re::internal *)6, v32, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v16, v33);
        _os_crash();
        __break(1u);
LABEL_22:
        v69 = 0u;
        v70 = 0u;
        v68 = 0u;
        memset(v67, 0, sizeof(v67));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v64 = 136315906;
        *(_QWORD *)&v64[4] = "operator[]";
        *(_WORD *)&v64[12] = 1024;
        *(_DWORD *)&v64[14] = 476;
        *(_WORD *)&v64[18] = 2048;
        *(_QWORD *)&v64[20] = v4;
        v65 = 2048;
        v66 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
    v69 = 0u;
    v70 = 0u;
    v68 = 0u;
    memset(v67, 0, sizeof(v67));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v64 = 136315906;
    *(_QWORD *)&v64[4] = "operator[]";
    *(_WORD *)&v64[12] = 1024;
    *(_DWORD *)&v64[14] = 468;
    *(_WORD *)&v64[18] = 2048;
    *(_QWORD *)&v64[20] = v13;
    v65 = 2048;
    v66 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_19:
    re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v16, v17);
    _os_crash();
    __break(1u);
    goto LABEL_20;
  }
  objc_msgSend(*a3, "popDebugGroup");
  re::mtl::ComputeCommandEncoder::pushDebugGroup(a3, (re::ns *)"OpenSubdivViewIndependentComputeStep - apply stencils");
  return objc_msgSend(*a3, "popDebugGroup");
}

uint64_t re::OpenSubdivViewDependentComputeStep::init(uint64_t this, re::RenderManager *a2)
{
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  void **ComputePipelineState;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[8];
  uint64_t v16;
  char v17;
  _QWORD v18[4];
  _QWORD v19[3];
  int v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;

  if (!*(_BYTE *)(this + 8))
  {
    v3 = this;
    *(_BYTE *)(this + 8) = 1;
    *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 4);
    if (*((_BYTE *)a2 + 262))
    {
      v15[0] = 0;
      v21 = 0;
      memset(v19, 0, sizeof(v19));
      v20 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v7, 0);
      v12 = 0;
      v13 = 0;
      v14 = 0;
      re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)&v7, 0);
      v11 = 1048629;
      re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v19, (re::DynamicString *)&v7);
      ComputePipelineState = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v15);
      NS::SharedPtr<MTL::Texture>::operator=((void **)(v3 + 24), ComputePipelineState);
      if (v12)
      {
        if (v13)
        {
          (*(void (**)(void))(*(_QWORD *)v12 + 40))();
          v13 = 0;
          v14 = 0;
        }
        v12 = 0;
      }
      if (v7 && (v8 & 1) != 0)
        (*(void (**)(void))(*v7 + 40))();
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v19);
      this = v18[0];
      if (v18[0])
      {
        if ((v18[1] & 1) != 0)
          this = (*(uint64_t (**)(void))(*(_QWORD *)v18[0] + 40))();
        memset(v18, 0, sizeof(v18));
      }
      if (v15[0])
      {
        this = v16;
        if (v16)
        {
          if ((v17 & 1) != 0)
            return (*(uint64_t (**)(void))(*(_QWORD *)v16 + 40))();
        }
      }
    }
  }
  return this;
}

uint64_t re::OpenSubdivViewDependentComputeStep::addDeformationInstance@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  char v3;

  *(_QWORD *)a2 = 0xFFFFFFFFLL;
  *(_OWORD *)(a2 + 8) = xmmword_22618DE10;
  if (*(_QWORD *)(this + 24))
    v3 = 1;
  else
    v3 = 2;
  *(_BYTE *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = -1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return this;
}

uint64_t re::OpenSubdivViewDependentComputeStep::allocateBuffers(uint64_t a1, re::FrameContext *a2, unsigned int a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  float32x4_t *v9;
  re *v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  re *v19;
  uint64_t v20;
  uint64_t v21;
  re::FrameContext *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float32x4_t *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  float32x4_t v35;
  float32x4_t v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t v44;
  float32x4_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t *v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  uint64_t v57;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  re::FrameContext *v72;
  int v73;
  __int16 v74;
  int v75;
  char v76;
  int v77;
  __int16 v78;
  int v79;
  char v80;
  uint64_t v81;
  int v82;
  char v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  _BYTE v92[48];
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  __int128 v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(*a4 + 48);
  if (v5)
  {
    v6 = a4;
    v7 = a4[4];
    if (v7)
    {
      v57 = *a4 + 8;
      v9 = (float32x4_t *)(a4[3] + 96 * (v7 - 1));
      re::RenderCamera::computeInverseTransform(v9, (uint64_t)&v88);
      re::Projection::computeMatrix4x4F((re::Projection *)&v9[2], (uint64_t)&v84);
      v11 = 0;
      v12 = v84;
      v13 = v85;
      v14 = v86;
      v15 = v87;
      *(float32x4_t *)v92 = v88;
      *(float32x4_t *)&v92[16] = v89;
      *(float32x4_t *)&v92[32] = v90;
      v93 = v91;
      do
      {
        *(float32x4_t *)((char *)&v94 + v11) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, COERCE_FLOAT(*(_OWORD *)&v92[v11])), v13, *(float32x2_t *)&v92[v11], 1), v14, *(float32x4_t *)&v92[v11], 2), v15, *(float32x4_t *)&v92[v11], 3);
        v11 += 16;
      }
      while (v11 != 64);
      v55 = v95;
      v56 = v94;
      v53 = v97;
      v54 = v96;
      re::globalAllocators(v10);
      v16 = *((_QWORD *)a2 + 3);
      v17 = (uint64_t *)(*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, 24, 8);
      v18 = *((_QWORD *)a2 + 3);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = 0;
      re::FixedArray<re::FrameContextBuffer>::init<>(v17, v18, v5);
      v20 = re::globalAllocators(v19)[2];
      v94.i64[0] = (uint64_t)&off_24ED7B2A0;
      v95.i64[1] = v20;
      v96.i64[0] = (uint64_t)&v94;
      v21 = (*(uint64_t (**)(unint64_t, uint64_t *, float32x4_t *))(*(_QWORD *)v16 + 16))(v16, v17, &v94);
      if (v96.i64[0])
      {
        (**(void (***)(uint64_t))v96.i64[0])(v96.i64[0]);
        if ((float32x4_t *)v96.i64[0] != &v94)
          (*(void (**)(uint64_t))(*(_QWORD *)v95.i64[1] + 40))(v95.i64[1]);
      }
      v22 = 0;
      if (v5 <= 1)
        v23 = 1;
      else
        v23 = v5;
      v51 = v23;
      v52 = v6;
      while (1)
      {
        v24 = *(_QWORD *)(re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v57, (unint64_t)v22) + 8);
        v25 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](v6[1], v24);
        v27 = v6[6];
        if (v27 <= v24)
          break;
        v28 = v25;
        v72 = v22;
        v22 = a2;
        v29 = v21;
        v30 = v6[5];
        v31 = *(float32x4_t **)(*(_QWORD *)(v25 + 352) + 80);
        v32 = re::DataArray<re::MeshModel>::get(*(_QWORD *)(a1 + 16) + 8, *(_QWORD *)(*(_QWORD *)(v25 + 368) + 16));
        v4 = *(unsigned __int16 *)(v28 + 392);
        v16 = *(_QWORD *)(v32 + 56);
        if (v16 <= v4)
          goto LABEL_24;
        v33 = 0;
        v34 = *(_DWORD *)(*(_QWORD *)(v32 + 64) + 560 * *(unsigned __int16 *)(v28 + 392) + 532);
        v35 = v88;
        v36 = v89;
        v37 = v30 + 312 * v24;
        v38 = v90;
        v39 = v91;
        v40 = *v31;
        v41 = v31[1];
        v42 = v31[2];
        v43 = v31[3];
        *(float32x4_t *)v92 = *v31;
        *(float32x4_t *)&v92[16] = v41;
        *(float32x4_t *)&v92[32] = v42;
        v93 = v43;
        do
        {
          *(float32x4_t *)((char *)&v94 + v33) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v35, COERCE_FLOAT(*(_OWORD *)&v92[v33])), v36, *(float32x2_t *)&v92[v33], 1), v38, *(float32x4_t *)&v92[v33], 2), v39, *(float32x4_t *)&v92[v33], 3);
          v33 += 16;
        }
        while (v33 != 64);
        v44 = 0;
        v70 = v95;
        v71 = v94;
        v4 = (6 * v34);
        v68 = v97;
        v69 = v96;
        v66 = v85;
        v67 = v84;
        v64 = v87;
        v65 = v86;
        *(float32x4_t *)v92 = v40;
        *(float32x4_t *)&v92[16] = v41;
        *(float32x4_t *)&v92[32] = v42;
        v93 = v43;
        v21 = v29;
        do
        {
          *(float32x4_t *)((char *)&v94 + v44) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v56, COERCE_FLOAT(*(_OWORD *)&v92[v44])), v55, *(float32x2_t *)&v92[v44], 1), v54, *(float32x4_t *)&v92[v44], 2), v53, *(float32x4_t *)&v92[v44], 3);
          v44 += 16;
        }
        while (v44 != 64);
        v62 = v95;
        v63 = v94;
        v60 = v97;
        v61 = v96;
        a2 = v22;
        re::FrameContext::perFrameAlloc(v22, 0xD0uLL, 0x10uLL, (uint64_t)&v94);
        v45 = v94;
        v46 = v95.i64[0];
        v47 = v94.i64[0] + v94.u32[2];
        *(float32x4_t *)v47 = v71;
        *(float32x4_t *)(v47 + 16) = v70;
        *(float32x4_t *)(v47 + 32) = v69;
        *(float32x4_t *)(v47 + 48) = v68;
        *(float32x4_t *)(v47 + 64) = v67;
        *(float32x4_t *)(v47 + 80) = v66;
        *(float32x4_t *)(v47 + 96) = v65;
        *(float32x4_t *)(v47 + 112) = v64;
        *(float32x4_t *)(v47 + 128) = v63;
        *(float32x4_t *)(v47 + 144) = v62;
        *(float32x4_t *)(v47 + 160) = v61;
        *(float32x4_t *)(v47 + 176) = v60;
        *(_DWORD *)(v47 + 192) = 16 * v34;
        *(_DWORD *)(v47 + 196) = 2;
        v16 = *(_QWORD *)(v21 + 8);
        v22 = v72;
        if (v16 <= (unint64_t)v72)
          goto LABEL_25;
        v48 = *(_QWORD *)(v21 + 16) + 24 * (_QWORD)v72;
        *(float32x4_t *)v48 = v45;
        v16 = (4 * v34);
        *(_QWORD *)(v48 + 16) = v46;
        WORD2(v81) = 1025;
        LODWORD(v81) = 65548;
        v83 = 30;
        v82 = 0;
        v78 = 769;
        v77 = 65552;
        v80 = 31;
        v79 = 0;
        v74 = 769;
        v73 = 65548;
        v76 = 30;
        v75 = 0;
        v49 = 12 * (16 * v34);
        re::FrameContext::perFrameAllocTail(a2, v49, 4uLL, (uint64_t)&v94);
        *(float32x4_t *)v92 = v94;
        *(_QWORD *)&v92[16] = v95.i64[0];
        re::DeformationVertexBufferState::setOutputBuffer(v37, 0x10u, a3, (uint64_t)v92, (uint64_t)&v81);
        re::FrameContext::perFrameAllocTail(a2, v49, 4uLL, (uint64_t)&v94);
        *(float32x4_t *)v92 = v94;
        *(_QWORD *)&v92[16] = v95.i64[0];
        re::DeformationVertexBufferState::setOutputBuffer(v37, 0x11u, a3, (uint64_t)v92, (uint64_t)&v81);
        re::FrameContext::perFrameAllocTail(a2, v49, 4uLL, (uint64_t)&v94);
        *(float32x4_t *)v92 = v94;
        *(_QWORD *)&v92[16] = v95.i64[0];
        re::DeformationVertexBufferState::setOutputBuffer(v37, 0x12u, a3, (uint64_t)v92, (uint64_t)&v81);
        re::FrameContext::perFrameAllocTail(a2, 4 * v16, 4uLL, (uint64_t)&v94);
        *(float32x4_t *)v92 = v94;
        *(_QWORD *)&v92[16] = v95.i64[0];
        re::DeformationVertexBufferState::setOutputBuffer(v37, 0xEu, a3, (uint64_t)v92, (uint64_t)&v77);
        re::FrameContext::perFrameAllocTail(a2, 4 * v16, 4uLL, (uint64_t)&v94);
        *(float32x4_t *)v92 = v94;
        *(_QWORD *)&v92[16] = v95.i64[0];
        re::DeformationVertexBufferState::setOutputBuffer(v37, 0xFu, a3, (uint64_t)v92, (uint64_t)&v77);
        re::FrameContext::perFrameAllocTail(a2, 2 * v4, 2uLL, (uint64_t)&v94);
        *(float32x4_t *)v92 = v94;
        *(_QWORD *)&v92[16] = v95.i64[0];
        re::DeformationVertexBufferState::setOutputBuffer(v37, 7u, a3, (uint64_t)v92, (uint64_t)&v73);
        v22 = (re::FrameContext *)((char *)v72 + 1);
        v6 = v52;
        if ((re::FrameContext *)((char *)v72 + 1) == (re::FrameContext *)v51)
          return v21;
      }
      re::internal::assertLog((re::internal *)6, v26, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v24, v27);
      _os_crash();
      __break(1u);
LABEL_24:
      v81 = 0;
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v94 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v92 = 136315906;
      *(_QWORD *)&v92[4] = "operator[]";
      *(_WORD *)&v92[12] = 1024;
      *(_DWORD *)&v92[14] = 476;
      *(_WORD *)&v92[18] = 2048;
      *(_QWORD *)&v92[20] = v4;
      *(_WORD *)&v92[28] = 2048;
      *(_QWORD *)&v92[30] = v16;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_25:
      v81 = 0;
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v94 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v92 = 136315906;
      *(_QWORD *)&v92[4] = "operator[]";
      *(_WORD *)&v92[12] = 1024;
      *(_DWORD *)&v92[14] = 468;
      *(_WORD *)&v92[18] = 2048;
      *(_QWORD *)&v92[20] = v22;
      *(_WORD *)&v92[28] = 2048;
      *(_QWORD *)&v92[30] = v16;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return 0;
}

uint64_t re::OpenSubdivViewDependentComputeStep::deformGPU(uint64_t result, uint64_t a2, void **a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v8;
  char **v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char **v29;
  void *v30;
  int64x2_t v31;
  uint64_t v32;
  uint64_t *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[28];
  __int16 v53;
  unint64_t v54;
  _OWORD v55[2];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v51 = result;
  v59 = *MEMORY[0x24BDAC8D0];
  if (a4[4])
  {
    v5 = a4;
    v8 = *a4;
    v9 = &selRef_newBufferWithBytes_length_options_;
    if ((unint64_t)objc_msgSend(*(id *)(result + 24), sel_threadExecutionWidth) <= 0x40)
      v34 = objc_msgSend(*(id *)(v51 + 24), sel_threadExecutionWidth);
    else
      v34 = 64;
    re::mtl::ComputeCommandEncoder::pushDebugGroup(a3, (re::ns *)"OpenSubdivViewIndependentComputeStep - cull and calculate tessellation factors");
    v36 = *(_QWORD *)(v8 + 48);
    if (v36)
    {
      v10 = 0;
      v11 = 0;
      v35 = v8 + 8;
      v31 = vdupq_n_s64(1uLL);
      v32 = a2;
      v33 = v5;
      do
      {
        v12 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v35, v11);
        v14 = *(_QWORD *)(a2 + 8);
        if (v14 <= v11)
        {
          v57 = 0u;
          v58 = 0u;
          v56 = 0u;
          memset(v55, 0, sizeof(v55));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v52 = 136315906;
          *(_QWORD *)&v52[4] = "operator[]";
          *(_WORD *)&v52[12] = 1024;
          *(_DWORD *)&v52[14] = 468;
          *(_WORD *)&v52[18] = 2048;
          *(_QWORD *)&v52[20] = v11;
          v53 = 2048;
          v54 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_16:
          re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v14, v15);
          _os_crash();
          __break(1u);
LABEL_17:
          v57 = 0u;
          v58 = 0u;
          v56 = 0u;
          memset(v55, 0, sizeof(v55));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v52 = 136315906;
          *(_QWORD *)&v52[4] = "operator[]";
          *(_WORD *)&v52[12] = 1024;
          *(_DWORD *)&v52[14] = 476;
          *(_WORD *)&v52[18] = 2048;
          *(_QWORD *)&v52[20] = v9;
          v53 = 2048;
          v54 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v14 = *(_QWORD *)(v12 + 8);
        v15 = v5[6];
        if (v15 <= v14)
          goto LABEL_16;
        v16 = *(_QWORD *)(a2 + 16);
        v17 = v5[5];
        v18 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](v5[1], v14);
        if (*(_DWORD *)(v16 + v10 + 12))
        {
          v19 = v18;
          v20 = re::DataArray<re::MeshModel>::get(*(_QWORD *)(v51 + 16) + 8, *(_QWORD *)(*(_QWORD *)(v18 + 368) + 16));
          v9 = (char **)*(unsigned __int16 *)(v19 + 392);
          v4 = *(_QWORD *)(v20 + 56);
          if (v4 <= (unint64_t)v9)
            goto LABEL_17;
          v49 = v16;
          v50 = (v34 - 1 + 16 * *(_DWORD *)(*(_QWORD *)(v20 + 64) + 560 * v9 + 532)) / v34;
          LOBYTE(v55[0]) = 13;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized(v17 + 312 * v14, 0xDu);
          v21 = (_QWORD *)(v17 + 312 * v14);
          v42 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v21 + 7, (unsigned __int8 *)v55);
          v40 = v21[8];
          LOBYTE(v55[0]) = 6;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v21, 6u);
          v41 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v21 + 7, (unsigned __int8 *)v55);
          v39 = v21[8];
          LOBYTE(v55[0]) = 8;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v21, 8u);
          v22 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v21 + 7, (unsigned __int8 *)v55);
          v37 = v21[8];
          v38 = v22;
          LOBYTE(v55[0]) = 16;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v21, 0x10u);
          v23 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v21 + 23, (unsigned __int8 *)v55);
          v47 = v21[24];
          v48 = v23;
          LOBYTE(v55[0]) = 17;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v21, 0x11u);
          v46 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v21 + 23, (unsigned __int8 *)v55);
          v44 = v21[24];
          LOBYTE(v55[0]) = 18;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v21, 0x12u);
          v45 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v21 + 23, (unsigned __int8 *)v55);
          v43 = v21[24];
          LOBYTE(v55[0]) = 14;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v21, 0xEu);
          v24 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v21 + 23, (unsigned __int8 *)v55);
          v25 = v21[24];
          LOBYTE(v55[0]) = 15;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v21, 0xFu);
          v26 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v21 + 23, (unsigned __int8 *)v55);
          v9 = (char **)v21[24];
          LOBYTE(v55[0]) = 7;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v21, 7u);
          v4 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v21 + 23, (unsigned __int8 *)v55);
          v27 = v21[24];
          objc_msgSend(*a3, "setComputePipelineState:", *(_QWORD *)(v51 + 24));
          objc_msgSend(*a3, "setBuffer:offset:atIndex:", *(_QWORD *)(v40 + 32 * v42 + 24), *(unsigned int *)(v40 + 32 * v42 + 16), 0);
          objc_msgSend(*a3, "setBuffer:offset:atIndex:", *(_QWORD *)(v39 + 32 * v41 + 24), *(unsigned int *)(v39 + 32 * v41 + 16), 1);
          objc_msgSend(*a3, "setBuffer:offset:atIndex:", *(_QWORD *)(v37 + 32 * v38 + 24), *(unsigned int *)(v37 + 32 * v38 + 16), 2);
          v28 = v25 + 32 * v24;
          v5 = v33;
          objc_msgSend(*a3, "setBuffer:offset:atIndex:", *(_QWORD *)(v28 + 24), *(unsigned int *)(v28 + 16), 3);
          v29 = &v9[4 * v26];
          a2 = v32;
          objc_msgSend(*a3, "setBuffer:offset:atIndex:", v29[3], *((unsigned int *)v29 + 4), 4);
          objc_msgSend(*a3, "setBuffer:offset:atIndex:", *(_QWORD *)(v47 + 32 * v48 + 24), *(unsigned int *)(v47 + 32 * v48 + 16), 5);
          objc_msgSend(*a3, "setBuffer:offset:atIndex:", *(_QWORD *)(v44 + 32 * v46 + 24), *(unsigned int *)(v44 + 32 * v46 + 16), 6);
          objc_msgSend(*a3, "setBuffer:offset:atIndex:", *(_QWORD *)(v43 + 32 * v45 + 24), *(unsigned int *)(v43 + 32 * v45 + 16), 7);
          objc_msgSend(*a3, "setBuffer:offset:atIndex:", *(_QWORD *)(v49 + v10 + 16), *(unsigned int *)(v49 + v10 + 8), 9);
          objc_msgSend(*a3, "setBuffer:offset:atIndex:", *(_QWORD *)(v27 + 32 * v4 + 24), *(unsigned int *)(v27 + 32 * v4 + 16), 10);
          v30 = *a3;
          *(_QWORD *)&v55[0] = v50;
          *(int64x2_t *)((char *)v55 + 8) = v31;
          *(_QWORD *)v52 = v34;
          *(int64x2_t *)&v52[8] = v31;
          objc_msgSend(v30, "dispatchThreadgroups:threadsPerThreadgroup:", v55, v52);
        }
        ++v11;
        v10 += 24;
      }
      while (v36 != v11);
    }
    return objc_msgSend(*a3, "popDebugGroup");
  }
  return result;
}

void re::OpenSubdivViewIndependentComputeStep::deformCPU(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) OpenSubdivViewIndependentComputeStep does not have a CPU implementation", "!\"Unreachable code\"", "deformCPU", 69);
  _os_crash();
  __break(1u);
}

void re::OpenSubdivViewDependentComputeStep::~OpenSubdivViewDependentComputeStep(re::OpenSubdivViewDependentComputeStep *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {

    *((_QWORD *)this + 3) = 0;
  }
}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {

    *((_QWORD *)this + 3) = 0;
  }
  JUMPOUT(0x2276933B8);
}

void re::OpenSubdivViewDependentComputeStep::deformCPU(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) OpenSubdivViewDependentComputeStep does not have a CPU implementation", "!\"Unreachable code\"", "deformCPU", 154);
  _os_crash();
  __break(1u);
}

void re::internal::Callable<re::OpenSubdivViewIndependentComputeStep::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::OpenSubdivViewIndependentComputeStep::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t result;

  v2 = *a2;
  result = **a2;
  if (result)
  {
    if (v2[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v2[2]);
      v2[1] = 0;
      v2[2] = 0;
    }
    *v2 = 0;
  }
  return result;
}

_QWORD *re::internal::Callable<re::OpenSubdivViewIndependentComputeStep::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED7B248;
  return result;
}

_QWORD *re::internal::Callable<re::OpenSubdivViewIndependentComputeStep::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED7B248;
  return result;
}

uint64_t re::internal::Callable<re::OpenSubdivViewIndependentComputeStep::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::size()
{
  return 16;
}

void re::internal::Callable<re::OpenSubdivViewDependentComputeStep::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::OpenSubdivViewDependentComputeStep::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t result;

  v2 = *a2;
  result = **a2;
  if (result)
  {
    if (v2[1])
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v2[2]);
      v2[1] = 0;
      v2[2] = 0;
    }
    *v2 = 0;
  }
  return result;
}

_QWORD *re::internal::Callable<re::OpenSubdivViewDependentComputeStep::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED7B2A0;
  return result;
}

_QWORD *re::internal::Callable<re::OpenSubdivViewDependentComputeStep::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED7B2A0;
  return result;
}

uint64_t re::internal::Callable<re::OpenSubdivViewDependentComputeStep::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::size()
{
  return 16;
}

double re::RenderThread::RenderThread(re::RenderThread *this)
{
  uint64_t v1;
  char *v2;
  double result;

  v1 = 0;
  *((_DWORD *)this + 6) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *(_DWORD *)((char *)this + 15) = 0;
  do
  {
    v2 = (char *)this + v1;
    *((_QWORD *)v2 + 8) = 0;
    *((_QWORD *)v2 + 5) = 0;
    *((_QWORD *)v2 + 6) = 0;
    *((_QWORD *)v2 + 4) = 0;
    v1 += 40;
    *((_DWORD *)v2 + 14) = 0;
  }
  while (v1 != 80);
  *((_DWORD *)this + 28) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 26) = 850045863;
  result = 0.0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 1018212795;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 305) = 0u;
  *((_QWORD *)this + 41) = 850045863;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 1018212795;
  *((_QWORD *)this + 54) = 0;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  return result;
}

void re::RenderThread::init(re::RenderThread *this, re::RenderManager *a2)
{
  uint64_t **v4;
  uint64_t v5;
  std::__thread_struct *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  std::thread v10;
  uint64_t *v11[3];
  uint64_t **v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 16))
    return;
  *((_QWORD *)this + 1) = a2;
  atomic_store(0, (unint64_t *)this + 22);
  atomic_store(0, (unint64_t *)this + 23);
  atomic_store(0, (unint64_t *)this + 24);
  atomic_store(0, (unint64_t *)this + 25);
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  v12 = 0;
  std::function<void ()(BOOL)>::operator=((_QWORD *)this + 16, (uint64_t)v11);
  v4 = v12;
  if (v12 == v11)
  {
    v5 = 4;
    v4 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_7;
    v5 = 5;
  }
  ((void (*)(void))(*v4)[v5])();
LABEL_7:
  v6 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v6);
  v7 = (_QWORD *)operator new();
  *v7 = v6;
  v7[1] = re::RenderThread::threadFuncStatic;
  v7[2] = this;
  v8 = pthread_create(&v10.__t_, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:nn180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(void *),re::RenderThread *>>, v7);
  if (v8)
  {
    std::__throw_system_error(v8, "thread constructor failed");
LABEL_15:
    std::terminate();
  }
  v11[0] = 0;
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(void *),re::RenderThread *>>::reset[abi:nn180100](v11, 0);
  if (*(_QWORD *)this)
    goto LABEL_15;
  *(std::thread *)this = v10;
  v10.__t_ = 0;
  std::thread::~thread(&v10);
  v9 = *((_QWORD *)a2 + 18);
  if (v9)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 64))(v9))
      re::internal::setThreadPriority(*(_opaque_pthread_t **)this, (_opaque_pthread_t *)0x28);
  }
  *((_BYTE *)this + 16) = 1;
}

void re::RenderThread::threadFuncStatic(re::RenderThread *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  char v9;
  int v10;
  re::ProfilerConfig *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  re *isStatisticCollectionEnabled;
  re::ProfilerThreadContext *v19;
  uint64_t v20;
  re::ProfilerManager *v21;
  re *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  std::chrono::steady_clock::time_point v26;
  uint64_t v27;
  double v28;
  int64x2_t *v29;
  uint64_t v30;
  uint64_t v31;
  int64x2_t v32;
  re *v33;
  re::ProfilerThreadContext *v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  std::mutex *v39;
  int __dst;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  double v46;
  char v47;
  unsigned __int8 v48;
  _BYTE v49[24];
  _QWORD *v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  pthread_setname_np("Render");
  v4 = *((_QWORD *)this + 1);
  if (!v4)
  {
LABEL_46:
    re::internal::assertLog((re::internal *)4, v3, "assertion failure: '%s' (%s:line %i) NULL RenderManager in RenderThread. Cannot continue.", "m_renderManager", "threadFunc", 90);
    _os_crash();
    __break(1u);
  }
  v5 = *(_QWORD *)(v4 + 224);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v6 = (unint64_t *)((char *)this + 184);
  v7 = (unint64_t *)((char *)this + 200);
  v39 = (std::mutex *)((char *)this + 208);
  do
  {
    do
    {
      re::internal::AutoResetEvent::waitOne((re::RenderThread *)((char *)this + 320));
      re::EventQueue::swapBuffers((os_unfair_lock_s *)this + 6);
      v8 = *((_QWORD *)this + 19);
      if (v8)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v8 + 48))(v8, (char *)this + 24);
    }
    while (*((_QWORD *)this + 15) == *((_QWORD *)this + 5 * ((*((_DWORD *)this + 28) & 1) == 0) + 6));
    v9 = 0;
    do
    {
      v10 = re::EventQueue::peekEvent((re::RenderThread *)((char *)this + 24), 0);
      if (v10 == 1)
      {
        v9 = 1;
        __dst = 1;
        re::EventQueue::readEvent((re::RenderThread *)((char *)this + 24), &__dst, 4uLL);
      }
      else
      {
        if (v10)
          continue;
        __dst = 0;
        v41 = 0xFFFFFFFFFFFFFFFLL;
        v11 = (re::ProfilerConfig *)re::EventQueue::readEvent((re::RenderThread *)((char *)this + 24), &__dst, 0x28uLL);
        v13 = v41;
        v14 = *(_QWORD *)(*((_QWORD *)this + 1) + 104) + 16 * (v41 & 7);
        *(_QWORD *)(v14 + 472) = v42;
        *(_QWORD *)(v14 + 480) = v13;
        v15 = v44;
        if (!v44)
        {
          re::internal::assertLog((re::internal *)4, v12, "assertion failure: '%s' (%s:line %i) NULL workload passed to RenderThread::doRender", "workload", "doRender", 141);
          _os_crash();
          __break(1u);
          goto LABEL_46;
        }
        v16 = v43;
        v17 = v41;
        isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(v11);
        if ((_DWORD)isStatisticCollectionEnabled)
        {
          v19 = (re::ProfilerThreadContext *)re::profilerThreadContext(isStatisticCollectionEnabled);
          v20 = *(_QWORD *)(*((_QWORD *)this + 1) + 104);
          if (v20)
            v21 = *(re::ProfilerManager **)(v20 + 1664);
          else
            v21 = 0;
          re::ProfilerThreadContext::begin(v19, v21, 0);
        }
        v48 = 1;
        v22 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(isStatisticCollectionEnabled);
        if ((_DWORD)v22)
        {
          v23 = re::profilerThreadContext(v22);
          if (*(_QWORD *)(v23 + 152))
            v38 = mach_absolute_time();
        }
        else
        {
          v23 = 0;
        }
        v46 = 0.0;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v47 = 1;
        v24 = operator new(0x38uLL);
        *v24 = &off_24ED7B398;
        v24[1] = &v48;
        *((_DWORD *)v24 + 4) = v16;
        v24[3] = v15;
        v24[4] = v17;
        v24[5] = &rep;
        v24[6] = this;
        v50 = v24;
        re::runInLocalAutoreleasePool((uint64_t)v49);
        (*(void (**)(_QWORD *))(*v24 + 40))(v24);
        v46 = v46 + (double)(std::chrono::steady_clock::now().__d_.__rep_ - rep) / 1000000000.0;
        v47 = 0;
        v25 = *((_QWORD *)this + 1);
        v26.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        v27 = *(_QWORD *)(v25 + 104);
        if (v27)
        {
          if (v47)
            v28 = 1.0;
          else
            v28 = 0.0;
          *(double *)(v27 + 880) = v46 + (double)(v26.__d_.__rep_ - rep) / 1000000000.0 * v28;
        }
        if (v23)
        {
          if (*(_QWORD *)(v23 + 152))
          {
            v26.__d_.__rep_ = mach_absolute_time();
            v29 = *(int64x2_t **)(v23 + 152);
            if (v29)
            {
              v30 = v29[36].u64[0];
              if (v30 >= v26.__d_.__rep_ - v38)
                v30 = v26.__d_.__rep_ - v38;
              v29[36].i64[0] = v30;
              v31 = v29[36].u64[1];
              if (v31 <= v26.__d_.__rep_ - v38)
                v31 = v26.__d_.__rep_ - v38;
              v29[36].i64[1] = v31;
              v32 = vdupq_n_s64(1uLL);
              v32.i64[0] = v26.__d_.__rep_ - v38;
              v29[37] = vaddq_s64(v29[37], v32);
              *(_BYTE *)(v23 + 184) = 0;
            }
          }
        }
        v33 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v26.__d_.__rep_);
        if ((_DWORD)v33)
        {
          v34 = (re::ProfilerThreadContext *)re::profilerThreadContext(v33);
          re::ProfilerThreadContext::end(v34);
        }
        v35 = v48;
        std::mutex::lock(v39);
        do
          v36 = __ldaxr(v6);
        while (__stlxr(v36 + 1, v6));
        if (v35)
        {
          do
            v37 = __ldaxr(v7);
          while (__stlxr(v37 + 1, v7));
        }
        std::condition_variable::notify_one((std::condition_variable *)((char *)this + 272));
        std::mutex::unlock(v39);
      }
    }
    while (*((_QWORD *)this + 15) != *((_QWORD *)this + 5 * ((*((_DWORD *)this + 28) & 1) == 0) + 6));
  }
  while ((v9 & 1) == 0);
}

void re::RenderThread::join(re::RenderThread *this)
{
  int v2;

  if (*((_BYTE *)this + 16))
  {
    if (!*((_BYTE *)this + 18))
    {
      *((_BYTE *)this + 18) = 1;
      v2 = 1;
      re::EventQueue::postEvent((os_unfair_lock_s *)this + 6, &v2, 4uLL);
      re::internal::AutoResetEvent::set((re::RenderThread *)((char *)this + 320));
      std::thread::join((std::thread *)this);
    }
  }
}

void re::RenderThread::commitFrame(uint64_t a1, int a2, re::RenderFrameWorkload *a3)
{
  uint64_t v6;
  re::FrameManager *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  _BYTE v19[16];
  int v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  re::RenderFrameWorkload *v24;

  if (*(_BYTE *)(a1 + 16))
  {
    v20 = 0;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(re::FrameManager **)(v6 + 136);
    v8 = *((_QWORD *)v7 + 3) & 0xFFFFFFFFFFFFFFFLL;
    v21 = v8 | ((unint64_t)*((_QWORD *)v7 + 2) << 60);
    v9 = *(_QWORD *)(v6 + 104);
    if (v9)
    {
      v9 = re::RenderFrameBox::get(v9 + 344, 0xFFFFFFFFFFFFFFFuLL);
      v7 = *(re::FrameManager **)(*(_QWORD *)(a1 + 8) + 136);
    }
    v22 = v9;
    v23 = a2;
    v24 = a3;
    v10 = (unsigned int *)(re::FrameManager::getFrameRefCount(v7, v8) + 128);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v19, 1506, *(_QWORD *)(a1 + 8));
    re::internal::AutoResetEvent::set((re::internal::AutoResetEvent *)(a1 + 320));
    re::RenderThread::waitForIdleInternal((re::RenderThread *)a1);
    re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v19);
    re::EventQueue::postEvent((os_unfair_lock_s *)(a1 + 24), &v20, 0x28uLL);
    v12 = (unint64_t *)(a1 + 176);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    if (*((_BYTE *)a3 + 184))
    {
      v14 = *(_QWORD *)(a1 + 168);
      v15 = atomic_load((unint64_t *)(a1 + 176));
      *(_QWORD *)(a1 + 160) = v14;
      *(_QWORD *)(a1 + 168) = v15;
    }
    re::internal::AutoResetEvent::set((re::internal::AutoResetEvent *)(a1 + 320));
    if (a2 == 2)
    {
      re::RenderThread::waitForIdleInternal((re::RenderThread *)a1);
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 104);
      if (v16)
        v17 = *(float *)(v16 + 1760);
      else
        v17 = 0.0;
      re::RenderFrameWorkload::immediatePresentDrawables(a3, 1.0 / v17);
    }
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 104);
    if (!v18 || !*(_BYTE *)(*(_QWORD *)(v18 + 256) + 267))
      re::RenderThread::waitForFramePacing((re::RenderThread *)a1);
    if (a2 == 1 || *(_BYTE *)(a1 + 17))
      re::RenderThread::waitForIdleInternal((re::RenderThread *)a1);
  }
}

void re::RenderThread::waitForIdleInternal(re::RenderThread *this)
{
  std::unique_lock<std::mutex>::mutex_type *m;
  std::unique_lock<std::mutex> v3;

  m = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 208);
  v3.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 208);
  v3.__owns_ = 1;
  std::mutex::lock((std::mutex *)((char *)this + 208));
  if (*((_QWORD *)this + 23) >= *((_QWORD *)this + 22))
    goto LABEL_5;
  do
    std::condition_variable::wait((std::condition_variable *)((char *)this + 272), &v3);
  while (*((_QWORD *)this + 23) < *((_QWORD *)this + 22));
  if (v3.__owns_)
  {
    m = v3.__m_;
LABEL_5:
    std::mutex::unlock(m);
  }
}

void re::RenderThread::waitForFramePacing(re::RenderThread *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  unint64_t v6;
  unint64_t v7;
  std::chrono::system_clock::time_point v8;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v9;
  uint64_t v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  float v15;
  std::chrono::system_clock::time_point v16;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v17;
  uint64_t v18;
  double v19;
  unint64_t v20;
  unint64_t v21;
  double v22;
  float v23;
  std::chrono::steady_clock::time_point v24;
  double v25;
  float v26;
  std::unique_lock<std::mutex> __lk;
  _BYTE v28[16];
  mach_timebase_info info;

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v28, 1508, *((_QWORD *)this + 1));
  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 104);
  if (v2)
    v3 = *(_QWORD *)(v2 + 1648);
  else
    v3 = 0;
  *(_QWORD *)(v3 + 272) = 0;
  *(_QWORD *)(v3 + 280) = 0;
  *(_BYTE *)(v3 + 288) = 0;
  *(std::chrono::steady_clock::time_point *)(v3 + 272) = std::chrono::steady_clock::now();
  *(_BYTE *)(v3 + 288) = 1;
  v4 = mach_absolute_time();
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 208);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)((char *)this + 208));
  v5 = 0.0;
  while (1)
  {
    v6 = *((_QWORD *)this + 24);
    v7 = *((_QWORD *)this + 20);
    if (v6 >= v7)
      break;
    std::chrono::steady_clock::now();
    v8.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    v9.__d_.__rep_ = 8000000;
    if (v8.__d_.__rep_)
    {
      if (v8.__d_.__rep_ < 1)
      {
        if ((unint64_t)v8.__d_.__rep_ >= 0xFFDF3B645A1CAC09)
          v9.__d_.__rep_ = 1000 * v8.__d_.__rep_ + 8000000;
        else
          v9.__d_.__rep_ = 0x80000000007A1200;
      }
      else if ((unint64_t)v8.__d_.__rep_ < 0x20C49BA5E334B8)
      {
        v9.__d_.__rep_ = 1000 * v8.__d_.__rep_ + 8000000;
      }
      else
      {
        v9.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
      }
    }
    std::condition_variable::__do_timed_wait((std::condition_variable *)((char *)this + 272), &__lk, v9);
    std::chrono::steady_clock::now();
    v10 = mach_absolute_time();
    v11 = *(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale;
    if (*(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale >= 0.0)
      goto LABEL_18;
    if (!mach_timebase_info(&info))
    {
      LODWORD(v12) = info.numer;
      LODWORD(v13) = info.denom;
      v11 = (double)v12 / (double)v13;
      re::convertMachTimeToNanoSecs(unsigned long long)::tmscale = *(_QWORD *)&v11;
LABEL_18:
      v14 = v11 * (double)(v10 - v4);
      goto LABEL_19;
    }
    v14 = NAN;
LABEL_19:
    v15 = v14 / 1000000.0;
    v5 = v5 + v15;
    v4 = v10;
    if (v5 > 100.0)
      goto LABEL_22;
  }
  v10 = v4;
LABEL_22:
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  if (v6 >= v7)
  {
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 208);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)((char *)this + 208));
    while (1)
    {
      if (*((_QWORD *)this + 25) >= *((_QWORD *)this + 20))
      {
LABEL_41:
        if (__lk.__owns_)
          std::mutex::unlock(__lk.__m_);
        goto LABEL_43;
      }
      std::chrono::steady_clock::now();
      v16.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      v17.__d_.__rep_ = 8000000;
      if (v16.__d_.__rep_)
      {
        if (v16.__d_.__rep_ < 1)
        {
          if ((unint64_t)v16.__d_.__rep_ >= 0xFFDF3B645A1CAC09)
            v17.__d_.__rep_ = 1000 * v16.__d_.__rep_ + 8000000;
          else
            v17.__d_.__rep_ = 0x80000000007A1200;
        }
        else if ((unint64_t)v16.__d_.__rep_ < 0x20C49BA5E334B8)
        {
          v17.__d_.__rep_ = 1000 * v16.__d_.__rep_ + 8000000;
        }
        else
        {
          v17.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
        }
      }
      std::condition_variable::__do_timed_wait((std::condition_variable *)((char *)this + 272), &__lk, v17);
      std::chrono::steady_clock::now();
      v18 = mach_absolute_time();
      v19 = *(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale;
      if (*(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale >= 0.0)
        goto LABEL_39;
      if (!mach_timebase_info(&info))
        break;
      v22 = NAN;
LABEL_40:
      v23 = v22 / 1000000.0;
      v5 = v5 + v23;
      v10 = v18;
      if (v5 > 100.0)
        goto LABEL_41;
    }
    LODWORD(v20) = info.numer;
    LODWORD(v21) = info.denom;
    v19 = (double)v20 / (double)v21;
    re::convertMachTimeToNanoSecs(unsigned long long)::tmscale = *(_QWORD *)&v19;
LABEL_39:
    v22 = v19 * (double)(v18 - v10);
    goto LABEL_40;
  }
LABEL_43:
  v24.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v25 = 0.0;
  if (*(_BYTE *)(v3 + 288))
    v25 = 1.0;
  v26 = (*(double *)(v3 + 280) + (double)(v24.__d_.__rep_ - *(_QWORD *)(v3 + 272)) / 1000000000.0 * v25) * 1000.0;
  *(float *)(v3 + 240) = v26;
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v28);
}

void re::RenderThread::workloadGPUCompleted(re::RenderThread *this)
{
  std::mutex *v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = (std::mutex *)((char *)this + 208);
  std::mutex::lock((std::mutex *)((char *)this + 208));
  v3 = (unint64_t *)((char *)this + 192);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  std::condition_variable::notify_one((std::condition_variable *)((char *)this + 272));
  std::mutex::unlock(v2);
}

void re::RenderThread::waitForCallbacksCompletion(re::RenderThread *this)
{
  unint64_t v2;
  std::unique_lock<std::mutex> v3;

  v3.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 208);
  v3.__owns_ = 1;
  std::mutex::lock((std::mutex *)((char *)this + 208));
  v2 = *((_QWORD *)this + 22);
  while (*((_QWORD *)this + 24) < v2 || *((_QWORD *)this + 25) < v2)
    std::condition_variable::wait((std::condition_variable *)((char *)this + 272), &v3);
  if (v3.__owns_)
    std::mutex::unlock(v3.__m_);
}

uint64_t std::__thread_proxy[abi:nn180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(void *),re::RenderThread *>>(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t *v5;

  v5 = (uint64_t *)a1;
  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  (*(void (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(void *),re::RenderThread *>>::reset[abi:nn180100](&v5, 0);
  return 0;
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(void *),re::RenderThread *>>::reset[abi:nn180100](uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:nn180100](v2, 0);
    JUMPOUT(0x2276933B8);
  }
  return result;
}

uint64_t std::unique_ptr<std::__thread_struct>::reset[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x227693100]();
    JUMPOUT(0x2276933B8);
  }
  return result;
}

void std::__function::__func<re::RenderThread::doRender(re::WorkloadCommitMode,re::RenderFrameWorkload *,re::FrameCount)::$_0,std::allocator<re::RenderThread::doRender(re::WorkloadCommitMode,re::RenderFrameWorkload *,re::FrameCount)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::RenderThread::doRender(re::WorkloadCommitMode,re::RenderFrameWorkload *,re::FrameCount)::$_0,std::allocator<re::RenderThread::doRender(re::WorkloadCommitMode,re::RenderFrameWorkload *,re::FrameCount)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_24ED7B398;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<re::RenderThread::doRender(re::WorkloadCommitMode,re::RenderFrameWorkload *,re::FrameCount)::$_0,std::allocator<re::RenderThread::doRender(re::WorkloadCommitMode,re::RenderFrameWorkload *,re::FrameCount)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24ED7B398;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<re::RenderThread::doRender(re::WorkloadCommitMode,re::RenderFrameWorkload *,re::FrameCount)::$_0,std::allocator<re::RenderThread::doRender(re::WorkloadCommitMode,re::RenderFrameWorkload *,re::FrameCount)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  re::DrawingManager *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  unint64_t v12;
  void **v13;
  _BYTE v15[16];
  char *v16;
  uint64_t v17;
  void **v18;
  _BYTE v19[24];
  uint64_t v20;
  _BYTE *v21;
  _BYTE v22[24];
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25[3];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(re::DrawingManager **)(*(_QWORD *)(v3 + 8) + 104);
  *(double *)(v2 + 8) = *(double *)(v2 + 8)
                      + (double)(std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v2) / 1000000000.0;
  *(_BYTE *)(v2 + 16) = 0;
  re::DrawingManager::waitForGPUInternal(v4);
  v5 = *(_QWORD *)(a1 + 40);
  *(std::chrono::steady_clock::time_point *)v5 = std::chrono::steady_clock::now();
  *(_BYTE *)(v5 + 16) = 1;
  v6 = re::RenderFrameBox::get((uint64_t)v4 + 344, *(_QWORD *)(a1 + 32));
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v7 = *(_QWORD *)(a1 + 40);
  *(double *)(v7 + 8) = *(double *)(v7 + 8)
                      + (double)(std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v7) / 1000000000.0;
  *(_BYTE *)(v7 + 16) = 0;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v25);
  re::RenderFrame::acquireDrawables(v6, &v16);
  re::ProfilerTimeGuard<(re::ProfilerStatistic)11>::end((uint64_t)v25);
  v8 = *(_QWORD *)(a1 + 40);
  *(std::chrono::steady_clock::time_point *)v8 = std::chrono::steady_clock::now();
  *(_BYTE *)(v8 + 16) = 1;
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v15, 5004, *(_QWORD *)(v3 + 8));
  re::DrawingManager::executeFrameInternal((id **)v4, *(re::RenderFrameWorkload **)(a1 + 24));
  v9 = re::globalAllocators((re *)(id)(*(_QWORD *)(a1 + 24) + 8))[2];
  v25[0] = (uint64_t)&off_24ED7B408;
  v25[1] = v3;
  v26 = v9;
  v27 = v25;
  v10 = v17;
  if (v17)
  {
    v11 = v18;
    while (!*v11)
    {
      ++v11;
      if (!--v10)
        goto LABEL_11;
    }
    v23 = v9;
    v24 = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v22, (uint64_t)v25);
    re::mtl::Drawable::addPresentedHandler(v11, (uint64_t)v22);
    if (v24)
    {
      (**(void (***)(_BYTE *))v24)(v24);
      if (v24 != v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
      v24 = 0;
    }
    **(_BYTE **)(a1 + 8) = 0;
  }
LABEL_11:
  v12 = *(_QWORD *)(a1 + 24);
  if (**(_BYTE **)(a1 + 8) && *(_QWORD *)(v12 + 208))
  {
    v13 = *(void ***)(v12 + 224);
    v20 = v26;
    v21 = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v19, (uint64_t)v25);
    re::mtl::Drawable::addPresentedHandler(v13, (uint64_t)v19);
    if (v21)
    {
      (**(void (***)(_BYTE *))v21)(v21);
      if (v21 != v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
      v21 = 0;
    }
    **(_BYTE **)(a1 + 8) = 0;
    v12 = *(_QWORD *)(a1 + 24);
  }
  re::DrawingManager::presentDrawablesAndCommit(v4, &v16, *(unsigned int *)(a1 + 16), v12);

  if (*(_DWORD *)(a1 + 16) == 1)
    re::RenderFrame::onFrameComplete(v6);
  if (v27)
  {
    (*(void (**)(uint64_t *))*v27)(v27);
    if (v27 != v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v15);
  return re::FixedArray<re::mtl::Drawable>::deinit(&v16);
}

uint64_t std::__function::__func<re::RenderThread::doRender(re::WorkloadCommitMode,re::RenderFrameWorkload *,re::FrameCount)::$_0,std::allocator<re::RenderThread::doRender(re::WorkloadCommitMode,re::RenderFrameWorkload *,re::FrameCount)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderThread::doRender(re::WorkloadCommitMode,re::RenderFrameWorkload *,re::FrameCount)::$_0,std::allocator<re::RenderThread::doRender(re::WorkloadCommitMode,re::RenderFrameWorkload *,re::FrameCount)::$_0>,void ()(void)>::target_type()
{
}

void re::internal::Callable<re::RenderThread::doRender(re::WorkloadCommitMode,re::RenderFrameWorkload *,re::FrameCount)::$_0::operator() const(void)::{lambda(re::mtl::Drawable)#1},void ()(re::mtl::Drawable const&)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::RenderThread::doRender(re::WorkloadCommitMode,re::RenderFrameWorkload *,re::FrameCount)::$_0::operator() const(void)::{lambda(re::mtl::Drawable)#1},void ()(re::mtl::Drawable const&)>::operator()(uint64_t a1, id *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  id v6;

  v6 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v3 + 208));
  v4 = (unint64_t *)(v3 + 200);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  std::condition_variable::notify_one((std::condition_variable *)(v3 + 272));
  std::mutex::unlock((std::mutex *)(v3 + 208));

}

_QWORD *re::internal::Callable<re::RenderThread::doRender(re::WorkloadCommitMode,re::RenderFrameWorkload *,re::FrameCount)::$_0::operator() const(void)::{lambda(re::mtl::Drawable)#1},void ()(re::mtl::Drawable const&)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED7B408;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::RenderThread::doRender(re::WorkloadCommitMode,re::RenderFrameWorkload *,re::FrameCount)::$_0::operator() const(void)::{lambda(re::mtl::Drawable)#1},void ()(re::mtl::Drawable const&)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED7B408;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderThread::doRender(re::WorkloadCommitMode,re::RenderFrameWorkload *,re::FrameCount)::$_0::operator() const(void)::{lambda(re::mtl::Drawable)#1},void ()(re::mtl::Drawable const&)>::size()
{
  return 16;
}

void re::APIFunctionCache::init(uint64_t a1, id *a2)
{
  uint64_t v4;
  uint64_t i;
  re::ns *v6;
  id v7;
  uint64_t j;
  re::ns *v9;
  id v10;
  uint64_t k;
  re::ns *v12;
  id v13;
  uint64_t m;
  re::ns *v15;
  id v16;
  uint64_t n;
  re::ns *v18;
  id v19;
  uint64_t ii;
  re::ns *v21;
  id v22;
  uint64_t jj;
  re::ns *v24;
  id v25;
  uint64_t kk;
  re::ns *v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  unint64_t v33;
  unint64_t v34;
  double v35;
  NSObject *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  mach_timebase_info info;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v4 = mach_absolute_time();
  for (i = 0; i != 12; ++i)
  {
    v6 = (re::ns *)realitykit_shader_api::textureFunctions[i];
    v7 = *a2;
    v45 = v7;
    re::APIFunctionCache::gatherFunctionConstantReflectionData(a1, v6, &v45);

  }
  for (j = 0; j != 9; ++j)
  {
    v9 = (re::ns *)realitykit_shader_api::materialFunctions[j];
    v10 = *a2;
    v44 = v10;
    re::APIFunctionCache::gatherFunctionConstantReflectionData(a1, v9, &v44);

  }
  for (k = 0; k != 47; ++k)
  {
    v12 = (re::ns *)realitykit_shader_api::geometry_modifierFunctions[k];
    v13 = *a2;
    v43 = v13;
    re::APIFunctionCache::gatherFunctionConstantReflectionData(a1, v12, &v43);

  }
  for (m = 0; m != 54; ++m)
  {
    v15 = (re::ns *)realitykit_shader_api::surfaceFunctions[m];
    v16 = *a2;
    v42 = v16;
    re::APIFunctionCache::gatherFunctionConstantReflectionData(a1, v15, &v42);

  }
  for (n = 0; n != 55; ++n)
  {
    v18 = (re::ns *)realitykit_shader_api::geometry_modifier_privateFunctions[n];
    v19 = *a2;
    v41 = v19;
    re::APIFunctionCache::gatherFunctionConstantReflectionData(a1, v18, &v41);

  }
  for (ii = 0; ii != 60; ++ii)
  {
    v21 = (re::ns *)realitykit_shader_api::surface_privateFunctions[ii];
    v22 = *a2;
    v40 = v22;
    re::APIFunctionCache::gatherFunctionConstantReflectionData(a1, v21, &v40);

  }
  for (jj = 0; jj != 13; ++jj)
  {
    v24 = (re::ns *)realitykit_shader_api::ui_geometry_modifier_privateFunctions[jj];
    v25 = *a2;
    v39 = v25;
    re::APIFunctionCache::gatherFunctionConstantReflectionData(a1, v24, &v39);

  }
  for (kk = 0; kk != 22; ++kk)
  {
    v27 = (re::ns *)realitykit_shader_api::uisurface_privateFunctions[kk];
    v28 = *a2;
    v38 = v28;
    re::APIFunctionCache::gatherFunctionConstantReflectionData(a1, v27, &v38);

  }
  v29 = *a2;
  v37 = v29;
  re::APIFunctionCache::gatherFunctionConstantReflectionData(a1, (re::ns *)"realitykit::texture_private::api::custom_at", &v37);

  v30 = mach_absolute_time();
  v31 = v30;
  v32 = *(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale;
  if (*(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale < 0.0)
  {
    v30 = mach_timebase_info(&info);
    if ((_DWORD)v30)
    {
      v35 = NAN;
      goto LABEL_22;
    }
    LODWORD(v33) = info.numer;
    LODWORD(v34) = info.denom;
    v32 = (double)v33 / (double)v34;
    re::convertMachTimeToNanoSecs(unsigned long long)::tmscale = *(_QWORD *)&v32;
  }
  v35 = v32 * (double)(v31 - v4);
LABEL_22:
  v36 = *re::graphicsLogObjects((re *)v30);
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    info.numer = 67109120;
    info.denom = (int)(v35 / 1000000.0);
    _os_log_impl(&dword_224FE9000, v36, OS_LOG_TYPE_DEFAULT, "API function cache initialized in %d", (uint8_t *)&info, 8u);
  }
}

void re::APIFunctionCache::gatherFunctionConstantReflectionData(uint64_t a1, re::ns *a2, void **a3)
{
  size_t v5;
  unint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  unsigned int v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  _OWORD v31[2];
  int v32;
  uint64_t v33;
  id v34;
  id v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  re::mtl::Library::makeFunction(a3, a2, &v34);
  v32 = 0;
  memset(v31, 0, sizeof(v31));
  v33 = 0x7FFFFFFFLL;
  v5 = strlen((const char *)a2);
  if (v5)
  {
    MurmurHash3_x64_128((uint64_t)a2, v5, 0, (unint64_t *)&v37);
    v6 = (*((_QWORD *)&v37 + 1) + ((_QWORD)v37 << 6) + ((unint64_t)v37 >> 2) - 0x61C8864680B583E9) ^ v37;
  }
  else
  {
    v6 = 0;
  }
  v30 = v6;
  v7 = v34;
  if (!objc_msgSend(objc_msgSend(v34, sel_functionConstantsDictionary), sel_count))
  {
    v16 = re::globalAllocators(0);
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16[2] + 32))(v16[2], 16, 8);
    *(_QWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = 0;
    *(_QWORD *)&v37 = v17;
    NS::SharedPtr<MTL::Texture>::operator=((void **)(v17 + 8), &v34);
    atomic_store(2u, (unsigned __int8 *)v17);
    re::HashTable<unsigned long,re::CachedAPIFunction *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add<re::CachedAPIFunction *&>(a1, &v30, &v37);
    goto LABEL_30;
  }
  v8 = objc_msgSend(v7, sel_functionConstantsDictionary);
  v37 = 0u;
  v38 = 0u;
  v39 = 0;
  v40 = 0x7FFFFFFFLL;
  v9 = objc_msgSend(v8, sel_keyEnumerator);
  v10 = objc_msgSend(v9, sel_nextObject);
  if (v10)
  {
    v11 = v10;
    do
    {
      v36 = (char *)objc_msgSend(v11, sel_UTF8String);
      v35 = objc_msgSend(v8, sel_objectForKey_, v11);
      re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::add((uint64_t)&v37, &v36, &v35);
      if (v35)

      v11 = objc_msgSend(v9, sel_nextObject);
    }
    while (v11);
    v12 = v39;
    if (v39)
    {
      v13 = 0;
      v14 = (int *)(v38 + 8);
      while (1)
      {
        v15 = *v14;
        v14 += 8;
        if (v15 < 0)
          goto LABEL_18;
        if (v39 == ++v13)
        {
          LODWORD(v13) = v39;
          goto LABEL_18;
        }
      }
    }
  }
  else
  {
    v12 = 0;
  }
  LODWORD(v13) = 0;
LABEL_18:
  if (v12 != (_DWORD)v13)
  {
    v18 = v13;
    v19 = v38;
    do
    {
      LOWORD(v36) = (unsigned __int16)objc_msgSend(*(id *)(v19 + 32 * v18 + 24), sel_index);
      re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::addNew((uint64_t)v31, &v36);
      v19 = v38;
      if (v39 <= (int)v13 + 1)
        v20 = v13 + 1;
      else
        v20 = v39;
      v21 = v13;
      while (1)
      {
        v18 = (v21 + 1);
        if (v20 - 1 == v21)
          break;
        ++v21;
        LODWORD(v13) = v18;
        if ((*(_DWORD *)(v38 + 32 * v18 + 8) & 0x80000000) != 0)
          goto LABEL_28;
      }
      LODWORD(v13) = v20;
LABEL_28:
      ;
    }
    while (v12 != (_DWORD)v13);
  }
  re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v37);
LABEL_30:
  if (*(_QWORD *)(a1 + 48))
  {
    v22 = v6 % *(unsigned int *)(a1 + 72);
    v23 = *(unsigned int *)(*(_QWORD *)(a1 + 56) + 4 * v22);
    if ((_DWORD)v23 != 0x7FFFFFFF)
    {
      v24 = *(_QWORD *)(a1 + 64);
      if (*(_QWORD *)(v24 + (v23 << 6) + 8) == v6)
        goto LABEL_43;
      while (1)
      {
        v23 = *(_DWORD *)(v24 + (v23 << 6)) & 0x7FFFFFFF;
        if ((_DWORD)v23 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v24 + (v23 << 6) + 8) == v6)
          goto LABEL_43;
      }
    }
  }
  else
  {
    LODWORD(v22) = 0;
  }
  v25 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v25 == 0x7FFFFFFF)
  {
    v25 = *(unsigned int *)(a1 + 80);
    v26 = v25;
    if ((_DWORD)v25 == *(_DWORD *)(a1 + 72))
    {
      re::HashTable<unsigned long,re::HashSet<unsigned short,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1 + 48, 2 * *(_DWORD *)(a1 + 76));
      LODWORD(v22) = v6 % *(unsigned int *)(a1 + 72);
      v26 = *(_DWORD *)(a1 + 80);
    }
    *(_DWORD *)(a1 + 80) = v26 + 1;
    v27 = *(_QWORD *)(a1 + 64);
    v28 = *(_DWORD *)(v27 + (v25 << 6));
  }
  else
  {
    v27 = *(_QWORD *)(a1 + 64);
    v28 = *(_DWORD *)(v27 + (v25 << 6));
    *(_DWORD *)(a1 + 84) = v28 & 0x7FFFFFFF;
  }
  v29 = v25 << 6;
  *(_DWORD *)(v27 + v29) = v28 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 64) + v29) = *(_DWORD *)(*(_QWORD *)(a1 + 64) + (v25 << 6)) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4 * v22);
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + (v25 << 6) + 8) = v6;
  re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::HashSetBase(*(_QWORD *)(a1 + 64) + (v25 << 6) + 16, (uint64_t)v31);
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4 * v22) = v25;
  ++*(_DWORD *)(a1 + 76);
  ++*(_DWORD *)(a1 + 88);
LABEL_43:
  re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit((uint64_t *)v31);
  if (v34)

}

re *re::APIFunctionCache::deinit(re *this)
{
  re *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;

  v1 = this;
  v2 = *((unsigned int *)this + 8);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = (int *)*((_QWORD *)this + 2);
    while (1)
    {
      v5 = *v4;
      v4 += 6;
      if (v5 < 0)
        break;
      if (v2 == ++v3)
      {
        LODWORD(v3) = *((_DWORD *)this + 8);
        break;
      }
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if ((_DWORD)v2 != (_DWORD)v3)
  {
    v6 = v3;
    do
    {
      v7 = *((_QWORD *)v1 + 2) + 24 * v6;
      *(_QWORD *)&v10 = *(_QWORD *)(v7 + 16);
      BYTE8(v10) = 1;
      HIDWORD(v10) = 5;
      v11 = v10;
      v12 = v10;
      std::__libcpp_thread_poll_with_backoff[abi:nn180100]<std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,re::VertexFetchCompilationState> &,std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,re::VertexFetchCompilationState>> &>((uint64_t)&v10, (uint64_t)&v11, 0);
      this = re::internal::destroyPersistent<re::CachedAPIFunction>((re *)"deinit", 55, *(_QWORD *)(v7 + 16));
      if (*((_DWORD *)v1 + 8) <= (v3 + 1))
        v8 = v3 + 1;
      else
        v8 = *((_DWORD *)v1 + 8);
      v9 = v3;
      while (1)
      {
        v6 = (v9 + 1);
        if (v8 - 1 == v9)
          break;
        ++v9;
        LODWORD(v3) = v6;
        if ((*(_DWORD *)(*((_QWORD *)v1 + 2) + 24 * v6) & 0x80000000) != 0)
          goto LABEL_17;
      }
      LODWORD(v3) = v8;
LABEL_17:
      ;
    }
    while ((_DWORD)v2 != (_DWORD)v3);
  }
  return this;
}

re *re::internal::destroyPersistent<re::CachedAPIFunction>(re *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    v5 = *(void **)(a3 + 8);
    if (v5)
    {

      *(_QWORD *)(a3 + 8) = 0;
    }
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

double re::APIFunctionCache::getOrCreateAPIFunction(uint64_t a1, char *__s, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, dispatch_group_t *a7, int a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t As64Bits;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  id v35;
  id v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unsigned __int8 *v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  void **v50;
  void **v51;
  unint64_t v53;
  int v54;
  unint64_t v56;
  uint64_t v57[3];
  int v58;
  uint64_t v59;
  _BYTE v60[24];
  uint64_t v61;
  _BYTE *v62;
  _BYTE v63[12];
  __int16 v64;
  int v65;
  __int16 v66;
  unint64_t v67;
  __int16 v68;
  unint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v18 = strlen(__s);
  if (v18)
  {
    MurmurHash3_x64_128((uint64_t)__s, v18, 0, (unint64_t *)&v70);
    v19 = (*((_QWORD *)&v70 + 1) - 0x61C8864680B583E9 + ((_QWORD)v70 << 6) + ((unint64_t)v70 >> 2)) ^ v70;
  }
  else
  {
    v19 = 0;
  }
  LODWORD(v20) = 0x7FFFFFFF;
  if (*(_QWORD *)(a1 + 48))
  {
    v21 = *(unsigned int *)(*(_QWORD *)(a1 + 56) + 4 * (v19 % *(unsigned int *)(a1 + 72)));
    if ((_DWORD)v21 != 0x7FFFFFFF)
    {
      v22 = *(_QWORD *)(a1 + 64);
      LODWORD(v20) = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4 * (v19 % *(unsigned int *)(a1 + 72)));
      if (*(_QWORD *)(v22 + (v21 << 6) + 8) != v19)
      {
        v20 = *(unsigned int *)(*(_QWORD *)(a1 + 56) + 4 * (v19 % *(unsigned int *)(a1 + 72)));
        while (1)
        {
          v20 = *(_DWORD *)(v22 + (v20 << 6)) & 0x7FFFFFFF;
          if ((_DWORD)v20 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v22 + (v20 << 6) + 8) == v19)
            goto LABEL_12;
        }
        LODWORD(v20) = 0x7FFFFFFF;
      }
    }
  }
LABEL_12:
  As64Bits = re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::HashSetBase((uint64_t)v57, *(_QWORD *)(a1 + 64) + ((unint64_t)v20 << 6) + 16);
  if (!v58)
  {
    v40 = 0x7FFFFFFF;
    if (*(_QWORD *)a1)
    {
      v41 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * (v19 % *(unsigned int *)(a1 + 24)));
      if (v41 != 0x7FFFFFFF)
      {
        v42 = *(_QWORD *)(a1 + 16);
        v40 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * (v19 % *(unsigned int *)(a1 + 24)));
        if (*(_QWORD *)(v42 + 24 * v41 + 8) != v19)
        {
          while (1)
          {
            v40 = *(_DWORD *)(v42
                            + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v19 % *(unsigned int *)(a1 + 24)))) & 0x7FFFFFFF;
            if (v40 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v42 + 24 * v40 + 8) == v19)
              goto LABEL_47;
          }
          v40 = 0x7FFFFFFF;
        }
      }
    }
LABEL_47:
    v49 = *(_QWORD *)(a10 + 8);
    if (v49 > a11)
    {
      v50 = (void **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v40 + 16) + 8);
      v51 = (void **)(*(_QWORD *)(a10 + 16) + 8 * a11);
      goto LABEL_49;
    }
    v59 = 0;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v70 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v63 = 136315906;
    *(_QWORD *)&v63[4] = "operator[]";
    v64 = 1024;
    v65 = 468;
    v66 = 2048;
    v67 = a11;
    v68 = 2048;
    v69 = v49;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_52:
    v59 = 0;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v70 = 0u;
    v53 = v48;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v63 = 136315906;
    *(_QWORD *)&v63[4] = "operator[]";
    v64 = 1024;
    v65 = 468;
    v66 = 2048;
    v67 = v53;
    v68 = 2048;
    v69 = v49;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v54 = a8;
  v24 = 0;
  if (a5)
  {
    v25 = a5 << 6;
    v26 = (unsigned __int16 *)(a4 + 34);
    do
    {
      As64Bits = re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::contains((uint64_t)v57, v26);
      if ((_DWORD)As64Bits)
      {
        As64Bits = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)(v26 - 17));
        v27 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (As64Bits ^ (As64Bits >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                        * (As64Bits ^ (As64Bits >> 30))) >> 27));
        v28 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * *v26) ^ ((0xBF58476D1CE4E5B9 * *v26) >> 27));
        v24 ^= v27 ^ (v27 >> 31) ^ ((v28 ^ (v28 >> 31))
                                  - 0x61C8864680B583E9
                                  + ((v27 ^ (v27 >> 31)) << 6)
                                  + ((v27 ^ (v27 >> 31)) >> 2));
      }
      v26 += 32;
      v25 -= 64;
    }
    while (v25);
  }
  v29 = ((v19 << 6) - 0x61C8864680B583E9 + (v19 >> 2) + v24) ^ v19;
  v56 = v29;
  if (*(_QWORD *)a1)
  {
    v30 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v29 % *(unsigned int *)(a1 + 24)));
    if ((_DWORD)v30 != 0x7FFFFFFF)
    {
      v43 = *(_QWORD *)(a1 + 16);
      while (*(_QWORD *)(v43 + 24 * v30 + 8) != v29)
      {
        LODWORD(v30) = *(_DWORD *)(v43 + 24 * v30) & 0x7FFFFFFF;
        if ((_DWORD)v30 == 0x7FFFFFFF)
          goto LABEL_20;
      }
      v44 = v43 + 24 * v30;
      v46 = *(unsigned __int8 **)(v44 + 16);
      v45 = (uint64_t *)(v44 + 16);
      v47 = atomic_load(v46);
      if (v47 != 2)
      {
        v32 = *v45;
        v33 = 1;
        goto LABEL_21;
      }
      v48 = a11;
      v49 = *(_QWORD *)(a10 + 8);
      if (v49 > a11)
      {
        v50 = (void **)(*v45 + 8);
        v51 = (void **)(*(_QWORD *)(a10 + 16) + 8 * a11);
LABEL_49:
        NS::SharedPtr<MTL::Texture>::operator=(v51, v50);
        return re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit(v57);
      }
      goto LABEL_52;
    }
  }
LABEL_20:
  v31 = re::globalAllocators((re *)As64Bits);
  v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v31[2] + 32))(v31[2], 16, 8);
  *(_QWORD *)v32 = 0;
  *(_QWORD *)(v32 + 8) = 0;
  *(_QWORD *)&v70 = v32;
  atomic_store(1u, (unsigned __int8 *)v32);
  re::HashTable<unsigned long,re::CachedAPIFunction *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add<re::CachedAPIFunction *&>(a1, &v56, &v70);
  v33 = 0;
LABEL_21:
  v34 = mach_absolute_time();
  *(_QWORD *)&v70 = *(id *)(a3 + 248);
  re::ShaderManager::makeFunctionDescriptor(a3, (uint64_t)__s, a6, &v70, *(_QWORD *)(a3 + 256), v63);
  dispatch_group_enter(*a7);
  v35 = (id)v70;
  v36 = *(id *)v63;
  v37 = *a7;
  v38 = re::globalAllocators(v37)[2];
  v61 = v38;
  if (v38)
    v39 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v38 + 32))(v38, 104, 0);
  else
    v39 = 0;
  *(_QWORD *)v39 = &off_24ED7BD00;
  *(_QWORD *)(v39 + 8) = v35;
  *(_QWORD *)(v39 + 16) = v36;
  *(_QWORD *)(v39 + 24) = a10;
  *(_QWORD *)(v39 + 32) = a11;
  *(_QWORD *)(v39 + 40) = v34;
  *(_QWORD *)(v39 + 48) = __s;
  *(_QWORD *)(v39 + 56) = a9;
  *(_BYTE *)(v39 + 64) = v54;
  *(_QWORD *)(v39 + 72) = v37;
  *(_QWORD *)(v39 + 80) = v32;
  *(_BYTE *)(v39 + 88) = v33;
  *(_QWORD *)(v39 + 96) = v24;
  v62 = (_BYTE *)v39;
  re::ShaderManager::scheduleAsyncFuncOnCompilationQueue(a3, v54, a9, (uint64_t)v60);
  if (v62)
  {
    (**(void (***)(_BYTE *))v62)(v62);
    if (v62 != v60)
      (*(void (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
    v62 = 0;
  }
  if (v36)

  if (*(_QWORD *)v63)
  return re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit(v57);
}

void re::HashTable<unsigned long,re::CachedAPIFunction *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add<re::CachedAPIFunction *&>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *a2;
  v7 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v7 = v6 % *(unsigned int *)(a1 + 24);
    v8 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v7);
    if ((_DWORD)v8 != 0x7FFFFFFF)
    {
      v13 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(v13 + 24 * v8 + 8) == v6)
        return;
      while (1)
      {
        LODWORD(v8) = *(_DWORD *)(v13 + 24 * v8) & 0x7FFFFFFF;
        if ((_DWORD)v8 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v13 + 24 * v8 + 8) == v6)
          return;
      }
    }
  }
  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::CachedAPIFunction *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v7) = v6 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
      v6 = *a2;
    }
    else
    {
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v9);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v9);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v14 = 24 * v9;
  *(_DWORD *)(v11 + v14) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9 + 8) = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9 + 16) = *a3;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v7) = v9;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
}

uint64_t re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::HashSetBase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u)
      v5 = 3;
    else
      v5 = *(_DWORD *)(a2 + 28);
    re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::init(a1, v4, v5);
    re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::copy(a1, a2);
  }
  return a1;
}

uint64_t re::internal::Callable<re::APIFunctionCache::getOrCreateAPIFunction(char const*,re::ShaderManager const*,re::Slice<re::TechniqueFunctionConstant>,NS::SharedPtr<MTL::FunctionConstantValues> const&,re::dispatch::Group,BOOL,unsigned long long,re::FixedArray<NS::SharedPtr<MTL::Function>> &,unsigned long)::$_0,void ()(void)>::~Callable(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24ED7BD00;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {

    *(_QWORD *)(a1 + 16) = 0;
  }

  return a1;
}

void re::internal::Callable<re::APIFunctionCache::getOrCreateAPIFunction(char const*,re::ShaderManager const*,re::Slice<re::TechniqueFunctionConstant>,NS::SharedPtr<MTL::FunctionConstantValues> const&,re::dispatch::Group,BOOL,unsigned long long,re::FixedArray<NS::SharedPtr<MTL::Function>> &,unsigned long)::$_0,void ()(void)>::~Callable(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24ED7BD00;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {

    *(_QWORD *)(a1 + 16) = 0;
  }

  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::APIFunctionCache::getOrCreateAPIFunction(char const*,re::ShaderManager const*,re::Slice<re::TechniqueFunctionConstant>,NS::SharedPtr<MTL::FunctionConstantValues> const&,re::dispatch::Group,BOOL,unsigned long long,re::FixedArray<NS::SharedPtr<MTL::Function>> &,unsigned long)::$_0,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  unint64_t v9;
  unint64_t v10;
  double v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  NSObject *v16;
  void *v17;
  void *v18;
  _BYTE v19[18];
  __int16 v20;
  unint64_t v21;
  __int16 v22;
  unint64_t v23;
  id v24[6];
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  v2 = mach_absolute_time();
  if (*(_BYTE *)(a1 + 88))
  {
    *(_QWORD *)v19 = *(_QWORD *)(a1 + 80);
    v19[8] = 1;
    *(_DWORD *)&v19[12] = 5;
    v24[0] = *(id *)v19;
    *(_OWORD *)&v24[1] = *(_OWORD *)v19;
    std::__libcpp_thread_poll_with_backoff[abi:nn180100]<std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,re::VertexFetchCompilationState> &,std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,re::VertexFetchCompilationState>> &>((uint64_t)v19, (uint64_t)v24, 0);
  }
  else
  {
    re::mtl::Library::makeFunctionWithDescriptor((id *)(a1 + 8), *(void **)(a1 + 16), v24);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(*(_QWORD *)(a1 + 80) + 8), v24);
    atomic_store(2u, *(unsigned __int8 **)(a1 + 80));
    MEMORY[0x227693220](*(_QWORD *)(a1 + 80));
    if (v24[0])

  }
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v3 + 8);
  if (v5 <= v4)
  {
    v25 = 0u;
    v26 = 0u;
    memset(v24, 0, sizeof(v24));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v19 = 136315906;
    *(_QWORD *)&v19[4] = "operator[]";
    *(_WORD *)&v19[12] = 1024;
    *(_DWORD *)&v19[14] = 468;
    v20 = 2048;
    v21 = v4;
    v22 = 2048;
    v23 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  NS::SharedPtr<MTL::Texture>::operator=((void **)(*(_QWORD *)(v3 + 16) + 8 * v4), (void **)(*(_QWORD *)(a1 + 80) + 8));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
  v6 = mach_absolute_time();
  v7 = re::internal::enableSignposts(0, 0);
  if ((_DWORD)v7)
    v7 = kdebug_trace();
  v8 = *(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale;
  if (*(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale < 0.0)
  {
    v7 = mach_timebase_info((mach_timebase_info_t)v24);
    if ((_DWORD)v7)
    {
      v8 = *(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale;
      v11 = NAN;
      goto LABEL_15;
    }
    LODWORD(v10) = HIDWORD(v24[0]);
    LODWORD(v9) = v24[0];
    v8 = (double)v9 / (double)v10;
    re::convertMachTimeToNanoSecs(unsigned long long)::tmscale = *(_QWORD *)&v8;
  }
  v11 = v8 * (double)(v6 - v2);
LABEL_15:
  v12 = *(_QWORD *)(a1 + 40);
  if (v8 < 0.0)
  {
    v7 = mach_timebase_info((mach_timebase_info_t)v24);
    if ((_DWORD)v7)
    {
      v15 = NAN;
      goto LABEL_20;
    }
    LODWORD(v14) = HIDWORD(v24[0]);
    LODWORD(v13) = v24[0];
    v8 = (double)v13 / (double)v14;
    re::convertMachTimeToNanoSecs(unsigned long long)::tmscale = *(_QWORD *)&v8;
  }
  v15 = v8 * (double)(v6 - v12);
LABEL_20:
  v16 = *re::graphicsLogObjects((re *)v7);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v17 = *(void **)(a1 + 48);
    v18 = *(void **)(a1 + 96);
    LODWORD(v24[0]) = 136446978;
    *(id *)((char *)v24 + 4) = v17;
    WORD2(v24[1]) = 2048;
    *(id *)((char *)&v24[1] + 6) = v18;
    HIWORD(v24[2]) = 1024;
    LODWORD(v24[3]) = (int)(v11 / 1000000.0);
    WORD2(v24[3]) = 1024;
    *(_DWORD *)((char *)&v24[3] + 6) = (int)(v15 / 1000000.0);
    _os_log_impl(&dword_224FE9000, v16, OS_LOG_TYPE_DEFAULT, "API function compilation completed for %{public}s %zu in %d (elapsed %d)", (uint8_t *)v24, 0x22u);
  }
}

uint64_t re::internal::Callable<re::APIFunctionCache::getOrCreateAPIFunction(char const*,re::ShaderManager const*,re::Slice<re::TechniqueFunctionConstant>,NS::SharedPtr<MTL::FunctionConstantValues> const&,re::dispatch::Group,BOOL,unsigned long long,re::FixedArray<NS::SharedPtr<MTL::Function>> &,unsigned long)::$_0,void ()(void)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  *(_QWORD *)a2 = &off_24ED7BD00;
  *(_QWORD *)(a2 + 8) = *(id *)(a1 + 8);
  *(_QWORD *)(a2 + 16) = *(id *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 40);
  v5 = *(_OWORD *)(a1 + 49);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 49) = v5;
  *(_OWORD *)(a2 + 40) = v4;
  *(_QWORD *)(a2 + 72) = *(id *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 96) = v6;
  return a2;
}

uint64_t re::internal::Callable<re::APIFunctionCache::getOrCreateAPIFunction(char const*,re::ShaderManager const*,re::Slice<re::TechniqueFunctionConstant>,NS::SharedPtr<MTL::FunctionConstantValues> const&,re::dispatch::Group,BOOL,unsigned long long,re::FixedArray<NS::SharedPtr<MTL::Function>> &,unsigned long)::$_0,void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a2 = &off_24ED7BD00;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  v6 = *(_OWORD *)(a1 + 49);
  v7 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = v7;
  *(_OWORD *)(a2 + 49) = v6;
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a2 + 72) = v8;
  v9 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 96) = v9;
  return a2;
}

uint64_t re::internal::Callable<re::APIFunctionCache::getOrCreateAPIFunction(char const*,re::ShaderManager const*,re::Slice<re::TechniqueFunctionConstant>,NS::SharedPtr<MTL::FunctionConstantValues> const&,re::dispatch::Group,BOOL,unsigned long long,re::FixedArray<NS::SharedPtr<MTL::Function>> &,unsigned long)::$_0,void ()(void)>::size()
{
  return 104;
}

void re::HashTable<unsigned long,re::CachedAPIFunction *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  signed int v23;
  _BYTE v24[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(_QWORD *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v24, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v24;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)v24 = v5;
      *(_QWORD *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = (unint64_t *)(v6 + 8);
        do
        {
          if ((*(_DWORD *)(v14 - 1) & 0x80000000) != 0)
          {
            v15 = *v14;
            v16 = *(unsigned int *)(a1 + 24);
            v17 = *v14 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashTable<unsigned long,re::CachedAPIFunction *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
                v15 = *v14;
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 24 * v18);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 24 * v18);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            v22 = 24 * v18;
            *(_DWORD *)(v20 + v22) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + v22) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18 + 8) = v15;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18 + 16) = v14[1];
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 3;
        }
        while (v11 < v10);
      }
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2)
      v23 = a2;
    else
      v23 = 3;
  }
}

void re::HashTable<unsigned long,re::HashSet<unsigned short,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  signed int v24;
  _BYTE v25[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v25, 0, 36);
      *(_QWORD *)&v25[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v25, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v25;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v25[8];
      *(_OWORD *)v25 = v5;
      *(_QWORD *)&v25[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v25[24];
      *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v25[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = (uint64_t *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v14 - 2) & 0x80000000) != 0)
          {
            v15 = *(v14 - 1);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashTable<unsigned long,re::HashSet<unsigned short,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
                v15 = *(v14 - 1);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + (v18 << 6));
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + (v18 << 6));
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            v22 = v18 << 6;
            *(_DWORD *)(v20 + v22) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + v22) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v18 << 6)) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v18 << 6) + 8) = v15;
            v23 = *(_QWORD *)(a1 + 16) + (v18 << 6);
            *(_OWORD *)(v23 + 16) = 0u;
            v23 += 16;
            *(_DWORD *)(v23 + 32) = 0;
            *(_OWORD *)(v23 + 16) = 0u;
            *(_QWORD *)(v23 + 36) = 0x7FFFFFFFLL;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v23, v14);
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 8;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned long,re::HashSet<unsigned short,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)v25);
    }
  }
  else
  {
    if (a2)
      v24 = a2;
    else
      v24 = 3;
  }
}

re::FileStreamReader *re::FileStreamReader::FileStreamReader(re::FileStreamReader *this, __sFILE *a2, char a3)
{
  uint64_t v5;

  *(_QWORD *)this = &off_24ED7BD58;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = a3;
  v5 = MEMORY[0x227693B80](a2);
  fseek(a2, 0, 2);
  *((_QWORD *)this + 2) = MEMORY[0x227693B80](a2);
  fseek(a2, v5, 0);
  return this;
}

void re::FileStreamReader::~FileStreamReader(re::FileStreamReader *this)
{
  FILE *v2;

  v2 = (FILE *)*((_QWORD *)this + 1);
  if (v2)
  {
    if (*((_BYTE *)this + 24))
    {
      fclose(v2);
      *((_QWORD *)this + 1) = 0;
      *((_BYTE *)this + 24) = 0;
    }
  }
}

{
  FILE *v2;

  v2 = (FILE *)*((_QWORD *)this + 1);
  if (v2)
  {
    if (*((_BYTE *)this + 24))
    {
      fclose(v2);
      *((_QWORD *)this + 1) = 0;
      *((_BYTE *)this + 24) = 0;
    }
  }
  JUMPOUT(0x2276933B8);
}

__n128 re::FileStreamReader::open@<Q0>(re::FileStreamReader *this@<X0>, uint64_t a2@<X8>)
{
  FILE *v5;
  __n128 result;
  char v7;
  unint64_t v8;
  uint64_t v9;
  int *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;

  v5 = fopen((const char *)this, "rb");
  if (v5)
  {
    re::FileStreamReader::FileStreamReader((re::FileStreamReader *)&v14, v5, 1);
    v7 = v16;
    v8 = v14.n128_u64[1];
    v9 = v15;
    *(_BYTE *)a2 = 1;
    *(_QWORD *)(a2 + 8) = &off_24ED7BD58;
    *(_QWORD *)(a2 + 16) = v8;
    *(_BYTE *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 24) = v9;
  }
  else
  {
    v10 = __error();
    v11 = strerror(*v10);
    re::DynamicString::format((re::DynamicString *)"Failed to open file \"%s\" for reading. Details: %s", (re::DynamicString *)&v14, this, v11);
    result = v14;
    v12 = v15;
    v13 = v16;
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 300;
    *(_QWORD *)(a2 + 16) = &re::FoundationErrorCategory(void)::instance;
    *(__n128 *)(a2 + 24) = result;
    *(_QWORD *)(a2 + 40) = v12;
    *(_QWORD *)(a2 + 48) = v13;
  }
  return result;
}

size_t re::FileStreamReader::readBytes(FILE **this, void *__ptr, size_t a3)
{
  return fread(__ptr, 1uLL, a3, this[1]);
}

fpos_t re::FileStreamReader::bytesRead(FILE **this)
{
  fpos_t v2;

  v2 = 0;
  fgetpos(this[1], &v2);
  return v2;
}

uint64_t re::FileStreamReader::bytesRemaining(re::FileStreamReader *this)
{
  uint64_t v1;
  fpos_t v3;

  v3 = 0;
  v1 = *((_QWORD *)this + 2);
  fgetpos(*((FILE **)this + 1), &v3);
  return v1 - v3;
}

unint64_t re::FileStreamReader::skipBytes(re::FileStreamReader *this, unint64_t a2)
{
  uint64_t v4;
  fpos_t v6;

  v6 = 0;
  v4 = *((_QWORD *)this + 2);
  fgetpos(*((FILE **)this + 1), &v6);
  if (v4 - v6 < a2)
    a2 = v4 - v6;
  if (fseek(*((FILE **)this + 1), a2, 1))
    return 0;
  else
    return a2;
}

BOOL re::FileStreamReader::seek(re::FileStreamReader *this, unint64_t a2)
{
  uint64_t v4;
  fpos_t v6;

  v6 = 0;
  v4 = *((_QWORD *)this + 2);
  fgetpos(*((FILE **)this + 1), &v6);
  return v4 - v6 >= a2 && fseek(*((FILE **)this + 1), a2, 0) == 0;
}

uint64_t re::StreamReader::seekAndRead(re::StreamReader *this, void *a2)
{
  return 0;
}

uint64_t re::ExternalMemorySeekableInputStream::ExternalMemorySeekableInputStream(uint64_t a1, re::ExternalMemorySeekableInputStream *a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24ED7BDD0;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  v4 = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_QWORD *)(a1 + 24) = v4;
  re::FixedArrayInputStream::FixedArrayInputStream((re::FixedArrayInputStream *)(a1 + 32), *((const char **)a2 + 2), *((_DWORD *)a2 + 6), -1);
  v5 = (*(uint64_t (**)(re::ExternalMemorySeekableInputStream *))(*(_QWORD *)a2 + 40))(a2);
  if (v5)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v5);
  re::ExternalMemorySeekableInputStream::postDetachCleanup(a2);
  return a1;
}

double re::ExternalMemorySeekableInputStream::postDetachCleanup(re::ExternalMemorySeekableInputStream *this)
{
  char *v1;
  _anonymous_namespace_ *v2;
  _QWORD *v3;
  double result;

  if (!*((_BYTE *)this + 8))
  {
    v1 = (char *)this + 32;
    v2 = (_anonymous_namespace_ *)(**((uint64_t (***)(char *))this + 4))((char *)this + 32);
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    *((_WORD *)v1 + 4) = 256;
    *(_QWORD *)v1 = &off_24ED7C2E0;
    *((_QWORD *)v1 + 2) = v3;
    *((_QWORD *)v1 + 3) = &unk_24ED1E828;
    result = 0.0;
    *((_OWORD *)v1 + 2) = 0u;
    *((_OWORD *)v1 + 3) = 0u;
    *(v1 - 24) = 1;
    *((_QWORD *)v1 - 2) = 0;
    *((_QWORD *)v1 - 1) = 0;
  }
  return result;
}

uint64_t re::ExternalMemorySeekableInputStream::operator=(uint64_t a1, re::ExternalMemorySeekableInputStream *a2)
{
  void (**v4)(uint64_t);
  re::FixedArrayInputStream *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = (re::FixedArrayInputStream *)(a1 + 32);
  v4 = *(void (***)(uint64_t))(a1 + 32);
  v6 = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  (*v4)(a1 + 32);
  re::FixedArrayInputStream::FixedArrayInputStream(v5, *((const char **)v5 - 2), *((_DWORD *)v5 - 2), -1);
  v7 = (*(uint64_t (**)(re::ExternalMemorySeekableInputStream *))(*(_QWORD *)a2 + 40))(a2);
  if (v7)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v7);
  re::ExternalMemorySeekableInputStream::postDetachCleanup(a2);
  return a1;
}

BOOL re::ExternalMemorySeekableInputStream::Seek(re::ExternalMemorySeekableInputStream *this, unint64_t a2)
{
  unint64_t v3;

  v3 = *((_QWORD *)this + 3);
  if (v3 >= a2)
    google::protobuf::io::ArrayInputStream::Seek((re::ExternalMemorySeekableInputStream *)((char *)this + 56), a2);
  return v3 >= a2;
}

uint64_t re::ExternalMemorySeekableInputStream::CreateDetached(re::ExternalMemorySeekableInputStream *this)
{
  re *v2;
  uint64_t *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v10;
  int v11[4];
  int v12;
  void *__dst;

  __dst = 0;
  memset(v11, 0, sizeof(v11));
  v10 = 0;
  v12 = 0;
  re::DynamicArray<char>::resize((uint64_t)&v10, *((_QWORD *)this + 3));
  v2 = (re *)memcpy(__dst, *((const void **)this + 2), *((_QWORD *)this + 3));
  v3 = re::globalAllocators(v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 136, 8);
  v5 = (const char *)__dst;
  v6 = *(_QWORD *)&v11[2];
  *(_QWORD *)v4 = &off_24ED7BDD0;
  *(_BYTE *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 24) = v6;
  re::FixedArrayInputStream::FixedArrayInputStream((re::FixedArrayInputStream *)(v4 + 32), v5, v6, -1);
  *(_QWORD *)v4 = &off_24ED7BF80;
  *(_QWORD *)(v4 + 96) = v10;
  *(_OWORD *)(v4 + 104) = *(_OWORD *)v11;
  v10 = 0;
  memset(v11, 0, sizeof(v11));
  *(_QWORD *)(v4 + 128) = __dst;
  __dst = 0;
  ++v12;
  *(_DWORD *)(v4 + 120) = 1;
  v7 = (*(uint64_t (**)(re::ExternalMemorySeekableInputStream *))(*(_QWORD *)this + 40))(this);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 56))(v4, v7);
  v8 = re::ExternalMemorySeekableInputStream::postDetachCleanup(this);
  if (v10 && __dst)
    (*(void (**)(double))(*(_QWORD *)v10 + 40))(v8);
  return v4;
}

uint64_t re::DataSeekableInputStream::DataSeekableInputStream(uint64_t a1, id *a2, char a3, char a4)
{
  const char *v8;
  uint64_t v9;

  if (!*a2)
  {
    v8 = 0;
    goto LABEL_5;
  }
  v8 = (const char *)objc_msgSend(objc_retainAutorelease(*a2), "bytes");
  if (!*a2)
  {
LABEL_5:
    v9 = 0;
    goto LABEL_6;
  }
  v9 = objc_msgSend(*a2, "length");
LABEL_6:
  *(_QWORD *)a1 = &off_24ED7BDD0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  re::FixedArrayInputStream::FixedArrayInputStream((re::FixedArrayInputStream *)(a1 + 32), v8, v9, -1);
  *(_QWORD *)a1 = &off_24ED7BE48;
  *(_QWORD *)(a1 + 96) = *a2;
  *(_BYTE *)(a1 + 104) = a3;
  *(_BYTE *)(a1 + 105) = a4;
  return a1;
}

uint64_t re::DataSeekableInputStream::DataSeekableInputStream(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = re::ExternalMemorySeekableInputStream::ExternalMemorySeekableInputStream(a1, (re::ExternalMemorySeekableInputStream *)a2);
  *(_QWORD *)v4 = &off_24ED7BE48;
  v5 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(v4 + 96) = v5;
  *(_BYTE *)(v4 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(v4 + 105) = *(_BYTE *)(a2 + 105);
  re::DataSeekableInputStream::postDetachCleanup((re::DataSeekableInputStream *)a2);
  return a1;
}

double re::DataSeekableInputStream::postDetachCleanup(re::DataSeekableInputStream *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;

  *((_WORD *)this + 52) = 0;
  return re::ExternalMemorySeekableInputStream::postDetachCleanup(this);
}

uint64_t re::DataSeekableInputStream::operator=(uint64_t a1, uint64_t a2)
{
  re::ObjCObject::operator=((id *)(a1 + 96), (id *)(a2 + 96));
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  re::ExternalMemorySeekableInputStream::operator=(a1, (re::ExternalMemorySeekableInputStream *)a2);
  re::DataSeekableInputStream::postDetachCleanup((re::DataSeekableInputStream *)a2);
  return a1;
}

uint64_t re::DataSeekableInputStream::CreateDetached(id *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  re *v5;
  uint64_t *v6;
  id v7;
  id v9;
  id v10;

  if (*((_BYTE *)this + 104))
  {
    v2 = re::globalAllocators((re *)this);
    v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 112, 8);
    re::DataSeekableInputStream::DataSeekableInputStream(v3, (uint64_t)this);
  }
  else
  {
    v4 = (*((uint64_t (**)(id *))*this + 5))(this);
    re::Data::makeDataWithBytes((re::Data *)objc_msgSend(objc_retainAutorelease(this[12]), "bytes"), (const void *)objc_msgSend(this[12], "length"), &v10);
    re::DataSeekableInputStream::postDetachCleanup((re::DataSeekableInputStream *)this);
    v6 = re::globalAllocators(v5);
    v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 112, 8);
    v7 = v10;
    v9 = v7;
    re::DataSeekableInputStream::DataSeekableInputStream(v3, &v9, 1, 0);

    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 56))(v3, v4);
  }
  return v3;
}

re::CFDataSeekableInputStream *re::CFDataSeekableInputStream::CFDataSeekableInputStream(re::CFDataSeekableInputStream *this, CFDataRef theData, char a3, char a4)
{
  const char *BytePtr;
  CFIndex Length;

  if (theData)
  {
    BytePtr = (const char *)CFDataGetBytePtr(theData);
    Length = CFDataGetLength(theData);
  }
  else
  {
    BytePtr = 0;
    Length = 0;
  }
  *(_QWORD *)this = &off_24ED7BDD0;
  *((_BYTE *)this + 8) = 0;
  *((_QWORD *)this + 2) = BytePtr;
  *((_QWORD *)this + 3) = Length;
  re::FixedArrayInputStream::FixedArrayInputStream((re::CFDataSeekableInputStream *)((char *)this + 32), BytePtr, Length, -1);
  *(_QWORD *)this = &off_24ED7BEC0;
  *((_QWORD *)this + 12) = theData;
  *((_BYTE *)this + 104) = a3;
  *((_BYTE *)this + 105) = a4;
  CFRetain(theData);
  return this;
}

uint64_t re::CFDataSeekableInputStream::CFDataSeekableInputStream(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = re::ExternalMemorySeekableInputStream::ExternalMemorySeekableInputStream(a1, (re::ExternalMemorySeekableInputStream *)a2);
  *(_QWORD *)v4 = &off_24ED7BEC0;
  *(_QWORD *)(v4 + 96) = *(_QWORD *)(a2 + 96);
  *(_WORD *)(v4 + 104) = *(_WORD *)(a2 + 104);
  *(_QWORD *)(a2 + 96) = 0;
  re::CFDataSeekableInputStream::postDetachCleanup((re::CFDataSeekableInputStream *)a2);
  return a1;
}

double re::CFDataSeekableInputStream::postDetachCleanup(re::CFDataSeekableInputStream *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 12);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 12) = 0;
  }
  *((_WORD *)this + 52) = 0;
  return re::ExternalMemorySeekableInputStream::postDetachCleanup(this);
}

void re::CFDataSeekableInputStream::~CFDataSeekableInputStream(re::CFDataSeekableInputStream *this)
{
  *(_QWORD *)this = &off_24ED7BEC0;
  re::CFDataSeekableInputStream::postDetachCleanup(this);
  *(_QWORD *)this = &off_24ED7BDD0;
  re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)this + 32);
}

{
  *(_QWORD *)this = &off_24ED7BEC0;
  re::CFDataSeekableInputStream::postDetachCleanup(this);
  *(_QWORD *)this = &off_24ED7BDD0;
  re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)this + 32);
  JUMPOUT(0x2276933B8);
}

re::CFDataSeekableInputStream *re::CFDataSeekableInputStream::CreateDetached(const __CFData **this)
{
  uint64_t *v2;
  re::CFDataSeekableInputStream *v3;
  uint64_t v4;
  const __CFAllocator *v5;
  const __CFData *v6;
  const UInt8 *BytePtr;
  const __CFData *v8;
  CFIndex Length;
  const __CFData *v10;
  re *v11;
  uint64_t *v12;

  if (!*((_BYTE *)this + 104))
  {
    v4 = (*((uint64_t (**)(const __CFData **))*this + 5))(this);
    v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v6 = this[12];
    if (v6)
    {
      BytePtr = CFDataGetBytePtr(v6);
      v8 = this[12];
      if (v8)
      {
        Length = CFDataGetLength(v8);
LABEL_8:
        v10 = CFDataCreate(v5, BytePtr, Length);
        re::CFDataSeekableInputStream::postDetachCleanup((re::CFDataSeekableInputStream *)this);
        v12 = re::globalAllocators(v11);
        v3 = (re::CFDataSeekableInputStream *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 112, 8);
        re::CFDataSeekableInputStream::CFDataSeekableInputStream(v3, v10, 1, 0);
        CFRelease(v10);
        (*(void (**)(re::CFDataSeekableInputStream *, uint64_t))(*(_QWORD *)v3 + 56))(v3, v4);
        return v3;
      }
    }
    else
    {
      BytePtr = 0;
    }
    Length = 0;
    goto LABEL_8;
  }
  v2 = re::globalAllocators((re *)this);
  v3 = (re::CFDataSeekableInputStream *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 112, 8);
  re::CFDataSeekableInputStream::CFDataSeekableInputStream((uint64_t)v3, (uint64_t)this);
  return v3;
}

void re::ExternalMemorySeekableInputStream::~ExternalMemorySeekableInputStream(re::ExternalMemorySeekableInputStream *this)
{
  *(_QWORD *)this = &off_24ED7BDD0;
  re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)this + 32);
}

{
  *(_QWORD *)this = &off_24ED7BDD0;
  re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)this + 32);
  JUMPOUT(0x2276933B8);
}

BOOL re::ExternalMemorySeekableInputStream::Next(re::ExternalMemorySeekableInputStream *this, const void **a2, int *a3)
{
  uint64_t v3;
  int v4;
  int v5;

  v3 = *((int *)this + 20);
  v4 = *((_DWORD *)this + 18);
  if ((int)v3 >= v4)
  {
    *((_DWORD *)this + 21) = 0;
  }
  else
  {
    v5 = v4 - v3;
    if (v4 - (int)v3 >= *((_DWORD *)this + 19))
      v5 = *((_DWORD *)this + 19);
    *((_DWORD *)this + 21) = v5;
    *a2 = (const void *)(*((_QWORD *)this + 8) + v3);
    *a3 = v5;
    *((_DWORD *)this + 20) += *((_DWORD *)this + 21);
  }
  return (int)v3 < v4;
}

void re::ExternalMemorySeekableInputStream::BackUp(re::ExternalMemorySeekableInputStream *this, int a2)
{
  google::protobuf::io::ArrayInputStream::BackUp((re::ExternalMemorySeekableInputStream *)((char *)this + 56), a2);
}

BOOL re::ExternalMemorySeekableInputStream::Skip(re::ExternalMemorySeekableInputStream *this, int a2)
{
  return google::protobuf::io::ArrayInputStream::Skip((re::ExternalMemorySeekableInputStream *)((char *)this + 56), a2);
}

uint64_t re::ExternalMemorySeekableInputStream::ByteCount(re::ExternalMemorySeekableInputStream *this)
{
  return *((int *)this + 20);
}

uint64_t re::ExternalMemorySeekableInputStream::CanSeek(re::ExternalMemorySeekableInputStream *this)
{
  return 1;
}

uint64_t re::ExternalMemorySeekableInputStream::Length(re::ExternalMemorySeekableInputStream *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t re::ExternalMemorySeekableInputStream::AllInMemory(re::ExternalMemorySeekableInputStream *this)
{
  return 1;
}

uint64_t re::ExternalMemorySeekableInputStream::OwnsMemory(re::ExternalMemorySeekableInputStream *this)
{
  return 0;
}

void re::SeekableInputStream::FilePathAndOffset(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

BOOL re::DataSeekableInputStream::AllInMemory(re::DataSeekableInputStream *this)
{
  return *((_BYTE *)this + 105) == 0;
}

uint64_t re::DataSeekableInputStream::OwnsMemory(re::DataSeekableInputStream *this)
{
  return *((unsigned __int8 *)this + 104);
}

BOOL re::CFDataSeekableInputStream::AllInMemory(re::CFDataSeekableInputStream *this)
{
  return *((_BYTE *)this + 105) == 0;
}

uint64_t re::CFDataSeekableInputStream::OwnsMemory(re::CFDataSeekableInputStream *this)
{
  return *((unsigned __int8 *)this + 104);
}

uint64_t re::internal::OwnedMemorySeekableInputStream<re::DynamicArray<char>>::~OwnedMemorySeekableInputStream(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)a1 = &off_24ED7BF80;
  v3 = (_QWORD *)(a1 + 96);
  v2 = *(_QWORD *)(a1 + 96);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 128))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 128) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 120);
  }
  *(_QWORD *)a1 = &off_24ED7BDD0;
  re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream(a1 + 32);
  return a1;
}

void re::internal::OwnedMemorySeekableInputStream<re::DynamicArray<char>>::~OwnedMemorySeekableInputStream(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)a1 = &off_24ED7BF80;
  v3 = (_QWORD *)(a1 + 96);
  v2 = *(_QWORD *)(a1 + 96);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 128))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 128) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 120);
  }
  *(_QWORD *)a1 = &off_24ED7BDD0;
  re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream(a1 + 32);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::OwnedMemorySeekableInputStream<re::DynamicArray<char>>::CreateDetached(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = re::globalAllocators((re *)a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 136, 8);
  v4 = re::ExternalMemorySeekableInputStream::ExternalMemorySeekableInputStream(v3, (re::ExternalMemorySeekableInputStream *)a1);
  *(_QWORD *)v4 = &off_24ED7BF80;
  *(_QWORD *)(v4 + 128) = 0;
  *(_DWORD *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 96) = 0;
  v5 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(v4 + 96) = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(v4 + 104) = v5;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v6 = *(_QWORD *)(v4 + 112);
  *(_QWORD *)(v4 + 112) = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v6;
  v7 = *(_QWORD *)(v4 + 128);
  *(_QWORD *)(v4 + 128) = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v7;
  ++*(_DWORD *)(a1 + 120);
  ++*(_DWORD *)(v4 + 120);
  re::ExternalMemorySeekableInputStream::postDetachCleanup((re::ExternalMemorySeekableInputStream *)a1);
  return v3;
}

re::FileSeekableInputStream *re::FileSeekableInputStream::FileSeekableInputStream(re::FileSeekableInputStream *this, const char *a2, uint64_t a3, uint64_t a4)
{
  re::DynamicString *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  int v11;
  unint64_t v12;
  int *v13;
  char *v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v19;
  char v20;

  *(_QWORD *)this = &off_24ED7C028;
  v8 = (re::FileSeekableInputStream *)((char *)this + 8);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  re::DynamicString::setCapacity((_QWORD *)this + 5, 0);
  v10 = (_anonymous_namespace_ *)open(a2, 0);
  *((_QWORD *)this + 14) = &off_24ED1E708;
  *((_DWORD *)this + 18) = (_DWORD)v10;
  *((_QWORD *)this + 10) = a3;
  *((_QWORD *)this + 11) = a4;
  *((_BYTE *)this + 96) = 0;
  *((_QWORD *)this + 13) = &off_24ED1E6C8;
  *((_DWORD *)this + 30) = (_DWORD)v10;
  *((_WORD *)this + 62) = 0;
  *((_DWORD *)this + 32) = 0;
  *((_BYTE *)this + 132) = 0;
  *((_QWORD *)this + 17) = &off_24ED1E8B0;
  *((_QWORD *)this + 18) = (char *)this + 112;
  *((_WORD *)this + 76) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0x2000;
  *((_DWORD *)this + 46) = 0;
  *((_QWORD *)this + 24) = (char *)this + 200;
  *((_QWORD *)this + 25) = &off_24ED7C0B8;
  v11 = *((_DWORD *)this + 18);
  if (v11 == -1)
  {
    v13 = __error();
    v14 = strerror(*v13);
    re::DynamicString::operator=((re::FileSeekableInputStream *)((char *)this + 40), (re::DynamicString *)&v19);
    if (v19 && (v20 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v19 + 40))();
    *((_QWORD *)this + 11) = 0;
  }
  else
  {
    if (a4 != -1)
    {
      v12 = *((_QWORD *)this + 10);
      if (!v12)
        return this;
      goto LABEL_16;
    }
    *((_QWORD *)this + 11) = lseek(v11, 0, 2);
    lseek(*((_DWORD *)this + 18), 0, 0);
    v12 = *((_QWORD *)this + 10);
    v15 = *((_QWORD *)this + 11);
    v16 = v15 >= v12;
    v17 = v15 - v12;
    if (v16)
    {
      *((_QWORD *)this + 11) = v17;
      if (!v12)
        return this;
      goto LABEL_16;
    }
    re::DynamicString::operator=((re::FileSeekableInputStream *)((char *)this + 40), (re::DynamicString *)&v19);
    if (v19 && (v20 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v19 + 40))();
    v12 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 10) = v12;
    *((_QWORD *)this + 11) = 0;
    if (v12)
    {
LABEL_16:
      if (!google::protobuf::io::CopyingInputStreamAdaptor::Skip((re::FileSeekableInputStream *)((char *)this + 136), v12))
      {
        re::DynamicString::operator=((re::FileSeekableInputStream *)((char *)this + 40), (re::DynamicString *)&v19);
        if (v19)
        {
          if ((v20 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v19 + 40))();
        }
      }
    }
  }
  return this;
}

uint64_t re::FileSeekableInputStream::FileSeekableInputStream(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  *(_QWORD *)a1 = &off_24ED7C028;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 32) = 0;
  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 24) = v6;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v8 = (_QWORD *)(a1 + 40);
  re::DynamicString::setCapacity(v8, 0);
  v9 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 72) = v9;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = &off_24ED1E6C8;
  *(_QWORD *)(a1 + 112) = &off_24ED1E708;
  *(_DWORD *)(a1 + 120) = v9;
  *(_WORD *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 136) = &off_24ED1E8B0;
  *(_QWORD *)(a1 + 144) = a1 + 112;
  *(_WORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0x2000;
  *(_DWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 200) = &off_24ED7C0B8;
  *(_QWORD *)(a1 + 192) = a1 + 200;
  v10 = (_QWORD *)(a2 + 160);
  v11 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v12 = *(int *)(a2 + 184);
  if (v11 != v12)
  {
    lseek(v9, 0, 0);
    google::protobuf::io::CopyingInputStreamAdaptor::Skip((google::protobuf::io::CopyingInputStreamAdaptor *)(a1 + 136), v11 - v12);
  }
  *(_DWORD *)(a2 + 72) = -1;
  *(_BYTE *)(a2 + 96) = 1;
  (**(void (***)(uint64_t))(a2 + 104))(a2 + 104);
  v13 = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 104) = &off_24ED1E6C8;
  *(_QWORD *)(a2 + 112) = &off_24ED1E708;
  v14 = a2 + 112;
  *(_DWORD *)(v14 + 8) = v13;
  *(_WORD *)(v14 + 12) = 0;
  *(_DWORD *)(v14 + 16) = 0;
  *(_BYTE *)(v14 + 20) = 0;
  *(_QWORD *)(v14 + 24) = &off_24ED1E8B0;
  *(_QWORD *)(v14 + 32) = v14;
  *(_WORD *)(v14 + 40) = 0;
  *v10 = 0;
  v10[1] = 0;
  *(_QWORD *)(v14 + 64) = 0x2000;
  *(_DWORD *)(v14 + 72) = 0;
  *(_QWORD *)(v14 + 80) = 0;
  return a1;
}

void re::FileSeekableInputStream::~FileSeekableInputStream(re::FileSeekableInputStream *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_DWORD *)this + 18);
  if (v2 != -1)
    close(v2);
  *((_QWORD *)this + 13) = &off_24ED1E6C8;
  google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor((re::FileSeekableInputStream *)((char *)this + 136));
  google::protobuf::io::FileInputStream::CopyingFileInputStream::~CopyingFileInputStream((re::FileSeekableInputStream *)((char *)this + 112));
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 3));
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
  }
}

{
  re::FileSeekableInputStream::~FileSeekableInputStream(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::FileSeekableInputStream::Next(re::FileSeekableInputStream *this, const void **a2, int *a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v12;
  int v13;

  v4 = *((_QWORD *)this + 20) - *((int *)this + 46);
  v5 = *((_QWORD *)this + 10);
  v6 = *((_QWORD *)this + 11);
  v7 = v6 + v5;
  v8 = v4 - v5;
  if (v4 >= v7)
    v9 = *((_QWORD *)this + 11);
  else
    v9 = v8;
  if (v9 >= v6)
  {
    v13 = 0;
    result = 0;
    goto LABEL_9;
  }
  result = google::protobuf::io::CopyingInputStreamAdaptor::Next((re::FileSeekableInputStream *)((char *)this + 136), a2, a3);
  v12 = *((_QWORD *)this + 11);
  if (v12 != -1 && *a3 + (int)v9 > (int)v12)
  {
    v13 = v12 - v9;
LABEL_9:
    *a3 = v13;
  }
  return result;
}

uint64_t re::FileSeekableInputStream::ByteCount(re::FileSeekableInputStream *this)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 20) - *((int *)this + 46);
  v2 = *((_QWORD *)this + 10);
  v3 = *((_QWORD *)this + 11) + v2;
  v4 = v1 - v2;
  if (v1 >= v3)
    return *((_QWORD *)this + 11);
  else
    return v4;
}

void re::FileSeekableInputStream::BackUp(re::FileSeekableInputStream *this, int a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v2 = *((_QWORD *)this + 20) - *((int *)this + 46);
  v3 = *((_QWORD *)this + 10);
  v4 = *((_QWORD *)this + 11) + v3;
  if (v2 <= v4)
    v5 = 0;
  else
    v5 = v2 - v4;
  v6 = v5 + a2;
  v7 = v2 - v6;
  v8 = v2 - v3;
  if (v7 >= (int)v3)
    v9 = v6;
  else
    v9 = v8;
  google::protobuf::io::CopyingInputStreamAdaptor::BackUp((re::FileSeekableInputStream *)((char *)this + 136), v9);
}

BOOL re::FileSeekableInputStream::Seek(re::FileSeekableInputStream *this, unint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  int v12;

  if (*((_DWORD *)this + 18) == -1)
    return 0;
  v4 = (_QWORD *)((char *)this + 160);
  v5 = *((_QWORD *)this + 20) - *((int *)this + 46);
  v6 = *((_QWORD *)this + 10);
  v7 = *((_QWORD *)this + 11) + v6;
  v8 = v5 - v6;
  if (v5 >= v7)
    v9 = *((_QWORD *)this + 11);
  else
    v9 = v8;
  v10 = a2 >= v9;
  v11 = a2 - v9;
  if (!v10)
  {
    (**((void (***)(char *, uint64_t))this + 13))((char *)this + 104, v11);
    lseek(*((_DWORD *)this + 18), 0, 0);
    *((_QWORD *)this + 14) = &off_24ED1E708;
    v12 = *((_DWORD *)this + 18);
    *((_QWORD *)this + 13) = &off_24ED1E6C8;
    *((_DWORD *)this + 30) = v12;
    *((_WORD *)this + 62) = 0;
    *((_DWORD *)this + 32) = 0;
    *((_BYTE *)this + 132) = 0;
    *((_QWORD *)this + 17) = &off_24ED1E8B0;
    *((_QWORD *)this + 18) = (char *)this + 112;
    *((_WORD *)this + 76) = 0;
    *v4 = 0;
    v4[1] = 0;
    *((_QWORD *)this + 22) = 0x2000;
    *((_DWORD *)this + 46) = 0;
    *((_QWORD *)this + 24) = (char *)this + 200;
    v11 = *((_QWORD *)this + 10) + a2;
  }
  return google::protobuf::io::CopyingInputStreamAdaptor::Skip((re::FileSeekableInputStream *)((char *)this + 136), v11);
}

BOOL re::FileSeekableInputStream::Skip(re::FileSeekableInputStream *this, int a2)
{
  return google::protobuf::io::CopyingInputStreamAdaptor::Skip((re::FileSeekableInputStream *)((char *)this + 136), a2);
}

uint64_t re::FileSeekableInputStream::CreateDetached(re::FileSeekableInputStream *this)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = re::globalAllocators(this);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 216, 8);
  return re::FileSeekableInputStream::FileSeekableInputStream(v3, (uint64_t)this);
}

uint64_t re::FileSeekableInputStream::FilePathAndOffset@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if ((*(_BYTE *)(this + 16) & 1) != 0)
    v2 = *(_QWORD *)(this + 24);
  else
    v2 = this + 17;
  v3 = *(_QWORD *)(this + 80);
  *(_BYTE *)a2 = 1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v3;
  return this;
}

uint64_t re::FileSeekableInputStream::CanSeek(re::FileSeekableInputStream *this)
{
  return 1;
}

uint64_t re::FileSeekableInputStream::Length(re::FileSeekableInputStream *this)
{
  return *((_QWORD *)this + 11);
}

uint64_t re::FileSeekableInputStream::AllInMemory(re::FileSeekableInputStream *this)
{
  return 0;
}

uint64_t re::FileSeekableInputStream::OwnsMemory(re::FileSeekableInputStream *this)
{
  return 0;
}

uint64_t re::IOAlloc::alloc(re::IOAlloc *this, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), a2, 0);
}

uint64_t re::IOAlloc::free(re::IOAlloc *this, void *a2)
{
  return (*(uint64_t (**)(_QWORD, void *))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1), a2);
}

size_t re::DynamicArrayStreamWriter::writeBytes(re::DynamicArrayStreamWriter *this, char *__src, size_t __len)
{
  re::DynamicArray<char>::copy(*((_QWORD **)this + 1), *(_QWORD *)(*((_QWORD *)this + 1) + 16), __src, __len);
  return __len;
}

void re::DynamicArrayStreamWriter::~DynamicArrayStreamWriter(re::DynamicArrayStreamWriter *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::NullStreamWriter::writeBytes(re::NullStreamWriter *this, const void *a2, uint64_t a3)
{
  *((_DWORD *)this + 2) += a3;
  return a3;
}

void re::NullStreamWriter::~NullStreamWriter(re::NullStreamWriter *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t *re::foundationIOLogObjects(re *this)
{
  unsigned __int8 v1;

  {
    re::foundationIOLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "Foundation.IO");
  }
  return &re::foundationIOLogObjects(void)::logObjects;
}

void re::DynamicArrayBufferedOutputStream::~DynamicArrayBufferedOutputStream(re::DynamicArrayBufferedOutputStream *this)
{
  *(_QWORD *)this = &off_24ED7C190;
  *((_QWORD *)this + 3) = &unk_24ED7C1E8;
  if (*((_BYTE *)this + 8))
  {
    *((_BYTE *)this + 8) = 0;
    google::protobuf::io::CopyingOutputStreamAdaptor::Flush((re::DynamicArrayBufferedOutputStream *)((char *)this + 40));
  }
  *((_QWORD *)this + 4) = 0;
  google::protobuf::io::CopyingOutputStreamAdaptor::~CopyingOutputStreamAdaptor((re::DynamicArrayBufferedOutputStream *)((char *)this + 40));
  re::internal::MemoryOutputStream<re::DynamicArray<char>>::~MemoryOutputStream((uint64_t)this);
}

{
  re::DynamicArrayBufferedOutputStream::~DynamicArrayBufferedOutputStream(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::MemoryOutputStream<re::DynamicArray<char>>::~MemoryOutputStream(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)a1 = off_24ED7C4F8;
  if (*(_BYTE *)(a1 + 9))
  {
    v2 = *(_QWORD **)(a1 + 16);
    if (v2)
    {
      if (*v2)
      {
        if (v2[4])
          (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 40))(*v2);
        v2[4] = 0;
        v2[1] = 0;
        v2[2] = 0;
        *v2 = 0;
        ++*((_DWORD *)v2 + 6);
      }
    }
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 9) = 0;
  }
  return a1;
}

void `non-virtual thunk to're::DynamicArrayBufferedOutputStream::~DynamicArrayBufferedOutputStream(re::DynamicArrayBufferedOutputStream *this)
{
  re::DynamicArrayBufferedOutputStream::~DynamicArrayBufferedOutputStream((re::DynamicArrayBufferedOutputStream *)((char *)this - 24));
}

{
  re::DynamicArrayBufferedOutputStream::~DynamicArrayBufferedOutputStream((re::DynamicArrayBufferedOutputStream *)((char *)this - 24));
  JUMPOUT(0x2276933B8);
}

uint64_t re::DynamicArrayBufferedOutputStream::Next(re::DynamicArrayBufferedOutputStream *this, void **a2, int *a3)
{
  *((_BYTE *)this + 8) = 1;
  return google::protobuf::io::CopyingOutputStreamAdaptor::Next((re::DynamicArrayBufferedOutputStream *)((char *)this + 40), a2, a3);
}

void re::DynamicArrayBufferedOutputStream::BackUp(re::DynamicArrayBufferedOutputStream *this, int a2)
{
  google::protobuf::io::CopyingOutputStreamAdaptor::BackUp((re::DynamicArrayBufferedOutputStream *)((char *)this + 40), a2);
}

uint64_t re::DynamicArrayBufferedOutputStream::ByteCount(re::DynamicArrayBufferedOutputStream *this)
{
  return *((_QWORD *)this + 8) + *((int *)this + 21);
}

void re::DynamicArrayBufferedOutputStream::WriteAliasedRaw(re::DynamicArrayBufferedOutputStream *this, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "WriteAliasedRaw", 98);
  _os_crash();
  __break(1u);
}

uint64_t re::DynamicArrayBufferedOutputStream::Write(re::DynamicArrayBufferedOutputStream *this, const void *a2, int a3)
{
  _QWORD *v5;
  size_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v5 = (_QWORD *)*((_QWORD *)this + 2);
  v6 = a3;
  v7 = v5[2];
  v8 = v7 + a3;
  v9 = (v8 - 1) | ((v8 - 1) >> 1) | (((v8 - 1) | ((v8 - 1) >> 1)) >> 2);
  v10 = v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8);
  v11 = (v10 | (v10 >> 16) | ((v10 | (v10 >> 16)) >> 32)) + 1;
  if (v5[1] < v11)
  {
    re::DynamicArray<char>::setCapacity(v5, v11);
    v5 = (_QWORD *)*((_QWORD *)this + 2);
  }
  re::DynamicArray<char>::resizeUninitialized(v5, v8);
  memcpy((void *)(*(_QWORD *)(*((_QWORD *)this + 2) + 32) + v7), a2, v6);
  *((_QWORD *)this + 4) += v6;
  return 1;
}

_QWORD *re::DynamicArray<char>::resizeUninitialized(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
  }
  else if (result[1] < a2)
  {
    result = re::DynamicArray<char>::setCapacity(result, a2);
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t `non-virtual thunk to're::DynamicArrayBufferedOutputStream::Write(re::DynamicArrayBufferedOutputStream *this, const void *a2, int a3)
{
  re::DynamicArrayBufferedOutputStream::Write((re::DynamicArrayBufferedOutputStream *)((char *)this - 24), a2, a3);
  return 1;
}

re::CFDataBufferedOutputStream *re::CFDataBufferedOutputStream::CFDataBufferedOutputStream(re::CFDataBufferedOutputStream *this, int a2)
{
  _QWORD *v4;
  int v5;

  *v4 = 0;
  *((_WORD *)this + 4) = 256;
  *((_QWORD *)this + 2) = v4;
  *(_QWORD *)this = &off_24ED7C210;
  *((_QWORD *)this + 3) = &unk_24ED7C268;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = &off_24ED1E8F0;
  *((_QWORD *)this + 6) = (char *)this + 24;
  *((_WORD *)this + 28) = 0;
  if (a2 <= 0)
    v5 = 0x2000;
  else
    v5 = a2;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = v5;
  *((_DWORD *)this + 21) = 0;
  *((_QWORD *)this + 11) = 0;
  **((_QWORD **)this + 2) = CFDataCreateMutable(0, 0);
  return this;
}

void re::CFDataBufferedOutputStream::~CFDataBufferedOutputStream(re::CFDataBufferedOutputStream *this)
{
  *(_QWORD *)this = &off_24ED7C210;
  *((_QWORD *)this + 3) = &unk_24ED7C268;
  if (*((_BYTE *)this + 8))
  {
    *((_BYTE *)this + 8) = 0;
    google::protobuf::io::CopyingOutputStreamAdaptor::Flush((re::CFDataBufferedOutputStream *)((char *)this + 40));
  }
  *((_QWORD *)this + 4) = 0;
  CFRelease(**((CFTypeRef **)this + 2));
  google::protobuf::io::CopyingOutputStreamAdaptor::~CopyingOutputStreamAdaptor((re::CFDataBufferedOutputStream *)((char *)this + 40));
  re::internal::MemoryOutputStream<__CFData *>::~MemoryOutputStream((uint64_t)this);
}

{
  re::CFDataBufferedOutputStream::~CFDataBufferedOutputStream(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::MemoryOutputStream<__CFData *>::~MemoryOutputStream(uint64_t a1)
{
  *(_QWORD *)a1 = off_24ED7C548;
  if (*(_BYTE *)(a1 + 9))
  {
    if (*(_QWORD *)(a1 + 16))
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 9) = 0;
  }
  return a1;
}

void `non-virtual thunk to're::CFDataBufferedOutputStream::~CFDataBufferedOutputStream(re::CFDataBufferedOutputStream *this)
{
  re::CFDataBufferedOutputStream::~CFDataBufferedOutputStream((re::CFDataBufferedOutputStream *)((char *)this - 24));
}

{
  re::CFDataBufferedOutputStream::~CFDataBufferedOutputStream((re::CFDataBufferedOutputStream *)((char *)this - 24));
  JUMPOUT(0x2276933B8);
}

uint64_t re::CFDataBufferedOutputStream::Next(re::CFDataBufferedOutputStream *this, void **a2, int *a3)
{
  *((_BYTE *)this + 8) = 1;
  return google::protobuf::io::CopyingOutputStreamAdaptor::Next((re::CFDataBufferedOutputStream *)((char *)this + 40), a2, a3);
}

void re::CFDataBufferedOutputStream::BackUp(re::CFDataBufferedOutputStream *this, int a2)
{
  google::protobuf::io::CopyingOutputStreamAdaptor::BackUp((re::CFDataBufferedOutputStream *)((char *)this + 40), a2);
}

uint64_t re::CFDataBufferedOutputStream::ByteCount(re::CFDataBufferedOutputStream *this)
{
  return *((_QWORD *)this + 8) + *((int *)this + 21);
}

void re::CFDataBufferedOutputStream::WriteAliasedRaw(re::CFDataBufferedOutputStream *this, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "WriteAliasedRaw", 173);
  _os_crash();
  __break(1u);
}

uint64_t re::CFDataBufferedOutputStream::Write(CFMutableDataRef **this, const UInt8 *a2, int a3)
{
  CFDataAppendBytes(*this[2], a2, a3);
  this[4] = (CFMutableDataRef *)((char *)this[4] + a3);
  return 1;
}

uint64_t `non-virtual thunk to're::CFDataBufferedOutputStream::Write(CFMutableDataRef **this, const UInt8 *a2, int a3)
{
  CFDataAppendBytes(**(this - 1), a2, a3);
  this[1] = (CFMutableDataRef *)((char *)this[1] + a3);
  return 1;
}

void re::CFDataOutputStream::~CFDataOutputStream(re::CFDataOutputStream *this)
{
  re::internal::MemoryOutputStream<__CFData *>::~MemoryOutputStream((uint64_t)this);
  JUMPOUT(0x2276933B8);
}

BOOL re::CFDataOutputStream::Next(re::CFDataOutputStream *this, void **a2, int *a3)
{
  uint64_t v3;
  int v4;
  int v5;

  v3 = *((int *)this + 12);
  v4 = *((_DWORD *)this + 10);
  if ((int)v3 >= v4)
  {
    *((_DWORD *)this + 13) = 0;
  }
  else
  {
    v5 = v4 - v3;
    if (v4 - (int)v3 >= *((_DWORD *)this + 11))
      v5 = *((_DWORD *)this + 11);
    *((_DWORD *)this + 13) = v5;
    *a2 = (void *)(*((_QWORD *)this + 4) + v3);
    *a3 = v5;
    *((_DWORD *)this + 12) += *((_DWORD *)this + 13);
  }
  return (int)v3 < v4;
}

void re::CFDataOutputStream::BackUp(re::CFDataOutputStream *this, int a2)
{
  google::protobuf::io::ArrayOutputStream::BackUp((re::CFDataOutputStream *)((char *)this + 24), a2);
}

uint64_t re::CFDataOutputStream::ByteCount(re::CFDataOutputStream *this)
{
  return *((int *)this + 12);
}

void re::CFDataOutputStream::WriteAliasedRaw(re::CFDataOutputStream *this, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "WriteAliasedRaw", 255);
  _os_crash();
  __break(1u);
}

uint64_t re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)a1 = off_24ED7C598;
  if (*(_BYTE *)(a1 + 9))
  {
    v2 = *(_QWORD **)(a1 + 16);
    if (v2)
    {
      if (*v2)
      {
        if (v2[1])
        {
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v2 + 40))(*v2, v2[2]);
          v2[1] = 0;
          v2[2] = 0;
        }
        *v2 = 0;
      }
    }
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 9) = 0;
  }
  return a1;
}

re::FixedArrayInputStream *re::FixedArrayInputStream::FixedArrayInputStream(re::FixedArrayInputStream *this, const char *a2, int a3, int a4)
{
  _QWORD *v8;
  int v9;

  v8[1] = 0;
  v8[2] = 0;
  *v8 = 0;
  *((_WORD *)this + 4) = 256;
  *(_QWORD *)this = &off_24ED7C2E0;
  *((_QWORD *)this + 2) = v8;
  *((_QWORD *)this + 3) = &unk_24ED1E828;
  *((_QWORD *)this + 4) = a2;
  if (a4 <= 0)
    v9 = a3;
  else
    v9 = a4;
  *((_DWORD *)this + 10) = a3;
  *((_DWORD *)this + 11) = v9;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = a3;
  return this;
}

void re::FixedArrayInputStream::~FixedArrayInputStream(re::FixedArrayInputStream *this)
{
  re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)this);
  JUMPOUT(0x2276933B8);
}

BOOL re::FixedArrayInputStream::Next(re::FixedArrayInputStream *this, const void **a2, int *a3)
{
  uint64_t v3;
  int v4;
  int v5;

  v3 = *((int *)this + 12);
  v4 = *((_DWORD *)this + 10);
  if ((int)v3 >= v4)
  {
    *((_DWORD *)this + 13) = 0;
  }
  else
  {
    v5 = v4 - v3;
    if (v4 - (int)v3 >= *((_DWORD *)this + 11))
      v5 = *((_DWORD *)this + 11);
    *((_DWORD *)this + 13) = v5;
    *a2 = (const void *)(*((_QWORD *)this + 4) + v3);
    *a3 = v5;
    *((_DWORD *)this + 12) += *((_DWORD *)this + 13);
  }
  return (int)v3 < v4;
}

void re::FixedArrayInputStream::BackUp(re::FixedArrayInputStream *this, int a2)
{
  google::protobuf::io::ArrayInputStream::BackUp((re::FixedArrayInputStream *)((char *)this + 24), a2);
}

uint64_t re::FixedArrayInputStream::ByteCount(re::FixedArrayInputStream *this)
{
  return *((int *)this + 12);
}

BOOL re::FixedArrayInputStream::Skip(re::FixedArrayInputStream *this, int a2)
{
  return google::protobuf::io::ArrayInputStream::Skip((re::FixedArrayInputStream *)((char *)this + 24), a2);
}

uint64_t re::FixedArrayInputStream::Seek(re::FixedArrayInputStream *this, uint64_t a2)
{
  google::protobuf::io::ArrayInputStream::Seek((re::FixedArrayInputStream *)((char *)this + 24), a2);
  return 1;
}

uint64_t re::FixedArrayInputStream::Length(re::FixedArrayInputStream *this)
{
  return *((_QWORD *)this + 7);
}

uint64_t re::internal::MemoryInputStream<__CFData const*>::~MemoryInputStream(uint64_t a1)
{
  *(_QWORD *)a1 = off_24ED7C618;
  if (*(_BYTE *)(a1 + 9))
  {
    if (*(_QWORD *)(a1 + 16))
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 9) = 0;
  }
  return a1;
}

void re::CFDataInputStream::~CFDataInputStream(re::CFDataInputStream *this)
{
  re::internal::MemoryInputStream<__CFData const*>::~MemoryInputStream((uint64_t)this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::CFDataInputStream::Seek(re::CFDataInputStream *this, uint64_t a2)
{
  google::protobuf::io::ArrayInputStream::Seek((re::CFDataInputStream *)((char *)this + 24), a2);
  return 1;
}

CFIndex re::CFDataInputStream::Length(CFDataRef **this)
{
  return CFDataGetLength(*this[2]);
}

BOOL re::CFDataInputStream::Next(re::CFDataInputStream *this, const void **a2, int *a3)
{
  uint64_t v3;
  int v4;
  int v5;

  v3 = *((int *)this + 12);
  v4 = *((_DWORD *)this + 10);
  if ((int)v3 >= v4)
  {
    *((_DWORD *)this + 13) = 0;
  }
  else
  {
    v5 = v4 - v3;
    if (v4 - (int)v3 >= *((_DWORD *)this + 11))
      v5 = *((_DWORD *)this + 11);
    *((_DWORD *)this + 13) = v5;
    *a2 = (const void *)(*((_QWORD *)this + 4) + v3);
    *a3 = v5;
    *((_DWORD *)this + 12) += *((_DWORD *)this + 13);
  }
  return (int)v3 < v4;
}

void re::CFDataInputStream::BackUp(re::CFDataInputStream *this, int a2)
{
  google::protobuf::io::ArrayInputStream::BackUp((re::CFDataInputStream *)((char *)this + 24), a2);
}

uint64_t re::CFDataInputStream::ByteCount(re::CFDataInputStream *this)
{
  return *((int *)this + 12);
}

BOOL re::CFDataInputStream::Skip(re::CFDataInputStream *this, int a2)
{
  return google::protobuf::io::ArrayInputStream::Skip((re::CFDataInputStream *)((char *)this + 24), a2);
}

uint64_t re::DynamicArrayBufferedOutputStream::AllowsAliasing(re::DynamicArrayBufferedOutputStream *this)
{
  return 0;
}

uint64_t re::DynamicArrayBufferedOutputStream::Flush(re::DynamicArrayBufferedOutputStream *this)
{
  *((_BYTE *)this + 8) = 0;
  return google::protobuf::io::CopyingOutputStreamAdaptor::Flush((re::DynamicArrayBufferedOutputStream *)((char *)this + 40));
}

uint64_t re::CFDataBufferedOutputStream::AllowsAliasing(re::CFDataBufferedOutputStream *this)
{
  return 0;
}

uint64_t re::CFDataBufferedOutputStream::Flush(re::CFDataBufferedOutputStream *this)
{
  *((_BYTE *)this + 8) = 0;
  return google::protobuf::io::CopyingOutputStreamAdaptor::Flush((re::CFDataBufferedOutputStream *)((char *)this + 40));
}

uint64_t re::CFDataOutputStream::AllowsAliasing(re::CFDataOutputStream *this)
{
  return 1;
}

uint64_t re::internal::MemoryOutputStream<__CFData *>::Flush(uint64_t a1)
{
  *(_BYTE *)(a1 + 8) = 0;
  return 1;
}

uint64_t re::internal::MemoryInputStream<re::FixedArray<char>>::Flush(uint64_t a1)
{
  *(_BYTE *)(a1 + 8) = 0;
  return 1;
}

uint64_t re::FixedArrayInputStream::CanSeek(re::FixedArrayInputStream *this)
{
  return 1;
}

void re::FixedArrayInputStream::CreateDetached(re::FixedArrayInputStream *this, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Not implemented.", "!\"Unreachable code\"", "CreateDetached", 663);
  _os_crash();
  __break(1u);
}

uint64_t re::FixedArrayInputStream::AllInMemory(re::FixedArrayInputStream *this)
{
  return 1;
}

uint64_t re::FixedArrayInputStream::OwnsMemory(re::FixedArrayInputStream *this)
{
  return 1;
}

uint64_t re::CFDataInputStream::CanSeek(re::CFDataInputStream *this)
{
  return 1;
}

void re::CFDataInputStream::CreateDetached(re::CFDataInputStream *this, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Not implemented.", "!\"Unreachable code\"", "CreateDetached", 727);
  _os_crash();
  __break(1u);
}

uint64_t re::CFDataInputStream::AllInMemory(re::CFDataInputStream *this)
{
  return 1;
}

uint64_t re::CFDataInputStream::OwnsMemory(re::CFDataInputStream *this)
{
  return 1;
}

uint64_t re::internal::MemoryInputStream<__CFData const*>::Flush(uint64_t a1)
{
  *(_BYTE *)(a1 + 8) = 0;
  return 1;
}

uint64_t re::internal::MemoryOutputStream<re::DynamicArray<char>>::Flush(uint64_t a1)
{
  *(_BYTE *)(a1 + 8) = 0;
  return 1;
}

uint64_t re::path::ext(re::path *this, const char *a2)
{
  size_t v3;
  size_t v4;
  BOOL v5;
  unint64_t v6;
  int v7;

  v3 = strlen((const char *)this);
  if (v3 < 2)
    return (uint64_t)this + v3;
  v4 = v3 - 1;
  v5 = 1;
  v6 = 2;
  while (1)
  {
    v7 = *((unsigned __int8 *)this + v4);
    if (v7 == 46)
      break;
    if (v7 != 47)
    {
      v5 = v6++ < v3;
      if (--v4)
        continue;
    }
    return (uint64_t)this + v3;
  }
  if (v5)
    return (uint64_t)this + v4;
  else
    return (uint64_t)this + v3;
}

void *re::path::dirname(re::path *this, re::PathBuffer *__s, const char *a3)
{
  size_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  NSObject *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  re::PathBuffer *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v5 = strlen((const char *)__s);
  if (v5 < 2)
    return (void *)*((_QWORD *)this + 1);
  v6 = 0x100000000 - (v5 << 32);
  v7 = v5 - 1;
  while (*((_BYTE *)__s + v7) != 47)
  {
    v6 += 0x100000000;
    if (!--v7)
      return (void *)*((_QWORD *)this + 1);
  }
  if (!v6)
    return (void *)*((_QWORD *)this + 1);
  v8 = -v6 >> 32;
  v9 = re::PathBuffer::reserve((const char **)this, v8);
  if ((v9 & 1) != 0)
  {
    v10 = (void *)*((_QWORD *)this + 1);
    memcpy(v10, __s, v8);
    *((_BYTE *)v10 + v8) = 0;
  }
  else
  {
    v12 = *re::foundationIOLogObjects((re *)v9);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = 134218242;
      v14 = v8;
      v15 = 2080;
      v16 = __s;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "Failed to allocated %lu bytes for calculating dirname(\"%s\")", (uint8_t *)&v13, 0x16u);
    }
    return &unk_22618E67D;
  }
  return v10;
}

uint64_t re::PathBuffer::reserve(const char **this, uint64_t a2)
{
  const char *v2;
  uint64_t result;
  uint64_t v6;

  v2 = (const char *)(a2 + 1);
  if ((unint64_t)(a2 + 1) >= 0x1E9 && v2 > this[2])
  {
    result = (*(uint64_t (**)(const char *, uint64_t, _QWORD))(*(_QWORD *)*this + 32))(*this, a2 + 1, 0);
    if (!result)
      return result;
    v6 = result;
    strcpy((char *)result, this[1]);
    if (this[1] != (const char *)(this + 3))
      (*(void (**)(const char *))(*(_QWORD *)*this + 40))(*this);
    this[1] = (const char *)v6;
    this[2] = v2;
  }
  return 1;
}

uint64_t re::path::join(const char **this, re::PathBuffer *__s, const char *a3, const char *a4)
{
  size_t v7;
  size_t v8;
  size_t v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char v16;
  NSObject *v17;
  int v19;
  size_t v20;
  __int16 v21;
  re::PathBuffer *v22;
  __int16 v23;
  const char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v7 = strlen((const char *)__s);
  v8 = strlen(a3);
  v9 = v8;
  if (v7)
  {
    if (*((_BYTE *)__s + v7 - 1) == 47)
      --v7;
    v10 = v7 != 0;
    if (v7)
      v11 = v8 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      v10 = 1;
      if (*a3 == 47)
      {
        ++a3;
        v9 = v8 - 1;
      }
    }
  }
  else
  {
    v10 = 0;
  }
  v12 = re::PathBuffer::reserve(this, v9 + 1 + v7);
  if ((v12 & 1) != 0)
  {
    v14 = (char *)this[1];
    v13 = (char *)(this + 1);
    memcpy(v14, __s, v7);
    v15 = &v14[v7];
    v16 = !v10;
    if (!v9)
      v16 = 1;
    if ((v16 & 1) == 0)
      *v15++ = 47;
    memcpy(v15, a3, v9 + 1);
  }
  else
  {
    v17 = *re::foundationIOLogObjects((re *)v12);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v19 = 134218498;
      v20 = v9 + 1 + v7;
      v21 = 2080;
      v22 = __s;
      v23 = 2080;
      v24 = a3;
      _os_log_error_impl(&dword_224FE9000, v17, OS_LOG_TYPE_ERROR, "Failed to allocated %lu bytes for calculating join(\"%s\", \"%s\")", (uint8_t *)&v19, 0x20u);
    }
    v13 = (char *)&re::path::kErrorOutOfMemory;
  }
  return *(_QWORD *)v13;
}

size_t re::MemoryStreamWriter::writeBytes(re::MemoryStreamWriter *this, const void *a2, size_t a3)
{
  uint64_t v4;
  size_t v5;

  v4 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 2) - v4 >= a3)
    v5 = a3;
  else
    v5 = *((_QWORD *)this + 2) - v4;
  memcpy((void *)(*((_QWORD *)this + 1) + v4), a2, v5);
  *((_QWORD *)this + 3) += v5;
  return v5;
}

void re::MemoryStreamWriter::~MemoryStreamWriter(re::MemoryStreamWriter *this)
{
  JUMPOUT(0x2276933B8);
}

unint64_t re::CopyRead(re *this, re::SeekableInputStream *a2, uint64_t a3, void *a4)
{
  unint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  void *__src;
  size_t __n;

  if (!a2)
    return 0;
  v7 = 0;
  do
  {
    LODWORD(__n) = 0;
    __src = 0;
    v8 = (*(uint64_t (**)(re *, void **, size_t *, void *))(*(_QWORD *)this + 16))(this, &__src, &__n, a4);
    v9 = (int)__n;
    v10 = v7 + (int)__n;
    if (v10 <= (unint64_t)a2)
    {
      memcpy((void *)(a3 + v7), __src, (int)__n);
    }
    else
    {
      v11 = (v10 - (_DWORD)a2);
      LODWORD(__n) = __n - v11;
      v9 = (int)v9 - (int)v11;
      memcpy((void *)(a3 + v7), __src, (int)__n);
      if ((_DWORD)v11)
      {
        (*(void (**)(re *, uint64_t))(*(_QWORD *)this + 24))(this, v11);
        v9 = (int)__n;
      }
    }
    v7 += v9;
    if (v7 < (unint64_t)a2)
      v12 = v8;
    else
      v12 = 0;
  }
  while ((v12 & 1) != 0);
  return v7;
}

BOOL re::SeekableInputStreamBufferedReader::readNext(re::SeekableInputStreamBufferedReader *this, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _BOOL4 v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  _BOOL4 v14;
  unint64_t v15;
  uint64_t v16;

  if (!*(_QWORD *)this)
    return 0;
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 1) += v4;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 6) = 0;
    ++*((_DWORD *)this + 14);
  }
  v5 = 0;
  v6 = (_DWORD *)((char *)this + 24);
  while (1)
  {
    if (*v6)
    {
      v7 = 1;
    }
    else if ((*(unsigned int (**)(_QWORD, char *, char *))(**(_QWORD **)this + 16))(*(_QWORD *)this, (char *)this + 8, (char *)this + 24))
    {
      v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this);
      v7 = v8 != (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 64))(*(_QWORD *)this);
    }
    else
    {
      v7 = 0;
    }
    v9 = *((int *)this + 6);
    v10 = v9 - a2;
    v11 = v9 >= a2;
    if (v9 >= a2)
      v9 = a2;
    v12 = v9 + *((_QWORD *)this + 2);
    if (v11)
      v13 = v10;
    else
      v13 = 0;
    *((_QWORD *)this + 2) = v12;
    *((_DWORD *)this + 6) = v13;
    v14 = v12 < a2 && v7;
    if (v5 || v14)
    {
      if (!*((_QWORD *)this + 6))
      {
        v15 = a2;
        if (a2 != -1
          || (v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 64))(*(_QWORD *)this), v16 != -1)
          && (v15 = v16
                  - (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this)
                  + *((int *)this + 6),
              v15 != -1))
        {
          if (*((_QWORD *)this + 5) < v15)
            re::DynamicArray<BOOL>::setCapacity((_QWORD *)this + 4, v15);
        }
      }
      re::DynamicArray<BOOL>::resize((uint64_t)this + 32, *((_QWORD *)this + 2));
      memcpy((void *)(*((_QWORD *)this + 8) + v5), *((const void **)this + 1), *((_QWORD *)this + 2) - v5);
    }
    if (!v14)
      break;
    v5 = *((_QWORD *)this + 2);
  }
  if (*((_QWORD *)this + 6))
  {
    if (*v6)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)this + 24))(*(_QWORD *)this);
      *((_DWORD *)this + 6) = 0;
    }
    *((_QWORD *)this + 1) = *((_QWORD *)this + 8);
  }
  return *((_QWORD *)this + 2) != 0;
}

uint64_t re::SeekableInputStreamReaderAdaptor::readBytes(re::SeekableInputStreamReaderAdaptor *this, char *__dst, size_t __n)
{
  uint64_t v4;
  int v7;
  _DWORD *v8;
  const void **v9;
  const void *v10;
  uint64_t v11;

  if (*((_BYTE *)this + 48))
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v8 = (_DWORD *)((char *)this + 24);
    v7 = *((_DWORD *)this + 6);
    v9 = (const void **)((char *)this + 16);
    while (1)
    {
      if (!v7)
      {
        *((_BYTE *)this + 48) = (*(uint64_t (**)(_QWORD, char *, char *))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (char *)this + 16, (char *)this + 24) ^ 1;
        v7 = *((_DWORD *)this + 6);
      }
      v10 = *v9;
      if (__n <= v7)
        break;
      memcpy(__dst, v10, v7);
      v7 = 0;
      v11 = *((int *)this + 6);
      v4 += v11;
      __n -= v11;
      __dst += v11;
      *((_DWORD *)this + 6) = 0;
      if (*((_BYTE *)this + 48))
        goto LABEL_10;
    }
    memcpy(__dst, v10, __n);
    *v8 -= __n;
    *v9 = (char *)*v9 + __n;
    v4 += __n;
  }
LABEL_10:
  *((_QWORD *)this + 4) += v4;
  return v4;
}

uint64_t re::SeekableInputStreamReaderAdaptor::skipBytes(re::SeekableInputStreamReaderAdaptor *this, unint64_t a2)
{
  uint64_t v3;
  int v5;
  _DWORD *v6;
  _QWORD *v7;
  int v8;
  int v9;
  uint64_t v10;

  if (*((_BYTE *)this + 48))
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    v6 = (_DWORD *)((char *)this + 24);
    v5 = *((_DWORD *)this + 6);
    v7 = (_QWORD *)((char *)this + 16);
    while (1)
    {
      if (v5)
      {
        v8 = 0;
      }
      else
      {
        v9 = (*(uint64_t (**)(_QWORD, char *, char *))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), (char *)this + 16, (char *)this + 24);
        v8 = v9 ^ 1;
        *((_BYTE *)this + 48) = v9 ^ 1;
        v5 = *((_DWORD *)this + 6);
      }
      v10 = v5;
      if (a2 <= v5)
        break;
      v5 = 0;
      v3 += v10;
      a2 -= v10;
      *v6 = 0;
      if (v8)
        goto LABEL_11;
    }
    *v6 = v5 - a2;
    *v7 += a2;
    v3 += a2;
  }
LABEL_11:
  *((_QWORD *)this + 4) += v3;
  return v3;
}

uint64_t re::SeekableInputStreamReaderAdaptor::seek(re::SeekableInputStreamReaderAdaptor *this, unint64_t a2)
{
  uint64_t result;

  if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1)) < a2)
    return 0;
  result = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1), *((_QWORD *)this + 5) + a2);
  if ((_DWORD)result)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    result = 1;
    *((_QWORD *)this + 4) = a2;
  }
  return result;
}

void re::SeekableInputStreamReaderAdaptor::~SeekableInputStreamReaderAdaptor(re::SeekableInputStreamReaderAdaptor *this)
{
  if (*((_DWORD *)this + 6))
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
    *((_DWORD *)this + 6) = 0;
    *((_QWORD *)this + 2) = 0;
  }
}

{
  if (*((_DWORD *)this + 6))
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
    *((_DWORD *)this + 6) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  JUMPOUT(0x2276933B8);
}

uint64_t re::SeekableInputStreamReaderAdaptor::bytesRead(re::SeekableInputStreamReaderAdaptor *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t re::SeekableInputStreamReaderAdaptor::bytesRemaining(re::SeekableInputStreamReaderAdaptor *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1))
       - *((_QWORD *)this + 4);
}

re::SeekableInputStreamSlice *re::SeekableInputStreamSlice::SeekableInputStreamSlice(re::SeekableInputStreamSlice *this, re::SeekableInputStream *a2, uint64_t a3)
{
  uint64_t v6;

  *(_QWORD *)this = &off_24ED7C748;
  *((_QWORD *)this + 1) = a2;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = (*(uint64_t (**)(re::SeekableInputStream *))(*(_QWORD *)a2 + 40))(a2);
  *((_QWORD *)this + 4) = a3;
  if (a3 == -1)
  {
    v6 = (*(uint64_t (**)(re::SeekableInputStream *))(*(_QWORD *)a2 + 64))(a2);
    if (v6 != -1)
      *((_QWORD *)this + 4) = v6 - *((_QWORD *)this + 3);
  }
  return this;
}

re *re::SeekableInputStreamSlice::detach(re::SeekableInputStreamSlice *this)
{
  re *result;
  unint64_t v3;
  uint64_t v4;
  int v5;
  void (***v6)(_QWORD);
  uint64_t v7;

  result = (re *)*((_QWORD *)this + 1);
  if (result)
  {
    v3 = *((_QWORD *)this + 4) + *((_QWORD *)this + 3);
    result = (re *)(*(uint64_t (**)(re *))(*(_QWORD *)result + 40))(result);
    if ((unint64_t)result > v3)
    {
      v4 = *((_QWORD *)this + 1);
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
      result = (re *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 24))(v4, (v5 - v3));
    }
    if (*((_BYTE *)this + 16))
    {
      v6 = (void (***)(_QWORD))*((_QWORD *)this + 1);
      if (v6)
      {
        v7 = re::globalAllocators(result)[2];
        (**v6)(v6);
        result = (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v7 + 40))(v7, v6);
      }
      *((_BYTE *)this + 16) = 0;
    }
    *((_QWORD *)this + 1) = 0;
  }
  return result;
}

void re::SeekableInputStreamSlice::~SeekableInputStreamSlice(re::SeekableInputStreamSlice *this)
{
  re::SeekableInputStreamSlice::detach(this);
}

{
  re::SeekableInputStreamSlice::detach(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::SeekableInputStreamSlice::BackUp(re::SeekableInputStreamSlice *this, int a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)this + 4) + v5;
  if (v4 <= v6)
    v7 = 0;
  else
    v7 = v4 - v6;
  v8 = v7 + a2;
  if ((int)(v4 - v8) >= (int)v5)
    v9 = v8;
  else
    v9 = (v4 - v5);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), v9);
}

uint64_t re::SeekableInputStreamSlice::ByteCount(re::SeekableInputStreamSlice *this)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  v3 = *((_QWORD *)this + 3);
  v4 = *((_QWORD *)this + 4) + v3;
  v5 = v2 - v3;
  if (v2 >= v4)
    return *((_QWORD *)this + 4);
  else
    return v5;
}

uint64_t re::SeekableInputStreamSlice::Next(re::SeekableInputStreamSlice *this, const void **a2, int *a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;

  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  v7 = *((_QWORD *)this + 3);
  v8 = *((_QWORD *)this + 4);
  v9 = v8 + v7;
  v10 = v6 - v7;
  if (v6 >= v9)
    v11 = *((_QWORD *)this + 4);
  else
    v11 = v10;
  if (v11 >= v8)
    return 0;
  *a3 = 0;
  result = (*(uint64_t (**)(_QWORD, const void **, int *))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), a2, a3);
  v13 = *((_QWORD *)this + 4);
  if (*a3 + (int)v11 > (int)v13)
    *a3 = v13 - v11;
  return result;
}

uint64_t re::SeekableInputStreamSlice::Skip(re::SeekableInputStreamSlice *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)this + 4);
  v7 = v6 + v5;
  v8 = v4 - v5;
  if (v4 >= v7)
    v8 = *((_QWORD *)this + 4);
  if (v8 + (int)a2 <= v6)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), a2);
  if (v8 < v6)
  {
    v9 = *((_QWORD *)this + 1);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    v11 = *((_QWORD *)this + 3);
    v12 = *((_QWORD *)this + 4) + v11;
    v13 = v10 - v11;
    if (v10 >= v12)
      v13 = *((_QWORD *)this + 4);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, (v6 - v13));
  }
  return 0;
}

BOOL re::SeekableInputStreamSlice::Seek(re::SeekableInputStreamSlice *this, unint64_t a2)
{
  unint64_t v3;

  v3 = *((_QWORD *)this + 4);
  if (v3 >= a2)
    (*(void (**)(_QWORD, unint64_t))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1), *((_QWORD *)this + 3) + a2);
  return v3 >= a2;
}

re::SeekableInputStreamSlice *re::SeekableInputStreamSlice::CreateDetached(re::SeekableInputStreamSlice *this)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  re::SeekableInputStream *v8;
  re *v9;
  uint64_t *v10;
  re::SeekableInputStreamSlice *v11;
  re::SeekableInputStreamSlice *v12;
  uint64_t v13;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  v3 = *((_QWORD *)this + 3);
  v4 = *((_QWORD *)this + 4) + v3;
  v5 = v2 - v3;
  if (v2 >= v4)
    v6 = *((_QWORD *)this + 4);
  else
    v6 = v5;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1));
  if (!v7)
    return 0;
  v8 = (re::SeekableInputStream *)v7;
  v9 = (re *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 56))(v7, *((_QWORD *)this + 3));
  v10 = re::globalAllocators(v9);
  v11 = (re::SeekableInputStreamSlice *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10[2] + 32))(v10[2], 40, 8);
  v12 = re::SeekableInputStreamSlice::SeekableInputStreamSlice(v11, v8, *((_QWORD *)this + 4));
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)v12 + 3) = v13;
  *((_BYTE *)v12 + 16) = 1;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 0;
  if (*((_QWORD *)v12 + 4) >= v6)
    (*(void (**)(_QWORD *, unint64_t))(**((_QWORD **)v11 + 1) + 56))(*((_QWORD **)v11 + 1), v13 + v6);
  return v11;
}

_QWORD *re::SeekableInputStreamSlice::FilePathAndOffset@<X0>(re::SeekableInputStreamSlice *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  char v5;
  uint64_t v6;
  _QWORD v7[3];

  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(**((_QWORD **)this + 1) + 96))(v7);
  v5 = v7[0];
  if (LOBYTE(v7[0]))
  {
    v6 = *((_QWORD *)this + 3) + v7[2];
    *(_QWORD *)(a2 + 8) = v7[1];
    *(_QWORD *)(a2 + 16) = v6;
    v5 = 1;
  }
  *(_BYTE *)a2 = v5;
  return result;
}

uint64_t re::SeekableInputStreamSlice::CanSeek(re::SeekableInputStreamSlice *this)
{
  return 1;
}

uint64_t re::SeekableInputStreamSlice::Length(re::SeekableInputStreamSlice *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t re::SeekableInputStreamSlice::AllInMemory(re::SeekableInputStreamSlice *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
}

uint64_t re::SeekableInputStreamSlice::OwnsMemory(re::SeekableInputStreamSlice *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1));
}

void re::StreamWriterCopyingOutputStream::~StreamWriterCopyingOutputStream(re::StreamWriterCopyingOutputStream *this)
{
  uint64_t v2;

  re::StreamWriterCopyingOutputStream::Flush(this);
  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    if (*((_QWORD *)this + 16))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 16) = 0;
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 12) = 0;
    ++*((_DWORD *)this + 30);
  }
  re::DynamicArrayBufferedOutputStream::~DynamicArrayBufferedOutputStream(this);
}

{
  re::StreamWriterCopyingOutputStream::~StreamWriterCopyingOutputStream(this);
  JUMPOUT(0x2276933B8);
}

BOOL re::StreamWriterCopyingOutputStream::Flush(re::StreamWriterCopyingOutputStream *this)
{
  if (!*((_BYTE *)this + 8))
    return 1;
  *((_BYTE *)this + 8) = 0;
  google::protobuf::io::CopyingOutputStreamAdaptor::Flush((re::StreamWriterCopyingOutputStream *)((char *)this + 40));
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 17) + 16))(*((_QWORD *)this + 17), *((_QWORD *)this + 16), *((_QWORD *)this + 14)) == *((_QWORD *)this + 14);
}

void `non-virtual thunk to're::StreamWriterCopyingOutputStream::~StreamWriterCopyingOutputStream(re::StreamWriterCopyingOutputStream *this)
{
  re::StreamWriterCopyingOutputStream::~StreamWriterCopyingOutputStream((re::StreamWriterCopyingOutputStream *)((char *)this - 24));
}

{
  re::StreamWriterCopyingOutputStream::~StreamWriterCopyingOutputStream((re::StreamWriterCopyingOutputStream *)((char *)this - 24));
  JUMPOUT(0x2276933B8);
}

void re::Bundle::application(_QWORD *a1@<X8>)
{
  id v3;

  objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  *a1 = v3;

}

void re::Bundle::searchForAppOrAppExtension(re::Bundle *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  void *v5;
  int v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", this);
  v13 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "bundleIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isEqualToString:", v13);

  if (!v6 || (v7 = v4) == 0)
  {
    objc_msgSend(MEMORY[0x24BDC1558], "bundleRecordWithBundleIdentifier:allowPlaceholder:error:", v13, 1, 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (v8)
    {
      v10 = (void *)MEMORY[0x24BDD1488];
      objc_msgSend(v8, "URL");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "bundleWithURL:", v11);
      v7 = (id)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v7 = 0;
    }

  }
  v12 = v7;
  *a2 = v12;

}

void re::Bundle::findWithBundleID(re::Bundle *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v4 = (void *)MEMORY[0x24BDD1488];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", this);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "bundleWithIdentifier:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = v6;
  *a2 = v7;

}

void re::Bundle::findWithFilePath(re::Bundle *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v4 = (void *)MEMORY[0x24BDD1488];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", this);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "bundleWithPath:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = v6;
  *a2 = v7;

}

void re::Bundle::ID(id *this@<X0>, re::DynamicString *a2@<X8>)
{
  void *v3;
  _anonymous_namespace_ *v4;
  id v5;

  objc_msgSend(*this, "bundleIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v3;
  if (v3)
  {
    v4 = (_anonymous_namespace_ *)objc_msgSend(objc_retainAutorelease(v3), "cStringUsingEncoding:", 4);
  }
  else
  {
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    re::DynamicString::setCapacity(a2, 0);
  }

}

void re::Bundle::bundlePath(id *this@<X0>, re::DynamicString *a2@<X8>)
{
  void *v3;
  _anonymous_namespace_ *v4;
  id v5;

  objc_msgSend(*this, "bundlePath");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v3;
  if (v3)
  {
    v4 = (_anonymous_namespace_ *)objc_msgSend(objc_retainAutorelease(v3), "cStringUsingEncoding:", 4);
  }
  else
  {
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    re::DynamicString::setCapacity(a2, 0);
  }

}

void re::Bundle::versionString(id *this@<X0>, re::DynamicString *a2@<X8>)
{
  void *v3;
  _anonymous_namespace_ *v4;
  id v5;

  objc_msgSend(*this, "infoDictionary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "valueForKey:", CFSTR("CFBundleVersion"));
  v5 = (id)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v4 = (_anonymous_namespace_ *)objc_msgSend(objc_retainAutorelease(v5), "cStringUsingEncoding:", 4);
  }
  else
  {
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    re::DynamicString::setCapacity(a2, 0);
  }

}

BOOL re::Bundle::pathForResource(id *this, const char *a2, re::DynamicString *a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  _anonymous_namespace_ *v9;
  uint64_t v11;
  char v12;

  v5 = (void *)MEMORY[0x24BDD17C8];
  v6 = *this;
  objc_msgSend(v5, "stringWithUTF8String:", a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "pathForResource:ofType:", v7, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    v9 = (_anonymous_namespace_ *)objc_msgSend(objc_retainAutorelease(v8), "cStringUsingEncoding:", 4);
    re::DynamicString::operator=(a3, (re::DynamicString *)&v11);
    if (v11)
    {
      if ((v12 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v11 + 40))();
    }
  }

  return v8 != 0;
}

void re::Bundle::testData(re::Bundle *this@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  int v4;
  id v5;
  void *v6;
  id v7;
  int v8;
  void *v9;
  id v10;
  int v11;
  void *v12;
  void *v13;
  id v14;
  _BYTE v15[8];
  void *v16;

  v3 = (void *)MEMORY[0x227694090](this);
  re::Bundle::reResourcesFramework((uint64_t)v15);
  v4 = v15[0];
  v5 = v16;
  if (v15[0])
    v6 = v16;
  else
    v6 = 0;
  v7 = v6;
  if (v4)

  if (!v7)
  {
    re::Bundle::realityKitFramework((uint64_t)v15);
    v8 = v15[0];
    v5 = v16;
    if (v15[0])
      v9 = v16;
    else
      v9 = 0;
    v10 = v9;
    if (v8)

    if (!v10)
    {
      re::Bundle::reTestsDataFramework((uint64_t)v15);
      v11 = v15[0];
      v12 = v16;
      if (v15[0])
        v13 = v16;
      else
        v13 = 0;
      v5 = v13;
      if (v11)

    }
  }
  objc_autoreleasePoolPop(v3);
  v14 = v5;
  *a2 = v14;

}

void re::Bundle::reResourcesFramework(uint64_t a1@<X8>)
{
  char v3;

  if (qword_25411C230 != -1)
    dispatch_once(&qword_25411C230, &__block_literal_global_10_0);
  v3 = qword_25411C238;
  if (qword_25411C238)
  {
    *(_QWORD *)(a1 + 8) = (id)qword_25411C238;
    v3 = 1;
  }
  *(_BYTE *)a1 = v3;
}

void re::Bundle::realityKitFramework(uint64_t a1@<X8>)
{
  char v3;

  if (qword_25411C220 != -1)
    dispatch_once(&qword_25411C220, &__block_literal_global_36);
  v3 = qword_25411C228;
  if (qword_25411C228)
  {
    *(_QWORD *)(a1 + 8) = (id)qword_25411C228;
    v3 = 1;
  }
  *(_BYTE *)a1 = v3;
}

void re::Bundle::reTestsDataFramework(uint64_t a1@<X8>)
{
  char v3;

  if (qword_25411C240 != -1)
    dispatch_once(&qword_25411C240, &__block_literal_global_16_0);
  v3 = qword_25411C248;
  if (qword_25411C248)
  {
    *(_QWORD *)(a1 + 8) = (id)qword_25411C248;
    v3 = 1;
  }
  *(_BYTE *)a1 = v3;
}

uint64_t re::Bundle::findFile@<X0>(re::Bundle *this@<X0>, const char *a2@<X1>, re::DynamicString *a3@<X8>)
{
  re *v6;
  unint64_t v7;
  size_t v8;
  _BYTE *v9;
  _BYTE *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  _anonymous_namespace_ *v16;
  NSObject *v17;
  _BOOL8 v18;
  NSObject *v19;
  _BOOL8 v20;
  uint64_t result;
  uint64_t v22;
  char v23;
  _BYTE v24[23];
  _BYTE v25[8];
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE buf[12];
  _BYTE *v30;
  uint8_t v31[4];
  _BYTE *v32;
  __int16 v33;
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v6 = (re *)re::DynamicString::rfind((uint64_t)&v27, 46, v25);
  if (v25[0])
  {
    v7 = v26;
    re::DynamicString::substr((re::DynamicString *)&v27, 0, v26, (re::DynamicString *)buf);
    if ((v28 & 1) != 0)
      v8 = v28 >> 1;
    else
      v8 = v28 >> 1;
    re::DynamicString::substr((re::DynamicString *)&v27, v7 + 1, v8, (re::DynamicString *)&v22);
    if ((buf[8] & 1) != 0)
      v9 = v30;
    else
      v9 = &buf[9];
    if ((v23 & 1) != 0)
      v10 = *(_BYTE **)&v24[7];
    else
      v10 = v24;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = *(id *)this;
    objc_msgSend(v13, "pathForResource:ofType:", v11, v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v14;
    if (v14)
    {
      v16 = (_anonymous_namespace_ *)objc_msgSend(objc_retainAutorelease(v14), "cStringUsingEncoding:", 4);
    }
    else
    {
      v19 = *re::foundationIOLogObjects(0);
      v20 = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
      if (v20)
      {
        *(_DWORD *)v31 = 136315394;
        v32 = v9;
        v33 = 2080;
        v34 = v10;
        _os_log_error_impl(&dword_224FE9000, v19, OS_LOG_TYPE_ERROR, "Could not locate file '%s.%s' in bundle.", v31, 0x16u);
      }
      *((_QWORD *)a3 + 1) = 0;
      *((_QWORD *)a3 + 2) = 0;
      *((_QWORD *)a3 + 3) = 0;
      re::DynamicString::setCapacity(a3, 0);
    }

    if (v22 && (v23 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v22 + 40))();
    if (*(_QWORD *)buf && (buf[8] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)buf + 40))();
  }
  else
  {
    v17 = *re::foundationIOLogObjects(v6);
    v18 = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
    if (v18)
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = a2;
      _os_log_error_impl(&dword_224FE9000, v17, OS_LOG_TYPE_ERROR, "Could not locate file '%s' in bundle; extension missing.",
        buf,
        0xCu);
    }
  }
  result = v27;
  if (v27)
  {
    if ((v28 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v27 + 40))();
  }
  return result;
}

id re::Bundle::coreREFramework@<X0>(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;
  id result;

  v3 = atomic_load((unsigned __int8 *)&qword_25411C218);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25411C218))
  {
    objc_msgSend(MEMORY[0x24BDD1488], "bundleForClass:", objc_opt_class());
    _MergedGlobals_409 = objc_claimAutoreleasedReturnValue();
    __cxa_guard_release(&qword_25411C218);
  }
  result = (id)_MergedGlobals_409;
  *a1 = result;
  return result;
}

void ___ZN2re6Bundle19realityKitFrameworkEv_block_invoke()
{
  Class v0;
  uint64_t v1;
  void *v2;

  v0 = NSClassFromString(CFSTR("RealityKit.ARView"));
  if (v0 || (v0 = NSClassFromString(CFSTR("RealityKit.Entity"))) != 0)
  {
    objc_msgSend(MEMORY[0x24BDD1488], "bundleForClass:", v0);
    v1 = objc_claimAutoreleasedReturnValue();
    v2 = (void *)qword_25411C228;
    qword_25411C228 = v1;

  }
}

void ___ZN2re6Bundle20reResourcesFrameworkEv_block_invoke()
{
  Class v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  const char *v4;
  int v5;
  int v6;
  void *v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[3];
  id obj;

  v0 = NSClassFromString(CFSTR("REResourcesObjClassForBundleLookup"));
  if (v0)
  {
    objc_msgSend(MEMORY[0x24BDD1488], "bundleForClass:", v0);
    v1 = objc_claimAutoreleasedReturnValue();
    v2 = (void *)qword_25411C238;
    qword_25411C238 = v1;

  }
  re::Bundle::coreREFramework(&obj);
  if (!qword_25411C238)
  {
    re::Bundle::ID(&obj, (re::DynamicString *)&v9);
    v3 = v10[0] & 1;
    if ((v10[0] & 1) != 0)
      v4 = (const char *)v10[1];
    else
      v4 = (char *)v10 + 1;
    v5 = strcmp(v4, "com.apple.CoreRE");
    if (v9 && v3)
      (*(void (**)(void))(*(_QWORD *)v9 + 40))();
    if (!v5)
      objc_storeStrong((id *)&qword_25411C238, obj);
    if (!qword_25411C238)
    {
      re::Bundle::realityKitFramework((uint64_t)&v9);
      v6 = v9;
      v7 = (void *)v10[0];
      if ((_BYTE)v9)
        v8 = (void *)v10[0];
      else
        v8 = 0;
      objc_storeStrong((id *)&qword_25411C238, v8);
      if (v6)

    }
  }

}

void ___ZN2re6Bundle20reTestsDataFrameworkEv_block_invoke()
{
  Class v0;
  uint64_t v1;
  void *v2;

  if (!qword_25411C248)
  {
    v0 = NSClassFromString(CFSTR("RETestsDataObjClassForBundleLookup"));
    if (v0)
    {
      objc_msgSend(MEMORY[0x24BDD1488], "bundleForClass:", v0);
      v1 = objc_claimAutoreleasedReturnValue();
      v2 = (void *)qword_25411C248;
      qword_25411C248 = v1;

    }
  }
}

const char *re::bundleFrameworkIdentifier(re *this)
{
  void *v1;
  int v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  const char *v7;
  void *v8;
  char v9;
  void *v10;
  void *v11;
  char v12;
  _BYTE v14[8];
  void *v15;

  v1 = (void *)MEMORY[0x227694090](this);
  re::Bundle::reResourcesFramework((uint64_t)v14);
  v2 = v14[0];
  v3 = v15;
  if (v14[0])
    v4 = v15;
  else
    v4 = 0;
  v5 = objc_retainAutorelease(v4);
  if (v2)

  if (!v5)
    goto LABEL_9;
  objc_msgSend(v5, "bundleIdentifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = "com.apple.CoreRE";
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "com.apple.CoreRE");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v6, "isEqualToString:", v8);

  if ((v9 & 1) == 0)
  {
    objc_msgSend(v5, "bundleIdentifier");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = "com.apple.REResources";
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "com.apple.REResources");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v10, "isEqualToString:", v11);

    if ((v12 & 1) == 0)
LABEL_9:
      v7 = "com.apple.RealityKit";
  }

  objc_autoreleasePoolPop(v1);
  return v7;
}

_BYTE *re::stringToLowerCase@<X0>(re *this@<X0>, re::DynamicString *a2@<X8>)
{
  _BYTE *result;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  char *v9;
  char v10;
  unint64_t v11;
  unint64_t v12;

  v6 = *((_QWORD *)a2 + 1);
  if ((v6 & 1) != 0)
    v7 = v6 >> 1;
  else
    v7 = v6 >> 1;
  if (v7)
  {
    for (i = 0; i < v12; ++i)
    {
      v9 = (char *)re::DynamicString::operator[]((uint64_t)a2, i);
      v10 = __tolower(*v9);
      result = (_BYTE *)re::DynamicString::operator[]((uint64_t)a2, i);
      *result = v10;
      v11 = *((_QWORD *)a2 + 1);
      if ((v11 & 1) != 0)
        v12 = v11 >> 1;
      else
        v12 = v11 >> 1;
    }
  }
  return result;
}

BOOL re::ensureFolderExists(re *this, const char *a2)
{
  _BOOL8 v3;
  std::string::size_type v4;
  const char *v5;
  re *p_p;
  uint64_t v7;
  stat *v8;
  std::string __p;
  stat v11;
  char v12;

  if (!stat((const char *)this, &v11) && (v11.st_mode & 0x4000) != 0)
    return 1;
  std::string::basic_string[abi:nn180100]<0>(&v11, (char *)this);
  v4 = std::string::rfind((const std::string *)&v11, 47, 0xFFFFFFFFFFFFFFFFLL);
  if (v4 == -1)
  {
    v3 = 0;
    goto LABEL_17;
  }
  std::string::basic_string(&__p, (const std::string *)&v11, 0, v4, (std::allocator<char> *)&v12);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = (re *)&__p;
  else
    p_p = (re *)__p.__r_.__value_.__r.__words[0];
  v7 = re::ensureFolderExists(p_p, v5);
  v3 = v7;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v3)
      goto LABEL_17;
LABEL_13:
    if ((v11.st_gid & 0x80000000) == 0)
      v8 = &v11;
    else
      v8 = *(stat **)&v11.st_dev;
    v3 = mkdir((const char *)v8, 0x1EDu) == 0;
    goto LABEL_17;
  }
  if ((_DWORD)v7)
    goto LABEL_13;
LABEL_17:
  if (SHIBYTE(v11.st_gid) < 0)
    operator delete(*(void **)&v11.st_dev);
  return v3;
}

BOOL re::ensureFolderExistsForFile(re *this, const char *a2)
{
  std::string::size_type v2;
  const char *v3;
  std::string *v4;
  _BOOL8 v5;
  std::string v7;
  std::string __str;
  char v9;

  std::string::basic_string[abi:nn180100]<0>(&__str, (char *)this);
  v2 = std::string::rfind(&__str, 47, 0xFFFFFFFFFFFFFFFFLL);
  if (v2 == -1)
  {
    v5 = 0;
  }
  else
  {
    std::string::basic_string(&v7, &__str, 0, v2, (std::allocator<char> *)&v9);
    if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v4 = &v7;
    else
      v4 = (std::string *)v7.__r_.__value_.__r.__words[0];
    v5 = re::ensureFolderExists((re *)v4, v3);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v5;
}

void re::fileURLWithPath(re *this@<X0>, re::DynamicString *a2@<X8>)
{
  void *v4;
  void *v5;
  id v6;
  _anonymous_namespace_ *v7;
  id v8;

  v4 = (void *)MEMORY[0x24BDBCF48];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", this);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "fileURLWithPath:isDirectory:", v5, 0);
  v8 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "absoluteString");
  v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v7 = (_anonymous_namespace_ *)objc_msgSend(v6, "UTF8String");

}

void re::filePathWithURL(re *this@<X0>, re::DynamicString *a2@<X8>)
{
  void *v4;
  id v5;
  _anonymous_namespace_ *v6;
  id v7;

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", this);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCF48], "URLWithString:", v7);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "path");
  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v6 = (_anonymous_namespace_ *)objc_msgSend(v5, "UTF8String");

}

void re::filePathURLConverted(re *this@<X0>, re::DynamicString *a2@<X8>)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __CFString *v8;
  uint64_t v9;
  __CFString *v10;
  void *v11;
  void *v12;
  __CFString *v13;
  _anonymous_namespace_ *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", this);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  objc_msgSend(v3, "pathComponents");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v17;
    v8 = &stru_24EDA2070;
    do
    {
      v9 = 0;
      v10 = v8;
      do
      {
        if (*(_QWORD *)v17 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:isDirectory:", *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * v9), 0);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "lastPathComponent");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        -[__CFString stringByAppendingPathComponent:](v10, "stringByAppendingPathComponent:", v12);
        v8 = (__CFString *)objc_claimAutoreleasedReturnValue();

        ++v9;
        v10 = v8;
      }
      while (v6 != v9);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v6);
  }
  else
  {
    v8 = &stru_24EDA2070;
  }

  v13 = objc_retainAutorelease(v8);
  v14 = (_anonymous_namespace_ *)-[__CFString UTF8String](v13, "UTF8String");

}

void re::pathsToFilesInDirectory(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  id v15;
  uint64_t v16;
  int v17;
  double v18;
  uint64_t v19;
  id v20;
  _anonymous_namespace_ *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v40 = 0;
  objc_msgSend(v6, "contentsOfDirectoryAtPath:error:", v5, &v40);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v40;

  if (v7)
  {
    v26 = v8;
    v27 = a3;
    v39 = 0;
    v37 = 0;
    v36 = 0uLL;
    LODWORD(v38) = 0;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v25 = v7;
    v9 = v7;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v32, v41, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v33;
      do
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v33 != v12)
            objc_enumerationMutation(v9);
          v14 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
          objc_msgSend(v14, "pathExtension");
          v15 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v28 = objc_msgSend(v15, "UTF8String");
          v16 = *(_QWORD *)(a2 + 24);
          if (!v16)
            std::__throw_bad_function_call[abi:nn180100]();
          v17 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 48))(v16, &v28);

          if (v17)
          {
            re::DynamicString::format((re::DynamicString *)"%s/%s", (re::DynamicString *)&v28, objc_msgSend(objc_retainAutorelease(v5), "UTF8String"), objc_msgSend(objc_retainAutorelease(v14), "UTF8String"));
            v18 = re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)&v36, &v28);
            if (v28)
            {
              if ((v29 & 1) != 0)
                (*(void (**)(double))(*(_QWORD *)v28 + 40))(v18);
            }
          }
        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v32, v41, 16);
      }
      while (v11);
    }

    re::DynamicArray<re::DynamicString>::DynamicArray((uint64_t)&v28, (uint64_t *)&v36);
    v19 = v28;
    *(_BYTE *)v27 = 1;
    *(_QWORD *)(v27 + 8) = v19;
    *(_OWORD *)(v27 + 16) = v29;
    v28 = 0;
    v29 = 0uLL;
    *(_QWORD *)(v27 + 40) = v31;
    v31 = 0;
    ++v30;
    *(_DWORD *)(v27 + 32) = 1;
    re::DynamicArray<re::DynamicString>::deinit((uint64_t)&v28);
    re::DynamicArray<re::DynamicString>::deinit((uint64_t)&v36);
    v7 = v25;
    v8 = v26;
  }
  else
  {
    objc_msgSend(v8, "localizedDescription");
    v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v21 = (_anonymous_namespace_ *)objc_msgSend(v20, "UTF8String");
    v22 = v36;
    v36 = 0uLL;
    v23 = v37;
    v24 = v38;
    v37 = 0;
    v38 = 0;
    *(_BYTE *)a3 = 0;
    *(_OWORD *)(a3 + 8) = v22;
    *(_QWORD *)(a3 + 24) = v23;
    *(_QWORD *)(a3 + 32) = v24;

  }
}

_QWORD *re::pathsToFilesWithPathExtensionInDirectory@<X0>(re *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &off_24ED7C8D0;
  v6[1] = a2;
  v7 = v6;
  re::pathsToFilesInDirectory((uint64_t)this, (uint64_t)v6, a3);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void std::__function::__func<re::pathsToFilesWithPathExtensionInDirectory(char const*,char const*)::$_0,std::allocator<re::pathsToFilesWithPathExtensionInDirectory(char const*,char const*)::$_0>,BOOL ()(char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::pathsToFilesWithPathExtensionInDirectory(char const*,char const*)::$_0,std::allocator<re::pathsToFilesWithPathExtensionInDirectory(char const*,char const*)::$_0>,BOOL ()(char const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED7C8D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::pathsToFilesWithPathExtensionInDirectory(char const*,char const*)::$_0,std::allocator<re::pathsToFilesWithPathExtensionInDirectory(char const*,char const*)::$_0>,BOOL ()(char const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED7C8D0;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<re::pathsToFilesWithPathExtensionInDirectory(char const*,char const*)::$_0,std::allocator<re::pathsToFilesWithPathExtensionInDirectory(char const*,char const*)::$_0>,BOOL ()(char const*)>::operator()(uint64_t a1, const char **a2)
{
  return strcmp(*a2, *(const char **)(a1 + 8)) == 0;
}

uint64_t std::__function::__func<re::pathsToFilesWithPathExtensionInDirectory(char const*,char const*)::$_0,std::allocator<re::pathsToFilesWithPathExtensionInDirectory(char const*,char const*)::$_0>,BOOL ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::pathsToFilesWithPathExtensionInDirectory(char const*,char const*)::$_0,std::allocator<re::pathsToFilesWithPathExtensionInDirectory(char const*,char const*)::$_0>,BOOL ()(char const*)>::target_type()
{
}

void re::FileStreamWriter::~FileStreamWriter(re::FileStreamWriter *this)
{
  FILE *v2;

  v2 = (FILE *)*((_QWORD *)this + 1);
  if (v2)
  {
    if (*((_BYTE *)this + 16))
    {
      fclose(v2);
      *((_QWORD *)this + 1) = 0;
      *((_BYTE *)this + 16) = 0;
    }
  }
}

{
  FILE *v2;

  v2 = (FILE *)*((_QWORD *)this + 1);
  if (v2)
  {
    if (*((_BYTE *)this + 16))
    {
      fclose(v2);
      *((_QWORD *)this + 1) = 0;
      *((_BYTE *)this + 16) = 0;
    }
  }
  JUMPOUT(0x2276933B8);
}

FILE *re::FileStreamWriter::open@<X0>(re::FileStreamWriter *this@<X0>, uint64_t a2@<X8>)
{
  FILE *result;
  char v6;
  uint64_t v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  result = fopen((const char *)this, "wb");
  if (result)
  {
    v6 = 1;
    *(_BYTE *)(a2 + 24) = 1;
    v7 = (uint64_t)&off_24ED7C950;
  }
  else
  {
    v8 = __error();
    v9 = strerror(*v8);
    re::DynamicString::format((re::DynamicString *)"Failed to open file \"%s\" for writing. Details: %s", (re::DynamicString *)&v12, this, v9);
    v6 = 0;
    v10 = v13;
    v11 = v14;
    *(_OWORD *)(a2 + 24) = v12;
    *(_QWORD *)(a2 + 40) = v10;
    *(_QWORD *)(a2 + 48) = v11;
    result = (FILE *)&re::FoundationErrorCategory(void)::instance;
    v7 = 300;
  }
  *(_BYTE *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = result;
  return result;
}

size_t re::FileStreamWriter::writeBytes(FILE **this, const void *__ptr, size_t a3)
{
  return fwrite(__ptr, 1uLL, a3, this[1]);
}

size_t re::StringStreamWriter::writeBytes(re::DynamicString **this, const char *a2, size_t a3)
{
  re::DynamicString::append(this[1], a2, a3);
  return a3;
}

void re::StringStreamWriter::~StringStreamWriter(re::StringStreamWriter *this)
{
  JUMPOUT(0x2276933B8);
}

size_t re::MemoryStreamReader::readBytes(re::MemoryStreamReader *this, void *__dst, size_t a3)
{
  uint64_t v3;
  uint64_t v5;
  size_t v6;

  v3 = *((_QWORD *)this + 1);
  if (!v3)
    return 0;
  v5 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 2) - v5 >= a3)
    v6 = a3;
  else
    v6 = *((_QWORD *)this + 2) - v5;
  memcpy(__dst, (const void *)(v3 + v5), v6);
  *((_QWORD *)this + 3) += v6;
  return v6;
}

uint64_t re::MemoryStreamReader::bytesRemaining(re::MemoryStreamReader *this)
{
  return *((_QWORD *)this + 2) - *((_QWORD *)this + 3);
}

size_t re::MemoryStreamReader::seekAndRead(re::MemoryStreamReader *this, void *__dst, unint64_t a3, size_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  size_t v7;
  size_t v8;

  v4 = *((_QWORD *)this + 1);
  if (!v4)
    return 0;
  v5 = *((_QWORD *)this + 2);
  if (v5 >= a3)
    v6 = a3;
  else
    v6 = *((_QWORD *)this + 2);
  v7 = v5 - v6;
  if (v7 >= a4)
    v8 = a4;
  else
    v8 = v7;
  memcpy(__dst, (const void *)(v4 + v6), v8);
  return v8;
}

void re::MemoryStreamReader::~MemoryStreamReader(re::MemoryStreamReader *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::MemoryStreamReader::bytesRead(re::MemoryStreamReader *this)
{
  return *((_QWORD *)this + 3);
}

unint64_t re::MemoryStreamReader::skipBytes(re::MemoryStreamReader *this, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *((_QWORD *)this + 3);
  v3 = *((_QWORD *)this + 2) - v2;
  if (v3 >= a2)
    v3 = a2;
  *((_QWORD *)this + 3) = v3 + v2;
  return v3;
}

BOOL re::MemoryStreamReader::seek(re::MemoryStreamReader *this, unint64_t a2)
{
  unint64_t v2;

  v2 = *((_QWORD *)this + 2);
  if (v2 >= a2)
    *((_QWORD *)this + 3) = a2;
  return v2 >= a2;
}

uint64_t re::internal::canAppendGeomMeshToGeomMesh(re::internal *this, const re::GeomMesh *a2, const re::GeomMesh *a3)
{
  re::internal::GeomAttributeManager *v4;
  int v5;
  unsigned int i;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t result;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;

  v4 = (re::internal *)((char *)this + 64);
  v5 = *((_DWORD *)this + 160);
  if (v5)
  {
    for (i = 0; v5 != i; ++i)
    {
      v7 = re::internal::GeomAttributeManager::attributeByIndex(v4, i);
      v8 = re::internal::GeomAttributeManager::attributeByName((const re::GeomMesh *)((char *)a2 + 64), *(const char **)(v7 + 8));
      if (v8)
      {
        if (*(unsigned __int8 *)(v7 + 17) != *(unsigned __int8 *)(v8 + 17))
          return 0;
        v9 = *(unsigned __int8 *)(v7 + 16);
        v10 = *(unsigned __int8 *)(v8 + 16);
        if (v10 == v9)
        {
          if (!*(_BYTE *)(v7 + 16))
          {
            result = re::GeomAttribute::operator==(v7, v8);
            if (!(_DWORD)result)
              return result;
          }
        }
        else
        {
          v12 = v10 & 0xFFFFFFFD;
          if ((v9 & 0xFFFFFFFD) != 1 || v12 != 1)
            return 0;
        }
      }
    }
  }
  v14 = re::internal::GeomAttributeManager::attributeByName((const re::GeomMesh *)((char *)a2 + 64), "skinnedAnimationGeometryBindTransform");
  v15 = re::internal::GeomAttributeManager::attributeByName(v4, "skinnedAnimationGeometryBindTransform");
  if (!v14)
    return 1;
  if (!v15)
    return 1;
  result = re::GeomAttribute::operator==(v15, v15);
  if ((_DWORD)result)
    return 1;
  return result;
}

void re::internal::appendGeomMeshToGeomMesh(uint64_t a1, uint64_t a2)
{
  re::internal::GeomAttributeManager *v4;
  uint64_t v5;
  uint64_t v6;
  re::GeomMesh *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  const char *v19;
  int v20;
  unsigned int j;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  re *v26;
  re *v27;
  re::GeomAttribute *v28;
  char *v29;
  uint64_t *v30;
  unsigned int v31;
  char *__s[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v4 = (re::internal::GeomAttributeManager *)(a2 + 64);
  v5 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a2 + 64), "skinnedAnimationInfluenceEndIndices");
  v6 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 64), "skinnedAnimationInfluenceEndIndices");
  if (!(v5 | v6))
    goto LABEL_21;
  v8 = v6;
  v9 = *(unsigned int *)(a1 + 16);
  if (v5)
  {
    v10 = *(_DWORD *)(a2 + 16);
    if (v10)
    {
      v11 = re::internal::GeomAttributeManager::attributeByName(v4, "skinnedAnimationInfluenceEndIndices");
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11))
      {
        v31 = 0;
        v14 = v10 - 1;
        goto LABEL_37;
      }
      v12 = re::internal::GeomTypedAttribute<float>::operator[](v11, 0);
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
      v14 = v10 - 1;
      if (v13 <= v14)
      {
        while (1)
        {
          v31 = v13;
LABEL_37:
          v35 = 0u;
          v36 = 0u;
          v33 = 0u;
          v34 = 0u;
          *(_OWORD *)__s = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v37 = 136315906;
          v38 = "operator[]";
          v39 = 1024;
          v40 = 609;
          v41 = 2048;
          v42 = v14;
          v43 = 2048;
          v44 = v31;
          _os_log_send_and_compose_impl();
          v13 = _os_crash_msg();
          __break(1u);
        }
      }
      v10 = *(_DWORD *)(v12 + 4 * v14);
    }
    if (v8)
    {
LABEL_8:
      if (!(_DWORD)v9)
        goto LABEL_18;
LABEL_12:
      v15 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 64), "skinnedAnimationInfluenceEndIndices");
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15))
      {
        v16 = re::internal::GeomTypedAttribute<float>::operator[](v15, 0);
        v17 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
      }
      else
      {
        v17 = 0;
        v16 = 0;
      }
      for (i = 0; i != v9; ++i)
      {
        if (v17 == i)
        {
          v35 = 0u;
          v36 = 0u;
          v33 = 0u;
          v34 = 0u;
          *(_OWORD *)__s = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v37 = 136315906;
          v38 = "operator[]";
          v39 = 1024;
          v40 = 609;
          v41 = 2048;
          v42 = v17;
          v43 = 2048;
          v44 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(_DWORD *)(v16 + 4 * i) += v10;
      }
      goto LABEL_18;
    }
  }
  else
  {
    v10 = 0;
    if (v8)
      goto LABEL_8;
  }
  if ((_DWORD)v9)
    goto LABEL_12;
LABEL_18:
  if (v5 && v8)
    re::internal::GeomAttributeManager::deleteAttribute((re::internal::GeomAttributeManager *)(a1 + 64), "skinnedAnimationGeometryBindTransform");
LABEL_21:
  if (re::meshHasSubdivCreases((re *)a1, v7))
  {
    v19 = (const char *)*(unsigned int *)(a2 + 16);
  }
  v20 = *(_DWORD *)(a1 + 640);
  if (v20)
  {
    for (j = 0; j != v20; ++j)
    {
      v22 = re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 64), j);
      v23 = re::internal::GeomAttributeManager::attributeByName(v4, *(const char **)(v22 + 8));
      if (v23)
      {
        v24 = *(unsigned __int8 *)(v22 + 16);
        v25 = *(unsigned __int8 *)(v23 + 16);
        if (v25 != v24)
        {
          if (v25 == 1)
            re::internal::GeomBaseMesh::replaceVertexAttributeWithFaceVaryingAttribute((re::internal::GeomBaseMesh *)(a2 + 16), *(char **)(v23 + 8));
          if (v24 == 1)
            re::internal::GeomBaseMesh::replaceVertexAttributeWithFaceVaryingAttribute((re::internal::GeomBaseMesh *)(a1 + 16), *(char **)(v22 + 8));
        }
      }
    }
  }
  re::GeomMeshBuilder::GeomMeshBuilder((re *)__s, a2);
  re::GeomMeshBuilder::appendMesh((re::GeomMeshBuilder *)__s, (const re::GeomMesh *)a1);
  v26 = (re *)re::GeomMesh::operator=(a2, &__s[1]);
  v27 = re::GeomMesh::setName(v26, __s[0]);
  v29 = __s[0];
  if (__s[0])
  {
    v30 = re::globalAllocators(v27);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v30[2] + 40))(v30[2], v29);
    __s[0] = 0;
  }
  re::GeomMesh::clearComponents((re::GeomMesh *)a1, v28);
  *(_QWORD *)(a1 + 728) = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)(a1 + 64), "vertexPosition", 1, 7);
  re::GeomMeshBuilder::~GeomMeshBuilder((re::GeomMeshBuilder *)__s);
}

uint64_t re::internal::`anonymous namespace'::addSkinningInfluenceIndicesEndToMesh(re::internal::_anonymous_namespace_ *this, re::GeomMesh *a2)
{
  uint64_t result;
  uint64_t v4;
  re::GeomAttribute *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = re::internal::GeomAttributeManager::attributeByName((re::internal::_anonymous_namespace_ *)((char *)this + 64), "skinnedAnimationInfluenceEndIndices");
  if (!result)
  {
    v4 = *((unsigned int *)this + 4);
    v5 = re::GeomMesh::addAttribute((uint64_t)this, "skinnedAnimationInfluenceEndIndices", 4, 2);
    if (!v5)
      goto LABEL_12;
    v7 = (uint64_t)v5;
    (*(void (**)(re::GeomAttribute *, uint64_t))(*(_QWORD *)v5 + 24))(v5, v4);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    if ((_DWORD)result)
    {
      v8 = re::internal::GeomTypedAttribute<float>::operator[](v7, 0);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      v9 = result;
      if (!(_DWORD)v4)
        return result;
      goto LABEL_7;
    }
    v9 = 0;
    v8 = 0;
    if ((_DWORD)v4)
    {
LABEL_7:
      v10 = 0;
      while (v9 != v10)
      {
        *(_DWORD *)(v8 + 4 * v10++) = 0;
        if (v4 == v10)
          return result;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_12:
      re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) ", "influencesEndOffsetAttr != nullptr", "addSkinningInfluenceIndicesEndToMesh", 30);
      _os_crash();
      __break(1u);
    }
  }
  return result;
}

_BYTE *re::internal::`anonymous namespace'::addOffsetToAllValuesForAttribute(re::internal::_anonymous_namespace_ *this, re::GeomMesh *a2, const char *a3)
{
  int v3;
  _BYTE *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (int)a3;
  result = (_BYTE *)re::internal::GeomAttributeManager::attributeByName((re::internal::_anonymous_namespace_ *)((char *)this + 64), (const char *)a2);
  if (result)
  {
    v5 = (uint64_t)result;
    if (result[17] == 3)
    {
      if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)result + 16))(result))
      {
        v6 = re::internal::GeomTypedAttribute<float>::operator[](v5, 0);
        v7 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      }
      else
      {
        v7 = 0;
        v6 = 0;
      }
      result = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      if ((_DWORD)result)
      {
        v8 = 0;
        do
        {
          if (v7 == v8)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(_DWORD *)(v6 + 4 * v8++) += v3;
        }
        while (result != v8);
      }
    }
  }
  return result;
}

void re::ktxMipInfo(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v3 = objc_retainAutorelease(*a1);
  MTLPixelFormatGetInfoForDevice();
  if ((v7 & 1) == 0)
  {

    v3 = 0;
  }
  *(_QWORD *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  MTLGetTextureLevelInfoForDeviceWithOptions();
  v4 = (*(_QWORD *)(a2 + 80) + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 32) * v4;
  *(_QWORD *)(a2 + 80) = v4;
  *(_QWORD *)(a2 + 88) = v6;
  *(_QWORD *)(a2 + 96) = v5 * v6;

}

CFComparisonResult re::useImageIOForTextureImport(_BYTE *a1, id *a2, uint64_t a3)
{
  uint64_t isSupportedPixelFormat;
  CFComparisonResult result;
  const __CFString *v8;
  const __CFString *v9;
  _BOOL8 HasSRGBTransfer;
  NSObject *v11;
  id v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  NSObject *v17;
  id v18;
  CGColorSpace *v19;
  re::internal *v20;
  size_t NumberOfComponents;
  CGColorSpace *v22;
  _BOOL4 IsExtendedOrHDR;
  const __CFString *v24;
  uint64_t ColorGamutFromCGColorSpaceName;
  int v26;
  NSObject *v27;
  NSObject *v28;
  unsigned __int8 v29;
  NSObject *v30;
  _BOOL4 v31;
  NSObject *v32;
  NSObject *v33;
  _BOOL4 v34;
  char v35;
  uint8_t buf[32];
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a1)
  {
    if ((re::isASTCPixelFormat((int)objc_msgSend(*a2, sel_pixelFormat)) & 1) == 0)
    {
      objc_msgSend(*a2, sel_textureType);
      isSupportedPixelFormat = re::isSupportedPixelFormat();
      if ((isSupportedPixelFormat & 1) == 0)
      {
        v17 = *re::pipelineLogObjects((re *)isSupportedPixelFormat);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          v18 = *a2;
          v13 = v17;
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = objc_msgSend(v18, sel_pixelFormat);
          v14 = "KTX Texture Import: Pixel format %lu is not supported on current platform, using ImageIO to perform conv"
                "ersion to supported pixel format.";
          v15 = v13;
          v16 = 12;
          goto LABEL_13;
        }
        return 1;
      }
    }
  }
  if (!a1[16] || objc_msgSend(*a2, sel_textureType) != (id)2 || (*(_DWORD *)(a3 + 56) - 3) > 1)
    return 0;
  result = (CFComparisonResult)*(id *)(a3 + 64);
  if (result == kCFCompareEqualTo)
    return result;
  v8 = (const __CFString *)result;
  objc_msgSend(*a2, sel_pixelFormat);
  v38 = 0;
  v37 = 0u;
  memset(buf, 0, sizeof(buf));
  MTLPixelFormatGetInfoForDevice();
  HasSRGBTransfer = re::colorSpaceNameHasSRGBTransfer(v8, v9);
  if (HasSRGBTransfer)
  {
    v11 = *re::pipelineLogObjects((re *)HasSRGBTransfer);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *a2;
      v13 = v11;
      *(_DWORD *)buf = 134218754;
      *(_QWORD *)&buf[4] = objc_msgSend(v12, sel_pixelFormat);
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "is";
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = CFStringGetCStringPtr(v8, 0x8000100u);
      LOWORD(v37) = 2080;
      *(_QWORD *)((char *)&v37 + 2) = "does not use";
      v14 = "Pixel format %lu %s linear while colorspace %s %s a linear transfer function. Using ImageIO to facilitate th"
            "e gamma transfer function conversion.";
      v15 = v13;
      v16 = 42;
LABEL_13:
      _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, v14, buf, v16);

      return 1;
    }
    return 1;
  }
  v19 = CGColorSpaceCreateWithName(v8);
  if (!v19)
  {
    v30 = *re::pipelineLogObjects(0);
    v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
    result = kCFCompareEqualTo;
    if (!v31)
      return result;
    v32 = v30;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = CFStringGetCStringPtr(v8, 0x8000100u);
    _os_log_impl(&dword_224FE9000, v32, OS_LOG_TYPE_DEFAULT, "Invalid colorSpaceNameOverride: %s", buf, 0xCu);

    return 0;
  }
  v20 = v19;
  NumberOfComponents = CGColorSpaceGetNumberOfComponents(v19);
  IsExtendedOrHDR = re::internal::colorSpaceIsExtendedOrHDR(v20, v22);
  CGColorSpaceRelease(v20);
  objc_msgSend(*a2, sel_pixelFormat);
  v38 = 0;
  v37 = 0u;
  memset(buf, 0, sizeof(buf));
  MTLPixelFormatGetInfoForDevice();
  v24 = (const __CFString *)re::computeWorkingColorSpaceName(a1, NumberOfComponents, 0, IsExtendedOrHDR);
  if (!v24)
  {
    v33 = *re::pipelineLogObjects(0);
    v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
    result = kCFCompareEqualTo;
    if (!v34)
      return result;
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_224FE9000, v33, OS_LOG_TYPE_DEFAULT, "KTX Texture Import: Working colorspace was nullptr, skipping ImageIO.", buf, 2u);
    return 0;
  }
  result = CFStringCompare(v8, v24, 0);
  if (result)
  {
    ColorGamutFromCGColorSpaceName = re::ColorHelpers::getColorGamutFromCGColorSpaceName(v8, &v35);
    v26 = ColorGamutFromCGColorSpaceName;
    if ((ColorGamutFromCGColorSpaceName & 1) == 0)
    {
      v27 = *re::pipelineLogObjects((re *)ColorGamutFromCGColorSpaceName);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        v28 = v27;
        if (a1[19])
          v29 = a1[20];
        else
          v29 = 0;
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v29;
        _os_log_impl(&dword_224FE9000, v28, OS_LOG_TYPE_DEFAULT, "KTX Texture Import: Using ImageIO to convert from source color gamut to destination color gamut: %d", buf, 8u);

      }
    }
    return (unint64_t)(v26 ^ 1u);
  }
  return result;
}

void re::createTextureWithKTXData(uint64_t a1@<X0>, __n128 *a2@<X1>, unint64_t a3@<X2>, unsigned int a4@<W3>, re::ColorHelpers *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10)
{
  re *v17;
  re::ColorHelpers *v18;
  const __CFString *v19;
  NSObject *v20;
  unsigned __int8 v21;
  re *InfoForDevice;
  NSObject *v23;
  id v24;
  re *v25;
  CGImageSource *v26;
  int v27;
  id v28;
  id v29;
  re *v30;
  char v31;
  NSObject *v32;
  char isSupportedPixelFormat;
  char v34;
  id v35;
  char isASTCPixelFormat;
  char v37;
  NSObject *v38;
  _BYTE *v39;
  uint64_t v40;
  id v41;
  void *v42;
  unint64_t v43;
  id v44;
  id v45;
  os_unfair_lock_s *v46;
  id v47;
  char v48;
  unint64_t v49;
  int v50;
  unsigned __int8 v51;
  re *v52;
  NSObject *v53;
  unsigned __int8 v54;
  re *v55;
  NSObject *v56;
  int v57;
  unsigned __int8 v58;
  __CFString *CGColorSpaceNameForPixelFormat;
  char v60;
  unint64_t v61;
  char v62;
  re *v63;
  NSObject *v64;
  id v65;
  NSObject *v66;
  unsigned int v67;
  id v68;
  id v69;
  re *v70;
  re *v71;
  NSObject *v72;
  unsigned int v73;
  NSObject *v74;
  id v75;
  uint64_t v76;
  id *v77;
  __n128 *v78;
  unint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  id v85;
  id v86;
  unint64_t v87;
  id v88;
  id v89;
  id v90[3];
  uint64_t v91;
  unsigned int v92;
  id v93;
  int v94;
  id v95;
  unsigned int v96;
  _BYTE v97[12];
  __int128 buf;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  unsigned int v102;
  id v103;
  id v104;
  __int128 v105;
  _BYTE v106[8];
  int v107;
  char v108;
  _BYTE v109[55];
  id v110;
  char v111;
  __CFString *v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  v96 = a4;
  if (!v106[0])
  {
    v20 = *re::pipelineLogObjects(v17);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      if ((v108 & 1) != 0)
        v39 = *(_BYTE **)&v109[7];
      else
        v39 = v109;
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v39;
      _os_log_error_impl(&dword_224FE9000, v20, OS_LOG_TYPE_ERROR, "Failed to create texture from KTX: %s", (uint8_t *)&buf, 0xCu);
    }
    *(_BYTE *)a9 &= 0x80u;
    *(_QWORD *)(a9 + 8) = 0;
    *(_DWORD *)(a9 + 88) = 0;
    *(_QWORD *)(a9 + 96) = 0;
    goto LABEL_146;
  }
  v95 = v110;
  v94 = 0;
  {
    *(_BYTE *)a9 &= 0x80u;
    *(_QWORD *)(a9 + 8) = 0;
    *(_DWORD *)(a9 + 88) = 0;
    *(_QWORD *)(a9 + 96) = 0;
LABEL_144:
    if (v95)

LABEL_146:
    return;
  }
  v82 = (uint64_t)a5;
  LODWORD(a5) = 0;
  v83 = v94;
  LOBYTE(v89) = 0;
  v90[0] = 0;
  v92 = 0;
  v93 = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    if ((*(_DWORD *)(a6 + 56) - 3) <= 1)
    {
      v18 = (re::ColorHelpers *)*(id *)(a6 + 64);
      a5 = v18;
      if (v18)
      {
        if (re::ColorHelpers::isGrayScaleCGColorSpaceName(v18, v19))
        {
LABEL_7:
          LODWORD(a5) = 0;
          goto LABEL_18;
        }
        LOBYTE(buf) = 0;
        if (re::ColorHelpers::getColorGamutFromCGColorSpaceName(a5, (char *)&buf))
        {
          objc_msgSend(v95, sel_pixelFormat);
          if (re::getComponentCount() == 1)
            goto LABEL_7;
          if (*(_BYTE *)(a1 + 19))
            v21 = *(_BYTE *)(a1 + 20);
          else
            v21 = 0;
          LODWORD(a5) = buf != v21;
        }
        else
        {
          LODWORD(a5) = 1;
        }
      }
    }
  }
LABEL_18:
  if (re::useImageIOForTextureImport((_BYTE *)a1, &v95, a6))
  {
    v101 = 0;
    v99 = 0u;
    v100 = 0u;
    buf = 0u;
    InfoForDevice = (re *)MTLPixelFormatGetInfoForDevice();
    if ((WORD4(buf) & 0x400) != 0)
    {
      v23 = *re::pipelineLogObjects(InfoForDevice);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v82;
        _os_log_impl(&dword_224FE9000, v23, OS_LOG_TYPE_DEFAULT, "Using ImageIO to import KTX '%s' will decompress the texture, increasing memory usage.", (uint8_t *)&buf, 0xCu);
      }
    }
    objc_msgSend(v95, sel_pixelFormat);
    v101 = 0;
    v99 = 0u;
    v100 = 0u;
    buf = 0u;
    MTLPixelFormatGetInfoForDevice();
    if ((WORD4(buf) & 0x800) != 0)
      *(_DWORD *)(a6 + 48) = 2;
    v24 = v95;
    v88 = v24;
    v26 = v25;
    if (v24)
    {

      v88 = 0;
    }
    v27 = v83;
    if (v26)
    {
      re::loadMetalTextureWithReleasedCGImageSource((re::internal *)a6, v26, (id *)a1, &v95, v82, a7, a10, (uint64_t)&buf);
      LOBYTE(v89) = buf;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>((uint64_t)v90, (uint64_t)&buf + 8);
      v28 = v103;
      v103 = 0;
      v29 = v93;
      v93 = v28;

      if (v102 != -1)
        v30 = (re *)((uint64_t (*)(__int128 *, char *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_1
                                                                 + v102))(&v105, (char *)&buf + 8);
      if (!v92)
        goto LABEL_32;
      if (v92 != 1)
        goto LABEL_147;
      if (v91)
      {
LABEL_32:
        if (v90[0])
        {
          LOBYTE(v89) = v89 & 0xDF | (32 * v111);
          goto LABEL_93;
        }
      }
      v38 = *re::pipelineLogObjects(v30);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v82;
        _os_log_fault_impl(&dword_224FE9000, v38, OS_LOG_TYPE_FAULT, "Failed to create texture '%s' from KTX", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      v32 = *re::pipelineLogObjects(v25);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v82;
        _os_log_error_impl(&dword_224FE9000, v32, OS_LOG_TYPE_ERROR, "Failed to create image source from KTX: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    *(_BYTE *)a9 &= 0x80u;
    *(_QWORD *)(a9 + 8) = 0;
    *(_DWORD *)(a9 + 88) = 0;
    *(_QWORD *)(a9 + 96) = 0;
    goto LABEL_142;
  }
  v81 = (int)a5;
  if ((_DWORD)v83)
  {
    objc_msgSend(v95, sel_setPixelFormat_, v83);
    if (!*(_QWORD *)a1)
    {
      v31 = 0;
LABEL_43:
      isASTCPixelFormat = re::isASTCPixelFormat(v83);
      *(_QWORD *)v97 = 0;
      if ((isASTCPixelFormat & 1) == 0 && (v31 & 1) == 0)
        goto LABEL_45;
LABEL_47:
      re::ObjCObject::operator=((void **)v97, 0);
      v37 = 1;
      goto LABEL_56;
    }
  }
  else if (!*(_QWORD *)a1)
  {
    v37 = 0;
    *(_QWORD *)v97 = 0;
    goto LABEL_56;
  }
  objc_msgSend(v95, sel_pixelFormat);
  objc_msgSend(v95, sel_textureType);
  isSupportedPixelFormat = re::isSupportedPixelFormat();
  v34 = isSupportedPixelFormat;
  v35 = *(id *)a1;
  if ((_DWORD)v83 && !v35)
  {
    v31 = isSupportedPixelFormat ^ 1;
    goto LABEL_43;
  }
  *(_QWORD *)v97 = v35;
  if ((v34 & 1) == 0)
    goto LABEL_47;
LABEL_45:
  v37 = 0;
LABEL_56:
  v87 = 0;
  v40 = *(_QWORD *)(a1 + 24);
  v41 = *(id *)v97;
  v42 = v41;
  if (a3 > 0x500000 && v40)
  {
    v44 = v86;
    v43 = v87;
    v45 = v86;
    v46 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 24) + 128);
    os_unfair_lock_lock(v46);
    v47 = v42;
    *(_QWORD *)&buf = v47;
    *(_QWORD *)&v105 = v45;
    v48 = re::processKtxMips((id *)&buf, (re *)a1, a6, v82, (uint64_t)&v107, &v107, &v95, v43, (id *)&v105, v37, a10, (uint64_t)&v89);
    if ((_QWORD)v105)
    {

      *(_QWORD *)&v105 = 0;
    }

    os_unfair_lock_unlock(v46);
    if (v45)

    if ((v48 & 1) == 0)
    {
LABEL_63:
      *(_BYTE *)a9 &= 0x80u;
      *(_QWORD *)(a9 + 8) = 0;
      *(_DWORD *)(a9 + 88) = 0;
      *(_QWORD *)(a9 + 96) = 0;
      if (v44)

      goto LABEL_142;
    }
  }
  else
  {
    v85 = v41;
    v44 = v86;
    v49 = v87;
    v84 = v86;
    v50 = re::processKtxMips(&v85, (re *)a1, a6, v82, (uint64_t)&v107, &v107, &v95, v49, &v84, v37, a10, (uint64_t)&v89);
    if (v84)
    {

      v84 = 0;
    }

    if (!v50)
      goto LABEL_63;
  }
  if (v44)

  LOBYTE(v89) = v89 & 0xDF | (32 * v111);
  v27 = v83;
  if (v81)
  {
    v97[0] = 0;
    if (re::ColorHelpers::getColorGamutFromCGColorSpaceName(*(id *)(a6 + 64), v97))
    {
      v51 = *(_BYTE *)(a1 + 19) ? *(_BYTE *)(a1 + 20) : 0;
      if (v97[0] != v51)
      {
        if (!v93)
          re::TextureData::setColorSpace(&v89, (__CFString *)*(id *)(a6 + 64));
        objc_msgSend(v95, sel_pixelFormat);
        v101 = 0;
        v99 = 0u;
        v100 = 0u;
        buf = 0u;
        v52 = (re *)MTLPixelFormatGetInfoForDevice();
        if ((WORD4(buf) & 0x400) != 0)
        {
          v53 = *re::pipelineLogObjects(v52);
          if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf) = 136315138;
            *(_QWORD *)((char *)&buf + 4) = v82;
            _os_log_impl(&dword_224FE9000, v53, OS_LOG_TYPE_DEFAULT, "Applying gamut conversion for '%s' will decompress the texture, increasing memory usage.", (uint8_t *)&buf, 0xCu);
          }
        }
        if (*(_BYTE *)(a1 + 19))
          v54 = *(_BYTE *)(a1 + 20);
        else
          v54 = 0;
        re::convertTextureColorSpace(v54, (uint64_t)&v89, (uint64_t)&buf);
        if (v102)
        {
          if (v102 != 1)
            goto LABEL_147;
          if (!(_QWORD)v100)
            goto LABEL_90;
        }
        if (*((_QWORD *)&buf + 1))
        {
          re::TextureData::operator=((uint64_t)&v89, (uint64_t)&buf);
        }
        else
        {
LABEL_90:
          v56 = *re::pipelineLogObjects(v55);
          if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v105) = 136315138;
            *(_QWORD *)((char *)&v105 + 4) = v82;
            _os_log_error_impl(&dword_224FE9000, v56, OS_LOG_TYPE_ERROR, "Failed to convert KTX texture colorspace for '%s'", (uint8_t *)&v105, 0xCu);
          }
        }
        re::TextureData::~TextureData((id *)&buf);
      }
    }
  }
LABEL_93:
  if (v92)
  {
    if (v92 != 1)
      goto LABEL_147;
    if (!v91)
      goto LABEL_123;
  }
  if (v90[0] && (*(_DWORD *)(a6 + 56) - 3) <= 1 && !v93)
  {
    v57 = objc_msgSend(v95, sel_pixelFormat);
    if (*(_BYTE *)(a1 + 19))
      v58 = *(_BYTE *)(a1 + 20);
    else
      v58 = 0;
    CGColorSpaceNameForPixelFormat = (__CFString *)re::ColorHelpers::getCGColorSpaceNameForPixelFormat(v57, v58);
    re::TextureData::setColorSpace(&v89, CGColorSpaceNameForPixelFormat);
  }
  if (v92)
  {
    if (v92 != 1)
      goto LABEL_147;
    if (!v91)
      goto LABEL_123;
  }
  if (!v90[0] || !*(_QWORD *)a1)
    goto LABEL_123;
  v60 = objc_msgSend(*(id *)a1, "supportsTextureSwizzle");
  v61 = v96;
  if (v96 == 84148994)
    v62 = 1;
  else
    v62 = v60;
  if (v27 && !re::MTLToASTCPixelFormat((int)objc_msgSend(v95, sel_pixelFormat)))
  {
    objc_msgSend(v95, sel_pixelFormat);
    v101 = 0;
    v99 = 0u;
    v100 = 0u;
    buf = 0u;
    v63 = (re *)MTLPixelFormatGetInfoForDevice();
    if ((WORD4(buf) & 0x400) != 0)
    {
      v64 = *re::pipelineLogObjects(v63);
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      {
        v65 = v95;
        v66 = v64;
        v67 = objc_msgSend(v65, sel_pixelFormat);
        LODWORD(buf) = 67109120;
        DWORD1(buf) = v67;
        _os_log_impl(&dword_224FE9000, v66, OS_LOG_TYPE_DEFAULT, "Source compressed pixel format '%d' does not match compression options: will decompress and recompress", (uint8_t *)&buf, 8u);

      }
    }
    goto LABEL_118;
  }
  if ((v62 & 1) == 0)
  {
LABEL_118:
    if (v92)
      goto LABEL_147;
    re::internal::createRepackedTexture((id *)a1, v90, v61, &v105);
    LOBYTE(buf) = buf & 0x80;
    *((_QWORD *)&buf + 1) = (id)v105;
    v102 = 0;
    v103 = 0;
    LOBYTE(v89) = buf;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>((uint64_t)v90, (uint64_t)&buf + 8);
    v68 = v103;
    v103 = 0;
    v69 = v93;
    v93 = v68;

    if (v102 != -1)
      ((void (*)(_BYTE *, char *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_1
                                             + v102))(v97, (char *)&buf + 8);
    v102 = -1;
    if ((_QWORD)v105)

  }
LABEL_123:
  objc_msgSend(v95, sel_pixelFormat);
  v101 = 0;
  v99 = 0u;
  v100 = 0u;
  buf = 0u;
  MTLPixelFormatGetInfoForDevice();
  if ((WORD4(buf) & 0x400) != 0)
  {
    if (v92 >= 2)
      goto LABEL_147;
    objc_msgSend(v90[0], sel_pixelFormat);
    v101 = 0;
    v99 = 0u;
    v100 = 0u;
    buf = 0u;
    MTLPixelFormatGetInfoForDevice();
    if ((WORD4(buf) & 0x400) == 0)
      LOBYTE(v89) = v89 | 4;
  }
  if (!v27)
  {
LABEL_141:
    *(_BYTE *)a9 = (_BYTE)v89;
    *(_BYTE *)(a9 + 8) = 0;
    *(_DWORD *)(a9 + 88) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>(a9 + 8, (uint64_t)v90);
    v75 = v93;
    v93 = 0;
    *(_QWORD *)(a9 + 96) = v75;
LABEL_142:

    if (v92 != -1)
      ((void (*)(__int128 *, id *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_1
                                              + v92))(&buf, v90);
    goto LABEL_144;
  }
  if (v92 < 2)
  {
    v70 = (re *)re::MTLToASTCPixelFormat((int)objc_msgSend(v90[0], sel_pixelFormat));
    if ((_DWORD)v70)
    {
      v105 = *(_OWORD *)(a6 + 28);
      if (*(_DWORD *)(a6 + 24) == 3)
        LODWORD(v105) = 1;
      re::logTextureCompressionInfo((re *)"createTextureWithKTXData", (uint64_t)&v89, (int *)&v105);
      re::createCompressedTextureData((uint64_t)&v89, *(_DWORD *)(a6 + 56), &v105, (id *)a1, 0, 0, (uint64_t)&buf);
      if ((_BYTE)buf)
      {
        LOBYTE(v89) = BYTE8(buf);
        std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v90, (uint64_t)&v99);
        re::ObjCObject::operator=(&v93, &v104);
      }
      else
      {
        v74 = *re::pipelineLogObjects(v71);
        if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v97 = 136315138;
          *(_QWORD *)&v97[4] = v82;
          _os_log_error_impl(&dword_224FE9000, v74, OS_LOG_TYPE_ERROR, "ASTC compression failed for '%s'", v97, 0xCu);
        }
      }
      re::Result<re::TextureData,re::DynamicString>::~Result((uint64_t)&buf);
      goto LABEL_141;
    }
    v72 = (id)*re::pipelineLogObjects(v70);
    if (!os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
      goto LABEL_137;
    if (v92 < 2)
    {
      v73 = objc_msgSend(v90[0], sel_pixelFormat);
      LODWORD(buf) = 67109120;
      DWORD1(buf) = v73;
      _os_log_impl(&dword_224FE9000, v72, OS_LOG_TYPE_DEFAULT, "Ignoring ASTC compression options: not supported for source pixel format '%d'", (uint8_t *)&buf, 8u);
LABEL_137:

      goto LABEL_141;
    }
  }
LABEL_147:
  v76 = std::__throw_bad_variant_access[abi:nn180100]();
}

void re::`anonymous namespace'::parseKTX(uint64_t ASTCHDRFormatForPixelFormat, id *a2, __n128 *a3, unint64_t a4, int a5)
{
  uint64_t v5;
  __n128 v6;
  unint64_t v7;
  uint64_t v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  const char *v13;
  __n128 *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  const char *v28;
  re *v29;
  NSObject *v30;
  NSObject *v31;
  const char *v32;
  uint32_t v33;
  size_t v34;
  size_t v35;
  size_t v36;
  NSObject *v37;
  BOOL v38;
  int v39;
  char v41;
  int v42;
  int v43;
  unsigned int v44;
  unint64_t v45;
  char *v46;
  __n128 *v47;
  uint64_t v48;
  char v49;
  __n128 *v50;
  unsigned __int32 v51;
  int v52;
  NSObject *v53;
  NSObject *v54;
  size_t v55;
  const char *v56;
  int isHDR;
  _anonymous_namespace_ *v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  NSObject *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  unsigned int v74;
  double v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  __n128 v81;
  __n128 v82;
  NSObject *log;
  int v84;
  BOOL v85;
  char *__s1;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  size_t v93;
  const char *v94;
  int v95;
  uint64_t v96;
  char v97;
  int v98;
  __n128 v99;
  __n128 v100;
  __n128 v101;
  __n128 v102;
  _BYTE buf[32];
  uint64_t v104;

  v5 = ASTCHDRFormatForPixelFormat;
  v104 = *MEMORY[0x24BDAC8D0];
  if (a4 <= 0x3F)
  {
    v6 = v99;
    v8 = v100.n128_i64[1];
    v7 = v100.n128_u64[0];
LABEL_15:
    *(_BYTE *)v5 = 0;
    *(__n128 *)(v5 + 8) = v6;
    *(_QWORD *)(v5 + 24) = v7;
    *(_QWORD *)(v5 + 32) = v8;
    return;
  }
  v9 = a3[1];
  v99 = *a3;
  v100 = v9;
  v10 = a3[2];
  v11 = a3[3];
  v101 = v10;
  v102 = v11;
  if (v99.n128_u64[0] != 0xBB31312058544BABLL || v99.n128_u32[2] != 169478669)
  {
    v13 = "Tried to load a non-KTX file as KTX (header identifier mismatch)";
LABEL_13:
    goto LABEL_14;
  }
  if (v99.n128_u32[3] != 67305985)
  {
    v13 = "Tried to load a KTX file with unsupported endianness";
    goto LABEL_13;
  }
  v16 = a3 + 4;
  v17 = a4 - 64;
  if (!v102.n128_u32[3])
  {
    v88 = (uint64_t)&a3[4];
    v89 = a4 - 64;
    v19 = 0;
    v90 = 0;
    v93 = 0;
    v94 = 0;
    v20 = 0;
    __s1 = 0;
    v16 = 0;
    goto LABEL_57;
  }
  v26 = v17 >= v102.n128_u32[3];
  v18 = v17 - v102.n128_u32[3];
  if (!v26)
  {
    re::DynamicString::format((re::DynamicString *)"KTX data is not large enough to contain %u bytes of key-value data", (re::DynamicString *)buf, v102.n128_u32[3]);
    goto LABEL_14;
  }
  v89 = v18;
  v88 = (uint64_t)v16 + v102.n128_u32[3];
  if (v102.n128_u32[3] < 5)
  {
    v19 = 0;
    v90 = 0;
    v93 = 0;
    v94 = 0;
    v20 = 0;
    __s1 = 0;
    goto LABEL_57;
  }
  v95 = 0;
  v90 = 0;
  v93 = 0;
  v94 = 0;
  v20 = 0;
  __s1 = 0;
  v21 = 0;
  v10.n128_u64[0] = 134218498;
  while (1)
  {
    if ((unint64_t)v102.n128_u32[3] - v21 < 4)
    {
LABEL_56:
      v19 = v95;
      goto LABEL_57;
    }
    v22 = v21 + 4;
    v23 = *(unsigned int *)((char *)v16->n128_u32 + v21);
    v24 = v102.n128_u32[3] - (v21 + 4);
    if (v24 < v23)
      break;
    if ((_DWORD)v23)
    {
      v25 = (v23 + 3) & 0x1FFFFFFFCLL;
      v26 = v24 >= v25;
      if (v24 >= v25)
        v27 = (v23 + 3) & 0x1FFFFFFFCLL;
      else
        v27 = 0;
      v21 = v27 + v22;
      if (v26)
        v28 = (char *)v16 + v22;
      else
        v28 = 0;
      v29 = (re *)strnlen(v28, v23);
      if (v29 == (re *)v23)
      {
        v30 = *re::pipelineLogObjects(v29);
        ASTCHDRFormatForPixelFormat = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)ASTCHDRFormatForPixelFormat)
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v28;
          v31 = v30;
          v32 = "Failed to parse KTX metadata: Missing value for key %s";
          v33 = 12;
          goto LABEL_45;
        }
      }
      else
      {
        v34 = (size_t)v29 + 1;
        v35 = v23 - ((_QWORD)v29 + 1);
        ASTCHDRFormatForPixelFormat = strncmp("KTXmetalPixelFormat", v28, (size_t)v29 + 1);
        if ((_DWORD)ASTCHDRFormatForPixelFormat)
        {
          ASTCHDRFormatForPixelFormat = strncmp("MTLPixelFormat", v28, v34);
          if ((_DWORD)ASTCHDRFormatForPixelFormat)
          {
            ASTCHDRFormatForPixelFormat = strncmp("com.apple.image.premultipliedAlpha", v28, v34);
            if ((_DWORD)ASTCHDRFormatForPixelFormat)
            {
              ASTCHDRFormatForPixelFormat = strncmp("com.apple.image.colorGamut", v28, v34);
              if ((_DWORD)ASTCHDRFormatForPixelFormat)
              {
                ASTCHDRFormatForPixelFormat = strncmp("com.apple.image.colorTransfer", v28, v34);
                if (!(_DWORD)ASTCHDRFormatForPixelFormat)
                {
                  v36 = v35 - 1;
                  __s1 = (char *)&v28[v34];
                  if (v28[v34 - 1 + v35])
                    v36 = v35;
                  v93 = v36;
                }
              }
              else
              {
                v94 = &v28[v34];
                if (v28[v34 - 1 + v35])
                  v20 = v35;
                else
                  v20 = v35 - 1;
              }
              goto LABEL_46;
            }
            if (v35 == 4)
            {
              v90 = *(_DWORD *)&v28[v34] != 0;
              goto LABEL_46;
            }
            v37 = *re::pipelineLogObjects((re *)ASTCHDRFormatForPixelFormat);
            ASTCHDRFormatForPixelFormat = os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
            if (!(_DWORD)ASTCHDRFormatForPixelFormat)
              goto LABEL_46;
LABEL_44:
            *(_DWORD *)buf = 134218498;
            *(_QWORD *)&buf[4] = v35;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = 4;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = v28;
            v31 = v37;
            v32 = "Unexpected size (%lu != %lu) for key %s";
            v33 = 32;
LABEL_45:
            _os_log_impl(&dword_224FE9000, v31, OS_LOG_TYPE_DEFAULT, v32, buf, v33);
            goto LABEL_46;
          }
        }
        if (v35 == 4)
        {
          v95 = *(_DWORD *)&v28[v34];
        }
        else
        {
          v37 = *re::pipelineLogObjects((re *)ASTCHDRFormatForPixelFormat);
          ASTCHDRFormatForPixelFormat = os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)ASTCHDRFormatForPixelFormat)
            goto LABEL_44;
        }
      }
    }
    else
    {
      v21 += 4;
    }
LABEL_46:
    if ((unint64_t)v102.n128_u32[3] - v21 <= 4)
      goto LABEL_56;
  }
  v68 = *re::pipelineLogObjects((re *)ASTCHDRFormatForPixelFormat);
  ASTCHDRFormatForPixelFormat = os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT);
  v19 = v95;
  if ((_DWORD)ASTCHDRFormatForPixelFormat)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_224FE9000, v68, OS_LOG_TYPE_DEFAULT, "Failed to parse KTX metadata: Key value pair overflowed available data", buf, 2u);
  }
LABEL_57:
  v96 = v101.n128_u32[1];
  if (v101.n128_u32[1])
    v38 = v101.n128_u32[2] == 0;
  else
    v38 = 1;
  v39 = !v38;
  if (v39 != 1 || v101.n128_u32[3] == 0)
  {
    if (v102.n128_u32[0])
      v41 = v39;
    else
      v41 = 0;
    if ((v41 & 1) != 0)
    {
      v87 = 3;
      v42 = 1;
      goto LABEL_81;
    }
    if ((v39 & (v102.n128_u32[1] == 6)) != 0)
      v43 = 5;
    else
      v43 = 2;
    if (v39)
      v44 = v43;
    else
      v44 = 0;
    v87 = v44;
    if (v101.n128_u32[1])
    {
      v42 = 0;
      goto LABEL_81;
    }
    re::DynamicString::format((re::DynamicString *)"Bad dimensions in KTX: (%u, %u, %u)", (re::DynamicString *)buf, 0, v101.n128_u32[2], v101.n128_u32[3]);
LABEL_14:
    v6 = *(__n128 *)buf;
    v7 = *(_QWORD *)&buf[16];
    v8 = *(_QWORD *)&buf[24];
    goto LABEL_15;
  }
  v42 = 0;
  v87 = 7;
LABEL_81:
  v98 = v19;
  v45 = 0xFFFFFFFFFFFFDF10;
  v92 = v101.n128_u32[3];
  v91 = v101.n128_u32[2];
  v84 = v42;
  while (1)
  {
    {
        break;
    }
    v45 += 68;
    if (!v45)
    {
      v47 = v16;
      v48 = 0;
      v85 = 1;
      goto LABEL_87;
    }
  }
  v47 = v16;
  v48 = *((unsigned int *)v46 + 2108);
  v51 = v101.n128_u32[0];
  v85 = v101.n128_u32[0] == 6408;
  v52 = *((_DWORD *)v46 + 2114);
  if (v100.n128_u32[1] != v52)
  {
    log = *re::pipelineLogObjects((re *)ASTCHDRFormatForPixelFormat);
    ASTCHDRFormatForPixelFormat = os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT);
    v51 = v101.n128_u32[0];
    if ((_DWORD)ASTCHDRFormatForPixelFormat)
    {
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)&buf[4] = v100.n128_u32[0];
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v100.n128_u32[2];
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&buf[16] = v100.n128_u32[3];
      *(_WORD *)&buf[20] = 1024;
      *(_DWORD *)&buf[22] = v52;
      *(_WORD *)&buf[26] = 1024;
      *(_DWORD *)&buf[28] = v100.n128_u32[1];
      _os_log_impl(&dword_224FE9000, log, OS_LOG_TYPE_DEFAULT, "KTX with type 0x%x, format 0x%x, internal format 0x%x has unexpected type size (expected: %u, actual: %u)", buf, 0x20u);
      v51 = v101.n128_u32[0];
    }
  }
  if (v90 && v51 != 6408)
  {
    v53 = *re::pipelineLogObjects((re *)ASTCHDRFormatForPixelFormat);
    ASTCHDRFormatForPixelFormat = os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)ASTCHDRFormatForPixelFormat)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v53, OS_LOG_TYPE_DEFAULT, "Metadata mismatch: Pre-multiplied alpha specified when format has no alpha channel", buf, 2u);
    }
    v90 = 0;
    v85 = 0;
  }
LABEL_87:
  if (!v98)
  {
LABEL_105:
    v98 = v48;
    if ((v48 - 204) <= 0xE && (_DWORD)v48 != 209)
    {
      v50 = v47;
      if (a5)
      {
        if (a5 == 1)
        {
          v49 = 0;
          v98 = v48;
        }
        else
        {
          v49 = 0;
        }
      }
      else
      {
        v97 = 0;
        *(_DWORD *)buf = v87;
        *(_QWORD *)&buf[8] = &v97;
        *(_QWORD *)&buf[16] = &v98;
        v49 = 1;
        LODWORD(v48) = v98;
      }
      goto LABEL_112;
    }
    v50 = v47;
    v55 = v93;
    v56 = v94;
    if ((_DWORD)v48)
    {
      v49 = 0;
      goto LABEL_113;
    }
    re::DynamicString::format((re::DynamicString *)"Unsupported KTX pixel format: type 0x%x, type size %u, format 0x%x, internal format 0x%x", (re::DynamicString *)buf, v100.n128_u32[0], v100.n128_u32[1], v100.n128_u32[2], v100.n128_u32[3]);
    goto LABEL_14;
  }
  if (v98 == (_DWORD)v48)
  {
    v49 = 0;
    goto LABEL_94;
  }
  if ((v48 - 204) > 0xE
    || (_DWORD)v48 == 209
        v98 != (_DWORD)ASTCHDRFormatForPixelFormat))
  {
    v54 = *re::pipelineLogObjects((re *)ASTCHDRFormatForPixelFormat);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v98;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v48;
      _os_log_impl(&dword_224FE9000, v54, OS_LOG_TYPE_DEFAULT, "Metadata mismatch: Pixel format mismatch metadata (%u) != inferred (%u), using inferred format", buf, 0xEu);
    }
    goto LABEL_105;
  }
  v49 = 0;
  LODWORD(v48) = v98;
LABEL_94:
  v50 = v47;
LABEL_112:
  v55 = v93;
  v56 = v94;
LABEL_113:
  isHDR = re::isHDR(v48);
  {
    if (!v55)
    {
      v58 = (_anonymous_namespace_ *)strncmp(v56, "BT709", v20);
      v64 = v92;
      v65 = v91;
      {
        v66 = (uint64_t *)MEMORY[0x24BDBF270];
        if (!isHDR)
          v66 = (uint64_t *)MEMORY[0x24BDBF318];
      }
      else
      {
        v66 = (uint64_t *)MEMORY[0x24BDBF2D8];
      }
      v59 = *v66;
      goto LABEL_179;
    }
    v58 = (_anonymous_namespace_ *)strncmp(__s1, "linear", v55);
    {
      v72 = (uint64_t *)MEMORY[0x24BDBF270];
      if (!isHDR)
        v72 = (uint64_t *)MEMORY[0x24BDBF308];
      v59 = *v72;
      goto LABEL_178;
    }
    v58 = (_anonymous_namespace_ *)strncmp(__s1, "sRGB", v55);
    v60 = v96;
    {
      v58 = (_anonymous_namespace_ *)strncmp(__s1, "ITU", v55);
      if ((_DWORD)v58)
        goto LABEL_183;
      v62 = (uint64_t *)MEMORY[0x24BDBF2D8];
LABEL_158:
      v63 = *v62;
      if (v61)
        v59 = 0;
      else
        v59 = v63;
      goto LABEL_200;
    }
    v69 = (uint64_t *)MEMORY[0x24BDBF278];
    v70 = (uint64_t *)MEMORY[0x24BDBF318];
LABEL_197:
    if (!isHDR)
      v69 = v70;
    goto LABEL_199;
  }
  v58 = (_anonymous_namespace_ *)strncmp(v56, "DisplayP3", v20);
  {
    v60 = v96;
    if (v55)
    {
      v58 = (_anonymous_namespace_ *)strncmp(__s1, "linear", v55);
      {
        v69 = (uint64_t *)MEMORY[0x24BDBF258];
        v70 = (uint64_t *)MEMORY[0x24BDBF2F0];
        goto LABEL_197;
      }
      v58 = (_anonymous_namespace_ *)strncmp(__s1, "sRGB", v55);
      {
        v58 = (_anonymous_namespace_ *)strncmp(__s1, "PQ", v55);
        {
          v69 = (uint64_t *)MEMORY[0x24BDBF238];
          goto LABEL_199;
        }
        v58 = (_anonymous_namespace_ *)strncmp(__s1, "HLG", v55);
        if ((_DWORD)v58)
          goto LABEL_183;
        v62 = (uint64_t *)MEMORY[0x24BDBF230];
        goto LABEL_158;
      }
      v69 = (uint64_t *)MEMORY[0x24BDBF240];
    }
    else
    {
      v69 = (uint64_t *)MEMORY[0x24BDBF258];
    }
    v70 = (uint64_t *)MEMORY[0x24BDBF228];
    goto LABEL_197;
  }
  v58 = (_anonymous_namespace_ *)strncmp(v56, "DCIP3", v20);
  {
    v67 = (uint64_t *)MEMORY[0x24BDBF220];
    goto LABEL_175;
  }
  v58 = (_anonymous_namespace_ *)strncmp(v56, "BT2020", v20);
    || (v58 = (_anonymous_namespace_ *)strncmp(v56, "BT2100", v20), !(_DWORD)v58)
  {
    v60 = v96;
    if (v55)
    {
      v58 = (_anonymous_namespace_ *)strncmp(__s1, "ITU", v55);
      {
        v58 = (_anonymous_namespace_ *)strncmp(__s1, "linear", v55);
        {
          v58 = (_anonymous_namespace_ *)strncmp(__s1, "PQ", v55);
          {
            v69 = (uint64_t *)MEMORY[0x24BDBF2D0];
            goto LABEL_199;
          }
          v58 = (_anonymous_namespace_ *)strncmp(__s1, "HLG", v55);
          if ((_DWORD)v58)
            goto LABEL_183;
          v62 = (uint64_t *)MEMORY[0x24BDBF2C8];
          goto LABEL_158;
        }
        v69 = (uint64_t *)MEMORY[0x24BDBF268];
        v70 = (uint64_t *)MEMORY[0x24BDBF300];
        goto LABEL_197;
      }
      v69 = (uint64_t *)MEMORY[0x24BDBF250];
    }
    else
    {
      v69 = (uint64_t *)MEMORY[0x24BDBF268];
    }
    v70 = (uint64_t *)MEMORY[0x24BDBF2B8];
    goto LABEL_197;
  }
  v58 = (_anonymous_namespace_ *)strncmp(v56, "Adobe-RGB-1998", v20);
  {
    v67 = (uint64_t *)MEMORY[0x24BDBF218];
    goto LABEL_175;
  }
  v58 = (_anonymous_namespace_ *)strncmp(v56, "CIE-1931-XYZ", v20);
  {
    v67 = (uint64_t *)MEMORY[0x24BDBF2B0];
LABEL_175:
    v71 = *v67;
    if (v55)
      v59 = 0;
    else
      v59 = v71;
LABEL_178:
    v64 = v92;
    v65 = v91;
LABEL_179:
    v60 = v96;
    goto LABEL_201;
  }
  v58 = (_anonymous_namespace_ *)strncmp(v56, "ACEScg", v20);
  {
    v59 = 0;
    goto LABEL_178;
  }
  v60 = v96;
  if (v55)
  {
    v58 = (_anonymous_namespace_ *)strncmp(__s1, "linear", v55);
    {
LABEL_183:
      v59 = 0;
      goto LABEL_200;
    }
  }
  v69 = (uint64_t *)MEMORY[0x24BDBF210];
LABEL_199:
  v59 = *v69;
LABEL_200:
  v64 = v92;
  v65 = v91;
LABEL_201:
  v73 = v102.n128_u32[2];
  if (!v102.n128_u32[2])
  {
    v13 = "Unsupported number of mipmaps (0) in KTX";
    goto LABEL_13;
  }
  if (v60 <= v65)
    v74 = v65;
  else
    v74 = v60;
  if (v74 <= v64)
    v74 = v64;
  v75 = log2((double)v74);
  if (v73 > v75 + 1)
  {
    re::DynamicString::format((re::DynamicString *)"Bad MipmapLevelCount (%u) in KTX header - dimensions (%u, %u, %u) can only support a max of %u levels", (re::DynamicString *)buf, v73, v60, v65, v64, v75 + 1);
    goto LABEL_14;
  }
  v76 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  objc_msgSend(v76, sel_setTextureType_, v87);
  if (v60 <= 1)
    v77 = 1;
  else
    v77 = v60;
  objc_msgSend(v76, sel_setWidth_, v77);
  if (v65 <= 1)
    v78 = 1;
  else
    v78 = v65;
  objc_msgSend(v76, sel_setHeight_, v78);
  if (v64 <= 1)
    v79 = 1;
  else
    v79 = v64;
  objc_msgSend(v76, sel_setDepth_, v79);
  if (v84)
    objc_msgSend(v76, sel_setArrayLength_, v102.n128_u32[0]);
  objc_msgSend(v76, sel_setMipmapLevelCount_, v73);
  objc_msgSend(v76, sel_setPixelFormat_, v98);
  objc_msgSend(v76, sel_setResourceOptions_, 32);
  v80 = v76;
  v81 = v100;
  *(__n128 *)(v5 + 8) = v99;
  *(__n128 *)(v5 + 24) = v81;
  v82 = v102;
  *(__n128 *)(v5 + 40) = v101;
  *(_BYTE *)v5 = 1;
  *(__n128 *)(v5 + 56) = v82;
  *(_QWORD *)(v5 + 72) = v80;
  *(_QWORD *)(v5 + 80) = v50;
  *(_QWORD *)(v5 + 88) = v88;
  *(_QWORD *)(v5 + 96) = v89;
  *(_BYTE *)(v5 + 104) = v85;
  *(_BYTE *)(v5 + 105) = v90;
  *(_BYTE *)(v5 + 106) = v49;
  *(_QWORD *)(v5 + 112) = v59;
  if (v76)

}

uint64_t re::`anonymous namespace'::updateTextureDescriptorAndOptions(re *a1, __CFString *a2, id *a3, unsigned __int8 *a4, uint8_t *this, unsigned int *a6)
{
  NSObject *v12;
  __int128 v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  int v18;
  re *ComponentCount;
  NSObject *v20;
  uint64_t v21;
  CGColorSpace *isHDR;
  int DestinationTransferFunctionFromOptions;
  const __CFString *v24;
  const __CFString *v25;
  const __CFString *v26;
  const __CFString *v27;
  __CFString *v28;
  int v29;
  int v30;
  int v31;
  id v32;
  unsigned int v33;
  uint8_t buf[16];
  __int128 v36;
  _BYTE v37[28];
  id v38;
  __int128 v39;

  *a6 = 0;
  if (*(_DWORD *)this == 1)
  {
    v12 = *re::pipelineLogObjects(a1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v12, OS_LOG_TYPE_DEFAULT, "Ignoring explicit pixel format option for KTX", buf, 2u);
    }
    *(_DWORD *)this = 0;
  }
  re::internal::applySemanticToOptions((re::internal *)this, (uint64_t)buf);
  v13 = v36;
  *(_OWORD *)this = *(_OWORD *)buf;
  *((_OWORD *)this + 1) = v13;
  *((_OWORD *)this + 2) = *(_OWORD *)v37;
  *(_OWORD *)(this + 44) = *(_OWORD *)&v37[12];
  if (buf != this)
  {
    v14 = v38;
    v38 = 0;
    v15 = (void *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v14;

  }
  *(_OWORD *)(this + 72) = v39;

  v17 = *((id *)this + 8);
  if (a2 && !*((_QWORD *)this + 8))
    re::TextureFromImageOptions::setColorSpace((re::TextureFromImageOptions *)this, a2);
  if (*((_DWORD *)this + 19))
    objc_msgSend(*a3, sel_setHeight_);
  if (*((_DWORD *)this + 18))
    objc_msgSend(*a3, sel_setWidth_);
  if (*((_DWORD *)this + 20))
    objc_msgSend(*a3, sel_setDepth_);
  if (*((_DWORD *)this + 21))
    objc_msgSend(*a3, sel_setMipmapLevelCount_);
  v18 = *((_DWORD *)this + 1);
  if (v18 != 1)
  {
    if (v18 == 2)
    {
      objc_msgSend(*a3, sel_pixelFormat);
      if (re::getComponentCount() == 1)
        *(_DWORD *)a4 = re::internal::broadcastRToRGB(a4);
      else
        *(_DWORD *)a4 = 84148994;
      goto LABEL_29;
    }
    if (v18 != 3)
      goto LABEL_29;
    re::internal::assertLog((re::internal *)4, v16, "assertion failure: '%s' (%s:line %i) Semantics should have been applied at this point", "!\"Unreachable code\"", "updateTextureDescriptorAndOptions", 901);
    _os_crash();
    __break(1u);
  }
  objc_msgSend(*a3, sel_pixelFormat);
  ComponentCount = (re *)re::getComponentCount();
  if (ComponentCount != (re *)1)
  {
    v20 = *re::pipelineLogObjects(ComponentCount);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v20, OS_LOG_TYPE_ERROR, "TextureChannelsMode::kSingleChannel is not supported for ktx images with multiple channels", buf, 2u);
    }
    v21 = 0;
    goto LABEL_65;
  }
LABEL_29:
  isHDR = (CGColorSpace *)re::isHDR((int)objc_msgSend(*a3, sel_pixelFormat));
  DestinationTransferFunctionFromOptions = re::internal::getDestinationTransferFunctionFromOptions((re::internal *)this, 0, isHDR);
  if (!DestinationTransferFunctionFromOptions)
  {
    if ((dyld_program_sdk_at_least() & 1) != 0)
    {
      objc_msgSend(*a3, sel_pixelFormat);
      v36 = 0u;
      memset(v37, 0, 24);
      *(_OWORD *)buf = 0u;
      MTLPixelFormatGetInfoForDevice();
      if ((*(_WORD *)&buf[8] & 0x800) != 0)
        DestinationTransferFunctionFromOptions = 2;
      else
        DestinationTransferFunctionFromOptions = 1;
    }
    else if ((*((_DWORD *)this + 14) - 3) >= 2)
    {
      DestinationTransferFunctionFromOptions = 1;
    }
    else
    {
      DestinationTransferFunctionFromOptions = 2;
    }
  }
  v24 = (const __CFString *)*((id *)this + 8);
  if (v24)
  {
    v26 = v24;
    if ((DestinationTransferFunctionFromOptions == 2) != re::colorSpaceNameHasSRGBTransfer(v24, v25))
    {
      v28 = (__CFString *)(DestinationTransferFunctionFromOptions == 2
                         ? re::getLinearColorSpaceNameFromSRGB(v26, v27)
                         : re::getSRGBColorSpaceNameFromLinear(v26, v27));
      if (v28)
        re::TextureFromImageOptions::setColorSpace((re::TextureFromImageOptions *)this, v28);
    }
  }
  objc_msgSend(*a3, sel_pixelFormat);
  v36 = 0u;
  memset(v37, 0, 24);
  *(_OWORD *)buf = 0u;
  MTLPixelFormatGetInfoForDevice();
  if ((*(_WORD *)&buf[8] & 0x800) == 0 || DestinationTransferFunctionFromOptions == 2)
  {
    if ((*(_WORD *)&buf[8] & 0x800) != 0 || DestinationTransferFunctionFromOptions != 2)
      goto LABEL_53;
    v29 = re::translateLinearPixelFormatToSRGB((uint64_t)objc_msgSend(*a3, sel_pixelFormat));
  }
  else
  {
    v29 = re::translateSRGBPixelFormatToLinear((uint64_t)objc_msgSend(*a3, sel_pixelFormat));
  }
  v30 = v29;
  if (v29 != objc_msgSend(*a3, sel_pixelFormat) && v30)
  {
    objc_msgSend(*a3, sel_setPixelFormat_, v30);
    objc_msgSend(*a3, sel_pixelFormat);
    v36 = 0u;
    memset(v37, 0, 24);
    *(_OWORD *)buf = 0u;
    MTLPixelFormatGetInfoForDevice();
  }
LABEL_53:
  if (*(_QWORD *)a1)
  {
    v31 = objc_msgSend(*(id *)a1, "supportsTextureSwizzle");
    v32 = *a3;
    if (!v31)
    {
      objc_msgSend(v32, sel_pixelFormat);
      v36 = 0u;
      memset(v37, 0, 24);
      *(_OWORD *)buf = 0u;
      MTLPixelFormatGetInfoForDevice();
      if ((*(_WORD *)&buf[8] & 0x800) != 0 && *(_DWORD *)a4 != 84148994)
        objc_msgSend(*a3, sel_setUsage_, (unint64_t)objc_msgSend(*a3, sel_usage) | 0x10);
      goto LABEL_60;
    }
  }
  else
  {
    v32 = *a3;
  }
  objc_msgSend(v32, sel_setSwizzle_, *(unsigned int *)a4);
LABEL_60:
  objc_msgSend(*a3, sel_pixelFormat);
  if (re::internal::textureMightNeedPixelFormatViewUsage())
    objc_msgSend(*a3, sel_setUsage_, (unint64_t)objc_msgSend(*a3, sel_usage) | 0x10);
  v33 = objc_msgSend(*a3, sel_pixelFormat);
  v21 = 1;
  if (re::internal::applyCompressionOptionsToTextureDescriptor((id *)a1, this, 0, 1, a3)
    && re::isASTCPixelFormat((int)objc_msgSend(*a3, sel_pixelFormat)))
  {
    *a6 = v33;
  }
LABEL_65:

  return v21;
}

re *re::`anonymous namespace'::createImageSourceAndUpdatedOptionsFromDescriptor(uint64_t a1, uint64_t a2, id *a3, uint64_t a4, uint64_t a5)
{
  const __CFData *v8;
  const __CFDictionary *v9;
  re *v10;
  NSObject *v11;
  uint64_t v13;
  uint64_t v14;
  uint8_t buf[16];
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytesNoCopy:length:freeWhenDone:", a1, a2, 0);
  v8 = (const __CFData *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*a3, sel_pixelFormat);
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  *(_OWORD *)buf = 0u;
  MTLPixelFormatGetInfoForDevice();
  if ((unint64_t)objc_msgSend(*a3, sel_mipmapLevelCount) <= 1)
    *(_DWORD *)(a5 + 20) = 2;
  v13 = *MEMORY[0x24BDD97D0];
  v14 = MEMORY[0x24BDBD1C0];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1);
  v9 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  v10 = CGImageSourceCreateWithData(v8, v9);
  v11 = *re::pipelineLogObjects(v10);
  if (v10)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = a4;
      _os_log_debug_impl(&dword_224FE9000, v11, OS_LOG_TYPE_DEBUG, "Creating texture '%s' from KTX data using Image I/O fallback for non-native pixel format", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = a4;
    _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Failed to create image source for texture '%s'", buf, 0xCu);
  }

  return v10;
}

uint64_t re::TextureData::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>(a1 + 8, a2 + 8);
  if (a1 != a2)
  {
    v4 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a2 + 96) = 0;
    v5 = *(void **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v4;

  }
  return a1;
}

id re::`anonymous namespace'::createDownsampledDescriptor(_QWORD *a1, id *a2, id *a3, uint64_t a4, unint64_t *a5)
{
  int v9;
  unint64_t v10;
  unint64_t v11;
  NSObject *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  id v20;
  id v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  NSObject *v26;
  unint64_t v27;
  int v28;
  id v29;
  id v30;
  unint64_t v31;
  re *v32;
  NSObject *v33;
  NSObject *v34;
  id v35;
  unint64_t v36;
  id v37;
  _OWORD v39[6];
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a4 + 8) == 1)
    v9 = *(_DWORD *)(a4 + 16);
  else
    v9 = 1;
  v10 = re::internal::downsampleFactorToFitDeviceLimits(a3, (int)objc_msgSend(*a2, sel_textureType), (unint64_t)objc_msgSend(*a2, sel_width), (unint64_t)objc_msgSend(*a2, sel_height), (unint64_t)objc_msgSend(*a2, sel_depth));
  if (v10 <= v9)
  {
    v11 = v9;
  }
  else
  {
    v11 = v10;
    v12 = *re::pipelineLogObjects((re *)v10);
    v10 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v10)
    {
      v13 = __clz(v11);
      v14 = (0x80000000 >> v13) - 1;
      v15 = 32 - v13;
      v16 = 31 - v13;
      if (!(_DWORD)v11)
      {
        v14 = 0;
        v16 = 0;
      }
      if ((v14 & v11) != 0)
        v17 = v15;
      else
        v17 = v16;
      v18 = *a2;
      v19 = v12;
      v20 = objc_msgSend(v18, sel_width);
      v21 = objc_msgSend(*a2, sel_height);
      LODWORD(v39[0]) = 134218496;
      *(_QWORD *)((char *)v39 + 4) = v17;
      WORD6(v39[0]) = 2048;
      *(_QWORD *)((char *)v39 + 14) = v20;
      WORD3(v39[1]) = 2048;
      *((_QWORD *)&v39[1] + 1) = v21;
      _os_log_impl(&dword_224FE9000, v19, OS_LOG_TYPE_DEFAULT, "Loading mip #%zu from imported %zux%zu KTX to match device limits", (uint8_t *)v39, 0x20u);

    }
  }
  v22 = __clz(v11);
  v23 = (0x80000000 >> v22) - 1;
  v24 = 32 - v22;
  LODWORD(v25) = 31 - v22;
  if (!(_DWORD)v11)
  {
    v23 = 0;
    LODWORD(v25) = 0;
  }
  if ((v23 & v11) != 0)
    v25 = v24;
  else
    v25 = v25;
  *a5 = v25;
  if (v11 != 1 << v25)
  {
    v26 = *re::pipelineLogObjects((re *)v10);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      v27 = *a5;
      v28 = 1 << *a5;
      LODWORD(v39[0]) = 134218496;
      *(_QWORD *)((char *)v39 + 4) = v11;
      WORD6(v39[0]) = 2048;
      *(_QWORD *)((char *)v39 + 14) = v27;
      WORD3(v39[1]) = 1024;
      DWORD2(v39[1]) = v28;
      _os_log_impl(&dword_224FE9000, v26, OS_LOG_TYPE_DEFAULT, "Passed a downsampleFactor %zu which is not a power of two; falling back to the previous mipmap %lu (with a downs"
        "ampling factor of %i).",
        (uint8_t *)v39,
        0x1Cu);
    }
  }
  v29 = *a2;
  v30 = objc_msgSend(*a2, sel_copy);
  *a1 = v30;
  v31 = *a5;
  v32 = (re *)objc_msgSend(v29, sel_mipmapLevelCount);
  if (v31 >= (unint64_t)v32)
  {
    v33 = *re::pipelineLogObjects(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      v34 = v33;
      v35 = objc_msgSend(v29, sel_mipmapLevelCount);
      v36 = *a5;
      LODWORD(v39[0]) = 134218240;
      *(_QWORD *)((char *)v39 + 4) = v35;
      WORD6(v39[0]) = 2048;
      *(_QWORD *)((char *)v39 + 14) = v36;
      _os_log_impl(&dword_224FE9000, v34, OS_LOG_TYPE_DEFAULT, "Downsampling a texture with %lu mipmaps by %lu", (uint8_t *)v39, 0x16u);

    }
    *a5 = (unint64_t)objc_msgSend(v29, sel_mipmapLevelCount) - 1;
  }
  v40 = 0;
  memset(v39, 0, sizeof(v39));
  v37 = *a3;
  objc_msgSend(v29, sel_pixelFormat);
  objc_msgSend(v29, sel_width);
  objc_msgSend(v29, sel_height);
  objc_msgSend(v29, sel_depth);
  objc_msgSend(v29, sel_sampleCount);
  MTLGetTextureLevelInfoForDevice();

  objc_msgSend(v30, sel_setWidth_, *(_QWORD *)&v39[0]);
  objc_msgSend(v30, sel_setHeight_, *((_QWORD *)&v39[0] + 1));
  objc_msgSend(v30, sel_setDepth_, *(_QWORD *)&v39[1]);
  return objc_msgSend(v30, sel_setMipmapLevelCount_, (char *)objc_msgSend(v29, sel_mipmapLevelCount) - *a5);
}

uint64_t re::processKtxMips(id *a1, re *a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, id *a7, unint64_t a8, id *a9, char a10, uint64_t a11, uint64_t a12)
{
  unsigned int v17;
  unsigned int v18;
  id v19;
  id v20;
  id v21;
  int v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  id v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  re *v40;
  uint64_t v41;
  size_t v42;
  unint64_t v43;
  size_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unint64_t v50;
  NSObject *v51;
  unsigned int v52;
  NSObject *v53;
  size_t v54;
  id v55;
  id v56;
  void *v57;
  uint64_t v58;
  id v59;
  void *v60;
  NSObject *v61;
  const char *v62;
  NSObject *v63;
  NSObject *v64;
  uint32_t v65;
  re *v66;
  uint64_t result;
  NSObject *v68;
  id v69;
  void *v70;
  id v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  re *v78;
  unsigned int v79;
  uint64_t v80;
  void *context;
  uint64_t v82;
  unsigned int v85;
  uint64_t v86;
  _OWORD v88[5];
  __int128 v89;
  unint64_t v90;
  unsigned int __dst;
  _BYTE v92[12];
  _QWORD v93[3];
  int v94;
  uint64_t v95;
  char v96;
  uint64_t v97[3];
  unsigned int v98;
  id v99;
  unsigned int v100;
  id v101;
  char v102;
  _QWORD v103[3];
  int v104;
  uint64_t v105;
  id v106;
  uint8_t buf[16];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  id v113;
  uint64_t v114;

  v114 = *MEMORY[0x24BDAC8D0];
  context = (void *)MEMORY[0x227694090]();
  v17 = a6[10];
  v85 = a6[9];
  v18 = a6[11];
  v19 = objc_msgSend(*a7, sel_width);
  v20 = objc_msgSend(*a7, sel_height);
  v21 = objc_msgSend(*a7, sel_depth);
  v78 = a2;
  *(_QWORD *)v92 = a2;
  v22 = 1;
  *(_DWORD *)&v92[8] = 1;
  v95 = 0;
  memset(v93, 0, sizeof(v93));
  v94 = 0;
  v96 = 0;
  v97[0] = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  memset(v103, 0, sizeof(v103));
  v104 = 0;
  v106 = 0;
  v105 = 0;
  v76 = a3;
  v77 = a4;
  if (!re::TextureBuilderKTX::init((uint64_t)v92, a9, *(_BYTE *)(a3 + 52), a4))
    goto LABEL_85;
  if (v19 <= v20)
    v23 = (unint64_t)v20;
  else
    v23 = (unint64_t)v19;
  if (v23 <= (unint64_t)v21)
    v23 = (unint64_t)v21;
  v24 = __clz(v23);
  v25 = 64 - v24;
  v26 = 63 - v24;
  v27 = v24 == 64;
  if (v24 == 64)
    v28 = 0;
  else
    v28 = ~(-1 << (63 - v24));
  if (v27)
    v26 = 0;
  if ((v28 & v23) != 0)
    v29 = v25;
  else
    v29 = v26;
  LODWORD(v30) = v85;
  if (v85 <= v17)
    LODWORD(v30) = v17;
  if (v30 <= v18)
    v30 = v18;
  else
    v30 = v30;
  v31 = 32 - __clz(v30);
  v32 = v31 - 1;
  v33 = ~(-1 << (v31 - 1));
  if (!(_DWORD)v30)
  {
    v33 = 0;
    v32 = 0;
  }
  if ((v33 & v30) != 0)
    v34 = v31;
  else
    v34 = v32;
  v35 = (uint64_t *)a1;
  v36 = *a1;
  v37 = a5;
  v82 = *(_QWORD *)(a5 + 80);
  v86 = *(_QWORD *)(a5 + 88);
  v38 = objc_msgSend(*a7, sel_textureType);
  objc_msgSend(*a7, sel_pixelFormat);
  v39 = objc_msgSend(*a7, sel_arrayLength);
  v40 = (re *)objc_msgSend(*a7, sel_sampleCount);
  if (v38 == 5)
  {
    v41 = 6;
  }
  else if (v38 == 3)
  {
    v41 = v39;
  }
  else
  {
    v41 = 1;
  }
  v80 = v41;
  if (!*(_DWORD *)(a5 + 56))
  {
LABEL_59:
    if (a11)
    {
      v58 = *(_QWORD *)(a11 + 24);
      if (!v58)
      {
        v73 = std::__throw_bad_function_call[abi:nn180100]();
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v58 + 48))(v58);
    }
    re::TextureBuilderKTX::finish((uint64_t)buf, (uint64_t)v92, *v35, *a9);
    *(_BYTE *)a12 = buf[0];
    std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>(a12 + 8, (uint64_t)&buf[8]);
    if (buf != (uint8_t *)a12)
    {
      v59 = v113;
      v113 = 0;
      v60 = *(void **)(a12 + 96);
      *(_QWORD *)(a12 + 96) = v59;

    }
    if (DWORD2(v112) != -1)
      ((void (*)(_OWORD *, uint8_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_1
                                                 + DWORD2(v112)))(v88, &buf[8]);
    v22 = 0;
    goto LABEL_84;
  }
  v42 = 0;
  v43 = 0;
  v74 = v29 - v34;
  v75 = v36;
  while (1)
  {
    __dst = 0;
    if (!v82
      || (v86 - v42 >= 4 ? (v44 = 4) : (v44 = v86 - v42),
          v40 = (re *)memcpy(&__dst, (const void *)(v82 + v42), v44),
          v86 - v42 <= 3))
    {
      v61 = *re::pipelineLogObjects(v40);
      if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        goto LABEL_83;
      *(_WORD *)buf = 0;
      v62 = "Unexpected end of file when reading image size from KTX";
LABEL_81:
      v64 = v61;
      v65 = 2;
      goto LABEL_82;
    }
      goto LABEL_83;
    v90 = 0;
    v89 = 0u;
    memset(v88, 0, sizeof(v88));
    re::ktxMipInfo((id *)v35, (uint64_t)v88);
    v46 = v89;
    if (DWORD1(v89))
    {
      v61 = *re::pipelineLogObjects(v40);
      if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        goto LABEL_83;
      *(_WORD *)buf = 0;
      v62 = "Overflow when computing row block bytes during KTX load";
      goto LABEL_81;
    }
    v47 = DWORD2(v89);
    if (HIDWORD(*((_QWORD *)&v89 + 1)))
    {
      v61 = *re::pipelineLogObjects(v40);
      if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        goto LABEL_83;
      *(_WORD *)buf = 0;
      v62 = "Overflow when computing image block bytes during KTX load";
      goto LABEL_81;
    }
    v48 = v90;
    if (HIDWORD(v90))
    {
      v61 = *re::pipelineLogObjects(v40);
      if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        goto LABEL_83;
      *(_WORD *)buf = 0;
      v62 = "Overflow when computing image block bytes during KTX load";
      goto LABEL_81;
    }
    v49 = __dst;
    if (*(_DWORD *)(v37 + 52) != 6 || *(_DWORD *)(v37 + 48))
    {
      v50 = v90;
    }
    else
    {
      if (*((_QWORD *)&v89 + 1) == ((__dst + 3) & 0x1FFFFFFFCLL))
      {
        v50 = v90;
      }
      else
      {
        v51 = *re::pipelineLogObjects(v40);
        v40 = (re *)os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v40)
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = v47;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v49;
          _os_log_impl(&dword_224FE9000, v51, OS_LOG_TYPE_DEFAULT, "KTX image size field for non-array cubemap is unexpected (expected: %u, got: %u)", buf, 0xEu);
        }
        v47 = (v49 + 3) & 0xFFFFFFFC;
        v50 = v90;
      }
      v49 *= 6;
    }
    v52 = v50 * v80;
    if ((v50 * v80) >> 32)
    {
      v61 = *re::pipelineLogObjects(v40);
      if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        goto LABEL_83;
      *(_WORD *)buf = 0;
      v62 = "Overflow when computing image size during KTX load";
      goto LABEL_81;
    }
    if (v49 < v52)
      break;
    v79 = v46;
    if (v49 > v52)
    {
      v53 = *re::pipelineLogObjects(v40);
      v40 = (re *)os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v40)
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v52;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v49;
        _os_log_impl(&dword_224FE9000, v53, OS_LOG_TYPE_DEFAULT, "KTX image size field is larger than expected given pixel format and dimensions (expected: %u, got: %u)", buf, 0xEu);
      }
    }
    v54 = v44 + v42;
    if (v86 - (v44 + v42) < v49)
    {
      v61 = *re::pipelineLogObjects(v40);
      if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        goto LABEL_83;
      *(_WORD *)buf = 0;
      v62 = "Unexpected end of file when reading image from KTX";
      goto LABEL_81;
    }
    if (v43 >= a8)
    {
      v113 = 0;
      v111 = 0u;
      v112 = 0u;
      v109 = 0u;
      v110 = 0u;
      *(_OWORD *)buf = 0u;
      v108 = 0u;
      v55 = *a9;
      v56 = v36;
      objc_msgSend(v55, sel_pixelFormat);
      objc_msgSend(*a9, sel_sampleCount);
      MTLGetTextureLevelInfoForDevice();

      v57 = v56;
      v36 = v75;
      v40 = (re *)re::TextureBuilderKTX::setMip((uint64_t)v92, v57, v43 - a8, v82 + v54, v49, v79, v47, v48, (uint64_t *)buf, v74);
      if ((v40 & 1) == 0)
        goto LABEL_83;
    }
    v42 = v54 + v49;
    ++v43;
    v37 = a5;
    v35 = (uint64_t *)a1;
    if (v43 >= *(unsigned int *)(a5 + 56))
      goto LABEL_59;
  }
  v63 = *re::pipelineLogObjects(v40);
  if (!os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    goto LABEL_83;
  *(_DWORD *)buf = 67109376;
  *(_DWORD *)&buf[4] = v52;
  *(_WORD *)&buf[8] = 1024;
  *(_DWORD *)&buf[10] = v49;
  v62 = "KTX image size field is too small for given pixel format and dimensions (expected: %u, got: %u)";
  v64 = v63;
  v65 = 14;
LABEL_82:
  _os_log_error_impl(&dword_224FE9000, v64, OS_LOG_TYPE_ERROR, v62, buf, v65);
LABEL_83:
  v22 = 1;
LABEL_84:

LABEL_85:
  re::DynamicArray<re::TextureBuilderKTX::CopyFromBufferToTextureInfo>::deinit((uint64_t)v103);

  if (v100 != -1)
    ((void (*)(uint8_t *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_1
                                                + v100))(buf, v97);
  v100 = -1;
  re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)v93);
  objc_autoreleasePoolPop(context);
  if (v22)
    return 0;
  if (!a10)
    return 1;
  v68 = *re::pipelineLogObjects(v66);
  if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v92 = 136315138;
    *(_QWORD *)&v92[4] = v77;
    _os_log_impl(&dword_224FE9000, v68, OS_LOG_TYPE_DEFAULT, "ASTC compressed textures are not supported by this device, decompressing '%s'.", v92, 0xCu);
  }
  re::decompressCPUTexture((re *)a12, (uint64_t)v92);
  *(_BYTE *)a12 = v92[0];
  std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>(a12 + 8, (uint64_t)&v92[8]);
  if (v92 != (_BYTE *)a12)
  {
    v69 = v99;
    v99 = 0;
    v70 = *(void **)(a12 + 96);
    *(_QWORD *)(a12 + 96) = v69;

  }
  if (v98 != -1)
    ((void (*)(uint8_t *, _BYTE *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_1
                                              + v98))(buf, &v92[8]);
  result = re::TextureData::isValid((re::TextureData *)a12);
  if ((_DWORD)result)
  {
    if (!*(_QWORD *)v78)
      return 1;
    re::loadCPUTextureInMetal(v78, (const re::ImportGraphicsContext *)a12, (const re::TextureData *)*(unsigned __int8 *)(v76 + 52), (uint64_t)v92);
    *(_BYTE *)a12 = v92[0];
    std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>(a12 + 8, (uint64_t)&v92[8]);
    if (v92 != (_BYTE *)a12)
    {
      v71 = v99;
      v99 = 0;
      v72 = *(void **)(a12 + 96);
      *(_QWORD *)(a12 + 96) = v71;

    }
    if (v98 != -1)
      ((void (*)(uint8_t *, _BYTE *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_1
                                                + v98))(buf, &v92[8]);
    result = re::TextureData::isValid((re::TextureData *)a12);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t re::Result<re::`anonymous namespace'::KTXData,re::DynamicString>::~Result(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _OWORD *v4;

  if (*(_BYTE *)a1)
  {
    v2 = *(void **)(a1 + 72);
    if (v2)
    {

      *(_QWORD *)(a1 + 72) = 0;
    }
  }
  else
  {
    v4 = (_OWORD *)(a1 + 8);
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      if ((*(_BYTE *)(a1 + 16) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 24));
      *v4 = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
    }
  }
  return a1;
}

uint64_t re::createTextureDescriptorForKTXData@<X0>(id *a1@<X0>, __n128 *a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _BYTE *a8@<X7>, id *a9@<X8>, unsigned __int8 a10)
{
  re *v18;
  __int128 v19;
  __int128 v20;
  id v21;
  CGImageSource *v22;
  NSObject *v23;
  _BYTE *v25;
  unint64_t v26;
  id v27;
  unsigned int v28;
  id v29;
  int v30;
  uint8_t buf[16];
  __int128 v32;
  _OWORD v33[2];
  id v34;
  __int128 v35;
  _BYTE v36[17];
  _BYTE v37[27];
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  id v41;
  char v42;
  int v43[2];
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v30 = a4;
  if (v36[0])
  {
    if (a7)
    {
      *(_QWORD *)&v19 = v38;
      *((_QWORD *)&v19 + 1) = v39;
      *(_OWORD *)a7 = v19;
      *(_QWORD *)(a7 + 16) = v40;
      *a8 = v42;
    }
    v29 = v41;
    v20 = *(_OWORD *)(a6 + 16);
    *(_OWORD *)buf = *(_OWORD *)a6;
    v32 = v20;
    v33[0] = *(_OWORD *)(a6 + 32);
    *(_OWORD *)((char *)v33 + 12) = *(_OWORD *)(a6 + 44);
    v34 = *(id *)(a6 + 64);
    v35 = *(_OWORD *)(a6 + 72);
    {
      if (re::useImageIOForTextureImport(a1, &v29, a6))
      {
        v21 = v29;
        v27 = v21;
        if (v21)

        if (v22)
        {
          re::createTextureDescriptorForCGImageSource(v22, a1, &v29, buf, 0, 0, 0, a9);
          CFRelease(v22);
        }
        else
        {
          *a9 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
        }
      }
      else
      {
        v26 = 0;
      }
    }
    else
    {
      *a9 = 0;
    }

    if (v29)
  }
  else
  {
    v23 = *re::pipelineLogObjects(v18);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      if ((v36[16] & 1) != 0)
        v25 = *(_BYTE **)&v37[7];
      else
        v25 = v37;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v25;
      _os_log_error_impl(&dword_224FE9000, v23, OS_LOG_TYPE_ERROR, "Failed to create texture from KTX: %s", buf, 0xCu);
    }
    *a9 = 0;
  }
}

uint64_t re::loadDescriptor@<X0>(__n128 *a1@<X0>, unint64_t a2@<X1>, id *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  re *v6;
  id v7;
  id v8;
  NSObject *v9;
  _BYTE *v11;
  _BYTE v12[24];
  uint64_t v13;
  _BYTE v14[8];
  _BYTE v15[9];
  _BYTE v16[55];
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (v14[0])
  {
    v7 = v17;
    objc_msgSend(v7, sel_pixelFormat);
    objc_msgSend(v7, sel_textureType);
    if ((re::isSupportedPixelFormat() & 1) == 0)
      objc_msgSend(v7, sel_setPixelFormat_, 70);
    v8 = v7;
    *(_BYTE *)a5 = 1;
    *(_QWORD *)(a5 + 8) = v8;
    if (v7)

  }
  else
  {
    v9 = *re::pipelineLogObjects(v6);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if ((v15[8] & 1) != 0)
        v11 = *(_BYTE **)&v16[7];
      else
        v11 = v16;
      *(_DWORD *)v12 = 136315138;
      *(_QWORD *)&v12[4] = v11;
      _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Failed to parse KTX: %s", v12, 0xCu);
    }
    re::DynamicString::DynamicString((re::DynamicString *)v12, (const re::DynamicString *)v15);
    *(_BYTE *)a5 = 0;
    *(_QWORD *)(a5 + 8) = *(_QWORD *)v12;
    *(_QWORD *)(a5 + 32) = v13;
    *(_OWORD *)(a5 + 16) = *(_OWORD *)&v12[8];
  }
}

uint64_t re::readMetadataFromKTXData@<X0>(__n128 *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _anonymous_namespace_ *a5@<X4>, _anonymous_namespace_ *a6@<X5>, uint64_t a7@<X8>)
{
  re *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  size_t v18;
  size_t v20;
  char *v21;
  const char *v22;
  re *v23;
  size_t v24;
  double v25;
  size_t v26;
  const char *v27;
  _anonymous_namespace_ *v28;
  __n128 v29;
  NSObject *v30;
  NSObject *v32;
  _BOOL8 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int __dst;
  id v42;
  _BYTE buf[24];
  uint64_t v44;
  _BYTE v45[8];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v42 = 0;
  if (v45[0])
  {
    v11 = v47;
    *(_OWORD *)a4 = v46;
    *(_OWORD *)(a4 + 16) = v11;
    v12 = v49;
    *(_OWORD *)(a4 + 32) = v48;
    *(_OWORD *)(a4 + 48) = v12;
    v13 = *(unsigned int *)(a4 + 60);
    if (!(_DWORD)v13)
    {
      *(_BYTE *)a7 = 1;
      *(_DWORD *)(a7 + 8) = 0;
    }
    if (v13 < 5)
    {
LABEL_26:
      *(_BYTE *)a7 = 1;
      *(_DWORD *)(a7 + 8) = v13;
    }
    v14 = 0;
    v15 = v50;
    while (1)
    {
      __dst = 0;
      v16 = v13 - v14;
      if (v15)
      {
        v17 = v16 >= 4 ? 4 : v13 - v14;
        memcpy(&__dst, (const void *)(v15 + v14), v17);
        v14 += v17;
        v18 = __dst;
        v16 = v13 - v14;
        if (__dst >= 1 && v16 >= __dst)
        {
          v20 = (__dst + 3) & 0xFFFFFFFC;
          v21 = (char *)(*(uint64_t (**)(uint64_t, size_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, v20, 0);
          v22 = v21;
          if (v16 < v20)
            v20 = v13 - v14;
          memcpy(v21, (const void *)(v15 + v14), v20);
          v23 = (re *)strnlen(v22, v18);
          if (v23 == (re *)v18)
          {
            v32 = *re::pipelineLogObjects(v23);
            v33 = os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
            if (v33)
            {
              if ((BYTE8(v46) & 1) != 0)
                v38 = (char *)v47;
              else
                v38 = (char *)&v46 + 9;
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v38;
              _os_log_error_impl(&dword_224FE9000, v32, OS_LOG_TYPE_ERROR, "Failed to parse KTX: %s", buf, 0xCu);
            }
            v34 = *(_OWORD *)buf;
            v35 = *(_QWORD *)&buf[16];
            v36 = v44;
            *(_BYTE *)a7 = 0;
            *(_OWORD *)(a7 + 8) = v34;
            *(_QWORD *)(a7 + 24) = v35;
            *(_QWORD *)(a7 + 32) = v36;
          }
          v24 = (size_t)v23;
          v25 = re::DynamicArray<re::DynamicString>::add(a5, buf);
          if (*(_QWORD *)buf && (buf[8] & 1) != 0)
            (*(void (**)(double))(**(_QWORD **)buf + 40))(v25);
          v26 = v18 - (v24 + 1);
          v27 = &v22[v24 + 1];
          v28 = (_anonymous_namespace_ *)strnlen(v27, v26);
          v29.n128_f64[0] = re::DynamicArray<re::DynamicString>::add(a6, buf);
          if (*(_QWORD *)buf && (buf[8] & 1) != 0)
            (*(void (**)(double))(**(_QWORD **)buf + 40))(v29.n128_f64[0]);
          v14 += v20;
          (*(void (**)(uint64_t, const char *, __n128))(*(_QWORD *)a3 + 40))(a3, v22, v29);
          v16 = v13 - v14;
        }
      }
      if (v16 <= 4)
      {
        LODWORD(v13) = *(_DWORD *)(a4 + 60);
        goto LABEL_26;
      }
    }
  }
  v30 = *re::pipelineLogObjects(v10);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
  {
    if ((BYTE8(v46) & 1) != 0)
      v37 = (char *)v47;
    else
      v37 = (char *)&v46 + 9;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v37;
    _os_log_error_impl(&dword_224FE9000, v30, OS_LOG_TYPE_ERROR, "Failed to parse KTX: %s", buf, 0xCu);
  }
  re::DynamicString::DynamicString((re::DynamicString *)buf, (const re::DynamicString *)&v46);
  *(_BYTE *)a7 = 0;
  *(_QWORD *)(a7 + 8) = *(_QWORD *)buf;
  *(_QWORD *)(a7 + 32) = v44;
  *(_OWORD *)(a7 + 16) = *(_OWORD *)&buf[8];
}

void re::makeLoadedTextureView(id *a1@<X0>, _WORD *a2@<X1>, id *a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t v14[16];

  v5 = (unsigned __int16)*a2;
  if (*a2)
  {
    v6 = __clz(__rbit64(v5));
    if (v6 >= 0x10)
      v7 = -1;
    else
      v7 = v6;
    if ((unint64_t)(v7 + 1) > 0xF)
    {
      v9 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 16 - v7;
      while (((v5 >> (v7 + v8 + 1)) & 1) != 0)
      {
        ++v8;
        if (v7 + v8 == 15)
          goto LABEL_15;
      }
      v9 = v8 + 1;
    }
LABEL_15:
    v11 = *a1;
    v12 = (uint64_t)objc_msgSend(*a1, sel_arrayLength);
    if ((char *)objc_msgSend(v11, sel_textureType) - 5 >= (char *)2)
      v13 = v12;
    else
      v13 = 6 * v12;
    *a3 = objc_msgSend(*a1, sel_newTextureViewWithPixelFormat_textureType_levels_slices_, objc_msgSend(*a1, sel_pixelFormat), objc_msgSend(*a1, sel_textureType), v7, v9, 0, v13);
  }
  else
  {
    v10 = *re::pipelineLogObjects((re *)a1);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v14 = 0;
      _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, "updateTextureView called with no mipsLoaded", v14, 2u);
    }
    *a3 = *a1;
    *a1 = 0;
  }
}

void re::copyTextureMips(uint64_t a1, id *a2, id *a3, unsigned __int16 *a4)
{
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  re *v31;
  uint64_t v32;
  re *v33;
  re *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  id v38;
  id v39;
  NSObject *v40;
  _WORD *v41;
  uint64_t v42;
  re *v43;
  id v44;
  uint8_t buf[16];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  id v53;
  id v54;
  id v55;
  _QWORD v56[3];
  __int128 v57;
  uint64_t v58;
  _QWORD v59[4];

  v7 = *a4;
  v8 = objc_msgSend(*a2, sel_width);
  v9 = objc_msgSend(*a2, sel_height);
  v10 = objc_msgSend(*a2, sel_depth);
  v11 = objc_msgSend(*a3, sel_width);
  v12 = objc_msgSend(*a3, sel_height);
  v13 = objc_msgSend(*a3, sel_depth);
  if (v8 <= v9)
    v14 = (unint64_t)v9;
  else
    v14 = (unint64_t)v8;
  if (v14 <= (unint64_t)v10)
    v14 = (unint64_t)v10;
  if (v11 <= v12)
    v15 = (unint64_t)v12;
  else
    v15 = (unint64_t)v11;
  if (v15 <= (unint64_t)v13)
    v15 = (unint64_t)v13;
  v16 = __clz(v14);
  v17 = 64 - v16;
  v18 = 63 - v16;
  v19 = v16 == 64;
  if (v16 == 64)
    v20 = 0;
  else
    v20 = ~(-1 << (63 - v16));
  if (v19)
    v18 = 0;
  if ((v20 & v14) != 0)
    v21 = v17;
  else
    v21 = v18;
  v22 = __clz(v15);
  v23 = 64 - v22;
  v24 = 63 - v22;
  v25 = v22 == 64;
  if (v22 == 64)
    v26 = 0;
  else
    v26 = ~(-1 << (63 - v22));
  if (v25)
    v24 = 0;
  if ((v26 & v15) != 0)
    v27 = v23;
  else
    v27 = v24;
  v28 = *a2;
  v29 = (uint64_t)objc_msgSend(*a2, sel_arrayLength);
  if ((char *)objc_msgSend(v28, sel_textureType) - 5 >= (char *)2)
    v30 = v29;
  else
    v30 = 6 * v29;
  objc_msgSend(*a2, sel_sampleCount);
  v31 = (re *)objc_msgSend(*a2, sel_mipmapLevelCount);
  v32 = v27 - v21;
  if (v27 - v21 < 0)
  {
    v40 = *re::pipelineLogObjects(v31);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v40, OS_LOG_TYPE_ERROR, "Failed copyTextureMips: unexpected mipmapOffset", buf, 2u);
    }
  }
  else
  {
    v33 = v31;
    v41 = a4;
    v44 = objc_msgSend(*a2, sel_device);
    *(_QWORD *)buf = 0x3676813F7E71551;
    *(_QWORD *)&buf[8] = "CopyKTXTextureMipsQueue";
    re::ImportGraphicsContext::getOrCreateCommandQueue(a1, (uint64_t)buf, (const char *)1, &v55);
    re::mtl::CommandQueue::makeCommandBuffer(&v55, &v54);
    re::mtl::CommandBuffer::makeBlitCommandEncoder(&v54, &v53);
    objc_msgSend(*a2, sel_pixelFormat);
    if (v33)
    {
      v34 = 0;
      v42 = v32;
      v43 = v33;
      do
      {
        v35 = (uint64_t)v34 + v32;
        v36 = 1 << (v34 + v32);
        if ((v36 & v7) == 0)
        {
          v52 = 0;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          *(_OWORD *)buf = 0u;
          v47 = 0u;
          MTLGetTextureLevelInfoForDeviceWithOptions();
          MTLGetTextureLevelInfoForDeviceWithOptions();
          if (v30)
          {
            for (i = 0; i != v30; ++i)
            {
              v38 = *a2;
              v39 = *a3;
              memset(v59, 0, 24);
              v57 = *(_OWORD *)buf;
              v58 = v47;
              memset(v56, 0, sizeof(v56));
              objc_msgSend(v53, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", v38, i, v34, v59, &v57, v39, i, v35, v56);
            }
          }
          v7 |= (unsigned __int16)v36;
          v32 = v42;
          v33 = v43;
        }
        v34 = (re *)((char *)v34 + 1);
      }
      while (v34 != v33);
    }
    objc_msgSend(v53, "endEncoding");
    objc_msgSend(v54, "commit");
    objc_msgSend(v54, "waitUntilCompleted");
    *v41 = v7;

  }
}

size_t re::makeStandardKtxMetadata(int a1, CFTypeRef cf1, int a3, uint64_t a4, _QWORD *a5)
{
  const void *v9;
  int v10;
  CFTypeRef *v11;
  CFTypeRef v12;
  char *v13;
  const char *v14;
  unsigned int v15;
  char v16;
  BOOL v17;
  int v18;
  const char *v19;
  size_t v20;
  int v21;
  unint64_t v22;
  char *v23;
  char *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  size_t v28;
  re::MemoryStreamWriter *v29;
  size_t v30;
  size_t v31;
  unint64_t v32;
  char *v33;
  size_t v34;
  size_t v35;
  size_t v36;
  size_t v37;
  int v38;
  size_t v39;
  char *v41;
  const char *v42;
  int v44;
  int v45;
  void (**v46)(re::MemoryStreamWriter *__hidden);
  char *v47;
  unint64_t v48;
  size_t v49;
  int __src;

  if (!cf1)
  {
    v13 = 0;
    v42 = 0;
    v14 = 0;
    goto LABEL_5;
  }
  v9 = (const void *)*MEMORY[0x24BDBF308];
  v10 = CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF308]);
  v11 = (CFTypeRef *)MEMORY[0x24BDBF278];
  if (v10)
  {
    v12 = (CFTypeRef)*MEMORY[0x24BDBF278];
LABEL_9:
    v19 = "sRGB";
    goto LABEL_10;
  }
  v18 = CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF270]);
  v12 = *v11;
  if (v18 || CFEqual(cf1, *v11) || CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF318]))
    goto LABEL_9;
  if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF228])
    || CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF2F0])
    || CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF240])
    || CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF258])
    || CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF238])
    || CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF230]))
  {
    v19 = "DisplayP3";
  }
  else if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF210]))
  {
    v19 = "ACEScg";
  }
  else if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF2D8]))
  {
    v19 = "BT709";
  }
  else if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF2B8])
         || CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF250])
         || CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF268]))
  {
    v19 = "BT2020";
  }
  else if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF220]))
  {
    v19 = "DCIP3";
  }
  else if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF2D0]) || CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF2C8]))
  {
    v19 = "BT2100";
  }
  else if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF218]))
  {
    v19 = "Adobe-RGB-1998";
  }
  else if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF2B0]))
  {
    v19 = "CIE-1931-XYZ";
  }
  else
  {
    v19 = 0;
  }
LABEL_10:
  if (CFEqual(cf1, v12)
    || CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF318])
    || CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF228])
    || CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF240]))
  {
    v14 = "sRGB";
  }
  else if (CFEqual(cf1, v9)
         || CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF270])
         || CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF2F0])
         || CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF258])
         || CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF210])
         || CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF268]))
  {
    v14 = "linear";
  }
  else if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF2D8])
         || CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF2B8])
         || CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF250]))
  {
    v14 = "ITU";
  }
  else if (CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF2D0]) || CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF238]))
  {
    v14 = "PQ";
  }
  else
  {
    v14 = "HLG";
    if (!CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF2C8]) && !CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBF230]))
      v14 = 0;
  }
  v17 = v19 == 0;
  if (!v19)
  {
    v13 = 0;
    if (v14)
      goto LABEL_19;
    v42 = 0;
LABEL_5:
    v41 = 0;
    v15 = 28;
    v16 = 1;
    v17 = 1;
    goto LABEL_22;
  }
  v13 = (char *)(strlen(v19) + 1);
  if (!v14)
  {
    v41 = 0;
    v42 = v19;
    v17 = 0;
    v15 = (((_DWORD)v13 + 34) & 0xFFFFFFFC) + 28;
    v16 = 1;
    goto LABEL_22;
  }
LABEL_19:
  v20 = strlen(v14);
  v16 = 0;
  v41 = (char *)(v20 + 1);
  v42 = v19;
  v21 = (((_DWORD)v13 + 34) & 0xFFFFFFFC) + 28;
  if (!v19)
    v21 = 28;
  v15 = v21 + ((v20 + 38) & 0xFFFFFFFC);
LABEL_22:
  if (a3)
    v22 = v15 + 44;
  else
    v22 = v15;
  v23 = (char *)(*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, v22, 0);
  v24 = v23;
  v46 = &off_24ED7C6A0;
  v47 = v23;
  v48 = v22;
  v45 = a1;
  __src = 24;
  if (v22 >= 4)
    v25 = 4;
  else
    v25 = v22;
  memcpy(v23, &__src, v25);
  if (v22 - v25 >= 0x14)
    v26 = 20;
  else
    v26 = v22 - v25;
  memcpy(&v24[v25], "KTXmetalPixelFormat", v26);
  v27 = v26 + v25;
  if (v22 - v27 >= 4)
    v28 = 4;
  else
    v28 = v22 - v27;
  memcpy(&v24[v27], &v45, v28);
  v30 = v28 + v27;
  v49 = v30;
  if (v17)
  {
    if ((v16 & 1) != 0)
      goto LABEL_36;
  }
  else
  {
    if ((v16 & 1) != 0)
    {
LABEL_36:
      if (!a3)
        goto LABEL_47;
      goto LABEL_37;
    }
  }
  if (!a3)
    goto LABEL_47;
LABEL_37:
  v44 = 1;
  __src = 24;
  v32 = v48;
  v31 = v49;
  v33 = v47;
  if (v48 - v49 >= 4)
    v34 = 4;
  else
    v34 = v48 - v49;
  memcpy(&v47[v49], &__src, v34);
  v35 = v34 + v31;
  if (v32 - v35 >= 0x14)
    v36 = 20;
  else
    v36 = v32 - v35;
  memcpy(&v33[v35], "KTXmetalPixelFormat", v36);
  v37 = v36 + v35;
  v38 = v36 + v34;
  if (v32 - v37 >= 4)
    v39 = 4;
  else
    v39 = v32 - v37;
  memcpy(&v33[v37], &v44, v39);
  v30 = (v30 + v38 + v39);
LABEL_47:
  *a5 = v24;
  return v30;
}

char *re::`anonymous namespace'::writeKeyValueMetadataPair(re::_anonymous_namespace_ *this, char *a2, const void *a3, char *a4, _QWORD *a5, re::MemoryStreamWriter *a6)
{
  char *v7;
  char *v9;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  int v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  size_t v24;
  int v26;
  int __src;

  v7 = a4;
  v9 = a2;
  v11 = a5[3];
  v12 = a5[1];
  if ((unint64_t)(a5[2] - v11) >= 4)
    v13 = 4;
  else
    v13 = a5[2] - v11;
  v14 = (_DWORD)a4 + (_DWORD)a2;
  __src = (_DWORD)a4 + (_DWORD)a2;
  memcpy((void *)(v12 + v11), &__src, v13);
  v15 = a5[2];
  v16 = a5[3] + v13;
  a5[3] = v16;
  v17 = (char *)(v15 - v16);
  if (v17 < v9)
    v9 = v17;
  memcpy((void *)(a5[1] + v16), this, (size_t)v9);
  v18 = a5[2];
  v19 = &v9[a5[3]];
  a5[3] = v19;
  v20 = &v9[v13];
  v21 = (char *)(v18 - (_QWORD)v19);
  if (v21 < v7)
    v7 = v21;
  memcpy(&v19[a5[1]], a3, (size_t)v7);
  v22 = &v7[a5[3]];
  a5[3] = v22;
  v23 = &v7[(_QWORD)v20];
  if ((-v14 & 3) != 0)
  {
    v26 = 0;
    if (a5[2] - (_QWORD)v22 >= (unint64_t)(-v14 & 3))
      v24 = -v14 & 3;
    else
      v24 = a5[2] - (_QWORD)v22;
    memcpy(&v22[a5[1]], &v26, v24);
    a5[3] += v24;
    v23 += v24;
  }
  return v23;
}

uint64_t re::loadCPUTextureInMetal@<X0>(re *this@<X0>, const re::ImportGraphicsContext *a2@<X1>, const re::TextureData *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v5;
  int v6;
  _QWORD v7[3];
  int v8;
  uint64_t v9;
  char v10;
  _QWORD v11[10];
  unsigned int v12;
  id v13;
  char v14;
  _QWORD v15[3];
  int v16;
  uint64_t v17;
  id v18;
  char v19;

  v5 = (uint64_t *)this;
  v6 = 1;
  v9 = 0;
  memset(v7, 0, sizeof(v7));
  v8 = 0;
  v10 = 0;
  v11[0] = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  memset(v15, 0, sizeof(v15));
  v16 = 0;
  v17 = 0;
  v18 = 0;
  re::TextureBuilderKTX::loadCPUTextureInMetal(&v5, a2, (char)a3, a4);

  re::DynamicArray<re::TextureBuilderKTX::CopyFromBufferToTextureInfo>::deinit((uint64_t)v15);
  if (v12 != -1)
    ((void (*)(char *, _QWORD *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_1
                                            + v12))(&v19, v11);
  v12 = -1;
  return re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)v7);
}

void re::TextureBuilderKTX::loadCPUTextureInMetal(uint64_t **this@<X0>, const re::TextureData *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  id *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _BOOL8 v17;
  NSObject *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  _OWORD v22[5];
  int v23[4];
  uint64_t v24;
  uint64_t v25;
  int v26;
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  unint64_t v31;
  __int16 v32;
  unint64_t v33;
  uint8_t buf[16];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)a2 + 22) != 1)
LABEL_27:
    std::__throw_bad_variant_access[abi:nn180100]();
  v7 = (id *)((char *)a2 + 8);
  v8 = (char *)a2 + 65;
  if ((*((_QWORD *)a2 + 8) & 1) != 0)
    v9 = (char *)*((_QWORD *)a2 + 9);
  else
    v9 = (char *)a2 + 65;
  if (!re::TextureBuilderKTX::init((uint64_t)this, (id *)a2 + 1, a3, (uint64_t)v9))
  {
    *(_BYTE *)a4 &= 0x80u;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 88) = 0;
    *(_QWORD *)(a4 + 96) = 0;
    return;
  }
  v21 = v8;
  if (!re::TextureData::mipmapLevelCount(a2))
  {
LABEL_16:
    re::TextureBuilderKTX::finish(a4, (uint64_t)this, **this, *v7);
    return;
  }
  v10 = 0;
  v11 = 0;
  while (1)
  {
    v24 = 0;
    *(_OWORD *)v23 = 0u;
    memset(v22, 0, sizeof(v22));
    v12 = (id)**this;
    if (*((_DWORD *)a2 + 22) >= 2u)
      goto LABEL_27;
    v13 = v12;
    objc_msgSend(*((id *)a2 + 1), sel_pixelFormat);
    if (*((_DWORD *)a2 + 22) >= 2u)
      goto LABEL_27;
    objc_msgSend(*((id *)a2 + 1), sel_width);
    if (*((_DWORD *)a2 + 22) >= 2u)
      goto LABEL_27;
    objc_msgSend(*((id *)a2 + 1), sel_height);
    if (*((_DWORD *)a2 + 22) >= 2u)
      goto LABEL_27;
    objc_msgSend(*((id *)a2 + 1), sel_depth);
    MTLGetTextureLevelInfoForDeviceWithOptions();

    v14 = *((_QWORD *)a2 + 4);
    if (v14 <= v11)
    {
      v25 = 0;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v26 = 136315906;
      v27 = "operator[]";
      v28 = 1024;
      v29 = 797;
      v30 = 2048;
      v31 = v11;
      v32 = 2048;
      v33 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_27;
    }
    v15 = *((_QWORD *)a2 + 6) + v10;
    v16 = *(_DWORD *)(v15 + 16);
    if (v16)
    {
      v17 = re::TextureBuilderKTX::setMip((uint64_t)this, (id)**this, v11, *(_QWORD *)(v15 + 32), v16, v23[0], v23[2], v16, (uint64_t *)v22, 0);
      if (!v17)
        break;
    }
    ++v11;
    v10 += 40;
    if (v11 >= (unint64_t)re::TextureData::mipmapLevelCount(a2))
      goto LABEL_16;
  }
  v18 = *re::pipelineLogObjects((re *)v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    v19 = (const char *)*((_QWORD *)a2 + 9);
    if (!v19)
      v19 = "<no label>";
    v20 = v21;
    if ((*((_QWORD *)a2 + 8) & 1) != 0)
      v20 = v19;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v20;
    _os_log_error_impl(&dword_224FE9000, v18, OS_LOG_TYPE_ERROR, "Failed to load texture mip for '%s'", buf, 0xCu);
  }
  *(_BYTE *)a4 &= 0x80u;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 88) = 0;
  *(_QWORD *)(a4 + 96) = 0;
}

uint64_t re::`anonymous namespace'::getASTCHDRFormatForPixelFormat(int a1)
{
  if ((a1 - 204) > 0x20)
    return 0;
  else
    return dword_22618E944[a1 - 204];
}

void re::`anonymous namespace'::iterateKtxMips<re::`anonymous namespace'::parseKTX(re::mtl::Device const&,void const*,unsigned long,re::KTXHDRHint)::$_0>(re *a1, uint64_t a2, uint64_t a3, id *a4, int a5, __n128 a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  size_t v14;
  unint64_t v15;
  size_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  NSObject *v22;
  unsigned int v23;
  NSObject *v24;
  size_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  size_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  int64_t v34;
  int *v35;
  NSObject *v36;
  const char *v37;
  uint8_t *v38;
  NSObject *v39;
  NSObject *v40;
  uint32_t v41;
  __n128 v42;
  re *v43;
  uint64_t v45;
  _OWORD v49[5];
  __int128 v50;
  unint64_t v51;
  unsigned int __dst;
  uint8_t buf[4];
  unsigned int v54;
  __int16 v55;
  unsigned int v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v9 = 6;
  v10 = a8;
  if (a5 != 3)
    v10 = 1;
  if (a5 != 5)
    v9 = v10;
  v45 = v9;
  if (!*((_DWORD *)a1 + 14))
    return;
  v11 = a3;
  v12 = a2;
  v13 = a1;
  v14 = 0;
  v15 = 0;
  a6.n128_u64[0] = 67109376;
  v42 = a6;
  v43 = a1;
  while (1)
  {
    __dst = 0;
    if (!v12
      || (v11 - v14 >= 4 ? (v16 = 4) : (v16 = v11 - v14),
          a1 = (re *)memcpy(&__dst, (const void *)(v12 + v14), v16),
          v11 - v14 <= 3))
    {
      v36 = *re::pipelineLogObjects(a1);
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        return;
      LOWORD(v49[0]) = 0;
      v37 = "Unexpected end of file when reading image size from KTX";
      v38 = (uint8_t *)v49;
      goto LABEL_61;
    }
      return;
    v51 = 0;
    v50 = 0u;
    memset(v49, 0, sizeof(v49));
    re::ktxMipInfo(a4, (uint64_t)v49);
    if (DWORD1(v50))
    {
      v36 = *re::pipelineLogObjects(a1);
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        return;
      *(_WORD *)buf = 0;
      v37 = "Overflow when computing row block bytes during KTX load";
      goto LABEL_60;
    }
    v18 = DWORD2(v50);
    if (HIDWORD(*((_QWORD *)&v50 + 1)))
    {
      v36 = *re::pipelineLogObjects(a1);
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        return;
      *(_WORD *)buf = 0;
      v37 = "Overflow when computing image block bytes during KTX load";
      goto LABEL_60;
    }
    v19 = v51;
    if (HIDWORD(v51))
    {
      v36 = *re::pipelineLogObjects(a1);
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        return;
      *(_WORD *)buf = 0;
      v37 = "Overflow when computing image block bytes during KTX load";
      goto LABEL_60;
    }
    v20 = __dst;
    if (*((_DWORD *)v13 + 13) != 6 || *((_DWORD *)v13 + 12))
    {
      v21 = v51;
    }
    else
    {
      if (*((_QWORD *)&v50 + 1) == ((__dst + 3) & 0x1FFFFFFFCLL))
      {
        v21 = v51;
      }
      else
      {
        v22 = *re::pipelineLogObjects(a1);
        a1 = (re *)os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)a1)
        {
          *(_DWORD *)buf = v42.n128_u32[0];
          v54 = v18;
          v55 = 1024;
          v56 = v20;
          _os_log_impl(&dword_224FE9000, v22, OS_LOG_TYPE_DEFAULT, "KTX image size field for non-array cubemap is unexpected (expected: %u, got: %u)", buf, 0xEu);
        }
        v18 = (v20 + 3) & 0xFFFFFFFC;
        v21 = v51;
      }
      v20 *= 6;
    }
    v23 = v21 * v45;
    if ((v21 * v45) >> 32)
    {
      v36 = *re::pipelineLogObjects(a1);
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        return;
      *(_WORD *)buf = 0;
      v37 = "Overflow when computing image size during KTX load";
      goto LABEL_60;
    }
    if (v20 < v23)
      break;
    if (v20 > v23)
    {
      v24 = *re::pipelineLogObjects(a1);
      a1 = (re *)os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)a1)
      {
        *(_DWORD *)buf = v42.n128_u32[0];
        v54 = v23;
        v55 = 1024;
        v56 = v20;
        _os_log_impl(&dword_224FE9000, v24, OS_LOG_TYPE_DEFAULT, "KTX image size field is larger than expected given pixel format and dimensions (expected: %u, got: %u)", buf, 0xEu);
      }
    }
    v25 = v16 + v14;
    if (v11 - (v16 + v14) < v20)
    {
      v36 = *re::pipelineLogObjects(a1);
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        return;
      *(_WORD *)buf = 0;
      v37 = "Unexpected end of file when reading image from KTX";
LABEL_60:
      v38 = buf;
LABEL_61:
      v40 = v36;
      v41 = 2;
      goto LABEL_62;
    }
    if (*(_DWORD *)a9 == 7)
      v26 = v19;
    else
      v26 = v20;
    if (v26 >= v18)
    {
      v27 = 0;
      v28 = 0;
      v29 = a2 + v25;
      v30 = v26 / v18;
      v31 = v18;
      v32 = v30 <= 1 ? 1 : v26 / v18;
      while (1)
      {
        objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytesNoCopy:length:freeWhenDone:", v29, v31, 0, *(_OWORD *)&v42);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v34 = +[RETextureLoaderASTCHelper isASTCHDRData:textureType:error:](RETextureLoaderASTCHelper, "isASTCHDRData:textureType:error:", v33, 2, 0);
        if (v34 == -1)
          break;
        if (v34 == 1)
        {
          **(_BYTE **)(a9 + 8) = 1;
          v35 = *(int **)(a9 + 16);
          break;
        }

        v27 = ++v28 >= v30;
        v29 += v31;
        if (v32 == v28)
          goto LABEL_44;
      }

      if (!v27)
        return;
    }
LABEL_44:
    v14 = v25 + v20;
    ++v15;
    v13 = v43;
    v11 = a3;
    v12 = a2;
    if (v15 >= *((unsigned int *)v43 + 14))
      return;
  }
  v39 = *re::pipelineLogObjects(a1);
  if (!os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    return;
  *(_DWORD *)buf = v42.n128_u32[0];
  v54 = v23;
  v55 = 1024;
  v56 = v20;
  v37 = "KTX image size field is too small for given pixel format and dimensions (expected: %u, got: %u)";
  v38 = buf;
  v40 = v39;
  v41 = 14;
LABEL_62:
  _os_log_error_impl(&dword_224FE9000, v40, OS_LOG_TYPE_ERROR, v37, v38, v41);
}

BOOL re::`anonymous namespace'::checkAlignment(re::_anonymous_namespace_ *this, unsigned int *a2)
{
  uint64_t v2;
  unint64_t v3;
  NSObject *v5;
  _BOOL8 v6;
  NSObject *v7;
  _BOOL8 result;
  uint8_t v9[16];
  uint8_t buf[16];

  v2 = *(unsigned int *)this;
  v3 = (v2 + 3) & 0x1FFFFFFFCLL;
  if (v3 == v2)
    return 1;
  v5 = *re::pipelineLogObjects(this);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "KTX image size field was not a multiple of 4, which should not be possible", buf, 2u);
  }
  *(_DWORD *)this = v3;
  if (!HIDWORD(v3))
    return 1;
  v7 = *re::pipelineLogObjects((re *)v6);
  result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_WORD *)v9 = 0;
    _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "Overflow when computing aligned image size during KTX load", v9, 2u);
    return 0;
  }
  return result;
}

uint64_t re::TextureBuilderKTX::init(uint64_t a1, id *a2, char a3, uint64_t a4)
{
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  _QWORD v16[7];
  char v17;

  *(_DWORD *)(a1 + 8) = re::internal::getFaceOrArrayLength(a2);
  if (**(_QWORD **)a1)
  {
    *(_BYTE *)(a1 + 160) = objc_msgSend(*a2, sel_storageMode) == (id)2;
    v16[0] = MEMORY[0x24BDAC760];
    v16[1] = 3221225472;
    v16[2] = ___ZN2re17TextureBuilderKTX4initERKN2NS9SharedPtrIN3MTL17TextureDescriptorEEEbPKc_block_invoke;
    v16[3] = &__block_descriptor_57_e5_B8__0l;
    v17 = a3;
    v16[4] = a1;
    v16[5] = a2;
    v16[6] = a4;
    v8 = _Block_copy(v16);
    v9 = v8;
    if (!*(_BYTE *)(a1 + 160))
    {
      v14 = (*((uint64_t (**)(void *))v8 + 2))(v8);

      return v14;
    }
    v10 = objc_msgSend(*a2, sel_mipmapLevelCount);
    if (*(_QWORD *)(a1 + 176) < (unint64_t)v10)
      re::DynamicArray<re::TextureBuilderKTX::CopyFromBufferToTextureInfo>::setCapacity((_QWORD *)(a1 + 168), (unint64_t)v10);
    v11 = _Block_copy(v9);
    v12 = *(void **)(a1 + 208);
    *(_QWORD *)(a1 + 208) = v11;

  }
  else
  {
    v13 = objc_msgSend(*a2, sel_mipmapLevelCount);
    if (*(_QWORD *)(a1 + 24) < (unint64_t)v13)
      re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((_QWORD *)(a1 + 16), (unint64_t)v13);
  }
  return 1;
}

void re::TextureBuilderKTX::finish(uint64_t a1, uint64_t a2, uint64_t a3, id a4)
{
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _anonymous_namespace_ *v19;
  void **v20;
  int v21;
  NSObject *v22;
  void *v23;
  char *v24;
  uint64_t v25;
  void *context;
  __int128 v27;
  _QWORD v28[3];
  id v29;
  void *v30;
  void *v31;
  __int128 buf;
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    *(_QWORD *)&buf = a4;
    v19 = (_anonymous_namespace_ *)re::DynamicArray<re::DynamicArray<unsigned char>>::DynamicArray((uint64_t)&buf + 8, (uint64_t *)(a2 + 16));
    memset(v34, 0, sizeof(v34));
    re::DynamicString::setCapacity(v34, 0);
    *(_BYTE *)a1 &= 0x80u;
    std::__variant_detail::__alt<1ul,re::CPUTexture>::__alt[abi:nn180100]<re::CPUTexture const&>((_QWORD *)(a1 + 8), (uint64_t)&buf);
    *(_DWORD *)(a1 + 88) = 1;
    *(_QWORD *)(a1 + 96) = 0;
    re::CPUTexture::~CPUTexture((re::CPUTexture *)&buf);
    return;
  }
  if (!*(_BYTE *)(a2 + 160))
    goto LABEL_26;
  if (((*(uint64_t (**)(void))(*(_QWORD *)(a2 + 208) + 16))() & 1) == 0)
  {
    *(_BYTE *)a1 &= 0x80u;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    return;
  }
  v30 = 0;
  v31 = 0;
  v6 = *(_QWORD *)a2;
  v7 = (void *)MEMORY[0x227694090]();
  re::ImportGraphicsContext::getOrCreateCommandQueue(v6, (uint64_t)&re::internal::KTXTextureUploadQueueName(void)::queueName, (const char *)1, (id *)&buf);
  v8 = (void *)buf;
  *(_QWORD *)&buf = 0;
  v29 = v8;

  re::mtl::CommandQueue::makeCommandBuffer(&v29, &buf);
  v9 = (void *)buf;
  *(_QWORD *)&buf = 0;
  v30 = v9;

  objc_autoreleasePoolPop(v7);
  if (*(_QWORD *)(a2 + 184))
  {
    v25 = a1;
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(a2 + 200);
      context = (void *)MEMORY[0x227694090]();
      if (*(_DWORD *)(a2 + 8))
      {
        v13 = 0;
        v14 = v12 + 56 * v11;
        do
        {
          v15 = *(unsigned int *)(v14 + 36);
          *(_QWORD *)&buf = (v15 * v13);
          *((_QWORD *)&buf + 1) = *(unsigned int *)(v14 + 32);
          v33 = v15;
          if (!v10)
          {
            re::mtl::CommandBuffer::makeBlitCommandEncoder(&v30, &v27);
            v10 = (void *)v27;
            *(_QWORD *)&v27 = 0;
            v31 = v10;

          }
          if (*(_DWORD *)(a2 + 144))
            std::__throw_bad_variant_access[abi:nn180100]();
          v16 = *(_QWORD *)(a2 + 64);
          v17 = *(_QWORD *)(v14 + 48) + v11;
          v27 = 0uLL;
          v28[0] = 0;
          re::mtl::BlitCommandEncoder::copyFromBufferToTexture(&v31, (void **)v14, (uint64_t *)&buf, (__int128 *)(v14 + 8), v16, v13++, v17, &v27);
        }
        while (v13 < *(unsigned int *)(a2 + 8));
      }
      objc_autoreleasePoolPop(context);
      ++v11;
    }
    while (v11 < *(_QWORD *)(a2 + 184));
    LOBYTE(v27) = 1;
    a1 = v25;
    if (v10)
    {
      v18 = (void *)MEMORY[0x227694090]();
      objc_msgSend(v31, "endEncoding");
      re::ObjCObject::operator=(&v31, 0);
      objc_msgSend(v30, "commit");
      objc_msgSend(v30, "waitUntilCompleted");
      re::internal::getCommandBufferError(&v30, (uint64_t)&buf);
      re::Result<re::Unit,re::DynamicString>::operator=((uint64_t)&v27, (uint64_t)&buf);
      if (!(_BYTE)buf && *((_QWORD *)&buf + 1) && (v33 & 1) != 0)
        (*(void (**)(void))(**((_QWORD **)&buf + 1) + 40))();
      objc_autoreleasePoolPop(v18);
    }
  }
  else
  {
    LOBYTE(v27) = 1;
  }
  v20 = re::ObjCObject::operator=(&v30, 0);
  v21 = v27;
  if (!(_BYTE)v27)
  {
    v22 = *re::pipelineLogObjects((re *)v20);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      if ((v28[0] & 1) != 0)
        v24 = (char *)v28[1];
      else
        v24 = (char *)v28 + 1;
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v24;
    }
    *(_BYTE *)a1 &= 0x80u;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    if (!(_BYTE)v27 && *((_QWORD *)&v27 + 1) && (v28[0] & 1) != 0)
      (*(void (**)(void))(**((_QWORD **)&v27 + 1) + 40))();
  }
  if (v31)
  {
    objc_msgSend(v31, "endEncoding");
    v23 = v31;
  }
  else
  {
    v23 = 0;
  }

  if (v21)
  {
LABEL_26:
    *(_BYTE *)a1 = *(_BYTE *)(a2 + 56);
    *(_BYTE *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 88) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>(a1 + 8, a2 + 64);
    *(_QWORD *)(a1 + 96) = *(id *)(a2 + 152);
  }
}

id re::TextureData::setLabel(re::TextureData *this, const char *a2)
{
  int v2;
  const char *v3;
  re::CPUTexture *v5;

  v2 = *((_DWORD *)this + 22);
  if (v2 == 1)
  {
    v5 = (re::TextureData *)((char *)this + 8);
    return (id)re::CPUTexture::setLabel(v5, a2);
  }
  if (v2)
  {
    v5 = (re::CPUTexture *)std::__throw_bad_variant_access[abi:nn180100]();
    return (id)re::CPUTexture::setLabel(v5, a2);
  }
  if (a2)
    v3 = a2;
  else
    v3 = "";
  return objc_msgSend(*((id *)this + 1), sel_setLabel_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, v3, 4));
}

uint64_t re::CPUTexture::setLabel(re::CPUTexture *this, const char *a2)
{
  uint64_t result;
  uint64_t v5;
  char v6;

  re::DynamicString::operator=((re::CPUTexture *)((char *)this + 48), (re::DynamicString *)&v5);
  result = v5;
  if (v5)
  {
    if ((v6 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v5 + 40))();
  }
  return result;
}

_QWORD *re::DynamicArray<re::TextureBuilderKTX::CopyFromBufferToTextureInfo>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::TextureBuilderKTX::CopyFromBufferToTextureInfo>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          v2 = 56 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_18;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 56 * v9;
        v11 = v7;
        do
        {
          *v11 = *(_QWORD *)v8;
          *(_QWORD *)v8 = 0;
          v12 = *(_OWORD *)(v8 + 8);
          v13 = *(_OWORD *)(v8 + 24);
          *(_OWORD *)(v11 + 5) = *(_OWORD *)(v8 + 40);
          *(_OWORD *)(v11 + 3) = v13;
          *(_OWORD *)(v11 + 1) = v12;
          if (*(_QWORD *)v8)
          {

            *(_QWORD *)v8 = 0;
          }
          v8 += 56;
          v11 += 7;
          v10 -= 56;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

BOOL re::TextureBuilderKTX::setMip(uint64_t a1, id a2, int a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, int a8, uint64_t *a9, uint64_t a10)
{
  uint64_t v12;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _anonymous_namespace_ *v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  id v37;
  NSObject *v38;
  _BOOL8 result;
  uint64_t v40;
  _QWORD v43[2];
  _QWORD v44[6];
  int v45;
  const char *v46;
  __int16 v47;
  int v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  unint64_t v52;
  uint8_t buf[16];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v12 = (a10 + a3);
  if (!a2)
  {
    v29 = (v12 + 1);
    if (*(_QWORD *)(a1 + 32) < v29)
      re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::resize((_QWORD *)(a1 + 16), v29);
    v43[0] = a4;
    v43[1] = a5;
    re::DynamicArray<unsigned char>::DynamicArray((uint64_t)v44, (uint64_t)v43);
    v30 = *(_QWORD *)(a1 + 32);
    if (v30 > v12)
    {
      re::DynamicArray<re::internal::DeferredUnregister *>::operator=(*(_QWORD *)(a1 + 48) + 40 * v12, (uint64_t)v44);
      if (v44[0] && v44[4])
        (*(void (**)(void))(*(_QWORD *)v44[0] + 40))();
      return 1;
    }
    v44[5] = 0;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v45 = 136315906;
    v46 = "operator[]";
    v47 = 1024;
    v48 = 789;
    v49 = 2048;
    v50 = v12;
    v51 = 2048;
    v52 = v30;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_34;
  }
  if (!*(_BYTE *)(a1 + 160))
  {
    if (!*(_DWORD *)(a1 + 8))
      return 1;
    v31 = 0;
    v32 = 0;
    v34 = *a9;
    v33 = a9[1];
    v36 = a9[2];
    while (!*(_DWORD *)(a1 + 144))
    {
      v37 = *(id *)(a1 + 64);
      memset(buf, 0, sizeof(buf));
      *(_QWORD *)&v54 = 0;
      *((_QWORD *)&v54 + 1) = v34;
      *(_QWORD *)&v55 = v33;
      *((_QWORD *)&v55 + 1) = v36;
      objc_msgSend(v37, sel_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_, buf, v12, v32, a4 + v31, a6, a7);
      if (v37)

      ++v32;
      v31 += a7;
      if (v32 >= *(unsigned int *)(a1 + 8))
        return 1;
    }
LABEL_34:
    std::__throw_bad_variant_access[abi:nn180100]();
  }
  v15 = objc_msgSend(a2, sel_newBufferWithBytes_length_options_, a4, a5, 0);
  if (v15)
  {
    v16 = v15;
    objc_msgSend(v15, sel_setLabel_, CFSTR("createTextureWithKTXData staging buffer"));
    v17 = *a9;
    v18 = a9[1];
    v19 = a9[2];
    v20 = v16;
    v21 = *(_QWORD *)(a1 + 176);
    v22 = *(_QWORD *)(a1 + 184);
    if (v22 >= v21)
    {
      v23 = v22 + 1;
      if (v21 < v22 + 1)
      {
        v24 = (_anonymous_namespace_ *)(a1 + 168);
        if (*(_QWORD *)(a1 + 168))
        {
          v25 = 2 * v21;
          v26 = v21 == 0;
          v27 = 8;
          if (!v26)
            v27 = v25;
          if (v27 <= v23)
            v28 = v23;
          else
            v28 = v27;
          re::DynamicArray<re::TextureBuilderKTX::CopyFromBufferToTextureInfo>::setCapacity(v24, v28);
        }
        else
        {
          re::DynamicArray<re::TextureBuilderKTX::CopyFromBufferToTextureInfo>::setCapacity((_QWORD *)(a1 + 168), v23);
          ++*(_DWORD *)(a1 + 192);
        }
      }
      v22 = *(_QWORD *)(a1 + 184);
    }
    v40 = *(_QWORD *)(a1 + 200) + 56 * v22;
    *(_QWORD *)v40 = v20;
    *(_QWORD *)(v40 + 8) = v17;
    *(_QWORD *)(v40 + 16) = v18;
    *(_QWORD *)(v40 + 24) = v19;
    *(_DWORD *)(v40 + 32) = a6;
    *(_DWORD *)(v40 + 36) = a7;
    *(_DWORD *)(v40 + 40) = a8;
    *(_QWORD *)(v40 + 48) = a10;
    ++*(_QWORD *)(a1 + 184);
    ++*(_DWORD *)(a1 + 192);

    return 1;
  }
  v38 = *re::pipelineLogObjects(0);
  result = os_log_type_enabled(v38, OS_LOG_TYPE_FAULT);
  if (result)
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl(&dword_224FE9000, v38, OS_LOG_TYPE_FAULT, "Failed to create staging buffer for KTX data", buf, 2u);
    return 0;
  }
  return result;
}

uint64_t re::DynamicArray<re::TextureBuilderKTX::CopyFromBufferToTextureInfo>::deinit(uint64_t a1)
{
  uint64_t result;
  id *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(id **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 56 * v4;
        do
        {
          if (*v3)
          {

            *v3 = 0;
          }
          v3 += 7;
          v5 -= 56;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(id **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, id *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::internal::TextureProviderProperties::~TextureProviderProperties(re::internal::TextureProviderProperties *this)
{
  const void *v2;
  const void *v3;
  void *v4;

  v2 = *(const void **)this;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 2);
  if (v3)
    CFRelease(v3);
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {

    *((_QWORD *)this + 1) = 0;
  }
}

re::internal::TextureProviderProperties *re::internal::TextureProviderProperties::TextureProviderProperties(re::internal::TextureProviderProperties *this, const re::internal::TextureProviderProperties *a2)
{
  void *v4;
  id v5;
  const void *v6;

  v4 = (void *)*((_QWORD *)a2 + 1);
  *(_QWORD *)this = *(_QWORD *)a2;
  v5 = v4;
  v6 = (const void *)*((_QWORD *)a2 + 2);
  *((_QWORD *)this + 1) = v5;
  *((_QWORD *)this + 2) = v6;
  if (*(_QWORD *)this)
  {
    CFRetain(*(CFTypeRef *)this);
    v6 = (const void *)*((_QWORD *)this + 2);
  }
  if (v6)
    CFRetain(v6);
  return this;
}

uint64_t re::internal::TextureProviderProperties::operator=(uint64_t a1, void **a2)
{
  const void *v4;
  void *v5;
  void *v6;

  if ((void **)a1 != a2)
  {
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 8), a2 + 1);
    v4 = a2[2];
    *(_QWORD *)(a1 + 16) = v4;
    v5 = *a2;
    if (*(void **)a1 != *a2)
    {
      if (*(_QWORD *)a1)
      {
        CFRelease(*(CFTypeRef *)a1);
        v5 = *a2;
      }
      *(_QWORD *)a1 = v5;
      *a2 = 0;
      v4 = *(const void **)(a1 + 16);
    }
    v6 = a2[2];
    if (v4 != v6)
    {
      if (v4)
      {
        CFRelease(v4);
        v6 = a2[2];
      }
      *(_QWORD *)(a1 + 16) = v6;
      a2[2] = 0;
    }
  }
  return a1;
}

uint64_t re::TextureProvider::TextureProvider(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  void *v12;
  void *v14[3];

  *(_QWORD *)a1 = &off_24ED44300;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (_QWORD *)(a1 + 8);
  re::DynamicString::setCapacity(v4, 0);
  *(_QWORD *)(a1 + 40) = *(id *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 80);
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 92) = *(_OWORD *)(a2 + 92);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 112) = *(id *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = _Block_copy(*(const void **)(a2 + 136));
  *(_QWORD *)(a1 + 144) = *(id *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(id *)(a2 + 152);
  v8 = *(_WORD *)(a2 + 160);
  *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
  *(_WORD *)(a1 + 160) = v8;
  v9 = *(unsigned __int8 *)(a2 + 163);
  *(_BYTE *)(a1 + 163) = v9;
  if (v9)
    *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v11 = *(_OWORD *)(a2 + 176);
  v10 = a2 + 176;
  *(_OWORD *)(a1 + 176) = v11;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(v10 + 16);
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(v10 + 24);

  *(_QWORD *)(v10 - 136) = 0;
  v12 = *(void **)(v10 - 40);
  *(_QWORD *)(v10 - 40) = 0;

  v14[0] = 0;
  v14[1] = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  v14[2] = 0;
  re::internal::TextureProviderProperties::operator=(v10, v14);
  re::internal::TextureProviderProperties::~TextureProviderProperties((re::internal::TextureProviderProperties *)v14);
  *(_BYTE *)(v10 + 24) = 0;
  return a1;
}

re::TextureProvider *re::TextureProvider::TextureProvider(re::TextureProvider *this, const re::TextureProvider *a2)
{
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int16 v8;
  int v9;

  *(_QWORD *)this = &off_24ED44300;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  re::DynamicString::setCapacity(v4, 0);
  *((_QWORD *)this + 5) = *((id *)a2 + 5);
  v6 = *((_OWORD *)a2 + 4);
  v5 = *((_OWORD *)a2 + 5);
  v7 = *((_OWORD *)a2 + 3);
  *(_OWORD *)((char *)this + 92) = *(_OWORD *)((char *)a2 + 92);
  *((_OWORD *)this + 4) = v6;
  *((_OWORD *)this + 5) = v5;
  *((_OWORD *)this + 3) = v7;
  *((_QWORD *)this + 14) = *((id *)a2 + 14);
  *(_OWORD *)((char *)this + 120) = *(_OWORD *)((char *)a2 + 120);
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = *((id *)a2 + 18);
  *((_QWORD *)this + 19) = *((id *)a2 + 19);
  v8 = *((_WORD *)a2 + 80);
  *((_BYTE *)this + 162) = *((_BYTE *)a2 + 162);
  *((_WORD *)this + 80) = v8;
  v9 = *((unsigned __int8 *)a2 + 163);
  *((_BYTE *)this + 163) = v9;
  if (v9)
    *((_BYTE *)this + 164) = *((_BYTE *)a2 + 164);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  re::internal::TextureProviderProperties::TextureProviderProperties((re::TextureProvider *)((char *)this + 176), (const re::TextureProvider *)((char *)a2 + 176));
  *((_BYTE *)this + 200) = *((_BYTE *)a2 + 200);
  return this;
}

re::TextureProvider *re::TextureProvider::TextureProvider(re::TextureProvider *this, id *a2, int a3)
{
  _QWORD *v6;
  id v7;
  __int16 v8;
  int v9;
  void *v10;
  char v11;

  *(_QWORD *)this = &off_24ED44300;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  v6 = (_QWORD *)((char *)this + 8);
  re::DynamicString::setCapacity(v6, 0);
  v7 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = v7;
  *((_DWORD *)this + 16) = 1;
  *((_DWORD *)this + 22) = 0;
  *((_BYTE *)this + 92) = 0;
  *((_DWORD *)this + 24) = 0;
  *((_BYTE *)this + 100) = 0;
  *(_QWORD *)((char *)this + 76) = 0;
  *(_QWORD *)((char *)this + 68) = 0;
  *((_BYTE *)this + 84) = 0;
  *((_DWORD *)this + 26) = 6;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_QWORD *)this + 18) = *a2;
  *((_QWORD *)this + 19) = a2[1];
  v8 = *((_WORD *)a2 + 8);
  *((_BYTE *)this + 162) = *((_BYTE *)a2 + 18);
  *((_WORD *)this + 80) = v8;
  v9 = *((unsigned __int8 *)a2 + 19);
  *((_BYTE *)this + 163) = v9;
  if (v9)
    *((_BYTE *)this + 164) = *((_BYTE *)a2 + 20);
  *((_QWORD *)this + 21) = a2[3];
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  *((_QWORD *)this + 24) = 0;
  *((_BYTE *)this + 200) = 1;
  objc_msgSend(*((id *)this + 5), sel_setResourceOptions_, 32);
  *((_BYTE *)this + 100) = a3;
  v10 = (void *)*((_QWORD *)this + 18);
  if (v10)
  {
    if (a3)
      v11 = objc_msgSend(v10, "supportsSharedTextureHandles");
    else
      v11 = 0;
    *((_BYTE *)this + 100) = v11;
  }
  return this;
}

uint64_t re::TextureProvider::canHaveAlpha(re::TextureProvider *this, const re::TextureProvider *a2)
{
  void *v3;
  uint64_t v4;

  re::TextureProvider::lazyFetchProperties((id *)this, a2);
  CFDictionaryGetValue(*((CFDictionaryRef *)this + 22), (const void *)*MEMORY[0x24BDD9630]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "BOOLValue");

  return v4;
}

void re::TextureProvider::lazyFetchProperties(id *this, const re::TextureProvider *a2)
{
  void *v3[3];

  if (*((_BYTE *)this + 200))
  {
    re::internal::createTextureProviderProperties(this, a2, (uint64_t)v3);
    re::internal::TextureProviderProperties::operator=((uint64_t)(this + 22), v3);
    re::internal::TextureProviderProperties::~TextureProviderProperties((re::internal::TextureProviderProperties *)v3);
    *((_BYTE *)this + 200) = 0;
  }
}

void re::TextureProvider::setOptions(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v8[28];
  id v9;
  __int128 v10;

  v4 = a2[1];
  v6 = *a2;
  v7 = v4;
  *(_OWORD *)v8 = a2[2];
  *(_OWORD *)&v8[12] = *(__int128 *)((char *)a2 + 44);
  v9 = *((id *)a2 + 8);
  v10 = *(__int128 *)((char *)a2 + 72);
  v8[20] = *(_BYTE *)(a1 + 100);
  if (!re::TextureFromImageOptions::operator==(a1 + 48, (uint64_t)&v6))
  {
    v5 = v7;
    *(_OWORD *)(a1 + 48) = v6;
    *(_OWORD *)(a1 + 64) = v5;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v8;
    *(_OWORD *)(a1 + 92) = *(_OWORD *)&v8[12];
    re::ObjCObject::operator=((id *)(a1 + 112), &v9);
    *(_OWORD *)(a1 + 120) = v10;
    *(_BYTE *)(a1 + 200) = 1;
  }

}

void **re::TextureProvider::setTemplateDescriptor(uint64_t a1, void **a2)
{
  void **result;
  void *v4;

  v4 = *(void **)(a1 + 40);
  result = (void **)(a1 + 40);
  if (v4 != *a2)
  {
    NS::SharedPtr<MTL::Texture>::operator=(result, a2);
    result = (void **)objc_msgSend(*(id *)(a1 + 40), sel_setResourceOptions_, 32);
    *(_BYTE *)(a1 + 200) = 1;
  }
  return result;
}

void re::CGImageSourceTextureProvider::~CGImageSourceTextureProvider(re::CGImageSourceTextureProvider *this)
{
  const void *v2;

  *(_QWORD *)this = &off_24ED7CA68;
  v2 = (const void *)*((_QWORD *)this + 26);
  if (v2)
    CFRelease(v2);
  re::TextureProvider::~TextureProvider(this);
}

{
  re::CGImageSourceTextureProvider::~CGImageSourceTextureProvider(this);
  JUMPOUT(0x2276933B8);
}

const void *re::CGImageSourceTextureProvider::tryCreateImageSource(re::CGImageSourceTextureProvider *this, const __CFDictionary *a2)
{
  const void *result;

  result = (const void *)*((_QWORD *)this + 26);
  if (result)
  {
    CFRetain(result);
    return (const void *)*((_QWORD *)this + 26);
  }
  return result;
}

uint64_t re::CGImageSourceTextureProvider::tryCreateOrDetachImageSource(re::CGImageSourceTextureProvider *this, const __CFDictionary *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  return v2;
}

void re::CGImageTextureProvider::~CGImageTextureProvider(CGImageRef *this)
{
  *this = (CGImageRef)&off_24ED7CAD0;
  CGImageRelease(this[26]);
  re::TextureProvider::~TextureProvider((re::TextureProvider *)this);
}

{
  *this = (CGImageRef)&off_24ED7CAD0;
  CGImageRelease(this[26]);
  re::TextureProvider::~TextureProvider((re::TextureProvider *)this);
  JUMPOUT(0x2276933B8);
}

re::TextureProvider *re::CGImageArrayTextureProvider::CGImageArrayTextureProvider(re::TextureProvider *a1, id *a2, int a3, uint64_t *a4, int a5)
{
  re::TextureProvider *v8;
  uint64_t v9;
  CGImage **v10;
  uint64_t v11;
  CGImage *v12;

  v8 = re::TextureProvider::TextureProvider(a1, a2, a3);
  *(_QWORD *)v8 = &off_24ED7CB38;
  *((_DWORD *)v8 + 51) = a5;
  re::DynamicArray<char const*>::DynamicArray((uint64_t)v8 + 208, a4);
  v9 = *((_QWORD *)a1 + 28);
  if (v9)
  {
    v10 = (CGImage **)*((_QWORD *)a1 + 30);
    v11 = 8 * v9;
    do
    {
      v12 = *v10++;
      CGImageRetain(v12);
      v11 -= 8;
    }
    while (v11);
  }
  return a1;
}

void re::CGImageArrayTextureProvider::~CGImageArrayTextureProvider(re::CGImageArrayTextureProvider *this)
{
  _QWORD *v2;
  uint64_t v3;
  CGImage **v4;
  uint64_t v5;
  CGImage *v6;

  *(_QWORD *)this = &off_24ED7CB38;
  v2 = (_QWORD *)((char *)this + 208);
  v3 = *((_QWORD *)this + 28);
  if (v3)
  {
    v4 = (CGImage **)*((_QWORD *)this + 30);
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      CGImageRelease(v6);
      v5 -= 8;
    }
    while (v5);
  }
  if (*v2)
  {
    if (*((_QWORD *)this + 30))
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 40))(*v2);
    *((_QWORD *)this + 30) = 0;
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    ++*((_DWORD *)this + 58);
  }
  re::TextureProvider::~TextureProvider(this);
}

{
  re::CGImageArrayTextureProvider::~CGImageArrayTextureProvider(this);
  JUMPOUT(0x2276933B8);
}

re::TextureProvider *re::ResourceTextureProvider::ResourceTextureProvider(re::TextureProvider *a1, id *a2, int a3, const re::DynamicString *a4)
{
  re::TextureProvider *v6;
  re::DynamicString *v7;

  v6 = re::TextureProvider::TextureProvider(a1, a2, a3);
  *(_QWORD *)v6 = off_24ED44368;
  v7 = (re::TextureProvider *)((char *)v6 + 8);
  re::DynamicString::DynamicString((re::TextureProvider *)((char *)v6 + 208), a4);
  re::DynamicString::operator=(v7, a4);
  return a1;
}

re::TextureProvider *re::USKTextureProvider::USKTextureProvider(re::TextureProvider *a1, id *a2, int a3, const re::DynamicString *a4)
{
  uint64_t v8;
  char v9;

  re::DynamicString::DynamicString((re::DynamicString *)&v8, a4);
  re::ResourceTextureProvider::ResourceTextureProvider(a1, a2, a3, (const re::DynamicString *)&v8);
  if (v8 && (v9 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v8 + 40))();
  *(_QWORD *)a1 = off_24ED7CBA0;
  return a1;
}

id re::USKTextureProvider::tryCreateRawImageData(re::USKTextureProvider *this)
{
  re::usdkit::Resource *v2;
  re *v3;
  id v4;
  NSObject *v5;
  char *v7;
  id v8;
  id v9;
  uint8_t buf[4];
  char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)this + 216) & 1) != 0)
    v2 = (re::usdkit::Resource *)*((_QWORD *)this + 28);
  else
    v2 = (re::USKTextureProvider *)((char *)this + 217);
  re::usdkit::Resource::makeWithPath(v2, &v9);
  re::usdkit::Resource::makeMappedData(&v9, &v8);
  v4 = v8;
  if (v8)
  {
    CFRetain(v8);
  }
  else
  {
    v5 = *re::pipelineLogObjects(v3);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      if ((*((_BYTE *)this + 216) & 1) != 0)
        v7 = (char *)*((_QWORD *)this + 28);
      else
        v7 = (char *)this + 217;
      *(_DWORD *)buf = 136315138;
      v11 = v7;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Failed to open texture resource '%s'", buf, 0xCu);
    }
  }

  return v4;
}

CGImageSourceRef re::USKTextureProvider::tryCreateImageSource(re::USKTextureProvider *this, const __CFDictionary *a2)
{
  const __CFData *v4;
  const __CFData *const *v5;
  const __CFData *v6;
  CGImageSourceRef v7;
  re *v8;
  NSObject *v9;
  char *v11;
  CFDataRef v12;
  uint8_t buf[4];
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (const __CFData *)(*(uint64_t (**)(re::USKTextureProvider *))(*(_QWORD *)this + 40))(this);
  v12 = v4;
  if (!v4)
    return 0;
  v6 = v4;
  if (re::internal::isBasisTextureData(&v12, v5))
  {
    CFRelease(v6);
    return 0;
  }
  v7 = CGImageSourceCreateWithData(v6, a2);
  CFRelease(v6);
  if (!v7)
  {
    v9 = *re::pipelineLogObjects(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if ((*((_BYTE *)this + 216) & 1) != 0)
        v11 = (char *)*((_QWORD *)this + 28);
      else
        v11 = (char *)this + 217;
      *(_DWORD *)buf = 136315138;
      v14 = v11;
      _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Failed to create CGImageSource for texture resource '%s'", buf, 0xCu);
    }
    return 0;
  }
  return v7;
}

uint64_t re::USKTextureProvider::tryReadHeaderBytes@<X0>(re::USKTextureProvider *this@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v8 = operator new(0x28uLL);
  *v8 = &off_24ED7CD68;
  v8[1] = this;
  v8[2] = &v11;
  v8[3] = a2;
  v8[4] = a3;
  v13 = v8;
  re::runInLocalAutoreleasePool((uint64_t)v12);
  result = (*(uint64_t (**)(_QWORD *))(*v8 + 40))(v8);
  v10 = v11;
  *(_BYTE *)a4 = 1;
  *(_QWORD *)(a4 + 8) = v10;
  return result;
}

re::FileTextureProvider *re::FileTextureProvider::FileTextureProvider(re::FileTextureProvider *this, id *a2, int a3, const char *a4)
{
  uint64_t v9;
  char v10;

  re::ResourceTextureProvider::ResourceTextureProvider(this, a2, a3, (const re::DynamicString *)&v9);
  if (v9 && (v10 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v9 + 40))();
  *(_QWORD *)this = off_24ED7CC08;
  return this;
}

void *re::FileTextureProvider::tryCreateRawImageData(re::FileTextureProvider *this)
{
  char *v2;
  void *v3;
  void *v4;
  re *v5;
  re *v6;
  NSObject *v7;
  char *v9;
  id v10;
  uint8_t buf[4];
  char *v12;
  __int16 v13;
  re *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)this + 216) & 1) != 0)
    v2 = (char *)*((_QWORD *)this + 28);
  else
    v2 = (char *)this + 217;
  objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", v2, 0, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = 0;
  objc_msgSend(MEMORY[0x24BDBCE50], "dataWithContentsOfURL:options:error:", v3, 1, &v10);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (re *)v10;
  v6 = v5;
  if (v4)
  {
    CFRetain(v4);
  }
  else
  {
    v7 = *re::pipelineLogObjects(v5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      if ((*((_BYTE *)this + 216) & 1) != 0)
        v9 = (char *)*((_QWORD *)this + 28);
      else
        v9 = (char *)this + 217;
      *(_DWORD *)buf = 136315394;
      v12 = v9;
      v13 = 2112;
      v14 = v6;
      _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "Failed to create texture from path: %s: %@", buf, 0x16u);
    }
  }

  return v4;
}

uint64_t re::FileTextureProvider::tryCreateImageSource(re::FileTextureProvider *this, const __CFDictionary *a2)
{
  _QWORD *v4;
  uint64_t v6;
  _BYTE v7[24];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  v4 = operator new(0x20uLL);
  *v4 = &off_24ED7CDE8;
  v4[1] = this;
  v4[2] = a2;
  v4[3] = &v6;
  v8 = v4;
  re::runInLocalAutoreleasePool((uint64_t)v7);
  (*(void (**)(_QWORD *))(*v4 + 40))(v4);
  return v6;
}

uint64_t re::FileTextureProvider::tryReadHeaderBytes@<X0>(re::FileTextureProvider *this@<X0>, void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  re::FileStreamReader *v7;
  size_t v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[16];
  FILE *__stream;
  char v19;
  _BYTE v20[23];

  if ((*((_BYTE *)this + 216) & 1) != 0)
    v7 = (re::FileStreamReader *)*((_QWORD *)this + 28);
  else
    v7 = (re::FileTextureProvider *)((char *)this + 217);
  re::FileStreamReader::open(v7, (uint64_t)v17);
  if (v17[0])
  {
    v8 = fread(a2, 1uLL, a3, __stream);
    *(_BYTE *)a4 = 1;
    *(_QWORD *)(a4 + 8) = v8;
  }
  else
  {
    if ((v19 & 1) != 0)
      v9 = *(_BYTE **)&v20[7];
    else
      v9 = v20;
    re::DynamicString::format((re::DynamicString *)"Failed to open image file: %s", (re::DynamicString *)&v14, v9);
    v10 = v14;
    v11 = v15;
    v12 = v16;
    *(_BYTE *)a4 = 0;
    *(_OWORD *)(a4 + 8) = v10;
    *(_QWORD *)(a4 + 24) = v11;
    *(_QWORD *)(a4 + 32) = v12;
  }
  return re::Result<re::FileStreamReader,re::DetailedError>::~Result((uint64_t)v17);
}

uint64_t re::DataTextureProvider::DataTextureProvider(uint64_t a1, uint64_t a2)
{
  const void *v4;
  void *v5;

  *(_QWORD *)re::TextureProvider::TextureProvider(a1, a2) = &off_24ED7CC70;
  v4 = *(const void **)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = _Block_copy(v4);
  v5 = *(void **)(a2 + 216);
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;

  return a1;
}

uint64_t re::DataTextureProvider::DataTextureProvider(uint64_t a1, id *a2, int a3, _QWORD *a4, void *a5)
{
  id v9;
  void *v10;

  v9 = a5;
  re::TextureProvider::TextureProvider((re::TextureProvider *)a1, a2, a3);
  *(_QWORD *)a1 = &off_24ED7CC70;
  *(_QWORD *)(a1 + 208) = *a4;
  v10 = _Block_copy(v9);

  *(_QWORD *)(a1 + 216) = v10;
  CFRetain(*(CFTypeRef *)(a1 + 208));
  return a1;
}

void re::DataTextureProvider::~DataTextureProvider(re::DataTextureProvider *this)
{
  const void *v2;

  *(_QWORD *)this = &off_24ED7CC70;
  v2 = (const void *)*((_QWORD *)this + 26);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 26) = 0;
  }

  re::TextureProvider::~TextureProvider(this);
}

{
  re::DataTextureProvider::~DataTextureProvider(this);
  JUMPOUT(0x2276933B8);
}

const void *re::DataTextureProvider::tryCreateRawImageData(re::DataTextureProvider *this)
{
  const void *result;

  result = (const void *)*((_QWORD *)this + 26);
  if (result)
  {
    CFRetain(result);
    return (const void *)*((_QWORD *)this + 26);
  }
  return result;
}

uint64_t re::DataTextureProvider::tryCreateOrDetachRawImageData(re::DataTextureProvider *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  return v1;
}

const __CFData *re::DataTextureProvider::tryCreateImageSource(re::DataTextureProvider *this, const __CFDictionary *a2)
{
  const __CFData *result;
  NSObject *v4;
  char *v5;
  int v6;
  char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  result = (const __CFData *)*((_QWORD *)this + 26);
  if (result)
  {
    result = CGImageSourceCreateWithData(result, a2);
    if (!result)
    {
      v4 = *re::pipelineLogObjects(0);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        if ((*((_BYTE *)this + 16) & 1) != 0)
          v5 = (char *)*((_QWORD *)this + 3);
        else
          v5 = (char *)this + 17;
        v6 = 136315138;
        v7 = v5;
        _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Failed to create CGImageSource for texture data '%s'", (uint8_t *)&v6, 0xCu);
      }
      return 0;
    }
  }
  return result;
}

uint64_t re::DataTextureProvider::tryCreateOrDetachImageSource(re::DataTextureProvider *this, const __CFDictionary *a2)
{
  uint64_t v3;
  const void *v4;

  v3 = (*(uint64_t (**)(re::DataTextureProvider *, const __CFDictionary *))(*(_QWORD *)this + 24))(this, a2);
  v4 = (const void *)*((_QWORD *)this + 26);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 26) = 0;
  }
  return v3;
}

void *re::DataTextureProvider::tryReadHeaderBytes@<X0>(re::DataTextureProvider *this@<X0>, void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  const __CFData *v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t Length;
  const UInt8 *BytePtr;
  void *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v7 = (const __CFData *)*((_QWORD *)this + 26);
  if (!v7)
  {
    v9 = v17;
    v10 = v18;
    v17 = 0;
    v18 = 0;
    v11 = v19;
    v19 = 0;
    v20 = 0;
    v12 = v10 & 1;
    if (v9)
      v13 = v12 == 0;
    else
      v13 = 1;
    if (!v13)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 40))(v9, v11);
      if (v17)
      {
        if ((v18 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v17 + 40))();
      }
    }
    v7 = (const __CFData *)*((_QWORD *)this + 26);
  }
  Length = CFDataGetLength(v7);
  if (Length < a3)
    a3 = Length;
  BytePtr = CFDataGetBytePtr(v7);
  result = memcpy(a2, BytePtr, a3);
  *(_BYTE *)a4 = 1;
  *(_QWORD *)(a4 + 8) = a3;
  return result;
}

uint64_t re::CGImageTextureProvider::tryGetImage(re::CGImageTextureProvider *this)
{
  return *((_QWORD *)this + 26);
}

uint64_t re::CGImageTextureProvider::tryCreateOrDetachImage(re::CGImageTextureProvider *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  return v1;
}

uint64_t re::CGImageArrayTextureProvider::tryGetImageArray@<X0>(re::CGImageArrayTextureProvider *this@<X0>, _BYTE *a2@<X8>)
{
  *a2 = 1;
  return re::DynamicArray<char const*>::DynamicArray((uint64_t)(a2 + 8), (uint64_t *)this + 26);
}

uint64_t re::CGImageArrayTextureProvider::tryGetTextureTypeForImageArray@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 1;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(this + 204);
  return this;
}

void re::USKTextureProvider::~USKTextureProvider(re::USKTextureProvider *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED44368;
  v3 = (_OWORD *)((char *)this + 208);
  v2 = *((_QWORD *)this + 26);
  if (v2)
  {
    if ((*((_BYTE *)this + 216) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 28));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::TextureProvider::~TextureProvider(this);
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED44368;
  v3 = (_OWORD *)((char *)this + 208);
  v2 = *((_QWORD *)this + 26);
  if (v2)
  {
    if ((*((_BYTE *)this + 216) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 28));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::TextureProvider::~TextureProvider(this);
  JUMPOUT(0x2276933B8);
}

void re::FileTextureProvider::~FileTextureProvider(re::FileTextureProvider *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED44368;
  v3 = (_OWORD *)((char *)this + 208);
  v2 = *((_QWORD *)this + 26);
  if (v2)
  {
    if ((*((_BYTE *)this + 216) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 28));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::TextureProvider::~TextureProvider(this);
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED44368;
  v3 = (_OWORD *)((char *)this + 208);
  v2 = *((_QWORD *)this + 26);
  if (v2)
  {
    if ((*((_BYTE *)this + 216) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 28));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::TextureProvider::~TextureProvider(this);
  JUMPOUT(0x2276933B8);
}

void std::__function::__func<re::USKTextureProvider::tryReadHeaderBytes(void *,unsigned long)::$_0,std::allocator<re::USKTextureProvider::tryReadHeaderBytes(void *,unsigned long)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::USKTextureProvider::tryReadHeaderBytes(void *,unsigned long)::$_0,std::allocator<re::USKTextureProvider::tryReadHeaderBytes(void *,unsigned long)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24ED7CD68;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<re::USKTextureProvider::tryReadHeaderBytes(void *,unsigned long)::$_0,std::allocator<re::USKTextureProvider::tryReadHeaderBytes(void *,unsigned long)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED7CD68;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<re::USKTextureProvider::tryReadHeaderBytes(void *,unsigned long)::$_0,std::allocator<re::USKTextureProvider::tryReadHeaderBytes(void *,unsigned long)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  const __CFData *v2;
  const __CFData *v3;
  void *v4;
  size_t v5;
  unint64_t Length;
  const UInt8 *BytePtr;

  v2 = (const __CFData *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  if (v2)
  {
    v3 = v2;
    v4 = *(void **)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 32);
    Length = CFDataGetLength(v2);
    if (Length < v5)
      v5 = Length;
    BytePtr = CFDataGetBytePtr(v3);
    memcpy(v4, BytePtr, v5);
    **(_QWORD **)(a1 + 16) = v5;
    CFRelease(v3);
  }
}

uint64_t std::__function::__func<re::USKTextureProvider::tryReadHeaderBytes(void *,unsigned long)::$_0,std::allocator<re::USKTextureProvider::tryReadHeaderBytes(void *,unsigned long)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::USKTextureProvider::tryReadHeaderBytes(void *,unsigned long)::$_0,std::allocator<re::USKTextureProvider::tryReadHeaderBytes(void *,unsigned long)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__func<re::FileTextureProvider::tryCreateImageSource(__CFDictionary const*)::$_0,std::allocator<re::FileTextureProvider::tryCreateImageSource(__CFDictionary const*)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::FileTextureProvider::tryCreateImageSource(__CFDictionary const*)::$_0,std::allocator<re::FileTextureProvider::tryCreateImageSource(__CFDictionary const*)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24ED7CDE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<re::FileTextureProvider::tryCreateImageSource(__CFDictionary const*)::$_0,std::allocator<re::FileTextureProvider::tryCreateImageSource(__CFDictionary const*)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED7CDE8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<re::FileTextureProvider::tryCreateImageSource(__CFDictionary const*)::$_0,std::allocator<re::FileTextureProvider::tryCreateImageSource(__CFDictionary const*)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const __CFURL *v4;
  re *v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(v2 + 216) & 1) != 0)
    v3 = *(_QWORD *)(v2 + 224);
  else
    v3 = v2 + 217;
  objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", v3, 0, 0);
  v4 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
  v5 = CGImageSourceCreateWithURL(v4, *(CFDictionaryRef *)(a1 + 16));
  **(_QWORD **)(a1 + 24) = v5;
  if (!**(_QWORD **)(a1 + 24))
  {
    v6 = *re::pipelineLogObjects(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      if ((*(_BYTE *)(v2 + 216) & 1) != 0)
        v7 = *(_QWORD *)(v2 + 224);
      else
        v7 = v2 + 217;
      v8 = 136315138;
      v9 = v7;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Failed to create CGImageSource for texture resource '%s'", (uint8_t *)&v8, 0xCu);
    }
  }

}

uint64_t std::__function::__func<re::FileTextureProvider::tryCreateImageSource(__CFDictionary const*)::$_0,std::allocator<re::FileTextureProvider::tryCreateImageSource(__CFDictionary const*)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::FileTextureProvider::tryCreateImageSource(__CFDictionary const*)::$_0,std::allocator<re::FileTextureProvider::tryCreateImageSource(__CFDictionary const*)::$_0>,void ()(void)>::target_type()
{
}

double re::internal::createGeomMeshFromUSKNode@<D0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  re::GeomAttribute *v7;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _BYTE v13[24];
  __int128 v14;
  uint64_t v15;
  _BYTE v16[8];
  __int128 v17;
  uint64_t v18;
  _OWORD v19[2];
  int v20;
  uint64_t v21;

  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v21 = 0x7FFFFFFFLL;
  *(_OWORD *)v13 = 0uLL;
  re::makeGeomModelDescriptorFromUSKNode(a1, a2, (uint64_t)v19, a3, a4, a5, (uint64_t)v13, 0, (uint64_t)v16);
  if (v16[0])
  {
    re::makeGeomMeshFromModelDescriptor((re *)&v17, (unint64_t)v13);
    if (v13[0])
    {
      re::GeomMesh::GeomMesh((uint64_t)&v9, (uint64_t)&v13[8]);
      *(_BYTE *)a6 = 1;
      re::GeomMesh::GeomMesh(a6 + 8, (uint64_t)&v9);
      re::GeomMesh::~GeomMesh((re::GeomMesh *)&v9, v7);
    }
    else
    {
      v9 = *(_OWORD *)&v13[8];
      re::DynamicString::DynamicString((re::DynamicString *)&v10, (const re::DynamicString *)&v14);
      *(_BYTE *)a6 = 0;
      *(_OWORD *)(a6 + 8) = v9;
      *(_QWORD *)(a6 + 24) = v10;
      *(_QWORD *)(a6 + 48) = v12;
      *(_OWORD *)(a6 + 32) = v11;
    }
    re::Result<re::GeomMeshWithNGons,re::DetailedError>::~Result((uint64_t)v13);
  }
  else
  {
    *(_OWORD *)v13 = v17;
    re::DynamicString::DynamicString((re::DynamicString *)&v13[16], (const re::DynamicString *)&v18);
    *(_BYTE *)a6 = 0;
    *(_OWORD *)(a6 + 8) = *(_OWORD *)v13;
    *(_QWORD *)(a6 + 24) = *(_QWORD *)&v13[16];
    *(_QWORD *)(a6 + 48) = v15;
    *(_OWORD *)(a6 + 32) = v14;
  }
  re::Result<re::GeomModelDescriptor,re::DetailedError>::~Result((uint64_t)v16);
  return re::HashTable<re::ImportMaterialSignature,re::MaterialInfo,re::Hash<re::ImportMaterialSignature>,re::EqualTo<re::ImportMaterialSignature>,true,false>::deinit((uint64_t *)v19);
}

uint64_t re::Result<re::GeomMeshWithNGons,re::DetailedError>::~Result(uint64_t a1)
{
  re::GeomAttribute *v2;
  double v3;
  int v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t result;

  if (!*(_BYTE *)a1)
  {
    v6 = (_OWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 24);
    if (v5)
    {
      if ((*(_BYTE *)(a1 + 32) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(a1 + 40));
      *v6 = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
    }
    return a1;
  }
  v3 = re::HashBrown<unsigned int,re::GeomMeshWithNGons::NGonToTriangleInfo,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::deinit(a1 + 832);
  v4 = *(unsigned __int8 *)(a1 + 764);
  if (v4 == 2)
  {
    re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 768);
    goto LABEL_15;
  }
  if (v4 == 1)
  {
    v7 = *(_QWORD *)(a1 + 768);
    if (v7)
    {
      v2 = *(re::GeomAttribute **)(a1 + 800);
      if (v2)
        (*(void (**)(uint64_t, double))(*(_QWORD *)v7 + 40))(v7, v3);
      *(_QWORD *)(a1 + 800) = 0;
      *(_QWORD *)(a1 + 776) = 0;
      *(_QWORD *)(a1 + 784) = 0;
      *(_QWORD *)(a1 + 768) = 0;
      ++*(_DWORD *)(a1 + 792);
    }
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 764))
  {
    *(_DWORD *)(a1 + 768) = 0;
LABEL_15:
    re::GeomMesh::~GeomMesh((re::GeomMesh *)(a1 + 8), v2);
    return a1;
  }
  re::internal::assertLog((re::internal *)4, (uint64_t)v2, v3, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
  result = _os_crash();
  __break(1u);
  return result;
}

double re::HashBrown<unsigned int,re::GeomMeshWithNGons::NGonToTriangleInfo,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::deinit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  if (*(_QWORD *)(a1 + 56))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3)
      {
        v4 = 96 * v3;
        v5 = v2 + 48;
        do
        {
          v6 = *(_QWORD *)(v5 + 8);
          if (v6)
          {
            if (*(_QWORD *)(v5 + 40))
              (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
            *(_QWORD *)(v5 + 40) = 0;
            *(_QWORD *)(v5 + 16) = 0;
            *(_QWORD *)(v5 + 24) = 0;
            *(_QWORD *)(v5 + 8) = 0;
            ++*(_DWORD *)(v5 + 32);
          }
          v7 = *(_QWORD *)(v5 - 16);
          if (v7)
          {
            if (*(_QWORD *)(v5 - 8))
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)v5);
              *(_QWORD *)(v5 - 8) = 0;
              *(_QWORD *)v5 = 0;
            }
            *(_QWORD *)(v5 - 16) = 0;
          }
          v8 = *(_QWORD *)(v5 - 40);
          if (v8)
          {
            if (*(_QWORD *)(v5 - 32))
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(v5 - 24));
              *(_QWORD *)(v5 - 32) = 0;
              *(_QWORD *)(v5 - 24) = 0;
            }
            *(_QWORD *)(v5 - 40) = 0;
          }
          v5 += 96;
          v4 -= 96;
        }
        while (v4);
      }
      *(_QWORD *)(a1 + 8) = 0;
    }
    if (*(_QWORD *)a1)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56));
      *(_QWORD *)a1 = 0;
    }
    result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t re::Result<re::GeomModel,re::DetailedError>::~Result(uint64_t a1)
{
  re::GeomAttribute *v2;
  _QWORD *v3;
  uint64_t v4;

  if (*(_BYTE *)a1)
  {
    re::DynamicArray<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::deinit(a1 + 216);
    if (*(_BYTE *)(a1 + 168))
      re::DynamicArray<re::GeomIndexMap>::deinit(a1 + 176);
    if (*(_BYTE *)(a1 + 120))
      re::DynamicArray<re::GeomIndexMap>::deinit(a1 + 128);
    v3 = (_QWORD *)(a1 + 8);
    v4 = *(_QWORD *)(a1 + 80);
    if (v4)
    {
      v2 = *(re::GeomAttribute **)(a1 + 112);
      if (v2)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
      *(_QWORD *)(a1 + 112) = 0;
      *(_QWORD *)(a1 + 88) = 0;
      *(_QWORD *)(a1 + 96) = 0;
      *(_QWORD *)(a1 + 80) = 0;
      ++*(_DWORD *)(a1 + 104);
    }
    re::DynamicArray<re::GeomMesh>::deinit(a1 + 40, v2);
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  if (*v3)
  {
    if ((v3[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v3 + 40))(*v3, v3[2]);
    *(_OWORD *)v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
  }
  return a1;
}

uint64_t re::types::Ok<re::GeomModel>::Ok(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 24) = 0;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v9;
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v10;
  ++*(_DWORD *)(a2 + 56);
  ++*(_DWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v12 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = v12;
  v13 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = v13;
  ++*(_DWORD *)(a2 + 96);
  ++*(_DWORD *)(a1 + 96);
  re::Optional<re::DynamicArray<re::GeomIndexMap>>::Optional(a1 + 112, (unsigned __int8 *)(a2 + 112));
  re::Optional<re::DynamicArray<re::GeomIndexMap>>::Optional(a1 + 160, (unsigned __int8 *)(a2 + 160));
  *(_QWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  v14 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v14;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  v15 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a2 + 224) = v15;
  v16 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = v16;
  ++*(_DWORD *)(a2 + 232);
  ++*(_DWORD *)(a1 + 232);
  return a1;
}

uint64_t re::Result<re::GeomModel,re::DetailedError>::Result(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_BYTE *)a1 = 1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 24) = 0;
  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v9;
  v10 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v10;
  ++*(_DWORD *)(a2 + 56);
  ++*(_DWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = v11;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v12 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = v12;
  v13 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = v13;
  ++*(_DWORD *)(a2 + 96);
  ++*(_DWORD *)(a1 + 104);
  re::Optional<re::DynamicArray<re::GeomIndexMap>>::Optional(a1 + 120, (unsigned __int8 *)(a2 + 112));
  re::Optional<re::DynamicArray<re::GeomIndexMap>>::Optional(a1 + 168, (unsigned __int8 *)(a2 + 160));
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  v14 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 224) = v14;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  v15 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a2 + 224) = v15;
  v16 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = v16;
  ++*(_DWORD *)(a2 + 232);
  ++*(_DWORD *)(a1 + 240);
  return a1;
}

void re::importVertexCacheAnimationFromUSKNode(void *a1@<X0>, float *a2@<X1>, unint64_t a3@<X8>, double a4@<D0>)
{
  unint64_t v4;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _anonymous_namespace_ *v19;
  _anonymous_namespace_ *v20;
  unint64_t v21;
  double *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int32x4_t v27;
  __int128 v28;
  __int128 v29;
  float32x4_t *v30;
  float32x4_t *v31;
  uint64_t v32;
  uint32x4_t v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  double *v37;
  float v38;
  float v39;
  _anonymous_namespace_ *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  double *v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  void *v52;
  double *v53;
  uint64_t v54;
  __int128 v55;
  _OWORD *v56;
  float32x4_t *v57;
  uint64_t v58;
  float32x4_t *v59;
  uint64_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  id v65;
  double *v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  double v70;
  _anonymous_namespace_ *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  double *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  void *v97;
  double *v98;
  uint64_t v99;
  uint64_t v100;
  void *__s2;
  uint64_t v102;
  unint64_t v103;
  double *v104;
  uint64_t v105;
  __int128 v106;
  void *__s1[2];
  _BYTE v108[28];
  __int16 v109;
  unint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  v8 = a1;
  objc_msgSend(v8, "property:", CFSTR("points"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "property:", CFSTR("faceVertexIndices"));
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)v10;
  if (!v9 || !v10 || (objc_msgSend(v9, "isAnimated") & 1) == 0)
  {
    *(_BYTE *)a3 = 1;
    goto LABEL_113;
  }
  objc_msgSend(v9, "timeSamples");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (unint64_t)v12;
  if (!v12)
  {
    v34 = v111;
    v35 = v112;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 1024;
    *(_QWORD *)(a3 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a3 + 24) = v34;
    *(_OWORD *)(a3 + 40) = v35;
    goto LABEL_112;
  }
  objc_msgSend(v12, "dataNoCopy");
  v14 = (unint64_t)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v15 = objc_msgSend((id)v14, "bytes");
  v16 = objc_msgSend((id)v13, "arraySize");

  if (!v16)
  {
LABEL_118:
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) Array is empty.", "!isEmpty()", "first", 225);
    _os_crash();
    __break(1u);
LABEL_119:
    re::internal::assertLog((re::internal *)6, v18, "assertion failure: '%s' (%s:line %i) Index out of range. fromInclusive = %zu, size = %zu", "fromInclusive <= size()", "range", 241, v15, v16);
    _os_crash();
    __break(1u);
LABEL_120:
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Array is empty.", "!isEmpty()", "last", 233);
    _os_crash();
    __break(1u);
    goto LABEL_121;
  }
  v4 = objc_msgSend(v9, "arraySizeAtTime:", *(double *)v15);
  v111 = 0uLL;
  *(_QWORD *)&v112 = 0;
  memset(v108, 0, 24);
  v98 = (double *)v15;
  v14 = 1;
  if (v16 != 1)
  {
    while (v4 == objc_msgSend(v9, "float3Array:maxCount:atTime:", *(_QWORD *)&v108[16], v4, *(double *)(v15 + 8 * v14))
         && *((_QWORD *)&v111 + 1) == *(_QWORD *)&v108[8])
    {
      if (*((_QWORD *)&v111 + 1))
      {
        v30 = (float32x4_t *)v112;
        v31 = *(float32x4_t **)&v108[16];
        v32 = 16 * *((_QWORD *)&v111 + 1);
        do
        {
          v33 = (uint32x4_t)vceqq_f32(*v30, *v31);
          v33.i32[3] = v33.i32[2];
          if ((vminvq_u32(v33) & 0x80000000) == 0)
            goto LABEL_7;
          ++v30;
          ++v31;
          v32 -= 16;
        }
        while (v32);
      }
      if (++v14 == v16)
      {
        v14 = v16;
        break;
      }
    }
  }
LABEL_7:
  v15 = v14 - 1;
  if (v16 < v14 - 1)
    goto LABEL_119;
  if (*(_QWORD *)v108 && *(_QWORD *)&v108[8])
    (*(void (**)(void))(**(_QWORD **)v108 + 40))();
  v19 = (_anonymous_namespace_ *)v111;
  if ((_QWORD)v111 && *((_QWORD *)&v111 + 1))
    v19 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v111 + 40))();
  v95 = v13;
  v96 = a3;
  if (v16 == v15)
    goto LABEL_120;
  v13 = (unint64_t)&v98[v15];
  v94 = v16;
  v16 = (unint64_t)(*(double *)(v13 + 8 * (v16 - v14)) - *(double *)v13 + 1.5);
  v102 = 0;
  v103 = 0;
  v104 = 0;
  if (!v16)
  {
    *((_QWORD *)a2 + 2) = 0;
    goto LABEL_36;
  }
  v21 = 0;
  v15 = v103;
  v22 = v104;
  do
  {
    if (v15 == v21)
    {
      *(_QWORD *)&v106 = 0;
      v114 = 0u;
      v115 = 0u;
      v112 = 0u;
      v113 = 0u;
      v111 = 0u;
      v8 = (id)MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v108 = 136315906;
      *(_QWORD *)&v108[4] = "operator[]";
      *(_WORD *)&v108[12] = 1024;
      *(_DWORD *)&v108[14] = 468;
      *(_WORD *)&v108[18] = 2048;
      *(_QWORD *)&v108[20] = v15;
      v109 = 2048;
      v110 = v15;
      _os_log_send_and_compose_impl();
      v72 = _os_crash_msg();
      __break(1u);
LABEL_95:
      re::DynamicString::format((re::DynamicString *)"Sampled index count does not matched for frame %zu: %zu != %zu", (re::DynamicString *)&v111, v4, v72, v13);
LABEL_97:
      v88 = v111;
      v90 = *((_QWORD *)&v112 + 1);
      v89 = v112;
      v91 = v96;
      *(_BYTE *)v96 = 0;
      v92 = 1025;
      goto LABEL_99;
    }
    v22[v21] = *(double *)v13 + (double)v21;
    ++v21;
  }
  while (v16 != v21);
  *((_QWORD *)a2 + 2) = v16;
  if (v16 >> 58)
    goto LABEL_122;
  *((_QWORD *)a2 + 3) = v24;
  if (!v24)
    goto LABEL_123;
  v26 = v16 - 1;
  if (v16 != 1)
  {
    v27 = vdupq_n_s32(0x7F800000u);
    *(_QWORD *)&v28 = 0x7F0000007FLL;
    *((_QWORD *)&v28 + 1) = 0x7F0000007FLL;
    do
    {
      *(int32x4_t *)v24 = v27;
      *(_OWORD *)(v24 + 16) = v28;
      *(_QWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 32) = 0;
      v24 += 64;
      --v26;
    }
    while (v26);
  }
  *(_QWORD *)&v29 = 0x7F0000007FLL;
  *((_QWORD *)&v29 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)v24 = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(v24 + 16) = v29;
  *(_QWORD *)(v24 + 40) = 0;
  *(_QWORD *)(v24 + 48) = 0;
  *(_QWORD *)(v24 + 32) = 0;
LABEL_36:
  v97 = v11;
  v36 = v103;
  if (!v103)
  {
LABEL_121:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "first", 440);
    _os_crash();
    __break(1u);
LABEL_122:
    re::internal::assertLog((re::internal *)6, v23, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 64, v16);
    _os_crash();
    __break(1u);
LABEL_123:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
LABEL_124:
    v99 = 0;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v111 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v108 = 136315906;
    *(_QWORD *)&v108[4] = "operator[]";
    *(_WORD *)&v108[12] = 1024;
    *(_DWORD *)&v108[14] = 468;
    *(_WORD *)&v108[18] = 2048;
    *(_QWORD *)&v108[20] = v14;
    v109 = 2048;
    v110 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_125:
    v99 = 0;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v111 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v108 = 136315906;
    *(_QWORD *)&v108[4] = "operator[]";
    *(_WORD *)&v108[12] = 1024;
    *(_DWORD *)&v108[14] = 468;
    *(_WORD *)&v108[18] = 2048;
    *(_QWORD *)&v108[20] = v14;
    v109 = 2048;
    v110 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_126:
    v105 = 0;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v111 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v108 = 136315906;
    *(_QWORD *)&v108[4] = "operator[]";
    *(_WORD *)&v108[12] = 1024;
    *(_DWORD *)&v108[14] = 468;
    *(_WORD *)&v108[18] = 2048;
    *(_QWORD *)&v108[20] = v4;
    v109 = 2048;
    v110 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_127:
    v105 = 0;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v111 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v108 = 136315906;
    *(_QWORD *)&v108[4] = "operator[]";
    *(_WORD *)&v108[12] = 1024;
    *(_DWORD *)&v108[14] = 468;
    *(_WORD *)&v108[18] = 2048;
    *(_QWORD *)&v108[20] = v4;
    v109 = 2048;
    v110 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_128:
    re::internal::assertLog((re::internal *)4, v68, "assertion failure: '%s' (%s:line %i) Array is empty.", "!isEmpty()", "first", 225);
    _os_crash();
    __break(1u);
    goto LABEL_129;
  }
  v37 = v104;
  v38 = *v104 * a4;
  *a2 = v38;
  v39 = v37[v36 - 1] * a4;
  a2[1] = v39;
  if (!v16)
  {
LABEL_45:
    objc_msgSend(v8, "property:", CFSTR("extent"));
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (unint64_t)v43;
    if (v43 && objc_msgSend(v43, "isAnimated"))
    {
      v44 = (void *)v4;
      objc_msgSend((id)v4, "timeSamples");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "dataNoCopy");
      v46 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v47 = (double *)objc_msgSend(v46, "bytes");
      v48 = objc_msgSend(v45, "arraySize");

      if (!v48)
      {
LABEL_129:
        re::internal::assertLog((re::internal *)4, v49, "assertion failure: '%s' (%s:line %i) Array is empty.", "!isEmpty()", "first", 225);
        _os_crash();
        __break(1u);
        goto LABEL_130;
      }
      if ((*v98 == *v47 || vabdd_f64(*v98, *v47) < (fabs(*v98) + fabs(*v47) + 1.0) * 1.0e-12)
        && ((v50 = v98[v94 - 1], v51 = v47[v48 - 1], v50 == v51)
         || vabdd_f64(v50, v51) < (fabs(v50) + fabs(v51) + 1.0) * 1.0e-12))
      {
        v52 = v45;
        v53 = v104;
        re::FixedArray<double>::operator[](v103);
        v4 = (unint64_t)v44;
        v11 = v97;
        if (objc_msgSend(v44, "arraySizeAtTime:", *v53) == 2)
        {
          if (v16)
          {
            v15 = 0;
            v14 = 0;
            while (1)
            {
              v13 = v103;
              if (v103 <= v14)
                goto LABEL_124;
              v54 = objc_msgSend((id)v4, "float3Array:maxCount:atTime:", &v106, 2, v104[v14]);
              if (v54 != 2)
                break;
              v13 = *((_QWORD *)a2 + 2);
              if (v13 <= v14)
                goto LABEL_125;
              v55 = *(_OWORD *)__s1;
              v56 = (_OWORD *)(*((_QWORD *)a2 + 3) + v15);
              *v56 = v106;
              v56[1] = v55;
              ++v14;
              v15 += 64;
              if (v16 == v14)
                goto LABEL_59;
            }
            re::DynamicString::format((re::DynamicString *)"Expected exactly 2 float3 values for extent frame %zu, received: %zu", (re::DynamicString *)&v111, v14, v54);
            v86 = v111;
            v87 = v112;
            *(_BYTE *)v96 = 0;
            *(_QWORD *)(v96 + 8) = 1025;
            *(_QWORD *)(v96 + 16) = &re::AnimationErrorCategory(void)::instance;
            *(_OWORD *)(v96 + 24) = v86;
            *(_OWORD *)(v96 + 40) = v87;

            goto LABEL_108;
          }
LABEL_59:

LABEL_67:
          if (!objc_msgSend(v11, "isAnimated"))
          {
LABEL_107:
            *(_BYTE *)v96 = 1;
            goto LABEL_108;
          }
          v93 = v4;
          objc_msgSend(v11, "timeSamples");
          a2 = (float *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a2, "dataNoCopy");
          v65 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v66 = (double *)objc_msgSend(v65, "bytes");
          v67 = objc_msgSend(a2, "arraySize");

          if (v67)
          {
            if (*v98 == *v66 || vabdd_f64(*v98, *v66) < (fabs(*v98) + fabs(*v66) + 1.0) * 1.0e-12)
            {
              v69 = v98[v94 - 1];
              v70 = v66[v67 - 1];
              if (v69 == v70 || vabdd_f64(v69, v70) < (fabs(v69) + fabs(v70) + 1.0) * 1.0e-12)
              {
                v11 = v97;
                if (v103)
                {
                  v13 = objc_msgSend(v97, "arraySizeAtTime:", *v104);
                  v106 = 0uLL;
                  __s1[0] = 0;
                  if (v103)
                  {
                    v71 = (_anonymous_namespace_ *)objc_msgSend(v97, "intArray:maxCount:atTime:", __s1[0], v13, *v104);
                    if (v71 != (_anonymous_namespace_ *)v13)
                    {
                      re::DynamicString::format((re::DynamicString *)"Read indices does not match expected count: %zu != %zu", (re::DynamicString *)&v111, v71, v13);
                      v79 = v111;
                      v80 = v112;
                      *(_BYTE *)v96 = 0;
                      *(_QWORD *)(v96 + 8) = 1025;
                      *(_QWORD *)(v96 + 16) = &re::AnimationErrorCategory(void)::instance;
                      *(_OWORD *)(v96 + 24) = v79;
                      *(_OWORD *)(v96 + 40) = v80;
                      v74 = 1;
                      v4 = v93;
                      goto LABEL_103;
                    }
                    v99 = 0;
                    v100 = 0;
                    __s2 = 0;
                    if (v16 < 2)
                    {
LABEL_84:
                      v74 = 0;
LABEL_100:
                      v4 = v93;
                      if (v99 && v100)
                        (*(void (**)(void))(*(_QWORD *)v99 + 40))();
LABEL_103:
                      if ((_QWORD)v106 && *((_QWORD *)&v106 + 1))
                        (*(void (**)(void))(*(_QWORD *)v106 + 40))();

                      if (v74)
                        goto LABEL_108;
                      goto LABEL_107;
                    }
                    v4 = 1;
                    while (1)
                    {
                      v15 = v103;
                      if (v103 <= v4)
                        goto LABEL_126;
                      v72 = objc_msgSend(v97, "arraySizeAtTime:", v104[v4]);
                      if (v72 != v13)
                        goto LABEL_95;
                      v15 = v103;
                      if (v103 <= v4)
                        goto LABEL_127;
                      v73 = objc_msgSend(v97, "intArray:maxCount:atTime:", __s2, v13, v104[v4]);
                      if (v73 != v13)
                      {
                        re::DynamicString::format((re::DynamicString *)"Read indices does not match expected count for frame %zu: %zu != %zu", (re::DynamicString *)&v111, v4, v73, v13);
                        goto LABEL_97;
                      }
                      if (memcmp(__s1[0], __s2, 4 * v13))
                        break;
                      if (v16 == ++v4)
                        goto LABEL_84;
                    }
                    re::DynamicString::format((re::DynamicString *)"Invalid topological change, index buffer does not match for frame %zu", (re::DynamicString *)&v111, v4);
                    v88 = v111;
                    v90 = *((_QWORD *)&v112 + 1);
                    v89 = v112;
                    v91 = v96;
                    *(_BYTE *)v96 = 0;
                    v92 = 1033;
LABEL_99:
                    *(_QWORD *)(v91 + 8) = v92;
                    *(_QWORD *)(v91 + 16) = &re::AnimationErrorCategory(void)::instance;
                    *(_OWORD *)(v91 + 24) = v88;
                    *(_QWORD *)(v91 + 40) = v89;
                    *(_QWORD *)(v91 + 48) = v90;
                    v74 = 1;
                    goto LABEL_100;
                  }
LABEL_131:
                  v99 = 0;
                  v114 = 0u;
                  v115 = 0u;
                  v112 = 0u;
                  v113 = 0u;
                  v111 = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v108 = 136315906;
                  *(_QWORD *)&v108[4] = "operator[]";
                  *(_WORD *)&v108[12] = 1024;
                  *(_DWORD *)&v108[14] = 468;
                  *(_WORD *)&v108[18] = 2048;
                  *(_QWORD *)&v108[20] = 0;
                  v109 = 2048;
                  v110 = 0;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
                }
LABEL_130:
                *(_QWORD *)&v106 = 0;
                v114 = 0u;
                v115 = 0u;
                v112 = 0u;
                v113 = 0u;
                v111 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v108 = 136315906;
                *(_QWORD *)&v108[4] = "operator[]";
                *(_WORD *)&v108[12] = 1024;
                *(_DWORD *)&v108[14] = 468;
                *(_WORD *)&v108[18] = 2048;
                *(_QWORD *)&v108[20] = 0;
                v109 = 2048;
                v110 = 0;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
                goto LABEL_131;
              }
            }
            re::DynamicString::format((re::DynamicString *)"Point and Index sample sizes do not match: %zu != %zu", (re::DynamicString *)&v111, v94, v67);
            v77 = v111;
            v78 = v112;
            *(_BYTE *)v96 = 0;
            *(_QWORD *)(v96 + 8) = 1025;
            *(_QWORD *)(v96 + 16) = &re::AnimationErrorCategory(void)::instance;
            *(_OWORD *)(v96 + 24) = v77;
            *(_OWORD *)(v96 + 40) = v78;

            v11 = v97;
            v4 = v93;
LABEL_108:

            goto LABEL_109;
          }
          goto LABEL_128;
        }
        v83 = v104;
        re::FixedArray<double>::operator[](v103);
        re::DynamicString::format((re::DynamicString *)"Expected exactly 2 float3 values for extent property, received: %zu", (re::DynamicString *)&v111, objc_msgSend(v44, "arraySizeAtTime:", *v83));
        v84 = v111;
        v85 = v112;
        *(_BYTE *)v96 = 0;
        *(_QWORD *)(v96 + 8) = 1025;
        *(_QWORD *)(v96 + 16) = &re::AnimationErrorCategory(void)::instance;
        *(_OWORD *)(v96 + 24) = v84;
        *(_OWORD *)(v96 + 40) = v85;
        v45 = v52;
      }
      else
      {
        re::DynamicString::format((re::DynamicString *)"Point and Extent sample sizes do not match: %zu != %zu", (re::DynamicString *)&v111, v94, v48);
        v81 = v111;
        v82 = v112;
        v11 = v97;
        *(_BYTE *)v96 = 0;
        *(_QWORD *)(v96 + 8) = 1025;
        *(_QWORD *)(v96 + 16) = &re::AnimationErrorCategory(void)::instance;
        *(_OWORD *)(v96 + 24) = v81;
        *(_OWORD *)(v96 + 40) = v82;
        v4 = (unint64_t)v44;
      }

      goto LABEL_108;
    }
    v11 = v97;
    if (!v16)
      goto LABEL_67;
    v14 = 0;
    while (1)
    {
      v15 = *((_QWORD *)a2 + 2);
      if (v15 <= v14)
        break;
      v57 = (float32x4_t *)(*((_QWORD *)a2 + 3) + (v14 << 6));
      v58 = v57[2].i64[1];
      if (v58)
      {
        v59 = (float32x4_t *)v57[3].i64[0];
        v60 = 16 * v58;
        v61 = *v57;
        v62 = v57[1];
        do
        {
          v63 = *v59++;
          v64 = v63;
          v61.i32[3] = 0;
          v64.i32[3] = 0;
          v61 = vminnmq_f32(v61, v64);
          v62.i32[3] = 0;
          v62 = vmaxnmq_f32(v62, v64);
          *v57 = v61;
          v57[1] = v62;
          v60 -= 16;
        }
        while (v60);
      }
      if (++v14 == v16)
        goto LABEL_67;
    }
    *(_QWORD *)&v106 = 0;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v111 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v108 = 136315906;
    *(_QWORD *)&v108[4] = "operator[]";
    *(_WORD *)&v108[12] = 1024;
    *(_DWORD *)&v108[14] = 468;
    *(_WORD *)&v108[18] = 2048;
    *(_QWORD *)&v108[20] = v14;
    v109 = 2048;
    v110 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_115:
    *(_QWORD *)&v106 = 0;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v111 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v108 = 136315906;
    *(_QWORD *)&v108[4] = "operator[]";
    *(_WORD *)&v108[12] = 1024;
    *(_DWORD *)&v108[14] = 468;
    *(_WORD *)&v108[18] = 2048;
    *(_QWORD *)&v108[20] = v13;
    v109 = 2048;
    v110 = a3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_116:
    *(_QWORD *)&v106 = 0;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v111 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v108 = 136315906;
    *(_QWORD *)&v108[4] = "operator[]";
    *(_WORD *)&v108[12] = 1024;
    *(_DWORD *)&v108[14] = 468;
    *(_WORD *)&v108[18] = 2048;
    *(_QWORD *)&v108[20] = v13;
    v109 = 2048;
    v110 = a3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_117:
    *(_QWORD *)&v106 = 0;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v111 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v108 = 136315906;
    *(_QWORD *)&v108[4] = "operator[]";
    *(_WORD *)&v108[12] = 1024;
    *(_DWORD *)&v108[14] = 468;
    *(_WORD *)&v108[18] = 2048;
    *(_QWORD *)&v108[20] = v13;
    v109 = 2048;
    v110 = a3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_118;
  }
  v13 = 0;
  v15 = 48;
  while (1)
  {
    a3 = v103;
    if (v103 <= v13)
      goto LABEL_115;
    v40 = (_anonymous_namespace_ *)objc_msgSend(v9, "arraySizeAtTime:", v104[v13]);
    if (v40 != (_anonymous_namespace_ *)v4)
    {
      re::DynamicString::format((re::DynamicString *)"Sampled vertex count does not matched for frame %zu: %zu != %zu", (re::DynamicString *)&v111, v13, v40, v4);
      goto LABEL_87;
    }
    a3 = *((_QWORD *)a2 + 2);
    if (a3 <= v13)
      goto LABEL_116;
    v41 = *((_QWORD *)a2 + 3);
    a3 = v103;
    if (v103 <= v13)
      goto LABEL_117;
    v42 = objc_msgSend(v9, "float3Array:maxCount:atTime:", *(_QWORD *)(v41 + v15), v4, v104[v13]);
    if (v42 != v4)
      break;
    ++v13;
    v15 += 64;
    if (v16 == v13)
      goto LABEL_45;
  }
  re::DynamicString::format((re::DynamicString *)"Read vertices does not match expected count for frame %zu: %zu != %zu", (re::DynamicString *)&v111, v13, v42, v4);
LABEL_87:
  v75 = v111;
  v76 = v112;
  v11 = v97;
  *(_BYTE *)v96 = 0;
  *(_QWORD *)(v96 + 8) = 1025;
  *(_QWORD *)(v96 + 16) = &re::AnimationErrorCategory(void)::instance;
  *(_OWORD *)(v96 + 24) = v75;
  *(_OWORD *)(v96 + 40) = v76;
LABEL_109:
  v13 = v95;
  if (v102 && v103)
    (*(void (**)(void))(*(_QWORD *)v102 + 40))();
LABEL_112:

LABEL_113:
}

uint64_t re::FixedArray<double>::operator[](uint64_t result)
{
  if (!result)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

uint64_t re::isCatmullClarkSurface(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  int v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;

  v1 = a1;
  objc_msgSend(v1, "type");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)*MEMORY[0x24BEBEDF8];

  if (v2 == v3)
  {
    objc_msgSend(v1, "property:", CFSTR("subdivisionScheme"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v5)
    {
      objc_msgSend(v5, "tokenValue");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "stringValue");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "isEqualToString:", CFSTR("catmullClark"));

      v4 = v9 << 31 >> 31;
    }
    else
    {
      LOBYTE(v4) = 1;
    }

  }
  else
  {
    LOBYTE(v4) = 0;
  }

  return v4 & 1;
}

BOOL re::convertMDLAssetToGeomScene(const char *a1, uint64_t a2, _BYTE *a3)
{
  void *v6;
  void *v7;
  int v8;
  id v9;
  id *v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  double v17;
  id v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[16];
  _OWORD v23[2];
  int v24;
  uint64_t v25;
  _QWORD v26[3];
  int v27;
  __int128 v28;
  __int128 v29;
  int v30;
  __int128 v31;
  __int128 v32;
  int v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  _BYTE v38[28];
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  _QWORD v53[3];
  int v54;
  uint64_t v55;
  _QWORD v56[3];
  int v57;
  uint64_t v58;
  _QWORD v59[3];
  int v60;
  uint64_t v61;

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v22, 4504, 0);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", a1, 4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = a3[1];
  v9 = objc_alloc(MEMORY[0x24BDDE6D8]);
  if (v8)
  {
    v20 = 0;
    v10 = (id *)&v20;
    v11 = objc_msgSend(v9, "initWithURL:bufferAllocator:preserveIndexing:error:", v7, 0, 1, &v20);
  }
  else
  {
    v21 = 0;
    v10 = (id *)&v21;
    v11 = objc_msgSend(v9, "initWithURL:vertexDescriptor:bufferAllocator:preserveTopology:error:", v7, 0, 0, 0, &v21);
  }
  v12 = (void *)v11;
  v13 = *v10;
  v14 = v13;
  if (v13)
  {
    objc_msgSend(v13, "localizedDescription");
    v15 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    NSLog(CFSTR("ModelConverter: MDLAsset initWithURL error: %s"), objc_msgSend(v15, "UTF8String"));

  }
  else
  {
    v16 = v12;
    v19 = v16;
    v61 = 0;
    v58 = 0;
    memset(v59, 0, sizeof(v59));
    v60 = 0;
    v55 = 0;
    memset(v56, 0, sizeof(v56));
    v57 = 0;
    memset(v53, 0, sizeof(v53));
    v54 = 0;
    memset(v26, 0, sizeof(v26));
    v27 = 0;
    v28 = 0u;
    v29 = 0u;
    v31 = 0u;
    v32 = 0u;
    v30 = 0;
    v33 = 0;
    v34 = 0u;
    v35 = 0u;
    v36 = 0;
    v37 = 0u;
    memset(v38, 0, sizeof(v38));
    v39 = 0x7FFFFFFFLL;
    v40 = 0u;
    v41 = 0u;
    v42 = 0;
    v43 = 0x7FFFFFFFLL;
    v46 = 0;
    v45 = 0u;
    v44 = 0u;
    v47 = 0x7FFFFFFFLL;
    v52 = 0;
    v48 = 0;
    v49 = 0;
    v51 = 0;
    v50 = 0;
    v24 = 0;
    memset(v23, 0, sizeof(v23));
    v25 = 0x7FFFFFFFLL;
    re::convertMDLAssetToGeomSceneAndImportAnimation(&v19, a1, a2, (uint64_t)v23, (uint64_t)v59, (re::ModelIOSkinningData *)v56, (char *)v53, (re::AnimationMetaData *)v26, a3, 0);
    v17 = re::HashTable<re::ImportMaterialSignature,re::MaterialInfo,re::Hash<re::ImportMaterialSignature>,re::EqualTo<re::ImportMaterialSignature>,true,false>::deinit((uint64_t *)v23);
    re::AnimationMetaData::~AnimationMetaData((re::AnimationMetaData *)v26, v17);
    re::DynamicArray<re::SkeletalPoseSampledAnimation>::deinit((uint64_t)v53);
    re::DynamicArray<re::ModelIOSkinningData>::deinit((uint64_t)v56);
    re::DynamicArray<re::ModelIOSkeleton>::deinit((uint64_t)v59);

  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v22);
  return v14 == 0;
}

uint64_t re::convertMDLAssetToGeomSceneAndImportAnimation(id *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, re::ModelIOSkinningData *a6, char *a7, re::AnimationMetaData *a8, _BYTE *a9, CFErrorRef *a10)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _anonymous_namespace_ *v31;
  _anonymous_namespace_ *v32;
  re *v33;
  NSObject *v34;
  float32x4_t *v35;
  _BYTE *v36;
  _anonymous_namespace_ *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t i;
  void *v42;
  int v43;
  uint64_t v44;
  int *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  int v51;
  int v52;
  uint64_t v53;
  int *v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  int v61;
  int v62;
  uint64_t v63;
  int *v64;
  int v65;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  re *v71;
  const MDLMesh *v72;
  re *v73;
  uint64_t v74;
  int isSkinnedMesh;
  __int128 *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int *v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  id v94;
  re::internal::GeomAttributeContainer *v95;
  id v96;
  __n128 v97;
  _QWORD *v98;
  __int128 *v99;
  __int128 *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  __int128 *v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  re::GeomAttribute *v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  int *v112;
  int v113;
  const char *v114;
  size_t v115;
  __n128 v116;
  re::GeomAttribute *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  re::GeomAttribute *v123;
  uint64_t v124;
  __int128 *v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  __int32 v132;
  __int32 v133;
  __int32 v134;
  __int128 v135;
  unint64_t v136;
  uint64_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float v140;
  float v141;
  float v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  const char *v147;
  size_t v148;
  BOOL v149;
  unsigned int v151;
  float32x2_t *v152;
  uint64_t v153;
  _QWORD *v154;
  float32x4_t v155;
  uint64_t v156;
  re::GeomAttribute *v157;
  simd_float3 v158;
  simd_float3 v159;
  simd_float3 v160;
  re::GeomAttribute *v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  unint64_t v165;
  unsigned int v166;
  void *v167;
  int v168;
  uint64_t v169;
  unint64_t v170;
  _QWORD *v171;
  unint64_t *v172;
  __int32 v174;
  __int32 v175;
  __int32 v176;
  simd_float3 v177;
  simd_float3 v178;
  simd_float3 v179;
  simd_float3 v180;
  simd_float3 v181;
  simd_float3 v182;
  unsigned int v183;
  unint64_t v184;
  uint64_t v187;
  uint64_t v189;
  unint64_t v190;
  void *v191;
  _anonymous_namespace_ *v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  unsigned int v199;
  uint64_t v200;
  __int128 v201;
  __int128 v202;
  unsigned int v203;
  uint64_t v204;
  char v205[8];
  std::error_code v206;
  uint64_t v207;
  char v208;
  _BYTE v209[23];
  uint64_t v210;
  char v211;
  uint64_t v212;
  char v213;
  uint64_t v214[3];
  int v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  const char *v219;
  __int16 v220;
  _BYTE v221[34];
  float32x4_t v222;
  float32x4_t v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  int32x4_t v227;
  __int128 v228;
  float32x4_t v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  uint64_t v235;
  unint64_t v236;
  int v237;
  re::GeomAttribute *v238;
  char v239;
  _BYTE v240[40];
  char v241;
  _BYTE v242[40];
  _BYTE v243[48];
  uint8_t buf[32];
  _BYTE v245[12];
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  re::GeomAttribute *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  char v257;
  uint64_t v258[5];
  uint64_t v259[6];
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  re::GeomAttribute *v268;
  char v269;
  _BYTE v270[40];
  char v271;
  _BYTE v272[40];
  _BYTE v273[48];
  _BYTE v274[128];
  int v275;
  const char *v276;
  __int16 v277;
  int v278;
  __int16 v279;
  unint64_t v280;
  __int16 v281;
  _QWORD *v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  uint64_t v288;
  simd_float3x3 v289;
  simd_float3x3 v290;

  v288 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = 0;
  if (v14)
  {
    v15 = 152 * v14;
    v16 = (_QWORD *)(*(_QWORD *)(a3 + 32) + 144);
    do
    {
      v17 = *(v16 - 4);
      if (v17)
      {
        if (*v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
        *v16 = 0;
        *(v16 - 3) = 0;
        *(v16 - 2) = 0;
        *(v16 - 4) = 0;
        ++*((_DWORD *)v16 - 2);
      }
      v18 = *(v16 - 9);
      if (v18)
      {
        if (*(v16 - 5))
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
        *(v16 - 5) = 0;
        *(v16 - 8) = 0;
        *(v16 - 7) = 0;
        *(v16 - 9) = 0;
        ++*((_DWORD *)v16 - 12);
      }
      re::DynamicArray<re::GeomModel>::deinit((uint64_t)(v16 - 14));
      v19 = *(v16 - 18);
      if (v19)
      {
        if ((*(_BYTE *)(v16 - 17) & 1) != 0)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 40))(v19, *(v16 - 16));
        v20 = v16 - 18;
        *v20 = 0u;
        v20[1] = 0u;
      }
      v16 += 19;
      v15 -= 152;
    }
    while (v15);
  }
  ++*(_DWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 56) = 0;
  ++*(_DWORD *)(a3 + 64);
  v21 = *(_QWORD *)(a3 + 96);
  *(_QWORD *)(a3 + 96) = 0;
  if (v21)
  {
    v22 = 0;
    v23 = *(_QWORD *)(a3 + 112);
    v24 = 160 * v21;
    do
    {
      v25 = (_QWORD *)(v23 + v22);
      v26.n128_f64[0] = re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v23 + v22 + 112));
      v27 = *(_QWORD *)(v23 + v22 + 88);
      if (v27)
      {
        if (v25[12])
        {
          (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v27 + 40))(v27, *(_QWORD *)(v23 + v22 + 104), v26.n128_f64[0]);
          v25[12] = 0;
          v25[13] = 0;
        }
        v25[11] = 0;
      }
      v28 = v25[8];
      if (v28)
      {
        if (*(_QWORD *)(v23 + v22 + 72))
        {
          (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v28 + 40))(v28, *(_QWORD *)(v23 + v22 + 80), v26);
          *(_QWORD *)(v23 + v22 + 72) = 0;
          *(_QWORD *)(v23 + v22 + 80) = 0;
        }
        v25[8] = 0;
      }
      v29 = (_QWORD *)(v23 + v22);
      v30 = *(_QWORD *)(v23 + v22 + 40);
      if (v30)
      {
        if (v29[6])
        {
          (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v30 + 40))(v30, *(_QWORD *)(v23 + v22 + 56), v26);
          v29[6] = 0;
          v29[7] = 0;
        }
        v29[5] = 0;
      }
      re::FixedArray<re::StringID>::deinit(v29 + 2);
      re::StringID::destroyString((re::StringID *)(v23 + v22));
      v22 += 160;
    }
    while (v24 != v22);
  }
  ++*(_DWORD *)(a3 + 104);
  v31 = (_anonymous_namespace_ *)*a1;
  v216 = 0;
  memset(v214, 0, sizeof(v214));
  v215 = 0;
  v205[0] = 1;
  re::importSkinningAndSkeletalAnimations(v31, a5, a6, a7, a8, (unsigned __int8 *)&v260);
  v33 = (re *)re::Result<re::Unit,re::DetailedError>::operator=((uint64_t)v205, (uint64_t)&v260);
  if (!(_BYTE)v260)
  {
    v33 = (re *)*((_QWORD *)&v261 + 1);
    if (*((_QWORD *)&v261 + 1))
    {
      if ((v262 & 1) != 0)
        v33 = (re *)(*(uint64_t (**)(void))(**((_QWORD **)&v261 + 1) + 40))();
    }
  }
  if (!v205[0])
  {
    v34 = (id)*re::pipelineLogObjects(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      std::error_code::message((std::string *)&v260, &v206);
      v35 = (SBYTE7(v261) & 0x80u) == 0 ? (float32x4_t *)&v260 : (float32x4_t *)v260;
      v36 = (v208 & 1) != 0 ? *(_BYTE **)&v209[7] : v209;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v35;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v36;
      _os_log_impl(&dword_224FE9000, v34, OS_LOG_TYPE_DEFAULT, "Error: %s\nDetails:\n%s", buf, 0x16u);
      if (SBYTE7(v261) < 0)
        operator delete((void *)v260);
    }

    if (a10)
      *a10 = CFErrorCreate(0, CFSTR("REPipelineErrorDomain"), 3, 0);
  }
  v203 = 0;
  v201 = 0u;
  v202 = 0u;
  v204 = 0x7FFFFFFFLL;
  v199 = 0;
  v197 = 0u;
  v198 = 0u;
  v200 = 0x7FFFFFFFLL;
  *(_DWORD *)v245 = 0;
  memset(buf, 0, sizeof(buf));
  *(_QWORD *)&v245[4] = 0x7FFFFFFFLL;
  v193 = 0u;
  v194 = 0u;
  v195 = 0u;
  v196 = 0u;
  v37 = v31;
  v38 = -[_anonymous_namespace_ countByEnumeratingWithState:objects:count:](v37, "countByEnumeratingWithState:objects:count:", &v193, v274, 16);
  if (v38)
  {
    v39 = v38;
    v40 = *(_QWORD *)v194;
    do
    {
      for (i = 0; i != v39; ++i)
      {
        if (*(_QWORD *)v194 != v40)
          objc_enumerationMutation(v37);
        v42 = *(void **)(*((_QWORD *)&v193 + 1) + 8 * i);
        v260 = xmmword_2260E5F10;
        v261 = xmmword_2260E5F20;
        v262 = xmmword_2260E5F40;
        v263 = xmmword_2260E5D70;
      }
      v39 = -[_anonymous_namespace_ countByEnumeratingWithState:objects:count:](v37, "countByEnumeratingWithState:objects:count:", &v193, v274, 16);
    }
    while (v39);
  }

  if (!*(_DWORD *)&buf[28])
    goto LABEL_97;
  v43 = *(_DWORD *)v245;
  if (*(_DWORD *)v245)
  {
    v44 = 0;
    v45 = (int *)(*(_QWORD *)&buf[16] + 8);
    while (1)
    {
      v46 = *v45;
      v45 += 16;
      if (v46 < 0)
        break;
      if (*(unsigned int *)v245 == ++v44)
      {
        LODWORD(v44) = *(_DWORD *)v245;
        break;
      }
    }
  }
  else
  {
    LODWORD(v44) = 0;
  }
  v47 = *(_DWORD *)v245;
  if (*(_DWORD *)v245 != (_DWORD)v44)
  {
    v48 = v44;
    v49 = *(_QWORD *)&buf[16];
    do
    {
      v50 = *(id *)(v49 + (v48 << 6) + 16);
      *(_QWORD *)&v260 = v50;
      re::collectMeshMaterialsFromMDLMesh((id *)&v260, a4, a9[4]);

      v47 = *(_DWORD *)v245;
      v49 = *(_QWORD *)&buf[16];
      if (*(_DWORD *)v245 <= (v44 + 1))
        v51 = v44 + 1;
      else
        v51 = *(_DWORD *)v245;
      v52 = v44;
      while (1)
      {
        v48 = (v52 + 1);
        if (v51 - 1 == v52)
          break;
        ++v52;
        LODWORD(v44) = v48;
        if ((*(_DWORD *)(*(_QWORD *)&buf[16] + (v48 << 6) + 8) & 0x80000000) != 0)
          goto LABEL_71;
      }
      LODWORD(v44) = v51;
LABEL_71:
      ;
    }
    while (v43 != (_DWORD)v44);
  }
  if (!*a9)
    goto LABEL_79;
  v53 = 0;
  if (v47)
  {
    v54 = (int *)(*(_QWORD *)&buf[16] + 8);
    while (1)
    {
      v55 = *v54;
      v54 += 16;
      if (v55 < 0)
        break;
      if (v47 == ++v53)
      {
        LODWORD(v53) = v47;
        break;
      }
    }
  }
  if (v47 != (_DWORD)v53)
  {
    v57 = v53;
    v58 = *(_QWORD *)&buf[16];
    do
    {
      v59 = *(id *)(v58 + (v57 << 6) + 16);
      objc_msgSend(v59, "vertexAttributeDataForAttributeNamed:", CFSTR("textureCoordinate"));
      v60 = (void *)objc_claimAutoreleasedReturnValue();

      if (v60)
        objc_msgSend(v59, "addTangentBasisForTextureCoordinateAttributeNamed:tangentAttributeNamed:bitangentAttributeNamed:", CFSTR("textureCoordinate"), CFSTR("tangent"), CFSTR("bitangent"));

      v56 = *(_DWORD *)v245;
      v58 = *(_QWORD *)&buf[16];
      if (*(_DWORD *)v245 <= (v53 + 1))
        v61 = v53 + 1;
      else
        v61 = *(_DWORD *)v245;
      while (1)
      {
        v57 = (v53 + 1);
        if (v61 - 1 == (_DWORD)v53)
          break;
        LODWORD(v53) = v53 + 1;
        v62 = v57;
        if ((*(_DWORD *)(*(_QWORD *)&buf[16] + (v57 << 6) + 8) & 0x80000000) != 0)
          goto LABEL_90;
      }
      v62 = v61;
LABEL_90:
      LODWORD(v53) = v62;
    }
    while (v47 != v62);
  }
  else
  {
LABEL_79:
    v56 = v47;
  }
  v63 = 0;
  if (v56)
  {
    v64 = (int *)(*(_QWORD *)&buf[16] + 8);
    while (1)
    {
      v65 = *v64;
      v64 += 16;
      if (v65 < 0)
        break;
      if (v56 == ++v63)
      {
        LODWORD(v63) = v56;
        break;
      }
    }
  }
  if (v56 == (_DWORD)v63)
  {
LABEL_97:
    goto LABEL_98;
  }
  v189 = a4;
  v67 = 0;
  v190 = 0;
  v192 = (_anonymous_namespace_ *)(a3 + 40);
  v68 = v63;
  v69 = *(_QWORD *)&buf[16];
  do
  {
    v70 = v69 + (v68 << 6);
    v71 = (re *)*(id *)(v70 + 16);
    v73 = v71;
    *(_QWORD *)&v260 = v71;
    if (a9[2]
      || (v74 = *(_QWORD *)(v70 + 40),
          isSkinnedMesh = re::isSkinnedMesh(v71, v72),
          v69 = *(_QWORD *)&buf[16],
          isSkinnedMesh))
    {
      ++v67;
      v76 = &v197;
    }
    else
    {
      v190 += v74;
      v67 += v74;
      v76 = &v201;
    }
    v77 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * ((unint64_t)v73 ^ ((unint64_t)v73 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                              * ((unint64_t)v73 ^ ((unint64_t)v73 >> 30))) >> 27));
    v78 = v77 ^ (v77 >> 31);
    if (!*(_QWORD *)v76)
    {
      LODWORD(v79) = 0;
LABEL_120:
      ++*((_DWORD *)v76 + 10);
      goto LABEL_121;
    }
    v79 = v78 % *((unsigned int *)v76 + 6);
    v80 = *(unsigned int *)(*((_QWORD *)v76 + 1) + 4 * v79);
    if ((_DWORD)v80 == 0x7FFFFFFF)
      goto LABEL_120;
    v81 = *((_QWORD *)v76 + 2);
    while (*(re **)(v81 + (v80 << 6) + 16) != v73)
    {
      v80 = *(_DWORD *)(v81 + (v80 << 6) + 8) & 0x7FFFFFFF;
      if ((_DWORD)v80 == 0x7FFFFFFF)
        goto LABEL_120;
    }
LABEL_121:

    v69 = *(_QWORD *)&buf[16];
    if (*(_DWORD *)v245 <= (v63 + 1))
      v82 = v63 + 1;
    else
      v82 = *(_DWORD *)v245;
    while (1)
    {
      v68 = (v63 + 1);
      if (v82 - 1 == (_DWORD)v63)
        break;
      LODWORD(v63) = v63 + 1;
      v83 = v68;
      if ((*(_DWORD *)(*(_QWORD *)&buf[16] + (v68 << 6) + 8) & 0x80000000) != 0)
        goto LABEL_128;
    }
    v83 = v82;
LABEL_128:
    LODWORD(v63) = v83;
  }
  while (v56 != v83);
  v85 = a3;
  v84 = v189;
  if (v67)
  {
    if (*(_QWORD *)(a3 + 8) < v67)
      re::DynamicArray<re::GeomModelWithLods>::setCapacity((_QWORD *)a3, v67);
    if (v190 <= 1)
      v86 = 1;
    else
      v86 = v190;
    if (*(_QWORD *)(a3 + 48) < v86)
      re::DynamicArray<re::RigSplineIKJoint>::setCapacity(v192, v86);
    v87 = *(_QWORD *)(a5 + 16);
    *(_QWORD *)&v260 = *(_QWORD *)(a5 + 32);
    *((_QWORD *)&v260 + 1) = v87;
    re::GeomScene::setSkeletons(a3, (uint64_t)&v260);
    if (v199)
    {
      v88 = 0;
      v89 = (int *)(v198 + 8);
      while (1)
      {
        v90 = *v89;
        v89 += 16;
        if (v90 < 0)
          break;
        if (v199 == ++v88)
        {
          LODWORD(v88) = v199;
          break;
        }
      }
    }
    else
    {
      LODWORD(v88) = 0;
    }
    if (v199 != (_DWORD)v88)
    {
      v91 = v88;
      v179.i64[0] = (uint64_t)v273;
      v92 = v198;
      v177.i64[0] = (uint64_t)&v262;
      v183 = v199;
      v181.i64[0] = (uint64_t)v245;
      do
      {
        v93 = v92 + (v91 << 6);
        v94 = *(id *)(v93 + 16);
        v95 = (re::internal::GeomAttributeContainer *)*(unsigned int *)(v85 + 16);
        v96 = v94;
        *(_QWORD *)buf = v96;
        v191 = v96;

        re::GeomModelWithLods::GeomModelWithLods((re::GeomModelWithLods *)buf);
        re::DynamicArray<re::GeomModel>::add((_anonymous_namespace_ *)v245, (uint64_t)&v260);
        v97.n128_f64[0] = re::DynamicArray<re::GeomModelWithLods>::add((_anonymous_namespace_ *)v85, (uint64_t)buf);
        v98 = (_QWORD *)(v93 + 40);
        v99 = *(__int128 **)(v93 + 40);
        if (v99)
        {
          v100 = 0;
          v101 = (_QWORD *)(v93 + 56);
          v102 = 80;
          do
          {
            v103 = *v98;
            if (*v98 <= (unint64_t)v100)
              goto LABEL_336;
            v104 = (__int128 *)(*v101 + v102);
            v105 = *v104;
            v106 = v104[1];
            v107 = v104[3];
            v232 = v104[2];
            v233 = v107;
            v230 = v105;
            v231 = v106;
            LODWORD(v234) = (_DWORD)v95;
            if ((*((float *)&v105 + 3) == 0.0
               || vabds_f32(0.0, *((float *)&v230 + 3)) < (float)((float)(fabsf(*((float *)&v230 + 3)) + 1.0) * 0.00001))
              && (*((float *)&v231 + 3) == 0.0
               || vabds_f32(0.0, *((float *)&v231 + 3)) < (float)((float)(fabsf(*((float *)&v231 + 3)) + 1.0) * 0.00001))
              && (*((float *)&v232 + 3) == 0.0
               || vabds_f32(0.0, *((float *)&v232 + 3)) < (float)((float)(fabsf(*((float *)&v232 + 3)) + 1.0) * 0.00001))
              && (*((float *)&v107 + 3) == 1.0
               || vabds_f32(1.0, *((float *)&v107 + 3)) < (float)((float)((float)(fabsf(*((float *)&v107 + 3)) + 1.0)
                                                                        + 1.0)
                                                                * 0.00001)))
            {
              HIDWORD(v230) = 0;
              HIDWORD(v231) = 0;
              HIDWORD(v232) = 0;
              HIDWORD(v233) = 1065353216;
            }
            v97 = re::DynamicArray<re::GeomInstance>::add(v192, (uint64_t)&v230);
            v100 = (__int128 *)((char *)v100 + 1);
            v102 += 144;
          }
          while (v99 != v100);
        }
        if (v252)
        {
          if (v256)
            (*(void (**)(__n128))(*(_QWORD *)v252 + 40))(v97);
          v256 = 0;
          v253 = 0;
          v254 = 0;
          v252 = 0;
          ++v255;
        }
        if (v247)
        {
          if (v251)
            (*(void (**)(__n128))(*(_QWORD *)v247 + 40))(v97);
          v251 = 0;
          v248 = 0;
          v249 = 0;
          v247 = 0;
          ++v250;
        }
        re::DynamicArray<re::GeomModel>::deinit((uint64_t)v245);
        if (*(_QWORD *)buf && (buf[8] & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)buf + 40))();
        re::DynamicArray<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::deinit((uint64_t)v273);
        v85 = a3;
        v84 = v189;
        if (v271)
          re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)v272);
        if (v269)
          re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)v270);
        if (*((_QWORD *)&v264 + 1))
        {
          v108 = v268;
          if (v268)
            (*(void (**)(void))(**((_QWORD **)&v264 + 1) + 40))();
          v268 = 0;
          v265 = 0;
          v266 = 0;
          *((_QWORD *)&v264 + 1) = 0;
          ++v267;
        }
        re::DynamicArray<re::GeomMesh>::deinit((uint64_t)&v262, v108);
        if ((_QWORD)v260 && (BYTE8(v260) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v260 + 40))();

        if (v183 <= (int)v88 + 1)
          v109 = v88 + 1;
        else
          v109 = v183;
        while (1)
        {
          v91 = (v88 + 1);
          if (v109 - 1 == (_DWORD)v88)
            break;
          LODWORD(v88) = v88 + 1;
          v110 = v91;
          if ((*(_DWORD *)(v92 + (v91 << 6) + 8) & 0x80000000) != 0)
            goto LABEL_189;
        }
        v110 = v109;
LABEL_189:
        LODWORD(v88) = v110;
      }
      while (v183 != v110);
    }
    if (HIDWORD(v202))
    {
      re::GeomModel::GeomModel((re::GeomModel *)&v260);
      if (v203)
      {
        v111 = 0;
        v112 = (int *)(v202 + 8);
        while (1)
        {
          v113 = *v112;
          v112 += 16;
          if (v113 < 0)
            break;
          if (v203 == ++v111)
          {
            LODWORD(v111) = v203;
            break;
          }
        }
      }
      else
      {
        LODWORD(v111) = 0;
      }
      if (v203 == (_DWORD)v111)
      {
LABEL_198:
        if (a2)
          v114 = a2;
        else
          v114 = "";
        v115 = strlen(v114);
        *(_QWORD *)buf = v114;
        *(_QWORD *)&buf[8] = v115;
        re::DynamicString::operator=((re::DynamicString *)&v260, (uint64_t)buf);
        v230 = xmmword_2260E5F10;
        v231 = xmmword_2260E5F20;
        v232 = xmmword_2260E5F40;
        v233 = xmmword_2260E5D70;
        LODWORD(v234) = *(_QWORD *)(v85 + 16);
        re::GeomModelWithLods::GeomModelWithLods((re::GeomModelWithLods *)buf);
        re::DynamicArray<re::GeomModel>::add((_anonymous_namespace_ *)v245, (uint64_t)&v260);
        re::DynamicArray<re::GeomModelWithLods>::add((_anonymous_namespace_ *)v85, (uint64_t)buf);
        v116 = re::DynamicArray<re::GeomInstance>::add(v192, (uint64_t)&v230);
        if (v252)
        {
          if (v256)
            (*(void (**)(__n128))(*(_QWORD *)v252 + 40))(v116);
          v256 = 0;
          v253 = 0;
          v254 = 0;
          v252 = 0;
          ++v255;
        }
        if (v247)
        {
          if (v251)
            (*(void (**)(__n128))(*(_QWORD *)v247 + 40))(v116);
          v251 = 0;
          v248 = 0;
          v249 = 0;
          v247 = 0;
          ++v250;
        }
        re::DynamicArray<re::GeomModel>::deinit((uint64_t)v245);
        if (*(_QWORD *)buf && (buf[8] & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)buf + 40))();
        re::DynamicArray<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::deinit((uint64_t)v273);
        if (v271)
          re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)v272);
        if (v269)
          re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)v270);
        if (*((_QWORD *)&v264 + 1))
        {
          v117 = v268;
          if (v268)
            (*(void (**)(void))(**((_QWORD **)&v264 + 1) + 40))();
          v268 = 0;
          v265 = 0;
          v266 = 0;
          *((_QWORD *)&v264 + 1) = 0;
          ++v267;
        }
        re::DynamicArray<re::GeomMesh>::deinit((uint64_t)&v262, v117);
        if ((_QWORD)v260 && (BYTE8(v260) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v260 + 40))();
        goto LABEL_223;
      }
      v124 = v111;
      v125 = &v262;
      v95 = (re::internal::GeomAttributeContainer *)v243;
      v126 = v202;
      v166 = v203;
      v169 = v202;
      while (1)
      {
        v168 = v111;
        v127 = v126 + (v124 << 6);
        v128 = *(id *)(v127 + 16);
        *(_QWORD *)&v230 = v128;
        v167 = v128;

        v129 = *(_QWORD *)(v127 + 40);
        v172 = (unint64_t *)(v127 + 40);
        if ((unint64_t)v263 + v129 * v246 <= 1)
          v130 = 1;
        else
          v130 = v263 + v129 * v246;
        if (*((_QWORD *)&v262 + 1) < v130)
        {
          re::DynamicArray<re::GeomMesh>::setCapacity(v125, v130);
          v129 = *v172;
        }
        if (v129)
          break;
        v159 = v179;
        v158 = v181;
        v160 = v177;
LABEL_315:
        v177 = v160;
        v179 = v159;
        v181 = v158;
        re::DynamicArray<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::deinit((uint64_t)v259);
        if (v257)
          re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)v258);
        if ((_BYTE)v252)
          re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)&v253);
        if (v247)
        {
          v161 = v251;
          if (v251)
            (*(void (**)(void))(*(_QWORD *)v247 + 40))();
          v251 = 0;
          v248 = 0;
          v249 = 0;
          v247 = 0;
          ++v250;
        }
        re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v245, v161);
        if (*(_QWORD *)buf && (buf[8] & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)buf + 40))();

        v162 = v168;
        v126 = v169;
        if (v166 <= v168 + 1)
          v163 = v168 + 1;
        else
          v163 = v166;
        while (1)
        {
          v124 = (v162 + 1);
          if (v163 - 1 == v162)
            break;
          ++v162;
          v164 = v124;
          if ((*(_DWORD *)(v169 + (v124 << 6) + 8) & 0x80000000) != 0)
            goto LABEL_333;
        }
        v164 = v163;
LABEL_333:
        LODWORD(v111) = v164;
        if (v166 == v164)
          goto LABEL_198;
      }
      v131 = 0;
      v171 = (_QWORD *)(v169 + (v124 << 6) + 56);
      v132 = v177.i32[3];
      v133 = v179.i32[3];
      v134 = v181.i32[3];
      v170 = v129;
      while (2)
      {
        v174 = v134;
        v175 = v133;
        v176 = v132;
        v184 = v131;
        re::DynamicString::DynamicString((re::DynamicString *)&v230, (const re::DynamicString *)buf);
        re::DynamicArray<re::GeomMesh>::DynamicArray((uint64_t)&v232, (uint64_t *)v245);
        re::DynamicArray<float>::DynamicArray((uint64_t)&v234 + 8, &v247);
        v239 = v252;
        if ((_BYTE)v252)
          re::DynamicArray<re::GeomIndexMap>::DynamicArray((uint64_t)v240, &v253);
        v241 = v257;
        if (v257)
          re::DynamicArray<re::GeomIndexMap>::DynamicArray((uint64_t)v242, v258);
        re::DynamicArray<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::DynamicArray((uint64_t)v243, v259);
        v135 = 0uLL;
        v226 = 0u;
        v227 = 0u;
        v224 = 0u;
        v225 = 0u;
        v222 = 0u;
        v223 = 0u;
        memset(&v221[2], 0, 32);
        v228 = xmmword_2260E5D70;
        v229 = 0u;
        v92 = *v172;
        v136 = v184;
        if (*v172 <= v184)
          goto LABEL_347;
        v137 = *v171 + 144 * v184;
        v289.columns[0] = *(simd_float3 *)(v137 + 80);
        v289.columns[1] = *(simd_float3 *)(v137 + 96);
        v138 = *(float32x4_t *)(v137 + 128);
        v222 = *(float32x4_t *)(v137 + 112);
        v223 = v138;
        *(simd_float3 *)&v221[2] = v289.columns[0];
        *(simd_float3 *)&v221[18] = v289.columns[1];
        v289.columns[2] = (simd_float3)v222;
        v290 = __invert_f3(v289);
        v180 = v290.columns[1];
        v182 = v290.columns[0];
        DWORD2(v224) = v290.columns[2].i32[0];
        *(_QWORD *)&v224 = vzip1q_s32((int32x4_t)v290.columns[0], (int32x4_t)v290.columns[1]).u64[0];
        DWORD2(v225) = v290.columns[2].i32[1];
        v178 = v290.columns[2];
        DWORD2(v226) = v290.columns[2].i32[2];
        *(_QWORD *)&v225 = vtrn2q_s32((int32x4_t)v290.columns[0], (int32x4_t)v290.columns[1]).u64[0];
        *(_QWORD *)&v226 = vzip1q_s32(vdupq_laneq_s32((int32x4_t)v290.columns[0], 2), vdupq_laneq_s32((int32x4_t)v290.columns[1], 2)).u64[0];
        re::decomposeScaleRotationTranslation<float>((uint64_t)&v221[2], &v227, &v228, &v229);
        v218 = 0;
        v283 = xmmword_2260E5F10;
        v284 = xmmword_2260E5F20;
        v285 = xmmword_2260E5F40;
        v286 = xmmword_2260E5D70;
        if (re::areAlmostEqual<float>((float *)&v221[2], (float *)&v283))
        {
LABEL_296:
          v156 = v233;
          if ((_QWORD)v233)
          {
            v98 = 0;
            v95 = 0;
            v92 = 0;
            do
            {
              v102 = v233;
              if ((unint64_t)v233 <= v92)
                goto LABEL_337;
              re::DynamicArray<re::GeomMesh>::add((uint64_t)v125, (uint64_t)v98 + v234);
              v102 = v236;
              if (v236 <= v92)
                goto LABEL_338;
              re::DynamicArray<int>::add((_QWORD *)&v264 + 1, (re::internal::GeomAttributeContainer *)((char *)v95 + (_QWORD)v238));
              ++v92;
              v95 = (re::internal::GeomAttributeContainer *)((char *)v95 + 4);
              v98 += 92;
            }
            while (v156 != v92);
          }
        }
        else
        {
          v139 = vmulq_f32(v229, v229);
          if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v139, 2), vaddq_f32(v139, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v139.f32, 1))).f32[0]) >= 1.0e-10)v218 |= 1u;
          if (*(float *)v227.i32 != 1.0
            && fabsf(*(float *)v227.i32 + -1.0) >= (float)((float)((float)(fabsf(*(float *)v227.i32) + 1.0) + 1.0)
                                                         * 0.00001)
            || *(float *)&v227.i32[1] != 1.0
            && fabsf(*(float *)&v227.i32[1] + -1.0) >= (float)((float)((float)(fabsf(*(float *)&v227.i32[1]) + 1.0) + 1.0)
                                                             * 0.00001)
            || *(float *)&v227.i32[2] != 1.0
            && fabsf(*(float *)&v227.i32[2] + -1.0) >= (float)((float)((float)(fabsf(*(float *)&v227.i32[2]) + 1.0) + 1.0)
                                                             * 0.00001))
          {
            v218 |= 2u;
          }
          if ((*(float *)&v228 == 0.0 || (v140 = fabsf(*(float *)&v228), v140 < (float)((float)(v140 + 1.0) * 0.00001)))
            && (*((float *)&v228 + 1) == 0.0
             || (v141 = fabsf(*((float *)&v228 + 1)), v141 < (float)((float)(v141 + 1.0) * 0.00001)))
            && (*((float *)&v228 + 2) == 0.0
             || (v142 = fabsf(*((float *)&v228 + 2)), v142 < (float)((float)(v142 + 1.0) * 0.00001)))
            && (*((float *)&v228 + 3) == 1.0
             || fabsf(*((float *)&v228 + 3) + -1.0) < (float)((float)((float)(fabsf(*((float *)&v228 + 3)) + 1.0) + 1.0)
                                                            * 0.00001)))
          {
            if (!v218)
              goto LABEL_296;
          }
          else
          {
            v218 |= 4u;
          }
          v187 = v233;
          if ((_QWORD)v233)
          {
            v92 = 0;
            while (1)
            {
              v98 = (_QWORD *)v233;
              if ((unint64_t)v233 <= v92)
                goto LABEL_339;
              re::transform((re::GeomMesh *)(v234 + 736 * v92), (float32x4_t *)&v221[2]);
              v98 = (_QWORD *)v233;
              if ((unint64_t)v233 <= v92)
                break;
              v100 = v125;
              v143 = v234 + 736 * v92;
              v103 = *(unsigned int *)(v143 + 200);
              if ((_DWORD)v103)
              {
                v144 = 0;
                v95 = (re::internal::GeomAttributeContainer *)(v143 + 176);
                v98 = (_QWORD *)*(unsigned int *)(v234 + 736 * v92 + 16);
                do
                {
                  v145 = re::internal::GeomAttributeContainer::attributeByIndex(v95, v144);
                  if (*(_BYTE *)(v145 + 17) == 7)
                  {
                    v146 = v145;
                    v147 = *(const char **)(v145 + 8);
                    v148 = strlen(v147);
                    if (v148 >= 0x15)
                    {
                      v149 = *(_QWORD *)&v147[v148 - 21] == 0x6154646E656C627CLL
                          && *(_QWORD *)&v147[v148 - 13] == 0x44736F5074656772;
                      if (v149 && *(_QWORD *)&v147[v148 - 8] == 0x7361746C6544736FLL)
                      {
                        v151 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v146 + 16))(v146);
                        if (v151)
                        {
                          v152 = (float32x2_t *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v146, 0);
                          v151 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v146 + 16))(v146);
                          if ((_DWORD)v98)
                            goto LABEL_291;
                        }
                        else
                        {
                          v152 = 0;
                          if ((_DWORD)v98)
                          {
LABEL_291:
                            v102 = v151;
                            v153 = v151;
                            v154 = v98;
                            while (v153)
                            {
                              v155 = vaddq_f32(v223, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)&v221[2], COERCE_FLOAT(*(_OWORD *)v152->f32)), *(float32x4_t *)&v221[18], *v152, 1), v222, *(float32x4_t *)v152->f32, 2));
                              *(float32x4_t *)v152->f32 = vdivq_f32(v155, (float32x4_t)vdupq_laneq_s32((int32x4_t)v155, 3));
                              v152 += 2;
                              --v153;
                              v154 = (_QWORD *)((char *)v154 - 1);
                              if (!v154)
                                goto LABEL_294;
                            }
                            v217 = 0;
                            v286 = 0u;
                            v287 = 0u;
                            v284 = 0u;
                            v285 = 0u;
                            v283 = 0u;
                            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                            v275 = 136315906;
                            v276 = "operator[]";
                            v277 = 1024;
                            v278 = 609;
                            v279 = 2048;
                            v280 = v102;
                            v281 = 2048;
                            v282 = (_QWORD *)v102;
                            _os_log_send_and_compose_impl();
                            _os_crash_msg();
                            __break(1u);
LABEL_336:
                            *(_QWORD *)&v283 = 0;
                            v233 = 0u;
                            v234 = 0u;
                            v231 = 0u;
                            v232 = 0u;
                            v230 = 0u;
                            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                            v218 = 136315906;
                            v219 = "operator[]";
                            v220 = 1024;
                            *(_DWORD *)v221 = 797;
                            *(_WORD *)&v221[4] = 2048;
                            *(_QWORD *)&v221[6] = v100;
                            *(_WORD *)&v221[14] = 2048;
                            *(_QWORD *)&v221[16] = v103;
                            _os_log_send_and_compose_impl();
                            _os_crash_msg();
                            __break(1u);
LABEL_337:
                            v217 = 0;
                            v286 = 0u;
                            v287 = 0u;
                            v284 = 0u;
                            v285 = 0u;
                            v283 = 0u;
                            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                            v275 = 136315906;
                            v276 = "operator[]";
                            v277 = 1024;
                            v278 = 789;
                            v279 = 2048;
                            v280 = v92;
                            v281 = 2048;
                            v282 = (_QWORD *)v102;
                            _os_log_send_and_compose_impl();
                            _os_crash_msg();
                            __break(1u);
LABEL_338:
                            v217 = 0;
                            v286 = 0u;
                            v287 = 0u;
                            v284 = 0u;
                            v285 = 0u;
                            v283 = 0u;
                            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                            v275 = 136315906;
                            v276 = "operator[]";
                            v277 = 1024;
                            v278 = 789;
                            v279 = 2048;
                            v280 = v92;
                            v281 = 2048;
                            v282 = (_QWORD *)v102;
                            _os_log_send_and_compose_impl();
                            _os_crash_msg();
                            __break(1u);
LABEL_339:
                            v217 = 0;
                            v286 = 0u;
                            v287 = 0u;
                            v284 = 0u;
                            v285 = 0u;
                            v283 = 0u;
                            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                            v275 = 136315906;
                            v276 = "operator[]";
                            v277 = 1024;
                            v278 = 789;
                            v279 = 2048;
                            v280 = v92;
                            v281 = 2048;
                            v282 = v98;
                            _os_log_send_and_compose_impl();
                            _os_crash_msg();
                            __break(1u);
                            goto LABEL_340;
                          }
                        }
                      }
                    }
                  }
LABEL_294:
                  ++v144;
                }
                while (v144 != (_DWORD)v103);
              }
              ++v92;
              v85 = a3;
              v84 = v189;
              v125 = v100;
              if (v92 == v187)
                goto LABEL_296;
            }
LABEL_340:
            v217 = 0;
            v286 = 0u;
            v287 = 0u;
            v284 = 0u;
            v285 = 0u;
            v283 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v275 = 136315906;
            v276 = "operator[]";
            v277 = 1024;
            v278 = 789;
            v279 = 2048;
            v280 = v92;
            v281 = 2048;
            v282 = v98;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_341;
          }
        }
        v95 = (re::internal::GeomAttributeContainer *)v243;
        re::DynamicArray<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::deinit((uint64_t)v243);
        if (v241)
          re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)v242);
        if (v239)
          re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)v240);
        if (*((_QWORD *)&v234 + 1))
        {
          v157 = v238;
          if (v238)
            (*(void (**)(void))(**((_QWORD **)&v234 + 1) + 40))();
          v238 = 0;
          v235 = 0;
          v236 = 0;
          *((_QWORD *)&v234 + 1) = 0;
          ++v237;
        }
        re::DynamicArray<re::GeomMesh>::deinit((uint64_t)&v232, v157);
        if ((_QWORD)v230 && (BYTE8(v230) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v230 + 40))();
        v158 = v182;
        v158.i32[3] = v174;
        v159 = v180;
        v159.i32[3] = v175;
        v131 = v184 + 1;
        v160 = v178;
        v160.i32[3] = v176;
        v132 = v176;
        v133 = v175;
        v134 = v174;
        if (v184 + 1 == v170)
          goto LABEL_315;
        continue;
      }
    }
LABEL_223:
    if (a9[3])
    {
      v118 = *(_QWORD *)(v85 + 16);
      if (v118)
      {
        v119 = 0;
        v92 = 0;
        while (1)
        {
          *(_QWORD *)v245 = 0;
          memset(buf, 0, 28);
          *(_QWORD *)&v232 = 0;
          *(_QWORD *)&v231 = 0;
          v230 = 0uLL;
          DWORD2(v231) = 0;
          v95 = *(re::internal::GeomAttributeContainer **)(v85 + 16);
          if ((unint64_t)v95 <= v92)
            break;
          v120 = *(_QWORD *)(v85 + 32) + v119;
          if (!*(_QWORD *)(v120 + 48))
            goto LABEL_342;
          v95 = *(re::internal::GeomAttributeContainer **)(v85 + 16);
          if ((unint64_t)v95 <= v92)
            goto LABEL_343;
          v121 = *(_QWORD *)(v85 + 32) + v119;
          if (!*(_QWORD *)(v121 + 48))
            goto LABEL_344;
          re::DynamicArray<re::GeomMesh>::operator=(*(_QWORD *)(v121 + 64) + 32, (uint64_t)buf);
          v95 = *(re::internal::GeomAttributeContainer **)(v85 + 16);
          if ((unint64_t)v95 <= v92)
            goto LABEL_345;
          v122 = *(_QWORD *)(v85 + 32) + v119;
          if (!*(_QWORD *)(v122 + 48))
            goto LABEL_346;
          re::DynamicArray<re::RigComponentConstraint>::operator=(*(_QWORD *)(v122 + 64) + 72, (uint64_t)&v230);
          if ((_QWORD)v230)
          {
            v123 = (re::GeomAttribute *)v232;
            if ((_QWORD)v232)
              (*(void (**)(void))(*(_QWORD *)v230 + 40))();
          }
          re::DynamicArray<re::GeomMesh>::deinit((uint64_t)buf, v123);
          ++v92;
          v119 += 152;
          if (v118 == v92)
            goto LABEL_98;
        }
LABEL_341:
        *(_QWORD *)&v283 = 0;
        v264 = 0u;
        v263 = 0u;
        v262 = 0u;
        v261 = 0u;
        v260 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v218 = 136315906;
        v219 = "operator[]";
        v220 = 1024;
        *(_DWORD *)v221 = 789;
        *(_WORD *)&v221[4] = 2048;
        *(_QWORD *)&v221[6] = v92;
        *(_WORD *)&v221[14] = 2048;
        *(_QWORD *)&v221[16] = v95;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_342:
        *(_QWORD *)&v283 = 0;
        v264 = 0u;
        v263 = 0u;
        v262 = 0u;
        v261 = 0u;
        v260 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v218 = 136315906;
        v219 = "operator[]";
        v220 = 1024;
        *(_DWORD *)v221 = 789;
        *(_WORD *)&v221[4] = 2048;
        *(_QWORD *)&v221[6] = 0;
        *(_WORD *)&v221[14] = 2048;
        *(_QWORD *)&v221[16] = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_343:
        *(_QWORD *)&v283 = 0;
        v264 = 0u;
        v263 = 0u;
        v262 = 0u;
        v261 = 0u;
        v260 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v218 = 136315906;
        v219 = "operator[]";
        v220 = 1024;
        *(_DWORD *)v221 = 789;
        *(_WORD *)&v221[4] = 2048;
        *(_QWORD *)&v221[6] = v92;
        *(_WORD *)&v221[14] = 2048;
        *(_QWORD *)&v221[16] = v95;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_344:
        *(_QWORD *)&v283 = 0;
        v264 = 0u;
        v263 = 0u;
        v262 = 0u;
        v261 = 0u;
        v260 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v218 = 136315906;
        v219 = "operator[]";
        v220 = 1024;
        *(_DWORD *)v221 = 789;
        *(_WORD *)&v221[4] = 2048;
        *(_QWORD *)&v221[6] = 0;
        *(_WORD *)&v221[14] = 2048;
        *(_QWORD *)&v221[16] = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_345:
        *(_QWORD *)&v283 = 0;
        v264 = 0u;
        v263 = 0u;
        v262 = 0u;
        v261 = 0u;
        v260 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v218 = 136315906;
        v219 = "operator[]";
        v220 = 1024;
        *(_DWORD *)v221 = 789;
        *(_WORD *)&v221[4] = 2048;
        *(_QWORD *)&v221[6] = v92;
        *(_WORD *)&v221[14] = 2048;
        *(_QWORD *)&v221[16] = v95;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_346:
        *(_QWORD *)&v283 = 0;
        v264 = 0u;
        v263 = 0u;
        v262 = 0u;
        v261 = 0u;
        v260 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v218 = 136315906;
        v219 = "operator[]";
        v220 = 1024;
        *(_DWORD *)v221 = 789;
        *(_WORD *)&v221[4] = 2048;
        *(_QWORD *)&v221[6] = 0;
        *(_WORD *)&v221[14] = 2048;
        *(_QWORD *)&v221[16] = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_347:
        v217 = 0;
        v286 = v135;
        v287 = v135;
        v284 = v135;
        v285 = v135;
        v283 = v135;
        v165 = v136;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v275 = 136315906;
        v276 = "operator[]";
        v277 = 1024;
        v278 = 797;
        v279 = 2048;
        v280 = v165;
        v281 = 2048;
        v282 = (_QWORD *)v92;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
  }
LABEL_98:
  if (!v205[0] && v207 && (v208 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v207 + 40))();
  if (v210 && (v211 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v210 + 40))();
  if (v212 && (v213 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v212 + 40))();
  re::DynamicArray<re::ObjCObject>::deinit((uint64_t)v214);

  return 1;
}

void re::`anonymous namespace'::traverseTransformHierarchy(void *a1, uint64_t a2, uint64_t *a3, float32x4_t *a4, uint64_t a5, re::DynamicString *a6, int a7)
{
  _anonymous_namespace_ *v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  _anonymous_namespace_ *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _anonymous_namespace_ *v22;
  void *v23;
  void *v24;
  unint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  MDLObject *v36;
  uint64_t *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  re::DynamicString **v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  re::DynamicString *v60;
  re::DynamicString *v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  re::DynamicString *v70;
  uint64_t v71;
  re::DynamicString *v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  unint64_t v83;
  const char *v84;
  uint64_t v85;
  const char *v86;
  _anonymous_namespace_ *v87;
  unint64_t v88;
  const char *v89;
  size_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  re::DynamicString *v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  void *v100;
  unint64_t v101;
  unint64_t v102;
  const char *v103;
  size_t v104;
  size_t v105;
  size_t v106;
  void *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t i;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t j;
  uint64_t v119;
  BOOL v120;
  unint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  int v127;
  void *v128;
  void *v129;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  float32x4_t v139;
  __int128 v140;
  re::DynamicString *v141[2];
  float32x4_t v142;
  uint64_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  uint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  _BYTE v161[128];
  _BYTE v162[128];
  uint64_t v163;

  v163 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  v154 = 0;
  v155 = 0;
  v156 = 0;
  re::DynamicString::setCapacity(&v153, 0);
  -[_anonymous_namespace_ name](v12, "name");
  v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v14 = objc_msgSend(v13, "UTF8String");

  if (v14)
  {
    -[_anonymous_namespace_ name](v12, "name");
    v15 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v139.i64[0] = objc_msgSend(v15, "UTF8String");
    v139.i64[1] = strlen((const char *)v139.i64[0]);
    re::DynamicString::operator=((re::DynamicString *)&v153, (uint64_t)&v139);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1880], "UUID");
    v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "UUIDString");
    v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    re::DynamicString::assignf((re::DynamicString *)&v153, "Untitled MDLObject %s", (const char *)objc_msgSend(v16, "UTF8String"));

  }
  v17 = (_anonymous_namespace_ *)re::DynamicArray<MDLObject * {__strong}>::DynamicArray((uint64_t)&v148, a3);
  v18 = v150;
  if (v150 >= v149)
  {
    if (v149 < v150 + 1)
    {
      if (v148)
      {
        v19 = 8;
        if (v149)
          v19 = 2 * v149;
        if (v19 <= v150 + 1)
          v20 = v150 + 1;
        else
          v20 = v19;
        re::DynamicArray<REResourceSharingClientObject * {__strong}>::setCapacity(&v148, v20);
      }
      else
      {
        re::DynamicArray<REResourceSharingClientObject * {__strong}>::setCapacity(&v148, v18 + 1);
        ++v151;
      }
    }
    v18 = v150;
  }
  v21 = v152;
  v22 = v12;
  *(_QWORD *)(v21 + 8 * v18) = v22;
  ++v150;
  ++v151;
  -[_anonymous_namespace_ transform](v22, "transform");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = v23;
  if (v23)
  {
    objc_msgSend(v23, "matrix");
    v25 = 0;
    v26 = *a4;
    v27 = a4[1];
    v28 = a4[2];
    v29 = a4[3];
    v157 = v30;
    v158 = v31;
    v159 = v32;
    v160 = v33;
    do
    {
      *(float32x4_t *)((char *)&v139 + v25) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)((char *)&v157 + v25))), v27, *(float32x2_t *)&v157.f32[v25 / 4], 1), v28, *(float32x4_t *)((char *)&v157 + v25), 2), v29, *(float32x4_t *)((char *)&v157 + v25), 3);
      v25 += 16;
    }
    while (v25 != 64);
    v157 = v139;
    v158 = (float32x4_t)v140;
    v159 = *(float32x4_t *)v141;
    v160 = v142;
  }
  else
  {
    v34 = a4[1];
    v157 = *a4;
    v158 = v34;
    v35 = a4[3];
    v159 = a4[2];
    v160 = v35;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v37 = v22;
    v38 = v37;
    v39 = *(_QWORD *)a2;
    v40 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * ((unint64_t)v37 ^ ((unint64_t)v37 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                              * ((unint64_t)v37 ^ ((unint64_t)v37 >> 30))) >> 27));
    v41 = v40 ^ (v40 >> 31);
    v127 = a7;
    v128 = v24;
    v126 = v37;
    if (*(_QWORD *)a2)
    {
      v39 = v41 % *(unsigned int *)(a2 + 24);
      v42 = *(_QWORD *)(a2 + 8);
      v43 = *(unsigned int *)(v42 + 4 * v39);
      if ((_DWORD)v43 != 0x7FFFFFFF)
      {
        v69 = *(_QWORD *)(a2 + 16);
        if (*(uint64_t **)(v69 + (v43 << 6) + 16) == v37)
        {
LABEL_51:
          v46 = v69 + (v43 << 6) + 24;
LABEL_62:
          v139 = 0u;
          v140 = 0u;
          re::DynamicString::setCapacity(&v139, 0);
          v143 = 0;
          v141[1] = 0;
          v142.i64[0] = 0;
          v141[0] = 0;
          v142.i32[2] = 0;
          v144 = 0u;
          v145 = 0u;
          v146 = 0u;
          v147 = 0u;
          re::DynamicArray<objc_object  {objcproto8DRBuffer}* {__strong}>::operator=((uint64_t)v141, (uint64_t *)&v148);
          re::DynamicString::operator=((re::DynamicString *)&v139, a6);
          v144 = v157;
          v145 = v158;
          v146 = v159;
          v147 = v160;
          v83 = *(_QWORD *)(a5 + 8);
          v84 = *(const char **)(a5 + 16);
          v85 = v83 & 1;
          if ((v83 & 1) != 0)
            v86 = *(const char **)(a5 + 16);
          else
            v86 = (const char *)(a5 + 9);
          v87 = (_anonymous_namespace_ *)strncmp(v86, "mdl__", 5uLL);
          if ((_DWORD)v87
            || ((v139.i8[8] & 1) != 0
              ? (v91 = (unint64_t)v139.i64[1] >> 1)
              : (v91 = v139.i8[8] >> 1),
                !v91))
          {
            if ((v139.i8[8] & 1) != 0)
              v88 = (unint64_t)v139.i64[1] >> 1;
            else
              v88 = v139.i8[8] >> 1;
            if (v88)
            {
              re::DynamicString::append((re::DynamicString *)&v139, ":", 1uLL);
              v83 = *(_QWORD *)(a5 + 8);
              v84 = *(const char **)(a5 + 16);
              v85 = v83 & 1;
            }
            if (v85)
              v89 = v84;
            else
              v89 = (const char *)(a5 + 9);
            if (v85)
              v90 = v83 >> 1;
            else
              v90 = v83 >> 1;
            v87 = (_anonymous_namespace_ *)re::DynamicString::append((re::DynamicString *)&v139, v89, v90);
          }
          v92 = *(_QWORD *)(v46 + 8);
          v93 = *(_QWORD *)(v46 + 16);
          v94 = v93 + 1;
          if (v93 >= v92 && v92 < v94)
          {
            if (*(_QWORD *)v46)
            {
              v119 = 2 * v92;
              v120 = v92 == 0;
              v121 = 8;
              if (!v120)
                v121 = v119;
              if (v121 <= v94)
                v122 = v94;
              else
                v122 = v121;
            }
            else
            {
              ++*(_DWORD *)(v46 + 24);
            }
          }
          v96 = (re::DynamicString *)(*(_QWORD *)(v46 + 32) + 144 * *(_QWORD *)(v46 + 16));
          re::DynamicString::DynamicString(v96, (const re::DynamicString *)&v139);
          re::DynamicArray<MDLObject * {__strong}>::DynamicArray((uint64_t)v96 + 32, (uint64_t *)v141);
          v97 = v144;
          v98 = v145;
          v99 = v147;
          *((float32x4_t *)v96 + 7) = v146;
          *((float32x4_t *)v96 + 8) = v99;
          *((float32x4_t *)v96 + 5) = v97;
          *((float32x4_t *)v96 + 6) = v98;
          ++*(_QWORD *)(v46 + 16);
          ++*(_DWORD *)(v46 + 24);
          re::DynamicArray<re::ObjCObject>::deinit((uint64_t)v141);
          if (v139.i64[0] && (v139.i8[8] & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v139.i64[0] + 40))();

          a7 = v127;
          v24 = v128;
          goto LABEL_91;
        }
        while (1)
        {
          v43 = *(_DWORD *)(v69 + (v43 << 6) + 8) & 0x7FFFFFFF;
          if ((_DWORD)v43 == 0x7FFFFFFF)
            break;
          if (*(uint64_t **)(v69 + (v43 << 6) + 16) == v37)
            goto LABEL_51;
        }
      }
      v141[0] = 0;
      *(_QWORD *)&v140 = 0;
      v139 = 0uLL;
      DWORD2(v140) = 0;
      v44 = *(unsigned int *)(v42 + 4 * v39);
      if ((_DWORD)v44 != 0x7FFFFFFF)
      {
        v45 = *(_QWORD *)(a2 + 16);
        if (*(uint64_t **)(v45 + (v44 << 6) + 16) == v37)
        {
LABEL_27:
          v46 = v45 + (v44 << 6) + 24;
LABEL_61:
          goto LABEL_62;
        }
        while (1)
        {
          v44 = *(_DWORD *)(v45 + (v44 << 6) + 8) & 0x7FFFFFFF;
          if ((_DWORD)v44 == 0x7FFFFFFF)
            break;
          if (*(uint64_t **)(v45 + (v44 << 6) + 16) == v37)
            goto LABEL_27;
        }
      }
    }
    else
    {
      v141[0] = 0;
      *(_QWORD *)&v140 = 0;
      v139 = 0uLL;
      DWORD2(v140) = 0;
    }
    v47 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v47 == 0x7FFFFFFF)
    {
      v47 = *(unsigned int *)(a2 + 32);
      v48 = v47;
      if ((_DWORD)v47 == *(_DWORD *)(a2 + 24))
      {
        LODWORD(v39) = v41 % *(unsigned int *)(a2 + 24);
        v48 = *(_DWORD *)(a2 + 32);
      }
      *(_DWORD *)(a2 + 32) = v48 + 1;
      v49 = *(_QWORD *)(a2 + 16);
      v50 = *(_DWORD *)(v49 + (v47 << 6) + 8);
    }
    else
    {
      v49 = *(_QWORD *)(a2 + 16);
      v50 = *(_DWORD *)(v49 + (v47 << 6) + 8);
      *(_DWORD *)(a2 + 36) = v50 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v49 + (v47 << 6) + 8) = v50 | 0x80000000;
    v51 = v39;
    *(_DWORD *)(*(_QWORD *)(a2 + 16) + (v47 << 6) + 8) = *(_DWORD *)(*(_QWORD *)(a2 + 16) + (v47 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a2 + 8) + 4 * v39);
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + (v47 << 6)) = v41;
    v52 = *(_QWORD *)(a2 + 16) + (v47 << 6);
    *(_QWORD *)(v52 + 16) = v38;
    v53 = *(_QWORD *)(a2 + 16) + (v47 << 6);
    *(_QWORD *)(v53 + 24) = 0;
    v54 = (_QWORD *)(v53 + 24);
    *(_QWORD *)(v53 + 40) = 0;
    v55 = (uint64_t *)(v53 + 40);
    *(_QWORD *)(v53 + 56) = 0;
    v56 = (re::DynamicString **)(v53 + 56);
    *(_QWORD *)(v53 + 32) = 0;
    *(_DWORD *)(v53 + 48) = 0;
    if (v139.i64[0])
    {
      v57 = v140;
      *v54 = v139.i64[0];
      ++*(_DWORD *)(v53 + 48);
      v58 = v140;
      v59 = *v55;
      v124 = v51;
      v125 = v140;
      v123 = v54 + 2;
      if ((unint64_t)v140 >= *v55)
      {
        v70 = v141[0];
        v71 = *v55;
        v72 = *v56;
        if (*v55)
        {
          v73 = 144 * v71;
          do
          {
            re::DynamicString::operator=(v72, v70);
            re::DynamicArray<objc_object  {objcproto8DRBuffer}* {__strong}>::operator=((uint64_t)v72 + 32, (uint64_t *)v70 + 4);
            v74 = *((_OWORD *)v70 + 5);
            v75 = *((_OWORD *)v70 + 6);
            v76 = *((_OWORD *)v70 + 8);
            *((_OWORD *)v72 + 7) = *((_OWORD *)v70 + 7);
            *((_OWORD *)v72 + 8) = v76;
            *((_OWORD *)v72 + 5) = v74;
            *((_OWORD *)v72 + 6) = v75;
            v70 = (re::DynamicString *)((char *)v70 + 144);
            v72 = (re::DynamicString *)((char *)v72 + 144);
            v73 -= 144;
          }
          while (v73);
          v72 = *v56;
          v71 = *v55;
          v70 = v141[0];
          v58 = v125;
        }
        if (v71 != v58)
        {
          v77 = 144 * v71;
          v78 = 144 * v125;
          do
          {
            v79 = (_OWORD *)((char *)v72 + v77);
            re::DynamicString::DynamicString((re::DynamicString *)((char *)v72 + v77), (re::DynamicString *)((char *)v70 + v77));
            re::DynamicArray<MDLObject * {__strong}>::DynamicArray((uint64_t)v72 + v77 + 32, (uint64_t *)((char *)v70 + v77 + 32));
            v80 = *(_OWORD *)((char *)v70 + v77 + 80);
            v81 = *(_OWORD *)((char *)v70 + v77 + 96);
            v82 = *(_OWORD *)((char *)v70 + v77 + 128);
            v79[7] = *(_OWORD *)((char *)v70 + v77 + 112);
            v79[8] = v82;
            v79[5] = v80;
            v79[6] = v81;
            v70 = (re::DynamicString *)((char *)v70 + 144);
            v78 -= 144;
            v72 = (re::DynamicString *)((char *)v72 + 144);
          }
          while (v77 != v78);
        }
      }
      else
      {
        v60 = *v56;
        if ((_QWORD)v140)
        {
          v61 = v141[0];
          v62 = 144 * v140;
          do
          {
            re::DynamicString::operator=(v60, v61);
            re::DynamicArray<objc_object  {objcproto8DRBuffer}* {__strong}>::operator=((uint64_t)v60 + 32, (uint64_t *)v61 + 4);
            v63 = *((_OWORD *)v61 + 5);
            v64 = *((_OWORD *)v61 + 6);
            v65 = *((_OWORD *)v61 + 8);
            *((_OWORD *)v60 + 7) = *((_OWORD *)v61 + 7);
            *((_OWORD *)v60 + 8) = v65;
            *((_OWORD *)v60 + 5) = v63;
            *((_OWORD *)v60 + 6) = v64;
            v61 = (re::DynamicString *)((char *)v61 + 144);
            v60 = (re::DynamicString *)((char *)v60 + 144);
            v62 -= 144;
          }
          while (v62);
          v60 = *v56;
          v59 = *v55;
          v58 = v125;
        }
        if (v58 != v59)
        {
          v66 = (uint64_t)v60 + 144 * v125 + 32;
          v67 = 144 * v59 - 144 * v125;
          do
          {
            re::DynamicArray<re::ObjCObject>::deinit(v66);
            v68 = *(_QWORD *)(v66 - 32);
            if (v68)
            {
              if ((*(_BYTE *)(v66 - 24) & 1) != 0)
                (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v68 + 40))(v68, *(_QWORD *)(v66 - 16));
              *(_OWORD *)(v66 - 32) = 0u;
              *(_OWORD *)(v66 - 16) = 0u;
            }
            v66 += 144;
            v67 -= 144;
          }
          while (v67);
        }
      }
      v51 = v124;
      *v123 = v125;
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 8) + 4 * v51) = v47;
    ++*(_DWORD *)(a2 + 28);
    ++*(_DWORD *)(a2 + 40);
    v46 = *(_QWORD *)(a2 + 16) + ((unint64_t)v47 << 6) + 24;
    goto LABEL_61;
  }
LABEL_91:
  if (!re::objectIsBlendShapeRoot(v22, v36))
  {
    -[_anonymous_namespace_ instance](v22, "instance");
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    if (v100)
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v139, a6);
      if ((v139.i8[8] & 1) != 0)
        v101 = (unint64_t)v139.i64[1] >> 1;
      else
        v101 = v139.i8[8] >> 1;
      if (v101)
        re::DynamicString::append((re::DynamicString *)&v139, ":", 1uLL);
      v102 = *(_QWORD *)(a5 + 8);
      if ((v102 & 1) != 0)
        v103 = *(const char **)(a5 + 16);
      else
        v103 = (const char *)(a5 + 9);
      v104 = v102 >> 1;
      v105 = v102 >> 1;
      if ((*(_QWORD *)(a5 + 8) & 1) != 0)
        v106 = v104;
      else
        v106 = v105;
      re::DynamicString::append((re::DynamicString *)&v139, v103, v106);
      if (v139.i64[0] && (v139.i8[8] & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v139.i64[0] + 40))();
    }
    else
    {
      v129 = v24;
      -[_anonymous_namespace_ componentConformingToProtocol:](v22, "componentConformingToProtocol:", &unk_25584D810);
      v107 = (void *)objc_claimAutoreleasedReturnValue();
      v108 = v107;
      if (v107)
      {
        v137 = 0u;
        v138 = 0u;
        v135 = 0u;
        v136 = 0u;
        v109 = objc_msgSend(v107, "countByEnumeratingWithState:objects:count:", &v135, v162, 16);
        if (v109)
        {
          v110 = v109;
          v111 = *(_QWORD *)v136;
          do
          {
            for (i = 0; i != v110; ++i)
            {
              if (*(_QWORD *)v136 != v111)
                objc_enumerationMutation(v108);
            }
            v110 = objc_msgSend(v108, "countByEnumeratingWithState:objects:count:", &v135, v162, 16);
          }
          while (v110);
        }
      }
      v133 = 0u;
      v134 = 0u;
      v131 = 0u;
      v132 = 0u;
      -[_anonymous_namespace_ children](v22, "children");
      v113 = (void *)objc_claimAutoreleasedReturnValue();
      v114 = objc_msgSend(v113, "countByEnumeratingWithState:objects:count:", &v131, v161, 16);
      if (v114)
      {
        v115 = v114;
        v116 = *(_QWORD *)v132;
        v117 = (a7 + 1);
        do
        {
          for (j = 0; j != v115; ++j)
          {
            if (*(_QWORD *)v132 != v116)
              objc_enumerationMutation(v113);
          }
          v115 = objc_msgSend(v113, "countByEnumeratingWithState:objects:count:", &v131, v161, 16);
        }
        while (v115);
      }

      v24 = v129;
    }

  }
  re::DynamicArray<re::ObjCObject>::deinit((uint64_t)&v148);
  if (v153 && (v154 & 1) != 0)
    (*(void (**)(void))(*v153 + 40))();

}

void re::collectMeshMaterialsFromMDLMesh(id *a1, uint64_t a2, int a3)
{
  BOOL v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  const char *v15;
  void **v16;
  uint64_t v17;
  char v18;
  char v19[8];
  _QWORD v20[4];
  void *v21;
  int v22;
  BOOL v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a3)
    v5 = objc_msgSend(*a1, "subdivisionScheme") == 1;
  else
    v5 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  objc_msgSend(*a1, "submeshes");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v25 != v9)
          objc_enumerationMutation(v6);
        objc_msgSend(*(id *)(*((_QWORD *)&v24 + 1) + 8 * i), "material");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v11;
        if (v11)
        {
          objc_msgSend(v11, "name");
          v13 = (void *)objc_claimAutoreleasedReturnValue();

          if (v13)
          {
            objc_msgSend(v12, "name");
            v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v15 = (const char *)objc_msgSend(v14, "UTF8String");

          }
          else
          {
            v15 = "missingMaterial.rematerialdefinition";
          }
          v21 = 0;
          v23 = 0;
          v16 = re::ObjCObject::operator=(&v21, v12);
          v22 = *(_DWORD *)(a2 + 28);
          v23 = v5;
          v19[0] = v5;
          re::DynamicString::DynamicString((re::DynamicString *)v20, (const re::DynamicString *)&v17);
          re::HashTable<re::ImportMaterialSignature,re::MaterialInfo,re::Hash<re::ImportMaterialSignature>,re::EqualTo<re::ImportMaterialSignature>,true,false>::add<re::MaterialInfo&>(a2, v19, (uint64_t)&v21);
          if (v20[0])
          {
            if ((v20[1] & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v20[0] + 40))();
            memset(v20, 0, sizeof(v20));
          }
          if (v17 && (v18 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v17 + 40))();

        }
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    }
    while (v8);
  }

}

uint64_t *re::HashTable<MDLMesh * {__strong},re::DynamicArray<re::`anonymous namespace'::Instance>,re::Hash<MDLMesh * {__strong}>,re::EqualTo<MDLMesh * {__strong}>,true,false>::~HashTable(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;

          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 64;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

uint64_t re::GeomScene::setSkeletons(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _anonymous_namespace_ *v4;
  unint64_t v5;
  StringID *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9[2];
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[7];

  v3 = result;
  v4 = (_anonymous_namespace_ *)(result + 80);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(result + 88) < v5)
  {
    result = (uint64_t)re::DynamicArray<re::GeomSkeleton>::setCapacity((_QWORD *)(result + 80), v5);
    v5 = *(_QWORD *)(a2 + 8);
  }
  if (v5)
  {
    v6 = *(StringID **)a2;
    v7 = 168 * v5;
    do
    {
      re::GeomSkeleton::fromSkeleton(v6, v9);
      re::DynamicArray<re::GeomSkeleton>::add(v4, v9);
      v8.n128_f64[0] = re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v20);
      if (v17)
      {
        if (v18)
        {
          (*(void (**)(double))(*(_QWORD *)v17 + 40))(v8.n128_f64[0]);
          v18 = 0;
          v19 = 0;
        }
        v17 = 0;
      }
      if (v14)
      {
        if (v15)
        {
          (*(void (**)(__n128))(*(_QWORD *)v14 + 40))(v8);
          v15 = 0;
          v16 = 0;
        }
        v14 = 0;
      }
      if (v11)
      {
        if (v12)
        {
          (*(void (**)(__n128))(*(_QWORD *)v11 + 40))(v8);
          v12 = 0;
          v13 = 0;
        }
        v11 = 0;
      }
      re::FixedArray<re::StringID>::deinit(v10);
      re::StringID::destroyString((re::StringID *)v9);
      LODWORD(v9[0]) = *(_DWORD *)(v3 + 96) - 1;
      result = re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v3 + 120, v6, v9);
      v6 = (StringID *)((char *)v6 + 168);
      v7 -= 168;
    }
    while (v7);
  }
  return result;
}

void re::`anonymous namespace'::convertMdlMeshToGeomModel(uint64_t a1, id *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v11;
  void *v12;
  id v13;
  _anonymous_namespace_ *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  _anonymous_namespace_ *v21;
  id v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  char isKindOfClass;
  re *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  re *v37;
  re *v38;
  void *v39;
  id v40;
  const char *v41;
  size_t v42;
  void *v43;
  unsigned int v44;
  unint64_t v45;
  BOOL v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  const char *v51;
  const char *v52;
  const MDLObject *v53;
  void *v54;
  void *v55;
  void *v56;
  id v57;
  const char *v58;
  void *v59;
  void *v60;
  id v61;
  const char *v62;
  id v63;
  MDLMesh *v64;
  void *v65;
  MDLMesh *v66;
  re::GeomMesh *v67;
  re::GeomMesh *v68;
  re::GeomMesh *v69;
  _anonymous_namespace_ *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  re::GeomAttribute *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  NSObject *v80;
  NSObject *v81;
  const char *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  _anonymous_namespace_ *v86;
  uint64_t v87;
  _QWORD *v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  id *v93;
  void *v94;
  int v95;
  _BOOL4 v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  int v101;
  _BYTE v102[14];
  __int16 v103;
  unint64_t v104;
  __int16 v105;
  unint64_t v106;
  uint8_t buf[16];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;

  v112 = *MEMORY[0x24BDAC8D0];
  re::GeomModel::GeomModel((re::GeomModel *)a1);
  v11 = *a2;
  objc_msgSend(v11, "name");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v90 = v11;
  if (!v12)
    goto LABEL_16;
  objc_msgSend(v11, "name");
  v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v14 = (_anonymous_namespace_ *)objc_msgSend(v13, "UTF8String");
  re::DynamicString::rfind((uint64_t)buf, "_blendShape", &v101);
  if (*(_QWORD *)buf)
  {
    if ((buf[8] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)buf + 40))();
    *(_OWORD *)buf = 0u;
    v108 = 0u;
  }

  if (!(_BYTE)v101)
  {
LABEL_16:
    v97 = 0;
    goto LABEL_31;
  }
  v91 = a5;
  v93 = a2;
  v95 = a6;
  objc_msgSend(v11, "children");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "count");

  if (v16)
  {
    v17 = 0;
    while (1)
    {
      objc_msgSend(v11, "children");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "objectAtIndexedSubscript:", v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "name");
      v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v21 = (_anonymous_namespace_ *)objc_msgSend(v20, "UTF8String");

      re::DynamicString::rfind((uint64_t)buf, "_blendTargets", &v101);
      if ((_BYTE)v101)
        break;
      if (*(_QWORD *)buf && (buf[8] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)buf + 40))();
      if (v16 == ++v17)
      {
        v22 = 0;
LABEL_15:
        v11 = v90;
        goto LABEL_29;
      }
    }
    objc_msgSend(v11, "children");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "objectAtIndexedSubscript:", v17);
    v22 = (id)objc_claimAutoreleasedReturnValue();

    if (*(_QWORD *)buf && (buf[8] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)buf + 40))();
    if (v22)
    {
      v98 = objc_msgSend(v11, "vertexCount");
      objc_msgSend(v11, "submeshes");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = objc_msgSend(v24, "count");

      objc_msgSend(v22, "children");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = objc_msgSend(v26, "count");

      if (!v27)
        goto LABEL_15;
      v28 = 0;
      while (1)
      {
        objc_msgSend(v22, "children");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "objectAtIndexedSubscript:", v28);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();

        if ((isKindOfClass & 1) == 0)
          break;
        objc_msgSend(v22, "children");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "objectAtIndexedSubscript:", v28);
        v34 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v34, "submeshes");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = objc_msgSend(v35, "count");

        if (v36 != v25)
        {
          v81 = *re::pipelineLogObjects(v37);
          if (!os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
          {
LABEL_111:

            v97 = 0;
            v11 = v90;
            goto LABEL_30;
          }
          *(_WORD *)buf = 0;
          v82 = "Invalid blend shape definition: Submesh count does not match between target and base.";
LABEL_113:
          _os_log_error_impl(&dword_224FE9000, v81, OS_LOG_TYPE_ERROR, v82, buf, 2u);
          goto LABEL_111;
        }
        v38 = (re *)objc_msgSend(v34, "vertexCount");
        if (v38 != (re *)v98)
        {
          v81 = *re::pipelineLogObjects(v38);
          if (!os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
            goto LABEL_111;
          *(_WORD *)buf = 0;
          v82 = "Invalid blend shape definition: Vertex count does not match between target and base.";
          goto LABEL_113;
        }

        if (v27 == ++v28)
          goto LABEL_15;
      }
      v80 = *re::pipelineLogObjects(v32);
      v11 = v90;
      if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_224FE9000, v80, OS_LOG_TYPE_ERROR, "Blend shape targets must be meshes.", buf, 2u);
      }
      v97 = 0;
      goto LABEL_30;
    }
  }
  else
  {
    v22 = 0;
  }
LABEL_29:
  v22 = v22;
  v97 = v22;
LABEL_30:
  a5 = v91;

  a6 = v95;
  a2 = v93;
LABEL_31:

  objc_msgSend(v11, "name");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  if (v39)
  {
    objc_msgSend(v11, "name");
    v40 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v41 = (const char *)objc_msgSend(v40, "UTF8String");
    v42 = strlen(v41);
    *(_QWORD *)buf = v41;
    *(_QWORD *)&buf[8] = v42;
    re::DynamicString::operator=((re::DynamicString *)a1, (uint64_t)buf);

  }
  else
  {
    *(_QWORD *)buf = "";
    *(_QWORD *)&buf[8] = 0;
    re::DynamicString::operator=((re::DynamicString *)a1, (uint64_t)buf);
  }

  objc_msgSend(v11, "submeshes");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = objc_msgSend(v43, "count");

  v89 = (_QWORD *)(a1 + 32);
  if (v44 <= 1)
    v45 = 1;
  else
    v45 = v44;
  if (*(_QWORD *)(a1 + 40) < v45)
    re::DynamicArray<re::GeomMesh>::setCapacity(v89, v45);
  if (a4)
  {
    if (a5)
      v46 = *(_QWORD *)(a4 + 16) == 0;
    else
      v46 = 1;
    v47 = !v46;
    if (a6)
    {
LABEL_47:
      v96 = objc_msgSend(*a2, "subdivisionScheme") == 1;
      if (!v47)
        goto LABEL_60;
      goto LABEL_51;
    }
  }
  else
  {
    v47 = 0;
    if (a6)
      goto LABEL_47;
  }
  v96 = 0;
  if (!v47)
  {
LABEL_60:
    v92 = 0;
    v84 = 0xFFFFFFFFLL;
    v85 = 0;
    goto LABEL_61;
  }
LABEL_51:
  v48 = *(_QWORD *)(a5 + 16);
  if (!v48)
    goto LABEL_60;
  v49 = 0;
  v50 = *(_QWORD *)(a5 + 32);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
    v51 = *(const char **)(a1 + 16);
  else
    v51 = (const char *)(a1 + 9);
  while (1)
  {
    v52 = (*(_QWORD *)(v50 + 80) & 1) != 0 ? *(const char **)(v50 + 88) : (const char *)(v50 + 81);
    if (!strcmp(v52, v51))
      break;
    ++v49;
    v50 += 224;
    if (v48 == v49)
      goto LABEL_60;
  }
  if (v48 <= v49)
  {
    v99 = 0;
    v110 = 0u;
    v111 = 0u;
    v108 = 0u;
    v109 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v101 = 136315906;
    *(_QWORD *)v102 = "operator[]";
    *(_WORD *)&v102[8] = 1024;
    *(_DWORD *)&v102[10] = 789;
    v103 = 2048;
    v104 = v49;
    v105 = 2048;
    v106 = v48;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_115:
    v99 = 0;
    v110 = 0u;
    v111 = 0u;
    v108 = 0u;
    v109 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v101 = 136315906;
    *(_QWORD *)v102 = "operator[]";
    *(_WORD *)&v102[8] = 1024;
    *(_DWORD *)&v102[10] = 789;
    v103 = 2048;
    v104 = v49;
    v105 = 2048;
    v106 = v48;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v49 = *(unsigned int *)(v50 + 64);
  v48 = *(_QWORD *)(a4 + 16);
  if (v48 <= v49)
    goto LABEL_115;
  v84 = *(unsigned int *)(v50 + 64);
  v85 = v50;
  v92 = *(_QWORD *)(a4 + 32) + 168 * v49;
LABEL_61:
  objc_msgSend(v11, "submeshes");
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  v87 = objc_msgSend(v83, "count");
  if (v87)
  {
    v53 = 0;
    v86 = (_anonymous_namespace_ *)(a1 + 72);
    do
    {
      objc_msgSend(v11, "submeshes");
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v54, "objectAtIndexedSubscript:", v53);
      v55 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v55, "name");
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      if (v56)
      {
        objc_msgSend(v55, "name");
        v57 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v58 = (const char *)objc_msgSend(v57, "UTF8String");

      }
      else
      {
        v58 = "";
      }

      objc_msgSend(v55, "material");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "name");
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      v94 = v59;
      if (v60)
      {
        objc_msgSend(v59, "name");
        v61 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v62 = (const char *)objc_msgSend(v61, "UTF8String");

      }
      else
      {
        v62 = "missingMaterial.rematerialdefinition";
      }

      v63 = v11;
      v64 = v97;
      objc_msgSend(v63, "submeshes");
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v65, "objectAtIndexedSubscript:", v53);
      v66 = (MDLMesh *)objc_claimAutoreleasedReturnValue();

      re::internal::createGeomMeshFromMDLSubmesh((re::internal *)v63, v66, (re::GeomMesh *)buf);
      if (v92)
        re::internal::attachSkinningDataToMesh(v63, v66, v92, v84, v85, (uint64_t)buf);
      if (v97)
        re::internal::attachNewBlendShapeDataIfItExistsToGeomMesh((re::internal *)v63, v64, v53, (uint64_t)buf, v68);
      else
        re::internal::attachBlendShapeDataIfItExistsToGeomMesh((re::internal *)v63, (const MDLMesh *)buf, v67);
      if (v96)
        re::internal::attachOpenSubdivDataToMesh((re::internal *)v63, (unint64_t)v66, (MDLSubmesh *)buf, v69);

      LOBYTE(v101) = v96;
      re::DynamicString::DynamicString((re::DynamicString *)&v102[4], (const re::DynamicString *)&v99);
      if (v99 && (v100 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v99 + 40))();
      re::GeomMesh::setName((re *)buf, v58);
      v71 = re::Hash<re::ImportMaterialSignature>::operator()((uint64_t)&v99, (char *)&v101);
      v11 = v90;
      if (!*(_QWORD *)a3
        || (v72 = *(unsigned int *)(*(_QWORD *)(a3 + 8) + 4 * (v71 % *(unsigned int *)(a3 + 24))),
            (_DWORD)v72 == 0x7FFFFFFF))
      {
LABEL_85:
        LODWORD(v99) = 0;
        re::DynamicArray<int>::add(v86, &v99);
        goto LABEL_86;
      }
      v73 = *(_QWORD *)(a3 + 16);
      v74 = v101;
      while (*(unsigned __int8 *)(v73 + 72 * v72 + 16) != v74
           || !re::DynamicString::operator==(v73 + 72 * v72 + 24, (uint64_t)&v102[4]))
      {
        v72 = *(_DWORD *)(v73 + 72 * v72 + 8) & 0x7FFFFFFF;
        if (v72 == 0x7FFFFFFF)
          goto LABEL_85;
      }
      v76 = re::Hash<re::ImportMaterialSignature>::operator()((uint64_t)&v99, (char *)&v101);
      if (*(_QWORD *)a3)
      {
        v77 = *(_QWORD *)(a3 + 16);
        v78 = *(unsigned int *)(*(_QWORD *)(a3 + 8) + 4 * (v76 % *(unsigned int *)(a3 + 24)));
        if ((_DWORD)v78 != 0x7FFFFFFF)
        {
          v79 = v101;
          while (*(unsigned __int8 *)(v77 + 72 * v78 + 16) != v79
               || !re::DynamicString::operator==(v77 + 72 * v78 + 24, (uint64_t)&v102[4]))
          {
            v78 = *(_DWORD *)(v77 + 72 * v78 + 8) & 0x7FFFFFFF;
            if (v78 == 0x7FFFFFFF)
              goto LABEL_99;
          }
          goto LABEL_100;
        }
      }
      else
      {
        v77 = *(_QWORD *)(a3 + 16);
      }
LABEL_99:
      v78 = 0x7FFFFFFFLL;
LABEL_100:
      re::DynamicArray<int>::add(v86, (_DWORD *)(v77 + 72 * v78 + 64));
LABEL_86:
      re::DynamicArray<re::GeomMesh>::add((uint64_t)v89, (uint64_t)buf);
      if (*(_QWORD *)&v102[4] && (v102[12] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v102[4] + 40))();
      re::GeomMesh::~GeomMesh((re::GeomMesh *)buf, v75);

      v53 = (const MDLObject *)((char *)v53 + 1);
    }
    while (v53 != (const MDLObject *)v87);
  }

}

uint64_t re::`anonymous namespace'::consolidateMeshPartsWithSameMaterial<re::HashTable<re::ImportMaterialSignature,re::MaterialInfo,re::Hash<re::ImportMaterialSignature>,re::EqualTo<re::ImportMaterialSignature>,true,false>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  uint64_t v11;
  _anonymous_namespace_ *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  const re::GeomMesh *v34;
  unsigned int *v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v38;
  const char *v39;
  size_t v40;
  BOOL v41;
  const re::GeomMesh *v43;
  unint64_t v44;
  double v45;
  re::GeomAttribute *v46;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v52;
  unsigned int v53;
  _OWORD v54[2];
  int v55;
  uint64_t v56;
  _QWORD v57[3];
  int v58;
  re::GeomAttribute *v59;
  _QWORD v60[2];
  unint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  const char *v66;
  __int16 v67;
  int v68;
  __int16 v69;
  unint64_t v70;
  __int16 v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v10 = *(unsigned int *)(a3 + 28);
  v11 = *(_QWORD *)(a1 + 16);
  v63 = 0;
  v60[1] = 0;
  v61 = 0;
  v59 = 0;
  v60[0] = 0;
  v62 = 0;
  memset(v57, 0, sizeof(v57));
  v58 = 0;
  if ((_DWORD)v10 && (_DWORD)v11)
  {
    v55 = 0;
    memset(v54, 0, sizeof(v54));
    v56 = 0x7FFFFFFFLL;
    v13 = (_anonymous_namespace_ *)re::DynamicArray<re::GeomMesh>::setCapacity(v60, v11);
    v14 = 8 * v10;
    if (!v15)
      goto LABEL_64;
    v17 = v15;
    v18 = v15;
    if ((_DWORD)v10 != 1)
    {
      v5 = v14 - 8;
      bzero(v15, v14 - 8);
      v18 = &v17[(unint64_t)v14 / 8 - 1];
    }
    *v18 = 0;
    v19 = *(unsigned int *)(a3 + 32);
    if ((_DWORD)v19)
    {
      v20 = 0;
      v21 = (int *)(*(_QWORD *)(a3 + 16) + 8);
      do
      {
        v22 = *v21;
        v21 += 18;
        if (v22 < 0)
          goto LABEL_13;
        ++v20;
      }
      while (v19 != v20);
      LODWORD(v20) = *(_DWORD *)(a3 + 32);
    }
    else
    {
      LODWORD(v20) = 0;
    }
LABEL_13:
    if ((_DWORD)v19 != (_DWORD)v20)
    {
      v23 = v20;
      v24 = *(_QWORD *)(a3 + 16);
      do
      {
        v25 = *(unsigned int *)(v24 + 72 * v23 + 64);
        if (v25 >= v10)
          goto LABEL_61;
        if ((*(_BYTE *)(v24 + 72 * v23 + 32) & 1) != 0)
          v26 = *(_QWORD *)(v24 + 72 * v23 + 40);
        else
          v26 = v24 + 72 * v23 + 33;
        v17[v25] = v26;
        v24 = *(_QWORD *)(a3 + 16);
        if (v19 <= (int)v20 + 1)
          v27 = v20 + 1;
        else
          v27 = v19;
        while (1)
        {
          v23 = (v20 + 1);
          if (v27 - 1 == (_DWORD)v20)
            break;
          LODWORD(v20) = v20 + 1;
          v28 = v23;
          if ((*(_DWORD *)(v24 + 72 * v23 + 8) & 0x80000000) != 0)
            goto LABEL_26;
        }
        v28 = v27;
LABEL_26:
        LODWORD(v20) = v28;
      }
      while ((_DWORD)v19 != v28);
    }
    v50 = v10;
    v48 = a4;
    v49 = a5;
    v29 = 0;
    if (v11 <= 1)
      v30 = 1;
    else
      v30 = v11;
    v52 = v30;
    v31 = a1;
    while (1)
    {
      v5 = *(_QWORD *)(v31 + 16);
      if (v5 <= v29)
      {
        v64 = 0;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v73 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v65 = 136315906;
        v66 = "operator[]";
        v67 = 1024;
        v68 = 789;
        v69 = 2048;
        v70 = v29;
        v71 = 2048;
        v72 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_60:
        v64 = 0;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v73 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v65 = 136315906;
        v66 = "operator[]";
        v67 = 1024;
        v68 = 789;
        v69 = 2048;
        v70 = v29;
        v71 = 2048;
        v72 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_61:
        re::internal::assertLog((re::internal *)4, v16, "assertion failure: '%s' (%s:line %i) ", "(*it).value.index < materialCount", "consolidateMeshPartsWithSameMaterial", 437);
        _os_crash();
        __break(1u);
LABEL_62:
        v64 = 0;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v73 = 0u;
        v44 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v65 = 136315906;
        v66 = "operator[]";
        v67 = 1024;
        v68 = 789;
        v69 = 2048;
        v70 = v5;
        v71 = 2048;
        v72 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_63:
        v64 = 0;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v73 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v65 = 136315906;
        v66 = "operator[]";
        v67 = 1024;
        v68 = 468;
        v69 = 2048;
        v70 = v44;
        v71 = 2048;
        v72 = v50;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_64:
        re::internal::assertLog((re::internal *)4, v16, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        _os_crash();
        __break(1u);
      }
      v32 = *(_QWORD *)(v31 + 32);
      v53 = 0;
      v5 = *(_QWORD *)(a2 + 16);
      if (v5 <= v29)
        goto LABEL_60;
      v33 = (unsigned int *)(v32 + 736 * v29);
      v53 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4 * v29);
      v35 = (unsigned int *)re::HashTable<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::tryGet((uint64_t)v54, &v53);
      v6 = v33[50];
      if ((_DWORD)v6)
      {
        v36 = 0;
        v37 = 1;
        do
        {
          v38 = re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)(v33 + 44), v36);
          if (*(_BYTE *)(v38 + 17) == 7)
          {
            v39 = *(const char **)(v38 + 8);
            v40 = strlen(v39);
            if (v40 >= 0x15)
            {
              v41 = *(_QWORD *)&v39[v40 - 21] == 0x6154646E656C627CLL
                 && *(_QWORD *)&v39[v40 - 13] == 0x44736F5074656772;
              if (v41 && *(_QWORD *)&v39[v40 - 8] == 0x7361746C6544736FLL)
                break;
            }
          }
          v37 = ++v36 < v6;
        }
        while ((_DWORD)v6 != v36);
        v31 = a1;
        if (v37)
          goto LABEL_52;
      }
      if (!v35)
        break;
      v5 = *v35;
      v6 = v61;
      if (v61 <= v5)
        goto LABEL_62;
      v43 = (const re::GeomMesh *)(v63 + 736 * v5);
      if (!re::internal::canAppendGeomMeshToGeomMesh((re::internal *)v33, v43, v34))
        goto LABEL_52;
      re::internal::appendGeomMeshToGeomMesh((uint64_t)v33, (uint64_t)v43);
LABEL_53:
      if (++v29 == v52)
      {
        v45 = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v54);
        a4 = v48;
        a5 = v49;
        goto LABEL_55;
      }
    }
    v44 = v53;
    if (v50 <= v53)
      goto LABEL_63;
    re::GeomMesh::setName((re *)v33, (const char *)v17[v53]);
    LODWORD(v73) = v61;
    re::HashTable<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::add((uint64_t)v54, &v53, &v73);
LABEL_52:
    re::DynamicArray<re::GeomMesh>::add((uint64_t)v60, (uint64_t)v33);
    re::DynamicArray<int>::add(v57, &v53);
    goto LABEL_53;
  }
  re::DynamicArray<re::GeomMesh>::operator=((uint64_t)v60, a1);
  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)v57, a2);
LABEL_55:
  re::DynamicArray<re::GeomMesh>::operator=(a4, (uint64_t)v60);
  re::DynamicArray<re::RigComponentConstraint>::operator=(a5, (uint64_t)v57);
  if (v57[0])
  {
    v46 = v59;
    if (v59)
      (*(void (**)(void))(*(_QWORD *)v57[0] + 40))();
  }
  return re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v60, v46);
}

uint64_t re::convertMDLMeshToGeomModel(id *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  void *v10;
  BOOL v11;
  re::GeomAttribute *v12;
  re::GeomAttribute *v13;
  _QWORD v15[3];
  int v16;
  re::GeomAttribute *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD v22[5];
  _QWORD v23[3];
  int v24;
  re::GeomAttribute *v25;
  unsigned __int8 v26[8];
  uint64_t v27;
  unsigned __int8 v28[8];
  uint64_t v29;
  _BYTE v30[40];
  _OWORD v31[2];
  int v32;
  uint64_t v33;

  v32 = 0;
  memset(v31, 0, sizeof(v31));
  v33 = 0x7FFFFFFFLL;
  re::collectMeshMaterialsFromMDLMesh(a1, (uint64_t)v31, a5[4]);
  objc_msgSend(*a1, "vertexAttributeDataForAttributeNamed:", CFSTR("textureCoordinate"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
    v11 = *a5 == 0;
  else
    v11 = 1;
  if (!v11)
    objc_msgSend(*a1, "addTangentBasisForTextureCoordinateAttributeNamed:tangentAttributeNamed:bitangentAttributeNamed:", CFSTR("textureCoordinate"), CFSTR("tangent"), CFSTR("bitangent"));
  re::DynamicString::operator=((re::DynamicString *)a2, (re::DynamicString *)&v18);
  re::DynamicArray<re::GeomMesh>::operator=((uint64_t)(a2 + 32), (uint64_t)v22);
  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)(a2 + 72), (uint64_t)v23);
  re::Optional<re::DynamicArray<re::GeomIndexMap>>::operator=(a2 + 112, v26);
  re::Optional<re::DynamicArray<re::GeomIndexMap>>::operator=(a2 + 160, v28);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)(a2 + 208), (uint64_t)v30);
  re::DynamicArray<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::deinit((uint64_t)v30);
  if (v28[0])
    re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)&v29);
  if (v26[0])
    re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)&v27);
  if (v23[0])
  {
    v12 = v25;
    if (v25)
      (*(void (**)(void))(*(_QWORD *)v23[0] + 40))();
    v25 = 0;
    memset(v23, 0, sizeof(v23));
    ++v24;
  }
  re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v22, v12);
  if (v18 && (v19 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v18 + 40))();
  if (a5[3])
  {
    v22[0] = 0;
    v19 = 0;
    v20 = 0;
    v17 = 0;
    v18 = 0;
    v21 = 0;
    memset(v15, 0, sizeof(v15));
    v16 = 0;
    re::DynamicArray<re::GeomMesh>::operator=((uint64_t)(a2 + 32), (uint64_t)&v18);
    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)(a2 + 72), (uint64_t)v15);
    if (v15[0])
    {
      v13 = v17;
      if (v17)
        (*(void (**)(void))(*(_QWORD *)v15[0] + 40))();
    }
    re::DynamicArray<re::GeomMesh>::deinit((uint64_t)&v18, v13);
  }
  re::HashTable<re::ImportMaterialSignature,re::MaterialInfo,re::Hash<re::ImportMaterialSignature>,re::EqualTo<re::ImportMaterialSignature>,true,false>::deinit((uint64_t *)v31);
  return 1;
}

uint64_t re::HashTable<re::ImportMaterialSignature,re::MaterialInfo,re::Hash<re::ImportMaterialSignature>,re::EqualTo<re::ImportMaterialSignature>,true,false>::add<re::MaterialInfo&>(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  char v15;

  v6 = re::Hash<re::ImportMaterialSignature>::operator()((uint64_t)&v15, a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_9;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_9:
    v12 = re::HashTable<re::ImportMaterialSignature,re::MaterialInfo,re::Hash<re::ImportMaterialSignature>,re::EqualTo<re::ImportMaterialSignature>,true,false>::addEmplace<re::MaterialInfo&>(a1, v8, v7, (re::DynamicString *)a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 16) + 72 * v12;
    return v13 + 56;
  }
  v10 = *a2;
  v11 = *(_QWORD *)(a1 + 16);
  while (*(unsigned __int8 *)(v11 + 72 * v9 + 16) != v10
       || !re::DynamicString::operator==(v11 + 72 * v9 + 24, (uint64_t)(a2 + 8)))
  {
    v9 = *(_DWORD *)(v11 + 72 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_9;
  }
  v13 = v11 + 72 * v9;
  return v13 + 56;
}

uint64_t *re::DynamicArray<re::`anonymous namespace'::Instance>::~DynamicArray(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  if (v2)
  {
    v3 = a1[4];
    if (v3)
    {
      v4 = a1[2];
      if (v4)
      {
        v5 = v3 + 32;
        v6 = 144 * v4;
        do
        {
          re::DynamicArray<re::ObjCObject>::deinit(v5);
          v7 = *(_QWORD *)(v5 - 32);
          if (v7)
          {
            if ((*(_BYTE *)(v5 - 24) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(v5 - 16));
            *(_OWORD *)(v5 - 32) = 0u;
            *(_OWORD *)(v5 - 16) = 0u;
          }
          v5 += 144;
          v6 -= 144;
        }
        while (v6);
        v2 = *a1;
        v3 = a1[4];
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, v3);
    }
    a1[4] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    ++*((_DWORD *)a1 + 6);
  }
  return a1;
}

uint64_t re::DynamicArray<MDLObject * {__strong}>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<REResourceSharingClientObject * {__strong}>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<objc_object  {objcproto8DRBuffer}* {__strong}>::copy(a1, (uint64_t)a2);
  }
  return a1;
}

_QWORD *re::DynamicArray<re::`anonymous namespace'::Instance>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x90uLL))
        {
          v2 = 144 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 144 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 144, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (uint64_t *)(v8 + 40);
        v11 = 144 * v9;
        v12 = v7;
        do
        {
          *(_OWORD *)v12 = 0u;
          *((_OWORD *)v12 + 1) = 0u;
          *v12 = *(v10 - 5);
          *(v10 - 5) = 0;
          v12[3] = *(v10 - 2);
          *(v10 - 2) = 0;
          v14 = v12[1];
          v13 = v12[2];
          v15 = *(v10 - 3);
          v12[1] = *(v10 - 4);
          v12[2] = v15;
          *(v10 - 4) = v14;
          *(v10 - 3) = v13;
          v12[8] = 0;
          *((_DWORD *)v12 + 14) = 0;
          v12[5] = 0;
          v12[6] = 0;
          v12[4] = 0;
          v16 = *v10;
          v12[4] = *(v10 - 1);
          *(v10 - 1) = 0;
          v12[5] = v16;
          *v10 = 0;
          v17 = v12[6];
          v12[6] = v10[1];
          v10[1] = v17;
          v18 = v12[8];
          v12[8] = v10[3];
          v10[3] = v18;
          ++*((_DWORD *)v10 + 4);
          ++*((_DWORD *)v12 + 14);
          v19 = *(_OWORD *)(v10 + 5);
          v20 = *(_OWORD *)(v10 + 7);
          v21 = *(_OWORD *)(v10 + 11);
          *((_OWORD *)v12 + 7) = *(_OWORD *)(v10 + 9);
          *((_OWORD *)v12 + 8) = v21;
          *((_OWORD *)v12 + 5) = v19;
          *((_OWORD *)v12 + 6) = v20;
          re::DynamicArray<re::ObjCObject>::deinit((uint64_t)(v10 - 1));
          if (*(v10 - 5))
          {
            if ((*(_BYTE *)(v10 - 4) & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*(v10 - 5) + 40))(*(v10 - 5), *(v10 - 3));
            *(_OWORD *)(v10 - 5) = 0u;
            *(_OWORD *)(v10 - 3) = 0u;
          }
          v10 += 18;
          v12 += 18;
          v11 -= 144;
        }
        while (v11);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

void re::HashTable<MDLMesh * {__strong},re::DynamicArray<re::`anonymous namespace'::Instance>,re::Hash<MDLMesh * {__strong}>,re::EqualTo<MDLMesh * {__strong}>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  id *v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v13[16] = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v9 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = (id *)(v7 + 16);
        do
        {
          if ((*(_DWORD *)(v11 - 1) & 0x80000000) != 0)
          v11 += 8;
          --v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

id re::HashTable<MDLMesh * {__strong},re::DynamicArray<re::`anonymous namespace'::Instance>,re::Hash<MDLMesh * {__strong}>,re::EqualTo<MDLMesh * {__strong}>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, id *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  id result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + (v10 << 6) + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + (v10 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + (v10 << 6) + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 6) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 6)) = a3;
  v14 = *(_QWORD *)(a1 + 16) + (v10 << 6);
  result = *a4;
  *(_QWORD *)(v14 + 16) = result;
  v16 = *(_QWORD *)(a1 + 16) + (v10 << 6);
  *(_QWORD *)(v16 + 56) = 0;
  *(_DWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  v17 = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(v16 + 24) = *(_QWORD *)a5;
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v18 = *(_QWORD *)(v16 + 40);
  *(_QWORD *)(v16 + 40) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v18;
  v19 = *(_QWORD *)(v16 + 56);
  *(_QWORD *)(v16 + 56) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v19;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v16 + 48);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

uint64_t *re::DynamicArray<re::GeomSkeleton>::add(_anonymous_namespace_ *this, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::GeomSkeleton>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 160 * v4;
  v6 = *a2;
  *(_QWORD *)v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(_QWORD *)v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(_QWORD *)(v5 + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  v7 = a2[3];
  *(_QWORD *)(v5 + 16) = a2[2];
  *(_QWORD *)(v5 + 24) = v7;
  a2[2] = 0;
  a2[3] = 0;
  v8 = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(v5 + 32) = a2[4];
  a2[4] = v8;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  v9 = a2[6];
  *(_QWORD *)(v5 + 40) = a2[5];
  *(_QWORD *)(v5 + 48) = v9;
  a2[5] = 0;
  a2[6] = 0;
  v10 = *(_QWORD *)(v5 + 56);
  *(_QWORD *)(v5 + 56) = a2[7];
  a2[7] = v10;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  v11 = a2[9];
  *(_QWORD *)(v5 + 64) = a2[8];
  *(_QWORD *)(v5 + 72) = v11;
  a2[8] = 0;
  a2[9] = 0;
  v12 = *(_QWORD *)(v5 + 80);
  *(_QWORD *)(v5 + 80) = a2[10];
  a2[10] = v12;
  *(_QWORD *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 96) = 0;
  *(_QWORD *)(v5 + 104) = 0;
  v13 = a2[12];
  *(_QWORD *)(v5 + 88) = a2[11];
  *(_QWORD *)(v5 + 96) = v13;
  a2[11] = 0;
  a2[12] = 0;
  v14 = *(_QWORD *)(v5 + 104);
  *(_QWORD *)(v5 + 104) = a2[13];
  a2[13] = v14;
  *(_OWORD *)(v5 + 112) = 0u;
  v5 += 112;
  *(_DWORD *)(v5 + 32) = 0;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_QWORD *)(v5 + 36) = 0x7FFFFFFFLL;
  result = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v5, a2 + 14);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::GeomSkeleton::fromSkeleton@<X0>(StringID *a1@<X0>, _QWORD *a2@<X8>)
{
  re::StringID::StringID((re::StringID *)a2, a1);
  re::FixedArray<re::StringID>::FixedArray(a2 + 2, (uint64_t)&a1[4].var1);
  re::FixedArray<unsigned int>::FixedArray(a2 + 5, (uint64_t)&a1[6]);
  re::FixedArray<re::GenericSRT<float>>::FixedArray(a2 + 8, (uint64_t)&a1[3]);
  re::FixedArray<re::Matrix4x4<float>>::FixedArray(a2 + 11, (uint64_t)&a1[1].var1);
  return re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::HashTable((uint64_t)(a2 + 14), (uint64_t)&a1[7].var1);
}

_QWORD *re::DynamicArray<re::GeomSkeleton>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::GeomSkeleton>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::GeomSkeleton>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

unsigned __int8 *re::Optional<re::DynamicArray<re::GeomIndexMap>>::operator=(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v3;
  int v4;
  BOOL v5;
  _QWORD *v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a1;
  v4 = *a2;
  if (*a1)
    v5 = 0;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v6 = a1 + 8;
    if (v3)
      v7 = v4 == 0;
    else
      v7 = 0;
    if (v7)
    {
      re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)v6);
      *a1 = 0;
    }
    else
    {
      if (v3)
        v8 = 1;
      else
        v8 = v4 == 0;
      if (v8)
      {
        re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v6, (uint64_t)(a2 + 8));
      }
      else
      {
        *a1 = 1;
        *((_QWORD *)a1 + 5) = 0;
        *((_QWORD *)a1 + 2) = 0;
        *((_QWORD *)a1 + 3) = 0;
        *v6 = 0;
        *((_DWORD *)a1 + 8) = 0;
        v9 = *((_QWORD *)a2 + 2);
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 2) = v9;
        *((_QWORD *)a2 + 1) = 0;
        *((_QWORD *)a2 + 2) = 0;
        v10 = *((_QWORD *)a1 + 3);
        *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
        *((_QWORD *)a2 + 3) = v10;
        v11 = *((_QWORD *)a1 + 5);
        *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
        *((_QWORD *)a2 + 5) = v11;
        ++*((_DWORD *)a2 + 8);
        ++*((_DWORD *)a1 + 8);
      }
    }
  }
  return a1;
}

uint64_t re::HashTable<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::tryGet(uint64_t a1, unsigned int *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) >> 27));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v3 ^ (v3 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v6 + 24 * v4 + 12) != (_DWORD)v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 24 * v4 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v4 == 0x7FFFFFFF)
        break;
      if (*(_DWORD *)(v6 + 24 * v4 + 12) == (_DWORD)v2)
        return v6 + 24 * v4 + 16;
    }
    return 0;
  }
  return v6 + 24 * v4 + 16;
}

uint64_t re::HashTable<re::ImportMaterialSignature,re::MaterialInfo,re::Hash<re::ImportMaterialSignature>,re::EqualTo<re::ImportMaterialSignature>,true,false>::addEmplace<re::MaterialInfo&>(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ImportMaterialSignature,re::MaterialInfo,re::Hash<re::ImportMaterialSignature>,re::EqualTo<re::ImportMaterialSignature>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 72 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10) = a3;
  v14 = *(_QWORD *)(a1 + 16) + 72 * v10;
  *(_BYTE *)(v14 + 16) = *(_BYTE *)a4;
  re::DynamicString::DynamicString((re::DynamicString *)(v14 + 24), (re::DynamicString *)((char *)a4 + 8));
  v15 = *(_QWORD *)(a1 + 16) + 72 * v10;
  *(_QWORD *)(v15 + 56) = *(id *)a5;
  v16 = *(_DWORD *)(a5 + 8);
  *(_BYTE *)(v15 + 68) = *(_BYTE *)(a5 + 12);
  *(_DWORD *)(v15 + 64) = v16;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::ImportMaterialSignature,re::MaterialInfo,re::Hash<re::ImportMaterialSignature>,re::EqualTo<re::ImportMaterialSignature>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  signed int v25;
  _BYTE v26[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v26, 0, 36);
      *(_QWORD *)&v26[36] = 0x7FFFFFFFLL;
      re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v26, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v26;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v26[8];
      *(_OWORD *)v26 = v5;
      *(_QWORD *)&v26[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v26[24];
      *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v26[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = (uint64_t *)(v6 + 56);
        do
        {
          if ((*(_DWORD *)(v14 - 6) & 0x80000000) != 0)
          {
            v15 = *(v14 - 7);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashTable<re::ImportMaterialSignature,re::MaterialInfo,re::Hash<re::ImportMaterialSignature>,re::EqualTo<re::ImportMaterialSignature>,true,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 72 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 72 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 72 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v18 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v18) = v15;
            v22 = *(_QWORD *)(a1 + 16) + 72 * v18;
            *(_BYTE *)(v22 + 16) = *((_BYTE *)v14 - 40);
            re::DynamicString::DynamicString((re::DynamicString *)(v22 + 24), (const re::DynamicString *)(v14 - 4));
            v23 = *(_QWORD *)(a1 + 16) + 72 * v18;
            v24 = *v14;
            *v14 = 0;
            *(_QWORD *)(v23 + 56) = v24;
            LODWORD(v24) = *((_DWORD *)v14 + 2);
            *(_BYTE *)(v23 + 68) = *((_BYTE *)v14 + 12);
            *(_DWORD *)(v23 + 64) = v24;
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 9;
        }
        while (v11 < v10);
      }
      re::HashTable<re::ImportMaterialSignature,re::MaterialInfo,re::Hash<re::ImportMaterialSignature>,re::EqualTo<re::ImportMaterialSignature>,true,false>::deinit((uint64_t *)v26);
    }
  }
  else
  {
    if (a2)
      v25 = a2;
    else
      v25 = 3;
  }
}

void re::importPhysicsMaterial(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  void *v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  void *v9;
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  float v16;
  double v17;
  float v18;
  double v19;
  float v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v3 = a1;
  objc_msgSend(v3, "property:", CFSTR("preliminary:physics:material:restitution"));
  v4 = (_anonymous_namespace_ *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4
    && (-[_anonymous_namespace_ data](v4, "data"), v6 = (void *)objc_claimAutoreleasedReturnValue(),
                                                   v6,
                                                   v6))
  {
    objc_msgSend(v3, "property:", CFSTR("preliminary:physics:material:friction:static"));
    v7 = (_anonymous_namespace_ *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7
      && (-[_anonymous_namespace_ data](v7, "data"),
          v9 = (void *)objc_claimAutoreleasedReturnValue(),
          v9,
          v9))
    {
      objc_msgSend(v3, "property:", CFSTR("preliminary:physics:material:friction:dynamic"));
      v10 = (_anonymous_namespace_ *)objc_claimAutoreleasedReturnValue();
      v11 = v10;
      if (v10
        && (-[_anonymous_namespace_ data](v10, "data"),
            v12 = (void *)objc_claimAutoreleasedReturnValue(),
            v12,
            v12))
      {
        v13 = re::PhysicsFactory::m_defaultFactory;
        v14 = re::PhysicsFactory::m_defaultAllocator;
        -[_anonymous_namespace_ doubleValue](v5, "doubleValue");
        v16 = v15;
        -[_anonymous_namespace_ doubleValue](v8, "doubleValue");
        v18 = v17;
        -[_anonymous_namespace_ doubleValue](v11, "doubleValue");
        v20 = v19;
        v21 = (*(uint64_t (**)(uint64_t, uint64_t, float, float, float))(*(_QWORD *)v13 + 16))(v13, v14, v16, v18, v20);
        *(_BYTE *)a2 = 1;
        *(_QWORD *)(a2 + 8) = v21;
      }
      else
      {
        v28 = v31;
        v29 = v32;
        v30 = v33;
        *(_BYTE *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 1003;
        *(_QWORD *)(a2 + 16) = &re::PhysicsErrorCategory(void)::instance;
        *(_OWORD *)(a2 + 24) = v28;
        *(_QWORD *)(a2 + 40) = v29;
        *(_QWORD *)(a2 + 48) = v30;
      }

    }
    else
    {
      v25 = v31;
      v26 = v32;
      v27 = v33;
      *(_BYTE *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 1002;
      *(_QWORD *)(a2 + 16) = &re::PhysicsErrorCategory(void)::instance;
      *(_OWORD *)(a2 + 24) = v25;
      *(_QWORD *)(a2 + 40) = v26;
      *(_QWORD *)(a2 + 48) = v27;
    }

  }
  else
  {
    v22 = v31;
    v23 = v32;
    v24 = v33;
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 1001;
    *(_QWORD *)(a2 + 16) = &re::PhysicsErrorCategory(void)::instance;
    *(_OWORD *)(a2 + 24) = v22;
    *(_QWORD *)(a2 + 40) = v23;
    *(_QWORD *)(a2 + 48) = v24;
  }

}

void re::importPhysicsCollider(void *a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _anonymous_namespace_ *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  __int128 v13;
  float32x4_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  objc_msgSend(a1, "property:", CFSTR("preliminary:physics:collider:convexShape"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "data");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      objc_msgSend(v4, "targetObject");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      if (v6)
      {
        if (!v21.i8[0])
        {
          v15 = v18;
          v16 = v19;
          v17 = v20;
          *(_BYTE *)a2 = 0;
          *(_QWORD *)(a2 + 16) = 3004;
          *(_QWORD *)(a2 + 24) = &re::PhysicsErrorCategory(void)::instance;
          *(_OWORD *)(a2 + 32) = v15;
          *(_QWORD *)(a2 + 48) = v16;
          *(_QWORD *)(a2 + 56) = v17;
          if ((_QWORD)v23 && (BYTE8(v23) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v23 + 40))();
          goto LABEL_9;
        }
        v8 = v22;
        v9 = v23;
        v10 = v24;
        v11 = v25;
        *(_BYTE *)a2 = 1;
        *(_OWORD *)(a2 + 16) = v8;
        *(_OWORD *)(a2 + 32) = v9;
      }
      else
      {
        v14 = v21;
        v11 = *((_QWORD *)&v22 + 1);
        v10 = v22;
        *(_BYTE *)a2 = 0;
        *(_QWORD *)(a2 + 16) = 3000;
        *(_QWORD *)(a2 + 24) = &re::PhysicsErrorCategory(void)::instance;
        *(float32x4_t *)(a2 + 32) = v14;
      }
      *(_QWORD *)(a2 + 48) = v10;
      *(_QWORD *)(a2 + 56) = v11;
LABEL_9:

      goto LABEL_10;
    }
  }
  v12 = v21;
  v13 = v22;
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 16) = 3001;
  *(_QWORD *)(a2 + 24) = &re::PhysicsErrorCategory(void)::instance;
  *(float32x4_t *)(a2 + 32) = v12;
  *(_OWORD *)(a2 + 48) = v13;
LABEL_10:

}

void re::`anonymous namespace'::createCollisionShapeFromNode(float32x4_t *a1, void *a2)
{
  id v3;
  float32x4_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  float32x4_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  re *v21;
  float32x4_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  float32x4_t v29;
  float32x4_t v30;
  void *v31;
  void *v32;
  __int128 v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  int v40;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int8x16_t v45;
  float32x4_t v46;
  int8x16_t v47;
  float32x4_t v48;
  float32x4_t v49;
  re *v50;
  uint64_t *v51;
  uint64_t v52;
  double v53;
  re *v54;
  uint64_t *v55;
  double v56;
  float32x4_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  int v64;
  float32x4_t v65;
  float32x4_t v66;
  int8x16_t v67;
  float32x4_t v68;
  int8x16_t v69;
  float32x4_t v71;
  uint64_t *v77;
  double v78;
  double v79;
  int IsSceneGroundPlane;
  void *v81;
  void *v82;
  re *v83;
  uint64_t (*v84)(void);
  int v85;
  void *v86;
  _anonymous_namespace_ *v87;
  uint64_t v88;
  void *v89;
  _anonymous_namespace_ *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  _OWORD *v95;
  uint64_t v96;
  const void *v97;
  unint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  unint64_t v101;
  re *v102;
  uint64_t *v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  int32x4_t v109;
  unint64_t v110;
  uint64_t v111;
  float32x4_t __src;
  float32x4_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;

  v3 = a2;
  objc_msgSend(MEMORY[0x24BEBED10], "localTransformWithNode:time:", v3, 0.0);
  v113 = v4;
  v114 = v5;
  v115 = v6;
  v116 = v7;
  v106.i64[0] = 0x3F8000003F800000;
  v106.i64[1] = 1065353216;
  v107.i64[0] = 0;
  v107.i64[1] = 0x3F80000000000000;
  v108 = 0uLL;
  re::decomposeScaleRotationTranslation<float>((uint64_t)&v113, (int32x4_t *)&v106, &v107, &v108);
  v104 = v107;
  v105 = v108;
  objc_msgSend(v3, "type");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)*MEMORY[0x24BEBEDD0];

  if (v8 == v9)
  {
    objc_msgSend(v3, "property:", CFSTR("height"));
    v34 = objc_claimAutoreleasedReturnValue();
    if (!v34)
    {
      v57 = v113;
      v59 = *((_QWORD *)&v114 + 1);
      v58 = v114;
      a1->i8[0] = 0;
      v60 = 3005;
      goto LABEL_30;
    }
    v35 = (void *)v34;
    objc_msgSend(v3, "property:", CFSTR("radius"));
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "property:", CFSTR("axis"));
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = v37;
    if (v37)
    {
      objc_msgSend(v37, "stringValue");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v40 = objc_msgSend(v39, "isEqualToString:", CFSTR("X"));

      if (v40)
      {
        _Q5 = v104;
        v42 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q5, (int32x4_t)_Q5), (int8x16_t)v104, 0xCuLL);
        v43.i64[0] = 0x8000000080000000;
        v43.i64[1] = 0x8000000080000000;
        v44 = vmlaq_f32(vmulq_f32(v104, v43), (float32x4_t)0, v42);
        v45 = (int8x16_t)vaddq_f32(v44, v44);
        v46 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), v45, 0xCuLL);
        v47 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v46, (int32x4_t)v46), (int8x16_t)v46, 0xCuLL), vnegq_f32(v104)), v46, v42);
        v105 = vaddq_f32(v105, vaddq_f32(vaddq_f32(vmulq_laneq_f32(v46, v104, 3), (float32x4_t)0), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v47, (int32x4_t)v47), v47, 0xCuLL)));
        v48 = vmulq_f32(v104, (float32x4_t)xmmword_22610BB60);
        v49 = (float32x4_t)xmmword_22610BB70;
LABEL_25:
        _Q1 = (int8x16_t)vmlaq_f32(v48, v49, v42);
        v71 = vmlaq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q1, (int32x4_t)_Q1), _Q1, 0xCuLL), v49, _Q5, 3), (float32x4_t)vdupq_n_s32(0x3F3504F3u), _Q5);
        _S2 = 1060439283;
        __asm { FMLA            S1, S2, V5.S[3] }
        v71.i32[3] = _Q1.i32[0];
        v104 = v71;
        goto LABEL_26;
      }
      objc_msgSend(v38, "stringValue");
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      v64 = objc_msgSend(v63, "isEqualToString:", CFSTR("Z"));

      if (!v64)
      {
LABEL_26:
        v77 = re::globalAllocators((re *)v37);
        v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v77[2] + 32))(v77[2], 24, 8);
        *(_DWORD *)(v52 + 8) = 4;
        *(_QWORD *)v52 = &off_24ED3BD80;
        objc_msgSend(v36, "doubleValue");
        *(float *)&v78 = v78;
        *(_DWORD *)(v52 + 16) = LODWORD(v78);
        objc_msgSend(v35, "doubleValue");
        *(float *)&v79 = v79 + (float)(*(float *)(v52 + 16) + *(float *)(v52 + 16));
        *(_DWORD *)(v52 + 12) = LODWORD(v79);

        goto LABEL_27;
      }
    }
    _Q5 = v104;
    v42 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q5, (int32x4_t)_Q5), (int8x16_t)v104, 0xCuLL);
    v65.i64[0] = 0x8000000080000000;
    v65.i64[1] = 0x8000000080000000;
    v66 = vmlaq_f32(vmulq_f32(v104, v65), (float32x4_t)0, v42);
    v67 = (int8x16_t)vaddq_f32(v66, v66);
    v68 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v67, (int32x4_t)v67), v67, 0xCuLL);
    v69 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v68, (int32x4_t)v68), (int8x16_t)v68, 0xCuLL), vnegq_f32(v104)), v68, v42);
    v105 = vaddq_f32(v105, vaddq_f32(vaddq_f32(vmulq_laneq_f32(v68, v104, 3), (float32x4_t)0), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v69, (int32x4_t)v69), v69, 0xCuLL)));
    v48 = vmulq_f32(v104, (float32x4_t)xmmword_22610BB40);
    v49 = (float32x4_t)xmmword_22610BB50;
    goto LABEL_25;
  }
  objc_msgSend(v3, "type");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)*MEMORY[0x24BEBEE20];

  if (v10 == v11)
  {
    objc_msgSend(v3, "property:", CFSTR("radius"));
    v50 = (re *)objc_claimAutoreleasedReturnValue();
    if (v50)
    {
      v35 = v50;
      v51 = re::globalAllocators(v50);
      v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v51[2] + 32))(v51[2], 16, 8);
      *(_DWORD *)(v52 + 8) = 2;
      *(_QWORD *)v52 = &off_24ED3BF40;
      objc_msgSend(v35, "doubleValue");
      *(float *)&v53 = v53;
      *(_DWORD *)(v52 + 12) = LODWORD(v53);
LABEL_27:

LABEL_28:
      a1->i8[0] = 1;
      a1[1].i64[0] = v52;
      a1[2] = v105;
      a1[3] = v104;
LABEL_31:

      return;
    }
    v57 = v113;
    v59 = *((_QWORD *)&v114 + 1);
    v58 = v114;
    a1->i8[0] = 0;
    v60 = 3007;
LABEL_30:
    a1[1].i64[0] = v60;
    a1[1].i64[1] = (uint64_t)&re::PhysicsErrorCategory(void)::instance;
    a1[2] = v57;
    a1[3].i64[0] = v58;
    a1[3].i64[1] = v59;
    goto LABEL_31;
  }
  objc_msgSend(v3, "type");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)*MEMORY[0x24BEBEDE0];

  if (v12 == v13)
  {
    objc_msgSend(v3, "property:", CFSTR("size"));
    v54 = (re *)objc_claimAutoreleasedReturnValue();
    if (v54)
    {
      v35 = v54;
      v55 = re::globalAllocators(v54);
      v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v55[2] + 32))(v55[2], 32, 16);
      *(_DWORD *)(v52 + 8) = 3;
      *(_QWORD *)v52 = &off_24ED3BD18;
      *(_OWORD *)(v52 + 16) = 0u;
      objc_msgSend(v35, "doubleValue");
      *(float *)&v56 = v56;
      *(float32x4_t *)(v52 + 16) = vmulq_n_f32(v106, *(float *)&v56);
      goto LABEL_27;
    }
    v57 = v113;
    v59 = *((_QWORD *)&v114 + 1);
    v58 = v114;
    a1->i8[0] = 0;
    v60 = 3009;
    goto LABEL_30;
  }
  objc_msgSend(v3, "typeName");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "stringValue");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v15, "isEqualToString:", CFSTR("Preliminary_InfiniteColliderPlane")))
  {

LABEL_6:
    v16 = v3;
    objc_msgSend(MEMORY[0x24BEBED10], "localTransformWithNode:time:", v16, 0.0);
    v113 = v17;
    v114 = v18;
    v115 = v19;
    v116 = v20;
    v109.i64[0] = 0x3F8000003F800000;
    v109.i64[1] = 1065353216;
    v110 = 0;
    v111 = 0x3F80000000000000;
    __src = 0uLL;
    v21 = (re *)re::decomposeScaleRotationTranslation<float>((uint64_t)&v113, &v109, &v110, &__src);
    v22 = __src;
    v24 = v110;
    v23 = v111;
    v25 = re::globalAllocators(v21);
    v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25[2] + 32))(v25[2], 48, 16);
    *(_DWORD *)(v26 + 8) = 6;
    *(_QWORD *)v26 = &off_24ED3BED0;
    *(_OWORD *)(v26 + 16) = 0u;
    objc_msgSend(v16, "property:", CFSTR("position"));
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = v27;
    if (v27)
    {
      objc_msgSend(v27, "float3Value");
      v30 = vmulq_f32(v29, v29);
      *(float *)(v26 + 32) = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).f32[0]);
    }
    objc_msgSend(v16, "property:", CFSTR("normal"));
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = v31;
    if (v31)
    {
      objc_msgSend(v31, "float3Value");
      *(_OWORD *)(v26 + 16) = v33;
    }
    a1->i8[0] = 1;
    a1[1].i64[0] = v26;
    a1[2] = v22;
    a1[3].i64[0] = v24;
    a1[3].i64[1] = v23;

    goto LABEL_31;
  }
  objc_msgSend(v3, "type");
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  v62 = v61;
  if (v61 == (void *)*MEMORY[0x24BEBEDF8])
  {
    IsSceneGroundPlane = re::importPhysicsIsSceneGroundPlane(v3);

    if (IsSceneGroundPlane)
      goto LABEL_6;
  }
  else
  {

  }
  objc_msgSend(v3, "type");
  v81 = (void *)objc_claimAutoreleasedReturnValue();
  v82 = (void *)*MEMORY[0x24BEBEE28];

  v84 = *(uint64_t (**)(void))(*(_QWORD *)re::globalAllocators(v83)[2] + 32);
  if (v81 != v82)
  {
    v52 = v84();
    *(_DWORD *)(v52 + 8) = 1;
    *(_QWORD *)v52 = &off_24ED3BE98;
    goto LABEL_28;
  }
  v52 = v84();
  *(_DWORD *)(v52 + 8) = 7;
  *(_QWORD *)v52 = &off_24ED7CE68;
  *(_QWORD *)(v52 + 16) = 0;
  *(_QWORD *)(v52 + 24) = 0;
  *(_QWORD *)(v52 + 32) = 0;
  __src.i64[0] = 0;
  v109.i64[1] = 0;
  v110 = 0;
  LODWORD(v111) = 0;
  re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::setCapacity(&v109, 1uLL);
  v85 = v111 + 1;
  LODWORD(v111) = v111 + 1;
  objc_msgSend(v3, "loadedChildIterator");
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v86, "nextObject");
  v87 = (_anonymous_namespace_ *)objc_claimAutoreleasedReturnValue();
  if (v87)
  {
    v89 = v87;
    do
    {
      if (v113.i8[0])
      {
        v91 = v110;
        if (v110 >= v109.i64[1])
        {
          v92 = v110 + 1;
          if (v109.i64[1] < v110 + 1)
          {
            if (v109.i64[0])
            {
              v93 = 2 * v109.i64[1];
              if (!v109.i64[1])
                v93 = 8;
              if (v93 <= v92)
                v94 = v110 + 1;
              else
                v94 = v93;
              re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::setCapacity(&v109, v94);
              v85 = v111;
            }
            else
            {
              re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::setCapacity(&v109, v92);
              v85 = v111 + 1;
            }
          }
          v91 = v110;
        }
        v95 = (_OWORD *)(__src.i64[0] + 48 * v91);
        *v95 = v114;
        v95[1] = v115;
        v95[2] = v116;
        v110 = v91 + 1;
        LODWORD(v111) = ++v85;
      }
      else if ((_QWORD)v115 && (BYTE8(v115) & 1) != 0)
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v115 + 40))(v115, v116);
      }
      objc_msgSend(v86, "nextObject");
      v96 = objc_claimAutoreleasedReturnValue();

      v89 = (void *)v96;
    }
    while (v96);
  }
  v97 = (const void *)__src.i64[0];
  v98 = v110;
  if (*(_QWORD *)(v52 + 16))
    goto LABEL_61;
  if (!v110)
    goto LABEL_64;
  *(_QWORD *)(v52 + 24) = v98;
  if (v98 >= 0x555555555555556)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)6, v99, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 48, v98);
    _os_crash();
    __break(1u);
    goto LABEL_70;
  }
  *(_QWORD *)(v52 + 32) = v100;
  if (v100)
  {
    v101 = v98 - 1;
    if (v98 != 1)
    {
      do
      {
        *v100 = 0;
        v100[2] = 0;
        v100[3] = 0;
        v100[4] = 0;
        v100[5] = 0x3F80000000000000;
        v100 += 6;
        --v101;
      }
      while (v101);
    }
    *v100 = 0;
    v100[2] = 0;
    v100[3] = 0;
    v100[4] = 0;
    v100[5] = 0x3F80000000000000;
LABEL_61:
    if (*(_QWORD *)(v52 + 24) == v98)
    {
      if (v98)
      {
        memmove(*(void **)(v52 + 32), v97, 48 * v98);
LABEL_65:

        if (v109.i64[0] && __src.i64[0])
          (*(void (**)(void))(*(_QWORD *)v109.i64[0] + 40))();
        goto LABEL_28;
      }
LABEL_64:
      v102 = re::internal::destroyPersistent<re::CompoundShapeDataWorkaround>((re *)v52);
      v103 = re::globalAllocators(v102);
      v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v103[2] + 32))(v103[2], 16, 8);
      *(_DWORD *)(v52 + 8) = 1;
      *(_QWORD *)v52 = &off_24ED3BE98;
      goto LABEL_65;
    }
    re::internal::assertLog((re::internal *)4, v88, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    _os_crash();
    __break(1u);
    goto LABEL_69;
  }
LABEL_70:
  re::internal::assertLog((re::internal *)4, v88, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
  _os_crash();
  __break(1u);
}

void re::importPhysicsRigidBody(void *a1@<X0>, int32x4_t *a2@<X8>)
{
  _anonymous_namespace_ *v3;
  _anonymous_namespace_ *v4;
  void *v5;
  __int32 v6;
  int32x4_t v7;
  uint64_t v8;
  uint64_t v9;
  int32x4_t v10;
  uint64_t v11;
  uint64_t v12;

  objc_msgSend(a1, "property:", CFSTR("preliminary:physics:rigidBody:mass"));
  v3 = (_anonymous_namespace_ *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3
    && (-[_anonymous_namespace_ data](v3, "data"), v5 = (void *)objc_claimAutoreleasedReturnValue(),
                                                   v5,
                                                   v5))
  {
    -[_anonymous_namespace_ floatValue](v4, "floatValue");
    a2[1].i64[0] = 0;
    a2[1].i64[1] = 0;
    a2[2].i64[0] = 0;
    a2[2].i64[1] = 0x3F80000000000000;
    a2[3] = vdupq_n_s32(0x3DCCCCCDu);
    a2[4].i32[0] = v6;
    a2->i8[0] = 1;
  }
  else
  {
    v7 = v10;
    v8 = v11;
    v9 = v12;
    a2->i8[0] = 0;
    a2[1].i64[0] = 4001;
    a2[1].i64[1] = (uint64_t)&re::PhysicsErrorCategory(void)::instance;
    a2[2] = v7;
    a2[3].i64[0] = v8;
    a2[3].i64[1] = v9;
  }

}

uint64_t re::importPhysicsIsSceneGroundPlane(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  objc_msgSend(v1, "metadataWithKey:", CFSTR("preliminary_isSceneGroundPlane"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2
    || (objc_msgSend(v1, "customMetadataWithKey:", CFSTR("preliminary_isSceneGroundPlane")),
        (v2 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v3 = objc_msgSend(v2, "BOOLValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

uint64_t re::importPhysicsCollidesWithEnvironment(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  char v6;
  void *v7;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1;
    while (1)
    {
      objc_msgSend(v2, "metadataWithKey:", CFSTR("kind"));
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "stringValue");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "isEqual:", CFSTR("sceneLibrary"));

      if ((v6 & 1) != 0)
      {
LABEL_7:
        v11 = 0;
        goto LABEL_11;
      }
      objc_msgSend(v3, "metadataWithKey:", CFSTR("preliminary_collidesWithEnvironment"));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v7, "BOOLValue"))
        break;
      objc_msgSend(v3, "customMetadataWithKey:", CFSTR("preliminary_collidesWithEnvironment"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "BOOLValue");

      if ((v9 & 1) != 0)
        goto LABEL_10;
      objc_msgSend(v3, "parent");
      v10 = objc_claimAutoreleasedReturnValue();

      v3 = (void *)v10;
      if (!v10)
        goto LABEL_7;
    }

LABEL_10:
    v11 = 1;
LABEL_11:

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

re *re::internal::destroyPersistent<re::CompoundShapeDataWorkaround>(re *result)
{
  re::CompoundShapeDataWorkaround *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = re::globalAllocators(result)[2];
    re::CompoundShapeDataWorkaround::~CompoundShapeDataWorkaround(v1);
    return (re *)(*(uint64_t (**)(uint64_t, re::CompoundShapeDataWorkaround *))(*(_QWORD *)v2 + 40))(v2, v1);
  }
  return result;
}

void re::CompoundShapeDataWorkaround::~CompoundShapeDataWorkaround(re::CompoundShapeDataWorkaround *this)
{
  re::CompoundShapeDataWorkaround::~CompoundShapeDataWorkaround(this);
  JUMPOUT(0x2276933B8);
}

{
  re::CompoundShapeDataWorkaround *v1;
  uint64_t v2;
  _QWORD *v3;
  void (****v4)(_QWORD);
  uint64_t v5;
  void (***v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;

  v1 = this;
  v3 = (_QWORD *)((char *)this + 24);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v4 = (void (****)(_QWORD))*((_QWORD *)this + 4);
    v5 = 48 * v2;
    do
    {
      v6 = *v4;
      if (*v4)
      {
        v7 = re::globalAllocators(this)[2];
        (**v6)(v6);
        this = (re::CompoundShapeDataWorkaround *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v7 + 40))(v7, v6);
      }
      v4 += 6;
      v5 -= 48;
    }
    while (v5);
  }
  v8 = *((_QWORD *)v1 + 2);
  if (v8)
  {
    if (*v3)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *((_QWORD *)v1 + 4));
      *v3 = 0;
      v3[1] = 0;
    }
    *((_QWORD *)v1 + 2) = 0;
  }
}

uint64_t re::internal::loadUSKMeshNodes(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  _anonymous_namespace_ *v6;
  double GeomMeshFromUSKNode;
  re::GeomAttribute *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t USKMeshNodes;
  uint64_t v13;
  std::string *v15;
  const char *v16;
  re::GeomAttribute *v17;
  std::string v18;
  _BYTE v19[8];
  std::error_code v20;
  char v21;
  _BYTE v22[711];

  v3 = a1;
  if (!objc_msgSend(MEMORY[0x24BEBED10], "isSceneGraphNode:", v3))
    goto LABEL_9;
  if (!objc_msgSend(MEMORY[0x24BEBED10], "isTransformNode:", v3))
    goto LABEL_9;
  objc_msgSend(v3, "type");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)*MEMORY[0x24BEBEDF8];

  if (v4 != v5)
    goto LABEL_9;
  GeomMeshFromUSKNode = re::internal::createGeomMeshFromUSKNode(v3, (uint64_t)&v18, 0, 0, 1, (uint64_t)v19);
  if (v18.__r_.__value_.__r.__words[0] && (v18.__r_.__value_.__s.__data_[8] & 1) != 0)
    (*(void (**)(double))(*(_QWORD *)v18.__r_.__value_.__l.__data_ + 40))(GeomMeshFromUSKNode);
  if (v19[0])
  {
    re::DynamicArray<re::GeomMesh>::add(a2, (uint64_t)&v20);
    re::Result<re::GeomMesh,re::DetailedError>::~Result((uint64_t)v19, v8);
LABEL_9:
    objc_msgSend(v3, "childIterator");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "nextObject");
    v10 = objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      v11 = (void *)v10;
      do
      {
        USKMeshNodes = re::internal::loadUSKMeshNodes(v11, a2);
        if (!(_DWORD)USKMeshNodes)
          break;
        objc_msgSend(v9, "nextObject");
        v13 = objc_claimAutoreleasedReturnValue();

        v11 = (void *)v13;
      }
      while (v13);

    }
    else
    {
      USKMeshNodes = 1;
    }

    goto LABEL_16;
  }
  std::error_code::message(&v18, &v20);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v18;
  else
    v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
  if ((v21 & 1) != 0)
    v16 = *(const char **)&v22[7];
  else
    v16 = v22;
  printf("Error: %s\nDetails:\n%s", (const char *)v15, v16);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  re::Result<re::GeomMesh,re::DetailedError>::~Result((uint64_t)v19, v17);
  USKMeshNodes = 0;
LABEL_16:

  return USKMeshNodes;
}

uint64_t re::internal::importGeomMeshesFromFile@<X0>(re::internal *this@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int USKMeshNodes;
  re::GeomAttribute *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  _anonymous_namespace_ *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  re::GeomAttribute *v18;
  _BYTE v20[24];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  uint64_t v26;

  v26 = 0;
  v24 = 0uLL;
  v23 = 0;
  v25 = 0;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", this);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BEBED00]), "initSceneFromURL:", v5);
  v7 = v6;
  if (v6
    && (objc_msgSend(v6, "rootNode"),
        v8 = (void *)objc_claimAutoreleasedReturnValue(),
        USKMeshNodes = re::internal::loadUSKMeshNodes(v8, (uint64_t)&v23),
        v8,
        USKMeshNodes))
  {
    v11 = v23;
    v22 = 0;
    v23 = 0;
    v12 = v26;
    v26 = 0;
    ++v25;
    *(_BYTE *)a2 = 1;
    *(_QWORD *)(a2 + 8) = v11;
    *(_QWORD *)v20 = 0;
    v13 = v24;
    v24 = 0u;
    *(_OWORD *)(a2 + 16) = v13;
    *(_OWORD *)&v20[8] = 0u;
    *(_QWORD *)(a2 + 40) = v12;
    LODWORD(v21) = 2;
    *(_DWORD *)(a2 + 32) = 1;
    re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v20, v10);
  }
  else
  {
    v14 = (_anonymous_namespace_ *)std::system_category();
    v15 = *(_OWORD *)v20;
    v16 = *(_QWORD *)&v20[16];
    v17 = v21;
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = v14;
    *(_OWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 40) = v16;
    *(_QWORD *)(a2 + 48) = v17;
  }

  return re::DynamicArray<re::GeomMesh>::deinit((uint64_t)&v23, v18);
}

void re::internal::`anonymous namespace'::addPropertyToUSKMeshNodeFromGeomAttributeHelper(unint64_t a1, const char *a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v10;
  id v11;
  unsigned __int8 *v12;
  const re::GeomAttribute *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  _anonymous_namespace_ *v20;
  uint64_t v21;
  unsigned int v22;
  void *v23;
  uint64_t v24;
  _anonymous_namespace_ *v25;
  uint64_t v26;
  unsigned int v27;
  void *v28;
  uint64_t v29;
  _anonymous_namespace_ *v30;
  uint64_t v31;
  unsigned int v32;
  void *v33;
  uint64_t v34;
  _anonymous_namespace_ *v35;
  uint64_t v36;
  unsigned int v37;
  void *v38;
  uint64_t v39;
  _anonymous_namespace_ *v40;
  uint64_t v41;
  unsigned int v42;
  void *v43;
  uint64_t v44;
  _anonymous_namespace_ *v45;
  uint64_t v46;
  unsigned int v47;
  void *v48;
  uint64_t v49;
  _anonymous_namespace_ *v50;
  uint64_t v51;
  unsigned int v52;
  void *v53;
  uint64_t v54;
  _anonymous_namespace_ *v55;
  uint64_t v56;
  unsigned int v57;
  void *v58;
  uint64_t v59;
  _anonymous_namespace_ *v60;
  uint64_t v61;
  unsigned int v62;
  void *v63;
  uint64_t v64;
  _anonymous_namespace_ *v65;
  uint64_t v66;
  unsigned int v67;
  void *v68;
  uint64_t v69;
  _anonymous_namespace_ *v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  id v90;
  uint64_t v91;
  id v92;
  id v93;
  unint64_t v94;
  void *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  id v102;
  const __CFString *v103;
  void *v104;
  const re::GeomAttribute *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  int *v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  BOOL v122;
  uint64_t v123;
  void *v124;
  void *v125;
  unint64_t v126;
  id v127;
  void *v128;
  id v129;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  const char *v136;
  __int16 v137;
  int v138;
  __int16 v139;
  unint64_t v140;
  __int16 v141;
  unint64_t v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;

  v148 = *MEMORY[0x24BDAC8D0];
  v10 = a4;
  v11 = a6;
  if (!a2)
    goto LABEL_121;
  if (!a5)
    goto LABEL_121;
  v12 = (unsigned __int8 *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 64), a2);
  if (!v12)
    goto LABEL_121;
  v14 = v12;
  v15 = v12[16];
  v16 = v15;
  if (v15 == 3)
  {
    if (*(_DWORD *)(re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v12, v13) + 24) != *(_DWORD *)(a1 + 40))
      goto LABEL_121;
    v16 = v14[16];
  }
  if (!v16)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)v13, "assertion failure: '%s' (%s:line %i) Currently don't support mesh rate attributes", "!\"Unreachable code\"", "addPropertyToUSKMeshNodeFromGeomAttributeHelper", 314);
    _os_crash();
    __break(1u);
LABEL_187:
    re::internal::assertLog((re::internal *)4, v108, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    _os_crash();
    __break(1u);
LABEL_188:
    re::internal::assertLog((re::internal *)4, (uint64_t)v13, "assertion failure: '%s' (%s:line %i) Unhandled type", "!\"Unreachable code\"", "addPropertyToUSKMeshNodeFromGeomAttributeHelper", 310);
    _os_crash();
    __break(1u);
    JUMPOUT(0x225AFBD64);
  }
  v129 = v11;
  switch(v14[17])
  {
    case 0u:
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a5);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = objc_msgSend(v10, "newPropertyWithName:type:role:", v17, *MEMORY[0x24BEBED80], v11);

      v19 = (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
      v20 = (_anonymous_namespace_ *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
      a1 = v18;
      if ((_DWORD)v20)
      {
        v21 = re::internal::GeomTypedAttribute<short>::operator[]((uint64_t)v14, 0);
        v20 = (_anonymous_namespace_ *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
        v22 = v20;
      }
      else
      {
        v22 = 0;
        v21 = 0;
      }
      v131 = 0;
      v132 = 0;
      v133 = 0;
      if (!(_DWORD)v19)
        goto LABEL_108;
      v73 = 0;
      v75 = (uint64_t)v132;
      v74 = v133;
      v76 = v22;
      while (v22 != v73)
      {
        if (v75 == v73)
          goto LABEL_174;
        *(_DWORD *)(v74 + 4 * v73) = *(__int16 *)(v21 + 2 * v73);
        if (v19 == ++v73)
          goto LABEL_108;
      }
      goto LABEL_163;
    case 1u:
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a5);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = objc_msgSend(v10, "newPropertyWithName:type:role:", v23, *MEMORY[0x24BEBED80], v11);

      v19 = (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
      v25 = (_anonymous_namespace_ *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
      a1 = v24;
      if ((_DWORD)v25)
      {
        v26 = re::internal::GeomTypedAttribute<short>::operator[]((uint64_t)v14, 0);
        v25 = (_anonymous_namespace_ *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
        v27 = v25;
      }
      else
      {
        v27 = 0;
        v26 = 0;
      }
      v131 = 0;
      v132 = 0;
      v133 = 0;
      if (!(_DWORD)v19)
        goto LABEL_108;
      v77 = 0;
      v75 = (uint64_t)v132;
      v78 = v133;
      v76 = v27;
      while (v27 != v77)
      {
        if (v75 == v77)
          goto LABEL_175;
        *(_DWORD *)(v78 + 4 * v77) = *(unsigned __int16 *)(v26 + 2 * v77);
        if (v19 == ++v77)
          goto LABEL_108;
      }
      goto LABEL_164;
    case 2u:
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a5);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = objc_msgSend(v10, "newPropertyWithName:type:role:", v28, *MEMORY[0x24BEBED80], v11);

      v19 = (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
      v30 = (_anonymous_namespace_ *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
      a1 = v29;
      if ((_DWORD)v30)
      {
        v31 = re::internal::GeomTypedAttribute<int>::operator[]((uint64_t)v14, 0);
        v30 = (_anonymous_namespace_ *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
        v32 = v30;
      }
      else
      {
        v32 = 0;
        v31 = 0;
      }
      v131 = 0;
      v132 = 0;
      v133 = 0;
      if (!(_DWORD)v19)
        goto LABEL_108;
      v79 = 0;
      v75 = (uint64_t)v132;
      v80 = v133;
      v76 = v32;
      while (v32 != v79)
      {
        if (v75 == v79)
          goto LABEL_176;
        *(_DWORD *)(v80 + 4 * v79) = *(_DWORD *)(v31 + 4 * v79);
        if (v19 == ++v79)
          goto LABEL_108;
      }
      goto LABEL_165;
    case 3u:
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a5);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = objc_msgSend(v10, "newPropertyWithName:type:role:", v33, *MEMORY[0x24BEBED80], v11);

      v19 = (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
      v35 = (_anonymous_namespace_ *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
      a1 = v34;
      if ((_DWORD)v35)
      {
        v36 = re::internal::GeomTypedAttribute<int>::operator[]((uint64_t)v14, 0);
        v35 = (_anonymous_namespace_ *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
        v37 = v35;
      }
      else
      {
        v37 = 0;
        v36 = 0;
      }
      v131 = 0;
      v132 = 0;
      v133 = 0;
      if (!(_DWORD)v19)
        goto LABEL_108;
      v81 = 0;
      v75 = (uint64_t)v132;
      v82 = v133;
      v76 = v37;
      while (v37 != v81)
      {
        if (v75 == v81)
          goto LABEL_177;
        *(_DWORD *)(v82 + 4 * v81) = *(_DWORD *)(v36 + 4 * v81);
        if (v19 == ++v81)
          goto LABEL_108;
      }
      goto LABEL_166;
    case 4u:
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a5);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = objc_msgSend(v10, "newPropertyWithName:type:role:", v38, *MEMORY[0x24BEBED70], v11);

      v19 = (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
      v40 = (_anonymous_namespace_ *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
      a1 = v39;
      if ((_DWORD)v40)
      {
        v41 = re::internal::GeomTypedAttribute<int>::operator[]((uint64_t)v14, 0);
        v40 = (_anonymous_namespace_ *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
        v42 = v40;
      }
      else
      {
        v42 = 0;
        v41 = 0;
      }
      v131 = 0;
      v132 = 0;
      v133 = 0;
      if (!(_DWORD)v19)
        goto LABEL_65;
      v83 = 0;
      v75 = (uint64_t)v132;
      v84 = v133;
      v76 = v42;
      do
      {
        if (v42 == v83)
          goto LABEL_167;
        if (v75 == v83)
          goto LABEL_178;
        *(_DWORD *)(v84 + 4 * v83) = *(_DWORD *)(v41 + 4 * v83);
        ++v83;
      }
      while (v19 != v83);
LABEL_65:
      v85 = objc_alloc(MEMORY[0x24BEBECD8]);
      v86 = objc_msgSend(v85, "initWithFloatArray:count:", v133, v19);
      goto LABEL_109;
    case 5u:
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a5);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      v44 = objc_msgSend(v10, "newPropertyWithName:type:role:", v43, *MEMORY[0x24BEBED38], v11);

      v19 = (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
      v45 = (_anonymous_namespace_ *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
      a1 = v44;
      if ((_DWORD)v45)
      {
        v46 = re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)v14, 0);
        v45 = (_anonymous_namespace_ *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
        v47 = v45;
      }
      else
      {
        v47 = 0;
        v46 = 0;
      }
      v131 = 0;
      v132 = 0;
      v133 = 0;
      if (!(_DWORD)v19)
        goto LABEL_72;
      v87 = 0;
      v75 = (uint64_t)v132;
      v88 = v133;
      v76 = v47;
      do
      {
        if (v47 == v87)
          goto LABEL_168;
        if (v75 == v87)
          goto LABEL_179;
        *(_QWORD *)(v88 + 8 * v87) = *(_QWORD *)(v46 + 8 * v87);
        ++v87;
      }
      while (v19 != v87);
LABEL_72:
      v89 = objc_alloc(MEMORY[0x24BEBECD8]);
      v86 = objc_msgSend(v89, "initWithDoubleArray:count:", v133, v19);
      goto LABEL_109;
    case 6u:
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a5);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      v49 = objc_msgSend(v10, "newPropertyWithName:type:role:", v48, *MEMORY[0x24BEBED48], v11);

      v19 = (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
      v50 = (_anonymous_namespace_ *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
      v128 = (void *)v49;
      if ((_DWORD)v50)
      {
        v51 = re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)v14, 0);
        v50 = (_anonymous_namespace_ *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
        v52 = v50;
      }
      else
      {
        v52 = 0;
        v51 = 0;
      }
      v131 = 0;
      v132 = 0;
      v133 = 0;
      if (!(_DWORD)v19)
        goto LABEL_79;
      v76 = 0;
      v75 = v52;
      do
      {
        if (v52 == v76)
          goto LABEL_169;
        a1 = (unint64_t)v132;
        if ((unint64_t)v132 <= v76)
          goto LABEL_180;
        *(_QWORD *)(v133 + 8 * v76) = *(_QWORD *)(v51 + 8 * v76);
        ++v76;
      }
      while (v19 != v76);
LABEL_79:
      v90 = objc_alloc(MEMORY[0x24BEBECD8]);
      v91 = objc_msgSend(v90, "initWithFloat2Array:count:", v133, v19);
      goto LABEL_94;
    case 7u:
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a5);
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      v54 = objc_msgSend(v10, "newPropertyWithName:type:role:", v53, *MEMORY[0x24BEBED58], v11);

      v19 = (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
      v55 = (_anonymous_namespace_ *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
      v128 = (void *)v54;
      if ((_DWORD)v55)
      {
        v56 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v14, 0);
        v55 = (_anonymous_namespace_ *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
        v57 = v55;
      }
      else
      {
        v57 = 0;
        v56 = 0;
      }
      v131 = 0;
      v132 = 0;
      v133 = 0;
      if (!(_DWORD)v19)
        goto LABEL_86;
      v76 = 0;
      v75 = v57;
      do
      {
        if (v57 == v76)
          goto LABEL_170;
        a1 = (unint64_t)v132;
        if ((unint64_t)v132 <= v76)
          goto LABEL_181;
        *(_OWORD *)(v133 + 16 * v76) = *(_OWORD *)(v56 + 16 * v76);
        ++v76;
      }
      while (v19 != v76);
LABEL_86:
      v92 = objc_alloc(MEMORY[0x24BEBECD8]);
      v91 = objc_msgSend(v92, "initWithFloat3Array:count:", v133, v19);
      goto LABEL_94;
    case 8u:
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a5);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      v59 = objc_msgSend(v10, "newPropertyWithName:type:role:", v58, *MEMORY[0x24BEBED60], v11);

      v19 = (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
      v60 = (_anonymous_namespace_ *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
      v128 = (void *)v59;
      if ((_DWORD)v60)
      {
        v61 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v14, 0);
        v60 = (_anonymous_namespace_ *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
        v62 = v60;
      }
      else
      {
        v62 = 0;
        v61 = 0;
      }
      v131 = 0;
      v132 = 0;
      v133 = 0;
      if (!(_DWORD)v19)
        goto LABEL_93;
      v76 = 0;
      v75 = v62;
      do
      {
        if (v62 == v76)
          goto LABEL_171;
        a1 = (unint64_t)v132;
        if ((unint64_t)v132 <= v76)
          goto LABEL_182;
        *(_OWORD *)(v133 + 16 * v76) = *(_OWORD *)(v61 + 16 * v76);
        ++v76;
      }
      while (v19 != v76);
LABEL_93:
      v93 = objc_alloc(MEMORY[0x24BEBECD8]);
      v91 = objc_msgSend(v93, "initWithFloat4Array:count:", v133, v19);
LABEL_94:
      v94 = v91;
      v95 = v128;
      v96 = v128;
      goto LABEL_110;
    case 9u:
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a5);
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      v64 = objc_msgSend(v10, "newPropertyWithName:type:role:", v63, *MEMORY[0x24BEBED80], v11);

      v19 = (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
      v65 = (_anonymous_namespace_ *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
      a1 = v64;
      if ((_DWORD)v65)
      {
        v66 = re::internal::GeomTypedAttribute<signed char>::operator[]((uint64_t)v14, 0);
        v65 = (_anonymous_namespace_ *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
        v67 = v65;
      }
      else
      {
        v67 = 0;
        v66 = 0;
      }
      v131 = 0;
      v132 = 0;
      v133 = 0;
      if (!(_DWORD)v19)
        goto LABEL_108;
      v97 = 0;
      v75 = (uint64_t)v132;
      v98 = v133;
      v76 = v67;
      while (v67 != v97)
      {
        if (v75 == v97)
          goto LABEL_183;
        *(_DWORD *)(v98 + 4 * v97) = *(unsigned __int8 *)(v66 + v97);
        if (v19 == ++v97)
          goto LABEL_108;
      }
      goto LABEL_172;
    case 0xAu:
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a5);
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      v69 = objc_msgSend(v10, "newPropertyWithName:type:role:", v68, *MEMORY[0x24BEBED80], v11);

      v19 = (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
      v70 = (_anonymous_namespace_ *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
      a1 = v69;
      if ((_DWORD)v70)
      {
        v71 = re::internal::GeomTypedAttribute<signed char>::operator[]((uint64_t)v14, 0);
        v70 = (_anonymous_namespace_ *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v14 + 16))(v14);
        v72 = v70;
      }
      else
      {
        v72 = 0;
        v71 = 0;
      }
      v131 = 0;
      v132 = 0;
      v133 = 0;
      if (!(_DWORD)v19)
        goto LABEL_108;
      v99 = 0;
      v75 = (uint64_t)v132;
      v100 = v133;
      v76 = v72;
      break;
    default:
      goto LABEL_188;
  }
  do
  {
    if (v72 == v99)
      goto LABEL_173;
    if (v75 == v99)
      goto LABEL_184;
    *(_DWORD *)(v100 + 4 * v99) = *(char *)(v71 + v99);
    ++v99;
  }
  while (v19 != v99);
LABEL_108:
  v101 = objc_alloc(MEMORY[0x24BEBECD8]);
  v86 = objc_msgSend(v101, "initWithIntArray:count:", v133, v19);
LABEL_109:
  v94 = v86;
  v95 = (void *)a1;
  v96 = (void *)a1;
LABEL_110:
  objc_msgSend(v96, "setData:", v94);

  if (v131 && v132)
    (*(void (**)(void))(*(_QWORD *)v131 + 40))();
  v11 = v129;
  if (!v95)
    goto LABEL_120;
  if (v15 == 2)
  {
    v102 = objc_alloc(MEMORY[0x24BEBECD8]);
    v103 = CFSTR("uniform");
    goto LABEL_118;
  }
  if (v15 == 1)
  {
    v102 = objc_alloc(MEMORY[0x24BEBECD8]);
    v103 = CFSTR("vertex");
LABEL_118:
    a1 = objc_msgSend(v102, "initWithString:", v103);
    objc_msgSend(v95, "setMetadataWithKey:value:", CFSTR("interpolation"), a1);
    goto LABEL_119;
  }
  if (v15 != 3)
  {
    if (v15)
      goto LABEL_120;
    objc_msgSend(v95, "setMetadataWithKey:value:", CFSTR("interpolation"), objc_msgSend(objc_alloc(MEMORY[0x24BEBECD8]), "initWithString:", CFSTR("constant")));
    re::internal::assertLog((re::internal *)4, v123, "assertion failure: '%s' (%s:line %i) Mesh rate attributes are currently not handled", "!\"Unreachable code\"", "addPropertyToUSKMeshNodeFromGeomAttributeHelper", 345);
    _os_crash();
    __break(1u);
LABEL_153:
    v109 = 0;
    v110 = v133;
    v122 = v132 == 0;
    goto LABEL_154;
  }
  v94 = 0x24BEBE000uLL;
  a1 = objc_msgSend(objc_alloc(MEMORY[0x24BEBECD8]), "initWithString:", CFSTR("faceVarying"));
  v128 = v95;
  objc_msgSend(v95, "setMetadataWithKey:value:", CFSTR("interpolation"), a1);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%s:indices"), a5);
  v104 = (void *)objc_claimAutoreleasedReturnValue();
  v127 = v10;
  a5 = (void *)objc_msgSend(v10, "newPropertyWithName:type:role:", v104, *MEMORY[0x24BEBED80], *MEMORY[0x24BEBEE40]);

  v106 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v14, v105);
  v107 = *(_QWORD *)(a3 + 16);
  v131 = 0;
  v132 = 0;
  v133 = 0;
  v76 = v107;
  if (!(_DWORD)v107)
    goto LABEL_153;
  v125 = a5;
  v126 = a1;
  a1 = 0;
  LODWORD(v109) = 0;
  a5 = v132;
  v110 = v133;
  v75 = 3;
  v111 = a3;
  do
  {
    LODWORD(v143) = a1;
    v112 = *(unsigned __int8 *)(v106 + 140);
    if (v112 == 2)
    {
      v114 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)(v106 + 144), (unsigned int *)&v143);
      if (v114 == -1)
        v113 = -1;
      else
        v113 = *(_DWORD *)(*(_QWORD *)(v106 + 152) + 8 * v114 + 4);
      v111 = a3;
    }
    else if (v112 == 1)
    {
      if (*(_QWORD *)(v106 + 160) <= a1)
        v113 = -1;
      else
        v113 = *(_DWORD *)(*(_QWORD *)(v106 + 176) + 4 * a1);
    }
    else
    {
      if (*(_BYTE *)(v106 + 140))
        goto LABEL_187;
      if (a1 >= *(unsigned int *)(v106 + 144))
        v113 = -1;
      else
        v113 = a1;
    }
    v19 = v113;
    v115 = *(_QWORD *)(v106 + 24);
    if (v115 <= v113)
    {
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 797;
      v139 = 2048;
      v140 = v19;
      v141 = 2048;
      v142 = v115;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_159:
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 797;
      v139 = 2048;
      v140 = a1;
      v141 = 2048;
      v142 = v115;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_160:
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      v75 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 468;
      v139 = 2048;
      v140 = v115;
      v141 = 2048;
      v142 = (unint64_t)a5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_161:
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 468;
      v139 = 2048;
      v140 = v19;
      v141 = 2048;
      v142 = (unint64_t)a5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_162:
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 468;
      v139 = 2048;
      v140 = v19;
      v141 = 2048;
      v142 = (unint64_t)a5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_163:
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 601;
      v139 = 2048;
      v140 = v76;
      v141 = 2048;
      v142 = v76;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_164:
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 601;
      v139 = 2048;
      v140 = v76;
      v141 = 2048;
      v142 = v76;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_165:
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 601;
      v139 = 2048;
      v140 = v76;
      v141 = 2048;
      v142 = v76;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_166:
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 601;
      v139 = 2048;
      v140 = v76;
      v141 = 2048;
      v142 = v76;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_167:
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 601;
      v139 = 2048;
      v140 = v76;
      v141 = 2048;
      v142 = v76;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_168:
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 601;
      v139 = 2048;
      v140 = v76;
      v141 = 2048;
      v142 = v76;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_169:
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 601;
      v139 = 2048;
      v140 = v75;
      v141 = 2048;
      v142 = v75;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_170:
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 601;
      v139 = 2048;
      v140 = v75;
      v141 = 2048;
      v142 = v75;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_171:
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 601;
      v139 = 2048;
      v140 = v75;
      v141 = 2048;
      v142 = v75;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_172:
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 601;
      v139 = 2048;
      v140 = v76;
      v141 = 2048;
      v142 = v76;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_173:
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 601;
      v139 = 2048;
      v140 = v76;
      v141 = 2048;
      v142 = v76;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_174:
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 468;
      v139 = 2048;
      v140 = v75;
      v141 = 2048;
      v142 = v75;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_175:
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 468;
      v139 = 2048;
      v140 = v75;
      v141 = 2048;
      v142 = v75;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_176:
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 468;
      v139 = 2048;
      v140 = v75;
      v141 = 2048;
      v142 = v75;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_177:
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 468;
      v139 = 2048;
      v140 = v75;
      v141 = 2048;
      v142 = v75;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_178:
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 468;
      v139 = 2048;
      v140 = v75;
      v141 = 2048;
      v142 = v75;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_179:
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 468;
      v139 = 2048;
      v140 = v75;
      v141 = 2048;
      v142 = v75;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_180:
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 468;
      v139 = 2048;
      v140 = v76;
      v141 = 2048;
      v142 = a1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_181:
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 468;
      v139 = 2048;
      v140 = v76;
      v141 = 2048;
      v142 = a1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_182:
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 468;
      v139 = 2048;
      v140 = v76;
      v141 = 2048;
      v142 = a1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_183:
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 468;
      v139 = 2048;
      v140 = v75;
      v141 = 2048;
      v142 = v75;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_184:
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 468;
      v139 = 2048;
      v140 = v75;
      v141 = 2048;
      v142 = v75;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_185:
      v134 = 0;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v143 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      v136 = "operator[]";
      v137 = 1024;
      v138 = 468;
      v139 = 2048;
      v140 = v19;
      v141 = 2048;
      v142 = (unint64_t)a5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v115 = *(_QWORD *)(v111 + 16);
    if (v115 <= a1)
      goto LABEL_159;
    v115 = *(unsigned __int8 *)(*(_QWORD *)(v111 + 32) + 4 * a1);
    if ((unint64_t)a5 <= v115)
      goto LABEL_160;
    v116 = (int *)(*(_QWORD *)(v106 + 40) + 16 * v113);
    v118 = *v116;
    v117 = v116[1];
    v120 = v116[2];
    v119 = v116[3];
    *(_DWORD *)(v110 + 4 * v115) = v118;
    v19 = (v115 + 1);
    if ((unint64_t)a5 <= v19)
      goto LABEL_161;
    *(_DWORD *)(v110 + 4 * v19) = v117;
    v19 = (v115 + 2);
    if ((unint64_t)a5 <= v19)
      goto LABEL_162;
    *(_DWORD *)(v110 + 4 * v19) = v120;
    if (v119 == -1)
      v121 = 3;
    else
      v121 = 4;
    if (v119 != -1)
    {
      v19 = (v115 + 3);
      if ((unint64_t)a5 <= v19)
        goto LABEL_185;
      *(_DWORD *)(v110 + 4 * v19) = v119;
    }
    v109 = (v121 + v109);
    ++a1;
  }
  while (v76 != a1);
  v122 = 0;
  v11 = v129;
  a5 = v125;
  a1 = v126;
  v94 = 0x24BEBE000;
LABEL_154:
  v124 = (void *)objc_msgSend(objc_alloc(*(Class *)(v94 + 3288)), "initWithIntArray:count:", v110, v109);
  if (v131 && !v122)
    (*(void (**)(void))(*(_QWORD *)v131 + 40))();
  objc_msgSend(a5, "setData:", v124);

  v10 = v127;
  v95 = v128;
LABEL_119:

LABEL_120:
LABEL_121:

}

void re::internal::exportGeomMeshesToUSDFile(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  __CFString *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _anonymous_namespace_ *v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  const char *v19;
  _DWORD *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  _BYTE *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  _anonymous_namespace_ *v41;
  unint64_t v42;
  void **v43;
  uint64_t v44;
  _anonymous_namespace_ *v45;
  unint64_t v46;
  unint64_t *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  int *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  void *v63;
  void *v64;
  void *v65;
  id v66;
  void *v67;
  unint64_t v68;
  re::internal::GeomAttributeManager *v69;
  int v70;
  unsigned int i;
  uint64_t v72;
  char *v73;
  _anonymous_namespace_ *v74;
  double v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  uint64_t v81;
  _anonymous_namespace_ *v82;
  _anonymous_namespace_ *v83;
  char v84;
  char v85;
  _anonymous_namespace_ *v86;
  __int128 v87;
  __int128 v88;
  __CFString *v89;
  _anonymous_namespace_ *v90;
  const char *v91;
  char v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  int *v96;
  uint64_t v97;
  void *context;
  uint64_t v99;
  void *v100;
  void *v102;
  void *v103;
  void *v104;
  const __CFString *v105;
  void *v106;
  void *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  id v117;
  id v118;
  void *v119;
  unint64_t v120;
  id v121;
  _anonymous_namespace_ *v122;
  _anonymous_namespace_ *v123;
  id v124;
  _anonymous_namespace_ *v125;
  char v126;
  _BYTE v127[7];
  _BYTE *v128;
  __int128 v129;
  __int128 v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  const char *v146;
  __int16 v147;
  int v148;
  __int16 v149;
  unint64_t v150;
  __int16 v151;
  void *v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;

  v158 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v102 = (void *)objc_claimAutoreleasedReturnValue();
  NSTemporaryDirectory();
  v5 = objc_claimAutoreleasedReturnValue();
  v99 = a1;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "pathExtension");
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue();

  v105 = v7;
  if ((-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("usd")) & 1) == 0
    && (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("usda")) & 1) == 0
    && (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("usdc")) & 1) == 0
    && (-[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("usdz")) & 1) == 0)
  {

    v105 = CFSTR("usda");
  }
  objc_msgSend(MEMORY[0x24BDD1880], "UUID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)MEMORY[0x24BDD17C8];
  v100 = v8;
  objc_msgSend(v8, "UUIDString");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v103 = (void *)v5;
  objc_msgSend(v9, "stringWithFormat:", CFSTR("%@/%@.%@"), v5, v10, v105);
  v11 = objc_claimAutoreleasedReturnValue();

  context = (void *)MEMORY[0x227694090]();
  v12 = (void *)MEMORY[0x24BEBED00];
  v104 = (void *)v11;
  objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v113 = (void *)objc_msgSend(v12, "newSceneWithURL:", v13);

  v131 = 0;
  v129 = 0u;
  v130 = 0u;
  v132 = 0x7FFFFFFFLL;
  v112 = a2[1];
  if (!v112)
    goto LABEL_87;
  v16 = 0;
  v111 = *MEMORY[0x24BEBEDF8];
  v110 = *MEMORY[0x24BEBEDB0];
  v17 = (void *)*MEMORY[0x24BEBEE40];
  v108 = (void *)*MEMORY[0x24BEBEE50];
  v109 = *MEMORY[0x24BEBED80];
  v106 = (void *)*MEMORY[0x24BEBEE48];
  v107 = (void *)*MEMORY[0x24BEBEE58];
  v119 = (void *)*MEMORY[0x24BEBEE40];
  do
  {
    v18 = a2[1];
    if (v18 <= v16)
    {
      re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v16, v18);
      _os_crash();
      __break(1u);
LABEL_110:
      re::internal::assertLog((re::internal *)6, v33, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v16, v34);
      _os_crash();
      __break(1u);
    }
    if (*(_QWORD *)(*a2 + 736 * v16))
      v19 = *(const char **)(*a2 + 736 * v16);
    else
      v19 = "unnamed";
    v20 = (_DWORD *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)&v129, (uint64_t)&v125);
    if (!v20)
    {
      LODWORD(v153) = 0;
      v24 = re::Hash<re::DynamicString>::operator()((uint64_t)&v133, (uint64_t)&v125);
      v25 = v24;
      if ((_QWORD)v129)
      {
        v26 = v24 % DWORD2(v130);
        v27 = *(unsigned int *)(*((_QWORD *)&v129 + 1) + 4 * v26);
        if ((_DWORD)v27 != 0x7FFFFFFF)
        {
          v28 = v130;
          do
          {
            v23 = re::DynamicString::operator==(v28 + 56 * v27 + 16, (uint64_t)&v125);
            if ((v23 & 1) != 0)
              goto LABEL_27;
            v27 = *(_DWORD *)(v28 + 56 * v27 + 8) & 0x7FFFFFFF;
          }
          while (v27 != 0x7FFFFFFF);
        }
      }
      else
      {
        LODWORD(v26) = 0;
      }
      v23 = re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove((uint64_t)&v129, v26, v25, (re::DynamicString *)&v125, &v153);
      ++HIDWORD(v132);
LABEL_27:
      v17 = v119;
      goto LABEL_28;
    }
    v21 = (*v20 + 1);
    *v20 = v21;
    if ((v126 & 1) != 0)
      v22 = v128;
    else
      v22 = v127;
    re::DynamicString::format((re::DynamicString *)"%s_%d", (re::DynamicString *)&v153, v22, v21);
    re::DynamicString::operator=((re::DynamicString *)&v125, (re::DynamicString *)&v153);
    v23 = v153;
    if ((_QWORD)v153 && (BYTE8(v153) & 1) != 0)
      v23 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v153 + 40))(v153, v154);
LABEL_28:
    re::DynamicString::operator+((re::DynamicString *)&v133, (uint64_t)&v125, (re::DynamicString *)&v153);
    re::DynamicString::operator=((re::DynamicString *)&v125, (re::DynamicString *)&v153);
    if ((_QWORD)v153)
    {
      if ((BYTE8(v153) & 1) != 0)
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v153 + 40))(v153, v154);
      v153 = 0u;
      v154 = 0u;
    }
    if (v133 && (v134 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v133 + 40))();
    v29 = objc_alloc(MEMORY[0x24BEBECE8]);
    if ((v126 & 1) != 0)
      v30 = v128;
    else
      v30 = v127;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = (void *)objc_msgSend(v29, "initWithString:", v31);

    v34 = a2[1];
    if (v34 <= v16)
      goto LABEL_110;
    v35 = *a2;
    v36 = v113;
    v37 = v32;
    v137 = 0;
    v134 = 0;
    v135 = 0;
    v133 = 0;
    v136 = 0;
    v38 = (void *)objc_msgSend(v36, "newNodeAtPath:type:", v37, v111);
    v39 = v38;
    if (!v38)
      goto LABEL_80;
    v117 = v36;
    v118 = v37;
    v40 = (void *)objc_msgSend(v38, "newPropertyWithName:type:role:", CFSTR("subdivisionScheme"), v110, v17);
    v114 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BEBED08]), "initWithString:", CFSTR("none"));
    v115 = v40;
    objc_msgSend(v40, "setTokenValue:", v114);
    v116 = v39;
    v41 = v39;
    v42 = v35 + 736 * v16;
    v44 = *(_QWORD *)(v42 + 40);
    v43 = (void **)(v42 + 40);
    v141 = 0;
    v142 = 0;
    v143 = 0;
    v138 = 0;
    v139 = 0;
    v140 = 0;
    v46 = v44;
    LODWORD(v153) = 0;
    v135 = 0;
    ++v136;
    LODWORD(v153) = 0;
    re::DynamicArray<unsigned int>::resize(&v133, v44, &v153);
    v120 = v35;
    if (!(_DWORD)v44)
    {
      v49 = 0;
      v55 = v143;
      goto LABEL_55;
    }
    v47 = a2;
    v48 = 0;
    LODWORD(v49) = 0;
    v50 = *v43;
    v51 = v135;
    v52 = v137;
    v54 = v139;
    v53 = v140;
    v56 = v142;
    v55 = v143;
    v57 = (int *)(*(_QWORD *)(v35 + 736 * v16 + 56) + 8);
    do
    {
      if (v50 == v48)
      {
        v144 = 0;
        v156 = 0u;
        v157 = 0u;
        v154 = 0u;
        v155 = 0u;
        v153 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v145 = 136315906;
        v146 = "operator[]";
        v147 = 1024;
        v148 = 797;
        v149 = 2048;
        v150 = (unint64_t)v50;
        v151 = 2048;
        v152 = v50;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_98:
        v144 = 0;
        v156 = 0u;
        v157 = 0u;
        v154 = 0u;
        v155 = 0u;
        v153 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v145 = 136315906;
        v146 = "operator[]";
        v147 = 1024;
        v148 = 789;
        v149 = 2048;
        v150 = (unint64_t)v51;
        v151 = 2048;
        v152 = v51;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_99:
        v144 = 0;
        v156 = 0u;
        v157 = 0u;
        v154 = 0u;
        v155 = 0u;
        v153 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v145 = 136315906;
        v146 = "operator[]";
        v147 = 1024;
        v148 = 468;
        v149 = 2048;
        v150 = (unint64_t)v54;
        v151 = 2048;
        v152 = v54;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_100:
        v144 = 0;
        v156 = 0u;
        v157 = 0u;
        v154 = 0u;
        v155 = 0u;
        v153 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v145 = 136315906;
        v146 = "operator[]";
        v147 = 1024;
        v148 = 468;
        v149 = 2048;
        v150 = v35;
        v151 = 2048;
        v152 = v56;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_101:
        v144 = 0;
        v156 = 0u;
        v157 = 0u;
        v154 = 0u;
        v155 = 0u;
        v153 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v145 = 136315906;
        v146 = "operator[]";
        v147 = 1024;
        v148 = 468;
        v149 = 2048;
        v150 = v35;
        v151 = 2048;
        v152 = v56;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_102:
        v144 = 0;
        v156 = 0u;
        v157 = 0u;
        v154 = 0u;
        v155 = 0u;
        v153 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v145 = 136315906;
        v146 = "operator[]";
        v147 = 1024;
        v148 = 468;
        v149 = 2048;
        v150 = v35;
        v151 = 2048;
        v152 = v56;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_103:
        v144 = 0;
        v156 = 0u;
        v157 = 0u;
        v154 = 0u;
        v155 = 0u;
        v153 = 0u;
        v78 = (void *)MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v145 = 136315906;
        v146 = "operator[]";
        v147 = 1024;
        v148 = 468;
        v149 = 2048;
        v150 = v35;
        v151 = 2048;
        v152 = v56;
        LODWORD(v97) = 38;
        v96 = &v145;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_104;
      }
      if (v51 == v48)
        goto LABEL_98;
      v59 = *(v57 - 2);
      v58 = *(v57 - 1);
      v61 = *v57;
      v60 = v57[1];
      *(_DWORD *)(v52 + 4 * (_QWORD)v48) = v49;
      if (v60 == -1)
        v62 = 3;
      else
        v62 = 4;
      if (v54 == v48)
        goto LABEL_99;
      *(_DWORD *)(v53 + 4 * (_QWORD)v48) = v62;
      v35 = v49;
      if ((unint64_t)v56 <= v49)
        goto LABEL_100;
      *(_DWORD *)(v55 + 4 * v49) = v59;
      v35 = (v49 + 1);
      if ((unint64_t)v56 <= v35)
        goto LABEL_101;
      *(_DWORD *)(v55 + 4 * v35) = v58;
      v35 = (v49 + 2);
      if ((unint64_t)v56 <= v35)
        goto LABEL_102;
      *(_DWORD *)(v55 + 4 * v35) = v61;
      v35 = (v49 + 3);
      if ((unint64_t)v56 <= v35)
        goto LABEL_103;
      *(_DWORD *)(v55 + 4 * v35) = v60;
      v49 = (v62 + v49);
      v48 = (char *)v48 + 1;
      v57 += 4;
    }
    while ((void *)v46 != v48);
    a2 = v47;
    v17 = v119;
LABEL_55:
    v63 = (void *)-[_anonymous_namespace_ newPropertyWithName:type:role:](v41, "newPropertyWithName:type:role:", CFSTR("faceVertexIndices"), v109, v17);
    v64 = (void *)-[_anonymous_namespace_ newPropertyWithName:type:role:](v41, "newPropertyWithName:type:role:", CFSTR("faceVertexCounts"), v109, v17);
    v65 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BEBECD8]), "initWithIntArray:count:", v55, v49);
    objc_msgSend(v63, "setData:", v65);

    v66 = objc_alloc(MEMORY[0x24BEBECD8]);
    v67 = (void *)objc_msgSend(v66, "initWithIntArray:count:", v140, v46);
    objc_msgSend(v64, "setData:", v67);

    if (v138 && v139)
      (*(void (**)(void))(*(_QWORD *)v138 + 40))();
    if (v141 && v142)
      (*(void (**)(void))(*(_QWORD *)v141 + 40))();
    v68 = v120 + 736 * v16;

    v69 = (re::internal::GeomAttributeManager *)(v68 + 64);
    v17 = v119;
    if (re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(v68 + 64), "vertexUV"))
    {
    }
    if (re::internal::GeomAttributeManager::attributeByName(v69, "vertexNormal"))
    if (re::internal::GeomAttributeManager::attributeByName(v69, "vertexTangent"))
    if (re::internal::GeomAttributeManager::attributeByName(v69, "vertexBitangent"))
    v70 = *(_DWORD *)(v120 + 736 * v16 + 640);
    if (v70)
    {
      for (i = 0; i != v70; ++i)
      {
        v72 = re::internal::GeomAttributeManager::attributeByIndex(v69, i);
        if (*(_BYTE *)(v72 + 16))
        {
          v73 = *(char **)(v72 + 8);
          if (strcmp(v73, "vertexPosition"))
          {
            if (strcmp(v73, "vertexUV")
              && strcmp(v73, "vertexNormal")
              && strcmp(v73, "vertexTangent")
              && strcmp(v73, "vertexBitangent"))
            {
            }
          }
        }
      }
    }
    v74 = v41;

    v36 = v117;
    v37 = v118;
    v39 = v116;
LABEL_80:

    if (v133 && v137)
      (*(void (**)(void))(*(_QWORD *)v133 + 40))();

    v14 = v125;
    if (v125)
    {
      if ((v126 & 1) != 0)
        v14 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v125 + 40))();
    }
    ++v16;
  }
  while (v16 != v112);
LABEL_87:
  objc_msgSend(v113, "save");
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v129, v75);

  objc_autoreleasePoolPop(context);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v99);
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v76, "stringByDeletingPathExtension");
  v77 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v77, "stringByAppendingPathExtension:", v105);
  v78 = (void *)objc_claimAutoreleasedReturnValue();

  v56 = v102;
  if ((objc_msgSend(v102, "fileExistsAtPath:", v78) & 1) == 0)
  {
    v121 = 0;
    v85 = objc_msgSend(v102, "moveItemAtPath:toPath:error:", v104, v78, &v121);
    v41 = (_anonymous_namespace_ *)v121;
    if ((v85 & 1) == 0)
    {
      v86 = (_anonymous_namespace_ *)std::system_category();
      v87 = v153;
      v88 = v154;
      *(_BYTE *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = v86;
      *(_OWORD *)(a3 + 24) = v87;
      *(_OWORD *)(a3 + 40) = v88;
      goto LABEL_107;
    }
    goto LABEL_95;
  }
  if (!objc_msgSend(v102, "isDeletableFileAtPath:", v78))
  {
    v41 = 0;
LABEL_95:
    v89 = (__CFString *)v105;
    *(_BYTE *)a3 = 1;
    *(_BYTE *)(a3 + 8) = 1;
    goto LABEL_108;
  }
  v79 = (void *)MEMORY[0x24BDD17C8];
  objc_msgSend(MEMORY[0x24BDD1880], "UUID");
  v80 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v80, "UUIDString");
  v81 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v79, "stringWithFormat:", CFSTR("%@/%@.%@"), v103, v81, v105);
  v51 = (void *)objc_claimAutoreleasedReturnValue();

  v124 = 0;
  LOBYTE(v81) = objc_msgSend(v102, "moveItemAtPath:toPath:error:", v78, v51, &v124);
  v82 = (_anonymous_namespace_ *)v124;
  v83 = v82;
  if ((v81 & 1) == 0)
  {
    v90 = (_anonymous_namespace_ *)std::system_category();
    v91 = "Could not backup original file";
    goto LABEL_106;
  }
  v123 = v82;
  v84 = objc_msgSend(v102, "moveItemAtPath:toPath:error:", v104, v78, &v123);
  v41 = v123;

  if ((v84 & 1) != 0)
  {

    goto LABEL_95;
  }
LABEL_104:
  v122 = v41;
  v92 = objc_msgSend(v56, "moveItemAtPath:toPath:error:", v51, v78, &v122, v96, v97);
  v83 = v122;

  if ((v92 & 1) != 0)
  {
    v90 = (_anonymous_namespace_ *)std::system_category();
    v91 = "Failed to write file.";
LABEL_106:
    v94 = v153;
    v95 = v154;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = v90;
    *(_OWORD *)(a3 + 24) = v94;
    *(_OWORD *)(a3 + 40) = v95;

    v41 = v83;
    v56 = v102;
LABEL_107:
    v89 = (__CFString *)v105;
LABEL_108:

  }
  else
  {
    re::internal::assertLog((re::internal *)4, v93, "assertion failure: '%s' (%s:line %i) We failed to attempting to replace a file", "!\"Unreachable code\"", "exportGeomMeshesToUSDFile", 497);
    _os_crash();
    __break(1u);
  }
}

_QWORD *re::FixedArray<int>::init<unsigned int const&>(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  *result = a2;
  result[1] = a3;
  if (a3)
  {
    v4 = result;
    v5 = 4 * a3;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 4 * a3, 4);
    v4[2] = result;
    if (result)
    {
      v7 = result;
      if (a3 != 1)
      {
        result = memset(result, 255, v5 - 4);
        v7 = (_DWORD *)((char *)v7 + v5 - 4);
      }
      *v7 = -1;
    }
    else
    {
      re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      result = (_QWORD *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::Result<re::GeomMesh,re::DetailedError>::~Result(uint64_t a1, re::GeomAttribute *a2)
{
  uint64_t v3;
  _OWORD *v4;

  if (*(_BYTE *)a1)
  {
    re::GeomMesh::~GeomMesh((re::GeomMesh *)(a1 + 8), a2);
  }
  else
  {
    v4 = (_OWORD *)(a1 + 24);
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      if ((*(_BYTE *)(a1 + 32) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 40));
      *v4 = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
    }
  }
  return a1;
}

uint64_t re::ImportGraphicsContext::ImportGraphicsContext(uint64_t a1, id *a2, id *a3, int a4, unsigned __int8 *a5)
{
  int v9;

  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = *a3;
  *(_BYTE *)(a1 + 18) = BYTE2(a4);
  *(_WORD *)(a1 + 16) = a4;
  v9 = *a5;
  *(_BYTE *)(a1 + 19) = v9;
  if (v9)
    *(_BYTE *)(a1 + 20) = a5[1];
  *(_QWORD *)(a1 + 24) = 0;
  return a1;
}

re::ImportGraphicsContext *re::ImportGraphicsContext::ImportGraphicsContext(re::ImportGraphicsContext *this, id *a2)
{
  __int16 v4;
  _BYTE *v5;

  *(_QWORD *)this = *a2;
  *((_QWORD *)this + 1) = a2[1];
  v4 = *((_WORD *)a2 + 8);
  *((_BYTE *)this + 18) = *((_BYTE *)a2 + 18);
  *((_WORD *)this + 8) = v4;
  v5 = a2[3];
  if (v5)
    LOBYTE(v5) = *v5;
  *((_BYTE *)this + 19) = 1;
  *((_BYTE *)this + 20) = (_BYTE)v5;
  *((_QWORD *)this + 3) = a2;
  return this;
}

void re::ImportGraphicsContext::getOrCreateCommandQueue(uint64_t a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, id *a4@<X8>)
{
  if (*(_QWORD *)(a1 + 24))
    re::ImportGraphicsResources::getOrCreateCommandQueue(*(_QWORD *)(a1 + 24), a2, a3, a4);
  else
    re::ImportGraphicsResources::createCommandQueue((id *)a1, *(const re::mtl::Device **)(a2 + 8), a3, a4);
}

re::ImportGraphicsContext *re::ImportGraphicsContext::createFromRenderManager@<X0>(re::ImportGraphicsContext *this@<X0>, re::ImportGraphicsContext *a2@<X8>)
{
  id *v5;
  unsigned __int8 *v7;
  id *v8;
  id *v9;
  int v10;
  unsigned __int8 v11;
  unsigned __int8 v12[2];

  v5 = (id *)*((_QWORD *)this + 12);
  if (v5)
    return re::ImportGraphicsContext::ImportGraphicsContext(a2, v5);
  v7 = (unsigned __int8 *)*((_QWORD *)this + 19);
  v8 = (id *)((char *)this + 184);
  v9 = (id *)(*((_QWORD *)this + 7) + 248);
  v10 = *((unsigned __int16 *)this + 140) | (*((unsigned __int8 *)this + 282) << 16);
  if (v7)
    v11 = *v7;
  else
    v11 = 0;
  v12[0] = 1;
  v12[1] = v11;
  return (re::ImportGraphicsContext *)re::ImportGraphicsContext::ImportGraphicsContext((uint64_t)a2, v8, v9, v10 & 0xFFFFFF, v12);
}

void re::ImportGraphicsContext::createFromAvailableManagers(re::ImportGraphicsContext *this@<X0>, const re::RenderManager *a2@<X1>, re::ImportGraphicsContext *a3@<X8>)
{
  unsigned __int8 v5;
  unsigned __int8 v6[2];
  id v7;
  id v8;

  if (this)
  {
    re::ImportGraphicsContext::createFromRenderManager(this, a3);
  }
  else
  {
    v7 = 0;
    v8 = 0;
    if (a2)
      v5 = *(_BYTE *)a2;
    else
      v5 = 0;
    v6[0] = 1;
    v6[1] = v5;
    re::ImportGraphicsContext::ImportGraphicsContext((uint64_t)a3, &v8, &v7, 65793, v6);

  }
}

uint64_t re::internal::getFaceOrArrayLength(id *a1)
{
  id v3;
  id v4;

  if (objc_msgSend(*a1, sel_textureType) == (id)5)
    return 6;
  v3 = objc_msgSend(*a1, sel_textureType);
  v4 = *a1;
  if (v3 == (id)6)
    return 6 * objc_msgSend(v4, sel_arrayLength);
  if (objc_msgSend(v4, sel_textureType) == (id)3)
    return (uint64_t)objc_msgSend(*a1, sel_arrayLength);
  return 1;
}

{
  unsigned int v3;
  id v4;

  if (objc_msgSend(*a1, sel_textureType) == 5)
    return 6;
  v3 = objc_msgSend(*a1, sel_textureType);
  v4 = *a1;
  if (v3 == 6)
    return 6 * objc_msgSend(v4, sel_arrayLength);
  if (objc_msgSend(v4, sel_textureType) == 3)
    return (uint64_t)objc_msgSend(*a1, sel_arrayLength);
  return 1;
}

uint64_t re::internal::getFaceOrArrayLength(id *this, const re::TextureData *a2)
{
  unsigned int v4;
  unsigned int v5;
  id *v6;

  if (*((_DWORD *)this + 22) < 2u)
  {
    if (objc_msgSend(this[1], sel_textureType) == 5)
      return 6;
    if (*((_DWORD *)this + 22) < 2u)
    {
      v4 = objc_msgSend(this[1], sel_textureType);
      v5 = *((_DWORD *)this + 22);
      if (v4 == 6)
      {
        if (v5 < 2)
          return 6 * objc_msgSend(this[1], sel_arrayLength);
      }
      else if (v5 < 2)
      {
        if (objc_msgSend(this[1], sel_textureType) != 3)
          return 1;
        if (*((_DWORD *)this + 22) < 2u)
          return (uint64_t)objc_msgSend(this[1], sel_arrayLength);
      }
    }
  }
  v6 = (id *)std::__throw_bad_variant_access[abi:nn180100]();
  return re::internal::getFaceOrArrayLength(v6);
}

void re::internal::synchronizeTextureMipmaps(id *this, const re::TextureData *a2)
{
  id v3;
  const re::TextureData *v4;
  re *v5;
  NSObject *v6;
  char *v7;
  id v8;
  __int128 v9;
  __int128 v10;
  id v11;
  id v12;
  id v13;
  uint8_t buf[4];
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!*((_DWORD *)this + 22))
  {
    v3 = this[1];
    if (objc_msgSend(v3, sel_storageMode) == (id)1)
    {
      re::TextureData::mipmapLevelCount((re::TextureData *)this);
      re::internal::getFaceOrArrayLength(this, v4);
      v8 = objc_msgSend(v3, sel_device);
      re::ImportGraphicsResources::createCommandQueue(&v8, (const re::mtl::Device *)"blitMipmapsQueue", (const char *)1, &v13);

      re::mtl::CommandQueue::makeCommandBuffer(&v13, &v12);
      re::mtl::CommandBuffer::makeBlitCommandEncoder(&v12, &v11);
      objc_msgSend(v11, "endEncoding");
      objc_msgSend(v12, "commit");
      objc_msgSend(v12, "waitUntilCompleted");
      re::internal::getCommandBufferError(&v12, (uint64_t)&v8);
      if (!(_BYTE)v8)
      {
        v6 = *re::pipelineLogObjects(v5);
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)
          || ((BYTE8(v9) & 1) != 0 ? (v7 = (char *)v10) : (v7 = (char *)&v9 + 9),
              *(_DWORD *)buf = 136315138,
              v15 = v7,
        {
          if ((_QWORD)v9)
          {
            if ((BYTE8(v9) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v9 + 40))();
            v9 = 0u;
            v10 = 0u;
          }
        }
      }

    }
    if (v3)

  }
}

void re::internal::getCommandBufferError(id *this@<X0>, uint64_t a2@<X8>)
{
  id v5;
  id v6;
  _anonymous_namespace_ *v7;
  id v8;
  _anonymous_namespace_ *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  id v16[2];
  uint64_t v17;
  uint64_t v18;

  v5 = *this;
  if (v5 && objc_msgSend(v5, "status") == 5)
  {
    re::mtl::CommandBuffer::error(this, v16);
    v6 = objc_retainAutorelease(v16[0]);

    if (v6)
    {
      objc_msgSend(v6, "localizedDescription");
      v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v9 = (_anonymous_namespace_ *)objc_msgSend(v8, "UTF8String");
      v10 = *(_OWORD *)v16;
      v16[0] = 0;
      v16[1] = 0;
      v11 = v17;
      v12 = v18;
      v17 = 0;
      v18 = 0;
      *(_BYTE *)a2 = 0;
      *(_OWORD *)(a2 + 8) = v10;
      *(_QWORD *)(a2 + 24) = v11;
      *(_QWORD *)(a2 + 32) = v12;

    }
    else
    {
      v13 = *(_OWORD *)v16;
      v14 = v17;
      v15 = v18;
      *(_BYTE *)a2 = 0;
      *(_OWORD *)(a2 + 8) = v13;
      *(_QWORD *)(a2 + 24) = v14;
      *(_QWORD *)(a2 + 32) = v15;
    }

  }
  else
  {
    *(_BYTE *)a2 = 1;
  }
}

_anonymous_namespace_ *re::internal::ensureImageArrayConsistency@<X0>(_anonymous_namespace_ *result@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  const char *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CGImage **i;
  CGImage *v11;
  CGImage *v12;
  CGBitmapInfo BitmapInfo;
  _anonymous_namespace_ *v14;
  uint64_t v15;
  size_t BitsPerPixel;
  _anonymous_namespace_ *v17;
  size_t BitsPerComponent;
  size_t Width;
  size_t Height;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  if (!a2)
  {
    v5 = "Image array is empty";
    goto LABEL_9;
  }
  if (a2 != 1 && a3 == 2)
  {
    v5 = "Texture2D must have an image array of size 1";
LABEL_9:
    v6 = v21;
    v7 = v22;
    v8 = v23;
    *(_BYTE *)a4 = 0;
    *(_OWORD *)(a4 + 8) = v6;
    *(_QWORD *)(a4 + 24) = v7;
    *(_QWORD *)(a4 + 32) = v8;
    return result;
  }
  if (a2 != 6 && a3 == 5)
  {
    v5 = "TextureCube must have an image array of size 6";
    goto LABEL_9;
  }
  v9 = a2 - 1;
  if (a2 != 1)
  {
    for (i = (CGImage **)((char *)result + 8); ; ++i)
    {
      v12 = *(i - 1);
      v11 = *i;
      BitmapInfo = CGImageGetBitmapInfo(v12);
      v14 = (_anonymous_namespace_ *)CGImageGetBitmapInfo(v11);
      if (BitmapInfo != (_DWORD)v14)
      {
        v5 = "Inconsistent image CGBitmapInfo";
        goto LABEL_9;
      }
      CGImageGetColorSpace(v12);
      CGImageGetColorSpace(v11);
      v15 = CGColorSpaceEqualToColorSpace();
      if ((v15 & 1) == 0)
        break;
      BitsPerPixel = CGImageGetBitsPerPixel(v12);
      v17 = (_anonymous_namespace_ *)CGImageGetBitsPerPixel(v11);
      if ((_anonymous_namespace_ *)BitsPerPixel != v17
        || (BitsPerComponent = CGImageGetBitsPerComponent(v12),
            v17 = (_anonymous_namespace_ *)CGImageGetBitsPerComponent(v11),
            (_anonymous_namespace_ *)BitsPerComponent != v17))
      {
        v5 = "Inconsistent image pixel format";
        goto LABEL_9;
      }
      Width = CGImageGetWidth(v12);
      result = (_anonymous_namespace_ *)CGImageGetWidth(v11);
      if ((_anonymous_namespace_ *)Width != result
        || (Height = CGImageGetHeight(v12),
            result = (_anonymous_namespace_ *)CGImageGetHeight(v11),
            (_anonymous_namespace_ *)Height != result))
      {
        v5 = "Inconsistent image size";
        goto LABEL_9;
      }
      *(_BYTE *)a4 = 1;
      if (!--v9)
        return result;
    }
    v5 = "Inconsistent image CGColorSpace";
    goto LABEL_9;
  }
  *(_BYTE *)a4 = 1;
  return result;
}

uint64_t re::internal::getDestinationTransferFunctionFromOptions(re::internal *this, const re::TextureFromImageOptions *a2, CGColorSpace *a3)
{
  unsigned int v3;
  uint64_t v4;
  const __CFString *v6;
  CGColorSpace *v7;
  const __CFString *v8;
  re *v9;
  CGColorSpace *v10;
  NSObject *v11;
  NSObject *v12;
  unsigned int ColorSpaceTransferFunction;
  CGColorSpace *v14;
  int v16;
  const char *CStringPtr;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = *((_DWORD *)this + 12);
  if (v3)
    v4 = v3;
  else
    v4 = 1;
  if (v3 || (a3 & 1) != 0)
    return v4;
  if ((*((_DWORD *)this + 14) - 3) > 1)
    return 0;
  v6 = (const __CFString *)*((id *)this + 8);
  if (!v6)
  {
LABEL_11:
    if (a2)
    {
      v10 = 0;
      v9 = a2;
      goto LABEL_13;
    }
    return 0;
  }
  v8 = v6;
  v9 = CGColorSpaceCreateWithName(v6);
  v10 = v9;
  if (!v9)
  {
    v11 = *re::pipelineLogObjects(0);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = v11;
      v16 = 136315138;
      CStringPtr = CFStringGetCStringPtr(v8, 0x8000100u);
      _os_log_impl(&dword_224FE9000, v12, OS_LOG_TYPE_DEFAULT, "Invalid colorSpaceNameOverride: %s", (uint8_t *)&v16, 0xCu);

    }
    goto LABEL_11;
  }
LABEL_13:
  ColorSpaceTransferFunction = re::getColorSpaceTransferFunction(v9, v7);
  if (re::internal::colorSpaceIsExtendedOrHDR(v9, v14))
    v4 = 1;
  else
    v4 = ColorSpaceTransferFunction;
  if (v10)
    CGColorSpaceRelease(v10);
  return v4;
}

uint64_t re::internal::broadcastRToRGB(unsigned __int8 *a1)
{
  int v1;
  int v2;
  int v3;
  int v4;

  v1 = *a1;
  if ((v1 - 2) < 3)
    v1 = 2;
  v2 = a1[1];
  if ((v2 - 2) < 3)
    v2 = 2;
  v3 = a1[2];
  if ((v3 - 2) < 3)
    v3 = 2;
  if (a1[3] - 2 >= 3)
    v4 = a1[3];
  else
    v4 = 2;
  return (v3 << 16) | (v4 << 24) | (v2 << 8) | v1;
}

uint64_t re::internal::downsampleFactorToFitDeviceLimits(id *a1, int a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  id v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t result;
  char v11;
  unsigned int v12;
  char v13;
  char v14;
  char v15;
  unsigned int v16;
  char v17;
  char v18;
  char v19;

  v6 = *a1;
  if (!v6)
    return 1;
  if (a3 <= a4)
    v7 = a4;
  else
    v7 = a3;
  if (v7 <= a5)
    v8 = a5;
  else
    v8 = v7;
  if (a2 == 7)
  {
    v9 = 2048;
  }
  else
  {
    v9 = 0x4000;
    if ((objc_msgSend(v6, "supportsFamily:", 1003) & 1) == 0)
    {
      if (objc_msgSend(*a1, "supportsFamily:", 2002))
        v9 = 0x4000;
      else
        v9 = 0x2000;
    }
  }
  result = 1;
  if (v9 < v8)
  {
    v11 = __clz(v8);
    v12 = (0x80000000 >> v11) - 1;
    v13 = 32 - v11;
    v14 = v11 ^ 0x1F;
    if ((v12 & v8) != 0)
      v14 = v13;
    v15 = __clz(v9);
    v16 = (0x80000000 >> v15) - 1;
    v17 = v15 | 0xE0;
    v18 = v15 - 31;
    if ((v16 & v9) != 0)
      v19 = v17;
    else
      v19 = v18;
    return (1 << (v19 + v14));
  }
  return result;
}

void re::TextureFromImageOptions::setColorSpace(re::TextureFromImageOptions *this, __CFString *a2)
{
  __CFString *v4;
  __CFString *v5;
  void *v6;

  if (a2)
    v4 = a2;
  else
    v4 = 0;
  v5 = v4;
  v6 = (void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = a2;

}

id re::internal::applySemanticToOptions@<X0>(re::internal *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v5;
  id result;
  int v7;
  int v8;

  v5 = *((_OWORD *)this + 1);
  *(_OWORD *)a2 = *(_OWORD *)this;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = *((_OWORD *)this + 2);
  *(_OWORD *)(a2 + 44) = *(_OWORD *)((char *)this + 44);
  result = *((id *)this + 8);
  *(_QWORD *)(a2 + 64) = result;
  *(_OWORD *)(a2 + 72) = *(_OWORD *)((char *)this + 72);
  if (*(_DWORD *)a2 == 2)
    *(_DWORD *)a2 = 0;
  if (*(_DWORD *)(a2 + 4) == 3)
  {
    v7 = *(_DWORD *)(a2 + 56);
    if (v7)
    {
      if (v7 == 2)
        v8 = 1;
      else
        v8 = 2 * ((v7 - 3) < 2);
    }
    else
    {
      v8 = 2;
    }
    *(_DWORD *)(a2 + 4) = v8;
  }
  return result;
}

BOOL re::internal::isBasisTextureData(CFDataRef *this, const __CFData *const *a2)
{
  const UInt8 *BytePtr;

  BytePtr = CFDataGetBytePtr(*this);
  return (unint64_t)CFDataGetLength(*this) >= 2 && *BytePtr == 115 && BytePtr[1] == 66;
}

uint64_t re::internal::textureMightNeedPixelFormatViewUsage()
{
  MTLPixelFormatGetInfoForDevice();
  return 0;
}

void re::internal::createRepackedTexture(id *a1@<X0>, id *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  re *v8;
  int v10;
  uint64_t isHDR;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  id v22;
  id v23;
  re *v24;
  NSObject *v25;
  NSObject *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  id v31;
  NSObject *v32;
  id v33[2];
  _BYTE buf[12];
  __int16 v35;
  unint64_t v36;
  uint8_t v37[16];
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v8 = (re *)objc_msgSend(*a2, sel_textureType);
  if ((unint64_t)v8 > 7 || ((1 << (char)v8) & 0xAC) == 0)
  {
    v26 = *re::pipelineLogObjects(v8);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v31 = *a2;
      v32 = v26;
      *(_DWORD *)v37 = 67109120;
      *(_DWORD *)&v37[4] = objc_msgSend(v31, sel_textureType);
      _os_log_error_impl(&dword_224FE9000, v32, OS_LOG_TYPE_ERROR, "Unable to repack texture type %d", v37, 8u);

    }
    *a4 = 0;
  }
  else
  {
    v10 = objc_msgSend(*a2, sel_pixelFormat);
    v40 = 0;
    v38 = 0u;
    v39 = 0u;
    *(_OWORD *)v37 = 0u;
    MTLPixelFormatGetInfoForDevice();
    isHDR = re::isHDR(v10);
    v12 = 0 / 0uLL;
    v13 = 10;
    if (0 / 0uLL <= 0x1F)
      v14 = 25;
    else
      v14 = 55;
    if ((_DWORD)isHDR)
      v13 = v14;
    if (v12 <= 0x1F)
      v15 = 115;
    else
      v15 = 125;
    if (!(_DWORD)isHDR)
      v15 = 70;
    if (v39 == 1)
      v16 = v13;
    else
      v16 = v15;
    v17 = 8;
    if ((_DWORD)isHDR)
      v17 = 16;
    if (v12 <= 0x1F)
      v18 = v17;
    else
      v18 = 32;
    if (v12 > v18)
    {
      v19 = *re::pipelineLogObjects((re *)isHDR);
      isHDR = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)isHDR)
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = 8 * *((_QWORD *)&v38 + 1) / (unint64_t)v39;
        v35 = 2048;
        v36 = v18;
        _os_log_impl(&dword_224FE9000, v19, OS_LOG_TYPE_DEFAULT, "Texture repack lost precision (before: %zu bpc, after: %zu bpc)", buf, 0x16u);
      }
    }
    v20 = *re::pipelineLogObjects((re *)isHDR);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      if (a3 > 5u)
        v27 = 63;
      else
        v27 = *(_DWORD *)&a0_3[4 * (char)a3];
      if (BYTE1(a3) > 5u)
        v28 = 63;
      else
        v28 = *(_DWORD *)&a0_3[(uint64_t)(a3 >> 8 << 56) >> 54];
      if (BYTE2(a3) > 5u)
        v29 = 63;
      else
        v29 = *(_DWORD *)&a0_3[(uint64_t)(a3 >> 16 << 56) >> 54];
      if (BYTE3(a3) > 5u)
        v30 = 63;
      else
        v30 = *(_DWORD *)&a0_3[(uint64_t)(a3 >> 24 << 56) >> 54];
      *(_DWORD *)v37 = 67110144;
      *(_DWORD *)&v37[4] = v16;
      *(_WORD *)&v37[8] = 1024;
      *(_DWORD *)&v37[10] = v27;
      *(_WORD *)&v37[14] = 1024;
      LODWORD(v38) = v28;
      WORD2(v38) = 1024;
      *(_DWORD *)((char *)&v38 + 6) = v29;
      WORD5(v38) = 1024;
      HIDWORD(v38) = v30;
      _os_log_debug_impl(&dword_224FE9000, v20, OS_LOG_TYPE_DEBUG, "Repacking texture to pixel format %d to bake in texture swizzle '%c%c%c%c'", v37, 0x20u);
    }
    *(_QWORD *)v37 = *a1;
    v21 = objc_msgSend(*a2, sel_usage) | 2;
    v22 = objc_msgSend(*a2, sel_storageMode);
    v23 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
    objc_msgSend(v23, sel_setStorageMode_, v22);
    objc_msgSend(v23, sel_setTextureType_, objc_msgSend(*a2, sel_textureType));
    objc_msgSend(v23, sel_setWidth_, objc_msgSend(*a2, sel_width));
    objc_msgSend(v23, sel_setHeight_, objc_msgSend(*a2, sel_height));
    objc_msgSend(v23, sel_setDepth_, objc_msgSend(*a2, sel_depth));
    objc_msgSend(v23, sel_setArrayLength_, objc_msgSend(*a2, sel_arrayLength));
    objc_msgSend(v23, sel_setPixelFormat_, v16);
    objc_msgSend(v23, sel_setMipmapLevelCount_, objc_msgSend(*a2, sel_mipmapLevelCount));
    objc_msgSend(v23, sel_setSampleCount_, objc_msgSend(*a2, sel_sampleCount));
    objc_msgSend(v23, sel_setUsage_, v21);
    objc_msgSend(v23, sel_setCpuCacheMode_, objc_msgSend(*a2, sel_cpuCacheMode));
    *(_QWORD *)buf = 0;
    if (objc_msgSend(*a2, sel_isShareable))
      re::mtl::Device::makeSharedTexture(v23, (id *)v37, v33);
    else
      re::mtl::Device::makeTexture(v23, (id *)v37, v33);
    NS::SharedPtr<MTL::Texture>::operator=((void **)buf, v33);
    v24 = (re *)v33[0];
    if (v33[0])

    if (*(_QWORD *)buf)
    {
      re::copyTexture(a1, a2, (id *)buf, a3, 0);
      *a4 = *(_QWORD *)buf;
    }
    else
    {
      v25 = *re::pipelineLogObjects(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
      {
        LOWORD(v33[0]) = 0;
        _os_log_fault_impl(&dword_224FE9000, v25, OS_LOG_TYPE_FAULT, "Failed to create repacked texture", (uint8_t *)v33, 2u);
      }
      *a4 = 0;
      if (*(_QWORD *)buf)

    }
    if (v23)

  }
}

void re::copyTexture(id *a1, id *a2, id *a3, unint64_t a4, int a5)
{
  int v6;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  char *v14;
  const char *v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  re *InfoForDevice;
  NSObject *v25;
  re *v26;
  NSObject *v27;
  NSObject *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  id v35;
  NSObject *v36;
  id v37;
  __int128 *v38;
  char v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  void *v47;
  _BYTE v48[4];
  uint8_t v49[4];
  id v50;
  __int16 v51;
  __int128 *v52;
  uint8_t buf[16];
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;

  v6 = a4;
  v10 = a4 >> 8;
  v57 = *MEMORY[0x24BDAC8D0];
  v11 = a4 >> 16;
  v12 = a4 >> 24;
  v13 = *re::pipelineLogObjects((re *)a1);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    v41 = *a2;
    v28 = v13;
    v29 = objc_msgSend(v41, sel_pixelFormat);
    v30 = objc_msgSend(*a3, sel_pixelFormat);
    if (v6 > 5u)
      v31 = 63;
    else
      v31 = *(_DWORD *)&a0_3[4 * (char)v6];
    if (BYTE1(v6) > 5u)
      v32 = 63;
    else
      v32 = *(_DWORD *)&a0_3[4 * (char)v10];
    if (BYTE2(v6) > 5u)
      v33 = 63;
    else
      v33 = *(_DWORD *)&a0_3[4 * (char)v11];
    if (HIBYTE(v6) > 5u)
      v34 = 63;
    else
      v34 = *(_DWORD *)&a0_3[4 * (char)v12];
    *(_DWORD *)buf = 67110400;
    *(_DWORD *)&buf[4] = v29;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v30;
    *(_WORD *)&buf[14] = 1024;
    LODWORD(v54) = v31;
    WORD2(v54) = 1024;
    *(_DWORD *)((char *)&v54 + 6) = v32;
    WORD5(v54) = 1024;
    HIDWORD(v54) = v33;
    LOWORD(v55) = 1024;
    *(_DWORD *)((char *)&v55 + 2) = v34;
    _os_log_debug_impl(&dword_224FE9000, v28, OS_LOG_TYPE_DEBUG, "Copying texture from pixel format %d to pixel format %d to bake in texture swizzle '%c%c%c%c'", buf, 0x26u);

  }
  v48[0] = v6;
  v48[1] = v10;
  v48[2] = v11;
  v48[3] = v12;
  v14 = (char *)objc_msgSend(*a2, sel_textureType);
  if ((unint64_t)(v14 - 2) >= 2)
  {
    if (v14 == (char *)7)
    {
      v39 = a5;
      if (a5)
        v15 = "repack3DTextureWithSRGBToLinear";
      else
        v15 = "repack3DTexture";
      v16 = 7;
      goto LABEL_13;
    }
    if (v14 != (char *)5)
      return;
  }
  v39 = a5;
  if (a5)
    v15 = "repack2DTextureWithSRGBToLinear";
  else
    v15 = "repack2DTexture";
  v16 = 2;
LABEL_13:
  v40 = (id)v16;
  v17 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD5B0], sel_alloc), sel_init);
  objc_msgSend(v17, sel_setName_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, v15, 4));
  re::mtl::Library::makeFunctionWithDescriptor(a1 + 1, v17, &v47);
  v18 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD550], sel_alloc), sel_init);
  v46 = v18;
  v19 = v47;
  objc_msgSend(v18, sel_setComputeFunction_, v47);
  re::mtl::Device::makeComputePipelineState(a1, &v46, &v45);
  re::ImportGraphicsContext::getOrCreateCommandQueue((uint64_t)a1, (uint64_t)&re::internal::copyTextureQueueName(void)::queueName, (const char *)1, &v44);
  re::mtl::CommandQueue::makeCommandBuffer(&v44, &v43);
  re::mtl::CommandBuffer::makeComputeCommandEncoder(&v43, &v42);
  v20 = v45;
  objc_msgSend(v42, "setComputePipelineState:", v45);
  objc_msgSend(v42, "setBytes:length:atIndex:", v48, 4, 0);
  v21 = (uint64_t)objc_msgSend(*a2, sel_pixelFormat);
  v22 = (uint64_t)objc_msgSend(*a3, sel_pixelFormat);
  objc_msgSend(*a3, sel_pixelFormat);
  v56 = 0;
  v54 = 0u;
  v55 = 0u;
  *(_OWORD *)buf = 0u;
  MTLPixelFormatGetInfoForDevice();
  if ((*(_WORD *)&buf[8] & 0x800) != 0)
  {
    if ((v39 & 1) == 0)
    {
      v56 = 0;
      v54 = 0u;
      v55 = 0u;
      *(_OWORD *)buf = 0u;
      InfoForDevice = (re *)MTLPixelFormatGetInfoForDevice();
      if ((*(_WORD *)&buf[8] & 0x800) != 0)
      {
        v21 = (int)re::translateSRGBPixelFormatToLinear(v21);
      }
      else
      {
        v25 = *re::pipelineLogObjects(InfoForDevice);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_224FE9000, v25, OS_LOG_TYPE_ERROR, "Copying from a linear to an sRGB texture will result if wrong gamma values.", buf, 2u);
        }
      }
    }
    v23 = (uint64_t)v40;
    v22 = (int)re::translateSRGBPixelFormatToLinear(v22);
  }
  else
  {
    v23 = (uint64_t)v40;
  }
  re::encodeProcessTextureCommands(a1, &v45, &v42, a2, a3, v21, v22, v23);
  objc_msgSend(v42, "endEncoding");
  objc_msgSend(v43, "commit");
  objc_msgSend(v43, "waitUntilCompleted");
  re::internal::getCommandBufferError(&v43, (uint64_t)buf);
  if (!buf[0])
  {
    v27 = *re::pipelineLogObjects(v26);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    v35 = *a2;
    v36 = v27;
    v37 = objc_msgSend(objc_msgSend(v35, sel_label), sel_UTF8String);
    v38 = (v54 & 1) != 0 ? (__int128 *)*((_QWORD *)&v54 + 1) : (__int128 *)((char *)&v54 + 1);
    *(_DWORD *)v49 = 136315394;
    v50 = v37;
    v51 = 2080;
    v52 = v38;

    if (!buf[0])
    {
LABEL_33:
      if (*(_QWORD *)&buf[8] && (v54 & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&buf[8] + 40))();
    }
  }

  if (v20)
  if (v18)

  if (v19)
  if (v17)

}

BOOL re::TextureFromImageOptions::operator==(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  BOOL v6;
  _BOOL4 v7;

  v4 = *(id *)(a1 + 64);
  v5 = *(id *)(a2 + 64);
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
    v7 = v4 == v5;
  else
    v7 = CFEqual(v4, v5) != 0;
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)
    || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)
    || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)
    || *(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44)
    || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)
    || *(unsigned __int8 *)(a1 + 52) != *(unsigned __int8 *)(a2 + 52)
    || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72)
    || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76)
    || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80)
    || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)
    || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)
    || *(unsigned __int8 *)(a1 + 36) != *(unsigned __int8 *)(a2 + 36)
    || *(float *)(a1 + 40) != *(float *)(a2 + 40)
    || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
  {
    return 0;
  }
  if (*(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56))
    return v7;
  return 0;
}

BOOL re::canLoadTextureFileWithExtension(re *this, const char *a2)
{
  char v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  char __s1[32];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = *(_BYTE *)this;
  v3 = __s1;
  if (*(_BYTE *)this)
  {
    v4 = 0;
    do
    {
      if ((v2 - 65) < 0x1Au)
        v2 += 32;
      __s1[v4] = v2;
      v5 = v4 + 1;
      v2 = *((_BYTE *)this + v4 + 1);
      if (v2)
        v6 = v4 == 30;
      else
        v6 = 1;
      ++v4;
    }
    while (!v6);
    v3 = &__s1[v5];
  }
  v7 = 0;
  *v3 = 0;
  do
  {
    v8 = strcmp(__s1, re::canLoadTextureFileWithExtension(char const*)::supported[v7]);
    if (!v8)
      break;
    v6 = v7++ == 15;
  }
  while (!v6);
  return v8 == 0;
}

void re::loadMetalTextureWithReleasedCGImageSource(re::internal *this@<X4>, CGImageSource *a2@<X0>, id *a3@<X1>, id *a4@<X2>, uint64_t a5@<X3>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  size_t NumberOfComponents;
  CGColorSpaceModel Model;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  size_t v18;
  CGColorSpaceModel v19;
  int v20;
  CGColorSpaceRef DestinationColorSpace;
  void *v22;
  __CFString *Name;
  uint64_t v24;
  id *location;
  _BYTE v30[16];
  uint64_t v31;
  id v32;
  CGColorSpaceRef v33[3];
  id v34;
  CGImageRef image;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  size_t v39;
  CGColorSpaceModel v40;
  int v41;
  CGImageRef v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  CGColorSpaceRef v46;
  size_t v47;
  CGColorSpaceModel v48;
  int v49;
  _BYTE v50[64];
  id v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54[5];

  v54[3] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a8 &= 0x80u;
  *(_QWORD *)(a8 + 8) = 0;
  v24 = a8 + 8;
  *(_DWORD *)(a8 + 88) = 0;
  *(_QWORD *)(a8 + 96) = 0;
  location = (id *)(a8 + 96);
  v53 = 0;
  v52 = 84148994;
  re::internal::applySemanticToOptions(this, (uint64_t)v50);
  NumberOfComponents = CGColorSpaceGetNumberOfComponents(0);
  Model = CGColorSpaceGetModel(0);
  v14 = (void *)MEMORY[0x227694090]();
  re::createCGImagePtrFromCGImageSource(a3, a2, (uint64_t)v50, (uint64_t)&image);
  v15 = v36;
  v36 = 0u;
  v43 = v15;
  v16 = v37;
  v37 = 0u;
  v44 = v16;
  v17 = v38;
  v18 = v39;
  v38 = 0u;
  v42 = image;
  v45 = v17;
  v19 = v40;
  image = 0;
  v39 = NumberOfComponents;
  v40 = Model;
  CGColorSpaceRelease(0);
  v46 = (CGColorSpaceRef)*((_QWORD *)&v17 + 1);
  v47 = v18;
  v48 = v19;
  CGColorSpaceRelease(0);
  CGColorSpaceRelease(0);
  v20 = v41;
  v41 = 0;
  v49 = v20;
  CGImageRelease(image);
  image = 0;
  CGColorSpaceRelease(*((CGColorSpaceRef *)&v38 + 1));
  *((_QWORD *)&v38 + 1) = 0;
  CFRelease(a2);
  objc_autoreleasePoolPop(v14);
  re::createTextureDescriptorForCGImagePtr((uint64_t)&v42, a3, a4, (re::internal *)v50, 0, v54, &v53, &v52, &v34);
  DestinationColorSpace = re::getDestinationColorSpace((uint64_t)&v42, a3, &v34, (uint64_t)this, (uint64_t)v33);
  v22 = (void *)MEMORY[0x227694090](DestinationColorSpace);
  re::createTextureFromCGImagePtr((uint64_t)&v42, (uint64_t)a3, &v34, a5, (uint64_t)this, a6, (uint64_t)v33, (uint64_t)v54, v53, (uint64_t)&v52, a7);
  if (v30[0])
  {
    *(_BYTE *)a8 = v30[8];
    std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>(v24, (uint64_t)&v31);
    re::ObjCObject::operator=(location, &v32);
  }
  if (re::TextureData::isValid((re::TextureData *)a8)
    && (*((_DWORD *)this + 14) - 3) <= 1
    && v33[0])
  {
    Name = (__CFString *)CGColorSpaceGetName(v33[0]);
    re::TextureData::setColorSpace((id *)a8, Name);
  }
  re::Result<re::TextureData,re::DynamicString>::~Result((uint64_t)v30);
  objc_autoreleasePoolPop(v22);
  CGColorSpaceRelease(v33[0]);
  if (v34)

  CGImageRelease(v42);
  v42 = 0;
  CGColorSpaceRelease(v46);

}

void re::loadMetalTextureWithReleasedCGImage(re::internal *this@<X4>, const re::ImportGraphicsContext *a2@<X0>, re *a3@<X1>, id *a4@<X2>, uint64_t a5@<X3>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16;
  id *v17;
  CGImage *CGImageRefWithColorSpace;
  CGColorSpaceRef DestinationColorSpace;
  void *v20;
  __CFString *Name;
  _BYTE v22[16];
  uint64_t v23;
  id v24;
  CGColorSpaceRef space[3];
  id v26;
  CGImageRef image[10];
  id v28[11];
  unsigned int v29;
  uint64_t v30;
  unint64_t v31[5];

  v31[3] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a8 &= 0x80u;
  *(_QWORD *)(a8 + 8) = 0;
  v16 = a8 + 8;
  *(_DWORD *)(a8 + 88) = 0;
  *(_QWORD *)(a8 + 96) = 0;
  v17 = (id *)(a8 + 96);
  v30 = 0;
  v29 = 84148994;
  re::internal::applySemanticToOptions(this, (uint64_t)v28);
  CGImageRefWithColorSpace = re::createCGImageRefWithColorSpace(a3, a2, v28, (const re::TextureFromImageOptions *)1);
  CGImagePtr::CGImagePtr((CGImagePtr *)image, CGImageRefWithColorSpace);
  re::createTextureDescriptorForCGImagePtr((uint64_t)image, (id *)a3, a4, (re::internal *)v28, 0, v31, &v30, &v29, &v26);
  DestinationColorSpace = re::getDestinationColorSpace((uint64_t)image, a3, &v26, (uint64_t)v28, (uint64_t)space);
  v20 = (void *)MEMORY[0x227694090](DestinationColorSpace);
  re::createTextureFromCGImagePtr((uint64_t)image, (uint64_t)a3, &v26, a5, (uint64_t)v28, a6, (uint64_t)space, (uint64_t)v31, v30, (uint64_t)&v29, a7);
  if (v22[0])
  {
    *(_BYTE *)a8 = v22[8];
    std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>(v16, (uint64_t)&v23);
    re::ObjCObject::operator=(v17, &v24);
  }
  if (re::TextureData::isValid((re::TextureData *)a8)
    && (*((_DWORD *)this + 14) - 3) <= 1
    && space[0])
  {
    Name = (__CFString *)CGColorSpaceGetName(space[0]);
    re::TextureData::setColorSpace((id *)a8, Name);
  }
  re::Result<re::TextureData,re::DynamicString>::~Result((uint64_t)v22);
  objc_autoreleasePoolPop(v20);
  CGColorSpaceRelease(space[0]);
  if (v26)

  CGImageRelease(image[0]);
  image[0] = 0;
  CGColorSpaceRelease(image[6]);

}

void re::loadTextureWithContentsOfFile(uint64_t a1@<X0>, id *a2@<X1>, id *a3@<X2>, re::ColorHelpers *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  void *v14;
  void *v15;
  int v16;
  void *v17;
  re *v18;
  const __CFDictionary *v19;
  id v20;
  __n128 *v21;
  unint64_t v22;
  unsigned int v23;
  __int128 v24;
  CGImageSource *v25;
  NSObject *v26;
  NSObject *v27;
  uint64_t v28;
  _OWORD v29[2];
  _OWORD v30[2];
  id v31;
  __int128 v32;
  id v33;
  _QWORD v34[2];
  _QWORD v35[2];
  uint8_t buf[4];
  uint64_t v37;
  __int16 v38;
  const __CFDictionary *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", a1, 0, 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "pathExtension");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "isEqual:", CFSTR("ktx"));

  if (v16)
  {
    v33 = 0;
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithContentsOfURL:options:error:", v14, 1, &v33);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = (re *)v33;
    v19 = v18;
    if (v17)
    {
      v20 = objc_retainAutorelease(v17);
      v28 = a6;
      v21 = (__n128 *)objc_msgSend(v20, "bytes");
      v22 = objc_msgSend(v20, "length");
      v23 = objc_msgSend(*a3, sel_swizzle);
      v24 = *(_OWORD *)(a5 + 16);
      v29[0] = *(_OWORD *)a5;
      v29[1] = v24;
      v30[0] = *(_OWORD *)(a5 + 32);
      *(_OWORD *)((char *)v30 + 12) = *(_OWORD *)(a5 + 44);
      v31 = *(id *)(a5 + 64);
      v32 = *(_OWORD *)(a5 + 72);
      re::createTextureWithKTXData((uint64_t)a2, v21, v22, v23, a4, (uint64_t)v29, v28, 0, a7, 0);

    }
    else
    {
      v26 = *re::pipelineLogObjects(v18);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v37 = a1;
        v38 = 2112;
        v39 = v19;
        _os_log_error_impl(&dword_224FE9000, v26, OS_LOG_TYPE_ERROR, "Failed to create texture from path: %s: %@", buf, 0x16u);
      }
      *(_BYTE *)a7 &= 0x80u;
      *(_QWORD *)(a7 + 8) = 0;
      *(_DWORD *)(a7 + 88) = 0;
      *(_QWORD *)(a7 + 96) = 0;
    }

  }
  else
  {
    v34[0] = *MEMORY[0x24BDD97D0];
    v34[1] = CFSTR("kCGImageSourceCreateUnpremultipliedPNG");
    v35[0] = MEMORY[0x24BDBD1C0];
    v35[1] = MEMORY[0x24BDBD1C8];
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v35, v34, 2);
    v19 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
    v25 = CGImageSourceCreateWithURL((CFURLRef)v14, v19);
    if (v25)
    {
      re::loadMetalTextureWithReleasedCGImageSource((re::internal *)a5, v25, a2, a3, (uint64_t)a4, a6, 0, a7);
    }
    else
    {
      v27 = *re::pipelineLogObjects(0);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        v37 = a1;
        _os_log_error_impl(&dword_224FE9000, v27, OS_LOG_TYPE_ERROR, "Failed to create texture from path: %s", buf, 0xCu);
      }
      *(_BYTE *)a7 &= 0x80u;
      *(_QWORD *)(a7 + 8) = 0;
      *(_DWORD *)(a7 + 88) = 0;
      *(_QWORD *)(a7 + 96) = 0;
    }
  }

}

void re::loadTextureWithData(id *a1@<X0>, id *a2@<X1>, id *a3@<X2>, re::ColorHelpers *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, re::TextureData *a7@<X8>)
{
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  int v17;
  __n128 *v18;
  unint64_t v19;
  unsigned int v20;
  __int128 v21;
  CGImageSource *v22;
  re *isValid;
  NSObject *v24;
  _OWORD v25[2];
  _OWORD v26[2];
  id v27;
  __int128 v28;
  uint8_t buf[4];
  re::ColorHelpers *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v14 = (unsigned __int8 *)objc_msgSend(objc_retainAutorelease(*a1), "bytes");
  if ((unint64_t)objc_msgSend(*a1, "length") >= 0xC && *v14 == 171)
  {
    v15 = 1u;
    while (v15 != 12)
    {
      v16 = v14[v15];
      if (v16 != v17)
      {
        if ((unint64_t)(v15 - 2) < 0xB)
          goto LABEL_8;
        break;
      }
    }
    v18 = (__n128 *)objc_msgSend(objc_retainAutorelease(*a1), "bytes");
    v19 = objc_msgSend(*a1, "length");
    v20 = objc_msgSend(*a3, sel_swizzle);
    v21 = *(_OWORD *)(a5 + 16);
    v25[0] = *(_OWORD *)a5;
    v25[1] = v21;
    v26[0] = *(_OWORD *)(a5 + 32);
    *(_OWORD *)((char *)v26 + 12) = *(_OWORD *)(a5 + 44);
    v27 = *(id *)(a5 + 64);
    v28 = *(_OWORD *)(a5 + 72);
    re::createTextureWithKTXData((uint64_t)a2, v18, v19, v20, a4, (uint64_t)v25, a6, 0, (uint64_t)a7, 0);

  }
  else
  {
LABEL_8:
    v22 = CGImageSourceCreateWithData((CFDataRef)*a1, 0);
    re::loadMetalTextureWithReleasedCGImageSource((re::internal *)a5, v22, a2, a3, (uint64_t)a4, a6, 0, (uint64_t)a7);
    isValid = (re *)re::TextureData::isValid(a7);
    if ((isValid & 1) != 0)
    {
      re::TextureData::setLabel(a7, (const char *)a4);
    }
    else
    {
      v24 = *re::pipelineLogObjects(isValid);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        v30 = a4;
        _os_log_error_impl(&dword_224FE9000, v24, OS_LOG_TYPE_ERROR, "Failed to create texture from data labeled '%s'", buf, 0xCu);
      }
    }
  }
}

void re::loadTextureDataWithProvider(re *this@<X0>, re::TextureProvider *a2@<X1>, re::Allocator *a3@<X2>, uint64_t a4@<X8>)
{
  id *v7;
  re::ColorHelpers *v8;
  const re::ImportGraphicsContext *v9;
  id v10;
  CGImageRef *v11;
  uint64_t v12;
  CGImageRef *v13;
  uint64_t v14;
  re *v15;
  id *v16;
  _anonymous_namespace_ *v17;
  uint64_t v18;
  const re::ImportGraphicsContext *v19;
  CGImage *CGImageRefWithColorSpace;
  re *v21;
  uint64_t v22;
  int v23;
  int v24;
  const __CFData *v25;
  __n128 *BytePtr;
  CFIndex Length;
  unsigned int v28;
  __int128 v29;
  _anonymous_namespace_ *v30;
  id v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  void *v36;
  void *v37;
  const __CFData *v38;
  id v39;
  id v40;
  uint64_t (***v41)();
  uint64_t v42;
  char **v43;
  _QWORD *v44;
  CFTypeRef *v45;
  unint64_t v46;
  unint64_t v47;
  CGImage *v48;
  _anonymous_namespace_ *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  id v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  CGImageRef *v65;
  unint64_t v66;
  const char *v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (***v71)();
  uint64_t v72;
  CGImageRef *v73;
  re::internal *v74;
  const re::TextureProvider *v75;
  _OWORD v76[2];
  _OWORD v77[2];
  id v78;
  __int128 v79;
  uint64_t v80;
  _BYTE image[24];
  uint64_t v82;
  CGColorSpaceRef v83;
  unsigned int v84;
  id v85;
  CGColorSpaceRef space[3];
  id v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (**v92)();
  CFDataRef *v93;
  re *v94;
  unint64_t v95;
  CGImageRef *v96;
  uint8_t buf[16];
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  unsigned int v103;
  id v104;
  CGImageRef v105;
  unint64_t v106;
  re *v107;
  CGImageRef *v108;
  CGColorSpaceRef v109;
  uint64_t *v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  CFDataRef v114[6];

  v114[3] = *(CFDataRef *)MEMORY[0x24BDAC8D0];
  v7 = (id *)((char *)this + 40);
  if ((*((_QWORD *)this + 2) & 1) != 0)
    v8 = (re::ColorHelpers *)*((_QWORD *)this + 3);
  else
    v8 = (re *)((char *)this + 17);
  v9 = (const re::ImportGraphicsContext *)(*(uint64_t (**)(re *, re::TextureProvider *, re::Allocator *))(*(_QWORD *)this + 64))(this, a2, a3);
  v92 = (uint64_t (**)())v9;
  if (!v9)
    goto LABEL_26;
  v105 = (CGImageRef)&off_24ED7CF30;
  v106 = (unint64_t)&v92;
  v107 = this;
  v108 = &v105;
  re::loadMetalTextureWithReleasedCGImage((re *)((char *)this + 48), v9, (re *)((char *)this + 144), v7, (uint64_t)v8, (uint64_t)a2, (uint64_t)&v105, (uint64_t)buf);
  if (!v108)
    goto LABEL_132;
  (*((void (**)(CGImageRef *))*v108 + 6))(v108);
  if (v103)
  {
    if (v103 != 1)
      goto LABEL_133;
    if (!v100)
      goto LABEL_17;
  }
  if (!*(_QWORD *)&buf[8])
  {
LABEL_17:

    if (v103 != -1)
      ((void (*)(_BYTE *, uint8_t *))*(&off_24ED7CF10 + v103))(image, &buf[8]);
    v13 = v108;
    if (v108 == &v105)
    {
      v14 = 4;
      v13 = &v105;
    }
    else
    {
      if (!v108)
        goto LABEL_26;
      v14 = 5;
    }
    (*((void (**)(void))*v13 + v14))();
LABEL_26:
    (*(void (**)(uint8_t *__return_ptr, re *))(*(_QWORD *)this + 72))(buf, this);
    if (buf[0])
    {
      if (*(_QWORD *)&buf[8] && v101)
        (*(void (**)(void))(**(_QWORD **)&buf[8] + 40))();
      (*(void (**)(uint8_t *__return_ptr, re *))(*(_QWORD *)this + 80))(buf, this);
      v15 = (re *)((char *)this + 144);
      (*(void (**)(uint64_t (***__return_ptr)(), re *))(*(_QWORD *)this + 72))(&v92, this);
      v16 = (id *)((char *)this + 48);
      v17 = (_anonymous_namespace_ *)(*(_QWORD *(**)(uint64_t *__return_ptr, re *))(*(_QWORD *)this + 80))(&v80, this);
      if (!v95)
      {
        v32 = *(_OWORD *)buf;
        v33 = v98;
        v34 = v99;
        *(_BYTE *)a4 = 0;
        *(_OWORD *)(a4 + 8) = v32;
        *(_QWORD *)(a4 + 24) = v33;
        *(_QWORD *)(a4 + 32) = v34;
        goto LABEL_105;
      }
      v18 = HIDWORD(v80);
      v19 = CGImageRetain(*v96);
      CGImageRefWithColorSpace = re::createCGImageRefWithColorSpace(v15, v19, v16, 0);
      CGImagePtr::CGImagePtr((CGImagePtr *)image, CGImageRefWithColorSpace);
      v89 = 0;
      v88 = 84148994;
      re::internal::applySemanticToOptions((re::internal *)v16, (uint64_t)buf);
      re::createTextureDescriptorForCGImagePtr((uint64_t)image, (id *)v15, v7, (re::internal *)buf, 0, (unint64_t *)v114, &v89, &v88, &v87);
      re::getDestinationColorSpace((uint64_t)image, v15, &v87, (uint64_t)v16, (uint64_t)space);
      switch((_DWORD)v18)
      {
        case 3:
          v43 = &selRef_setArrayLength_;
          break;
        case 7:
          v43 = &selRef_setDepth_;
          break;
        case 5:
          if (v95 != 6)
          {
            re::DynamicString::format((re::DynamicString *)"Image array size is expected to be 6 for a cube, but is %d", (re::DynamicString *)&v105, v95);
LABEL_80:
            re::DynamicString::DynamicString((re::DynamicString *)&v110, (const re::DynamicString *)&v105);
            *(_BYTE *)a4 = 0;
            v56 = v112;
            *(_QWORD *)(a4 + 8) = v110;
            *(_QWORD *)(a4 + 32) = v56;
            *(_OWORD *)(a4 + 16) = v111;
            if (v105 && (v106 & 1) != 0)
              (*(void (**)(CGImageRef, re *, uint64_t, uint64_t))(*(_QWORD *)v105 + 40))(v105, v107, v54, v55);
LABEL_102:
            CGColorSpaceRelease(space[0]);
            if (v87)

            CGImageRelease(*(CGImageRef *)image);
            *(_QWORD *)image = 0;
            CGColorSpaceRelease(v83);
LABEL_105:
            if (!(_BYTE)v92)
              return;
            v66 = (unint64_t)v93;
            if (!v93 || !v96)
              return;
            goto LABEL_115;
          }
LABEL_63:
          v44 = objc_msgSend(v87, sel_setTextureType_, v18);
          v113 = 0;
          v111 = 0uLL;
          v110 = 0;
          LODWORD(v112) = 0;
          if (v95)
          {
            v44 = re::DynamicArray<CGImagePtr>::setCapacity(&v110, v95);
            if (v95)
            {
              v45 = (CFTypeRef *)v96;
              v46 = *((_QWORD *)&v111 + 1);
              v47 = 8 * v95;
              do
              {
                v48 = (CGImage *)*v45;
                CFRetain(*v45);
                CGImagePtr::CGImagePtr((CGImagePtr *)&v105, v48);
                if (v46 >= (unint64_t)v111)
                {
                  v50 = v46 + 1;
                  if ((unint64_t)v111 < v50)
                  {
                    if (v110)
                    {
                      v51 = 8;
                      if ((_QWORD)v111)
                        v51 = 2 * v111;
                      if (v51 <= v50)
                        v52 = v50;
                      else
                        v52 = v51;
                      re::DynamicArray<CGImagePtr>::setCapacity(&v110, v52);
                    }
                    else
                    {
                      re::DynamicArray<CGImagePtr>::setCapacity(&v110, v50);
                      LODWORD(v112) = v112 + 1;
                    }
                  }
                  v46 = *((_QWORD *)&v111 + 1);
                }
                v53 = v113;
                CGImagePtr::CGImagePtr(v113 + 80 * v46++, (uint64_t *)&v105);
                *((_QWORD *)&v111 + 1) = v46;
                LODWORD(v112) = v112 + 1;
                CGImageRelease(v105);
                v105 = 0;
                CGColorSpaceRelease(v109);
                ++v45;
                v47 -= 8;
              }
              while (v47);
            }
            else
            {
              v53 = v113;
              v46 = *((_QWORD *)&v111 + 1);
            }
            v57 = v110;
          }
          else
          {
            v57 = 0;
            v46 = 0;
            v53 = 0;
          }
          v62 = (void *)MEMORY[0x227694090](v44);
          re::createTextureFromCGImagePtrs(v53, v46, (uint64_t)v15, &v87, (uint64_t)v8, (uint64_t)v16);
          objc_autoreleasePoolPop(v62);
          if (v57 && v53)
          {
            if (v46)
            {
              v65 = (CGImageRef *)v53;
              do
              {
                CGImageRelease(*v65);
                *v65 = 0;
                CGColorSpaceRelease(v65[6]);
                v65[6] = 0;
                v65 += 10;
              }
              while (v65 != (CGImageRef *)(v53 + 80 * v46));
            }
            (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*v57 + 40))(v57, v53, v63, v64);
          }
          goto LABEL_102;
        default:
          re::DynamicString::format((re::DynamicString *)"Unsupported texture type for image array import: %d", (re::DynamicString *)&v105, v18);
          goto LABEL_80;
      }
      objc_msgSend(v87, *v43, v95);
      goto LABEL_63;
    }
    v21 = (re *)(*(_QWORD *(**)(CGImageRef *__return_ptr, re *, uint64_t **, uint64_t))(*(_QWORD *)this + 16))(&v105, this, &v110, 12);
    if ((_BYTE)v105)
    {
      if (v106 < 0xC || v110 != 171)
        goto LABEL_53;
      v22 = 1u;
      while (v22 != 12)
      {
        v23 = *((unsigned __int8 *)&v110 + v22);
        if (v23 != v24)
        {
          if ((unint64_t)(v22 - 2) < 0xB)
            goto LABEL_53;
          break;
        }
      }
      v25 = (const __CFData *)(*(uint64_t (**)(re *))(*(_QWORD *)this + 48))(this);
      v114[0] = v25;
      if (v25)
      {
        v92 = &off_24ED7CFB0;
        v93 = v114;
        v94 = this;
        v95 = (unint64_t)&v92;
        BytePtr = (__n128 *)CFDataGetBytePtr(v25);
        Length = CFDataGetLength(v114[0]);
        v28 = objc_msgSend(*((id *)this + 5), sel_swizzle);
        v29 = *((_OWORD *)this + 4);
        v76[0] = *((_OWORD *)this + 3);
        v76[1] = v29;
        v77[0] = *((_OWORD *)this + 5);
        *(_OWORD *)((char *)v77 + 12) = *(_OWORD *)((char *)this + 92);
        v78 = *((id *)this + 14);
        v79 = *(_OWORD *)((char *)this + 120);
        re::createTextureWithKTXData((uint64_t)this + 144, BytePtr, Length, v28, v8, (uint64_t)v76, (uint64_t)a2, 0, (uint64_t)buf, (uint64_t)&v92);

        if (!v103)
        {
LABEL_47:
          if (*(_QWORD *)&buf[8])
          {
            if (v95)
            {
              (*(void (**)(unint64_t))(*(_QWORD *)v95 + 48))(v95);
              image[0] = buf[0];
              image[8] = 0;
              v84 = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&image[8], (uint64_t)&buf[8]);
              v85 = v104;
              *(_BYTE *)a4 = 1;
              *(_BYTE *)(a4 + 8) = image[0];
              *(_BYTE *)(a4 + 16) = 0;
              *(_DWORD *)(a4 + 96) = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>(a4 + 16, (uint64_t)&image[8]);
              v31 = v85;
              v85 = 0;
              *(_QWORD *)(a4 + 104) = v31;
              if (v84 != -1)
                ((void (*)(CGColorSpaceRef *, _BYTE *))*(&off_24ED7CF10 + v84))(space, &image[8]);
              goto LABEL_120;
            }
            goto LABEL_132;
          }
LABEL_119:
          v68 = *(_OWORD *)image;
          v69 = *(_QWORD *)&image[16];
          v70 = v82;
          *(_BYTE *)a4 = 0;
          *(_OWORD *)(a4 + 8) = v68;
          *(_QWORD *)(a4 + 24) = v69;
          *(_QWORD *)(a4 + 32) = v70;
LABEL_120:

          if (v103 != -1)
            ((void (*)(_BYTE *, uint8_t *))*(&off_24ED7CF10 + v103))(image, &buf[8]);
          v71 = (uint64_t (***)())v95;
          if ((uint64_t (***)())v95 == &v92)
          {
            v72 = 4;
            v71 = &v92;
            goto LABEL_126;
          }
          if (v95)
          {
            v72 = 5;
LABEL_126:
            (*v71)[v72]();
          }
LABEL_112:
          if ((_BYTE)v105)
            return;
          v66 = v106;
          if (!v106 || (v107 & 1) == 0)
            return;
LABEL_115:
          (*(void (**)(unint64_t))(*(_QWORD *)v66 + 40))(v66);
          return;
        }
        if (v103 == 1)
        {
          if (!v100)
            goto LABEL_119;
          goto LABEL_47;
        }
LABEL_133:
        v74 = (re::internal *)std::__throw_bad_variant_access[abi:nn180100]();
        re::internal::createTextureProviderProperties(v74, v75);
        return;
      }
      v35 = *re::pipelineLogObjects(0);
      if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
LABEL_53:
        buf[0] = 0;
        *(_QWORD *)&buf[8] = 0;
        v103 = 0;
        v104 = 0;
        v36 = (void *)MEMORY[0x227694090]();
        v90 = *MEMORY[0x24BDD97D0];
        v91 = MEMORY[0x24BDBD1C0];
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v91, &v90, 1);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        v38 = (const __CFData *)(*(uint64_t (**)(re *, void *))(*(_QWORD *)this + 32))(this, v37);
        v114[0] = v38;
        if (!v38)
          goto LABEL_86;
        v92 = &off_24ED7D030;
        v93 = v114;
        v94 = this;
        v95 = (unint64_t)&v92;
        re::loadMetalTextureWithReleasedCGImageSource((re *)((char *)this + 48), v38, (id *)this + 18, v7, (uint64_t)v8, (uint64_t)a2, (uint64_t)&v92, (uint64_t)image);
        buf[0] = image[0];
        std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>((uint64_t)&buf[8], (uint64_t)&image[8]);
        v39 = v85;
        v85 = 0;
        v40 = v104;
        v104 = v39;

        if (v84 != -1)
          ((void (*)(CGColorSpaceRef *, _BYTE *))*(&off_24ED7CF10 + v84))(space, &image[8]);
        if (v95)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v95 + 48))(v95);
          v41 = (uint64_t (***)())v95;
          if ((uint64_t (***)())v95 == &v92)
          {
            v42 = 4;
            v41 = &v92;
          }
          else
          {
            if (!v95)
              goto LABEL_86;
            v42 = 5;
          }
          (*v41)[v42]();
LABEL_86:

          objc_autoreleasePoolPop(v36);
          if (v103)
          {
            if (v103 != 1)
              goto LABEL_133;
            if (!v100)
              goto LABEL_92;
          }
          if (*(_QWORD *)&buf[8])
          {
            image[0] = buf[0];
            image[8] = 0;
            v84 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&image[8], (uint64_t)&buf[8]);
            v85 = v104;
            *(_BYTE *)a4 = 1;
            *(_BYTE *)(a4 + 8) = image[0];
            *(_BYTE *)(a4 + 16) = 0;
            *(_DWORD *)(a4 + 96) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>(a4 + 16, (uint64_t)&image[8]);
            v58 = v85;
            v85 = 0;
            *(_QWORD *)(a4 + 104) = v58;
            if (v84 != -1)
              ((void (*)(uint64_t (***)(), _BYTE *))*(&off_24ED7CF10 + v84))(&v92, &image[8]);
          }
          else
          {
LABEL_92:
            if ((_BYTE)v105)
            {
              re::DynamicString::format((re::DynamicString *)"Failed to create texture data from data labeled '%s'", (re::DynamicString *)image, v8);
              v59 = *(_OWORD *)image;
              v60 = *(_QWORD *)&image[16];
              v61 = v82;
              *(_BYTE *)a4 = 0;
              *(_OWORD *)(a4 + 8) = v59;
              *(_QWORD *)(a4 + 24) = v60;
              *(_QWORD *)(a4 + 32) = v61;
            }
            else
            {
              re::DynamicString::DynamicString((re::DynamicString *)image, (const re::DynamicString *)&v106);
              *(_BYTE *)a4 = 0;
              *(_QWORD *)(a4 + 8) = *(_QWORD *)image;
              *(_QWORD *)(a4 + 32) = v82;
              *(_OWORD *)(a4 + 16) = *(_OWORD *)&image[8];
            }
          }

          if (v103 != -1)
            ((void (*)(_BYTE *, uint8_t *))*(&off_24ED7CF10 + v103))(image, &buf[8]);
          goto LABEL_112;
        }
LABEL_132:
        std::__throw_bad_function_call[abi:nn180100]();
        goto LABEL_133;
      }
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v8;
      v67 = "Failed to get texture ktx data for data labeled '%s'";
    }
    else
    {
      v35 = *re::pipelineLogObjects(v21);
      if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        goto LABEL_53;
      if ((v107 & 1) != 0)
        v73 = v108;
      else
        v73 = (re **)((char *)&v107 + 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v73;
      v67 = "%s";
    }
    _os_log_error_impl(&dword_224FE9000, v35, OS_LOG_TYPE_ERROR, v67, buf, 0xCu);
    goto LABEL_53;
  }
  image[0] = buf[0];
  image[8] = 0;
  v84 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&image[8], (uint64_t)&buf[8]);
  v85 = v104;
  *(_BYTE *)a4 = 1;
  *(_BYTE *)(a4 + 8) = image[0];
  *(_BYTE *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 96) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>(a4 + 16, (uint64_t)&image[8]);
  v10 = v85;
  v85 = 0;
  *(_QWORD *)(a4 + 104) = v10;
  if (v84 != -1)
    ((void (*)(uint64_t **, _BYTE *))*(&off_24ED7CF10 + v84))(&v110, &image[8]);

  if (v103 != -1)
    ((void (*)(_BYTE *, uint8_t *))*(&off_24ED7CF10 + v103))(image, &buf[8]);
  v11 = v108;
  if (v108 == &v105)
  {
    v12 = 4;
    v11 = &v105;
    goto LABEL_23;
  }
  if (v108)
  {
    v12 = 5;
LABEL_23:
    (*((void (**)(void))*v11 + v12))();
  }
}

void re::internal::createTextureProviderProperties(id *this@<X0>, const re::TextureProvider *a2@<X1>, uint64_t a3@<X8>)
{
  id *v5;
  uint64_t v6;
  CGImage *v7;
  re *v8;
  const re::ImportGraphicsContext *v9;
  id *v10;
  CGImage *CGImageRefWithColorSpace;
  re::_anonymous_namespace_ *Width;
  CGImageAlphaInfo AlphaInfo;
  re *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  const __CFData *v19;
  __n128 *BytePtr;
  CFIndex Length;
  int v22;
  char *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  CGImageSource *v28;
  char *v29;
  const char *v30;
  uint8_t *v31;
  _BYTE *v32;
  _BYTE v33[9];
  unint64_t v34;
  char v35;
  _BYTE v36[31];
  CGColorSpaceRef space;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[12];
  id v41[2];
  uint8_t buf[40];
  uint64_t v43;
  id v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v5 = this + 5;
  v6 = (*((uint64_t (**)(id *, const re::TextureProvider *))*this + 7))(this, a2);
  if (v6)
  {
    v7 = (CGImage *)v6;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
    *(_QWORD *)(a3 + 16) = 0;
    v8 = (re *)(this + 18);
    v9 = CGImageRetain(v7);
    v10 = this + 6;
    CGImageRefWithColorSpace = re::createCGImageRefWithColorSpace(v8, v9, v10, 0);
    CGImagePtr::CGImagePtr((CGImagePtr *)&v33[1], CGImageRefWithColorSpace);
    re::internal::applySemanticToOptions((re::internal *)v10, (uint64_t)buf);
    re::createTextureDescriptorForCGImagePtr((uint64_t)&v33[1], (id *)v8, v5, (re::internal *)buf, 1, 0, 0, 0, v41);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a3 + 8), v41);
    if (v41[0])
    {

      v41[0] = 0;
    }

    Width = (re::_anonymous_namespace_ *)CGImageGetWidth(v7);
    CGImageGetHeight(v7);
    AlphaInfo = CGImageGetAlphaInfo(v7);
    CGImageRelease(*(CGImageRef *)&v33[1]);
    *(_QWORD *)&v33[1] = 0;
    CGColorSpaceRelease(space);
    return;
  }
  (*((void (**)(uint8_t *__return_ptr, id *))*this + 9))(buf, this);
  if (buf[0] && *(_QWORD *)&buf[8] && v43)
    (*(void (**)(_QWORD))(**(_QWORD **)&buf[8] + 40))(*(_QWORD *)&buf[8]);
  v14 = (re *)(*((_QWORD *(**)(_BYTE *__return_ptr, id *, id *, uint64_t))*this + 2))(&v33[1], this, v41, 12);
  if (!v33[1])
  {
    v24 = *re::pipelineLogObjects(v14);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      if ((v35 & 1) != 0)
        v32 = *(_BYTE **)&v36[7];
      else
        v32 = v36;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v32;
      v30 = "%s";
      v31 = buf;
      goto LABEL_43;
    }
LABEL_24:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
    *(_QWORD *)(a3 + 16) = 0;
    v25 = (void *)MEMORY[0x227694090]();
    v38 = *MEMORY[0x24BDD97D0];
    v39 = MEMORY[0x24BDBD1C0];
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = (*((uint64_t (**)(id *, void *))*this + 3))(this, v26);
    if (v27)
    {
      v28 = (CGImageSource *)v27;
      re::internal::applySemanticToOptions((re::internal *)(this + 6), (uint64_t)buf);
      re::createTextureDescriptorForCGImageSource(v28, this + 18, v5, buf, 0, 0, 1, (id *)v40);
      NS::SharedPtr<MTL::Texture>::operator=((void **)(a3 + 8), (void **)v40);
      if (*(_QWORD *)v40)
      {

        *(_QWORD *)v40 = 0;
      }

      *(_QWORD *)a3 = CGImageSourceCopyPropertiesAtIndex(v28, 0, 0);
      *(_QWORD *)(a3 + 16) = CGImageSourceGetType(v28);
      CFRelease(v28);
    }

    objc_autoreleasePoolPop(v25);
    goto LABEL_29;
  }
  v33[0] = 0;
  if (v34 < 0xC || LOBYTE(v41[0]) != 171)
    goto LABEL_24;
  v15 = 1u;
  while (v15 != 12)
  {
    v16 = *((unsigned __int8 *)v41 + v15);
    if (v16 != v17)
    {
      if ((unint64_t)(v15 - 2) < 0xB)
        goto LABEL_24;
      break;
    }
  }
  v18 = (*((uint64_t (**)(id *))*this + 5))(this);
  if (!v18)
  {
    v24 = *re::pipelineLogObjects(0);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      if (((unint64_t)this[2] & 1) != 0)
        v29 = (char *)this[3];
      else
        v29 = (char *)this + 17;
      *(_DWORD *)v40 = 136315138;
      *(_QWORD *)&v40[4] = v29;
      v30 = "Failed to get texture ktx data for data labeled '%s'";
      v31 = v40;
LABEL_43:
      _os_log_error_impl(&dword_224FE9000, v24, OS_LOG_TYPE_ERROR, v30, v31, 0xCu);
      goto LABEL_24;
    }
    goto LABEL_24;
  }
  v19 = (const __CFData *)v18;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  *(_QWORD *)(a3 + 16) = 0;
  BytePtr = (__n128 *)CFDataGetBytePtr(v19);
  Length = CFDataGetLength(v19);
  v22 = objc_msgSend(this[5], sel_swizzle);
  if (((unint64_t)this[2] & 1) != 0)
    v23 = (char *)this[3];
  else
    v23 = (char *)this + 17;
  re::createTextureDescriptorForKTXData(this + 18, BytePtr, Length, v22, (uint64_t)v23, (uint64_t)(this + 6), (uint64_t)buf, v33, (id *)v40, 0);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(a3 + 8), (void **)v40);
  if (*(_QWORD *)v40)

  *(_QWORD *)(a3 + 16) = CFSTR("org.khronos.ktx");
  CFRelease(v19);
LABEL_29:
  if (!v33[1] && v34 && (v35 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v34 + 40))();
}

void *re::`anonymous namespace'::createImageProperties(re::_anonymous_namespace_ *this, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v8[3];
  _QWORD v9[4];

  v9[3] = *MEMORY[0x24BDAC8D0];
  v8[0] = *MEMORY[0x24BDD9630];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = v3;
  v8[1] = *MEMORY[0x24BDD96C8];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", this);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v9[1] = v4;
  v8[2] = *MEMORY[0x24BDD96C0];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", this);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[2] = v5;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v9, v8, 3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  CFRetain(v6);
  return v6;
}

void re::createTextureDescriptorFromCompileOptions(id *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  re *v8;
  id v9;

  v5 = 5;
  if (!*(_BYTE *)(a2 + 2))
    v5 = 0;
  v6 = v5 | *(unsigned __int8 *)(a2 + 3);
  v9 = *a1;
  v7 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  *a3 = v7;
  objc_msgSend(v7, sel_setStorageMode_, 2);
  v8 = (re *)objc_msgSend(v7, sel_setUsage_, v6);
  if (*(_BYTE *)(a2 + 2))
    objc_msgSend(v7, sel_setProtectionOptions_, re::protectionOptions(v8));

}

void re::loadTextureFromFile(id *a1@<X0>, uint64_t a2@<X1>, id *a3@<X2>, re::internal *a4@<X3>, uint64_t a5@<X8>)
{
  void *v10;
  void *v11;
  const __CFURL *v12;
  _anonymous_namespace_ *v13;
  CGImageSource *v14;
  re *isValid;
  NSObject *v16;
  NSObject *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v10 = (void *)MEMORY[0x24BDBCF48];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "fileURLWithPath:", v11);
  v12 = (const __CFURL *)objc_claimAutoreleasedReturnValue();

  v13 = CGImageSourceCreateWithURL(v12, 0);
  if (v13)
  {
    v14 = v13;
    isValid = (re *)re::TextureData::isValid((re::TextureData *)a5);
    if ((isValid & 1) == 0)
    {
      v16 = *re::pipelineLogObjects(isValid);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        v18 = 136315138;
        v19 = a2;
        _os_log_error_impl(&dword_224FE9000, v16, OS_LOG_TYPE_ERROR, "Failed to create texture from file '%s' using descriptor", (uint8_t *)&v18, 0xCu);
      }
    }
  }
  else
  {
    v17 = *re::pipelineLogObjects(0);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = 136315138;
      v19 = a2;
      _os_log_error_impl(&dword_224FE9000, v17, OS_LOG_TYPE_ERROR, "Failed to create image source from file '%s' using descriptor", (uint8_t *)&v18, 0xCu);
    }
    *(_BYTE *)a5 &= 0x80u;
    *(_QWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 88) = 0;
    *(_QWORD *)(a5 + 96) = 0;
  }

}

void re::createTextureCompileOptionsFromTextureImageOptions(re *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  BOOL v6;
  char v7;
  _BYTE v8[8];
  int v9;
  int v10;
  int v11;
  int v12;
  __int128 v13;
  id v14;

  re::internal::applySemanticToOptions(this, (uint64_t)v8);
  *(_WORD *)(a2 + 2) = 256;
  *(_BYTE *)(a2 + 4) = 1;
  *(_DWORD *)(a2 + 8) = 1;
  if (v9 == 1)
    *(_DWORD *)(a2 + 8) = v10;
  v4 = v11;
  v5 = v12;
  *(_BYTE *)a2 = v11 != 2;
  if (v4)
    v6 = v4 == 3;
  else
    v6 = 1;
  v7 = v6;
  *(_BYTE *)(a2 + 1) = v7;
  *(_DWORD *)(a2 + 12) = v5;
  *(_OWORD *)(a2 + 16) = v13;

}

void re::loadTextureFileAndConvertToCubeMap(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v8;
  void *v9;
  const __CFURL *v10;
  CGImageSourceRef v11;
  CGImageSource *v12;
  _anonymous_namespace_ *v13;
  re *v14;
  NSObject *v15;
  NSObject *v16;
  int v17;
  id v18;
  uint64_t v19;
  void *v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  char v25;
  int v26;
  char v27;
  int v28;
  char v29;
  int v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  id v35;
  int v36;
  _BYTE v37[28];
  id v38;
  id v39;
  uint8_t buf[4];
  _BYTE v41[12];
  uint64_t v42;
  unsigned int v43;
  id v44;
  uint8_t v45[4];
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v38 = 0;
  v36 = 0x1000000;
  *(_OWORD *)v37 = *(_OWORD *)(a3 + 4);
  *(_OWORD *)&v37[12] = *(_OWORD *)(a3 + 16);
  v8 = (void *)MEMORY[0x24BDBCF48];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "fileURLWithPath:", v9);
  v10 = (const __CFURL *)objc_claimAutoreleasedReturnValue();

  v11 = CGImageSourceCreateWithURL(v10, 0);
  if (v11)
  {
    v12 = v11;
    re::createTextureDescriptorFromCompileOptions(a1, (uint64_t)&v36, &v39);
    v19 = 0;
    v20 = 0;
    v21 = 1;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v24 = 0;
    v25 = 0;
    v30 = 6;
    v32 = 0;
    v33 = 0;
    v31 = 0;
    if (*(_DWORD *)&v37[4] >= 2u)
    {
      LODWORD(v20) = 1;
      v21 = *(_DWORD *)&v37[4];
    }
    v22 = 2;
    v23 = *(_DWORD *)&v37[8];
    if (v43)
    {
      if (v43 != 1)
        goto LABEL_34;
      if (!v42)
        goto LABEL_8;
    }
    if (!*(_QWORD *)&v41[4])
    {
LABEL_8:
      v15 = *re::pipelineLogObjects(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v45 = 136315138;
        v46 = a2;
        _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "Failed to create texture from file '%s'", v45, 0xCu);
      }
    }

    if (v39)
  }
  else
  {
    v16 = *re::pipelineLogObjects(0);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)v41 = a2;
      _os_log_error_impl(&dword_224FE9000, v16, OS_LOG_TYPE_ERROR, "Failed to create image source from file '%s'", buf, 0xCu);
    }
    buf[0] = 0;
    *(_QWORD *)&v41[4] = 0;
    v43 = 0;
    v44 = 0;
  }

  if (v43)
  {
    if (v43 != 1)
      goto LABEL_34;
    if (!v42)
      goto LABEL_23;
  }
  if (!*(_QWORD *)&v41[4])
  {
LABEL_23:
    v17 = 0;
    *(_BYTE *)a4 &= 0x80u;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 88) = 0;
    *(_QWORD *)(a4 + 96) = 0;
    goto LABEL_24;
  }
  re::createCubeMapFromLatLongTexture(a1, (const re::ImportGraphicsContext *)buf, (const re::TextureData *)*(unsigned __int8 *)(a3 + 1), 0, 0, 0, (uint64_t)&v19);
  if (v34)
LABEL_34:
    std::__throw_bad_variant_access[abi:nn180100]();
  NS::SharedPtr<MTL::Texture>::operator=(&v38, &v20);

  if (v34 != -1)
    ((void (*)(uint8_t *, void **))*(&off_24ED7CF10 + v34))(v45, &v20);
  v17 = 1;
LABEL_24:

  if (v43 != -1)
    ((void (*)(uint64_t *, _BYTE *))*(&off_24ED7CF10 + v43))(&v19, &v41[4]);
  if (v17)
  {
    if (v38)
    {
      objc_msgSend(v38, sel_setLabel_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, a2, 4));
      v18 = v38;
    }
    else
    {
      v18 = 0;
    }
    *(_BYTE *)a4 &= 0x80u;
    *(_QWORD *)(a4 + 8) = v18;
    *(_DWORD *)(a4 + 88) = 0;
    *(_QWORD *)(a4 + 96) = 0;
  }
  if (v38)

}

void re::createCubeMapFromLatLongTexture(id *this@<X0>, const re::ImportGraphicsContext *a2@<X1>, const re::TextureData *a3@<X2>, unint64_t a4@<X3>, unsigned int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  int v11;
  id v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  double v23;
  re *v24;
  NSObject *v25;
  int v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  const char *v36;
  id v37;
  id v38;
  unsigned int v39;
  re *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  id v45;
  re *v46;
  NSObject *v47;
  void *v48;
  re *v49;
  NSObject *v50;
  id v51;
  char v52;
  unsigned __int8 v53;
  __CFString **v54;
  __CFString *v55;
  re *v56;
  NSObject *v57;
  id v58;
  char *v59;
  re *v60;
  NSObject *v61;
  _BYTE *v62;
  id v63;
  NSObject *v64;
  id v65;
  _QWORD *v66;
  id v67;
  id v68;
  int v69;
  const re::ImportGraphicsContext *v70;
  re *v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  int v78;
  unsigned __int8 v79;
  int v80;
  id v81;
  id v82;
  id v83;
  id v84;
  _BYTE v85[12];
  _BYTE v86[24];
  uint8_t buf[8];
  _QWORD v88[7];

  v88[4] = *MEMORY[0x24BDAC8D0];
  v82 = 0;
  if (*((_DWORD *)a2 + 22))
    std::__throw_bad_variant_access[abi:nn180100]();
  v11 = (int)a3;
  v14 = *((id *)a2 + 1);
  v81 = v14;
  if (objc_msgSend(v14, sel_textureType) != (id)2)
  {
    *(_BYTE *)a7 &= 0x80u;
    *(_QWORD *)(a7 + 8) = 0;
    *(_DWORD *)(a7 + 88) = 0;
    *(_QWORD *)(a7 + 96) = 0;
    goto LABEL_82;
  }
  v69 = v11;
  v15 = objc_msgSend(v14, sel_width);
  v16 = objc_msgSend(v14, sel_height);
  v17 = v16;
  if (!a4)
  {
    v29 = (unint64_t)((double)v15 * 0.318309886);
    if (v29 <= 1)
      v29 = 1;
    v30 = (v29 - 1) | ((v29 - 1) >> 1) | (((v29 - 1) | ((v29 - 1) >> 1)) >> 2);
    v31 = v30 | (v30 >> 4) | ((v30 | (v30 >> 4)) >> 8);
    v32 = v31 | (v31 >> 16) | ((v31 | (v31 >> 16)) >> 32);
    if (v29 - ((v32 + 1) >> 1) >= v32 + 1 - v29)
      v18 = v32 + 1;
    else
      v18 = (v32 + 1) >> 1;
    if (a5)
      goto LABEL_16;
    goto LABEL_8;
  }
  if (a4 >= 0x2000)
    v18 = 0x2000;
  else
    v18 = a4;
  if (!a5)
  {
LABEL_8:
    if (v16 >= 0)
      v19 = v16;
    else
      v19 = v16 + 1;
    v20 = v19 >> 1;
    if (v20 <= v15 / 4)
      v20 = v15 / 4;
    v21 = v20 / v18;
    if (v21 <= 1)
      v21 = 1;
    a5 = v21 + 1;
  }
LABEL_16:
  v70 = a2;
  if (a5 >= 0x40)
    v22 = 64;
  else
    v22 = a5;
  v80 = v22;
  v23 = floor(log2((double)v18)) + 1.0;
  v79 = 0;
  v71 = (re *)this;
  v24 = (re *)re::internal::chooseWritableTextureFormat((uint64_t)this, &v81, 0, 0, &v79);
  v25 = *re::pipelineLogObjects(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)&buf[4] = v15;
    LOWORD(v88[0]) = 1024;
    *(_DWORD *)((char *)v88 + 2) = v17;
    HIWORD(v88[0]) = 2048;
    v88[1] = v18;
    LOWORD(v88[2]) = 2048;
    *(_QWORD *)((char *)&v88[2] + 2) = v18;
    WORD1(v88[3]) = 1024;
    HIDWORD(v88[3]) = (_DWORD)v24;
    _os_log_impl(&dword_224FE9000, v25, OS_LOG_TYPE_DEFAULT, "Converting %dx%d texture to %zux%zux6 cubemap with format %d\n", buf, 0x28u);
  }
  v26 = v79;
  if (v79)
  {
    v27 = re::translateSRGBPixelFormatToLinear((uint64_t)v24);
    v28 = 19;
  }
  else
  {
    v28 = 3;
    v27 = (int)v24;
  }
  v33 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  objc_msgSend(v33, sel_setTextureType_, 5);
  objc_msgSend(v33, sel_setWidth_, v18);
  objc_msgSend(v33, sel_setHeight_, v18);
  objc_msgSend(v33, sel_setPixelFormat_, (int)v24);
  objc_msgSend(v33, sel_setMipmapLevelCount_, (int)v23);
  objc_msgSend(v33, sel_setSampleCount_, 1);
  objc_msgSend(v33, sel_setUsage_, v28);
  if (objc_msgSend(v14, sel_isShareable))
    v34 = 2;
  else
    v34 = 0;
  objc_msgSend(v33, sel_setStorageMode_, v34);
  if (objc_msgSend(v14, sel_isShareable))
    re::mtl::Device::makeSharedTexture(v33, this, buf);
  else
    re::mtl::Device::makeTexture(v33, this, buf);
  NS::SharedPtr<MTL::Texture>::operator=(&v82, (void **)buf);
  if (*(_QWORD *)buf)

  v72 = objc_msgSend(v82, sel_newTextureViewWithPixelFormat_textureType_levels_slices_, v27, 3, 0, 1, 0, 6);
  v78 = a6;
  v35 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD5B0], sel_alloc), sel_init);
  if (v26)
    v36 = "generateCubeMapWithLinearToSRGB";
  else
    v36 = "generateCubeMap";
  objc_msgSend(v35, sel_setName_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, v36, 4));
  v68 = v35;
  re::mtl::Library::makeFunctionWithDescriptor(this + 1, v35, &v84);
  v37 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD550], sel_alloc), sel_init);
  v83 = v37;
  v67 = v84;
  objc_msgSend(v37, sel_setComputeFunction_);
  re::mtl::Device::makeComputePipelineState(this, &v83, &v77);
  *(_QWORD *)buf = 0x51B2FD90430C103CLL;
  v88[0] = "createCubeMapFromLatLongTextureQueue";
  re::ImportGraphicsContext::getOrCreateCommandQueue((uint64_t)this, (uint64_t)buf, (const char *)1, &v76);
  re::mtl::CommandQueue::makeCommandBuffer(&v76, &v75);
  re::mtl::CommandBuffer::makeComputeCommandEncoder(&v75, &v74);
  v38 = v77;
  v39 = objc_msgSend(v77, sel_threadExecutionWidth);
  v40 = (re *)objc_msgSend(v38, sel_maxTotalThreadsPerThreadgroup);
  v41 = v40 / v39;
  v42 = (v39 + v18 - 1) / v39;
  v43 = ((int)v18 + (int)v41 - 1) / v41;
  v44 = *re::pipelineLogObjects(v40);
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67110400;
    *(_DWORD *)&buf[4] = v42;
    LOWORD(v88[0]) = 1024;
    *(_DWORD *)((char *)v88 + 2) = v43;
    HIWORD(v88[0]) = 1024;
    LODWORD(v88[1]) = 6;
    WORD2(v88[1]) = 1024;
    *(_DWORD *)((char *)&v88[1] + 6) = v39;
    WORD1(v88[2]) = 1024;
    HIDWORD(v88[2]) = v41;
    LOWORD(v88[3]) = 1024;
    *(_DWORD *)((char *)&v88[3] + 2) = 1;
    _os_log_impl(&dword_224FE9000, v44, OS_LOG_TYPE_DEFAULT, "Dispatching %dx%dx%d thread groups of size %dx%dx%d\n", buf, 0x26u);
  }
  objc_msgSend(v74, "setComputePipelineState:", v38);
  objc_msgSend(v74, "setTexture:atIndex:", v14, 0);
  objc_msgSend(v74, "setTexture:atIndex:", v72, 1);
  objc_msgSend(v74, "setBytes:length:atIndex:", &v80, 4, 0);
  objc_msgSend(v74, "setBytes:length:atIndex:", &v78, 4, 1);
  *(_QWORD *)buf = v42;
  v88[0] = v43;
  v88[1] = 6;
  *(_QWORD *)v86 = v39;
  *(_QWORD *)&v86[8] = v41;
  *(_QWORD *)&v86[16] = 1;
  objc_msgSend(v74, "dispatchThreadgroups:threadsPerThreadgroup:", buf, v86);
  objc_msgSend(v74, "endEncoding");
  re::mtl::CommandBuffer::makeBlitCommandEncoder(&v75, &v73);
  objc_msgSend(v73, "endEncoding");
  objc_msgSend(v75, "commit");
  objc_msgSend(v75, "waitUntilCompleted");
  re::internal::getCommandBufferError(&v75, (uint64_t)buf);
  if (!buf[0])
  {
    v58 = objc_msgSend(objc_msgSend(v14, sel_label), sel_UTF8String);
    if ((v88[1] & 1) != 0)
      v59 = (char *)v88[2];
    else
      v59 = (char *)&v88[1] + 1;
    v61 = *re::pipelineLogObjects(v60);
    if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
    {
      if ((v86[8] & 1) != 0)
        v62 = *(_BYTE **)&v86[16];
      else
        v62 = &v86[9];
      *(_DWORD *)v85 = 136315138;
      *(_QWORD *)&v85[4] = v62;
      _os_log_error_impl(&dword_224FE9000, v61, OS_LOG_TYPE_ERROR, "%s", v85, 0xCu);
    }
    if (*(_QWORD *)v86 && (v86[8] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)v86 + 40))();
  }
  v45 = objc_msgSend(v14, sel_label);
  if (v45)
    objc_msgSend(v82, sel_setLabel_, objc_msgSend(v45, sel_stringByAppendingString_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, "_cubeMap", 4)));
  if (!buf[0] && v88[0] && (v88[1] & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v88[0] + 40))();

  if (v38)
  if (v37)

  if (v67)
  if (v68)

  if (v72)
  if (v33)

  if (v69)
  {
    v46 = (re *)objc_msgSend(v82, sel_mipmapLevelCount);
    if ((unint64_t)v46 >= 2)
    {
      v47 = *re::pipelineLogObjects(v46);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_224FE9000, v47, OS_LOG_TYPE_DEFAULT, "Generate MIPs for cubemap\n", buf, 2u);
      }
      v48 = (void *)MEMORY[0x227694090]();
      *(_QWORD *)buf = 0x5C8C10EB3EC8C2FBLL;
      v88[0] = "generateMipmapsQueue";
      re::ImportGraphicsContext::getOrCreateCommandQueue((uint64_t)v71, (uint64_t)buf, (const char *)1, (id *)v85);
      re::mtl::CommandQueue::makeCommandBuffer((id *)v85, &v84);
      re::mtl::CommandBuffer::makeBlitCommandEncoder(&v84, &v83);
      objc_msgSend(v83, "generateMipmapsForTexture:", v82);
      objc_msgSend(v83, "endEncoding");
      objc_msgSend(v84, "commit");
      objc_msgSend(v84, "waitUntilCompleted");
      re::internal::getCommandBufferError(&v84, (uint64_t)buf);
      if (!buf[0])
      {
        v50 = *re::pipelineLogObjects(v49);
        if (!os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
          goto LABEL_67;
        v63 = v82;
        v64 = v50;
        v65 = objc_msgSend(objc_msgSend(v63, sel_label), sel_UTF8String);
        v66 = (v88[1] & 1) != 0 ? (_QWORD *)v88[2] : (_QWORD *)((char *)&v88[1] + 1);
        *(_DWORD *)v86 = 136315394;
        *(_QWORD *)&v86[4] = v65;
        *(_WORD *)&v86[12] = 2080;
        *(_QWORD *)&v86[14] = v66;

        if (!buf[0])
        {
LABEL_67:
          if (v88[0])
          {
            if ((v88[1] & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v88[0] + 40))();
            memset(v88, 0, 32);
          }
        }
      }

      objc_autoreleasePoolPop(v48);
    }
  }
  v51 = *((id *)v70 + 12);
  if (*((_BYTE *)v71 + 19))
    v52 = *((_BYTE *)v71 + 20);
  else
    v52 = 0;
  v86[0] = v52;
  if (v51)
  {
    re::ColorHelpers::getColorGamutFromCGColorSpaceName(v51, v86);
    v52 = v86[0];
  }
  v53 = v52 - 1;
  if (v53 > 2u)
    v54 = (__CFString **)MEMORY[0x24BDBF270];
  else
    v54 = (__CFString **)qword_24ED7D120[(char)v53];
  v55 = *v54;
  *(_BYTE *)a7 &= 0x80u;
  *(_QWORD *)(a7 + 8) = v82;
  *(_DWORD *)(a7 + 88) = 0;
  *(_QWORD *)(a7 + 96) = 0;
  re::TextureData::setColorSpace((id *)a7, v55);
  v57 = *re::pipelineLogObjects(v56);
  if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_224FE9000, v57, OS_LOG_TYPE_DEFAULT, "Done\n", buf, 2u);
  }
LABEL_82:
  if (v14)

  if (v82)
}

void re::loadTextureFileAndConvertToCubeMap(id *a1@<X0>, const char *a2@<X1>, id *a3@<X2>, __int128 *a4@<X3>, unsigned int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  __int128 v14;
  id v15;
  unint64_t v16;
  char v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  id *v26;
  const re::mtl::Device *v27;
  uint64_t v28;
  uint64_t v29;
  id v30[10];
  unsigned int v31;
  id v32;
  char v33[5];
  _QWORD v34[10];
  unsigned int v35;
  id v36;
  id v37;
  char v38[8];
  _QWORD v39[10];
  unsigned int v40;
  id v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[2];
  id v45;
  uint64_t v46;
  uint64_t v47;
  char v48[8];
  _QWORD v49[10];
  unsigned int v50;
  id v51;
  char v52;

  v48[0] = 0;
  v49[0] = 0;
  v50 = 0;
  v51 = 0;
  v14 = a4[1];
  v42 = *a4;
  v43 = v14;
  v44[0] = a4[2];
  *(_OWORD *)((char *)v44 + 12) = *(__int128 *)((char *)a4 + 44);
  v15 = *((id *)a4 + 8);
  DWORD1(v43) = 2;
  DWORD2(v42) = 0;
  v46 = 0;
  v47 = 0;
  v45 = v15;
  v37 = *a3;
  re::loadTextureFromFile(a1, (uint64_t)a2, &v37, (re::internal *)&v42, (uint64_t)v38);
  if (v37)
  {

    v37 = 0;
  }
  if (v40)
  {
    if (v40 != 1)
      goto LABEL_36;
    if (!v39[3])
      goto LABEL_9;
  }
  if (v39[0])
  {
    if (*((_DWORD *)a4 + 2) == 2)
      v16 = *((unsigned int *)a4 + 18);
    else
      v16 = 0;
    v18 = *((_DWORD *)a4 + 5);
    if (v18)
      v19 = v18 == 3;
    else
      v19 = 1;
    v20 = v19;
    re::createCubeMapFromLatLongTexture(a1, (const re::ImportGraphicsContext *)v38, (const re::TextureData *)v20, v16, a5, a6, (uint64_t)&v29);
    if (v31)
      goto LABEL_36;
    v21 = v41;
    v33[0] = 0;
    v34[0] = v30[0];
    v35 = 0;
    v36 = v21;
    v48[0] = 0;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>((uint64_t)v49, (uint64_t)v34);
    v22 = v36;
    v36 = 0;
    v23 = v51;
    v51 = v22;

    if (v35 != -1)
      ((void (*)(char *, _QWORD *))*(&off_24ED7CF10 + v35))(&v52, v34);
    v35 = -1;

    if (v31 != -1)
      ((void (*)(char *, id *))*(&off_24ED7CF10 + v31))(&v52, v30);
    v48[0] = v38[0];
    v17 = 1;
  }
  else
  {
LABEL_9:
    v17 = 0;
    *(_BYTE *)a7 &= 0x80u;
    *(_QWORD *)(a7 + 8) = 0;
    *(_DWORD *)(a7 + 88) = 0;
    *(_QWORD *)(a7 + 96) = 0;
  }

  if (v40 != -1)
    ((void (*)(char *, _QWORD *))*(&off_24ED7CF10 + v40))(v33, v39);

  if ((v17 & 1) != 0)
  {
    if (!v50)
      goto LABEL_29;
    if (v50 == 1)
    {
      if (!v49[3])
      {
LABEL_31:
        *(_BYTE *)a7 = v48[0];
        *(_BYTE *)(a7 + 8) = 0;
        *(_DWORD *)(a7 + 88) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>(a7 + 8, (uint64_t)v49);
        v24 = 0;
        v25 = v51;
        v51 = 0;
        *(_QWORD *)(a7 + 96) = v25;
        goto LABEL_33;
      }
LABEL_29:
      if (v49[0])
        re::TextureData::setLabel((re::TextureData *)v48, a2);
      goto LABEL_31;
    }
LABEL_36:
    v26 = (id *)std::__throw_bad_variant_access[abi:nn180100]();
    re::loadTextureFileAndConvertTo3DTexture(v26, v27, v28);
    return;
  }
  v24 = v51;
LABEL_33:

  if (v50 != -1)
    ((void (*)(char *, _QWORD *))*(&off_24ED7CF10 + v50))(v38, v49);
}

void re::loadTextureFileAndConvertTo3DTexture(id *this@<X0>, const re::mtl::Device *a2@<X1>, uint64_t a3@<X8>)
{
  void *v7;
  void *v8;
  const __CFURL *v9;
  CGImageSource *v10;
  CGImageSource *v11;
  CGImage *ImageAtIndex;
  CGImage *v13;
  int Width;
  re *Height;
  int v16;
  size_t v17;
  unint64_t v18;
  uint64_t *v19;
  void *v20;
  CGColorSpace *ColorSpace;
  CGContext *v22;
  CGContext *v23;
  re *v24;
  float v25;
  NSObject *v26;
  _BOOL8 v27;
  NSObject *v28;
  NSObject *v29;
  CGImage *v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t *v33;
  int v34;
  id v35;
  re *v36;
  uint64_t *v37;
  void *v38;
  const __CFURL *v39;
  id *v40;
  id v41;
  __int128 buf;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  CGRect v48;

  v47 = *MEMORY[0x24BDAC8D0];
  v41 = 0;
  v7 = (void *)MEMORY[0x24BDBCF48];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "fileURLWithPath:", v8);
  v9 = (const __CFURL *)objc_claimAutoreleasedReturnValue();

  v10 = CGImageSourceCreateWithURL(v9, 0);
  if (!v10)
  {
    v28 = *re::pipelineLogObjects(0);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = a2;
      _os_log_error_impl(&dword_224FE9000, v28, OS_LOG_TYPE_ERROR, "Failed to create CGImageSource from file: %s\n", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_17;
  }
  v11 = v10;
  ImageAtIndex = CGImageSourceCreateImageAtIndex(v10, 0, 0);
  if (!ImageAtIndex)
  {
    v29 = *re::pipelineLogObjects(0);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = a2;
      _os_log_error_impl(&dword_224FE9000, v29, OS_LOG_TYPE_ERROR, "Failed to load CGImage from file: %s\n", (uint8_t *)&buf, 0xCu);
    }
    v30 = v11;
    goto LABEL_16;
  }
  v13 = ImageAtIndex;
  v40 = this;
  Width = CGImageGetWidth(ImageAtIndex);
  Height = (re *)CGImageGetHeight(v13);
  v16 = (int)Height;
  v17 = (int)Height;
  v18 = (int)Height * (uint64_t)Width;
  if (((unsigned __int128)((int)Height * (__int128)Width) >> 64) & 1 | (v18 >> 61))
  {
    v31 = *re::pipelineLogObjects(Height);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_224FE9000, v31, OS_LOG_TYPE_ERROR, "Failure reading LUT texture file: image size - Invalid or Out of range ", (uint8_t *)&buf, 2u);
    }
    CFRelease(v11);
    v30 = v13;
LABEL_16:
    CFRelease(v30);
LABEL_17:
    *(_BYTE *)a3 &= 0x80u;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 96) = 0;
    goto LABEL_18;
  }
  v39 = v9;
  v19 = re::globalAllocators(Height);
  v20 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v19[2] + 32))(v19[2], 8 * v18, 0);
  ColorSpace = CGImageGetColorSpace(v13);
  v38 = v20;
  v22 = CGBitmapContextCreate(v20, Width, v17, 0x10uLL, 8 * Width, ColorSpace, 0x1105u);
  if (!v22)
  {
    v32 = *re::pipelineLogObjects(0);
    v9 = v39;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = a2;
      _os_log_error_impl(&dword_224FE9000, v32, OS_LOG_TYPE_ERROR, "Failed to create a bitmap context for file: %s\n", (uint8_t *)&buf, 0xCu);
    }
    CFRelease(v11);
    CFRelease(v13);
    goto LABEL_24;
  }
  v23 = v22;
  CGContextSetBlendMode(v22, kCGBlendModeCopy);
  v48.size.width = (double)Width;
  v48.size.height = (double)v16;
  v48.origin.x = 0.0;
  v48.origin.y = 0.0;
  CGContextDrawImage(v23, v48, v13);
  CFRelease(v13);
  CFRelease(v11);
  CGContextRelease(v23);
  v25 = cbrt((double)v18);
  if (v25 != (float)(int)v25)
  {
    v26 = *re::pipelineLogObjects(v24);
    v27 = os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
    v9 = v39;
    if (v27)
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = a2;
      _os_log_error_impl(&dword_224FE9000, v26, OS_LOG_TYPE_ERROR, "Incorrect number of color entries for the 3D LUT file: %s\n", (uint8_t *)&buf, 0xCu);
    }
LABEL_24:
    if (v38)
    {
      v33 = re::globalAllocators((re *)v27);
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v33[2] + 40))(v33[2], v38);
    }
    goto LABEL_17;
  }
  v34 = (int)v25;
  v35 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  objc_msgSend(v35, sel_setTextureType_, 7);
  objc_msgSend(v35, sel_setPixelFormat_, 115);
  objc_msgSend(v35, sel_setWidth_, v34);
  objc_msgSend(v35, sel_setHeight_, v34);
  objc_msgSend(v35, sel_setDepth_, v34);
  objc_msgSend(v35, sel_setUsage_, 1);
  objc_msgSend(v35, sel_setSampleCount_, 1);
  objc_msgSend(v35, sel_setMipmapLevelCount_, 1);
  objc_msgSend(v35, sel_setStorageMode_, 0);
  re::mtl::Device::makeTexture(v35, v40, &buf);
  NS::SharedPtr<MTL::Texture>::operator=(&v41, (void **)&buf);
  v9 = v39;
  if ((_QWORD)buf)

  objc_msgSend(v41, sel_setLabel_, CFSTR("3D LUT"));
  buf = 0uLL;
  v43 = 0;
  v44 = v34;
  v45 = v34;
  v46 = v34;
  v36 = (re *)objc_msgSend(v41, sel_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_, &buf, 0, 0, v38, 8 * v34, 8 * (v34 * v34));
  if (v38)
  {
    v37 = re::globalAllocators(v36);
    (*(void (**)(uint64_t, void *))(*(_QWORD *)v37[2] + 40))(v37[2], v38);
  }
  *(_BYTE *)a3 &= 0x80u;
  *(_QWORD *)(a3 + 8) = v41;
  *(_DWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  if (v35)

LABEL_18:
  if (v41)

}

void re::load3DTextureFromLutDataFile(id *this@<X0>, const re::mtl::Device *a2@<X1>, const char *a3@<X2>, uint64_t a4@<X8>)
{
  re *v7;
  uint64_t v8;
  fpos_t v9;
  re *v10;
  unint64_t v11;
  re *v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  re *v16;
  float v17;
  int v18;
  NSObject *v19;
  const char *v20;
  NSObject *v21;
  uint32_t v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t *v25;
  re *v26;
  re *v27;
  char *v28;
  BOOL v29;
  char *v30;
  int v33;
  char *v34;
  uint64_t v35;
  _WORD *v40;
  _BYTE *v43;
  int64_t v44;
  char *v45;
  NSObject *v46;
  id v47;
  uint64_t *v48;
  char *v49;
  re *v50;
  unsigned int v51;
  int v52;
  _QWORD v53[2];
  unint64_t v54;
  int v55;
  void *__ptr;
  _BYTE v57[16];
  FILE *__stream;
  uint64_t v59;
  char v60;
  _BYTE v61[23];
  id v62[2];
  _BYTE v63[12];
  __int16 v64;
  int v65;
  __int16 v66;
  re *v67;
  __int16 v68;
  unint64_t v69;
  fpos_t v70[4];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v62[0] = 0;
  re::FileStreamReader::open(a2, (uint64_t)v57);
  if (v57[0])
  {
    v70[0] = 0;
    v8 = v59;
    fgetpos(__stream, v70);
    v9 = v70[0];
    v10 = (re *)(v8 - v70[0]);
    __ptr = 0;
    v53[1] = 0;
    v54 = 0;
    v53[0] = 0;
    v55 = 0;
    v11 = v8 - v70[0] + 1;
    re::DynamicArray<BOOL>::resize((uint64_t)v53, v11);
    if (v54 == v11 && (v12 = (re *)fread(__ptr, 1uLL, v8 - v9, __stream), v12 == v10))
    {
      v13 = v54;
      if (v54 <= (unint64_t)v10)
      {
        v62[1] = 0;
        v72 = 0u;
        v73 = 0u;
        v71 = 0u;
        memset(v70, 0, sizeof(v70));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v63 = 136315906;
        *(_QWORD *)&v63[4] = "operator[]";
        v64 = 1024;
        v65 = 789;
        v66 = 2048;
        v67 = v10;
        v68 = 2048;
        v69 = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *((_BYTE *)v10 + (_QWORD)__ptr) = 0;
      v14 = __ptr;
      *(_QWORD *)v63 = 0;
      v15 = strstr((char *)__ptr, "LUT_3D_SIZE ");
      *(_QWORD *)v63 = v15;
      if (!v15)
        goto LABEL_10;
      v17 = strtof(v15 + 12, (char **)v63);
      v52 = (int)v17;
      v18 = (int)v17 * (int)v17 * (int)v17;
      if ((unint64_t)(8 * v18) >= 0x4000001)
      {
        v19 = *re::pipelineLogObjects(v16);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v70[0]) = 136315650;
          *(fpos_t *)((char *)v70 + 4) = (fpos_t)"LUT_3D_SIZE ";
          WORD2(v70[1]) = 1024;
          *(_DWORD *)((char *)&v70[1] + 6) = v52;
          WORD1(v70[2]) = 2080;
          *(fpos_t *)((char *)&v70[2] + 4) = (fpos_t)a2;
          v20 = "Unexpected %s '%d' (too large) for LUT file '%s'";
          v21 = v19;
          v22 = 28;
LABEL_49:
          _os_log_error_impl(&dword_224FE9000, v21, OS_LOG_TYPE_ERROR, v20, (uint8_t *)v70, v22);
        }
LABEL_10:
        *(_BYTE *)a4 &= 0x80u;
        *(_QWORD *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 88) = 0;
        *(_QWORD *)(a4 + 96) = 0;
LABEL_11:
        if (v53[0] && __ptr)
          (*(void (**)(void))(*(_QWORD *)v53[0] + 40))();
        goto LABEL_16;
      }
      v51 = (int)v17 * (int)v17;
      v25 = re::globalAllocators(v16);
      v26 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v25[2] + 32))(v25[2], 8 * v18, 0);
      if (v26)
      {
        if (v52)
        {
          v27 = v26;
          v28 = (char *)v10 + (_QWORD)v14;
          v29 = v18 > 0;
          v30 = *(char **)v63;
          _CF = v18 < 1 || *(_QWORD *)v63 == 0 || *(_QWORD *)v63 >= (unint64_t)v28;
          v50 = v27;
          if (!_CF)
          {
            v33 = 0;
            v34 = &v14[v8 - v9];
            v49 = v34;
            while (1)
            {
              if (!*v30)
              {
LABEL_58:
                v29 = 1;
                goto LABEL_61;
              }
              if (v30 < v28)
              {
                v35 = v34 - v30;
                while (*v30 && *v30 != 10)
                {
                  *(_QWORD *)v63 = ++v30;
                  if (!--v35)
                  {
                    v30 = &v14[(_QWORD)v10];
                    break;
                  }
                }
              }
              if (v30 == v28)
                break;
              if (!*v30)
                goto LABEL_58;
              *(_QWORD *)v63 = ++v30;
              if (v30 < v28 && *v30 - 48 <= 9)
              {
                _S0 = strtof(v30, (char **)v63);
                __asm { FCVT            H0, S0 }
                v40 = (_WORD *)((char *)v50 + 8 * v33);
                *v40 = LOWORD(_S0);
                _S0 = strtof(*(const char **)v63, (char **)v63);
                __asm { FCVT            H0, S0 }
                *((_WORD *)v50 + 4 * v33 + 1) = LOWORD(_S0);
                _S0 = strtof(*(const char **)v63, (char **)v63);
                v34 = v49;
                __asm { FCVT            H0, S0 }
                v40[2] = LOWORD(_S0);
                v40[3] = 15360;
                ++v33;
                v30 = *(char **)v63;
              }
              v29 = v33 < v18;
              if (v33 >= v18 || !v30 || v30 >= v28)
                goto LABEL_60;
            }
            v29 = 1;
            v30 = (char *)v10 + (_QWORD)v14;
          }
LABEL_60:
          if (v30)
          {
LABEL_61:
            if (v30 < v28)
            {
              v44 = &v14[(_QWORD)v10] - v30;
              v45 = v30 + 1;
              while (*(v45 - 1) == 10)
              {
                *(_QWORD *)v63 = v45++;
                if (!--v44)
                  goto LABEL_73;
              }
              if (!*(v45 - 1))
                v29 = 1;
              if (!v29)
              {
                v46 = *re::pipelineLogObjects((re *)v30);
                if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(v70[0]) = 136315138;
                  *(fpos_t *)((char *)v70 + 4) = (fpos_t)a2;
                  _os_log_impl(&dword_224FE9000, v46, OS_LOG_TYPE_DEFAULT, "Size of LUT file is larger than its header indicates. It may be loaded incorrectly: '%s'", (uint8_t *)v70, 0xCu);
                }
              }
            }
LABEL_73:
            v47 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
            objc_msgSend(v47, sel_setTextureType_, 7);
            objc_msgSend(v47, sel_setPixelFormat_, 115);
            objc_msgSend(v47, sel_setWidth_, v52);
            objc_msgSend(v47, sel_setHeight_, v52);
            objc_msgSend(v47, sel_setDepth_, v52);
            objc_msgSend(v47, sel_setUsage_, 1);
            objc_msgSend(v47, sel_setSampleCount_, 1);
            objc_msgSend(v47, sel_setMipmapLevelCount_, 1);
            objc_msgSend(v47, sel_setStorageMode_, 0);
            re::mtl::Device::makeTexture(v47, this, v70);
            NS::SharedPtr<MTL::Texture>::operator=(v62, (void **)v70);
            if (v70[0])

            objc_msgSend(v62[0], sel_setLabel_, CFSTR("3D LUT"));
            memset(v70, 0, 24);
            v70[3] = v52;
            *(_QWORD *)&v71 = v52;
            *((_QWORD *)&v71 + 1) = v52;
            v48 = re::globalAllocators((re *)objc_msgSend(v62[0], sel_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_, v70, 0, 0, v50, 8 * v52, 8 * v51));
            (*(void (**)(uint64_t, re *))(*(_QWORD *)v48[2] + 40))(v48[2], v50);
            *(_BYTE *)a4 &= 0x80u;
            *(_QWORD *)(a4 + 8) = v62[0];
            *(_DWORD *)(a4 + 88) = 0;
            *(_QWORD *)(a4 + 96) = 0;
            if (v47)

            goto LABEL_11;
          }
          v23 = *re::pipelineLogObjects(0);
          if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            goto LABEL_10;
          LODWORD(v70[0]) = 136315138;
          *(fpos_t *)((char *)v70 + 4) = (fpos_t)a2;
          v20 = "Failed to parse LUT from file '%s'";
        }
        else
        {
          v23 = *re::pipelineLogObjects(v26);
          if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            goto LABEL_10;
          LODWORD(v70[0]) = 136315138;
          *(fpos_t *)((char *)v70 + 4) = (fpos_t)a2;
          v20 = "Failed to find size of LUT from file '%s'";
        }
      }
      else
      {
        v23 = *re::pipelineLogObjects(0);
        if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          goto LABEL_10;
        LODWORD(v70[0]) = 136315138;
        *(fpos_t *)((char *)v70 + 4) = (fpos_t)a2;
        v20 = "Not enough memory to load LUT file '%s'";
      }
    }
    else
    {
      v23 = *re::pipelineLogObjects(v12);
      if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        goto LABEL_10;
      LODWORD(v70[0]) = 136315138;
      *(fpos_t *)((char *)v70 + 4) = (fpos_t)a2;
      v20 = "Failed to read content of LUT file '%s'";
    }
    v21 = v23;
    v22 = 12;
    goto LABEL_49;
  }
  v24 = *re::pipelineLogObjects(v7);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    if ((v60 & 1) != 0)
      v43 = *(_BYTE **)&v61[7];
    else
      v43 = v61;
    LODWORD(v70[0]) = 136315394;
    *(fpos_t *)((char *)v70 + 4) = (fpos_t)a2;
    WORD2(v70[1]) = 2080;
    *(fpos_t *)((char *)&v70[1] + 6) = (fpos_t)v43;
    _os_log_error_impl(&dword_224FE9000, v24, OS_LOG_TYPE_ERROR, "Attempt to open LUT file '%s' did not succeed: %s", (uint8_t *)v70, 0x16u);
  }
  *(_BYTE *)a4 &= 0x80u;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 88) = 0;
  *(_QWORD *)(a4 + 96) = 0;
LABEL_16:
  re::Result<re::FileStreamReader,re::DetailedError>::~Result((uint64_t)v57);
  if (v62[0])

}

void re::encodeProcessTextureCommands(id *a1, id *a2, id *a3, id *a4, id *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v11;
  char *v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v18;
  uint64_t i;
  id v20;
  id v21;
  id v22;
  re *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  id v29;
  __int128 v30;
  unsigned int v31;
  id *v34;
  uint64_t v38;
  char *v39;
  id v40;
  _QWORD v41[3];
  _BYTE buf[24];
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  char *v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v11 = (char *)objc_msgSend(*a5, sel_mipmapLevelCount);
  v34 = a4;
  v12 = (char *)objc_msgSend(*a4, sel_mipmapLevelCount);
  if (v11 >= v12)
    v13 = v12;
  else
    v13 = v11;
  v14 = *a5;
  v15 = (uint64_t)objc_msgSend(*a5, sel_arrayLength);
  if ((char *)objc_msgSend(v14, sel_textureType) - 5 >= (char *)2)
    v16 = v15;
  else
    v16 = 6 * v15;
  v38 = v16;
  v17 = objc_msgSend(*a2, sel_maxTotalThreadsPerThreadgroup);
  v31 = objc_msgSend(*a2, sel_threadExecutionWidth);
  if (v13)
  {
    v39 = 0;
    *(_QWORD *)&v18 = 136317186;
    v30 = v18;
    do
    {
      if (v38)
      {
        for (i = 0; i != v38; ++i)
        {
          v40 = objc_msgSend(*v34, sel_newTextureViewWithPixelFormat_textureType_levels_slices_, a6, a8, v39, 1, i, 1, v30);
          v20 = objc_msgSend(*a5, sel_newTextureViewWithPixelFormat_textureType_levels_slices_, a7, a8, v39, 1, i, 1);
          v21 = *a5;
          v22 = *a1;
          objc_msgSend(v21, sel_pixelFormat);
          objc_msgSend(*a5, sel_width);
          objc_msgSend(*a5, sel_height);
          objc_msgSend(*a5, sel_depth);
          objc_msgSend(*a5, sel_sampleCount);
          MTLGetTextureLevelInfoForDeviceWithOptions();

          v24 = v17 / 0;
          if (v17 / 0 <= 1)
            v25 = 1;
          else
            v25 = v17 / 0;
          if (v25 >= (v31 / ((v17 / v31) >> 1) <= v17))
            v26 = v31 / ((v17 / v31) >> 1) <= v17;
          else
            v26 = v25;
          if (v26 > v24)
            v27 = 1;
          else
            v27 = v24;
          if (re::pipelineHighFrequencyLoggingEnabled(void)::onceToken != -1)
            dispatch_once(&re::pipelineHighFrequencyLoggingEnabled(void)::onceToken, &__block_literal_global_39);
          if (re::pipelineHighFrequencyLoggingEnabled(void)::shouldLog)
          {
            v28 = *re::pipelineLogObjects(v23);
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = v30;
              *(_QWORD *)&buf[4] = "Converting texture gamut";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 0xFFFFFFFF / 0;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = ((int)v27 - 1) / v27;
              v43 = 1024;
              v44 = v26 - 1;
              v45 = 1024;
              v46 = 0;
              v47 = 1024;
              v48 = v27;
              v49 = 1024;
              v50 = v26;
              v51 = 2048;
              v52 = v39;
              v53 = 2048;
              v54 = i;
              _os_log_debug_impl(&dword_224FE9000, v28, OS_LOG_TYPE_DEBUG, "%s: dispatching %dx%dx%d thread groups of size %dx%dx%d for mipmap level %zu, slice %zu", buf, 0x44u);
            }
          }
          objc_msgSend(*a3, "setTexture:atIndex:", v40, 0);
          objc_msgSend(*a3, "setTexture:atIndex:", v20, 1);
          v29 = *a3;
          *(_QWORD *)buf = 0xFFFFFFFF / 0;
          *(_QWORD *)&buf[8] = ((int)v27 - 1) / v27;
          *(_QWORD *)&buf[16] = (v26 - 1);
          v41[0] = 0;
          v41[1] = v27;
          v41[2] = v26;
          objc_msgSend(v29, "dispatchThreadgroups:threadsPerThreadgroup:", buf, v41);
          if (v20)

          if (v40)
        }
      }
      ++v39;
    }
    while (v39 != v13);
  }
}

void re::convertMetalTextureColorSpace(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 88) >= 2u)
    std::__throw_bad_variant_access[abi:nn180100]();
  v3 = objc_msgSend(*(id *)(a1 + 8), sel_pixelFormat);
  v7 = 0;
  v5 = 0u;
  v6 = 0u;
  v4 = 0u;
  MTLPixelFormatGetInfoForDevice();
  re::isHDR(v3);
  *(_BYTE *)a2 &= 0x80u;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
}

id re::createDescriptorFromTexture@<X0>(id *a1@<X0>, id *a2@<X1>, _QWORD *a3@<X8>)
{
  id v6;
  id v7;
  id result;

  v6 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  *a3 = v6;
  objc_msgSend(v6, sel_setTextureType_, objc_msgSend(*a2, sel_textureType));
  objc_msgSend(v6, sel_setWidth_, objc_msgSend(*a2, sel_width));
  objc_msgSend(v6, sel_setHeight_, objc_msgSend(*a2, sel_height));
  objc_msgSend(v6, sel_setDepth_, objc_msgSend(*a2, sel_depth));
  objc_msgSend(v6, sel_setArrayLength_, objc_msgSend(*a2, sel_arrayLength));
  objc_msgSend(v6, sel_setMipmapLevelCount_, objc_msgSend(*a2, sel_mipmapLevelCount));
  objc_msgSend(v6, sel_setSampleCount_, objc_msgSend(*a2, sel_sampleCount));
  objc_msgSend(v6, sel_setPixelFormat_, objc_msgSend(*a2, sel_pixelFormat));
  objc_msgSend(v6, sel_setUsage_, objc_msgSend(*a2, sel_usage));
  objc_msgSend(v6, sel_setCpuCacheMode_, objc_msgSend(*a2, sel_cpuCacheMode));
  objc_msgSend(v6, sel_setStorageMode_, objc_msgSend(*a2, sel_storageMode));
  v7 = objc_msgSend(*a2, sel_compressionType);
  if ((objc_msgSend(v6, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
    || objc_msgSend(v6, sel_methodSignatureForSelector_, sel_setCompressionType_))
  {
    objc_msgSend(v6, sel_setCompressionType_, v7);
  }
  if (!*a1)
    return objc_msgSend(v6, sel_setSwizzle_, objc_msgSend(*a2, sel_swizzle));
  result = (id)objc_msgSend(*a1, "supportsTextureSwizzle");
  if ((_DWORD)result)
    return objc_msgSend(v6, sel_setSwizzle_, objc_msgSend(*a2, sel_swizzle));
  return result;
}

id MTL::TextureDescriptor::setCompressionType(void *a1)
{
  id result;

  if ((objc_msgSend(a1, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0)
    return objc_msgSend(a1, sel_setCompressionType_, 0);
  result = objc_msgSend(a1, sel_methodSignatureForSelector_, sel_setCompressionType_);
  if (result)
    return objc_msgSend(a1, sel_setCompressionType_, 0);
  return result;
}

void re::convertTextureColorSpace(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)(a2 + 88))
    re::convertCPUTextureColorSpace(a1, a2, a3);
  else
    re::convertMetalTextureColorSpace(a2, a3);
}

uint64_t re::internal::applyCompressionOptionsToTextureDescriptor(id *a1, _DWORD *a2, uint64_t a3, uint64_t a4, id *a5)
{
  int v8;
  id v9;
  int ASTCDefaultMode;
  unsigned int v11;
  unsigned int v12;
  int MTLPixelFormat;
  re *isSupportedPixelFormat;
  BOOL v15;
  NSObject *v16;
  uint64_t result;
  id v18;
  uint64_t TextureCompressionType;
  id v20;
  re *InfoForDevice;
  re *v22;
  NSObject *v23;
  id v24;
  NSObject *v25;
  unsigned int v26;
  NSObject *v27;
  id v28;
  re *v29;
  re *v30;
  NSObject *v31;
  const char *v32;
  id v33;
  id v34;
  uint8_t buf[16];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (a2[6] == 1)
    return 0;
  objc_msgSend(*a5, sel_pixelFormat);
  v38 = 0;
  v36 = 0u;
  v37 = 0u;
  *(_OWORD *)buf = 0u;
  MTLPixelFormatGetInfoForDevice();
  v8 = a2[6];
  if ((v8 - 3) < 2)
  {
    ASTCDefaultMode = a2[8];
    if (!ASTCDefaultMode)
    {
      ASTCDefaultMode = re::getASTCDefaultMode((int)objc_msgSend(*a5, sel_pixelFormat));
      v8 = a2[6];
    }
    v11 = a2[7];
    if (v11 <= 1)
      v11 = 1;
    if (v8 == 3)
      v12 = 1;
    else
      v12 = v11;
    MTLPixelFormat = re::getMTLPixelFormat(v12, ASTCDefaultMode);
    if (objc_msgSend(*a5, sel_pixelFormat) == (id)MTLPixelFormat)
      return 0;
    objc_msgSend(*a5, sel_textureType);
    isSupportedPixelFormat = (re *)re::isSupportedPixelFormat();
    if ((_DWORD)isSupportedPixelFormat)
      v15 = MTLPixelFormat == 0;
    else
      v15 = 1;
    if (v15)
    {
      v16 = *re::pipelineLogObjects(isSupportedPixelFormat);
      result = os_log_type_enabled(v16, OS_LOG_TYPE_INFO);
      if (!(_DWORD)result)
        return result;
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v16, OS_LOG_TYPE_INFO, "PixelFormatASTC_4x4_LDR not supported by device", buf, 2u);
      return 0;
    }
    objc_msgSend(*a5, sel_setPixelFormat_, MTLPixelFormat);
    return 1;
  }
  if (v8)
  {
    if (v8 == 2)
    {
      v9 = *a5;
      if ((objc_msgSend(*a5, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
        || objc_msgSend(v9, sel_methodSignatureForSelector_, sel_setCompressionType_))
      {
        objc_msgSend(v9, sel_setCompressionType_, 1);
      }
    }
  }
  else if (*a1)
  {
    v18 = *a5;
    *(_QWORD *)buf = objc_msgSend(*a5, sel_storageMode);
    v34 = objc_msgSend(*a5, sel_pixelFormat);
    v33 = objc_msgSend(*a5, sel_usage);
    TextureCompressionType = re::mtl::getTextureCompressionType(a1, buf, &v34, &v33);
    if ((objc_msgSend(v18, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
      || objc_msgSend(v18, sel_methodSignatureForSelector_, sel_setCompressionType_))
    {
      objc_msgSend(v18, sel_setCompressionType_, TextureCompressionType);
    }
  }
  v20 = *a5;
  if ((objc_msgSend(*a5, sel_respondsToSelector_, sel_compressionType) & 1) == 0)
  {
    result = (uint64_t)objc_msgSend(v20, sel_methodSignatureForSelector_, sel_compressionType);
    if (!result)
      return result;
  }
  if (objc_msgSend(v20, sel_compressionType) != (id)1)
    return 0;
  objc_msgSend(*a5, sel_pixelFormat);
  v38 = 0;
  v36 = 0u;
  v37 = 0u;
  *(_OWORD *)buf = 0u;
  InfoForDevice = (re *)MTLPixelFormatGetInfoForDevice();
  if ((*(_WORD *)&buf[8] & 0x400) == 0)
  {
    objc_msgSend(*a5, sel_pixelFormat);
    v38 = 0;
    v36 = 0u;
    v37 = 0u;
    *(_OWORD *)buf = 0u;
    v22 = (re *)MTLPixelFormatGetInfoForDevice();
    if ((*(_DWORD *)&buf[8] & 0x4000000) == 0)
    {
      v23 = *re::pipelineLogObjects(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        v24 = *a5;
        v25 = v23;
        v26 = objc_msgSend(v24, sel_pixelFormat);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v26;
        _os_log_impl(&dword_224FE9000, v25, OS_LOG_TYPE_INFO, "Lossy compression not supported for pixel format '%u'", buf, 8u);

      }
      goto LABEL_36;
    }
    if (*a1)
    {
      v29 = (re *)objc_msgSend(*a1, "supportsFamily:", 1008);
      if ((v29 & 1) == 0)
      {
        v31 = *re::pipelineLogObjects(v29);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          v32 = "Ignoring lossy compression request: requires MTLGPUFamilyApple8";
          goto LABEL_47;
        }
LABEL_48:
        MTL::TextureDescriptor::setCompressionType(*a5);
        return 0;
      }
    }
    v30 = (re *)objc_msgSend(*a5, sel_usage);
    if ((v30 & 0x10) != 0)
    {
      v31 = *re::pipelineLogObjects(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        v32 = "Ignoring lossy compression request for texture with MTLTextureUsagePixelFormatView";
LABEL_47:
        _os_log_impl(&dword_224FE9000, v31, OS_LOG_TYPE_INFO, v32, buf, 2u);
        goto LABEL_48;
      }
      goto LABEL_48;
    }
    return 1;
  }
  v27 = *re::pipelineLogObjects(InfoForDevice);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_224FE9000, v27, OS_LOG_TYPE_INFO, "Ignoring lossy compression request for compressed pixel format", buf, 2u);
  }
LABEL_36:
  v28 = *a5;
  if ((objc_msgSend(v28, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
    || (result = (uint64_t)objc_msgSend(v28, sel_methodSignatureForSelector_, sel_setCompressionType_)) != 0)
  {
    objc_msgSend(v28, sel_setCompressionType_, 0);
    return 0;
  }
  return result;
}

void re::createCompressedTextureData(uint64_t a1@<X0>, int a2@<W1>, __int128 *a3@<X2>, id *a4@<X3>, id *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  id *v14;
  int ASTCDefaultMode;
  uint64_t MTLPixelFormat;
  const re::TextureData *v17;
  int v18;
  id v19;
  __int128 v20;
  __int128 v21;
  int v22;
  id v23;
  id v24;
  id v25;
  char *v26;
  char v27;
  int v28;
  id v29;
  const re::TextureData *v30;
  unsigned int FaceOrArrayLength;
  uint64_t v32;
  id v33;
  uint64_t v34;
  id *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _anonymous_namespace_ *SharedTexture;
  int v45;
  int v46;
  _anonymous_namespace_ *v47;
  id v48;
  id v49;
  uint64_t v50;
  int v51;
  void *v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  __int128 v66;
  __int128 v67;
  _BYTE *v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  id *v72;
  uint64_t v73;
  const char *v74;
  id v75;
  id v76;
  re::TextureData *v77;
  int v78;
  id v79;
  uint64_t v80;
  id v81;
  id v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  char v86;
  id obj;
  id *v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  id *v92;
  uint64_t v93;
  uint64_t *v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  __int128 v100;
  id v101;
  _BYTE v102[32];
  void *v103;
  id v104;
  id v105;
  id v106;
  _OWORD v107[3];
  uint64_t v108;
  unsigned int v109;
  id v110;
  unsigned __int8 v111[8];
  uint64_t v112;
  char v113;
  _BYTE v114[23];
  id v115;
  __int128 v116;
  uint64_t v117;
  _BYTE v118[38];
  uint64_t v119;
  __int128 v120[5];
  unsigned int v121;
  id v122;
  _QWORD v123[3];
  _QWORD *v124;
  uint64_t v125;

  v125 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 88) >= 2u)
    goto LABEL_134;
  v14 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 8), sel_pixelFormat);
  v108 = 0;
  memset(v107, 0, sizeof(v107));
  MTLPixelFormatGetInfoForDevice();
  v116 = *a3;
  ASTCDefaultMode = DWORD1(v116);
  if (!DWORD1(v116))
  {
    if (*(_DWORD *)(a1 + 88) >= 2u)
      goto LABEL_134;
    ASTCDefaultMode = re::getASTCDefaultMode((int)objc_msgSend(*v14, sel_pixelFormat));
    DWORD1(v116) = ASTCDefaultMode;
  }
  MTLPixelFormat = re::getMTLPixelFormat(v116, ASTCDefaultMode);
  if (!(_DWORD)MTLPixelFormat)
    goto LABEL_11;
  v18 = MTLPixelFormat;
  if (*a4)
  {
    if (*(_DWORD *)(a1 + 88) >= 2u)
      goto LABEL_134;
    objc_msgSend(*v14, sel_textureType);
    MTLPixelFormat = re::isSupportedPixelFormat();
    if ((MTLPixelFormat & 1) == 0)
    {
LABEL_11:
      v20 = v107[0];
      v21 = v107[1];
      *(_BYTE *)a7 = 0;
      *(_OWORD *)(a7 + 8) = v20;
      *(_OWORD *)(a7 + 24) = v21;
      return;
    }
  }
  re::internal::synchronizeTextureMipmaps((id *)a1, v17);
  if (a5)
  {
    v19 = *a5;
LABEL_17:
    v23 = v19;
    v115 = v19;
    goto LABEL_18;
  }
  v22 = *(_DWORD *)(a1 + 88);
  if (v22 == 1)
  {
    v19 = objc_msgSend(*v14, sel_copy);
    goto LABEL_17;
  }
  if (v22)
    goto LABEL_134;
  re::createDescriptorFromTexture(a4, v14, &v115);
  v23 = v115;
LABEL_18:
  v85 = a6;
  if ((objc_msgSend(v23, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
    || objc_msgSend(v23, sel_methodSignatureForSelector_, sel_setCompressionType_))
  {
    objc_msgSend(v23, sel_setCompressionType_, 0);
  }
  v84 = v115;
  objc_msgSend(v115, sel_setPixelFormat_, v18);
  v24 = *(id *)(a1 + 96);
  v25 = v24;
  v111[0] = 0;
  v88 = v14;
  if (re::TextureData::label((re::TextureData *)a1))
  {
    v26 = re::TextureData::label((re::TextureData *)a1);
    LOBYTE(v107[0]) = 1;
    *((_QWORD *)&v107[0] + 1) = *(_QWORD *)&v120[0];
    *(_QWORD *)&v107[2] = *((_QWORD *)&v120[1] + 1);
    v107[1] = *(__int128 *)((char *)v120 + 8);
    memset(v120, 0, 32);
    re::Optional<re::DynamicString>::operator=(v111, v107);
    if (LOBYTE(v107[0]) && *((_QWORD *)&v107[0] + 1))
    {
      if ((v107[1] & 1) != 0)
        (*(void (**)(void))(**((_QWORD **)&v107[0] + 1) + 40))();
      memset((char *)v107 + 8, 0, 32);
    }
    if (*(_QWORD *)&v120[0] && (BYTE8(v120[0]) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v120[0] + 40))(*(_QWORD *)&v120[0], *(_QWORD *)&v120[1]);
  }
  v27 = *(_BYTE *)a1;
  LOBYTE(v107[0]) = 0;
  *((_QWORD *)&v107[0] + 1) = 0;
  v109 = 0;
  v110 = 0;
  v28 = *(_DWORD *)(a1 + 88);
  if (v28 == 1)
  {
    v45 = objc_msgSend(*(id *)(a1 + 8), sel_pixelFormat);
    if (*(_DWORD *)(a1 + 88) != 1)
      goto LABEL_134;
    v46 = re::MTLToASTCPixelFormat(v45);
    v47 = (_anonymous_namespace_ *)re::internal::createCompressedCPUTextureData((id *)(a1 + 16), v46, a2, &v115, (unsigned int *)&v116, 0, (uint64_t)&v97);
    if ((_BYTE)v97)
    {
      v86 = v27;
      obj = v24;
      LODWORD(v92) = 0;
      v90 = 0u;
      v91 = 0u;
      v93 = 0;
      v95 = 0u;
      v96 = 0;
      re::DynamicString::setCapacity(&v94, 0);
      *(_QWORD *)v118 = v98;
      re::DynamicArray<re::DynamicArray<unsigned char>>::DynamicArray((uint64_t)&v118[8], &v99);
      re::DynamicString::DynamicString((re::DynamicString *)&v119, (const re::DynamicString *)v102);
      NS::SharedPtr<MTL::Texture>::operator=(&v98, (void **)&v90);
      re::DynamicArray<re::DynamicArray<unsigned char>>::operator=((uint64_t)&v99, (uint64_t *)&v90 + 1);
      re::DynamicString::operator=((re::DynamicString *)v102, (re::DynamicString *)&v94);
      LOBYTE(v120[0]) = 0;
      std::__variant_detail::__alt<1ul,re::CPUTexture>::__alt[abi:nn180100]<re::CPUTexture const&>((_QWORD *)v120 + 1, (uint64_t)v118);
      v121 = 1;
      v122 = 0;
      LOBYTE(v107[0]) = v120[0];
      std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>((uint64_t)v107 + 8, (uint64_t)v120 + 8);
      v48 = v122;
      v122 = 0;
      v49 = v110;
      v110 = v48;

      if (v121 != -1)
        ((void (*)(uint64_t *, char *))*(&off_24ED7CF10 + v121))(&v117, (char *)v120 + 8);
      v121 = -1;
      re::CPUTexture::~CPUTexture((re::CPUTexture *)v118);
      re::CPUTexture::~CPUTexture((re::CPUTexture *)&v90);
      re::Result<re::CPUTexture,re::DynamicString>::~Result((re::CPUTexture *)&v97);
      goto LABEL_116;
    }
    if ((v99 & 1) != 0)
      v53 = (char *)v100;
    else
      v53 = (char *)&v99 + 1;
    re::DynamicString::format((re::DynamicString *)"Failed to create compressed texture: %s.", (re::DynamicString *)v120, v53);
    v54 = v120[0];
    v55 = v120[1];
    *(_BYTE *)a7 = 0;
    *(_OWORD *)(a7 + 8) = v54;
    *(_OWORD *)(a7 + 24) = v55;
    re::Result<re::CPUTexture,re::DynamicString>::~Result((re::CPUTexture *)&v97);
LABEL_123:

    if (v109 != -1)
      ((void (*)(__int128 *, char *))*(&off_24ED7CF10 + v109))(v120, (char *)v107 + 8);
    if (v111[0] && v112 && (v113 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v112 + 40))();

    if (v115)
  }
  else
  {
    if (v28)
      goto LABEL_134;
    v80 = MEMORY[0x227694090]();
    v29 = re::TextureData::mipmapLevelCount((re::TextureData *)a1);
    FaceOrArrayLength = re::internal::getFaceOrArrayLength((id *)a1, v30);
    v92 = 0;
    *(_QWORD *)&v91 = 0;
    v90 = 0uLL;
    DWORD2(v91) = 0;
    if (*(_DWORD *)(a1 + 88) >= 2u)
      goto LABEL_134;
    v86 = v27;
    obj = v24;
    v83 = a7;
    v89 = FaceOrArrayLength;
    v32 = (_QWORD)v29 * FaceOrArrayLength;
    v33 = objc_msgSend(*v88, sel_depth);
    if ((unint64_t)v33 <= 1)
      v34 = 1;
    else
      v34 = (uint64_t)v33;
    if (*((_QWORD *)&v90 + 1) < (unint64_t)(v32 * v34))
      re::DynamicArray<re::TextureBuilderKTX::CopyFromBufferToTextureInfo>::setCapacity(&v90, v32 * v34);
    LOBYTE(v100) = 0;
    *(_QWORD *)((char *)&v100 + 4) = 0;
    HIDWORD(v100) = 0;
    v99 = 0;
    v97 = 0;
    v98 = (id)8;
    dispatch_get_global_queue(21, 0);
    v101 = (id)objc_claimAutoreleasedReturnValue();
    v35 = v88;
    if (v29)
    {
      v36 = 0;
      v81 = v25;
      v79 = v29;
      while (1)
      {
        if (*(_DWORD *)(a1 + 88) >= 2u)
          goto LABEL_134;
        v37 = (unint64_t)objc_msgSend(*v35, sel_depth);
        v38 = v37 >> v36 <= 1 ? 1 : v37 >> v36;
        if ((_DWORD)v89)
          break;
LABEL_55:
        ++v36;
        v29 = v79;
        v25 = v81;
        v35 = v88;
        if ((id)v36 == v79)
          goto LABEL_56;
      }
      v39 = 0;
LABEL_46:
      v40 = 0;
      while (1)
      {
        v123[0] = &off_24ED7D0B0;
        v123[1] = &v90;
        v124 = v123;
        re::copyTextureBytesToASTCCompression(a4, a1, &v116, a2, v36, v39, v40, (re::ASTCCompressor *)&v97, (uint64_t)v120, (uint64_t)v123);
        v41 = v124;
        if (v124 == v123)
        {
          v41 = v123;
          v42 = 4;
        }
        else
        {
          if (!v124)
            goto LABEL_52;
          v42 = 5;
        }
        (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_52:
        if (!LOBYTE(v120[0]))
        {
          re::DynamicString::DynamicString((re::DynamicString *)v118, (const re::DynamicString *)((char *)v120 + 8));
          *(_BYTE *)a7 = 0;
          v50 = *(_QWORD *)&v118[24];
          *(_QWORD *)(a7 + 8) = *(_QWORD *)v118;
          *(_QWORD *)(a7 + 32) = v50;
          *(_OWORD *)(a7 + 16) = *(_OWORD *)&v118[8];
          if (!LOBYTE(v120[0]) && *((_QWORD *)&v120[0] + 1) && (v120[1] & 1) != 0)
            (*(void (**)(void))(**((_QWORD **)&v120[0] + 1) + 40))();
          v51 = 1;
          v52 = (void *)v80;
          v25 = v81;
LABEL_104:
          if (*((_QWORD *)&v100 + 1))
          {
            astcenc_context_free(*((uint64_t *)&v100 + 1));
            *((_QWORD *)&v100 + 1) = 0;
          }

          v71 = v90;
          if ((_QWORD)v90)
          {
            v72 = v92;
            if (v92)
            {
              if ((_QWORD)v91)
              {
                v73 = 56 * v91;
                do
                {
                  if (*v72)
                  {

                    *v72 = 0;
                  }
                  v72 += 7;
                  v73 -= 56;
                }
                while (v73);
                v71 = v90;
                v72 = v92;
              }
              (*(void (**)(uint64_t, id *))(*(_QWORD *)v71 + 40))(v71, v72);
            }
          }
          objc_autoreleasePoolPop(v52);
          if (!v51)
          {
LABEL_116:
            objc_storeStrong(&v110, obj);
            if (v111[0])
            {
              if ((v113 & 1) != 0)
                v74 = *(const char **)&v114[7];
              else
                v74 = v114;
              re::TextureData::setLabel((re::TextureData *)v107, v74);
            }
            LOBYTE(v107[0]) = v86 | 8;
            LOBYTE(v120[0]) = v86 | 8;
            BYTE8(v120[0]) = 0;
            v121 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>((uint64_t)v120 + 8, (uint64_t)v107 + 8);
            v75 = v110;
            v110 = 0;
            v122 = v75;
            *(_BYTE *)a7 = 1;
            *(_BYTE *)(a7 + 8) = v120[0];
            *(_BYTE *)(a7 + 16) = 0;
            *(_DWORD *)(a7 + 96) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>(a7 + 16, (uint64_t)v120 + 8);
            v76 = v122;
            v122 = 0;
            *(_QWORD *)(a7 + 104) = v76;
            if (v121 != -1)
              ((void (*)(uint64_t *, char *))*(&off_24ED7CF10 + v121))(&v97, (char *)v120 + 8);
          }
          goto LABEL_123;
        }
        if (v38 == ++v40)
        {
          if (++v39 == v89)
            goto LABEL_55;
          goto LABEL_46;
        }
      }
    }
LABEL_56:
    if (!v85)
      goto LABEL_59;
    v43 = *(_QWORD *)(v85 + 24);
    if (v43)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 48))(v43);
LABEL_59:
      if (!*(_DWORD *)(a1 + 88))
      {
        if (objc_msgSend(*v35, sel_isShareable))
          SharedTexture = (_anonymous_namespace_ *)re::mtl::Device::makeSharedTexture(v84, a4, &v106);
        else
          SharedTexture = (_anonymous_namespace_ *)re::mtl::Device::makeTexture(v84, a4, &v106);
        if (!v106)
        {
          v66 = v120[0];
          v67 = v120[1];
          *(_BYTE *)a7 = 0;
          *(_OWORD *)(a7 + 8) = v66;
          *(_OWORD *)(a7 + 24) = v67;
          v51 = 1;
          v52 = (void *)v80;
LABEL_102:
          if (v106)

          goto LABEL_104;
        }
        v82 = v25;
        *(_QWORD *)&v120[0] = 0x5D676084A50D34ACLL;
        *((_QWORD *)&v120[0] + 1) = "copyCompressedTextureQueue";
        re::ImportGraphicsContext::getOrCreateCommandQueue((uint64_t)a4, (uint64_t)v120, (const char *)1, &v105);
        re::mtl::CommandQueue::makeCommandBuffer(&v105, &v104);
        re::mtl::CommandBuffer::makeBlitCommandEncoder(&v104, &v103);
        if (v29)
        {
          v56 = 0;
          v57 = 0;
          while (1)
          {
            if (*(_DWORD *)(a1 + 88) >= 2u)
              goto LABEL_134;
            v58 = (unint64_t)objc_msgSend(*v35, sel_depth);
            v59 = v58 >> v56 <= 1 ? 1 : v58 >> v56;
            if ((_DWORD)v89)
              break;
LABEL_91:
            ++v56;
            v35 = v88;
            if ((id)v56 == v29)
              goto LABEL_92;
          }
          v60 = v29;
          v61 = 0;
LABEL_86:
          v62 = 0;
          v63 = 7 * v57;
          while (1)
          {
            a7 = v57 + v62;
            v64 = v91;
            if ((unint64_t)v91 <= v57 + v62)
              break;
            v120[0] = 0uLL;
            *(_QWORD *)&v120[1] = v62;
            re::mtl::BlitCommandEncoder::copyFromBufferToTexture(&v103, &v92[v63], (uint64_t *)&v92[v63 + 1], (__int128 *)&v92[v63 + 4], (uint64_t)v106, v61, v56, v120);
            ++v62;
            v63 += 7;
            if (v59 == v62)
            {
              ++v61;
              v57 += v62;
              if (v61 == v89)
              {
                a7 = v83;
                v29 = v60;
                goto LABEL_91;
              }
              goto LABEL_86;
            }
          }
          v117 = 0;
          memset(v120, 0, sizeof(v120));
          v65 = (_BYTE *)MEMORY[0x24BDACB70];
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v118 = 136315906;
          *(_QWORD *)&v118[4] = "operator[]";
          *(_WORD *)&v118[12] = 1024;
          *(_DWORD *)&v118[14] = 789;
          *(_WORD *)&v118[18] = 2048;
          *(_QWORD *)&v118[20] = v57 + v62;
          *(_WORD *)&v118[28] = 2048;
          *(_QWORD *)&v118[30] = v64;
          v78 = 38;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        else
        {
LABEL_92:
          objc_msgSend(v103, "endEncoding");
          objc_msgSend(v104, "commit");
          objc_msgSend(v104, "waitUntilCompleted");
          v65 = v118;
          re::internal::getCommandBufferError(&v104, (uint64_t)v118);
          if (v118[0])
          {
            LOBYTE(v120[0]) = 0;
            *((_QWORD *)&v120[0] + 1) = v106;
            v121 = 0;
            v122 = 0;
            re::TextureData::operator=((uint64_t)v107, (uint64_t)v120);
            re::TextureData::~TextureData((id *)v120);
            v51 = 0;
LABEL_100:
            v52 = (void *)v80;
            v25 = v82;
            if (!v118[0] && *(_QWORD *)&v118[8] && (v118[16] & 1) != 0)
              (*(void (**)(void))(**(_QWORD **)&v118[8] + 40))();

            goto LABEL_102;
          }
        }
        if ((v118[16] & 1) != 0)
          v68 = *(_BYTE **)&v118[24];
        else
          v68 = v65 + 17;
        v69 = v120[0];
        v70 = v120[1];
        *(_BYTE *)a7 = 0;
        *(_OWORD *)(a7 + 8) = v69;
        *(_OWORD *)(a7 + 24) = v70;
        v51 = 1;
        goto LABEL_100;
      }
LABEL_134:
      std::__throw_bad_variant_access[abi:nn180100]();
    }
    v77 = (re::TextureData *)std::__throw_bad_function_call[abi:nn180100]();
    re::TextureData::label(v77);
  }
}

char *re::TextureData::label(re::TextureData *this)
{
  int v1;
  re *v3;
  const __CFData *const *v4;

  v1 = *((_DWORD *)this + 22);
  if (v1 == 1)
  {
    if ((*((_BYTE *)this + 64) & 1) != 0)
      return (char *)*((_QWORD *)this + 9);
    else
      return (char *)this + 65;
  }
  else if (v1)
  {
    v3 = (re *)std::__throw_bad_variant_access[abi:nn180100]();
    return (char *)re::parseTextureFromImageOptions(v3, v4);
  }
  else
  {
    return (char *)objc_msgSend(objc_msgSend(*((id *)this + 1), sel_label), sel_UTF8String);
  }
}

void re::parseTextureFromImageOptions(re *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  BOOL v8;
  id v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  id v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  const __CFString *v24;
  void *v25;
  id v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  int v39;
  uint64_t v40;
  __int16 v41;
  char v42;
  __int16 v43;
  char v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int16 v50;
  char v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  _BYTE v56[128];
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)this;
  v55 = 0;
  objc_msgSend(MEMORY[0x24BDD1608], "JSONObjectWithData:options:error:", v4, 0, &v55);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v55;
  v7 = v6;
  if (v6)
    v8 = 1;
  else
    v8 = v5 == 0;
  if (v8)
  {
    objc_msgSend(v6, "localizedDescription");
    v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v10 = objc_msgSend(v9, "UTF8String");
    re::DynamicString::format((re::DynamicString *)"JSON deocing error: %s\n%s", (re::DynamicString *)&v52, v10, re::kTextureFromImageOptionsJSONFormatHelp);
    v11 = v52;
    v12 = v53;
    v13 = v54;
    *(_BYTE *)a2 = 0;
    *(_OWORD *)(a2 + 8) = v11;
    *(_QWORD *)(a2 + 24) = v12;
    *(_QWORD *)(a2 + 32) = v13;

  }
  else
  {
    v36 = a2;
    v37 = v6;
    v49 = 0uLL;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v38 = v5;
    v14 = v5;
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v45, v56, 16);
    if (v15)
    {
      v16 = v15;
      v17 = 0;
      v39 = 0;
      v18 = 0;
      v19 = 6;
      v40 = 0;
      v20 = *(_QWORD *)v46;
      while (1)
      {
        v21 = 0;
        do
        {
          if (*(_QWORD *)v46 != v20)
            objc_enumerationMutation(v14);
          v22 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * v21);
          objc_msgSend(v14, "valueForKey:", v22);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v22, "isEqualToString:", CFSTR("semantic")))
          {
            if ((objc_msgSend(v23, "isEqualToString:", CFSTR("color")) & 1) != 0)
            {
              v19 = 3;
            }
            else if ((objc_msgSend(v23, "isEqualToString:", CFSTR("normal")) & 1) != 0)
            {
              v19 = 5;
            }
            else
            {
              if ((objc_msgSend(v23, "isEqualToString:", CFSTR("raw")) & 1) == 0)
              {
                v34 = objc_msgSend(objc_retainAutorelease(v23), "UTF8String");
                re::DynamicString::format((re::DynamicString *)"Unsupported semantic: %s\n%s", (re::DynamicString *)&v52, v34, re::kTextureFromImageOptionsJSONFormatHelp);
                goto LABEL_46;
              }
              v19 = 1;
            }
            v40 = 0x300000002;
          }
          else if (objc_msgSend(v22, "isEqualToString:", CFSTR("compression")))
          {
            if ((objc_msgSend(v23, "isEqualToString:", CFSTR("none")) & 1) != 0)
            {
              v17 = 1;
            }
            else if ((objc_msgSend(v23, "isEqualToString:", CFSTR("GPULossy")) & 1) != 0)
            {
              v17 = 2;
            }
            else if ((objc_msgSend(v23, "isEqualToString:", CFSTR("ASTC_4x4")) & 1) != 0)
            {
              v17 = 3;
            }
            else
            {
              if ((objc_msgSend(v23, "isEqualToString:", CFSTR("ASTC_6x6")) & 1) != 0)
              {
                v27 = 5;
              }
              else if ((objc_msgSend(v23, "isEqualToString:", CFSTR("ASTC_8x8")) & 1) != 0)
              {
                v27 = 8;
              }
              else
              {
                if ((objc_msgSend(v23, "isEqualToString:", CFSTR("ASTC_10x10")) & 1) == 0)
                {
                  v35 = objc_msgSend(objc_retainAutorelease(v23), "UTF8String");
                  re::DynamicString::format((re::DynamicString *)"Unsupported compression: %s\n%s", (re::DynamicString *)&v52, v35, re::kTextureFromImageOptionsJSONFormatHelp);
                  goto LABEL_46;
                }
                v27 = 12;
              }
              v39 = v27;
              v17 = 4;
            }
          }
          else
          {
            if (!objc_msgSend(v22, "isEqualToString:", CFSTR("colorSpace")))
            {
              v32 = objc_msgSend(objc_retainAutorelease(v22), "UTF8String");
              re::DynamicString::format((re::DynamicString *)"Unsupported key: %s\n%s", (re::DynamicString *)&v52, v32, re::kTextureFromImageOptionsJSONFormatHelp);
LABEL_46:
              v29 = v52;
              v30 = v53;
              v31 = v54;
              *(_BYTE *)v36 = 0;
              *(_OWORD *)(v36 + 8) = v29;
              *(_QWORD *)(v36 + 24) = v30;
              *(_QWORD *)(v36 + 32) = v31;

              goto LABEL_47;
            }
            v25 = (void *)re::CGColorSpaceNameFromOCIOString((re *)v23, v24);
            if (!v25)
            {
              v33 = objc_msgSend(objc_retainAutorelease(v23), "UTF8String");
              re::DynamicString::format((re::DynamicString *)"Unsupported colorSpace: %s\n%s", (re::DynamicString *)&v52, v33, re::kTextureFromImageOptionsJSONFormatHelp);
              goto LABEL_46;
            }
            v26 = v25;

            CFRelease(v26);
            v18 = v26;
          }

          ++v21;
        }
        while (v16 != v21);
        v28 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v45, v56, 16);
        v16 = v28;
        if (!v28)
          goto LABEL_42;
      }
    }
    v17 = 0;
    v39 = 0;
    v18 = 0;
    v40 = 0;
    v19 = 6;
LABEL_42:

    v43 = v52;
    v44 = BYTE2(v52);
    v41 = v50;
    v42 = v51;
    v18 = v18;
    *(_OWORD *)(v36 + 80) = v49;
    *(_BYTE *)v36 = 1;
    *(_OWORD *)(v36 + 8) = (unint64_t)v40;
    *(_QWORD *)(v36 + 24) = 1;
    *(_DWORD *)(v36 + 32) = v17;
    *(_DWORD *)(v36 + 36) = v39;
    *(_QWORD *)(v36 + 40) = 0;
    *(_DWORD *)(v36 + 48) = 0;
    *(_BYTE *)(v36 + 52) = 0;
    *(_WORD *)(v36 + 53) = v43;
    *(_BYTE *)(v36 + 55) = v44;
    *(_DWORD *)(v36 + 56) = 0;
    *(_BYTE *)(v36 + 60) = 0;
    *(_BYTE *)(v36 + 63) = v42;
    *(_WORD *)(v36 + 61) = v41;
    *(_DWORD *)(v36 + 64) = v19;
    *(_QWORD *)(v36 + 72) = v18;
LABEL_47:
    v7 = v37;
    v5 = v38;

  }
}

void *re::introspect_TextureCompressionType(re *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  re *v15;
  uint64_t *v16;
  re *v17;
  uint64_t *v18;
  re *v19;
  uint64_t *v20;
  uint64_t v21;
  re::IntrospectionBasic *v22;
  uint64_t v23[2];
  __int128 v24;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "Unspecified";
      re::introspect_TextureCompressionType(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *((_QWORD *)v15 + 1) = 1;
      *((_QWORD *)v15 + 2) = "None";
      qword_25582A198 = (uint64_t)v15;
      v16 = re::introspectionAllocator(v15);
      v17 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 24, 8);
      *(_DWORD *)v17 = 1;
      *((_QWORD *)v17 + 1) = 2;
      *((_QWORD *)v17 + 2) = "MetalLossy";
      qword_25582A1A0 = (uint64_t)v17;
      v18 = re::introspectionAllocator(v17);
      v19 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 24, 8);
      *(_DWORD *)v19 = 1;
      *((_QWORD *)v19 + 1) = 3;
      *((_QWORD *)v19 + 2) = "ASTC_4x4";
      qword_25582A1A8 = (uint64_t)v19;
      v20 = re::introspectionAllocator(v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 24, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = 4;
      *(_QWORD *)(v21 + 16) = "ASTC";
      qword_25582A1B0 = v21;
    }
  }
  {
    v22 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_TextureCompressionType(BOOL)::info, "TextureCompressionType", 4, 4, 1, 1);
    *(_QWORD *)v22 = &off_24ED7D9E8;
    *((_QWORD *)v22 + 8) = &re::introspect_TextureCompressionType(BOOL)::enumTable;
    *((_DWORD *)v22 + 4) = 9;
  }
  if (v2)
  {
    if ((re::introspect_TextureCompressionType(BOOL)::isInitialized & 1) != 0)
      return &re::introspect_TextureCompressionType(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v24);
    v5 = re::introspect_TextureCompressionType(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v24);
    if ((v5 & 1) != 0)
      return &re::introspect_TextureCompressionType(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::introspect_TextureCompressionType(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::introspect_TextureCompressionType(BOOL)::info;
    }
  }
  re::introspect_TextureCompressionType(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_TextureCompressionType(BOOL)::info, a2);
  v23[0] = 0x661208C0D60D1E8ALL;
  v23[1] = (uint64_t)"TextureCompressionType";
  xmmword_25582A1E0 = v24;
  re::StringID::destroyString((re::StringID *)v23);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::introspect_TextureCompressionType(BOOL)::info;
}

void re::introspect_ASTCBlockSize(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  re *v32;
  uint64_t *v33;
  re *v34;
  uint64_t *v35;
  re *v36;
  uint64_t *v37;
  re *v38;
  uint64_t *v39;
  re *v40;
  uint64_t *v41;
  re *v42;
  uint64_t *v43;
  re *v44;
  uint64_t *v45;
  re *v46;
  uint64_t *v47;
  re *v48;
  uint64_t *v49;
  re *v50;
  uint64_t *v51;
  re *v52;
  uint64_t *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  StringID v60;
  _QWORD v61[2];
  _QWORD v62[61];

  v2 = atomic_load((unsigned __int8 *)&qword_25411C258);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_25411C258);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Invalid";
      qword_25411C3A8 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "4x4";
      qword_25411C3B0 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *((_QWORD *)v32 + 1) = 2;
      *((_QWORD *)v32 + 2) = "5x4";
      qword_25411C3B8 = (uint64_t)v32;
      v33 = re::introspectionAllocator(v32);
      v34 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 24, 8);
      *(_DWORD *)v34 = 1;
      *((_QWORD *)v34 + 1) = 3;
      *((_QWORD *)v34 + 2) = "5x5";
      qword_25411C3C0 = (uint64_t)v34;
      v35 = re::introspectionAllocator(v34);
      v36 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 24, 8);
      *(_DWORD *)v36 = 1;
      *((_QWORD *)v36 + 1) = 4;
      *((_QWORD *)v36 + 2) = "6x5";
      qword_25411C3C8 = (uint64_t)v36;
      v37 = re::introspectionAllocator(v36);
      v38 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 24, 8);
      *(_DWORD *)v38 = 1;
      *((_QWORD *)v38 + 1) = 5;
      *((_QWORD *)v38 + 2) = "6x6";
      qword_25411C3D0 = (uint64_t)v38;
      v39 = re::introspectionAllocator(v38);
      v40 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v39 + 32))(v39, 24, 8);
      *(_DWORD *)v40 = 1;
      *((_QWORD *)v40 + 1) = 6;
      *((_QWORD *)v40 + 2) = "8x5";
      qword_25411C3D8 = (uint64_t)v40;
      v41 = re::introspectionAllocator(v40);
      v42 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v41 + 32))(v41, 24, 8);
      *(_DWORD *)v42 = 1;
      *((_QWORD *)v42 + 1) = 7;
      *((_QWORD *)v42 + 2) = "8x6";
      qword_25411C3E0 = (uint64_t)v42;
      v43 = re::introspectionAllocator(v42);
      v44 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v43 + 32))(v43, 24, 8);
      *(_DWORD *)v44 = 1;
      *((_QWORD *)v44 + 1) = 8;
      *((_QWORD *)v44 + 2) = "8x8";
      qword_25411C3E8 = (uint64_t)v44;
      v45 = re::introspectionAllocator(v44);
      v46 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v45 + 32))(v45, 24, 8);
      *(_DWORD *)v46 = 1;
      *((_QWORD *)v46 + 1) = 9;
      *((_QWORD *)v46 + 2) = "10x5";
      qword_25411C3F0 = (uint64_t)v46;
      v47 = re::introspectionAllocator(v46);
      v48 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v47 + 32))(v47, 24, 8);
      *(_DWORD *)v48 = 1;
      *((_QWORD *)v48 + 1) = 10;
      *((_QWORD *)v48 + 2) = "10x6";
      qword_25411C3F8 = (uint64_t)v48;
      v49 = re::introspectionAllocator(v48);
      v50 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v49 + 32))(v49, 24, 8);
      *(_DWORD *)v50 = 1;
      *((_QWORD *)v50 + 1) = 11;
      *((_QWORD *)v50 + 2) = "10x8";
      qword_25411C400 = (uint64_t)v50;
      v51 = re::introspectionAllocator(v50);
      v52 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v51 + 32))(v51, 24, 8);
      *(_DWORD *)v52 = 1;
      *((_QWORD *)v52 + 1) = 12;
      *((_QWORD *)v52 + 2) = "10x10";
      qword_25411C408 = (uint64_t)v52;
      v53 = re::introspectionAllocator(v52);
      v54 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v53 + 32))(v53, 24, 8);
      *(_DWORD *)v54 = 1;
      *((_QWORD *)v54 + 1) = 13;
      *((_QWORD *)v54 + 2) = "12x10";
      qword_25411C410 = (uint64_t)v54;
      v55 = re::introspectionAllocator(v54);
      v56 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v55 + 32))(v55, 24, 8);
      *(_DWORD *)v56 = 1;
      *(_QWORD *)(v56 + 8) = 14;
      *(_QWORD *)(v56 + 16) = "12x12";
      qword_25411C418 = v56;
      __cxa_guard_release(&qword_25411C258);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25411C260);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25411C260))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25411C318, "ASTCBlockSize", 4, 4, 1, 1);
    qword_25411C318 = (uint64_t)&off_24ED7D9E8;
    qword_25411C358 = (uint64_t)&re::introspect_ASTCBlockSize(BOOL)::enumTable;
    dword_25411C328 = 9;
    __cxa_guard_release(&qword_25411C260);
  }
  if ((_MergedGlobals_410 & 1) == 0)
  {
    _MergedGlobals_410 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25411C318, a2);
    v58 = 0xC9871D6D0725621ALL;
    v59 = "ASTCBlockSize";
    v62[0] = 208862;
    v62[1] = "int";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v62);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v62);
      v6 = (unsigned int *)qword_25411C358;
      v61[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v62, &v58, 1, 1, (uint64_t)v61);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v60.var0 = 2 * v12;
            v60.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v62, v16, &v60);
            re::StringID::destroyString((re::StringID *)&v60);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v60.var0 = 2 * v20;
              v60.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v62, v24, &v60);
              re::StringID::destroyString((re::StringID *)&v60);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v62, v25);
      xmmword_25411C338 = (__int128)v60;
      re::StringID::destroyString((re::StringID *)&v58);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v62);
      re::internal::assertLog((re::internal *)5, v57, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "ASTCBlockSize", v58, v59);
      _os_crash();
      __break(1u);
    }
  }
}

void re::introspect_ASTCMode(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  re *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  StringID v38;
  _QWORD v39[2];
  _QWORD v40[61];

  v2 = atomic_load((unsigned __int8 *)&qword_25411C268);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_25411C268);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Unspecified";
      qword_25411C298 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "LinearLDR";
      qword_25411C2A0 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *((_QWORD *)v32 + 1) = 2;
      *((_QWORD *)v32 + 2) = "SRGB_LDR";
      qword_25411C2A8 = (uint64_t)v32;
      v33 = re::introspectionAllocator(v32);
      v34 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 24, 8);
      *(_DWORD *)v34 = 1;
      *(_QWORD *)(v34 + 8) = 3;
      *(_QWORD *)(v34 + 16) = "LinearHDR";
      qword_25411C2B0 = v34;
      __cxa_guard_release(&qword_25411C268);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25411C270);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25411C270))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25411C360, "ASTCMode", 4, 4, 1, 1);
    qword_25411C360 = (uint64_t)&off_24ED7D9E8;
    qword_25411C3A0 = (uint64_t)&re::introspect_ASTCMode(BOOL)::enumTable;
    dword_25411C370 = 9;
    __cxa_guard_release(&qword_25411C270);
  }
  if ((byte_25411C251 & 1) == 0)
  {
    byte_25411C251 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25411C360, a2);
    v36 = 0x36433FB06C8;
    v37 = "ASTCMode";
    v40[0] = 208862;
    v40[1] = "int";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v40);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v40);
      v6 = (unsigned int *)qword_25411C3A0;
      v39[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v40, &v36, 1, 1, (uint64_t)v39);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v38.var0 = 2 * v12;
            v38.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v40, v16, &v38);
            re::StringID::destroyString((re::StringID *)&v38);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v38.var0 = 2 * v20;
              v38.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v40, v24, &v38);
              re::StringID::destroyString((re::StringID *)&v38);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v40, v25);
      xmmword_25411C380 = (__int128)v38;
      re::StringID::destroyString((re::StringID *)&v36);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v40);
      re::internal::assertLog((re::internal *)5, v35, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "ASTCMode", v36, v37);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t *re::allocInfo_ASTCCompressionOptions(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411C278);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411C278))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411C420, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411C430 = 0;
    qword_25411C440 = 0;
    qword_25411C448 = 0xFFFFFFFFLL;
    qword_25411C420 = (uint64_t)&off_24ED7DAA8;
    qword_25411C450 = (uint64_t)"ASTCCompressionOptions";
    dword_25411C458 = 0;
    xmmword_25411C460 = 0u;
    unk_25411C470 = 0u;
    xmmword_25411C480 = 0u;
    qword_25411C490 = 0;
    __cxa_guard_release(&qword_25411C278);
  }
  return &qword_25411C420;
}

void re::initInfo_ASTCCompressionOptions(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;

  v21[0] = 0x9ADC94622CF054B2;
  v21[1] = "ASTCCompressionOptions";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  v4 = atomic_load((unsigned __int8 *)&qword_25411C280);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411C280);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::introspect_ASTCBlockSize((re *)v6, v7);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "blockSize";
      *(_QWORD *)(v8 + 16) = &qword_25411C318;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411C2B8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      re::introspect_ASTCMode((re *)v9, v10);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "mode";
      *(_QWORD *)(v11 + 16) = &qword_25411C360;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x400000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_25411C2C0 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v14 = re::introspect_BOOL((re *)1, v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "premultipliedAlpha";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x800000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_25411C2C8 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_float((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "quality";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0xC00000004;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_25411C2D0 = v19;
      __cxa_guard_release(&qword_25411C280);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_25411C2B8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ASTCCompressionOptions>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ASTCCompressionOptions>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ASTCCompressionOptions>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ASTCCompressionOptions>;
  re::IntrospectionRegistry::add(this, v3);
  v20 = v22;
}

void re::internal::defaultConstruct<re::ASTCCompressionOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 12) = 0;
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 0;
}

uint64_t re::internal::defaultConstructV2<re::ASTCCompressionOptions>(uint64_t result)
{
  *(_DWORD *)(result + 12) = 0;
  *(_QWORD *)result = 0;
  *(_BYTE *)(result + 8) = 0;
  return result;
}

uint64_t re::introspect_ASTCCompressionOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ASTCCompressionOptions", (uint64_t (*)(re::internal *))re::allocInfo_ASTCCompressionOptions, (re::IntrospectionBase *(*)(void))re::initInfo_ASTCCompressionOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ASTCCompressionOptions>, this);
}

uint64_t *re::allocInfo_TextureCompileOptions(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411C288);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411C288))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411C498, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411C4A8 = 0;
    qword_25411C4B8 = 0;
    qword_25411C4C0 = 0xFFFFFFFFLL;
    qword_25411C498 = (uint64_t)&off_24ED7DAA8;
    qword_25411C4C8 = (uint64_t)"TextureCompileOptions";
    dword_25411C4D0 = 0;
    xmmword_25411C4D8 = 0u;
    unk_25411C4E8 = 0u;
    xmmword_25411C4F8 = 0u;
    qword_25411C508 = 0;
    __cxa_guard_release(&qword_25411C288);
  }
  return &qword_25411C498;
}

void re::initInfo_TextureCompileOptions(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  const re::IntrospectionBase *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  re::IntrospectionBase *v36;
  uint64_t v37;
  __int128 v38;
  _QWORD v39[2];
  __int128 v40;

  v39[0] = 0x8FAC598B1297B58CLL;
  v39[1] = "TextureCompileOptions";
  re::StringID::destroyString((re::StringID *)v39);
  *((_OWORD *)this + 2) = v40;
  v4 = atomic_load((unsigned __int8 *)&qword_25411C290);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411C290);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_BOOL((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "allocateMips";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_25411C2D8 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_BOOL((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "generateMips";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x100000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_25411C2E0 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_BOOL((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "useAsRenderTarget";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x200000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_25411C2E8 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_BOOL((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "shaderRead";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x300000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_25411C2F0 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::introspect_BOOL((re *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "privateStorageMode";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x400000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_25411C2F8 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v28 = re::introspect_int((re *)1, v27);
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = "downsampleFactor";
      *(_QWORD *)(v29 + 16) = v28;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0x800000006;
      *(_DWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_25411C300 = v29;
      v30 = re::introspectionAllocator((re *)v29);
      re::introspect_TextureCompressionType((re *)1, v31);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v30 + 32))(v30, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "compressionType";
      *(_QWORD *)(v32 + 16) = &re::introspect_TextureCompressionType(BOOL)::info;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0xC00000007;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_25411C308 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v34 = v33;
      v35 = (uint64_t *)re::internal::introspectionInfoStorage<re::ASTCCompressionOptions>;
      if (!re::internal::introspectionInfoStorage<re::ASTCCompressionOptions>)
      {
        v35 = re::allocInfo_ASTCCompressionOptions((re *)v33);
        re::internal::introspectionInfoStorage<re::ASTCCompressionOptions> = (uint64_t)v35;
        re::initInfo_ASTCCompressionOptions((re *)v35, v36);
      }
      v37 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 72, 8);
      *(_DWORD *)v37 = 1;
      *(_QWORD *)(v37 + 8) = "astcCompressionOptions";
      *(_QWORD *)(v37 + 16) = v35;
      *(_QWORD *)(v37 + 24) = 0;
      *(_QWORD *)(v37 + 32) = 0x1000000008;
      *(_DWORD *)(v37 + 40) = 0;
      *(_QWORD *)(v37 + 48) = 0;
      *(_QWORD *)(v37 + 56) = 0;
      *(_DWORD *)(v37 + 64) = 0;
      qword_25411C310 = v37;
      __cxa_guard_release(&qword_25411C290);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 8;
  *((_QWORD *)this + 8) = &qword_25411C2D8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::TextureCompileOptions>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::TextureCompileOptions>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::TextureCompileOptions>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::TextureCompileOptions>;
  re::IntrospectionRegistry::add(this, v3);
  v38 = v40;
}

double re::internal::defaultConstruct<re::TextureCompileOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = 16777473;
  *(_DWORD *)a3 = 16777473;
  *(_BYTE *)(a3 + 4) = 1;
  *(_DWORD *)(a3 + 8) = 1;
  *(_DWORD *)(a3 + 28) = 0;
  *(_QWORD *)(a3 + 12) = 0;
  *(_QWORD *)(a3 + 17) = 0;
  return result;
}

double re::internal::defaultConstructV2<re::TextureCompileOptions>(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 16777473;
  *(_DWORD *)a1 = 16777473;
  *(_BYTE *)(a1 + 4) = 1;
  *(_DWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 17) = 0;
  return result;
}

uint64_t re::introspect_TextureCompileOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TextureCompileOptions", (uint64_t (*)(re::internal *))re::allocInfo_TextureCompileOptions, (re::IntrospectionBase *(*)(void))re::initInfo_TextureCompileOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::TextureCompileOptions>, this);
}

_QWORD *re::DynamicArray<CGImagePtr>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<CGImagePtr>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x50uLL))
        {
          v2 = 80 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 80 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 80, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 80 * v9;
        v11 = (uint64_t)v7;
        do
        {
          CGImagePtr::CGImagePtr(v11, (uint64_t *)v8);
          CGImageRelease(*(CGImageRef *)v8);
          *(_QWORD *)v8 = 0;
          CGColorSpaceRelease(*(CGColorSpaceRef *)(v8 + 48));
          *(_QWORD *)(v8 + 48) = 0;
          v11 += 80;
          v8 += 80;
        }
        while (v8 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void std::__function::__func<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_0,std::allocator<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_0,std::allocator<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24ED7CF30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_0,std::allocator<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED7CF30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_0,std::allocator<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(_QWORD **)(a1 + 8);
  if (*v1)
  {
    *v1 = 0;
    v2 = *(_QWORD *)(a1 + 16);
    v3 = *(_QWORD *)(v2 + 136);
    if (v3)
    {
      (*(void (**)(void))(v3 + 16))();
      v4 = *(void **)(v2 + 136);
      *(_QWORD *)(v2 + 136) = 0;

    }
  }
}

uint64_t std::__function::__func<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_0,std::allocator<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_0,std::allocator<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__func<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_1,std::allocator<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_1,std::allocator<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24ED7CFB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_1,std::allocator<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED7CFB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_1,std::allocator<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = **(const void ***)(a1 + 8);
  if (v2)
  {
    CFRelease(v2);
    **(_QWORD **)(a1 + 8) = 0;
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(_QWORD *)(v3 + 136);
    if (v4)
    {
      (*(void (**)(void))(v4 + 16))();
      v5 = *(void **)(v3 + 136);
      *(_QWORD *)(v3 + 136) = 0;

    }
  }
}

uint64_t std::__function::__func<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_1,std::allocator<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_1,std::allocator<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_1>,void ()(void)>::target_type()
{
}

void std::__function::__func<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_2,std::allocator<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_2>,void ()(void)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_2,std::allocator<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_2>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24ED7D030;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_2,std::allocator<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_2>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED7D030;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_2,std::allocator<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_2>,void ()(void)>::operator()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(_QWORD **)(a1 + 8);
  if (*v1)
  {
    *v1 = 0;
    v2 = *(_QWORD *)(a1 + 16);
    v3 = *(_QWORD *)(v2 + 136);
    if (v3)
    {
      (*(void (**)(void))(v3 + 16))();
      v4 = *(void **)(v2 + 136);
      *(_QWORD *)(v2 + 136) = 0;

    }
  }
}

uint64_t std::__function::__func<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_2,std::allocator<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_2>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_2,std::allocator<re::loadTextureDataWithProvider(re::TextureProvider &,re::Allocator *)::$_2>,void ()(void)>::target_type()
{
}

void std::__function::__func<re::createCompressedTextureData(re::TextureData const&,re::TextureSemantic,re::ASTCCompressionOptions const&,re::ImportGraphicsContext const&,NS::SharedPtr<MTL::TextureDescriptor> const*,std::function<void ()(void)> const*)::$_0,std::allocator<re::createCompressedTextureData(re::TextureData const&,re::TextureSemantic,re::ASTCCompressionOptions const&,re::ImportGraphicsContext const&,NS::SharedPtr<MTL::TextureDescriptor> const*,std::function<void ()(void)> const*)::$_0>,re::Result<re::Unit,re::DynamicString> ()(re::ASTCResultBuffer const&)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::createCompressedTextureData(re::TextureData const&,re::TextureSemantic,re::ASTCCompressionOptions const&,re::ImportGraphicsContext const&,NS::SharedPtr<MTL::TextureDescriptor> const*,std::function<void ()(void)> const*)::$_0,std::allocator<re::createCompressedTextureData(re::TextureData const&,re::TextureSemantic,re::ASTCCompressionOptions const&,re::ImportGraphicsContext const&,NS::SharedPtr<MTL::TextureDescriptor> const*,std::function<void ()(void)> const*)::$_0>,re::Result<re::Unit,re::DynamicString> ()(re::ASTCResultBuffer const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED7D0B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::createCompressedTextureData(re::TextureData const&,re::TextureSemantic,re::ASTCCompressionOptions const&,re::ImportGraphicsContext const&,NS::SharedPtr<MTL::TextureDescriptor> const*,std::function<void ()(void)> const*)::$_0,std::allocator<re::createCompressedTextureData(re::TextureData const&,re::TextureSemantic,re::ASTCCompressionOptions const&,re::ImportGraphicsContext const&,NS::SharedPtr<MTL::TextureDescriptor> const*,std::function<void ()(void)> const*)::$_0>,re::Result<re::Unit,re::DynamicString> ()(re::ASTCResultBuffer const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED7D0B0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<re::createCompressedTextureData(re::TextureData const&,re::TextureSemantic,re::ASTCCompressionOptions const&,re::ImportGraphicsContext const&,NS::SharedPtr<MTL::TextureDescriptor> const*,std::function<void ()(void)> const*)::$_0,std::allocator<re::createCompressedTextureData(re::TextureData const&,re::TextureSemantic,re::ASTCCompressionOptions const&,re::ImportGraphicsContext const&,NS::SharedPtr<MTL::TextureDescriptor> const*,std::function<void ()(void)> const*)::$_0>,re::Result<re::Unit,re::DynamicString> ()(re::ASTCResultBuffer const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _anonymous_namespace_ *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  id v19[8];

  memset(v19, 0, 56);
  (*(void (**)(id *__return_ptr, uint64_t, id *, id *))(*(_QWORD *)a2 + 24))(&v18, a2, &v19[1], &v19[4]);
  NS::SharedPtr<MTL::Texture>::operator=(v19, &v18);
  v5 = (_anonymous_namespace_ *)v18;
  if (v18)

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(_QWORD *)(v6 + 16);
  v9 = v8 + 1;
  if (v8 >= v7 && v7 < v9)
  {
    if (*(_QWORD *)v6)
    {
      v14 = 2 * v7;
      v15 = v7 == 0;
      v16 = 8;
      if (!v15)
        v16 = v14;
      if (v16 <= v9)
        v17 = v9;
      else
        v17 = v16;
      re::DynamicArray<re::TextureBuilderKTX::CopyFromBufferToTextureInfo>::setCapacity((_QWORD *)v6, v17);
    }
    else
    {
      re::DynamicArray<re::TextureBuilderKTX::CopyFromBufferToTextureInfo>::setCapacity((_QWORD *)v6, v9);
      ++*(_DWORD *)(v6 + 24);
    }
  }
  v11 = *(_QWORD *)(v6 + 32) + 56 * *(_QWORD *)(v6 + 16);
  *(_QWORD *)v11 = v19[0];
  v13 = *(_OWORD *)&v19[3];
  v12 = *(_OWORD *)&v19[5];
  *(_OWORD *)(v11 + 8) = *(_OWORD *)&v19[1];
  *(_OWORD *)(v11 + 40) = v12;
  *(_OWORD *)(v11 + 24) = v13;
  ++*(_QWORD *)(v6 + 16);
  ++*(_DWORD *)(v6 + 24);
  if (v19[0])

  *a3 = 1;
}

uint64_t std::__function::__func<re::createCompressedTextureData(re::TextureData const&,re::TextureSemantic,re::ASTCCompressionOptions const&,re::ImportGraphicsContext const&,NS::SharedPtr<MTL::TextureDescriptor> const*,std::function<void ()(void)> const*)::$_0,std::allocator<re::createCompressedTextureData(re::TextureData const&,re::TextureSemantic,re::ASTCCompressionOptions const&,re::ImportGraphicsContext const&,NS::SharedPtr<MTL::TextureDescriptor> const*,std::function<void ()(void)> const*)::$_0>,re::Result<re::Unit,re::DynamicString> ()(re::ASTCResultBuffer const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::createCompressedTextureData(re::TextureData const&,re::TextureSemantic,re::ASTCCompressionOptions const&,re::ImportGraphicsContext const&,NS::SharedPtr<MTL::TextureDescriptor> const*,std::function<void ()(void)> const*)::$_0,std::allocator<re::createCompressedTextureData(re::TextureData const&,re::TextureSemantic,re::ASTCCompressionOptions const&,re::ImportGraphicsContext const&,NS::SharedPtr<MTL::TextureDescriptor> const*,std::function<void ()(void)> const*)::$_0>,re::Result<re::Unit,re::DynamicString> ()(re::ASTCResultBuffer const&)>::target_type()
{
}

re::CPUTexture *re::Result<re::CPUTexture,re::DynamicString>::~Result(re::CPUTexture *this)
{
  _OWORD *v2;

  v2 = (_OWORD *)((char *)this + 8);
  if (*(_BYTE *)this)
  {
    re::CPUTexture::~CPUTexture((re::CPUTexture *)((char *)this + 8));
  }
  else if (*(_QWORD *)v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v2 + 40))(*(_QWORD *)v2, *((_QWORD *)this + 3));
    *v2 = 0u;
    v2[1] = 0u;
  }
  return this;
}

BOOL re::meshHasSkinningData(re *this, const re::GeomMesh *a2)
{
  re::internal::GeomAttributeManager *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v2 = (re *)((char *)this + 64);
  v3 = re::internal::GeomAttributeManager::attributeByName((re *)((char *)this + 64), "skeletonPath");
  v4 = re::internal::GeomAttributeManager::attributeByName(v2, "skinnedAnimationGeometryBindTransform");
  v5 = re::internal::GeomAttributeManager::attributeByName(v2, "skinnedAnimationWeights");
  v6 = re::internal::GeomAttributeManager::attributeByName(v2, "skinnedAnimationJointIndices");
  v7 = re::internal::GeomAttributeManager::attributeByName(v2, "skinnedAnimationInfluenceEndIndices");
  if (v3)
    v8 = v4 == 0;
  else
    v8 = 1;
  return !v8 && v5 != 0 && v6 != 0 && v7 != 0;
}

uint64_t re::repairTangentsAndBitangentsAllVertexRateInternal(re *this, re::GeomMesh *a2, re::GeomAttribute *a3, re::GeomAttribute *a4, re::GeomAttribute *a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x2_t v23;
  int8x8_t v24;
  float32x4_t v25;
  float v26;
  float v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x4_t v30;
  _QWORD *v31;
  float32x4_t v32;
  uint64_t v33;
  float32x4_t v35;
  float v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int32x4_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x4_t v44;
  int8x16_t v45;

  if ((*(unsigned int (**)(re::GeomMesh *))(*(_QWORD *)a2 + 16))(a2))
  {
    v9 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)a2, 0);
    v10 = (*(unsigned int (**)(re::GeomMesh *))(*(_QWORD *)a2 + 16))(a2);
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)a3 + 16))(a3))
  {
    v11 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)a3, 0);
    v12 = (*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)a3 + 16))(a3);
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  result = (*(uint64_t (**)(re::GeomAttribute *))(*(_QWORD *)a4 + 16))(a4);
  if ((_DWORD)result)
  {
    v14 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)a4, 0);
    result = (*(uint64_t (**)(re::GeomAttribute *))(*(_QWORD *)a4 + 16))(a4);
    v15 = result;
  }
  else
  {
    v15 = 0;
    v14 = 0;
  }
  v16 = *((unsigned int *)this + 4);
  if ((_DWORD)v16)
  {
    v17 = 0;
    v18 = 0;
    v19 = 16 * v16;
    do
    {
      if (16 * v12 == v17)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_34:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_35:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (16 * v15 == v17)
        goto LABEL_34;
      v20 = vmulq_f32(*(float32x4_t *)(v11 + v17), *(float32x4_t *)(v11 + v17));
      if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0]) < 1.0e-10|| (v21 = vmulq_f32(*(float32x4_t *)(v14 + v17), *(float32x4_t *)(v14 + v17)), fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0]) < 1.0e-10))
      {
        if (v10 <= v18)
          goto LABEL_35;
        v22 = *(float32x4_t *)(v9 + v17);
        v23.i32[1] = v22.i32[1];
        v23.i32[0] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u32[0];
        v24 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v23), (int8x8_t)vcgez_f32(v23)));
        if ((v24.i8[4] & 1) == 0 && (v24.i8[0] & 1) == 0)
        {
          v25 = vmulq_f32(v22, v22);
          LODWORD(v26) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).u32[0];
          if (fabsf(v26) >= 1.0e-10)
          {
            v27 = v26;
            v28 = vrsqrte_f32((float32x2_t)LODWORD(v26));
            v29 = vmul_f32(v28, vrsqrts_f32((float32x2_t)LODWORD(v27), vmul_f32(v28, v28)));
            v30 = vmulq_n_f32(v22, vmul_f32(v29, vrsqrts_f32((float32x2_t)LODWORD(v27), vmul_f32(v29, v29))).f32[0]);
            v31 = (_QWORD *)(v11 + v17);
            *v31 = 0;
            v31[1] = 0;
            v32 = vabsq_f32(v30);
            if (v32.f32[1] <= v32.f32[2])
              v33 = 1;
            else
              v33 = 2;
            if (v32.f32[0] <= v32.f32[2] && v32.f32[0] <= v32.f32[1])
              v33 = 0;
            *((_DWORD *)v31 + v33) = 1065353216;
            v35 = vmulq_f32(v30, v30);
            v36 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1))).f32[0];
            v37 = *(float32x4_t *)v31;
            v38 = *(float32x4_t *)v31;
            if (v36 > 0.0)
            {
              v39 = vmulq_f32(v37, v30);
              v38 = vmulq_n_f32(v30, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).f32[0]/ v36);
            }
            v40 = vsubq_f32(v37, v38);
            v41 = (int32x4_t)vmulq_f32(v40, v40);
            v41.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v41, 2), vadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.i8, 1))).u32[0];
            v42 = vrsqrte_f32((float32x2_t)v41.u32[0]);
            v43 = vmul_f32(v42, vrsqrts_f32((float32x2_t)v41.u32[0], vmul_f32(v42, v42)));
            v44 = vmulq_n_f32(v40, vmul_f32(v43, vrsqrts_f32((float32x2_t)v41.u32[0], vmul_f32(v43, v43))).f32[0]);
            *(float32x4_t *)(v11 + v17) = v44;
            v45 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v44), (int8x16_t)v44, 0xCuLL), vnegq_f32(v30)), v44, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), (int8x16_t)v30, 0xCuLL));
            *(int8x16_t *)(v14 + v17) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), v45, 0xCuLL);
          }
        }
      }
      ++v18;
      v17 += 16;
    }
    while (v19 != v17);
  }
  return result;
}

uint64_t re::repairTangentsAndBitangentsSlowInternal(re *this, re::GeomMesh *a2, re::GeomAttribute *a3, re::GeomAttribute *a4, re::GeomAttribute *a5)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t result;
  const re::GeomAttribute *v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned int v20;
  float32x4_t *v22;
  float32x4_t *v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x2_t v27;
  int8x8_t v28;
  float32x4_t v29;
  float v30;
  float v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  float32x4_t v38;
  float v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int32x4_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x4_t v47;
  int8x16_t v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53[2];
  uint64_t v54[2];
  uint64_t v55[2];
  uint64_t v56;
  int v57;
  const char *v58;
  __int16 v59;
  int v60;
  __int16 v61;
  unint64_t v62;
  __int16 v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(re::GeomMesh *))(*(_QWORD *)a2 + 16))(a2))
  {
    v51 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)a2, 0);
    v52 = (*(uint64_t (**)(re::GeomMesh *))(*(_QWORD *)a2 + 16))(a2);
  }
  else
  {
    v52 = 0;
    v51 = 0;
  }
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)a3 + 16))(a3))
  {
    v9 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)a3, 0);
    v10 = (*(uint64_t (**)(re::GeomAttribute *))(*(_QWORD *)a3 + 16))(a3);
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  result = (*(uint64_t (**)(re::GeomAttribute *))(*(_QWORD *)a4 + 16))(a4);
  if ((_DWORD)result)
  {
    v13 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)a4, 0);
    result = (*(uint64_t (**)(re::GeomAttribute *))(*(_QWORD *)a4 + 16))(a4);
    v14 = result;
  }
  else
  {
    v14 = 0;
    v13 = 0;
  }
  v55[0] = 0;
  if (*((_BYTE *)a2 + 16) == 3)
  {
    result = re::internal::accessFaceVaryingAttributeSubmesh(a2, v12);
    v55[1] = result;
  }
  else
  {
    v55[0] = (uint64_t)this;
  }
  v54[0] = 0;
  if (*((_BYTE *)a3 + 16) == 3)
  {
    result = re::internal::accessFaceVaryingAttributeSubmesh(a3, v12);
    v54[1] = result;
  }
  else
  {
    v54[0] = (uint64_t)this;
  }
  v53[0] = 0;
  if (*((_BYTE *)a4 + 16) == 3)
  {
    result = re::internal::accessFaceVaryingAttributeSubmesh(a4, v12);
    v53[1] = result;
  }
  else
  {
    v53[0] = (uint64_t)this;
  }
  v50 = *((unsigned int *)this + 10);
  if (*((_DWORD *)this + 10))
  {
    v15 = 0;
    v49 = this;
    do
    {
      v16 = *((_QWORD *)this + 5);
      if (v16 <= v15)
        goto LABEL_54;
      v17 = 0;
      if (*(_DWORD *)(*((_QWORD *)this + 7) + 16 * v15 + 12) == -1)
        v18 = 3;
      else
        v18 = 4;
      do
      {
        v19 = v17;
        v20 = re::repairTangentsAndBitangentsSlowInternal(re::GeomMesh &,re::GeomAttribute *,re::GeomAttribute *,re::GeomAttribute *)::FaceVertexAdaptor::vertexIndexOnFace(v54, v15, v17);
        result = re::repairTangentsAndBitangentsSlowInternal(re::GeomMesh &,re::GeomAttribute *,re::GeomAttribute *,re::GeomAttribute *)::FaceVertexAdaptor::vertexIndexOnFace(v53, v15, v17);
        if (v20 != -1 && (_DWORD)result != -1)
        {
          if (v10 <= v20)
          {
            v56 = 0;
            v68 = 0u;
            v69 = 0u;
            v67 = 0u;
            v65 = 0u;
            v66 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v57 = 136315906;
            v58 = "operator[]";
            v59 = 1024;
            v60 = 609;
            v61 = 2048;
            v62 = v20;
            v63 = 2048;
            v64 = v10;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_52:
            v56 = 0;
            v68 = 0u;
            v69 = 0u;
            v67 = 0u;
            v65 = 0u;
            v66 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v57 = 136315906;
            v58 = "operator[]";
            v59 = 1024;
            v60 = 609;
            v61 = 2048;
            v62 = v19;
            v63 = 2048;
            v64 = v14;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_53:
            v56 = 0;
            v68 = 0u;
            v69 = 0u;
            v67 = 0u;
            v65 = 0u;
            v66 = 0u;
            v16 = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v57 = 136315906;
            v58 = "operator[]";
            v59 = 1024;
            v60 = 601;
            v61 = 2048;
            v62 = v20;
            v63 = 2048;
            v64 = v52;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_54:
            v56 = 0;
            v68 = 0u;
            v69 = 0u;
            v67 = 0u;
            v65 = 0u;
            v66 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v57 = 136315906;
            v58 = "operator[]";
            v59 = 1024;
            v60 = 797;
            v61 = 2048;
            v62 = v15;
            v63 = 2048;
            v64 = v16;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          v19 = result;
          if (v14 <= result)
            goto LABEL_52;
          v22 = (float32x4_t *)(v9 + 16 * v20);
          v23 = (float32x4_t *)(v13 + 16 * result);
          v24 = vmulq_f32(*v22, *v22);
          if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0]) < 1.0e-10|| (v25 = vmulq_f32(*v23, *v23), fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]) < 1.0e-10))
          {
            result = re::repairTangentsAndBitangentsSlowInternal(re::GeomMesh &,re::GeomAttribute *,re::GeomAttribute *,re::GeomAttribute *)::FaceVertexAdaptor::vertexIndexOnFace(v55, v15, v17);
            if ((_DWORD)result != -1)
            {
              v20 = result;
              if (v52 <= result)
                goto LABEL_53;
              v26 = *(float32x4_t *)(v51 + 16 * result);
              v27.i32[1] = v26.i32[1];
              v27.i32[0] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u32[0];
              v28 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v27), (int8x8_t)vcgez_f32(v27)));
              if ((v28.i8[4] & 1) == 0 && (v28.i8[0] & 1) == 0)
              {
                v29 = vmulq_f32(v26, v26);
                LODWORD(v30) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).u32[0];
                if (fabsf(v30) >= 1.0e-10)
                {
                  v31 = v30;
                  v32 = vrsqrte_f32((float32x2_t)LODWORD(v30));
                  v33 = vmul_f32(v32, vrsqrts_f32((float32x2_t)LODWORD(v31), vmul_f32(v32, v32)));
                  v34 = vmulq_n_f32(v26, vmul_f32(v33, vrsqrts_f32((float32x2_t)LODWORD(v31), vmul_f32(v33, v33))).f32[0]);
                  v22->i64[0] = 0;
                  v22->i64[1] = 0;
                  v35 = vabsq_f32(v34);
                  v36 = 2;
                  if (v35.f32[1] <= v35.f32[2])
                    v36 = 1;
                  if (v35.f32[0] <= v35.f32[2] && v35.f32[0] <= v35.f32[1])
                    v36 = 0;
                  v22->i32[v36] = 1065353216;
                  v38 = vmulq_f32(v34, v34);
                  v39 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).f32[0];
                  v40 = *v22;
                  v41 = *v22;
                  if (v39 > 0.0)
                  {
                    v42 = vmulq_f32(v40, v34);
                    v41 = vmulq_n_f32(v34, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).f32[0]/ v39);
                  }
                  v43 = vsubq_f32(v40, v41);
                  v44 = (int32x4_t)vmulq_f32(v43, v43);
                  v44.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v44, 2), vadd_f32(*(float32x2_t *)v44.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v44.i8, 1))).u32[0];
                  v45 = vrsqrte_f32((float32x2_t)v44.u32[0]);
                  v46 = vmul_f32(v45, vrsqrts_f32((float32x2_t)v44.u32[0], vmul_f32(v45, v45)));
                  v47 = vmulq_n_f32(v43, vmul_f32(v46, vrsqrts_f32((float32x2_t)v44.u32[0], vmul_f32(v46, v46))).f32[0]);
                  *v22 = v47;
                  v48 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v47, (int32x4_t)v47), (int8x16_t)v47, 0xCuLL), vnegq_f32(v34)), v47, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL));
                  *(int8x16_t *)v23 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v48, (int32x4_t)v48), v48, 0xCuLL);
                }
              }
            }
          }
        }
        ++v17;
      }
      while (v17 < v18);
      ++v15;
      this = v49;
    }
    while (v15 != v50);
  }
  return result;
}

uint64_t re::repairTangentsAndBitangentsSlowInternal(re::GeomMesh &,re::GeomAttribute *,re::GeomAttribute *,re::GeomAttribute *)::FaceVertexAdaptor::vertexIndexOnFace(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  if (*a1)
  {
    if (*(_QWORD *)(v4 + 40) > (unint64_t)a2)
    {
      v12 = *(_OWORD *)(*(_QWORD *)(v4 + 56) + 16 * a2);
      v5 = &v12;
      return *((unsigned int *)v5 + a3);
    }
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v12 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_21;
  }
  v8 = a1[1];
  LODWORD(v12) = a2;
  v9 = *(unsigned __int8 *)(v8 + 140);
  if (v9 == 2)
  {
    v10 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)(v8 + 144), (unsigned int *)&v12);
    if (v10 == -1)
      return 0xFFFFFFFFLL;
    v11 = (_DWORD *)(*(_QWORD *)(v8 + 152) + 8 * v10 + 4);
    goto LABEL_14;
  }
  if (v9 == 1)
  {
    if (*(_QWORD *)(v8 + 160) <= (unint64_t)a2)
      return 0xFFFFFFFFLL;
    v11 = (_DWORD *)(*(_QWORD *)(v8 + 176) + 4 * a2);
LABEL_14:
    LODWORD(a2) = *v11;
    if (*v11 == -1)
      return 0xFFFFFFFFLL;
    v8 = a1[1];
LABEL_16:
    if (*(_QWORD *)(v8 + 24) > (unint64_t)a2)
    {
      v5 = (__int128 *)(*(_QWORD *)(v8 + 40) + 16 * a2);
      return *((unsigned int *)v5 + a3);
    }
LABEL_21:
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v12 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_BYTE *)(v8 + 140))
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    result = _os_crash();
    __break(1u);
    return result;
  }
  if (*(_DWORD *)(v8 + 144) > a2)
    goto LABEL_16;
  return 0xFFFFFFFFLL;
}

uint64_t re::remapSubdivisionSurfaceAttributes(re *this, re::GeomMesh *a2, uint64_t a3, const re::GeomIndexMap *a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v10;
  uint64_t result;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  uint64_t v35;
  uint64_t v36;
  const re::GeomMesh *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  re::internal::GeomAttributeManager *v51;
  re *v52;
  _QWORD v53[2];
  const re::GeomMesh *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;

  v10 = (unsigned int *)a2;
  v71 = *MEMORY[0x24BDAC8D0];
  result = re::meshHasSubdivCreases(this, a2);
  if ((_DWORD)result)
  {
    v56 = 0;
    v53[1] = 0;
    v54 = 0;
    v53[0] = 0;
    v55 = 0;
    re::DynamicArray<unsigned int>::resize(v53, v10[4], &re::kInvalidMeshIndex);
    v52 = this;
    v13 = *((_DWORD *)this + 4);
    if (v13)
    {
      v14 = 0;
      while (1)
      {
        v15 = re::GeomIndexMap::operator[](a3, v14);
        v16 = v15;
        v4 = (unint64_t)v54;
        if ((unint64_t)v54 <= v15)
          break;
        *(_DWORD *)(v56 + 4 * v15) = v14;
        v14 = (v14 + 1);
        if (v13 == (_DWORD)v14)
          goto LABEL_6;
      }
      v57 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v58 = 136315906;
      v59 = "operator[]";
      v60 = 1024;
      v61 = 789;
      v62 = 2048;
      v63 = v16;
      v64 = 2048;
      v65 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_85;
    }
LABEL_6:
    v5 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(v10 + 16), "osdEdgeCreaseWeights");
    v51 = (re::internal::GeomAttributeManager *)(v10 + 16);
    v17 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(v10 + 16), "osdEdgeCreaseIndices");
    if (v17)
    {
      v10 = (unsigned int *)v17;
      v18 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 16))(v5);
      if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)v10 + 16))(v10))
      {
        v14 = re::internal::GeomTypedAttribute<int>::operator[]((uint64_t)v10, 0);
        LODWORD(v10) = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v10 + 16))(v10);
      }
      else
      {
        LODWORD(v10) = 0;
        v14 = 0;
      }
      v4 = 0;
      if (v18)
      {
        v16 = 0;
        a3 = (uint64_t)v54;
        v19 = v18;
        while (v10 > v16)
        {
          v6 = *(unsigned int *)(v14 + 4 * v16);
          if ((unint64_t)v54 <= v6)
            goto LABEL_86;
          v16 = (v16 + 1);
          if (v10 <= v16)
            goto LABEL_87;
          v7 = *(unsigned int *)(v14 + 4 * v16);
          if ((unint64_t)v54 <= v7)
            goto LABEL_88;
          if (*(_DWORD *)(v56 + 4 * v6) == -1 || *(_DWORD *)(v56 + 4 * v7) == -1)
            v4 = v4;
          else
            v4 = (v4 + 1);
          v16 = (v16 + 1);
          if (!--v19)
            goto LABEL_23;
        }
LABEL_85:
        v57 = 0;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v66 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v58 = 136315906;
        v59 = "operator[]";
        v60 = 1024;
        v61 = 601;
        v62 = 2048;
        v63 = v16;
        v64 = 2048;
        v65 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_86:
        v57 = 0;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v66 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v58 = 136315906;
        v59 = "operator[]";
        v60 = 1024;
        v61 = 789;
        v62 = 2048;
        v63 = v6;
        v64 = 2048;
        v65 = a3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_87:
        v57 = 0;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v66 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v58 = 136315906;
        v59 = "operator[]";
        v60 = 1024;
        v61 = 601;
        v62 = 2048;
        v63 = v16;
        v64 = 2048;
        v65 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_88:
        v57 = 0;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v66 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v58 = 136315906;
        v59 = "operator[]";
        v60 = 1024;
        v61 = 789;
        v62 = 2048;
        v63 = v7;
        v64 = 2048;
        v65 = a3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_89;
      }
LABEL_23:
      v21 = re::internal::GeomAttributeManager::attributeByName((re *)((char *)v52 + 64), "osdEdgeCreaseWeights");
      v22 = re::internal::GeomAttributeManager::attributeByName((re *)((char *)v52 + 64), "osdEdgeCreaseIndices");
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v21 + 24))(v21, v4);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 24))(v22, (2 * v4));
      if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v5 + 16))(v5))
      {
        v23 = re::internal::GeomTypedAttribute<int>::operator[](v5, 0);
        v5 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 16))(v5);
      }
      else
      {
        v5 = 0;
        v23 = 0;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21))
      {
        v4 = re::internal::GeomTypedAttribute<float>::operator[](v21, 0);
        v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
      }
      else
      {
        v24 = 0;
        v4 = 0;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22))
      {
        v8 = re::internal::GeomTypedAttribute<float>::operator[](v22, 0);
        v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
      }
      else
      {
        v6 = 0;
        v8 = 0;
      }
      v25 = v23;
      v26 = v4;
      if (v18)
      {
        v27 = v24;
        a3 = 0;
        v28 = v18;
        v29 = 0;
        v4 = 0;
        v16 = (unint64_t)v54;
        v30 = v56;
        v31 = v5;
        while (v10 > a3)
        {
          v7 = *(unsigned int *)(v14 + 4 * a3);
          if (v16 <= v7)
            goto LABEL_92;
          v5 = (a3 + 1);
          if (v10 <= v5)
            goto LABEL_93;
          v5 = *(unsigned int *)(v14 + 4 * v5);
          if (v16 <= v5)
            goto LABEL_94;
          v32 = *(_DWORD *)(v30 + 4 * v7);
          v33 = *(_DWORD *)(v30 + 4 * v5);
          if (v32 != -1 && v33 != -1)
          {
            if (v29 >= v31)
              goto LABEL_100;
            if (v27 <= v4)
              goto LABEL_101;
            *(_DWORD *)(v26 + 4 * v4) = *(_DWORD *)(v25 + 4 * v29);
            v7 = (2 * v4);
            if (v6 <= 2 * (int)v4)
              goto LABEL_102;
            *(_DWORD *)(v8 + 4 * v7) = v32;
            v7 = v7 | 1;
            if (v6 <= v7)
              goto LABEL_103;
            *(_DWORD *)(v8 + 4 * v7) = v33;
            v4 = (v4 + 1);
          }
          ++v29;
          a3 = (a3 + 2);
          if (v28 == v29)
            goto LABEL_48;
        }
        goto LABEL_91;
      }
    }
LABEL_48:
    v14 = re::internal::GeomAttributeManager::attributeByName(v51, "osdVertexCreaseWeights");
    v35 = re::internal::GeomAttributeManager::attributeByName(v51, "osdVertexCreaseIndices");
    if (v35)
    {
      v36 = v35;
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36))
      {
        v10 = (unsigned int *)re::internal::GeomTypedAttribute<int>::operator[](v36, 0);
        v6 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
        if ((_DWORD)v7)
          goto LABEL_51;
      }
      else
      {
        v6 = 0;
        v10 = 0;
        if ((_DWORD)v7)
        {
LABEL_51:
          v37 = 0;
          v16 = 0;
          a3 = (uint64_t)v54;
          while ((const re::GeomMesh *)v6 != v37)
          {
            v4 = v10[(_QWORD)v37];
            if ((unint64_t)v54 <= v4)
              goto LABEL_90;
            if (*(_DWORD *)(v56 + 4 * v4) == -1)
              v16 = v16;
            else
              v16 = (v16 + 1);
            v37 = (const re::GeomMesh *)((char *)v37 + 1);
            if ((const re::GeomMesh *)v7 == v37)
              goto LABEL_61;
          }
LABEL_89:
          v57 = 0;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v66 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v58 = 136315906;
          v59 = "operator[]";
          v60 = 1024;
          v61 = 601;
          v62 = 2048;
          v63 = v6;
          v64 = 2048;
          v65 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_90:
          v57 = 0;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v66 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v58 = 136315906;
          v59 = "operator[]";
          v60 = 1024;
          v61 = 789;
          v62 = 2048;
          v63 = v4;
          v64 = 2048;
          v65 = a3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_91:
          v57 = 0;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v66 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v58 = 136315906;
          v59 = "operator[]";
          v60 = 1024;
          v61 = 601;
          v62 = 2048;
          v63 = a3;
          v64 = 2048;
          v65 = v10;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_92:
          v57 = 0;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v66 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v58 = 136315906;
          v59 = "operator[]";
          v60 = 1024;
          v61 = 789;
          v62 = 2048;
          v63 = v7;
          v64 = 2048;
          v65 = v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_93:
          v57 = 0;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v66 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v58 = 136315906;
          v59 = "operator[]";
          v60 = 1024;
          v61 = 601;
          v62 = 2048;
          v63 = v5;
          v64 = 2048;
          v65 = v10;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_94:
          v57 = 0;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v66 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v58 = 136315906;
          v59 = "operator[]";
          v60 = 1024;
          v61 = 789;
          v62 = 2048;
          v63 = v5;
          v64 = 2048;
          v65 = v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_95:
          v57 = 0;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v66 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v58 = 136315906;
          v59 = "operator[]";
          v60 = 1024;
          v61 = 601;
          v62 = 2048;
          v63 = v6;
          v64 = 2048;
          v65 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_96:
          v57 = 0;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v66 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v58 = 136315906;
          v59 = "operator[]";
          v60 = 1024;
          v61 = 789;
          v62 = 2048;
          v63 = v7;
          v64 = 2048;
          v65 = v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_97:
          v57 = 0;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v66 = 0u;
          v48 = v43;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v58 = 136315906;
          v59 = "operator[]";
          v60 = 1024;
          v61 = 601;
          v62 = 2048;
          v63 = a3;
          v64 = 2048;
          v65 = v48;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_98:
          v57 = 0;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v66 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v58 = 136315906;
          v59 = "operator[]";
          v60 = 1024;
          v61 = 609;
          v62 = 2048;
          v63 = v7;
          v64 = 2048;
          v65 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_99:
          v57 = 0;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v66 = 0u;
          v29 = MEMORY[0x24BDACB70];
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v58 = 136315906;
          v59 = "operator[]";
          v60 = 1024;
          v61 = 609;
          v62 = 2048;
          v63 = v7;
          v64 = 2048;
          v65 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_100:
          v57 = 0;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v66 = 0u;
          v49 = v31;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v58 = 136315906;
          v59 = "operator[]";
          v60 = 1024;
          v61 = 601;
          v62 = 2048;
          v63 = v29;
          v64 = 2048;
          v65 = v49;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_101:
          v57 = 0;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v66 = 0u;
          v50 = v27;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v58 = 136315906;
          v59 = "operator[]";
          v60 = 1024;
          v61 = 609;
          v62 = 2048;
          v63 = v4;
          v64 = 2048;
          v65 = v50;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_102:
          v57 = 0;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v66 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v58 = 136315906;
          v59 = "operator[]";
          v60 = 1024;
          v61 = 609;
          v62 = 2048;
          v63 = v7;
          v64 = 2048;
          v65 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_103:
          v57 = 0;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v66 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v58 = 136315906;
          v59 = "operator[]";
          v60 = 1024;
          v61 = 609;
          v62 = 2048;
          v63 = v7;
          v64 = 2048;
          v65 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
      }
      v16 = 0;
LABEL_61:
      v38 = re::internal::GeomAttributeManager::attributeByName((re *)((char *)v52 + 64), "osdVertexCreaseWeights");
      v4 = re::internal::GeomAttributeManager::attributeByName((re *)((char *)v52 + 64), "osdVertexCreaseIndices");
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v38 + 24))(v38, v16);
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v4 + 24))(v4, v16);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14))
      {
        v39 = re::internal::GeomTypedAttribute<int>::operator[](v14, 0);
        v40 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
      }
      else
      {
        v40 = 0;
        v39 = 0;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38))
      {
        v41 = re::internal::GeomTypedAttribute<float>::operator[](v38, 0);
        LODWORD(v14) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
      }
      else
      {
        LODWORD(v14) = 0;
        v41 = 0;
      }
      if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v4 + 16))(v4))
      {
        v42 = re::internal::GeomTypedAttribute<float>::operator[](v4, 0);
        LODWORD(v4) = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v4 + 16))(v4);
      }
      else
      {
        LODWORD(v4) = 0;
        v42 = 0;
      }
      v43 = v40;
      if ((_DWORD)v7)
      {
        a3 = 0;
        v44 = 0;
        v8 = (unint64_t)v54;
        v45 = v56;
        v46 = v7;
        while (v6 != a3)
        {
          v7 = v10[a3];
          if (v8 <= v7)
            goto LABEL_96;
          v47 = *(_DWORD *)(v45 + 4 * v7);
          if (v47 != -1)
          {
            if (v43 <= a3)
              goto LABEL_97;
            v7 = v44;
            if (v14 <= v44)
              goto LABEL_98;
            *(_DWORD *)(v41 + 4 * v44) = *(_DWORD *)(v39 + 4 * a3);
            if (v4 <= v44)
              goto LABEL_99;
            *(_DWORD *)(v42 + 4 * v44++) = v47;
          }
          if (v46 == ++a3)
            goto LABEL_80;
        }
        goto LABEL_95;
      }
    }
LABEL_80:
    result = v53[0];
    if (v53[0])
    {
      if (v56)
        return (*(uint64_t (**)(void))(*(_QWORD *)v53[0] + 40))();
    }
  }
  return result;
}

uint64_t re::GeomIndexMap::operator[](uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  unsigned int v6;

  v6 = a2;
  v3 = *(unsigned __int8 *)(a1 + 12);
  if (v3 == 2)
  {
    v5 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)(a1 + 16), &v6);
    if (v5 != -1)
      return *(unsigned int *)(*(_QWORD *)(a1 + 24) + 8 * v5 + 4);
    return 0xFFFFFFFFLL;
  }
  if (v3 == 1)
  {
    if (*(_QWORD *)(a1 + 32) > (unint64_t)a2)
      return *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * a2);
    return 0xFFFFFFFFLL;
  }
  if (*(_BYTE *)(a1 + 12))
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    result = _os_crash();
    __break(1u);
  }
  else if (*(_DWORD *)(a1 + 16) <= a2)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return a2;
  }
  return result;
}

uint64_t re::remapSkinningAttributes(re *this, re::GeomMesh *a2, const re::GeomMesh *a3, const re::GeomIndexMap *a4)
{
  re::internal::GeomAttributeManager *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;

  v6 = (re::GeomMesh *)((char *)a2 + 64);
  v7 = re::internal::GeomAttributeManager::attributeByName((re::GeomMesh *)((char *)a2 + 64), "skinnedAnimationWeights");
  v8 = re::internal::GeomAttributeManager::attributeByName(v6, "skinnedAnimationJointIndices");
  result = re::internal::GeomAttributeManager::attributeByName(v6, "skinnedAnimationInfluenceEndIndices");
  if (v7)
  {
    if (v8)
    {
      v10 = result;
      if (result)
      {
        v11 = re::internal::GeomAttributeManager::attributeByName((re *)((char *)this + 64), "skinnedAnimationWeights");
        v12 = re::internal::GeomAttributeManager::attributeByName((re *)((char *)this + 64), "skinnedAnimationJointIndices");
        v38 = re::internal::GeomAttributeManager::attributeByName((re *)((char *)this + 64), "skinnedAnimationInfluenceEndIndices");
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7))
        {
          v42 = re::internal::GeomTypedAttribute<int>::operator[](v7, 0);
          v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        }
        else
        {
          v45 = 0;
          v42 = 0;
        }
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8))
        {
          v41 = re::internal::GeomTypedAttribute<int>::operator[](v8, 0);
          v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
        }
        else
        {
          v46 = 0;
          v41 = 0;
        }
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10))
        {
          v13 = re::internal::GeomTypedAttribute<int>::operator[](v10, 0);
          v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        }
        else
        {
          v14 = 0;
          v13 = 0;
        }
        v15 = *((unsigned int *)this + 4);
        if ((_DWORD)v15)
        {
          v16 = 0;
          LODWORD(v17) = 0;
          do
          {
            v18 = re::GeomIndexMap::operator[]((uint64_t)a3, v16);
            if (v18)
            {
              if (v14 <= v18 - 1)
                goto LABEL_67;
              v19 = *(_DWORD *)(v13 + 4 * (v18 - 1));
            }
            else
            {
              v19 = 0;
            }
            if (v14 <= v18)
              goto LABEL_66;
            v17 = (*(_DWORD *)(v13 + 4 * v18) + v17 - v19);
            v16 = (v16 + 1);
          }
          while ((_DWORD)v15 != (_DWORD)v16);
        }
        else
        {
          v17 = 0;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 24))(v11, v17);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 24))(v12, v17);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 24))(v38, v15);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11))
        {
          v40 = re::internal::GeomTypedAttribute<float>::operator[](v11, 0);
          v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        }
        else
        {
          v43 = 0;
          v40 = 0;
        }
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
        {
          v39 = re::internal::GeomTypedAttribute<float>::operator[](v12, 0);
          v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        }
        else
        {
          v44 = 0;
          v39 = 0;
        }
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
        if ((_DWORD)result)
        {
          v20 = re::internal::GeomTypedAttribute<float>::operator[](v38, 0);
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
          v21 = result;
          if (!(_DWORD)v15)
            return result;
        }
        else
        {
          v21 = 0;
          v20 = 0;
          if (!(_DWORD)v15)
            return result;
        }
        v22 = 0;
        LODWORD(v23) = 0;
        do
        {
          result = re::GeomIndexMap::operator[]((uint64_t)a3, v22);
          if ((_DWORD)result)
          {
            if (v14 <= (int)result - 1)
              goto LABEL_70;
            v24 = *(_DWORD *)(v13 + 4 * (result - 1));
          }
          else
          {
            v24 = 0;
          }
          if (v14 <= result)
            goto LABEL_68;
          v25 = *(_DWORD *)(v13 + 4 * result);
          v26 = v25 - v24;
          if (v25 <= v24)
            goto LABEL_59;
          v27 = v21;
          v28 = 0;
          v29 = v23;
          if (v24 <= v46)
            v30 = v46;
          else
            v30 = v24;
          v31 = v40 + 4 * v23;
          if (v23 <= v44)
            v32 = v44;
          else
            v32 = v23;
          v33 = v39 + 4 * v23;
          if (v24 <= v45)
            v34 = v45;
          else
            v34 = v24;
          v35 = v42 + 4 * v24;
          if (v23 <= v43)
            v23 = v43;
          else
            v23 = v23;
          v36 = v41 + 4 * v24;
          result = v34 - v24;
          v37 = v30 - v24;
          do
          {
            if (v37 == v28)
            {
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_63:
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_64:
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_65:
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_66:
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_67:
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_68:
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_69:
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_70:
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            if (!(v29 - v32 + v28))
              goto LABEL_63;
            *(_DWORD *)(v33 + 4 * v28) = *(_DWORD *)(v36 + 4 * v28);
            if (result == v28)
              goto LABEL_64;
            if (!(v29 - v23 + v28))
              goto LABEL_65;
            *(_DWORD *)(v31 + 4 * v28) = *(_DWORD *)(v35 + 4 * v28);
            ++v28;
          }
          while (v26 != (_DWORD)v28);
          LODWORD(v23) = v29 + v28;
          v21 = v27;
LABEL_59:
          if (v22 == v21)
            goto LABEL_69;
          *(_DWORD *)(v20 + 4 * v22++) = v23;
        }
        while (v22 != v15);
      }
    }
  }
  return result;
}

void re::makeConditionedMeshForGPU(unsigned int *a1@<X0>, _BYTE *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, const re::GeomIndexMap *a5@<X4>, _BYTE *a6@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  const re::GeomMesh *v19;
  uint64_t v20;
  int v21;
  unsigned int i;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  unsigned int v26;
  re::GeomMesh *v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  re::GeomAttribute *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  int v47;
  NSObject *v48;
  re::GeomMesh *v49;
  uint64_t v50;
  re::GeomMesh *v51;
  uint64_t v52;
  uint64_t v53;
  const re::GeomMesh *v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  re::GeomAttribute *v59;
  int v60;
  int v61;
  int v62;
  NSObject *v63;
  _BOOL4 v64;
  const re::GeomIndexMap *v65;
  unint64_t v66;
  re::GeomConnectivityManifold *v67;
  uint64_t v68;
  unsigned int v69;
  unint64_t v70;
  __int128 v71;
  _BYTE *v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  uint64_t v83;
  unint64_t j;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float v104;
  float v105;
  float32x4_t v106;
  unint64_t v107;
  unint64_t v108;
  _BYTE *v109;
  unsigned int v110;
  unint64_t v112;
  int v113;
  re::GeomAttribute *v114;
  uint64_t v115;
  _BYTE *v116;
  _BYTE *v117;
  _BYTE *v118;
  uint64_t v119;
  re::GeomAttribute *v120;
  uint64_t v121;
  unint64_t v122;
  _BYTE *v123;
  uint64_t v124;
  re::GeomAttribute *v125;
  uint64_t v126;
  _BYTE *v127;
  _BYTE *v128;
  uint64_t v129;
  _BOOL4 v130;
  uint64_t v131;
  uint8_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 *v136;
  re::GeomAttribute *v137;
  uint64_t v138;
  _BYTE *v139;
  _BYTE *v140;
  _BYTE *v141;
  uint64_t v142;
  re::GeomAttribute *v143;
  uint64_t v144;
  _BYTE *v145;
  _BYTE *v146;
  uint64_t v147;
  unsigned int v148;
  unsigned int v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  BOOL v165;
  unsigned int v166;
  uint64_t v167;
  _DWORD *v168;
  unint64_t v169;
  int *v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  re::GeomAttribute *v191;
  uint64_t v192;
  float *v193;
  unsigned int v194;
  unsigned int v195;
  re::GeomMesh *v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  _BYTE *v203;
  uint64_t v204;
  unsigned int v205;
  _BYTE *v206;
  uint64_t v207;
  re::GeomAttribute *v208;
  uint64_t v209;
  float *v210;
  _BOOL4 v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _BOOL4 v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unsigned int v220;
  re::GeomIndexMap *v221;
  re::internal::GeomAttributeManager *v222;
  re::internal::GeomAttributeManager *v223;
  _BOOL4 HasSkinningData;
  uint64_t *v225;
  re::GeomMesh *v227;
  unint64_t v228;
  unsigned int v229;
  _BYTE *v230;
  _BYTE v231[16];
  _QWORD v232[2];
  _BYTE *v233;
  int v234;
  uint64_t v235;
  _QWORD v236[2];
  unint64_t v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  uint8_t buf[16];
  __int128 v242;
  __int128 v243;
  __int128 v244;
  _OWORD v245[10];
  unsigned int v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  int v250;
  __int128 v251;
  __int128 v252;
  int v253;
  __int128 v254;
  __int128 v255;
  int v256;
  __int128 v257;
  __int128 v258;
  int v259;
  __int128 v260;
  __int128 v261;
  int v262;
  uint64_t v263;
  _BYTE v264[48];
  __int128 v265;
  int v266;
  float *v267;
  _BYTE v268[28];
  __int16 v269;
  _BYTE v270[10];
  unsigned int v271[2];
  unsigned int v272[3];
  __int16 v273;
  int v274;
  __int16 v275;
  _BYTE *v276;
  __int16 v277;
  _BYTE *v278;
  _BYTE v279[28];
  __int16 v280;
  _BYTE v281[10];
  _QWORD v282[6];
  __int128 v283;
  __int128 v284;
  uint64_t v285;

  v285 = *MEMORY[0x24BDAC8D0];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v231, 4510, a1[4]);
  re::GeomMesh::copy((re::GeomMesh *)a1, (re::GeomMesh *)a3);
  v13 = 0;
  v14 = a1[4];
  *(_QWORD *)buf = 0xFFFFFFFF00000000;
  *(_DWORD *)&buf[8] = -1;
  buf[12] = 0;
  if (v14 - 1 <= 0xFFFFFFFD)
  {
    *(_DWORD *)&buf[8] = v14 - 1;
    v13 = v14;
    *(_DWORD *)&buf[4] = 0;
    *(_DWORD *)buf = v14;
  }
  LODWORD(v242) = v13;
  re::GeomIndexMap::operator=(a4, (uint64_t)buf);
  if (!buf[12])
    goto LABEL_14;
  if (buf[12] == 2)
  {
    v16 = *((_QWORD *)&v245[0] + 1);
    if (!*((_QWORD *)&v245[0] + 1))
      goto LABEL_14;
    if (*((_QWORD *)&v242 + 1))
      *((_QWORD *)&v242 + 1) = 0;
    if (!(_QWORD)v242)
      goto LABEL_14;
LABEL_13:
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
    goto LABEL_14;
  }
  if (buf[12] != 1)
  {
    re::internal::assertLog((re::internal *)4, v15, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    _os_crash();
    __break(1u);
    goto LABEL_519;
  }
  v16 = v242;
  if ((_QWORD)v242 && (_QWORD)v244)
    goto LABEL_13;
LABEL_14:
  v17 = 0;
  v18 = a1[10];
  *(_QWORD *)buf = 0xFFFFFFFF00000000;
  *(_DWORD *)&buf[8] = -1;
  buf[12] = 0;
  if (v18 - 1 <= 0xFFFFFFFD)
  {
    *(_DWORD *)&buf[8] = v18 - 1;
    v17 = v18;
    *(_DWORD *)&buf[4] = 0;
    *(_DWORD *)buf = v18;
  }
  v227 = (re::GeomMesh *)a1;
  LODWORD(v242) = v17;
  re::GeomIndexMap::operator=((uint64_t)a5, (uint64_t)buf);
  if (buf[12])
  {
    if (buf[12] != 2)
    {
      if (buf[12] == 1)
      {
        v20 = v242;
        if (!(_QWORD)v242)
          goto LABEL_27;
        v19 = (const re::GeomMesh *)v244;
        if (!(_QWORD)v244)
          goto LABEL_27;
LABEL_26:
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
        goto LABEL_27;
      }
LABEL_519:
      re::internal::assertLog((re::internal *)4, (uint64_t)v19, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
      _os_crash();
      __break(1u);
      goto LABEL_520;
    }
    v20 = *((_QWORD *)&v245[0] + 1);
    if (*((_QWORD *)&v245[0] + 1))
    {
      if (*((_QWORD *)&v242 + 1))
        *((_QWORD *)&v242 + 1) = 0;
      v19 = (const re::GeomMesh *)v242;
      if ((_QWORD)v242)
        goto LABEL_26;
    }
  }
LABEL_27:
  v230 = a2;
  if (a2[4])
  {
    v21 = *(_DWORD *)(a3 + 424);
    if (v21)
    {
      for (i = 0; i != v21; ++i)
      {
        v23 = re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)(a3 + 400), i);
        v26 = *(unsigned __int8 *)(v23 + 17);
        if (v26 > 0xA)
          goto LABEL_517;
        if (((1 << v26) & 0x60F) != 0)
          re::mergeDiscreteFaceVaryingAttributeValues((re *)a3, *(re::GeomMesh **)(v23 + 8), v25);
        else
          re::mergeContinuousFaceVaryingAttributeValues((re *)a3, *(re::GeomMesh **)(v23 + 8), v25, 0.00000999999975);
      }
    }
  }
  v27 = v227;
  v28 = *((_DWORD *)v227 + 4);
  v29 = *((_DWORD *)v227 + 10);
  HasSkinningData = re::meshHasSkinningData((re *)a3, v19);
  v30 = (unint64_t)v230;
  if (v230[3] && (float)((float)v28 / (float)v29) > 1.2)
  {
    *(_DWORD *)((char *)v282 + 1) = 257;
    *(_OWORD *)&v282[1] = xmmword_2261911E0;
    LODWORD(v282[3]) = 981668463;
    v282[4] = 0;
    LOBYTE(v282[0]) = 0;
    if (HasSkinningData)
    {
      v31 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a3 + 64), "skinnedAnimationWeights");
      v32 = a4;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31))
      {
        v33 = re::internal::GeomTypedAttribute<int>::operator[](v31, 0);
        v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
      }
      else
      {
        v34 = 0;
        v33 = 0;
      }
      v35 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a3 + 64), "skinnedAnimationJointIndices");
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35))
      {
        v36 = re::internal::GeomTypedAttribute<int>::operator[](v35, 0);
        v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
      }
      else
      {
        v37 = 0;
        v36 = 0;
      }
      v38 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a3 + 64), "skinnedAnimationInfluenceEndIndices");
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38))
      {
        v39 = re::internal::GeomTypedAttribute<int>::operator[](v38, 0);
        v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
      }
      else
      {
        v6 = 0;
        v39 = 0;
      }
      v40 = operator new(0x38uLL);
      *v40 = &off_24ED7D148;
      v40[1] = v33;
      *((_DWORD *)v40 + 4) = v34;
      v40[3] = v36;
      *((_DWORD *)v40 + 8) = v37;
      v40[5] = v39;
      *((_DWORD *)v40 + 12) = v6;
      *(_QWORD *)&v264[24] = v40;
      v282[4] = v264;
      re::GeomMesh::GeomMesh((re::GeomMesh *)buf, 0);
      a4 = v32;
      if (re::mergeVertices(a3, (unsigned int *)buf, v32, (uint64_t)v282))
        re::GeomMesh::operator=((uint64_t *)a3, (uint64_t *)buf);
      re::GeomMesh::~GeomMesh((re::GeomMesh *)buf, v41);
      v42 = *(_QWORD **)&v264[24];
      v27 = v227;
      v30 = (unint64_t)v230;
      if (*(_BYTE **)&v264[24] == v264)
      {
        v43 = 4;
        v42 = v264;
        goto LABEL_54;
      }
      if (*(_QWORD *)&v264[24])
      {
        v43 = 5;
LABEL_54:
        (*(void (**)(void))(*v42 + 8 * v43))();
      }
    }
    else
    {
      re::mergeVertices(a3, (unsigned int *)a3, a4, (uint64_t)v282);
    }
  }
  v44 = a3 + 64;
  v45 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a3 + 64), "vertexNormal");
  if (v45 && *(_BYTE *)(v45 + 17) == 7)
  {
    v46 = (unsigned __int8 *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a3 + 64), "vertexNormal");
    v47 = v46[16];
    if (v47 == 4)
    {
LABEL_60:
      v48 = *re::pipelineLogObjects((re *)v46);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_224FE9000, v48, OS_LOG_TYPE_DEFAULT, "Recalculating normals defined at an unsupported rate.", buf, 2u);
      }
      re::internal::GeomAttributeManager::deleteAttribute((re::internal::GeomAttributeManager *)(a3 + 64), "vertexNormal");
      goto LABEL_66;
    }
    if (v47 == 2)
    {
      if (*(_BYTE *)(v30 + 7))
      {
        re::internal::GeomBaseMesh::replaceFaceAttributeWithFaceVaryingAttribute((re::internal::GeomBaseMesh *)(a3 + 16), "vertexNormal");
      }
      else
      {
        re::internal::GeomAttributeManager::deleteAttribute((re::internal::GeomAttributeManager *)(a3 + 64), "vertexNormal");
        re::computeSmoothFaceVaryingNormals((re *)a3, v49, 0.7854);
      }
    }
    else if (!v46[16])
    {
      goto LABEL_60;
    }
  }
LABEL_66:
  v50 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a3 + 64), "vertexNormal");
  if (!v50 || *(_BYTE *)(v50 + 17) != 7)
  {
    if (*(_BYTE *)(v30 + 5))
      re::computeSmoothFaceVaryingNormals((re *)a3, v51, 0.7854);
    else
      re::computeSmoothVertexNormals((re *)a3, v51);
  }
  v52 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a3 + 64), "vertexTangent");
  if (!v52
    || *(_BYTE *)(v52 + 17) != 7
    || (v53 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a3 + 64), "vertexBitangent")) == 0|| *(_BYTE *)(v53 + 17) != 7)
  {
    if (re::internal::GeomAttributeManager::attributeByName((re::GeomMesh *)((char *)v27 + 64), "vertexUV"))
    {
      v55 = (unsigned __int8 *)re::internal::GeomAttributeManager::attributeByName((re::GeomMesh *)((char *)v27 + 64), "vertexUV");
      if ((v55[16] | 2) == 3)
      {
        buf[4] = 1;
        *(_DWORD *)buf = 1;
        re::computeTangentsAndBitangents((unsigned int *)a3, "vertexUV", "vertexTangent", "vertexBitangent", "vertexNormal", (unint64_t)buf);
      }
      else
      {
        v63 = *re::pipelineLogObjects((re *)v55);
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_224FE9000, v63, OS_LOG_TYPE_DEFAULT, "Cannot generate tangents+bitangents on mesh without vertex or face-varying rate uvs.", buf, 2u);
        }
      }
    }
  }
  if (*(_BYTE *)(v30 + 2))
  {
    v56 = (unsigned __int8 *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a3 + 64), "vertexNormal");
    v57 = (unsigned __int8 *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a3 + 64), "vertexTangent");
    v58 = (unsigned __int8 *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a3 + 64), "vertexBitangent");
    if (v56)
    {
      if (v57)
      {
        if (v58)
        {
          if (v56[17] == 7 && v57[17] == 7 && v58[17] == 7)
          {
            v60 = v56[16];
            if ((v60 & 0xFFFFFFFD) == 1)
            {
              v61 = v57[16];
              if ((v61 & 0xFFFFFFFD) == 1)
              {
                v62 = v58[16];
                if ((v62 & 0xFFFFFFFD) == 1)
                {
                  if (v60 == 1 && v61 == 1 && v62 == 1)
                    re::repairTangentsAndBitangentsAllVertexRateInternal((re *)a3, (re::GeomMesh *)v56, (re::GeomAttribute *)v57, (re::GeomAttribute *)v58, v59);
                  else
                    re::repairTangentsAndBitangentsSlowInternal((re *)a3, (re::GeomMesh *)v56, (re::GeomAttribute *)v57, (re::GeomAttribute *)v58, v59);
                }
              }
            }
          }
        }
      }
    }
  }
  if (*(_DWORD *)(a3 + 8) != *(_DWORD *)(a3 + 40))
  v64 = re::meshHasSkinningData((re *)a3, v54);
  v66 = 1;
  if (!v64 && !*(_BYTE *)v30)
    v66 = *(_BYTE *)(v30 + 9) != 0;
  v225 = (uint64_t *)a3;
  v221 = (re::GeomIndexMap *)a4;
  v222 = (re::internal::GeomAttributeManager *)(a3 + 64);
  v220 = v66;
  if (!*(_BYTE *)(v30 + 8))
    goto LABEL_233;
  v215 = v64;
  *(_QWORD *)&v270[2] = 0;
  memset(v268, 0, sizeof(v268));
  v239 = 0;
  v236[1] = 0;
  v237 = 0;
  v235 = 0;
  v236[0] = 0;
  v238 = 0;
  v232[1] = 0;
  v233 = 0;
  v232[0] = 0;
  v234 = 0;
  re::GeomConnectivityManifold::GeomConnectivityManifold((re::GeomConnectivityManifold *)buf);
  v248 = 0;
  v247 = 0;
  v250 = 0;
  v249 = 0;
  v263 = 0;
  v251 = 0u;
  v252 = 0u;
  v253 = 0;
  v254 = 0u;
  v255 = 0u;
  v256 = 0;
  v257 = 0u;
  v258 = 0u;
  v259 = 0;
  v260 = 0u;
  v261 = 0u;
  v262 = 0;
  if (!re::GeomConnectivityManifold::buildIfManifold((re::GeomConnectivityManifold *)a3, (const re::GeomMesh *)buf, v67))goto LABEL_148;
  v68 = re::GeomMesh::accessVertexPositions((re::GeomMesh *)a3);
  v70 = v69;
  re::DynamicArray<re::Vector3<float>>::resize((uint64_t)&v260 + 8, v69);
  if (v70)
  {
    v30 = 0;
    do
    {
      v44 = *((_QWORD *)&v261 + 1);
      if (*((_QWORD *)&v261 + 1) <= v30)
        goto LABEL_489;
      *(_QWORD *)&v71 = *(_QWORD *)v68;
      DWORD2(v71) = *(_DWORD *)(v68 + 8);
      *(_OWORD *)(v263 + 16 * v30++) = v71;
      v68 += 16;
    }
    while (v70 != v30);
  }
  v72 = (_BYTE *)DWORD2(v242);
  re::DynamicArray<float>::resize((uint64_t)&v247, DWORD2(v242));
  if (v72)
  {
    v73 = 0;
    v30 = *((_QWORD *)&v242 + 1);
    v74 = (_BYTE *)*((_QWORD *)&v261 + 1);
    v75 = v263;
    v44 = v249;
    v76 = v251;
    v77 = (unsigned int *)(*((_QWORD *)&v243 + 1) + 4);
    while ((_BYTE *)v30 != v73)
    {
      v66 = *(v77 - 1);
      if ((unint64_t)v74 <= v66)
        goto LABEL_493;
      a4 = *v77;
      if ((unint64_t)v74 <= a4)
        goto LABEL_494;
      v6 = v77[1];
      if ((unint64_t)v74 <= v6)
        goto LABEL_495;
      if ((_BYTE *)v44 == v73)
        goto LABEL_496;
      v78 = *(float32x4_t *)(v75 + 16 * v66);
      v79 = vsubq_f32(*(float32x4_t *)(v75 + 16 * a4), v78);
      v80 = vsubq_f32(*(float32x4_t *)(v75 + 16 * v6), v78);
      v81 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v80, (int32x4_t)v80), (int8x16_t)v80, 0xCuLL), vnegq_f32(v79)), v80, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v79, (int32x4_t)v79), (int8x16_t)v79, 0xCuLL));
      v82 = vmulq_f32(v81, v81);
      *(float *)(v76 + 4 * (_QWORD)v73++) = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v82.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v82, 2), v82)).f32[0])* 0.5;
      v77 += 4;
      if (v72 == v73)
        goto LABEL_114;
    }
LABEL_492:
    *(_QWORD *)v279 = 0;
    v74 = v264;
    v283 = 0u;
    v284 = 0u;
    memset(v282, 0, sizeof(v282));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v264 = 136315906;
    *(_QWORD *)&v264[4] = "operator[]";
    *(_WORD *)&v264[12] = 1024;
    *(_DWORD *)&v264[14] = 797;
    *(_WORD *)&v264[18] = 2048;
    *(_QWORD *)&v264[20] = v30;
    *(_WORD *)&v264[28] = 2048;
    *(_QWORD *)&v264[30] = v30;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_493:
    *(_QWORD *)v279 = 0;
    v283 = 0u;
    v284 = 0u;
    memset(v282, 0, sizeof(v282));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v264 = 136315906;
    *(_QWORD *)&v264[4] = "operator[]";
    *(_WORD *)&v264[12] = 1024;
    *(_DWORD *)&v264[14] = 789;
    *(_WORD *)&v264[18] = 2048;
    *(_QWORD *)&v264[20] = v66;
    *(_WORD *)&v264[28] = 2048;
    *(_QWORD *)&v264[30] = v74;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_494:
    *(_QWORD *)v279 = 0;
    v283 = 0u;
    v284 = 0u;
    memset(v282, 0, sizeof(v282));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v264 = 136315906;
    *(_QWORD *)&v264[4] = "operator[]";
    *(_WORD *)&v264[12] = 1024;
    *(_DWORD *)&v264[14] = 789;
    *(_WORD *)&v264[18] = 2048;
    *(_QWORD *)&v264[20] = a4;
    *(_WORD *)&v264[28] = 2048;
    *(_QWORD *)&v264[30] = v74;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_495:
    *(_QWORD *)v279 = 0;
    v283 = 0u;
    v284 = 0u;
    memset(v282, 0, sizeof(v282));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v264 = 136315906;
    *(_QWORD *)&v264[4] = "operator[]";
    *(_WORD *)&v264[12] = 1024;
    *(_DWORD *)&v264[14] = 789;
    *(_WORD *)&v264[18] = 2048;
    *(_QWORD *)&v264[20] = v6;
    *(_WORD *)&v264[28] = 2048;
    *(_QWORD *)&v264[30] = v74;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_496:
    *(_QWORD *)v279 = 0;
    v116 = v264;
    v283 = 0u;
    v284 = 0u;
    memset(v282, 0, sizeof(v282));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v264 = 136315906;
    *(_QWORD *)&v264[4] = "operator[]";
    *(_WORD *)&v264[12] = 1024;
    *(_DWORD *)&v264[14] = 789;
    *(_WORD *)&v264[18] = 2048;
    *(_QWORD *)&v264[20] = v44;
    *(_WORD *)&v264[28] = 2048;
    *(_QWORD *)&v264[30] = v44;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_497;
  }
LABEL_114:
  v83 = *(unsigned int *)buf;
  LODWORD(v282[0]) = 0;
  re::DynamicArray<float>::resize((_QWORD *)&v251 + 1, *(unsigned int *)buf, v282);
  *(_QWORD *)&v264[32] = 0;
  memset(v264, 0, 28);
  if (!(_DWORD)v83)
    goto LABEL_128;
  for (j = 0; j != v83; ++j)
  {
    re::GeomConnectivityManifold::fetchVertexIncidentFaces((re::GeomConnectivityManifold *)buf, j, (_anonymous_namespace_ *)v264);
    v85 = *(_QWORD *)&v264[32];
    if (*(_QWORD *)&v264[16])
    {
      v66 = v249;
      v86 = v251;
      v87 = 4 * *(_QWORD *)&v264[16];
      v88 = *(unsigned int **)&v264[32];
      v44 = *((_QWORD *)&v252 + 1);
      v89 = v254;
      while (1)
      {
        a4 = *v88;
        if (v66 <= a4)
          break;
        if (v44 <= j)
          goto LABEL_247;
        *(float *)(v89 + 4 * j) = *(float *)(v86 + 4 * a4) + *(float *)(v89 + 4 * j);
        ++v88;
        v87 -= 4;
        if (!v87)
          goto LABEL_123;
      }
      *(_QWORD *)v272 = 0;
      v283 = 0u;
      v284 = 0u;
      memset(v282, 0, sizeof(v282));
      j = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v279 = 136315906;
      *(_QWORD *)&v279[4] = "operator[]";
      *(_WORD *)&v279[12] = 1024;
      *(_DWORD *)&v279[14] = 789;
      *(_WORD *)&v279[18] = 2048;
      *(_QWORD *)&v279[20] = a4;
      v280 = 2048;
      *(_QWORD *)v281 = v66;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_247:
      *(_QWORD *)v272 = 0;
      v109 = v264;
      v283 = 0u;
      v284 = 0u;
      memset(v282, 0, sizeof(v282));
      v92 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v279 = 136315906;
      *(_QWORD *)&v279[4] = "operator[]";
      *(_WORD *)&v279[12] = 1024;
      *(_DWORD *)&v279[14] = 789;
      *(_WORD *)&v279[18] = 2048;
      *(_QWORD *)&v279[20] = j;
      v280 = 2048;
      *(_QWORD *)v281 = v44;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_248:
      v240 = 0;
      v283 = 0u;
      v284 = 0u;
      memset(v282, 0, sizeof(v282));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v272[0] = 136315906;
      *(_QWORD *)&v272[1] = "operator[]";
      v273 = 1024;
      v274 = 789;
      v275 = 2048;
      v276 = (_BYTE *)v92;
      v277 = 2048;
      v278 = v109;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_249:
      v240 = 0;
      v92 = (unint64_t)v264;
      v283 = 0u;
      v284 = 0u;
      memset(v282, 0, sizeof(v282));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v272[0] = 136315906;
      *(_QWORD *)&v272[1] = "operator[]";
      v273 = 1024;
      v274 = 789;
      v275 = 2048;
      v276 = (_BYTE *)v6;
      v277 = 2048;
      v278 = v109;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_250:
      v240 = 0;
      v44 = (unint64_t)v264;
      v283 = 0u;
      v284 = 0u;
      memset(v282, 0, sizeof(v282));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v272[0] = 136315906;
      *(_QWORD *)&v272[1] = "operator[]";
      v273 = 1024;
      v274 = 789;
      v275 = 2048;
      v276 = (_BYTE *)v92;
      v277 = 2048;
      v278 = v109;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_251:
      v240 = 0;
      v92 = (unint64_t)v264;
      v283 = 0u;
      v284 = 0u;
      memset(v282, 0, sizeof(v282));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v272[0] = 136315906;
      *(_QWORD *)&v272[1] = "operator[]";
      v273 = 1024;
      v274 = 797;
      v275 = 2048;
      v276 = (_BYTE *)v7;
      v277 = 2048;
      v278 = (_BYTE *)v66;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_252:
      v240 = 0;
      v283 = 0u;
      v284 = 0u;
      memset(v282, 0, sizeof(v282));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v272[0] = 136315906;
      *(_QWORD *)&v272[1] = "operator[]";
      v273 = 1024;
      v274 = 789;
      v275 = 2048;
      v276 = (_BYTE *)(v92 + 1);
      v277 = 2048;
      v278 = (_BYTE *)v66;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_253:
      *(_QWORD *)v272 = 0;
      v283 = 0u;
      v284 = 0u;
      memset(v282, 0, sizeof(v282));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v279 = 136315906;
      *(_QWORD *)&v279[4] = "operator[]";
      *(_WORD *)&v279[12] = 1024;
      *(_DWORD *)&v279[14] = 789;
      *(_WORD *)&v279[18] = 2048;
      *(_QWORD *)&v279[20] = v92;
      v280 = 2048;
      *(_QWORD *)v281 = v66;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_254:
      *(_QWORD *)v272 = 0;
      v283 = 0u;
      v284 = 0u;
      memset(v282, 0, sizeof(v282));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v279 = 136315906;
      *(_QWORD *)&v279[4] = "operator[]";
      *(_WORD *)&v279[12] = 1024;
      *(_DWORD *)&v279[14] = 789;
      *(_WORD *)&v279[18] = 2048;
      *(_QWORD *)&v279[20] = v92;
      v280 = 2048;
      *(_QWORD *)v281 = v66;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_255:
      v240 = 0;
      v283 = 0u;
      v284 = 0u;
      memset(v282, 0, sizeof(v282));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v264 = 136315906;
      *(_QWORD *)&v264[4] = "operator[]";
      *(_WORD *)&v264[12] = 1024;
      *(_DWORD *)&v264[14] = 789;
      *(_WORD *)&v264[18] = 2048;
      *(_QWORD *)&v264[20] = v7;
      *(_WORD *)&v264[28] = 2048;
      *(_QWORD *)&v264[30] = v92;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_256:
      v240 = 0;
      v283 = 0u;
      v284 = 0u;
      memset(v282, 0, sizeof(v282));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v264 = 136315906;
      *(_QWORD *)&v264[4] = "operator[]";
      *(_WORD *)&v264[12] = 1024;
      *(_DWORD *)&v264[14] = 789;
      *(_WORD *)&v264[18] = 2048;
      *(_QWORD *)&v264[20] = v6;
      *(_WORD *)&v264[28] = 2048;
      *(_QWORD *)&v264[30] = v92;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_257:
      v240 = 0;
      v30 = (unint64_t)v264;
      v283 = 0u;
      v284 = 0u;
      memset(v282, 0, sizeof(v282));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v264 = 136315906;
      *(_QWORD *)&v264[4] = "operator[]";
      *(_WORD *)&v264[12] = 1024;
      *(_DWORD *)&v264[14] = 789;
      *(_WORD *)&v264[18] = 2048;
      *(_QWORD *)&v264[20] = v8;
      *(_WORD *)&v264[28] = 2048;
      *(_QWORD *)&v264[30] = v92;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_258:
      v240 = 0;
      v283 = 0u;
      v284 = 0u;
      memset(v282, 0, sizeof(v282));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v264 = 136315906;
      *(_QWORD *)&v264[4] = "operator[]";
      *(_WORD *)&v264[12] = 1024;
      *(_DWORD *)&v264[14] = 789;
      *(_WORD *)&v264[18] = 2048;
      *(_QWORD *)&v264[20] = v7;
      *(_WORD *)&v264[28] = 2048;
      *(_QWORD *)&v264[30] = a3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_259:
      v240 = 0;
      v283 = 0u;
      v284 = 0u;
      memset(v282, 0, sizeof(v282));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v264 = 136315906;
      *(_QWORD *)&v264[4] = "operator[]";
      *(_WORD *)&v264[12] = 1024;
      *(_DWORD *)&v264[14] = 789;
      *(_WORD *)&v264[18] = 2048;
      *(_QWORD *)&v264[20] = v6;
      *(_WORD *)&v264[28] = 2048;
      *(_QWORD *)&v264[30] = v30;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_260:
      v240 = 0;
      v283 = 0u;
      v284 = 0u;
      memset(v282, 0, sizeof(v282));
      v132 = (uint8_t *)MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v264 = 136315906;
      *(_QWORD *)&v264[4] = "operator[]";
      *(_WORD *)&v264[12] = 1024;
      *(_DWORD *)&v264[14] = 789;
      *(_WORD *)&v264[18] = 2048;
      *(_QWORD *)&v264[20] = v8;
      *(_WORD *)&v264[28] = 2048;
      *(_QWORD *)&v264[30] = v30;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_261;
    }
    v44 = *((_QWORD *)&v252 + 1);
LABEL_123:
    if (v44 <= j)
      goto LABEL_502;
    *(float *)(v254 + 4 * j) = *(float *)(v254 + 4 * j) / 3.0;
  }
  if (*(_QWORD *)v264 && v85)
    (*(void (**)(void))(**(_QWORD **)v264 + 40))();
LABEL_128:
  *((_QWORD *)&v255 + 1) = 0;
  ++v256;
  LODWORD(v282[0]) = 0;
  re::DynamicArray<float>::resize((_QWORD *)&v254 + 1, v246, v282);
  *((_QWORD *)&v258 + 1) = 0;
  ++v259;
  LODWORD(v282[0]) = 0;
  re::DynamicArray<float>::resize((_QWORD *)&v257 + 1, *(unsigned int *)buf, v282);
  v30 = *((_QWORD *)&v242 + 1);
  if (DWORD2(v242))
  {
    v90 = 0;
    v44 = (unint64_t)v272;
    v66 = (unint64_t)v279;
    a4 = 2;
    while (v30 > v90)
    {
      *(_OWORD *)v279 = *(_OWORD *)(*((_QWORD *)&v243 + 1) + 16 * v90);
      re::GeomConnectivityManifold::faceIncidentEdges((re::GeomConnectivityManifold *)buf, v90, v272);
      v91 = 0;
      v92 = *((_QWORD *)&v261 + 1);
      v93 = v263;
      a3 = *((_QWORD *)&v255 + 1);
      v94 = v257;
      v30 = *((_QWORD *)&v258 + 1);
      v95 = v260;
      do
      {
        v7 = *(unsigned int *)&v279[4 * v91];
        if (v92 <= v7)
          goto LABEL_255;
        v96 = v91 + 1;
        if (v91 == 2)
          v97 = 0;
        else
          v97 = v91 + 1;
        v6 = *(unsigned int *)&v279[4 * v97];
        if (v92 <= v6)
          goto LABEL_256;
        if (v91)
          v98 = (v91 - 1);
        else
          v98 = 2;
        v8 = *(unsigned int *)&v279[4 * v98];
        if (v92 <= v8)
          goto LABEL_257;
        v99 = *(float32x4_t *)(v93 + 16 * v7);
        v100 = vsubq_f32(*(float32x4_t *)(v93 + 16 * v6), v99);
        v101 = vsubq_f32(*(float32x4_t *)(v93 + 16 * v8), v99);
        v102 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v101, (int32x4_t)v101), (int8x16_t)v101, 0xCuLL), vnegq_f32(v100)), v101, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v100, (int32x4_t)v100), (int8x16_t)v100, 0xCuLL));
        v103 = vmulq_f32(v102, v102);
        v104 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v103.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v103, 2), v103)).f32[0]);
        v105 = 0.0;
        if (v104 > 0.0)
        {
          v106 = vmulq_f32(v100, v101);
          v105 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v106, 2), vaddq_f32(v106, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v106.f32, 1))).f32[0]/ v104;
        }
        v7 = v272[v97];
        if (a3 <= v7)
          goto LABEL_258;
        *(float *)(v94 + 4 * v7) = *(float *)(v94 + 4 * v7) - v105;
        if (v30 <= v6)
          goto LABEL_259;
        *(float *)(v95 + 4 * v6) = v105 + *(float *)(v95 + 4 * v6);
        if (v30 <= v8)
          goto LABEL_260;
        *(float *)(v95 + 4 * v8) = v105 + *(float *)(v95 + 4 * v8);
        v91 = v96;
      }
      while (v96 != 3);
      ++v90;
      v30 = *((_QWORD *)&v242 + 1);
      a3 = (unint64_t)v225;
      if (v90 >= DWORD2(v242))
        goto LABEL_148;
    }
LABEL_516:
    *(_QWORD *)v279 = 0;
    v283 = 0u;
    v284 = 0u;
    memset(v282, 0, sizeof(v282));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v264 = 136315906;
    *(_QWORD *)&v264[4] = "operator[]";
    *(_WORD *)&v264[12] = 1024;
    *(_DWORD *)&v264[14] = 797;
    *(_WORD *)&v264[18] = 2048;
    *(_QWORD *)&v264[20] = v90;
    *(_WORD *)&v264[28] = 2048;
    *(_QWORD *)&v264[30] = v30;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_517:
    re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) Unsupported attribute type.", "!\"Unreachable code\"", "makeConditionedMeshForGPU", 717);
    _os_crash();
    __break(1u);
  }
LABEL_148:
  v107 = *(unsigned int *)(a3 + 16);
  LODWORD(v282[0]) = 0;
  re::DynamicArray<unsigned int>::resize(v236, v107, v282);
  v228 = v107;
  if ((_DWORD)v107)
  {
    v108 = 0;
    v44 = (unint64_t)&v264[32];
    a4 = (unint64_t)&v264[40];
    a3 = (unint64_t)v271;
    while (1)
    {
      *(_QWORD *)&v281[2] = 0;
      memset(v279, 0, sizeof(v279));
      re::GeomConnectivityManifold::fetchVertexIncidentEdges((re::GeomConnectivityManifold *)buf, v108, (_anonymous_namespace_ *)v279);
      v30 = *(_QWORD *)&v279[16];
      memset(v264, 0, 28);
      v267 = 0;
      *(_OWORD *)&v264[32] = 0u;
      v265 = 0u;
      v266 = 0;
      re::DynamicArray<float>::resize((uint64_t)v264, (*(_DWORD *)&v279[16] + 1));
      re::DynamicArray<float>::resize((uint64_t)&v264[40], (v30 + 1));
      if (!*(_QWORD *)&v264[16])
        goto LABEL_503;
      **(_DWORD **)&v264[32] = v108;
      v66 = *((_QWORD *)&v258 + 1);
      if (*((_QWORD *)&v258 + 1) <= v108)
        goto LABEL_504;
      if (!*((_QWORD *)&v265 + 1))
        goto LABEL_505;
      *v267 = *(float *)(v260 + 4 * v108) * 0.5;
      v8 = v30;
      if ((_DWORD)v30)
        break;
LABEL_161:
      if (*(_QWORD *)v279 && *(_QWORD *)&v281[2])
        (*(void (**)(void))(**(_QWORD **)v279 + 40))();
      if (*((_QWORD *)&v265 + 1))
      {
        v92 = 0;
        v110 = 1;
        do
        {
          v66 = *(_QWORD *)&v264[16];
          if (*(_QWORD *)&v264[16] <= v92)
            goto LABEL_253;
          re::DynamicArray<int>::add(v268, (_DWORD *)(*(_QWORD *)&v264[32] + 4 * v92));
          v66 = *((_QWORD *)&v265 + 1);
          if (*((_QWORD *)&v265 + 1) <= v92)
            goto LABEL_254;
          re::DynamicArray<float>::add((_anonymous_namespace_ *)v232, &v267[v92]);
          v92 = v110;
        }
        while (*((_QWORD *)&v265 + 1) > (unint64_t)v110++);
      }
      v30 = v237;
      if (v108)
      {
        v112 = v108 - 1;
        if (v237 <= v108 - 1)
          goto LABEL_511;
        v113 = *(_DWORD *)(v239 + 4 * v112) + *(_DWORD *)&v264[16];
      }
      else
      {
        v113 = *(_DWORD *)&v264[16];
      }
      if (v237 <= v108)
        goto LABEL_506;
      *(_DWORD *)(v239 + 4 * v108) = v113;
      if (*(_QWORD *)&v264[40])
      {
        if (v267)
          (*(void (**)(void))(**(_QWORD **)&v264[40] + 40))();
        v267 = 0;
        v265 = 0uLL;
        *(_QWORD *)&v264[40] = 0;
        ++v266;
      }
      if (*(_QWORD *)v264 && *(_QWORD *)&v264[32])
        (*(void (**)(void))(**(_QWORD **)v264 + 40))();
      if (++v108 == v228)
        goto LABEL_182;
    }
    v92 = 0;
    v109 = *(_BYTE **)&v279[16];
    while ((unint64_t)v109 > v92)
    {
      re::GeomConnectivityManifold::edgeVertices((re::GeomConnectivityManifold *)buf, *(_DWORD *)(*(_QWORD *)&v281[2] + 4 * v92), v271);
      v6 = v92 + 1;
      v109 = *(_BYTE **)&v264[16];
      if (*(_QWORD *)&v264[16] <= v92 + 1)
        goto LABEL_249;
      *(_DWORD *)(*(_QWORD *)&v264[32] + 4 * v92 + 4) = v271[v108 == v271[0]];
      v109 = *(_BYTE **)&v279[16];
      if (*(_QWORD *)&v279[16] <= v92)
        goto LABEL_250;
      v7 = *(unsigned int *)(*(_QWORD *)&v281[2] + 4 * v92);
      v66 = *((_QWORD *)&v255 + 1);
      if (*((_QWORD *)&v255 + 1) <= v7)
        goto LABEL_251;
      v66 = *((_QWORD *)&v265 + 1);
      if (*((_QWORD *)&v265 + 1) <= v6)
        goto LABEL_252;
      v267[++v92] = *(float *)(v257 + 4 * v7) * 0.5;
      if (v8 == v6)
        goto LABEL_161;
    }
    goto LABEL_248;
  }
LABEL_182:
  a3 = (unint64_t)v225;
  v114 = re::GeomMesh::addAttribute((uint64_t)v225, "cotangentLaplacianIndices", 4, 3);
  (*(void (**)(re::GeomAttribute *, _QWORD))(*(_QWORD *)v114 + 24))(v114, *(unsigned int *)&v268[16]);
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v114 + 16))(v114))
  {
    v115 = re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v114, 0);
    v116 = (_BYTE *)(*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v114 + 16))(v114);
  }
  else
  {
    v116 = 0;
    v115 = 0;
  }
  v117 = *(_BYTE **)&v268[16];
  a4 = (unint64_t)v221;
  v44 = (unint64_t)v222;
  v30 = (unint64_t)v230;
  v66 = v220;
  if (*(_QWORD *)&v268[16])
  {
    v118 = 0;
    v119 = *(_QWORD *)&v270[2];
    while (v116 != v118)
    {
      *(_DWORD *)(v115 + 4 * (_QWORD)v118) = *(_DWORD *)(v119 + 4 * (_QWORD)v118);
      if (v117 == ++v118)
        goto LABEL_189;
    }
LABEL_497:
    *(_QWORD *)v279 = 0;
    v283 = 0u;
    v284 = 0u;
    memset(v282, 0, sizeof(v282));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v264 = 136315906;
    *(_QWORD *)&v264[4] = "operator[]";
    *(_WORD *)&v264[12] = 1024;
    *(_DWORD *)&v264[14] = 609;
    *(_WORD *)&v264[18] = 2048;
    *(_QWORD *)&v264[20] = v116;
    *(_WORD *)&v264[28] = 2048;
    *(_QWORD *)&v264[30] = v116;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_498:
    *(_QWORD *)v279 = 0;
    v283 = 0u;
    v284 = 0u;
    memset(v282, 0, sizeof(v282));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v264 = 136315906;
    *(_QWORD *)&v264[4] = "operator[]";
    *(_WORD *)&v264[12] = 1024;
    *(_DWORD *)&v264[14] = 609;
    *(_WORD *)&v264[18] = 2048;
    *(_QWORD *)&v264[20] = v116;
    *(_WORD *)&v264[28] = 2048;
    *(_QWORD *)&v264[30] = v116;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_499:
    *(_QWORD *)v279 = 0;
    v283 = 0u;
    v284 = 0u;
    memset(v282, 0, sizeof(v282));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v264 = 136315906;
    *(_QWORD *)&v264[4] = "operator[]";
    *(_WORD *)&v264[12] = 1024;
    *(_DWORD *)&v264[14] = 609;
    *(_WORD *)&v264[18] = 2048;
    *(_QWORD *)&v264[20] = v116;
    *(_WORD *)&v264[28] = 2048;
    *(_QWORD *)&v264[30] = v116;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_500:
    v236[0] = 0;
    v283 = 0u;
    v284 = 0u;
    memset(v282, 0, sizeof(v282));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v268 = 136315906;
    *(_QWORD *)&v268[4] = "operator[]";
    *(_WORD *)&v268[12] = 1024;
    *(_DWORD *)&v268[14] = 601;
    *(_WORD *)&v268[18] = 2048;
    *(_QWORD *)&v268[20] = v6;
    v269 = 2048;
    *(_QWORD *)v270 = v66;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_501:
    v236[0] = 0;
    v283 = 0u;
    v284 = 0u;
    memset(v282, 0, sizeof(v282));
    j = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v268 = 136315906;
    *(_QWORD *)&v268[4] = "operator[]";
    *(_WORD *)&v268[12] = 1024;
    *(_DWORD *)&v268[14] = 601;
    *(_WORD *)&v268[18] = 2048;
    *(_QWORD *)&v268[20] = a3;
    v269 = 2048;
    *(_QWORD *)v270 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_502:
    *(_QWORD *)v272 = 0;
    v283 = 0u;
    v284 = 0u;
    memset(v282, 0, sizeof(v282));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v279 = 136315906;
    *(_QWORD *)&v279[4] = "operator[]";
    *(_WORD *)&v279[12] = 1024;
    *(_DWORD *)&v279[14] = 789;
    *(_WORD *)&v279[18] = 2048;
    *(_QWORD *)&v279[20] = j;
    v280 = 2048;
    *(_QWORD *)v281 = v44;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_503:
    v240 = 0;
    v283 = 0u;
    v284 = 0u;
    memset(v282, 0, sizeof(v282));
    v108 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v272[0] = 136315906;
    *(_QWORD *)&v272[1] = "operator[]";
    v273 = 1024;
    v274 = 789;
    v275 = 2048;
    v276 = 0;
    v277 = 2048;
    v278 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_504:
    v240 = 0;
    v30 = (unint64_t)v264;
    v283 = 0u;
    v284 = 0u;
    memset(v282, 0, sizeof(v282));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v272[0] = 136315906;
    *(_QWORD *)&v272[1] = "operator[]";
    v273 = 1024;
    v274 = 797;
    v275 = 2048;
    v276 = (_BYTE *)v108;
    v277 = 2048;
    v278 = (_BYTE *)v66;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_505:
    v240 = 0;
    v283 = 0u;
    v284 = 0u;
    memset(v282, 0, sizeof(v282));
    v108 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v272[0] = 136315906;
    *(_QWORD *)&v272[1] = "operator[]";
    v273 = 1024;
    v274 = 789;
    v275 = 2048;
    v276 = 0;
    v277 = 2048;
    v278 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_506:
    *(_QWORD *)v272 = 0;
    v44 = (unint64_t)v264;
    v283 = 0u;
    v284 = 0u;
    memset(v282, 0, sizeof(v282));
    v162 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v279 = 136315906;
    *(_QWORD *)&v279[4] = "operator[]";
    *(_WORD *)&v279[12] = 1024;
    *(_DWORD *)&v279[14] = 789;
    *(_WORD *)&v279[18] = 2048;
    *(_QWORD *)&v279[20] = v108;
    v280 = 2048;
    *(_QWORD *)v281 = v30;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_507:
    v236[0] = 0;
    v30 = (unint64_t)v264;
    v283 = 0u;
    v284 = 0u;
    memset(v282, 0, sizeof(v282));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v268 = 136315906;
    *(_QWORD *)&v268[4] = "operator[]";
    *(_WORD *)&v268[12] = 1024;
    *(_DWORD *)&v268[14] = 601;
    *(_WORD *)&v268[18] = 2048;
    *(_QWORD *)&v268[20] = v162;
    v269 = 2048;
    *(_QWORD *)v270 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_508:
    v236[0] = 0;
    v283 = 0u;
    v284 = 0u;
    memset(v282, 0, sizeof(v282));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v268 = 136315906;
    *(_QWORD *)&v268[4] = "operator[]";
    *(_WORD *)&v268[12] = 1024;
    *(_DWORD *)&v268[14] = 609;
    *(_WORD *)&v268[18] = 2048;
    *(_QWORD *)&v268[20] = v30;
    v269 = 2048;
    *(_QWORD *)v270 = v30;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_509:
    v236[0] = 0;
    v283 = 0u;
    v284 = 0u;
    memset(v282, 0, sizeof(v282));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v268 = 136315906;
    *(_QWORD *)&v268[4] = "operator[]";
    *(_WORD *)&v268[12] = 1024;
    *(_DWORD *)&v268[14] = 601;
    *(_WORD *)&v268[18] = 2048;
    *(_QWORD *)&v268[20] = v44;
    v269 = 2048;
    *(_QWORD *)v270 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_510:
    v236[0] = 0;
    v112 = (unint64_t)v264;
    v283 = 0u;
    v284 = 0u;
    memset(v282, 0, sizeof(v282));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v268 = 136315906;
    *(_QWORD *)&v268[4] = "operator[]";
    *(_WORD *)&v268[12] = 1024;
    *(_DWORD *)&v268[14] = 609;
    *(_WORD *)&v268[18] = 2048;
    *(_QWORD *)&v268[20] = v30;
    v269 = 2048;
    *(_QWORD *)v270 = v30;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_511:
    *(_QWORD *)v272 = 0;
    v203 = v264;
    v283 = 0u;
    v284 = 0u;
    memset(v282, 0, sizeof(v282));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v279 = 136315906;
    *(_QWORD *)&v279[4] = "operator[]";
    *(_WORD *)&v279[12] = 1024;
    *(_DWORD *)&v279[14] = 789;
    *(_WORD *)&v279[18] = 2048;
    *(_QWORD *)&v279[20] = v112;
    v280 = 2048;
    *(_QWORD *)v281 = v30;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_512:
    v236[0] = 0;
    v283 = 0u;
    v284 = 0u;
    memset(v282, 0, sizeof(v282));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v268 = 136315906;
    *(_QWORD *)&v268[4] = "operator[]";
    *(_WORD *)&v268[12] = 1024;
    *(_DWORD *)&v268[14] = 789;
    *(_WORD *)&v268[18] = 2048;
    *(_QWORD *)&v268[20] = v30;
    v269 = 2048;
    *(_QWORD *)v270 = v203;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_513:
    v236[0] = 0;
    v283 = 0u;
    v284 = 0u;
    memset(v282, 0, sizeof(v282));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v268 = 136315906;
    *(_QWORD *)&v268[4] = "operator[]";
    *(_WORD *)&v268[12] = 1024;
    *(_DWORD *)&v268[14] = 609;
    *(_WORD *)&v268[18] = 2048;
    *(_QWORD *)&v268[20] = v30;
    v269 = 2048;
    *(_QWORD *)v270 = v30;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_514:
    v236[0] = 0;
    v283 = 0u;
    v284 = 0u;
    memset(v282, 0, sizeof(v282));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v268 = 136315906;
    *(_QWORD *)&v268[4] = "operator[]";
    *(_WORD *)&v268[12] = 1024;
    *(_DWORD *)&v268[14] = 789;
    *(_WORD *)&v268[18] = 2048;
    *(_QWORD *)&v268[20] = v66;
    v269 = 2048;
    *(_QWORD *)v270 = v203;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_515:
    v236[0] = 0;
    v283 = 0u;
    v284 = 0u;
    memset(v282, 0, sizeof(v282));
    v90 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v268 = 136315906;
    *(_QWORD *)&v268[4] = "operator[]";
    *(_WORD *)&v268[12] = 1024;
    *(_DWORD *)&v268[14] = 601;
    *(_WORD *)&v268[18] = 2048;
    *(_QWORD *)&v268[20] = a4;
    v269 = 2048;
    *(_QWORD *)v270 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_516;
  }
LABEL_189:
  v120 = re::GeomMesh::addAttribute((uint64_t)v225, "cotangentLaplacianEndIndices", 4, 3);
  (*(void (**)(re::GeomAttribute *, _QWORD))(*(_QWORD *)v120 + 24))(v120, v237);
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v120 + 16))(v120))
  {
    v121 = re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v120, 0);
    v116 = (_BYTE *)(*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v120 + 16))(v120);
  }
  else
  {
    v116 = 0;
    v121 = 0;
  }
  v122 = v237;
  if (v237)
  {
    v123 = 0;
    v124 = v239;
    while (v116 != v123)
    {
      *(_DWORD *)(v121 + 4 * (_QWORD)v123) = *(_DWORD *)(v124 + 4 * (_QWORD)v123);
      if ((_BYTE *)v122 == ++v123)
        goto LABEL_196;
    }
    goto LABEL_498;
  }
LABEL_196:
  v125 = re::GeomMesh::addAttribute((uint64_t)v225, "cotangentLaplacianWeights", 4, 4);
  (*(void (**)(re::GeomAttribute *, _QWORD))(*(_QWORD *)v125 + 24))(v125, v233);
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v125 + 16))(v125))
  {
    v126 = re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v125, 0);
    v116 = (_BYTE *)(*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v125 + 16))(v125);
  }
  else
  {
    v116 = 0;
    v126 = 0;
  }
  v127 = v233;
  if (v233)
  {
    v128 = 0;
    v129 = v235;
    while (v116 != v128)
    {
      *(_DWORD *)(v126 + 4 * (_QWORD)v128) = *(_DWORD *)(v129 + 4 * (_QWORD)v128);
      if (v127 == ++v128)
        goto LABEL_203;
    }
    goto LABEL_499;
  }
LABEL_203:
  if (*((_QWORD *)&v260 + 1))
  {
    if (v263)
      (*(void (**)(void))(**((_QWORD **)&v260 + 1) + 40))();
    v263 = 0;
    v261 = 0uLL;
    *((_QWORD *)&v260 + 1) = 0;
    ++v262;
  }
  if (*((_QWORD *)&v257 + 1))
  {
    if ((_QWORD)v260)
      (*(void (**)(void))(**((_QWORD **)&v257 + 1) + 40))();
    *(_QWORD *)&v260 = 0;
    v258 = 0uLL;
    *((_QWORD *)&v257 + 1) = 0;
    ++v259;
  }
  if (*((_QWORD *)&v254 + 1))
  {
    if ((_QWORD)v257)
      (*(void (**)(void))(**((_QWORD **)&v254 + 1) + 40))();
    *(_QWORD *)&v257 = 0;
    v255 = 0uLL;
    *((_QWORD *)&v254 + 1) = 0;
    ++v256;
  }
  if (*((_QWORD *)&v251 + 1))
  {
    if ((_QWORD)v254)
      (*(void (**)(void))(**((_QWORD **)&v251 + 1) + 40))();
    *(_QWORD *)&v254 = 0;
    v252 = 0uLL;
    *((_QWORD *)&v251 + 1) = 0;
    ++v253;
  }
  if (v247)
  {
    if ((_QWORD)v251)
      (*(void (**)(void))(*(_QWORD *)v247 + 40))();
    *(_QWORD *)&v251 = 0;
    v248 = 0;
    v249 = 0;
    v247 = 0;
    ++v250;
  }
  re::GeomConnectivityManifold::~GeomConnectivityManifold((re::GeomConnectivityManifold *)buf);
  if (v232[0] && v235)
    (*(void (**)(void))(*(_QWORD *)v232[0] + 40))();
  if (v236[0] && v239)
    (*(void (**)(void))(*(_QWORD *)v236[0] + 40))();
  if (*(_QWORD *)v268 && *(_QWORD *)&v270[2])
    (*(void (**)(void))(**(_QWORD **)v268 + 40))();
  v64 = v215;
LABEL_233:
  if (!(_DWORD)v66)
    goto LABEL_302;
  if (*(_BYTE *)(v30 + 8))
    v130 = 0;
  else
    v130 = v64;
  if (!v130
    || (v131 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v44, "vertexNormal")) == 0|| *(_BYTE *)(v131 + 16) != 3)
  {
LABEL_282:
    v282[4] = 0;
    memset(v282, 0, 28);
    *(_QWORD *)&v264[32] = 0;
    memset(v264, 0, 28);
    re::computeVertexFaceConnectivity(a3, (uint64_t)v282, (unint64_t)v264);
    v137 = re::GeomMesh::addAttribute(a3, "vertexAdjacencies", 4, 3);
    (*(void (**)(re::GeomAttribute *, _QWORD))(*(_QWORD *)v137 + 24))(v137, LODWORD(v282[2]));
    if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v137 + 16))(v137))
    {
      v138 = re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v137, 0);
      v139 = (_BYTE *)(*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v137 + 16))(v137);
    }
    else
    {
      v139 = 0;
      v138 = 0;
    }
    v140 = (_BYTE *)v282[2];
    if (v282[2])
    {
      v141 = 0;
      v142 = v282[4];
      while (v139 != v141)
      {
        *(_DWORD *)(v138 + 4 * (_QWORD)v141) = *(_DWORD *)(v142 + 4 * (_QWORD)v141);
        if (v140 == ++v141)
          goto LABEL_289;
      }
      goto LABEL_490;
    }
LABEL_289:
    v143 = re::GeomMesh::addAttribute(a3, "accumulatedVertexValence", 4, 3);
    (*(void (**)(re::GeomAttribute *, _QWORD))(*(_QWORD *)v143 + 24))(v143, *(unsigned int *)(a3 + 16));
    if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v143 + 16))(v143))
    {
      v144 = re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v143, 0);
      v139 = (_BYTE *)(*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v143 + 16))(v143);
    }
    else
    {
      v139 = 0;
      v144 = 0;
    }
    v145 = *(_BYTE **)&v264[16];
    if (*(_QWORD *)&v264[16])
    {
      v146 = 0;
      v147 = *(_QWORD *)&v264[32];
      while (v139 != v146)
      {
        *(_DWORD *)(v144 + 4 * (_QWORD)v146) = *(_DWORD *)(v147 + 4 * (_QWORD)v146);
        if (v145 == ++v146)
          goto LABEL_296;
      }
      goto LABEL_491;
    }
LABEL_296:
    if (*(_QWORD *)v264 && *(_QWORD *)&v264[32])
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v264 + 40))(*(_QWORD *)v264, *(_QWORD *)&v264[32]);
    if (v282[0] && v282[4])
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v282[0] + 40))(v282[0], v282[4]);
LABEL_302:
    v148 = 0;
    v149 = *(_DWORD *)(a3 + 16);
    *(_QWORD *)v264 = 0xFFFFFFFF00000000;
    *(_DWORD *)&v264[8] = -1;
    v264[12] = 0;
    if (v149 - 1 <= 0xFFFFFFFD)
    {
      *(_DWORD *)&v264[8] = v149 - 1;
      v148 = v149;
      *(_QWORD *)v264 = v149;
    }
    *(_DWORD *)&v264[16] = v148;
    v150 = *(unsigned int *)(a3 + 424);
    if (!*(_DWORD *)(a3 + 424))
      goto LABEL_431;
    v44 = a3 + 400;
    *(_QWORD *)&v281[2] = 0;
    memset(v279, 0, sizeof(v279));
    re::DynamicArray<double>::resize((uint64_t)v279, v150);
    v151 = 0;
    do
    {
      v152 = re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)(a3 + 400), v151);
      v30 = *(_QWORD *)&v279[16];
      if (*(_QWORD *)&v279[16] <= v151)
        goto LABEL_488;
      *(_QWORD *)(*(_QWORD *)&v281[2] + 8 * v151++) = *(_QWORD *)(v152 + 8);
    }
    while (v150 != v151);
    re::GeomMesh::GeomMesh((re::GeomMesh *)buf, 0);
    re::internal::buildMeshByConvertingFaceVaryingToVertexHelper(a3, (uint64_t)v279, (unint64_t)v264, (unint64_t)buf);
    if ((v66 & 1) != 0)
    {
      v153 = re::internal::GeomAttributeManager::attributeByName(v222, "vertexAdjacencies");
      v154 = re::internal::GeomAttributeManager::attributeByName(v222, "accumulatedVertexValence");
      v44 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v245, "vertexAdjacencies");
      v155 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v245, "accumulatedVertexValence");
      v156 = v242;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v154 + 16))(v154))
      {
        v66 = re::internal::GeomTypedAttribute<int>::operator[](v154, 0);
        LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v154 + 16))(v154);
      }
      else
      {
        LODWORD(v7) = 0;
        v66 = 0;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v153 + 16))(v153))
      {
        v218 = re::internal::GeomTypedAttribute<int>::operator[](v153, 0);
        v229 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v153 + 16))(v153);
        if ((_DWORD)v156)
          goto LABEL_314;
      }
      else
      {
        v229 = 0;
        v218 = 0;
        if ((_DWORD)v156)
        {
LABEL_314:
          v157 = 0;
          a4 = 0;
          while (1)
          {
            v158 = re::GeomIndexMap::operator[]((uint64_t)v264, v157);
            LODWORD(a3) = v158;
            if (v7 <= v158)
              goto LABEL_501;
            if (v158)
              v159 = *(_DWORD *)(v66 + 4 * (v158 - 1));
            else
              v159 = 0;
            a4 = (*(_DWORD *)(v66 + 4 * v158) + a4 - v159);
            v157 = (v157 + 1);
            if ((_DWORD)v156 == (_DWORD)v157)
              goto LABEL_323;
          }
        }
      }
      a4 = 0;
LABEL_323:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v155 + 24))(v155, v156);
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v44 + 24))(v44, a4);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v155 + 16))(v155))
      {
        a4 = re::internal::GeomTypedAttribute<float>::operator[](v155, 0);
        v30 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v155 + 16))(v155);
      }
      else
      {
        v30 = 0;
        a4 = 0;
      }
      if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v44 + 16))(v44))
      {
        v216 = re::internal::GeomTypedAttribute<float>::operator[](v44, 0);
        v44 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v44 + 16))(v44);
        if (!(_DWORD)v156)
          goto LABEL_349;
      }
      else
      {
        v44 = 0;
        v216 = 0;
        if (!(_DWORD)v156)
          goto LABEL_349;
      }
      a3 = 0;
      v160 = 0;
      while (1)
      {
        v161 = re::GeomIndexMap::operator[]((uint64_t)v264, a3);
        v162 = v161;
        if (v7 <= v161)
          goto LABEL_507;
        v163 = v161 ? *(_DWORD *)(v66 + 4 * (v161 - 1)) : 0;
        v164 = *(_DWORD *)(v66 + 4 * v161);
        v165 = v164 >= v163;
        v166 = v164 - v163;
        if (v166 != 0 && v165)
          break;
LABEL_347:
        if (a3 == v30)
          goto LABEL_508;
        *(_DWORD *)(a4 + 4 * a3++) = v160;
        if (a3 == v156)
          goto LABEL_349;
      }
      if (v163 <= v229)
        v167 = v229;
      else
        v167 = v163;
      v168 = (_DWORD *)(v216 + 4 * v160);
      if (v160 <= v44)
        v6 = v44;
      else
        v6 = v160;
      v169 = v6 - v160;
      v170 = (int *)(v218 + 4 * v163);
      v171 = v167 - v163;
      while (v171)
      {
        if (!v169)
          goto LABEL_483;
        v172 = *v170++;
        *v168++ = v172;
        ++v160;
        --v169;
        --v171;
        if (!--v166)
          goto LABEL_347;
      }
      v236[0] = 0;
      v30 = (unint64_t)v264;
      v283 = 0u;
      v284 = 0u;
      memset(v282, 0, sizeof(v282));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v268 = 136315906;
      *(_QWORD *)&v268[4] = "operator[]";
      *(_WORD *)&v268[12] = 1024;
      *(_DWORD *)&v268[14] = 601;
      *(_WORD *)&v268[18] = 2048;
      *(_QWORD *)&v268[20] = v167;
      v269 = 2048;
      *(_QWORD *)v270 = v229;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_483:
      v236[0] = 0;
      v283 = 0u;
      v284 = 0u;
      memset(v282, 0, sizeof(v282));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v268 = 136315906;
      *(_QWORD *)&v268[4] = "operator[]";
      *(_WORD *)&v268[12] = 1024;
      *(_DWORD *)&v268[14] = 609;
      *(_WORD *)&v268[18] = 2048;
      *(_QWORD *)&v268[20] = v6;
      v269 = 2048;
      *(_QWORD *)v270 = v44;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_484:
      v236[0] = 0;
      v283 = 0u;
      v284 = 0u;
      memset(v282, 0, sizeof(v282));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v268 = 136315906;
      *(_QWORD *)&v268[4] = "operator[]";
      *(_WORD *)&v268[12] = 1024;
      *(_DWORD *)&v268[14] = 601;
      *(_WORD *)&v268[18] = 2048;
      *(_QWORD *)&v268[20] = (a4 + v44);
      v269 = 2048;
      *(_QWORD *)v270 = v229;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_485:
      v236[0] = 0;
      v283 = 0u;
      v284 = 0u;
      memset(v282, 0, sizeof(v282));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v268 = 136315906;
      *(_QWORD *)&v268[4] = "operator[]";
      *(_WORD *)&v268[12] = 1024;
      *(_DWORD *)&v268[14] = 609;
      *(_WORD *)&v268[18] = 2048;
      *(_QWORD *)&v268[20] = (v66 + v44);
      v269 = 2048;
      *(_QWORD *)v270 = v222;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_486:
      v236[0] = 0;
      v283 = 0u;
      v284 = 0u;
      memset(v282, 0, sizeof(v282));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v268 = 136315906;
      *(_QWORD *)&v268[4] = "operator[]";
      *(_WORD *)&v268[12] = 1024;
      *(_DWORD *)&v268[14] = 601;
      *(_WORD *)&v268[18] = 2048;
      *(_QWORD *)&v268[20] = v44 + a4;
      v269 = 2048;
      *(_QWORD *)v270 = v218;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_487:
      v236[0] = 0;
      v283 = 0u;
      v284 = 0u;
      memset(v282, 0, sizeof(v282));
      v151 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v268 = 136315906;
      *(_QWORD *)&v268[4] = "operator[]";
      *(_WORD *)&v268[12] = 1024;
      *(_DWORD *)&v268[14] = 609;
      *(_WORD *)&v268[18] = 2048;
      *(_QWORD *)&v268[20] = v44 + v66;
      v269 = 2048;
      *(_QWORD *)v270 = v216;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_488:
      *(_QWORD *)v268 = 0;
      v244 = 0u;
      v245[0] = 0u;
      v243 = 0u;
      *(_OWORD *)buf = 0u;
      v242 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v282[0]) = 136315906;
      *(_QWORD *)((char *)v282 + 4) = "operator[]";
      WORD2(v282[1]) = 1024;
      *(_DWORD *)((char *)&v282[1] + 6) = 789;
      WORD1(v282[2]) = 2048;
      *(_QWORD *)((char *)&v282[2] + 4) = v151;
      WORD2(v282[3]) = 2048;
      *(_QWORD *)((char *)&v282[3] + 6) = v30;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_489:
      *(_QWORD *)v279 = 0;
      v139 = v264;
      v283 = 0u;
      v284 = 0u;
      memset(v282, 0, sizeof(v282));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v264 = 136315906;
      *(_QWORD *)&v264[4] = "operator[]";
      *(_WORD *)&v264[12] = 1024;
      *(_DWORD *)&v264[14] = 789;
      *(_WORD *)&v264[18] = 2048;
      *(_QWORD *)&v264[20] = v30;
      *(_WORD *)&v264[28] = 2048;
      *(_QWORD *)&v264[30] = v44;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_490:
      *(_QWORD *)v268 = 0;
      v244 = 0u;
      v245[0] = 0u;
      v243 = 0u;
      *(_OWORD *)buf = 0u;
      v242 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v279 = 136315906;
      *(_QWORD *)&v279[4] = "operator[]";
      *(_WORD *)&v279[12] = 1024;
      *(_DWORD *)&v279[14] = 609;
      *(_WORD *)&v279[18] = 2048;
      *(_QWORD *)&v279[20] = v139;
      v280 = 2048;
      *(_QWORD *)v281 = v139;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_491:
      *(_QWORD *)v268 = 0;
      v244 = 0u;
      v245[0] = 0u;
      v243 = 0u;
      *(_OWORD *)buf = 0u;
      v242 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v279 = 136315906;
      *(_QWORD *)&v279[4] = "operator[]";
      *(_WORD *)&v279[12] = 1024;
      *(_DWORD *)&v279[14] = 609;
      *(_WORD *)&v279[18] = 2048;
      *(_QWORD *)&v279[20] = v139;
      v280 = 2048;
      *(_QWORD *)v281 = v139;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_492;
    }
LABEL_349:
    if (v230[8])
    {
      v173 = re::internal::GeomAttributeManager::attributeByName(v222, "cotangentLaplacianIndices");
      v174 = re::internal::GeomAttributeManager::attributeByName(v222, "cotangentLaplacianEndIndices");
      v223 = (re::internal::GeomAttributeManager *)re::internal::GeomAttributeManager::attributeByName(v222, "cotangentLaplacianWeights");
      v44 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v245, "cotangentLaplacianIndices");
      v217 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v245, "cotangentLaplacianEndIndices");
      v175 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v245, "cotangentLaplacianWeights");
      a3 = v242;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v174 + 16))(v174))
      {
        v7 = re::internal::GeomTypedAttribute<int>::operator[](v174, 0);
        v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 16))(v174);
        if ((_DWORD)a3)
          goto LABEL_352;
      }
      else
      {
        v66 = 0;
        v7 = 0;
        if ((_DWORD)a3)
        {
LABEL_352:
          a4 = 0;
          LODWORD(v176) = 0;
          while (1)
          {
            v177 = re::GeomIndexMap::operator[]((uint64_t)v264, a4);
            LODWORD(v6) = v177;
            if (v66 <= v177)
              goto LABEL_500;
            if (v177)
              v178 = *(_DWORD *)(v7 + 4 * (v177 - 1));
            else
              v178 = 0;
            v176 = (*(_DWORD *)(v7 + 4 * v177) + v176 - v178);
            a4 = (a4 + 1);
            if ((_DWORD)a3 == (_DWORD)a4)
              goto LABEL_361;
          }
        }
      }
      v176 = 0;
LABEL_361:
      (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v44 + 24))(v44, v176);
      v179 = v175;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v175 + 24))(v175, v176);
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v217 + 24))(v217, a3);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v173 + 16))(v173))
      {
        v214 = re::internal::GeomTypedAttribute<int>::operator[](v173, 0);
        v229 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v173 + 16))(v173);
      }
      else
      {
        v229 = 0;
        v214 = 0;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v174 + 16))(v174))
      {
        v180 = re::internal::GeomTypedAttribute<int>::operator[](v174, 0);
        LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 16))(v174);
      }
      else
      {
        LODWORD(v7) = 0;
        v180 = 0;
      }
      if ((*(unsigned int (**)(re::internal::GeomAttributeManager *))(*(_QWORD *)v223 + 16))(v223))
      {
        v213 = re::internal::GeomTypedAttribute<int>::operator[]((uint64_t)v223, 0);
        LODWORD(v218) = (*(uint64_t (**)(re::internal::GeomAttributeManager *))(*(_QWORD *)v223 + 16))(v223);
      }
      else
      {
        LODWORD(v218) = 0;
        v213 = 0;
      }
      if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v44 + 16))(v44))
      {
        v212 = re::internal::GeomTypedAttribute<float>::operator[](v44, 0);
        LODWORD(v222) = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v44 + 16))(v44);
      }
      else
      {
        LODWORD(v222) = 0;
        v212 = 0;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v217 + 16))(v217))
      {
        v181 = re::internal::GeomTypedAttribute<float>::operator[](v217, 0);
        v30 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v217 + 16))(v217);
      }
      else
      {
        v30 = 0;
        v181 = 0;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v179 + 16))(v179))
      {
        v6 = re::internal::GeomTypedAttribute<float>::operator[](v179, 0);
        LODWORD(v216) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v179 + 16))(v179);
        if (!(_DWORD)a3)
          goto LABEL_406;
        goto LABEL_380;
      }
      LODWORD(v216) = 0;
      v6 = 0;
      if ((_DWORD)a3)
      {
LABEL_380:
        v182 = 0;
        v66 = 0;
        while (1)
        {
          v183 = re::GeomIndexMap::operator[]((uint64_t)v264, v182);
          LODWORD(v44) = v183;
          if (v183)
          {
            a4 = v183 - 1;
            if (v7 <= a4)
              goto LABEL_515;
            a4 = *(unsigned int *)(v180 + 4 * a4);
          }
          else
          {
            a4 = 0;
          }
          if (v7 <= v183)
            goto LABEL_509;
          v184 = (*(_DWORD *)(v180 + 4 * v183) - a4);
          if ((_DWORD)v184)
            break;
LABEL_404:
          if (v182 == v30)
            goto LABEL_510;
          v66 = (v184 + v66);
          *(_DWORD *)(v181 + 4 * v182++) = v66;
          if (v182 == a3)
            goto LABEL_406;
        }
        v44 = 0;
        LODWORD(v185) = v229 - a4;
        if (v229 >= a4)
          v185 = v185;
        else
          v185 = 0;
        LODWORD(v186) = (_DWORD)v222 - v66;
        if (v222 >= v66)
          v186 = v186;
        else
          v186 = 0;
        LODWORD(v187) = v218 - a4;
        if (v218 >= a4)
          v187 = v187;
        else
          v187 = 0;
        LODWORD(v188) = v216 - v66;
        if (v216 >= v66)
          v188 = v188;
        else
          v188 = 0;
        while (v185 != v44)
        {
          if (v186 == v44)
            goto LABEL_485;
          *(_DWORD *)(v212 + 4 * v66 + 4 * v44) = *(_DWORD *)(v214 + 4 * a4 + 4 * v44);
          if (v187 == v44)
            goto LABEL_486;
          if (v188 == v44)
            goto LABEL_487;
          *(_DWORD *)(v6 + 4 * v66 + 4 * v44) = *(_DWORD *)(v213 + 4 * a4 + 4 * v44);
          if (v184 == ++v44)
            goto LABEL_404;
        }
        goto LABEL_484;
      }
    }
LABEL_406:
    a4 = (unint64_t)v221;
    re::remapIndexMap((unsigned int *)v264, v221, (uint64_t)v282);
    re::GeomIndexMap::operator=((uint64_t)v221, (uint64_t)v282);
    a3 = (unint64_t)v225;
    if (!BYTE4(v282[1]))
      goto LABEL_417;
    if (BYTE4(v282[1]) == 2)
    {
      v190 = *((_QWORD *)&v284 + 1);
      if (!*((_QWORD *)&v284 + 1))
        goto LABEL_417;
      if (v282[3])
        v282[3] = 0;
      if (!v282[2])
        goto LABEL_417;
LABEL_416:
      (*(void (**)(uint64_t))(*(_QWORD *)v190 + 40))(v190);
LABEL_417:
      re::GeomMesh::operator=(v225, (uint64_t *)buf);
      re::GeomMesh::~GeomMesh((re::GeomMesh *)buf, v191);
      if (*(_QWORD *)v279)
      {
        v192 = *(_QWORD *)&v281[2];
        if (*(_QWORD *)&v281[2])
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v279 + 40))(*(_QWORD *)v279, *(_QWORD *)&v281[2]);
      }
      v30 = (unint64_t)v230;
      LODWORD(v66) = v220;
      switch(v264[12])
      {
        case 0:
          goto LABEL_431;
        case 2:
          v193 = v267;
          if (!v267)
            goto LABEL_431;
          if (*(_QWORD *)&v264[24])
            *(_QWORD *)&v264[24] = 0;
          if (!*(_QWORD *)&v264[16])
            goto LABEL_431;
LABEL_430:
          (*(void (**)(float *))(*(_QWORD *)v193 + 40))(v193);
LABEL_431:
          v194 = *(_DWORD *)(a3 + 16);
          if (!*(_BYTE *)(v30 + 1))
          {
            v196 = v227;
LABEL_477:
            v211 = HasSkinningData;
            if (v194 == *((_DWORD *)v196 + 4))
              v211 = 0;
            if (v211)
              re::remapSkinningAttributes((re *)a3, v196, (const re::GeomMesh *)a4, v65);
            *a6 = 1;
            re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v231);
            return;
          }
          v195 = *(_DWORD *)(a3 + 40);
          v196 = v227;
          if (*(_DWORD *)(a3 + 8) != v195 || (float)((float)v194 / (float)v195) >= 1.2)
            goto LABEL_477;
          v197 = 0;
          *(_QWORD *)v264 = 0xFFFFFFFF00000000;
          *(_DWORD *)&v264[8] = -1;
          v264[12] = 0;
          if (v195 - 1 <= 0xFFFFFFFD)
          {
            *(_DWORD *)&v264[8] = v195 - 1;
            v197 = v195;
            *(_QWORD *)v264 = v195;
          }
          *(_DWORD *)&v264[16] = v197;
          re::internal::makeVertexCacheCoherentMesh((const char **)a3, (const re::GeomMesh *)v264, (re::GeomMesh *)buf);
          re::remapIndexMap((unsigned int *)v264, a5, (uint64_t)v282);
          re::GeomIndexMap::operator=((uint64_t)a5, (uint64_t)v282);
          if (!BYTE4(v282[1]))
            goto LABEL_448;
          if (BYTE4(v282[1]) == 2)
          {
            v199 = *((_QWORD *)&v284 + 1);
            if (!*((_QWORD *)&v284 + 1))
              goto LABEL_448;
            if (v282[3])
              v282[3] = 0;
            if (!v282[2])
              goto LABEL_448;
LABEL_447:
            (*(void (**)(uint64_t))(*(_QWORD *)v199 + 40))(v199);
LABEL_448:
            if ((_DWORD)v66)
            {
              v200 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v245, "vertexAdjacencies");
              *(_QWORD *)&v281[2] = 0;
              memset(v279, 0, sizeof(v279));
              re::DynamicArray<float>::resize((uint64_t)v279, DWORD2(v243));
              v66 = DWORD2(v243);
              if (DWORD2(v243))
              {
                v201 = 0;
                do
                {
                  v202 = re::GeomIndexMap::operator[]((uint64_t)v264, v201);
                  v30 = v202;
                  v203 = *(_BYTE **)&v279[16];
                  if (*(_QWORD *)&v279[16] <= (unint64_t)v202)
                    goto LABEL_512;
                  *(_DWORD *)(*(_QWORD *)&v281[2] + 4 * v202) = v201;
                  v201 = (v201 + 1);
                }
                while ((_DWORD)v66 != (_DWORD)v201);
              }
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v200 + 16))(v200))
              {
                v204 = re::internal::GeomTypedAttribute<float>::operator[](v200, 0);
                v30 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v200 + 16))(v200);
              }
              else
              {
                v30 = 0;
                v204 = 0;
              }
              v205 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v200 + 16))(v200);
              if (v205)
              {
                v206 = 0;
                v203 = *(_BYTE **)&v279[16];
                v207 = *(_QWORD *)&v281[2];
                while ((_BYTE *)v30 != v206)
                {
                  v66 = *(unsigned int *)(v204 + 4 * (_QWORD)v206);
                  if ((unint64_t)v203 <= v66)
                    goto LABEL_514;
                  *(_DWORD *)(v204 + 4 * (_QWORD)v206++) = *(_DWORD *)(v207 + 4 * v66);
                  if ((_BYTE *)v205 == v206)
                    goto LABEL_461;
                }
                goto LABEL_513;
              }
LABEL_461:
              if (*(_QWORD *)v279 && *(_QWORD *)&v281[2])
                (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v279 + 40))(*(_QWORD *)v279, *(_QWORD *)&v281[2]);
              v196 = v227;
            }
            re::GeomMesh::operator=((uint64_t *)a3, (uint64_t *)buf);
            re::GeomMesh::~GeomMesh((re::GeomMesh *)buf, v208);
            switch(v264[12])
            {
              case 0:
                goto LABEL_476;
              case 2:
                v210 = v267;
                if (!v267)
                  goto LABEL_476;
                if (*(_QWORD *)&v264[24])
                  *(_QWORD *)&v264[24] = 0;
                if (!*(_QWORD *)&v264[16])
                  goto LABEL_476;
LABEL_475:
                (*(void (**)(float *))(*(_QWORD *)v210 + 40))(v210);
LABEL_476:
                v194 = *(_DWORD *)(a3 + 16);
                goto LABEL_477;
              case 1:
                v210 = *(float **)&v264[16];
                if (!*(_QWORD *)&v264[16] || !(_QWORD)v265)
                  goto LABEL_476;
                goto LABEL_475;
            }
LABEL_523:
            re::internal::assertLog((re::internal *)4, v209, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
            _os_crash();
            __break(1u);
            goto LABEL_524;
          }
          if (BYTE4(v282[1]) == 1)
          {
            v199 = v282[2];
            if (!v282[2] || !(_QWORD)v283)
              goto LABEL_448;
            goto LABEL_447;
          }
LABEL_522:
          re::internal::assertLog((re::internal *)4, v198, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
          _os_crash();
          __break(1u);
          goto LABEL_523;
        case 1:
          v193 = *(float **)&v264[16];
          if (!*(_QWORD *)&v264[16] || !(_QWORD)v265)
            goto LABEL_431;
          goto LABEL_430;
      }
LABEL_521:
      re::internal::assertLog((re::internal *)4, v192, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
      _os_crash();
      __break(1u);
      goto LABEL_522;
    }
    if (BYTE4(v282[1]) == 1)
    {
      v190 = v282[2];
      if (!v282[2] || !(_QWORD)v283)
        goto LABEL_417;
      goto LABEL_416;
    }
LABEL_520:
    re::internal::assertLog((re::internal *)4, v189, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    _os_crash();
    __break(1u);
    goto LABEL_521;
  }
  *(_QWORD *)&v264[32] = 0;
  memset(v264, 0, 28);
  *(_QWORD *)buf = 0xFFFFFFFF00000000;
  *(_DWORD *)&buf[8] = -1;
  buf[12] = 0;
  v132 = buf;
  LODWORD(v242) = 0;
  re::DynamicArray<re::TransitionCondition *>::add(v264, &re::GeomAttributeNames::kDefaultNormal);
  re::internal::buildMeshBySplittingFaceVaryingToVertexHelper((_QWORD *)a3, (uint64_t)v264, (unint64_t)buf, a3);
  re::remapIndexMap((unsigned int *)buf, (const re::GeomIndexMap *)a4, (uint64_t)v282);
  re::GeomIndexMap::operator=(a4, (uint64_t)v282);
  if (!BYTE4(v282[1]))
    goto LABEL_266;
  if (BYTE4(v282[1]) == 2)
  {
LABEL_261:
    v134 = *((_QWORD *)&v284 + 1);
    if (*((_QWORD *)&v284 + 1))
    {
      if (v282[3])
        v282[3] = 0;
      v133 = v282[2];
      if (v282[2])
        goto LABEL_265;
    }
LABEL_266:
    switch(buf[12])
    {
      case 0u:
        goto LABEL_279;
      case 2u:
        v135 = *((_QWORD *)&v245[0] + 1);
        if (!*((_QWORD *)&v245[0] + 1))
          goto LABEL_279;
        if (*((_QWORD *)&v242 + 1))
          *((_QWORD *)&v242 + 1) = 0;
        if (!(_QWORD)v242)
          goto LABEL_279;
        v136 = (__int128 *)(v132 + 16);
        break;
      case 1u:
        v135 = v242;
        if (!(_QWORD)v242)
          goto LABEL_279;
        v136 = &v244;
        if (!(_QWORD)v244)
          goto LABEL_278;
        break;
      default:
        goto LABEL_525;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v135 + 40))(v135);
LABEL_278:
    *(_QWORD *)v136 = 0;
LABEL_279:
    if (*(_QWORD *)v264 && *(_QWORD *)&v264[32])
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v264 + 40))(*(_QWORD *)v264, *(_QWORD *)&v264[32]);
    goto LABEL_282;
  }
  if (BYTE4(v282[1]) == 1)
  {
    v134 = v282[2];
    if (!v282[2])
      goto LABEL_266;
    v133 = v283;
    if (!(_QWORD)v283)
      goto LABEL_266;
LABEL_265:
    (*(void (**)(uint64_t))(*(_QWORD *)v134 + 40))(v134);
    goto LABEL_266;
  }
LABEL_524:
  re::internal::assertLog((re::internal *)4, v133, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
  _os_crash();
  __break(1u);
LABEL_525:
  re::internal::assertLog((re::internal *)4, v133, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
  _os_crash();
  __break(1u);
}

void std::__function::__func<re::makeConditionedMeshForGPU(re::GeomMesh const&,re::MeshCompileOptions const&,re::GeomMesh&,re::GeomIndexMap &,re::GeomIndexMap &)::$_0,std::allocator<re::makeConditionedMeshForGPU(re::GeomMesh const&,re::MeshCompileOptions const&,re::GeomMesh&,re::GeomIndexMap &,re::GeomIndexMap &)::$_0>,BOOL ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::makeConditionedMeshForGPU(re::GeomMesh const&,re::MeshCompileOptions const&,re::GeomMesh&,re::GeomIndexMap &,re::GeomIndexMap &)::$_0,std::allocator<re::makeConditionedMeshForGPU(re::GeomMesh const&,re::MeshCompileOptions const&,re::GeomMesh&,re::GeomIndexMap &,re::GeomIndexMap &)::$_0>,BOOL ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_24ED7D148;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<re::makeConditionedMeshForGPU(re::GeomMesh const&,re::MeshCompileOptions const&,re::GeomMesh&,re::GeomIndexMap &,re::GeomIndexMap &)::$_0,std::allocator<re::makeConditionedMeshForGPU(re::GeomMesh const&,re::MeshCompileOptions const&,re::GeomMesh&,re::GeomIndexMap &,re::GeomIndexMap &)::$_0>,BOOL ()(unsigned int,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24ED7D148;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<re::makeConditionedMeshForGPU(re::GeomMesh const&,re::MeshCompileOptions const&,re::GeomMesh&,re::GeomIndexMap &,re::GeomIndexMap &)::$_0,std::allocator<re::makeConditionedMeshForGPU(re::GeomMesh const&,re::MeshCompileOptions const&,re::GeomMesh&,re::GeomIndexMap &,re::GeomIndexMap &)::$_0>,BOOL ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  uint64_t i;

  v3 = *a2;
  v4 = *a3;
  if ((_DWORD)v3)
  {
    v5 = *(_DWORD *)(a1 + 48);
    if (v5 <= (int)v3 - 1)
    {
LABEL_36:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_37:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v6 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * (v3 - 1));
  }
  else
  {
    v6 = 0;
    v5 = *(_DWORD *)(a1 + 48);
  }
  if (v5 <= v3)
    goto LABEL_34;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(unsigned int *)(v7 + 4 * v3);
  if ((_DWORD)v4)
  {
    if (v5 <= (int)v4 - 1)
      goto LABEL_37;
    v9 = *(_DWORD *)(v7 + 4 * (v4 - 1));
  }
  else
  {
    v9 = 0;
  }
  if (v5 <= v4)
    goto LABEL_35;
  if ((_DWORD)v8 - v6 != *(_DWORD *)(v7 + 4 * v4) - v9)
    return 0;
  if ((_DWORD)v8 != v6)
  {
    v10 = *(_DWORD *)(a1 + 16);
    if (v6 <= v10)
      v11 = v10;
    else
      v11 = v6;
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(unsigned int *)(a1 + 32);
    v14 = *(_QWORD *)(a1 + 24);
    if (v6 <= v13)
      v15 = *(unsigned int *)(a1 + 32);
    else
      v15 = v6;
    v16 = (_DWORD *)(v14 + 4 * v6);
    v17 = v8 - v6;
    v18 = (float *)(v12 + 4 * v6);
    v19 = v15 - v6;
    for (i = v11 - v6; i; --i)
    {
      if (v10 <= v9)
        goto LABEL_31;
      if (*v18 != *(float *)(v12 + 4 * v9))
        return 0;
      if (!v19)
        goto LABEL_32;
      if (v13 <= v9)
        goto LABEL_33;
      if (*v16 != *(_DWORD *)(v14 + 4 * v9))
        return 0;
      ++v16;
      ++v18;
      --v19;
      if (!--v17)
        return 1;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_31:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_32:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_33:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_34:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_35:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_36;
  }
  return 1;
}

uint64_t std::__function::__func<re::makeConditionedMeshForGPU(re::GeomMesh const&,re::MeshCompileOptions const&,re::GeomMesh&,re::GeomIndexMap &,re::GeomIndexMap &)::$_0,std::allocator<re::makeConditionedMeshForGPU(re::GeomMesh const&,re::MeshCompileOptions const&,re::GeomMesh&,re::GeomIndexMap &,re::GeomIndexMap &)::$_0>,BOOL ()(unsigned int,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::makeConditionedMeshForGPU(re::GeomMesh const&,re::MeshCompileOptions const&,re::GeomMesh&,re::GeomIndexMap &,re::GeomIndexMap &)::$_0,std::allocator<re::makeConditionedMeshForGPU(re::GeomMesh const&,re::MeshCompileOptions const&,re::GeomMesh&,re::GeomIndexMap &,re::GeomIndexMap &)::$_0>,BOOL ()(unsigned int,unsigned int)>::target_type()
{
}

void re::loadGeomSceneFromFile(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const std::error_category *v6;
  _BYTE v7[40];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[6];
  uint64_t v15[3];
  int v16;
  __int128 v17;
  __int128 v18;
  int v19;
  _QWORD v20[4];
  int v21;
  _BYTE v22[44];
  uint64_t v23;
  _BYTE v24[16];

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v24, 4502, 0);
  memset(v15, 0, sizeof(v15));
  v17 = 0u;
  v18 = 0u;
  v16 = 0;
  v19 = 0;
  memset(v20, 0, sizeof(v20));
  v21 = 0;
  memset(v22, 0, sizeof(v22));
  v23 = 0x7FFFFFFFLL;
  if (re::convertMDLAssetToGeomScene(a1, (uint64_t)v15, (_BYTE *)(a2 + 16)))
  {
    re::types::Ok<re::GeomScene>::Ok((uint64_t)v7, v15);
    re::Result<re::GeomScene,re::Error>::Result(a3, (uint64_t)v7);
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v14);
    re::DynamicArray<re::GeomSkeleton>::deinit((uint64_t)&v13);
    if (v8)
    {
      if (v12)
        (*(void (**)(void))(*(_QWORD *)v8 + 40))();
      v12 = 0;
      v9 = 0;
      v10 = 0;
      v8 = 0;
      ++v11;
    }
    re::DynamicArray<re::GeomModelWithLods>::deinit((uint64_t)v7);
  }
  else
  {
    v6 = std::system_category();
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = v6;
  }
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v22[8]);
  re::DynamicArray<re::GeomSkeleton>::deinit((uint64_t)&v20[1]);
  if (*((_QWORD *)&v17 + 1))
  {
    if (v20[0])
      (*(void (**)(void))(**((_QWORD **)&v17 + 1) + 40))();
    v20[0] = 0;
    v18 = 0uLL;
    *((_QWORD *)&v17 + 1) = 0;
    ++v19;
  }
  re::DynamicArray<re::GeomModelWithLods>::deinit((uint64_t)v15);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v24);
}

void re::makeMeshAssetDataFromGeomScene(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  _anonymous_namespace_ *v6;
  __int128 v7;
  uint64_t v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _anonymous_namespace_ *v14;
  signed int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL i;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  const char *v35;
  __int128 v36;
  __int128 v37;
  _anonymous_namespace_ *v38;
  const re::GeomMesh *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  uint64_t v47;
  float *v48;
  BOOL v49;
  uint64_t v50;
  float v51;
  uint64_t v53;
  unsigned __int16 v54;
  float *v55;
  float v56;
  unsigned int v57;
  unsigned __int16 v58;
  uint64_t v59;
  unsigned __int16 v60;
  uint64_t v61;
  float *v62;
  float v63;
  unsigned int v64;
  unsigned __int16 v65;
  float v66;
  float32x4_t v67;
  float32x4_t v68;
  BOOL HasSkinningData;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  const re::GeomMesh *v85;
  uint64_t v86;
  unsigned int *v87;
  uint64_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  uint64_t v93;
  float32x4_t v94;
  float32x4_t v95;
  uint64_t v96;
  float32x4_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _anonymous_namespace_ *v102;
  signed int v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  const re::GeomMesh *v108;
  uint64_t v109;
  unint64_t j;
  __n128 v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  int v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 *v126;
  double v127;
  int v128;
  _QWORD *v129;
  __int128 v130;
  uint64_t v131;
  unint64_t v132;
  _OWORD *v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  double v139;
  double v140;
  uint64_t v141;
  float v142;
  BOOL v143;
  uint64_t v144;
  float v145;
  unint64_t v146;
  _anonymous_namespace_ *v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _anonymous_namespace_ *v152;
  const char *v153;
  __int128 v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  unsigned __int16 *v161;
  uint64_t v162;
  double v163;
  double v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  unint64_t v177;
  unint64_t *v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  int32x4_t v183;
  unint64_t *v184;
  __int128 v185;
  int v186;
  unsigned int v187;
  int v188;
  uint64_t v189;
  __int128 v190;
  uint64_t v191;
  float32x4_t v192;
  __int128 v193;
  unint64_t *v194;
  float32x4_t v195;
  __int128 v196;
  unint64_t *v197;
  _BYTE v198[21];
  uint64_t v199[7];
  _OWORD v200[2];
  int v201;
  uint64_t v202;
  _OWORD v203[2];
  int v204;
  uint64_t v205;
  uint64_t v206;
  __int128 v207;
  int v208;
  __int128 v209;
  __int128 v210;
  int v211;
  __int128 v212;
  __int128 v213;
  int v214;
  __int128 v215;
  __int128 v216;
  int v217;
  uint64_t v218;
  _BYTE v219[16];
  _OWORD v220[2];
  int v221;
  uint64_t v222;
  float32x4_t v223;
  float32x4_t v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  _OWORD v228[2];
  __int128 v229;
  __int128 v230;
  _BYTE v231[48];
  __int128 v232;
  _BYTE v233[24];
  uint64_t v234;
  _OWORD v235[2];
  int v236;
  _OWORD v237[2];
  int v238;
  _OWORD v239[2];
  int v240;
  _OWORD v241[2];
  int v242;
  _OWORD v243[2];
  int v244;
  _OWORD v245[2];
  int v246;
  _OWORD v247[2];
  int v248;
  _OWORD v249[2];
  int v250;
  _OWORD v251[2];
  int v252;
  uint64_t v253;
  _BYTE v254[144];
  __int128 v255;
  __int128 v256;
  _BYTE v257[24];
  __int128 v258;
  _BYTE v259[24];
  __int128 v260;
  int v261;
  __int128 v262;
  __int128 v263;
  int v264;
  __int128 v265;
  __int128 v266;
  int v267;
  __int128 v268;
  __int128 v269;
  int v270;
  __int128 v271;
  __int128 v272;
  int v273;
  __int128 v274;
  __int128 v275;
  int v276;
  __int128 v277;
  __int128 v278;
  int v279;
  uint64_t v280;
  _BYTE v281[12];
  __int16 v282;
  _BYTE v283[24];
  uint64_t v284;
  uint64_t v285;
  _BYTE v286[48];
  __int128 v287;
  uint64_t v288;
  _BYTE v289[48];
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  _BYTE v294[28];
  __int128 v295;
  __int128 v296;
  int v297;
  __int128 v298;
  __int128 v299;
  int v300;
  __int128 v301;
  __int128 v302;
  int v303;
  __int128 v304;
  __int128 v305;
  int v306;
  __int128 v307;
  __int128 v308;
  int v309;
  __int128 v310;
  __int128 v311;
  int v312;
  __int128 v313;
  __int128 v314;
  int v315;
  __int128 v316;
  __int128 v317;
  int v318;
  __int128 v319;
  __int128 v320;
  int v321;
  uint64_t v322;
  _BYTE v323[12];
  __int16 v324;
  int v325;
  __int16 v326;
  unint64_t v327;
  __int16 v328;
  unint64_t v329;
  uint64_t v330;

  v330 = *MEMORY[0x24BDAC8D0];
  v6 = re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v219, 4506, 0);
  v207 = 0uLL;
  v206 = 0;
  v208 = 0;
  v218 = 0;
  v7 = 0uLL;
  v209 = 0u;
  v210 = 0u;
  v212 = 0u;
  v213 = 0u;
  v211 = 0;
  v214 = 0;
  v215 = 0u;
  v216 = 0u;
  v217 = 0;
  v8 = *(_QWORD *)(a1 + 96);
  if (v8)
  {
    v6 = (_anonymous_namespace_ *)re::DynamicArray<re::MeshAssetSkeleton>::setCapacity((_QWORD *)&v212 + 1, *(_QWORD *)(a1 + 96));
    v7 = 0uLL;
  }
  v204 = 0;
  v203[0] = v7;
  v203[1] = v7;
  v205 = 0x7FFFFFFFLL;
  if ((2 * v8) <= 1)
    v9 = 1;
  else
    v9 = 2 * v8;
  v172 = a1;
  v10 = *(_QWORD *)(a1 + 96);
  if (v10)
  {
    v11 = *(_QWORD *)(a1 + 112) + 64;
    v4 = 160 * v10;
    v3 = (unint64_t)"MeshSkeleton";
    do
    {
      re::UniqueNameGenerator::uniqueName((re::UniqueNameGenerator *)v203, *(const char **)(v11 - 56), "MeshSkeleton", (re::StringID *)v228);
      re::FixedArray<re::StringID>::FixedArray((unint64_t *)&v228[1], v11 - 48);
      re::FixedArray<unsigned int>::FixedArray((uint64_t *)&v229 + 1, v11 - 24);
      re::FixedArray<re::GenericSRT<float>>::FixedArray(v231, v11);
      re::FixedArray<re::Matrix4x4<float>>::FixedArray((uint64_t *)&v231[24], v11 + 24);
      re::DynamicArray<re::MeshAssetSkeleton>::add((_QWORD *)&v212 + 1, (uint64_t *)v228);
      if (*(_QWORD *)&v231[24])
      {
        if (*(_QWORD *)&v231[32])
        {
          (*(void (**)(void))(**(_QWORD **)&v231[24] + 40))();
          *(_QWORD *)&v231[32] = 0;
          *(_QWORD *)&v231[40] = 0;
        }
        *(_QWORD *)&v231[24] = 0;
      }
      if (*(_QWORD *)v231)
      {
        if (*(_QWORD *)&v231[8])
        {
          (*(void (**)(void))(**(_QWORD **)v231 + 40))();
          *(_QWORD *)&v231[8] = 0;
          *(_QWORD *)&v231[16] = 0;
        }
        *(_QWORD *)v231 = 0;
      }
      if (*((_QWORD *)&v229 + 1))
      {
        if ((_QWORD)v230)
        {
          (*(void (**)(void))(**((_QWORD **)&v229 + 1) + 40))();
          v230 = 0uLL;
        }
        *((_QWORD *)&v229 + 1) = 0;
      }
      re::FixedArray<re::StringID>::deinit(&v228[1]);
      re::StringID::destroyString((re::StringID *)v228);
      v11 += 160;
      v4 -= 160;
    }
    while (v4);
  }
  v12 = (unint64_t)v289;
  v13 = *(_QWORD *)(a1 + 16);
  re::DynamicArray<re::MeshAssetModel>::resize((uint64_t)&v206, v13);
  v201 = 0;
  memset(v200, 0, sizeof(v200));
  v202 = 0x7FFFFFFFLL;
  if ((2 * v13) <= 1)
    v15 = 1;
  else
    v15 = 2 * v13;
  v16 = a2;
  if (v13)
  {
    v17 = 0;
    v183 = vdupq_n_s32(0x7F800000u);
    do
    {
      v18 = *(_QWORD *)(a1 + 16);
      if (v18 <= v17)
        goto LABEL_305;
      v18 = *((_QWORD *)&v207 + 1);
      if (*((_QWORD *)&v207 + 1) <= v17)
        goto LABEL_306;
      v19 = *(_QWORD *)(a1 + 32);
      v170 = v17;
      v20 = v19 + 152 * v17;
      v167 = v209;
      *(_OWORD *)v198 = *(_OWORD *)v16;
      *(_QWORD *)&v198[13] = *(_QWORD *)(v16 + 13);
      re::HashTable<re::DynamicString,re::MeshAttributeCompressionOption,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v199, a2 + 24);
      v21 = *(_QWORD *)(v20 + 8);
      if ((v21 & 1) != 0)
        v22 = v21 >> 1;
      else
        v22 = v21 >> 1;
      if (v22)
      {
        v23 = re::Hash<re::DynamicString>::operator()((uint64_t)v228, v20);
        if (*(_QWORD *)(a2 + 72))
        {
          v24 = *(unsigned int *)(*(_QWORD *)(a2 + 80) + 4 * (v23 % *(unsigned int *)(a2 + 96)));
          if ((_DWORD)v24 != 0x7FFFFFFF)
          {
            v25 = *(_QWORD *)(a2 + 88);
            while (1)
            {
              v3 = 120;
              if (re::DynamicString::operator==(v25 + 120 * v24 + 16, v20))
                break;
              v24 = *(_DWORD *)(v25 + 120 * v24 + 8) & 0x7FFFFFFF;
              if (v24 == 0x7FFFFFFF)
                goto LABEL_46;
            }
            v26 = re::Hash<re::DynamicString>::operator()((uint64_t)v228, v20);
            if (*(_QWORD *)(a2 + 72))
            {
              v27 = *(_QWORD *)(a2 + 88);
              v28 = *(unsigned int *)(*(_QWORD *)(a2 + 80) + 4 * (v26 % *(unsigned int *)(a2 + 96)));
              for (i = (_DWORD)v28 == 0x7FFFFFFF; !i; i = v28 == 0x7FFFFFFF)
              {
                v3 = 120;
                if (re::DynamicString::operator==(v27 + 120 * v28 + 16, v20))
                  goto LABEL_45;
                v28 = *(_DWORD *)(v27 + 120 * v28 + 8) & 0x7FFFFFFF;
              }
              v28 = 0x7FFFFFFFLL;
            }
            else
            {
              v27 = *(_QWORD *)(a2 + 88);
              v28 = 0x7FFFFFFFLL;
            }
LABEL_45:
            v30 = v27 + 120 * v28;
            v31 = *(_OWORD *)(v30 + 48);
            *(_QWORD *)&v198[13] = *(_QWORD *)(v30 + 61);
            *(_OWORD *)v198 = v31;
            re::HashTable<re::DynamicString,re::MeshAttributeCompressionOption,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)v199, v30 + 72);
          }
        }
      }
LABEL_46:
      v32 = v19 + 152 * v170;
      v33 = *(_QWORD *)(v32 + 48);
      v173 = (unint64_t *)(v32 + 48);
      v175 = v33;
      *(_QWORD *)v289 = 0;
      *(_QWORD *)&v289[8] = &str_110;
      *(int32x4_t *)&v289[16] = v183;
      *(_QWORD *)&v34 = 0x7F0000007FLL;
      *((_QWORD *)&v34 + 1) = 0x7F0000007FLL;
      *(_OWORD *)&v289[32] = v34;
      v322 = 0;
      LOBYTE(v34) = 0;
      BYTE4(v34) = 0;
      BYTE8(v34) = 0;
      BYTE12(v34) = 0;
      v290 = v34;
      v291 = v34;
      v292 = v34;
      v293 = v34;
      *(_OWORD *)v294 = v34;
      *(_OWORD *)&v294[12] = v34;
      v295 = v34;
      v296 = v34;
      v297 = 0;
      v298 = v34;
      v299 = v34;
      v300 = 0;
      v301 = v34;
      v302 = v34;
      v303 = 0;
      v306 = 0;
      v304 = v34;
      v305 = v34;
      v309 = 0;
      v307 = v34;
      v308 = v34;
      v312 = 0;
      v310 = v34;
      v311 = v34;
      v315 = 0;
      v313 = v34;
      v314 = v34;
      v318 = 0;
      v316 = v34;
      v317 = v34;
      v319 = v34;
      v320 = v34;
      v321 = 0;
      if ((*(_QWORD *)(v20 + 8) & 1) != 0)
        v35 = *(const char **)(v20 + 16);
      else
        v35 = (const char *)(v20 + 9);
      re::UniqueNameGenerator::uniqueName((re::UniqueNameGenerator *)v200, v35, "MeshModel", (re::StringID *)v286);
      v36 = *(_OWORD *)v286;
      *(_QWORD *)&v286[8] = &str_110;
      *(_QWORD *)v286 = 0;
      v37 = *(_OWORD *)v289;
      *(_OWORD *)v289 = v36;
      *(_QWORD *)&v254[8] = *((_QWORD *)&v37 + 1);
      *(_QWORD *)v254 = v36 & 0xFFFFFFFFFFFFFFFELL | v37 & 1;
      re::StringID::destroyString((re::StringID *)v254);
      re::StringID::destroyString((re::StringID *)v286);
      v40 = v33 - 1;
      if ((_DWORD)v33 == 1)
      {
        if (!*v173)
          goto LABEL_311;
        v189 = v19;
        a1 = *(_QWORD *)(v19 + 152 * v170 + 64);
        v187 = *(_DWORD *)(a1 + 48);
      }
      else
      {
        if (!(_DWORD)v33)
        {
          LOBYTE(v228[0]) = 0;
          *(_QWORD *)&v228[1] = 100;
          *((_QWORD *)&v228[1] + 1) = &re::AssetErrorCategory(void)::instance;
          v229 = *(_OWORD *)v254;
          v230 = *(_OWORD *)&v254[16];
          goto LABEL_233;
        }
        re::DynamicArray<re::MeshLodLevelInfo>::resize((uint64_t)&v304 + 8, v33);
        v41 = 0;
        v42 = 0;
        v43 = v19;
        v44 = *v173;
        v189 = v43;
        a1 = *(_QWORD *)(v43 + 152 * v170 + 64);
        v18 = *((_QWORD *)&v305 + 1);
        v45 = v307;
        v46 = (unsigned int *)(v307 + 8);
        v47 = 48;
        do
        {
          if (v44 == v41)
            goto LABEL_288;
          if (v18 == v41)
          {
LABEL_289:
            *(_QWORD *)v281 = 0;
            memset(v254, 0, 80);
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v286 = 136315906;
            *(_QWORD *)&v286[4] = "operator[]";
            *(_WORD *)&v286[12] = 1024;
            *(_DWORD *)&v286[14] = 789;
            *(_WORD *)&v286[18] = 2048;
            *(_QWORD *)&v286[20] = v18;
            *(_WORD *)&v286[28] = 2048;
            *(_QWORD *)&v286[30] = v18;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_290;
          }
          v42 += *(_DWORD *)(a1 + v47);
          *v46 = v42;
          v46 += 3;
          ++v41;
          v47 += 248;
        }
        while (v33 != v41);
        v187 = v42;
        v12 = *(_QWORD *)(v189 + 152 * v170 + 128);
        if (v40 != (_DWORD)v12)
          goto LABEL_80;
        if (v12 >= 2)
        {
          v55 = *(float **)(v189 + 152 * v170 + 144);
          v56 = v55[1];
          if (*v55 < v56)
            goto LABEL_80;
          v141 = 2;
          do
          {
            if (v12 == v141)
              goto LABEL_60;
            v142 = v55[v141++];
            v143 = v56 < v142;
            v56 = v142;
          }
          while (!v143);
          if (v141 - 1 < v12)
          {
LABEL_80:
            v57 = 0;
            v58 = 0;
            while (1)
            {
              v12 = v58;
              if (v18 <= v58)
                break;
              *(float *)(v45 + 12 * v58++) = (float)(1.0 / (float)(v57 + 2)) * (float)(1.0 / (float)(v57 + 2));
              v57 = (unsigned __int16)(v12 + 1);
              if (v57 >= v33)
                goto LABEL_87;
            }
LABEL_290:
            *(_QWORD *)v281 = 0;
            memset(v254, 0, 80);
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v286 = 136315906;
            *(_QWORD *)&v286[4] = "operator[]";
            *(_WORD *)&v286[12] = 1024;
            *(_DWORD *)&v286[14] = 789;
            *(_WORD *)&v286[18] = 2048;
            *(_QWORD *)&v286[20] = v12;
            *(_WORD *)&v286[28] = 2048;
            *(_QWORD *)&v286[30] = v18;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_291:
            *(_QWORD *)v281 = 0;
            memset(v254, 0, 80);
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v286 = 136315906;
            *(_QWORD *)&v286[4] = "operator[]";
            *(_WORD *)&v286[12] = 1024;
            *(_DWORD *)&v286[14] = 789;
            *(_WORD *)&v286[18] = 2048;
            *(_QWORD *)&v286[20] = v12;
            *(_WORD *)&v286[28] = 2048;
            *(_QWORD *)&v286[30] = v18;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_292:
            *(_QWORD *)&v220[0] = 0;
            memset(v254, 0, 80);
            v72 = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v281 = 136315906;
            *(_QWORD *)&v281[4] = "operator[]";
            v282 = 1024;
            *(_DWORD *)v283 = 601;
            *(_WORD *)&v283[4] = 2048;
            *(_QWORD *)&v283[6] = 1;
            *(_WORD *)&v283[14] = 2048;
            *(_QWORD *)&v283[16] = 1;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_293:
            *(_QWORD *)&v220[0] = 0;
            memset(v254, 0, 80);
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v281 = 136315906;
            *(_QWORD *)&v281[4] = "operator[]";
            v282 = 1024;
            *(_DWORD *)v283 = 601;
            *(_WORD *)&v283[4] = 2048;
            *(_QWORD *)&v283[6] = 2;
            *(_WORD *)&v283[14] = 2048;
            *(_QWORD *)&v283[16] = v72;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_294:
            *(_QWORD *)&v220[0] = 0;
            memset(v254, 0, 80);
            v104 = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v281 = 136315906;
            *(_QWORD *)&v281[4] = "operator[]";
            v282 = 1024;
            *(_DWORD *)v283 = 601;
            *(_WORD *)&v283[4] = 2048;
            *(_QWORD *)&v283[6] = 3;
            *(_WORD *)&v283[14] = 2048;
            *(_QWORD *)&v283[16] = 3;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_295:
            *(_QWORD *)v281 = 0;
            memset(v254, 0, 80);
            v148 = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v286 = 136315906;
            *(_QWORD *)&v286[4] = "operator[]";
            *(_WORD *)&v286[12] = 1024;
            *(_DWORD *)&v286[14] = 797;
            *(_WORD *)&v286[18] = 2048;
            *(_QWORD *)&v286[20] = v18;
            *(_WORD *)&v286[28] = 2048;
            *(_QWORD *)&v286[30] = v104;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_296;
          }
        }
LABEL_60:
        if (v12)
        {
          v48 = *(float **)(v189 + 152 * v170 + 144);
          v49 = *v48 >= 0.0 && *v48 <= 1.0;
          if (!v49)
            goto LABEL_80;
          v50 = 1;
          do
          {
            if (v12 == v50)
              goto LABEL_73;
            v51 = v48[v50++];
          }
          while (v51 >= 0.0 && v51 <= 1.0);
          if (v50 - 1 < v12)
            goto LABEL_80;
LABEL_73:
          v53 = v307;
          if ((_DWORD)v12)
          {
            v54 = 0;
            v3 = *((_QWORD *)&v305 + 1);
            while (1)
            {
              v4 = v54;
              if (v12 <= v54)
                goto LABEL_309;
              if (v3 <= v54)
                goto LABEL_310;
              *(float *)(v53 + 12 * v54) = v48[v54];
              ++v54;
              if (v12 <= (unsigned __int16)(v4 + 1))
                goto LABEL_86;
            }
          }
        }
        else
        {
          v53 = v307;
        }
        v3 = v18;
LABEL_86:
        *(_DWORD *)(v53 + 12 * v3 - 12) = 0;
LABEL_87:
        v12 = *(_QWORD *)(v189 + 152 * v170 + 88);
        if (v40 != (_DWORD)v12)
          goto LABEL_96;
        if (v12 >= 2)
        {
          v62 = *(float **)(v189 + 152 * v170 + 104);
          v63 = v62[1];
          if (*v62 > v63)
            goto LABEL_96;
          v144 = 2;
          do
          {
            if (v12 == v144)
              goto LABEL_89;
            v145 = v62[v144++];
            v49 = v63 <= v145;
            v63 = v145;
          }
          while (v49);
          if (v144 - 1 < v12)
          {
LABEL_96:
            v64 = 0;
            v65 = 0;
            while (1)
            {
              v12 = v65;
              if (v18 <= v65)
                goto LABEL_291;
              if (v64 > 4)
                v66 = (float)((unint64_t)(100 * v64) - 300);
              else
                v66 = __const__ZN2re29computeDefaultLodMaxViewDepthEjj_kViewDepthTable[v64];
              *(float *)(v45 + 12 * v65++ + 4) = v66;
              v64 = (unsigned __int16)(v12 + 1);
              if (v64 >= v33)
                goto LABEL_102;
            }
          }
        }
LABEL_89:
        v59 = v307;
        v33 = *((_QWORD *)&v305 + 1);
        if (v40)
        {
          v60 = 0;
          v61 = *(_QWORD *)(v189 + 152 * v170 + 104);
          do
          {
            v18 = v60;
            if (v12 <= v60)
              goto LABEL_303;
            if (v33 <= v60)
              goto LABEL_304;
            *(_DWORD *)(v59 + 12 * v60 + 4) = *(_DWORD *)(v61 + 4 * v60);
            ++v60;
          }
          while (v40 > (unsigned __int16)(v18 + 1));
        }
        *(_DWORD *)(v59 + 12 * v33 - 8) = 2139095040;
LABEL_102:
        if (!v44)
          goto LABEL_307;
      }
      v12 = *(_QWORD *)(a1 + 48);
      if (v12)
      {
        v44 = 0;
        v67.i64[0] = 0x7F0000007FLL;
        v67.i64[1] = 0x7F0000007FLL;
        v33 = 1;
        v68 = (float32x4_t)v183;
        while (1)
        {
          v18 = *(_QWORD *)(a1 + 48);
          if (v18 <= v44)
            goto LABEL_287;
          v192 = v68;
          v195 = v67;
          v3 = *(_QWORD *)(a1 + 64);
          v4 = 736;
          HasSkinningData = re::meshHasSkinningData((re *)(v3 + 736 * v44), v39);
          re::computeAABB((re *)(v3 + 736 * v44), &v223);
          if (HasSkinningData)
          {
            v70 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(v3 + 736 * v44 + 64), "skinnedAnimationGeometryBindTransform");
            if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v70 + 16))(v70))
              goto LABEL_316;
            v18 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v70, 0);
            v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 16))(v70);
            if (v71 == 1)
              goto LABEL_292;
            v72 = v71;
            if (!v71)
              goto LABEL_316;
            if (v71 <= 2)
              goto LABEL_293;
            if (v71 == 3)
              goto LABEL_294;
            v73 = *(_OWORD *)(v18 + 16);
            v74 = *(_OWORD *)(v18 + 32);
            v75 = *(_OWORD *)(v18 + 48);
            *(_OWORD *)v286 = *(_OWORD *)v18;
            *(_OWORD *)&v286[16] = v73;
            *(_OWORD *)&v286[32] = v74;
            v287 = v75;
            re::AABB::transform(&v223, (float32x4_t *)v286, (uint64_t)v254);
            v76 = v192;
            v76.i32[3] = 0;
            v77 = *(float32x4_t *)v254;
            v78 = *(float32x4_t *)&v254[16];
          }
          else
          {
            v76 = v192;
            v76.i32[3] = 0;
            v77 = v223;
            v78 = v224;
          }
          v77.i32[3] = 0;
          v68 = vminnmq_f32(v76, v77);
          v79 = v195;
          v79.i32[3] = 0;
          v78.i32[3] = 0;
          v67 = vmaxnmq_f32(v79, v78);
          v44 = v33;
          v49 = v12 > v33;
          v33 = (v33 + 1);
          if (!v49)
            goto LABEL_117;
        }
      }
      v67.i64[0] = 0x7F0000007FLL;
      v67.i64[1] = 0x7F0000007FLL;
      v68 = (float32x4_t)v183;
LABEL_117:
      *(float32x4_t *)&v289[16] = v68;
      *(float32x4_t *)&v289[32] = v67;
      if (!*v173)
        goto LABEL_308;
      v171 = v189 + 152 * v170 + 64;
      v80 = *(_QWORD *)v171;
      v81 = *(_QWORD *)(*(_QWORD *)v171 + 48);
      if (v81)
      {
        LODWORD(v82) = 0;
        v83 = 736 * v81;
        v84 = (_DWORD *)(*(_QWORD *)(v80 + 64) + 16);
        do
        {
          v82 = (*v84 + v82);
          v84 += 184;
          v83 -= 736;
        }
        while (v83);
      }
      else
      {
        v82 = 0;
      }
      *(_QWORD *)&v286[32] = 0;
      memset(v286, 0, 28);
      re::DynamicArray<re::Vector3<float>>::resize((uint64_t)v286, v82);
      v86 = *(_QWORD *)(v80 + 48);
      if (v86)
      {
        a1 = 0;
        v87 = *(unsigned int **)(v80 + 64);
        v12 = (unint64_t)&v87[184 * v86];
        do
        {
          v3 = re::meshHasSkinningData((re *)v87, v85);
          v44 = v87[4];
          v18 = re::GeomMesh::accessVertexPositions((re::GeomMesh *)v87);
          v33 = (unint64_t)v85;
          if ((v3 & 1) != 0)
          {
            v4 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(v87 + 16), "skinnedAnimationGeometryBindTransform");
            if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4))
              goto LABEL_317;
            v3 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v4, 0);
            v88 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
            if ((_DWORD)v88 == 1)
              goto LABEL_300;
            v4 = v88;
            if (!(_DWORD)v88)
              goto LABEL_317;
            if (v88 <= 2)
              goto LABEL_301;
            if ((_DWORD)v88 == 3)
              goto LABEL_302;
            if ((_DWORD)v44)
            {
              v89 = *(float32x4_t *)v3;
              v90 = *(float32x4_t *)(v3 + 16);
              v91 = *(float32x4_t *)(v3 + 32);
              v92 = *(float32x4_t *)(v3 + 48);
              v3 = v33;
              v93 = v33;
              while (v93)
              {
                v33 = a1;
                v4 = *(_QWORD *)&v286[16];
                if (*(_QWORD *)&v286[16] <= (unint64_t)a1)
                  goto LABEL_282;
                a1 = (a1 + 1);
                v94 = *(float32x4_t *)v18;
                v18 += 16;
                v95 = vaddq_f32(v92, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v89, v94.f32[0]), v90, *(float32x2_t *)v94.f32, 1), v91, v94, 2));
                *(float32x4_t *)(*(_QWORD *)&v286[32] + 16 * v33) = vdivq_f32(v95, (float32x4_t)vdupq_laneq_s32((int32x4_t)v95, 3));
                --v93;
                if (!--v44)
                  goto LABEL_142;
              }
              goto LABEL_281;
            }
          }
          else if ((_DWORD)v44)
          {
            v3 = v85;
            v96 = v85;
            while (1)
            {
              if (!v96)
                goto LABEL_279;
              v33 = a1;
              v4 = *(_QWORD *)&v286[16];
              if (*(_QWORD *)&v286[16] <= (unint64_t)a1)
                break;
              a1 = (a1 + 1);
              v97 = *(float32x4_t *)v18;
              v18 += 16;
              *(float32x4_t *)(*(_QWORD *)&v286[32] + 16 * v33) = v97;
              --v96;
              if (!--v44)
                goto LABEL_142;
            }
LABEL_280:
            v223.i64[0] = 0;
            memset(v254, 0, 80);
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v281 = 136315906;
            *(_QWORD *)&v281[4] = "operator[]";
            v282 = 1024;
            *(_DWORD *)v283 = 789;
            *(_WORD *)&v283[4] = 2048;
            *(_QWORD *)&v283[6] = v33;
            *(_WORD *)&v283[14] = 2048;
            *(_QWORD *)&v283[16] = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_281:
            v223.i64[0] = 0;
            memset(v254, 0, 80);
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v281 = 136315906;
            *(_QWORD *)&v281[4] = "operator[]";
            v282 = 1024;
            *(_DWORD *)v283 = 601;
            *(_WORD *)&v283[4] = 2048;
            *(_QWORD *)&v283[6] = v3;
            *(_WORD *)&v283[14] = 2048;
            *(_QWORD *)&v283[16] = v3;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_282:
            v223.i64[0] = 0;
            memset(v254, 0, 80);
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v281 = 136315906;
            *(_QWORD *)&v281[4] = "operator[]";
            v282 = 1024;
            *(_DWORD *)v283 = 789;
            *(_WORD *)&v283[4] = 2048;
            *(_QWORD *)&v283[6] = v33;
            *(_WORD *)&v283[14] = 2048;
            *(_QWORD *)&v283[16] = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_283:
            *(_QWORD *)v323 = 0;
            memset(v254, 0, 80);
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v281 = 136315906;
            *(_QWORD *)&v281[4] = "operator[]";
            v282 = 1024;
            *(_DWORD *)v283 = 797;
            *(_WORD *)&v283[4] = 2048;
            *(_QWORD *)&v283[6] = v3;
            *(_WORD *)&v283[14] = 2048;
            *(_QWORD *)&v283[16] = a1;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_284:
            v227 = 0;
            memset(v254, 0, 80);
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v323 = 136315906;
            *(_QWORD *)&v323[4] = "operator[]";
            v324 = 1024;
            v325 = 797;
            v326 = 2048;
            v327 = v3;
            v328 = 2048;
            v329 = v18;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_285:
            v227 = 0;
            memset(v254, 0, 80);
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v323 = 136315906;
            *(_QWORD *)&v323[4] = "operator[]";
            v324 = 1024;
            v325 = 797;
            v326 = 2048;
            v327 = v3;
            v328 = 2048;
            v329 = v18;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_286:
            *(_QWORD *)v281 = 0;
            memset(v254, 0, 80);
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v286 = 136315906;
            *(_QWORD *)&v286[4] = "operator[]";
            *(_WORD *)&v286[12] = 1024;
            *(_DWORD *)&v286[14] = 797;
            *(_WORD *)&v286[18] = 2048;
            *(_QWORD *)&v286[20] = v3;
            *(_WORD *)&v286[28] = 2048;
            *(_QWORD *)&v286[30] = v33;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_287:
            *(_QWORD *)v281 = 0;
            memset(v254, 0, 80);
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v286 = 136315906;
            *(_QWORD *)&v286[4] = "operator[]";
            *(_WORD *)&v286[12] = 1024;
            *(_DWORD *)&v286[14] = 797;
            *(_WORD *)&v286[18] = 2048;
            *(_QWORD *)&v286[20] = v44;
            *(_WORD *)&v286[28] = 2048;
            *(_QWORD *)&v286[30] = v18;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_288:
            *(_QWORD *)v281 = 0;
            memset(v254, 0, 80);
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v286 = 136315906;
            *(_QWORD *)&v286[4] = "operator[]";
            *(_WORD *)&v286[12] = 1024;
            *(_DWORD *)&v286[14] = 797;
            *(_WORD *)&v286[18] = 2048;
            *(_QWORD *)&v286[20] = v44;
            *(_WORD *)&v286[28] = 2048;
            *(_QWORD *)&v286[30] = v44;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_289;
          }
LABEL_142:
          v87 += 184;
        }
        while (v87 != (unsigned int *)v12);
      }
      MEMORY[0x227693C34](*(_QWORD *)&v286[16], *(_QWORD *)&v286[32]);
      v102 = *(_anonymous_namespace_ **)v286;
      if (*(_QWORD *)v286 && *(_QWORD *)&v286[32])
      {
        v193 = v99;
        v196 = v98;
        v190 = v100;
        v185 = v101;
        v102 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)v286 + 40))();
        v101 = v185;
        v100 = v190;
        v99 = v193;
        v98 = v196;
      }
      v290 = v98;
      v291 = v99;
      v292 = v100;
      v293 = v101;
      v182 = v187;
      if ((unint64_t)v299 < v187)
        v102 = (_anonymous_namespace_ *)re::DynamicArray<re::MeshAssetPart>::setCapacity((_QWORD *)&v298 + 1, v187);
      v225 = 0;
      v223 = 0u;
      v224 = 0u;
      v226 = 0x7FFFFFFFLL;
      v221 = 0;
      memset(v220, 0, sizeof(v220));
      if (2 * v187 <= 1)
        v103 = 1;
      else
        v103 = 2 * v187;
      v222 = 0x7FFFFFFFLL;
      if (v175)
      {
        v18 = 0;
        while (1)
        {
          v104 = *v173;
          if (*v173 <= v18)
            goto LABEL_295;
          v174 = v18;
          v105 = *(_QWORD *)v171 + 248 * v18;
          v191 = *(_QWORD *)(v105 + 224);
          v178 = (unint64_t *)(v105 + 224);
          v44 = *(_QWORD *)(v105 + 48);
          v197 = (unint64_t *)(v105 + 48);
          if (v44)
            break;
LABEL_231:
          v18 = v174 + 1;
          if (v174 + 1 == v175)
            goto LABEL_232;
        }
        v3 = 0;
        v188 = *(unsigned __int8 *)(v105 + 112);
        v106 = *(_QWORD *)v171 + 248 * v18;
        v194 = (unint64_t *)(v106 + 64);
        v177 = v44 * v18;
        v176 = (_QWORD *)(v106 + 240);
        v186 = *(unsigned __int8 *)(v105 + 160);
        v180 = v106 + 168;
        v181 = v106 + 120;
        v184 = (unint64_t *)(v106 + 88);
        v179 = (_QWORD *)(v106 + 104);
        while (2)
        {
          v18 = *v197;
          if (*v197 <= v3)
          {
            *(_QWORD *)v281 = 0;
            memset(v254, 0, 80);
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v286 = 136315906;
            *(_QWORD *)&v286[4] = "operator[]";
            *(_WORD *)&v286[12] = 1024;
            *(_DWORD *)&v286[14] = 797;
            *(_WORD *)&v286[18] = 2048;
            *(_QWORD *)&v286[20] = v3;
            *(_WORD *)&v286[28] = 2048;
            *(_QWORD *)&v286[30] = v18;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_279:
            v223.i64[0] = 0;
            memset(v254, 0, 80);
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v281 = 136315906;
            *(_QWORD *)&v281[4] = "operator[]";
            v282 = 1024;
            *(_DWORD *)v283 = 601;
            *(_WORD *)&v283[4] = 2048;
            *(_QWORD *)&v283[6] = v3;
            *(_WORD *)&v283[14] = 2048;
            *(_QWORD *)&v283[16] = v3;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_280;
          }
          a1 = *v194;
          v12 = *v194 + 736 * v3;
          v18 = v12 + 40;
          if (!*(_DWORD *)(v12 + 40))
            goto LABEL_230;
          v260 = 0u;
          *(_QWORD *)&v254[88] = 0;
          memset(v254, 0, 80);
          v254[44] = 1;
          *(_DWORD *)&v254[52] = 1;
          *(_WORD *)&v254[56] = -1;
          *(_QWORD *)&v254[80] = &str_110;
          *(int32x4_t *)&v254[96] = v183;
          *(_QWORD *)&v107 = 0x7F0000007FLL;
          *((_QWORD *)&v107 + 1) = 0x7F0000007FLL;
          *(_OWORD *)&v254[112] = v107;
          *(_QWORD *)&v259[16] = 0x7FFFFFFF00000000;
          v258 = 0u;
          *(_OWORD *)v259 = 0u;
          *(_OWORD *)&v254[128] = 0u;
          v255 = 0u;
          v256 = 0u;
          memset(v257, 0, sizeof(v257));
          re::DynamicArray<re::MeshAssetPart>::add((_anonymous_namespace_ *)((char *)&v298 + 8), (uint64_t)v254);
          re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v258);
          re::StringID::destroyString((re::StringID *)&v254[72]);
          re::DynamicArray<re::MeshAssetBuffer>::deinit((uint64_t)v254);
          v4 = re::meshHasSkinningData((re *)v12, v108);
          if ((_DWORD)v4)
          {
            if ((unint64_t)v296 < v182)
              re::DynamicArray<re::MeshAssetSkinningData>::setCapacity((_QWORD *)&v295 + 1, v182);
            for (j = *((_QWORD *)&v296 + 1); j <= v3 + v177; ++j)
            {
              *(_QWORD *)v254 = 0xFFFFFFFFLL;
              memset(&v254[8], 0, 136);
              v111 = re::DynamicArray<re::MeshAssetSkinningData>::add((_anonymous_namespace_ *)((char *)&v295 + 8), (uint64_t)v254);
              if (*(_QWORD *)&v254[56])
              {
                if (*(_QWORD *)&v254[64])
                {
                  (*(void (**)(__n128))(**(_QWORD **)&v254[56] + 40))(v111);
                  *(_OWORD *)&v254[64] = 0uLL;
                }
                *(_QWORD *)&v254[56] = 0;
              }
              if (*(_QWORD *)&v254[32])
              {
                if (*(_QWORD *)&v254[40])
                {
                  (*(void (**)(__n128))(**(_QWORD **)&v254[32] + 40))(v111);
                  *(_QWORD *)&v254[40] = 0;
                  *(_QWORD *)&v254[48] = 0;
                }
                *(_QWORD *)&v254[32] = 0;
              }
              if (*(_QWORD *)&v254[8] && *(_QWORD *)&v254[16])
                (*(void (**)(__n128))(**(_QWORD **)&v254[8] + 40))(v111);
            }
          }
          if (v191 == v44)
          {
            v33 = *v178;
            if (*v178 <= v3)
              goto LABEL_286;
            v33 = *v176 + 48 * v3;
          }
          else
          {
            v33 = (unint64_t)&v223;
          }
          if (v188)
          {
            a1 = *(_QWORD *)(v181 + 16);
            if (a1 <= v3)
              goto LABEL_283;
            v112 = *(_QWORD *)(v181 + 32);
            a1 = 80;
            v113 = v112 + 80 * v3;
            *(_QWORD *)v286 = *(_QWORD *)v113;
            *(_DWORD *)&v286[8] = *(_DWORD *)(v113 + 8);
            v286[12] = *(_BYTE *)(v113 + 12);
            v114 = *(unsigned __int8 *)(v113 + 12);
            if (v114 == 2)
            {
              re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrown((uint64_t)&v286[16], (uint64_t *)(v112 + 80 * v3 + 16));
            }
            else if (v114 == 1)
            {
              re::DynamicArray<float>::DynamicArray((uint64_t)&v286[16], (uint64_t *)(v112 + 80 * v3 + 16));
            }
            else
            {
              if (v114)
                goto LABEL_314;
              *(_DWORD *)&v286[16] = *(_DWORD *)(v112 + 80 * v3 + 16);
            }
          }
          else
          {
            v115 = 0;
            v116 = *(_DWORD *)(a1 + 736 * v3 + 16);
            *(_QWORD *)v286 = 0xFFFFFFFF00000000;
            *(_DWORD *)&v286[8] = -1;
            v286[12] = 0;
            if (v116 - 1 <= 0xFFFFFFFD)
            {
              *(_DWORD *)&v286[8] = v116 - 1;
              v115 = v116;
              *(_QWORD *)v286 = v116;
            }
            *(_DWORD *)&v286[16] = v115;
            a1 = 80;
          }
          if (v186)
          {
            v18 = *(_QWORD *)(v180 + 16);
            if (v18 <= v3)
              goto LABEL_284;
            v117 = *(_QWORD *)(v180 + 32);
            v118 = v117 + 80 * v3;
            *(_QWORD *)v281 = *(_QWORD *)v118;
            *(_DWORD *)&v281[8] = *(_DWORD *)(v118 + 8);
            LOBYTE(v282) = *(_BYTE *)(v118 + 12);
            v119 = *(unsigned __int8 *)(v118 + 12);
            if (v119 == 2)
            {
              re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrown((uint64_t)&v283[2], (uint64_t *)(v117 + 80 * v3 + 16));
            }
            else if (v119 == 1)
            {
              re::DynamicArray<float>::DynamicArray((uint64_t)&v283[2], (uint64_t *)(v117 + 80 * v3 + 16));
            }
            else
            {
              if (v119)
                goto LABEL_315;
              *(_DWORD *)&v283[2] = *(_DWORD *)(v117 + 80 * v3 + 16);
            }
          }
          else
          {
            v120 = 0;
            v121 = *(_DWORD *)v18;
            *(_QWORD *)v281 = 0xFFFFFFFF00000000;
            *(_DWORD *)&v281[8] = -1;
            LOBYTE(v282) = 0;
            if (v121 - 1 <= 0xFFFFFFFD)
            {
              *(_DWORD *)&v281[8] = v121 - 1;
              v120 = v121;
              *(_QWORD *)v281 = v121;
            }
            *(_DWORD *)&v283[2] = v120;
          }
          v18 = *v184;
          if (*v184)
          {
            if (v18 <= v3)
              goto LABEL_285;
            v122 = *(_DWORD *)(*v179 + 4 * v3);
          }
          else
          {
            LOWORD(v122) = 0;
          }
          v123 = v298 + 144 * *((_QWORD *)&v296 + 1) - 144;
          if (!(_DWORD)v4)
            v123 = 0;
          if (!(_BYTE)v282)
            goto LABEL_218;
          if (v282 == 2)
          {
            v125 = v285;
            if (!v285)
              goto LABEL_218;
            if (*(_QWORD *)&v283[10])
              *(_QWORD *)&v283[10] = 0;
            v124 = *(_QWORD *)&v283[2];
            if (!*(_QWORD *)&v283[2])
              goto LABEL_218;
          }
          else
          {
            if (v282 != 1)
              goto LABEL_312;
            v125 = *(_QWORD *)&v283[2];
            if (!*(_QWORD *)&v283[2] || (v124 = v284) == 0)
            {
LABEL_218:
              if (v286[12])
              {
                if (v286[12] == 2)
                {
                  if (v288)
                  {
                    if (*(_QWORD *)&v286[24])
                      *(_QWORD *)&v286[24] = 0;
                    if (*(_QWORD *)&v286[16])
                    {
                      (*(void (**)(void))(*(_QWORD *)v288 + 40))();
                      v126 = (__int128 *)&v286[16];
                      goto LABEL_229;
                    }
                  }
                }
                else
                {
                  if (v286[12] != 1)
                    goto LABEL_313;
                  if (*(_QWORD *)&v286[16])
                  {
                    v126 = &v287;
                    if ((_QWORD)v287)
                    {
                      (*(void (**)(void))(**(_QWORD **)&v286[16] + 40))();
                      v126 = &v287;
                    }
LABEL_229:
                    *(_QWORD *)v126 = 0;
                  }
                }
              }
LABEL_230:
              if (++v3 == v44)
                goto LABEL_231;
              continue;
            }
          }
          break;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v125 + 40))(v125);
        goto LABEL_218;
      }
LABEL_232:
      *(_OWORD *)v254 = *(_OWORD *)v289;
      *(_QWORD *)&v289[8] = &str_110;
      *(_QWORD *)v289 = 0;
      *(_OWORD *)&v254[48] = v290;
      *(_OWORD *)&v254[64] = v291;
      *(_OWORD *)&v254[80] = v292;
      *(_OWORD *)&v254[96] = v293;
      *(_OWORD *)&v254[16] = *(_OWORD *)&v289[16];
      *(_OWORD *)&v254[32] = *(_OWORD *)&v289[32];
      *(_QWORD *)&v254[112] = *(_QWORD *)v294;
      memset(v294, 0, 24);
      ++*(_DWORD *)&v294[24];
      v255 = v295;
      v256 = v296;
      v295 = 0u;
      v296 = 0u;
      *(_OWORD *)&v257[8] = v298;
      v298 = 0u;
      v258 = v299;
      v12 = (unint64_t)v289;
      v299 = 0u;
      ++v297;
      ++v300;
      *(_OWORD *)&v259[8] = v301;
      v260 = v302;
      v301 = 0u;
      v302 = 0u;
      ++v303;
      v262 = v304;
      v263 = v305;
      v304 = 0u;
      v305 = 0u;
      ++v306;
      v265 = v307;
      v266 = v308;
      v307 = 0u;
      v308 = 0u;
      ++v309;
      v268 = v310;
      v269 = v311;
      v310 = 0u;
      v311 = 0u;
      ++v312;
      v271 = v313;
      v272 = v314;
      v313 = 0u;
      v314 = 0u;
      ++v315;
      v274 = v316;
      v275 = v317;
      v316 = 0u;
      v317 = 0u;
      ++v318;
      v277 = v319;
      v278 = v320;
      v319 = 0u;
      v320 = 0u;
      v280 = v322;
      v322 = 0;
      ++v321;
      LOBYTE(v228[0]) = 1;
      v228[1] = *(_OWORD *)v254;
      *(_QWORD *)&v254[8] = &str_110;
      *(_QWORD *)v254 = 0;
      v229 = *(_OWORD *)&v289[16];
      v230 = *(_OWORD *)&v289[32];
      *(_OWORD *)&v231[32] = v292;
      v232 = v293;
      *(_OWORD *)v231 = v290;
      *(_OWORD *)&v231[16] = v291;
      *(_QWORD *)v233 = *(_QWORD *)&v254[112];
      memset(&v254[112], 0, 24);
      *(_OWORD *)&v233[8] = *(_OWORD *)&v254[120];
      *(_DWORD *)&v254[136] = 2;
      LODWORD(v234) = 1;
      v235[0] = v255;
      v235[1] = v256;
      v255 = 0u;
      v256 = 0u;
      v237[0] = *(_OWORD *)&v257[8];
      *(_OWORD *)&v257[8] = 0u;
      v237[1] = v258;
      v258 = 0u;
      *(_DWORD *)v257 = 2;
      *(_DWORD *)v259 = 2;
      v236 = 1;
      v238 = 1;
      v239[0] = *(_OWORD *)&v259[8];
      v239[1] = v260;
      *(_OWORD *)&v259[8] = 0u;
      v260 = 0u;
      v261 = 2;
      v240 = 1;
      v241[0] = v262;
      v241[1] = v263;
      v262 = 0u;
      v263 = 0u;
      v264 = 2;
      v242 = 1;
      v243[0] = v265;
      v243[1] = v266;
      v265 = 0u;
      v266 = 0u;
      v267 = 2;
      v244 = 1;
      v245[0] = v268;
      v245[1] = v269;
      v268 = 0u;
      v269 = 0u;
      v270 = 2;
      v246 = 1;
      v247[0] = v271;
      v247[1] = v272;
      v271 = 0u;
      v272 = 0u;
      v273 = 2;
      v248 = 1;
      v249[0] = v274;
      v249[1] = v275;
      v274 = 0u;
      v275 = 0u;
      v276 = 2;
      v250 = 1;
      v251[0] = v277;
      v251[1] = v278;
      v277 = 0u;
      v278 = 0u;
      v253 = v280;
      v280 = 0;
      v279 = 2;
      v252 = 1;
      re::MeshAssetModel::~MeshAssetModel((re::MeshAssetModel *)v254);
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v220, v127);
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v223);
LABEL_233:
      re::MeshAssetModel::~MeshAssetModel((re::MeshAssetModel *)v289);
      v128 = LOBYTE(v228[0]);
      if (LOBYTE(v228[0]))
      {
        v129 = (_QWORD *)(v167 + (v170 << 9));
        v130 = v228[1];
        *((_QWORD *)&v228[1] + 1) = &str_110;
        *(_QWORD *)&v228[1] = 0;
        v131 = v129[1];
        v132 = v130 & 0xFFFFFFFFFFFFFFFELL | *v129 & 1;
        v129[1] = *((_QWORD *)&v130 + 1);
        *(_QWORD *)&v289[8] = v131;
        *(_QWORD *)v289 = v132;
        *v129 = v130;
        re::StringID::destroyString((re::StringID *)v289);
        v133 = (_OWORD *)(v167 + (v170 << 9));
        v134 = v230;
        v133[1] = v229;
        v133[2] = v134;
        v135 = *(_OWORD *)v231;
        v136 = *(_OWORD *)&v231[16];
        v137 = v232;
        v133[5] = *(_OWORD *)&v231[32];
        v133[6] = v137;
        v133[3] = v135;
        v133[4] = v136;
        re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)(v133 + 7), (uint64_t)v233);
        re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v133 + 152, (uint64_t)v235 + 8);
        re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)(v133 + 12), (uint64_t)v237 + 8);
        re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v133 + 232, (uint64_t)v239 + 8);
        re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)(v133 + 17), (uint64_t)v241 + 8);
        re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v133 + 312, (uint64_t)v243 + 8);
        re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)(v133 + 22), (uint64_t)v245 + 8);
        re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v133 + 392, (uint64_t)v247 + 8);
        re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)(v133 + 27), (uint64_t)v249 + 8);
        re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v133 + 472, (uint64_t)v251 + 8);
        re::DynamicArray<re::MeshAssetSkeleton>::operator=((uint64_t)v133 + 232, (uint64_t *)&v212 + 1);
      }
      else
      {
        *(_OWORD *)v289 = v228[1];
        re::DynamicString::DynamicString((re::DynamicString *)&v289[16], (const re::DynamicString *)&v229);
        *(_BYTE *)a3 = 0;
        *(_OWORD *)(a3 + 8) = *(_OWORD *)v289;
        v138 = *(_QWORD *)&v289[40];
        *(_QWORD *)(a3 + 24) = *(_QWORD *)&v289[16];
        *(_QWORD *)(a3 + 48) = v138;
        *(_OWORD *)(a3 + 32) = *(_OWORD *)&v289[24];
      }
      a1 = v172;
      re::Result<re::MeshAssetModel,re::DetailedError>::~Result((uint64_t)v228);
      v140 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v199, v139);
      if (!v128)
        goto LABEL_273;
      v16 = a2;
      v17 = v170 + 1;
    }
    while (v170 + 1 != v13);
  }
  v146 = *(_QWORD *)(a1 + 56);
  re::DynamicArray<re::MeshAssetInstance>::resize((uint64_t)&v209 + 8, v146);
  memset(v286, 0, 24);
  if (v146)
  {
    v3 = 0;
    v33 = 0;
    v12 = 0;
    while (1)
    {
      v148 = *(_QWORD *)(a1 + 56);
      if (v148 <= v12)
        break;
      v148 = *((_QWORD *)&v210 + 1);
      if (*((_QWORD *)&v210 + 1) <= v12)
        goto LABEL_297;
      v149 = *(_QWORD *)(a1 + 72) + v3;
      a1 = *(unsigned int *)(v149 + 64);
      v4 = *((_QWORD *)&v207 + 1);
      if (*((_QWORD *)&v207 + 1) <= a1)
        goto LABEL_298;
      v4 = *(_QWORD *)&v286[8];
      if (*(_QWORD *)&v286[8] <= a1)
        goto LABEL_299;
      v4 = v212;
      v150 = *(_QWORD *)(v209 + (a1 << 9) + 8);
      v151 = *(unsigned int *)(*(_QWORD *)&v286[16] + 4 * a1);
      *(_DWORD *)(*(_QWORD *)&v286[16] + 4 * a1) = v151 + 1;
      v152 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"%s-%u", (re::DynamicString *)v254, v150, v151);
      if ((v254[8] & 1) != 0)
        v153 = *(const char **)&v254[16];
      else
        v153 = &v254[9];
      *(_QWORD *)v289 = 0;
      *(_QWORD *)&v289[8] = &str_110;
      v154 = *(_OWORD *)v289;
      *(_QWORD *)&v289[8] = &str_110;
      *(_QWORD *)v289 = 0;
      v155 = v4 + v33;
      v156 = *(_QWORD *)(v4 + v33 + 8);
      v157 = v154 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v4 + v33) & 1;
      *(_QWORD *)(v155 + 8) = *((_QWORD *)&v154 + 1);
      *((_QWORD *)&v228[0] + 1) = v156;
      *(_QWORD *)&v228[0] = v157;
      *(_QWORD *)v155 = v154;
      re::StringID::destroyString((re::StringID *)v228);
      re::StringID::destroyString((re::StringID *)v289);
      if (*(_QWORD *)v254 && (v254[8] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)v254 + 40))();
      v158 = *(_OWORD *)v149;
      v159 = *(_OWORD *)(v149 + 16);
      v160 = *(_OWORD *)(v149 + 48);
      *(_OWORD *)(v155 + 48) = *(_OWORD *)(v149 + 32);
      *(_OWORD *)(v155 + 64) = v160;
      *(_OWORD *)(v155 + 16) = v158;
      *(_OWORD *)(v155 + 32) = v159;
      *(_DWORD *)(v155 + 80) = *(_DWORD *)(v149 + 64);
      *(_BYTE *)(v155 + 84) = 0;
      *(_DWORD *)(v155 + 88) = 1065353216;
      ++v12;
      v33 += 96;
      v3 += 80;
      a1 = v172;
      if (v146 == v12)
        goto LABEL_263;
    }
LABEL_296:
    *(_QWORD *)v254 = 0;
    *(_OWORD *)v231 = 0u;
    v230 = 0u;
    v229 = 0u;
    memset(v228, 0, sizeof(v228));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v289 = 136315906;
    *(_QWORD *)&v289[4] = "operator[]";
    *(_WORD *)&v289[12] = 1024;
    *(_DWORD *)&v289[14] = 797;
    *(_WORD *)&v289[18] = 2048;
    *(_QWORD *)&v289[20] = v12;
    *(_WORD *)&v289[28] = 2048;
    *(_QWORD *)&v289[30] = v148;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_297:
    *(_QWORD *)v254 = 0;
    *(_OWORD *)v231 = 0u;
    v230 = 0u;
    v229 = 0u;
    memset(v228, 0, sizeof(v228));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v289 = 136315906;
    *(_QWORD *)&v289[4] = "operator[]";
    *(_WORD *)&v289[12] = 1024;
    *(_DWORD *)&v289[14] = 789;
    *(_WORD *)&v289[18] = 2048;
    *(_QWORD *)&v289[20] = v12;
    *(_WORD *)&v289[28] = 2048;
    *(_QWORD *)&v289[30] = v148;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_298:
    *(_QWORD *)v281 = 0;
    *(_OWORD *)v231 = 0u;
    v230 = 0u;
    v229 = 0u;
    memset(v228, 0, sizeof(v228));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v289 = 136315906;
    *(_QWORD *)&v289[4] = "operator[]";
    *(_WORD *)&v289[12] = 1024;
    *(_DWORD *)&v289[14] = 789;
    *(_WORD *)&v289[18] = 2048;
    *(_QWORD *)&v289[20] = a1;
    *(_WORD *)&v289[28] = 2048;
    *(_QWORD *)&v289[30] = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_299:
    *(_QWORD *)v281 = 0;
    *(_OWORD *)v231 = 0u;
    v230 = 0u;
    v229 = 0u;
    memset(v228, 0, sizeof(v228));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v289 = 136315906;
    *(_QWORD *)&v289[4] = "operator[]";
    *(_WORD *)&v289[12] = 1024;
    *(_DWORD *)&v289[14] = 468;
    *(_WORD *)&v289[18] = 2048;
    *(_QWORD *)&v289[20] = a1;
    *(_WORD *)&v289[28] = 2048;
    *(_QWORD *)&v289[30] = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_300:
    v223.i64[0] = 0;
    memset(v254, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v281 = 136315906;
    *(_QWORD *)&v281[4] = "operator[]";
    v282 = 1024;
    *(_DWORD *)v283 = 601;
    *(_WORD *)&v283[4] = 2048;
    *(_QWORD *)&v283[6] = 1;
    *(_WORD *)&v283[14] = 2048;
    *(_QWORD *)&v283[16] = 1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_301:
    v223.i64[0] = 0;
    memset(v254, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v281 = 136315906;
    *(_QWORD *)&v281[4] = "operator[]";
    v282 = 1024;
    *(_DWORD *)v283 = 601;
    *(_WORD *)&v283[4] = 2048;
    *(_QWORD *)&v283[6] = 2;
    *(_WORD *)&v283[14] = 2048;
    *(_QWORD *)&v283[16] = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_302:
    v223.i64[0] = 0;
    memset(v254, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v281 = 136315906;
    *(_QWORD *)&v281[4] = "operator[]";
    v282 = 1024;
    *(_DWORD *)v283 = 601;
    *(_WORD *)&v283[4] = 2048;
    *(_QWORD *)&v283[6] = 3;
    *(_WORD *)&v283[14] = 2048;
    *(_QWORD *)&v283[16] = 3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_303:
    *(_QWORD *)v281 = 0;
    memset(v254, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v286 = 136315906;
    *(_QWORD *)&v286[4] = "operator[]";
    *(_WORD *)&v286[12] = 1024;
    *(_DWORD *)&v286[14] = 797;
    *(_WORD *)&v286[18] = 2048;
    *(_QWORD *)&v286[20] = v18;
    *(_WORD *)&v286[28] = 2048;
    *(_QWORD *)&v286[30] = v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_304:
    *(_QWORD *)v281 = 0;
    memset(v254, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v286 = 136315906;
    *(_QWORD *)&v286[4] = "operator[]";
    *(_WORD *)&v286[12] = 1024;
    *(_DWORD *)&v286[14] = 789;
    *(_WORD *)&v286[18] = 2048;
    *(_QWORD *)&v286[20] = v18;
    *(_WORD *)&v286[28] = 2048;
    *(_QWORD *)&v286[30] = v33;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_305:
    *(_QWORD *)v254 = 0;
    *(_OWORD *)v231 = 0u;
    v230 = 0u;
    v229 = 0u;
    memset(v228, 0, sizeof(v228));
    v165 = v17;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v289 = 136315906;
    *(_QWORD *)&v289[4] = "operator[]";
    *(_WORD *)&v289[12] = 1024;
    *(_DWORD *)&v289[14] = 797;
    *(_WORD *)&v289[18] = 2048;
    *(_QWORD *)&v289[20] = v165;
    *(_WORD *)&v289[28] = 2048;
    *(_QWORD *)&v289[30] = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_306:
    *(_QWORD *)v254 = 0;
    *(_OWORD *)v231 = 0u;
    v230 = 0u;
    v229 = 0u;
    memset(v228, 0, sizeof(v228));
    v166 = v17;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v289 = 136315906;
    *(_QWORD *)&v289[4] = "operator[]";
    *(_WORD *)&v289[12] = 1024;
    *(_DWORD *)&v289[14] = 789;
    *(_WORD *)&v289[18] = 2048;
    *(_QWORD *)&v289[20] = v166;
    *(_WORD *)&v289[28] = 2048;
    *(_QWORD *)&v289[30] = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_307:
    *(_QWORD *)v281 = 0;
    memset(v254, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v286 = 136315906;
    *(_QWORD *)&v286[4] = "operator[]";
    *(_WORD *)&v286[12] = 1024;
    *(_DWORD *)&v286[14] = 797;
    *(_WORD *)&v286[18] = 2048;
    *(_QWORD *)&v286[20] = 0;
    *(_WORD *)&v286[28] = 2048;
    *(_QWORD *)&v286[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_308:
    *(_QWORD *)v281 = 0;
    memset(v254, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v286 = 136315906;
    *(_QWORD *)&v286[4] = "operator[]";
    *(_WORD *)&v286[12] = 1024;
    *(_DWORD *)&v286[14] = 797;
    *(_WORD *)&v286[18] = 2048;
    *(_QWORD *)&v286[20] = 0;
    *(_WORD *)&v286[28] = 2048;
    *(_QWORD *)&v286[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_309:
    *(_QWORD *)v281 = 0;
    memset(v254, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v286 = 136315906;
    *(_QWORD *)&v286[4] = "operator[]";
    *(_WORD *)&v286[12] = 1024;
    *(_DWORD *)&v286[14] = 797;
    *(_WORD *)&v286[18] = 2048;
    *(_QWORD *)&v286[20] = v4;
    *(_WORD *)&v286[28] = 2048;
    *(_QWORD *)&v286[30] = v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_310:
    *(_QWORD *)v281 = 0;
    memset(v254, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v286 = 136315906;
    *(_QWORD *)&v286[4] = "operator[]";
    *(_WORD *)&v286[12] = 1024;
    *(_DWORD *)&v286[14] = 789;
    *(_WORD *)&v286[18] = 2048;
    *(_QWORD *)&v286[20] = v4;
    *(_WORD *)&v286[28] = 2048;
    *(_QWORD *)&v286[30] = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_311:
    *(_QWORD *)v281 = 0;
    memset(v254, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v286 = 136315906;
    *(_QWORD *)&v286[4] = "operator[]";
    *(_WORD *)&v286[12] = 1024;
    *(_DWORD *)&v286[14] = 797;
    *(_WORD *)&v286[18] = 2048;
    *(_QWORD *)&v286[20] = 0;
    *(_WORD *)&v286[28] = 2048;
    *(_QWORD *)&v286[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_312:
    re::internal::assertLog((re::internal *)4, v124, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    _os_crash();
    __break(1u);
LABEL_313:
    re::internal::assertLog((re::internal *)4, v124, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    _os_crash();
    __break(1u);
LABEL_314:
    re::internal::assertLog((re::internal *)4, v109, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "GeomIndexMap", 433);
    _os_crash();
    __break(1u);
LABEL_315:
    re::internal::assertLog((re::internal *)4, v109, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "GeomIndexMap", 433);
    _os_crash();
    __break(1u);
LABEL_316:
    *(_QWORD *)&v220[0] = 0;
    memset(v254, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v281 = 136315906;
    *(_QWORD *)&v281[4] = "operator[]";
    v282 = 1024;
    *(_DWORD *)v283 = 601;
    *(_WORD *)&v283[4] = 2048;
    *(_QWORD *)&v283[6] = 0;
    *(_WORD *)&v283[14] = 2048;
    *(_QWORD *)&v283[16] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_317:
    v223.i64[0] = 0;
    memset(v254, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v281 = 136315906;
    *(_QWORD *)&v281[4] = "operator[]";
    v282 = 1024;
    *(_DWORD *)v283 = 601;
    *(_WORD *)&v283[4] = 2048;
    *(_QWORD *)&v283[6] = 0;
    *(_WORD *)&v283[14] = 2048;
    *(_QWORD *)&v283[16] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_263:
  if (*((_QWORD *)&v207 + 1))
  {
    v161 = (unsigned __int16 *)v209;
    v162 = *((_QWORD *)&v207 + 1) << 9;
    do
    {
      re::importModelBlendShapes(v161);
      v161 += 256;
      v162 -= 512;
    }
    while (v162);
  }
  re::MeshAssetData::generateMetaData((re::MeshAssetData *)&v206);
  *(_QWORD *)&v228[0] = v206;
  v206 = 0;
  *(_OWORD *)((char *)v228 + 8) = v207;
  v207 = 0u;
  ++v208;
  DWORD2(v228[1]) = 1;
  v229 = v209;
  v230 = v210;
  v209 = 0u;
  v210 = 0u;
  *(_OWORD *)&v231[8] = v212;
  *(_OWORD *)&v231[24] = v213;
  v212 = 0u;
  v213 = 0u;
  ++v211;
  ++v214;
  *(_DWORD *)v231 = 1;
  *(_DWORD *)&v231[40] = 1;
  v232 = v215;
  *(_OWORD *)v233 = v216;
  v215 = 0u;
  v216 = 0u;
  v234 = v218;
  v218 = 0;
  ++v217;
  *(_DWORD *)&v233[16] = 1;
  re::Result<re::MeshAssetData,re::DetailedError>::Result(a3, (uint64_t)v228);
  if (*((_QWORD *)&v232 + 1))
  {
    if (v234)
      (*(void (**)(void))(**((_QWORD **)&v232 + 1) + 40))();
    v234 = 0;
    *(_OWORD *)v233 = 0uLL;
    *((_QWORD *)&v232 + 1) = 0;
    ++*(_DWORD *)&v233[16];
  }
  re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)&v231[16]);
  re::DynamicArray<re::MeshAssetInstance>::deinit((uint64_t)&v229 + 8);
  re::DynamicArray<re::MeshAssetModel>::deinit((uint64_t)v228);
  if (*(_QWORD *)v286 && *(_QWORD *)&v286[8])
    v140 = (*(double (**)(void))(**(_QWORD **)v286 + 40))();
LABEL_273:
  v163 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v200, v140);
  v164 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v203, v163);
  if (*((_QWORD *)&v215 + 1))
  {
    if (v218)
      (*(void (**)(double))(**((_QWORD **)&v215 + 1) + 40))(v164);
    v218 = 0;
    v216 = 0uLL;
    *((_QWORD *)&v215 + 1) = 0;
    ++v217;
  }
  re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)&v212 + 8);
  re::DynamicArray<re::MeshAssetInstance>::deinit((uint64_t)&v209 + 8);
  re::DynamicArray<re::MeshAssetModel>::deinit((uint64_t)&v206);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v219);
}

double re::makeMeshAssetDataFromGeomScene@<D0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v5;
  double v6;
  _BYTE v8[21];
  _OWORD v9[2];
  __int128 v10;
  _OWORD v11[2];
  int v12;
  uint64_t v13;

  v10 = 0u;
  memset(v9, 0, sizeof(v9));
  DWORD1(v10) = 0x7FFFFFFF;
  memset(v11, 0, sizeof(v11));
  v12 = 0;
  v13 = 0x7FFFFFFFLL;
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_QWORD *)&v8[13] = *(_QWORD *)(a2 + 13);
  re::HashTable<re::DynamicString,re::MeshAttributeCompressionOption,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)v9, a2 + 24);
  re::makeMeshAssetDataFromGeomScene(a1, (uint64_t)v8, a3);
  v6 = re::HashTable<re::DynamicString,re::MeshCompileOptions,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v11, v5);
  return re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v9, v6);
}

_QWORD *re::createMeshCollectionFromMeshAsset@<X0>(re *this@<X0>, const re::mtl::Device *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  const re::mtl::Device *v5;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  _anonymous_namespace_ *inited;
  unint64_t **v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  const char *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t *v56;
  unint64_t *v57;
  uint64_t v58;
  unint64_t **v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  BOOL v64;
  unsigned int v65;
  uint64_t v66;
  __int128 v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _anonymous_namespace_ *v72;
  int32x4_t v73;
  unint64_t v74;
  unint64_t v75;
  re::Allocator *v76;
  const re::mtl::Device *v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  int32x4_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  DeformationModelData v98;
  _BYTE v99[48];
  __int128 v100;
  _OWORD v101[3];
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  _QWORD v111[21];
  _BYTE v112[56];
  _BYTE v113[12];
  __int16 v114;
  int v115;
  __int16 v116;
  unint64_t v117;
  __int16 v118;
  unint64_t v119;
  _OWORD v120[3];
  __int128 v121;
  __int128 v122;
  uint64_t v123;

  v5 = a2;
  v7 = v99;
  v123 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  v8 = *((_QWORD *)a2 + 2);
  v76 = (re::Allocator *)re::globalAllocators(this)[2];
  *(_QWORD *)a3 = v76;
  v74 = v8;
  re::DynamicArray<re::MeshModel>::setCapacity((_QWORD *)a3, v8);
  v72 = (_anonymous_namespace_ *)a3;
  ++*(_DWORD *)(a3 + 24);
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v9 = *((_QWORD *)v5 + 12);
  v77 = v5;
  if (v9)
  {
    re::FixedArray<re::Slice<unsigned int>>::init<>(&v88, (uint64_t)v76, v9);
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = (unint64_t)&selRef_newBufferWithBytes_length_options_;
    do
    {
      v14 = *((_QWORD *)v5 + 12);
      if (v14 <= (unint64_t)v12)
        goto LABEL_106;
      v15 = objc_msgSend(*(id *)this, sel_newBufferWithBytes_length_options_, *(_QWORD *)(*((_QWORD *)v5 + 14) + v10 + 104), *(_QWORD *)(*((_QWORD *)v5 + 14) + v10 + 96) << 6, 0);
      *(_QWORD *)&v120[0] = v15;
      DWORD2(v120[0]) = 0;
      HIDWORD(v120[0]) = objc_msgSend(v15, sel_length);
      v4 = v89;
      if (v89 <= (unint64_t)v12)
      {
LABEL_107:
        *(_QWORD *)v99 = 0;
        v95 = 0u;
        v96 = 0u;
        v93 = 0u;
        v94 = 0u;
        v92 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v101[0]) = 136315906;
        *(_QWORD *)(v7 + 68) = "operator[]";
        WORD6(v101[0]) = 1024;
        *(_DWORD *)(v7 + 78) = 468;
        WORD1(v101[1]) = 2048;
        *(_QWORD *)(v7 + 84) = v12;
        WORD6(v101[1]) = 2048;
        *(_QWORD *)(v7 + 94) = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_108:
        *(_QWORD *)&v120[0] = 0;
        v95 = 0u;
        v96 = 0u;
        v93 = 0u;
        v94 = 0u;
        v92 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v101[0]) = 136315906;
        *(_QWORD *)((char *)v101 + 4) = "operator[]";
        WORD6(v101[0]) = 1024;
        *(_DWORD *)((char *)v101 + 14) = 797;
        WORD1(v101[1]) = 2048;
        *(_QWORD *)((char *)&v101[1] + 4) = v13;
        WORD6(v101[1]) = 2048;
        *(_QWORD *)((char *)&v101[1] + 14) = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_109:
        re::internal::assertLog((re::internal *)4, v69, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
        _os_crash();
        __break(1u);
      }
      v16 = v90 + v11;
      NS::SharedPtr<MTL::Texture>::operator=((void **)(v90 + v11), (void **)v120);
      *(_QWORD *)(v16 + 8) = *((_QWORD *)&v120[0] + 1);
      if (*(_QWORD *)&v120[0])
      {

        *(_QWORD *)&v120[0] = 0;
      }
      if (v15)

      v12 = (unint64_t *)((char *)v12 + 1);
      v11 += 16;
      v10 += 112;
      v5 = v77;
    }
    while ((unint64_t *)v9 != v12);
  }
  if (v74)
  {
    v13 = 0;
    v7 = (char *)v101 + 8;
    v4 = (uint64_t)v112;
    v73 = vdupq_n_s32(0x7F800000u);
    v17 = 144;
    while (1)
    {
      v12 = (unint64_t *)*((_QWORD *)v5 + 2);
      if ((unint64_t)v12 <= v13)
        goto LABEL_108;
      v18 = 0;
      v80 = *((_QWORD *)v5 + 4);
      *(_QWORD *)&v92 = 0;
      *((_QWORD *)&v92 + 1) = &str_110;
      *(_QWORD *)&v19 = 0x7F0000007FLL;
      *((_QWORD *)&v19 + 1) = 0x7F0000007FLL;
      v93 = v73;
      v94 = v19;
      LOBYTE(v19) = 0;
      BYTE4(v19) = 0;
      BYTE8(v19) = 0;
      BYTE12(v19) = 0;
      v95 = v19;
      v96 = v19;
      v97 = v19;
      do
      {
        v20 = (char *)&v92 + v18;
        *((_QWORD *)v20 + 12) = 0;
        *((_QWORD *)v20 + 16) = 0;
        v18 += 40;
      }
      while (v18 != 720);
      v21 = (_QWORD *)(v80 + (v13 << 9));
      v22 = re::StringID::operator=((unint64_t *)&v92, v21);
      v23 = v21[26];
      v85 = v21 + 26;
      v81 = v23;
      v25 = (unint64_t **)(v21 + 16);
      v26 = v21[16];
      if (v26)
        break;
LABEL_20:
      v29 = v21[21];
      v14 = (unint64_t)(v21 + 21);
      v75 = v13;
      v83 = (unint64_t *)v14;
      if (v29 && v89)
      {
        *(_QWORD *)&v101[2] = 0;
        *(_QWORD *)&v103 = 0;
        v102 = 0uLL;
        DWORD2(v103) = 0;
        v104 = 0;
        v105 = 0;
        DWORD2(v101[2]) = 1;
        v106 = 1;
        v108 = 0;
        v109 = 0;
        v107 = 0;
        v110 = 0;
        *(_QWORD *)&v101[0] = v76;
        *((_QWORD *)&v101[0] + 1) = v90;
        v101[1] = v89;
        re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::init((uint64_t)&v101[1] + 8, (uint64_t)v76, 1uLL);
        re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::init((uint64_t)&v104, (uint64_t)v76, 1uLL);
        if (v81)
        {
          v13 = *(_QWORD *)v14;
          if (*(_QWORD *)v14)
          {
            v26 = 0;
            v30 = v80 + (v75 << 9);
            v78 = (_QWORD *)(v30 + 184);
            v79 = (_QWORD *)(v30 + 224);
            while (1)
            {
              v12 = (unint64_t *)*v85;
              if (*v85 <= v26)
                break;
              v31 = *v79 + (v26 << 8);
              v32 = *(_QWORD *)(v31 + 16);
              if (v32)
              {
                v12 = 0;
                v33 = 0;
                v86 = 0;
                v87 = 0;
                v34 = (uint64_t *)(*(_QWORD *)(v31 + 32) + 64);
                v4 = 80 * v32;
                v14 = (unint64_t)"simplifiedAnimationInfluenceEndIndices";
                do
                {
                  if ((*(v34 - 7) & 1) != 0)
                    v35 = (const char *)*(v34 - 6);
                  else
                    v35 = (char *)v34 - 55;
                  if (!strcmp(v35, "simplifiedAnimationInfluenceEndIndices"))
                  {
                    v33 = *v34;
                    v12 = (unint64_t *)((unint64_t)*(v34 - 2) >> 2);
                  }
                  else if (!strcmp(v35, "simplifiedAnimationSkinningInfluences"))
                  {
                    v86 = (unint64_t)*(v34 - 2) >> 3;
                    v87 = *v34;
                  }
                  v34 += 10;
                  v4 -= 80;
                }
                while (v4);
              }
              else
              {
                v86 = 0;
                v87 = 0;
                v33 = 0;
                v12 = 0;
              }
              if (v13 <= v26)
                goto LABEL_105;
              v36 = *v78 + 144 * v26;
              v37 = *(_DWORD *)v36;
              v39 = *(_QWORD *)(v36 + 16);
              v38 = *(_QWORD *)(v36 + 24);
              v14 = v26;
              v40 = *(_QWORD *)(v36 + 40);
              v41 = *(_QWORD *)(v36 + 48);
              v42 = *(_QWORD *)(v36 + 64);
              v82 = *(_QWORD *)(v36 + 72);
              v43 = re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::addUninitialized((uint64_t)&v101[1] + 8);
              *(_DWORD *)v43 = v37;
              *(_QWORD *)(v43 + 8) = v38;
              *(_QWORD *)(v43 + 16) = v39;
              *(_QWORD *)(v43 + 24) = v41;
              *(_QWORD *)(v43 + 32) = v40;
              *(_QWORD *)(v43 + 40) = v87;
              *(_QWORD *)(v43 + 48) = v86;
              *(_QWORD *)(v43 + 56) = v33;
              *(_QWORD *)(v43 + 64) = v12;
              v26 = v14 + 1;
              *(_QWORD *)(v43 + 72) = v82;
              *(_QWORD *)(v43 + 80) = v42;
              v4 = (uint64_t)v112;
              if (v14 + 1 < v81)
              {
                v13 = *v83;
                if (v26 < *v83)
                  continue;
              }
              goto LABEL_41;
            }
LABEL_104:
            *(_QWORD *)v113 = 0;
            v121 = 0u;
            v122 = 0u;
            memset(v120, 0, sizeof(v120));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v99 = 136315906;
            *(_QWORD *)&v99[4] = "operator[]";
            *(_WORD *)&v99[12] = 1024;
            *(_DWORD *)&v99[14] = 797;
            *(_WORD *)&v99[18] = 2048;
            *(_QWORD *)&v99[20] = v26;
            *(_WORD *)&v99[28] = 2048;
            *(_QWORD *)&v99[30] = v12;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_105:
            *(_QWORD *)v113 = 0;
            v121 = 0u;
            v122 = 0u;
            memset(v120, 0, sizeof(v120));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v99 = 136315906;
            *(_QWORD *)&v99[4] = "operator[]";
            *(_WORD *)&v99[12] = 1024;
            *(_DWORD *)&v99[14] = 797;
            *(_WORD *)&v99[18] = 2048;
            *(_QWORD *)&v99[20] = v26;
            *(_WORD *)&v99[28] = 2048;
            *(_QWORD *)&v99[30] = v13;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_106:
            *(_QWORD *)&v120[0] = 0;
            v95 = 0u;
            v96 = 0u;
            v93 = 0u;
            v94 = 0u;
            v92 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v101[0]) = 136315906;
            *(_QWORD *)(v7 + 68) = "operator[]";
            WORD6(v101[0]) = 1024;
            *(_DWORD *)(v7 + 78) = 797;
            WORD1(v101[1]) = 2048;
            *(_QWORD *)(v7 + 84) = v12;
            WORD6(v101[1]) = 2048;
            *(_QWORD *)(v7 + 94) = v14;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_107;
          }
        }
LABEL_41:
        re::SkinningModelBuilder::buildDeformationModel((re::SkinningModelBuilder *)v101, (id *)this, &v98);
        re::BucketArray<re::SkinningModelBuilder::PreparedSkinnedMeshPartData,4ul>::deinit((uint64_t)&v104);
        v13 = v75;
        v17 = 144;
        if (v104)
        {
          v44 = v106;
          if ((v106 & 1) == 0)
          {
            (*(void (**)(void))(*(_QWORD *)v104 + 40))();
            v44 = v106;
          }
          v104 = 0;
          v105 = 0;
          v106 = (v44 | 1) + 2;
        }
        re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::deinit((uint64_t)&v101[1] + 8);
        inited = (_anonymous_namespace_ *)*((_QWORD *)&v101[1] + 1);
        if (*((_QWORD *)&v101[1] + 1) && (BYTE8(v101[2]) & 1) == 0)
          inited = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**((_QWORD **)&v101[1] + 1) + 40))();
      }
      v12 = (unint64_t *)(v80 + (v13 << 9));
      v26 = v12[51];
      if (v26)
      {
        v27 = v12 + 51;
        re::WrapDeformerModelBuilder::WrapDeformerModelBuilder((re::WrapDeformerModelBuilder *)v99, v76, this, v81, v12[51], &v98);
        v28 = 0;
        v14 = (unint64_t)(v12 + 53);
        v17 = 104;
        do
        {
          v13 = *v27;
          if (*v27 <= v28)
            goto LABEL_94;
          v4 = *(_QWORD *)v14 + v17;
          v45 = *(unsigned __int16 *)v4;
          v46 = strlen(*(const char **)(v4 - 96));
          *(_QWORD *)&v101[0] = *(_QWORD *)(v4 - 96);
          *((_QWORD *)&v101[0] + 1) = v46;
          v47 = *(_QWORD *)(v4 - 64);
          *(_QWORD *)&v101[1] = *(_QWORD *)(v4 - 56);
          *((_QWORD *)&v101[1] + 1) = v47;
          v48 = *(_QWORD *)(v4 - 40);
          *(_QWORD *)&v101[2] = *(_QWORD *)(v4 - 32);
          *((_QWORD *)&v101[2] + 1) = v48;
          v49 = *(_QWORD *)(v4 - 16);
          *(_QWORD *)&v102 = *(_QWORD *)(v4 - 8);
          *((_QWORD *)&v102 + 1) = v49;
          re::WrapDeformerModelBuilder::addWrapTarget((uint64_t)v99, v45, (void **)v28, (uint64_t)v101);
          inited = (_anonymous_namespace_ *)re::WrapDeformerModelBuilder::setEnvelopeBufferName((re::WrapDeformerModelBuilder *)v99, *(unsigned __int16 *)v4, v28++, (const re::StringID *)(v4 - 88));
          v17 += 112;
        }
        while (v26 != v28);
        v13 = v75;
        v4 = (uint64_t)v112;
        v17 = 144;
      }
      v26 = v12[41];
      if (v26)
      {
        v12 += 41;
        re::ContactDeformerModelBuilder::ContactDeformerModelBuilder((re::ContactDeformerModelBuilder *)v99, v76, this, v81, v26, &v98);
        v28 = 0;
        v27 = (unint64_t *)(v80 + (v13 << 9) + 344);
        do
        {
          v14 = *v12;
          if (*v12 <= v28)
            goto LABEL_95;
          v50 = *v27 + 48 * v28;
          inited = (_anonymous_namespace_ *)re::ContactDeformerModelBuilder::initTargetsForMeshPart((re::ContactDeformerModelBuilder *)v99, *(unsigned __int16 *)(v50 + 40), v28, *(_QWORD *)(v50 + 24), (const re::StringID *)v50);
          v51 = *(_QWORD *)(v50 + 24);
          if (v51)
          {
            v52 = *(unint64_t **)(v50 + 32);
            v53 = &v52[4 * v51];
            do
            {
              v101[0] = *v52;
              *(_QWORD *)&v101[1] = 0;
              v54 = v52[2];
              *((_QWORD *)&v101[0] + 1) = v52[3];
              *(_QWORD *)&v101[1] = v54;
              re::ContactDeformerModelBuilder::addContactTarget((id **)v99, v28, (uint64_t *)v101);
              v52 += 4;
            }
            while (v52 != v53);
          }
        }
        while (++v28 != v26);
      }
      v12 = (unint64_t *)(v80 + (v13 << 9));
      v26 = v12[46];
      if (v26)
      {
        v55 = v12 + 46;
        re::SmoothDeformerModelBuilder::SmoothDeformerModelBuilder((re::SmoothDeformerModelBuilder *)v113, v76, v81, v12[46], &v98);
        v14 = 0;
        v28 = 0;
        v17 = (unint64_t)(v12 + 48);
        do
        {
          v27 = (unint64_t *)*v55;
          if (*v55 <= v28)
            goto LABEL_96;
          inited = (_anonymous_namespace_ *)re::SmoothDeformerModelBuilder::setEnvelopeBufferName((re::SmoothDeformerModelBuilder *)v113, *(unsigned __int16 *)(*(_QWORD *)v17 + v14 + 16), v28++, (const re::StringID *)(*(_QWORD *)v17 + v14));
          v14 += 24;
        }
        while (v26 != v28);
        v17 = 144;
      }
      v56 = (unint64_t *)v12[61];
      if (v56)
      {
        v57 = v12 + 61;
        re::JiggleDeformerModelBuilder::JiggleDeformerModelBuilder((re::JiggleDeformerModelBuilder *)v113, v76, (unsigned __int16)v81, (unsigned __int16)v12[61], &v98);
        v14 = 0;
        v12 = 0;
        v28 = v80 + (v13 << 9) + 504;
        do
        {
          v17 = *v57;
          if (*v57 <= (unint64_t)v12)
            goto LABEL_97;
          inited = (_anonymous_namespace_ *)re::JiggleDeformerModelBuilder::setData((re::JiggleDeformerModelBuilder *)v113, *(unsigned __int16 *)(*(_QWORD *)v28 + v14 + 40), (unsigned __int16)v12, (const re::StringID *)(*(_QWORD *)v28 + v14), (const re::StringID *)(*(_QWORD *)v28 + v14 + 16), *(float *)(*(_QWORD *)v28 + v14 + 32), *(float *)(*(_QWORD *)v28 + v14 + 36));
          v12 = (unint64_t *)((char *)v12 + 1);
          v14 += 48;
        }
        while (v56 != v12);
        v17 = 144;
      }
      v58 = v80 + (v13 << 9);
      v26 = *(_QWORD *)(v58 + 448);
      if (v26)
      {
        v59 = (unint64_t **)(v58 + 448);
        re::OffsetsDeformerModelBuilder::OffsetsDeformerModelBuilder((re::OffsetsDeformerModelBuilder *)v113, v76, v81, *(_QWORD *)(v58 + 448), &v98);
        v60 = 0;
        v28 = 0;
        v14 = v58 + 464;
        do
        {
          v12 = *v59;
          if ((unint64_t)*v59 <= v28)
            goto LABEL_98;
          inited = (_anonymous_namespace_ *)re::OffsetsDeformerModelBuilder::setEnvelopeBufferName((re::OffsetsDeformerModelBuilder *)v113, *(unsigned __int16 *)(*(_QWORD *)v14 + v60 + 16), v28++, (const re::StringID *)(*(_QWORD *)v14 + v60));
          v60 += 24;
        }
        while (v26 != v28);
      }
      v61 = *v85;
      if (*v83)
      {
        v26 = (unint64_t)&v95;
        if (v61)
        {
          v13 = 0;
          v62 = v80 + (v75 << 9);
          v12 = (unint64_t *)(v62 + 224);
          v63 = (_QWORD *)(v62 + 184);
          v14 = 1;
          while (1)
          {
            v28 = *v85;
            if (*v85 <= v13)
              break;
            v28 = *v83;
            if (*v83 <= v13)
              goto LABEL_100;
            v28 = *((_QWORD *)&v95 + 1);
            if (*((_QWORD *)&v95 + 1) <= v13)
              goto LABEL_101;
            re::MeshPart::operator=((uint64_t *)(v96 + 560 * v13), (uint64_t *)v101);
            re::StringID::destroyString((re::StringID *)v112);
            re::FixedArray<re::StringID>::deinit(v111);
            re::AttributeTable::~AttributeTable((re::AttributeTable *)v101);
            v13 = v14;
            v64 = v61 > v14;
            v14 = (v14 + 1);
            if (!v64)
              goto LABEL_88;
          }
LABEL_99:
          *(_QWORD *)v99 = 0;
          v103 = 0u;
          v102 = 0u;
          memset(v101, 0, sizeof(v101));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v120[0]) = 136315906;
          *(_QWORD *)((char *)v120 + 4) = "operator[]";
          WORD6(v120[0]) = 1024;
          *(_DWORD *)((char *)v120 + 14) = 797;
          WORD1(v120[1]) = 2048;
          *(_QWORD *)((char *)&v120[1] + 4) = v13;
          WORD6(v120[1]) = 2048;
          *(_QWORD *)((char *)&v120[1] + 14) = v28;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_100:
          *(_QWORD *)v113 = 0;
          v121 = 0u;
          v122 = 0u;
          memset(v120, 0, sizeof(v120));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v99 = 136315906;
          *(_QWORD *)&v99[4] = "operator[]";
          *(_WORD *)&v99[12] = 1024;
          *(_DWORD *)&v99[14] = 797;
          *(_WORD *)&v99[18] = 2048;
          *(_QWORD *)&v99[20] = v13;
          *(_WORD *)&v99[28] = 2048;
          *(_QWORD *)&v99[30] = v28;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_101:
          *(_QWORD *)v113 = 0;
          v121 = 0u;
          v122 = 0u;
          memset(v120, 0, sizeof(v120));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v99 = 136315906;
          *(_QWORD *)&v99[4] = "operator[]";
          *(_WORD *)&v99[12] = 1024;
          *(_DWORD *)&v99[14] = 468;
          *(_WORD *)&v99[18] = 2048;
          *(_QWORD *)&v99[20] = v13;
          *(_WORD *)&v99[28] = 2048;
          *(_QWORD *)&v99[30] = v28;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_102:
          *(_QWORD *)v113 = 0;
          v103 = 0u;
          v102 = 0u;
          memset(v101, 0, sizeof(v101));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v120[0]) = 136315906;
          *(_QWORD *)((char *)v120 + 4) = "operator[]";
          WORD6(v120[0]) = 1024;
          *(_DWORD *)((char *)v120 + 14) = 797;
          WORD1(v120[1]) = 2048;
          *(_QWORD *)((char *)&v120[1] + 4) = v17;
          WORD6(v120[1]) = 2048;
          *(_QWORD *)((char *)&v120[1] + 14) = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_103:
          v91 = 0;
          v121 = 0u;
          v122 = 0u;
          memset(v120, 0, sizeof(v120));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v113 = 136315906;
          *(_QWORD *)&v113[4] = "operator[]";
          v114 = 1024;
          v115 = 468;
          v116 = 2048;
          v117 = v17;
          v118 = 2048;
          v119 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_104;
        }
      }
      else
      {
        *(_OWORD *)v99 = xmmword_2260E5F10;
        *(_OWORD *)&v99[16] = xmmword_2260E5F20;
        *(_OWORD *)&v99[32] = xmmword_2260E5F40;
        v100 = xmmword_2260E5D70;
        v26 = (unint64_t)&v95;
        if (v61)
        {
          v17 = 0;
          v12 = (unint64_t *)(v80 + (v13 << 9) + 224);
          v65 = 1;
          do
          {
            v14 = *v85;
            if (*v85 <= v17)
              goto LABEL_102;
            v14 = *((_QWORD *)&v95 + 1);
            if (*((_QWORD *)&v95 + 1) <= v17)
              goto LABEL_103;
            re::MeshPart::operator=((uint64_t *)(v96 + 560 * v17), (uint64_t *)v101);
            re::StringID::destroyString((re::StringID *)v112);
            re::FixedArray<re::StringID>::deinit(v111);
            re::AttributeTable::~AttributeTable((re::AttributeTable *)v101);
            v17 = v65;
            v64 = v61 > v65++;
          }
          while (v64);
        }
        v17 = 144;
      }
LABEL_88:
      v66 = v80 + (v75 << 9);
      v67 = *(_OWORD *)(v66 + 32);
      v93 = *(int32x4_t *)(v66 + 16);
      v94 = v67;
      v68 = *(_QWORD *)(v66 + 288);
      v70 = *(_QWORD *)(v66 + 288);
      if ((_QWORD)v97 != v70)
        goto LABEL_109;
      if (v70)
        memmove(*((void **)&v97 + 1), *(const void **)(v66 + 304), 12 * v70);
      re::DynamicArray<re::MeshModel>::add(v72, (uint64_t *)&v92);
      re::MeshModel::~MeshModel((re::MeshModel *)&v92);
      v13 = v75 + 1;
      v5 = v77;
      if (v75 + 1 == v74)
        return re::FixedArray<re::BufferSlice>::deinit(&v88);
    }
    re::BlendShapeModelBuilder::BlendShapeModelBuilder((re::BlendShapeModelBuilder *)v99, v76, (id *)this, v81, v21[16], &v98);
    v27 = 0;
    v28 = 0;
    v14 = (unint64_t)(v21 + 18);
    while (1)
    {
      v12 = *v25;
      if ((unint64_t)*v25 <= v28)
        break;
      re::BlendShapeModelBuilder::addBlendShapeGroup((uint64_t)v99, (unint64_t)v27 + *(_QWORD *)v14, *(unsigned __int16 *)((char *)v27 + *(_QWORD *)v14 + 48), v28++, 0);
      v27 += 7;
      if (v26 == v28)
      {

        v21 = (_QWORD *)(v80 + (v13 << 9));
        goto LABEL_20;
      }
    }
    *(_QWORD *)v113 = 0;
    v103 = 0u;
    v102 = 0u;
    memset(v101, 0, sizeof(v101));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v120[0]) = 136315906;
    *(_QWORD *)((char *)v120 + 4) = "operator[]";
    WORD6(v120[0]) = 1024;
    *(_DWORD *)((char *)v120 + 14) = 797;
    WORD1(v120[1]) = 2048;
    *(_QWORD *)((char *)&v120[1] + 4) = v28;
    WORD6(v120[1]) = 2048;
    *(_QWORD *)((char *)&v120[1] + 14) = v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_94:
    *(_QWORD *)v113 = 0;
    v103 = 0u;
    v102 = 0u;
    memset(v101, 0, sizeof(v101));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v120[0]) = 136315906;
    *(_QWORD *)((char *)v120 + 4) = "operator[]";
    WORD6(v120[0]) = 1024;
    *(_DWORD *)((char *)v120 + 14) = 797;
    WORD1(v120[1]) = 2048;
    *(_QWORD *)((char *)&v120[1] + 4) = v28;
    WORD6(v120[1]) = 2048;
    *(_QWORD *)((char *)&v120[1] + 14) = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_95:
    *(_QWORD *)v113 = 0;
    v103 = 0u;
    v102 = 0u;
    memset(v101, 0, sizeof(v101));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v120[0]) = 136315906;
    *(_QWORD *)((char *)v120 + 4) = "operator[]";
    WORD6(v120[0]) = 1024;
    *(_DWORD *)((char *)v120 + 14) = 797;
    WORD1(v120[1]) = 2048;
    *(_QWORD *)((char *)&v120[1] + 4) = v28;
    WORD6(v120[1]) = 2048;
    *(_QWORD *)((char *)&v120[1] + 14) = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_96:
    *(_QWORD *)v99 = 0;
    v103 = 0u;
    v102 = 0u;
    memset(v101, 0, sizeof(v101));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v120[0]) = 136315906;
    *(_QWORD *)((char *)v120 + 4) = "operator[]";
    WORD6(v120[0]) = 1024;
    *(_DWORD *)((char *)v120 + 14) = 797;
    WORD1(v120[1]) = 2048;
    *(_QWORD *)((char *)&v120[1] + 4) = v28;
    WORD6(v120[1]) = 2048;
    *(_QWORD *)((char *)&v120[1] + 14) = v27;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_97:
    *(_QWORD *)v99 = 0;
    v103 = 0u;
    v102 = 0u;
    memset(v101, 0, sizeof(v101));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v120[0]) = 136315906;
    *(_QWORD *)((char *)v120 + 4) = "operator[]";
    WORD6(v120[0]) = 1024;
    *(_DWORD *)((char *)v120 + 14) = 797;
    WORD1(v120[1]) = 2048;
    *(_QWORD *)((char *)&v120[1] + 4) = v12;
    WORD6(v120[1]) = 2048;
    *(_QWORD *)((char *)&v120[1] + 14) = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_98:
    *(_QWORD *)v99 = 0;
    v103 = 0u;
    v102 = 0u;
    memset(v101, 0, sizeof(v101));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v120[0]) = 136315906;
    *(_QWORD *)((char *)v120 + 4) = "operator[]";
    WORD6(v120[0]) = 1024;
    *(_DWORD *)((char *)v120 + 14) = 797;
    WORD1(v120[1]) = 2048;
    *(_QWORD *)((char *)&v120[1] + 4) = v28;
    WORD6(v120[1]) = 2048;
    *(_QWORD *)((char *)&v120[1] + 14) = v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_99;
  }
  return re::FixedArray<re::BufferSlice>::deinit(&v88);
}

uint64_t re::makeMeshAssetDataFromDescriptor@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  re::DynamicString *v14;
  int v15;
  int v16;
  __n128 v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v23;
  unint64_t v24;
  _QWORD v25[3];
  int v26;
  __int128 v27;
  __int128 v28;
  int v29;
  __int128 v30;
  __int128 v31;
  int v32;
  _BYTE v33[44];
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40[5];
  unsigned __int8 v41;
  uint64_t v42[5];
  unsigned __int8 v43;
  uint64_t v44[5];
  uint64_t v45[5];
  uint64_t v46;
  char v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  void *__dst;
  _BYTE v66[12];
  __int16 v67;
  int v68;
  __int16 v69;
  unint64_t v70;
  __int16 v71;
  uint64_t *v72;
  _OWORD v73[3];
  __int128 v74;
  __int128 v75;
  uint64_t v76;

  v4 = a2;
  v76 = *MEMORY[0x24BDAC8D0];
  v7 = &v46;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  v27 = 0u;
  v28 = 0u;
  v29 = 0;
  v30 = 0u;
  v31 = 0u;
  v32 = 0;
  memset(v33, 0, sizeof(v33));
  v34 = 0x7FFFFFFFLL;
  v8 = a1[2];
  v24 = v8;
  if (!v8)
  {
LABEL_37:
    v18 = a1[12];
    if (v8 >= v18)
    {
      if (!v18)
      {
LABEL_54:
        re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=((uint64_t)&v33[8], (uint64_t)(a1 + 15));
        v20 = a1[7];
        if ((unint64_t)v28 >= v20)
        {
          if (!v20)
          {
LABEL_60:
            re::makeMeshAssetDataFromGeomScene((unint64_t)v25, v4, a3);
            goto LABEL_61;
          }
        }
        else
        {
          re::DynamicArray<re::RigSplineIKJoint>::setCapacity((_QWORD *)&v27 + 1, a1[7]);
        }
        v9 = 0;
        while (1)
        {
          v3 = a1[7];
          if (v3 <= v9)
            goto LABEL_69;
          re::DynamicArray<re::GeomInstance>::add((_anonymous_namespace_ *)((char *)&v27 + 8), *(_QWORD *)(a1[9] + 8 * v9++) + 32);
          if (v20 == v9)
            goto LABEL_60;
        }
      }
    }
    else
    {
      re::DynamicArray<re::GeomSkeleton>::setCapacity((_QWORD *)&v30 + 1, a1[12]);
    }
    v9 = 0;
    while (1)
    {
      v3 = a1[12];
      if (v3 <= v9)
        break;
      re::DynamicArray<re::GeomSkeleton>::add((_anonymous_namespace_ *)((char *)&v30 + 8), (StringID *)(*(_QWORD *)(a1[14] + 8 * v9++) + 24));
      if (v18 == v9)
        goto LABEL_54;
    }
LABEL_68:
    *(_QWORD *)&v73[0] = 0;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    memset(v36, 0, sizeof(v36));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v46) = 136315906;
    *(uint64_t *)((char *)v7 + 4) = (uint64_t)"operator[]";
    v48 = 1024;
    *(_DWORD *)((char *)v7 + 14) = 797;
    WORD1(v49) = 2048;
    *(uint64_t *)((char *)v7 + 20) = v9;
    v50 = 2048;
    *(uint64_t *)((char *)v7 + 30) = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_69:
    *(_QWORD *)&v73[0] = 0;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    memset(v36, 0, sizeof(v36));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v46) = 136315906;
    *(uint64_t *)((char *)v7 + 4) = (uint64_t)"operator[]";
    v48 = 1024;
    *(_DWORD *)((char *)v7 + 14) = 797;
    WORD1(v49) = 2048;
    *(uint64_t *)((char *)v7 + 20) = v9;
    v50 = 2048;
    *(uint64_t *)((char *)v7 + 30) = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_70:
    *(_QWORD *)v66 = 0;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    memset(v36, 0, sizeof(v36));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v73[0]) = 136315906;
    *(_QWORD *)((char *)v73 + 4) = "operator[]";
    WORD6(v73[0]) = 1024;
    *(_DWORD *)((char *)v73 + 14) = 797;
    WORD1(v73[1]) = 2048;
    *(_QWORD *)((char *)&v73[1] + 4) = v9;
    WORD6(v73[1]) = 2048;
    *(_QWORD *)((char *)&v73[1] + 14) = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_71:
    *(_QWORD *)v66 = 0;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    memset(v36, 0, sizeof(v36));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v73[0]) = 136315906;
    *(_QWORD *)((char *)v73 + 4) = "operator[]";
    WORD6(v73[0]) = 1024;
    *(_DWORD *)((char *)v73 + 14) = 797;
    WORD1(v73[1]) = 2048;
    *(_QWORD *)((char *)&v73[1] + 4) = v9;
    WORD6(v73[1]) = 2048;
    *(_QWORD *)((char *)&v73[1] + 14) = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_72:
    *(_QWORD *)v66 = 0;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    memset(v36, 0, sizeof(v36));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v73[0]) = 136315906;
    *(_QWORD *)((char *)v73 + 4) = "operator[]";
    WORD6(v73[0]) = 1024;
    *(_DWORD *)((char *)v73 + 14) = 797;
    WORD1(v73[1]) = 2048;
    *(_QWORD *)((char *)&v73[1] + 4) = v9;
    WORD6(v73[1]) = 2048;
    *(_QWORD *)((char *)&v73[1] + 14) = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_73:
    *(_QWORD *)v66 = 0;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    memset(v36, 0, sizeof(v36));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v73[0]) = 136315906;
    *(_QWORD *)((char *)v73 + 4) = "operator[]";
    WORD6(v73[0]) = 1024;
    *(_DWORD *)((char *)v73 + 14) = 797;
    WORD1(v73[1]) = 2048;
    *(_QWORD *)((char *)&v73[1] + 4) = v9;
    WORD6(v73[1]) = 2048;
    *(_QWORD *)((char *)&v73[1] + 14) = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_74:
    *(_QWORD *)v66 = 0;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    memset(v36, 0, sizeof(v36));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v73[0]) = 136315906;
    *(_QWORD *)((char *)v73 + 4) = "operator[]";
    WORD6(v73[0]) = 1024;
    *(_DWORD *)((char *)v73 + 14) = 797;
    WORD1(v73[1]) = 2048;
    *(_QWORD *)((char *)&v73[1] + 4) = v9;
    WORD6(v73[1]) = 2048;
    *(_QWORD *)((char *)&v73[1] + 14) = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_75:
    *(_QWORD *)v66 = 0;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    memset(v36, 0, sizeof(v36));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v73[0]) = 136315906;
    *(_QWORD *)((char *)v73 + 4) = "operator[]";
    WORD6(v73[0]) = 1024;
    *(_DWORD *)((char *)v73 + 14) = 797;
    WORD1(v73[1]) = 2048;
    *(_QWORD *)((char *)&v73[1] + 4) = v9;
    WORD6(v73[1]) = 2048;
    *(_QWORD *)((char *)&v73[1] + 14) = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v23 = a3;
  v9 = 0;
  while (1)
  {
    re::GeomModelWithLods::GeomModelWithLods((re::GeomModelWithLods *)&v46);
    v7 = (uint64_t *)a1[2];
    if ((unint64_t)v7 <= v9)
      goto LABEL_70;
    v3 = *(_QWORD *)(a1[4] + 152 * v9 + 48);
    if (v52 < v3)
      break;
    if (v3)
      goto LABEL_7;
LABEL_19:
    if ((unint64_t)v7 <= v9)
      goto LABEL_71;
    re::DynamicString::operator=((re::DynamicString *)&v46, (re::DynamicString *)(a1[4] + 152 * v9));
    v3 = a1[2];
    if (v3 <= v9)
      goto LABEL_72;
    re::DynamicArray<float>::resize((uint64_t)&v61, *(_QWORD *)(a1[4] + 152 * v9 + 128));
    v3 = a1[2];
    if (v3 <= v9)
      goto LABEL_73;
    re::DynamicArray<float>::resize((uint64_t)&v56, *(_QWORD *)(a1[4] + 152 * v9 + 88));
    v3 = a1[2];
    if (v3 <= v9)
      goto LABEL_74;
    memcpy(__dst, *(const void **)(a1[4] + 152 * v9 + 144), 4 * *(_QWORD *)(a1[4] + 152 * v9 + 128));
    v3 = a1[2];
    if (v3 <= v9)
      goto LABEL_75;
    memcpy(v60, *(const void **)(a1[4] + 152 * v9 + 104), 4 * *(_QWORD *)(a1[4] + 152 * v9 + 88));
    v17.n128_f64[0] = re::DynamicArray<re::GeomModelWithLods>::add((_anonymous_namespace_ *)v25, (uint64_t)&v46);
    if (v61)
    {
      if (__dst)
        (*(void (**)(double))(*(_QWORD *)v61 + 40))(v17.n128_f64[0]);
      __dst = 0;
      v62 = 0;
      v63 = 0;
      v61 = 0;
      ++v64;
    }
    if (v56)
    {
      if (v60)
        (*(void (**)(__n128))(*(_QWORD *)v56 + 40))(v17);
      v60 = 0;
      v57 = 0;
      v58 = 0;
      v56 = 0;
      ++v59;
    }
    re::DynamicArray<re::GeomModel>::deinit((uint64_t)&v51);
    if (v46 && (v47 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v46 + 40))();
    if (++v9 == v24)
    {
      v8 = v31;
      v7 = &v46;
      v4 = a2;
      a3 = v23;
      goto LABEL_37;
    }
  }
  re::DynamicArray<re::GeomModel>::setCapacity(&v51, *(_QWORD *)(a1[4] + 152 * v9 + 48));
LABEL_7:
  v10 = 0;
  while (1)
  {
    v7 = (uint64_t *)a1[2];
    if ((unint64_t)v7 <= v9)
    {
      v35 = 0;
      v74 = 0u;
      v75 = 0u;
      memset(v73, 0, sizeof(v73));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v66 = 136315906;
      *(_QWORD *)&v66[4] = "operator[]";
      v67 = 1024;
      v68 = 797;
      v69 = 2048;
      v70 = v9;
      v71 = 2048;
      v72 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_67:
      v35 = 0;
      v74 = 0u;
      v75 = 0u;
      memset(v73, 0, sizeof(v73));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v66 = 136315906;
      *(_QWORD *)&v66[4] = "operator[]";
      v67 = 1024;
      v68 = 797;
      v69 = 2048;
      v70 = v10;
      v71 = 2048;
      v72 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_68;
    }
    v11 = a1[4];
    v7 = *(uint64_t **)(v11 + 152 * v9 + 48);
    if ((unint64_t)v7 <= v10)
      goto LABEL_67;
    re::makeGeomModelFromModelDescriptor((re *)(*(_QWORD *)(*(_QWORD *)(v11 + 152 * v9 + 64) + 8 * v10) + 24), (uint64_t)v36);
    if (!LOBYTE(v36[0]))
      break;
    v12 = v53;
    if (v53 >= v52)
    {
      re::DynamicArray<re::GeomModel>::growCapacity(&v51, v53 + 1);
      v12 = v53;
    }
    v13 = v55;
    v14 = (re::DynamicString *)(v55 + 248 * v12);
    re::DynamicString::DynamicString(v14, (const re::DynamicString *)((char *)v36 + 8));
    re::DynamicArray<re::GeomMesh>::DynamicArray((uint64_t)v14 + 32, (uint64_t *)&v37 + 1);
    re::DynamicArray<float>::DynamicArray((uint64_t)v14 + 72, v40);
    v15 = v41;
    *((_BYTE *)v14 + 112) = v41;
    if (v15)
      re::DynamicArray<re::GeomIndexMap>::DynamicArray(v13 + 248 * v12 + 120, v42);
    v16 = v43;
    *(_BYTE *)(v13 + 248 * v12 + 160) = v43;
    if (v16)
      re::DynamicArray<re::GeomIndexMap>::DynamicArray(v13 + 248 * v12 + 168, v44);
    re::DynamicArray<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::DynamicArray(v13 + 248 * v12 + 208, v45);
    ++v53;
    ++v54;
    re::Result<re::GeomModel,re::DetailedError>::~Result((uint64_t)v36);
    if (v3 == ++v10)
    {
      v7 = (uint64_t *)a1[2];
      goto LABEL_19;
    }
  }
  v73[0] = *(_OWORD *)((char *)v36 + 8);
  re::DynamicString::DynamicString((re::DynamicString *)&v73[1], (const re::DynamicString *)((char *)&v36[1] + 8));
  *(_BYTE *)v23 = 0;
  *(_OWORD *)(v23 + 8) = v73[0];
  v19 = *((_QWORD *)&v73[2] + 1);
  *(_QWORD *)(v23 + 24) = *(_QWORD *)&v73[1];
  *(_QWORD *)(v23 + 48) = v19;
  *(_OWORD *)(v23 + 32) = *(_OWORD *)((char *)&v73[1] + 8);
  re::Result<re::GeomModel,re::DetailedError>::~Result((uint64_t)v36);
  if (v61)
  {
    if (__dst)
      (*(void (**)(void))(*(_QWORD *)v61 + 40))();
    __dst = 0;
    v62 = 0;
    v63 = 0;
    v61 = 0;
    ++v64;
  }
  if (v56)
  {
    if (v60)
      (*(void (**)(void))(*(_QWORD *)v56 + 40))();
    v60 = 0;
    v57 = 0;
    v58 = 0;
    v56 = 0;
    ++v59;
  }
  re::DynamicArray<re::GeomModel>::deinit((uint64_t)&v51);
  if (v46 && (v47 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v46 + 40))();
LABEL_61:
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v33[8]);
  re::DynamicArray<re::GeomSkeleton>::deinit((uint64_t)&v30 + 8);
  if (*((_QWORD *)&v27 + 1))
  {
    if ((_QWORD)v30)
      (*(void (**)(void))(**((_QWORD **)&v27 + 1) + 40))();
    *(_QWORD *)&v30 = 0;
    v28 = 0uLL;
    *((_QWORD *)&v27 + 1) = 0;
    ++v29;
  }
  return re::DynamicArray<re::GeomModelWithLods>::deinit((uint64_t)v25);
}

uint64_t re::DynamicArray<re::GeomSkeleton>::add(_anonymous_namespace_ *this, StringID *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::GeomSkeleton>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = (_QWORD *)(*((_QWORD *)this + 4) + 160 * v4);
  re::StringID::StringID((re::StringID *)v5, a2);
  re::FixedArray<re::StringID>::FixedArray(v5 + 2, (uint64_t)&a2[1]);
  re::FixedArray<unsigned int>::FixedArray(v5 + 5, (uint64_t)&a2[2].var1);
  re::FixedArray<re::GenericSRT<float>>::FixedArray(v5 + 8, (uint64_t)&a2[4]);
  re::FixedArray<re::Matrix4x4<float>>::FixedArray(v5 + 11, (uint64_t)&a2[5].var1);
  result = re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::HashTable((uint64_t)(v5 + 14), (uint64_t)&a2[7]);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::makeMeshAssetDataWithGeomModel@<X0>(re::DynamicString *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  __int128 *v8;
  double MeshAssetDataFromGeomScene;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  int v18;
  char v19;
  _OWORD v20[2];
  __int128 v21;
  _BYTE v22[40];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[6];

  re::GeomScene::makeSceneWithSingleInstanceModel(a1, (uint64_t)v22);
  if (a2)
  {
    v7 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)&v17 = *(_QWORD *)(a2 + 32);
    *((_QWORD *)&v17 + 1) = v7;
    re::GeomScene::setSkeletons((uint64_t)v22, (uint64_t)&v17);
  }
  LODWORD(v17) = 16842752;
  BYTE4(v17) = 1;
  *(_DWORD *)((char *)&v17 + 5) = 0;
  *(_WORD *)((char *)&v17 + 9) = 0;
  HIDWORD(v17) = 1036831949;
  v18 = 16843008;
  v19 = 0;
  v21 = 0u;
  memset(v20, 0, sizeof(v20));
  if (a3)
    v8 = a3;
  else
    v8 = &v17;
  DWORD1(v21) = 0x7FFFFFFF;
  MeshAssetDataFromGeomScene = re::makeMeshAssetDataFromGeomScene((unint64_t)v22, (uint64_t)v8, a4);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v20, MeshAssetDataFromGeomScene);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v29);
  re::DynamicArray<re::GeomSkeleton>::deinit((uint64_t)&v28);
  if (v23)
  {
    if (v27)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v23 + 40))(v23, v27, v10, v11, v12, v13, v14, v15, v17);
    v27 = 0;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    ++v26;
  }
  return re::DynamicArray<re::GeomModelWithLods>::deinit((uint64_t)v22);
}

uint64_t re::GeomScene::makeSceneWithSingleInstanceModel@<X0>(re::DynamicString *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  _BYTE v8[40];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _OWORD v19[4];
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  re::GeomModelWithLods::GeomModelWithLods((re::GeomModelWithLods *)&v6);
  re::DynamicString::operator=((re::DynamicString *)&v6, a1);
  re::DynamicArray<re::GeomModel>::add((_anonymous_namespace_ *)v8, (uint64_t)a1);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_DWORD *)(a2 + 104) = 0;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 140) = 0u;
  *(_QWORD *)(a2 + 156) = 0x7FFFFFFFLL;
  re::DynamicArray<re::GeomModelWithLods>::add((_anonymous_namespace_ *)a2, (uint64_t)&v6);
  v19[0] = xmmword_2260E5F10;
  v19[1] = xmmword_2260E5F20;
  v19[2] = xmmword_2260E5F40;
  v19[3] = xmmword_2260E5D70;
  v20 = 0;
  v4 = re::DynamicArray<re::GeomInstance>::add((_anonymous_namespace_ *)(a2 + 40), (uint64_t)v19);
  if (v14)
  {
    if (v18)
      (*(void (**)(__n128))(*(_QWORD *)v14 + 40))(v4);
    v18 = 0;
    v15 = 0;
    v16 = 0;
    v14 = 0;
    ++v17;
  }
  if (v9)
  {
    if (v13)
      (*(void (**)(__n128))(*(_QWORD *)v9 + 40))(v4);
    v13 = 0;
    v10 = 0;
    v11 = 0;
    v9 = 0;
    ++v12;
  }
  re::DynamicArray<re::GeomModel>::deinit((uint64_t)v8);
  result = v6;
  if (v6)
  {
    if ((v7 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v6 + 40))();
  }
  return result;
}

uint64_t re::makeMeshAssetDataWithGeomMeshArray@<X0>(_anonymous_namespace_ *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = 0;
  v14 = 0;
  v15 = 0;
  v12 = 0;
  re::makeMeshAssetDataWithGeomMeshArray(a1, a2, v15, v14, a3, a4, a5);
  result = v13;
  if (v13)
    v11 = v14 == 0;
  else
    v11 = 1;
  if (!v11)
    return (*(uint64_t (**)(void))(*(_QWORD *)v13 + 40))();
  return result;
}

uint64_t re::makeMeshAssetDataWithGeomMeshArray@<X0>(re::GeomMesh *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int *a6@<X5>, uint64_t a7@<X8>)
{
  re::GeomAttribute *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t i;
  unint64_t v18;
  StringID *v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  double MeshAssetDataFromGeomScene;
  __n128 v24;
  uint64_t v27;
  char v28;
  _BYTE v29[40];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _QWORD v40[2];
  uint64_t v41;
  int v42;
  __int128 v43;
  __int128 v44;
  int v45;
  __int128 v46;
  __int128 v47;
  int v48;
  _BYTE v49[44];
  uint64_t v50;
  uint64_t v51;
  int v52;
  const char *v53;
  uint64_t v54;
  _BYTE v55[20];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  re::GeomAttribute *v66;
  char v67;
  _BYTE v68[48];
  uint64_t v69;
  _QWORD v70[8];

  v70[5] = *MEMORY[0x24BDAC8D0];
  v40[0] = 0;
  v40[1] = 0;
  v41 = 0;
  v43 = 0u;
  v44 = 0u;
  v42 = 0;
  v45 = 0;
  v46 = 0u;
  v47 = 0u;
  v48 = 0;
  memset(v49, 0, sizeof(v49));
  v50 = 0x7FFFFFFFLL;
  re::GeomModelWithLods::GeomModelWithLods((re::GeomModelWithLods *)&v27);
  re::GeomModel::GeomModel((re::GeomModel *)&v58);
  re::DynamicArray<re::GeomModel>::add((_anonymous_namespace_ *)v29, (uint64_t)&v58);
  re::DynamicArray<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::deinit((uint64_t)v70);
  if (v68[40])
    re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)&v69);
  if (v67)
    re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)v68);
  if (*((_QWORD *)&v62 + 1))
  {
    v13 = v66;
    if (v66)
      (*(void (**)(void))(**((_QWORD **)&v62 + 1) + 40))();
    v66 = 0;
    v63 = 0;
    v64 = 0;
    *((_QWORD *)&v62 + 1) = 0;
    ++v65;
  }
  re::DynamicArray<re::GeomMesh>::deinit((uint64_t)&v60, v13);
  if ((_QWORD)v58 && (BYTE8(v58) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v58 + 40))();
  re::DynamicArray<re::GeomModelWithLods>::add((_anonymous_namespace_ *)v40, (uint64_t)&v27);
  if (!v41)
  {
LABEL_51:
    v51 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v52 = 136315906;
    v53 = "operator[]";
    v54 = 0x800000003150400;
    *(_QWORD *)v55 = 0;
    *(_WORD *)&v55[8] = 2048;
    *(_QWORD *)&v55[10] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_52:
    v51 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v52 = 136315906;
    v53 = "operator[]";
    v54 = 0x800000003150400;
    *(_QWORD *)v55 = 0;
    *(_WORD *)&v55[8] = 2048;
    *(_QWORD *)&v55[10] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (!*(_QWORD *)(v43 + 48))
    goto LABEL_52;
  v14 = *(_QWORD **)(v43 + 64);
  v15 = a2;
  if (v14[5] < (unint64_t)a2)
    re::DynamicArray<re::GeomMesh>::setCapacity(v14 + 4, a2);
  LODWORD(v58) = 0;
  re::DynamicArray<unsigned int>::resize(v14 + 9, a2, &v58);
  if (a2)
  {
    v16 = 736 * a2;
    do
    {
      re::DynamicArray<re::GeomMesh>::add((_anonymous_namespace_ *)(v14 + 4), a1);
      a1 = (re::GeomMesh *)((char *)a1 + 736);
      v16 -= 736;
    }
    while (v16);
  }
  if (a4)
  {
    for (i = 0; a4 != i; ++i)
    {
      if (i < v15)
      {
        v18 = v14[11];
        if (v18 <= i)
        {
          v51 = 0;
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v58 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v52 = 136315906;
          v53 = "operator[]";
          v54 = 0x800000003150400;
          *(_QWORD *)v55 = i;
          *(_WORD *)&v55[8] = 2048;
          *(_QWORD *)&v55[10] = v18;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_51;
        }
        *(_DWORD *)(v14[13] + 4 * i) = *(_DWORD *)(a3 + 4 * i);
      }
    }
  }
  if (a5)
  {
    v19 = *(StringID **)(a5 + 32);
    v20 = *(_QWORD *)(a5 + 16);
    if ((unint64_t)v47 < v20)
    {
      re::DynamicArray<re::GeomSkeleton>::setCapacity((_QWORD *)&v46 + 1, v20);
      goto LABEL_29;
    }
    if (v20)
    {
LABEL_29:
      v21 = 160 * v20;
      do
      {
        re::DynamicArray<re::GeomSkeleton>::add((_anonymous_namespace_ *)((char *)&v46 + 8), v19);
        LODWORD(v58) = DWORD2(v47) - 1;
        re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>((uint64_t)&v49[8], v19, &v58);
        v19 += 10;
        v21 -= 160;
      }
      while (v21);
    }
  }
  v58 = xmmword_2260E5F10;
  v59 = xmmword_2260E5F20;
  v60 = xmmword_2260E5F40;
  v61 = xmmword_2260E5D70;
  LODWORD(v62) = 0;
  re::DynamicArray<re::GeomInstance>::add((_anonymous_namespace_ *)((char *)&v43 + 8), (uint64_t)&v58);
  v52 = 16842752;
  LOBYTE(v53) = 1;
  *(_DWORD *)((char *)&v53 + 1) = 0;
  *(_WORD *)((char *)&v53 + 5) = 0;
  v54 = 0x10101003DCCCCCDLL;
  v55[0] = 0;
  v57 = 0u;
  *(_OWORD *)&v55[4] = 0u;
  v56 = 0u;
  if (a6)
    v22 = a6;
  else
    v22 = &v52;
  DWORD1(v57) = 0x7FFFFFFF;
  MeshAssetDataFromGeomScene = re::makeMeshAssetDataFromGeomScene((unint64_t)v40, (uint64_t)v22, a7);
  v24.n128_f64[0] = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v55[4], MeshAssetDataFromGeomScene);
  if (v35)
  {
    if (v39)
      (*(void (**)(double))(*(_QWORD *)v35 + 40))(v24.n128_f64[0]);
    v39 = 0;
    v36 = 0;
    v37 = 0;
    v35 = 0;
    ++v38;
  }
  if (v30)
  {
    if (v34)
      (*(void (**)(__n128))(*(_QWORD *)v30 + 40))(v24);
    v34 = 0;
    v31 = 0;
    v32 = 0;
    v30 = 0;
    ++v33;
  }
  re::DynamicArray<re::GeomModel>::deinit((uint64_t)v29);
  if (v27 && (v28 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v27 + 40))();
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v49[8]);
  re::DynamicArray<re::GeomSkeleton>::deinit((uint64_t)&v46 + 8);
  if (*((_QWORD *)&v43 + 1))
  {
    if ((_QWORD)v46)
      (*(void (**)(void))(**((_QWORD **)&v43 + 1) + 40))();
    *(_QWORD *)&v46 = 0;
    v44 = 0uLL;
    *((_QWORD *)&v43 + 1) = 0;
    ++v45;
  }
  return re::DynamicArray<re::GeomModelWithLods>::deinit((uint64_t)v40);
}

void re::`anonymous namespace'::populateAssetPartFromGeomMesh(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, __int16 a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t *a9, unint64_t a10)
{
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  re::internal::GeomAttributeManager *v30;
  uint64_t v31;
  unsigned int v32;
  _BYTE *v33;
  const char *v34;
  _anonymous_namespace_ *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  re *v41;
  uint64_t v42;
  NSObject *v43;
  unsigned int v44;
  NSObject *v45;
  NSObject *v46;
  NSObject *v47;
  NSObject *v48;
  BOOL v49;
  int v50;
  NSObject *v51;
  NSObject *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned __int8 v55;
  _anonymous_namespace_ *v56;
  float v57;
  int v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  size_t v68;
  uint64_t v69;
  size_t v70;
  uint64_t v71;
  size_t v72;
  uint64_t v73;
  size_t v74;
  uint64_t v75;
  uint64_t v76;
  float *v77;
  float v78;
  size_t v79;
  uint64_t v80;
  size_t v81;
  uint64_t v82;
  size_t v83;
  uint64_t v84;
  uint64_t v85;
  size_t v86;
  uint64_t v87;
  uint64_t v88;
  size_t v89;
  uint64_t v90;
  uint64_t v91;
  size_t v92;
  uint64_t v93;
  uint64_t v94;
  __n128 v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  _anonymous_namespace_ *v100;
  __n128 v101;
  __n128 v102;
  __n128 v103;
  uint64_t v104;
  unint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  _anonymous_namespace_ *v114;
  _DWORD *v115;
  int v116;
  int v117;
  _anonymous_namespace_ *v118;
  _QWORD *v119;
  _anonymous_namespace_ *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  signed int v134;
  float v135;
  int v136;
  uint64_t v137;
  int *v138;
  uint64_t v139;
  const void *v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  const re::GeomMesh *v144;
  MeshAssetPart *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _anonymous_namespace_ *v151;
  int *v152;
  int v153;
  _OWORD *v154;
  unsigned int v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  _anonymous_namespace_ *v160;
  uint64_t v161;
  uint64_t v162;
  _DWORD *v163;
  int v164;
  _anonymous_namespace_ *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  _anonymous_namespace_ *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  float v176;
  _anonymous_namespace_ *v177;
  const re::GeomMesh *v178;
  _anonymous_namespace_ *v179;
  uint64_t v180;
  unsigned int v181;
  unint64_t v182;
  char *v183;
  unint64_t v184;
  uint64_t v185;
  _anonymous_namespace_ *v186;
  _anonymous_namespace_ *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  _anonymous_namespace_ *ClosestHelper;
  unsigned int v198;
  float32x4_t *v199;
  int v200;
  unint64_t v201;
  _anonymous_namespace_ *v202;
  _anonymous_namespace_ *v203;
  _anonymous_namespace_ *v204;
  unsigned int v205;
  const re::GeomMesh *v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int v211;
  uint64_t v212;
  __int128 v213;
  re::GeomAttribute *v214;
  __int128 v215;
  __int128 v216;
  re::GeomAttribute *v217;
  re::GeomAttribute **v218;
  re::GeomAttribute **v219;
  uint64_t v220;
  re::UniqueNameGenerator *v221;
  __int16 v222;
  uint64_t v223;
  _QWORD *v224;
  _OWORD *v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  unsigned int *v230;
  unint64_t v231;
  re::internal::GeomAttributeManager *v232;
  re::internal::GeomAttributeManager *v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  int v238;
  char v239;
  re::GeomAttribute *v240;
  uint64_t v241;
  re::GeomAttribute *v242;
  re::GeomAttribute *v243;
  uint64_t v244;
  int v245;
  char v246;
  re::GeomAttribute *v247;
  uint64_t v248;
  _QWORD v249[3];
  uint64_t v250;
  uint64_t v251;
  int v252;
  char v253;
  re::GeomAttribute *v254;
  uint64_t v255;
  _QWORD v256[3];
  uint64_t v257;
  _BYTE v258[736];
  uint64_t v259;
  uint8_t buf[16];
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  _BYTE v265[12];
  __int16 v266;
  _BYTE v267[14];
  __int16 v268;
  _BYTE v269[20];
  int v270;
  re::GeomAttribute *v271;
  char v272;
  char v273;
  _BYTE v274[40];
  uint64_t v275;
  uint64_t v276;
  int v277;
  const re::GeomMesh *v278;
  __int16 v279;
  _BYTE v280[40];
  uint64_t v281;
  size_t __n;
  int v283;
  void *__dst;
  __int16 v285;
  _BYTE v286[28];
  __int16 v287;
  _BYTE v288[10];
  _OWORD v289[3];
  uint64_t *v290;
  _BYTE v291[12];
  __int16 v292;
  int v293;
  __int16 v294;
  unint64_t v295;
  __int16 v296;
  uint64_t v297;
  _OWORD v298[4];
  __int128 v299;
  uint64_t v300;

  v300 = *MEMORY[0x24BDAC8D0];
  re::GeomMesh::GeomMesh((re::GeomMesh *)v258, 0);
  if (*(_DWORD *)(a2 + 8) != *(_DWORD *)(a2 + 40))
  {
LABEL_15:
    v19 = 0;
    goto LABEL_16;
  }
  v19 = 0;
  if (!*(_DWORD *)(a2 + 424)
    && !*(_BYTE *)a1
    && !*(_BYTE *)(a1 + 8)
    && !*(_BYTE *)(a1 + 1)
    && !*(_BYTE *)(a1 + 2)
    && !*(_BYTE *)(a1 + 3))
  {
    v20 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a2 + 64), "vertexNormal");
    if (v20)
    {
      if (*(_BYTE *)(v20 + 16) == 1)
      {
        v21 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a2 + 64), "vertexTangent");
        if (v21)
        {
          if (*(_BYTE *)(v21 + 16) == 1)
          {
            v22 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a2 + 64), "vertexBitangent");
            if (!v22 || *(_BYTE *)(v22 + 16) == 1)
            {
              v19 = v22 != 0;
              goto LABEL_16;
            }
          }
        }
      }
    }
    goto LABEL_15;
  }
LABEL_16:
  v251 = *a3;
  v252 = *((_DWORD *)a3 + 2);
  v253 = *((_BYTE *)a3 + 12);
  if (v253 == 2)
  {
    re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrown((uint64_t)&v254, a3 + 2);
  }
  else if (v253 == 1)
  {
    re::DynamicArray<float>::DynamicArray((uint64_t)&v254, a3 + 2);
  }
  else
  {
    if (v253)
    {
      re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "GeomIndexMap", 433);
      _os_crash();
      __break(1u);
      goto LABEL_607;
    }
    LODWORD(v254) = *((_DWORD *)a3 + 4);
  }
  v244 = *a4;
  v245 = *((_DWORD *)a4 + 2);
  v246 = *((_BYTE *)a4 + 12);
  switch(v246)
  {
    case 2:
      re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrown((uint64_t)&v247, a4 + 2);
      break;
    case 1:
      re::DynamicArray<float>::DynamicArray((uint64_t)&v247, a4 + 2);
      break;
    case 0:
      LODWORD(v247) = *((_DWORD *)a4 + 4);
      break;
    default:
LABEL_607:
      re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "GeomIndexMap", 433);
      _os_crash();
      __break(1u);
      goto LABEL_608;
  }
  v237 = *a3;
  v238 = *((_DWORD *)a3 + 2);
  v239 = *((_BYTE *)a3 + 12);
  v221 = (re::UniqueNameGenerator *)a8;
  v222 = a5;
  v223 = a7;
  switch(v239)
  {
    case 2:
      re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrown((uint64_t)&v240, a3 + 2);
      break;
    case 1:
      re::DynamicArray<float>::DynamicArray((uint64_t)&v240, a3 + 2);
      break;
    case 0:
      LODWORD(v240) = *((_DWORD *)a3 + 4);
      break;
    default:
LABEL_608:
      re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "GeomIndexMap", 433);
      _os_crash();
      __break(1u);
      goto LABEL_609;
  }
  v23 = a2;
  if (v19)
    goto LABEL_75;
  *(_QWORD *)buf = 0xFFFFFFFF00000000;
  *(_DWORD *)&buf[8] = -1;
  buf[12] = 0;
  LODWORD(v261) = 0;
  re::makeConditionedMeshForGPU((unsigned int *)a2, (_BYTE *)a1, (unint64_t)v258, (unint64_t)&v237, (const re::GeomIndexMap *)buf, v280);
  re::remapIndexMap((unsigned int *)&v237, (const re::GeomIndexMap *)a3, (uint64_t)v298);
  re::GeomIndexMap::operator=((uint64_t)&v251, (uint64_t)v298);
  if (BYTE12(v298[0]))
  {
    if (BYTE12(v298[0]) == 2)
    {
      v25 = *((_QWORD *)&v299 + 1);
      if (!*((_QWORD *)&v299 + 1))
        goto LABEL_46;
      if (*((_QWORD *)&v298[1] + 1))
        *((_QWORD *)&v298[1] + 1) = 0;
      if (!*(_QWORD *)&v298[1])
        goto LABEL_46;
    }
    else
    {
      if (BYTE12(v298[0]) != 1)
        goto LABEL_613;
      v25 = *(_QWORD *)&v298[1];
      if (!*(_QWORD *)&v298[1] || !*(_QWORD *)&v298[3])
        goto LABEL_46;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
  }
LABEL_46:
  re::remapIndexMap((unsigned int *)buf, (const re::GeomIndexMap *)a4, (uint64_t)v298);
  re::GeomIndexMap::operator=((uint64_t)&v244, (uint64_t)v298);
  if (!BYTE12(v298[0]))
    goto LABEL_57;
  if (BYTE12(v298[0]) == 2)
  {
    v27 = *((_QWORD *)&v299 + 1);
    if (!*((_QWORD *)&v299 + 1))
      goto LABEL_57;
    if (*((_QWORD *)&v298[1] + 1))
      *((_QWORD *)&v298[1] + 1) = 0;
    v26 = *(_QWORD *)&v298[1];
    if (!*(_QWORD *)&v298[1])
      goto LABEL_57;
LABEL_56:
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
    goto LABEL_57;
  }
  if (BYTE12(v298[0]) != 1)
    goto LABEL_614;
  v27 = *(_QWORD *)&v298[1];
  if (*(_QWORD *)&v298[1])
  {
    v26 = *(_QWORD *)&v298[3];
    if (*(_QWORD *)&v298[3])
      goto LABEL_56;
  }
LABEL_57:
  if (!v280[0] && *(_QWORD *)&v280[24] && (v280[32] & 1) != 0)
    (*(void (**)(void))(**(_QWORD **)&v280[24] + 40))();
  switch(buf[12])
  {
    case 0u:
      goto LABEL_74;
    case 2u:
      v28 = *((_QWORD *)&v264 + 1);
      if (!*((_QWORD *)&v264 + 1))
        goto LABEL_74;
      if (*((_QWORD *)&v261 + 1))
        *((_QWORD *)&v261 + 1) = 0;
      if (!(_QWORD)v261)
        goto LABEL_74;
      v29 = &v261;
      break;
    case 1u:
      v28 = v261;
      if (!(_QWORD)v261)
        goto LABEL_74;
      v29 = &v263;
      if (!(_QWORD)v263)
        goto LABEL_73;
      break;
    default:
      goto LABEL_615;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
LABEL_73:
  *(_QWORD *)v29 = 0;
LABEL_74:
  v23 = (uint64_t)v258;
LABEL_75:
  v220 = a6;
  v30 = (re::internal::GeomAttributeManager *)(v23 + 64);
  v224 = (_QWORD *)*(unsigned int *)(v23 + 16);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v286, 4508, *(unsigned int *)(v23 + 640));
  *(_QWORD *)&v274[32] = 0;
  memset(v274, 0, 28);
  v31 = *(_QWORD *)(v23 + 640);
  v230 = (unsigned int *)a2;
  v231 = a1;
  v229 = v23;
  v232 = (re::internal::GeomAttributeManager *)(v23 + 64);
  if ((_DWORD)v31)
  {
    re::DynamicArray<re::MeshAssetBuffer>::setCapacity(v274, *(_QWORD *)(v23 + 640));
    v32 = 0;
    a8 = (unint64_t)"skinnedAnimationGeometryBindTransform";
    do
    {
      v33 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex(v30, v32);
      v34 = (const char *)*((_QWORD *)v33 + 1);
      if (strcmp("skinnedAnimationGeometryBindTransform", v34))
      {
        if (strcmp("skinnedAnimationWeights", v34))
        {
          if (strcmp("skinnedAnimationJointIndices", v34))
          {
            if (strcmp("skinnedAnimationRemappedJointIndices", v34))
            {
              if (strcmp("skinnedAnimationInfluenceEndIndices", v34))
              {
                v35 = (_anonymous_namespace_ *)strcmp("skeletonPath", v34);
                if ((_DWORD)v35)
                {
                  v36 = re::Hash<re::DynamicString>::operator()((uint64_t)buf, (uint64_t)v289);
                  if (!*(_QWORD *)(a1 + 24)
                    || (v37 = a1,
                        v38 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * (v36 % *(unsigned int *)(a1 + 48))),
                        a8 = 0x7FFFFFFFLL,
                        (_DWORD)v38 == 0x7FFFFFFF))
                  {
LABEL_88:
                    v23 = 0;
                  }
                  else
                  {
                    v39 = *(_QWORD *)(v37 + 40);
                    while (!re::DynamicString::operator==(v39 + 56 * v38 + 16, (uint64_t)v289))
                    {
                      v38 = *(_DWORD *)(v39 + 56 * v38 + 8) & 0x7FFFFFFF;
                      if (v38 == 0x7FFFFFFF)
                        goto LABEL_88;
                    }
                    v23 = v39 + 56 * v38 + 48;
                  }
                  v40 = v33[16];
                  v41 = (re *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33);
                  a1 = (unint64_t)v41;
                  switch(v33[17])
                  {
                    case 0:
                      if (v23)
                      {
                        v43 = *re::pipelineLogObjects(v41);
                        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_impl(&dword_224FE9000, v43, OS_LOG_TYPE_DEFAULT, "Mesh attribute type kInt16 is not supported for compression.", buf, 2u);
                        }
                      }
                      v44 = 50;
                      break;
                    case 1:
                      if (v23)
                      {
                        v45 = *re::pipelineLogObjects(v41);
                        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_impl(&dword_224FE9000, v45, OS_LOG_TYPE_DEFAULT, "Mesh attribute type kUInt16 is not supported for compression.", buf, 2u);
                        }
                      }
                      v44 = 49;
                      break;
                    case 2:
                      if (v23)
                      {
                        v46 = *re::pipelineLogObjects(v41);
                        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_impl(&dword_224FE9000, v46, OS_LOG_TYPE_DEFAULT, "Mesh attribute type kInt32 is not supported for compression.", buf, 2u);
                        }
                      }
                      v44 = 32;
                      break;
                    case 3:
                      if (v23)
                      {
                        v47 = *re::pipelineLogObjects(v41);
                        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_impl(&dword_224FE9000, v47, OS_LOG_TYPE_DEFAULT, "Mesh attribute type kUInt32 is not supported for compression.", buf, 2u);
                        }
                      }
                      v44 = 36;
                      break;
                    case 4:
                      if (!v23)
                        goto LABEL_114;
                      if (*(_BYTE *)v23)
                        v44 = 28;
                      else
                        v44 = 53;
                      break;
                    case 5:
                      if (v23)
                      {
                        v48 = *re::pipelineLogObjects(v41);
                        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_impl(&dword_224FE9000, v48, OS_LOG_TYPE_DEFAULT, "Mesh attribute type kDouble is not supported for compression.", buf, 2u);
                        }
                      }
LABEL_114:
                      v44 = 28;
                      break;
                    case 6:
                      if (v23)
                      {
                        v49 = *(unsigned __int8 *)v23 >= 3u;
                        v44 = 0xA0719u >> (8 * *(_BYTE *)v23);
                        v50 = 29;
                        goto LABEL_122;
                      }
                      v44 = 29;
                      break;
                    case 7:
                      if (!v23)
                        goto LABEL_119;
                      v49 = *(unsigned __int8 *)v23 >= 3u;
                      v44 = 0xB081Au >> (8 * *(_BYTE *)v23);
                      v50 = 30;
                      goto LABEL_122;
                    case 8:
                      if (v23)
                      {
                        v49 = *(unsigned __int8 *)v23 >= 3u;
                        v44 = 0xC091Bu >> (8 * *(_BYTE *)v23);
                        v50 = 31;
LABEL_122:
                        if (v49)
                          v44 = v50;
                      }
                      else
                      {
                        v44 = 31;
                      }
                      break;
                    case 9:
                      if (v23)
                      {
                        v51 = *re::pipelineLogObjects(v41);
                        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_impl(&dword_224FE9000, v51, OS_LOG_TYPE_DEFAULT, "Mesh attribute type kUInt8 is not supported for compression.", buf, 2u);
                        }
                      }
                      v44 = 45;
                      break;
                    case 0xA:
                      if (v23)
                      {
                        v52 = *re::pipelineLogObjects(v41);
                        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_impl(&dword_224FE9000, v52, OS_LOG_TYPE_DEFAULT, "Mesh attribute type kInt8 is not supported for compression.", buf, 2u);
                        }
                      }
                      v44 = 46;
                      break;
                    default:
LABEL_119:
                      v44 = 30;
                      break;
                  }
                  *(_QWORD *)&v280[32] = 0;
                  memset(v280, 0, 28);
                  LODWORD(v225) = v44;
                  v53 = re::sizeFromVertexFormat(v44, v42);
                  v54 = v53;
                  LODWORD(v228) = v40;
                  if (v40 == 1)
                    v55 = (v53 + 3) & 0xFC;
                  else
                    v55 = v53;
                  re::DynamicArray<BOOL>::resize((uint64_t)v280, a1 * v55);
                  if (v23)
                  {
                    switch(v33[17])
                    {
                      case 0:
                        goto LABEL_145;
                      case 1:
                        goto LABEL_147;
                      case 2:
                        goto LABEL_149;
                      case 3:
                        goto LABEL_151;
                      case 4:
                      case 6:
                      case 7:
                      case 8:
                        v57 = *(float *)(v23 + 4);
                        v58 = *(unsigned __int8 *)v23;
                        if (v58 == 2)
                        {
                          v56 = (_anonymous_namespace_ *)re::fillStreamSN8((re *)v33, *(const re::GeomAttribute **)&v280[32], (char *)v55, 0, v57);
                        }
                        else if (v58 == 1)
                        {
                          v56 = (_anonymous_namespace_ *)re::fillStreamUN8((re *)v33, *(const re::GeomAttribute **)&v280[32], (char *)v55, 0, v57);
                        }
                        else if (!*(_BYTE *)v23)
                        {
                          v56 = (_anonymous_namespace_ *)re::fillStreamFP16((re *)v33, *(const re::GeomAttribute **)&v280[32], (char *)v55, 0, v57);
                        }
                        goto LABEL_234;
                      case 5:
                        goto LABEL_153;
                      case 9:
                        goto LABEL_156;
                      case 0xA:
                        goto LABEL_158;
                      default:
                        goto LABEL_234;
                    }
                  }
                  switch(v33[17])
                  {
                    case 0:
LABEL_145:
                      a1 = *(_QWORD *)&v280[32];
                      if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33))
                      {
                        v23 = re::internal::GeomTypedAttribute<short>::operator[]((uint64_t)v33, 0);
                        v59 = (*(unsigned int (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33);
                      }
                      else
                      {
                        v59 = 0;
                        v23 = 0;
                      }
                      v56 = (_anonymous_namespace_ *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33);
                      if (!(_DWORD)v56)
                        goto LABEL_234;
                      a8 = 0;
                      v68 = v54;
                      a2 = v55;
                      v69 = v56;
                      do
                      {
                        if (v59 == a8)
                          goto LABEL_582;
                        v56 = (_anonymous_namespace_ *)memcpy((void *)a1, (const void *)v23, v68);
                        ++a8;
                        a1 += a2;
                        v23 += 2;
                      }
                      while (v69 != a8);
                      goto LABEL_234;
                    case 1:
LABEL_147:
                      a1 = *(_QWORD *)&v280[32];
                      if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33))
                      {
                        v23 = re::internal::GeomTypedAttribute<short>::operator[]((uint64_t)v33, 0);
                        v59 = (*(unsigned int (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33);
                      }
                      else
                      {
                        v59 = 0;
                        v23 = 0;
                      }
                      v56 = (_anonymous_namespace_ *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33);
                      if (!(_DWORD)v56)
                        goto LABEL_234;
                      a8 = 0;
                      v70 = v54;
                      a2 = v55;
                      v71 = v56;
                      do
                      {
                        if (v59 == a8)
                          goto LABEL_583;
                        v56 = (_anonymous_namespace_ *)memcpy((void *)a1, (const void *)v23, v70);
                        ++a8;
                        a1 += a2;
                        v23 += 2;
                      }
                      while (v71 != a8);
                      goto LABEL_234;
                    case 2:
LABEL_149:
                      a1 = *(_QWORD *)&v280[32];
                      if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33))
                      {
                        v23 = re::internal::GeomTypedAttribute<int>::operator[]((uint64_t)v33, 0);
                        v59 = (*(unsigned int (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33);
                      }
                      else
                      {
                        v59 = 0;
                        v23 = 0;
                      }
                      v56 = (_anonymous_namespace_ *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33);
                      if (!(_DWORD)v56)
                        goto LABEL_234;
                      a8 = 0;
                      v72 = v54;
                      a2 = v55;
                      v73 = v56;
                      do
                      {
                        if (v59 == a8)
                          goto LABEL_584;
                        v56 = (_anonymous_namespace_ *)memcpy((void *)a1, (const void *)v23, v72);
                        ++a8;
                        a1 += a2;
                        v23 += 4;
                      }
                      while (v73 != a8);
                      goto LABEL_234;
                    case 3:
LABEL_151:
                      a1 = *(_QWORD *)&v280[32];
                      if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33))
                      {
                        v23 = re::internal::GeomTypedAttribute<int>::operator[]((uint64_t)v33, 0);
                        v59 = (*(unsigned int (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33);
                      }
                      else
                      {
                        v59 = 0;
                        v23 = 0;
                      }
                      v56 = (_anonymous_namespace_ *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33);
                      if (!(_DWORD)v56)
                        goto LABEL_234;
                      a8 = 0;
                      v74 = v54;
                      a2 = v55;
                      v75 = v56;
                      do
                      {
                        if (v59 == a8)
                          goto LABEL_585;
                        v56 = (_anonymous_namespace_ *)memcpy((void *)a1, (const void *)v23, v74);
                        ++a8;
                        a1 += a2;
                        v23 += 4;
                      }
                      while (v75 != a8);
                      goto LABEL_234;
                    case 4:
                      v60 = *(char **)&v280[32];
                      if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33))
                      {
                        v61 = (char *)re::internal::GeomTypedAttribute<int>::operator[]((uint64_t)v33, 0);
                        v59 = (*(unsigned int (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33);
                      }
                      else
                      {
                        v59 = 0;
                        v61 = 0;
                      }
                      v56 = (_anonymous_namespace_ *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33);
                      if (!(_DWORD)v56)
                        goto LABEL_234;
                      a8 = 0;
                      v83 = v54;
                      v84 = v55;
                      v85 = v56;
                      do
                      {
                        if (v59 == a8)
                          goto LABEL_596;
                        v56 = (_anonymous_namespace_ *)memcpy(v60, v61, v83);
                        ++a8;
                        v60 += v84;
                        v61 += 4;
                      }
                      while (v85 != a8);
                      goto LABEL_234;
                    case 5:
LABEL_153:
                      v56 = (_anonymous_namespace_ *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33);
                      if ((_DWORD)v56)
                      {
                        a2 = re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)v33, 0);
                        v56 = (_anonymous_namespace_ *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33);
                        v59 = v56;
                        if (!(_DWORD)a1)
                          goto LABEL_234;
                      }
                      else
                      {
                        v59 = 0;
                        a2 = 0;
                        if (!(_DWORD)a1)
                          goto LABEL_234;
                      }
                      v76 = 0;
                      v77 = *(float **)&v280[32];
                      do
                      {
                        if (v59 == v76)
                          goto LABEL_586;
                        v78 = *(double *)(a2 + 8 * v76);
                        *v77 = v78;
                        ++v76;
                        v77 = (float *)((char *)v77 + v55);
                      }
                      while (a1 != v76);
                      goto LABEL_234;
                    case 6:
                      v62 = *(char **)&v280[32];
                      if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33))
                      {
                        v63 = re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)v33, 0);
                        v59 = (*(unsigned int (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33);
                      }
                      else
                      {
                        v59 = 0;
                        v63 = 0;
                      }
                      v56 = (_anonymous_namespace_ *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33);
                      if (!(_DWORD)v56)
                        goto LABEL_234;
                      a8 = 0;
                      v86 = v54;
                      v87 = v55;
                      v88 = v56;
                      do
                      {
                        if (v59 == a8)
                          goto LABEL_597;
                        v56 = (_anonymous_namespace_ *)memcpy(v62, (const void *)(v63 + 8 * a8++), v86);
                        v62 += v87;
                      }
                      while (v88 != a8);
                      goto LABEL_234;
                    case 7:
                      v64 = *(char **)&v280[32];
                      if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33))
                      {
                        v65 = (char *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v33, 0);
                        v59 = (*(unsigned int (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33);
                      }
                      else
                      {
                        v59 = 0;
                        v65 = 0;
                      }
                      v56 = (_anonymous_namespace_ *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33);
                      if (!(_DWORD)v56)
                        goto LABEL_234;
                      a8 = 0;
                      v89 = v54;
                      v90 = v55;
                      v91 = v56;
                      do
                      {
                        if (v59 == a8)
                          goto LABEL_598;
                        v56 = (_anonymous_namespace_ *)memcpy(v64, v65, v89);
                        ++a8;
                        v64 += v90;
                        v65 += 16;
                      }
                      while (v91 != a8);
                      goto LABEL_234;
                    case 8:
                      v66 = *(char **)&v280[32];
                      if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33))
                      {
                        v67 = (char *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v33, 0);
                        v59 = (*(unsigned int (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33);
                      }
                      else
                      {
                        v59 = 0;
                        v67 = 0;
                      }
                      v56 = (_anonymous_namespace_ *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33);
                      if (!(_DWORD)v56)
                        goto LABEL_234;
                      a8 = 0;
                      v92 = v54;
                      v93 = v55;
                      v94 = v56;
                      break;
                    case 9:
LABEL_156:
                      a1 = *(_QWORD *)&v280[32];
                      if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33))
                      {
                        v23 = re::internal::GeomTypedAttribute<signed char>::operator[]((uint64_t)v33, 0);
                        v59 = (*(unsigned int (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33);
                      }
                      else
                      {
                        v59 = 0;
                        v23 = 0;
                      }
                      v56 = (_anonymous_namespace_ *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33);
                      if (!(_DWORD)v56)
                        goto LABEL_234;
                      a8 = 0;
                      v79 = v54;
                      a2 = v55;
                      v80 = v56;
                      do
                      {
                        if (v59 == a8)
                          goto LABEL_587;
                        v56 = (_anonymous_namespace_ *)memcpy((void *)a1, (const void *)(v23 + a8++), v79);
                        a1 += a2;
                      }
                      while (v80 != a8);
                      goto LABEL_234;
                    case 0xA:
LABEL_158:
                      a1 = *(_QWORD *)&v280[32];
                      if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33))
                      {
                        v23 = re::internal::GeomTypedAttribute<signed char>::operator[]((uint64_t)v33, 0);
                        v59 = (*(unsigned int (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33);
                      }
                      else
                      {
                        v59 = 0;
                        v23 = 0;
                      }
                      v56 = (_anonymous_namespace_ *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v33 + 16))(v33);
                      if (!(_DWORD)v56)
                        goto LABEL_234;
                      a8 = 0;
                      v81 = v54;
                      a2 = v55;
                      v82 = v56;
                      do
                      {
                        if (v59 == a8)
                          goto LABEL_588;
                        v56 = (_anonymous_namespace_ *)memcpy((void *)a1, (const void *)(v23 + a8++), v81);
                        a1 += a2;
                      }
                      while (v82 != a8);
                      goto LABEL_234;
                    default:
                      goto LABEL_234;
                  }
                  do
                  {
                    if (v59 == a8)
                      goto LABEL_599;
                    v56 = (_anonymous_namespace_ *)memcpy(v66, v67, v92);
                    ++a8;
                    v66 += v93;
                    v67 += 16;
                  }
                  while (v94 != a8);
LABEL_234:
                  *(_QWORD *)&v298[2] = *(_QWORD *)v280;
                  *(_OWORD *)((char *)&v298[2] + 8) = *(_OWORD *)&v280[8];
                  *(_QWORD *)&v299 = *(_QWORD *)&v280[32];
                  DWORD2(v298[3]) = 1;
                  BYTE8(v299) = (_BYTE)v225;
                  BYTE9(v299) = (_DWORD)v228 == 1;
                  v95.n128_f64[0] = re::DynamicArray<re::MeshAssetBuffer>::add((_anonymous_namespace_ *)v274, (uint64_t)v298);
                  a2 = (unint64_t)v230;
                  a1 = v231;
                  v23 = v229;
                  v30 = v232;
                  a8 = (unint64_t)"skinnedAnimationGeometryBindTransform";
                  if (*(_QWORD *)&v298[2])
                  {
                    if ((_QWORD)v299)
                      (*(void (**)(double))(**(_QWORD **)&v298[2] + 40))(v95.n128_f64[0]);
                    *(_QWORD *)&v299 = 0;
                    memset(&v298[2], 0, 24);
                    ++DWORD2(v298[3]);
                  }
                  if (*(_QWORD *)&v298[0])
                  {
                    if ((BYTE8(v298[0]) & 1) != 0)
                      (*(void (**)(__n128))(**(_QWORD **)&v298[0] + 40))(v95);
                    v95 = 0uLL;
                    memset(v298, 0, 32);
                  }
                  if (*(_QWORD *)&v289[0] && (BYTE8(v289[0]) & 1) != 0)
                    (*(void (**)(__n128))(**(_QWORD **)&v289[0] + 40))(v95);
                }
              }
            }
          }
        }
      }
      ++v32;
    }
    while (v32 != (_DWORD)v31);
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v286);
  v31 = (uint64_t)v224;
  if (v274 != (_BYTE *)a9)
  {
    v97 = *a9;
    if (*a9 && *(_QWORD *)v274 && v97 != *(_QWORD *)v274)
      goto LABEL_604;
    *a9 = *(_QWORD *)v274;
    *(_QWORD *)v274 = v97;
    v98 = *(_OWORD *)(a9 + 1);
    *(_OWORD *)(a9 + 1) = *(_OWORD *)&v274[8];
    *(_OWORD *)&v274[8] = v98;
    v99 = a9[4];
    a9[4] = *(_QWORD *)&v274[32];
    *(_QWORD *)&v274[32] = v99;
    ++*(_DWORD *)&v274[24];
    ++*((_DWORD *)a9 + 6);
  }
  re::DynamicArray<re::MeshAssetBuffer>::deinit((uint64_t)v274);
  v100 = (_anonymous_namespace_ *)re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)(a9 + 25), v223);
  if (v253 && (_DWORD)v251)
  {
    if ((_QWORD)v263)
      v101.n128_f64[0] = re::DynamicArray<re::MeshAssetBuffer>::add((_anonymous_namespace_ *)a9, (uint64_t)buf);
    if ((_QWORD)v262)
    {
      if ((_QWORD)v264)
        (*(void (**)(__n128))(*(_QWORD *)v262 + 40))(v101);
      *(_QWORD *)&v264 = 0;
      *(_QWORD *)&v263 = 0;
      v262 = 0uLL;
      ++DWORD2(v263);
    }
    v100 = *(_anonymous_namespace_ **)buf;
    if (*(_QWORD *)buf && (buf[8] & 1) != 0)
      v100 = (_anonymous_namespace_ *)(*(uint64_t (**)(__n128))(**(_QWORD **)buf + 40))(v101);
  }
  if (v246 && (_DWORD)v244)
  {
    if ((_QWORD)v263)
      v102.n128_f64[0] = re::DynamicArray<re::MeshAssetBuffer>::add((_anonymous_namespace_ *)a9, (uint64_t)buf);
    if ((_QWORD)v262)
    {
      if ((_QWORD)v264)
        (*(void (**)(__n128))(*(_QWORD *)v262 + 40))(v102);
      *(_QWORD *)&v264 = 0;
      *(_QWORD *)&v263 = 0;
      v262 = 0uLL;
      ++DWORD2(v263);
    }
    v100 = *(_anonymous_namespace_ **)buf;
    if (*(_QWORD *)buf && (buf[8] & 1) != 0)
      v100 = (_anonymous_namespace_ *)(*(uint64_t (**)(__n128))(**(_QWORD **)buf + 40))(v102);
  }
  if (v239 && (_DWORD)v237)
  {
    if ((_QWORD)v263)
      v103.n128_f64[0] = re::DynamicArray<re::MeshAssetBuffer>::add((_anonymous_namespace_ *)a9, (uint64_t)buf);
    if ((_QWORD)v262)
    {
      if ((_QWORD)v264)
        (*(void (**)(__n128))(*(_QWORD *)v262 + 40))(v103);
      *(_QWORD *)&v264 = 0;
      *(_QWORD *)&v263 = 0;
      v262 = 0uLL;
      ++DWORD2(v263);
    }
    v100 = *(_anonymous_namespace_ **)buf;
    if (*(_QWORD *)buf && (buf[8] & 1) != 0)
      v100 = (_anonymous_namespace_ *)(*(uint64_t (**)(__n128))(**(_QWORD **)buf + 40))(v103);
  }
  v104 = *(_QWORD *)(v23 + 40);
  v105 = (3 * *(_DWORD *)(v23 + 8));
  v234 = 0;
  v235 = 0;
  v236 = 0;
  if ((int)v104 <= 0)
  {
    v109 = v235;
    a1 = v236;
    goto LABEL_293;
  }
  v106 = 0;
  v107 = 0;
  v108 = v104;
  v109 = v235;
  v59 = *(_QWORD *)(v23 + 40);
  while (2)
  {
    if (v107 == v59)
      goto LABEL_565;
    v110 = 0;
    v111 = v106;
    *(_OWORD *)v280 = *(_OWORD *)(*(_QWORD *)(v23 + 56) + 16 * v107);
    a1 = v236;
    v112 = v236 + 4 * v106;
    do
    {
      a8 = v111 + v110;
      if (v109 <= v111 + v110)
      {
        *(_QWORD *)v274 = 0;
        v264 = 0u;
        v263 = 0u;
        v262 = 0u;
        v261 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v298[0]) = 136315906;
        *(_QWORD *)((char *)v298 + 4) = "operator[]";
        WORD6(v298[0]) = 1024;
        *(_DWORD *)((char *)v298 + 14) = 468;
        WORD1(v298[1]) = 2048;
        *(_QWORD *)((char *)&v298[1] + 4) = a8;
        WORD6(v298[1]) = 2048;
        *(_QWORD *)((char *)&v298[1] + 14) = v109;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_322;
      }
      *(_DWORD *)(v112 + 4 * v110) = *(_DWORD *)&v280[4 * v110];
      ++v110;
    }
    while (v110 != 3);
    ++v107;
    v106 = v111 + 3;
    if (v107 != v108)
      continue;
    break;
  }
LABEL_293:
  v59 = v224 >> 16;
  v113 = 1;
  if ((_DWORD)v59)
    v113 = 2;
  *(_QWORD *)&v262 = 0;
  *(_QWORD *)&v261 = 0;
  memset(buf, 0, sizeof(buf));
  DWORD2(v261) = 0;
  re::DynamicArray<BOOL>::resize((uint64_t)buf, ((v109 << v113) + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v115 = (_DWORD *)v262;
  if ((_DWORD)v59)
  {
    for (; v109; --v109)
    {
      v116 = *(_DWORD *)a1;
      a1 += 4;
      *v115++ = v116;
    }
    v109 = 36;
  }
  else
  {
    for (; v109; --v109)
    {
      v117 = *(_DWORD *)a1;
      a1 += 4;
      *(_WORD *)v115 = v117;
      v115 = (_DWORD *)((char *)v115 + 2);
    }
    v109 = 49;
  }
  v228 = &v269[2];
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)&v269[2], (uint64_t *)buf);
  v272 = v109;
  v273 = 0;
  if (*(_QWORD *)buf && (_QWORD)v262)
    (*(void (**)(void))(**(_QWORD **)buf + 40))();
  v118 = (_anonymous_namespace_ *)re::DynamicArray<re::MeshAssetBuffer>::add((_anonymous_namespace_ *)a9, (re::DynamicString *)v265);
  *((_DWORD *)a9 + 10) = v105;
  *((_BYTE *)a9 + 44) = (_DWORD)v59 != 0;
  *((_DWORD *)a9 + 12) = (_DWORD)v224;
  *((_DWORD *)a9 + 15) = *(_DWORD *)(a2 + 16);
  *((_WORD *)a9 + 28) = v222;
  a1 = v231;
  if (*(_BYTE *)(v231 + 9))
  {
    v109 = *(unsigned int *)(v23 + 16);
    a2 = v235;
    memset(v298, 0, 32);
    re::DynamicString::setCapacity(v298, 0);
    v119 = &v298[2];
    *(_QWORD *)&v299 = 0;
    memset(&v298[2], 0, 28);
    WORD4(v299) = 256;
    *(_QWORD *)buf = "tension";
    *(_QWORD *)&buf[8] = 7;
    re::DynamicString::operator=((re::DynamicString *)v298, (uint64_t)buf);
    WORD4(v299) = 284;
    re::DynamicArray<BOOL>::resize((uint64_t)&v298[2], 4 * v109);
    re::DynamicArray<re::MeshAssetBuffer>::add((_anonymous_namespace_ *)a9, (re::DynamicString *)v298);
    if (re::internal::GeomAttributeManager::attributeByName(v232, "vertexAdjacencies"))
    {
      v120 = (_anonymous_namespace_ *)re::internal::GeomAttributeManager::attributeByName(v232, "accumulatedVertexValence");
      if (v120)
      {
        v225 = &v298[2];
        memset(v280, 0, 32);
        re::DynamicString::setCapacity(v280, 0);
        __dst = 0;
        __n = 0;
        *(_QWORD *)&v280[32] = 0;
        v281 = 0;
        v283 = 0;
        v285 = 256;
        *(_QWORD *)buf = "adjacentFaceArea";
        *(_QWORD *)&buf[8] = 16;
        re::DynamicString::operator=((re::DynamicString *)v280, (uint64_t)buf);
        v285 = 284;
        v224 = &v280[32];
        re::DynamicArray<BOOL>::resize((uint64_t)&v280[32], 4 * v109);
        *(_QWORD *)&v274[32] = 0;
        memset(v274, 0, 28);
        v121 = *(unsigned int *)(v23 + 8);
        if ((_DWORD)v121)
          re::DynamicArray<int>::setCapacity(v274, v121);
        v122 = re::GeomMesh::accessVertexPositions((re::GeomMesh *)v23);
        if (a2)
        {
          v124 = v122;
          v31 = v123;
          a1 = 0;
          while (1)
          {
            v23 = v235;
            if (v235 <= a1)
              break;
            v59 = *(unsigned int *)(v236 + 4 * a1);
            if (v59 >= v31)
              goto LABEL_574;
            a8 = a1 + 1;
            if (v235 <= a1 + 1)
              goto LABEL_575;
            v125 = *(unsigned int *)(v236 + 4 * a1 + 4);
            if (v125 >= v31)
              goto LABEL_576;
            a8 = a1 + 2;
            if (v235 <= a1 + 2)
              goto LABEL_577;
            v23 = *(unsigned int *)(v236 + 4 * a1 + 8);
            if (v23 >= v31)
              goto LABEL_578;
            v126 = *(float32x4_t *)(v124 + 16 * v59);
            v127 = vsubq_f32(*(float32x4_t *)(v124 + 16 * v125), v126);
            v128 = vsubq_f32(*(float32x4_t *)(v124 + 16 * v23), v126);
            v129 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v128, (int32x4_t)v128), (int8x16_t)v128, 0xCuLL), vnegq_f32(v127)), v128, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v127, (int32x4_t)v127), (int8x16_t)v127, 0xCuLL));
            v130 = vmulq_f32(v129, v129);
            *(float *)buf = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v130.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v130, 2), v130)).f32[0])* 0.5;
            re::DynamicArray<float>::add((_anonymous_namespace_ *)v274, (float *)buf);
            a1 += 3;
            if (a1 >= a2)
              goto LABEL_319;
          }
LABEL_573:
          *(_QWORD *)v286 = 0;
          v264 = 0u;
          v263 = 0u;
          v262 = 0u;
          v261 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v289[0]) = 136315906;
          *(_QWORD *)((char *)v289 + 4) = "operator[]";
          WORD6(v289[0]) = 1024;
          *(_DWORD *)((char *)v289 + 14) = 476;
          WORD1(v289[1]) = 2048;
          *(_QWORD *)((char *)&v289[1] + 4) = a1;
          WORD6(v289[1]) = 2048;
          *(_QWORD *)((char *)&v289[1] + 14) = v23;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_574:
          *(_QWORD *)v286 = 0;
          v264 = 0u;
          v263 = 0u;
          v262 = 0u;
          v261 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v289[0]) = 136315906;
          *(_QWORD *)((char *)v289 + 4) = "operator[]";
          WORD6(v289[0]) = 1024;
          *(_DWORD *)((char *)v289 + 14) = 601;
          WORD1(v289[1]) = 2048;
          *(_QWORD *)((char *)&v289[1] + 4) = v59;
          WORD6(v289[1]) = 2048;
          *(_QWORD *)((char *)&v289[1] + 14) = v31;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_575:
          *(_QWORD *)v286 = 0;
          v264 = 0u;
          v263 = 0u;
          v262 = 0u;
          v261 = 0u;
          *(_OWORD *)buf = 0u;
          v125 = MEMORY[0x24BDACB70];
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v289[0]) = 136315906;
          *(_QWORD *)((char *)v289 + 4) = "operator[]";
          WORD6(v289[0]) = 1024;
          *(_DWORD *)((char *)v289 + 14) = 476;
          WORD1(v289[1]) = 2048;
          *(_QWORD *)((char *)&v289[1] + 4) = a8;
          WORD6(v289[1]) = 2048;
          *(_QWORD *)((char *)&v289[1] + 14) = v23;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_576:
          *(_QWORD *)v286 = 0;
          v264 = 0u;
          v263 = 0u;
          v262 = 0u;
          v261 = 0u;
          *(_OWORD *)buf = 0u;
          v124 = MEMORY[0x24BDACB70];
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v289[0]) = 136315906;
          *(_QWORD *)((char *)v289 + 4) = "operator[]";
          WORD6(v289[0]) = 1024;
          *(_DWORD *)((char *)v289 + 14) = 601;
          WORD1(v289[1]) = 2048;
          *(_QWORD *)((char *)&v289[1] + 4) = v125;
          WORD6(v289[1]) = 2048;
          *(_QWORD *)((char *)&v289[1] + 14) = v31;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_577:
          *(_QWORD *)v286 = 0;
          v264 = 0u;
          v263 = 0u;
          v262 = 0u;
          v261 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v289[0]) = 136315906;
          *(_QWORD *)((char *)v289 + 4) = "operator[]";
          WORD6(v289[0]) = 1024;
          *(_DWORD *)((char *)v289 + 14) = 476;
          WORD1(v289[1]) = 2048;
          *(_QWORD *)((char *)&v289[1] + 4) = a8;
          WORD6(v289[1]) = 2048;
          *(_QWORD *)((char *)&v289[1] + 14) = v23;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_578:
          *(_QWORD *)v286 = 0;
          v264 = 0u;
          v263 = 0u;
          v262 = 0u;
          v261 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v289[0]) = 136315906;
          *(_QWORD *)((char *)v289 + 4) = "operator[]";
          WORD6(v289[0]) = 1024;
          *(_DWORD *)((char *)v289 + 14) = 601;
          WORD1(v289[1]) = 2048;
          *(_QWORD *)((char *)&v289[1] + 4) = v23;
          WORD6(v289[1]) = 2048;
          *(_QWORD *)((char *)&v289[1] + 14) = v31;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_579:
          *(_QWORD *)v280 = 0;
          v264 = 0u;
          v263 = 0u;
          v262 = 0u;
          v261 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v298[0]) = 136315906;
          *(_QWORD *)((char *)v298 + 4) = "operator[]";
          WORD6(v298[0]) = 1024;
          *(_DWORD *)((char *)v298 + 14) = 601;
          WORD1(v298[1]) = 2048;
          *(_QWORD *)((char *)&v298[1] + 4) = v59;
          WORD6(v298[1]) = 2048;
          *(_QWORD *)((char *)&v298[1] + 14) = v59;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_580:
          *(_QWORD *)v280 = 0;
          v264 = 0u;
          v263 = 0u;
          v262 = 0u;
          v261 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v298[0]) = 136315906;
          *(_QWORD *)((char *)v298 + 4) = "operator[]";
          WORD6(v298[0]) = 1024;
          *(_DWORD *)((char *)v298 + 14) = 468;
          WORD1(v298[1]) = 2048;
          *(_QWORD *)((char *)&v298[1] + 4) = v124;
          WORD6(v298[1]) = 2048;
          *(_QWORD *)((char *)&v298[1] + 14) = v124;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_581:
          *(_QWORD *)v291 = 0;
          v264 = 0u;
          v263 = 0u;
          v262 = 0u;
          v261 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v286 = 136315906;
          *(_QWORD *)&v286[4] = "operator[]";
          *(_WORD *)&v286[12] = 1024;
          *(_DWORD *)&v286[14] = 601;
          *(_WORD *)&v286[18] = 2048;
          *(_QWORD *)&v286[20] = a2;
          v287 = 2048;
          *(_QWORD *)v288 = a2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_582:
          *(_QWORD *)v291 = 0;
          v264 = 0u;
          v263 = 0u;
          v262 = 0u;
          v261 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v265 = 136315906;
          *(_QWORD *)&v265[4] = "operator[]";
          v266 = 1024;
          *(_DWORD *)v267 = 601;
          *(_WORD *)&v267[4] = 2048;
          *(_QWORD *)&v267[6] = v59;
          v268 = 2048;
          *(_QWORD *)v269 = v59;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_583:
          *(_QWORD *)v291 = 0;
          v264 = 0u;
          v263 = 0u;
          v262 = 0u;
          v261 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v265 = 136315906;
          *(_QWORD *)&v265[4] = "operator[]";
          v266 = 1024;
          *(_DWORD *)v267 = 601;
          *(_WORD *)&v267[4] = 2048;
          *(_QWORD *)&v267[6] = v59;
          v268 = 2048;
          *(_QWORD *)v269 = v59;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_584:
          *(_QWORD *)v291 = 0;
          v264 = 0u;
          v263 = 0u;
          v262 = 0u;
          v261 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v265 = 136315906;
          *(_QWORD *)&v265[4] = "operator[]";
          v266 = 1024;
          *(_DWORD *)v267 = 601;
          *(_WORD *)&v267[4] = 2048;
          *(_QWORD *)&v267[6] = v59;
          v268 = 2048;
          *(_QWORD *)v269 = v59;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_585:
          *(_QWORD *)v291 = 0;
          v264 = 0u;
          v263 = 0u;
          v262 = 0u;
          v261 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v265 = 136315906;
          *(_QWORD *)&v265[4] = "operator[]";
          v266 = 1024;
          *(_DWORD *)v267 = 601;
          *(_WORD *)&v267[4] = 2048;
          *(_QWORD *)&v267[6] = v59;
          v268 = 2048;
          *(_QWORD *)v269 = v59;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_586:
          *(_QWORD *)v291 = 0;
          v264 = 0u;
          v263 = 0u;
          v262 = 0u;
          v261 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v265 = 136315906;
          *(_QWORD *)&v265[4] = "operator[]";
          v266 = 1024;
          *(_DWORD *)v267 = 601;
          *(_WORD *)&v267[4] = 2048;
          *(_QWORD *)&v267[6] = v59;
          v268 = 2048;
          *(_QWORD *)v269 = v59;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_587:
          *(_QWORD *)v291 = 0;
          v264 = 0u;
          v263 = 0u;
          v262 = 0u;
          v261 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v265 = 136315906;
          *(_QWORD *)&v265[4] = "operator[]";
          v266 = 1024;
          *(_DWORD *)v267 = 601;
          *(_WORD *)&v267[4] = 2048;
          *(_QWORD *)&v267[6] = v59;
          v268 = 2048;
          *(_QWORD *)v269 = v59;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_588:
          *(_QWORD *)v291 = 0;
          v264 = 0u;
          v263 = 0u;
          v262 = 0u;
          v261 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v265 = 136315906;
          *(_QWORD *)&v265[4] = "operator[]";
          v266 = 1024;
          *(_DWORD *)v267 = 601;
          *(_WORD *)&v267[4] = 2048;
          *(_QWORD *)&v267[6] = v59;
          v268 = 2048;
          *(_QWORD *)v269 = v59;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_589:
          *(_QWORD *)v274 = 0;
          v299 = 0u;
          memset(v298, 0, sizeof(v298));
          v196 = MEMORY[0x24BDACB70];
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v280 = 136315906;
          *(_QWORD *)&v280[4] = "operator[]";
          *(_WORD *)&v280[12] = 1024;
          *(_DWORD *)&v280[14] = 601;
          *(_WORD *)&v280[18] = 2048;
          *(_QWORD *)&v280[20] = a8;
          *(_WORD *)&v280[28] = 2048;
          *(_QWORD *)&v280[30] = a8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_590:
          *(_QWORD *)v274 = 0;
          v299 = 0u;
          memset(v298, 0, sizeof(v298));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v280 = 136315906;
          *(_QWORD *)&v280[4] = "operator[]";
          *(_WORD *)&v280[12] = 1024;
          *(_DWORD *)&v280[14] = 601;
          *(_WORD *)&v280[18] = 2048;
          *(_QWORD *)&v280[20] = v23;
          *(_WORD *)&v280[28] = 2048;
          *(_QWORD *)&v280[30] = v196;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_591:
          *(_QWORD *)v274 = 0;
          v299 = 0u;
          memset(v298, 0, sizeof(v298));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v280 = 136315906;
          *(_QWORD *)&v280[4] = "operator[]";
          *(_WORD *)&v280[12] = 1024;
          *(_DWORD *)&v280[14] = 789;
          *(_WORD *)&v280[18] = 2048;
          *(_QWORD *)&v280[20] = a1;
          *(_WORD *)&v280[28] = 2048;
          *(_QWORD *)&v280[30] = v31;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_592:
          *(_QWORD *)v291 = 0;
          v264 = 0u;
          v263 = 0u;
          v262 = 0u;
          v261 = 0u;
          *(_OWORD *)buf = 0u;
          v196 = MEMORY[0x24BDACB70];
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v286 = 136315906;
          *(_QWORD *)&v286[4] = "operator[]";
          *(_WORD *)&v286[12] = 1024;
          *(_DWORD *)&v286[14] = 601;
          *(_WORD *)&v286[18] = 2048;
          *(_QWORD *)&v286[20] = v59;
          v287 = 2048;
          *(_QWORD *)v288 = a2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_593:
          *(_QWORD *)v274 = 0;
          v299 = 0u;
          memset(v298, 0, sizeof(v298));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v280 = 136315906;
          *(_QWORD *)&v280[4] = "operator[]";
          *(_WORD *)&v280[12] = 1024;
          *(_DWORD *)&v280[14] = 601;
          *(_WORD *)&v280[18] = 2048;
          *(_QWORD *)&v280[20] = v31;
          *(_WORD *)&v280[28] = 2048;
          *(_QWORD *)&v280[30] = v196;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_594:
          v259 = 0;
          v299 = 0u;
          memset(v298, 0, sizeof(v298));
          v196 = MEMORY[0x24BDACB70];
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v291 = 136315906;
          *(_QWORD *)&v291[4] = "operator[]";
          v292 = 1024;
          v293 = 789;
          v294 = 2048;
          v295 = a2;
          v296 = 2048;
          v297 = v59;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_595:
          v259 = 0;
          v299 = 0u;
          memset(v298, 0, sizeof(v298));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v291 = 136315906;
          *(_QWORD *)&v291[4] = "operator[]";
          v292 = 1024;
          v293 = 601;
          v294 = 2048;
          v295 = v59;
          v296 = 2048;
          v297 = v196;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_596:
          *(_QWORD *)v291 = 0;
          v264 = 0u;
          v263 = 0u;
          v262 = 0u;
          v261 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v265 = 136315906;
          *(_QWORD *)&v265[4] = "operator[]";
          v266 = 1024;
          *(_DWORD *)v267 = 601;
          *(_WORD *)&v267[4] = 2048;
          *(_QWORD *)&v267[6] = v59;
          v268 = 2048;
          *(_QWORD *)v269 = v59;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_597:
          *(_QWORD *)v291 = 0;
          v264 = 0u;
          v263 = 0u;
          v262 = 0u;
          v261 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v265 = 136315906;
          *(_QWORD *)&v265[4] = "operator[]";
          v266 = 1024;
          *(_DWORD *)v267 = 601;
          *(_WORD *)&v267[4] = 2048;
          *(_QWORD *)&v267[6] = v59;
          v268 = 2048;
          *(_QWORD *)v269 = v59;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_598:
          *(_QWORD *)v291 = 0;
          v264 = 0u;
          v263 = 0u;
          v262 = 0u;
          v261 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v265 = 136315906;
          *(_QWORD *)&v265[4] = "operator[]";
          v266 = 1024;
          *(_DWORD *)v267 = 601;
          *(_WORD *)&v267[4] = 2048;
          *(_QWORD *)&v267[6] = v59;
          v268 = 2048;
          *(_QWORD *)v269 = v59;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_599:
          *(_QWORD *)v291 = 0;
          v264 = 0u;
          v263 = 0u;
          v262 = 0u;
          v261 = 0u;
          *(_OWORD *)buf = 0u;
          v196 = MEMORY[0x24BDACB70];
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v265 = 136315906;
          *(_QWORD *)&v265[4] = "operator[]";
          v266 = 1024;
          *(_DWORD *)v267 = 601;
          *(_WORD *)&v267[4] = 2048;
          *(_QWORD *)&v267[6] = v59;
          v268 = 2048;
          *(_QWORD *)v269 = v59;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_600:
          v259 = 0;
          v299 = 0u;
          memset(v298, 0, sizeof(v298));
          LODWORD(v147) = MEMORY[0x24BDACB70];
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v291 = 136315906;
          *(_QWORD *)&v291[4] = "operator[]";
          v292 = 1024;
          v293 = 601;
          v294 = 2048;
          v295 = a8;
          v296 = 2048;
          v297 = v196;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_601:
          *(_QWORD *)v280 = 0;
          v264 = 0u;
          v263 = 0u;
          v262 = 0u;
          v261 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v298[0]) = 136315906;
          *(_QWORD *)((char *)v298 + 4) = "operator[]";
          WORD6(v298[0]) = 1024;
          *(_DWORD *)((char *)v298 + 14) = 601;
          WORD1(v298[1]) = 2048;
          *(_QWORD *)((char *)&v298[1] + 4) = 1;
          WORD6(v298[1]) = 2048;
          *(_QWORD *)((char *)&v298[1] + 14) = 1;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_602;
        }
LABEL_319:
        v131 = re::internal::GeomAttributeManager::attributeByName(v232, "vertexAdjacencies");
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v131 + 16))(v131))
        {
          v23 = re::internal::GeomTypedAttribute<int>::operator[](v131, 0);
          v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v131 + 16))(v131);
          goto LABEL_323;
        }
LABEL_322:
        v31 = 0;
        v23 = 0;
LABEL_323:
        v132 = re::internal::GeomAttributeManager::attributeByName(v232, "accumulatedVertexValence");
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v132 + 16))(v132))
        {
          v105 = re::internal::GeomTypedAttribute<int>::operator[](v132, 0);
          a2 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v132 + 16))(v132);
        }
        else
        {
          a2 = 0;
          v105 = 0;
        }
        *(_QWORD *)&v289[2] = 0;
        memset(v289, 0, 28);
        if ((_DWORD)v109)
        {
          re::DynamicArray<int>::setCapacity(v289, v109);
          a1 = 0;
          do
          {
            if (a1)
            {
              v59 = a1 - 1;
              if (a2 <= a1 - 1)
                goto LABEL_592;
              v133 = *(_DWORD *)(v105 + 4 * v59);
            }
            else
            {
              v133 = 0;
            }
            if (a1 == a2)
              goto LABEL_581;
            v134 = *(_DWORD *)(v105 + 4 * a1);
            v135 = 0.0;
            v136 = v134 - v133;
            if (v134 > (int)v133)
            {
              v59 = *(_QWORD *)&v274[16];
              if (v133 <= v31)
                v137 = v31;
              else
                v137 = v133;
              v138 = (int *)(v23 + 4 * v133);
              v139 = v137 - v133;
              do
              {
                if (!v139)
                {
                  *(_QWORD *)v291 = 0;
                  v264 = 0u;
                  v263 = 0u;
                  v262 = 0u;
                  v261 = 0u;
                  *(_OWORD *)buf = 0u;
                  v105 = MEMORY[0x24BDACB70];
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v286 = 136315906;
                  *(_QWORD *)&v286[4] = "operator[]";
                  *(_WORD *)&v286[12] = 1024;
                  *(_DWORD *)&v286[14] = 601;
                  *(_WORD *)&v286[18] = 2048;
                  *(_QWORD *)&v286[20] = v137;
                  v287 = 2048;
                  *(_QWORD *)v288 = v31;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_562:
                  *(_QWORD *)v291 = 0;
                  v264 = 0u;
                  v263 = 0u;
                  v262 = 0u;
                  v261 = 0u;
                  *(_OWORD *)buf = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v286 = 136315906;
                  *(_QWORD *)&v286[4] = "operator[]";
                  *(_WORD *)&v286[12] = 1024;
                  *(_DWORD *)&v286[14] = 789;
                  *(_WORD *)&v286[18] = 2048;
                  *(_QWORD *)&v286[20] = a8;
                  v287 = 2048;
                  *(_QWORD *)v288 = v59;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
                  goto LABEL_563;
                }
                a8 = *v138;
                if (*(_QWORD *)&v274[16] <= a8)
                  goto LABEL_562;
                v135 = v135 + *(float *)(*(_QWORD *)&v274[32] + 4 * a8);
                ++v138;
                ++v133;
                --v139;
              }
              while (v134 > (int)v133);
            }
            *(float *)buf = v135 / (float)v136;
            re::DynamicArray<float>::add((_anonymous_namespace_ *)v289, (float *)buf);
            ++a1;
          }
          while (a1 != v109);
          v140 = *(const void **)&v289[2];
        }
        else
        {
          v140 = 0;
        }
        memcpy(__dst, v140, __n);
        re::DynamicArray<re::MeshAssetBuffer>::add((_anonymous_namespace_ *)a9, (re::DynamicString *)v280);
        a1 = v231;
        v23 = v229;
        v119 = v225;
        if (*(_QWORD *)&v289[0] && *(_QWORD *)&v289[2])
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v289[0] + 40))(*(_QWORD *)&v289[0], *(_QWORD *)&v289[2]);
        if (*(_QWORD *)v274 && *(_QWORD *)&v274[32])
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v274 + 40))(*(_QWORD *)v274, *(_QWORD *)&v274[32]);
        if (*(_QWORD *)&v280[32])
        {
          if (__dst)
            (*(void (**)(_QWORD, void *))(**(_QWORD **)&v280[32] + 40))(*(_QWORD *)&v280[32], __dst);
          __dst = 0;
          v224[1] = 0;
          v224[2] = 0;
          *v224 = 0;
          ++v283;
        }
        if (*(_QWORD *)v280 && (v280[8] & 1) != 0)
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v280 + 40))(*(_QWORD *)v280, *(_QWORD *)&v280[16]);
      }
    }
    a2 = (unint64_t)v230;
    if (*(_QWORD *)&v298[2])
    {
      if ((_QWORD)v299)
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v298[2] + 40))(*(_QWORD *)&v298[2], v299);
      *(_QWORD *)&v299 = 0;
      v119[1] = 0;
      v119[2] = 0;
      *v119 = 0;
      ++DWORD2(v298[3]);
    }
    if (*(_QWORD *)&v298[0] && (BYTE8(v298[0]) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v298[0] + 40))(*(_QWORD *)&v298[0], *(_QWORD *)&v298[1]);
  }
  a8 = a10;
  re::UniqueNameGenerator::uniqueName(v221, *(const char **)a2, "MeshPart", (re::StringID *)v298);
  v141 = v298[0];
  *(_QWORD *)&v298[0] = 0;
  *((_QWORD *)&v298[0] + 1) = &str_110;
  v142 = a9[9];
  v143 = a9[10];
  *(_OWORD *)(a9 + 9) = v141;
  *(_QWORD *)&buf[8] = v143;
  *(_QWORD *)buf = v141 & 0xFFFFFFFFFFFFFFFELL | v142 & 1;
  re::StringID::destroyString((re::StringID *)buf);
  re::StringID::destroyString((re::StringID *)v298);
  if (!a10 || !re::meshHasSkinningData((re *)v23, v144))
    goto LABEL_404;
  v146 = re::internal::GeomAttributeManager::attributeByName(v232, "skeletonPath");
  v147 = re::internal::GeomAttributeManager::attributeByName(v232, "skinnedAnimationGeometryBindTransform");
  v148 = re::internal::GeomAttributeManager::attributeByName(v232, "skinnedAnimationWeights");
  v149 = re::internal::GeomAttributeManager::attributeByName(v232, "skinnedAnimationJointIndices");
  v150 = re::internal::GeomAttributeManager::attributeByName(v232, "skinnedAnimationInfluenceEndIndices");
  v151 = (_anonymous_namespace_ *)re::internal::GeomTypedAttribute<short>::operator[](v146, 0);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = &str_110;
  v152 = (int *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v220, buf);
  re::StringID::destroyString((re::StringID *)buf);
  if (v152)
    v153 = *v152;
  else
    v153 = 0;
  *(_DWORD *)a10 = v153;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v147 + 16))(v147))
    goto LABEL_612;
  v154 = (_OWORD *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v147, 0);
  v155 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v147 + 16))(v147);
  if (v155 == 1)
    goto LABEL_601;
  LODWORD(v147) = v155;
  if (!v155)
    goto LABEL_612;
  if (v155 <= 2)
  {
LABEL_602:
    *(_QWORD *)v280 = 0;
    v264 = 0u;
    v263 = 0u;
    v262 = 0u;
    v261 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v298[0]) = 136315906;
    *(_QWORD *)((char *)v298 + 4) = "operator[]";
    WORD6(v298[0]) = 1024;
    *(_DWORD *)((char *)v298 + 14) = 601;
    WORD1(v298[1]) = 2048;
    *(_QWORD *)((char *)&v298[1] + 4) = 2;
    WORD6(v298[1]) = 2048;
    *(_QWORD *)((char *)&v298[1] + 14) = v147;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_603;
  }
  if (v155 == 3)
  {
LABEL_603:
    *(_QWORD *)v280 = 0;
    v264 = 0u;
    v263 = 0u;
    v262 = 0u;
    v261 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v298[0]) = 136315906;
    *(_QWORD *)((char *)v298 + 4) = "operator[]";
    WORD6(v298[0]) = 1024;
    *(_DWORD *)((char *)v298 + 14) = 601;
    WORD1(v298[1]) = 2048;
    *(_QWORD *)((char *)&v298[1] + 4) = 3;
    WORD6(v298[1]) = 2048;
    *(_QWORD *)((char *)&v298[1] + 14) = 3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_604:
    re::internal::assertLog((re::internal *)4, v96, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
    _os_crash();
    __break(1u);
    goto LABEL_605;
  }
  v156 = v154[1];
  v157 = v154[2];
  v158 = v154[3];
  *(_OWORD *)(a10 + 80) = *v154;
  *(_OWORD *)(a10 + 96) = v156;
  *(_OWORD *)(a10 + 112) = v157;
  *(_OWORD *)(a10 + 128) = v158;
  v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v148 + 16))(v148);
  (*(void (**)(uint64_t))(*(_QWORD *)v149 + 16))(v149);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v148 + 16))(v148))
  {
    v159 = re::internal::GeomTypedAttribute<int>::operator[](v148, 0);
    v23 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v148 + 16))(v148);
  }
  else
  {
    v23 = 0;
    v159 = 0;
  }
  v226 = v150;
  v160 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v149 + 16))(v149);
  if ((_DWORD)v160)
  {
    a1 = re::internal::GeomTypedAttribute<int>::operator[](v149, 0);
    v160 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v149 + 16))(v149);
    v161 = v160;
  }
  else
  {
    v161 = 0;
    a1 = 0;
  }
  a2 = a10 + 8;
  v109 = v31;
  if ((_DWORD)v31)
  {
    v162 = 0;
    v59 = *(_QWORD *)(a10 + 16);
    v163 = (_DWORD *)(*(_QWORD *)(a10 + 24) + 4);
    while (1)
    {
      if (v23 == v162)
        goto LABEL_568;
      if (v161 == v162)
        break;
      if (v59 == v162)
        goto LABEL_570;
      v164 = *(_DWORD *)(v159 + 4 * v162);
      *(v163 - 1) = *(_DWORD *)(a1 + 4 * v162);
      *v163 = v164;
      v163 += 2;
      if (v31 == ++v162)
        goto LABEL_386;
    }
LABEL_569:
    *(_QWORD *)v280 = 0;
    v264 = 0u;
    v263 = 0u;
    v262 = 0u;
    v261 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v298[0]) = 136315906;
    *(_QWORD *)((char *)v298 + 4) = "operator[]";
    WORD6(v298[0]) = 1024;
    *(_DWORD *)((char *)v298 + 14) = 601;
    WORD1(v298[1]) = 2048;
    *(_QWORD *)((char *)&v298[1] + 4) = v161;
    WORD6(v298[1]) = 2048;
    *(_QWORD *)((char *)&v298[1] + 14) = v161;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_570:
    *(_QWORD *)v280 = 0;
    v264 = 0u;
    v263 = 0u;
    v262 = 0u;
    v261 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v298[0]) = 136315906;
    *(_QWORD *)((char *)v298 + 4) = "operator[]";
    WORD6(v298[0]) = 1024;
    *(_DWORD *)((char *)v298 + 14) = 468;
    WORD1(v298[1]) = 2048;
    *(_QWORD *)((char *)&v298[1] + 4) = v59;
    WORD6(v298[1]) = 2048;
    *(_QWORD *)((char *)&v298[1] + 14) = v59;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_571;
  }
LABEL_386:
  v109 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v226 + 16))(v226);
  v165 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v226 + 16))(v226);
  if ((_DWORD)v165)
  {
    v166 = re::internal::GeomTypedAttribute<int>::operator[](v226, 0);
    v165 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v226 + 16))(v226);
    v59 = v165;
  }
  else
  {
    v59 = 0;
    v166 = 0;
  }
  v23 = v229;
  a1 = v109;
  a2 = (unint64_t)v230;
  if ((_DWORD)v109)
  {
    v167 = 0;
    v109 = *(_QWORD *)(a10 + 40);
    v168 = *(_QWORD *)(a10 + 48);
    while (v59 != v167)
    {
      if (v109 == v167)
        goto LABEL_572;
      *(_DWORD *)(v168 + 4 * v167) = *(_DWORD *)(v166 + 4 * v167);
      if (a1 == ++v167)
        goto LABEL_394;
    }
LABEL_571:
    *(_QWORD *)v280 = 0;
    v264 = 0u;
    v263 = 0u;
    v262 = 0u;
    v261 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v298[0]) = 136315906;
    *(_QWORD *)((char *)v298 + 4) = "operator[]";
    WORD6(v298[0]) = 1024;
    *(_DWORD *)((char *)v298 + 14) = 601;
    WORD1(v298[1]) = 2048;
    *(_QWORD *)((char *)&v298[1] + 4) = v59;
    WORD6(v298[1]) = 2048;
    *(_QWORD *)((char *)&v298[1] + 14) = v59;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_572:
    *(_QWORD *)v280 = 0;
    v264 = 0u;
    v263 = 0u;
    v262 = 0u;
    v261 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v298[0]) = 136315906;
    *(_QWORD *)((char *)v298 + 4) = "operator[]";
    WORD6(v298[0]) = 1024;
    *(_DWORD *)((char *)v298 + 14) = 468;
    WORD1(v298[1]) = 2048;
    *(_QWORD *)((char *)&v298[1] + 4) = v109;
    WORD6(v298[1]) = 2048;
    *(_QWORD *)((char *)&v298[1] + 14) = v109;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_573;
  }
LABEL_394:
  v169 = re::internal::GeomAttributeManager::attributeByName(v232, "skinnedAnimationRemappedJointIndices");
  if (v169)
  {
    v170 = v169;
    v171 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v169 + 16))(v169);
    v172 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v170 + 16))(v170);
    if ((_DWORD)v172)
    {
      v173 = re::internal::GeomTypedAttribute<int>::operator[](v170, 0);
      v172 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v170 + 16))(v170);
      v59 = v172;
    }
    else
    {
      v59 = 0;
      v173 = 0;
    }
    v109 = v171;
    a1 = v231;
    if (v171)
    {
      v174 = 0;
      v124 = *(_QWORD *)(a10 + 64);
      v175 = *(_QWORD *)(a10 + 72);
      while (v59 != v174)
      {
        if (v124 == v174)
          goto LABEL_580;
        *(_DWORD *)(v175 + 4 * v174) = *(_DWORD *)(v173 + 4 * v174);
        if (v109 == ++v174)
          goto LABEL_404;
      }
      goto LABEL_579;
    }
  }
  else
  {
    *(_QWORD *)(a10 + 64) = 0;
    a1 = v231;
  }
LABEL_404:
  if (!*(_BYTE *)(a1 + 10))
    goto LABEL_513;
  re::GeomMesh::GeomMesh((re::GeomMesh *)buf, 0);
  if (*(_DWORD *)(v23 + 40) < 0x65u
    || (v176 = *(float *)(a1 + 12), v176 >= 1.0)
    || v176 <= 0.0
    || (LODWORD(v298[0]) = *(_DWORD *)(a1 + 12),
        *(_OWORD *)((char *)v298 + 4) = xmmword_226191330,
        re::internal::simplifyMeshHelper((unsigned int *)v23, (re::GeomMesh *)buf, (uint64_t)v298),
        v261 >= *(_DWORD *)(v23 + 16))
    || DWORD2(v262) >= *(_DWORD *)(v23 + 40))
  {
    v177 = re::GeomMesh::copy((re::GeomMesh *)v23, (re::GeomMesh *)buf);
  }
  if (!DWORD2(v262))
    goto LABEL_512;
  memset(v280, 0, 32);
  v179 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v280, 0);
  __dst = 0;
  __n = 0;
  *(_QWORD *)&v280[32] = 0;
  v281 = 0;
  v283 = 0;
  v285 = 256;
  re::DynamicString::operator=((re::DynamicString *)v280, (re::DynamicString *)v298);
  if (*(_QWORD *)&v298[0] && (BYTE8(v298[0]) & 1) != 0)
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v298[0] + 40))(*(_QWORD *)&v298[0], *(_QWORD *)&v298[1]);
  LOBYTE(v285) = 30;
  re::DynamicArray<BOOL>::resize((uint64_t)&v280[32], 12 * v261);
  HIBYTE(v285) = 0;
  v180 = re::GeomMesh::accessVertexPositions((re::GeomMesh *)buf);
  if ((_DWORD)v261)
  {
    v182 = 0;
    v105 = v181;
    do
    {
      if (v182 == v181)
        goto LABEL_566;
      v183 = (char *)__dst + 12 * v182;
      v184 = v180 + 16 * v182;
      v185 = *(_QWORD *)v184;
      *((_DWORD *)v183 + 2) = *(_DWORD *)(v184 + 8);
      *(_QWORD *)v183 = v185;
      ++v182;
    }
    while (v182 < v261);
  }
  re::DynamicArray<re::MeshAssetBuffer>::add((_anonymous_namespace_ *)a9, (re::DynamicString *)v280);
  if (*(_QWORD *)&v280[32])
  {
    if (__dst)
      (*(void (**)(_QWORD, void *))(**(_QWORD **)&v280[32] + 40))(*(_QWORD *)&v280[32], __dst);
    __dst = 0;
    v281 = 0;
    __n = 0;
    *(_QWORD *)&v280[32] = 0;
    ++v283;
  }
  v186 = *(_anonymous_namespace_ **)v280;
  if (*(_QWORD *)v280 && (v280[8] & 1) != 0)
    v186 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)v280 + 40))(*(_QWORD *)v280, *(_QWORD *)&v280[16]);
  memset(v280, 0, 32);
  v187 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v280, 0);
  __dst = 0;
  __n = 0;
  *(_QWORD *)&v280[32] = 0;
  v281 = 0;
  v283 = 0;
  v285 = 256;
  re::DynamicString::operator=((re::DynamicString *)v280, (re::DynamicString *)v298);
  if (*(_QWORD *)&v298[0] && (BYTE8(v298[0]) & 1) != 0)
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v298[0] + 40))(*(_QWORD *)&v298[0], *(_QWORD *)&v298[1]);
  LOBYTE(v285) = 36;
  re::DynamicArray<BOOL>::resize((uint64_t)&v280[32], 12 * DWORD2(v262));
  HIBYTE(v285) = 0;
  v105 = *((_QWORD *)&v262 + 1);
  if (DWORD2(v262))
  {
    v188 = 0;
    v189 = 0;
    v109 = 0;
    do
    {
      if (v105 <= v109)
        goto LABEL_567;
      v190 = (char *)__dst + v188;
      v191 = *(_QWORD *)(*((_QWORD *)&v263 + 1) + v189);
      *((_DWORD *)v190 + 2) = *(_DWORD *)(*((_QWORD *)&v263 + 1) + v189 + 8);
      *(_QWORD *)v190 = v191;
      ++v109;
      v105 = *((_QWORD *)&v262 + 1);
      v189 += 16;
      v188 += 12;
    }
    while (v109 < DWORD2(v262));
  }
  re::DynamicArray<re::MeshAssetBuffer>::add((_anonymous_namespace_ *)a9, (re::DynamicString *)v280);
  if (*(_QWORD *)&v280[32])
  {
    v178 = (const re::GeomMesh *)__dst;
    if (__dst)
      (*(void (**)(_QWORD, void *))(**(_QWORD **)&v280[32] + 40))(*(_QWORD *)&v280[32], __dst);
    __dst = 0;
    v281 = 0;
    __n = 0;
    *(_QWORD *)&v280[32] = 0;
    ++v283;
  }
  if (*(_QWORD *)v280 && (v280[8] & 1) != 0)
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v280 + 40))(*(_QWORD *)v280, *(_QWORD *)&v280[16]);
  if (!a10 || !re::meshHasSkinningData((re *)v23, v178))
    goto LABEL_512;
  v290 = 0;
  memset(v289, 0, 44);
  v192 = re::GeomMesh::accessVertexPositions((re::GeomMesh *)v23);
  if (!v193)
  {
LABEL_605:
    *(_QWORD *)v274 = 0;
    v299 = 0u;
    memset(v298, 0, sizeof(v298));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v280 = 136315906;
    *(_QWORD *)&v280[4] = "operator[]";
    *(_WORD *)&v280[12] = 1024;
    *(_DWORD *)&v280[14] = 601;
    *(_WORD *)&v280[18] = 2048;
    *(_QWORD *)&v280[20] = 0;
    *(_WORD *)&v280[28] = 2048;
    *(_QWORD *)&v280[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::internal::GeomKDTree<re::Vector3<float>>::build((uint64_t)v289, *(unsigned int *)(v23 + 16), v192);
  v227 = re::internal::GeomAttributeManager::attributeByName(v232, "skinnedAnimationWeights");
  v194 = re::internal::GeomAttributeManager::attributeByName(v232, "skinnedAnimationJointIndices");
  v195 = re::internal::GeomAttributeManager::attributeByName(v232, "skinnedAnimationInfluenceEndIndices");
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v195 + 16))(v195))
  {
    v109 = re::internal::GeomTypedAttribute<int>::operator[](v195, 0);
    v196 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v195 + 16))(v195);
  }
  else
  {
    v196 = 0;
    v109 = 0;
  }
  v233 = (re::internal::GeomAttributeManager *)v194;
  *(_QWORD *)&v288[2] = 0;
  memset(v286, 0, sizeof(v286));
  re::DynamicArray<float>::resize((uint64_t)v286, v261);
  ClosestHelper = (_anonymous_namespace_ *)re::GeomMesh::accessVertexPositions((re::GeomMesh *)buf);
  if (!(_DWORD)v261)
  {
    v201 = 0;
    goto LABEL_460;
  }
  v199 = (float32x4_t *)ClosestHelper;
  a1 = 0;
  a2 = 0;
  a8 = v198;
  v59 = 0xFFFFFFFFLL;
  do
  {
    if (a8 == a1)
      goto LABEL_589;
    *(_DWORD *)v280 = -1;
    if (*(_QWORD *)&v289[2])
    {
      *(_QWORD *)&v298[0] = 0x7FF0000000000000;
      ClosestHelper = (_anonymous_namespace_ *)re::internal::GeomKDTree<re::Vector3<float>>::findClosestHelper((uint64_t)v289, v290, v199, (double *)v298, v280);
      LODWORD(v23) = *(_DWORD *)v280;
      if (!*(_DWORD *)v280)
      {
        v200 = 0;
        goto LABEL_455;
      }
    }
    else
    {
      LODWORD(v23) = -1;
    }
    v31 = (v23 - 1);
    if (v196 <= v31)
      goto LABEL_593;
    v200 = *(_DWORD *)(v109 + 4 * v31);
LABEL_455:
    if (v196 <= v23)
      goto LABEL_590;
    v31 = *(_QWORD *)&v286[16];
    if (*(_QWORD *)&v286[16] <= a1)
      goto LABEL_591;
    a2 = (*(_DWORD *)(v109 + 4 * v23) + a2 - v200);
    *(_DWORD *)(*(_QWORD *)&v288[2] + 4 * a1++) = v23;
    ++v199;
  }
  while (a1 < v261);
  v201 = 8 * a2;
LABEL_460:
  memset(v280, 0, 32);
  v202 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v280, 0);
  __dst = 0;
  __n = 0;
  *(_QWORD *)&v280[32] = 0;
  v281 = 0;
  v283 = 0;
  v285 = 256;
  re::DynamicString::operator=((re::DynamicString *)v280, (re::DynamicString *)v298);
  if (*(_QWORD *)&v298[0] && (BYTE8(v298[0]) & 1) != 0)
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v298[0] + 40))(*(_QWORD *)&v298[0], *(_QWORD *)&v298[1]);
  LOBYTE(v285) = 36;
  re::DynamicArray<BOOL>::resize((uint64_t)&v280[32], 4 * v261);
  HIBYTE(v285) = 0;
  memset(v274, 0, 32);
  v204 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v274, 0);
  v278 = 0;
  v276 = 0;
  *(_QWORD *)&v274[32] = 0;
  v275 = 0;
  v277 = 0;
  v279 = 256;
  re::DynamicString::operator=((re::DynamicString *)v274, (re::DynamicString *)v298);
  if (*(_QWORD *)&v298[0] && (BYTE8(v298[0]) & 1) != 0)
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v298[0] + 40))(*(_QWORD *)&v298[0], *(_QWORD *)&v298[1]);
  LOBYTE(v279) = 45;
  re::DynamicArray<BOOL>::resize((uint64_t)&v274[32], v201);
  HIBYTE(v279) = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v227 + 16))(v227))
  {
    a1 = re::internal::GeomTypedAttribute<int>::operator[](v227, 0);
    v105 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v227 + 16))(v227);
  }
  else
  {
    v105 = 0;
    a1 = 0;
  }
  if ((*(unsigned int (**)(re::internal::GeomAttributeManager *))(*(_QWORD *)v233 + 16))(v233))
  {
    v23 = re::internal::GeomTypedAttribute<int>::operator[]((uint64_t)v233, 0);
    v31 = (*(uint64_t (**)(re::internal::GeomAttributeManager *))(*(_QWORD *)v233 + 16))(v233);
  }
  else
  {
    v31 = 0;
    v23 = 0;
  }
  if ((_DWORD)v261)
  {
    a2 = 0;
    v205 = 0;
    v206 = v278;
    while (1)
    {
      v59 = *(_QWORD *)&v286[16];
      if (*(_QWORD *)&v286[16] <= a2)
        goto LABEL_594;
      v59 = *(unsigned int *)(*(_QWORD *)&v288[2] + 4 * a2);
      if ((_DWORD)v59)
      {
        a8 = (v59 - 1);
        if (v196 <= a8)
          goto LABEL_600;
        v207 = *(_DWORD *)(v109 + 4 * a8);
      }
      else
      {
        v207 = 0;
      }
      if (v196 <= v59)
        goto LABEL_595;
      v208 = *(_DWORD *)(v109 + 4 * v59) - v207;
      if ((_DWORD)v208)
        break;
LABEL_491:
      v205 += v208;
      *((_DWORD *)__dst + a2++) = v205;
      if (a2 >= v261)
        goto LABEL_492;
    }
    a8 = v207;
    LODWORD(v209) = v105 - v207;
    if (v105 >= v207)
      v209 = v209;
    else
      v209 = 0;
    v49 = v31 >= v207;
    LODWORD(v210) = v31 - v207;
    if (v49)
      v210 = v210;
    else
      v210 = 0;
    v211 = v205;
    v212 = v208;
    while (v209)
    {
      *((_DWORD *)v206 + 2 * v211 + 1) = *(_DWORD *)(a1 + 4 * a8);
      if (!v210)
        goto LABEL_564;
      *((_DWORD *)v206 + 2 * v211++) = *(_DWORD *)(v23 + 4 * a8);
      --v210;
      --v209;
      ++a8;
      if (!--v212)
        goto LABEL_491;
    }
LABEL_563:
    v259 = 0;
    v299 = 0u;
    memset(v298, 0, sizeof(v298));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v291 = 136315906;
    *(_QWORD *)&v291[4] = "operator[]";
    v292 = 1024;
    v293 = 601;
    v294 = 2048;
    v295 = a8;
    v296 = 2048;
    v297 = v105;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_564:
    v259 = 0;
    v299 = 0u;
    memset(v298, 0, sizeof(v298));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v291 = 136315906;
    *(_QWORD *)&v291[4] = "operator[]";
    v292 = 1024;
    v293 = 601;
    v294 = 2048;
    v295 = a8;
    v296 = 2048;
    v297 = v31;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_565:
    *(_QWORD *)v280 = 0;
    v264 = 0u;
    v263 = 0u;
    v262 = 0u;
    v261 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v298[0]) = 136315906;
    *(_QWORD *)((char *)v298 + 4) = "operator[]";
    WORD6(v298[0]) = 1024;
    *(_DWORD *)((char *)v298 + 14) = 797;
    WORD1(v298[1]) = 2048;
    *(_QWORD *)((char *)&v298[1] + 4) = v59;
    WORD6(v298[1]) = 2048;
    *(_QWORD *)((char *)&v298[1] + 14) = v59;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_566:
    *(_QWORD *)&v289[0] = 0;
    v299 = 0u;
    memset(v298, 0, sizeof(v298));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v274 = 136315906;
    *(_QWORD *)&v274[4] = "operator[]";
    *(_WORD *)&v274[12] = 1024;
    *(_DWORD *)&v274[14] = 601;
    *(_WORD *)&v274[18] = 2048;
    *(_QWORD *)&v274[20] = v105;
    *(_WORD *)&v274[28] = 2048;
    *(_QWORD *)&v274[30] = v105;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_567:
    *(_QWORD *)&v289[0] = 0;
    v299 = 0u;
    memset(v298, 0, sizeof(v298));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v274 = 136315906;
    *(_QWORD *)&v274[4] = "operator[]";
    *(_WORD *)&v274[12] = 1024;
    *(_DWORD *)&v274[14] = 797;
    *(_WORD *)&v274[18] = 2048;
    *(_QWORD *)&v274[20] = v109;
    *(_WORD *)&v274[28] = 2048;
    *(_QWORD *)&v274[30] = v105;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_568:
    *(_QWORD *)v280 = 0;
    v264 = 0u;
    v263 = 0u;
    v262 = 0u;
    v261 = 0u;
    *(_OWORD *)buf = 0u;
    v161 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v298[0]) = 136315906;
    *(_QWORD *)((char *)v298 + 4) = "operator[]";
    WORD6(v298[0]) = 1024;
    *(_DWORD *)((char *)v298 + 14) = 601;
    WORD1(v298[1]) = 2048;
    *(_QWORD *)((char *)&v298[1] + 4) = v23;
    WORD6(v298[1]) = 2048;
    *(_QWORD *)((char *)&v298[1] + 14) = v23;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_569;
  }
LABEL_492:
  re::DynamicArray<re::MeshAssetBuffer>::add((_anonymous_namespace_ *)a9, (re::DynamicString *)v274);
  re::DynamicArray<re::MeshAssetBuffer>::add((_anonymous_namespace_ *)a9, (re::DynamicString *)v280);
  a2 = (unint64_t)v230;
  a1 = v231;
  v23 = v229;
  if (*(_QWORD *)&v274[32])
  {
    v178 = v278;
    if (v278)
      (*(void (**)(_QWORD, const re::GeomMesh *))(**(_QWORD **)&v274[32] + 40))(*(_QWORD *)&v274[32], v278);
    v278 = 0;
    v275 = 0;
    v276 = 0;
    *(_QWORD *)&v274[32] = 0;
    ++v277;
  }
  if (*(_QWORD *)v274 && (v274[8] & 1) != 0)
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v274 + 40))(*(_QWORD *)v274, *(_QWORD *)&v274[16]);
  if (*(_QWORD *)&v280[32])
  {
    v178 = (const re::GeomMesh *)__dst;
    if (__dst)
      (*(void (**)(_QWORD, void *))(**(_QWORD **)&v280[32] + 40))(*(_QWORD *)&v280[32], __dst);
    __dst = 0;
    v281 = 0;
    __n = 0;
    *(_QWORD *)&v280[32] = 0;
    ++v283;
  }
  if (*(_QWORD *)v280 && (v280[8] & 1) != 0)
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v280 + 40))(*(_QWORD *)v280, *(_QWORD *)&v280[16]);
  if (*(_QWORD *)v286)
  {
    v178 = *(const re::GeomMesh **)&v288[2];
    if (*(_QWORD *)&v288[2])
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v286 + 40))(*(_QWORD *)v286, *(_QWORD *)&v288[2]);
  }
  if (*(_QWORD *)&v289[1])
  {
    v178 = (const re::GeomMesh *)v290;
    if (v290)
      (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)&v289[1] + 40))(*(_QWORD *)&v289[1], v290);
  }
LABEL_512:
  re::GeomMesh::~GeomMesh((re::GeomMesh *)buf, v178);
LABEL_513:
  if (*(_BYTE *)(a1 + 6))
    re::internal::makeOpenSubdivAssetBuffersAndAppendToAssetPart((re::internal *)a2, (const re::GeomMesh *)a9, v145);
  re::computeAABB((re *)v23, buf);
  v213 = v261;
  *((_OWORD *)a9 + 6) = *(_OWORD *)buf;
  *((_OWORD *)a9 + 7) = v213;
  re::computeOrientedBoundingBox((re *)v23, buf);
  v215 = v261;
  *((_OWORD *)a9 + 8) = *(_OWORD *)buf;
  *((_OWORD *)a9 + 9) = v215;
  v216 = v263;
  *((_OWORD *)a9 + 10) = v262;
  *((_OWORD *)a9 + 11) = v216;
  if (*(_QWORD *)&v269[2])
  {
    v214 = v271;
    if (v271)
      (*(void (**)(_QWORD, re::GeomAttribute *))(**(_QWORD **)&v269[2] + 40))(*(_QWORD *)&v269[2], v271);
    v271 = 0;
    v228[1] = 0;
    v228[2] = 0;
    *v228 = 0;
    ++v270;
  }
  if (*(_QWORD *)v265 && (v265[8] & 1) != 0)
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v265 + 40))(*(_QWORD *)v265, *(_QWORD *)&v267[2]);
  if (v234 && v235)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v234 + 40))(v234, v236);
  if (v239)
  {
    if (v239 != 2)
    {
      if (v239 == 1)
      {
        v217 = v240;
        if (!v240)
          goto LABEL_536;
        v214 = v242;
        if (!v242)
          goto LABEL_536;
LABEL_535:
        (*(void (**)(re::GeomAttribute *))(*(_QWORD *)v217 + 40))(v217);
        goto LABEL_536;
      }
LABEL_609:
      re::internal::assertLog((re::internal *)4, (uint64_t)v214, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
      _os_crash();
      __break(1u);
LABEL_610:
      re::internal::assertLog((re::internal *)4, (uint64_t)v214, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
      _os_crash();
      __break(1u);
LABEL_611:
      re::internal::assertLog((re::internal *)4, (uint64_t)v214, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
      _os_crash();
      __break(1u);
LABEL_612:
      *(_QWORD *)v280 = 0;
      v264 = 0u;
      v263 = 0u;
      v262 = 0u;
      v261 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v298[0]) = 136315906;
      *(_QWORD *)((char *)v298 + 4) = "operator[]";
      WORD6(v298[0]) = 1024;
      *(_DWORD *)((char *)v298 + 14) = 601;
      WORD1(v298[1]) = 2048;
      *(_QWORD *)((char *)&v298[1] + 4) = 0;
      WORD6(v298[1]) = 2048;
      *(_QWORD *)((char *)&v298[1] + 14) = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_613:
      re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
      _os_crash();
      __break(1u);
LABEL_614:
      re::internal::assertLog((re::internal *)4, v26, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
      _os_crash();
      __break(1u);
LABEL_615:
      re::internal::assertLog((re::internal *)4, v26, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
      _os_crash();
      __break(1u);
      JUMPOUT(0x225B1A588);
    }
    v217 = v243;
    if (v243)
    {
      if (v241)
        v241 = 0;
      v214 = v240;
      if (v240)
        goto LABEL_535;
    }
  }
LABEL_536:
  if (v246)
  {
    if (v246 == 2)
    {
      if (v250)
      {
        if (v248)
          v248 = 0;
        v214 = v247;
        if (v247)
        {
          (*(void (**)(uint64_t, re::GeomAttribute *))(*(_QWORD *)v250 + 40))(v250, v247);
          v218 = &v247;
          goto LABEL_547;
        }
      }
    }
    else
    {
      if (v246 != 1)
        goto LABEL_610;
      if (v247)
      {
        v218 = (re::GeomAttribute **)v249;
        v214 = (re::GeomAttribute *)v249[0];
        if (v249[0])
        {
          (*(void (**)(re::GeomAttribute *, _QWORD))(*(_QWORD *)v247 + 40))(v247, v249[0]);
          v218 = (re::GeomAttribute **)v249;
        }
LABEL_547:
        *v218 = 0;
      }
    }
  }
  if (v253)
  {
    if (v253 == 2)
    {
      if (v257)
      {
        if (v255)
          v255 = 0;
        v214 = v254;
        if (v254)
        {
          (*(void (**)(uint64_t, re::GeomAttribute *))(*(_QWORD *)v257 + 40))(v257, v254);
          v219 = &v254;
          goto LABEL_559;
        }
      }
    }
    else
    {
      if (v253 != 1)
        goto LABEL_611;
      if (v254)
      {
        v219 = (re::GeomAttribute **)v256;
        v214 = (re::GeomAttribute *)v256[0];
        if (v256[0])
        {
          (*(void (**)(re::GeomAttribute *, _QWORD))(*(_QWORD *)v254 + 40))(v254, v256[0]);
          v219 = (re::GeomAttribute **)v256;
        }
LABEL_559:
        *v219 = 0;
      }
    }
  }
  re::GeomMesh::~GeomMesh((re::GeomMesh *)v258, v214);
}

uint64_t re::DynamicArray<re::MeshAssetBuffer>::add(_anonymous_namespace_ *this, re::DynamicString *a2)
{
  unint64_t v4;
  re::DynamicString *v5;
  uint64_t result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::MeshAssetBuffer>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = (re::DynamicString *)(*((_QWORD *)this + 4) + 80 * v4);
  re::DynamicString::DynamicString(v5, a2);
  result = re::DynamicArray<BOOL>::DynamicArray((uint64_t)v5 + 32, (uint64_t *)a2 + 4);
  *((_WORD *)v5 + 36) = *((_WORD *)a2 + 36);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::`anonymous namespace'::`anonymous namespace'::makePartToModelIndexMappingHelper(uint64_t a1, uint64_t a2, char a3, unsigned int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  re::DynamicString::setCapacity((_QWORD *)a1, 0);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 72) = 256;
  v11[0] = *(const char **)(a2 + 8);
  v11[1] = (const char *)strlen(v11[0]);
  re::DynamicString::operator=((re::DynamicString *)a1, (uint64_t)v11);
  re::DynamicArray<BOOL>::resize(a1 + 32, 4 * *a4);
  *(_BYTE *)(a1 + 73) = a3;
  *(_BYTE *)(a1 + 72) = 36;
  v8 = *a4;
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 64);
    do
    {
      *(_DWORD *)(v10 + 4 * v9) = re::GeomIndexMap::operator[]((uint64_t)a4, v9);
      ++v9;
    }
    while (v8 != v9);
  }
}

uint64_t re::internal::GeomKDTree<re::Vector3<float>>::findClosestHelper(uint64_t result, uint64_t *a2, float32x4_t *a3, double *a4, _DWORD *a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  uint32x4_t v13;
  unsigned int v14;
  double v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  double v22;

  if (a2)
  {
    v8 = a2;
    v9 = (uint64_t *)result;
    do
    {
      v10 = *v9;
      v11 = *((unsigned int *)v8 + 4);
      v12 = *(float32x4_t *)(*v9 + 16 * v11);
      v13 = (uint32x4_t)vceqq_f32(v12, *a3);
      v13.i32[3] = v13.i32[2];
      v14 = vminvq_u32(v13);
      v15 = 0.0;
      if ((v14 & 0x80000000) == 0)
      {
        v16 = vsubq_f32(v12, *a3);
        v17 = vmulq_f32(v16, v16);
        v15 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0];
      }
      if (v15 < *a4)
      {
        *a4 = v15;
        *a5 = v11;
        v11 = *((unsigned int *)v8 + 4);
      }
      v18 = v10 + 16 * v11;
      v19 = *((unsigned __int8 *)v8 + 20);
      v20 = a3->f32[v19];
      v21 = *(float *)(v18 + 4 * v19);
      if (v20 == v21)
        v22 = 0.0;
      else
        v22 = (float)(v20 - v21);
      if (v22 >= 0.0)
      {
        result = re::internal::GeomKDTree<re::Vector3<float>>::findClosestHelper(v9, v8[1], a3, a4, a5);
        if (*a4 <= v22 * v22)
          return result;
      }
      else
      {
        result = re::internal::GeomKDTree<re::Vector3<float>>::findClosestHelper(v9, *v8, a3, a4, a5);
        if (*a4 <= v22 * v22)
          return result;
        ++v8;
      }
      v8 = (uint64_t *)*v8;
    }
    while (v8);
  }
  return result;
}

uint64_t re::`anonymous namespace'::loadMeshPartFromAssetPart(_anonymous_namespace_ *a1, id *a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  id v5;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  size_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  double v29;
  uint64_t v34[2];
  _OWORD v35[4];
  _QWORD v36[2];
  void *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  unint64_t v46;
  __int16 v47;
  id v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a3 + 16);
  v39 = 0;
  v36[1] = 0;
  v37 = 0;
  v36[0] = 0;
  v38 = 0;
  memset(v35, 0, sizeof(v35));
  v9 = v8 + *(unsigned int *)(a3 + 228);
  if (v9)
    re::DynamicArray<re::NamedVertexBuffer>::setCapacity(v36, v9);
  if (v8)
  {
    v10 = 0;
    v11 = 0;
    v12 = (unint64_t)&selRef_setRate_;
    while (1)
    {
      v13 = *(void **)(a3 + 16);
      if ((unint64_t)v13 <= v11)
      {
        v40 = 0;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v49 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v41 = 136315906;
        v42 = "operator[]";
        v43 = 1024;
        v44 = 797;
        v45 = 2048;
        v46 = v11;
        v47 = 2048;
        v48 = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_45:
        v40 = 0;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v49 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v41 = 136315906;
        v42 = "operator[]";
        v43 = 1024;
        v44 = 797;
        v45 = 2048;
        v46 = 0;
        v47 = 2048;
        v48 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_46:
        v40 = 0;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v49 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v41 = 136315906;
        v42 = "operator[]";
        v43 = 1024;
        v44 = 789;
        v45 = 2048;
        v46 = v12;
        v47 = 2048;
        v48 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v14 = *(_QWORD *)(a3 + 32) + v10;
      v15 = *(_QWORD *)(v14 + 48);
      v5 = objc_msgSend(*a2, sel_newBufferWithLength_options_, v15, 0);
      v16 = objc_msgSend(v5, sel_contents);
      if (!*(_QWORD *)(v14 + 48))
        goto LABEL_45;
      memcpy(v16, *(const void **)(v14 + 64), v15);
      re::DynamicString::DynamicString((re::DynamicString *)&v49, (const re::DynamicString *)v14);
      LOWORD(v51) = *(_WORD *)(v14 + 72);
      *((_QWORD *)&v51 + 1) = v5;
      LODWORD(v52) = 0;
      DWORD1(v52) = objc_msgSend(v5, sel_length);
      *((_QWORD *)&v52 + 1) = 0xFFFFFFFF00000000;
      re::DynamicArray<re::NamedVertexBuffer>::add((_anonymous_namespace_ *)v36, (uint64_t)&v49);
      if (*((_QWORD *)&v51 + 1))
      {

        *((_QWORD *)&v51 + 1) = 0;
      }
      if ((_QWORD)v49 && (BYTE8(v49) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v49 + 40))();
      *(_QWORD *)&v49 = v11;
      if (re::HashBrown<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::find((uint64_t *)v35, v14) == -1)break;
      if (v5)
        goto LABEL_14;
LABEL_15:
      ++v11;
      v10 += 80;
      if (v8 == v11)
        goto LABEL_19;
    }
    re::HashBrown<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::internalAdd((_anonymous_namespace_ *)v35, (const re::DynamicString *)v14, (uint64_t *)&v49);
    if (!v5)
      goto LABEL_15;
LABEL_14:

    goto LABEL_15;
  }
LABEL_19:
  v17 = *(unsigned int *)(a3 + 232);
  if ((_DWORD)v17)
  {
    v18 = 0;
    v19 = (int *)(*(_QWORD *)(a3 + 216) + 8);
    while (1)
    {
      v20 = *v19;
      v19 += 20;
      if (v20 < 0)
        break;
      if (v17 == ++v18)
      {
        LODWORD(v18) = *(_DWORD *)(a3 + 232);
        break;
      }
    }
  }
  else
  {
    LODWORD(v18) = 0;
  }
  if ((_DWORD)v17 != (_DWORD)v18)
  {
    v21 = v18;
    v22 = *(_QWORD *)(a3 + 216);
    do
    {
      v23 = v22 + 80 * v21;
      v24 = re::HashBrown<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::find((uint64_t *)v35, v23 + 48);
      if (v24 != -1)
      {
        v12 = *(_QWORD *)(*((_QWORD *)&v35[0] + 1) + 40 * v24 + 32);
        if (v12 < v8)
        {
          v5 = v37;
          if ((unint64_t)v37 <= v12)
            goto LABEL_46;
          v25 = v39;
          re::DynamicString::DynamicString((re::DynamicString *)&v49, (const re::DynamicString *)(v23 + 16));
          v26 = v25 + (v12 << 6);
          LOWORD(v51) = *(_WORD *)(v26 + 32);
          *((_QWORD *)&v51 + 1) = *(id *)(v26 + 40);
          *(_QWORD *)&v52 = *(_QWORD *)(v26 + 48);
          *((_QWORD *)&v52 + 1) = 0xFFFFFFFF00000000;
          re::DynamicArray<re::NamedVertexBuffer>::add((_anonymous_namespace_ *)v36, (uint64_t)&v49);
          if (*((_QWORD *)&v51 + 1))
          {

            *((_QWORD *)&v51 + 1) = 0;
          }
          if ((_QWORD)v49 && (BYTE8(v49) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v49 + 40))();
        }
      }
      v22 = *(_QWORD *)(a3 + 216);
      if (*(_DWORD *)(a3 + 232) <= (v18 + 1))
        v27 = v18 + 1;
      else
        v27 = *(_DWORD *)(a3 + 232);
      while (1)
      {
        v21 = (v18 + 1);
        if (v27 - 1 == (_DWORD)v18)
          break;
        LODWORD(v18) = v18 + 1;
        v28 = v21;
        if ((*(_DWORD *)(v22 + 80 * v21 + 8) & 0x80000000) != 0)
          goto LABEL_42;
      }
      v28 = v27;
LABEL_42:
      LODWORD(v18) = v28;
    }
    while ((_DWORD)v17 != v28);
  }
  re::StringID::StringID((re::StringID *)v34, (const StringID *)(a3 + 72));
  re::MeshPart::MeshPart((uint64_t)a1, v34, *(_WORD *)(a3 + 56), v39, (unint64_t)v37, *(_DWORD *)(a3 + 40), *(_DWORD *)(a3 + 48), *(_DWORD *)(a3 + 52), (_OWORD *)(a3 + 96), a5, a4, (re::MeshPartFlags *)(a3 + 192), *(_DWORD *)(a3 + 60), *(_DWORD *)(a3 + 64));
  re::StringID::destroyString((re::StringID *)v34);
  re::HashBrown<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)v35, v29);
  return re::DynamicArray<re::NamedVertexBuffer>::deinit((uint64_t)v36);
}

_QWORD *re::HashBrown<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::init(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;

  v3 = result;
  result[7] = a2;
  v4 = 151 * a3;
  v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  v6 = v5 & 0x3FFFFFFFFFFFFF0;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    v7 = v5 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 41 * v6, 16);
    *v3 = result;
    if (v4 >= 0x80)
    {
      v8 = 0;
      *(_QWORD *)&v9 = -1;
      *((_QWORD *)&v9 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v8++) = v9;
      while (v7 != v8);
      result = (_QWORD *)*v3;
    }
    v3[1] = &result[2 * v7];
    v6 = v3[2];
    if (v6)
    {
      v10 = 0;
      for (i = 0; i < v6; ++i)
      {
        v12 = v3[1] + v10;
        *(_OWORD *)v12 = 0u;
        *(_OWORD *)(v12 + 16) = 0u;
        result = re::DynamicString::setCapacity((_QWORD *)v12, 0);
        *(_QWORD *)(v12 + 32) = 0;
        v6 = v3[2];
        v10 += 40;
      }
    }
  }
  else
  {
    *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v6;
  return result;
}

uint64_t re::HashBrown<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::find(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v14;
  char v15;
  char v16;
  char v17;

  if (!a1[7] || (unint64_t)a1[2] < 0x10 || !a1[3])
    return -1;
  v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v15, a2) % ((unint64_t)a1[2] >> 4);
  while (1)
  {
    v5 = *a1;
    v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v16, a2);
    v14 = *(int8x16_t *)(v5 + 16 * v4);
    v7 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(vdupq_n_s8(v6 & 0x7F), v14), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    v8 = __clz(__rbit64(v7));
    if (v8 <= 0x3F)
      break;
LABEL_10:
    v12.i64[0] = -1;
    v12.i64[1] = -1;
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v14, v12), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (++v4 == (unint64_t)a1[2] >> 4)
      v4 = 0;
    v11 = -1;
    if (v4 == re::Hash<re::DynamicString>::operator()((uint64_t)&v17, a2) % ((unint64_t)a1[2] >> 4))
      return v11;
  }
  v9 = 16 * v4;
  v10 = a1[1];
  while (1)
  {
    v11 = v8 + v9;
    if (re::DynamicString::operator==(a2, v10 + 40 * (v8 + v9)))
      return v11;
    if (v8 <= 0x3E)
    {
      v8 = __clz(__rbit64((-2 << v8) & v7));
      if (v8 < 0x40)
        continue;
    }
    goto LABEL_10;
  }
}

unint64_t re::HashBrown<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::internalAdd(_anonymous_namespace_ *a1, const re::DynamicString *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  re::DynamicString *v14;
  uint64_t v15;
  unint64_t result;
  uint64_t v17;
  char v18;
  uint64_t v19;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || *((_QWORD *)a1 + 2) > (unint64_t)(8 * v6))
    re::HashBrown<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::resize((__int128 *)a1);
  v7 = re::Hash<re::DynamicString>::operator()((uint64_t)&v17, (uint64_t)a2) % (*((_QWORD *)a1 + 2) >> 4);
  while (1)
  {
    v8 = *(_QWORD *)a1;
    v9 = re::Hash<re::DynamicString>::operator()((uint64_t)&v17, (uint64_t)a2);
    v10 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + 16 * v7)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    if (v10 < 0x40)
      break;
    if (v7 + 1 == *((_QWORD *)a1 + 2) >> 4)
      v7 = 0;
    else
      ++v7;
  }
  v11 = v8 + 16 * v7;
  v12 = *(unsigned __int8 *)(v11 + v10);
  *(_BYTE *)(v11 + v10) = v9 & 0x7F;
  v13 = v10 + 16 * v7;
  re::DynamicString::DynamicString((re::DynamicString *)&v17, a2);
  v19 = *a3;
  v14 = re::DynamicString::operator=((re::DynamicString *)(*((_QWORD *)a1 + 1) + 40 * v13), (re::DynamicString *)&v17);
  *((_QWORD *)v14 + 4) = v19;
  if (v17 && (v18 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v17 + 40))();
  v15 = *((_QWORD *)a1 + 4);
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v15 - (v12 == 255);
  result = re::Hash<re::DynamicString>::operator()((uint64_t)&v17, *((_QWORD *)a1 + 1) + 40 * v13);
  *((_QWORD *)a1 + 5) ^= result;
  return result;
}

void re::HashBrown<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::resize(__int128 *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int16 v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  _BYTE v27[48];

  v3 = *((_QWORD *)a1 + 2);
  v2 = *((_QWORD *)a1 + 3);
  v4 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v5 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v4 > (192 * v3) >> 7)
    v5 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v6 = (v5 << 7) / 0x97;
  v7 = *((_QWORD *)a1 + 7);
  v26 = 0u;
  *(_OWORD *)v27 = 0u;
  if (v4 <= v3)
    v8 = v2 + 1;
  else
    v8 = v6;
  memset(&v27[16], 0, 32);
  re::HashBrown<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::init(&v26, v7, v8);
  v9 = *((_QWORD *)a1 + 2);
  if (v9 >= 0x10)
  {
    v10 = 0;
    v11 = v9 >> 4;
    while (1)
    {
      v12 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + v10)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v13 = (unsigned __int16)~v12;
      if (v12 != 0xFFFF)
        break;
      v10 += 16;
      if (!--v11)
        goto LABEL_12;
    }
    v14 = __clz(__rbit64(v13)) + v10;
    while (v14 != -1)
    {
      re::HashBrown<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::internalAdd(&v26, *((_QWORD *)a1 + 1) + 40 * v14, *((_QWORD *)a1 + 1) + 40 * v14 + 32);
      v21 = v14 >> 4;
      v9 = *((_QWORD *)a1 + 2);
      if (v14 >> 4 >= v9 >> 4)
        break;
      v22 = __clz(__rbit64((-2 << (v14 & 0xF)) & v13));
      if (v22 >= 0x40)
      {
        v23 = 16 * v21;
        v24 = ~v21 + (v9 >> 4);
        while (v24)
        {
          v13 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + v23 + 16)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
          v25 = __clz(__rbit64(v13));
          v23 += 16;
          --v24;
          if (v25 <= 0x3F)
          {
            v14 = v25 + v23;
            goto LABEL_20;
          }
        }
        break;
      }
      v14 = v22 + (v14 & 0xFFFFFFFFFFFFFFF0);
LABEL_20:
      ;
    }
  }
LABEL_12:
  v15 = *(_QWORD *)&v27[40];
  *(_QWORD *)&v27[40] = *((_QWORD *)a1 + 7);
  v16 = v26;
  v17 = *(_OWORD *)v27;
  v26 = *a1;
  *(_QWORD *)v27 = v9;
  v18 = *(_OWORD *)&v27[16];
  v19 = *(__int128 *)((char *)a1 + 40);
  *((_QWORD *)a1 + 6) = *(_QWORD *)&v27[32];
  *((_QWORD *)a1 + 7) = v15;
  *(_OWORD *)&v27[24] = v19;
  v20 = *(__int128 *)((char *)a1 + 24);
  *a1 = v16;
  a1[1] = v17;
  a1[2] = v18;
  *(_OWORD *)&v27[8] = v20;
  re::HashBrown<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)&v26, *(double *)&v18);
}

double re::HashBrown<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit(uint64_t a1, double result)
{
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;

  if (*(_QWORD *)(a1 + 56))
  {
    v3 = *(__n128 **)(a1 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 40 * v4;
        v6 = 0uLL;
        do
        {
          if (v3->n128_u64[0])
          {
            if ((v3->n128_u8[8] & 1) != 0)
            {
              (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v3->n128_u64[0] + 40))(v3->n128_u64[0], v3[1].n128_u64[0], v6);
              v6 = 0uLL;
            }
            *v3 = v6;
            v3[1] = v6;
          }
          v3 = (__n128 *)((char *)v3 + 40);
          v5 -= 40;
        }
        while (v5);
      }
      *(_QWORD *)(a1 + 8) = 0;
    }
    if (*(_QWORD *)a1)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56));
      *(_QWORD *)a1 = 0;
    }
    result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t re::types::Ok<re::GeomScene>::Ok(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = re::DynamicArray<re::GeomModelWithLods>::DynamicArray(a1, a2);
  re::DynamicArray<re::GeomInstance>::DynamicArray(v4 + 40, a2 + 5);
  re::DynamicArray<re::GeomSkeleton>::DynamicArray(a1 + 80, a2 + 10);
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::HashTable(a1 + 120, (uint64_t)(a2 + 15));
  return a1;
}

uint64_t re::Result<re::GeomScene,re::Error>::Result(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v4;
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v5;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v7 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v7;
  v8 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v8;
  ++*(_DWORD *)(a2 + 64);
  ++*(_DWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = v9;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v10 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = v10;
  v11 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = v11;
  ++*(_DWORD *)(a2 + 104);
  ++*(_DWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 164) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 128), (uint64_t *)(a2 + 120));
  return a1;
}

void re::gatherMaterialConstants(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  __int128 v15;
  void *v16;
  int v17;
  void *v18;
  int v19;
  void *v20;
  int v21;
  void *v22;
  int v23;
  void *v24;
  __n128 v25;
  void *v26;
  int v27;
  _anonymous_namespace_ *v28;
  __n128 BaseColorTintAndOpacity;
  _anonymous_namespace_ *v30;
  void *v31;
  void *v32;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v33;
  uint64_t i;
  _anonymous_namespace_ *v35;
  double v36;
  double v37;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v38;
  _anonymous_namespace_ *v39;
  _anonymous_namespace_ *v40;
  _anonymous_namespace_ *v41;
  BOOL v42;
  _anonymous_namespace_ *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _anonymous_namespace_ *v48;
  _anonymous_namespace_ *v49;
  _anonymous_namespace_ *v50;
  void *v51;
  _BOOL4 v52;
  __n128 TextureScaleFloat3;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  _anonymous_namespace_ *v63;
  re::DynamicString *v64;
  _anonymous_namespace_ *v65;
  _anonymous_namespace_ *v66;
  _anonymous_namespace_ *v67;
  char v68;
  char v69;
  _anonymous_namespace_ *v70;
  float *v71;
  float v72;
  _anonymous_namespace_ *v73;
  _anonymous_namespace_ *v74;
  _anonymous_namespace_ *v75;
  char v76;
  char v77;
  _anonymous_namespace_ *v78;
  float *v79;
  float v80;
  _anonymous_namespace_ *v81;
  _anonymous_namespace_ *v82;
  _anonymous_namespace_ *v83;
  float *v84;
  BOOL v85;
  _anonymous_namespace_ *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float v91;
  void *v92;
  _BOOL4 v93;
  _anonymous_namespace_ *v94;
  _anonymous_namespace_ *v95;
  _anonymous_namespace_ *v96;
  float *v97;
  BOOL v98;
  _anonymous_namespace_ *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  float v104;
  void *v105;
  _BOOL4 v106;
  _anonymous_namespace_ *v107;
  float *v108;
  _anonymous_namespace_ *ConstantFloat;
  _anonymous_namespace_ *v110;
  float *v111;
  _anonymous_namespace_ *v112;
  float v113;
  _anonymous_namespace_ *v114;
  void *v115;
  __n128 v116;
  __n128 v117;
  __n128 v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  char v122;
  _anonymous_namespace_ *v123;
  char v124;
  _anonymous_namespace_ *v125;
  char v126;
  _anonymous_namespace_ *v127;
  char v128;
  _anonymous_namespace_ *v129;
  char v130;
  _anonymous_namespace_ *v131;
  char v132;
  _anonymous_namespace_ *v133;
  char v134;
  uint64_t v135;
  char v136;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> v137;
  uint64_t v138;
  char v139;
  NSString v140;
  NSString v141;
  NSString v142;
  float v143[8];

  v9 = a2;
  v10 = a3;
  objc_msgSend(MEMORY[0x24BEBED10], "USDPreviewSurfaceDefaults");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("opacityThreshold"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "floatValue");
  HIDWORD(v140) = v13;

  objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("emissiveColor"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "float3Value");
  *(_OWORD *)v143 = v15;

  objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("metallic"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "floatValue");
  HIDWORD(v142) = v17;

  objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("roughness"));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "floatValue");
  LODWORD(v142) = v19;

  objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("clearcoat"));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "floatValue");
  HIDWORD(v141) = v21;

  objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("clearcoatRoughness"));
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "floatValue");
  LODWORD(v141) = v23;

  objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("textureFallback"));
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "float4Value");
  v118 = v25;

  objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("ior"));
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "floatValue");
  LODWORD(v140) = v27;

  v30 = (_anonymous_namespace_ *)re::DynamicString::appendf((re::DynamicString *)&v138, "[%f, %f, %f, %f, srgb]", BaseColorTintAndOpacity.n128_f32[0], BaseColorTintAndOpacity.n128_f32[1], BaseColorTintAndOpacity.n128_f32[2], BaseColorTintAndOpacity.n128_f32[3]);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString&>(a1, (re::DynamicString *)&v137, (const re::DynamicString *)&v138);
  if (*(_QWORD *)v137.__x_ && (v137.__x_[2] & 1) != 0)
    (*(void (**)(void))(**(_QWORD **)v137.__x_ + 40))();
  v115 = v9;
  objc_msgSend(v9, "path");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "stringValue");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = objc_msgSend(v32, "hash");
  v137.__x_[0] = v33;
  for (i = 1; i != 624; ++i)
  {
    v33 = i + 1812433253 * (v33 ^ (v33 >> 30));
    v137.__x_[i] = v33;
  }
  v137.__i_ = 0;

  v36 = (float)((float)((float)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v137)
                      * 2.3283e-10)
              + 0.0);
  v37 = (float)((float)((float)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v137)
                      * 2.3283e-10)
              + 0.0);
  v38 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v137);
  v39 = (_anonymous_namespace_ *)re::DynamicString::appendf((re::DynamicString *)&v135, "[%f, %f, %f, srgb]", v36, v37, (float)((float)((float)v38 * 2.3283e-10) + 0.0));
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString&>(a1, (re::DynamicString *)&v133, (const re::DynamicString *)&v135);
  v40 = v133;
  if (v133 && (v134 & 1) != 0)
    v40 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v133 + 40))();
  v42 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a4, (uint64_t)&v131);
  v43 = v131;
  if (v131 && (v132 & 1) != 0)
    v43 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v131 + 40))();
  if (v42)
  {
    v44 = re::Hash<re::DynamicString>::operator()((uint64_t)&v129, (uint64_t)&v131);
    v45 = 0x7FFFFFFFLL;
    if (*(_QWORD *)a4)
    {
      v46 = *(unsigned int *)(*(_QWORD *)(a4 + 8) + 4 * (v44 % *(unsigned int *)(a4 + 24)));
      if ((_DWORD)v46 != 0x7FFFFFFF)
      {
        v47 = *(_QWORD *)(a4 + 16);
        v45 = 0x7FFFFFFFLL;
        while (1)
        {
          v44 = re::DynamicString::operator==(v47 + 56 * v46 + 16, (uint64_t)&v131);
          if ((v44 & 1) != 0)
            break;
          v46 = *(_DWORD *)(v47 + 56 * v46 + 8) & 0x7FFFFFFF;
          if (v46 == 0x7FFFFFFF)
            goto LABEL_26;
        }
        v45 = v46;
      }
    }
LABEL_26:
    v51 = *(void **)(*(_QWORD *)(a4 + 16) + 56 * v45 + 48);
    v52 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a5, (uint64_t)&v129);
    TextureScaleFloat3 = re::getTextureScaleFloat3(v51, v52, v118);
    if (v129 && (v130 & 1) != 0)
    {
      v116 = TextureScaleFloat3;
      (*(void (**)(void))(*(_QWORD *)v129 + 40))();
      TextureScaleFloat3 = v116;
    }
    if (v131 && (v132 & 1) != 0)
    {
      v117 = TextureScaleFloat3;
      (*(void (**)(void))(*(_QWORD *)v131 + 40))();
      TextureScaleFloat3 = v117;
    }
    v50 = (_anonymous_namespace_ *)re::DynamicString::appendf((re::DynamicString *)&v133, "[%f, %f, %f, 1.0]", TextureScaleFloat3.n128_f32[0], TextureScaleFloat3.n128_f32[1], TextureScaleFloat3.n128_f32[2]);
  }
  else
  {
    re::getConstantFloat3(v10, (uint64_t)CFSTR("inputs:emissiveColor"), v143);
    v49 = (_anonymous_namespace_ *)re::DynamicString::appendf((re::DynamicString *)&v131, "[%f, %f, %f, srgb]", v143[0], v143[1], v143[2]);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString&>(a1, (re::DynamicString *)&v129, (const re::DynamicString *)&v131);
    if (v129 && (v130 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v129 + 40))();
    re::DynamicString::appendf((re::DynamicString *)&v133, "[1,1,1,1]");
    v50 = v131;
    if (v131 && (v132 & 1) != 0)
      v50 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v131 + 40))();
  }
  v54 = re::Hash<re::DynamicString>::operator()((uint64_t)&v129, (uint64_t)&v131);
  v55 = v54;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v56) = 0;
    goto LABEL_40;
  }
  v56 = v54 % *(unsigned int *)(a1 + 24);
  v57 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v56);
  if ((_DWORD)v57 == 0x7FFFFFFF)
  {
LABEL_40:
    v59 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v59 == 0x7FFFFFFF)
    {
      v59 = *(unsigned int *)(a1 + 32);
      v60 = v59;
      if ((_DWORD)v59 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(v56) = v55 % *(unsigned int *)(a1 + 24);
        v60 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 32) = v60 + 1;
      v61 = *(_QWORD *)(a1 + 16);
      v62 = *(_DWORD *)(v61 + 80 * v59 + 8);
    }
    else
    {
      v61 = *(_QWORD *)(a1 + 16);
      v62 = *(_DWORD *)(v61 + 80 * v59 + 8);
      *(_DWORD *)(a1 + 36) = v62 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v61 + 80 * v59 + 8) = v62 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v59 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v59 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v56);
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * v59) = v55;
    v63 = re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 80 * v59 + 16), (const re::DynamicString *)&v131);
    v64 = (re::DynamicString *)(*(_QWORD *)(a1 + 16) + 80 * v59 + 48);
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v56) = v59;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    goto LABEL_46;
  }
  v58 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v58 + 80 * v57 + 16, (uint64_t)&v131))
  {
    v57 = *(_DWORD *)(v58 + 80 * v57 + 8) & 0x7FFFFFFF;
    if (v57 == 0x7FFFFFFF)
      goto LABEL_40;
  }
LABEL_46:
  v65 = v131;
  if (v131 && (v132 & 1) != 0)
    v65 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v131 + 40))();
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString&>(a1, (re::DynamicString *)&v131, (const re::DynamicString *)&v133);
  v66 = v131;
  if (v131 && (v132 & 1) != 0)
    v66 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v131 + 40))();
  v69 = v68;
  v70 = v131;
  if (v131 && (v132 & 1) != 0)
    v70 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v131 + 40))();
  if (v67)
  {
    LODWORD(v72) = re::getTextureScaleFloat(v67, v69 != 0, v118).n128_u32[0];
  }
  else
  {
    re::getConstantFloat((re *)v10, (NSDictionary *)CFSTR("inputs:metallic"), (NSString *)((char *)&v142 + 4), v71);
    v72 = *((float *)&v142 + 1);
  }
  v73 = (_anonymous_namespace_ *)re::DynamicString::appendf((re::DynamicString *)&v131, "%f", v72);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString&>(a1, (re::DynamicString *)&v129, (const re::DynamicString *)&v131);
  v74 = v129;
  if (v129 && (v130 & 1) != 0)
    v74 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v129 + 40))();
  v77 = v76;
  v78 = v129;
  if (v129 && (v130 & 1) != 0)
    v78 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v129 + 40))();
  if (v75)
  {
    LODWORD(v80) = re::getTextureScaleFloat(v75, v77 != 0, v118).n128_u32[0];
  }
  else
  {
    re::getConstantFloat((re *)v10, (NSDictionary *)CFSTR("inputs:roughness"), &v142, v79);
    v80 = *(float *)&v142;
  }
  v81 = (_anonymous_namespace_ *)re::DynamicString::appendf((re::DynamicString *)&v129, "%f", v80);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString&>(a1, (re::DynamicString *)&v127, (const re::DynamicString *)&v129);
  v82 = v127;
  if (v127 && (v128 & 1) != 0)
    v82 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v127 + 40))();
  v85 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a4, (uint64_t)&v125);
  v86 = v125;
  if (v125 && (v126 & 1) != 0)
    v86 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v125 + 40))();
  if (v85)
  {
    v87 = re::Hash<re::DynamicString>::operator()((uint64_t)&v123, (uint64_t)&v125);
    v88 = 0x7FFFFFFFLL;
    if (*(_QWORD *)a4)
    {
      v89 = *(unsigned int *)(*(_QWORD *)(a4 + 8) + 4 * (v87 % *(unsigned int *)(a4 + 24)));
      if ((_DWORD)v89 != 0x7FFFFFFF)
      {
        v90 = *(_QWORD *)(a4 + 16);
        v88 = 0x7FFFFFFFLL;
        while (1)
        {
          v87 = re::DynamicString::operator==(v90 + 56 * v89 + 16, (uint64_t)&v125);
          if ((v87 & 1) != 0)
            break;
          v89 = *(_DWORD *)(v90 + 56 * v89 + 8) & 0x7FFFFFFF;
          if (v89 == 0x7FFFFFFF)
            goto LABEL_82;
        }
        v88 = v89;
      }
    }
LABEL_82:
    v92 = *(void **)(*(_QWORD *)(a4 + 16) + 56 * v88 + 48);
    v93 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a5, (uint64_t)&v123);
    LODWORD(v91) = re::getTextureScaleFloat(v92, v93, v118).n128_u32[0];
    if (v123 && (v124 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v123 + 40))();
    if (v125 && (v126 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v125 + 40))();
  }
  else
  {
    re::getConstantFloat((re *)v10, (NSDictionary *)CFSTR("inputs:clearcoat"), (NSString *)((char *)&v141 + 4), v84);
    v91 = *((float *)&v141 + 1);
  }
  v94 = (_anonymous_namespace_ *)re::DynamicString::appendf((re::DynamicString *)&v127, "%f", v91);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString&>(a1, (re::DynamicString *)&v125, (const re::DynamicString *)&v127);
  v95 = v125;
  if (v125 && (v126 & 1) != 0)
    v95 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v125 + 40))();
  v98 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a4, (uint64_t)&v123);
  v99 = v123;
  if (v123 && (v124 & 1) != 0)
    v99 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v123 + 40))();
  if (v98)
  {
    v100 = re::Hash<re::DynamicString>::operator()((uint64_t)&v121, (uint64_t)&v123);
    v101 = 0x7FFFFFFFLL;
    if (*(_QWORD *)a4)
    {
      v102 = *(unsigned int *)(*(_QWORD *)(a4 + 8) + 4 * (v100 % *(unsigned int *)(a4 + 24)));
      if ((_DWORD)v102 != 0x7FFFFFFF)
      {
        v103 = *(_QWORD *)(a4 + 16);
        v101 = 0x7FFFFFFFLL;
        while (1)
        {
          v100 = re::DynamicString::operator==(v103 + 56 * v102 + 16, (uint64_t)&v123);
          if ((v100 & 1) != 0)
            break;
          v102 = *(_DWORD *)(v103 + 56 * v102 + 8) & 0x7FFFFFFF;
          if (v102 == 0x7FFFFFFF)
            goto LABEL_103;
        }
        v101 = v102;
      }
    }
LABEL_103:
    v105 = *(void **)(*(_QWORD *)(a4 + 16) + 56 * v101 + 48);
    v106 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a5, (uint64_t)&v121);
    LODWORD(v104) = re::getTextureScaleFloat(v105, v106, v118).n128_u32[0];
    if (v121 && (v122 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v121 + 40))();
    if (v123 && (v124 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v123 + 40))();
  }
  else
  {
    re::getConstantFloat((re *)v10, (NSDictionary *)CFSTR("inputs:clearcoatRoughness"), &v141, v97);
    v104 = *(float *)&v141;
  }
  v107 = (_anonymous_namespace_ *)re::DynamicString::appendf((re::DynamicString *)&v125, "%f", v104);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString&>(a1, (re::DynamicString *)&v123, (const re::DynamicString *)&v125);
  if (v123 && (v124 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v123 + 40))();
  ConstantFloat = (_anonymous_namespace_ *)re::getConstantFloat((re *)v10, (NSDictionary *)CFSTR("inputs:opacityThreshold"), (NSString *)((char *)&v140 + 4), v108);
  v110 = (_anonymous_namespace_ *)re::DynamicString::appendf((re::DynamicString *)&v123, "%f", *((float *)&v140 + 1));
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString&>(a1, (re::DynamicString *)&v121, (const re::DynamicString *)&v123);
  if (v121 && (v122 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v121 + 40))();
  v112 = (_anonymous_namespace_ *)re::getConstantFloat((re *)v10, (NSDictionary *)CFSTR("inputs:ior"), &v140, v111);
  if ((float)((float)((float)((float)(1.0 - *(float *)&v140) / (float)(*(float *)&v140 + 1.0))
                     * (float)((float)(1.0 - *(float *)&v140) / (float)(*(float *)&v140 + 1.0)))
             / 0.08) <= 1.0)
    v113 = (float)((float)((float)(1.0 - *(float *)&v140) / (float)(*(float *)&v140 + 1.0))
                 * (float)((float)(1.0 - *(float *)&v140) / (float)(*(float *)&v140 + 1.0)))
         / 0.08;
  else
    v113 = 1.0;
  v114 = (_anonymous_namespace_ *)re::DynamicString::appendf((re::DynamicString *)&v121, "%f", v113);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString&>(a1, (re::DynamicString *)&v119, (const re::DynamicString *)&v121);
  if (v119 && (v120 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v119 + 40))();
  if (v121 && (v122 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v121 + 40))();
  if (v123 && (v124 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v123 + 40))();
  if (v125 && (v126 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v125 + 40))();
  if (v127 && (v128 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v127 + 40))();
  if (v129 && (v130 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v129 + 40))();

  if (v131 && (v132 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v131 + 40))();

  if (v133 && (v134 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v133 + 40))();
  if (v135 && (v136 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v135 + 40))();
  if (v138 && (v139 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v138 + 40))();

}

__n128 re::`anonymous namespace'::getBaseColorTintAndOpacity(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v11;
  void *v12;
  float32x4_t v13;
  void *v14;
  int v15;
  void *v16;
  __n128 v17;
  float *v18;
  _anonymous_namespace_ *v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  _anonymous_namespace_ *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  _anonymous_namespace_ *v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  _anonymous_namespace_ *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float32x4_t v53;
  void *v54;
  _BOOL4 v55;
  _anonymous_namespace_ *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  _BOOL4 v63;
  unsigned __int32 v64;
  void *v65;
  _BOOL4 v66;
  unsigned __int32 v67;
  float32x4_t v68;
  void *v69;
  _BOOL4 v70;
  float32x4_t TextureScaleFloat3;
  float32x4_t v72;
  float32x4_t v74;
  __n128 v75;
  unsigned __int32 v76;
  unsigned __int32 v77;
  unsigned __int32 v78;
  unsigned __int32 v79;
  float32x4_t v80;
  __n128 v81;
  float32x4_t v82;
  float32x4_t v83;
  __n128 v84;
  float32x4_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  _anonymous_namespace_ *v89;
  char v90;
  uint64_t v91;
  _BYTE v92[20];
  float32x4_t v93;

  v5 = a1;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)&v92[4] = _Q0;
  objc_msgSend(MEMORY[0x24BEBED10], "USDPreviewSurfaceDefaults");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("diffuseColor"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "float3Value");
  v93 = v13;

  objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("opacity"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "floatValue");
  *(_DWORD *)v92 = v15;

  objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("textureFallback"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "float4Value");
  v75 = v17;

  re::getConstantFloat3(v5, (uint64_t)CFSTR("inputs:diffuseColor"), &v93);
  re::getConstantFloat((re *)v5, (NSDictionary *)CFSTR("inputs:opacity"), (NSString *)v92, v18);
  re::getConstantFloat3(v5, (uint64_t)CFSTR("inputs:realitykit:tint"), &v92[4]);
  v74 = *(float32x4_t *)&v92[4];
  v80 = vmulq_f32(*(float32x4_t *)&v92[4], v93);
  v93 = v80;
  v20 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a2, (uint64_t)&v89);
  if (v20)
  {
    v23 = v89;
    if (v89 && (v90 & 1) != 0)
      v23 = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v89 + 40))(v89, v91, v21, v22);
  }
  else
  {
    v26 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a2, (uint64_t)&v86);
    if (v86 && (v87 & 1) != 0)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v86 + 40))(v86, v88, v24, v25);
    v23 = v89;
    if (v89 && (v90 & 1) != 0)
      v23 = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v89 + 40))(v89, v91, v24, v25);
    if (!v26)
    {
      v53 = v80;
LABEL_90:
      v53.i32[3] = *(_DWORD *)v92;
LABEL_91:
      v83 = v53;
      goto LABEL_92;
    }
  }
  v27 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a2, (uint64_t)&v89);
  if (v27)
  {
    v30 = v89;
    if (v89 && (v90 & 1) != 0)
      v30 = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v89 + 40))(v89, v91, v28, v29);
    goto LABEL_29;
  }
  v33 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a2, (uint64_t)&v86);
  if (v86 && (v87 & 1) != 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v86 + 40))(v86, v88, v31, v32);
  v30 = v89;
  if (v89 && (v90 & 1) != 0)
    v30 = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v89 + 40))(v89, v91, v31, v32);
  if (!v33)
  {
LABEL_29:
    v38 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a2, (uint64_t)&v89);
    if (v38)
    {
      v43 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a2, (uint64_t)&v86);
      if (v86 && (v87 & 1) != 0)
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v86 + 40))(v86, v88, v41, v42);
      v44 = v89;
      if (v89 && (v90 & 1) != 0)
        v44 = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v89 + 40))(v89, v91, v41, v42);
      if (!v43)
      {
        v45 = re::Hash<re::DynamicString>::operator()((uint64_t)&v86, (uint64_t)&v89);
        v46 = 0x7FFFFFFFLL;
        if (*(_QWORD *)a2)
        {
          v47 = *(unsigned int *)(*(_QWORD *)(a2 + 8) + 4 * (v45 % *(unsigned int *)(a2 + 24)));
          if ((_DWORD)v47 != 0x7FFFFFFF)
          {
            v48 = *(_QWORD *)(a2 + 16);
            v46 = 0x7FFFFFFFLL;
            while (1)
            {
              v45 = re::DynamicString::operator==(v48 + 56 * v47 + 16, (uint64_t)&v89);
              if ((v45 & 1) != 0)
                break;
              v47 = *(_DWORD *)(v48 + 56 * v47 + 8) & 0x7FFFFFFF;
              if (v47 == 0x7FFFFFFF)
                goto LABEL_83;
            }
            v46 = v47;
          }
        }
LABEL_83:
        v69 = *(void **)(*(_QWORD *)(a2 + 16) + 56 * v46 + 48);
        v70 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a3, (uint64_t)&v86);
        TextureScaleFloat3 = (float32x4_t)re::getTextureScaleFloat3(v69, v70, v75);
        v72 = TextureScaleFloat3;
        if (v86 && (v87 & 1) != 0)
        {
          v84 = (__n128)TextureScaleFloat3;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v86 + 40))(v86, v88);
          v72 = (float32x4_t)v84;
        }
        if (v89 && (v90 & 1) != 0)
        {
          v85 = v72;
          (*(void (**)(_anonymous_namespace_ *, uint64_t))(*(_QWORD *)v89 + 40))(v89, v91);
          v72 = v85;
        }
        v53 = vmulq_f32(v72, v74);
        goto LABEL_90;
      }
    }
    else
    {
      v44 = v89;
      if (v89 && (v90 & 1) != 0)
        v44 = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v89 + 40))(v89, v91, v39, v40);
    }
    v49 = re::Hash<re::DynamicString>::operator()((uint64_t)&v86, (uint64_t)&v89);
    v50 = 0x7FFFFFFFLL;
    if (*(_QWORD *)a2)
    {
      v51 = *(unsigned int *)(*(_QWORD *)(a2 + 8) + 4 * (v49 % *(unsigned int *)(a2 + 24)));
      if ((_DWORD)v51 != 0x7FFFFFFF)
      {
        v52 = *(_QWORD *)(a2 + 16);
        v50 = 0x7FFFFFFFLL;
        while (1)
        {
          v49 = re::DynamicString::operator==(v52 + 56 * v51 + 16, (uint64_t)&v89);
          if ((v49 & 1) != 0)
            break;
          v51 = *(_DWORD *)(v52 + 56 * v51 + 8) & 0x7FFFFFFF;
          if (v51 == 0x7FFFFFFF)
            goto LABEL_54;
        }
        v50 = v51;
      }
    }
LABEL_54:
    v54 = *(void **)(*(_QWORD *)(a2 + 16) + 56 * v50 + 48);
    v55 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a3, (uint64_t)&v86);
    v81 = re::getTextureScaleFloat3(v54, v55, v75);
    if (v86 && (v87 & 1) != 0)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v86 + 40))(v86, v88);
    v56 = v89;
    if (v89 && (v90 & 1) != 0)
      v56 = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, uint64_t))(*(_QWORD *)v89 + 40))(v89, v91);
    v57 = re::Hash<re::DynamicString>::operator()((uint64_t)&v86, (uint64_t)&v89);
    if (*(_QWORD *)a2)
    {
      v58 = v57 % *(unsigned int *)(a2 + 24);
      v59 = *(_QWORD *)(a2 + 8);
      v60 = *(_QWORD *)(a2 + 16);
      v61 = *(unsigned int *)(v59 + 4 * v58);
      if ((_DWORD)v61 != 0x7FFFFFFF)
      {
        do
        {
          v57 = re::DynamicString::operator==(v60 + 56 * v61 + 16, (uint64_t)&v89);
          if ((v57 & 1) != 0)
            goto LABEL_67;
          v61 = *(_DWORD *)(v60 + 56 * v61 + 8) & 0x7FFFFFFF;
        }
        while (v61 != 0x7FFFFFFF);
      }
    }
    else
    {
      v60 = *(_QWORD *)(a2 + 16);
    }
    v61 = 0x7FFFFFFFLL;
LABEL_67:
    v62 = *(void **)(v60 + 56 * v61 + 48);
    v63 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a3, (uint64_t)&v86);
    v64 = re::getTextureScaleFloat(v62, v63, v75).n128_u32[0];
    if (v86 && (v87 & 1) != 0)
    {
      v76 = v64;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v86 + 40))(v86, v88);
      v64 = v76;
    }
    v53 = vmulq_f32((float32x4_t)v81, v74);
    if (v89 && (v90 & 1) != 0)
    {
      v77 = v64;
      v82 = v53;
      (*(void (**)(void))(*(_QWORD *)v89 + 40))();
      v64 = v77;
      v53 = v82;
    }
    v53.i32[3] = v64;
    goto LABEL_91;
  }
  v34 = re::Hash<re::DynamicString>::operator()((uint64_t)&v86, (uint64_t)&v89);
  v35 = 0x7FFFFFFFLL;
  if (*(_QWORD *)a2)
  {
    v36 = *(unsigned int *)(*(_QWORD *)(a2 + 8) + 4 * (v34 % *(unsigned int *)(a2 + 24)));
    if ((_DWORD)v36 != 0x7FFFFFFF)
    {
      v37 = *(_QWORD *)(a2 + 16);
      v35 = 0x7FFFFFFFLL;
      while (1)
      {
        v34 = re::DynamicString::operator==(v37 + 56 * v36 + 16, (uint64_t)&v89);
        if ((v34 & 1) != 0)
          break;
        v36 = *(_DWORD *)(v37 + 56 * v36 + 8) & 0x7FFFFFFF;
        if (v36 == 0x7FFFFFFF)
          goto LABEL_75;
      }
      v35 = v36;
    }
  }
LABEL_75:
  v65 = *(void **)(*(_QWORD *)(a2 + 16) + 56 * v35 + 48);
  v66 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a3, (uint64_t)&v86);
  v67 = re::getTextureScaleFloat(v65, v66, v75).n128_u32[0];
  if (v86 && (v87 & 1) != 0)
  {
    v78 = v67;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v86 + 40))(v86, v88);
    v67 = v78;
  }
  if (v89 && (v90 & 1) != 0)
  {
    v79 = v67;
    (*(void (**)(_anonymous_namespace_ *, uint64_t))(*(_QWORD *)v89 + 40))(v89, v91);
    v67 = v79;
  }
  v68 = v80;
  v68.i32[3] = v67;
  v83 = v68;
LABEL_92:

  return (__n128)v83;
}

void re::getConstantFloat3(void *a1, uint64_t a2, _OWORD *a3)
{
  void *v4;
  void *v5;
  void *v6;
  __int128 v7;
  id v8;

  objc_msgSend(a1, "objectForKey:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v8 = v4;
    objc_msgSend(v4, "type");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)*MEMORY[0x24BEBED50];

    v4 = v8;
    if (v5 == v6)
    {
      objc_msgSend(v8, "float3Value");
      v4 = v8;
      *a3 = v7;
    }
  }

}

__n128 re::getTextureScaleFloat3(void *a1, int a2, __n128 a3)
{
  id v4;
  _anonymous_namespace_ *v10;
  void *v11;
  float32x4_t v12;
  _anonymous_namespace_ *v13;
  void *v14;
  float32x4_t v15;
  float32x4_t v16;
  __n128 PropertyValueWithOutputProperty;
  float32x4_t v20;
  __n128 v21;
  float32x4_t v22;
  _OWORD v23[2];
  __int128 v24;
  __int128 v25;

  v4 = a1;
  __asm { FMOV            V0.4S, #1.0 }
  PropertyValueWithOutputProperty = re::getPropertyValueWithOutputProperty(v4, CFSTR("inputs:scale"), _Q0);
  re::getDataComponentWithPropertyOutput((uint64_t)&v24, PropertyValueWithOutputProperty);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if ((_QWORD)v24)
  {
    if ((BYTE8(v24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v24 + 40))(v24, v25);
    v24 = 0u;
    v25 = 0u;
  }
  if (a2)
  {
    objc_msgSend(v11, "float3Value", *(_OWORD *)&a3);
    v20 = v12;
  }
  else
  {
    v21 = re::getPropertyValueWithOutputProperty(v4, CFSTR("inputs:fallback"), a3);
    re::getDataComponentWithPropertyOutput((uint64_t)v23, v21);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (*(_QWORD *)&v23[0])
    {
      if ((BYTE8(v23[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v23[0] + 40))();
      memset(v23, 0, sizeof(v23));
    }
    objc_msgSend(v11, "float3Value", *(_OWORD *)&a3);
    v22 = v15;
    objc_msgSend(v14, "float3Value");
    v20 = vmulq_f32(v22, v16);

  }
  return (__n128)v20;
}

_anonymous_namespace_ *re::`anonymous namespace'::resolveTextureConnection(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  _BOOL8 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  _anonymous_namespace_ *v14;
  uint64_t v16;
  char v17;

  v7 = a4;
  v8 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a1, a3);
  if (v8)
  {
    v9 = re::Hash<re::DynamicString>::operator()((uint64_t)&v16, a3);
    v10 = 0x7FFFFFFFLL;
    if (*(_QWORD *)a1)
    {
      v11 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v9 % *(unsigned int *)(a1 + 24)));
      if ((_DWORD)v11 != 0x7FFFFFFF)
      {
        v12 = *(_QWORD *)(a1 + 16);
        v10 = 0x7FFFFFFFLL;
        while (!re::DynamicString::operator==(v12 + 56 * v11 + 16, a3))
        {
          v11 = *(_DWORD *)(v12 + 56 * v11 + 8) & 0x7FFFFFFF;
          if (v11 == 0x7FFFFFFF)
            goto LABEL_18;
        }
        v10 = v11;
      }
    }
LABEL_18:
    v14 = (_anonymous_namespace_ *)*(id *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 48);
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a2, a3);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v13 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a1, (uint64_t)&v16);
    if (v16 && (v17 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v16 + 40))();
    if (v13)
    {
      v14 = (_anonymous_namespace_ *)v7;
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a2, (uint64_t)&v16);
      if (v16 && (v17 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v16 + 40))();
    }
    else
    {
LABEL_16:
      v14 = 0;
    }
  }

  return v14;
}

uint64_t re::getConstantFloat(re *this, NSDictionary *a2, NSString *a3, float *a4)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  int v10;

  -[re objectForKey:](this, "objectForKey:", a2, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5
    && (objc_msgSend(v5, "type"),
        v7 = (void *)objc_claimAutoreleasedReturnValue(),
        v8 = (void *)*MEMORY[0x24BEBED40],
        v7,
        v7 == v8))
  {
    objc_msgSend(v6, "floatValue");
    *(_DWORD *)a3 = v10;
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

__n128 re::getTextureScaleFloat(void *a1, int a2, __n128 a3)
{
  id v4;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  _anonymous_namespace_ *v14;
  const char *v15;
  re *v16;
  NSObject *v17;
  const char *v18;
  void *v19;
  unint64_t v20;
  void *v21;
  float v22;
  float v23;
  float v24;
  __n128 v25;
  __n128 PropertyValueWithOutputProperty;
  __n128 v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  _BYTE v35[7];
  const char *v36;
  uint8_t buf[4];
  const char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = a1;
  __asm { FMOV            V0.4S, #1.0 }
  PropertyValueWithOutputProperty = re::getPropertyValueWithOutputProperty(v4, CFSTR("inputs:scale"), _Q0);
  objc_msgSend(v4, "name");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "stringValue");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "componentsSeparatedByString:", CFSTR(":"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "lastObject");
  v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v14 = (_anonymous_namespace_ *)objc_msgSend(v13, "UTF8String");

  if ((v34 & 1) != 0)
    v15 = v36;
  else
    v15 = v35;
  if (!strcmp(v15, "r") || !strcmp(v15, "g") || !strcmp(v15, "b") || (v16 = (re *)strcmp(v15, "a"), !(_DWORD)v16))
  {
    re::DynamicString::DynamicString((re::DynamicString *)&v31, (const re::DynamicString *)&v33);
    re::getDataComponentWithPropertyOutput((uint64_t)&v31, PropertyValueWithOutputProperty);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if ((_QWORD)v31)
    {
      if ((BYTE8(v31) & 1) != 0)
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v31 + 40))(v31, v32);
      v31 = 0u;
      v32 = 0u;
    }
    if (a2)
    {
      objc_msgSend(v19, "floatValue", *(_OWORD *)&a3);
      PropertyValueWithOutputProperty.n128_u64[0] = v20;
    }
    else
    {
      v29 = re::getPropertyValueWithOutputProperty(v4, CFSTR("inputs:fallback"), a3);
      re::DynamicString::DynamicString((re::DynamicString *)v30, (const re::DynamicString *)&v33);
      re::getDataComponentWithPropertyOutput((uint64_t)v30, v29);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      if (*(_QWORD *)&v30[0])
      {
        if ((BYTE8(v30[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v30[0] + 40))();
        memset(v30, 0, sizeof(v30));
      }
      objc_msgSend(v19, "floatValue", *(_OWORD *)&a3);
      v23 = v22;
      objc_msgSend(v21, "floatValue");
      v25.n128_f32[0] = v23 * v24;
      PropertyValueWithOutputProperty = v25;

    }
  }
  else
  {
    v17 = *re::pipelineLogObjects(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      if ((v34 & 1) != 0)
        v18 = v36;
      else
        v18 = v35;
      *(_DWORD *)buf = 136315138;
      v38 = v18;
      _os_log_error_impl(&dword_224FE9000, v17, OS_LOG_TYPE_ERROR, "Invalid USD texture shader node output %s for single texture component.", buf, 0xCu);
    }
  }
  if (v33 && (v34 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v33 + 40))();

  return PropertyValueWithOutputProperty;
}

void re::gatherMaterialTextureProperties(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  _anonymous_namespace_ *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  uint64_t v48;
  void *v49;
  re *v50;
  NSObject *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  NSObject *v56;
  void *v57;
  id v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  _BYTE buf[12];
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BEBED10], "textureMaterialPropertiesWithMaterial:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_WORD *)(a2 + 80) = 0;
  objc_msgSend(v3, "objectForKey:", CFSTR("inputs:diffuseColor"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v72 = v4;
  if (v4)
  {
    re::HashTable<re::DynamicString,USKProperty * {__strong},re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<USKProperty * {__strong}&>(a2, (const re::DynamicString *)buf, &v72);
    if (*(_QWORD *)buf)
    {
      if ((buf[8] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)buf + 40))();
    }
  }
  objc_msgSend(v3, "objectForKey:", CFSTR("inputs:normal"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v71 = v5;
  if (v5)
  {
    re::HashTable<re::DynamicString,USKProperty * {__strong},re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<USKProperty * {__strong}&>(a2, (const re::DynamicString *)buf, &v71);
    if (*(_QWORD *)buf)
    {
      if ((buf[8] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)buf + 40))();
    }
  }
  objc_msgSend(v3, "objectForKey:", CFSTR("inputs:metallic"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v70 = v6;
  objc_msgSend(v3, "objectForKey:", CFSTR("inputs:roughness"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v69 = v7;
  objc_msgSend(v3, "objectForKey:", CFSTR("inputs:specularColor"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v68 = v8;
  objc_msgSend(v3, "objectForKey:", CFSTR("inputs:occlusion"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v67 = v9;
  if (v6)
  {
    objc_msgSend(v6, "parentNode");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "property:", CFSTR("inputs:file"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "stringValue");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  if (v7)
  {
    objc_msgSend(v7, "parentNode");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "property:", CFSTR("inputs:file"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "stringValue");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  if (v8)
  {
    objc_msgSend(v8, "parentNode");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "property:", CFSTR("inputs:file"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "stringValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  if (v9)
  {
    objc_msgSend(v9, "parentNode");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "property:", CFSTR("inputs:file"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "stringValue");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  v18 = v6;
  v19 = v18;
  if (!v18)
  {
    v19 = v7;
    if (!v19)
    {
      v19 = v8;
      if (!v19)
        v19 = v9;
    }
  }
  if (v9)
  {
    v20 = (_anonymous_namespace_ *)objc_msgSend(v9, "isEqualToString:", v19);
    if ((v20 & 1) == 0)
    {
      re::HashTable<re::DynamicString,USKProperty * {__strong},re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<USKProperty * {__strong}&>(a2, (const re::DynamicString *)buf, &v67);
      if (*(_QWORD *)buf && (buf[8] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)buf + 40))();
      v21 = v67;
      v67 = 0;

      v9 = 0;
    }
  }
  objc_msgSend(MEMORY[0x24BDBCEF0], "set");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  if (v18 && objc_msgSend(v18, "isEqualToString:", v19))
  {
    objc_msgSend(v70, "name");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "stringValue");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "addObject:", v24);

  }
  if (v7 && objc_msgSend(v7, "isEqualToString:", v19))
  {
    objc_msgSend(v69, "name");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "stringValue");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "addObject:", v26);

  }
  if (v8 && objc_msgSend(v8, "isEqualToString:", v19))
  {
    objc_msgSend(v68, "name");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "stringValue");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "addObject:", v28);

  }
  if (v9 && objc_msgSend(v9, "isEqualToString:", v19))
  {
    objc_msgSend(v67, "name");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "stringValue");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "addObject:", v30);

  }
  v31 = objc_msgSend(v22, "count");
  if (v31 < 2)
    goto LABEL_53;
  if (v18)
  {
    v31 = objc_msgSend(v18, "isEqualToString:", v19);
    if (!(_DWORD)v31)
      goto LABEL_53;
  }
  if (v7)
  {
    v31 = objc_msgSend(v7, "isEqualToString:", v19);
    if (!(_DWORD)v31)
      goto LABEL_53;
  }
  if (!v8)
  {
    if (!v9)
      goto LABEL_51;
    goto LABEL_50;
  }
  v31 = objc_msgSend(v8, "isEqualToString:", v19);
  if (v9 && (v31 & 1) != 0)
  {
LABEL_50:
    v31 = objc_msgSend(v9, "isEqualToString:", v19);
    if ((v31 & 1) == 0)
      goto LABEL_53;
    goto LABEL_51;
  }
  if (!(_DWORD)v31)
  {
LABEL_53:
    if (v70)
    {
      re::HashTable<re::DynamicString,USKProperty * {__strong},re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<USKProperty * {__strong}&>(a2, (const re::DynamicString *)buf, &v70);
      v31 = *(_QWORD *)buf;
      if (*(_QWORD *)buf)
      {
        if ((buf[8] & 1) != 0)
          v31 = (*(uint64_t (**)(void))(**(_QWORD **)buf + 40))();
      }
    }
    if (v69)
    {
      re::HashTable<re::DynamicString,USKProperty * {__strong},re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<USKProperty * {__strong}&>(a2, (const re::DynamicString *)buf, &v69);
      v31 = *(_QWORD *)buf;
      if (*(_QWORD *)buf)
      {
        if ((buf[8] & 1) != 0)
          v31 = (*(uint64_t (**)(void))(**(_QWORD **)buf + 40))();
      }
    }
    if (v68)
    {
      re::HashTable<re::DynamicString,USKProperty * {__strong},re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<USKProperty * {__strong}&>(a2, (const re::DynamicString *)buf, &v68);
      v31 = *(_QWORD *)buf;
      if (*(_QWORD *)buf)
      {
        if ((buf[8] & 1) != 0)
          v31 = (*(uint64_t (**)(void))(**(_QWORD **)buf + 40))();
      }
    }
    if (v67)
    {
      re::HashTable<re::DynamicString,USKProperty * {__strong},re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<USKProperty * {__strong}&>(a2, (const re::DynamicString *)buf, &v67);
      if (*(_QWORD *)buf)
      {
        if ((buf[8] & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)buf + 40))();
      }
    }
    goto LABEL_76;
  }
LABEL_51:
  v61 = v8;
  v62 = v7;
  v32 = v70;
  v33 = v32;
  v66 = v32;
  v34 = v69;
  if (v32)
  {
    v35 = v68;
  }
  else
  {
    v32 = v69;
    v66 = v32;
    v35 = v68;
    if (!v32)
    {
      v32 = v68;
      v66 = v32;
      v35 = v32;
      if (!v32)
      {
        v32 = v67;
        v66 = v32;
      }
    }
  }
  v60 = v32;
  re::HashTable<re::DynamicString,USKProperty * {__strong},re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<USKProperty * {__strong}&>(a2, (const re::DynamicString *)buf, &v66);
  if (*(_QWORD *)buf && (buf[8] & 1) != 0)
    (*(void (**)(void))(**(_QWORD **)buf + 40))();
  v36 = v34;
  v37 = v33;
  v38 = v67;
  v39 = v35;
  v40 = *(void **)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v36;

  v41 = *(void **)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v37;

  v42 = *(void **)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v38;

  v43 = *(void **)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v39;

  v8 = v61;
  v7 = v62;
LABEL_76:

  objc_msgSend(v3, "objectForKey:", CFSTR("inputs:emissiveColor"));
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = v44;
  v66 = v44;
  if (v44)
  {
    re::HashTable<re::DynamicString,USKProperty * {__strong},re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<USKProperty * {__strong}&>(a2, (const re::DynamicString *)buf, &v66);
    if (*(_QWORD *)buf)
    {
      if ((buf[8] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)buf + 40))();
    }
  }
  v46 = v72;
  objc_msgSend(v3, "objectForKey:", CFSTR("inputs:opacity"));
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v65 = v47;
  if (v47)
  {
    v48 = re::gatherMaterialTextureProperties(USKNode *)::$_0::operator()(v46, v47);
    *(_BYTE *)(a2 + 80) = v48;
    if ((v48 & 1) == 0)
    {
      re::HashTable<re::DynamicString,USKProperty * {__strong},re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<USKProperty * {__strong}&>(a2, (const re::DynamicString *)buf, &v65);
      if (*(_QWORD *)buf)
      {
        if ((buf[8] & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)buf + 40))();
      }
    }
  }
  objc_msgSend(v3, "objectForKey:", CFSTR("inputs:realitykit:tintMask"));
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  if (v49)
  {
    v50 = (re *)re::gatherMaterialTextureProperties(USKNode *)::$_0::operator()(v46, v49);
    if ((_DWORD)v50)
    {
      *(_BYTE *)(a2 + 81) = 1;
    }
    else
    {
      v51 = *re::pipelineLogObjects(v50);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      {
        v56 = v51;
        objc_msgSend(v49, "objectPath");
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v57, "stringValue");
        v58 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v59 = objc_msgSend(v58, "UTF8String");
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v59;
        _os_log_error_impl(&dword_224FE9000, v56, OS_LOG_TYPE_ERROR, "Unsupported connection to the \"tintMask\" at %s: only connections to the alpha channel of the \"diffuseColor\" texture are supported.", buf, 0xCu);

      }
    }
  }
  objc_msgSend(v3, "objectForKey:", CFSTR("inputs:clearcoatRoughness"));
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  v53 = v52;
  v64 = v52;
  if (v52)
  {
    re::HashTable<re::DynamicString,USKProperty * {__strong},re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<USKProperty * {__strong}&>(a2, (const re::DynamicString *)buf, &v64);
    if (*(_QWORD *)buf)
    {
      if ((buf[8] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)buf + 40))();
    }
  }
  objc_msgSend(v3, "objectForKey:", CFSTR("inputs:clearcoat"));
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  v63 = v54;
  if (v54)
  {
    v55 = v54;
    re::HashTable<re::DynamicString,USKProperty * {__strong},re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<USKProperty * {__strong}&>(a2, (const re::DynamicString *)buf, &v63);
    if (*(_QWORD *)buf && (buf[8] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)buf + 40))();

  }
}

id re::HashTable<re::DynamicString,USKProperty * {__strong},re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<USKProperty * {__strong}&>(uint64_t a1, const re::DynamicString *a2, id *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id result;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v17, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v12 == 0x7FFFFFFF)
    {
      v12 = *(unsigned int *)(a1 + 32);
      v13 = v12;
      if ((_DWORD)v12 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::DynamicString,USKProperty * {__strong},re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(v8) = v7 % *(unsigned int *)(a1 + 24);
        v13 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 32) = v13 + 1;
      v14 = *(_QWORD *)(a1 + 16);
      v15 = *(_DWORD *)(v14 + 56 * v12 + 8);
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 16);
      v15 = *(_DWORD *)(v14 + 56 * v12 + 8);
      *(_DWORD *)(a1 + 36) = v15 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v14 + 56 * v12 + 8) = v15 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v12 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v12 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v8);
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v12) = v7;
    re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 56 * v12 + 16), a2);
    v16 = *(_QWORD *)(a1 + 16) + 56 * v12;
    result = *a3;
    *(_QWORD *)(v16 + 48) = result;
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v8) = v12;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    return result;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    result = (id)re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2);
    if ((result & 1) != 0)
      return result;
    v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

uint64_t re::gatherMaterialTextureProperties(USKNode *)::$_0::operator()(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  uint64_t v13;

  if (!a1)
    return 0;
  v3 = a2;
  objc_msgSend(a1, "parentNode");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "property:", CFSTR("inputs:file"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringValue");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "parentNode");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "property:", CFSTR("inputs:file"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "stringValue");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  LODWORD(v7) = objc_msgSend(v6, "isEqualToString:", v9);
  objc_msgSend(v3, "name");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "stringValue");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "isEqualToString:", CFSTR("outputs:a"));

  v13 = v7 & v12;
  return v13;
}

uint64_t re::isMaterialTransparent(void *a1, uint64_t a2, uint64_t a3)
{
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _BOOL4 v7;
  const re::TextureProvider *v8;
  re::TextureProvider **v9;
  uint64_t HaveAlpha;
  _BOOL4 v11;
  _anonymous_namespace_ *v12;
  BOOL v13;
  _anonymous_namespace_ *v15;
  char v16;

  v5 = a1;
  v6 = v5;
  if (!*(_BYTE *)(a2 + 80))
    goto LABEL_12;
  v7 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a2, (uint64_t)&v15);
  v5 = v15;
  if (v15 && (v16 & 1) != 0)
    v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v15 + 40))();
  if (!v7)
  {
LABEL_12:
    v11 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a2, (uint64_t)&v15);
    v12 = v15;
    if (v15 && (v16 & 1) != 0)
      v12 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v15 + 40))();
    if (v11)
    {
      v13 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a3, (uint64_t)&v15);
      if (v15 && (v16 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v15 + 40))();
      if (v13)
        goto LABEL_20;
    }
LABEL_21:
    goto LABEL_22;
  }
  v9 = (re::TextureProvider **)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a3, (uint64_t)&v15);
  if (v15 && (v16 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v15 + 40))();
  if (!v9)
    goto LABEL_21;
  if (!*v9)
  {
LABEL_20:
    HaveAlpha = 1;
    goto LABEL_22;
  }
  HaveAlpha = re::TextureProvider::canHaveAlpha(*v9, v8);
LABEL_22:

  return HaveAlpha;
}

uint64_t re::isMaterialAlphaCutout(re *this, NSDictionary *a2, uint64_t a3, float *a4)
{
  uint64_t result;
  NSString var4;

  LODWORD(var4) = 0;
  LODWORD(result) = re::getConstantFloat(this, (NSDictionary *)CFSTR("inputs:opacityThreshold"), &var4, a4);
  if (*(float *)&var4 > 0.0)
    return result;
  else
    return 0;
}

__n128 re::getPropertyValueWithOutputProperty(void *a1, void *a2, __n128 a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  __n128 v10;

  v4 = a2;
  if (a1)
  {
    objc_msgSend(a1, "parentNode");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v5)
    {
      objc_msgSend(v5, "property:", v4);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = v7;
      if (v7)
      {
        objc_msgSend(v7, "data");
        v9 = (void *)objc_claimAutoreleasedReturnValue();

        if (v9)
        {
          objc_msgSend(v8, "float4Value");
          a3 = v10;
        }
      }

    }
  }

  return a3;
}

id re::getDataComponentWithPropertyOutput(uint64_t a1, __n128 a2)
{
  const char *v2;
  int v3;
  id v4;
  void *v5;
  id v6;
  unint64_t v7;

  if ((*(_QWORD *)(a1 + 8) & 1) != 0)
    v2 = *(const char **)(a1 + 16);
  else
    v2 = (const char *)(a1 + 9);
  if (!strcmp(v2, "r"))
  {
    v6 = objc_alloc(MEMORY[0x24BEBECD8]);
    v7 = a2.n128_u64[0];
LABEL_14:
    v5 = (void *)objc_msgSend(v6, "initWithFloat:", *(double *)&v7, *(_OWORD *)&a2);
    return v5;
  }
  if (!strcmp(v2, "g"))
  {
    v6 = objc_alloc(MEMORY[0x24BEBECD8]);
    HIDWORD(v7) = a2.n128_u32[1];
    LODWORD(v7) = a2.n128_u32[1];
    goto LABEL_14;
  }
  if (!strcmp(v2, "b"))
  {
    v6 = objc_alloc(MEMORY[0x24BEBECD8]);
    v7 = __PAIR64__(a2.n128_u32[1], a2.n128_u32[2]);
    goto LABEL_14;
  }
  if (!strcmp(v2, "a"))
  {
    v6 = objc_alloc(MEMORY[0x24BEBECD8]);
    v7 = __PAIR64__(a2.n128_u32[1], a2.n128_u32[3]);
    goto LABEL_14;
  }
  v3 = strcmp(v2, "rgb");
  v4 = objc_alloc(MEMORY[0x24BEBECD8]);
  if (v3)
    v5 = (void *)objc_msgSend(v4, "initWithFloat4:", a2.n128_f64[0]);
  else
    v5 = (void *)objc_msgSend(v4, "initWithFloat3:", a2.n128_f64[0]);
  return v5;
}

void re::HashTable<re::DynamicString,USKProperty * {__strong},re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  unint64_t *v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  signed int v22;
  _BYTE v23[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(_QWORD *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v23, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v23;
      v6 = *(unint64_t **)(a1 + 16);
      v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)v23 = v5;
      *(_QWORD *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        do
        {
          if ((v6[1] & 0x80000000) != 0)
          {
            v14 = *v6;
            v15 = *(unsigned int *)(a1 + 24);
            v16 = *v6 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<re::DynamicString,USKProperty * {__strong},re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v12));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 56 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 56 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 56 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v17 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v17) = v14;
            re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 56 * v17 + 16), (const re::DynamicString *)(v6 + 2));
            v21 = *(_QWORD *)(a1 + 16) + 56 * v17;
            *(_QWORD *)(v21 + 48) = (id)v6[6];
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v16) = v17;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v6 += 7;
        }
        while (v11 < v10);
      }
      re::HashTable<re::DynamicString,USKProperty * {__strong},re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2)
      v22 = a2;
    else
      v22 = 3;
  }
}

uint64_t re::internal::makeOpenSubdivAssetBuffersAndAppendToAssetPartInternal(re::internal *this, const re::GeomMesh *a2, MeshAssetPart *a3)
{
  uint64_t v3;
  unint64_t v4;
  re::internal *v5;
  uint64_t result;
  int v7;
  unsigned int i;
  int v9;
  unsigned int j;
  uint64_t v11;
  const re::GeomAttribute *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _anonymous_namespace_ *v17;
  _QWORD *v18;
  unsigned int v19;
  _QWORD *v20;
  _DWORD *v21;
  int *v22;
  int v23;
  int v24;
  unint64_t v25;
  _anonymous_namespace_ *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _anonymous_namespace_ *v33;
  uint64_t v34;
  _anonymous_namespace_ *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _anonymous_namespace_ *v40;
  uint64_t v41;
  _anonymous_namespace_ *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t *v47;
  re::internal *v48;
  const re::GeomAttribute *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _QWORD *v54;
  unint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _anonymous_namespace_ *v71;
  unsigned int v72;
  unint64_t v73;
  _anonymous_namespace_ *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  re::internal *v78;
  re::internal *v79;
  uint64_t v80;
  uint64_t v81;
  OpenSubdiv::v3_1_1::Far::TopologyRefiner *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  OpenSubdiv::v3_1_1::Far::TopologyRefiner *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _anonymous_namespace_ *v103;
  re::internal *v104;
  unint64_t v105;
  re::internal *v106;
  uint64_t v107;
  unint64_t v108;
  const OpenSubdiv::v3_1_1::Far::PatchTable *v109;
  _anonymous_namespace_ *v110;
  uint64_t v111;
  uint64_t v112;
  _anonymous_namespace_ *v113;
  _anonymous_namespace_ *v114;
  _anonymous_namespace_ *v115;
  _anonymous_namespace_ *v116;
  unint64_t v117;
  unint64_t v118;
  const OpenSubdiv::v3_1_1::Far::TopologyRefiner *appended;
  const OpenSubdiv::v3_1_1::Far::TopologyRefiner *v120;
  const OpenSubdiv::v3_1_1::Far::StencilTable *v121;
  const OpenSubdiv::v3_1_1::Far::TopologyRefiner *v122;
  _anonymous_namespace_ *v123;
  _anonymous_namespace_ *v124;
  _anonymous_namespace_ *v125;
  _anonymous_namespace_ *v126;
  _anonymous_namespace_ *v127;
  _anonymous_namespace_ *v128;
  _anonymous_namespace_ *v129;
  _anonymous_namespace_ *v130;
  _anonymous_namespace_ *v131;
  _QWORD *v132;
  const char *v133;
  const char *v134;
  const OpenSubdiv::v3_1_1::Far::TopologyRefiner *v135;
  const OpenSubdiv::v3_1_1::Far::StencilTable **v136;
  const OpenSubdiv::v3_1_1::Far::StencilTable *v137;
  _anonymous_namespace_ *v138;
  _anonymous_namespace_ *v139;
  _anonymous_namespace_ *v140;
  _anonymous_namespace_ *v141;
  _anonymous_namespace_ *v142;
  _BYTE *v143;
  _BYTE *v144;
  _anonymous_namespace_ *v145;
  _BYTE *v146;
  _BYTE *v147;
  _anonymous_namespace_ *v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  _DWORD *v155;
  int *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  void *v160;
  char *v161;
  void *v162;
  void *v163;
  char *v164;
  char *v165;
  void *v166;
  char *v167;
  void *v168;
  void *v169;
  _BYTE *v170;
  const OpenSubdiv::v3_1_1::Far::TopologyRefiner *v171;
  uint64_t *v172;
  re::internal *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  OpenSubdiv::v3_1_1::Far::PatchTable *v179;
  OpenSubdiv::v3_1_1::Far::PatchTable *v180;
  re::internal::GeomAttributeManager *v182;
  _OWORD v183[2];
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  __int16 v189;
  _OWORD v190[2];
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  __int16 v196;
  _OWORD v197[2];
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  __int16 v203;
  _OWORD v204[2];
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  __int16 v210;
  _OWORD v211[2];
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  __int16 v217;
  _OWORD v218[2];
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  __int16 v224;
  _OWORD v225[2];
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  void *v230;
  __int16 v231;
  _OWORD v232[2];
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  void *v237;
  __int16 v238;
  _OWORD v239[2];
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  void *v244;
  __int16 v245;
  _OWORD v246[2];
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  void *v251;
  __int16 v252;
  __int128 v253;
  __int128 v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  void *v259;
  __int16 v260;
  __int128 v261;
  __int128 v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  uint64_t v267;
  __int16 v268;
  __int128 v269;
  __int128 v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  void *__dst;
  __int16 v276;
  __int128 v277;
  __int128 v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  uint64_t v283;
  __int16 v284;
  uint64_t v285;
  re::internal *v286;
  uint64_t v287;
  _QWORD v288[2];
  uint64_t *v289;
  int v290;
  OpenSubdiv::v3_1_1::Far::PatchTable *v291;
  _BYTE v292[12];
  __int128 v293;
  __int128 v294;
  uint64_t *v295;
  uint64_t v296;
  _DWORD *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  uint64_t v303;
  __int16 v304;
  __int128 v305;
  __int128 v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  _BYTE *v311;
  __int16 v312;
  void *v313[2];
  _BYTE __src[72];
  __int128 v315;
  uint64_t v316;
  void *v317;
  char *v318;
  uint64_t v319;
  void *__p;
  char *v321;
  _BYTE v322[40];
  uint64_t v323;
  uint64_t v324;
  int v325;
  void *v326;
  __int16 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  uint64_t v333;

  v5 = this;
  v333 = *MEMORY[0x24BDAC8D0];
  v182 = (re::internal *)((char *)this + 64);
  result = re::internal::GeomAttributeManager::attributeByName((re::internal *)((char *)this + 64), "osdSubdivisionScheme");
  if (result)
  {
    result = re::internal::GeomTypedAttribute<short>::operator[](result, 0);
    if (*(_WORD *)result == 1)
    {
      v291 = 0;
      v289 = 0;
      v288[0] = 0;
      v288[1] = 0;
      v290 = 0;
      v7 = *((_DWORD *)v5 + 50);
      if (v7)
      {
        for (i = 0; i != v7; ++i)
        {
          result = re::internal::GeomAttributeContainer::attributeByIndex((re::internal *)((char *)v5 + 176), i);
          if (*(_BYTE *)(result + 17) == 6)
          {
            v313[0] = *(void **)(result + 8);
            result = (uint64_t)re::DynamicArray<re::TransitionCondition *>::add(v288, v313);
          }
        }
      }
      v9 = *((_DWORD *)v5 + 106);
      if (v9)
      {
        for (j = 0; j != v9; ++j)
        {
          v11 = re::internal::GeomAttributeContainer::attributeByIndex((re::internal *)((char *)v5 + 400), j);
          result = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v11, v12);
          if (*(_DWORD *)(result + 24) == *((_DWORD *)v5 + 10) && *(_BYTE *)(v11 + 17) == 6)
          {
            v313[0] = *(void **)(v11 + 8);
            result = (uint64_t)re::DynamicArray<re::TransitionCondition *>::add(v288, v313);
          }
        }
      }
      v179 = v291;
      v13 = v289;
      v315 = 0u;
      memset(&__src[8], 0, 64);
      v173 = (re::internal *)((char *)v5 + 16);
      v14 = *((_QWORD *)v5 + 5);
      v15 = v14;
      LODWORD(v313[0]) = *((_DWORD *)v5 + 4);
      HIDWORD(v313[0]) = v14;
      v296 = 0;
      v295 = 0;
      v297 = 0;
      v16 = (int)v14;
      if ((int)v14 >= 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = (_QWORD *)*((_QWORD *)v5 + 5);
        v3 = v296;
        v21 = v297;
        v22 = (int *)(*((_QWORD *)v5 + 7) + 12);
        while (1)
        {
          if (v20 == v18)
            goto LABEL_380;
          if ((_QWORD *)v3 == v18)
            break;
          v23 = *v22;
          v22 += 4;
          if (v23 == -1)
            v24 = 3;
          else
            v24 = 4;
          v21[(_QWORD)v18] = v24;
          v19 += v24;
          v18 = (_QWORD *)((char *)v18 + 1);
          if ((_QWORD *)(int)v14 == v18)
            goto LABEL_24;
        }
LABEL_381:
        *(_QWORD *)&v277 = 0;
        v331 = 0u;
        v332 = 0u;
        v329 = 0u;
        v330 = 0u;
        v328 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v322 = 136315906;
        *(_QWORD *)&v322[4] = "operator[]";
        *(_WORD *)&v322[12] = 1024;
        *(_DWORD *)&v322[14] = 468;
        *(_WORD *)&v322[18] = 2048;
        *(_QWORD *)&v322[20] = v3;
        *(_WORD *)&v322[28] = 2048;
        *(_QWORD *)&v322[30] = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_382:
        *(_QWORD *)&v305 = 0;
        v331 = 0u;
        v332 = 0u;
        v329 = 0u;
        v330 = 0u;
        v328 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v322 = 136315906;
        *(_QWORD *)&v322[4] = "operator[]";
        *(_WORD *)&v322[12] = 1024;
        *(_DWORD *)&v322[14] = 797;
        *(_WORD *)&v322[18] = 2048;
        *(_QWORD *)&v322[20] = v16;
        *(_WORD *)&v322[28] = 2048;
        *(_QWORD *)&v322[30] = v16;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_383:
        *(_QWORD *)v322 = 0;
        memset(__src, 0, 64);
        *(_OWORD *)v313 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v328) = 136315906;
        *(_QWORD *)(v16 + 4) = "operator[]";
        WORD6(v328) = 1024;
        *(_DWORD *)(v16 + 14) = 468;
        WORD1(v329) = 2048;
        *(_QWORD *)(v16 + 20) = v5;
        WORD6(v329) = 2048;
        *(_QWORD *)(v16 + 30) = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_384;
      }
      v19 = 0;
LABEL_24:
      v277 = 0uLL;
      v25 = v19;
      *(_QWORD *)&v278 = 0;
      if (!(_DWORD)v14)
      {
        v31 = v278;
        goto LABEL_35;
      }
      v27 = 0;
      v28 = 0;
      v16 = *((_QWORD *)v5 + 5);
      v29 = *((_QWORD *)v5 + 7);
      v5 = (re::internal *)*((_QWORD *)&v277 + 1);
      do
      {
        if (v27 == v16)
          goto LABEL_382;
        v30 = 0;
        v305 = *(_OWORD *)(v29 + 16 * v27);
        v31 = v278;
        if (HIDWORD(v305) == -1)
          v32 = 3;
        else
          v32 = 4;
        do
        {
          v14 = (v28 + v30);
          if ((unint64_t)v5 <= v14)
          {
            *(_QWORD *)&v269 = 0;
            v331 = 0u;
            v332 = 0u;
            v329 = 0u;
            v330 = 0u;
            v328 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v322 = 136315906;
            *(_QWORD *)&v322[4] = "operator[]";
            *(_WORD *)&v322[12] = 1024;
            *(_DWORD *)&v322[14] = 468;
            *(_WORD *)&v322[18] = 2048;
            *(_QWORD *)&v322[20] = v14;
            *(_WORD *)&v322[28] = 2048;
            *(_QWORD *)&v322[30] = v5;
            v170 = v322;
            _os_log_send_and_compose_impl();
            v42 = (_anonymous_namespace_ *)_os_crash_msg();
            __break(1u);
            v35 = 0;
            v20 = 0;
LABEL_52:
            v46 = 0;
            v47 = v13;
            DWORD1(v315) = (_DWORD)v13;
            v174 = (uint64_t)v35;
            v177 = v16;
            *((_QWORD *)&v315 + 1) = v35;
            v14 = 24;
            v3 = 3;
            v13 = (uint64_t *)&v305;
            while (1)
            {
              if (v46 == v47)
                goto LABEL_395;
              v48 = (re::internal *)re::internal::GeomAttributeManager::attributeByName(v182, *((const char **)v179 + (_QWORD)v46));
              v5 = v173;
              if (*((_BYTE *)v48 + 16) == 3)
              {
                v48 = (re::internal *)re::internal::accessFaceVaryingAttributeSubmesh(v48, v49);
                v5 = v48;
              }
              if (v46 == (uint64_t *)v16)
                goto LABEL_396;
              v50 = (4 * *((_DWORD *)v5 + 6));
              v51 = HIDWORD(v313[0]);
              if (!HIDWORD(v313[0]))
              {
                v60 = v20[3 * (_QWORD)v46 + 2];
                goto LABEL_68;
              }
              v52 = 0;
              v53 = 0;
              v54 = &v20[3 * (_QWORD)v46];
              v55 = v54 + 1;
              v56 = v54 + 2;
              v16 = *((_QWORD *)v5 + 3);
              do
              {
                if (v52 == v16)
                {
                  *(_QWORD *)&v305 = 0;
                  v331 = 0u;
                  v332 = 0u;
                  v329 = 0u;
                  v330 = 0u;
                  v328 = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v322 = 136315906;
                  *(_QWORD *)&v322[4] = "operator[]";
                  *(_WORD *)&v322[12] = 1024;
                  *(_DWORD *)&v322[14] = 797;
                  *(_WORD *)&v322[18] = 2048;
                  *(_QWORD *)&v322[20] = v16;
                  *(_WORD *)&v322[28] = 2048;
                  *(_QWORD *)&v322[30] = v16;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_380:
                  *(_QWORD *)&v277 = 0;
                  v331 = 0u;
                  v332 = 0u;
                  v329 = 0u;
                  v330 = 0u;
                  v328 = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v322 = 136315906;
                  *(_QWORD *)&v322[4] = "operator[]";
                  *(_WORD *)&v322[12] = 1024;
                  *(_DWORD *)&v322[14] = 797;
                  *(_WORD *)&v322[18] = 2048;
                  *(_QWORD *)&v322[20] = v20;
                  *(_WORD *)&v322[28] = 2048;
                  *(_QWORD *)&v322[30] = v20;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
                  goto LABEL_381;
                }
                v57 = 0;
                v305 = *(_OWORD *)(*((_QWORD *)v5 + 5) + 16 * v52);
                v58 = *v55;
                if (HIDWORD(v305) == -1)
                  v59 = 3;
                else
                  v59 = 4;
                do
                {
                  v4 = (v53 + v57);
                  if (v58 <= v4)
                  {
                    *(_QWORD *)&v269 = 0;
                    v331 = 0u;
                    v332 = 0u;
                    v329 = 0u;
                    v330 = 0u;
                    v328 = 0u;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v322 = 136315906;
                    *(_QWORD *)&v322[4] = "operator[]";
                    *(_WORD *)&v322[12] = 1024;
                    *(_DWORD *)&v322[14] = 468;
                    *(_WORD *)&v322[18] = 2048;
                    *(_QWORD *)&v322[20] = v4;
                    *(_WORD *)&v322[28] = 2048;
                    *(_QWORD *)&v322[30] = v58;
                    v170 = v322;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_71:
                    v5 = 0;
                    v41 = 0;
                    goto LABEL_72;
                  }
                  v60 = *v56;
                  *(_DWORD *)(*v56 + 4 * v4) = *((_DWORD *)&v305 + v57++);
                }
                while (v59 != v57);
                ++v52;
                v53 += v57;
              }
              while (v52 != v51);
LABEL_68:
              v16 = v177;
              v61 = v174 + 16 * (_QWORD)v46;
              *(_DWORD *)v61 = *(_DWORD *)v5;
              *(_QWORD *)(v61 + 8) = v60;
              v46 = (uint64_t *)((char *)v46 + 1);
              if (v46 == (uint64_t *)v177)
              {
                LODWORD(v13) = (_DWORD)v47;
                v3 = v174;
                goto LABEL_42;
              }
            }
          }
          *(_DWORD *)(v31 + 4 * v14) = *((_DWORD *)&v305 + v30++);
        }
        while (v32 != v30);
        ++v27;
        v28 += v30;
      }
      while (v27 != v15);
LABEL_35:
      v313[1] = v297;
      *(_QWORD *)__src = v31;
      if ((_DWORD)v13)
      {
        v16 = v13;
                                                            + 32))();
        if (v33)
        {
          v35 = v33;
          v36 = v13 - 1;
          if (v13 == 1)
          {
            *(_DWORD *)v33 = 0;
            v37 = (_QWORD *)((char *)v33 + 8);
          }
          else
          {
            v37 = (_QWORD *)((char *)v33 + 8);
            do
            {
              *((_DWORD *)v37 - 2) = 0;
              *v37 = 0;
              v37 += 2;
              --v36;
            }
            while (v36);
            *((_DWORD *)v37 - 2) = 0;
          }
          *v37 = 0;
          if (v44)
          {
            v20 = v44;
            v45 = v44;
            if (v13 != 1)
            {
              bzero(v44, 24 * v13 - 24);
              v45 = &v20[3 * v13 - 3];
            }
            *v45 = 0;
            v45[1] = 0;
            v45[2] = 0;
            goto LABEL_52;
          }
LABEL_399:
          re::internal::assertLog((re::internal *)4, v43, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
          _os_crash();
          __break(1u);
        }
LABEL_398:
        re::internal::assertLog((re::internal *)4, v34, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        _os_crash();
        __break(1u);
        goto LABEL_399;
      }
      v172 = 0;
      v177 = 0;
      v3 = 0;
      v20 = 0;
LABEL_42:
      v38 = re::internal::GeomAttributeManager::attributeByName(v182, "osdEdgeCreaseIndices");
      v39 = re::internal::GeomAttributeManager::attributeByName(v182, "osdEdgeCreaseWeights");
      v305 = 0uLL;
      *(_QWORD *)&v306 = 0;
      v269 = 0uLL;
      *(_QWORD *)&v270 = 0;
      if (v39 && v38)
      {
        v4 = v39;
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
        *(_DWORD *)&__src[8] = v16;
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38))
          goto LABEL_71;
        v41 = re::internal::GeomTypedAttribute<int>::operator[](v38, 0);
        v5 = (re::internal *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
LABEL_72:
        v62 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v4 + 16))(v4);
        v175 = v3;
        v63 = (int)v13;
        if (v62)
        {
          v64 = re::internal::GeomTypedAttribute<int>::operator[](v4, 0);
          v62 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v4 + 16))(v4);
        }
        else
        {
          v64 = 0;
        }
        v65 = v270;
        if ((_DWORD)v16)
        {
          v66 = 0;
          LODWORD(v13) = 0;
          v14 = *((_QWORD *)&v269 + 1);
          v3 = v62;
          v4 = *((_QWORD *)&v305 + 1);
          v67 = v306;
          v68 = v16;
          while (v5 > v13)
          {
            v16 = v13;
            if (v14 <= v13)
              goto LABEL_389;
            *(_DWORD *)(v65 + 4 * v13) = *(_DWORD *)(v41 + 4 * v13);
            v16 = ((_DWORD)v13 + 1);
            if (v5 <= v16)
              goto LABEL_391;
            if (v14 <= v16)
              goto LABEL_392;
            *(_DWORD *)(v65 + 4 * v16) = *(_DWORD *)(v41 + 4 * v16);
            if (v62 == v66)
              goto LABEL_393;
            if (v4 == v66)
              goto LABEL_394;
            *(_DWORD *)(v67 + 4 * v66) = *(_DWORD *)(v64 + 4 * v66);
            ++v66;
            LODWORD(v13) = (_DWORD)v13 + 2;
            if (v68 == v66)
              goto LABEL_86;
          }
LABEL_387:
          *(_QWORD *)&v261 = 0;
          v331 = 0u;
          v332 = 0u;
          v329 = 0u;
          v330 = 0u;
          v328 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v322 = 136315906;
          *(_QWORD *)&v322[4] = "operator[]";
          *(_WORD *)&v322[12] = 1024;
          *(_DWORD *)&v322[14] = 601;
          *(_WORD *)&v322[18] = 2048;
          *(_QWORD *)&v322[20] = v13;
          *(_WORD *)&v322[28] = 2048;
          *(_QWORD *)&v322[30] = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_388:
          *(_QWORD *)&v246[0] = 0;
          v331 = 0u;
          v332 = 0u;
          v329 = 0u;
          v330 = 0u;
          v328 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v322 = 136315906;
          *(_QWORD *)&v322[4] = "operator[]";
          *(_WORD *)&v322[12] = 1024;
          *(_DWORD *)&v322[14] = 601;
          *(_WORD *)&v322[18] = 2048;
          *(_QWORD *)&v322[20] = v16;
          *(_WORD *)&v322[28] = 2048;
          *(_QWORD *)&v322[30] = v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_389:
          *(_QWORD *)&v261 = 0;
          v331 = 0u;
          v332 = 0u;
          v329 = 0u;
          v330 = 0u;
          v328 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v322 = 136315906;
          *(_QWORD *)&v322[4] = "operator[]";
          *(_WORD *)&v322[12] = 1024;
          *(_DWORD *)&v322[14] = 468;
          *(_WORD *)&v322[18] = 2048;
          *(_QWORD *)&v322[20] = v16;
          *(_WORD *)&v322[28] = 2048;
          *(_QWORD *)&v322[30] = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_390:
          *(_QWORD *)&v246[0] = 0;
          v331 = 0u;
          v332 = 0u;
          v329 = 0u;
          v330 = 0u;
          v328 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v322 = 136315906;
          *(_QWORD *)&v322[4] = "operator[]";
          *(_WORD *)&v322[12] = 1024;
          *(_DWORD *)&v322[14] = 468;
          *(_WORD *)&v322[18] = 2048;
          *(_QWORD *)&v322[20] = v5;
          *(_WORD *)&v322[28] = 2048;
          *(_QWORD *)&v322[30] = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_391:
          *(_QWORD *)&v261 = 0;
          v331 = 0u;
          v332 = 0u;
          v329 = 0u;
          v330 = 0u;
          v328 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v322 = 136315906;
          *(_QWORD *)&v322[4] = "operator[]";
          *(_WORD *)&v322[12] = 1024;
          *(_DWORD *)&v322[14] = 601;
          *(_WORD *)&v322[18] = 2048;
          *(_QWORD *)&v322[20] = v16;
          *(_WORD *)&v322[28] = 2048;
          *(_QWORD *)&v322[30] = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_392:
          *(_QWORD *)&v261 = 0;
          v331 = 0u;
          v332 = 0u;
          v329 = 0u;
          v330 = 0u;
          v328 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v322 = 136315906;
          *(_QWORD *)&v322[4] = "operator[]";
          *(_WORD *)&v322[12] = 1024;
          *(_DWORD *)&v322[14] = 468;
          *(_WORD *)&v322[18] = 2048;
          *(_QWORD *)&v322[20] = v16;
          *(_WORD *)&v322[28] = 2048;
          *(_QWORD *)&v322[30] = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_393:
          *(_QWORD *)&v261 = 0;
          v331 = 0u;
          v332 = 0u;
          v329 = 0u;
          v330 = 0u;
          v328 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v322 = 136315906;
          *(_QWORD *)&v322[4] = "operator[]";
          *(_WORD *)&v322[12] = 1024;
          *(_DWORD *)&v322[14] = 601;
          *(_WORD *)&v322[18] = 2048;
          *(_QWORD *)&v322[20] = v3;
          *(_WORD *)&v322[28] = 2048;
          *(_QWORD *)&v322[30] = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_394:
          *(_QWORD *)&v261 = 0;
          v331 = 0u;
          v332 = 0u;
          v329 = 0u;
          v330 = 0u;
          v328 = 0u;
          v47 = (uint64_t *)MEMORY[0x24BDACB70];
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v322 = 136315906;
          *(_QWORD *)&v322[4] = "operator[]";
          *(_WORD *)&v322[12] = 1024;
          *(_DWORD *)&v322[14] = 468;
          *(_WORD *)&v322[18] = 2048;
          *(_QWORD *)&v322[20] = v4;
          *(_WORD *)&v322[28] = 2048;
          *(_QWORD *)&v322[30] = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_395:
          re::internal::assertLog((re::internal *)6, v43, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v47, v47);
          _os_crash();
          __break(1u);
LABEL_396:
          *(_QWORD *)&v305 = 0;
          v331 = 0u;
          v332 = 0u;
          v329 = 0u;
          v330 = 0u;
          v328 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v322 = 136315906;
          *(_QWORD *)&v322[4] = "operator[]";
          *(_WORD *)&v322[12] = 1024;
          *(_DWORD *)&v322[14] = 468;
          *(_WORD *)&v322[18] = 2048;
          *(_QWORD *)&v322[20] = v16;
          *(_WORD *)&v322[28] = 2048;
          *(_QWORD *)&v322[30] = v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_397;
        }
        v67 = v306;
LABEL_86:
        *(_QWORD *)&__src[24] = v67;
        *(_QWORD *)&__src[16] = v65;
        LODWORD(v13) = v63;
        v3 = v175;
      }
      v4 = re::internal::GeomAttributeManager::attributeByName(v182, "osdVertexCreaseIndices");
      v69 = re::internal::GeomAttributeManager::attributeByName(v182, "osdVertexCreaseWeights");
      v261 = 0uLL;
      *(_QWORD *)&v262 = 0;
      v253 = 0uLL;
      *(_QWORD *)&v254 = 0;
      if (v69 && v4)
      {
        v70 = v69;
        v71 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 16))(v69);
        v72 = v71;
        *(_DWORD *)&__src[32] = (_DWORD)v71;
        v73 = (int)v71;
        if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v4 + 16))(v4))
        {
          v75 = re::internal::GeomTypedAttribute<int>::operator[](v4, 0);
          v14 = (*(unsigned int (**)(unint64_t))(*(_QWORD *)v4 + 16))(v4);
        }
        else
        {
          v14 = 0;
          v75 = 0;
        }
        v76 = v3;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v70 + 16))(v70))
        {
          v4 = re::internal::GeomTypedAttribute<int>::operator[](v70, 0);
          v16 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v70 + 16))(v70);
        }
        else
        {
          v16 = 0;
          v4 = 0;
        }
        v77 = v254;
        if (v72)
        {
          v78 = 0;
          v3 = *((_QWORD *)&v253 + 1);
          v79 = (re::internal *)v72;
          v5 = (re::internal *)*((_QWORD *)&v261 + 1);
          v80 = v262;
          while ((re::internal *)v14 != v78)
          {
            if ((re::internal *)v3 == v78)
              goto LABEL_386;
            *(_DWORD *)(v77 + 4 * (_QWORD)v78) = *(_DWORD *)(v75 + 4 * (_QWORD)v78);
            if ((re::internal *)v16 == v78)
              goto LABEL_388;
            if (v5 == v78)
              goto LABEL_390;
            *(_DWORD *)(v80 + 4 * (_QWORD)v78) = *(_DWORD *)(v4 + 4 * (_QWORD)v78);
            v78 = (re::internal *)((char *)v78 + 1);
            if (v79 == v78)
              goto LABEL_104;
          }
          goto LABEL_385;
        }
        v80 = v262;
LABEL_104:
        *(_QWORD *)&__src[48] = v80;
        *(_QWORD *)&__src[40] = v77;
        v3 = v76;
      }
      v14 = operator new();
      v81 = OpenSubdiv::v3_1_1::Far::TopologyRefiner::TopologyRefiner(v14, 1, 1);
      if (!OpenSubdiv::v3_1_1::Far::TopologyRefinerFactory<OpenSubdiv::v3_1_1::Far::TopologyDescriptor>::resizeComponentTopology(v81, (int *)v313)|| !OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase::prepareComponentTopologySizing((OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase *)v14, v82, v83, v84, v85, v86, v87, v88)|| !OpenSubdiv::v3_1_1::Far::TopologyRefinerFactory<OpenSubdiv::v3_1_1::Far::TopologyDescriptor>::assignComponentTopology(v14, (uint64_t)v313)|| !OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase::prepareComponentTopologyAssignment((OpenSubdiv::v3_1_1::Far::TopologyRefiner *)v14, 0, (void (*)(uint64_t, char *, uint64_t))OpenSubdiv::v3_1_1::Far::TopologyRefinerFactory<OpenSubdiv::v3_1_1::Far::TopologyDescriptor>::reportInvalidTopology, (uint64_t)v313,
                            v89,
                            v90,
                            v91,
                            v92)
        || !OpenSubdiv::v3_1_1::Far::TopologyRefinerFactory<OpenSubdiv::v3_1_1::Far::TopologyDescriptor>::assignComponentTags(v14, (uint64_t)v313)|| !OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase::prepareComponentTagsAndSharpness((int *)v14)|| !OpenSubdiv::v3_1_1::Far::TopologyRefinerFactory<OpenSubdiv::v3_1_1::Far::TopologyDescriptor>::assignFaceVaryingTopology(v14, (uint64_t)v313)|| (OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase::prepareFaceVaryingChannels((OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase *)v14, v93) & 1) == 0)
      {
        OpenSubdiv::v3_1_1::Far::TopologyRefiner::~TopologyRefiner((OpenSubdiv::v3_1_1::Far::TopologyRefiner *)v14);
        MEMORY[0x2276933B8](v100, 0x10A0C40D2671FEALL);
        v14 = 0;
      }
      if ((_QWORD)v253 && *((_QWORD *)&v253 + 1))
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v253 + 40))(v253, v254);
      if ((_QWORD)v261 && *((_QWORD *)&v261 + 1))
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v261 + 40))(v261, v262);
      if ((_QWORD)v269 && *((_QWORD *)&v269 + 1))
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v269 + 40))(v269, v270);
      if ((_QWORD)v305 && *((_QWORD *)&v305 + 1))
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v305 + 40))(v305, v306);
      if ((_DWORD)v13 && v177)
      {
        v101 = 0;
        do
        {
          v102 = v20[v101];
          if (v102)
          {
            if (v20[v101 + 1])
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v102 + 40))(v102, v20[v101 + 2]);
              v20[v101 + 1] = 0;
              v20[v101 + 2] = 0;
            }
            v20[v101] = 0;
          }
          v101 += 3;
        }
        while (3 * v177 != v101);
        (*(void (**)(uint64_t *, _QWORD *))(*v172 + 40))(v172, v20);
        (*(void (**)(uint64_t *, uint64_t))(*v172 + 40))(v172, v3);
      }
      if ((_QWORD)v277 && *((_QWORD *)&v277 + 1))
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v277 + 40))(v277, v278);
      if (v295 && v296)
        (*(void (**)(uint64_t *, _DWORD *))(*v295 + 40))(v295, v297);
      OpenSubdiv::v3_1_1::Far::TopologyRefiner::RefineAdaptive((int *)v14, 0x5F3uLL, v94, v95, v96, v97, v98, v99, (char)v170);
      v104 = (re::internal *)v289;
      v286 = 0;
      v285 = 0;
      v287 = 0;
      v178 = v289;
      if ((_DWORD)v289)
      {
        v16 = (uint64_t)&v328;
        v105 = (int)((uint64_t)(*(_QWORD *)(**(_QWORD **)(v14 + 40) + 464)
                             - *(_QWORD *)(**(_QWORD **)(v14 + 40) + 456)) >> 3);
        v106 = 0;
        v5 = v286;
        v107 = v287;
        do
        {
          if (v5 == v106)
            goto LABEL_383;
          *(_DWORD *)(v107 + 4 * (_QWORD)v106) = (_DWORD)v106;
          v106 = (re::internal *)((char *)v106 + 1);
        }
        while (v104 != v106);
        v108 = ((unint64_t)((*(_QWORD *)(**(_QWORD **)(v14 + 40) + 464)
                                                - *(_QWORD *)(**(_QWORD **)(v14 + 40) + 456)) >> 3) << 32) | 0x1A34;
      }
      else
      {
        v107 = 0;
        v108 = -4294956492;
      }
      v176 = v14;
      v109 = (const OpenSubdiv::v3_1_1::Far::PatchTable *)OpenSubdiv::v3_1_1::Far::PatchTableFactory::Create((int *)v14, v108, v107);
      v110 = OpenSubdiv::v3_1_1::Osd::CpuPatchTable::CpuPatchTable((OpenSubdiv::v3_1_1::Osd::CpuPatchTable *)v313, v109);
      v180 = v109;
      v111 = (*((_QWORD *)v109 + 8) - *((_QWORD *)v109 + 7)) >> 3;
      v112 = *(_QWORD *)&__src[16] - *(_QWORD *)&__src[8];
      v278 = 0u;
      v277 = 0u;
      v113 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v277, 0);
      v283 = 0;
      v281 = 0;
      v279 = 0;
      v280 = 0;
      v282 = 0;
      v284 = 256;
      v306 = 0u;
      v305 = 0u;
      v114 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v305, 0);
      v311 = 0;
      v309 = 0;
      v307 = 0;
      v308 = 0;
      v310 = 0;
      v312 = 256;
      v270 = 0u;
      v269 = 0u;
      v115 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v269, 0);
      __dst = 0;
      v273 = 0;
      v271 = 0;
      v272 = 0;
      v274 = 0;
      v276 = 256;
      v262 = 0u;
      v261 = 0u;
      v116 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v261, 0);
      v267 = 0;
      v265 = 0;
      v263 = 0;
      v264 = 0;
      v266 = 0;
      v268 = 256;
      v254 = 0u;
      v253 = 0u;
      re::DynamicString::setCapacity(&v253, 0);
      v259 = 0;
      v257 = 0;
      v255 = 0;
      v256 = 0;
      v258 = 0;
      v260 = 256;
      *(_QWORD *)&v328 = "tessellationFactors";
      *((_QWORD *)&v328 + 1) = 19;
      re::DynamicString::operator=((re::DynamicString *)&v261, (uint64_t)&v328);
      v117 = 12 * v111;
      re::DynamicArray<BOOL>::resize((uint64_t)&v263, v117);
      v268 = 53;
      if (!v265)
        re::DynamicArray<BOOL>::resize((uint64_t)&v263, 2uLL);
      *(_QWORD *)&v328 = "patchId";
      *((_QWORD *)&v328 + 1) = 7;
      re::DynamicString::operator=((re::DynamicString *)&v277, (uint64_t)&v328);
      v118 = v112 & 0x3FFFFFFFCLL;
      re::DynamicArray<BOOL>::resize((uint64_t)&v279, v112 & 0x3FFFFFFFCLL);
      v284 = 36;
      if (!v281)
        re::DynamicArray<BOOL>::resize((uint64_t)&v279, 4uLL);
      *(_QWORD *)&v328 = "controlIndexOffsets";
      *((_QWORD *)&v328 + 1) = 19;
      re::DynamicString::operator=((re::DynamicString *)&v305, (uint64_t)&v328);
      re::DynamicArray<BOOL>::resize((uint64_t)&v307, 4uLL);
      LOBYTE(v312) = 36;
      v4 = v14;
      if (!v309)
      {
LABEL_397:
        v295 = 0;
        v331 = 0u;
        v332 = 0u;
        v329 = 0u;
        v330 = 0u;
        v328 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v322 = 136315906;
        *(_QWORD *)&v322[4] = "operator[]";
        *(_WORD *)&v322[12] = 1024;
        *(_DWORD *)&v322[14] = 789;
        *(_WORD *)&v322[18] = 2048;
        *(_QWORD *)&v322[20] = 0;
        *(_WORD *)&v322[28] = 2048;
        *(_QWORD *)&v322[30] = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_398;
      }
      *v311 = 0;
      HIBYTE(v312) = 0;
      *(_QWORD *)&v328 = "controlIndices";
      *((_QWORD *)&v328 + 1) = 14;
      re::DynamicString::operator=((re::DynamicString *)&v269, (uint64_t)&v328);
      re::DynamicArray<BOOL>::resize((uint64_t)&v271, v118);
      v276 = 36;
      memcpy(__dst, *(const void **)&__src[8], v118);
      if (!v273)
        re::DynamicArray<BOOL>::resize((uint64_t)&v271, 4uLL);
      *(_QWORD *)&v328 = "patchParams";
      *((_QWORD *)&v328 + 1) = 11;
      re::DynamicString::operator=((re::DynamicString *)&v253, (uint64_t)&v328);
      re::DynamicArray<BOOL>::resize((uint64_t)&v255, v117);
      v260 = 802;
      if (!(_DWORD)v111)
        re::DynamicArray<BOOL>::resize((uint64_t)&v255, 0xCuLL);
      memcpy(v259, *(const void **)&__src[32], *(_QWORD *)&__src[40] - *(_QWORD *)&__src[32]);
      appended = (const OpenSubdiv::v3_1_1::Far::TopologyRefiner *)OpenSubdiv::v3_1_1::Far::StencilTableFactory::Create((int *)v14, ~(16 * *(_BYTE *)(v14 + 8)) & 0x10 | 0x2A4);
      v120 = appended;
      v121 = (const OpenSubdiv::v3_1_1::Far::StencilTable *)*((_QWORD *)v180 + 16);
      if (v121)
      {
        appended = (const OpenSubdiv::v3_1_1::Far::TopologyRefiner *)OpenSubdiv::v3_1_1::Far::StencilTableFactory::appendLocalPointStencilTable((OpenSubdiv::v3_1_1::Far::StencilTableFactory *)v14, appended, v121, (const OpenSubdiv::v3_1_1::Far::StencilTable *)0xFFFFFFFFLL, 1);
        if (appended)
        {
          v122 = appended;
          if (v120)
            appended = (const OpenSubdiv::v3_1_1::Far::TopologyRefiner *)(*(uint64_t (**)(const OpenSubdiv::v3_1_1::Far::TopologyRefiner *))(*(_QWORD *)v120 + 8))(v120);
          v120 = v122;
        }
      }
      memset(v246, 0, sizeof(v246));
      v123 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v246, 0);
      v251 = 0;
      v249 = 0;
      v247 = 0;
      v248 = 0;
      v250 = 0;
      v252 = 256;
      memset(v239, 0, sizeof(v239));
      v124 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v239, 0);
      v244 = 0;
      v242 = 0;
      v240 = 0;
      v241 = 0;
      v243 = 0;
      v245 = 256;
      memset(v232, 0, sizeof(v232));
      v125 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v232, 0);
      v237 = 0;
      v235 = 0;
      v233 = 0;
      v234 = 0;
      v236 = 0;
      v238 = 256;
      memset(v225, 0, sizeof(v225));
      re::DynamicString::setCapacity(v225, 0);
      v230 = 0;
      v228 = 0;
      v226 = 0;
      v227 = 0;
      v229 = 0;
      v231 = 256;
      *(_QWORD *)&v328 = "stencilWeights";
      *((_QWORD *)&v328 + 1) = 14;
      re::DynamicString::operator=((re::DynamicString *)v246, (uint64_t)&v328);
      LOBYTE(v252) = 28;
      re::DynamicArray<BOOL>::resize((uint64_t)&v247, *((_QWORD *)v120 + 12) - *((_QWORD *)v120 + 11));
      HIBYTE(v252) = 0;
      memcpy(v251, *((const void **)v120 + 11), *((_QWORD *)v120 + 12) - *((_QWORD *)v120 + 11));
      if (!v249)
        re::DynamicArray<BOOL>::resize((uint64_t)&v247, 4uLL);
      *(_QWORD *)&v328 = "stencilIndices";
      *((_QWORD *)&v328 + 1) = 14;
      re::DynamicString::operator=((re::DynamicString *)v239, (uint64_t)&v328);
      LOBYTE(v245) = 36;
      re::DynamicArray<BOOL>::resize((uint64_t)&v240, *((_QWORD *)v120 + 9) - *((_QWORD *)v120 + 8));
      HIBYTE(v245) = 0;
      memcpy(v244, *((const void **)v120 + 8), *((_QWORD *)v120 + 9) - *((_QWORD *)v120 + 8));
      if (!v242)
        re::DynamicArray<BOOL>::resize((uint64_t)&v240, 4uLL);
      *(_QWORD *)&v328 = "stencilSizes";
      *((_QWORD *)&v328 + 1) = 12;
      re::DynamicString::operator=((re::DynamicString *)v232, (uint64_t)&v328);
      LOBYTE(v238) = 36;
      re::DynamicArray<BOOL>::resize((uint64_t)&v233, *((_QWORD *)v120 + 3) - *((_QWORD *)v120 + 2));
      HIBYTE(v238) = 0;
      memcpy(v237, *((const void **)v120 + 2), *((_QWORD *)v120 + 3) - *((_QWORD *)v120 + 2));
      if (!v235)
        re::DynamicArray<BOOL>::resize((uint64_t)&v233, 4uLL);
      *(_QWORD *)&v328 = "stencilOffsets";
      *((_QWORD *)&v328 + 1) = 14;
      re::DynamicString::operator=((re::DynamicString *)v225, (uint64_t)&v328);
      LOBYTE(v231) = 36;
      re::DynamicArray<BOOL>::resize((uint64_t)&v226, *((_QWORD *)v120 + 6) - *((_QWORD *)v120 + 5));
      HIBYTE(v231) = 0;
      v171 = v120;
      v126 = (_anonymous_namespace_ *)memcpy(v230, *((const void **)v120 + 5), *((_QWORD *)v120 + 6) - *((_QWORD *)v120 + 5));
      if (!v228)
        re::DynamicArray<BOOL>::resize((uint64_t)&v226, 4uLL);
      memset(v218, 0, sizeof(v218));
      v127 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v218, 0);
      v16 = (uint64_t)&v219;
      v223 = 0;
      v221 = 0;
      v219 = 0;
      v220 = 0;
      v222 = 0;
      v224 = 256;
      memset(v211, 0, sizeof(v211));
      v128 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v211, 0);
      v216 = 0;
      v214 = 0;
      v212 = 0;
      v213 = 0;
      v215 = 0;
      v217 = 256;
      memset(v204, 0, sizeof(v204));
      v129 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v204, 0);
      v209 = 0;
      v207 = 0;
      v205 = 0;
      v206 = 0;
      v208 = 0;
      v210 = 256;
      memset(v197, 0, sizeof(v197));
      v130 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v197, 0);
      v202 = 0;
      v199 = 0;
      v200 = 0;
      v198 = 0;
      v201 = 0;
      v203 = 256;
      memset(v190, 0, sizeof(v190));
      v131 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v190, 0);
      v195 = 0;
      v192 = 0;
      v193 = 0;
      v191 = 0;
      v194 = 0;
      v196 = 256;
      memset(v183, 0, sizeof(v183));
      re::DynamicString::setCapacity(v183, 0);
      v188 = 0;
      v185 = 0;
      v186 = 0;
      v184 = 0;
      v187 = 0;
      v189 = 256;
      *(_QWORD *)&v328 = "P";
      *((_QWORD *)&v328 + 1) = 1;
      re::DynamicString::operator=((re::DynamicString *)v218, (uint64_t)&v328);
      LOBYTE(v224) = 30;
      re::DynamicArray<BOOL>::resize((uint64_t)&v219, 0xCuLL);
      HIBYTE(v224) = 0;
      *(_QWORD *)&v328 = "P1";
      *((_QWORD *)&v328 + 1) = 2;
      re::DynamicString::operator=((re::DynamicString *)v211, (uint64_t)&v328);
      LOBYTE(v217) = 30;
      re::DynamicArray<BOOL>::resize((uint64_t)&v212, 0xCuLL);
      HIBYTE(v217) = 0;
      *(_QWORD *)&v328 = "P2";
      *((_QWORD *)&v328 + 1) = 2;
      re::DynamicString::operator=((re::DynamicString *)v204, (uint64_t)&v328);
      LOBYTE(v210) = 30;
      re::DynamicArray<BOOL>::resize((uint64_t)&v205, 0xCuLL);
      HIBYTE(v210) = 0;
      *(_QWORD *)&v328 = "bspline_and_patch_points";
      *((_QWORD *)&v328 + 1) = 24;
      re::DynamicString::operator=((re::DynamicString *)v197, (uint64_t)&v328);
      LOBYTE(v203) = 30;
      re::DynamicArray<BOOL>::resize((uint64_t)&v198, 0xCuLL);
      HIBYTE(v203) = 0;
      *(_QWORD *)&v328 = "tessellationHi";
      *((_QWORD *)&v328 + 1) = 14;
      re::DynamicString::operator=((re::DynamicString *)v190, (uint64_t)&v328);
      LOBYTE(v196) = 31;
      re::DynamicArray<BOOL>::resize((uint64_t)&v191, 0x10uLL);
      HIBYTE(v196) = 0;
      *(_QWORD *)&v328 = "tessellationLo";
      *((_QWORD *)&v328 + 1) = 14;
      re::DynamicString::operator=((re::DynamicString *)v183, (uint64_t)&v328);
      LOBYTE(v189) = 31;
      re::DynamicArray<BOOL>::resize((uint64_t)&v184, 0x10uLL);
      HIBYTE(v189) = 0;
      *((_DWORD *)a2 + 16) = v111;
      *((_DWORD *)a2 + 15) = *(_DWORD *)v173;
      re::DynamicArray<re::MeshAssetBuffer>::add(a2, (re::DynamicString *)&v253);
      re::DynamicArray<re::MeshAssetBuffer>::add(a2, (re::DynamicString *)&v269);
      re::DynamicArray<re::MeshAssetBuffer>::add(a2, (re::DynamicString *)&v261);
      re::DynamicArray<re::MeshAssetBuffer>::add(a2, (re::DynamicString *)v232);
      re::DynamicArray<re::MeshAssetBuffer>::add(a2, (re::DynamicString *)v246);
      re::DynamicArray<re::MeshAssetBuffer>::add(a2, (re::DynamicString *)v239);
      re::DynamicArray<re::MeshAssetBuffer>::add(a2, (re::DynamicString *)v225);
      re::DynamicArray<re::MeshAssetBuffer>::add(a2, (re::DynamicString *)v218);
      re::DynamicArray<re::MeshAssetBuffer>::add(a2, (re::DynamicString *)v211);
      re::DynamicArray<re::MeshAssetBuffer>::add(a2, (re::DynamicString *)v204);
      re::DynamicArray<re::MeshAssetBuffer>::add(a2, (re::DynamicString *)v197);
      re::DynamicArray<re::MeshAssetBuffer>::add(a2, (re::DynamicString *)v190);
      re::DynamicArray<re::MeshAssetBuffer>::add(a2, (re::DynamicString *)v183);
      if (v178)
      {
        v14 = 0;
        v3 = (uint64_t)&v330;
        v13 = &v299;
        while (1)
        {
          v5 = (re::internal *)v289;
          if ((unint64_t)v289 <= v14)
            break;
          v132 = (_QWORD *)re::internal::GeomAttributeManager::attributeByName(v182, *((const char **)v291 + v14));
          v133 = (const char *)v132[1];
          if (!strcmp(v133, "vertexUV"))
            v134 = "vertexUV";
          else
            v134 = v133;
          v135 = (const OpenSubdiv::v3_1_1::Far::TopologyRefiner *)OpenSubdiv::v3_1_1::Far::StencilTableFactory::Create((int *)v4, ((16 * (*(_BYTE *)(v4 + 8) & 1)) ^ 0x36) & 0xFFFFFFFFFFFFFC3FLL | ((((unint64_t)*(unsigned __int8 *)(v4 + 8) >> 2) & 0xF) << 6));
          v136 = (const OpenSubdiv::v3_1_1::Far::StencilTable **)*((_QWORD *)v180 + 25);
          if ((int)((*((_QWORD *)v180 + 26) - (_QWORD)v136) >> 3) < 1)
            v137 = 0;
          else
            v137 = *v136;
          v138 = (_anonymous_namespace_ *)OpenSubdiv::v3_1_1::Far::StencilTableFactory::appendLocalPointStencilTable((OpenSubdiv::v3_1_1::Far::StencilTableFactory *)v4, v135, v137, 0, 1);
          if (v138)
          {
            v139 = v138;
            if (v135)
              v138 = (_anonymous_namespace_ *)(*(uint64_t (**)(const OpenSubdiv::v3_1_1::Far::TopologyRefiner *))(*(_QWORD *)v135 + 8))(v135);
          }
          else
          {
            v139 = v135;
          }
          *((_QWORD *)&v328 + 1) = 0;
          v329 = 0uLL;
          v140 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v328, 0);
          *(_QWORD *)&v332 = 0;
          *(_QWORD *)&v331 = 0;
          v330 = 0uLL;
          DWORD2(v331) = 0;
          WORD4(v332) = 256;
          memset(&v322[8], 0, 24);
          v141 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v322, 0);
          v326 = 0;
          v323 = 0;
          v324 = 0;
          *(_QWORD *)&v322[32] = 0;
          v325 = 0;
          v327 = 256;
          v296 = 0;
          v297 = 0;
          v298 = 0;
          v142 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v295, 0);
          v303 = 0;
          v300 = 0;
          v301 = 0;
          v299 = 0;
          v302 = 0;
          v304 = 256;
          v143 = *(_BYTE **)v319;
          v144 = *(_BYTE **)(v319 + 8);
          re::DynamicString::operator+((re::DynamicString *)v292, "|indices", (re::DynamicString *)&v293);
          re::DynamicString::operator=((re::DynamicString *)&v328, (re::DynamicString *)&v293);
          if ((_QWORD)v293)
          {
            if ((BYTE8(v293) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v293 + 40))();
            v294 = 0u;
            v293 = 0u;
          }
          if (*(_QWORD *)v292 && (v292[8] & 1) != 0)
            (*(void (**)(void))(**(_QWORD **)v292 + 40))();
          BYTE8(v332) = 36;
          re::DynamicArray<BOOL>::resize((uint64_t)&v330, v144 - v143);
          BYTE9(v332) = 0;
          v145 = (_anonymous_namespace_ *)memcpy((void *)v332, *(const void **)v319, v144 - v143);
          if (v144 == v143)
            re::DynamicArray<BOOL>::resize((uint64_t)&v330, 4uLL);
          v146 = *(_BYTE **)__p;
          v147 = (_BYTE *)*((_QWORD *)__p + 1);
          re::DynamicString::operator+((re::DynamicString *)v292, "|patchParams", (re::DynamicString *)&v293);
          re::DynamicString::operator=((re::DynamicString *)v322, (re::DynamicString *)&v293);
          if ((_QWORD)v293)
          {
            if ((BYTE8(v293) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v293 + 40))();
            v294 = 0u;
            v293 = 0u;
          }
          if (*(_QWORD *)v292 && (v292[8] & 1) != 0)
            (*(void (**)(void))(**(_QWORD **)v292 + 40))();
          LOBYTE(v327) = 34;
          re::DynamicArray<BOOL>::resize((uint64_t)&v322[32], v147 - v146);
          HIBYTE(v327) = 0;
          memcpy(v326, *(const void **)__p, v147 - v146);
          if (v147 == v146)
            re::DynamicArray<BOOL>::resize((uint64_t)&v322[32], 0xCuLL);
          v148 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD *))(*v132 + 16))(v132);
          if ((_DWORD)v148)
          {
            v16 = re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)v132, 0);
            v148 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD *))(*v132 + 16))(v132);
            v149 = v148;
          }
          else
          {
            v149 = 0;
            v16 = 0;
          }
          v151 = *((_QWORD *)v139 + 2);
          v150 = *((_QWORD *)v139 + 3);
          re::DynamicString::operator+((re::DynamicString *)v292, "|values", (re::DynamicString *)&v293);
          re::DynamicString::operator=((re::DynamicString *)&v295, (re::DynamicString *)&v293);
          if ((_QWORD)v293)
          {
            if ((BYTE8(v293) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v293 + 40))();
            v294 = 0u;
            v293 = 0u;
          }
          if (*(_QWORD *)v292 && (v292[8] & 1) != 0)
            (*(void (**)(void))(**(_QWORD **)v292 + 40))();
          v152 = v149 + ((unint64_t)(v150 - v151) >> 2);
          LOBYTE(v304) = 29;
          re::DynamicArray<BOOL>::resize((uint64_t)&v299, 8 * v152);
          HIBYTE(v304) = 0;
          v153 = v303;
          if (v149)
          {
            v154 = 0;
            do
            {
              v155 = (_DWORD *)(v16 + 4 * v154);
              *(_DWORD *)(v153 + 4 * v154) = *v155;
              *(_DWORD *)(v153 + 4 * (v154 + 1)) = v155[1];
              v154 += 2;
            }
            while (2 * v149 != v154);
          }
          v4 = v176;
          if (!v152)
            re::DynamicArray<BOOL>::resize((uint64_t)&v299, 8uLL);
          *(_QWORD *)&v293 = 0x200000000;
          DWORD2(v293) = 2;
          *(_DWORD *)v292 = 2 * v149;
          *(_QWORD *)&v292[4] = 0x200000002;
          v156 = (int *)*((_QWORD *)v139 + 2);
          v157 = (*((_QWORD *)v139 + 3) - (_QWORD)v156) >> 2;
          if ((int)v157 >= 1)
            OpenSubdiv::v3_1_1::Osd::CpuEvalStencils(v153, (int *)&v293, v153, (int *)v292, v156, *((_QWORD *)v139 + 5), *((int **)v139 + 8), *((const float **)v139 + 11), 0, v157);
          re::DynamicArray<re::MeshAssetBuffer>::add(a2, (re::DynamicString *)&v328);
          re::DynamicArray<re::MeshAssetBuffer>::add(a2, (re::DynamicString *)v322);
          re::DynamicArray<re::MeshAssetBuffer>::add(a2, (re::DynamicString *)&v295);
          (*(void (**)(_anonymous_namespace_ *))(*(_QWORD *)v139 + 8))(v139);
          if (v299)
          {
            if (v303)
              (*(void (**)(void))(*(_QWORD *)v299 + 40))();
            v303 = 0;
            v300 = 0;
            v301 = 0;
            v299 = 0;
            ++v302;
          }
          if (v295 && (v296 & 1) != 0)
            (*(void (**)(void))(*v295 + 40))();
          if (*(_QWORD *)&v322[32])
          {
            if (v326)
              (*(void (**)(void))(**(_QWORD **)&v322[32] + 40))();
            v326 = 0;
            v323 = 0;
            v324 = 0;
            *(_QWORD *)&v322[32] = 0;
            ++v325;
          }
          if (*(_QWORD *)v322 && (v322[8] & 1) != 0)
            (*(void (**)(void))(**(_QWORD **)v322 + 40))();
          if ((_QWORD)v330)
          {
            if ((_QWORD)v332)
              (*(void (**)(void))(*(_QWORD *)v330 + 40))();
            *(_QWORD *)&v332 = 0;
            *(_QWORD *)&v331 = 0;
            v330 = 0uLL;
            ++DWORD2(v331);
          }
          if ((_QWORD)v328 && (BYTE8(v328) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v328 + 40))();
          if (++v14 == v178)
            goto LABEL_239;
        }
LABEL_384:
        v295 = 0;
        v331 = 0u;
        v332 = 0u;
        v329 = 0u;
        v330 = 0u;
        v328 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v322 = 136315906;
        *(_QWORD *)&v322[4] = "operator[]";
        *(_WORD *)&v322[12] = 1024;
        *(_DWORD *)&v322[14] = 789;
        *(_WORD *)&v322[18] = 2048;
        *(_QWORD *)&v322[20] = v14;
        *(_WORD *)&v322[28] = 2048;
        *(_QWORD *)&v322[30] = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_385:
        *(_QWORD *)&v246[0] = 0;
        v331 = 0u;
        v332 = 0u;
        v329 = 0u;
        v330 = 0u;
        v328 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v322 = 136315906;
        *(_QWORD *)&v322[4] = "operator[]";
        *(_WORD *)&v322[12] = 1024;
        *(_DWORD *)&v322[14] = 601;
        *(_WORD *)&v322[18] = 2048;
        *(_QWORD *)&v322[20] = v14;
        *(_WORD *)&v322[28] = 2048;
        *(_QWORD *)&v322[30] = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_386:
        *(_QWORD *)&v246[0] = 0;
        v331 = 0u;
        v332 = 0u;
        v329 = 0u;
        v330 = 0u;
        v328 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v322 = 136315906;
        *(_QWORD *)&v322[4] = "operator[]";
        *(_WORD *)&v322[12] = 1024;
        *(_DWORD *)&v322[14] = 468;
        *(_WORD *)&v322[18] = 2048;
        *(_QWORD *)&v322[20] = v3;
        *(_WORD *)&v322[28] = 2048;
        *(_QWORD *)&v322[30] = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_387;
      }
LABEL_239:
      OpenSubdiv::v3_1_1::Far::PatchTable::~PatchTable(v180);
      MEMORY[0x2276933B8]();
      if (v171)
        (*(void (**)(const OpenSubdiv::v3_1_1::Far::TopologyRefiner *))(*(_QWORD *)v171 + 8))(v171);
      OpenSubdiv::v3_1_1::Far::TopologyRefiner::~TopologyRefiner((OpenSubdiv::v3_1_1::Far::TopologyRefiner *)v4);
      MEMORY[0x2276933B8]();
      if (v184)
      {
        if (v188)
          (*(void (**)(void))(*(_QWORD *)v184 + 40))();
        v188 = 0;
        v185 = 0;
        v186 = 0;
        v184 = 0;
        ++v187;
      }
      if (*(_QWORD *)&v183[0] && (BYTE8(v183[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v183[0] + 40))();
      if (v191)
      {
        if (v195)
          (*(void (**)(void))(*(_QWORD *)v191 + 40))();
        v195 = 0;
        v192 = 0;
        v193 = 0;
        v191 = 0;
        ++v194;
      }
      if (*(_QWORD *)&v190[0] && (BYTE8(v190[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v190[0] + 40))();
      if (v198)
      {
        if (v202)
          (*(void (**)(void))(*(_QWORD *)v198 + 40))();
        v202 = 0;
        v199 = 0;
        v200 = 0;
        v198 = 0;
        ++v201;
      }
      if (*(_QWORD *)&v197[0] && (BYTE8(v197[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v197[0] + 40))();
      if (v205)
      {
        if (v209)
          (*(void (**)(void))(*(_QWORD *)v205 + 40))();
        v209 = 0;
        v206 = 0;
        v207 = 0;
        v205 = 0;
        ++v208;
      }
      if (*(_QWORD *)&v204[0] && (BYTE8(v204[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v204[0] + 40))();
      if (v212)
      {
        if (v216)
          (*(void (**)(void))(*(_QWORD *)v212 + 40))();
        v216 = 0;
        v213 = 0;
        v214 = 0;
        v212 = 0;
        ++v215;
      }
      if (*(_QWORD *)&v211[0] && (BYTE8(v211[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v211[0] + 40))();
      if (v219)
      {
        if (v223)
          (*(void (**)(void))(*(_QWORD *)v219 + 40))();
        v223 = 0;
        v220 = 0;
        v221 = 0;
        v219 = 0;
        ++v222;
      }
      if (*(_QWORD *)&v218[0] && (BYTE8(v218[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v218[0] + 40))();
      if (v226)
      {
        if (v230)
          (*(void (**)(void))(*(_QWORD *)v226 + 40))();
        v230 = 0;
        v227 = 0;
        v228 = 0;
        v226 = 0;
        ++v229;
      }
      if (*(_QWORD *)&v225[0] && (BYTE8(v225[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v225[0] + 40))();
      if (v233)
      {
        if (v237)
          (*(void (**)(void))(*(_QWORD *)v233 + 40))();
        v237 = 0;
        v234 = 0;
        v235 = 0;
        v233 = 0;
        ++v236;
      }
      if (*(_QWORD *)&v232[0] && (BYTE8(v232[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v232[0] + 40))();
      if (v240)
      {
        if (v244)
          (*(void (**)(void))(*(_QWORD *)v240 + 40))();
        v244 = 0;
        v241 = 0;
        v242 = 0;
        v240 = 0;
        ++v243;
      }
      if (*(_QWORD *)&v239[0] && (BYTE8(v239[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v239[0] + 40))();
      if (v247)
      {
        if (v251)
          (*(void (**)(void))(*(_QWORD *)v247 + 40))();
        v251 = 0;
        v248 = 0;
        v249 = 0;
        v247 = 0;
        ++v250;
      }
      if (*(_QWORD *)&v246[0] && (BYTE8(v246[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v246[0] + 40))();
      if (v255)
      {
        if (v259)
          (*(void (**)(void))(*(_QWORD *)v255 + 40))();
        v259 = 0;
        v256 = 0;
        v257 = 0;
        v255 = 0;
        ++v258;
      }
      if ((_QWORD)v253 && (BYTE8(v253) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v253 + 40))();
      if (v263)
      {
        if (v267)
          (*(void (**)(void))(*(_QWORD *)v263 + 40))();
        v267 = 0;
        v264 = 0;
        v265 = 0;
        v263 = 0;
        ++v266;
      }
      if ((_QWORD)v261 && (BYTE8(v261) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v261 + 40))();
      if (v271)
      {
        if (__dst)
          (*(void (**)(void))(*(_QWORD *)v271 + 40))();
        __dst = 0;
        v272 = 0;
        v273 = 0;
        v271 = 0;
        ++v274;
      }
      if ((_QWORD)v269 && (BYTE8(v269) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v269 + 40))();
      if (v307)
      {
        if (v311)
          (*(void (**)(void))(*(_QWORD *)v307 + 40))();
        v311 = 0;
        v308 = 0;
        v309 = 0;
        v307 = 0;
        ++v310;
      }
      if ((_QWORD)v305 && (BYTE8(v305) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v305 + 40))();
      if (v279)
      {
        if (v283)
          (*(void (**)(void))(*(_QWORD *)v279 + 40))();
        v283 = 0;
        v280 = 0;
        v281 = 0;
        v279 = 0;
        ++v282;
      }
      if ((_QWORD)v277 && (BYTE8(v277) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v277 + 40))();
      v158 = (char *)__p;
      if (__p)
      {
        v159 = v321;
        v160 = __p;
        if (v321 != __p)
        {
          v161 = v321;
          do
          {
            v163 = (void *)*((_QWORD *)v161 - 3);
            v161 -= 24;
            v162 = v163;
            if (v163)
            {
              *((_QWORD *)v159 - 2) = v162;
              operator delete(v162);
            }
            v159 = v161;
          }
          while (v161 != v158);
          v160 = __p;
        }
        v321 = v158;
        operator delete(v160);
      }
      *(_QWORD *)&v328 = &v319;
      std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v328);
      v164 = (char *)v317;
      if (v317)
      {
        v165 = v318;
        v166 = v317;
        if (v318 != v317)
        {
          v167 = v318;
          do
          {
            v169 = (void *)*((_QWORD *)v167 - 3);
            v167 -= 24;
            v168 = v169;
            if (v169)
            {
              *((_QWORD *)v165 - 2) = v168;
              operator delete(v168);
            }
            v165 = v167;
          }
          while (v167 != v164);
          v166 = v317;
        }
        v318 = v164;
        operator delete(v166);
      }
      if (*((_QWORD *)&v315 + 1))
      {
        v316 = *((_QWORD *)&v315 + 1);
        operator delete(*((void **)&v315 + 1));
      }
      if (*(_QWORD *)&__src[56])
      {
        *(_QWORD *)&__src[64] = *(_QWORD *)&__src[56];
        operator delete(*(void **)&__src[56]);
      }
      if (*(_QWORD *)&__src[32])
      {
        *(_QWORD *)&__src[40] = *(_QWORD *)&__src[32];
        operator delete(*(void **)&__src[32]);
      }
      if (*(_QWORD *)&__src[8])
      {
        *(_QWORD *)&__src[16] = *(_QWORD *)&__src[8];
        operator delete(*(void **)&__src[8]);
      }
      if (v313[0])
      {
        v313[1] = v313[0];
        operator delete(v313[0]);
      }
      if (v285 && v286)
        (*(void (**)(void))(*(_QWORD *)v285 + 40))();
      result = v288[0];
      if (v288[0])
      {
        if (v291)
          return (*(uint64_t (**)(void))(*(_QWORD *)v288[0] + 40))();
      }
    }
  }
  return result;
}

void re::internal::makeOpenSubdivAssetBuffersAndAppendToAssetPart(re::internal *this, const re::GeomMesh *a2, MeshAssetPart *a3)
{
  MeshAssetPart *v5;
  re::GeomMesh *v6;
  re::GeomAttribute *v7;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  MeshAssetPart *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  re::GeomAttribute *v17;
  uint64_t v18;
  int v19;
  _QWORD v20[90];
  uint64_t v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (re::internal::GeomAttributeManager::attributeByName((re::internal *)((char *)this + 64), "vertexUV"))
  {
    re::internal::makeOpenSubdivAssetBuffersAndAppendToAssetPartInternal(this, a2, v5);
  }
  else
  {
    v18 = 0;
    v19 = 0;
    bzero(v20, 0x2C8uLL);
    re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)v20);
    v20[89] = 0;
    re::GeomMesh::copy(this, (re::GeomMesh *)&v18);
    v7 = re::addVertexUVs((re *)&v18, v6);
    v8 = (uint64_t *)re::GeomMesh::accessVertexPositions(this);
    v10 = v9;
    if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v7 + 16))(v7))
    {
      v12 = re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)v7, 0);
      v13 = (*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v7 + 16))(v7);
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
    v14 = *((unsigned int *)this + 4);
    if ((_DWORD)v14)
    {
      for (i = 0; i != v14; ++i)
      {
        if (v10 == i)
        {
          v21 = 0;
          v33 = 0u;
          v34 = 0u;
          v31 = 0u;
          v32 = 0u;
          v30 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v22 = 136315906;
          v23 = "operator[]";
          v24 = 1024;
          v25 = 601;
          v26 = 2048;
          v27 = v10;
          v28 = 2048;
          v29 = v10;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_13:
          v21 = 0;
          v33 = 0u;
          v34 = 0u;
          v31 = 0u;
          v32 = 0u;
          v30 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v22 = 136315906;
          v23 = "operator[]";
          v24 = 1024;
          v25 = 609;
          v26 = 2048;
          v27 = v13;
          v28 = 2048;
          v29 = v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        if (v13 == i)
          goto LABEL_13;
        v16 = *v8;
        v8 += 2;
        *(_QWORD *)(v12 + 8 * i) = v16;
      }
    }
    re::internal::makeOpenSubdivAssetBuffersAndAppendToAssetPartInternal((re::internal *)&v18, a2, v11);
    re::GeomMesh::~GeomMesh((re::GeomMesh *)&v18, v17);
  }
}

BOOL re::meshHasSubdivCreases(re *this, const re::GeomMesh *a2)
{
  re::internal::GeomAttributeManager *v2;

  v2 = (re *)((char *)this + 64);
  return re::internal::GeomAttributeManager::attributeByName((re *)((char *)this + 64), "osdEdgeCreaseIndices")
      || re::internal::GeomAttributeManager::attributeByName(v2, "osdVertexCreaseIndices") != 0;
}

uint64_t re::ASTCCompressor::initializeContext@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t *v9;
  const char *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  char v15;
  int v16;
  int v17;
  int v18;
  int v19;
  float v20;
  int v21;
  char *error_string;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v7 = result;
  v9 = (uint64_t *)(result + 32);
  if (!*(_QWORD *)(result + 32))
  {
    if (!a3)
    {
      v10 = "Invalid input ASTC pixel format";
      goto LABEL_9;
    }
    if (!*(_DWORD *)(a2 + 4))
    {
      v10 = "Invalid ASTC mode";
      goto LABEL_9;
    }
    if (!*(_DWORD *)a2)
    {
      v10 = "Invalid ASTC block size";
      goto LABEL_9;
    }
    *(_DWORD *)result = a3;
    *(_DWORD *)(result + 4) = a4;
    *(_OWORD *)(result + 16) = *(_OWORD *)a2;
    v14 = *(_DWORD *)(a2 + 4);
    if (v14 != 1)
    {
      if (v14 == 3)
      {
        v14 = 2;
        switch(a3)
        {
          case 6u:
          case 7u:
          case 8u:
          case 9u:
          case 0xAu:
LABEL_24:
            v15 = 1;
            break;
          default:
            v14 = 3;
            goto LABEL_19;
        }
LABEL_25:
        if ((v15 & (*(_BYTE *)(a2 + 8) == 0)) != 0)
          v16 = 4;
        else
          v16 = 0;
        if ((a4 - 3) >= 2)
          v17 = v16;
        else
          v17 = v16 | 8;
        v33 = 0;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v26 = 0u;
        LODWORD(result) = astcenc_config_init(v14, v18, v19, 1u, v17, (uint64_t)&v26, *(float *)(a2 + 12));
        v20 = 0.0;
        v21 = 0;
        if (a3 <= 0xA)
          v21 = dword_226191350[a3];
        DWORD1(v27) = 1065353216;
        DWORD2(v27) = v21;
        HIDWORD(v27) = v21;
        if (a3 - 6 < 5)
          v20 = 1.0;
        *(float *)&v28 = v20;
        if (!(_DWORD)result)
        {
          result = astcenc_context_alloc((uint64_t)&v26, *(_DWORD *)(v7 + 8), v9);
          if (!(_DWORD)result)
          {
LABEL_39:
            *(_BYTE *)a5 = 1;
            return result;
          }
          *v9 = 0;
        }
        error_string = astcenc_get_error_string(result);
        v11 = v23;
        v12 = v24;
        v13 = v25;
        goto LABEL_10;
      }
      if (v14 != 2)
      {
        re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "initializeContext", 232);
        _os_crash();
        __break(1u);
        JUMPOUT(0x225B220BCLL);
      }
      v14 = 0;
    }
LABEL_19:
    switch(a3)
    {
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
        goto LABEL_24;
      default:
        v15 = 0;
        break;
    }
    goto LABEL_25;
  }
  if (*(_DWORD *)a2 == *(_DWORD *)(result + 16)
    && *(_DWORD *)(a2 + 4) == *(_DWORD *)(result + 20)
    && *(unsigned __int8 *)(a2 + 8) == *(unsigned __int8 *)(result + 24)
    && *(float *)(a2 + 12) == *(float *)(result + 28)
    && *(_DWORD *)result == a3
    && *(_DWORD *)(result + 4) == a4)
  {
    goto LABEL_39;
  }
  v10 = "ASTCCompressor::initializeContext cannot be called with different options";
LABEL_9:
  v11 = v26;
  v13 = *((_QWORD *)&v27 + 1);
  v12 = v27;
LABEL_10:
  *(_BYTE *)a5 = 0;
  *(_OWORD *)(a5 + 8) = v11;
  *(_QWORD *)(a5 + 24) = v12;
  *(_QWORD *)(a5 + 32) = v13;
  return result;
}

uint64_t re::`anonymous namespace'::blockToSize(unsigned int a1)
{
  if (a1 > 0xE)
    return 4;
  else
    return qword_226191380[a1];
}

uint64_t re::ASTCCompressor::compress@<X0>(re::ASTCCompressor *this@<X0>, const vImage_Buffer *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  int v17;
  vImagePixelCount width;
  uint64_t v19;
  size_t v20;
  vImagePixelCount height;
  char *data;
  char *v23;
  vImagePixelCount v24;
  unint64_t v25;
  unint64_t v26;
  void (**v27)(void *, _QWORD);
  size_t v28;
  unsigned int v30;
  char *error_string;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  int v37;
  int v38;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD aBlock[6];
  int v44;
  int v45;
  int v46;
  int v47;
  void **v48;
  unsigned __int8 *v49;
  unint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  _QWORD v55[4];
  unsigned int v56;
  void *v57;
  _QWORD v58[3];
  int v59;
  char *v60;

  v7 = *(_DWORD *)this;
  v8 = *(int *)this;
  if (*(_DWORD *)this > 0xAu)
    goto LABEL_7;
  v9 = 1;
  if (((1 << v7) & 0x1D9) == 0)
  {
    if (((1 << v7) & 0x620) != 0)
    {
      v10 = 2;
      v37 = 1;
      goto LABEL_9;
    }
    if (v7 == 2)
    {
LABEL_8:
      v10 = 0;
      v37 = v9;
      v9 = 0;
      goto LABEL_9;
    }
LABEL_7:
    v9 = 0;
    goto LABEL_8;
  }
  v37 = 0;
  v10 = 2;
LABEL_9:
  if (v8 > 0xA)
    goto LABEL_13;
  v11 = 3;
  if (((1 << v8) & 0x6C0) != 0)
  {
LABEL_11:
    v12 = v10;
    v10 = 0;
    goto LABEL_15;
  }
  if ((_DWORD)v8 != 8)
  {
LABEL_13:
    v11 = 5;
    if ((((_DWORD)v8 - 4) & 0xFFFFFFFB) != 0)
      goto LABEL_11;
  }
  v12 = 0;
LABEL_15:
  v13 = (_DWORD)v8 == 10 || (_DWORD)v8 == 7;
  if (v13)
    v14 = v10;
  else
    v14 = v11;
  v38 = v14;
  if (v13)
    v15 = v11;
  else
    v15 = v12;
  if (v13)
    v16 = v12;
  else
    v16 = v9;
  if (v13)
    v17 = v9;
  else
    v17 = v10;
  width = a2->width;
  if (v8 > 0xA)
    v19 = 1;
  else
    v19 = qword_226191470[v8];
  v20 = v19 * width;
  v60 = 0;
  v59 = 0;
  data = (char *)a2->data;
  height = a2->height;
  v57 = a2->data;
  memset(v58, 0, sizeof(v58));
  if (a2->rowBytes != v19 * width)
  {
    re::DynamicArray<BOOL>::resize((uint64_t)v58, height * v20);
    v23 = v60;
    if (a2->height)
    {
      v36 = a4;
      v24 = 0;
      do
      {
        memcpy(v23, data, v20);
        v23 += v20;
        data += a2->rowBytes;
        ++v24;
        height = a2->height;
      }
      while (v24 < height);
      v23 = v60;
      a4 = v36;
    }
    else
    {
      height = 0;
    }
    v57 = v23;
    width = a2->width;
  }
  v56 = 0;
  v55[2] = 0x2020000000;
  v55[3] = &v56;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[2] = ___ZN2re14ASTCCompressor8compressERK13vImage_BufferPh_block_invoke;
  aBlock[3] = &unk_24ED7D200;
  v55[0] = 0;
  v55[1] = v55;
  aBlock[1] = 3221225472;
  v44 = width;
  v45 = height;
  v46 = 1;
  v47 = v37;
  v51 = v17;
  v52 = v16;
  v53 = v15;
  v54 = v38;
  v48 = &v57;
  v49 = a3;
  v50 = 16 * (width + v25 - 1) / v25 * ((height + v26 - 1) / v26);
  aBlock[4] = v55;
  aBlock[5] = this;
  v27 = (void (**)(void *, _QWORD))_Block_copy(aBlock);
  v28 = *((_QWORD *)this + 1);
  if (v28 < 2)
    v27[2](v27, 0);
  else
    dispatch_apply(v28, *((dispatch_queue_t *)this + 5), v27);
  astcenc_compress_reset(*((astcenc_context **)this + 4));
  if (atomic_load(&v56))
  {
    v30 = atomic_load(&v56);
    error_string = astcenc_get_error_string(v30);
    v32 = v40;
    v33 = v41;
    v34 = v42;
    *(_BYTE *)a4 = 0;
    *(_OWORD *)(a4 + 8) = v32;
    *(_QWORD *)(a4 + 24) = v33;
    *(_QWORD *)(a4 + 32) = v34;
  }
  else
  {
    *(_BYTE *)a4 = 1;
  }

  _Block_object_dispose(v55, 8);
  result = v58[0];
  if (v58[0])
  {
    if (v60)
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v58[0] + 40))(v58[0]);
  }
  return result;
}

uint64_t ___ZN2re14ASTCCompressor8compressERK13vImage_BufferPh_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = astcenc_compress_image(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32));
  if ((_DWORD)result)
    atomic_store(result, *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  return result;
}

uint64_t re::getASTCBlockSize(int a1)
{
  if ((a1 - 186) > 0x32)
    return 0;
  else
    return dword_2261914C8[a1 - 186];
}

uint64_t re::getASTCDefaultMode(int a1)
{
  if ((re::isHDR(a1) & 1) != 0)
    return 3;
  MTLPixelFormatGetInfoForDevice();
  return 1;
}

uint64_t re::getMTLPixelFormat(unsigned int a1, int a2)
{
  unsigned int *v2;

  if (a2 == 3)
  {
    if (a1 <= 0xE)
    {
      v2 = (unsigned int *)&unk_22619160C;
      return v2[a1];
    }
  }
  else if (a2 == 2)
  {
    if (a1 < 0xF)
    {
      v2 = (unsigned int *)&unk_2261915D0;
      return v2[a1];
    }
  }
  else if (a2 == 1 && a1 < 0xF)
  {
    v2 = (unsigned int *)&unk_226191594;
    return v2[a1];
  }
  return 0;
}

uint64_t re::MTLToASTCPixelFormat(int a1)
{
  if (a1 > 69)
  {
    if ((a1 - 70) < 2)
      return 6;
    if (a1 == 115)
      return 9;
  }
  else
  {
    if ((a1 - 10) < 2)
      return 1;
    if (a1 == 25)
      return 2;
  }
  return 0;
}

void re::internalLogTextureCompressionInfo(re *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int *a9)
{
  int v15;
  NSObject *v16;
  char *v17;
  int v18;
  uint64_t v19;
  const char *v20;
  int v21;
  re *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  const char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (a7 != 7)
    a5 = a4;
  if (a7 == 5)
    v15 = 6;
  else
    v15 = a5;
  v16 = *re::pipelineLogObjects(a1);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    v17 = off_24ED7D220[re::MTLToASTCPixelFormat(a8)];
    v18 = *((unsigned __int8 *)a9 + 8);
    v19 = *a9;
    if (v19 > 0xE)
      v20 = "4x4";
    else
      v20 = off_24ED7D270[v19];
    v21 = 136316930;
    v22 = a1;
    v23 = 1024;
    v24 = a2;
    v25 = 1024;
    v26 = a3;
    v27 = 1024;
    v28 = v15;
    v29 = 1024;
    v30 = a6;
    v31 = 2080;
    v32 = v17;
    v33 = 1024;
    v34 = v18;
    v35 = 2080;
    v36 = v20;
    _os_log_debug_impl(&dword_224FE9000, v16, OS_LOG_TYPE_DEBUG, "%s - Texture compression requested on texture import:\nInput: %ux%ux%u. mips: %u, texel format: %s, premult if alpha: %d, block format: %s", (uint8_t *)&v21, 0x3Eu);
  }
}

void re::logTextureCompressionInfo(re *a1, uint64_t a2, int *a3)
{
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  id v17;

  if (*(_DWORD *)(a2 + 88) >= 2u)
    goto LABEL_8;
  v6 = objc_msgSend(*(id *)(a2 + 8), sel_width);
  if (*(_DWORD *)(a2 + 88) >= 2u)
    goto LABEL_8;
  v7 = v6;
  v8 = objc_msgSend(*(id *)(a2 + 8), sel_height);
  if (*(_DWORD *)(a2 + 88) >= 2u
    || (v9 = v8, v10 = objc_msgSend(*(id *)(a2 + 8), sel_arrayLength), *(_DWORD *)(a2 + 88) >= 2u)
    || (v11 = v10,
        v12 = objc_msgSend(*(id *)(a2 + 8), sel_depth),
        v13 = re::TextureData::mipmapLevelCount((re::TextureData *)a2),
        *(_DWORD *)(a2 + 88) >= 2u)
    || (v14 = v13, v15 = objc_msgSend(*(id *)(a2 + 8), sel_textureType), *(_DWORD *)(a2 + 88) >= 2u))
  {
LABEL_8:
    v16 = std::__throw_bad_variant_access[abi:nn180100]();
    re::logTextureCompressionInfo(v16, v17);
  }
  else
  {
    re::internalLogTextureCompressionInfo(a1, v7, v9, v11, v12, v14, v15, (int)objc_msgSend(*(id *)(a2 + 8), sel_pixelFormat), a3);
  }
}

void re::logTextureCompressionInfo(re *a1, id a2, int *a3)
{
  re::internalLogTextureCompressionInfo(a1, (int)objc_msgSend(a2, sel_width), (int)objc_msgSend(a2, sel_height), (int)objc_msgSend(a2, sel_arrayLength), (int)objc_msgSend(a2, sel_depth), (int)objc_msgSend(a2, sel_mipmapLevelCount), (int)objc_msgSend(a2, sel_textureType), (int)objc_msgSend(a2, sel_pixelFormat), a3);
}

_QWORD *re::parseAnimationBVH@<X0>(re *this@<X0>, uint64_t a2@<X8>)
{
  __int128 *v4;
  _anonymous_namespace_ *NextToken;
  _anonymous_namespace_ *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  re::StringID *v11;
  unint64_t v12;
  _anonymous_namespace_ *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  re::StringID *v18;
  unint64_t v19;
  int *v20;
  _anonymous_namespace_ *v21;
  uint64_t v22;
  unint64_t v23;
  re::StringID *v24;
  re::StringID *v25;
  unint64_t v26;
  unint64_t *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  __n128 v37;
  __n128 v38;
  uint64_t v39;
  re::StringID *v40;
  unint64_t v41;
  re::StringID *v42;
  uint64_t v43;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  int *v68;
  unint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  float32x4_t v95;
  unint64_t v96;
  float32x4_t v97;
  float32x4_t v98;
  _QWORD v99[2];
  unint64_t v100;
  int v101;
  re::StringID *v102;
  float v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  float32x4_t v110;
  uint64_t v111;
  __n128 __endptr[3];
  __int128 v113;
  _BYTE v114[24];
  uint64_t v115;
  uint64_t v116;
  re *v117;
  _QWORD v118[66];
  int v119;
  const char *v120;
  __int16 v121;
  int v122;
  __int16 v123;
  unint64_t v124;
  __int16 v125;
  unint64_t v126;
  uint64_t v127;

  v127 = *MEMORY[0x24BDAC8D0];
  v103 = 0.0;
  v104 = 0u;
  v105 = 0u;
  v4 = &v104;
  v106 = 0u;
  v107 = 0u;
  v108 = 0u;
  v109 = 0u;
  v117 = this;
  v118[64] = v118;
  v118[65] = v118;
  v102 = 0;
  v99[1] = 0;
  v100 = 0;
  v99[0] = 0;
  v101 = 0;
  v7 = v6 - NextToken;
  if (v6 == NextToken)
  {
    v9 = 0;
  }
  else
  {
    v8 = 0;
    if (v7 <= 1)
      v9 = 1;
    else
      v9 = v6 - NextToken;
    while (v8 != 9)
    {
      if (aHierarchy[v8] != *((_BYTE *)NextToken + v8))
        goto LABEL_47;
      if (v9 == ++v8)
        goto LABEL_11;
    }
    v9 = 9;
  }
LABEL_11:
  if (v9 != v7)
    goto LABEL_47;
  if (!(_DWORD)NextToken)
    goto LABEL_47;
  __endptr[0].n128_u64[0] = 0;
  memset(&__endptr[1], 0, 32);
  __endptr[0].n128_u64[1] = (unint64_t)&str_110;
  *(_QWORD *)&v113 = 0;
  *((_QWORD *)&v113 + 1) = 0xFFFFFFFFLL;
  if (__endptr[2].n128_u64[0])
  {
    if (__endptr[2].n128_u64[1])
    {
      (*(void (**)(__n128))(*(_QWORD *)__endptr[2].n128_u64[0] + 40))(v10);
      __endptr[2].n128_u64[1] = 0;
      *(_QWORD *)&v113 = 0;
    }
    __endptr[2].n128_u64[0] = 0;
  }
  re::StringID::destroyString((re::StringID *)__endptr);
  v11 = v102;
  v12 = v100;
  v14 = v13 - NextToken;
  if (v13 == NextToken)
  {
    v16 = 0;
  }
  else
  {
    v15 = 0;
    v16 = v14 <= 1 ? 1 : v13 - NextToken;
    while (v15 != 4)
    {
      if (aRoot_1[v15] != *((_BYTE *)NextToken + v15))
        goto LABEL_47;
      if (v16 == ++v15)
        goto LABEL_27;
    }
    v16 = 4;
  }
LABEL_27:
  if (v16 != v14
  {
LABEL_47:
    v36 = "Unable to parse hierarchy.";
LABEL_48:
    v37 = __endptr[0];
    v38 = __endptr[1];
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 100;
    *(_QWORD *)(a2 + 16) = &re::AssetErrorCategory(void)::instance;
    *(__n128 *)(a2 + 24) = v37;
    *(__n128 *)(a2 + 40) = v38;
    goto LABEL_49;
  }
  v20 = &v119;
  v22 = 0;
  v23 = 0;
  v24 = v102;
  v25 = v102;
  do
  {
    v26 = *((_QWORD *)&v104 + 1);
    if (*((_QWORD *)&v104 + 1) <= v23)
    {
      v110.i64[0] = 0;
      v113 = 0u;
      *(_OWORD *)v114 = 0u;
      memset(__endptr, 0, sizeof(__endptr));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v119 = 136315906;
      v120 = "operator[]";
      v121 = 1024;
      v122 = 468;
      v123 = 2048;
      v124 = v23;
      v125 = 2048;
      v126 = v26;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_95:
      v110.i64[0] = 0;
      v113 = 0u;
      *(_OWORD *)v114 = 0u;
      memset(__endptr, 0, sizeof(__endptr));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v119 = 136315906;
      v120 = "operator[]";
      v121 = 1024;
      v122 = 468;
      v123 = 2048;
      v124 = v23;
      v125 = 2048;
      v126 = v26;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_96;
    }
    v27 = re::StringID::operator=((unint64_t *)(v105 + v22), (uint64_t *)v25);
    v26 = v106;
    if ((unint64_t)v106 <= v23)
      goto LABEL_95;
    *(_DWORD *)(*((_QWORD *)&v106 + 1) + 4 * v23++) = *((_DWORD *)v25 + 14);
    v25 = (re::StringID *)((char *)v25 + 64);
    v22 += 16;
  }
  while (v19 != v23);
  v25 = 0;
  v28 = (__int128 *)((char *)v24 + 16);
  v29 = 32;
  while (1)
  {
    v23 = *((_QWORD *)&v107 + 1);
    if (*((_QWORD *)&v107 + 1) <= (unint64_t)v25)
      break;
    v30 = *v28;
    v28 += 4;
    *(_OWORD *)(v108 + v29) = v30;
    v25 = (re::StringID *)((char *)v25 + 1);
    v29 += 48;
    if ((re::StringID *)v19 == v25)
    {
      v33 = v32 - v31;
      if (v32 == v31)
      {
        v35 = 0;
      }
      else
      {
        v34 = 0;
        if (v33 <= 1)
          v35 = 1;
        else
          v35 = v32 - v31;
        while (v34 != 6)
        {
          if (aMotion[v34] != *(_BYTE *)(v31 + v34))
            goto LABEL_163;
          if (v35 == ++v34)
            goto LABEL_70;
        }
        v35 = 6;
      }
LABEL_70:
      if (v35 != v33)
        goto LABEL_163;
      if (!(_DWORD)v31)
        goto LABEL_163;
      v46 = v45 - v31;
      if (v45 == v31)
      {
        v48 = 0;
      }
      else
      {
        v47 = 0;
        v48 = v46 <= 1 ? 1 : v45 - v31;
        while (v47 != 7)
        {
          if (aFrames[v47] != *(_BYTE *)(v31 + v47))
            goto LABEL_163;
          if (v48 == ++v47)
            goto LABEL_82;
        }
        v48 = 7;
      }
LABEL_82:
      if (v48 != v46)
        goto LABEL_163;
      if (v49 == v31)
        goto LABEL_163;
      v50 = v49;
      __endptr[0].n128_u64[0] = 0;
      v31 = strtol((const char *)v31, (char **)__endptr, 10);
      if (__endptr[0].n128_u64[0] != v50)
        goto LABEL_163;
      LODWORD(v23) = v31;
      if (!(_DWORD)v31)
        goto LABEL_163;
      v20 = (int *)v24;
      v52 = v51 - v31;
      if (v51 == v31)
        goto LABEL_97;
      v53 = 0;
      if (v52 <= 1)
        v54 = 1;
      else
        v54 = v51 - v31;
      while (v53 != 5)
      {
        if (aFrame[v53] != *(_BYTE *)(v31 + v53))
          goto LABEL_163;
        if (v54 == ++v53)
          goto LABEL_99;
      }
      v54 = 5;
      goto LABEL_99;
    }
  }
LABEL_96:
  v110.i64[0] = 0;
  v113 = 0u;
  *(_OWORD *)v114 = 0u;
  memset(__endptr, 0, sizeof(__endptr));
  v4 = (__int128 *)MEMORY[0x24BDACB70];
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  v119 = 136315906;
  v120 = "operator[]";
  v121 = 1024;
  v122 = 468;
  v123 = 2048;
  v124 = (unint64_t)v25;
  v125 = 2048;
  v126 = v23;
  _os_log_send_and_compose_impl();
  v31 = _os_crash_msg();
  __break(1u);
LABEL_97:
  v54 = 0;
LABEL_99:
  if (v54 != v52)
    goto LABEL_163;
  v56 = v55 - v31;
  if (v55 == v31)
  {
    v58 = 0;
  }
  else
  {
    v57 = 0;
    v58 = v56 <= 1 ? 1 : v55 - v31;
    while (v57 != 5)
    {
      if (aTime_0[v57] != *(_BYTE *)(v31 + v57))
        goto LABEL_163;
      if (v58 == ++v57)
        goto LABEL_110;
    }
    v58 = 5;
  }
LABEL_110:
  v59 = (unint64_t)&v103;
  if (v58 != v56)
    goto LABEL_163;
  if (v60 == v31)
    goto LABEL_163;
  v61 = v60;
  __endptr[0].n128_u64[0] = 0;
  v103 = strtof((const char *)v31, (char **)__endptr);
  if (__endptr[0].n128_u64[0] != v61)
    goto LABEL_163;
  if (!(_DWORD)v31)
    goto LABEL_163;
  v93 = (int)v23;
  if ((int)v23 >= 1)
  {
    v96 = 0;
    v94 = 0;
    v62 = v19 <= 1 ? 1 : v19;
    v91 = v23;
    v92 = v62;
    v95 = (float32x4_t)vdupq_n_s32(0x3C8EFA35u);
    v63 = v19;
    while (1)
    {
      v64 = (unint64_t *)v109;
      if ((unint64_t)v109 <= v96)
        goto LABEL_167;
      v65 = *((_QWORD *)&v109 + 1);
      v59 = *((_QWORD *)&v109 + 1) + 24 * v96;
      if (v63)
        break;
LABEL_151:
      if ((v31 & 1) != 0)
      {
        v94 = (uint64_t)++v96 >= v93;
        if (v96 != v91)
          continue;
      }
      goto LABEL_153;
    }
    v59 = 0;
    v66 = v65 + 24 * v96;
    v64 = (unint64_t *)(v66 + 8);
    v67 = (_QWORD *)(v66 + 16);
    while (1)
    {
      v63 = *v64;
      if (*v64 <= v59)
        goto LABEL_165;
      v68 = &v20[16 * v59];
      *(_OWORD *)(*v67 + 48 * v59 + 32) = *((_OWORD *)v68 + 1);
      if (v59 == v19)
        goto LABEL_166;
      v70 = *((_QWORD *)v68 + 5);
      v69 = (unint64_t *)(v68 + 10);
      if (v70)
        break;
LABEL_149:
      if (++v59 == v92)
      {
        v63 = v19;
        goto LABEL_151;
      }
    }
    v71 = 0;
    while (2)
    {
      if (v72 != v31)
      {
        v73 = v72;
        __endptr[0].n128_u64[0] = 0;
        *(float *)&v74 = strtof((const char *)v31, (char **)__endptr);
        v98.i64[0] = v74;
        if (__endptr[0].n128_u64[0] == v73)
        {
          if (v75 != v31)
          {
            v76 = v75;
            __endptr[0].n128_u64[0] = 0;
            *(float *)&v77 = strtof((const char *)v31, (char **)__endptr);
            v97.i64[0] = v77;
            if (__endptr[0].n128_u64[0] == v76)
            {
              if (v78 != v31)
              {
                v79 = v78;
                __endptr[0].n128_u64[0] = 0;
                v81.f32[0] = strtof((const char *)v31, (char **)__endptr);
                if (__endptr[0].n128_u64[0] == v79)
                {
                  v63 = *v69;
                  if (*v69 > v71)
                  {
                    switch(*(_DWORD *)(*(_QWORD *)&v20[16 * v59 + 12] + 4 * v71))
                    {
                      case 0:
                        v63 = *v64;
                        if (*v64 <= v59)
                          goto LABEL_168;
                        v82 = v98;
                        v82.i32[1] = v97.i32[0];
                        v82.i32[2] = v81.i32[0];
                        *(float32x4_t *)(*v67 + 48 * v59 + 32) = v82;
                        goto LABEL_148;
                      case 1:
                        v83 = v98;
                        v83.i32[1] = v97.i32[0];
                        v83.i32[2] = v81.i32[0];
                        v110 = vmulq_f32(v83, v95);
                        __endptr[0] = (__n128)xmmword_2260E5D70;
                        re::convertIntrinsicEulersToQuaternions<float>((uint64_t)&v110, 1, 0, (uint64_t)__endptr, 1);
                        v63 = *v64;
                        if (*v64 <= v59)
                          goto LABEL_169;
                        goto LABEL_147;
                      case 2:
                        v81.i32[1] = v98.i32[0];
                        v81.i32[2] = v97.i32[0];
                        v110 = vmulq_f32(v81, v95);
                        __endptr[0] = (__n128)xmmword_2260E5D70;
                        re::convertIntrinsicEulersToQuaternions<float>((uint64_t)&v110, 1, 1, (uint64_t)__endptr, 1);
                        v63 = *v64;
                        if (*v64 <= v59)
                          goto LABEL_170;
                        goto LABEL_147;
                      case 3:
                        v84 = v97;
                        v84.i32[1] = v81.i32[0];
                        v84.i32[2] = v98.i32[0];
                        v110 = vmulq_f32(v84, v95);
                        __endptr[0] = (__n128)xmmword_2260E5D70;
                        re::convertIntrinsicEulersToQuaternions<float>((uint64_t)&v110, 1, 2, (uint64_t)__endptr, 1);
                        v63 = *v64;
                        if (*v64 <= v59)
                          goto LABEL_171;
                        goto LABEL_147;
                      case 4:
                        v85 = v98;
                        v85.i32[1] = v97.i32[0];
                        v85.i32[2] = v81.i32[0];
                        v110 = vmulq_f32(v85, v95);
                        __endptr[0] = (__n128)xmmword_2260E5D70;
                        re::convertIntrinsicEulersToQuaternions<float>((uint64_t)&v110, 1, 3, (uint64_t)__endptr, 1);
                        v63 = *v64;
                        if (*v64 <= v59)
                          goto LABEL_172;
                        goto LABEL_147;
                      case 5:
                        v86 = v97;
                        v86.i32[1] = v98.i32[0];
                        v86.i32[2] = v81.i32[0];
                        v110 = vmulq_f32(v86, v95);
                        __endptr[0] = (__n128)xmmword_2260E5D70;
                        re::convertIntrinsicEulersToQuaternions<float>((uint64_t)&v110, 1, 4, (uint64_t)__endptr, 1);
                        v63 = *v64;
                        if (*v64 <= v59)
                          goto LABEL_173;
                        goto LABEL_147;
                      case 6:
                        v81.i32[1] = v97.i32[0];
                        v81.i32[2] = v98.i32[0];
                        v110 = vmulq_f32(v81, v95);
                        __endptr[0] = (__n128)xmmword_2260E5D70;
                        re::convertIntrinsicEulersToQuaternions<float>((uint64_t)&v110, 1, 5, (uint64_t)__endptr, 1);
                        v63 = *v64;
                        if (*v64 <= v59)
                          goto LABEL_174;
LABEL_147:
                        v87 = __endptr[0].n128_u64[1];
                        v88 = *v67 + 48 * v59;
                        *(_QWORD *)(v88 + 16) = __endptr[0].n128_u64[0];
                        *(_QWORD *)(v88 + 24) = v87;
LABEL_148:
                        if (++v71 >= *v69)
                          goto LABEL_149;
                        continue;
                      default:
                        goto LABEL_175;
                    }
                  }
                  v110.i64[0] = 0;
                  v113 = 0u;
                  *(_OWORD *)v114 = 0u;
                  memset(__endptr, 0, sizeof(__endptr));
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  v119 = 136315906;
                  v120 = "operator[]";
                  v121 = 1024;
                  v122 = 476;
                  v123 = 2048;
                  v124 = v71;
                  v125 = 2048;
                  v126 = v63;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_165:
                  v110.i64[0] = 0;
                  v113 = 0u;
                  *(_OWORD *)v114 = 0u;
                  memset(__endptr, 0, sizeof(__endptr));
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  v119 = 136315906;
                  v120 = "operator[]";
                  v121 = 1024;
                  v122 = 468;
                  v123 = 2048;
                  v124 = v59;
                  v125 = 2048;
                  v126 = v63;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_166:
                  v110.i64[0] = 0;
                  v113 = 0u;
                  *(_OWORD *)v114 = 0u;
                  memset(__endptr, 0, sizeof(__endptr));
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  v119 = 136315906;
                  v120 = "operator[]";
                  v121 = 1024;
                  v122 = 797;
                  v123 = 2048;
                  v124 = v19;
                  v125 = 2048;
                  v126 = v19;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_167:
                  v110.i64[0] = 0;
                  v113 = 0u;
                  *(_OWORD *)v114 = 0u;
                  memset(__endptr, 0, sizeof(__endptr));
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  v119 = 136315906;
                  v120 = "operator[]";
                  v121 = 1024;
                  v122 = 468;
                  v123 = 2048;
                  v124 = v96;
                  v125 = 2048;
                  v126 = (unint64_t)v64;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_168:
                  v110.i64[0] = 0;
                  v113 = 0u;
                  *(_OWORD *)v114 = 0u;
                  memset(__endptr, 0, sizeof(__endptr));
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  v119 = 136315906;
                  v120 = "operator[]";
                  v121 = 1024;
                  v122 = 468;
                  v123 = 2048;
                  v124 = v59;
                  v125 = 2048;
                  v126 = v63;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_169:
                  v111 = 0;
                  v113 = 0u;
                  *(_OWORD *)v114 = 0u;
                  memset(__endptr, 0, sizeof(__endptr));
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  v119 = 136315906;
                  v120 = "operator[]";
                  v121 = 1024;
                  v122 = 468;
                  v123 = 2048;
                  v124 = v59;
                  v125 = 2048;
                  v126 = v63;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_170:
                  v111 = 0;
                  v113 = 0u;
                  *(_OWORD *)v114 = 0u;
                  memset(__endptr, 0, sizeof(__endptr));
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  v119 = 136315906;
                  v120 = "operator[]";
                  v121 = 1024;
                  v122 = 468;
                  v123 = 2048;
                  v124 = v59;
                  v125 = 2048;
                  v126 = v63;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_171:
                  v111 = 0;
                  v113 = 0u;
                  *(_OWORD *)v114 = 0u;
                  memset(__endptr, 0, sizeof(__endptr));
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  v119 = 136315906;
                  v120 = "operator[]";
                  v121 = 1024;
                  v122 = 468;
                  v123 = 2048;
                  v124 = v59;
                  v125 = 2048;
                  v126 = v63;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_172:
                  v111 = 0;
                  v113 = 0u;
                  *(_OWORD *)v114 = 0u;
                  memset(__endptr, 0, sizeof(__endptr));
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  v119 = 136315906;
                  v120 = "operator[]";
                  v121 = 1024;
                  v122 = 468;
                  v123 = 2048;
                  v124 = v59;
                  v125 = 2048;
                  v126 = v63;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_173:
                  v111 = 0;
                  v113 = 0u;
                  *(_OWORD *)v114 = 0u;
                  memset(__endptr, 0, sizeof(__endptr));
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  v119 = 136315906;
                  v120 = "operator[]";
                  v121 = 1024;
                  v122 = 468;
                  v123 = 2048;
                  v124 = v59;
                  v125 = 2048;
                  v126 = v63;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_174:
                  v111 = 0;
                  v113 = 0u;
                  *(_OWORD *)v114 = 0u;
                  memset(__endptr, 0, sizeof(__endptr));
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  v119 = 136315906;
                  v120 = "operator[]";
                  v121 = 1024;
                  v122 = 468;
                  v123 = 2048;
                  v124 = v59;
                  v125 = 2048;
                  v126 = v63;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_175:
                  re::internal::assertLog((re::internal *)4, v80, *(double *)v81.i64, "assertion failure: '%s' (%s:line %i) Invalid Joint Channel value.", "!\"Unreachable code\"", "parseFrameNumbersLine", 507);
                  _os_crash();
                  __break(1u);
                  JUMPOUT(0x225B23F74);
                }
              }
            }
          }
        }
      }
      break;
    }
LABEL_153:
    if (!v94)
    {
LABEL_163:
      v36 = "Unable to parse motion frames.";
      goto LABEL_48;
    }
  }
  re::types::Ok<re::AnimationBVH>::Ok((uint64_t)__endptr, &v103);
  *(_BYTE *)a2 = 1;
  *(_DWORD *)(a2 + 8) = __endptr[0].n128_u32[0];
  v89 = __endptr[1].n128_u64[0];
  *(_QWORD *)(a2 + 16) = __endptr[0].n128_u64[1];
  *(_QWORD *)(a2 + 24) = v89;
  *(__n128 *)(a2 + 32) = *(__n128 *)((char *)&__endptr[1] + 8);
  memset(&__endptr[0].n128_i8[8], 0, 32);
  *(_QWORD *)(a2 + 48) = __endptr[2].n128_u64[1];
  __endptr[2].n128_u64[1] = 0;
  *(_OWORD *)(a2 + 56) = v113;
  v113 = 0u;
  *(_QWORD *)(a2 + 72) = *(_QWORD *)v114;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)&v114[8];
  memset(v114, 0, sizeof(v114));
  v90 = v116;
  *(_QWORD *)(a2 + 96) = v115;
  *(_QWORD *)(a2 + 104) = v90;
  v115 = 0;
  v116 = 0;
  re::FixedArray<re::FixedArray<float>>::deinit(&v114[16]);
  if (*((_QWORD *)&v113 + 1))
  {
    if (*(_QWORD *)v114)
    {
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)&v113 + 1) + 40))(*((_QWORD *)&v113 + 1), *(_QWORD *)&v114[8]);
      *(_OWORD *)v114 = 0uLL;
    }
    *((_QWORD *)&v113 + 1) = 0;
  }
  if (__endptr[2].n128_u64[0])
  {
    if (__endptr[2].n128_u64[1])
    {
      (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)__endptr[2].n128_u64[0] + 40))(__endptr[2].n128_u64[0], v113);
      __endptr[2].n128_u64[1] = 0;
      *(_QWORD *)&v113 = 0;
    }
    __endptr[2].n128_u64[0] = 0;
  }
  re::FixedArray<re::StringID>::deinit(&__endptr[0].n128_u64[1]);
LABEL_49:
  v39 = v99[0];
  if (v99[0])
  {
    v40 = v102;
    if (v102)
    {
      if (v100)
      {
        v41 = v100 << 6;
        v42 = v102;
        do
        {
          v43 = *((_QWORD *)v42 + 4);
          if (v43)
          {
            if (*((_QWORD *)v42 + 5))
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v43 + 40))(v43, *((_QWORD *)v42 + 6));
              *((_QWORD *)v42 + 5) = 0;
              *((_QWORD *)v42 + 6) = 0;
            }
            *((_QWORD *)v42 + 4) = 0;
          }
          re::StringID::destroyString(v42);
          v42 = (re::StringID *)((char *)v42 + 64);
          v41 -= 64;
        }
        while (v41);
      }
      (*(void (**)(uint64_t, re::StringID *))(*(_QWORD *)v39 + 40))(v39, v40);
    }
  }
  re::FixedArray<re::FixedArray<float>>::deinit((_QWORD *)&v108 + 1);
  if ((_QWORD)v107)
  {
    if (*((_QWORD *)&v107 + 1))
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v107 + 40))(v107, v108);
      *((_QWORD *)&v107 + 1) = 0;
      *(_QWORD *)&v108 = 0;
    }
    *(_QWORD *)&v107 = 0;
  }
  if (*((_QWORD *)&v105 + 1))
  {
    if ((_QWORD)v106)
    {
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)&v105 + 1) + 40))(*((_QWORD *)&v105 + 1), *((_QWORD *)&v106 + 1));
      v106 = 0uLL;
    }
    *((_QWORD *)&v105 + 1) = 0;
  }
  return re::FixedArray<re::StringID>::deinit(v4);
}

__n128 re::DynamicArray<re::`anonymous namespace'::BVHJointData>::add(uint64_t a1, __n128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __n128 *v8;
  unint64_t v9;
  __n128 result;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = v5 + 1;
  if (v5 >= v4 && v4 < v6)
  {
    if (*(_QWORD *)a1)
    {
      v13 = 2 * v4;
      v14 = v4 == 0;
      v15 = 8;
      if (!v14)
        v15 = v13;
      if (v15 <= v6)
        v16 = v6;
      else
        v16 = v15;
    }
    else
    {
      ++*(_DWORD *)(a1 + 24);
    }
  }
  v8 = (__n128 *)(*(_QWORD *)(a1 + 32) + (*(_QWORD *)(a1 + 16) << 6));
  v9 = a2->n128_u64[0];
  v8->n128_u64[0] = v8->n128_u64[0] & 0xFFFFFFFFFFFFFFFELL | a2->n128_u64[0] & 1;
  v8->n128_u64[0] = a2->n128_u64[0] & 0xFFFFFFFFFFFFFFFELL | v9 & 1;
  v8->n128_u64[1] = a2->n128_u64[1];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = (unint64_t)&str_110;
  result = a2[1];
  v8[1] = result;
  v8[2].n128_u64[1] = 0;
  v8[3].n128_u64[0] = 0;
  v8[2].n128_u64[0] = 0;
  v11 = a2[2].n128_u64[1];
  v8[2].n128_u64[0] = a2[2].n128_u64[0];
  v8[2].n128_u64[1] = v11;
  a2[2].n128_u64[0] = 0;
  a2[2].n128_u64[1] = 0;
  v12 = v8[3].n128_u64[0];
  v8[3].n128_u64[0] = a2[3].n128_u64[0];
  a2[3].n128_u64[0] = v12;
  v8[3].n128_u32[2] = a2[3].n128_u32[2];
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::`anonymous namespace'::parseJointDescription(re::_anonymous_namespace_::TokenStream *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *NextToken;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  _anonymous_namespace_ *v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  re::StringID *v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  size_t v46;
  char *v47;
  uint64_t v48;
  size_t v49;
  char *v50;
  uint64_t v51;
  size_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  __n128 __endptr[2];
  __int128 v73;
  uint64_t v74;
  int v75;
  char v76[32];
  int v77;
  const char *v78;
  __int16 v79;
  int v80;
  __int16 v81;
  unint64_t v82;
  __int16 v83;
  unint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  {
    return 0;
  }
  v6 = *(_QWORD *)(a3 + 32);
  v7 = *(_QWORD *)(a3 + 16);
  v10 = v9 - NextToken;
  if (v9 == NextToken)
  {
    v12 = 0;
  }
  else
  {
    v11 = 0;
    v12 = v10 <= 1 ? 1 : v9 - NextToken;
    while (v11 != 8)
    {
      if (aChannels[v11] != NextToken[v11])
        return 0;
      if (v12 == ++v11)
        goto LABEL_13;
    }
    v12 = 8;
  }
  if (v12 != v10)
    return 0;
  if (v14 == v13)
    return 0;
  v15 = v14;
  __endptr[0].n128_u64[0] = 0;
  v16 = (_anonymous_namespace_ *)strtol(v13, (char **)__endptr, 10);
  if ((char *)__endptr[0].n128_u64[0] != v15)
    return 0;
  v17 = v16;
  if ((int)v16 < 1)
    return 0;
  v18 = v16 / 3uLL;
  if (v16 % 3)
    return 0;
LABEL_13:
  v19 = v7 - 1;
  v20 = v6 + (v19 << 6) + 32;
  v21 = v6 + (v19 << 6);
  *(_QWORD *)(v21 + 40) = v18;
  v22 = (unint64_t *)(v21 + 40);
  if (v17 > 2)
  {
    v38 = 4 * v18;
    *(_QWORD *)(v21 + 48) = v39;
    v41 = (_QWORD *)(v21 + 48);
    if (v39)
    {
      v42 = v39;
      if (v17 - 3 >= 3)
      {
        bzero(v39, v38 - 4);
        v42 = (_DWORD *)((char *)v42 + v38 - 4);
      }
      v20 = 0;
      *v42 = 0;
      if (v18 <= 1)
        v43 = 1;
      else
        v43 = v18;
      v71 = v43;
      while (1)
      {
        v46 = v45 - (_QWORD)v44;
        if ((unint64_t)(v45 - (_QWORD)v44 + 1) > 0x20)
          return 0;
        memcpy(__endptr, v44, v46);
        __endptr[0].n128_u8[v46] = 0;
        v49 = v48 - (_QWORD)v47;
        if ((unint64_t)(v48 - (_QWORD)v47 + 1) > 0x20)
          return 0;
        memcpy(&v73, v47, v49);
        *((_BYTE *)&v73 + v49) = 0;
        v52 = v51 - (_QWORD)v50;
        if ((unint64_t)(v51 - (_QWORD)v50 + 1) > 0x20)
          return 0;
        memcpy(v76, v50, v52);
        v76[v52] = 0;
        v53 = *v22;
        if (*v22 <= v20)
          break;
        v54 = 0;
        *(_DWORD *)(*v41 + 4 * v20) = -1;
        v18 = (unint64_t)off_24ED7D2F8;
        while (strcmp((const char *)__endptr, *(const char **)(v18 - 16))
             || strcmp((const char *)&v73, *(const char **)(v18 - 8))
             || strcmp(v76, *(const char **)v18))
        {
          ++v54;
          v18 += 24;
          if (v54 == 7)
            goto LABEL_66;
        }
        v18 = *v22;
        if (*v22 <= v20)
          goto LABEL_114;
        *(_DWORD *)(*v41 + 4 * v20) = v54;
LABEL_66:
        v53 = *v22;
        if (*v22 <= v20)
          goto LABEL_112;
        if (*(_DWORD *)(*v41 + 4 * v20) == -1)
          return 0;
        if (++v20 == v71)
          goto LABEL_19;
      }
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v85 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v77 = 136315906;
      v78 = "operator[]";
      v79 = 1024;
      v80 = 468;
      v81 = 2048;
      v82 = v20;
      v83 = 2048;
      v84 = v53;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_112:
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v85 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v77 = 136315906;
      v78 = "operator[]";
      v79 = 1024;
      v80 = 468;
      v81 = 2048;
      v82 = v20;
      v83 = 2048;
      v84 = v53;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::internal::assertLog((re::internal *)4, v40, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
LABEL_114:
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v85 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v77 = 136315906;
    v78 = "operator[]";
    v79 = 1024;
    v80 = 468;
    v81 = 2048;
    v82 = v20;
    v83 = 2048;
    v84 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
    return 0;
LABEL_19:
  while (1)
  {
    v25 = v24 - v23;
    if (v24 == v23)
    {
      v27 = 0;
    }
    else
    {
      v26 = 0;
      v27 = v25 <= 1 ? 1 : v24 - v23;
      while (v26 != 5)
      {
        if (aJoint_0[v26] != v23[v26])
          goto LABEL_72;
        if (v27 == ++v26)
          goto LABEL_30;
      }
      v27 = 5;
    }
LABEL_30:
    if (v27 != v25)
      break;
    __endptr[0].n128_u64[0] = 0;
    __endptr[0].n128_u64[1] = (unint64_t)&str_110;
    __endptr[1] = 0u;
    v73 = 0u;
    v74 = 0;
    v75 = a2;
    if ((_QWORD)v73)
    {
      if (*((_QWORD *)&v73 + 1))
      {
        (*(void (**)(__n128))(*(_QWORD *)v73 + 40))(v28);
        *((_QWORD *)&v73 + 1) = 0;
        v74 = 0;
      }
      *(_QWORD *)&v73 = 0;
    }
    re::StringID::destroyString((re::StringID *)__endptr);
    v29 = *(_QWORD *)(a3 + 32);
    v30 = *(_QWORD *)(a3 + 16);
    v33 = v32 - v31;
    if (v32 == v31)
    {
      v35 = 0;
    }
    else
    {
      v34 = 0;
      if (v33 <= 1)
        v35 = 1;
      else
        v35 = v32 - v31;
      while (v34 != 5)
      {
        if (aJoint_0[v34] != v31[v34])
          return 0;
        if (v35 == ++v34)
          goto LABEL_45;
      }
      v35 = 5;
    }
LABEL_45:
    if (v35 == v33)
    {
      {
        {
          continue;
        }
      }
    }
    return 0;
  }
LABEL_72:
  v57 = v56 - v55;
  if (v56 == v55)
  {
    v59 = 0;
  }
  else
  {
    v58 = 0;
    v59 = v57 <= 1 ? 1 : v56 - v55;
    while (v58 != 3)
    {
      if (aEnd_0[v58] != v55[v58])
      if (v59 == ++v58)
        goto LABEL_82;
    }
    v59 = 3;
  }
LABEL_82:
  if (v59 != v57)
  v62 = v61 - v60;
  if (v61 == v60)
  {
    v64 = 0;
  }
  else
  {
    v63 = 0;
    v64 = v62 <= 1 ? 1 : v61 - v60;
    while (v63 != 3)
    {
      if (aEnd_0[v63] != v60[v63])
        return 0;
      if (v64 == ++v63)
        goto LABEL_93;
    }
    v64 = 3;
  }
  if (v64 != v62)
    return 0;
LABEL_93:
  v67 = v66 - v65;
  if (v66 == v65)
  {
    v69 = 0;
  }
  else
  {
    v68 = 0;
    v69 = v67 <= 1 ? 1 : v66 - v65;
    while (v68 != 4)
    {
      if (aSite[v68] != v65[v68])
        return 0;
      if (v69 == ++v68)
        goto LABEL_104;
    }
    v69 = 4;
  }
LABEL_104:
  if (v69 == v67
  {
  }
  else
  {
    return 0;
  }
}

char *re::`anonymous namespace'::TokenStream::getNextToken(re::_anonymous_namespace_::TokenStream *this, char a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  char *v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;

  v4 = (char *)*((_QWORD *)this + 65);
  v5 = (char *)*((_QWORD *)this + 66);
  if (v4 < v5)
  {
    v6 = MEMORY[0x24BDAC740];
    do
    {
      v7 = *v4;
      if ((v7 & 0x80000000) != 0)
      {
        v8 = __maskrune(v7, 0x4000uLL);
        v5 = (char *)*((_QWORD *)this + 66);
        if (!v8)
          break;
      }
      else if ((*(_DWORD *)(v6 + 4 * v7 + 60) & 0x4000) == 0)
      {
        break;
      }
      ++v4;
    }
    while (v4 < v5);
  }
  if (v4 >= v5)
  {
    v10 = v4;
  }
  else
  {
    v9 = MEMORY[0x24BDAC740];
    v10 = v4;
    do
    {
      v11 = *v10;
      if ((v11 & 0x80000000) != 0)
      {
        v12 = __maskrune(v11, 0x4000uLL);
        v5 = (char *)*((_QWORD *)this + 66);
        if (v12)
          break;
      }
      else if ((*(_DWORD *)(v9 + 4 * v11 + 60) & 0x4000) != 0)
      {
        break;
      }
      ++v10;
    }
    while (v10 < v5);
  }
  if (v10 == v5)
  {
    v4 = (char *)*((_QWORD *)this + 65);
    v13 = *((_QWORD *)this + 66);
    v14 = MEMORY[0x24BDAC740];
    while ((unint64_t)v4 < v13)
    {
      v15 = *v4;
      if ((v15 & 0x80000000) != 0)
      {
        v16 = __maskrune(v15, 0x4000uLL);
        v13 = *((_QWORD *)this + 66);
        if (!v16)
          break;
      }
      else if ((*(_DWORD *)(v14 + 4 * v15 + 60) & 0x4000) == 0)
      {
        break;
      }
      ++v4;
    }
    v10 = v4;
    if ((unint64_t)v4 < v13)
    {
      do
      {
        v17 = *v10;
        if ((v17 & 0x80000000) != 0)
        {
          if (__maskrune(v17, 0x4000uLL))
            break;
        }
        else if ((*(_DWORD *)(v14 + 4 * v17 + 60) & 0x4000) != 0)
        {
          break;
        }
        ++v10;
      }
      while ((unint64_t)v10 < *((_QWORD *)this + 66));
    }
  }
  if ((a2 & 1) == 0)
    *((_QWORD *)this + 65) = v10;
  return v4;
}

uint64_t re::`anonymous namespace'::TokenStream::endLine(re::_anonymous_namespace_::TokenStream *this)
{
  unsigned __int8 *v2;
  uint64_t v3;
  char *v4;
  unsigned int v5;
  int v6;
  int v7;

  v2 = (unsigned __int8 *)*((_QWORD *)this + 65);
  v3 = MEMORY[0x24BDAC740];
  do
  {
    while (1)
    {
      v4 = (char *)*((_QWORD *)this + 66);
      if (v2 >= (unsigned __int8 *)v4)
        break;
      v5 = (char)*v2;
      if ((v5 & 0x80000000) != 0)
      {
        v7 = __maskrune(v5, 0x4000uLL);
        v2 = (unsigned __int8 *)*((_QWORD *)this + 65);
        if (v7)
          goto LABEL_5;
LABEL_8:
        v4 = (char *)*((_QWORD *)this + 66);
        break;
      }
      if ((*(_DWORD *)(v3 + 4 * v5 + 60) & 0x4000) == 0)
        goto LABEL_8;
LABEL_5:
      v6 = *v2++;
      *((_QWORD *)this + 65) = v2;
      if (v6 == 10)
        return 1;
    }
    if (v2 != (unsigned __int8 *)v4)
      break;
    v2 = (unsigned __int8 *)*((_QWORD *)this + 65);
  }
  while ((unint64_t)v2 < *((_QWORD *)this + 66));
  return 0;
}

uint64_t re::`anonymous namespace'::TokenStream::readFromStream(re::_anonymous_namespace_::TokenStream *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t result;

  v2 = *((_QWORD *)this + 66);
  v3 = (char *)*((_QWORD *)this + 65);
  v4 = v2 - (_QWORD)v3;
  v5 = (char *)this + 8;
  if (v3 != (char *)this + 8)
  {
    memmove((char *)this + 8, v3, v2 - (_QWORD)v3);
    *((_QWORD *)this + 65) = v5;
    *((_QWORD *)this + 66) = &v5[v4];
  }
  result = (*(uint64_t (**)(_QWORD, char *, uint64_t))(**(_QWORD **)this + 16))(*(_QWORD *)this, &v5[v4], 512 - v4);
  *((_QWORD *)this + 66) += result;
  return result;
}

_QWORD *re::DynamicArray<re::`anonymous namespace'::BVHJointData>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 6;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_18;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v9 << 6;
        v11 = v7;
        do
        {
          v12 = *v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *v8 = 0;
          v8[1] = (uint64_t)&str_110;
          *((_OWORD *)v11 + 1) = *((_OWORD *)v8 + 1);
          v11[5] = 0;
          v11[6] = 0;
          v11[4] = 0;
          v13 = v8[5];
          v11[4] = v8[4];
          v11[5] = v13;
          v8[4] = 0;
          v8[5] = 0;
          v14 = v11[6];
          v11[6] = v8[6];
          v8[6] = v14;
          *((_DWORD *)v11 + 14) = *((_DWORD *)v8 + 14);
          if (v8[4])
            v8[4] = 0;
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 8;
          v11 += 8;
          v10 -= 64;
        }
        while (v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t re::`anonymous namespace'::Token::getSID(re::_anonymous_namespace_::Token *this, re::StringID *a2, uint64_t *a3)
{
  size_t v5;
  _anonymous_namespace_ *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  void *v15;
  _QWORD v16[2];
  char __dst[128];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = a2 - this;
  if (a2 == this)
    return a2 != this;
  if (v5 + 1 < 0x81)
  {
    v7 = (_anonymous_namespace_ *)memcpy(__dst, this, v5);
    __dst[v5] = 0;
    v14 = 0;
    v15 = &str_110;
    v8 = strlen(__dst);
    v9 = v14;
    v10 = (uint64_t)v15;
    v14 = 0;
    v15 = &str_110;
    v11 = *a3;
    v12 = a3[1];
    *a3 = v9;
    a3[1] = v10;
    v16[0] = v9 & 0xFFFFFFFFFFFFFFFELL | v11 & 1;
    v16[1] = v12;
    re::StringID::destroyString((re::StringID *)v16);
    re::StringID::destroyString((re::StringID *)&v14);
    return a2 != this;
  }
  re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "getString(buffer, sizeof(buffer))", "getSID", 156);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::parseLeftBraceLine(re::_anonymous_namespace_::TokenStream *a1)
{
  char *NextToken;
  char *v3;
  uint64_t v4;

  if (v3 == NextToken)
  {
    v4 = 0;
  }
  else
  {
    if (*NextToken != 123)
      return 0;
    v4 = 1;
  }
  if (v4 == v3 - NextToken)
  return 0;
}

uint64_t re::`anonymous namespace'::parseOffsetLine(re::_anonymous_namespace_::TokenStream *a1, float *a2)
{
  char *NextToken;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;

  v6 = v5 - NextToken;
  if (v5 == NextToken)
  {
    v8 = 0;
  }
  else
  {
    v7 = 0;
    if (v6 <= 1)
      v8 = 1;
    else
      v8 = v5 - NextToken;
    while (v7 != 6)
    {
      if (aOffset_0[v7] != NextToken[v7])
        return 0;
      if (v8 == ++v7)
        goto LABEL_11;
    }
    v8 = 6;
  }
  if (v8 != v6)
    return 0;
  if (v10 == v9)
    return 0;
  v11 = v10;
  v19 = 0;
  *a2 = strtof(v9, &v19);
  if (v19 != v11)
    return 0;
  if (v14 == v13)
    return 0;
LABEL_11:
  v15 = v14;
  v19 = 0;
  a2[1] = strtof(v13, &v19);
  if (v19 == v15
    && (v18 = v17, v19 = 0, a2[2] = strtof(v16, &v19), v19 == v18))
  {
  }
  else
  {
    return 0;
  }
}

uint64_t re::`anonymous namespace'::parseRightBraceLine(re::_anonymous_namespace_::TokenStream *a1)
{
  char *NextToken;
  char *v3;
  uint64_t v4;

  if (v3 == NextToken)
  {
    v4 = 0;
  }
  else
  {
    if (*NextToken != 125)
      return 0;
    v4 = 1;
  }
  if (v4 == v3 - NextToken)
  return 0;
}

uint64_t re::types::Ok<re::AnimationBVH>::Ok(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;

  v4 = (uint64_t)(a2 + 20);
  *(_DWORD *)a1 = *a2;
  v5 = (uint64_t *)(a1 + 80);
  re::FixedArray<re::StringID>::FixedArray((unint64_t *)(a1 + 8), (uint64_t)(a2 + 2));
  re::FixedArray<unsigned int>::FixedArray((uint64_t *)(a1 + 32), (uint64_t)(a2 + 8));
  re::FixedArray<re::GenericSRT<float>>::FixedArray((_QWORD *)(a1 + 56), (uint64_t)(a2 + 14));
  re::FixedArray<re::FixedArray<re::GenericSRT<float>>>::FixedArray(v5, v4);
  return a1;
}

BOOL re::fillStreamFP16(re *this, const re::GeomAttribute *a2, char *a3, uint64_t a4, float a5)
{
  unsigned int v7;
  _WORD *v10;
  float *v11;
  unsigned int v12;
  float v20;
  unint64_t v22;
  unint64_t v23;
  float v26;
  double *v28;
  unsigned int v29;
  float v33;
  float v37;
  float32x2_t *v39;
  unsigned int v40;
  uint64_t v42;
  BOOL v43;
  _WORD *v44;
  float32x2_t v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float32x4_t v54;
  float32x4_t v55;
  uint64_t v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float32x4_t v63;
  int8x16_t v64;
  float32x4_t v66;

  v7 = a3;
  v10 = (_WORD *)((char *)a2 + a4);
  switch(*((_BYTE *)this + 17))
  {
    case 4:
      if (!(*(unsigned int (**)(re *))(*(_QWORD *)this + 16))(this))
        return 1;
      v11 = (float *)re::internal::GeomTypedAttribute<int>::operator[]((uint64_t)this, 0);
      v12 = (*(uint64_t (**)(re *))(*(_QWORD *)this + 16))(this);
      if (!v12)
        return 1;
      _S1 = *v11;
      __asm
      {
        FCVT            H0, S1
        FCVT            S2, H0
      }
      v20 = vabds_f32(*v11, _S2);
      if (*v11 != _S2 && v20 > a5)
        return 0;
      v22 = 0;
      v23 = v12;
      break;
    case 5:
      if (!(*(unsigned int (**)(re *))(*(_QWORD *)this + 16))(this))
        return 1;
      v28 = (double *)re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)this, 0);
      v29 = (*(uint64_t (**)(re *))(*(_QWORD *)this + 16))(this);
      if (!v29)
        return 1;
      _D1 = *v28;
      __asm { FCVT            H0, D1 }
      *(float *)&_D1 = *v28;
      __asm { FCVT            S2, H0 }
      v33 = vabds_f32(*(float *)&_D1, _S2);
      if (*(float *)&_D1 != _S2 && v33 > a5)
        return 0;
      v22 = 0;
      v23 = v29;
      do
      {
        *v10 = _H0;
        if (v29 - 1 == v22)
          goto LABEL_55;
        v10 = (_WORD *)((char *)v10 + v7);
        _D1 = v28[v22 + 1];
        __asm { FCVT            H0, D1 }
        *(float *)&_D1 = _D1;
        __asm { FCVT            S2, H0 }
        v37 = vabds_f32(*(float *)&_D1, _S2);
        ++v22;
      }
      while (*(float *)&_D1 == _S2 || v37 <= a5);
      return v22 >= v23;
    case 6:
      if (!(*(unsigned int (**)(re *))(*(_QWORD *)this + 16))(this))
        return 1;
      v39 = (float32x2_t *)re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)this, 0);
      v40 = (*(uint64_t (**)(re *))(*(_QWORD *)this + 16))(this);
      if (!v40)
        return 1;
      v42 = 0;
      v43 = 0;
      v44 = (_WORD *)((char *)a2 + a4 + 2);
      do
      {
        _D1.i32[0] = v39->i32[0];
        __asm { FCVT            H1, S1 }
        *(v44 - 1) = _D1.i16[0];
        _S2 = v39->i32[1];
        __asm { FCVT            H2, S2 }
        *v44 = _S2;
        _D1.i16[1] = _S2;
        v46 = vsub_f32(*v39, (float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D1));
        _D1 = (float16x4_t)vmul_f32(v46, v46);
        if (vaddv_f32((float32x2_t)_D1) > (float)(a5 * a5))
          break;
        v43 = ++v42 >= (unint64_t)v40;
        ++v39;
        v44 = (_WORD *)((char *)v44 + v7);
      }
      while (v40 != v42);
      return v43;
    case 7:
      if (!(*(unsigned int (**)(re *))(*(_QWORD *)this + 16))(this))
        return 1;
      v47 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)this, 0);
      v48 = (*(uint64_t (**)(re *))(*(_QWORD *)this + 16))(this);
      if (!v48)
        return 1;
      v49 = 0;
      v43 = 0;
      v50 = v47;
      do
      {
        v51 = 0;
        v66 = 0uLL;
        do
        {
          _S2 = *(_DWORD *)(v50 + 4 * v51);
          __asm
          {
            FCVT            H2, S2
            FCVT            S3, H2
          }
          v66.i32[v51] = _S3;
          v10[v51++] = _S2;
        }
        while (v51 != 3);
        v54 = vsubq_f32(*(float32x4_t *)(v47 + 16 * v49), v66);
        v55 = vmulq_f32(v54, v54);
        if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2), vaddq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1))).f32[0] > (float)(a5 * a5))break;
        ++v49;
        v10 = (_WORD *)((char *)v10 + v7);
        v50 += 16;
        v43 = v49 >= v48;
      }
      while (v49 != v48);
      return v43;
    case 8:
      if ((*(unsigned int (**)(re *))(*(_QWORD *)this + 16))(this)
        && (v56 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)this, 0),
            (v57 = (*(uint64_t (**)(re *))(*(_QWORD *)this + 16))(this)) != 0))
      {
        v58 = 0;
        v43 = 0;
        v59 = v56;
        do
        {
          v60 = 0;
          v66 = 0uLL;
          do
          {
            _S1 = *(_DWORD *)(v59 + 4 * v60);
            __asm
            {
              FCVT            H1, S1
              FCVT            S2, H1
            }
            v66.i32[v60] = _S2;
            v10[v60++] = _S1;
          }
          while (v60 != 4);
          v63 = vsubq_f32(*(float32x4_t *)(v56 + 16 * v58), v66);
          v64 = (int8x16_t)vmulq_f32(v63, v63);
          if (vaddv_f32(vadd_f32(*(float32x2_t *)v64.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL))) > (float)(a5 * a5))
            break;
          ++v58;
          v10 = (_WORD *)((char *)v10 + v7);
          v59 += 16;
          v43 = v58 >= v57;
        }
        while (v58 != v57);
      }
      else
      {
        return 1;
      }
      return v43;
    default:
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Attempt to convert a non-numeric type into a half-float stream.", "!\"Unreachable code\"", "fillStreamFP16", 215);
      _os_crash();
      __break(1u);
      JUMPOUT(0x225B25610);
  }
  while (1)
  {
    *v10 = _H0;
    if (v12 - 1 == v22)
      break;
    v10 = (_WORD *)((char *)v10 + v7);
    _S1 = v11[v22 + 1];
    __asm
    {
      FCVT            H0, S1
      FCVT            S2, H0
    }
    v26 = vabds_f32(_S1, _S2);
    ++v22;
    if (_S1 != _S2 && v26 > a5)
      return v22 >= v23;
  }
LABEL_55:
  v22 = v23;
  return v22 >= v23;
}

BOOL re::fillStreamUN8(re *this, const re::GeomAttribute *a2, char *a3, uint64_t a4, float a5)
{
  unsigned int v6;
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  BOOL v12;
  float v13;
  float v14;
  unsigned int v15;
  float v16;
  float v17;
  float v18;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  double v23;
  double v24;
  unsigned int v25;
  float v26;
  float v27;
  float v28;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  float32x2_t *v34;
  char v35;
  float v36;
  float v37;
  unsigned int v38;
  float v39;
  float32x2_t v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  unsigned int v48;
  float32x4_t v49;
  float32x4_t v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  float v57;
  unsigned int v58;
  float32x4_t v59;
  int8x16_t v60;
  float32x4_t v62;

  v6 = a3;
  v8 = (char *)a2 + a4;
  switch(*((_BYTE *)this + 17))
  {
    case 4:
      if (!(*(unsigned int (**)(re *))(*(_QWORD *)this + 16))(this))
        goto LABEL_69;
      v9 = re::internal::GeomTypedAttribute<int>::operator[]((uint64_t)this, 0);
      v10 = (*(uint64_t (**)(re *))(*(_QWORD *)this + 16))(this);
      if (!v10)
        goto LABEL_69;
      v11 = 0;
      v12 = 0;
      do
      {
        v13 = *(float *)(v9 + 4 * v11);
        if (v13 > 1.0)
          v13 = 1.0;
        if (v13 >= 0.0)
          v14 = v13 * 255.0;
        else
          v14 = 0.0;
        v15 = llroundf(v14);
        *v8 = v15;
        v16 = (float)v15 / 255.0;
        v17 = *(float *)(v9 + 4 * v11);
        v18 = vabds_f32(v17, v16);
        if (v17 != v16 && v18 > a5)
          break;
        ++v11;
        v8 += v6;
        v12 = v11 >= v10;
      }
      while (v10 != v11);
      break;
    case 5:
      if (!(*(unsigned int (**)(re *))(*(_QWORD *)this + 16))(this))
        goto LABEL_69;
      v20 = re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)this, 0);
      v21 = (*(uint64_t (**)(re *))(*(_QWORD *)this + 16))(this);
      if (!v21)
        goto LABEL_69;
      v22 = 0;
      v12 = 0;
      do
      {
        v23 = *(double *)(v20 + 8 * v22);
        if (v23 > 1.0)
          v23 = 1.0;
        if (v23 >= 0.0)
          v24 = v23 * 255.0;
        else
          v24 = 0.0;
        v25 = llround(v24);
        *v8 = v25;
        v26 = *(double *)(v20 + 8 * v22);
        v27 = (double)v25 / 255.0;
        v28 = vabds_f32(v26, v27);
        if (v26 != v27 && v28 > a5)
          break;
        ++v22;
        v8 += v6;
        v12 = v22 >= v21;
      }
      while (v21 != v22);
      break;
    case 6:
      if (!(*(unsigned int (**)(re *))(*(_QWORD *)this + 16))(this))
        goto LABEL_69;
      v30 = re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)this, 0);
      v31 = (*(uint64_t (**)(re *))(*(_QWORD *)this + 16))(this);
      if (!v31)
        goto LABEL_69;
      v32 = 0;
      v12 = 0;
      do
      {
        v33 = 0;
        v34 = (float32x2_t *)(v30 + 8 * v32);
        v62.i64[0] = 0;
        v35 = 1;
        do
        {
          v36 = v34->f32[v33];
          if (v36 > 1.0)
            v36 = 1.0;
          if (v36 >= 0.0)
            v37 = v36 * 255.0;
          else
            v37 = 0.0;
          v38 = llroundf(v37);
          v8[v33] = v38;
          v39 = (float)v38;
          LOBYTE(v38) = v35;
          v62.f32[v33] = v39 / 255.0;
          v33 = 1;
          v35 = 0;
        }
        while ((v38 & 1) != 0);
        v40 = vsub_f32(*v34, *(float32x2_t *)v62.f32);
        if (vaddv_f32(vmul_f32(v40, v40)) > (float)(a5 * a5))
          break;
        ++v32;
        v8 += v6;
        v12 = v32 >= v31;
      }
      while (v32 != v31);
      break;
    case 7:
      if (!(*(unsigned int (**)(re *))(*(_QWORD *)this + 16))(this))
        goto LABEL_69;
      v41 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)this, 0);
      v42 = (*(uint64_t (**)(re *))(*(_QWORD *)this + 16))(this);
      if (!v42)
        goto LABEL_69;
      v43 = 0;
      v12 = 0;
      v44 = v41;
      do
      {
        v45 = 0;
        v62 = 0uLL;
        do
        {
          v46 = *(float *)(v44 + 4 * v45);
          if (v46 > 1.0)
            v46 = 1.0;
          if (v46 >= 0.0)
            v47 = v46 * 255.0;
          else
            v47 = 0.0;
          v48 = llroundf(v47);
          v8[v45] = v48;
          v62.f32[v45++] = (float)v48 / 255.0;
        }
        while (v45 != 3);
        v49 = vsubq_f32(*(float32x4_t *)(v41 + 16 * v43), v62);
        v50 = vmulq_f32(v49, v49);
        if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), vaddq_f32(v50, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1))).f32[0] > (float)(a5 * a5))break;
        ++v43;
        v8 += v6;
        v44 += 16;
        v12 = v43 >= v42;
      }
      while (v43 != v42);
      break;
    case 8:
      if ((*(unsigned int (**)(re *))(*(_QWORD *)this + 16))(this)
        && (v51 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)this, 0),
            (v52 = (*(uint64_t (**)(re *))(*(_QWORD *)this + 16))(this)) != 0))
      {
        v53 = 0;
        v12 = 0;
        v54 = v51;
        do
        {
          v55 = 0;
          v62 = 0uLL;
          do
          {
            v56 = *(float *)(v54 + 4 * v55);
            if (v56 > 1.0)
              v56 = 1.0;
            if (v56 >= 0.0)
              v57 = v56 * 255.0;
            else
              v57 = 0.0;
            v58 = llroundf(v57);
            v8[v55] = v58;
            v62.f32[v55++] = (float)v58 / 255.0;
          }
          while (v55 != 4);
          v59 = vsubq_f32(*(float32x4_t *)(v51 + 16 * v53), v62);
          v60 = (int8x16_t)vmulq_f32(v59, v59);
          if (vaddv_f32(vadd_f32(*(float32x2_t *)v60.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL))) > (float)(a5 * a5))
            break;
          ++v53;
          v8 += v6;
          v54 += 16;
          v12 = v53 >= v52;
        }
        while (v53 != v52);
      }
      else
      {
LABEL_69:
        v12 = 1;
      }
      break;
    default:
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Attempt to convert a non-numeric type into a uint8 stream.", "!\"Unreachable code\"", "fillStreamUN8", 247);
      _os_crash();
      __break(1u);
      JUMPOUT(0x225B25AE8);
  }
  return v12;
}

BOOL re::fillStreamSN8(re *this, const re::GeomAttribute *a2, char *a3, uint64_t a4, float a5)
{
  unsigned int v6;
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  BOOL v12;
  float v13;
  float v14;
  BOOL v15;
  float v16;
  int v17;
  float v18;
  float v19;
  float v20;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  double v25;
  double v26;
  int v27;
  float v28;
  double v29;
  float v30;
  float v31;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t i;
  uint64_t v37;
  float32x2_t *v38;
  char v39;
  float v40;
  float v41;
  float v42;
  int v43;
  char v44;
  float v45;
  float32x2_t v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  float v53;
  float v54;
  int v55;
  float v56;
  float32x4_t v57;
  float32x4_t v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  float v65;
  float v66;
  int v67;
  float v68;
  float32x4_t v69;
  int8x16_t v70;
  float32x4_t v72;

  v6 = a3;
  v8 = (char *)a2 + a4;
  switch(*((_BYTE *)this + 17))
  {
    case 4:
      if (!(*(unsigned int (**)(re *))(*(_QWORD *)this + 16))(this))
        goto LABEL_75;
      v9 = re::internal::GeomTypedAttribute<int>::operator[]((uint64_t)this, 0);
      v10 = (*(uint64_t (**)(re *))(*(_QWORD *)this + 16))(this);
      if (!v10)
        goto LABEL_75;
      v11 = 0;
      v12 = 0;
      do
      {
        v13 = *(float *)(v9 + 4 * v11);
        if (v13 > 1.0)
          v13 = 1.0;
        v14 = v13 * 127.0;
        v15 = v13 < -1.0;
        v16 = -127.0;
        if (!v15)
          v16 = v14;
        v17 = llroundf(v16);
        *v8 = v17;
        v18 = *(float *)(v9 + 4 * v11);
        v19 = (float)v17 / 127.0;
        if (v19 < -1.0)
          v19 = -1.0;
        v20 = vabds_f32(v18, v19);
        if (v18 != v19 && v20 > a5)
          break;
        ++v11;
        v8 += v6;
        v12 = v11 >= v10;
      }
      while (v10 != v11);
      break;
    case 5:
      if (!(*(unsigned int (**)(re *))(*(_QWORD *)this + 16))(this))
        goto LABEL_75;
      v22 = re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)this, 0);
      v23 = (*(uint64_t (**)(re *))(*(_QWORD *)this + 16))(this);
      if (!v23)
        goto LABEL_75;
      v24 = 0;
      v12 = 0;
      do
      {
        v25 = *(double *)(v22 + 8 * v24);
        if (v25 > 1.0)
          v25 = 1.0;
        if (v25 >= -1.0)
          v26 = v25 * 127.0;
        else
          v26 = -127.0;
        v27 = llround(v26);
        *v8 = v27;
        v28 = *(double *)(v22 + 8 * v24);
        v29 = (double)v27 / 127.0;
        if (v29 < -1.0)
          v29 = -1.0;
        v30 = v29;
        v31 = vabds_f32(v28, v30);
        if (v28 != v30 && v31 > a5)
          break;
        ++v24;
        v8 += v6;
        v12 = v24 >= v23;
      }
      while (v23 != v24);
      break;
    case 6:
      if (!(*(unsigned int (**)(re *))(*(_QWORD *)this + 16))(this))
        goto LABEL_75;
      v33 = re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)this, 0);
      v34 = (*(uint64_t (**)(re *))(*(_QWORD *)this + 16))(this);
      if (!v34)
        goto LABEL_75;
      v35 = 0;
      v12 = 0;
      for (i = v34; i != v35; v12 = v35 >= i)
      {
        v37 = 0;
        v38 = (float32x2_t *)(v33 + 8 * v35);
        v72.i64[0] = 0;
        v39 = 1;
        do
        {
          v40 = v38->f32[v37];
          if (v40 > 1.0)
            v40 = 1.0;
          v41 = v40 * 127.0;
          v15 = v40 < -1.0;
          v42 = -127.0;
          if (!v15)
            v42 = v41;
          v43 = llroundf(v42);
          v44 = v39;
          v8[v37] = v43;
          v45 = (float)v43 / 127.0;
          if (v45 < -1.0)
            v45 = -1.0;
          v72.f32[v37] = v45;
          v37 = 1;
          v39 = 0;
        }
        while ((v44 & 1) != 0);
        v46 = vsub_f32(*v38, *(float32x2_t *)v72.f32);
        if (vaddv_f32(vmul_f32(v46, v46)) > (float)(a5 * a5))
          break;
        ++v35;
        v8 += v6;
      }
      break;
    case 7:
      if (!(*(unsigned int (**)(re *))(*(_QWORD *)this + 16))(this))
        goto LABEL_75;
      v47 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)this, 0);
      v48 = (*(uint64_t (**)(re *))(*(_QWORD *)this + 16))(this);
      if (!v48)
        goto LABEL_75;
      v49 = 0;
      v12 = 0;
      v50 = v47;
      do
      {
        v51 = 0;
        v72 = 0uLL;
        do
        {
          v52 = *(float *)(v50 + 4 * v51);
          if (v52 > 1.0)
            v52 = 1.0;
          v53 = v52 * 127.0;
          v15 = v52 < -1.0;
          v54 = -127.0;
          if (!v15)
            v54 = v53;
          v55 = llroundf(v54);
          v8[v51] = v55;
          v56 = (float)v55 / 127.0;
          if (v56 < -1.0)
            v56 = -1.0;
          v72.f32[v51++] = v56;
        }
        while (v51 != 3);
        v57 = vsubq_f32(*(float32x4_t *)(v47 + 16 * v49), v72);
        v58 = vmulq_f32(v57, v57);
        if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1))).f32[0] > (float)(a5 * a5))break;
        ++v49;
        v8 += v6;
        v50 += 16;
        v12 = v49 >= v48;
      }
      while (v49 != v48);
      break;
    case 8:
      if ((*(unsigned int (**)(re *))(*(_QWORD *)this + 16))(this)
        && (v59 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)this, 0),
            (v60 = (*(uint64_t (**)(re *))(*(_QWORD *)this + 16))(this)) != 0))
      {
        v61 = 0;
        v12 = 0;
        v62 = v59;
        do
        {
          v63 = 0;
          v72 = 0uLL;
          do
          {
            v64 = *(float *)(v62 + 4 * v63);
            if (v64 > 1.0)
              v64 = 1.0;
            v65 = v64 * 127.0;
            v15 = v64 < -1.0;
            v66 = -127.0;
            if (!v15)
              v66 = v65;
            v67 = llroundf(v66);
            v8[v63] = v67;
            v68 = (float)v67 / 127.0;
            if (v68 < -1.0)
              v68 = -1.0;
            v72.f32[v63++] = v68;
          }
          while (v63 != 4);
          v69 = vsubq_f32(*(float32x4_t *)(v59 + 16 * v61), v72);
          v70 = (int8x16_t)vmulq_f32(v69, v69);
          if (vaddv_f32(vadd_f32(*(float32x2_t *)v70.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL))) > (float)(a5 * a5))
            break;
          ++v61;
          v8 += v6;
          v62 += 16;
          v12 = v61 >= v60;
        }
        while (v61 != v60);
      }
      else
      {
LABEL_75:
        v12 = 1;
      }
      break;
    default:
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Attempt to convert a non-numeric type into an int8 stream.", "!\"Unreachable code\"", "fillStreamSN8", 279);
      _os_crash();
      __break(1u);
      JUMPOUT(0x225B26010);
  }
  return v12;
}

id *re::ImportGraphicsResources::init(id *this, const re::ColorManager *a2, id *a3)
{
  id *v4;
  id *v5;
  __int16 v6;

  this[3] = a2;
  if (a3)
  {
    v4 = this;
    v5 = re::ObjCObject::operator=(this, a3 + 23);
    this = re::ObjCObject::operator=(v5 + 1, (id *)a3[7] + 31);
    v6 = *((_WORD *)a3 + 140);
    *((_BYTE *)v4 + 18) = *((_BYTE *)a3 + 282);
    *((_WORD *)v4 + 8) = v6;
  }
  return this;
}

void **re::ImportGraphicsResources::deinit(re::ImportGraphicsResources *this)
{
  re::HashTable<re::WeakStringID,re::mtl::CommandQueue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear((uint64_t)this + 72);
  *((_QWORD *)this + 3) = 0;
  re::ObjCObject::operator=((void **)this, 0);
  return re::ObjCObject::operator=((void **)this + 1, 0);
}

void re::HashTable<re::WeakStringID,re::mtl::CommandQueue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_26, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          v8 = v6 + v4;
          *(_DWORD *)v8 = v7 & 0x7FFFFFFF;
          *(_QWORD *)(v8 + 8) = 0;

          v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 24;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v9 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v9;
  }
}

void re::ImportGraphicsResources::~ImportGraphicsResources(re::ImportGraphicsResources *this)
{
  re::HashTable<re::WeakStringID,re::mtl::CommandQueue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)this + 9);

}

void re::ImportGraphicsResources::getOrCreateCommandQueue(uint64_t a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, _QWORD *a4@<X8>)
{
  os_unfair_lock_s *v8;
  id *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  v8 = (os_unfair_lock_s *)(a1 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v12 = *(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFLL;
  v9 = (id *)re::HashTable<re::WeakStringID,re::mtl::CommandQueue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(a1 + 72, &v12);
  if (v9)
  {
    v10 = *v9;
  }
  else
  {
    re::ImportGraphicsResources::createCommandQueue((id *)a1, *(const re::mtl::Device **)(a2 + 8), a3, (id *)&v12);
    v11 = *(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFLL;
    re::HashTable<re::WeakStringID,re::mtl::CommandQueue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addNew<re::mtl::CommandQueue&>(a1 + 72, &v11, (id *)&v12);
    v10 = (id)v12;
    v12 = 0;
  }
  *a4 = v10;
  os_unfair_lock_unlock(v8);
}

void re::ImportGraphicsResources::createCommandQueue(id *this@<X0>, const re::mtl::Device *a2@<X1>, const char *a3@<X2>, id *a4@<X8>)
{
  int v5;
  id v8;
  void *v9;
  id v10;

  if (*this)
  {
    v5 = (int)a3;
    v8 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD510], sel_alloc), sel_init);
    v9 = v8;
    if (v5)
      objc_msgSend(v8, sel_setCommitSynchronously_, 1);
    re::mtl::Device::makeCommandQueue(this, (uint64_t)v9, a4);
    if (a2)
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a2);
      v10 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*a4, "setLabel:", v10);

    }
    if (v9)

  }
  else
  {
    *a4 = 0;
  }
}

uint64_t *re::allocInfo_ImportGraphicsResources(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_411);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_411))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411C518, 0);
    *(uint64_t *)((char *)&qword_25411C528 + 6) = 0;
    qword_25411C528 = 0;
    qword_25411C538 = 0;
    qword_25411C540 = 0xFFFFFFFFLL;
    qword_25411C518 = (uint64_t)&off_24ED7DAA8;
    qword_25411C548 = (uint64_t)"ImportGraphicsResources";
    dword_25411C550 = 0;
    unk_25411C558 = 0u;
    unk_25411C568 = 0u;
    unk_25411C578 = 0u;
    qword_25411C588 = 0;
    __cxa_guard_release(&_MergedGlobals_411);
  }
  return &qword_25411C518;
}

void re::initInfo_ImportGraphicsResources(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x136231223051452ALL;
  v5[1] = "ImportGraphicsResources";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xC000000008;
  *((_DWORD *)this + 6) = 64;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_ImportGraphicsResources(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ImportGraphicsResources>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ImportGraphicsResources>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ImportGraphicsResources>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ImportGraphicsResources>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ImportGraphicsResources>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 16) = 257;
  *(_BYTE *)(a3 + 18) = 1;
  *(_DWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_DWORD *)(a3 + 104) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(a3 + 108) = 0x7FFFFFFFLL;
  *(_DWORD *)(a3 + 128) = 0;
  return result;
}

void re::internal::defaultDestruct<re::ImportGraphicsResources>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::HashTable<re::WeakStringID,re::mtl::CommandQueue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)(a3 + 72));

}

double re::internal::defaultConstructV2<re::ImportGraphicsResources>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 257;
  *(_BYTE *)(a1 + 18) = 1;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 108) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 128) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::ImportGraphicsResources>(uint64_t a1)
{
  re::HashTable<re::WeakStringID,re::mtl::CommandQueue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)(a1 + 72));

}

uint64_t re::introspect_ImportGraphicsResources(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ImportGraphicsResources", (uint64_t (*)(re::internal *))re::allocInfo_ImportGraphicsResources, (re::IntrospectionBase *(*)(void))re::initInfo_ImportGraphicsResources, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ImportGraphicsResources>, this);
}

uint64_t re::HashTable<re::WeakStringID,re::mtl::CommandQueue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + 24 * v4 + 8) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 24 * v4) & 0x7FFFFFFF;
      if ((_DWORD)v4 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v6 + 24 * v4 + 8) == v2)
        return v6 + 24 * v4 + 16;
    }
    return 0;
  }
  return v6 + 24 * v4 + 16;
}

uint64_t re::HashTable<re::WeakStringID,re::mtl::CommandQueue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addNew<re::mtl::CommandQueue&>(uint64_t a1, uint64_t *a2, id *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<re::WeakStringID,re::mtl::CommandQueue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addEmplace<re::mtl::CommandQueue&>(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 24 * v13;
    return v12 + 16;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 24 * v10 + 8) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 24 * v10) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 24 * v10;
  return v12 + 16;
}

uint64_t re::HashTable<re::WeakStringID,re::mtl::CommandQueue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addEmplace<re::mtl::CommandQueue&>(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, id *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::WeakStringID,re::mtl::CommandQueue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 24 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 24 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 24 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9 + 8) = *a4;
  v15 = *(_QWORD *)(a1 + 16) + 24 * v9;
  *(_QWORD *)(v15 + 16) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::WeakStringID,re::mtl::CommandQueue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  signed int v27;
  _BYTE v28[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v28, 0, 36);
      *(_QWORD *)&v28[36] = 0x7FFFFFFFLL;
      re::HashTable<re::WeakStringID,re::mtl::CommandQueue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)v28, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v28;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v28[8];
      *(_OWORD *)v28 = v5;
      *(_QWORD *)&v28[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v28[24];
      *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v28[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = (uint64_t *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v14 - 2) & 0x80000000) != 0)
          {
            v15 = *(v14 - 1);
            v16 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) >> 27));
            v17 = v16 ^ (v16 >> 31);
            v18 = *(unsigned int *)(a1 + 24);
            v19 = v17 % v18;
            v20 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v20 == 0x7FFFFFFF)
            {
              v20 = *(unsigned int *)(a1 + 32);
              v21 = v20;
              if ((_DWORD)v20 == (_DWORD)v18)
              {
                re::HashTable<re::WeakStringID,re::mtl::CommandQueue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, (2 * v12));
                v19 = v17 % *(unsigned int *)(a1 + 24);
                v21 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
                v15 = *(v14 - 1);
              }
              *(_DWORD *)(a1 + 32) = v21 + 1;
              v22 = *(_QWORD *)(a1 + 16);
              v23 = *(_DWORD *)(v22 + 24 * v20);
            }
            else
            {
              v22 = *(_QWORD *)(a1 + 16);
              v23 = *(_DWORD *)(v22 + 24 * v20);
              *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
            }
            v24 = 24 * v20;
            *(_DWORD *)(v22 + v24) = v23 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + v24) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v20) & 0x80000000 | *(_DWORD *)(v13 + 4 * v19);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v20 + 8) = v15;
            v25 = *(_QWORD *)(a1 + 16) + 24 * v20;
            v26 = *v14;
            *v14 = 0;
            *(_QWORD *)(v25 + 16) = v26;
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v19) = v20;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 3;
        }
        while (v11 < v10);
      }
      re::HashTable<re::WeakStringID,re::mtl::CommandQueue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v28);
    }
  }
  else
  {
    if (a2)
      v27 = a2;
    else
      v27 = 3;
  }
}

void re::HashTable<re::WeakStringID,re::mtl::CommandQueue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_26, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<re::WeakStringID,re::mtl::CommandQueue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  uint64_t v8;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          v8 = v6 + v4;
          *(_DWORD *)v8 = v7 & 0x7FFFFFFF;
          *(_QWORD *)(v8 + 8) = 0;

          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 24;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::DynamicArray<re::GeomDeformer>::add(_anonymous_namespace_ *this, uint64_t *a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::GeomDeformer>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = re::GeomDeformer::GeomDeformer(*((_QWORD *)this + 4) + 448 * v4, a2);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::DynamicArray<re::GeomDeformer>::deinit(uint64_t a1)
{
  uint64_t result;
  re::GeomDeformer *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(re::GeomDeformer **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 448 * v4;
        do
        {
          re::GeomDeformer::~GeomDeformer(v3);
          v3 = (re::GeomDeformer *)((char *)v3 + 448);
          v5 -= 448;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(re::GeomDeformer **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::GeomDeformer *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::DynamicArray<re::GeomDeformer>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::GeomDeformer>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::GeomDeformer>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::AnimationMetaData::deinit(re::AnimationMetaData *this)
{
  uint64_t v2;
  _QWORD *v3;
  double v4;
  double v5;
  uint64_t result;

  v3 = (_QWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if (*((_QWORD *)this + 9))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 9) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 16);
  }
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)this);
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 80);
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 120);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 20, v4);
  v5 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 26);
  result = *((_QWORD *)this + 38);
  if (result)
  {
    if (*((_QWORD *)this + 42))
      result = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)result + 40))(result, v5);
    *((_QWORD *)this + 42) = 0;
    *((_QWORD *)this + 39) = 0;
    *((_QWORD *)this + 40) = 0;
    *((_QWORD *)this + 38) = 0;
    ++*((_DWORD *)this + 82);
  }
  return result;
}

void generateInfluenceData(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, _anonymous_namespace_ *a6, _QWORD *a7, _anonymous_namespace_ *a8)
{
  id v15;
  id v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  id v24;
  _anonymous_namespace_ *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _anonymous_namespace_ *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  float v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _anonymous_namespace_ *v73;
  uint64_t v74;
  unsigned __int8 v75;
  __int128 v76;
  uint64_t v77;
  float v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  const char *v87;
  __int16 v88;
  int v89;
  __int16 v90;
  unint64_t v91;
  __int16 v92;
  unint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v15 = a3;
  v16 = a4;
  if (*((_QWORD *)a6 + 2))
  {
    re::DynamicString::format((re::DynamicString *)"Size of Weights = %ld", (re::DynamicString *)&v94, *((_QWORD *)a6 + 2));
    v17 = v94;
    v19 = *((_QWORD *)&v95 + 1);
    v18 = v95;
    *(_BYTE *)a1 = 0;
    v20 = 1015;
LABEL_7:
    *(_QWORD *)(a1 + 8) = v20;
    *(_QWORD *)(a1 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a1 + 24) = v17;
    *(_QWORD *)(a1 + 40) = v18;
    *(_QWORD *)(a1 + 48) = v19;
    goto LABEL_8;
  }
  if (a7[2])
  {
    re::DynamicString::format((re::DynamicString *)"Size of JointIndices = %ld", (re::DynamicString *)&v94, a7[2]);
    v17 = v94;
    v19 = *((_QWORD *)&v95 + 1);
    v18 = v95;
    *(_BYTE *)a1 = 0;
    v20 = 1016;
    goto LABEL_7;
  }
  if (*((_QWORD *)a8 + 2))
  {
    re::DynamicString::format((re::DynamicString *)"Size of InfluenceEndIndices = %ld", (re::DynamicString *)&v94, *((_QWORD *)a8 + 2));
    v17 = v94;
    v19 = *((_QWORD *)&v95 + 1);
    v18 = v95;
    *(_BYTE *)a1 = 0;
    v20 = 1017;
    goto LABEL_7;
  }
  v74 = a5;
  v21 = objc_msgSend(v15, "dataStart");
  if (!v21)
  {
    re::DynamicString::format((re::DynamicString *)"Weight Attribute stride = %ld, format = %ld", (re::DynamicString *)&v94, objc_msgSend(v15, "stride"), objc_msgSend(v15, "format"));
    v17 = v94;
    v19 = *((_QWORD *)&v95 + 1);
    v18 = v95;
    *(_BYTE *)a1 = 0;
    v20 = 1021;
    goto LABEL_7;
  }
  v22 = v21;
  if (!objc_msgSend(v16, "dataStart"))
  {
    re::DynamicString::format((re::DynamicString *)"Joint Indexes Attribute stride = %ld, format = %ld", (re::DynamicString *)&v94, objc_msgSend(v16, "stride"), objc_msgSend(v16, "format"));
    v17 = v94;
    v19 = *((_QWORD *)&v95 + 1);
    v18 = v95;
    *(_BYTE *)a1 = 0;
    v20 = 1009;
    goto LABEL_7;
  }
  v73 = a8;
  v23 = objc_msgSend(v15, "format");
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v24 = v16;
  v25 = (_anonymous_namespace_ *)objc_msgSend(v24, "format");
  v26 = v25 * a2;
  v75 = v23;
  if ((~objc_msgSend(v24, "format") & 0xA0000) != 0)
  {
    if ((~objc_msgSend(v24, "format") & 0x90000) != 0)
    {
      if ((~objc_msgSend(v24, "format") & 0x60000) != 0)
      {
        if ((~objc_msgSend(v24, "format") & 0x50000) != 0)
        {
          if ((objc_msgSend(v24, "format") & 0x20000) != 0)
          {
            v41 = objc_msgSend(v24, "dataStart");
            if (v26)
            {
              v42 = 0;
              v30 = v83;
              v43 = v84;
              while (v30 != v42)
              {
                *(_DWORD *)(v43 + 4 * v42) = *(char *)(v41 + v42);
                if (v26 == ++v42)
                  goto LABEL_49;
              }
              goto LABEL_92;
            }
          }
          else
          {
            if ((objc_msgSend(v24, "format") & 0x10000) == 0)
            {
              re::DynamicString::format((re::DynamicString *)"Format = %ld", (re::DynamicString *)&v94, objc_msgSend(v24, "format"));
              v76 = v94;
              v40 = v95;

              *(_BYTE *)a1 = 0;
              *(_QWORD *)(a1 + 8) = 1011;
              *(_QWORD *)(a1 + 16) = &re::AnimationErrorCategory(void)::instance;
              *(_OWORD *)(a1 + 24) = v76;
              *(_OWORD *)(a1 + 40) = v40;
              goto LABEL_82;
            }
            v44 = objc_msgSend(v24, "dataStart");
            if (v26)
            {
              v45 = 0;
              v30 = v83;
              v46 = v84;
              while (v30 != v45)
              {
                *(_DWORD *)(v46 + 4 * v45) = *(unsigned __int8 *)(v44 + v45);
                if (v26 == ++v45)
                  goto LABEL_49;
              }
LABEL_93:
              v79 = 0;
              v97 = 0u;
              v98 = 0u;
              v96 = 0u;
              v94 = 0u;
              v95 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v86 = 136315906;
              v87 = "operator[]";
              v88 = 1024;
              v89 = 468;
              v90 = 2048;
              v91 = v30;
              v92 = 2048;
              v93 = v30;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
          }
        }
        else
        {
          v37 = objc_msgSend(v24, "dataStart");
          if (v26)
          {
            v38 = 0;
            v30 = v83;
            v39 = v84;
            while (v30 != v38)
            {
              *(_DWORD *)(v39 + 4 * v38) = *(unsigned __int16 *)(v37 + 2 * v38);
              if (v26 == ++v38)
                goto LABEL_49;
            }
            goto LABEL_91;
          }
        }
      }
      else
      {
        v34 = objc_msgSend(v24, "dataStart");
        if (v26)
        {
          v35 = 0;
          v30 = v83;
          v36 = v84;
          while (v30 != v35)
          {
            *(_DWORD *)(v36 + 4 * v35) = *(__int16 *)(v34 + 2 * v35);
            if (v26 == ++v35)
              goto LABEL_49;
          }
          goto LABEL_90;
        }
      }
    }
    else
    {
      v31 = objc_msgSend(v24, "dataStart");
      if (v26)
      {
        v32 = 0;
        v30 = v83;
        v33 = v84;
        while (v30 != v32)
        {
          *(_DWORD *)(v33 + 4 * v32) = *(_DWORD *)(v31 + 4 * v32);
          if (v26 == ++v32)
            goto LABEL_49;
        }
        goto LABEL_88;
      }
    }
  }
  else
  {
    v27 = objc_msgSend(v24, "dataStart");
    if (v26)
    {
      v28 = 0;
      v30 = v83;
      v29 = v84;
      while (v30 != v28)
      {
        *(_DWORD *)(v29 + 4 * v28) = *(_DWORD *)(v27 + 4 * v28);
        if (v26 == ++v28)
          goto LABEL_49;
      }
      goto LABEL_87;
    }
  }
LABEL_49:
  v68 = v16;
  v69 = v15;
  v47 = v75;
  v67 = a2;

  v79 = 0;
  v80 = 0;
  v81 = 0;
  v72 = v75 * a2;
  if (!v72)
  {
LABEL_71:
    if (*((_QWORD *)v73 + 2) != v67)
    {
      re::DynamicString::format((re::DynamicString *)"InfluenceEndIndices size = %ld, vertexCount = %ld", (re::DynamicString *)&v94, *((_QWORD *)v73 + 2), v67);
      v63 = v94;
      v65 = *((_QWORD *)&v95 + 1);
      v64 = v95;
      *(_BYTE *)a1 = 0;
      v66 = 1020;
      goto LABEL_78;
    }
    *(_BYTE *)a1 = 1;
    goto LABEL_79;
  }
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v70 = v75 - 1;
  v71 = 4 * v75;
LABEL_51:
  if (!v47)
  {
    v51 = 0;
    goto LABEL_75;
  }
  v52 = 0;
  v53 = 0.0;
  v30 = v80;
  v54 = v81;
  do
  {
    if (v30 == v52)
    {
      v85 = 0;
      v97 = 0u;
      v98 = 0u;
      v96 = 0u;
      v94 = 0u;
      v95 = 0u;
      v58 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v86 = 136315906;
      v87 = "operator[]";
      v88 = 1024;
      v89 = 468;
      v90 = 2048;
      v91 = v30;
      v92 = 2048;
      v93 = v30;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_86:
      v85 = 0;
      v97 = 0u;
      v98 = 0u;
      v96 = 0u;
      v94 = 0u;
      v95 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v86 = 136315906;
      v87 = "operator[]";
      v88 = 1024;
      v89 = 468;
      v90 = 2048;
      v91 = v58;
      v92 = 2048;
      v93 = v30;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_87:
      v79 = 0;
      v97 = 0u;
      v98 = 0u;
      v96 = 0u;
      v94 = 0u;
      v95 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v86 = 136315906;
      v87 = "operator[]";
      v88 = 1024;
      v89 = 468;
      v90 = 2048;
      v91 = v30;
      v92 = 2048;
      v93 = v30;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_88:
      v79 = 0;
      v97 = 0u;
      v98 = 0u;
      v96 = 0u;
      v94 = 0u;
      v95 = 0u;
      v59 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v86 = 136315906;
      v87 = "operator[]";
      v88 = 1024;
      v89 = 468;
      v90 = 2048;
      v91 = v30;
      v92 = 2048;
      v93 = v30;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_89:
      v85 = 0;
      v97 = 0u;
      v98 = 0u;
      v96 = 0u;
      v94 = 0u;
      v95 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v86 = 136315906;
      v87 = "operator[]";
      v88 = 1024;
      v89 = 468;
      v90 = 2048;
      v91 = v59;
      v92 = 2048;
      v93 = v30;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_90:
      v79 = 0;
      v97 = 0u;
      v98 = 0u;
      v96 = 0u;
      v94 = 0u;
      v95 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v86 = 136315906;
      v87 = "operator[]";
      v88 = 1024;
      v89 = 468;
      v90 = 2048;
      v91 = v30;
      v92 = 2048;
      v93 = v30;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_91:
      v79 = 0;
      v97 = 0u;
      v98 = 0u;
      v96 = 0u;
      v94 = 0u;
      v95 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v86 = 136315906;
      v87 = "operator[]";
      v88 = 1024;
      v89 = 468;
      v90 = 2048;
      v91 = v30;
      v92 = 2048;
      v93 = v30;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_92:
      v79 = 0;
      v97 = 0u;
      v98 = 0u;
      v96 = 0u;
      v94 = 0u;
      v95 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v86 = 136315906;
      v87 = "operator[]";
      v88 = 1024;
      v89 = 468;
      v90 = 2048;
      v91 = v30;
      v92 = 2048;
      v93 = v30;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_93;
    }
    v55 = *(float *)(v22 + 4 * v52);
    *(float *)(v54 + 4 * v52) = v55;
    v53 = v53 + v55;
    ++v52;
  }
  while (v47 != v52);
  if (fabsf(v53) < 0.00001)
  {
LABEL_75:
    re::DynamicString::format((re::DynamicString *)"Vertex Index = %ld", (re::DynamicString *)&v94, v51);
    v63 = v94;
    v65 = *((_QWORD *)&v95 + 1);
    v64 = v95;
    *(_BYTE *)a1 = 0;
    v66 = 1010;
    goto LABEL_78;
  }
  v77 = v51;
  v56 = 0;
  v57 = 1;
LABEL_57:
  v30 = v80;
  if (v56 <= v80)
    v58 = v80;
  else
    v58 = v56;
  do
  {
    v78 = 0.0;
    if (v58 == v56)
      goto LABEL_86;
    v78 = *(float *)(v81 + 4 * v56) / v53;
    if (v78 > 0.0)
    {
      re::DynamicArray<float>::add(a6, &v78);
      v59 = v50 + v56;
      v30 = v83;
      if (v83 <= v50 + v56)
        goto LABEL_89;
      v60 = *(int *)(v84 + v49 + 4 * v56);
      v61 = *(_QWORD *)(v74 + 16);
      if (v61 <= v60)
      {
        re::DynamicString::format((re::DynamicString *)"Invalid Joint Index (%d), number of joints: %zu", (re::DynamicString *)&v94, *(int *)(v84 + v49 + 4 * v56), v61);
        v63 = v94;
        v65 = *((_QWORD *)&v95 + 1);
        v64 = v95;
        *(_BYTE *)a1 = 0;
        v66 = 1018;
        goto LABEL_78;
      }
      LODWORD(v94) = *(_QWORD *)(*(_QWORD *)(v74 + 32) + 8 * v60);
      re::DynamicArray<int>::add(a7, &v94);
      v57 = 0;
      if (v70 == v56++)
      {
LABEL_70:
        LODWORD(v94) = *((_QWORD *)a6 + 2);
        re::DynamicArray<int>::add(v73, &v94);
        v50 += v47;
        v51 = v77 + 1;
        v22 += v71;
        v49 += v71;
        if (v50 >= v72)
          goto LABEL_71;
        goto LABEL_51;
      }
      goto LABEL_57;
    }
    ++v56;
  }
  while (v47 != v56);
  if ((v57 & 1) == 0)
    goto LABEL_70;
  re::DynamicString::format((re::DynamicString *)"Vertex Index = %ld", (re::DynamicString *)&v94, v77);
  v63 = v94;
  v65 = *((_QWORD *)&v95 + 1);
  v64 = v95;
  *(_BYTE *)a1 = 0;
  v66 = 1019;
LABEL_78:
  *(_QWORD *)(a1 + 8) = v66;
  *(_QWORD *)(a1 + 16) = &re::AnimationErrorCategory(void)::instance;
  *(_OWORD *)(a1 + 24) = v63;
  *(_QWORD *)(a1 + 40) = v64;
  *(_QWORD *)(a1 + 48) = v65;
LABEL_79:
  v16 = v68;
  v15 = v69;
  if (v79 && v80)
    (*(void (**)(void))(*(_QWORD *)v79 + 40))();
LABEL_82:
  if (v82 && v83)
    (*(void (**)(void))(*(_QWORD *)v82 + 40))();
LABEL_8:

}

void processForMeshData(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint8_t *v16;
  uint8_t *v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  _anonymous_namespace_ *v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  uint8_t v29;
  void *v30;
  void *v31;
  const char *v32;
  void *v33;
  const char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  _QWORD *v51;
  void *v52;
  void *v53;
  const char *v54;
  __int128 v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  _anonymous_namespace_ *v59;
  _anonymous_namespace_ *v60;
  uint64_t v61;
  _anonymous_namespace_ *v62;
  unint64_t v63;
  uint64_t v64;
  uint8_t **v65;
  uint64_t *v66;
  unint64_t v67;
  id v68;
  _anonymous_namespace_ *v69;
  re *v70;
  NSObject *v71;
  NSObject *v72;
  unint64_t v73;
  _anonymous_namespace_ *v74;
  uint64_t *v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t **v79;
  _QWORD *v80;
  uint64_t v81;
  const char *v82;
  _anonymous_namespace_ *v83;
  const char *v84;
  int *v85;
  int v86;
  void *v87;
  void *v88;
  uint64_t v89;
  unint64_t v90;
  _anonymous_namespace_ *v91;
  _anonymous_namespace_ *v92;
  _anonymous_namespace_ *v93;
  uint64_t *v94;
  _anonymous_namespace_ *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t *v101;
  _QWORD *v102;
  const simd_double4x4 *v103;
  float64x2_t *v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  _OWORD *v113;
  __int128 v114;
  __int128 v115;
  int v116;
  void *v117;
  void *v118;
  const char *v119;
  void *v120;
  void *v121;
  const char *v122;
  __int128 v123;
  __int128 v124;
  void *v125;
  void *v126;
  const char *v127;
  void *v128;
  void *v129;
  const char *v130;
  __int128 v131;
  __int128 v132;
  void *v133;
  void *v134;
  const char *v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  id v143;
  id v144;
  void *v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  id v151;
  _anonymous_namespace_ *v152;
  unsigned int *v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  _BYTE *v159;
  __int128 v160;
  __int128 v161;
  void *v162;
  void *v163;
  void *v164;
  _anonymous_namespace_ *v165;
  _anonymous_namespace_ *v166;
  uint64_t *v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  _anonymous_namespace_ *v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  _anonymous_namespace_ *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  double v182;
  void *v183;
  void *v184;
  char *v185;
  void *v186;
  void *v187;
  const char *v188;
  void *v189;
  const char *v190;
  void *v191;
  void *v192;
  const char *v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  void *v200;
  const char *v201;
  void *v202;
  void *v203;
  const char *v204;
  double v205;
  void *v206;
  __int128 v207;
  __int128 v208;
  void *v209;
  float64x2_t *v210;
  const simd_double4x4 *v211;
  _anonymous_namespace_ *v212;
  uint64_t v213;
  uint64_t v214;
  id v215;
  _QWORD *v216;
  _QWORD *v217;
  uint8_t *v218;
  uint8_t *v219;
  void *v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  void *v230;
  unsigned int v231;
  _BYTE v232[32];
  __int128 v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  unint64_t v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  int v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  uint64_t v255;
  simd_double4x4 v256;
  uint8_t buf[16];
  _BYTE v258[72];
  __int128 v259;
  uint64_t v260[4];
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  uint64_t v266;
  _BYTE v267[28];
  __int16 v268;
  _BYTE v269[10];
  _BYTE v270[128];
  _BYTE v271[12];
  __int16 v272;
  int v273;
  __int16 v274;
  unint64_t v275;
  __int16 v276;
  unint64_t v277;
  uint64_t v278;
  simd_float4x4 v279;
  simd_float4x4 v280;

  v278 = *MEMORY[0x24BDAC8D0];
  v8 = a2;
  v228 = objc_msgSend(v8, "vertexCount");
  v251 = 0u;
  v252 = 0u;
  v253 = 0u;
  v254 = 0u;
  objc_msgSend(v8, "components");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v251, v270, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v252;
LABEL_3:
    v13 = 0;
    while (1)
    {
      if (*(_QWORD *)v252 != v12)
        objc_enumerationMutation(v9);
      v14 = *(void **)(*((_QWORD *)&v251 + 1) + 8 * v13);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        break;
      if (v11 == ++v13)
      {
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v251, v270, 16);
        if (!v11)
          goto LABEL_9;
        goto LABEL_3;
      }
    }
    v15 = v14;

    if (v15)
    {
      objc_msgSend(v15, "skeleton");
      v16 = (uint8_t *)objc_claimAutoreleasedReturnValue();
      v17 = v16;
      if (v16)
      {
        -[uint8_t jointPaths](v16, "jointPaths");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v18, "count");

        if (v19)
        {
          v250 = -1;
          v20 = a5[40];
          v21 = a3;
          if (v20)
          {
            v22 = 0;
            v23 = 1;
            while (*(uint8_t **)(a5[42] + 8 * v22) != v17)
            {
              v22 = v23;
              v24 = v20 > v23++;
              if (!v24)
                goto LABEL_17;
            }
            v42 = v23 - 1;
            v250 = v23 - 1;
            v249 = 0;
            v246 = 0;
            v247 = 0;
            v245 = 0;
            v248 = 0;
            if (v23)
              goto LABEL_133;
          }
          else
          {
LABEL_17:
            v249 = 0;
            v246 = 0;
            v247 = 0;
            v245 = 0;
            v248 = 0;
          }
          *(_QWORD *)buf = v17;
          v25 = (_anonymous_namespace_ *)re::DynamicArray<unsigned long>::add(a5 + 38, buf);
          v26 = 0uLL;
          *(_QWORD *)buf = 0;
          memset(v258, 0, sizeof(v258));
          *(_QWORD *)&buf[8] = &str_110;
          v259 = 0u;
          memset(v260, 0, sizeof(v260));
          v261 = 0u;
          v262 = 0x7FFFFFFF00000000uLL;
          v28 = *(_QWORD *)(a3 + 8);
          v27 = *(_QWORD *)(a3 + 16);
          if (v27 >= v28)
          {
            v35 = v27 + 1;
            if (v28 < v27 + 1)
            {
              if (*(_QWORD *)a3)
              {
                v36 = 2 * v28;
                if (!v28)
                  v36 = 8;
                if (v36 <= v35)
                  v37 = v35;
                else
                  v37 = v36;
                re::DynamicArray<re::ModelIOSkeleton>::setCapacity((_QWORD *)a3, v37);
              }
              else
              {
                re::DynamicArray<re::ModelIOSkeleton>::setCapacity((_QWORD *)a3, v35);
                ++*(_DWORD *)(a3 + 24);
              }
              v26 = 0uLL;
            }
            v27 = *(_QWORD *)(a3 + 16);
            v29 = buf[0];
          }
          else
          {
            v29 = 0;
          }
          v43 = *(_QWORD *)(a3 + 32) + 168 * v27;
          *(_QWORD *)v43 = *(_QWORD *)v43 & 0xFFFFFFFFFFFFFFFELL | v29 & 1;
          *(_QWORD *)v43 = *(_QWORD *)buf & 0xFFFFFFFFFFFFFFFELL | v29 & 1;
          *(_QWORD *)(v43 + 8) = *(_QWORD *)&buf[8];
          *(_QWORD *)&buf[8] = &str_110;
          *(_QWORD *)buf = 0;
          *(_DWORD *)(v43 + 16) = *(_DWORD *)v258;
          *(_QWORD *)(v43 + 32) = 0;
          *(_QWORD *)(v43 + 40) = 0;
          *(_QWORD *)(v43 + 24) = 0;
          *(_QWORD *)(v43 + 24) = *(_QWORD *)&v258[8];
          *(_QWORD *)&v258[8] = 0;
          *(_QWORD *)(v43 + 32) = *(_QWORD *)&v258[16];
          *(_QWORD *)&v258[16] = 0;
          v44 = *(_QWORD *)(v43 + 40);
          *(_QWORD *)(v43 + 40) = *(_QWORD *)&v258[24];
          *(_QWORD *)&v258[24] = v44;
          *(_QWORD *)(v43 + 56) = 0;
          *(_QWORD *)(v43 + 64) = 0;
          *(_QWORD *)(v43 + 48) = 0;
          *(_QWORD *)(v43 + 48) = *(_QWORD *)&v258[32];
          *(_QWORD *)&v258[32] = 0;
          *(_QWORD *)(v43 + 56) = *(_QWORD *)&v258[40];
          *(_QWORD *)&v258[40] = 0;
          v45 = *(_QWORD *)(v43 + 64);
          *(_QWORD *)(v43 + 64) = *(_QWORD *)&v258[48];
          *(_QWORD *)&v258[48] = v45;
          *(_QWORD *)(v43 + 72) = 0;
          *(_QWORD *)(v43 + 80) = 0;
          *(_QWORD *)(v43 + 88) = 0;
          *(_QWORD *)(v43 + 72) = *(_QWORD *)&v258[56];
          *(_QWORD *)&v258[56] = 0;
          *(_QWORD *)(v43 + 80) = *(_QWORD *)&v258[64];
          *(_QWORD *)&v258[64] = 0;
          v46 = *(_QWORD *)(v43 + 88);
          *(_QWORD *)(v43 + 88) = v259;
          *(_QWORD *)&v259 = v46;
          *(_QWORD *)(v43 + 96) = 0;
          *(_QWORD *)(v43 + 104) = 0;
          *(_QWORD *)(v43 + 112) = 0;
          *(_QWORD *)(v43 + 96) = *((_QWORD *)&v259 + 1);
          *((_QWORD *)&v259 + 1) = 0;
          *(_QWORD *)(v43 + 104) = v260[0];
          v260[0] = 0;
          v47 = *(_QWORD *)(v43 + 112);
          *(_QWORD *)(v43 + 112) = v260[1];
          v260[1] = v47;
          *(_DWORD *)(v43 + 152) = 0;
          *(_OWORD *)(v43 + 136) = v26;
          *(_OWORD *)(v43 + 120) = v26;
          *(_QWORD *)(v43 + 156) = 0x7FFFFFFFLL;
          *(_QWORD *)(v43 + 120) = v260[2];
          v260[2] = 0;
          v48 = *(_QWORD *)(v43 + 128);
          *(_QWORD *)(v43 + 128) = v260[3];
          v260[3] = v48;
          v49 = *(_QWORD *)(v43 + 136);
          *(_QWORD *)(v43 + 136) = v261;
          *(_QWORD *)&v261 = v49;
          LODWORD(v49) = *(_DWORD *)(v43 + 144);
          *(_DWORD *)(v43 + 144) = DWORD2(v261);
          DWORD2(v261) = v49;
          LODWORD(v49) = *(_DWORD *)(v43 + 148);
          *(_DWORD *)(v43 + 148) = HIDWORD(v261);
          HIDWORD(v261) = v49;
          LODWORD(v49) = *(_DWORD *)(v43 + 152);
          *(_DWORD *)(v43 + 152) = v262;
          LODWORD(v262) = v49;
          LODWORD(v49) = *(_DWORD *)(v43 + 156);
          *(_DWORD *)(v43 + 156) = DWORD1(v262);
          DWORD1(v262) = v49;
          ++*(_QWORD *)(a3 + 16);
          ++*(_DWORD *)(a3 + 24);
          v50 = re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(&v260[2]);
          if (*((_QWORD *)&v259 + 1))
          {
            if (v260[0])
            {
              (*(void (**)(double))(**((_QWORD **)&v259 + 1) + 40))(v50);
              v260[0] = 0;
              v260[1] = 0;
            }
            *((_QWORD *)&v259 + 1) = 0;
          }
          re::FixedArray<re::StringID>::deinit(&v258[56]);
          if (*(_QWORD *)&v258[32])
          {
            if (*(_QWORD *)&v258[40])
            {
              (*(void (**)(void))(**(_QWORD **)&v258[32] + 40))();
              *(_QWORD *)&v258[40] = 0;
              *(_QWORD *)&v258[48] = 0;
            }
            *(_QWORD *)&v258[32] = 0;
          }
          if (*(_QWORD *)&v258[8])
          {
            if (*(_QWORD *)&v258[16])
            {
              (*(void (**)(void))(**(_QWORD **)&v258[8] + 40))();
              *(_OWORD *)&v258[16] = 0uLL;
            }
            *(_QWORD *)&v258[8] = 0;
          }
          re::StringID::destroyString((re::StringID *)buf);
          v224 = *(_QWORD *)(a3 + 32);
          v225 = *(_QWORD *)(a3 + 16) - 1;
          v51 = (_QWORD *)(v224 + 168 * v225);
          -[uint8_t name](v17, "name");
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          v53 = v52;
          if (v52)
          {
            v52 = (void *)objc_msgSend(objc_retainAutorelease(v52), "UTF8String");
            v54 = (const char *)v52;
          }
          else
          {
            v54 = "(unnamed)";
          }
          v256.columns[0].f64[0] = 0.0;
          *(_QWORD *)&v256.columns[0].f64[1] = &str_110;
          v55 = *(_OWORD *)v256.columns[0].f64;
          v256.columns[0].f64[0] = 0.0;
          *(_QWORD *)&v256.columns[0].f64[1] = &str_110;
          v56 = v51[1];
          v57 = v55 & 0xFFFFFFFFFFFFFFFELL | *v51 & 1;
          v51[1] = *((_QWORD *)&v55 + 1);
          *(_QWORD *)&buf[8] = v56;
          *(_QWORD *)buf = v57;
          *v51 = v55;
          re::StringID::destroyString((re::StringID *)buf);
          re::StringID::destroyString((re::StringID *)&v256);

          -[uint8_t jointPaths](v17, "jointPaths");
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v58)
          {
            objc_msgSend(v8, "name");
            v117 = (void *)objc_claimAutoreleasedReturnValue();
            v118 = v117;
            if (v117)
              v119 = (const char *)objc_msgSend(objc_retainAutorelease(v117), "UTF8String");
            else
              v119 = "(unnamed)";
            re::DynamicString::format((re::DynamicString *)"Processing mesh \"%s\"", (re::DynamicString *)buf, v119);
            v123 = *(_OWORD *)buf;
            v124 = *(_OWORD *)v258;
            *(_BYTE *)a1 = 0;
            *(_QWORD *)(a1 + 8) = 1003;
            *(_QWORD *)(a1 + 16) = &re::AnimationErrorCategory(void)::instance;
            *(_OWORD *)(a1 + 24) = v123;
            *(_OWORD *)(a1 + 40) = v124;

LABEL_209:
            if (v245)
            {
              if (v249)
                (*(void (**)(void))(*(_QWORD *)v245 + 40))();
              v249 = 0;
            }
            goto LABEL_213;
          }
          v213 = a4;
          v215 = v15;
          v216 = a5;
          v218 = v17;
          v220 = v8;
          v222 = a1;
          v230 = v58;
          v59 = (_anonymous_namespace_ *)objc_msgSend(v58, "count");
          if (v59)
          {
            v61 = 0;
            v62 = 0;
            v63 = v224 + 168 * v225;
            v64 = v63 + 120;
            v65 = (uint8_t **)(v63 + 80);
            v66 = (uint64_t *)(v63 + 88);
            v227 = 136315138;
            v67 = (unint64_t)"Duplicate joint name found in skeleton: '%s'\n";
            while (1)
            {
              objc_msgSend(v230, "objectAtIndexedSubscript:", v62);
              v68 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
              v69 = (_anonymous_namespace_ *)objc_msgSend(v68, "UTF8String");
              *(_QWORD *)v232 = 0;
              *(_QWORD *)&v232[8] = &str_110;

              v70 = (re *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v64, v232);
              if (v70)
              {
                v71 = *re::pipelineLogObjects(v70);
                if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
                {
                  v72 = v71;
                  *(_DWORD *)buf = 136315138;
                  *(_QWORD *)&buf[4] = *(_QWORD *)&v232[8];
                  _os_log_impl(&dword_224FE9000, v72, OS_LOG_TYPE_DEFAULT, "Duplicate joint name found in skeleton: '%s'\n", buf, 0xCu);

                }
              }
              else
              {
                *(_DWORD *)buf = (_DWORD)v62;
                re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v64, (StringID *)v232, buf);
              }
              v17 = *v65;
              if (*v65 <= (uint8_t *)v62)
                break;
              re::StringID::operator=((unint64_t *)(*v66 + v61), (uint64_t *)v232);
              re::StringID::destroyString((re::StringID *)v232);
              v62 = (_anonymous_namespace_ *)((char *)v62 + 1);
              v61 += 16;
              if (v59 == v62)
                goto LABEL_67;
            }
            *(_QWORD *)v267 = 0;
            memset(v258, 0, 64);
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v256.columns[0].f64[0]) = 136315906;
            *(_QWORD *)((char *)v256.columns[0].f64 + 4) = "operator[]";
            WORD2(v256.columns[0].f64[1]) = 1024;
            *(_DWORD *)((char *)&v256.columns[0].f64[1] + 6) = 468;
            WORD1(v256.columns[0].f64[2]) = 2048;
            *(_QWORD *)((char *)&v256.columns[0].f64[2] + 4) = v62;
            WORD2(v256.columns[0].f64[3]) = 2048;
            *(_QWORD *)((char *)&v256.columns[0].f64[3] + 6) = v17;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_216;
          }
LABEL_67:
          v73 = v224 + 168 * v225;
          v75 = *(uint64_t **)(v73 + 80);
          v17 = (uint8_t *)(v73 + 80);
          v66 = v75;
          if (v75)
          {
            v67 = 0;
            v76 = v224 + 168 * v225;
            v77 = (_QWORD *)(v76 + 88);
            v227 = (uint64_t)&v267[9];
            v78 = v76 + 120;
            v79 = (uint64_t **)(v76 + 104);
            v80 = (_QWORD *)(v76 + 112);
            v81 = 8;
            while ((unint64_t)v66 > v67)
            {
              v82 = *(const char **)(*v77 + v81);
              re::DynamicString::rfind((uint64_t)v232, 47, &v240);
              if ((_BYTE)v240 && v241)
              {
                v83 = (_anonymous_namespace_ *)re::DynamicString::substr((re::DynamicString *)v232, 0, v241, (re::DynamicString *)v267);
                if ((v267[8] & 1) != 0)
                  v84 = *(const char **)&v267[16];
                else
                  v84 = &v267[9];
                v235 = 0;
                v236 = &str_110;
                v85 = (int *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v78, &v235);
                v66 = *v79;
                if (v85)
                {
                  if ((unint64_t)*v79 <= v67)
                    goto LABEL_218;
                  v86 = *v85;
                }
                else
                {
                  if ((unint64_t)*v79 <= v67)
                    goto LABEL_219;
                  v86 = -1;
                }
                *(_DWORD *)(*v80 + 4 * v67) = v86;
                re::StringID::destroyString((re::StringID *)&v235);
                if (*(_QWORD *)v267 && (v267[8] & 1) != 0)
                  (*(void (**)(void))(**(_QWORD **)v267 + 40))();
              }
              else
              {
                v66 = *v79;
                if ((unint64_t)*v79 <= v67)
                  goto LABEL_217;
                *(_DWORD *)(*v80 + 4 * v67) = -1;
              }
              v74 = *(_anonymous_namespace_ **)v232;
              if (*(_QWORD *)v232 && (v232[8] & 1) != 0)
                v74 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)v232 + 40))();
              ++v67;
              v66 = *(uint64_t **)v17;
              v81 += 16;
              if (v67 >= *(_QWORD *)v17)
                goto LABEL_90;
            }
LABEL_216:
            *(_QWORD *)v232 = 0;
            memset(v258, 0, 64);
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v256.columns[0].f64[0]) = 136315906;
            *(_QWORD *)((char *)v256.columns[0].f64 + 4) = "operator[]";
            WORD2(v256.columns[0].f64[1]) = 1024;
            *(_DWORD *)((char *)&v256.columns[0].f64[1] + 6) = 468;
            WORD1(v256.columns[0].f64[2]) = 2048;
            *(_QWORD *)((char *)&v256.columns[0].f64[2] + 4) = v67;
            WORD2(v256.columns[0].f64[3]) = 2048;
            *(_QWORD *)((char *)&v256.columns[0].f64[3] + 6) = v66;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_217:
            *(_QWORD *)v267 = 0;
            memset(v258, 0, 64);
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v256.columns[0].f64[0]) = 136315906;
            *(_QWORD *)((char *)v256.columns[0].f64 + 4) = "operator[]";
            WORD2(v256.columns[0].f64[1]) = 1024;
            *(_DWORD *)((char *)&v256.columns[0].f64[1] + 6) = 468;
            WORD1(v256.columns[0].f64[2]) = 2048;
            *(_QWORD *)((char *)&v256.columns[0].f64[2] + 4) = v67;
            WORD2(v256.columns[0].f64[3]) = 2048;
            *(_QWORD *)((char *)&v256.columns[0].f64[3] + 6) = v66;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_218:
            *(_QWORD *)v271 = 0;
            memset(v258, 0, 64);
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v256.columns[0].f64[0]) = 136315906;
            *(_QWORD *)((char *)v256.columns[0].f64 + 4) = "operator[]";
            WORD2(v256.columns[0].f64[1]) = 1024;
            *(_DWORD *)((char *)&v256.columns[0].f64[1] + 6) = 468;
            WORD1(v256.columns[0].f64[2]) = 2048;
            *(_QWORD *)((char *)&v256.columns[0].f64[2] + 4) = v67;
            WORD2(v256.columns[0].f64[3]) = 2048;
            *(_QWORD *)((char *)&v256.columns[0].f64[3] + 6) = v66;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_219:
            *(_QWORD *)v271 = 0;
            memset(v258, 0, 64);
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v256.columns[0].f64[0]) = 136315906;
            *(_QWORD *)((char *)v256.columns[0].f64 + 4) = "operator[]";
            WORD2(v256.columns[0].f64[1]) = 1024;
            *(_DWORD *)((char *)&v256.columns[0].f64[1] + 6) = 468;
            WORD1(v256.columns[0].f64[2]) = 2048;
            *(_QWORD *)((char *)&v256.columns[0].f64[2] + 4) = v67;
            WORD2(v256.columns[0].f64[3]) = 2048;
            *(_QWORD *)((char *)&v256.columns[0].f64[3] + 6) = v66;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_220;
          }
LABEL_90:
          *(_DWORD *)(v224 + 168 * v225 + 16) = (_DWORD)v59;
          v17 = v218;
          -[uint8_t jointBindTransforms](v218, "jointBindTransforms");
          v87 = (void *)objc_claimAutoreleasedReturnValue();
          v88 = v87;
          if (v87)
          {
            v89 = objc_msgSend(v87, "elementCount");
            v8 = v220;
            a1 = v222;
            v15 = v215;
            if (v89)
            {
              v90 = v89;
              -[uint8_t jointRestTransforms](v218, "jointRestTransforms");
              v91 = (_anonymous_namespace_ *)objc_claimAutoreleasedReturnValue();
              v212 = v91;
              if (v91)
              {
                v240 = 0;
                v241 = 0;
                v242 = 0;
                v211 = (const simd_double4x4 *)v242;
                v92 = (_anonymous_namespace_ *)objc_msgSend(v88, "getDouble4x4Array:maxCount:");
                a5 = v216;
                a4 = v213;
                v21 = a3;
                if (v92 == (_anonymous_namespace_ *)v90)
                {
                  v235 = 0;
                  v236 = 0;
                  v237 = 0;
                  v210 = (float64x2_t *)v237;
                  v93 = (_anonymous_namespace_ *)-[_anonymous_namespace_ getDouble4x4Array:maxCount:](v212, "getDouble4x4Array:maxCount:");
                  if (v93 == (_anonymous_namespace_ *)v90)
                  {
                    v209 = v88;
                    v94 = (uint64_t *)(v224 + 168 * v225);
                    v67 = (unint64_t)(v94 + 3);
                    v97 = v94[13];
                    v96 = v94 + 13;
                    if (v97)
                    {
                      v98 = 0;
                      v99 = 0;
                      v66 = 0;
                      v100 = v224 + 168 * v225;
                      v17 = (uint8_t *)(v100 + 64);
                      v101 = (unint64_t *)(v100 + 32);
                      v102 = (_QWORD *)(v100 + 40);
                      v226 = (unint64_t *)(v100 + 56);
                      v227 = (uint64_t)v236;
                      v224 = v241;
                      v103 = v211;
                      v104 = v210 + 4;
                      while ((uint64_t *)v227 != v66)
                      {
                        v106 = v104[-4];
                        v105 = v104[-3];
                        v108 = v104[-2];
                        v107 = v104[-1];
                        v110 = *v104;
                        v109 = v104[1];
                        v112 = v104[2];
                        v111 = v104[3];
                        *(_QWORD *)&v232[8] = 1065353216;
                        *(_QWORD *)&v232[16] = 0;
                        *(_QWORD *)v232 = 0x3F8000003F800000;
                        *(_QWORD *)&v232[24] = 0x3F80000000000000;
                        v233 = 0uLL;
                        *(float32x4_t *)buf = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v106), v105);
                        *(float32x4_t *)v258 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v108), v107);
                        *(float32x4_t *)&v258[16] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v110), v109);
                        *(float32x4_t *)&v258[32] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v112), v111);
                        re::decomposeScaleRotationTranslation<float>((uint64_t)buf, (int32x4_t *)v232, &v232[16], &v233);
                        v67 = *v226;
                        if (*v226 <= (unint64_t)v66)
                          goto LABEL_221;
                        v113 = (_OWORD *)(*(_QWORD *)v17 + v98);
                        v114 = *(_OWORD *)v232;
                        v115 = v233;
                        v113[1] = *(_OWORD *)&v232[16];
                        v113[2] = v115;
                        *v113 = v114;
                        if ((uint64_t *)v224 == v66)
                          goto LABEL_222;
                        v279.columns[2] = *(simd_float4 *)v256.columns[1].f64;
                        v279.columns[3] = *(simd_float4 *)&v256.columns[1].f64[2];
                        v279.columns[0] = *(simd_float4 *)v256.columns[0].f64;
                        v279.columns[1] = *(simd_float4 *)&v256.columns[0].f64[2];
                        v280 = __invert_f4(v279);
                        v67 = *v101;
                        if (*v101 <= (unint64_t)v66)
                          goto LABEL_223;
                        *(simd_float4x4 *)(*v102 + v99) = v280;
                        v66 = (uint64_t *)((char *)v66 + 1);
                        v99 += 64;
                        ++v103;
                        v98 += 48;
                        v104 += 8;
                        if ((unint64_t)v66 >= *v96)
                          goto LABEL_102;
                      }
LABEL_220:
                      *(_QWORD *)v232 = 0;
                      memset(v258, 0, 64);
                      *(_OWORD *)buf = 0u;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v256.columns[0].f64[0]) = 136315906;
                      *(_QWORD *)((char *)v256.columns[0].f64 + 4) = "operator[]";
                      WORD2(v256.columns[0].f64[1]) = 1024;
                      *(_DWORD *)((char *)&v256.columns[0].f64[1] + 6) = 468;
                      WORD1(v256.columns[0].f64[2]) = 2048;
                      *(_QWORD *)((char *)&v256.columns[0].f64[2] + 4) = v227;
                      WORD2(v256.columns[0].f64[3]) = 2048;
                      *(_QWORD *)((char *)&v256.columns[0].f64[3] + 6) = v227;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_221:
                      *(_QWORD *)v267 = 0;
                      memset(v258, 0, 64);
                      *(_OWORD *)buf = 0u;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v256.columns[0].f64[0]) = 136315906;
                      *(_QWORD *)((char *)v256.columns[0].f64 + 4) = "operator[]";
                      WORD2(v256.columns[0].f64[1]) = 1024;
                      *(_DWORD *)((char *)&v256.columns[0].f64[1] + 6) = 468;
                      WORD1(v256.columns[0].f64[2]) = 2048;
                      *(_QWORD *)((char *)&v256.columns[0].f64[2] + 4) = v66;
                      WORD2(v256.columns[0].f64[3]) = 2048;
                      *(_QWORD *)((char *)&v256.columns[0].f64[3] + 6) = v67;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_222:
                      *(_QWORD *)v267 = 0;
                      memset(v258, 0, 64);
                      *(_OWORD *)buf = 0u;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v256.columns[0].f64[0]) = 136315906;
                      *(_QWORD *)((char *)v256.columns[0].f64 + 4) = "operator[]";
                      WORD2(v256.columns[0].f64[1]) = 1024;
                      *(_DWORD *)((char *)&v256.columns[0].f64[1] + 6) = 468;
                      WORD1(v256.columns[0].f64[2]) = 2048;
                      *(_QWORD *)((char *)&v256.columns[0].f64[2] + 4) = v224;
                      WORD2(v256.columns[0].f64[3]) = 2048;
                      *(_QWORD *)((char *)&v256.columns[0].f64[3] + 6) = v224;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_223:
                      *(_QWORD *)v271 = 0;
                      memset(v258, 0, 64);
                      *(_OWORD *)buf = 0u;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v267 = 136315906;
                      *(_QWORD *)&v267[4] = "operator[]";
                      *(_WORD *)&v267[12] = 1024;
                      *(_DWORD *)&v267[14] = 468;
                      *(_WORD *)&v267[18] = 2048;
                      *(_QWORD *)&v267[20] = v66;
                      v268 = 2048;
                      *(_QWORD *)v269 = v67;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
                      goto LABEL_224;
                    }
LABEL_102:
                    v116 = 0;
                    v21 = a3;
                    v42 = *(_DWORD *)(a3 + 16) - 1;
                    v250 = v42;
                    v17 = v218;
                    v8 = v220;
                    v15 = v215;
                    a5 = v216;
                    a1 = v222;
                    a4 = v213;
                    v88 = v209;
                  }
                  else
                  {
                    objc_msgSend(v220, "name");
                    v133 = (void *)objc_claimAutoreleasedReturnValue();
                    v134 = v133;
                    if (v133)
                      v135 = (const char *)objc_msgSend(objc_retainAutorelease(v133), "UTF8String");
                    else
                      v135 = "(unnamed)";
                    re::DynamicString::format((re::DynamicString *)"Incorrect number of rest transforms for \"%s\".", (re::DynamicString *)buf, v135);
                    v140 = *(_OWORD *)buf;
                    v141 = *(_OWORD *)v258;
                    *(_BYTE *)v222 = 0;
                    *(_QWORD *)(v222 + 8) = 1029;
                    *(_QWORD *)(v222 + 16) = &re::AnimationErrorCategory(void)::instance;
                    *(_OWORD *)(v222 + 24) = v140;
                    *(_OWORD *)(v222 + 40) = v141;

                    v116 = 1;
                    v42 = -1;
                  }
                  if (v235 && v236)
                    (*(void (**)(void))(*(_QWORD *)v235 + 40))();
                }
                else
                {
                  objc_msgSend(v220, "name");
                  v128 = (void *)objc_claimAutoreleasedReturnValue();
                  v129 = v128;
                  if (v128)
                    v130 = (const char *)objc_msgSend(objc_retainAutorelease(v128), "UTF8String");
                  else
                    v130 = "(unnamed)";
                  re::DynamicString::format((re::DynamicString *)"Incorrect number of bind transforms for \"%s\".", (re::DynamicString *)buf, v130);
                  v138 = *(_OWORD *)buf;
                  v139 = *(_OWORD *)v258;
                  *(_BYTE *)v222 = 0;
                  *(_QWORD *)(v222 + 8) = 1005;
                  *(_QWORD *)(v222 + 16) = &re::AnimationErrorCategory(void)::instance;
                  *(_OWORD *)(v222 + 24) = v138;
                  *(_OWORD *)(v222 + 40) = v139;

                  v116 = 1;
                  v42 = -1;
                }
                if (v240 && v241)
                  (*(void (**)(void))(*(_QWORD *)v240 + 40))();
              }
              else
              {
                objc_msgSend(v220, "name");
                v125 = (void *)objc_claimAutoreleasedReturnValue();
                v126 = v125;
                a5 = v216;
                a4 = v213;
                v21 = a3;
                if (v125)
                  v127 = (const char *)objc_msgSend(objc_retainAutorelease(v125), "UTF8String");
                else
                  v127 = "(unnamed)";
                re::DynamicString::format((re::DynamicString *)"Processing mesh \"%s\"", (re::DynamicString *)buf, v127);
                v136 = *(_OWORD *)buf;
                v137 = *(_OWORD *)v258;
                *(_BYTE *)v222 = 0;
                *(_QWORD *)(v222 + 8) = 1028;
                *(_QWORD *)(v222 + 16) = &re::AnimationErrorCategory(void)::instance;
                *(_OWORD *)(v222 + 24) = v136;
                *(_OWORD *)(v222 + 40) = v137;

                v116 = 1;
                v42 = -1;
              }

              if (v116)
                goto LABEL_209;
LABEL_133:
              v223 = a1;
              v219 = v17;
              v17 = (uint8_t *)v42;
              v66 = *(uint64_t **)(v21 + 16);
              v231 = v42;
              if ((unint64_t)v66 <= v42)
                goto LABEL_227;
              v214 = a4;
              v217 = a5;
              v221 = v8;
              v142 = *(_QWORD *)(v21 + 32);
              v143 = v15;
              v144 = v15;
              objc_msgSend(v144, "jointPaths");
              v145 = (void *)objc_claimAutoreleasedReturnValue();
              v146 = objc_msgSend(v145, "count");

              v147 = v146;
              if (v146)
              {
                v148 = 0;
                v149 = v142 + 168 * v17 + 120;
                while (1)
                {
                  objc_msgSend(v144, "jointPaths");
                  v150 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v150, "objectAtIndexedSubscript:", v148);
                  v151 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                  v152 = (_anonymous_namespace_ *)objc_msgSend(v151, "UTF8String");
                  v256.columns[0].f64[0] = 0.0;
                  *(_QWORD *)&v256.columns[0].f64[1] = &str_110;

                  v153 = (unsigned int *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v149, &v256);
                  if (!v153)
                    break;
                  *(_QWORD *)buf = *v153;
                  re::DynamicArray<unsigned long>::add(&v245, buf);
                  re::StringID::destroyString((re::StringID *)&v256);
                  if (v147 == ++v148)
                    goto LABEL_142;
                }
                re::DynamicString::format((re::DynamicString *)"Joint \"%s\" missing from skeleton while remapping joints.", (re::DynamicString *)buf, *(_QWORD *)&v256.columns[0].f64[1]);
                v160 = *(_OWORD *)buf;
                v161 = *(_OWORD *)v258;
                v159 = (_BYTE *)v223;
                *(_BYTE *)v223 = 0;
                *(_QWORD *)(v223 + 8) = 1000;
                *(_QWORD *)(v223 + 16) = &re::AnimationErrorCategory(void)::instance;
                *(_OWORD *)(v223 + 24) = v160;
                *(_OWORD *)(v223 + 40) = v161;
                re::StringID::destroyString((re::StringID *)&v256);
              }
              else
              {
                v154 = v142 + 168 * v17;
                v156 = *(_QWORD *)(v154 + 80);
                v155 = (_QWORD *)(v154 + 80);
                if (v156)
                {
                  v157 = 0;
                  v158 = 1;
                  do
                  {
                    *(_QWORD *)buf = v157;
                    re::DynamicArray<unsigned long>::add(&v245, buf);
                    v157 = v158;
                    v24 = *v155 > (unint64_t)v158++;
                  }
                  while (v24);
                }
LABEL_142:
                v159 = (_BYTE *)v223;
                *(_BYTE *)v223 = 1;
              }

              v17 = v219;
              v8 = v221;
              v15 = v143;
              if (!*v159)
                goto LABEL_209;
              objc_msgSend(v221, "vertexAttributeDataForAttributeNamed:", *MEMORY[0x24BDDE6A8]);
              v162 = (void *)objc_claimAutoreleasedReturnValue();
              v163 = v162;
              if (v162)
              {
                if ((objc_msgSend(v162, "format") & 0xC0000) != 0)
                {
                  objc_msgSend(v221, "vertexAttributeDataForAttributeNamed:", *MEMORY[0x24BDDE6A0]);
                  v164 = (void *)objc_claimAutoreleasedReturnValue();
                  if (!v164)
                  {
                    objc_msgSend(v221, "name");
                    v191 = (void *)objc_claimAutoreleasedReturnValue();
                    v192 = v191;
                    if (v191)
                      v193 = (const char *)objc_msgSend(objc_retainAutorelease(v191), "UTF8String");
                    else
                      v193 = "(unnamed)";
                    re::DynamicString::format((re::DynamicString *)"Processing mesh \"%s\"", (re::DynamicString *)buf, v193);
                    v207 = *(_OWORD *)buf;
                    v208 = *(_OWORD *)v258;
                    *(_BYTE *)v223 = 0;
                    *(_QWORD *)(v223 + 8) = 1008;
                    *(_QWORD *)(v223 + 16) = &re::AnimationErrorCategory(void)::instance;
                    *(_OWORD *)(v223 + 24) = v207;
                    *(_OWORD *)(v223 + 40) = v208;

LABEL_207:
                    goto LABEL_208;
                  }
                  *(_QWORD *)&v269[2] = 0;
                  memset(v267, 0, sizeof(v267));
                  v244 = 0;
                  v241 = 0;
                  v242 = 0;
                  v239 = 0;
                  v240 = 0;
                  v243 = 0;
                  v236 = 0;
                  v237 = 0;
                  v235 = 0;
                  v238 = 0;
                  generateInfluenceData((uint64_t)v232, v228, v163, v164, (uint64_t)&v245, (_anonymous_namespace_ *)v267, &v240, (_anonymous_namespace_ *)&v235);
                  if (v232[0])
                  {
                    *(_OWORD *)buf = 0u;
                    memset(v258, 0, 48);
                    v17 = buf;
                    v165 = re::DynamicString::DynamicString((re::DynamicString *)&v258[56]);
                    v266 = 0;
                    v265 = 0u;
                    v264 = 0u;
                    v263 = 0u;
                    v262 = 0u;
                    v261 = 0u;
                    memset(v260, 0, sizeof(v260));
                    v67 = v237;
                    v167 = (uint64_t *)v237;
                    if (v237)
                    {
                      v168 = 0;
                      v169 = v239;
                      v66 = (uint64_t *)*((_QWORD *)&v262 + 1);
                      v170 = v263;
                      while (v66 != v168)
                      {
                        *(_DWORD *)(v170 + 4 * (_QWORD)v168) = *(_DWORD *)(v169 + 4 * (_QWORD)v168);
                        v168 = (uint64_t *)((char *)v168 + 1);
                        if (v167 == v168)
                          goto LABEL_153;
                      }
LABEL_224:
                      v255 = 0;
                      memset(&v256, 0, 80);
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v271 = 136315906;
                      *(_QWORD *)&v271[4] = "operator[]";
                      v272 = 1024;
                      v273 = 468;
                      v274 = 2048;
                      v275 = (unint64_t)v66;
                      v276 = 2048;
                      v277 = (unint64_t)v66;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_225:
                      v255 = 0;
                      memset(&v256, 0, 80);
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v271 = 136315906;
                      *(_QWORD *)&v271[4] = "operator[]";
                      v272 = 1024;
                      v273 = 468;
                      v274 = 2048;
                      v275 = (unint64_t)v66;
                      v276 = 2048;
                      v277 = (unint64_t)v66;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_226:
                      v255 = 0;
                      memset(&v256, 0, 80);
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v271 = 136315906;
                      *(_QWORD *)&v271[4] = "operator[]";
                      v272 = 1024;
                      v273 = 468;
                      v274 = 2048;
                      v275 = v67;
                      v276 = 2048;
                      v277 = v67;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_227:
                      *(_QWORD *)v232 = 0;
                      memset(v258, 0, 64);
                      *(_OWORD *)buf = 0u;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      LODWORD(v256.columns[0].f64[0]) = 136315906;
                      *(_QWORD *)((char *)v256.columns[0].f64 + 4) = "operator[]";
                      WORD2(v256.columns[0].f64[1]) = 1024;
                      *(_DWORD *)((char *)&v256.columns[0].f64[1] + 6) = 789;
                      WORD1(v256.columns[0].f64[2]) = 2048;
                      *(_QWORD *)((char *)&v256.columns[0].f64[2] + 4) = v17;
                      WORD2(v256.columns[0].f64[3]) = 2048;
                      *(_QWORD *)((char *)&v256.columns[0].f64[3] + 6) = v66;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
                    }
LABEL_153:
                    v67 = *(_QWORD *)&v267[16];
                    v172 = *(uint64_t **)&v267[16];
                    if (*(_QWORD *)&v267[16])
                    {
                      v173 = 0;
                      v174 = *(_QWORD *)&v269[2];
                      v175 = v260[2];
                      v66 = (uint64_t *)v260[1];
                      while (v66 != v173)
                      {
                        *(_DWORD *)(v175 + 4 * (_QWORD)v173) = *(_DWORD *)(v174 + 4 * (_QWORD)v173);
                        v173 = (uint64_t *)((char *)v173 + 1);
                        if (v172 == v173)
                          goto LABEL_157;
                      }
                      goto LABEL_225;
                    }
LABEL_157:
                    v176 = v242;
                    v178 = v242;
                    v17 = v219;
                    if (v242)
                    {
                      v179 = 0;
                      v180 = v244;
                      v181 = *((_QWORD *)&v261 + 1);
                      v67 = v261;
                      while (v67 != v179)
                      {
                        *(_DWORD *)(v181 + 4 * v179) = *(_DWORD *)(v180 + 4 * v179);
                        if (v178 == ++v179)
                          goto LABEL_161;
                      }
                      goto LABEL_226;
                    }
LABEL_161:
                    *((_QWORD *)&v265 + 1) = 0;
                    objc_msgSend(v144, "geometryBindTransform");
                    *(_DWORD *)&v258[48] = v231;
                    objc_msgSend(v221, "name", v182);
                    v183 = (void *)objc_claimAutoreleasedReturnValue();
                    v184 = v183;
                    if (v183)
                      v185 = (char *)objc_msgSend(objc_retainAutorelease(v183), "UTF8String");
                    else
                      v185 = "(unnamed)";
                    re::DynamicString::operator=((re::DynamicString *)&v258[56], v185);

                    v8 = v221;
                    objc_msgSend(v221, "name", re::DynamicArray<re::ModelIOSkinningData>::add(v214, (uint64_t)buf));
                    v199 = (void *)objc_claimAutoreleasedReturnValue();
                    v200 = v199;
                    if (v199)
                    {
                      v199 = (void *)objc_msgSend(objc_retainAutorelease(v199), "UTF8String");
                      v201 = (const char *)v199;
                    }
                    else
                    {
                      v201 = "(unnamed)";
                    }
                    re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned int &>((uint64_t)(v217 + 20), (re::DynamicString *)&v256, &v250);
                    if (*(_QWORD *)&v256.columns[0].f64[0])
                    {
                      if ((LOBYTE(v256.columns[0].f64[1]) & 1) != 0)
                        (*(void (**)(void))(**(_QWORD **)&v256.columns[0].f64[0] + 40))();
                      memset(&v256, 0, 32);
                    }

                    -[uint8_t name](v219, "name");
                    v202 = (void *)objc_claimAutoreleasedReturnValue();
                    v203 = v202;
                    if (v202)
                    {
                      v202 = (void *)objc_msgSend(objc_retainAutorelease(v202), "UTF8String");
                      v204 = (const char *)v202;
                    }
                    else
                    {
                      v204 = "(unnamed)";
                    }
                    v205 = re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)(v217 + 10), &v256);
                    if (*(_QWORD *)&v256.columns[0].f64[0])
                    {
                      if ((LOBYTE(v256.columns[0].f64[1]) & 1) != 0)
                        (*(void (**)(double))(**(_QWORD **)&v256.columns[0].f64[0] + 40))(v205);
                      memset(&v256, 0, 32);
                    }

                    objc_msgSend(v144, "jointAnimation");
                    v206 = (void *)objc_claimAutoreleasedReturnValue();
                    if (v206)
                    {
                      *(_QWORD *)&v256.columns[0].f64[0] = v206;
                      re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<unsigned int &>((uint64_t)(v217 + 26), (uint64_t *)&v256, &v250);
                    }
                    *(_BYTE *)v223 = 1;

                    re::ModelIOSkinningData::~ModelIOSkinningData((re::ModelIOSkinningData *)buf);
                    if (v232[0])
                      goto LABEL_196;
                  }
                  else
                  {
                    *(_BYTE *)v223 = 0;
                    *(_OWORD *)(v223 + 8) = *(_OWORD *)&v232[8];
                    *(_QWORD *)(v223 + 24) = *(_QWORD *)&v232[24];
                    *(_QWORD *)(v223 + 48) = v234;
                    *(_OWORD *)(v223 + 32) = v233;
                    v234 = 0;
                    *(_QWORD *)&v232[24] = 0;
                    v233 = 0uLL;
                  }
                  if (*(_QWORD *)&v232[24] && (v233 & 1) != 0)
                    (*(void (**)(void))(**(_QWORD **)&v232[24] + 40))();
LABEL_196:
                  if (v235 && v239)
                    (*(void (**)(void))(*(_QWORD *)v235 + 40))();
                  if (v240 && v244)
                    (*(void (**)(void))(*(_QWORD *)v240 + 40))();
                  if (*(_QWORD *)v267 && *(_QWORD *)&v269[2])
                    (*(void (**)(void))(**(_QWORD **)v267 + 40))();
                  goto LABEL_207;
                }
                objc_msgSend(v221, "name");
                v189 = (void *)objc_claimAutoreleasedReturnValue();
                v187 = v189;
                if (v189)
                  v190 = (const char *)objc_msgSend(objc_retainAutorelease(v189), "UTF8String");
                else
                  v190 = "(unnamed)";
                re::DynamicString::format((re::DynamicString *)"Processing mesh \"%s\"", (re::DynamicString *)buf, v190);
                v194 = *(_OWORD *)buf;
                v196 = *(_QWORD *)&v258[8];
                v195 = *(_QWORD *)v258;
                v197 = v223;
                *(_BYTE *)v223 = 0;
                v198 = 1007;
              }
              else
              {
                objc_msgSend(v221, "name");
                v186 = (void *)objc_claimAutoreleasedReturnValue();
                v187 = v186;
                if (v186)
                  v188 = (const char *)objc_msgSend(objc_retainAutorelease(v186), "UTF8String");
                else
                  v188 = "(unnamed)";
                re::DynamicString::format((re::DynamicString *)"Processing mesh \"%s\"", (re::DynamicString *)buf, v188);
                v194 = *(_OWORD *)buf;
                v196 = *(_QWORD *)&v258[8];
                v195 = *(_QWORD *)v258;
                v197 = v223;
                *(_BYTE *)v223 = 0;
                v198 = 1006;
              }
              *(_QWORD *)(v197 + 8) = v198;
              *(_QWORD *)(v197 + 16) = &re::AnimationErrorCategory(void)::instance;
              *(_OWORD *)(v197 + 24) = v194;
              *(_QWORD *)(v197 + 40) = v195;
              *(_QWORD *)(v197 + 48) = v196;

LABEL_208:
              goto LABEL_209;
            }
            objc_msgSend(v220, "name");
            v120 = (void *)objc_claimAutoreleasedReturnValue();
            v121 = v120;
            if (!v120)
            {
              v122 = "(unnamed)";
              goto LABEL_117;
            }
          }
          else
          {
            v8 = v220;
            objc_msgSend(v220, "name");
            v120 = (void *)objc_claimAutoreleasedReturnValue();
            v121 = v120;
            v15 = v215;
            if (!v120)
            {
              v122 = "(unnamed)";
              goto LABEL_117;
            }
          }
          v122 = (const char *)objc_msgSend(objc_retainAutorelease(v120), "UTF8String");
LABEL_117:
          re::DynamicString::format((re::DynamicString *)"Processing mesh \"%s\"", (re::DynamicString *)buf, v122);
          v131 = *(_OWORD *)buf;
          v132 = *(_OWORD *)v258;
          *(_BYTE *)v222 = 0;
          *(_QWORD *)(v222 + 8) = 1004;
          *(_QWORD *)(v222 + 16) = &re::AnimationErrorCategory(void)::instance;
          *(_OWORD *)(v222 + 24) = v131;
          *(_OWORD *)(v222 + 40) = v132;

          goto LABEL_209;
        }
        objc_msgSend(v8, "name");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = v33;
        if (v33)
          v34 = (const char *)objc_msgSend(objc_retainAutorelease(v33), "UTF8String");
        else
          v34 = "(unnamed)";
        re::DynamicString::format((re::DynamicString *)"Processing mesh \"%s\"", (re::DynamicString *)buf, v34);
        v38 = *(_OWORD *)buf;
        v40 = *(_QWORD *)&v258[8];
        v39 = *(_QWORD *)v258;
        *(_BYTE *)a1 = 0;
        v41 = 1003;
      }
      else
      {
        objc_msgSend(v8, "name");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = v30;
        if (v30)
          v32 = (const char *)objc_msgSend(objc_retainAutorelease(v30), "UTF8String");
        else
          v32 = "(unnamed)";
        re::DynamicString::format((re::DynamicString *)"Processing mesh \"%s\"", (re::DynamicString *)buf, v32);
        v38 = *(_OWORD *)buf;
        v40 = *(_QWORD *)&v258[8];
        v39 = *(_QWORD *)v258;
        *(_BYTE *)a1 = 0;
        v41 = 1002;
      }
      *(_QWORD *)(a1 + 8) = v41;
      *(_QWORD *)(a1 + 16) = &re::AnimationErrorCategory(void)::instance;
      *(_OWORD *)(a1 + 24) = v38;
      *(_QWORD *)(a1 + 40) = v39;
      *(_QWORD *)(a1 + 48) = v40;

LABEL_213:
      goto LABEL_214;
    }
  }
  else
  {
LABEL_9:

  }
  *(_BYTE *)a1 = 1;
LABEL_214:

}

float64x2_t `anonymous namespace'::convertToRE(float32x4_t *this, const simd_double4x4 *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float64x2_t result;
  float32x4_t v5;

  v2 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)a2->columns[1].f64), *(float64x2_t *)&a2->columns[1].f64[2]);
  v3 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)a2->columns[2].f64), *(float64x2_t *)&a2->columns[2].f64[2]);
  result = *(float64x2_t *)&a2->columns[3].f64[2];
  v5 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)a2->columns[3].f64), result);
  *this = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)a2->columns[0].f64), *(float64x2_t *)&a2->columns[0].f64[2]);
  this[1] = v2;
  this[2] = v3;
  this[3] = v5;
  return result;
}

double re::DynamicArray<re::ModelIOSkinningData>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<re::ModelIOSkinningData>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::ModelIOSkinningData>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  v11 = *(_QWORD *)(a1 + 32) + 224 * v5;
  v12 = *(_OWORD *)(a2 + 16);
  v13 = *(_OWORD *)(a2 + 32);
  v14 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(v11 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(v11 + 32) = v13;
  *(_OWORD *)(v11 + 48) = v14;
  *(_OWORD *)(v11 + 16) = v12;
  *(_OWORD *)v11 = *(_OWORD *)a2;
  result = 0.0;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_QWORD *)(v11 + 96) = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v11 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v17 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 96) = 0;
  v19 = *(_QWORD *)(v11 + 80);
  v18 = *(_QWORD *)(v11 + 88);
  *(_QWORD *)(v11 + 80) = v16;
  *(_QWORD *)(v11 + 88) = v17;
  *(_QWORD *)(a2 + 80) = v19;
  *(_QWORD *)(a2 + 88) = v18;
  *(_QWORD *)(v11 + 104) = 0;
  *(_QWORD *)(v11 + 112) = 0;
  *(_QWORD *)(v11 + 120) = 0;
  v20 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(v11 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(v11 + 112) = v20;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  v21 = *(_QWORD *)(v11 + 120);
  *(_QWORD *)(v11 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = v21;
  *(_QWORD *)(v11 + 128) = 0;
  *(_QWORD *)(v11 + 136) = 0;
  *(_QWORD *)(v11 + 144) = 0;
  v22 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(v11 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(v11 + 136) = v22;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v23 = *(_QWORD *)(v11 + 144);
  *(_QWORD *)(v11 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = v23;
  *(_QWORD *)(v11 + 152) = 0;
  *(_QWORD *)(v11 + 160) = 0;
  *(_QWORD *)(v11 + 168) = 0;
  v24 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(v11 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(v11 + 160) = v24;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  v25 = *(_QWORD *)(v11 + 168);
  *(_QWORD *)(v11 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = v25;
  *(_QWORD *)(v11 + 176) = 0;
  *(_QWORD *)(v11 + 184) = 0;
  *(_QWORD *)(v11 + 192) = 0;
  v26 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(v11 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(v11 + 184) = v26;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  v27 = *(_QWORD *)(v11 + 192);
  *(_QWORD *)(v11 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = v27;
  *(_QWORD *)(v11 + 200) = 0;
  *(_QWORD *)(v11 + 208) = 0;
  *(_QWORD *)(v11 + 216) = 0;
  v28 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(v11 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(v11 + 208) = v28;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  v29 = *(_QWORD *)(v11 + 216);
  *(_QWORD *)(v11 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 216) = v29;
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

void re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<unsigned int &>(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  v9 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v9 = v8 % *(unsigned int *)(a1 + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v16 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(v16 + 32 * v10 + 16) == v6)
        return;
      while (1)
      {
        v10 = *(_DWORD *)(v16 + 32 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v16 + 32 * v10 + 16) == v6)
          return;
      }
    }
  }
  v11 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v11 == 0x7FFFFFFF)
  {
    v11 = *(unsigned int *)(a1 + 32);
    v12 = v11;
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      v12 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v12 + 1;
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
    *(_DWORD *)(a1 + 36) = v14 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v13 + 32 * v11 + 8) = v14 | 0x80000000;
  v15 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 8) & 0x80000000 | *(_DWORD *)(v15 + 4 * v9);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11) = v8;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 16) = *a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 24) = *a3;
  *(_DWORD *)(v15 + 4 * v9) = v11;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
}

void re::importSkeleton(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  simd_float4x4 *v4;
  unint64_t v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  void *v12;
  id v13;
  _anonymous_namespace_ *v14;
  simd_float4 v15;
  __int8 v16;
  uint64_t v17;
  unint64_t v18;
  _anonymous_namespace_ *v19;
  _anonymous_namespace_ *v20;
  _anonymous_namespace_ *v21;
  unsigned int v22;
  id v23;
  _anonymous_namespace_ *v24;
  unint64_t v25;
  NSObject *v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  NSObject *v34;
  uint64_t v35;
  NSObject *v36;
  id v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  _DWORD *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _anonymous_namespace_ *v48;
  uint64_t v49;
  void *v50;
  const simd_double4x4 *v51;
  uint64_t v52;
  _anonymous_namespace_ *v53;
  uint64_t v54;
  _anonymous_namespace_ *v55;
  uint64_t v56;
  void *v57;
  const simd_double4x4 *v58;
  uint64_t v59;
  _anonymous_namespace_ *v60;
  uint64_t v61;
  __n128 v62;
  void *v63;
  id v64;
  __int128 v65;
  __int128 v66;
  __n128 v67;
  void *v68;
  id v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  _anonymous_namespace_ *v73;
  void *v74;
  uint64_t v75;
  NSObject *v76;
  const simd_double4x4 *v77;
  uint64_t v78;
  NSObject *v79;
  const simd_double4x4 *v80;
  simd_float4 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88[4];
  int v89;
  uint64_t v90;
  uint64_t v91;
  __int128 buf;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101[6];
  simd_float4x4 v102;
  uint64_t v103;
  char *v104;
  __int16 v105;
  __int16 v106;
  uint64_t v107;
  simd_float4x4 v108;

  v107 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  v4 = (simd_float4x4 *)&str_110;
  v81.i64[0] = 0;
  v81.i64[1] = (uint64_t)&str_110;
  v5 = (unint64_t)&v82;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  memset(v88, 0, sizeof(v88));
  v89 = 0;
  v90 = 0x7FFFFFFFLL;
  objc_msgSend(v3, "property:", CFSTR("joints"));
  v6 = (_anonymous_namespace_ *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6
    && (-[_anonymous_namespace_ data](v6, "data"), v8 = (void *)objc_claimAutoreleasedReturnValue(),
                                                   v8,
                                                   v8))
  {
    -[_anonymous_namespace_ stringArray](v7, "stringArray");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v9)
    {
      v72 = a2;
      v73 = v7;
      v74 = v9;
      v11 = objc_msgSend(v9, "count");
      objc_msgSend(v3, "path");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "stringValue");
      v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v14 = (_anonymous_namespace_ *)objc_msgSend(v13, "UTF8String");
      v102.columns[0].i64[0] = 0;
      v102.columns[0].i64[1] = (uint64_t)&str_110;
      v15 = v102.columns[0];
      v102.columns[0].i64[0] = 0;
      v102.columns[0].i64[1] = (uint64_t)&str_110;
      v16 = v81.i8[0];
      v17 = v81.i64[1];
      v81 = v15;
      *(_QWORD *)&buf = v15.i64[0] & 0xFFFFFFFFFFFFFFFELL | v16 & 1;
      *((_QWORD *)&buf + 1) = v17;
      re::StringID::destroyString((re::StringID *)&buf);
      re::StringID::destroyString((re::StringID *)&v102);

      v18 = v11;
      LODWORD(v75) = 0;
      if (v11)
      {
        v22 = 0;
        while (1)
        {
          objc_msgSend(v74, "objectAtIndexedSubscript:", v22);
          v23 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v24 = (_anonymous_namespace_ *)objc_msgSend(v23, "UTF8String");
          v103 = 0;
          v104 = (char *)&str_110;
          v25 = v75;
          v26 = *((_QWORD *)&v82 + 1);
          if (*((_QWORD *)&v82 + 1) <= (unint64_t)v75)
            break;
          v27 = (_QWORD *)(v83 + 16 * v75);
          v28 = v103;
          v29 = v104;
          v103 = 0;
          v104 = (char *)&str_110;
          v30 = v27[1];
          v31 = v28 & 0xFFFFFFFFFFFFFFFELL | *v27 & 1;
          v27[1] = v29;
          *(_QWORD *)&buf = v31;
          *((_QWORD *)&buf + 1) = v30;
          *v27 = v28;
          re::StringID::destroyString((re::StringID *)&buf);
          re::StringID::destroyString((re::StringID *)&v103);

          v25 = v75;
          v26 = *((_QWORD *)&v82 + 1);
          if (*((_QWORD *)&v82 + 1) <= (unint64_t)v75)
            goto LABEL_84;
          v32 = re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>((uint64_t)v88, (StringID *)(v83 + 16 * v75), &v75);
          v33 = *(_DWORD *)v32;
          if (*(_DWORD *)v32 != (_DWORD)v75)
          {
            v34 = *re::pipelineLogObjects((re *)v32);
            v32 = os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v32)
            {
              v35 = v75;
              v36 = v34;
              objc_msgSend(v74, "objectAtIndexedSubscript:", v35);
              v37 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
              v38 = objc_msgSend(v37, "UTF8String");
              LODWORD(buf) = 136315138;
              *(_QWORD *)((char *)&buf + 4) = v38;
              _os_log_impl(&dword_224FE9000, v36, OS_LOG_TYPE_DEFAULT, "Duplicate joint name found in skeleton: '%s'\n", (uint8_t *)&buf, 0xCu);

            }
            v33 = v75;
          }
          v22 = v33 + 1;
          LODWORD(v75) = v22;
          if (v22 >= v11)
          {
            v5 = 0;
            while (1)
            {
              v25 = v84;
              if ((unint64_t)v84 <= v5)
                goto LABEL_85;
              *(_DWORD *)(*((_QWORD *)&v84 + 1) + 4 * v5) = -1;
              v25 = *((_QWORD *)&v82 + 1);
              if (*((_QWORD *)&v82 + 1) <= v5)
                goto LABEL_86;
              v39 = *(char **)(v83 + 16 * v5 + 8);
              v40 = strrchr(v39, 47);
              if (v40)
              {
                v41 = v40;
                v42 = v39;
                while (1)
                {
                  v103 = 0;
                  v104 = (char *)&str_110;
                  v43 = (_DWORD *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v88, &v103);
                  if (v43)
                    break;
                  v42 = v104;
                  v41 = strrchr(v104, 47);
                  v26 = *re::pipelineLogObjects((re *)v41);
                  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
                  {
                    v26 = v26;
                    LODWORD(buf) = 136315138;
                    *(_QWORD *)((char *)&buf + 4) = v104;
                    _os_log_impl(&dword_224FE9000, v26, OS_LOG_TYPE_DEFAULT, "Expected joint parent do not exist: %s, looking for its ancester", (uint8_t *)&buf, 0xCu);

                  }
                  re::StringID::destroyString((re::StringID *)&v103);
                  if (!v41)
                    goto LABEL_25;
                }
                v25 = v84;
                if ((unint64_t)v84 <= v5)
                  goto LABEL_87;
                *(_DWORD *)(*((_QWORD *)&v84 + 1) + 4 * v5) = *v43;
                re::StringID::destroyString((re::StringID *)&v103);
              }
LABEL_25:
              ++v5;
              v18 = v11;
              if (v5 == v11)
                goto LABEL_30;
            }
          }
        }
        v78 = 0;
        v96 = 0u;
        v95 = 0u;
        v94 = 0u;
        v93 = 0u;
        buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v102.columns[0].i32[0] = 136315906;
        *(uint64_t *)((char *)v102.columns[0].i64 + 4) = (uint64_t)"operator[]";
        v102.columns[0].i16[6] = 1024;
        *(__int32 *)((char *)&v102.columns[0].i32[3] + 2) = 468;
        v102.columns[1].i16[1] = 2048;
        *(uint64_t *)((char *)v102.columns[1].i64 + 4) = v25;
        v102.columns[1].i16[6] = 2048;
        *(uint64_t *)((char *)&v102.columns[1].i64[1] + 6) = (uint64_t)v26;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_84:
        v103 = 0;
        v96 = 0u;
        v95 = 0u;
        v94 = 0u;
        v93 = 0u;
        buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v102.columns[0].i32[0] = 136315906;
        *(uint64_t *)((char *)v102.columns[0].i64 + 4) = (uint64_t)"operator[]";
        v102.columns[0].i16[6] = 1024;
        *(__int32 *)((char *)&v102.columns[0].i32[3] + 2) = 468;
        v102.columns[1].i16[1] = 2048;
        *(uint64_t *)((char *)v102.columns[1].i64 + 4) = v25;
        v102.columns[1].i16[6] = 2048;
        *(uint64_t *)((char *)&v102.columns[1].i64[1] + 6) = (uint64_t)v26;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_85:
        v103 = 0;
        v96 = 0u;
        v95 = 0u;
        v94 = 0u;
        v93 = 0u;
        buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v102.columns[0].i32[0] = 136315906;
        *(uint64_t *)((char *)v102.columns[0].i64 + 4) = (uint64_t)"operator[]";
        v102.columns[0].i16[6] = 1024;
        *(__int32 *)((char *)&v102.columns[0].i32[3] + 2) = 468;
        v102.columns[1].i16[1] = 2048;
        *(uint64_t *)((char *)v102.columns[1].i64 + 4) = v5;
        v102.columns[1].i16[6] = 2048;
        *(uint64_t *)((char *)&v102.columns[1].i64[1] + 6) = v25;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_86:
        v103 = 0;
        v96 = 0u;
        v95 = 0u;
        v94 = 0u;
        v93 = 0u;
        buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v102.columns[0].i32[0] = 136315906;
        *(uint64_t *)((char *)v102.columns[0].i64 + 4) = (uint64_t)"operator[]";
        v102.columns[0].i16[6] = 1024;
        *(__int32 *)((char *)&v102.columns[0].i32[3] + 2) = 468;
        v102.columns[1].i16[1] = 2048;
        *(uint64_t *)((char *)v102.columns[1].i64 + 4) = v5;
        v102.columns[1].i16[6] = 2048;
        *(uint64_t *)((char *)&v102.columns[1].i64[1] + 6) = v25;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_87:
        v78 = 0;
        v96 = 0u;
        v95 = 0u;
        v94 = 0u;
        v93 = 0u;
        buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v102.columns[0].i32[0] = 136315906;
        *(uint64_t *)((char *)v102.columns[0].i64 + 4) = (uint64_t)"operator[]";
        v102.columns[0].i16[6] = 1024;
        *(__int32 *)((char *)&v102.columns[0].i32[3] + 2) = 468;
        v102.columns[1].i16[1] = 2048;
        *(uint64_t *)((char *)v102.columns[1].i64 + 4) = v5;
        v102.columns[1].i16[6] = 2048;
        *(uint64_t *)((char *)&v102.columns[1].i64[1] + 6) = v25;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_88;
      }
LABEL_30:
      objc_msgSend(v3, "property:", CFSTR("restTransforms"));
      v48 = (_anonymous_namespace_ *)objc_claimAutoreleasedReturnValue();
      v78 = 0;
      v79 = 0;
      v80 = 0;
      if (v48
        && (-[_anonymous_namespace_ data](v48, "data"), (v49 = objc_claimAutoreleasedReturnValue()) != 0)
        && (v50 = (void *)v49,
            v51 = v80,
            v52 = -[_anonymous_namespace_ double4x4Array:maxCount:](v48, "double4x4Array:maxCount:", v80, v18),
            v50,
            v52 == v18))
      {
        v4 = &v102;
        if (v18)
        {
          v25 = 0;
          v26 = v79;
          v54 = 32;
          while (v26 != v25)
          {
            v5 = *((_QWORD *)&v85 + 1);
            if (*((_QWORD *)&v85 + 1) <= v25)
              goto LABEL_89;
            re::decomposeScaleRotationTranslation<float>((uint64_t)&v102, (int32x4_t *)(v86 + v54 - 32), (_QWORD *)(v86 + v54 - 16), (_OWORD *)(v86 + v54));
            ++v25;
            v54 += 48;
            ++v51;
            if (v18 == v25)
              goto LABEL_38;
          }
LABEL_88:
          v103 = 0;
          v96 = 0u;
          v95 = 0u;
          v94 = 0u;
          v93 = 0u;
          buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v102.columns[0].i32[0] = 136315906;
          *(uint64_t *)((char *)v4->columns[0].i64 + 4) = (uint64_t)"operator[]";
          v102.columns[0].i16[6] = 1024;
          *(__int32 *)((char *)&v4->columns[0].i32[3] + 2) = 468;
          v102.columns[1].i16[1] = 2048;
          *(uint64_t *)((char *)v4->columns[1].i64 + 4) = (uint64_t)v26;
          v102.columns[1].i16[6] = 2048;
          *(uint64_t *)((char *)&v4->columns[1].i64[1] + 6) = (uint64_t)v26;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_89:
          v75 = 0;
          v96 = 0u;
          v95 = 0u;
          v94 = 0u;
          v93 = 0u;
          buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v103) = 136315906;
          *(uint64_t *)((char *)v4[1].columns[0].i64 + 4) = (uint64_t)"operator[]";
          WORD2(v104) = 1024;
          *(__int32 *)((char *)&v4[1].columns[0].i32[3] + 2) = 468;
          v105 = 2048;
          *(uint64_t *)((char *)v4[1].columns[1].i64 + 4) = v25;
          v106 = 2048;
          *(uint64_t *)((char *)&v4[1].columns[1].i64[1] + 6) = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_90:
          v103 = 0;
          v96 = 0u;
          v95 = 0u;
          v94 = 0u;
          v93 = 0u;
          buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v102.columns[0].i32[0] = 136315906;
          *(uint64_t *)((char *)v4->columns[0].i64 + 4) = (uint64_t)"operator[]";
          v102.columns[0].i16[6] = 1024;
          *(__int32 *)((char *)&v4->columns[0].i32[3] + 2) = 468;
          v102.columns[1].i16[1] = 2048;
          *(uint64_t *)((char *)v4->columns[1].i64 + 4) = (uint64_t)v26;
          v102.columns[1].i16[6] = 2048;
          *(uint64_t *)((char *)&v4->columns[1].i64[1] + 6) = (uint64_t)v26;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_91:
          v91 = 0;
          v96 = 0u;
          v95 = 0u;
          v94 = 0u;
          v93 = 0u;
          buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v103) = 136315906;
          *(uint64_t *)((char *)v4[1].columns[0].i64 + 4) = (uint64_t)"operator[]";
          WORD2(v104) = 1024;
          *(__int32 *)((char *)&v4[1].columns[0].i32[3] + 2) = 468;
          v105 = 2048;
          *(uint64_t *)((char *)v4[1].columns[1].i64 + 4) = v25;
          v106 = 2048;
          *(uint64_t *)((char *)&v4[1].columns[1].i64[1] + 6) = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
LABEL_38:
        objc_msgSend(v3, "property:", CFSTR("bindTransforms"));
        v55 = (_anonymous_namespace_ *)objc_claimAutoreleasedReturnValue();
        v75 = 0;
        v76 = 0;
        v77 = 0;
        if (v55
          && (-[_anonymous_namespace_ data](v55, "data"), (v56 = objc_claimAutoreleasedReturnValue()) != 0)
          && (v57 = (void *)v56,
              v58 = v77,
              v59 = -[_anonymous_namespace_ double4x4Array:maxCount:](v55, "double4x4Array:maxCount:", v77, v18),
              v57,
              v59 == v18))
        {
          if (v18)
          {
            v25 = 0;
            v26 = v76;
            v61 = 32;
            while (v26 != v25)
            {
              v108 = __invert_f4(v102);
              v5 = v87;
              if ((unint64_t)v87 <= v25)
                goto LABEL_91;
              *(simd_float4x4 *)(*((_QWORD *)&v87 + 1) + v61 - 32) = v108;
              ++v25;
              v61 += 64;
              ++v58;
              if (v18 == v25)
                goto LABEL_46;
            }
            goto LABEL_90;
          }
LABEL_46:
          re::types::Ok<re::GeomSkeleton>::Ok((uint64_t)&buf, (uint64_t *)&v81);
          re::Result<re::GeomSkeleton,re::DetailedError>::Result(v72, (uint64_t *)&buf);
          v62.n128_f64[0] = re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v101);
          v7 = v73;
          if (v98)
          {
            if (v99)
            {
              (*(void (**)(double))(*(_QWORD *)v98 + 40))(v62.n128_f64[0]);
              v99 = 0;
              v100 = 0;
            }
            v98 = 0;
          }
          if ((_QWORD)v96)
          {
            if (*((_QWORD *)&v96 + 1))
            {
              (*(void (**)(__n128))(*(_QWORD *)v96 + 40))(v62);
              *((_QWORD *)&v96 + 1) = 0;
              v97 = 0;
            }
            *(_QWORD *)&v96 = 0;
          }
          if (*((_QWORD *)&v94 + 1))
          {
            if ((_QWORD)v95)
            {
              (*(void (**)(__n128))(**((_QWORD **)&v94 + 1) + 40))(v62);
              v95 = 0uLL;
            }
            *((_QWORD *)&v94 + 1) = 0;
          }
          re::FixedArray<re::StringID>::deinit(&v93);
          re::StringID::destroyString((re::StringID *)&buf);
        }
        else
        {
          objc_msgSend(v3, "path");
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v68, "stringValue");
          v69 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          re::DynamicString::format((re::DynamicString *)"Skeleton \"%s\" does not have bind transforms.", (re::DynamicString *)&buf, objc_msgSend(v69, "UTF8String"));
          v70 = buf;
          v71 = v93;
          *(_BYTE *)v72 = 0;
          *(_QWORD *)(v72 + 8) = 1004;
          *(_QWORD *)(v72 + 16) = &re::AnimationErrorCategory(void)::instance;
          *(_OWORD *)(v72 + 24) = v70;
          *(_OWORD *)(v72 + 40) = v71;

          v7 = v73;
        }
        if (v75 && v76)
          (*(void (**)(void))(*(_QWORD *)v75 + 40))();

      }
      else
      {
        objc_msgSend(v3, "path");
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v63, "stringValue");
        v64 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        re::DynamicString::format((re::DynamicString *)"Skeleton \"%s\" does not have rest transforms.", (re::DynamicString *)&buf, objc_msgSend(v64, "UTF8String"));
        v65 = buf;
        v66 = v93;
        *(_BYTE *)v72 = 0;
        *(_QWORD *)(v72 + 8) = 1028;
        *(_QWORD *)(v72 + 16) = &re::AnimationErrorCategory(void)::instance;
        *(_OWORD *)(v72 + 24) = v65;
        *(_OWORD *)(v72 + 40) = v66;

        v7 = v73;
      }
      if (v78 && v79)
        (*(void (**)(void))(*(_QWORD *)v78 + 40))();

      v10 = v74;
    }
    else
    {
      v46 = buf;
      v47 = v93;
      *(_BYTE *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 1003;
      *(_QWORD *)(a2 + 16) = &re::AnimationErrorCategory(void)::instance;
      *(_OWORD *)(a2 + 24) = v46;
      *(_OWORD *)(a2 + 40) = v47;
    }

  }
  else
  {
    v44 = buf;
    v45 = v93;
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 1003;
    *(_QWORD *)(a2 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a2 + 24) = v44;
    *(_OWORD *)(a2 + 40) = v45;
  }

  v67.n128_f64[0] = re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v88);
  if (*((_QWORD *)&v86 + 1))
  {
    if ((_QWORD)v87)
    {
      (*(void (**)(double))(**((_QWORD **)&v86 + 1) + 40))(v67.n128_f64[0]);
      v87 = 0uLL;
    }
    *((_QWORD *)&v86 + 1) = 0;
  }
  if ((_QWORD)v85)
  {
    if (*((_QWORD *)&v85 + 1))
    {
      (*(void (**)(__n128))(*(_QWORD *)v85 + 40))(v67);
      *((_QWORD *)&v85 + 1) = 0;
      *(_QWORD *)&v86 = 0;
    }
    *(_QWORD *)&v85 = 0;
  }
  if (*((_QWORD *)&v83 + 1))
  {
    if ((_QWORD)v84)
    {
      (*(void (**)(__n128))(**((_QWORD **)&v83 + 1) + 40))(v67);
      v84 = 0uLL;
    }
    *((_QWORD *)&v83 + 1) = 0;
  }
  re::FixedArray<re::StringID>::deinit(&v82);
  re::StringID::destroyString((re::StringID *)&v81);

}

void re::importSkeletalAnimation(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  void *v28;
  _anonymous_namespace_ *v29;
  unint64_t v30;
  id v31;
  double *v32;
  double v33;
  double v34;
  void *v35;
  id v36;
  __int128 v37;
  __int128 v38;
  id v39;
  double *v40;
  double *v41;
  id v42;
  double *v43;
  double *v44;
  void *v45;
  id v46;
  __int128 v47;
  __int128 v48;
  void *v49;
  float v50;
  _QWORD *v51;
  _anonymous_namespace_ *v52;
  uint64_t i;
  id v54;
  _anonymous_namespace_ *v55;
  float v56;
  float v57;
  _anonymous_namespace_ *v58;
  _anonymous_namespace_ *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _anonymous_namespace_ *v63;
  BOOL v64;
  unint64_t v66;
  unint64_t v67;
  _anonymous_namespace_ *v68;
  _anonymous_namespace_ *v69;
  unint64_t v70;
  _anonymous_namespace_ *v71;
  BOOL v72;
  BOOL v73;
  BOOL v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  void *v86;
  id v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  uint64_t v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  char v117;
  float v118;
  float v119;
  float v120;
  _QWORD v121[2];
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD v125[3];
  int v126;
  BOOL v127;
  BOOL v128;
  BOOL v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  _QWORD v133[6];
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  const char *v138;
  __int16 v139;
  int v140;
  __int16 v141;
  unint64_t v142;
  __int16 v143;
  unint64_t v144;
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  objc_msgSend(v7, "type");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)*MEMORY[0x24BEBEE08];

  if (v8 != v9)
  {
    objc_msgSend(v7, "path");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "stringValue");
    v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v12 = objc_msgSend(v11, "UTF8String");
    objc_msgSend(v7, "type");
    v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    re::DynamicString::format((re::DynamicString *)"Node \"%s\" has unknown animation type: %s.", (re::DynamicString *)&v112, v12, objc_msgSend(v13, "UTF8String"));
    v14 = v112;
    v15 = v113;
    v16 = v114;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 1018;
    *(_QWORD *)(a3 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a3 + 24) = v14;
    *(_QWORD *)(a3 + 40) = v15;
    *(_QWORD *)(a3 + 48) = v16;

    goto LABEL_45;
  }
  re::SkeletalPoseSampledAnimationAssetData::SkeletalPoseSampledAnimationAssetData((re::SkeletalPoseSampledAnimationAssetData *)&v112);
  objc_msgSend(v7, "property:", CFSTR("rotations"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "property:", CFSTR("translations"));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "property:", CFSTR("scales"));
  v19 = objc_claimAutoreleasedReturnValue();
  v20 = (void *)v19;
  if (v17 && v18 && v19)
  {
    if (objc_msgSend(v17, "isAnimated"))
    {
      objc_msgSend(v17, "timeSamples");
      v100 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = objc_msgSend(v100, "arraySize");
    }
    else
    {
      v21 = 0;
      v100 = 0;
    }
    if (objc_msgSend(v18, "isAnimated"))
    {
      objc_msgSend(v18, "timeSamples");
      v99 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = objc_msgSend(v99, "arraySize");
    }
    else
    {
      v27 = 0;
      v99 = 0;
    }
    v101 = v20;
    if (objc_msgSend(v20, "isAnimated"))
    {
      objc_msgSend(v20, "timeSamples");
      v98 = (void *)objc_claimAutoreleasedReturnValue();
      v97 = objc_msgSend(v98, "arraySize");
    }
    else
    {
      v97 = 0;
      v98 = 0;
    }
    objc_msgSend(v7, "property:", CFSTR("joints"));
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v102
      || (objc_msgSend(v102, "data"), v28 = (void *)objc_claimAutoreleasedReturnValue(), v28, !v28))
    {
      objc_msgSend(v7, "path");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "stringValue");
      v36 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      re::DynamicString::format((re::DynamicString *)"Animation node \"%s\" do not specify valid joint names.", (re::DynamicString *)&v131, objc_msgSend(v36, "UTF8String"));
      v37 = v131;
      v38 = v132;
      *(_BYTE *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 1018;
      *(_QWORD *)(a3 + 16) = &re::AnimationErrorCategory(void)::instance;
      *(_OWORD *)(a3 + 24) = v37;
      *(_OWORD *)(a3 + 40) = v38;

      v22 = v101;
LABEL_39:

      goto LABEL_40;
    }
    objc_msgSend(v102, "stringArray");
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = (_anonymous_namespace_ *)objc_msgSend(v92, "count");
    v30 = (unint64_t)v29;
    v93 = v17;
    if (v21)
    {
      if (v29 != (_anonymous_namespace_ *)objc_msgSend(v17, "arraySizeAtTime:", 1.79769313e308))
        goto LABEL_37;
      objc_msgSend(v100, "dataNoCopy");
      v94 = v18;
      v31 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v32 = (double *)objc_msgSend(v31, "bytes");
      v33 = fmin(*v32, 1.79769313e308);
      v34 = fmax(v32[v21 - 1], -1.79769313e308);

      v18 = v94;
    }
    else
    {
      v33 = 1.79769313e308;
      v34 = -1.79769313e308;
    }
    if (v27)
    {
      if (v30 != objc_msgSend(v18, "arraySizeAtTime:", v33))
        goto LABEL_37;
      objc_msgSend(v99, "dataNoCopy");
      v95 = v18;
      v39 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v40 = (double *)objc_msgSend(v39, "bytes");
      if (v33 > *v40)
        v33 = *v40;
      v41 = &v40[v27];
      if (v34 < *(v41 - 1))
        v34 = *(v41 - 1);

      v18 = v95;
    }
    if (!v97)
    {
      if (!(v27 | v21))
      {
        v34 = 0.0;
        v33 = 0.0;
      }
      goto LABEL_48;
    }
    if (v30 == objc_msgSend(v101, "arraySizeAtTime:", v33))
    {
      objc_msgSend(v98, "dataNoCopy");
      v42 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v43 = (double *)objc_msgSend(v42, "bytes");
      if (v33 > *v43)
        v33 = *v43;
      v44 = &v43[v97];
      if (v34 < *(v44 - 1))
        v34 = *(v44 - 1);

LABEL_48:
      v96 = v18;
      if (v33 >= v34)
        v34 = v33;
      v50 = a4;
      v118 = v50;
      if (v50 <= 0.0016667
        || fabsf(v50 + -0.0016667) < (float)((float)((float)(fabsf(v50) + 0.0016667) + 1.0) * 0.00001)
        || (a2 & 1) == 0)
      {
        v117 = 0;
      }
      v51 = v125;
      v52 = (_anonymous_namespace_ *)re::DynamicArray<re::StringID>::setCapacity(v125, v30);
      ++v126;
      if (v30)
      {
        for (i = 0; i != v30; ++i)
        {
          objc_msgSend(v92, "objectAtIndexedSubscript:", i);
          v54 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v55 = (_anonymous_namespace_ *)objc_msgSend(v54, "UTF8String");
          *(_QWORD *)&v131 = 0;
          *((_QWORD *)&v131 + 1) = &str_110;
          re::DynamicArray<re::StringID>::add(v125, (uint64_t *)&v131);
          re::StringID::destroyString((re::StringID *)&v131);

        }
      }
      v56 = v33 * a4;
      v57 = v34 * a4;
      v119 = v56;
      v120 = v57;
      LODWORD(v51) = vcvtpd_u64_f64(v34 - v33 + 1.0);
      v109 = 0;
      v110 = 0;
      v111 = 0;
      v106 = 0;
      v107 = 0;
      v108 = 0;
      v103 = 0;
      v104 = 0;
      v105 = 0;
      re::DynamicArray<re::SkeletalPoseAssetData>::resize(v121, (unint64_t)v51);
      v18 = v96;
      if (v122)
      {
        v60 = 0;
        while (1)
        {
          v22 = v101;
          v61 = objc_msgSend(v101, "arraySizeAtTime:", v33 + (double)v60);
          v62 = objc_msgSend(v17, "arraySizeAtTime:", v33 + (double)v60);
          v63 = (_anonymous_namespace_ *)objc_msgSend(v18, "arraySizeAtTime:", v33 + (double)v60);
          v64 = v61 > v30 || v62 > v30;
          if (v64 || (unint64_t)v63 > v30)
            break;
          v66 = objc_msgSend(v101, "float3Array:maxCount:atTime:", v108, v30, v33 + (double)v60);
          v67 = objc_msgSend(v17, "quatfArray:maxCount:atTime:", v111, v30, v33 + (double)v60);
          v68 = (_anonymous_namespace_ *)objc_msgSend(v18, "float3Array:maxCount:atTime:", v105, v30, v33 + (double)v60);
          v69 = v68;
          if (v66 <= v67)
            v70 = v67;
          else
            v70 = v66;
          if (v70 <= (unint64_t)v68)
            v71 = v68;
          else
            v71 = (_anonymous_namespace_ *)v70;
          if (v66)
            v72 = v66 == (_QWORD)v71;
          else
            v72 = 1;
          if (!v72
            || (v67 ? (v73 = v67 == (_QWORD)v71) : (v73 = 1),
                !v73 || (v68 ? (v74 = (unint64_t)v68 >= v70) : (v74 = 1), !v74)))
          {
            objc_msgSend(v7, "path");
            v86 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v86, "stringValue");
            v87 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            re::DynamicString::format((re::DynamicString *)"Sample %ld in node \"%s\" has: Total Scales = %ld, Total Rotations = %ld, Total Translations = %ld", (re::DynamicString *)&v131, v60, objc_msgSend(v87, "UTF8String"), v66, v67, v69);
            v88 = v131;
            v89 = v132;
            *(_BYTE *)a3 = 0;
            *(_QWORD *)(a3 + 8) = 1027;
            *(_QWORD *)(a3 + 16) = &re::AnimationErrorCategory(void)::instance;
            *(_OWORD *)(a3 + 24) = v88;
            *(_OWORD *)(a3 + 40) = v89;

            v18 = v96;
            v22 = v101;
            goto LABEL_104;
          }
          v127 = v66 != 0;
          v128 = v67 != 0;
          v129 = v68 != 0;
          v75 = v122;
          if (v122 <= v60)
            goto LABEL_119;
          v76 = (_QWORD *)(v123 + 24 * v60);
          v18 = v96;
          if (v30)
          {
            v77 = 0;
            v75 = 0;
            while (1)
            {
              v78 = v107;
              if (v107 <= v75)
                break;
              v78 = v110;
              if (v110 <= v75)
                goto LABEL_115;
              v78 = v104;
              if (v104 <= v75)
                goto LABEL_116;
              v78 = v122;
              if (v122 <= v60)
                goto LABEL_117;
              v79 = v123 + 24 * v60;
              v78 = *(_QWORD *)(v79 + 8);
              if (v78 <= v75)
                goto LABEL_118;
              v80 = *(_QWORD *)(v108 + 16 * v75 + 8);
              v81 = *(_QWORD *)(v111 + 16 * v75);
              v82 = *(_QWORD *)(v111 + 16 * v75 + 8);
              v83 = *(_QWORD *)(v105 + 16 * v75);
              v84 = *(_QWORD *)(v105 + 16 * v75 + 8);
              v85 = (_QWORD *)(*(_QWORD *)(v79 + 16) + v77);
              *v85 = *(_QWORD *)(v108 + 16 * v75);
              v85[1] = v80;
              v85[2] = v81;
              v85[3] = v82;
              v85[4] = v83;
              v85[5] = v84;
              ++v75;
              v77 += 48;
              if (v30 == v75)
                goto LABEL_96;
            }
            v130 = 0;
            v132 = 0u;
            memset(v133, 0, sizeof(v133));
            v131 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v137 = 136315906;
            v138 = "operator[]";
            v139 = 1024;
            v140 = 468;
            v141 = 2048;
            v142 = v75;
            v143 = 2048;
            v144 = v78;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_115:
            v130 = 0;
            v132 = 0u;
            memset(v133, 0, sizeof(v133));
            v131 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v137 = 136315906;
            v138 = "operator[]";
            v139 = 1024;
            v140 = 468;
            v141 = 2048;
            v142 = v75;
            v143 = 2048;
            v144 = v78;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_116:
            v130 = 0;
            v132 = 0u;
            memset(v133, 0, sizeof(v133));
            v131 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v137 = 136315906;
            v138 = "operator[]";
            v139 = 1024;
            v140 = 468;
            v141 = 2048;
            v142 = v75;
            v143 = 2048;
            v144 = v78;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_117:
            v130 = 0;
            v132 = 0u;
            memset(v133, 0, sizeof(v133));
            v131 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v137 = 136315906;
            v138 = "operator[]";
            v139 = 1024;
            v140 = 789;
            v141 = 2048;
            v142 = v60;
            v143 = 2048;
            v144 = v78;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_118:
            v130 = 0;
            v132 = 0u;
            memset(v133, 0, sizeof(v133));
            v131 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v137 = 136315906;
            v138 = "operator[]";
            v139 = 1024;
            v140 = 468;
            v141 = 2048;
            v142 = v75;
            v143 = 2048;
            v144 = v78;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_119:
            v130 = 0;
            v132 = 0u;
            memset(v133, 0, sizeof(v133));
            v131 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v137 = 136315906;
            v138 = "operator[]";
            v139 = 1024;
            v140 = 789;
            v141 = 2048;
            v142 = v60;
            v143 = 2048;
            v144 = v75;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
LABEL_96:
          if (++v60 >= v122)
            goto LABEL_97;
        }
        v90 = v131;
        v91 = v132;
        *(_BYTE *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 1027;
        *(_QWORD *)(a3 + 16) = &re::AnimationErrorCategory(void)::instance;
        *(_OWORD *)(a3 + 24) = v90;
        *(_OWORD *)(a3 + 40) = v91;
LABEL_104:
        v49 = v92;
      }
      else
      {
LABEL_97:
        re::types::Ok<re::SkeletalPoseSampledAnimationAssetData>::Ok((uint64_t)&v131, (uint64_t)&v112);
        re::Result<re::SkeletalPoseSampledAnimationAssetData,re::DetailedError>::Result(a3, (uint64_t)&v131);
        re::DynamicArray<re::StringID>::deinit((uint64_t)&v136);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v135);
        *(_QWORD *)&v131 = off_24ED33B18;
        re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)&v134);
        *(_QWORD *)&v131 = off_24ED36578;
        v22 = v101;
        v49 = v92;
        if (v133[1])
        {
          if ((v133[2] & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v133[1] + 40))();
          memset(&v133[1], 0, 32);
        }
        re::StringID::destroyString((re::StringID *)((char *)&v132 + 8));
      }
      if (v103 && v104)
        (*(void (**)(void))(*(_QWORD *)v103 + 40))();
      if (v106 && v107)
        (*(void (**)(void))(*(_QWORD *)v106 + 40))();
      if (v109 && v110)
        (*(void (**)(void))(*(_QWORD *)v109 + 40))();
      goto LABEL_38;
    }
LABEL_37:
    objc_msgSend(v7, "path");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v45, "stringValue");
    v46 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    re::DynamicString::format((re::DynamicString *)"Processing animation \"%s\"", (re::DynamicString *)&v131, objc_msgSend(v46, "UTF8String"));
    v47 = v131;
    v48 = v132;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 1018;
    *(_QWORD *)(a3 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a3 + 24) = v47;
    *(_OWORD *)(a3 + 40) = v48;

    v22 = v101;
    v49 = v92;
LABEL_38:

    v17 = v93;
    goto LABEL_39;
  }
  objc_msgSend(v7, "path");
  v22 = v20;
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "stringValue");
  v24 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  re::DynamicString::format((re::DynamicString *)"Processing animation \"%s\"", (re::DynamicString *)&v131, objc_msgSend(v24, "UTF8String"));
  v25 = v131;
  v26 = v132;
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 1018;
  *(_QWORD *)(a3 + 16) = &re::AnimationErrorCategory(void)::instance;
  *(_OWORD *)(a3 + 24) = v25;
  *(_OWORD *)(a3 + 40) = v26;

LABEL_40:
  re::DynamicArray<re::StringID>::deinit((uint64_t)v125);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v124);
  *(_QWORD *)&v112 = off_24ED33B18;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)v121);
  *(_QWORD *)&v112 = off_24ED36578;
  if ((_QWORD)v115)
  {
    if ((BYTE8(v115) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v115 + 40))();
    v115 = 0u;
    v116 = 0u;
  }
  re::StringID::destroyString((re::StringID *)&v114);
LABEL_45:

}

void processAnimationObject(void *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id v7;
  unint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  void *v24;
  double v25;
  float v26;
  void *v27;
  double v28;
  float v29;
  void *v30;
  double v31;
  float v32;
  void *v33;
  double v34;
  float v35;
  void *v36;
  double v37;
  float v38;
  void *v39;
  double v40;
  float v41;
  _anonymous_namespace_ *v42;
  _anonymous_namespace_ *v43;
  float v44;
  re *v45;
  char *v46;
  unint64_t v47;
  void *v48;
  id v49;
  _anonymous_namespace_ *v50;
  unint64_t i;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  float v59;
  double v60;
  double v61;
  unint64_t v62;
  double v63;
  _anonymous_namespace_ *v64;
  unint64_t v65;
  _anonymous_namespace_ *v66;
  uint64_t *v67;
  uint64_t v68;
  void *v69;
  unint64_t v70;
  _anonymous_namespace_ *v71;
  void *v72;
  _anonymous_namespace_ *v73;
  void *v74;
  _anonymous_namespace_ *v75;
  unint64_t v76;
  double v77;
  BOOL v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  void *v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  void *v103;
  uint64_t v104;
  void *v105;
  void *v106;
  uint64_t v107;
  void *v108;
  void *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  __int16 *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  StringID v126;
  __int128 v127;
  void *v128;
  void *v129;
  const char *v130;
  void *v131;
  const char *v132;
  StringID v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  void *v138;
  const char *v139;
  uint64_t v140;
  StringID v141;
  __int128 v142;
  BOOL v143;
  double v144;
  uint64_t v145;
  __int16 v146;
  void *v147;
  void *v148;
  const char *v149;
  double v150;
  uint64_t v151;
  uint64_t v152;
  id v153;
  unint64_t v154;
  BOOL v155;
  unint64_t v156;
  unint64_t v157;
  char *v158;
  void *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  _QWORD v173[2];
  char v174;
  _QWORD v175[2];
  __int128 v176;
  __int128 v177;
  __int16 v178;
  float v179;
  __int128 v180;
  __int128 v181;
  __int16 v182;
  char v183;
  uint64_t v184;
  unsigned __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  int v195;
  const char *v196;
  __int16 v197;
  int v198;
  __int16 v199;
  unint64_t v200;
  __int16 v201;
  char *v202;
  uint64_t v203;

  v203 = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  if (!v7)
  {
    v126 = (StringID)v185;
    v127 = v186;
    *(_BYTE *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 1012;
    *(_QWORD *)(a4 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(StringID *)(a4 + 24) = v126;
    *(_OWORD *)(a4 + 40) = v127;
    goto LABEL_113;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
LABEL_112:
    *(_BYTE *)a4 = 1;
    goto LABEL_113;
  }
  v158 = a2;
  v8 = (unint64_t)v7;
  objc_msgSend((id)v8, "rotations");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "keyTimes");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "count");

  objc_msgSend((id)v8, "translations");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "keyTimes");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "count");

  objc_msgSend((id)v8, "scales");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "keyTimes");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "count");

  if (v11 != v14 || v14 != v17)
  {
    objc_msgSend((id)v8, "name");
    v128 = (void *)objc_claimAutoreleasedReturnValue();
    v129 = v128;
    if (v128)
      v130 = (const char *)objc_msgSend(objc_retainAutorelease(v128), "UTF8String");
    else
      v130 = "(unnamed)";
    re::DynamicString::format((re::DynamicString *)"Processing node \"%s\"", (re::DynamicString *)&v185, v130);
    v133 = (StringID)v185;
    v135 = *((_QWORD *)&v186 + 1);
    v134 = v186;
    *(_BYTE *)a4 = 0;
    v136 = 1025;
    goto LABEL_76;
  }
  if (!*(_QWORD *)(a3 + 208))
    goto LABEL_70;
  v18 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) >> 27));
  v19 = *(unsigned int *)(*(_QWORD *)(a3 + 216) + 4 * ((v18 ^ (v18 >> 31)) % *(unsigned int *)(a3 + 232)));
  if ((_DWORD)v19 == 0x7FFFFFFF)
    goto LABEL_70;
  v20 = *(_QWORD *)(a3 + 224);
  while (*(_QWORD *)(v20 + 32 * v19 + 16) != v8)
  {
    v19 = *(_DWORD *)(v20 + 32 * v19 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v19 == 0x7FFFFFFF)
      goto LABEL_70;
  }
  v21 = *(unsigned int *)(v20 + 32 * v19 + 24);
  if ((_DWORD)v21 == -1)
  {
LABEL_70:
    objc_msgSend((id)v8, "name");
    v131 = (void *)objc_claimAutoreleasedReturnValue();
    v129 = v131;
    if (v131)
      v132 = (const char *)objc_msgSend(objc_retainAutorelease(v131), "UTF8String");
    else
      v132 = "(unnamed)";
    re::DynamicString::format((re::DynamicString *)"Skeleton not found for node \"%s\"", (re::DynamicString *)&v185, v132);
    v133 = (StringID)v185;
    v135 = *((_QWORD *)&v186 + 1);
    v134 = v186;
    *(_BYTE *)a4 = 0;
    v136 = 1026;
LABEL_76:
    *(_QWORD *)(a4 + 8) = v136;
    *(_QWORD *)(a4 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(StringID *)(a4 + 24) = v133;
    *(_QWORD *)(a4 + 40) = v134;
    *(_QWORD *)(a4 + 48) = v135;

    goto LABEL_113;
  }
  v151 = v21;
  v153 = v7;
  objc_msgSend((id)v8, "jointPaths");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend(v22, "count");

  objc_msgSend((id)v8, "rotations");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "minimumTime");
  v26 = v25;

  objc_msgSend((id)v8, "rotations");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "maximumTime");
  v29 = v28;

  objc_msgSend((id)v8, "translations");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "minimumTime");
  v32 = v31;
  if (v26 > v32)
    v26 = v32;

  objc_msgSend((id)v8, "scales");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "minimumTime");
  v35 = v34;
  if (v26 > v35)
    v26 = v35;

  objc_msgSend((id)v8, "translations");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "maximumTime");
  v38 = v37;
  if (v29 < v38)
    v29 = v38;

  v159 = (void *)v8;
  objc_msgSend((id)v8, "scales");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v39, "maximumTime");
  v41 = v40;
  if (v29 < v41)
    v29 = v41;

  v173[1] = 34;
  v174 = 0;
  v175[0] = 0;
  v175[1] = &str_110;
  v178 = 256;
  v180 = 0u;
  v181 = 0u;
  v173[0] = off_24ED222D0;
  v182 = 257;
  v183 = 1;
  v154 = a3;
  v44 = *(double *)(a3 + 344);
  v179 = v44;
  v170 = 0;
  v171 = 0;
  v172 = 0;
  if (v23)
  {
    v46 = 0;
    v47 = 0;
    while (1)
    {
      objc_msgSend(v159, "jointPaths");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "objectAtIndexedSubscript:", v47);
      v49 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v50 = (_anonymous_namespace_ *)objc_msgSend(v49, "UTF8String");
      v166 = 0;
      v167 = (char *)&str_110;
      i = v171;
      if (v171 <= v47)
        break;
      v52 = (uint64_t *)&v46[v172];
      v53 = v166;
      v54 = (uint64_t)v167;
      v166 = 0;
      v167 = (char *)&str_110;
      v55 = *(char **)&v46[v172 + 8];
      v56 = v53 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)&v46[v172] & 1;
      v52[1] = v54;
      *(_QWORD *)&v185 = v56;
      *((_QWORD *)&v185 + 1) = v55;
      *v52 = v53;
      re::StringID::destroyString((re::StringID *)&v185);
      re::StringID::destroyString((re::StringID *)&v166);

      ++v47;
      v46 += 16;
      if (v23 == v47)
        goto LABEL_23;
    }
    v163 = 0;
    v188 = 0u;
    v189 = 0u;
    v186 = 0u;
    v187 = 0u;
    v185 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v195 = 136315906;
    v196 = "operator[]";
    v197 = 1024;
    v198 = 468;
    v199 = 2048;
    v200 = v47;
    v201 = 2048;
    v202 = (char *)i;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_115:
    v184 = 0;
    v188 = 0u;
    v189 = 0u;
    v186 = 0u;
    v187 = 0u;
    v185 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v195 = 136315906;
    v196 = "operator[]";
    v197 = 1024;
    v198 = 468;
    v199 = 2048;
    v200 = i;
    v201 = 2048;
    v202 = v46;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_116:
    v184 = 0;
    v188 = 0u;
    v189 = 0u;
    v186 = 0u;
    v187 = 0u;
    v185 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v195 = 136315906;
    v196 = "operator[]";
    v197 = 1024;
    v198 = 468;
    v199 = 2048;
    v200 = i;
    v201 = 2048;
    v202 = v46;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_117:
    v184 = 0;
    v188 = 0u;
    v189 = 0u;
    v186 = 0u;
    v187 = 0u;
    v185 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v195 = 136315906;
    v196 = "operator[]";
    v197 = 1024;
    v198 = 468;
    v199 = 2048;
    v200 = i;
    v201 = 2048;
    v202 = v46;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_118:
    re::internal::assertLog((re::internal *)4, v112, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 454);
    _os_crash();
    __break(1u);
LABEL_119:
    v184 = 0;
    v188 = 0u;
    v189 = 0u;
    v186 = 0u;
    v187 = 0u;
    v185 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v195 = 136315906;
    v196 = "operator[]";
    v197 = 1024;
    v198 = 468;
    v199 = 2048;
    v200 = i;
    v201 = 2048;
    v202 = v46;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_23:
  v193 = 0u;
  v194 = 0u;
  v191 = 0u;
  v192 = 0u;
  v189 = 0u;
  v190 = 0u;
  v187 = 0u;
  v188 = 0u;
  *(_QWORD *)&v185 = 0;
  v186 = 0u;
  *((_QWORD *)&v185 + 1) = &str_110;
  *(_QWORD *)&v194 = 0x7FFFFFFF00000000;
  v57 = re::globalAllocators(v45);
  v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57[2] + 32))(v57[2], 256, 8);
  v152 = re::SkeletalPoseJointDefinition::SkeletalPoseJointDefinition(v58, &v170, (const StringID *)&v185);
  v169 = v152;
  re::Skeleton::~Skeleton((re::Skeleton *)&v185);
  v59 = fmaxf(0.0 - v26, 0.0);
  *(float *)&v180 = v26 + v59;
  *((float *)&v180 + 1) = v59 + v29;
  v60 = *(double *)(v154 + 344);
  v61 = (float)((float)(v59 + v29) - (float)(v26 + v59)) / v60;
  v62 = vcvtmd_u64_f64(v61);
  v157 = v62 + 1;
  v63 = v61 - floor(v61);
  v64 = (_anonymous_namespace_ *)re::FixedArray<re::SkeletalPose>::deinit((_QWORD *)&v180 + 1);
  v156 = v62;
  if (v63 <= v60 * 0.01)
    v65 = v62 + 1;
  else
    v65 = v62 + 2;
  if ((_QWORD)v181)
  {
    v67 = (uint64_t *)*((_QWORD *)&v181 + 1);
    v68 = 88 * v181;
    do
    {
      re::SkeletalPose::init(v67, &v169);
      v67 += 11;
      v68 -= 88;
    }
    while (v68);
  }
  objc_msgSend(v159, "rotations");
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  v70 = objc_msgSend(v69, "elementCount");
  v167 = 0;
  v168 = 0;
  v166 = 0;

  objc_msgSend(v159, "scales");
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  v164 = 0;
  v165 = 0;
  v163 = 0;

  objc_msgSend(v159, "translations");
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  v161 = 0;
  v162 = 0;
  v160 = 0;

  if (v62 != -1)
  {
    v76 = 0;
    v77 = v26;
    v78 = 1;
    v79 = 88;
    while (1)
    {
      v155 = v78;
      objc_msgSend(v159, "scales");
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      v81 = v165;
      objc_msgSend(v159, "scales");
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      v83 = objc_msgSend(v80, "getFloat3Array:maxCount:atTime:", v81, objc_msgSend(v82, "elementCount"), v77 + (double)v76 * v60);

      objc_msgSend(v159, "rotations");
      v84 = (void *)objc_claimAutoreleasedReturnValue();
      v85 = v168;
      objc_msgSend(v159, "rotations");
      v86 = (void *)objc_claimAutoreleasedReturnValue();
      v87 = objc_msgSend(v84, "getFloatQuaternionArray:maxCount:atTime:", v85, objc_msgSend(v86, "elementCount"), v77 + (double)v76 * v60);

      objc_msgSend(v159, "translations");
      v88 = (void *)objc_claimAutoreleasedReturnValue();
      v89 = v162;
      objc_msgSend(v159, "translations");
      v90 = (void *)objc_claimAutoreleasedReturnValue();
      v91 = objc_msgSend(v88, "getFloat3Array:maxCount:atTime:", v89, objc_msgSend(v90, "elementCount"), v77 + (double)v76 * v60);

      if (v83)
        v92 = v83 == v87;
      else
        v92 = 0;
      if (!v92 || v87 != v91)
      {
        v79 = (uint64_t)v159;
        objc_msgSend(v159, "name");
        v137 = (void *)objc_claimAutoreleasedReturnValue();
        v138 = v137;
        if (v137)
          v139 = (const char *)objc_msgSend(objc_retainAutorelease(v137), "UTF8String");
        else
          v139 = "(unnamed)";
        v140 = v152;
        re::DynamicString::format((re::DynamicString *)"Sample %ld in node \"%s\" has: Total Scales = %ld, Total Rotations = %ld, Total Translations = %ld", (re::DynamicString *)&v185, v76, v139, v83, v87, v91);
        v141 = (StringID)v185;
        v142 = v186;
        *(_BYTE *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 1027;
        *(_QWORD *)(a4 + 16) = &re::AnimationErrorCategory(void)::instance;
        *(StringID *)(a4 + 24) = v141;
        *(_OWORD *)(a4 + 40) = v142;

        v7 = v153;
        v143 = v155;
        goto LABEL_96;
      }
      if (v23)
        break;
LABEL_47:
      v78 = v76 + 1 < v157;
      v92 = v76++ == v156;
      if (v92)
        goto LABEL_49;
    }
    v94 = 0;
    v95 = 0;
    while (1)
    {
      v96 = v164;
      if ((unint64_t)v164 <= v95)
        break;
      v96 = v167;
      if ((unint64_t)v167 <= v95)
        goto LABEL_82;
      v96 = v161;
      if ((unint64_t)v161 <= v95)
        goto LABEL_83;
      v96 = (char *)v181;
      if ((unint64_t)v181 <= v76)
        goto LABEL_84;
      v96 = *(char **)(*((_QWORD *)&v181 + 1) + 88 * v76 + 24);
      if ((unint64_t)v96 <= v95)
        goto LABEL_85;
      v97 = *(_QWORD *)(v165 + 16 * v95 + 8);
      v98 = *(_QWORD *)(v168 + 16 * v95);
      v99 = *(_QWORD *)(v168 + 16 * v95 + 8);
      v100 = *(_QWORD *)(v162 + 16 * v95);
      v101 = *(_QWORD *)(v162 + 16 * v95 + 8);
      v102 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)&v181 + 1) + 88 * v76 + 32) + v94);
      *v102 = *(_QWORD *)(v165 + 16 * v95);
      v102[1] = v97;
      v102[2] = v98;
      v102[3] = v99;
      v102[4] = v100;
      v102[5] = v101;
      ++v95;
      v94 += 48;
      if (v23 == v95)
        goto LABEL_47;
    }
    v184 = 0;
    v188 = 0u;
    v189 = 0u;
    v186 = 0u;
    v187 = 0u;
    v185 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v195 = 136315906;
    v196 = "operator[]";
    v197 = 1024;
    v198 = 468;
    v199 = 2048;
    v200 = v95;
    v201 = 2048;
    v202 = v96;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_82:
    v184 = 0;
    v188 = 0u;
    v189 = 0u;
    v186 = 0u;
    v187 = 0u;
    v185 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v195 = 136315906;
    v196 = "operator[]";
    v197 = 1024;
    v198 = 468;
    v199 = 2048;
    v200 = v95;
    v201 = 2048;
    v202 = v96;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_83:
    v184 = 0;
    v188 = 0u;
    v189 = 0u;
    v186 = 0u;
    v187 = 0u;
    v185 = 0u;
    v76 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v195 = 136315906;
    v196 = "operator[]";
    v197 = 1024;
    v198 = 468;
    v199 = 2048;
    v200 = v95;
    v201 = 2048;
    v202 = v96;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_84:
    v184 = 0;
    v188 = 0u;
    v189 = 0u;
    v186 = 0u;
    v187 = 0u;
    v185 = 0u;
    a4 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v195 = 136315906;
    v196 = "operator[]";
    v197 = 1024;
    v198 = 468;
    v199 = 2048;
    v200 = v76;
    v201 = 2048;
    v202 = v96;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_85:
    v184 = 0;
    v188 = 0u;
    v189 = 0u;
    v186 = 0u;
    v187 = 0u;
    v185 = 0u;
    v120 = (__int16 *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v195 = 136315906;
    v196 = "operator[]";
    v197 = 1024;
    v198 = 468;
    v199 = 2048;
    v200 = v95;
    v201 = 2048;
    v202 = v96;
    _os_log_send_and_compose_impl();
    v75 = (_anonymous_namespace_ *)_os_crash_msg();
    __break(1u);
    goto LABEL_86;
  }
LABEL_49:
  if (v63 > v60 * 0.01)
  {
    objc_msgSend(v159, "scales");
    v103 = (void *)objc_claimAutoreleasedReturnValue();
    v104 = v165;
    objc_msgSend(v159, "scales");
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v103, "getFloat3Array:maxCount:atTime:", v104, objc_msgSend(v105, "elementCount"), v29);

    objc_msgSend(v159, "rotations");
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    v107 = v168;
    objc_msgSend(v159, "rotations");
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v106, "getFloatQuaternionArray:maxCount:atTime:", v107, objc_msgSend(v108, "elementCount"), v29);

    objc_msgSend(v159, "translations");
    v109 = (void *)objc_claimAutoreleasedReturnValue();
    v110 = v162;
    objc_msgSend(v159, "translations");
    v111 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v109, "getFloat3Array:maxCount:atTime:", v110, objc_msgSend(v111, "elementCount"), v29);

    if (v23)
    {
      v113 = 0;
      for (i = 0; i != v23; ++i)
      {
        v46 = v164;
        if ((unint64_t)v164 <= i)
          goto LABEL_115;
        v46 = v167;
        if ((unint64_t)v167 <= i)
          goto LABEL_116;
        v46 = v161;
        if ((unint64_t)v161 <= i)
          goto LABEL_117;
        if (!(_QWORD)v181)
          goto LABEL_118;
        v46 = *(char **)(*((_QWORD *)&v181 + 1) + 88 * (v181 - 1) + 24);
        if ((unint64_t)v46 <= i)
          goto LABEL_119;
        v114 = *(_QWORD *)(v165 + 16 * i + 8);
        v115 = *(_QWORD *)(v168 + 16 * i);
        v116 = *(_QWORD *)(v168 + 16 * i + 8);
        v117 = *(_QWORD *)(v162 + 16 * i);
        v118 = *(_QWORD *)(v162 + 16 * i + 8);
        v119 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)&v181 + 1) + 88 * (v181 - 1) + 32) + v113);
        *v119 = *(_QWORD *)(v165 + 16 * i);
        v119[1] = v114;
        v119[2] = v115;
        v119[3] = v116;
        v119[4] = v117;
        v119[5] = v118;
        v113 += 48;
      }
    }
  }
  v120 = &v182;
  v96 = v158;
  v79 = (uint64_t)v159;
  v121 = *((_QWORD *)v158 + 1);
  v122 = *((_QWORD *)v158 + 2);
  v95 = v154;
  if (v122 >= v121)
  {
    v83 = v122 + 1;
    if (v121 >= v122 + 1)
    {
LABEL_87:
      v122 = *((_QWORD *)v96 + 2);
      goto LABEL_88;
    }
    if (*(_QWORD *)v158)
    {
      v123 = 2 * v121;
      v92 = v121 == 0;
      v124 = 8;
      if (!v92)
        v124 = v123;
      if (v124 <= v83)
        v125 = v83;
      else
        v125 = v124;
      re::DynamicArray<re::SkeletalPoseSampledAnimation>::setCapacity(v158, v125);
      goto LABEL_87;
    }
LABEL_86:
    re::DynamicArray<re::SkeletalPoseSampledAnimation>::setCapacity(v96, v83);
    ++*((_DWORD *)v96 + 6);
    goto LABEL_87;
  }
LABEL_88:
  v144 = re::SampledAnimation<re::SkeletalPose>::SampledAnimation(*((_QWORD *)v96 + 4) + 120 * v122, (uint64_t)v173);
  *(_QWORD *)v145 = off_24ED222D0;
  v146 = *v120;
  *(_BYTE *)(v145 + 114) = *((_BYTE *)v120 + 2);
  *(_WORD *)(v145 + 112) = v146;
  ++*((_QWORD *)v96 + 2);
  ++*((_DWORD *)v96 + 6);
  objc_msgSend((id)v79, "name", v144);
  v147 = (void *)objc_claimAutoreleasedReturnValue();
  v148 = v147;
  if (v147)
  {
    v147 = (void *)objc_msgSend(objc_retainAutorelease(v147), "UTF8String");
    v149 = (const char *)v147;
  }
  else
  {
    v149 = "(unnamed)";
  }
  v7 = v153;
  v150 = re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)(v95 + 120), &v185);
  v140 = v152;
  if ((_QWORD)v185)
  {
    if ((BYTE8(v185) & 1) != 0)
      (*(void (**)(double))(*(_QWORD *)v185 + 40))(v150);
    v185 = 0u;
    v186 = 0u;
  }

  *(_QWORD *)&v185 = v151;
  re::DynamicArray<unsigned long>::add((_QWORD *)(v95 + 40), &v185);
  v143 = 0;
LABEL_96:
  if (v160 && v161)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v160 + 40))(v160, v162);
  if (v163 && v164)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v163 + 40))(v163, v165);
  if (v166 && v167)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v166 + 40))(v166, v168);
  if (v140)

  re::FixedArray<re::StringID>::deinit(&v170);
  v173[0] = off_24ED22100;
  re::FixedArray<re::SkeletalPose>::deinit((_QWORD *)&v180 + 1);
  v173[0] = off_24ED1F350;
  if ((_QWORD)v176)
  {
    if ((BYTE8(v176) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v176 + 40))(v176, v177);
    v176 = 0u;
    v177 = 0u;
  }
  re::StringID::destroyString((re::StringID *)v175);

  if (!v143)
    goto LABEL_112;
LABEL_113:

}

void re::importSkinningAndSkeletalAnimations(void *a1@<X0>, uint64_t a2@<X1>, re::ModelIOSkinningData *a3@<X2>, char *a4@<X3>, re::AnimationMetaData *a5@<X4>, unsigned __int8 *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  int v16;
  double v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  unint64_t v25;
  id v26;

  v26 = a1;
  re::DynamicArray<re::ModelIOSkeleton>::clear(a2);
  re::DynamicArray<re::ModelIOSkinningData>::clear(a3);
  re::DynamicArray<re::SkeletalPoseSampledAnimation>::clear((uint64_t)a4);
  re::AnimationMetaData::deinit(a5);
  objc_msgSend(v26, "frameInterval");
  *((_QWORD *)a5 + 43) = v11;
  v12 = objc_msgSend(v26, "count");
  if (v12)
  {
    v13 = v12;
    v14 = 0;
    while (1)
    {
      objc_msgSend(v26, "objectAtIndexedSubscript:", v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      skinnedMeshTraverseNode(v15, a2, (uint64_t)a3, a5, a6);
      v16 = *a6;

      if (!v16)
        break;
      if (v13 == ++v14)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    objc_msgSend(v26, "frameInterval");
    if (v17 > 0.0
      && (objc_msgSend(v26, "animations"),
          v18 = (void *)objc_claimAutoreleasedReturnValue(),
          v19 = objc_msgSend(v18, "count"),
          v18,
          v19))
    {
      v20 = 0;
      while (1)
      {
        objc_msgSend(v26, "animations");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "objects");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "objectAtIndexedSubscript:", v20);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        processAnimationObject(v23, a4, (unint64_t)a5, (uint64_t)a6);

        if (!*a6)
          break;
        ++v20;
        objc_msgSend(v26, "animations");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = objc_msgSend(v24, "count");

        if (v20 >= v25)
          goto LABEL_10;
      }
    }
    else
    {
LABEL_10:
      *a6 = 1;
    }
  }

}

void re::DynamicArray<re::ModelIOSkeleton>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = 0;
    v4 = *(_QWORD *)(a1 + 32);
    v5 = 168 * v2;
    do
    {
      v6 = (_QWORD *)(v4 + v3);
      v7 = re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v4 + v3 + 120));
      v8 = *(_QWORD *)(v4 + v3 + 96);
      if (v8)
      {
        if (v6[13])
        {
          (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(v4 + v3 + 112), v7);
          v6[13] = 0;
          v6[14] = 0;
        }
        v6[12] = 0;
      }
      re::FixedArray<re::StringID>::deinit(v6 + 9);
      v9 = v6[6];
      if (v9)
      {
        if (*(_QWORD *)(v4 + v3 + 56))
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, *(_QWORD *)(v4 + v3 + 64));
          *(_QWORD *)(v4 + v3 + 56) = 0;
          *(_QWORD *)(v4 + v3 + 64) = 0;
        }
        v6[6] = 0;
      }
      v10 = (_QWORD *)(v4 + v3);
      v11 = *(_QWORD *)(v4 + v3 + 24);
      if (v11)
      {
        if (v10[4])
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 40))(v11, *(_QWORD *)(v4 + v3 + 40));
          v10[4] = 0;
          v10[5] = 0;
        }
        v10[3] = 0;
      }
      re::StringID::destroyString((re::StringID *)(v4 + v3));
      v3 += 168;
    }
    while (v5 != v3);
  }
  ++*(_DWORD *)(a1 + 24);
}

re::ModelIOSkinningData *re::DynamicArray<re::ModelIOSkinningData>::clear(re::ModelIOSkinningData *result)
{
  re::ModelIOSkinningData *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  v2 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = 0;
  if (v2)
  {
    result = (re::ModelIOSkinningData *)*((_QWORD *)result + 4);
    v3 = 224 * v2;
    do
    {
      re::ModelIOSkinningData::~ModelIOSkinningData(result);
      result = (re::ModelIOSkinningData *)(v4 + 224);
      v3 -= 224;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

void re::DynamicArray<re::SkeletalPoseSampledAnimation>::clear(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 88);
    v4 = 120 * v2;
    do
    {
      *(v3 - 11) = off_24ED22100;
      re::FixedArray<re::SkeletalPose>::deinit(v3);
      *(v3 - 11) = off_24ED1F350;
      v5 = *(v3 - 6);
      if (v5)
      {
        if ((*(_BYTE *)(v3 - 5) & 1) != 0)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(v3 - 4));
        *((_OWORD *)v3 - 3) = 0u;
        *((_OWORD *)v3 - 2) = 0u;
      }
      re::StringID::destroyString((re::StringID *)(v3 - 8));
      v3 += 15;
      v4 -= 120;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

void skinnedMeshTraverseNode(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _anonymous_namespace_ *a4@<X3>, unsigned __int8 *a5@<X8>)
{
  id v9;
  void *v10;
  void *v11;
  const char *v12;
  double v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  int v20;
  unsigned __int8 v21[8];
  __int128 v22;
  _OWORD v23[2];
  __int128 v24;
  __int128 v25;

  v9 = a1;
  if (v9)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      processForMeshData((uint64_t)v21, v9, a2, a3, a4);
      if (v21[0])
      {
        objc_msgSend(v9, "name");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = v10;
        if (v10)
        {
          v10 = (void *)objc_msgSend(objc_retainAutorelease(v10), "UTF8String");
          v12 = (const char *)v10;
        }
        else
        {
          v12 = "(unnamed)";
        }
        v13 = re::DynamicArray<re::DynamicString>::add(a4, &v24);
        if ((_QWORD)v24)
        {
          if ((BYTE8(v24) & 1) != 0)
            (*(void (**)(double))(*(_QWORD *)v24 + 40))(v13);
          v24 = 0u;
          v25 = 0u;
        }

      }
    }
    else
    {
      v21[0] = 1;
    }
  }
  else
  {
    v21[0] = 0;
    *(_QWORD *)&v22 = 1024;
    *((_QWORD *)&v22 + 1) = &re::AnimationErrorCategory(void)::instance;
    v23[0] = v24;
    v23[1] = v25;
  }

  if (!v21[0])
  {
    *a5 = 0;
    *(_OWORD *)(a5 + 8) = v22;
    *((_QWORD *)a5 + 3) = *(_QWORD *)&v23[0];
    *((_QWORD *)a5 + 6) = *((_QWORD *)&v23[1] + 1);
    *((_OWORD *)a5 + 2) = *(_OWORD *)((char *)v23 + 8);
    memset(v23, 0, sizeof(v23));
LABEL_24:
    if (*(_QWORD *)&v23[0] && (BYTE8(v23[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v23[0] + 40))();
    goto LABEL_27;
  }
  objc_msgSend(v9, "children");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "count");
  if (v15)
  {
    v16 = v15;
    v17 = 0;
    while (1)
    {
      objc_msgSend(v14, "objects");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "objectAtIndexedSubscript:", v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      skinnedMeshTraverseNode(v19, a2, a3, a4);
      LODWORD(v18) = *a5;

      if (!(_DWORD)v18)
        break;
      if (v16 == ++v17)
        goto LABEL_19;
    }
  }
  else
  {
LABEL_19:
    v20 = v21[0];
    *a5 = v21[0];
    if (!v20)
    {
      *(_OWORD *)(a5 + 8) = v22;
      *((_QWORD *)a5 + 3) = *(_QWORD *)&v23[0];
      *((_QWORD *)a5 + 6) = *((_QWORD *)&v23[1] + 1);
      *((_OWORD *)a5 + 2) = *(_OWORD *)((char *)v23 + 8);
      memset(v23, 0, sizeof(v23));
    }
  }

  if (!v21[0])
    goto LABEL_24;
LABEL_27:

}

uint64_t re::isSkinnedMesh(re *this, const MDLMesh *a2)
{
  re *v2;
  re *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = this;
  v3 = v2;
  if (v2)
  {
    v11 = 0u;
    v12 = 0u;
    v10 = 0u;
    -[re components](v2, "components", 0, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v5)
    {
      v6 = *(_QWORD *)v10;
      while (2)
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v10 != v6)
            objc_enumerationMutation(v4);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v5 = 1;
            goto LABEL_12;
          }
        }
        v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
        if (v5)
          continue;
        break;
      }
    }
LABEL_12:

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

_QWORD *re::DynamicArray<re::ModelIOSkeleton>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ModelIOSkeleton>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xA8uLL))
        {
          v2 = 168 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 168 * a2, 8);
          v30 = result;
          if (result)
          {
            if (!v5[1])
              goto LABEL_28;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 168, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v30 = 0;
      if (!v3)
      {
LABEL_28:
        v5[4] = v30;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v7 = v5[4];
      v8 = v5[2];
      if (v8)
      {
        v9 = 0;
        v29 = 168 * v8;
        do
        {
          v10 = &v30[v9 / 8];
          v11 = (_QWORD *)(v7 + v9);
          v12 = *(_QWORD *)(v7 + v9);
          *v10 = v30[v9 / 8] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          *v10 = *(_QWORD *)(v7 + v9) & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v10[1] = *(_QWORD *)(v7 + v9 + 8);
          *v11 = 0;
          v11[1] = &str_110;
          *((_DWORD *)v10 + 4) = *(_DWORD *)(v7 + v9 + 16);
          v10[4] = 0;
          v10[5] = 0;
          v10[3] = 0;
          v14 = (uint64_t *)(v7 + v9 + 32);
          v13 = *v14;
          v10[3] = *(_QWORD *)(v7 + v9 + 24);
          v11[3] = 0;
          v10[4] = v13;
          *v14 = 0;
          v15 = v30[v9 / 8 + 5];
          v10[5] = *(_QWORD *)(v7 + v9 + 40);
          v11[5] = v15;
          v10[7] = 0;
          v10[8] = 0;
          v10[6] = 0;
          v17 = (uint64_t *)(v7 + v9 + 56);
          v16 = *v17;
          v10[6] = *(_QWORD *)(v7 + v9 + 48);
          v11[6] = 0;
          v10[7] = v16;
          *v17 = 0;
          v18 = v30[v9 / 8 + 8];
          v10[8] = *(_QWORD *)(v7 + v9 + 64);
          v11[8] = v18;
          v10[9] = 0;
          v10[10] = 0;
          v10[11] = 0;
          v10[9] = *(_QWORD *)(v7 + v9 + 72);
          *(_QWORD *)(v7 + v9 + 72) = 0;
          v19 = v30[v9 / 8 + 11];
          v20 = *(_QWORD *)(v7 + v9 + 88);
          v10[10] = *(_QWORD *)(v7 + v9 + 80);
          v10[11] = v20;
          v11[10] = 0;
          v11[11] = v19;
          v10[12] = 0;
          v10[13] = 0;
          v10[14] = 0;
          v22 = (uint64_t *)(v7 + v9 + 104);
          v21 = *v22;
          v10[12] = *(_QWORD *)(v7 + v9 + 96);
          v11[12] = 0;
          v10[13] = v21;
          *v22 = 0;
          v23 = v30[v9 / 8 + 14];
          v10[14] = *(_QWORD *)(v7 + v9 + 112);
          v11[14] = v23;
          *(_OWORD *)(v10 + 15) = 0u;
          v24 = (uint64_t)&v30[v9 / 8 + 15];
          *(_DWORD *)(v24 + 32) = 0;
          *(_OWORD *)(v24 + 16) = 0u;
          *(_QWORD *)(v24 + 36) = 0x7FFFFFFFLL;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v24, (uint64_t *)(v7 + v9 + 120));
          v25 = re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v7 + v9 + 120));
          v26 = *(_QWORD *)(v7 + v9 + 96);
          if (v26)
          {
            if (*v22)
            {
              (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v26 + 40))(v26, v11[14], v25);
              *v22 = 0;
              *(_QWORD *)(v7 + v9 + 112) = 0;
            }
            v11[12] = 0;
          }
          re::FixedArray<re::StringID>::deinit((_QWORD *)(v7 + v9 + 72));
          v27 = v11[6];
          if (v27)
          {
            if (*v17)
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 40))(v27, v11[8]);
              *v17 = 0;
              *(_QWORD *)(v7 + v9 + 64) = 0;
            }
            v11[6] = 0;
          }
          v28 = v11[3];
          if (v28)
          {
            if (*v14)
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 40))(v28, v11[5]);
              *v14 = 0;
              *(_QWORD *)(v7 + v9 + 40) = 0;
            }
            v11[3] = 0;
          }
          re::StringID::destroyString((re::StringID *)(v7 + v9));
          v9 += 168;
        }
        while (v29 != v9);
        v7 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v7);
      goto LABEL_28;
    }
  }
  return result;
}

void re::FixedArray<simd_double4x4>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >> 57)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 128, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = a3 << 7;
  v6 = (_OWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3 << 7, 16);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 128);
    v8 = (_OWORD *)((char *)v8 + v5 - 128);
  }
  v8[6] = 0u;
  v8[7] = 0u;
  v8[4] = 0u;
  v8[5] = 0u;
  v8[2] = 0u;
  v8[3] = 0u;
  *v8 = 0u;
  v8[1] = 0u;
}

_QWORD *re::DynamicArray<re::ModelIOSkinningData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ModelIOSkinningData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xE0uLL))
        {
          v2 = 224 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 224 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 224, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 224 * v9;
        v11 = v7;
        do
        {
          *(_OWORD *)v11 = *(_OWORD *)v8;
          v12 = *(_OWORD *)(v8 + 16);
          v13 = *(_OWORD *)(v8 + 32);
          v14 = *(_OWORD *)(v8 + 48);
          *((_DWORD *)v11 + 16) = *(_DWORD *)(v8 + 64);
          *((_OWORD *)v11 + 2) = v13;
          *((_OWORD *)v11 + 3) = v14;
          *((_OWORD *)v11 + 1) = v12;
          *(_OWORD *)(v11 + 9) = 0u;
          *(_OWORD *)(v11 + 11) = 0u;
          v11[12] = *(_QWORD *)(v8 + 96);
          v15 = *(_QWORD *)(v8 + 80);
          v11[9] = *(_QWORD *)(v8 + 72);
          *(_QWORD *)(v8 + 72) = 0;
          v16 = *(_QWORD *)(v8 + 88);
          *(_QWORD *)(v8 + 96) = 0;
          v18 = v11[10];
          v17 = v11[11];
          v11[10] = v15;
          v11[11] = v16;
          *(_QWORD *)(v8 + 80) = v18;
          *(_QWORD *)(v8 + 88) = v17;
          v11[13] = 0;
          v11[14] = 0;
          v11[15] = 0;
          v19 = *(_QWORD *)(v8 + 112);
          v11[13] = *(_QWORD *)(v8 + 104);
          v11[14] = v19;
          *(_QWORD *)(v8 + 104) = 0;
          *(_QWORD *)(v8 + 112) = 0;
          v20 = v11[15];
          v11[15] = *(_QWORD *)(v8 + 120);
          *(_QWORD *)(v8 + 120) = v20;
          v11[16] = 0;
          v11[17] = 0;
          v11[18] = 0;
          v21 = *(_QWORD *)(v8 + 136);
          v11[16] = *(_QWORD *)(v8 + 128);
          v11[17] = v21;
          *(_QWORD *)(v8 + 128) = 0;
          *(_QWORD *)(v8 + 136) = 0;
          v22 = v11[18];
          v11[18] = *(_QWORD *)(v8 + 144);
          *(_QWORD *)(v8 + 144) = v22;
          v11[19] = 0;
          v11[20] = 0;
          v11[21] = 0;
          v23 = *(_QWORD *)(v8 + 160);
          v11[19] = *(_QWORD *)(v8 + 152);
          v11[20] = v23;
          *(_QWORD *)(v8 + 152) = 0;
          *(_QWORD *)(v8 + 160) = 0;
          v24 = v11[21];
          v11[21] = *(_QWORD *)(v8 + 168);
          *(_QWORD *)(v8 + 168) = v24;
          v11[22] = 0;
          v11[23] = 0;
          v11[24] = 0;
          v25 = *(_QWORD *)(v8 + 184);
          v11[22] = *(_QWORD *)(v8 + 176);
          v11[23] = v25;
          *(_QWORD *)(v8 + 176) = 0;
          *(_QWORD *)(v8 + 184) = 0;
          v26 = v11[24];
          v11[24] = *(_QWORD *)(v8 + 192);
          *(_QWORD *)(v8 + 192) = v26;
          v11[25] = 0;
          v11[26] = 0;
          v11[27] = 0;
          v27 = *(_QWORD *)(v8 + 208);
          v11[25] = *(_QWORD *)(v8 + 200);
          v11[26] = v27;
          *(_QWORD *)(v8 + 200) = 0;
          *(_QWORD *)(v8 + 208) = 0;
          v28 = v11[27];
          v11[27] = *(_QWORD *)(v8 + 216);
          *(_QWORD *)(v8 + 216) = v28;
          re::ModelIOSkinningData::~ModelIOSkinningData((re::ModelIOSkinningData *)v8);
          v8 += 224;
          v11 += 28;
        }
        while (v8 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::types::Ok<re::GeomSkeleton>::Ok(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a2;
  *(_QWORD *)a1 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(_QWORD *)a1 = *a2 & 0xFFFFFFFFFFFFFFFELL | v3 & 1;
  *(_QWORD *)(a1 + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v4 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v4;
  a2[2] = 0;
  a2[3] = 0;
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = a2[4];
  a2[4] = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v6 = a2[6];
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = v6;
  a2[5] = 0;
  a2[6] = 0;
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = a2[7];
  a2[7] = v7;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v8 = a2[9];
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_QWORD *)(a1 + 72) = v8;
  a2[8] = 0;
  a2[9] = 0;
  v9 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = a2[10];
  a2[10] = v9;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v10 = a2[12];
  *(_QWORD *)(a1 + 88) = a2[11];
  *(_QWORD *)(a1 + 96) = v10;
  a2[11] = 0;
  a2[12] = 0;
  v11 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = a2[13];
  a2[13] = v11;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 148) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 112), a2 + 14);
  return a1;
}

uint64_t re::Result<re::GeomSkeleton,re::DetailedError>::Result(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = 1;
  v3 = *a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(_QWORD *)(a1 + 8) = *a2 & 0xFFFFFFFFFFFFFFFELL | v3 & 1;
  *(_QWORD *)(a1 + 16) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v4 = a2[3];
  *(_QWORD *)(a1 + 24) = a2[2];
  *(_QWORD *)(a1 + 32) = v4;
  a2[2] = 0;
  a2[3] = 0;
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = a2[4];
  a2[4] = v5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = a2[6];
  *(_QWORD *)(a1 + 48) = a2[5];
  *(_QWORD *)(a1 + 56) = v6;
  a2[5] = 0;
  a2[6] = 0;
  v7 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = a2[7];
  a2[7] = v7;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v8 = a2[9];
  *(_QWORD *)(a1 + 72) = a2[8];
  *(_QWORD *)(a1 + 80) = v8;
  a2[8] = 0;
  a2[9] = 0;
  v9 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = a2[10];
  a2[10] = v9;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v10 = a2[12];
  *(_QWORD *)(a1 + 96) = a2[11];
  *(_QWORD *)(a1 + 104) = v10;
  a2[11] = 0;
  a2[12] = 0;
  v11 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = a2[13];
  a2[13] = v11;
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 156) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 120), a2 + 14);
  return a1;
}

void re::types::Ok<re::SkeletalPoseSampledAnimationAssetData>::Ok(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  re::SampledAnimationAssetData<re::SkeletalPoseAssetData>::SampledAnimationAssetData(a1, a2);
  *(_QWORD *)v3 = off_24ED33AA8;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  v4 = *(_QWORD *)(v3 + 128);
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = v4;
  v5 = *(_QWORD *)(v3 + 144);
  *(_QWORD *)(v3 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = v5;
  *(_QWORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *(_DWORD *)(v3 + 176) = 0;
  v6 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(v3 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(v3 + 160) = v6;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  v7 = *(_QWORD *)(v3 + 168);
  *(_QWORD *)(v3 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = v7;
  v8 = *(_QWORD *)(v3 + 184);
  *(_QWORD *)(v3 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 184) = v8;
  ++*(_DWORD *)(a2 + 176);
  ++*(_DWORD *)(v3 + 176);
  LOWORD(v8) = *(_WORD *)(a2 + 192);
  *(_BYTE *)(v3 + 194) = *(_BYTE *)(a2 + 194);
  *(_WORD *)(v3 + 192) = v8;
}

uint64_t re::Result<re::SkeletalPoseSampledAnimationAssetData,re::DetailedError>::Result(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = 1;
  re::SampledAnimationAssetData<re::SkeletalPoseAssetData>::SampledAnimationAssetData(a1 + 8, a2);
  *(_QWORD *)(a1 + 8) = off_24ED33AA8;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  v4 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = v4;
  v5 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = v5;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  v6 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = v6;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  v7 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = v7;
  v8 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 184) = v8;
  ++*(_DWORD *)(a2 + 176);
  ++*(_DWORD *)(a1 + 184);
  LOWORD(v8) = *(_WORD *)(a2 + 192);
  *(_BYTE *)(a1 + 202) = *(_BYTE *)(a2 + 194);
  *(_WORD *)(a1 + 200) = v8;
  return a1;
}

_QWORD *re::DynamicArray<re::SkeletalPoseSampledAnimation>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::SkeletalPoseSampledAnimation>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x78uLL))
        {
          v2 = 120 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 120 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 120, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 120 * v9;
        do
        {
          v12 = v8 + v10;
          re::SampledAnimation<re::SkeletalPose>::SampledAnimation((uint64_t)&v7[v10 / 8], v8 + v10);
          *(_QWORD *)v13 = off_24ED222D0;
          v14 = *(_WORD *)(v8 + v10 + 112);
          *(_BYTE *)(v13 + 114) = *(_BYTE *)(v8 + v10 + 114);
          *(_WORD *)(v13 + 112) = v14;
          *(_QWORD *)v12 = off_24ED22100;
          re::FixedArray<re::SkeletalPose>::deinit((_QWORD *)(v8 + v10 + 88));
          *(_QWORD *)v12 = off_24ED1F350;
          v15 = *(_QWORD *)(v8 + v10 + 40);
          if (v15)
          {
            if ((*(_BYTE *)(v12 + 48) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 40))(v15, *(_QWORD *)(v8 + v10 + 56));
            *(_OWORD *)(v8 + v10 + 40) = 0u;
            *(_OWORD *)(v12 + 56) = 0u;
          }
          re::StringID::destroyString((re::StringID *)(v12 + 24));
          v10 += 120;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t re::internal::DataPayload::DataPayload(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17;

  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)a1 = &off_24ED7D3C8;
  *(_QWORD *)(a1 + 24) = a2;
  *(_BYTE *)(a1 + 32) = a7;
  *(_BYTE *)(a1 + 33) = a3;
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 48) = a5;
  if (a8)
    v17 = a8;
  else
    v17 = a2;
  *(_QWORD *)(a1 + 56) = a6;
  *(_QWORD *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 96) = 0;
  if (a9)
  {
    *(_QWORD *)(a1 + 72) = &off_24ED7D410;
    *(_QWORD *)(a1 + 80) = a9;
    *(_QWORD *)(a1 + 96) = a1 + 72;
  }
  return a1;
}

void re::internal::DataPayload::~DataPayload(re::internal::DataPayload *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24ED7D3C8;
  v8[0] = *((_QWORD *)this + 8);
  v2 = *((_QWORD *)this + 12);
  if (!v2)
    std::__throw_bad_function_call[abi:nn180100]();
  v3 = (_QWORD *)((char *)this + 72);
  v4 = v8;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 48))(v2, v8);
  v8[0] = &off_24ED7D410;
  v8[1] = re::internal::DataPayload::defaultFreeFunction;
  v9 = v8;
  if (v8 == (_QWORD *)((char *)this + 72))
  {
    v5 = 4;
  }
  else
  {
    v4 = (_QWORD *)*((_QWORD *)this + 12);
    if (v4 == v3)
    {
      v9 = 0;
      v4 = v8;
      (*(void (**)(char *, _QWORD *))(*((_QWORD *)this + 9) + 24))((char *)this + 72, v8);
      (*(void (**)(_QWORD))(**((_QWORD **)this + 12) + 32))(*((_QWORD *)this + 12));
      v9 = v8;
      *((_QWORD *)this + 9) = &off_24ED7D410;
      *((_QWORD *)this + 10) = re::internal::DataPayload::defaultFreeFunction;
      v5 = 4;
      *((_QWORD *)this + 12) = v3;
    }
    else
    {
      *((_QWORD *)this + 9) = &off_24ED7D410;
      *((_QWORD *)this + 10) = re::internal::DataPayload::defaultFreeFunction;
      v9 = v4;
      *((_QWORD *)this + 12) = v3;
      if (v4 == v8)
      {
        v5 = 4;
        v4 = v8;
      }
      else
      {
        if (!v4)
        {
          *((_QWORD *)this + 3) = 0;
          *((_QWORD *)this + 8) = 0;
          goto LABEL_14;
        }
        v5 = 5;
      }
    }
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v5))(v4);
  v6 = (_QWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 8) = 0;
  if (v6 == v3)
  {
LABEL_14:
    v7 = 4;
    goto LABEL_15;
  }
  if (v6)
  {
    v7 = 5;
    v3 = v6;
LABEL_15:
    (*(void (**)(_QWORD *))(*v3 + 8 * v7))(v3);
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::internal::DataPayload::~DataPayload(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::GeomModelDescriptor::makeCFDataPayload(uint64_t *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  int v6;
  unsigned int BytePtr;
  char v8;
  re *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;

  v4 = *(id *)a2;
  CFRetain(v4);
  v6 = 0;
  switch(*(_BYTE *)(a2 + 8))
  {
    case 0:
    case 1:
      goto LABEL_6;
    case 2:
    case 3:
      v6 = 1;
      goto LABEL_6;
    case 4:
    case 5:
    case 6:
    case 0xB:
      v6 = 3;
      goto LABEL_6;
    case 7:
    case 8:
      v6 = 7;
      goto LABEL_6;
    case 9:
    case 0xA:
      v6 = 15;
LABEL_6:
      BytePtr = CFDataGetBytePtr((CFDataRef)v4);
      v8 = (((*(_DWORD *)(a2 + 24) + BytePtr) | (*(_DWORD *)(a2 + 24) + BytePtr + *(_DWORD *)(a2 + 32))) & v6) == 0;
      v9 = (re *)CFDataGetBytePtr((CFDataRef)v4);
      v10 = re::globalAllocators(v9);
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10[2] + 32))(v10[2], 104, 8);
      result = re::internal::DataPayload::DataPayload(v11, (uint64_t)v9, *(_BYTE *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 24), v8, (uint64_t)v4, (uint64_t)re::internal::freeCoreFoundationData);
      break;
    default:
      result = 0;
      if (*(unsigned __int8 *)(a2 + 8) != 255)
      {
        re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Unsupported type", "!\"Unreachable code\"", "alignOfGeomModelValueType", 110);
        _os_crash();
        __break(1u);
        JUMPOUT(0x225B2F674);
      }
      return result;
  }
  *a1 = result;
  return result;
}

_anonymous_namespace_ *re::GeomModelDescriptor::validateIndexType@<X0>(_anonymous_namespace_ *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 < 6)
  {
    *(_BYTE *)a3 = 1;
  }
  else
  {
    v4 = v7;
    v5 = v8;
    v6 = v9;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 100;
    *(_QWORD *)(a3 + 16) = &re::AssetErrorCategory(void)::instance;
    *(_OWORD *)(a3 + 24) = v4;
    *(_QWORD *)(a3 + 40) = v5;
    *(_QWORD *)(a3 + 48) = v6;
  }
  return result;
}

__n128 re::GeomModelDescriptor::validateIfCoreAttribute@<Q0>(uint64_t a1@<X1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  const char *v7;
  _anonymous_namespace_ *v8;
  __n128 result;
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;
  _anonymous_namespace_ *v12;
  _anonymous_namespace_ *v13;
  _anonymous_namespace_ *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;

  if ((*(_QWORD *)(a1 + 8) & 1) != 0)
    v7 = *(const char **)(a1 + 16);
  else
    v7 = (const char *)(a1 + 9);
  v8 = (_anonymous_namespace_ *)strcmp(v7, "vertexPosition");
  if (!(_DWORD)v8)
  {
    if ((a3 & 0xFFFFFFFD) != 9)
    {
      v15 = "Only float[3] supported for positions.";
      goto LABEL_35;
    }
    if (a2 != 1)
    {
      v15 = "Position must be at the vertex rate.";
      goto LABEL_35;
    }
LABEL_30:
    *(_BYTE *)a4 = 1;
    return result;
  }
  v10 = (_anonymous_namespace_ *)strcmp(v7, "vertexUV");
  if (!(_DWORD)v10)
  {
    if (a3 != 8)
    {
      v15 = "Only float[2] supported for uvs.";
      goto LABEL_35;
    }
    if ((a2 & 0xFFFFFFFD) != 1)
    {
      v15 = "Uvs must be at either the vertex or face-varying rate.";
      goto LABEL_35;
    }
    goto LABEL_30;
  }
  v11 = (_anonymous_namespace_ *)strcmp(v7, "vertexNormal");
  if (!(_DWORD)v11)
  {
    if ((a3 & 0xFFFFFFFD) != 9)
    {
      v15 = "Only float[3] supported for normals.";
      goto LABEL_35;
    }
    if ((a2 - 4) <= 0xFFFFFFFC)
    {
      v15 = "Normals must be at the vertex, face, or face-varying rate.";
      goto LABEL_35;
    }
    goto LABEL_30;
  }
  v12 = (_anonymous_namespace_ *)strcmp(v7, "vertexTangent");
  if (!(_DWORD)v12)
  {
    if ((a3 & 0xFFFFFFFD) != 9)
    {
      v15 = "Only float[3] supported for tangents.";
      goto LABEL_35;
    }
    if ((a2 & 0xFFFFFFFD) != 1)
    {
      v15 = "Tangents must be at the vertex or face-varying rate.";
      goto LABEL_35;
    }
    goto LABEL_30;
  }
  v13 = (_anonymous_namespace_ *)strcmp(v7, "vertexBitangent");
  if (!(_DWORD)v13)
  {
    if ((a3 & 0xFFFFFFFD) != 9)
    {
      v15 = "Only float[3] supported for bitangents.";
      goto LABEL_35;
    }
    if ((a2 & 0xFFFFFFFD) != 1)
    {
      v15 = "Bitangents must be at the vertex or face-varying rate.";
      goto LABEL_35;
    }
    goto LABEL_30;
  }
  v14 = (_anonymous_namespace_ *)strcmp(v7, "vertexColor");
  if ((_DWORD)v14)
    goto LABEL_30;
  if (a3 != 10)
  {
    v15 = "Only float[4] supported for colors.";
    goto LABEL_35;
  }
  if (a2 != 4)
    goto LABEL_30;
  v15 = "Colors cannot be at the user-managed rate.";
LABEL_35:
  result = v18;
  v16 = v19;
  v17 = v20;
  *(_BYTE *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 100;
  *(_QWORD *)(a4 + 16) = &re::AssetErrorCategory(void)::instance;
  *(__n128 *)(a4 + 24) = result;
  *(_QWORD *)(a4 + 40) = v16;
  *(_QWORD *)(a4 + 48) = v17;
  return result;
}

void re::GeomModelDescriptor::setSurfaceTopology(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  __int128 v18;
  uint64_t v19;
  _anonymous_namespace_ *v20;
  __int128 v21;
  uint64_t v22;
  _anonymous_namespace_ *v23;
  char v24;
  _BYTE v25[24];
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  if (!*(_QWORD *)a3)
  {
    v14 = *(_OWORD *)v25;
    v15 = *(_QWORD *)&v25[16];
    v16 = v26;
    *(_BYTE *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 100;
    *(_QWORD *)(a5 + 16) = &re::AssetErrorCategory(void)::instance;
    *(_OWORD *)(a5 + 24) = v14;
    *(_QWORD *)(a5 + 40) = v15;
    *(_QWORD *)(a5 + 48) = v16;
    return;
  }
  v10 = re::GeomModelDescriptor::validateIndexType(a1, *(unsigned __int8 *)(a3 + 8), (uint64_t)v25);
  if (v25[0])
  {
    if (!*(_QWORD *)a4)
    {
      v17 = "Null vertex indices per face buffer.";
LABEL_20:
      v18 = v21;
      v19 = v22;
      v20 = v23;
      *(_BYTE *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 100;
      *(_QWORD *)(a5 + 16) = &re::AssetErrorCategory(void)::instance;
      *(_OWORD *)(a5 + 24) = v18;
      *(_QWORD *)(a5 + 40) = v19;
      *(_QWORD *)(a5 + 48) = v20;
      goto LABEL_21;
    }
    re::GeomModelDescriptor::validateIndexType(v10, *(unsigned __int8 *)(a4 + 8), (uint64_t)&v21);
    v11 = (_anonymous_namespace_ *)re::Result<re::Unit,re::DetailedError>::operator=((uint64_t)v25, (uint64_t)&v21);
    if (!(_BYTE)v21)
    {
      v11 = v23;
      if (v23)
      {
        if ((v24 & 1) != 0)
          v11 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v23 + 40))();
      }
    }
    if (v25[0])
    {
      if (*(_QWORD *)(a3 + 32) && *(_QWORD *)(a4 + 32))
      {
        *((_QWORD *)a1 + 2) = a2;
        *((_QWORD *)a1 + 3) = *(_QWORD *)(a3 + 16);
        re::GeomModelDescriptor::makeCFDataPayload((uint64_t *)&v21, a3);
        v12 = *((_QWORD *)a1 + 4);
        *((_QWORD *)a1 + 4) = v21;
        if (v12)

        re::GeomModelDescriptor::makeCFDataPayload((uint64_t *)&v21, a4);
        v13 = *((_QWORD *)a1 + 5);
        *((_QWORD *)a1 + 5) = v21;
        if (v13)

        *(_BYTE *)a5 = 1;
        goto LABEL_21;
      }
      v17 = "Zero stride provided.";
      goto LABEL_20;
    }
  }
  *(_BYTE *)a5 = 0;
  *(_OWORD *)(a5 + 8) = *(_OWORD *)&v25[8];
  *(_QWORD *)(a5 + 24) = v26;
  *(_QWORD *)(a5 + 48) = v28;
  *(_OWORD *)(a5 + 32) = v27;
  v28 = 0;
  v26 = 0;
  v27 = 0uLL;
LABEL_21:
  if (!v25[0] && v26 && (v27 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v26 + 40))();
}

void re::GeomModelDescriptor::makeFromGeomMeshes(_anonymous_namespace_ *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  _anonymous_namespace_ *v5;
  uint64_t v6;
  unint64_t v7;
  const re::GeomMesh *v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _anonymous_namespace_ *canAppendGeomMeshToGeomMesh;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  const char *v19;
  re::internal::GeomAttributeManager *v20;
  _anonymous_namespace_ *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  re::Data *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  re::Data *v40;
  const void *v41;
  uint64_t v42;
  unsigned int v43;
  re::Data *v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  re::Data *v53;
  unsigned int v54;
  __int128 v55;
  re::Data *v56;
  unsigned int v57;
  re::Data *v58;
  unsigned int v59;
  char v60;
  re::Data *v61;
  unsigned int v62;
  re::Data *v63;
  unsigned int v64;
  re::Data *v65;
  unsigned int v66;
  re::Data *v67;
  unsigned int v68;
  char v69;
  re::Data *v70;
  unsigned int v71;
  re::Data *v72;
  unsigned int v73;
  re::Data *v74;
  unsigned int v75;
  uint64_t *v76;
  int v77;
  unsigned int *v78;
  unsigned int *v79;
  uint64_t v80;
  size_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  int64_t v85;
  re::Data *v86;
  const void *v87;
  int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int *v91;
  re::Data *v92;
  const void *v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  unsigned int *v97;
  uint64_t v98;
  unsigned int *v99;
  re::Data *v100;
  const void *v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  unsigned int *v105;
  uint64_t v106;
  unsigned int *v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  unsigned int *v111;
  uint64_t v112;
  unsigned int *v113;
  re::Data *v114;
  const void *v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  unsigned int *v119;
  uint64_t v120;
  unsigned int *v121;
  re::Data *v122;
  const void *v123;
  id v124;
  id v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  unsigned int *v129;
  uint64_t v130;
  unsigned int *v131;
  re::Data *v132;
  const void *v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  unsigned int *v137;
  size_t v138;
  unsigned int *v139;
  int v140;
  unsigned int *v141;
  unsigned int *v142;
  unint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  re::Data *v147;
  id v148;
  __int128 v149;
  id *v150;
  __int128 v151;
  _anonymous_namespace_ *v152;
  _anonymous_namespace_ *v153;
  uint64_t v154;
  char v155;
  double v156;
  __n128 v157;
  const char *v158;
  __int128 v159;
  char v160;
  double v161;
  double v162;
  _BYTE *v163;
  re::internal::GeomAttributeManager *v164;
  uint64_t v165;
  int v166;
  int v167;
  int v168;
  _BYTE v169[24];
  uint64_t v170;
  char v171;
  _BYTE v172[24];
  uint64_t v173;
  char v174;
  unint64_t v175;
  __int128 v176;
  __int128 v177;
  _BYTE v178[24];
  _QWORD v179[4];
  id v180[5];
  id v181[5];
  _QWORD v182[2];
  int v183[2];
  int v184;
  uint64_t v185;
  _QWORD v186[3];
  int v187;
  uint64_t v188;
  int v189;
  _QWORD v190[3];
  int v191;
  uint64_t v192;
  __int16 v193;
  char v194;
  __int128 v195;
  _DWORD v196[8];
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  _QWORD v200[3];
  int v201;
  _BYTE v202[44];
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  _BYTE v207[12];
  __int16 v208;
  _QWORD v209[4];
  char v210[12];
  int v211;
  __n128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  _BYTE v217[40];
  uint64_t v218[6];
  __int128 v219;
  __int128 v220;
  uint64_t __src;
  uint64_t v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  id v228[6];
  id location[6];
  __int128 v230;
  _BYTE v231[38];
  uint64_t v232;

  v3 = (unint64_t)a1;
  v232 = *MEMORY[0x24BDAC8D0];
  v193 = 0;
  v194 = 0;
  v195 = 0u;
  memset(v196, 0, sizeof(v196));
  v197 = 0u;
  v198 = 0u;
  v199 = 0x7FFFFFFFLL;
  memset(v200, 0, sizeof(v200));
  v201 = 0;
  memset(v202, 0, sizeof(v202));
  v203 = 0x7FFFFFFFLL;
  *((_QWORD *)&v204 + 1) = 0;
  v205 = 0uLL;
  v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v204, 0);
  if (!*(_QWORD *)(v3 + 16))
  {
    re::GeomModelDescriptor::GeomModelDescriptor((uint64_t)&v212, (uint64_t)&v193);
    *a2 = 1;
    re::GeomModelDescriptor::GeomModelDescriptor((uint64_t)(a2 + 8), (uint64_t)&v212);
    if ((_QWORD)v219)
    {
      if ((BYTE8(v219) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v219 + 40))();
      v219 = 0u;
      v220 = 0u;
    }
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v218);
    re::DynamicArray<re::GeomModelDescriptor::AttributeData>::deinit((uint64_t)v217);
    v157.n128_f64[0] = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v215, v156);
    if (*((_QWORD *)&v214 + 1))
    {

      *((_QWORD *)&v214 + 1) = 0;
    }
    if ((_QWORD)v214)
    {

      *(_QWORD *)&v214 = 0;
    }
    if (v212.n128_u64[1])

    goto LABEL_465;
  }
  v163 = a2;
  v6 = *(_QWORD *)(v3 + 32);
  v7 = *(unsigned int *)(v6 + 40);
  v192 = 0;
  v190[2] = 0;
  v190[1] = 0;
  v191 = 0;
  re::DynamicArray<int>::setCapacity(v190, v7);
  ++v191;
  v189 = 0;
  v9 = *(_QWORD *)(v6 + 40);
  if ((_DWORD)v9)
  {
    v10 = 0;
    do
    {
      re::DynamicArray<int>::add(v190, &v189);
      ++v10;
      v9 = *(_QWORD *)(v6 + 40);
    }
    while (v10 < v9);
  }
  v11 = (unint64_t)v228;
  v12 = *(_QWORD *)(v3 + 16);
  if (v12 >= 2)
  {
    v9 = 1;
    while (1)
    {
      ++v189;
      if (v12 <= v9)
        break;
      LODWORD(v2) = -1;
      while (1)
      {
        v13 = *(_QWORD *)(v3 + 32);
        v2 = (v2 + 1);
        if (v2 >= *(_DWORD *)(v13 + 736 * v9 + 40))
          break;
        re::DynamicArray<int>::add(v190, &v189);
        v12 = *(_QWORD *)(v3 + 16);
        if (v12 <= v9)
          goto LABEL_479;
      }
      canAppendGeomMeshToGeomMesh = (_anonymous_namespace_ *)re::internal::canAppendGeomMeshToGeomMesh((re::internal *)(v13 + 736 * v9), (const re::GeomMesh *)v6, v8);
      if ((canAppendGeomMeshToGeomMesh & 1) == 0)
      {
        v157 = v212;
        v159 = v213;
        *v163 = 0;
        *((_QWORD *)v163 + 1) = 100;
        *((_QWORD *)v163 + 2) = &re::AssetErrorCategory(void)::instance;
        *(__n128 *)(v163 + 24) = v157;
        *(_OWORD *)(v163 + 40) = v159;
        goto LABEL_462;
      }
      v12 = *(_QWORD *)(v3 + 16);
      if (v12 <= v9)
        goto LABEL_481;
      re::internal::appendGeomMeshToGeomMesh(*(_QWORD *)(v3 + 32) + 736 * v9, v6);
      v9 = (v9 + 1);
      v12 = *(_QWORD *)(v3 + 16);
      if (v12 <= v9)
      {
        v9 = *(_QWORD *)(v6 + 40);
        goto LABEL_16;
      }
    }
LABEL_479:
    v228[0] = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(location[0]) = 136315906;
    *(id *)((char *)location + 4) = "operator[]";
    WORD2(location[1]) = 1024;
    *(_DWORD *)((char *)&location[1] + 6) = 789;
    WORD1(location[2]) = 2048;
    *(id *)((char *)&location[2] + 4) = (id)v9;
    WORD2(location[3]) = 2048;
    *(id *)((char *)&location[3] + 6) = (id)v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_480:
    v228[0] = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(location[0]) = 136315906;
    *(id *)((char *)location + 4) = "operator[]";
    WORD2(location[1]) = 1024;
    *(_DWORD *)((char *)&location[1] + 6) = 797;
    WORD1(location[2]) = 2048;
    *(id *)((char *)&location[2] + 4) = (id)v12;
    WORD2(location[3]) = 2048;
    *(id *)((char *)&location[3] + 6) = (id)v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_481:
    v228[0] = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(location[0]) = 136315906;
    *(id *)((char *)location + 4) = "operator[]";
    WORD2(location[1]) = 1024;
    *(_DWORD *)((char *)&location[1] + 6) = 789;
    WORD1(location[2]) = 2048;
    *(id *)((char *)&location[2] + 4) = (id)v9;
    WORD2(location[3]) = 2048;
    *(id *)((char *)&location[3] + 6) = (id)v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_482:
    v206 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v2;
    HIWORD(v209[1]) = 2048;
    v209[2] = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_483:
    v206 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v231 = 136315906;
    *(_QWORD *)&v231[4] = "operator[]";
    *(_WORD *)&v231[12] = 1024;
    *(_DWORD *)&v231[14] = 601;
    *(_WORD *)&v231[18] = 2048;
    *(_QWORD *)&v231[20] = v2;
    *(_WORD *)&v231[28] = 2048;
    *(_QWORD *)&v231[30] = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_484:
    v206 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v2;
    HIWORD(v209[1]) = 2048;
    v209[2] = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_485:
    v206 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v231 = 136315906;
    *(_QWORD *)&v231[4] = "operator[]";
    *(_WORD *)&v231[12] = 1024;
    *(_DWORD *)&v231[14] = 601;
    *(_WORD *)&v231[18] = 2048;
    *(_QWORD *)&v231[20] = v2;
    *(_WORD *)&v231[28] = 2048;
    *(_QWORD *)&v231[30] = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_486:
    v206 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v2;
    HIWORD(v209[1]) = 2048;
    v209[2] = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_487:
    v206 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v231 = 136315906;
    *(_QWORD *)&v231[4] = "operator[]";
    *(_WORD *)&v231[12] = 1024;
    *(_DWORD *)&v231[14] = 601;
    *(_WORD *)&v231[18] = 2048;
    *(_QWORD *)&v231[20] = v2;
    *(_WORD *)&v231[28] = 2048;
    *(_QWORD *)&v231[30] = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_488:
    __src = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 797;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v12;
    HIWORD(v209[1]) = 2048;
    v209[2] = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_489:
    __src = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 797;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v12;
    HIWORD(v209[1]) = 2048;
    v209[2] = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_490:
    __src = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 797;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v12;
    HIWORD(v209[1]) = 2048;
    v209[2] = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_491:
    __src = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 797;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v12;
    HIWORD(v209[1]) = 2048;
    v209[2] = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_492:
    __src = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v231 = 136315906;
    *(_QWORD *)&v231[4] = "operator[]";
    *(_WORD *)&v231[12] = 1024;
    *(_DWORD *)&v231[14] = 797;
    *(_WORD *)&v231[18] = 2048;
    *(_QWORD *)&v231[20] = v12;
    *(_WORD *)&v231[28] = 2048;
    *(_QWORD *)&v231[30] = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_493:
    *(_QWORD *)v231 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 797;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v12;
    HIWORD(v209[1]) = 2048;
    v209[2] = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_494:
    __src = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v11;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_495:
    __src = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v11;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_496:
    __src = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v11;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_497:
    __src = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v11;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_498:
    __src = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v231 = 136315906;
    *(_QWORD *)&v231[4] = "operator[]";
    *(_WORD *)&v231[12] = 1024;
    *(_DWORD *)&v231[14] = 601;
    *(_WORD *)&v231[18] = 2048;
    *(_QWORD *)&v231[20] = v11;
    *(_WORD *)&v231[28] = 2048;
    *(_QWORD *)&v231[30] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_499:
    *(_QWORD *)v231 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v11;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_500:
    __src = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v3;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_501:
    __src = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v3;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_502:
    __src = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v3;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_503:
    __src = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v3;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_504:
    __src = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v231 = 136315906;
    *(_QWORD *)&v231[4] = "operator[]";
    *(_WORD *)&v231[12] = 1024;
    *(_DWORD *)&v231[14] = 601;
    *(_WORD *)&v231[18] = 2048;
    *(_QWORD *)&v231[20] = v3;
    *(_WORD *)&v231[28] = 2048;
    *(_QWORD *)&v231[30] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_505:
    *(_QWORD *)v231 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v3;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_506:
    __src = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v2;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_507:
    __src = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v2;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_508:
    __src = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v2;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_509:
    __src = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v2;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_510:
    __src = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v231 = 136315906;
    *(_QWORD *)&v231[4] = "operator[]";
    *(_WORD *)&v231[12] = 1024;
    *(_DWORD *)&v231[14] = 601;
    *(_WORD *)&v231[18] = 2048;
    *(_QWORD *)&v231[20] = v2;
    *(_WORD *)&v231[28] = 2048;
    *(_QWORD *)&v231[30] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_511:
    *(_QWORD *)v231 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v2;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_512:
    *(_QWORD *)v231 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 797;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v2;
    HIWORD(v209[1]) = 2048;
    v209[2] = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_513:
    *(_QWORD *)v231 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 797;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v2;
    HIWORD(v209[1]) = 2048;
    v209[2] = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_514:
    *(_QWORD *)v231 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    v80 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 797;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v9;
    HIWORD(v209[1]) = 2048;
    v209[2] = v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_515:
    *(_QWORD *)v231 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v80;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_516:
    *(_QWORD *)v231 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v80;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_517:
    *(_QWORD *)v231 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    v9 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v80;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_518:
    *(_QWORD *)v231 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v11;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_519:
    *(_QWORD *)v231 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v11;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_520:
    *(_QWORD *)v231 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v3;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_521:
    *(_QWORD *)v231 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v3;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_522:
    *(_QWORD *)v231 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v3;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_523:
    *(_QWORD *)v231 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v12;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_524:
    *(_QWORD *)v231 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "copy";
    v208 = 1024;
    LODWORD(v209[0]) = 643;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = -1;
    HIWORD(v209[1]) = 2048;
    v209[2] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_525:
    *(_QWORD *)v231 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "copy";
    v208 = 1024;
    LODWORD(v209[0]) = 643;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = -1;
    HIWORD(v209[1]) = 2048;
    v209[2] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_526:
    *(_QWORD *)v231 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    v81 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "copy";
    v208 = 1024;
    LODWORD(v209[0]) = 643;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = -1;
    HIWORD(v209[1]) = 2048;
    v209[2] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_527:
    re::internal::assertLog((re::internal *)7, v24, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v11, v11, v2);
    _os_crash();
    __break(1u);
LABEL_528:
    re::internal::assertLog((re::internal *)7, v28, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v3, v3, v2);
    _os_crash();
    __break(1u);
LABEL_529:
    re::internal::assertLog((re::internal *)7, v51, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v3, v3, v81);
    _os_crash();
    __break(1u);
LABEL_530:
    v206 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v2;
    HIWORD(v209[1]) = 2048;
    v209[2] = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_531:
    v206 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v231 = 136315906;
    *(_QWORD *)(v11 + 116) = "operator[]";
    *(_WORD *)&v231[12] = 1024;
    *(_DWORD *)(v11 + 126) = 601;
    *(_WORD *)&v231[18] = 2048;
    *(_QWORD *)(v11 + 132) = v2;
    *(_WORD *)&v231[28] = 2048;
    *(_QWORD *)(v11 + 142) = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_532:
    __src = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v12;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_533:
    __src = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v12;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_534:
    __src = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v12;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_535:
    __src = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v12;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_536:
    __src = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v231 = 136315906;
    *(_QWORD *)&v231[4] = "operator[]";
    *(_WORD *)&v231[12] = 1024;
    *(_DWORD *)&v231[14] = 601;
    *(_WORD *)&v231[18] = 2048;
    *(_QWORD *)&v231[20] = v12;
    *(_WORD *)&v231[28] = 2048;
    *(_QWORD *)&v231[30] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_537:
    *(_QWORD *)v231 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v12;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_538:
    *(_QWORD *)v231 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v2;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_539:
    *(_QWORD *)v231 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v2;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_540:
    *(_QWORD *)v231 = 0;
    v216 = 0u;
    v215 = 0u;
    v213 = 0u;
    v214 = 0u;
    v212 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v207 = 136315906;
    *(_QWORD *)&v207[4] = "operator[]";
    v208 = 1024;
    LODWORD(v209[0]) = 601;
    WORD2(v209[0]) = 2048;
    *(_QWORD *)((char *)v209 + 6) = v9;
    HIWORD(v209[1]) = 2048;
    v209[2] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_541:
    re::internal::assertLog((re::internal *)4, v30, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    _os_crash();
    __break(1u);
LABEL_542:
    re::internal::assertLog((re::internal *)4, v32, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    _os_crash();
    __break(1u);
LABEL_543:
    re::internal::assertLog((re::internal *)4, v34, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    _os_crash();
    __break(1u);
LABEL_544:
    re::internal::assertLog((re::internal *)4, v36, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    _os_crash();
    __break(1u);
LABEL_545:
    re::internal::assertLog((re::internal *)4, v46, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    _os_crash();
    __break(1u);
LABEL_546:
    re::internal::assertLog((re::internal *)4, v48, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    _os_crash();
    __break(1u);
LABEL_547:
    re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    _os_crash();
    __break(1u);
LABEL_548:
    re::internal::assertLog((re::internal *)4, v28, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    _os_crash();
    __break(1u);
LABEL_549:
    re::internal::assertLog((re::internal *)4, v51, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    _os_crash();
    __break(1u);
  }
LABEL_16:
  v188 = 0;
  memset(v186, 0, sizeof(v186));
  v187 = 0;
  v185 = 0;
  *(_QWORD *)v183 = 0;
  v182[0] = 0;
  v182[1] = 0;
  v184 = 0;
  if ((_DWORD)v9)
  {
    v15 = 0;
    v12 = 0;
    v2 = (unint64_t)v210;
    v3 = 3;
    do
    {
      LOBYTE(v181[0]) = 0;
      if (v9 <= v12)
        goto LABEL_480;
      v16 = 0;
      v17 = *(_QWORD *)(v6 + 56) + v15;
      do
      {
        *(_DWORD *)&v210[v16] = *(_DWORD *)(v17 + v16);
        v16 += 4;
      }
      while (v16 != 16);
      if (v211 == -1)
        v18 = 3;
      else
        v18 = 4;
      LOBYTE(v181[0]) = v18;
      re::DynamicArray<unsigned char>::add(v186, v181);
      re::DynamicArray<float>::copy(v182, *(unint64_t *)v183, v210, LOBYTE(v181[0]));
      ++v12;
      v9 = *(_QWORD *)(v6 + 40);
      v15 += 16;
    }
    while (v12 < v9);
  }
  re::makeNSDataFromGeomArray<unsigned char>((uint64_t)v181, (uint64_t)v186);
  re::makeNSDataFromGeomArray<unsigned int>((uint64_t)v180, (uint64_t)v182);
  v19 = v178;
  re::GeomModelDescriptor::setSurfaceTopology((_anonymous_namespace_ *)&v193, *(unsigned int *)(v6 + 16), (uint64_t)v181, (uint64_t)v180, (uint64_t)v178);
  if (!v178[0] && v179[0])
  {
    v19 = (const char *)v179;
    if ((v179[1] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v179[0] + 40))();
    memset(v179, 0, sizeof(v179));
  }
  if (*(_DWORD *)(v6 + 640))
  {
    v3 = 0;
    v20 = (re::internal::GeomAttributeManager *)(v6 + 64);
    v164 = (re::internal::GeomAttributeManager *)(v6 + 64);
    v165 = v6;
    while (1)
    {
      v21 = (_anonymous_namespace_ *)re::internal::GeomAttributeManager::attributeByIndex(v20, v3);
      v22 = (uint64_t)v21;
      v175 = 0;
      LOBYTE(v176) = -1;
      v177 = 0uLL;
      *((_QWORD *)&v176 + 1) = 0;
      if (*((_BYTE *)v21 + 16) == 3)
        break;
      switch(*((_BYTE *)v21 + 17))
      {
        case 0:
          if (!(*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)v21 + 16))(v21)
            || (v26 = (re::Data *)re::internal::GeomTypedAttribute<short>::operator[](v22, 0),
                !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22)))
          {
            *(_QWORD *)v207 = 0;
            v216 = 0u;
            v215 = 0u;
            v213 = 0u;
            v214 = 0u;
            v212 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v228[0]) = 136315906;
            *(id *)((char *)v228 + 4) = "operator[]";
            WORD2(v228[1]) = 1024;
            *(_DWORD *)((char *)&v228[1] + 6) = 601;
            WORD1(v228[2]) = 2048;
            *(id *)((char *)&v228[2] + 4) = 0;
            WORD2(v228[3]) = 2048;
            *(id *)((char *)&v228[3] + 6) = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_551:
            *(_QWORD *)v207 = 0;
            v216 = 0u;
            v215 = 0u;
            v213 = 0u;
            v214 = 0u;
            v212 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v228[0]) = 136315906;
            *(id *)((char *)v228 + 4) = "operator[]";
            WORD2(v228[1]) = 1024;
            *(_DWORD *)((char *)&v228[1] + 6) = 601;
            WORD1(v228[2]) = 2048;
            *(id *)((char *)&v228[2] + 4) = 0;
            WORD2(v228[3]) = 2048;
            *(id *)((char *)&v228[3] + 6) = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_552:
            *(_QWORD *)v207 = 0;
            v216 = 0u;
            v215 = 0u;
            v213 = 0u;
            v214 = 0u;
            v212 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v228[0]) = 136315906;
            *(id *)((char *)v228 + 4) = "operator[]";
            WORD2(v228[1]) = 1024;
            *(_DWORD *)((char *)&v228[1] + 6) = 601;
            WORD1(v228[2]) = 2048;
            *(id *)((char *)&v228[2] + 4) = 0;
            WORD2(v228[3]) = 2048;
            *(id *)((char *)&v228[3] + 6) = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_553:
            *(_QWORD *)v207 = 0;
            v216 = 0u;
            v215 = 0u;
            v213 = 0u;
            v214 = 0u;
            v212 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v228[0]) = 136315906;
            *(id *)((char *)v228 + 4) = "operator[]";
            WORD2(v228[1]) = 1024;
            *(_DWORD *)((char *)&v228[1] + 6) = 601;
            WORD1(v228[2]) = 2048;
            *(id *)((char *)&v228[2] + 4) = 0;
            WORD2(v228[3]) = 2048;
            *(id *)((char *)&v228[3] + 6) = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_554:
            *(_QWORD *)v207 = 0;
            v216 = 0u;
            v215 = 0u;
            v213 = 0u;
            v214 = 0u;
            v212 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v228[0]) = 136315906;
            *(id *)((char *)v228 + 4) = "operator[]";
            WORD2(v228[1]) = 1024;
            *(_DWORD *)((char *)&v228[1] + 6) = 601;
            WORD1(v228[2]) = 2048;
            *(id *)((char *)&v228[2] + 4) = 0;
            WORD2(v228[3]) = 2048;
            *(id *)((char *)&v228[3] + 6) = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_555:
            *(_QWORD *)v207 = 0;
            v216 = 0u;
            v215 = 0u;
            v213 = 0u;
            v214 = 0u;
            v212 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v228[0]) = 136315906;
            *(id *)((char *)v228 + 4) = "operator[]";
            WORD2(v228[1]) = 1024;
            *(_DWORD *)((char *)&v228[1] + 6) = 601;
            WORD1(v228[2]) = 2048;
            *(id *)((char *)&v228[2] + 4) = 0;
            WORD2(v228[3]) = 2048;
            *(id *)((char *)&v228[3] + 6) = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_556:
            *(_QWORD *)v207 = 0;
            v216 = 0u;
            v215 = 0u;
            v213 = 0u;
            v214 = 0u;
            v212 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v228[0]) = 136315906;
            *(id *)((char *)v228 + 4) = "operator[]";
            WORD2(v228[1]) = 1024;
            *(_DWORD *)((char *)&v228[1] + 6) = 601;
            WORD1(v228[2]) = 2048;
            *(id *)((char *)&v228[2] + 4) = 0;
            WORD2(v228[3]) = 2048;
            *(id *)((char *)&v228[3] + 6) = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_557:
            *(_QWORD *)v207 = 0;
            v216 = 0u;
            v215 = 0u;
            v213 = 0u;
            v214 = 0u;
            v212 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v228[0]) = 136315906;
            *(id *)((char *)v228 + 4) = "operator[]";
            WORD2(v228[1]) = 1024;
            *(_DWORD *)((char *)&v228[1] + 6) = 601;
            WORD1(v228[2]) = 2048;
            *(id *)((char *)&v228[2] + 4) = 0;
            WORD2(v228[3]) = 2048;
            *(id *)((char *)&v228[3] + 6) = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_558:
            *(_QWORD *)v207 = 0;
            v216 = 0u;
            v215 = 0u;
            v213 = 0u;
            v214 = 0u;
            v212 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v228[0]) = 136315906;
            *(id *)((char *)v228 + 4) = "operator[]";
            WORD2(v228[1]) = 1024;
            *(_DWORD *)((char *)&v228[1] + 6) = 601;
            WORD1(v228[2]) = 2048;
            *(id *)((char *)&v228[2] + 4) = 0;
            WORD2(v228[3]) = 2048;
            *(id *)((char *)&v228[3] + 6) = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_559:
            *(_QWORD *)v207 = 0;
            v216 = 0u;
            v215 = 0u;
            v213 = 0u;
            v214 = 0u;
            v212 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v228[0]) = 136315906;
            *(id *)((char *)v228 + 4) = "operator[]";
            WORD2(v228[1]) = 1024;
            *(_DWORD *)((char *)&v228[1] + 6) = 601;
            WORD1(v228[2]) = 2048;
            *(id *)((char *)&v228[2] + 4) = 0;
            WORD2(v228[3]) = 2048;
            *(id *)((char *)&v228[3] + 6) = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_560:
            *(_QWORD *)v207 = 0;
            v216 = 0u;
            v215 = 0u;
            v213 = 0u;
            v214 = 0u;
            v212 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v228[0]) = 136315906;
            *(id *)((char *)v228 + 4) = "operator[]";
            WORD2(v228[1]) = 1024;
            *(_DWORD *)((char *)&v228[1] + 6) = 601;
            WORD1(v228[2]) = 2048;
            *(id *)((char *)&v228[2] + 4) = 0;
            WORD2(v228[3]) = 2048;
            *(id *)((char *)&v228[3] + 6) = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            JUMPOUT(0x225B35808);
          }
          v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
          re::Data::makeDataWithBytes(v26, (const void *)(2 * v27), v231);
          location[0] = 0;
          LOBYTE(location[1]) = -1;
          memset(&location[2], 0, 24);
          re::ObjCObject::operator=(location, (id *)v231);
          LOBYTE(location[1]) = 2;
          goto LABEL_83;
        case 1:
          if (!(*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)v21 + 16))(v21))
            goto LABEL_551;
          v53 = (re::Data *)re::internal::GeomTypedAttribute<short>::operator[](v22, 0);
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22))
            goto LABEL_551;
          v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
          re::Data::makeDataWithBytes(v53, (const void *)(2 * v54), v231);
          location[0] = 0;
          LOBYTE(location[1]) = -1;
          memset(&location[2], 0, 24);
          re::ObjCObject::operator=(location, (id *)v231);
          LOBYTE(location[1]) = 3;
LABEL_83:
          location[2] = (id)(*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
          v55 = xmmword_2260F4F20;
          goto LABEL_116;
        case 2:
          if (!(*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)v21 + 16))(v21))
            goto LABEL_552;
          v56 = (re::Data *)re::internal::GeomTypedAttribute<int>::operator[](v22, 0);
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22))
            goto LABEL_552;
          v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
          re::Data::makeDataWithBytes(v56, (const void *)(4 * v57), v231);
          location[0] = 0;
          LOBYTE(location[1]) = -1;
          memset(&location[2], 0, 24);
          re::ObjCObject::operator=(location, (id *)v231);
          LOBYTE(location[1]) = 4;
          goto LABEL_94;
        case 3:
          if (!(*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)v21 + 16))(v21))
            goto LABEL_553;
          v58 = (re::Data *)re::internal::GeomTypedAttribute<int>::operator[](v22, 0);
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22))
            goto LABEL_553;
          v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
          re::Data::makeDataWithBytes(v58, (const void *)(4 * v59), v231);
          location[0] = 0;
          LOBYTE(location[1]) = -1;
          memset(&location[2], 0, 24);
          re::ObjCObject::operator=(location, (id *)v231);
          v60 = 5;
          goto LABEL_93;
        case 4:
          if (!(*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)v21 + 16))(v21))
            goto LABEL_554;
          v61 = (re::Data *)re::internal::GeomTypedAttribute<int>::operator[](v22, 0);
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22))
            goto LABEL_554;
          v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
          re::Data::makeDataWithBytes(v61, (const void *)(4 * v62), v231);
          location[0] = 0;
          LOBYTE(location[1]) = -1;
          memset(&location[2], 0, 24);
          re::ObjCObject::operator=(location, (id *)v231);
          v60 = 6;
LABEL_93:
          LOBYTE(location[1]) = v60;
LABEL_94:
          location[2] = (id)(*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
          v55 = xmmword_226104390;
          goto LABEL_116;
        case 5:
          if (!(*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)v21 + 16))(v21))
            goto LABEL_555;
          v63 = (re::Data *)re::internal::GeomTypedAttribute<double>::operator[](v22, 0);
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22))
            goto LABEL_555;
          v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
          re::Data::makeDataWithBytes(v63, (const void *)(8 * v64), v231);
          location[0] = 0;
          LOBYTE(location[1]) = -1;
          memset(&location[2], 0, 24);
          re::ObjCObject::operator=(location, (id *)v231);
          LOBYTE(location[1]) = 7;
          goto LABEL_101;
        case 6:
          if (!(*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)v21 + 16))(v21))
            goto LABEL_556;
          v65 = (re::Data *)re::internal::GeomTypedAttribute<double>::operator[](v22, 0);
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22))
            goto LABEL_556;
          v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
          re::Data::makeDataWithBytes(v65, (const void *)(8 * v66), v231);
          location[0] = 0;
          LOBYTE(location[1]) = -1;
          memset(&location[2], 0, 24);
          re::ObjCObject::operator=(location, (id *)v231);
          LOBYTE(location[1]) = 8;
LABEL_101:
          location[2] = (id)(*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
          v55 = xmmword_226147220;
          goto LABEL_116;
        case 7:
          if (!(*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)v21 + 16))(v21))
            goto LABEL_557;
          v67 = (re::Data *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v22, 0);
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22))
            goto LABEL_557;
          v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
          re::Data::makeDataWithBytes(v67, (const void *)(16 * v68), v231);
          location[0] = 0;
          LOBYTE(location[1]) = -1;
          memset(&location[2], 0, 24);
          re::ObjCObject::operator=(location, (id *)v231);
          v69 = 9;
          goto LABEL_108;
        case 8:
          if (!(*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)v21 + 16))(v21))
            goto LABEL_558;
          v70 = (re::Data *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v22, 0);
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22))
            goto LABEL_558;
          v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
          re::Data::makeDataWithBytes(v70, (const void *)(16 * v71), v231);
          location[0] = 0;
          LOBYTE(location[1]) = -1;
          memset(&location[2], 0, 24);
          re::ObjCObject::operator=(location, (id *)v231);
          v69 = 10;
LABEL_108:
          LOBYTE(location[1]) = v69;
          location[2] = (id)(*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
          v55 = xmmword_2261916A0;
          goto LABEL_116;
        case 9:
          if (!(*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)v21 + 16))(v21))
            goto LABEL_559;
          v72 = (re::Data *)re::internal::GeomTypedAttribute<signed char>::operator[](v22, 0);
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22))
            goto LABEL_559;
          v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
          re::Data::makeDataWithBytes(v72, (const void *)v73, v231);
          location[0] = 0;
          LOBYTE(location[1]) = -1;
          memset(&location[2], 0, 24);
          re::ObjCObject::operator=(location, (id *)v231);
          LOBYTE(location[1]) = 1;
          goto LABEL_115;
        case 0xA:
          if (!(*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)v21 + 16))(v21))
            goto LABEL_560;
          v74 = (re::Data *)re::internal::GeomTypedAttribute<signed char>::operator[](v22, 0);
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22))
            goto LABEL_560;
          v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
          re::Data::makeDataWithBytes(v74, (const void *)v75, v231);
          location[0] = 0;
          LOBYTE(location[1]) = -1;
          memset(&location[2], 0, 24);
          re::ObjCObject::operator=(location, (id *)v231);
          LOBYTE(location[1]) = 0;
LABEL_115:
          location[2] = (id)(*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
          v55 = xmmword_2260E7EE0;
LABEL_116:
          *(_OWORD *)&location[3] = v55;

          v9 = (unint64_t)location[0];
          location[0] = 0;
          v175 = v9;
          v176 = *(_OWORD *)&location[1];
          v177 = *(_OWORD *)&location[3];

LABEL_117:
          v19 = *(const char **)(v22 + 8);
          re::GeomModelDescriptor::setAttribute(&v193, (uint64_t)&v212, *(unsigned __int8 *)(v22 + 16), (uint64_t)&v175, 0, (uint64_t)v169);
          if (v169[0] || !v170)
            goto LABEL_416;
          if ((v171 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v170 + 40))();
          v76 = &v170;
          break;
        default:
          v9 = 0;
          goto LABEL_117;
      }
LABEL_415:
      *(_OWORD *)v76 = 0u;
      *((_OWORD *)v76 + 1) = 0u;
LABEL_416:
      if (v212.n128_u64[0] && (v212.n128_u8[8] & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v212.n128_u64[0] + 40))();

      v3 = (v3 + 1);
      if (v3 >= *(_DWORD *)(v6 + 640))
        goto LABEL_420;
    }
    switch(*((_BYTE *)v21 + 17))
    {
      case 0:
        v166 = v3;
        v23 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)v21 + 16))(v21);
        if ((_DWORD)v23)
        {
          v25 = re::internal::GeomTypedAttribute<short>::operator[](v22, 0);
          v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
          LODWORD(v6) = v23;
        }
        else
        {
          LODWORD(v6) = 0;
          v25 = 0;
        }
        v9 = *(unsigned int *)(v22 + 88);
        location[4] = 0;
        memset(location, 0, 28);
        if (v9)
        {
          v12 = 0;
          while (1)
          {
            v212.n128_u32[0] = v12;
            v77 = *(unsigned __int8 *)(v22 + 204);
            if (v77 == 2)
              break;
            if (v77 == 1)
            {
              if (*(_QWORD *)(v22 + 224) <= v12)
                goto LABEL_160;
              v78 = (unsigned int *)(*(_QWORD *)(v22 + 240) + 4 * v12);
LABEL_134:
              v2 = *v78;
              if ((_DWORD)v2 != -1)
                goto LABEL_135;
              goto LABEL_160;
            }
            if (*(_BYTE *)(v22 + 204))
              goto LABEL_547;
            if (v12 < *(unsigned int *)(v22 + 208))
            {
              v2 = v12;
LABEL_135:
              v3 = *(_QWORD *)(v22 + 88);
              if (v3 <= v2)
                goto LABEL_512;
              v79 = (unsigned int *)(*(_QWORD *)(v22 + 104) + 16 * v2);
              v80 = *v79;
              if (v6 <= v80)
                goto LABEL_515;
              v11 = v79[1];
              v3 = v79[2];
              v2 = v79[3];
              LOWORD(__src) = *(_WORD *)(v25 + 2 * v80);
              if (v6 <= v11)
                goto LABEL_518;
              WORD1(__src) = *(_WORD *)(v25 + 2 * v11);
              if (v6 <= v3)
                goto LABEL_521;
              WORD2(__src) = *(_WORD *)(v25 + 2 * v3);
              if ((_DWORD)v2 == -1)
              {
                v2 = 3;
              }
              else
              {
                if (v6 <= v2)
                  goto LABEL_538;
                HIWORD(__src) = *(_WORD *)(v25 + 2 * v2);
                v2 = 4;
              }
              v11 = (unint64_t)location[2];
              if (location[2] == (id)-1)
                goto LABEL_524;
              v81 = (size_t)location[2] + v2;
              if (__CFADD__(location[2], v2))
                goto LABEL_527;
              if (location[2] >= (id)v81)
              {
                v23 = (uint64_t)memmove((char *)location[4] + 2 * (uint64_t)location[2], &__src, 2 * v2);
              }
              else
              {
                if (location[1] < (id)v81)
                {
                  if (location[0])
                  {
                    v82 = 8;
                    if (location[1])
                      v82 = 2 * (uint64_t)location[1];
                    if (v82 <= v81)
                      v83 = (char *)location[2] + v2;
                    else
                      v83 = (char *)v82;
                    re::DynamicArray<unsigned short>::setCapacity(location, (unint64_t)v83);
                  }
                  else
                  {
                    re::DynamicArray<unsigned short>::setCapacity(location, v11 + v2);
                    ++LODWORD(location[3]);
                  }
                }
                v84 = (char *)location[4];
                v85 = (int64_t)location[2] - v11;
                if (location[2] != (id)v11)
                {
                  memmove((char *)location[4] + 2 * v11, &__src, 2 * v85);
                  v11 = (unint64_t)location[2];
                  v84 = (char *)location[4];
                }
                v23 = (uint64_t)memcpy(&v84[2 * v11], (char *)&__src + 2 * v85, (char *)&__src + 2 * v2 - ((char *)&__src + 2 * v85));
                location[2] = (id)v81;
              }
              ++LODWORD(location[3]);
            }
LABEL_160:
            if (++v12 == v9)
            {
              v86 = (re::Data *)location[4];
              v87 = (const void *)(2 * (uint64_t)location[2]);
              v11 = (unint64_t)v228;
              goto LABEL_388;
            }
          }
          v23 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)(v22 + 208), (unsigned int *)&v212);
          if (v23 == -1)
            goto LABEL_160;
          v78 = (unsigned int *)(*(_QWORD *)(v22 + 216) + 8 * v23 + 4);
          goto LABEL_134;
        }
        v87 = 0;
        v86 = 0;
LABEL_388:
        re::Data::makeDataWithBytes(v86, v87, &v212);
        v228[0] = 0;
        LOBYTE(v228[1]) = -1;
        memset(&v228[2], 0, 24);
        re::ObjCObject::operator=(v228, (id *)&v212);
        LOBYTE(v228[1]) = 2;
        v228[2] = location[2];
        v149 = xmmword_2260F4F20;
        goto LABEL_405;
      case 1:
        v166 = v3;
        if ((*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)v21 + 16))(v21))
        {
          v29 = re::internal::GeomTypedAttribute<short>::operator[](v22, 0);
          LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
        }
        else
        {
          LODWORD(v6) = 0;
          v29 = 0;
        }
        v9 = *(unsigned int *)(v22 + 88);
        location[4] = 0;
        memset(location, 0, 28);
        if (v9)
        {
          v12 = 0;
          while (1)
          {
            v212.n128_u32[0] = v12;
            v88 = *(unsigned __int8 *)(v22 + 204);
            if (v88 == 2)
              break;
            if (v88 == 1)
            {
              if (*(_QWORD *)(v22 + 224) <= v12)
                goto LABEL_191;
              v90 = (unsigned int *)(*(_QWORD *)(v22 + 240) + 4 * v12);
LABEL_174:
              v2 = *v90;
              if ((_DWORD)v2 != -1)
                goto LABEL_175;
              goto LABEL_191;
            }
            if (*(_BYTE *)(v22 + 204))
              goto LABEL_548;
            if (v12 < *(unsigned int *)(v22 + 208))
            {
              v2 = v12;
LABEL_175:
              v3 = *(_QWORD *)(v22 + 88);
              if (v3 <= v2)
                goto LABEL_513;
              v91 = (unsigned int *)(*(_QWORD *)(v22 + 104) + 16 * v2);
              v80 = *v91;
              if (v6 <= v80)
                goto LABEL_516;
              v11 = v91[1];
              v3 = v91[2];
              v2 = v91[3];
              LOWORD(__src) = *(_WORD *)(v29 + 2 * v80);
              if (v6 <= v11)
                goto LABEL_519;
              WORD1(__src) = *(_WORD *)(v29 + 2 * v11);
              if (v6 <= v3)
                goto LABEL_522;
              WORD2(__src) = *(_WORD *)(v29 + 2 * v3);
              if ((_DWORD)v2 == -1)
              {
                v2 = 3;
              }
              else
              {
                if (v6 <= v2)
                  goto LABEL_539;
                HIWORD(__src) = *(_WORD *)(v29 + 2 * v2);
                v2 = 4;
              }
              v3 = (unint64_t)location[2];
              if (location[2] == (id)-1)
                goto LABEL_525;
              v81 = (size_t)location[2] + v2;
              if (__CFADD__(location[2], v2))
                goto LABEL_528;
              if (location[2] >= (id)v81)
              {
                memmove((char *)location[4] + 2 * (uint64_t)location[2], &__src, 2 * v2);
              }
              else
              {
                re::DynamicArray<unsigned short>::growCapacity(location, (unint64_t)location[2] + v2);
                v11 = (unint64_t)location[2] - v3;
                if (location[2] != (id)v3)
                {
                  memmove((char *)location[4] + 2 * v3, &__src, 2 * v11);
                  v3 = (unint64_t)location[2];
                }
                memcpy((char *)location[4] + 2 * v3, (char *)&__src + 2 * v11, (char *)&__src + 2 * v2 - ((char *)&__src + 2 * v11));
                location[2] = (id)v81;
              }
              ++LODWORD(location[3]);
            }
LABEL_191:
            if (++v12 == v9)
            {
              v92 = (re::Data *)location[4];
              v93 = (const void *)(2 * (uint64_t)location[2]);
              goto LABEL_390;
            }
          }
          v89 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)(v22 + 208), (unsigned int *)&v212);
          if (v89 == -1)
            goto LABEL_191;
          v90 = (unsigned int *)(*(_QWORD *)(v22 + 216) + 8 * v89 + 4);
          goto LABEL_174;
        }
        v93 = 0;
        v92 = 0;
LABEL_390:
        re::Data::makeDataWithBytes(v92, v93, &v212);
        v228[0] = 0;
        LOBYTE(v228[1]) = -1;
        memset(&v228[2], 0, 24);
        re::ObjCObject::operator=(v228, (id *)&v212);
        LOBYTE(v228[1]) = 3;
        v228[2] = location[2];
        v11 = (unint64_t)v228;
        v149 = xmmword_2260F4F20;
        goto LABEL_405;
      case 2:
        v166 = v3;
        if ((*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)v21 + 16))(v21))
        {
          v31 = re::internal::GeomTypedAttribute<int>::operator[](v22, 0);
          LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
        }
        else
        {
          LODWORD(v6) = 0;
          v31 = 0;
        }
        v94 = *(unsigned int *)(v22 + 88);
        location[4] = 0;
        memset(location, 0, 28);
        if (v94)
        {
          v9 = 0;
          while (1)
          {
            v212.n128_u32[0] = v9;
            v95 = *(unsigned __int8 *)(v22 + 204);
            if (v95 == 2)
              break;
            if (v95 == 1)
            {
              if (*(_QWORD *)(v22 + 224) <= v9)
                goto LABEL_206;
              v97 = (unsigned int *)(*(_QWORD *)(v22 + 240) + 4 * v9);
LABEL_205:
              v12 = *v97;
              if ((_DWORD)v12 != -1)
                goto LABEL_207;
              goto LABEL_206;
            }
            if (*(_BYTE *)(v22 + 204))
              goto LABEL_541;
            if (v9 < *(unsigned int *)(v22 + 208))
            {
              v12 = v9;
LABEL_207:
              v2 = *(_QWORD *)(v22 + 88);
              if (v2 <= v12)
                goto LABEL_488;
              v99 = (unsigned int *)(*(_QWORD *)(v22 + 104) + 16 * v12);
              v11 = *v99;
              if (v6 <= v11)
                goto LABEL_494;
              v3 = v99[1];
              v2 = v99[2];
              v12 = v99[3];
              *(_DWORD *)v231 = *(_DWORD *)(v31 + 4 * v11);
              if (v6 <= v3)
                goto LABEL_500;
              *(_DWORD *)&v231[4] = *(_DWORD *)(v31 + 4 * v3);
              if (v6 <= v2)
                goto LABEL_506;
              *(_DWORD *)&v231[8] = *(_DWORD *)(v31 + 4 * v2);
              if ((_DWORD)v12 == -1)
              {
                v98 = 3;
              }
              else
              {
                if (v6 <= v12)
                  goto LABEL_532;
                *(_DWORD *)&v231[12] = *(_DWORD *)(v31 + 4 * v12);
                v98 = 4;
              }
              goto LABEL_215;
            }
LABEL_206:
            v98 = 0;
LABEL_215:
            re::DynamicArray<float>::copy(location, (unint64_t)location[2], v231, v98);
            if (++v9 == v94)
            {
              v100 = (re::Data *)location[4];
              v101 = (const void *)(4 * (uint64_t)location[2]);
              goto LABEL_392;
            }
          }
          v96 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)(v22 + 208), (unsigned int *)&v212);
          if (v96 == -1)
            goto LABEL_206;
          v97 = (unsigned int *)(*(_QWORD *)(v22 + 216) + 8 * v96 + 4);
          goto LABEL_205;
        }
        v101 = 0;
        v100 = 0;
LABEL_392:
        re::Data::makeDataWithBytes(v100, v101, &v212);
        v228[0] = 0;
        LOBYTE(v228[1]) = -1;
        memset(&v228[2], 0, 24);
        re::ObjCObject::operator=(v228, (id *)&v212);
        LOBYTE(v228[1]) = 4;
        v228[2] = location[2];
        v11 = (unint64_t)v228;
        goto LABEL_395;
      case 3:
        v167 = v3;
        if ((*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)v21 + 16))(v21))
        {
          v33 = re::internal::GeomTypedAttribute<int>::operator[](v22, 0);
          LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
        }
        else
        {
          LODWORD(v6) = 0;
          v33 = 0;
        }
        v102 = *(unsigned int *)(v22 + 88);
        location[4] = 0;
        memset(location, 0, 28);
        if (!v102)
          goto LABEL_240;
        v9 = 0;
        while (1)
        {
          v212.n128_u32[0] = v9;
          v103 = *(unsigned __int8 *)(v22 + 204);
          if (v103 == 2)
            break;
          if (v103 == 1)
          {
            if (*(_QWORD *)(v22 + 224) <= v9)
              goto LABEL_230;
            v105 = (unsigned int *)(*(_QWORD *)(v22 + 240) + 4 * v9);
LABEL_229:
            v12 = *v105;
            if ((_DWORD)v12 != -1)
              goto LABEL_231;
            goto LABEL_230;
          }
          if (*(_BYTE *)(v22 + 204))
            goto LABEL_542;
          if (v9 < *(unsigned int *)(v22 + 208))
          {
            v12 = v9;
LABEL_231:
            v2 = *(_QWORD *)(v22 + 88);
            if (v2 <= v12)
              goto LABEL_489;
            v107 = (unsigned int *)(*(_QWORD *)(v22 + 104) + 16 * v12);
            v11 = *v107;
            if (v6 <= v11)
              goto LABEL_495;
            v3 = v107[1];
            v2 = v107[2];
            v12 = v107[3];
            *(_DWORD *)v231 = *(_DWORD *)(v33 + 4 * v11);
            if (v6 <= v3)
              goto LABEL_501;
            *(_DWORD *)&v231[4] = *(_DWORD *)(v33 + 4 * v3);
            if (v6 <= v2)
              goto LABEL_507;
            *(_DWORD *)&v231[8] = *(_DWORD *)(v33 + 4 * v2);
            if ((_DWORD)v12 == -1)
            {
              v106 = 3;
            }
            else
            {
              if (v6 <= v12)
                goto LABEL_533;
              *(_DWORD *)&v231[12] = *(_DWORD *)(v33 + 4 * v12);
              v106 = 4;
            }
            goto LABEL_239;
          }
LABEL_230:
          v106 = 0;
LABEL_239:
          re::DynamicArray<float>::copy(location, (unint64_t)location[2], v231, v106);
          if (++v9 == v102)
          {
LABEL_240:
            re::makeNSDataFromGeomArray<unsigned int>((uint64_t)v228, (uint64_t)location);
LABEL_343:
            if (location[0] && location[4])
              (*(void (**)(id))(*(_QWORD *)location[0] + 40))(location[0]);
            v9 = (unint64_t)v228[0];
            v228[0] = 0;
            v175 = v9;
            v176 = *(_OWORD *)&v228[1];
            v177 = *(_OWORD *)&v228[3];

            v11 = (unint64_t)v228;
            v20 = v164;
            v6 = v165;
            LODWORD(v3) = v167;
LABEL_410:
            v19 = *(const char **)(v22 + 8);
            re::GeomModelDescriptor::setAttribute(&v193, (uint64_t)&v212, *(unsigned __int8 *)(v22 + 16), (uint64_t)&v175, 0, (uint64_t)v172);
            if (!v172[0] && v173)
            {
              if ((v174 & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v173 + 40))();
              v76 = &v173;
              goto LABEL_415;
            }
            goto LABEL_416;
          }
        }
        v104 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)(v22 + 208), (unsigned int *)&v212);
        if (v104 == -1)
          goto LABEL_230;
        v105 = (unsigned int *)(*(_QWORD *)(v22 + 216) + 8 * v104 + 4);
        goto LABEL_229;
      case 4:
        v166 = v3;
        if ((*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)v21 + 16))(v21))
        {
          v35 = re::internal::GeomTypedAttribute<int>::operator[](v22, 0);
          LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
        }
        else
        {
          LODWORD(v6) = 0;
          v35 = 0;
        }
        v108 = *(unsigned int *)(v22 + 88);
        location[4] = 0;
        memset(location, 0, 28);
        if (v108)
        {
          v9 = 0;
          while (1)
          {
            v212.n128_u32[0] = v9;
            v109 = *(unsigned __int8 *)(v22 + 204);
            if (v109 == 2)
              break;
            if (v109 == 1)
            {
              if (*(_QWORD *)(v22 + 224) <= v9)
                goto LABEL_254;
              v111 = (unsigned int *)(*(_QWORD *)(v22 + 240) + 4 * v9);
LABEL_253:
              v12 = *v111;
              if ((_DWORD)v12 != -1)
                goto LABEL_255;
              goto LABEL_254;
            }
            if (*(_BYTE *)(v22 + 204))
              goto LABEL_543;
            if (v9 < *(unsigned int *)(v22 + 208))
            {
              v12 = v9;
LABEL_255:
              v2 = *(_QWORD *)(v22 + 88);
              if (v2 <= v12)
                goto LABEL_490;
              v113 = (unsigned int *)(*(_QWORD *)(v22 + 104) + 16 * v12);
              v11 = *v113;
              if (v6 <= v11)
                goto LABEL_496;
              v3 = v113[1];
              v2 = v113[2];
              v12 = v113[3];
              *(_DWORD *)v231 = *(_DWORD *)(v35 + 4 * v11);
              if (v6 <= v3)
                goto LABEL_502;
              *(_DWORD *)&v231[4] = *(_DWORD *)(v35 + 4 * v3);
              if (v6 <= v2)
                goto LABEL_508;
              *(_DWORD *)&v231[8] = *(_DWORD *)(v35 + 4 * v2);
              if ((_DWORD)v12 == -1)
              {
                v112 = 3;
              }
              else
              {
                if (v6 <= v12)
                  goto LABEL_534;
                *(_DWORD *)&v231[12] = *(_DWORD *)(v35 + 4 * v12);
                v112 = 4;
              }
              goto LABEL_263;
            }
LABEL_254:
            v112 = 0;
LABEL_263:
            re::DynamicArray<float>::copy(location, (unint64_t)location[2], v231, v112);
            if (++v9 == v108)
            {
              v114 = (re::Data *)location[4];
              v115 = (const void *)(4 * (uint64_t)location[2]);
              v11 = (unint64_t)v228;
              goto LABEL_394;
            }
          }
          v110 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)(v22 + 208), (unsigned int *)&v212);
          if (v110 == -1)
            goto LABEL_254;
          v111 = (unsigned int *)(*(_QWORD *)(v22 + 216) + 8 * v110 + 4);
          goto LABEL_253;
        }
        v115 = 0;
        v114 = 0;
LABEL_394:
        re::Data::makeDataWithBytes(v114, v115, &v212);
        v228[0] = 0;
        LOBYTE(v228[1]) = -1;
        memset(&v228[2], 0, 24);
        re::ObjCObject::operator=(v228, (id *)&v212);
        LOBYTE(v228[1]) = 6;
        v228[2] = location[2];
LABEL_395:
        v149 = xmmword_226104390;
        goto LABEL_405;
      case 5:
        v166 = v3;
        if ((*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)v21 + 16))(v21))
        {
          v37 = re::internal::GeomTypedAttribute<double>::operator[](v22, 0);
          LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
        }
        else
        {
          LODWORD(v6) = 0;
          v37 = 0;
        }
        v116 = *(unsigned int *)(v22 + 88);
        location[4] = 0;
        memset(location, 0, 28);
        if (v116)
        {
          v9 = 0;
          while (1)
          {
            v212.n128_u32[0] = v9;
            v117 = *(unsigned __int8 *)(v22 + 204);
            if (v117 == 2)
              break;
            if (v117 == 1)
            {
              if (*(_QWORD *)(v22 + 224) <= v9)
                goto LABEL_278;
              v119 = (unsigned int *)(*(_QWORD *)(v22 + 240) + 4 * v9);
LABEL_277:
              v12 = *v119;
              if ((_DWORD)v12 != -1)
                goto LABEL_279;
              goto LABEL_278;
            }
            if (*(_BYTE *)(v22 + 204))
              goto LABEL_544;
            if (v9 < *(unsigned int *)(v22 + 208))
            {
              v12 = v9;
LABEL_279:
              v2 = *(_QWORD *)(v22 + 88);
              if (v2 <= v12)
                goto LABEL_491;
              v121 = (unsigned int *)(*(_QWORD *)(v22 + 104) + 16 * v12);
              v11 = *v121;
              if (v6 <= v11)
                goto LABEL_497;
              v3 = v121[1];
              v2 = v121[2];
              v12 = v121[3];
              *(_QWORD *)v231 = *(_QWORD *)(v37 + 8 * v11);
              if (v6 <= v3)
                goto LABEL_503;
              *(_QWORD *)&v231[8] = *(_QWORD *)(v37 + 8 * v3);
              if (v6 <= v2)
                goto LABEL_509;
              *(_QWORD *)&v231[16] = *(_QWORD *)(v37 + 8 * v2);
              if ((_DWORD)v12 == -1)
              {
                v120 = 3;
              }
              else
              {
                if (v6 <= v12)
                  goto LABEL_535;
                *(_QWORD *)&v231[24] = *(_QWORD *)(v37 + 8 * v12);
                v120 = 4;
              }
              goto LABEL_287;
            }
LABEL_278:
            v120 = 0;
LABEL_287:
            re::DynamicArray<double>::copy(location, (unint64_t)location[2], v231, v120);
            if (++v9 == v116)
            {
              v122 = (re::Data *)location[4];
              v123 = (const void *)(8 * (uint64_t)location[2]);
              v11 = (unint64_t)v228;
              goto LABEL_397;
            }
          }
          v118 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)(v22 + 208), (unsigned int *)&v212);
          if (v118 == -1)
            goto LABEL_278;
          v119 = (unsigned int *)(*(_QWORD *)(v22 + 216) + 8 * v118 + 4);
          goto LABEL_277;
        }
        v123 = 0;
        v122 = 0;
LABEL_397:
        re::Data::makeDataWithBytes(v122, v123, &v212);
        v228[0] = 0;
        LOBYTE(v228[1]) = -1;
        memset(&v228[2], 0, 24);
        re::ObjCObject::operator=(v228, (id *)&v212);
        LOBYTE(v228[1]) = 7;
        v228[2] = location[2];
        v149 = xmmword_226147220;
        goto LABEL_405;
      case 6:
        re::GeomAttributeFaceVaryingLayout<re::Vector2<float>>::GeomAttributeFaceVaryingLayout(&__src, (uint64_t)v21);
        v12 = *(unsigned int *)(__src + 88);
        memset(v231, 0, 32);
        location[4] = 0;
        memset(location, 0, 28);
        if ((_DWORD)v12)
        {
          v38 = 0;
          do
          {
            v39 = re::GeomAttributeFaceVaryingLayout<re::Vector2<float>>::faceVertexValueIndices(&__src, v38, (uint64_t)&v224);
            if (v39)
            {
              v2 = v224;
              v9 = v223;
              if (v223 <= v224)
                goto LABEL_482;
              *(_QWORD *)v231 = *(_QWORD *)(v222 + 8 * v224);
              v2 = v225;
              if (v223 <= v225)
                goto LABEL_484;
              *(_QWORD *)&v231[8] = *(_QWORD *)(v222 + 8 * v225);
              v2 = v226;
              if (v223 <= v226)
                goto LABEL_486;
              *(_QWORD *)&v231[16] = *(_QWORD *)(v222 + 8 * v226);
              if (v39 == 4)
              {
                v2 = v227;
                if (v223 <= v227)
                  goto LABEL_530;
                *(_QWORD *)&v231[24] = *(_QWORD *)(v222 + 8 * v227);
              }
            }
            re::DynamicArray<re::Vector2<float>>::copy(location, (unint64_t)location[2], v231, v39);
            v38 = (v38 + 1);
          }
          while ((_DWORD)v12 != (_DWORD)v38);
          v40 = (re::Data *)location[4];
          v41 = (const void *)(8 * (uint64_t)location[2]);
        }
        else
        {
          v41 = 0;
          v40 = 0;
        }
        re::Data::makeDataWithBytes(v40, v41, &v212);
        v228[0] = 0;
        LOBYTE(v228[1]) = -1;
        memset(&v228[2], 0, 24);
        re::ObjCObject::operator=(v228, (id *)&v212);
        LOBYTE(v228[1]) = 8;
        v228[2] = location[2];
        *(_OWORD *)&v228[3] = xmmword_226147220;

        v124 = location[0];
        if (!location[0])
          goto LABEL_408;
        goto LABEL_406;
      case 7:
        re::GeomAttributeFaceVaryingLayout<re::Vector3<float>>::GeomAttributeFaceVaryingLayout(&__src, (uint64_t)v21);
        v12 = *(unsigned int *)(__src + 88);
        v230 = 0u;
        memset(location, 0, sizeof(location));
        v228[4] = 0;
        memset(v228, 0, 28);
        if ((_DWORD)v12)
        {
          v42 = 0;
          do
          {
            v43 = re::GeomAttributeFaceVaryingLayout<re::Vector2<float>>::faceVertexValueIndices(&__src, v42, (uint64_t)&v224);
            if (v43)
            {
              v2 = v224;
              v9 = v223;
              if (v223 <= v224)
                goto LABEL_483;
              *(_OWORD *)location = *(_OWORD *)(v222 + 16 * v224);
              v2 = v225;
              if (v223 <= v225)
                goto LABEL_485;
              *(_OWORD *)&location[2] = *(_OWORD *)(v222 + 16 * v225);
              v2 = v226;
              if (v223 <= v226)
                goto LABEL_487;
              *(_OWORD *)&location[4] = *(_OWORD *)(v222 + 16 * v226);
              if (v43 == 4)
              {
                v2 = v227;
                if (v223 <= v227)
                  goto LABEL_531;
                v230 = *(_OWORD *)(v222 + 16 * v227);
              }
            }
            re::DynamicArray<re::Vector3<float>>::copy(v228, (unint64_t)v228[2], (char *)location, v43);
            v42 = (v42 + 1);
          }
          while ((_DWORD)v12 != (_DWORD)v42);
          v44 = (re::Data *)v228[4];
          v45 = (const void *)(16 * (uint64_t)v228[2]);
        }
        else
        {
          v45 = 0;
          v44 = 0;
        }
        re::Data::makeDataWithBytes(v44, v45, &v212);
        *(_QWORD *)v207 = 0;
        v207[8] = -1;
        memset((char *)v209 + 2, 0, 24);
        re::ObjCObject::operator=((id *)v207, (id *)&v212);
        v207[8] = 9;
        *(id *)((char *)v209 + 2) = v228[2];
        *(_OWORD *)((char *)&v209[1] + 2) = xmmword_2261916A0;

        v125 = v228[0];
        if (!v228[0])
          goto LABEL_402;
        goto LABEL_400;
      case 8:
        v168 = v3;
        if ((*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)v21 + 16))(v21))
        {
          v47 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v22, 0);
          LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
        }
        else
        {
          LODWORD(v6) = 0;
          v47 = 0;
        }
        v126 = *(unsigned int *)(v22 + 88);
        v230 = 0u;
        memset(location, 0, sizeof(location));
        v228[4] = 0;
        memset(v228, 0, 28);
        if (v126)
        {
          v9 = 0;
          while (1)
          {
            v212.n128_u32[0] = v9;
            v127 = *(unsigned __int8 *)(v22 + 204);
            if (v127 == 2)
              break;
            if (v127 == 1)
            {
              if (*(_QWORD *)(v22 + 224) <= v9)
                goto LABEL_308;
              v129 = (unsigned int *)(*(_QWORD *)(v22 + 240) + 4 * v9);
LABEL_307:
              v12 = *v129;
              if ((_DWORD)v12 != -1)
                goto LABEL_309;
              goto LABEL_308;
            }
            if (*(_BYTE *)(v22 + 204))
              goto LABEL_545;
            if (v9 < *(unsigned int *)(v22 + 208))
            {
              v12 = v9;
LABEL_309:
              v2 = *(_QWORD *)(v22 + 88);
              if (v2 <= v12)
                goto LABEL_492;
              v131 = (unsigned int *)(*(_QWORD *)(v22 + 104) + 16 * v12);
              v11 = *v131;
              if (v6 <= v11)
                goto LABEL_498;
              v3 = v131[1];
              v2 = v131[2];
              v12 = v131[3];
              *(_OWORD *)location = *(_OWORD *)(v47 + 16 * v11);
              if (v6 <= v3)
                goto LABEL_504;
              *(_OWORD *)&location[2] = *(_OWORD *)(v47 + 16 * v3);
              if (v6 <= v2)
                goto LABEL_510;
              *(_OWORD *)&location[4] = *(_OWORD *)(v47 + 16 * v2);
              if ((_DWORD)v12 == -1)
              {
                v130 = 3;
              }
              else
              {
                if (v6 <= v12)
                  goto LABEL_536;
                v230 = *(_OWORD *)(v47 + 16 * v12);
                v130 = 4;
              }
              goto LABEL_317;
            }
LABEL_308:
            v130 = 0;
LABEL_317:
            re::DynamicArray<re::Vector4<float>>::copy(v228, (unint64_t)v228[2], (char *)location, v130);
            if (++v9 == v126)
            {
              v132 = (re::Data *)v228[4];
              v133 = (const void *)(16 * (uint64_t)v228[2]);
              v11 = (unint64_t)v228;
              goto LABEL_399;
            }
          }
          v128 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)(v22 + 208), (unsigned int *)&v212);
          if (v128 == -1)
            goto LABEL_308;
          v129 = (unsigned int *)(*(_QWORD *)(v22 + 216) + 8 * v128 + 4);
          goto LABEL_307;
        }
        v133 = 0;
        v132 = 0;
LABEL_399:
        re::Data::makeDataWithBytes(v132, v133, &v212);
        *(_QWORD *)v207 = 0;
        v207[8] = -1;
        memset((char *)v209 + 2, 0, 24);
        re::ObjCObject::operator=((id *)v207, (id *)&v212);
        v207[8] = 10;
        *(id *)((char *)v209 + 2) = v228[2];
        *(_OWORD *)((char *)&v209[1] + 2) = xmmword_2261916A0;

        v125 = v228[0];
        v20 = v164;
        v6 = v165;
        LODWORD(v3) = v168;
        if (v228[0])
        {
LABEL_400:
          if (v228[4])
            (*(void (**)(id))(*(_QWORD *)v125 + 40))(v125);
        }
LABEL_402:
        v9 = *(_QWORD *)v207;
        *(_QWORD *)v207 = 0;
        v175 = v9;
        v150 = (id *)&v207[8];
        goto LABEL_409;
      case 9:
        v167 = v3;
        if ((*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)v21 + 16))(v21))
        {
          v49 = re::internal::GeomTypedAttribute<signed char>::operator[](v22, 0);
          LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
        }
        else
        {
          LODWORD(v6) = 0;
          v49 = 0;
        }
        v134 = *(unsigned int *)(v22 + 88);
        location[4] = 0;
        memset(location, 0, 28);
        if (!v134)
          goto LABEL_342;
        v9 = 0;
        while (1)
        {
          v212.n128_u32[0] = v9;
          v135 = *(unsigned __int8 *)(v22 + 204);
          if (v135 == 2)
            break;
          if (v135 == 1)
          {
            if (*(_QWORD *)(v22 + 224) <= v9)
              goto LABEL_332;
            v137 = (unsigned int *)(*(_QWORD *)(v22 + 240) + 4 * v9);
LABEL_331:
            v12 = *v137;
            if ((_DWORD)v12 == -1)
              goto LABEL_332;
            goto LABEL_333;
          }
          if (*(_BYTE *)(v22 + 204))
            goto LABEL_546;
          if (v9 >= *(unsigned int *)(v22 + 208))
          {
LABEL_332:
            v138 = 0;
            goto LABEL_341;
          }
          v12 = v9;
LABEL_333:
          v2 = *(_QWORD *)(v22 + 88);
          if (v2 <= v12)
            goto LABEL_493;
          v139 = (unsigned int *)(*(_QWORD *)(v22 + 104) + 16 * v12);
          v11 = *v139;
          if (v6 <= v11)
            goto LABEL_499;
          v3 = v139[1];
          v2 = v139[2];
          v12 = v139[3];
          LOBYTE(__src) = *(_BYTE *)(v49 + v11);
          if (v6 <= v3)
            goto LABEL_505;
          BYTE1(__src) = *(_BYTE *)(v49 + v3);
          if (v6 <= v2)
            goto LABEL_511;
          BYTE2(__src) = *(_BYTE *)(v49 + v2);
          if ((_DWORD)v12 == -1)
          {
            v138 = 3;
          }
          else
          {
            if (v6 <= v12)
              goto LABEL_537;
            BYTE3(__src) = *(_BYTE *)(v49 + v12);
            v138 = 4;
          }
LABEL_341:
          re::DynamicArray<REFrameAnalysisBottleneck>::copy(location, (unint64_t)location[2], (char *)&__src, v138);
          if (++v9 == v134)
          {
LABEL_342:
            re::makeNSDataFromGeomArray<unsigned char>((uint64_t)v228, (uint64_t)location);
            goto LABEL_343;
          }
        }
        v136 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)(v22 + 208), (unsigned int *)&v212);
        if (v136 == -1)
          goto LABEL_332;
        v137 = (unsigned int *)(*(_QWORD *)(v22 + 216) + 8 * v136 + 4);
        goto LABEL_331;
      case 0xA:
        v166 = v3;
        v50 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)v21 + 16))(v21);
        if ((_DWORD)v50)
        {
          v52 = re::internal::GeomTypedAttribute<signed char>::operator[](v22, 0);
          v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
          LODWORD(v6) = v50;
        }
        else
        {
          LODWORD(v6) = 0;
          v52 = 0;
        }
        v11 = *(unsigned int *)(v22 + 88);
        location[4] = 0;
        memset(location, 0, 28);
        if (!v11)
        {
          v148 = 0;
          v147 = 0;
LABEL_404:
          re::Data::makeDataWithBytes(v147, v148, &v212);
          v228[0] = 0;
          LOBYTE(v228[1]) = -1;
          memset(&v228[2], 0, 24);
          re::ObjCObject::operator=(v228, (id *)&v212);
          LOBYTE(v228[1]) = 0;
          v228[2] = location[2];
          v11 = (unint64_t)v228;
          v149 = xmmword_2260E7EE0;
LABEL_405:
          *(_OWORD *)&v228[3] = v149;

          v124 = location[0];
          v20 = v164;
          v6 = v165;
          LODWORD(v3) = v166;
          if (location[0])
          {
LABEL_406:
            if (location[4])
              (*(void (**)(id))(*(_QWORD *)v124 + 40))(v124);
          }
LABEL_408:
          v9 = (unint64_t)v228[0];
          v228[0] = 0;
          v175 = v9;
          v150 = &v228[1];
LABEL_409:
          v151 = *((_OWORD *)v150 + 1);
          v176 = *(_OWORD *)v150;
          v177 = v151;

          goto LABEL_410;
        }
        v2 = 0;
        break;
      default:
        v9 = 0;
        goto LABEL_410;
    }
    while (1)
    {
      v212.n128_u32[0] = v2;
      v140 = *(unsigned __int8 *)(v22 + 204);
      if (v140 == 2)
        break;
      if (v140 == 1)
      {
        if (*(_QWORD *)(v22 + 224) <= v2)
          goto LABEL_385;
        v141 = (unsigned int *)(*(_QWORD *)(v22 + 240) + 4 * v2);
LABEL_359:
        v9 = *v141;
        if ((_DWORD)v9 != -1)
          goto LABEL_360;
        goto LABEL_385;
      }
      if (*(_BYTE *)(v22 + 204))
        goto LABEL_549;
      if (v2 < *(unsigned int *)(v22 + 208))
      {
        v9 = v2;
LABEL_360:
        v12 = *(_QWORD *)(v22 + 88);
        if (v12 <= v9)
          goto LABEL_514;
        v142 = (unsigned int *)(*(_QWORD *)(v22 + 104) + 16 * v9);
        v80 = *v142;
        if (v6 <= v80)
          goto LABEL_517;
        v3 = v142[1];
        v12 = v142[2];
        v9 = v142[3];
        LOBYTE(__src) = *(_BYTE *)(v52 + v80);
        if (v6 <= v3)
          goto LABEL_520;
        BYTE1(__src) = *(_BYTE *)(v52 + v3);
        if (v6 <= v12)
          goto LABEL_523;
        BYTE2(__src) = *(_BYTE *)(v52 + v12);
        if ((_DWORD)v9 == -1)
        {
          v81 = 3;
        }
        else
        {
          if (v6 <= v9)
            goto LABEL_540;
          BYTE3(__src) = *(_BYTE *)(v52 + v9);
          v81 = 4;
        }
        v3 = (unint64_t)location[2];
        if (location[2] == (id)-1)
          goto LABEL_526;
        v9 = (unint64_t)location[2] + v81;
        if (__CFADD__(location[2], v81))
          goto LABEL_529;
        if (location[2] >= (id)v9)
        {
          v50 = (uint64_t)memmove((char *)location[4] + (unint64_t)location[2], &__src, v81);
        }
        else
        {
          if (location[1] < (id)v9)
          {
            if (location[0])
            {
              v143 = 8;
              if (location[1])
                v143 = 2 * (uint64_t)location[1];
              if (v143 <= v9)
                v144 = (char *)location[2] + v81;
              else
                v144 = (char *)v143;
              re::DynamicArray<BOOL>::setCapacity(location, (unint64_t)v144);
            }
            else
            {
              re::DynamicArray<BOOL>::setCapacity(location, v3 + v81);
              ++LODWORD(location[3]);
            }
          }
          v145 = (char *)location[4];
          v146 = (char *)location[2] - v3;
          if (location[2] != (id)v3)
          {
            memmove((char *)location[4] + v3, &__src, (size_t)location[2] - v3);
            v3 = (unint64_t)location[2];
            v145 = (char *)location[4];
          }
          v50 = (uint64_t)memcpy(&v145[v3], (char *)&__src + (_QWORD)v146, (char *)&__src + v81 - ((char *)&__src + (_QWORD)v146));
          location[2] = (id)v9;
        }
        ++LODWORD(location[3]);
      }
LABEL_385:
      if (++v2 == v11)
      {
        v147 = (re::Data *)location[4];
        v148 = location[2];
        goto LABEL_404;
      }
    }
    v50 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)(v22 + 208), (unsigned int *)&v212);
    if (v50 == -1)
      goto LABEL_385;
    v141 = (unsigned int *)(*(_QWORD *)(v22 + 216) + 8 * v50 + 4);
    goto LABEL_359;
  }
LABEL_420:
  re::makeNSDataFromGeomArray<unsigned int>((uint64_t)location, (uint64_t)v190);
  v153 = re::GeomModelDescriptor::validateIndexType(v152, LOBYTE(location[1]), (uint64_t)&v212);
  if (!location[0])
  {
    v158 = "No material assignements supplied.";
LABEL_438:
    v155 = 0;
    LOBYTE(v2) = v228[1];
    v9 = (unint64_t)v228[2];
    v19 = (const char *)v228[0];
    goto LABEL_439;
  }
  if (!location[4])
  {
    v158 = "Zero stride provided.";
    goto LABEL_438;
  }
  re::GeomModelDescriptor::makeCFDataPayload((uint64_t *)v228, (uint64_t)location);
  v154 = *(_QWORD *)((char *)&v195 + 4);
  *(id *)((char *)&v195 + 4) = v228[0];
  if (v154)

  v155 = 1;
LABEL_439:
  if (!v212.n128_u8[0] && *((_QWORD *)&v213 + 1) && (v214 & 1) != 0)
    (*(void (**)(void))(**((_QWORD **)&v213 + 1) + 40))();
  if (v19)
    v160 = v155;
  else
    v160 = 1;
  if ((v160 & 1) == 0 && (v2 & 1) != 0)
    (*(void (**)(const char *, unint64_t))(*(_QWORD *)v19 + 40))(v19, v9);
  re::GeomModelDescriptor::GeomModelDescriptor((uint64_t)&v212, (uint64_t)&v193);
  *v163 = 1;
  re::GeomModelDescriptor::GeomModelDescriptor((uint64_t)(v163 + 8), (uint64_t)&v212);
  if ((_QWORD)v219)
  {
    if ((BYTE8(v219) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v219 + 40))();
    v219 = 0u;
    v220 = 0u;
  }
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v218);
  re::DynamicArray<re::GeomModelDescriptor::AttributeData>::deinit((uint64_t)v217);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v215, v161);
  if (*((_QWORD *)&v214 + 1))
  {

    *((_QWORD *)&v214 + 1) = 0;
  }
  if ((_QWORD)v214)
  {

    *(_QWORD *)&v214 = 0;
  }
  if (v212.n128_u64[1])

  if (v182[0] && v185)
    (*(void (**)(void))(*(_QWORD *)v182[0] + 40))();
  if (v186[0] && v188)
    (*(void (**)(void))(*(_QWORD *)v186[0] + 40))();
LABEL_462:
  if (v190[0] && v192)
    (*(void (**)(void))(*(_QWORD *)v190[0] + 40))();
LABEL_465:
  if ((_QWORD)v204)
  {
    if ((BYTE8(v204) & 1) != 0)
      (*(void (**)(__n128))(*(_QWORD *)v204 + 40))(v157);
    v204 = 0u;
    v205 = 0u;
  }
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v202[8]);
  re::DynamicArray<re::GeomModelDescriptor::AttributeData>::deinit((uint64_t)v200);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v196[7], v162);
  if (*(_QWORD *)&v196[5])
  {

    *(_QWORD *)&v196[5] = 0;
  }
  if (*(_QWORD *)&v196[3])
  {

    *(_QWORD *)&v196[3] = 0;
  }
  if (*(_QWORD *)((char *)&v195 + 4))

}

void re::makeNSDataFromGeomArray<unsigned char>(uint64_t a1, uint64_t a2)
{
  id v4;

  re::Data::makeDataWithBytes(*(re::Data **)(a2 + 32), *(const void **)(a2 + 16), &v4);
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  re::ObjCObject::operator=((id *)a1, &v4);
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = xmmword_2260E7EE0;

}

void re::makeNSDataFromGeomArray<unsigned int>(uint64_t a1, uint64_t a2)
{
  id v4;

  re::Data::makeDataWithBytes(*(re::Data **)(a2 + 32), (const void *)(4 * *(_QWORD *)(a2 + 16)), &v4);
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  re::ObjCObject::operator=((id *)a1, &v4);
  *(_BYTE *)(a1 + 8) = 5;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = xmmword_226104390;

}

re::DynamicString *re::GeomModelDescriptor::setAttribute@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  const re::DynamicString *v13;
  _anonymous_namespace_ *v14;
  _anonymous_namespace_ *CFDataPayload;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  re::DynamicString *v21;
  uint64_t v22;
  uint64_t v23;
  re::DynamicString *result;
  __int128 v25;
  __int128 v26;
  const char *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[8];
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  re::DynamicString *v40;
  char v41;
  uint64_t v42;
  int v43;
  const char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  unint64_t v48;
  __int16 v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  if (*(unsigned __int8 *)(a4 + 8) == 255)
  {
    v25 = v51;
    v26 = v52;
    *(_BYTE *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 100;
    *(_QWORD *)(a6 + 16) = &re::AssetErrorCategory(void)::instance;
    *(_OWORD *)(a6 + 24) = v25;
    *(_OWORD *)(a6 + 40) = v26;
    return result;
  }
  v12 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)(a1 + 17), a2);
  if (v12)
    v13 = (const re::DynamicString *)v12;
  else
    v13 = (const re::DynamicString *)a2;
  re::DynamicString::DynamicString((re::DynamicString *)&v40, v13);
  re::GeomModelDescriptor::validateIfCoreAttribute((uint64_t)&v40, a3, *(unsigned __int8 *)(a4 + 8), (uint64_t)v35);
  if (v35[0])
  {
    v32 = 4;
    v33 = 0;
    v34 = 0;
    CFDataPayload = re::DynamicString::operator=((re::DynamicString *)&v30, (re::DynamicString *)&v40);
    v32 = a3;
    if (*(_QWORD *)a4)
    {
      if (*(_QWORD *)(a4 + 32))
      {
        CFDataPayload = (_anonymous_namespace_ *)re::GeomModelDescriptor::makeCFDataPayload((uint64_t *)&v51, a4);
        v16 = v33;
        v33 = v51;
        if (v16)

        if (!a5)
        {
LABEL_16:
          v18 = (unint64_t *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)(a1 + 6), (uint64_t)&v40);
          if (v18)
          {
            v19 = *v18;
            v20 = a1[14];
            if (v20 <= *v18)
            {
              v42 = 0;
              v54 = 0u;
              v55 = 0u;
              v52 = 0u;
              v53 = 0u;
              v51 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v43 = 136315906;
              v44 = "operator[]";
              v45 = 1024;
              v46 = 789;
              v47 = 2048;
              v48 = v19;
              v49 = 2048;
              v50 = v20;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            v21 = re::DynamicString::operator=((re::DynamicString *)(a1[16] + 56 * v19), (re::DynamicString *)&v30);
            *((_BYTE *)v21 + 32) = v32;
            v22 = *((_QWORD *)v21 + 5);
            *((_QWORD *)v21 + 5) = v33;
            v33 = v22;
            v23 = *((_QWORD *)v21 + 6);
            *((_QWORD *)v21 + 6) = v34;
            v34 = v23;
          }
          else
          {
            *(_QWORD *)&v51 = a1[14];
            re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned long &>((uint64_t)(a1 + 6), (re::DynamicString *)&v40, &v51);
            re::DynamicArray<re::GeomModelDescriptor::AttributeData>::add((_anonymous_namespace_ *)(a1 + 12), (uint64_t)&v30);
          }
          *(_BYTE *)a6 = 1;
LABEL_27:
          if (v34)
          {

            v34 = 0;
          }
          if (v33)
          {

            v33 = 0;
          }
          if (v30 && (v31 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v30 + 40))();
          if (v35[0])
            goto LABEL_38;
          goto LABEL_35;
        }
        if (!*(_QWORD *)a5)
        {
          v27 = "Null indices value buffer.";
          goto LABEL_24;
        }
        if (*(_QWORD *)(a5 + 32))
        {
          re::GeomModelDescriptor::validateIndexType(CFDataPayload, *(unsigned __int8 *)(a5 + 8), a6);
          if (!*(_BYTE *)a6)
            goto LABEL_27;
          re::GeomModelDescriptor::makeCFDataPayload((uint64_t *)&v51, a5);
          v17 = v34;
          v34 = v51;
          if (v17)

          goto LABEL_16;
        }
      }
      v27 = "Zero stride provided.";
    }
    else
    {
      v27 = "Null values buffer.";
    }
LABEL_24:
    v28 = v51;
    v29 = v52;
    *(_BYTE *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 100;
    *(_QWORD *)(a6 + 16) = &re::AssetErrorCategory(void)::instance;
    *(_OWORD *)(a6 + 24) = v28;
    *(_OWORD *)(a6 + 40) = v29;
    goto LABEL_27;
  }
  *(_BYTE *)a6 = 0;
  *(_OWORD *)(a6 + 8) = v36;
  *(_QWORD *)(a6 + 24) = v37;
  *(_QWORD *)(a6 + 48) = v39;
  *(_OWORD *)(a6 + 32) = v38;
  v39 = 0;
  v37 = 0;
  v38 = 0uLL;
LABEL_35:
  if (v37 && (v38 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v37 + 40))();
LABEL_38:
  result = v40;
  if (v40)
  {
    if ((v41 & 1) != 0)
      return (re::DynamicString *)(*(uint64_t (**)(void))(*(_QWORD *)v40 + 40))();
  }
  return result;
}

re::DynamicString *re::GeomModelDescriptor::AttributeData::AttributeData(re::GeomModelDescriptor::AttributeData *this)
{
  re::DynamicString *result;

  *((_BYTE *)this + 32) = 4;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  return result;
}

double re::DynamicArray<re::GeomModelDescriptor::AttributeData>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::GeomModelDescriptor::AttributeData>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 56 * v4;
  result = 0.0;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v5 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 24) = 0;
  v10 = *(_QWORD *)(v5 + 8);
  v9 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 8) = v7;
  *(_QWORD *)(v5 + 16) = v8;
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = v9;
  *(_BYTE *)(v5 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(v5 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v5 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

__n128 re::GeomModelDescriptor::addAttributeAlias@<Q0>(re::GeomModelDescriptor *this@<X0>, const re::DynamicString *a2@<X1>, const re::DynamicString *a3@<X2>, uint64_t a4@<X8>)
{
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  _BOOL8 v11;
  const char *v12;
  _anonymous_namespace_ *v13;
  __n128 result;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;

  v8 = (char *)this + 48;
  v9 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)this + 48, (uint64_t)a2);
  if (v9)
  {
    v10 = (unint64_t *)v9;
    if (re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v8, (uint64_t)a3)&& !(v11 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)this + 136, (uint64_t)a3)))
    {
      v15 = "Alias with same name as existing attribute";
    }
    else
    {
      if ((*((_QWORD *)a3 + 1) & 1) != 0)
        v12 = (const char *)*((_QWORD *)a3 + 2);
      else
        v12 = (char *)a3 + 9;
      v13 = (_anonymous_namespace_ *)strcmp(v12, "vertexPosition");
      if ((_DWORD)v13)
      {
        v13 = (_anonymous_namespace_ *)strcmp(v12, "vertexUV");
        if ((_DWORD)v13)
        {
          v13 = (_anonymous_namespace_ *)strcmp(v12, "vertexNormal");
          if ((_DWORD)v13)
          {
            v13 = (_anonymous_namespace_ *)strcmp(v12, "vertexTangent");
            if ((_DWORD)v13)
            {
              v13 = (_anonymous_namespace_ *)strcmp(v12, "vertexBitangent");
              if ((_DWORD)v13)
              {
                v13 = (_anonymous_namespace_ *)strcmp(v12, "vertexColor");
                if ((_DWORD)v13)
                {
                  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace((uint64_t)this + 136, a3, a2);
                  v18.n128_u64[0] = *v10;
                  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace((uint64_t)v8, a3, &v18);
                  *(_BYTE *)a4 = 1;
                  return result;
                }
              }
            }
          }
        }
      }
      v15 = "Alias with core attribute name";
    }
  }
  else
  {
    v15 = "Alias for missing attribute";
  }
  result = v18;
  v16 = v19;
  v17 = v20;
  *(_BYTE *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 100;
  *(_QWORD *)(a4 + 16) = &re::AssetErrorCategory(void)::instance;
  *(__n128 *)(a4 + 24) = result;
  *(_QWORD *)(a4 + 40) = v16;
  *(_QWORD *)(a4 + 48) = v17;
  return result;
}

uint64_t re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(uint64_t a1, re::DynamicString *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char v12;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v12, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    result = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, v8, v7, a2, a3);
    goto LABEL_9;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    result = re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2);
    if ((result & 1) != 0)
      break;
    v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_QWORD *)(v10 + 56 * v9 + 48) = *a3;
LABEL_9:
  ++*(_DWORD *)(a1 + 40);
  return result;
}

uint64_t re::GeomModelDescriptor::removeAttributeAlias@<X0>(re::GeomModelDescriptor *this@<X0>, const re::DynamicString *a2@<X1>, _BYTE *a3@<X8>)
{
  char *v6;
  uint64_t result;

  v6 = (char *)this + 136;
  result = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)this + 136, (uint64_t)a2);
  if ((_DWORD)result)
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove((uint64_t)v6, (uint64_t)a2);
    result = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove((uint64_t)this + 48, (uint64_t)a2);
  }
  *a3 = 1;
  return result;
}

__n128 re::GeomModelDescriptor::setMaterialAssignmentsPerFace@<Q0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __n128 result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v14[0] = a2;
  v14[1] = a3;
  if (a3)
  {
    re::GeomModelDescriptor::makeSlicePayload<unsigned int>((re *)v14, (uint64_t *)&v11);
    v7 = v11.n128_u64[0];
    v11.n128_u64[0] = 0;
    v8 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v7;
    if (v8)
    {

      if (v11.n128_u64[0])
    }
    *(_BYTE *)a4 = 1;
  }
  else
  {
    result = v11;
    v9 = v12;
    v10 = v13;
    *(_BYTE *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 100;
    *(_QWORD *)(a4 + 16) = &re::AssetErrorCategory(void)::instance;
    *(__n128 *)(a4 + 24) = result;
    *(_QWORD *)(a4 + 40) = v9;
    *(_QWORD *)(a4 + 48) = v10;
  }
  return result;
}

uint64_t re::GeomModelDescriptor::makeSlicePayload<unsigned int>@<X0>(re *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint64_t v10;
  uint64_t result;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = re::globalAllocators(a1);
  v6 = *((_QWORD *)a1 + 1);
  if (!v6)
  {
    v9 = 0;
    v8 = 0;
    goto LABEL_6;
  }
  if (!(v6 >> 62) && 4 * v6 < 0xFFFFFFFFFFFFFFF0)
  {
    v7 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v4[2] + 32))(v4[2], (4 * v6 + 16) | 3, 0);
    v8 = (_QWORD *)((v7 + 19) & 0xFFFFFFFFFFFFFFFCLL);
    *(v8 - 2) = v6;
    *(v8 - 1) = v7;
    bzero(v8, 4 * v6);
    v9 = 4 * *((_QWORD *)a1 + 1);
LABEL_6:
    v16 = v8;
    memcpy(v8, *(const void **)a1, v9);
    v10 = *((_QWORD *)a1 + 1);
    v14 = 4;
    v15 = v10;
    v13 = 0;
    v12 = 1;
    return re::make::shared::object<re::internal::DataPayload,unsigned char *&,re::GeomModelValueType const&,unsigned long,unsigned long,int,BOOL,unsigned char *&,void (&)(void const*)>((re *)&v16, re::ConvertToGeomModelValueType<unsigned int>::kValueType, &v15, &v14, &v13, &v12, (uint64_t *)&v16, (uint64_t)re::GeomModelDescriptor::freeReNewedArrayData<unsigned int>, a2);
  }
  re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Size overflow in allocateArray. Element size = %zu, count = %zu", "!overflow", "allocateArray", 61, 4, v6);
  result = _os_crash();
  __break(1u);
  return result;
}

unint64_t *re::GeomModelDescriptor::deleteAttribute@<X0>(re::GeomModelDescriptor *this@<X0>, const re::DynamicString *a2@<X1>, _BYTE *a3@<X8>)
{
  unint64_t v3;
  char *v6;
  unint64_t *result;
  unint64_t *v8;
  __int128 *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _anonymous_namespace_ *v22;
  unint64_t v23;
  _BYTE *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  int v40;
  char *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  int v56;
  const char *v57;
  __int16 v58;
  int v59;
  __int16 v60;
  unint64_t v61;
  __int16 v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v6 = (char *)this + 48;
  result = (unint64_t *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)this + 48, (uint64_t)a2);
  if (!result)
  {
    *a3 = 1;
    return result;
  }
  v8 = result;
  v9 = &v64;
  v10 = *result;
  v11 = (char *)*((_QWORD *)this + 14);
  if ((unint64_t)v11 <= *result)
  {
LABEL_72:
    v53 = 0;
    v9[3] = 0u;
    v9[4] = 0u;
    v65 = 0u;
    v66 = 0u;
    v64 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v56 = 136315906;
    v57 = "operator[]";
    v58 = 1024;
    v59 = 789;
    v60 = 2048;
    v61 = v10;
    v62 = 2048;
    v63 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_73;
  }
  v52 = (uint64_t)v6;
  v49 = a3;
  re::DynamicString::DynamicString((re::DynamicString *)&v53, (const re::DynamicString *)(*((_QWORD *)this + 16) + 56 * v10));
  v50 = *((_QWORD *)this + 14);
  v3 = *v8;
  v51 = v50 - 1;
  if (v50 - 1 != *v8)
  {
    v6 = (char *)*((_QWORD *)this + 14);
    if (!v50)
    {
LABEL_73:
      v55 = 0;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v64 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v56 = 136315906;
      v57 = "operator[]";
      v58 = 1024;
      v59 = 789;
      v60 = 2048;
      v61 = v51;
      v62 = 2048;
      v63 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_74;
    }
    if (v50 <= v3)
    {
LABEL_74:
      v55 = 0;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v64 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v56 = 136315906;
      v57 = "operator[]";
      v58 = 1024;
      v59 = 789;
      v60 = 2048;
      v61 = v3;
      v62 = 2048;
      v63 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_75:
      v55 = 0;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v64 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v56 = 136315906;
      v57 = "operator[]";
      v58 = 1024;
      v59 = 789;
      v60 = 2048;
      v61 = v10;
      v62 = 2048;
      v63 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v12 = *((_QWORD *)this + 16);
    v13 = v12 + 56 * v51;
    v14 = v12 + 56 * v3;
    re::DynamicString::operator=((re::DynamicString *)v14, (re::DynamicString *)v13);
    *(_BYTE *)(v14 + 32) = *(_BYTE *)(v13 + 32);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v14 + 40), *(_QWORD *)(v13 + 40));
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v14 + 48), *(_QWORD *)(v13 + 48));
    v10 = *v8;
    v11 = (char *)*((_QWORD *)this + 14);
    if ((unint64_t)v11 <= *v8)
      goto LABEL_75;
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(v52, (re::DynamicString *)(*((_QWORD *)this + 16) + 56 * v10), v8);
    v15 = (char *)*((unsigned int *)this + 42);
    if ((_DWORD)v15)
    {
      v11 = 0;
      v16 = (int *)(*((_QWORD *)this + 19) + 8);
      while (1)
      {
        v17 = *v16;
        v16 += 20;
        if (v17 < 0)
          break;
        if (v15 == ++v11)
        {
          v11 = (char *)*((unsigned int *)this + 42);
          break;
        }
      }
    }
    else
    {
      v11 = 0;
    }
    if ((_DWORD)v15 != (_DWORD)v11)
    {
      v3 = v11;
      v18 = *((_DWORD *)this + 42);
      while (1)
      {
        v10 = *v8;
        v6 = (char *)*((_QWORD *)this + 14);
        if ((unint64_t)v6 <= *v8)
          break;
        v19 = *((_QWORD *)this + 19);
        if (re::DynamicString::operator==(v19 + 80 * v3 + 48, *((_QWORD *)this + 16) + 56 * v10))
        {
          re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(v52, (re::DynamicString *)(v19 + 80 * v3 + 16), v8);
          v18 = *((_DWORD *)this + 42);
        }
        if (v18 <= (int)v11 + 1)
          v20 = (char *)((_DWORD)v11 + 1);
        else
          v20 = (char *)v18;
        while (1)
        {
          v3 = ((_DWORD)v11 + 1);
          if ((_DWORD)v20 - 1 == (_DWORD)v11)
            break;
          LODWORD(v11) = (_DWORD)v11 + 1;
          v21 = (char *)v3;
          if ((*(_DWORD *)(*((_QWORD *)this + 19) + 80 * v3 + 8) & 0x80000000) != 0)
            goto LABEL_26;
        }
        v21 = v20;
LABEL_26:
        v11 = v21;
        if ((_DWORD)v15 == (_DWORD)v21)
          goto LABEL_27;
      }
      v55 = 0;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v64 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v56 = 136315906;
      v57 = "operator[]";
      v58 = 1024;
      v59 = 789;
      v60 = 2048;
      v61 = v10;
      v62 = 2048;
      v63 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_72;
    }
  }
LABEL_27:
  v22 = (_anonymous_namespace_ *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove(v52, (uint64_t)&v53);
  v23 = *((_QWORD *)this + 14);
  if (v23 < v51)
  {
    if (*((_QWORD *)this + 13) < v51)
    {
      v22 = (_anonymous_namespace_ *)re::DynamicArray<re::GeomModelDescriptor::AttributeData>::setCapacity((_QWORD *)this + 12, v51);
      v23 = *((_QWORD *)this + 14);
    }
    v24 = v49;
    if (v23 < v51)
    {
      v25 = ~v23 + v50;
      v26 = 56 * v23;
      do
      {
        v27 = *((_QWORD *)this + 16) + v26;
        *(_BYTE *)(v27 + 32) = 4;
        v26 += 56;
        *(_QWORD *)(v27 + 40) = 0;
        *(_QWORD *)(v27 + 48) = 0;
        --v25;
      }
      while (v25);
    }
LABEL_45:
    *((_QWORD *)this + 14) = v51;
    ++*((_DWORD *)this + 30);
    goto LABEL_46;
  }
  v24 = v49;
  if (v23 > v51)
  {
    v28 = 56 * v50;
    v29 = v50 - 1;
    do
    {
      v30 = *((_QWORD *)this + 16);
      v31 = v30 + v28;
      v32 = *(_QWORD *)(v30 + v28 - 8);
      if (v32)
      {

        *(_QWORD *)(v31 - 8) = 0;
      }
      v33 = *(_QWORD *)(v31 - 16);
      if (v33)
      {

        *(_QWORD *)(v31 - 16) = 0;
      }
      v36 = *(_QWORD *)(v31 - 56);
      v35 = (_OWORD *)(v31 - 56);
      v34 = v36;
      if (v36)
      {
        if ((*(_BYTE *)(v30 + v28 - 48) & 1) != 0)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 40))(v34, *(_QWORD *)(v30 + v28 - 40));
        *v35 = 0u;
        v35[1] = 0u;
      }
      ++v29;
      v28 += 56;
    }
    while (v29 < *((_QWORD *)this + 14));
    goto LABEL_45;
  }
LABEL_46:
  *(_QWORD *)&v66 = 0;
  *(_QWORD *)&v65 = 0;
  v64 = 0uLL;
  DWORD2(v65) = 0;
  v37 = *((unsigned int *)this + 42);
  if ((_DWORD)v37)
  {
    v38 = 0;
    v39 = (int *)(*((_QWORD *)this + 19) + 8);
    while (1)
    {
      v40 = *v39;
      v39 += 20;
      if (v40 < 0)
        break;
      if (v37 == ++v38)
      {
        LODWORD(v38) = *((_DWORD *)this + 42);
        break;
      }
    }
  }
  else
  {
    LODWORD(v38) = 0;
  }
  if ((_DWORD)v37 != (_DWORD)v38)
  {
    v41 = (char *)this + 136;
    v42 = v38;
    v43 = *((_DWORD *)this + 42);
    do
    {
      v44 = *((_QWORD *)this + 19);
      if (re::DynamicString::operator==(v44 + 80 * v42 + 48, (uint64_t)&v53))
      {
        re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)&v64, (re::DynamicString *)(v44 + 80 * v42 + 16));
        v43 = *((_DWORD *)this + 42);
      }
      if (v43 <= (int)v38 + 1)
        v45 = v38 + 1;
      else
        v45 = v43;
      while (1)
      {
        v42 = (v38 + 1);
        if (v45 - 1 == (_DWORD)v38)
          break;
        LODWORD(v38) = v38 + 1;
        v46 = v42;
        if ((*(_DWORD *)(*((_QWORD *)this + 19) + 80 * v42 + 8) & 0x80000000) != 0)
          goto LABEL_63;
      }
      v46 = v45;
LABEL_63:
      LODWORD(v38) = v46;
    }
    while ((_DWORD)v37 != v46);
    if ((_QWORD)v65)
    {
      v47 = v66;
      v48 = 32 * v65;
      do
      {
        re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove((uint64_t)v41, v47);
        re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove(v52, v47);
        v47 += 32;
        v48 -= 32;
      }
      while (v48);
    }
  }
  *v24 = 1;
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)&v64);
  result = (unint64_t *)v53;
  if (v53)
  {
    if ((v54 & 1) != 0)
      return (unint64_t *)(*(uint64_t (**)(void))(*(_QWORD *)v53 + 40))();
  }
  return result;
}

uint64_t re::GeomModelDescriptor::emptyAttribute(re::GeomModelDescriptor *this)
{
  unsigned __int8 v1;
  _QWORD *v2;
  int v4;
  re::GeomModelDescriptor::AttributeData *v5;

  v2 = &re::mtl::introspect_SamplerMinMagFilter(BOOL)::info;
  if ((v1 & 1) == 0)
  {
    v2 = (_QWORD *)&re::mtl::introspect_SamplerMinMagFilter(BOOL)::info;
    if (v4)
    {
      v5 = (re::GeomModelDescriptor::AttributeData *)operator new();
      re::GeomModelDescriptor::emptyAttribute(void)::empty = (uint64_t)re::GeomModelDescriptor::AttributeData::AttributeData(v5);
      v2 = (_QWORD *)&re::mtl::introspect_SamplerMinMagFilter(BOOL)::info;
    }
  }
  return v2[67];
}

void std::__function::__func<void (*)(void const*),std::allocator<void (*)(void const*)>,void ()(void const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<void (*)(void const*),std::allocator<void (*)(void const*)>,void ()(void const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED7D410;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(void const*),std::allocator<void (*)(void const*)>,void ()(void const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED7D410;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(void const*),std::allocator<void (*)(void const*)>,void ()(void const*)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<void (*)(void const*),std::allocator<void (*)(void const*)>,void ()(void const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<void (*)(void const*),std::allocator<void (*)(void const*)>,void ()(void const*)>::target_type()
{
}

_QWORD *re::DynamicArray<re::GeomModelDescriptor::AttributeData>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::GeomModelDescriptor::AttributeData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::GeomModelDescriptor::AttributeData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::GeomModelDescriptor::AttributeData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::GeomModelDescriptor::AttributeData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          v2 = 56 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_22;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_22:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 24;
        v11 = 56 * v9;
        v12 = v7;
        do
        {
          *(_OWORD *)v12 = 0u;
          *((_OWORD *)v12 + 1) = 0u;
          v13 = (_QWORD *)(v10 - 24);
          *v12 = *(_QWORD *)(v10 - 24);
          *(_QWORD *)(v10 - 24) = 0;
          v12[3] = *(_QWORD *)v10;
          *(_QWORD *)v10 = 0;
          v15 = v12[1];
          v14 = v12[2];
          v16 = *(_QWORD *)(v10 - 8);
          v12[1] = *(_QWORD *)(v10 - 16);
          v12[2] = v16;
          *(_QWORD *)(v10 - 16) = v15;
          *(_QWORD *)(v10 - 8) = v14;
          *((_BYTE *)v12 + 32) = *(_BYTE *)(v10 + 8);
          v12[5] = *(_QWORD *)(v10 + 16);
          *(_QWORD *)(v10 + 16) = 0;
          v12[6] = *(_QWORD *)(v10 + 24);
          *(_QWORD *)(v10 + 24) = 0;
          v17 = *(_QWORD *)(v10 + 16);
          if (v17)
          {

            *(_QWORD *)(v10 + 16) = 0;
          }
          if (*v13)
          {
            if ((*(_BYTE *)(v10 - 16) & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v13 + 40))(*v13, *(_QWORD *)(v10 - 8));
            *(_OWORD *)v13 = 0u;
            *(_OWORD *)(v10 - 8) = 0u;
          }
          v10 += 56;
          v12 += 7;
          v11 -= 56;
        }
        while (v11);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_22;
    }
  }
  return result;
}

uint64_t *re::GeomModelDescriptor::freeReNewedArrayData<unsigned int>(re *a1)
{
  uint64_t *result;

  result = re::globalAllocators(a1);
  if (a1)
    return (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result[2] + 40))(result[2], *((_QWORD *)a1 - 1));
  return result;
}

uint64_t re::make::shared::object<re::internal::DataPayload,unsigned char *&,re::GeomModelValueType const&,unsigned long,unsigned long,int,BOOL,unsigned char *&,void (&)(void const*)>@<X0>(re *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, int *a5@<X4>, char *a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t *v18;
  uint64_t v19;
  uint64_t result;

  v18 = re::globalAllocators(a1);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18[2] + 32))(v18[2], 104, 8);
  result = re::internal::DataPayload::DataPayload(v19, *(_QWORD *)a1, *a2, *a3, *a4, *a5, *a6, *a7, a8);
  *a9 = result;
  return result;
}

void re::internal::createGeomMeshFromMDLSubmesh(re::internal *this@<X0>, MDLMesh *a2@<X1>, re::GeomMesh *a3@<X8>)
{
  char *v4;
  char **v5;
  re::internal *v8;
  MDLMesh *v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  unsigned int v17;
  MDLMesh *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  re::internal *v30;
  const re::GeomAttribute *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  re *v38;
  re *v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t i;
  void *v53;
  void *v54;
  id v55;
  id v56;
  void *v57;
  void *v58;
  uint64_t v59;
  MDLMesh *v60;
  re::internal *v61;
  re::GeomMesh *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69[2];
  unint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE v74[128];
  char *__s[2];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t *v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  int v87;
  _BYTE v88[12];
  __int16 v89;
  int v90;
  __int16 v91;
  unint64_t v92;
  __int16 v93;
  unint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  v8 = this;
  v9 = a2;
  v62 = a3;
  re::GeomMesh::GeomMesh(a3, 0);
  v72 = 0;
  v69[1] = 0;
  v70 = 0;
  v69[0] = 0;
  v71 = 0;
  v11 = v70;
  if (!v70)
  {
LABEL_47:
    re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "topologies.size() > 0", "createGeomMeshFromMDLSubmesh", 655, v57);
    _os_crash();
    __break(1u);
LABEL_48:
    *(_QWORD *)v88 = 0;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    *(_OWORD *)__s = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v95) = 136315906;
    *(char **)((char *)v5 + 52) = "operator[]";
    WORD6(v95) = 1024;
    *(_DWORD *)((char *)v5 + 62) = 789;
    WORD1(v96) = 2048;
    *(char **)((char *)v5 + 68) = v4;
    WORD6(v96) = 2048;
    *(char **)((char *)v5 + 78) = (char *)v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5 = (char **)v88;
  -[re::internal vertexDescriptor](v8, "vertexDescriptor");
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v58, "attributeNamed:", CFSTR("position"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "bufferIndex");
  -[MDLMesh faceIndexing](v9, "faceIndexing");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  v57 = v12;
  if (v14)
  {
    -[MDLMesh faceIndexing](v9, "faceIndexing");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "objectAtIndexedSubscript:", v13);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "unsignedIntValue");

    v4 = (char *)v17;
    if (v11 <= v17)
      goto LABEL_48;
    v18 = v9;
  }
  else
  {
    v18 = v9;
    v4 = 0;
  }
  v19 = v72;
  v20 = v72 + 80 * v4;
  v23 = *(_QWORD *)(v20 + 56);
  v21 = (unint64_t *)(v20 + 56);
  v22 = v23;
  v24 = *((_DWORD *)v21 - 10);
  v5 = __s;
  re::GeomMeshBuilder::GeomMeshBuilder((re *)__s, (uint64_t)v62);
  if (LODWORD(__s[1]) > v24 && (_DWORD)v77 && (v77 - 1) > (unint64_t)v77)
  {
    while (1)
      ;
  }
  v11 = v22;
  LODWORD(__s[1]) = v24;
  v80 = v24;
  if (v81)
  {
    v25 = v82;
    v26 = 8 * v81;
    do
    {
      v27 = *v25++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 72))(v27, v80);
      v26 -= 8;
    }
    while (v26);
  }
  v61 = v8;
  if (v77 > v22)
  {
    v28 = v87;
    if (v87)
    {
      v29 = 0;
      do
      {
        v30 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)&v86, v29);
        re::internal::accessFaceVaryingAttributeSubmesh(v30, v31);
        ++v29;
      }
      while (v28 != v29);
    }
  }
  re::DynamicArray<re::GeomCell4>::resize(&v76, v22);
  v83 = v22;
  if (v84)
  {
    v32 = v85;
    v33 = 8 * v84;
    do
    {
      v34 = *v32++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 72))(v34, v83);
      v33 -= 8;
    }
    while (v33);
  }
  if (v22)
  {
    v35 = 0;
    v36 = 8;
    while (1)
    {
      v37 = *v21;
      if (*v21 <= v35)
        break;
      re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v35++, *(_DWORD *)(*(_QWORD *)(v19 + 80 * v4 + 72) + v36 - 8), *(_DWORD *)(*(_QWORD *)(v19 + 80 * v4 + 72) + v36 - 4), *(_DWORD *)(*(_QWORD *)(v19 + 80 * v4 + 72) + v36), *(_DWORD *)(*(_QWORD *)(v19 + 80 * v4 + 72) + v36 + 4));
      v36 += 16;
      if (v11 == v35)
        goto LABEL_24;
    }
    v73 = 0;
    v98 = 0u;
    v99 = 0u;
    v96 = 0u;
    v97 = 0u;
    v95 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v88 = 136315906;
    *(_QWORD *)&v88[4] = "operator[]";
    v89 = 1024;
    v90 = 797;
    v91 = 2048;
    v92 = v35;
    v93 = 2048;
    v94 = v37;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_47;
  }
LABEL_24:
  v38 = (re *)re::GeomMesh::operator=((uint64_t)v62, &__s[1]);
  v39 = re::GeomMesh::setName(v38, __s[0]);
  v40 = __s[0];
  if (__s[0])
  {
    v41 = re::globalAllocators(v39);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v41[2] + 40))(v41[2], v40);
    __s[0] = 0;
  }
  re::GeomMeshBuilder::~GeomMeshBuilder((re::GeomMeshBuilder *)__s);
  v42 = *MEMORY[0x24BDDE6B8];
  {
    *(_QWORD *)&v95 = re::GeomMesh::modifyVertexPositions(v62);
    *((_QWORD *)&v95 + 1) = v43;
  }
  v45 = v19 + 80 * v4;
  v46 = *MEMORY[0x24BDDE6B0];
  v47 = *MEMORY[0x24BDDE6C0];
  v64 = *MEMORY[0x24BDDE690];
  v63 = *MEMORY[0x24BDDE6C8];
  v59 = v45;
  v60 = v18;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  objc_msgSend(v58, "attributes");
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v49 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v65, v74, 16);
  if (v49)
  {
    v50 = v49;
    v51 = *(_QWORD *)v66;
    while (2)
    {
      for (i = 0; i != v50; ++i)
      {
        if (*(_QWORD *)v66 != v51)
          objc_enumerationMutation(v48);
        v53 = *(void **)(*((_QWORD *)&v65 + 1) + 8 * i);
        objc_msgSend(v53, "name");
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v54, "isEqualToString:", v42) & 1) == 0
          && (objc_msgSend(v54, "isEqualToString:", v46) & 1) == 0
          && (objc_msgSend(v54, "isEqualToString:", v47) & 1) == 0
          && (objc_msgSend(v54, "isEqualToString:", v64) & 1) == 0
          && (objc_msgSend(v54, "isEqualToString:", v63) & 1) == 0)
        {
          v55 = objc_retainAutorelease(v54);
          if (!*(_BYTE *)objc_msgSend(v55, "UTF8String"))
          {

            goto LABEL_45;
          }
          if ((unint64_t)(objc_msgSend(v53, "format") - 786437) >= 0xFFFFFFFFFFFFFFFDLL)
          {
            v56 = objc_retainAutorelease(v55);
          }
        }

      }
      v50 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v65, v74, 16);
      if (v50)
        continue;
      break;
    }
  }
LABEL_45:

}

void re::internal::`anonymous namespace'::extractMDLAttributeTopologies(void *a1, _QWORD *a2)
{
  unint64_t v2;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _DWORD *v23;
  unsigned int v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t n;
  uint64_t v43;
  uint64_t ii;
  id v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t i;
  void *v53;
  void *v54;
  unsigned int v55;
  void *v56;
  void *v57;
  unint64_t v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int v66;
  unint64_t v67;
  unsigned int v68;
  int v69;
  unint64_t v70;
  int v71;
  int *v72;
  int *v73;
  int *v74;
  unint64_t v75;
  int v76;
  _DWORD *v77;
  int v78;
  int v79;
  unint64_t v80;
  unsigned int v81;
  _DWORD *v82;
  int v83;
  int v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  unsigned int v89;
  unint64_t v90;
  int v91;
  int *v92;
  int *v93;
  _DWORD *v94;
  int v95;
  int v96;
  unsigned int v97;
  int *v98;
  int v99;
  _DWORD *v100;
  int v101;
  int v102;
  int v103;
  unsigned int v104;
  re *v105;
  BOOL v106;
  NSObject *v107;
  const char *v108;
  _DWORD *v109;
  unsigned int v110;
  __int128 v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  int v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t j;
  uint64_t v134;
  uint64_t k;
  uint64_t v136;
  uint64_t m;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  void *v153;
  void *v154;
  void *v155;
  id v156;
  unsigned int v157;
  _QWORD *v158;
  uint64_t v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  int v163;
  id v164;
  uint64_t v165;
  _QWORD *v166;
  unint64_t v167;
  unint64_t v168;
  int v169;
  _QWORD *v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t v173[3];
  int v174;
  unsigned int v175;
  int v176;
  unsigned int v177;
  unsigned int v178;
  uint64_t v179;
  _BYTE v180[44];
  _BYTE v181[12];
  __int16 v182;
  int v183;
  __int16 v184;
  unint64_t v185;
  __int16 v186;
  unint64_t v187;
  uint8_t buf[32];
  __int128 v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;

  v192 = *MEMORY[0x24BDAC8D0];
  v4 = a1;
  re::DynamicArray<re::RigBasicConstraint>::clear(a2);
  if (!v4)
    goto LABEL_211;
  objc_msgSend(v4, "indexBuffer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "map");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
    goto LABEL_211;
  objc_msgSend(v4, "indexBuffer");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "map");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "bytes");

  if (!v9)
    goto LABEL_211;
  v166 = a2;
  v10 = objc_msgSend(v4, "geometryType");
  objc_msgSend(v4, "indexBuffer");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "length");
  objc_msgSend(v4, "indexBuffer");
  v13 = objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)v13, "map");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "bytes");
  v16 = objc_msgSend(v4, "indexType");
  v18 = v16;
  v173[1] = v15;
  v173[2] = v16;
  if (v16 != 8)
  {
    if (v16 == 32)
    {
      v12 >>= 2;
    }
    else
    {
      if (v16 != 16)
        goto LABEL_237;
      v12 >>= 1;
    }
  }
  v19 = (unint64_t)v181;
  v173[0] = v12;

  if (v10 != 2)
  {
    if (v10 == 5)
    {
      v156 = v4;
      v45 = v4;
      objc_msgSend(v45, "topology");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v46, "faceTopology");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      v159 = objc_msgSend(v47, "length");
      v154 = v47;
      objc_msgSend(v47, "map");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      v165 = objc_msgSend(v48, "bytes");

      objc_msgSend(v45, "faceIndexing");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      v157 = objc_msgSend(v46, "faceCount");
      v153 = v49;
      v50 = objc_msgSend(v49, "count");
      v155 = v46;
      v51 = 0;
      if (v50)
      {
        for (i = 0; i != v50; ++i)
        {
          objc_msgSend(v45, "faceIndexing");
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v53, "objectAtIndexedSubscript:", i);
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          v55 = objc_msgSend(v54, "intValue");

          if (v55 > v51)
          {
            objc_msgSend(v45, "faceIndexing");
            v56 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v56, "objectAtIndexedSubscript:", i);
            v57 = (void *)objc_claimAutoreleasedReturnValue();
            v51 = objc_msgSend(v57, "intValue");

          }
        }
      }
      v58 = v51 + 1;
      v59 = objc_msgSend(v45, "indexCount");
      v60 = v166;
      if (v51 != -1)
      {
        v161 = 0;
        v162 = 0;
        v151 = v51;
        v19 = 0;
        v152 = v59 / v58;
        v164 = v45;
        v61 = v159;
        v172 = v58;
        while (1)
        {
          v2 = v60[2];
          if (v2 <= v19)
            goto LABEL_233;
          v2 = v60[4];
          memset(v180, 0, 36);
          *(_QWORD *)&v180[36] = 0x7FFFFFFFLL;
          v158 = (_QWORD *)(v2 + 80 * v19 + 40);
          re::DynamicArray<re::GeomCell4>::resize(v158, v157);
          if (v157)
            break;
LABEL_137:
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v180);
          v106 = v19++ == v151;
          v60 = v166;
          if (v106)
          {
            if (v162)
            {
              v107 = *re::pipelineLogObjects(v105);
              if (os_log_type_enabled(v107, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 67109890;
                *(_WORD *)&buf[8] = 2080;
                *(_DWORD *)&buf[4] = v162 / v58;
                if (v162 / v58 == 1)
                  v108 = "";
                else
                  v108 = "s";
                *(_QWORD *)&buf[10] = v108;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v161;
                *(_WORD *)&buf[24] = 1024;
                *(_DWORD *)&buf[26] = v157;
                _os_log_debug_impl(&dword_224FE9000, v107, OS_LOG_TYPE_DEBUG, "Mesh contains %d polygon%s with edge count greater than 4 (max edge count %d) out of total face count %d.  The nGons have been triangulated.", buf, 0x1Eu);
              }
            }
            goto LABEL_210;
          }
        }
        v63 = 0;
        v64 = v2 + 80 * v19;
        v13 = 0;
        v170 = (_QWORD *)(v64 + 72);
        v171 = (unint64_t *)(v64 + 56);
        v167 = v19;
        while (1)
        {
          if (v63 == v61)
            goto LABEL_224;
          v2 = *(unsigned __int8 *)(v165 + v63);
          if (v2 <= 2)
            goto LABEL_207;
          v178 = 0;
          v65 = (v19 + v13 * v58);
          if (v12 <= v65)
            goto LABEL_225;
          switch(v18)
          {
            case 32:
              v66 = *(_DWORD *)(v15 + 4 * v65);
              break;
            case 16:
              v66 = *(unsigned __int16 *)(v15 + 2 * v65);
              break;
            case 8:
              v66 = *(unsigned __int8 *)(v15 + v65);
              break;
            default:
              goto LABEL_236;
          }
          v177 = 0;
          v178 = v66;
          v67 = (v58 + v58 * v13 + v19);
          if (v12 <= v67)
            goto LABEL_226;
          if (v18 == 32)
          {
            v68 = *(_DWORD *)(v15 + 4 * v67);
          }
          else if (v18 == 16)
          {
            v68 = *(unsigned __int16 *)(v15 + 2 * v67);
          }
          else
          {
            v68 = *(unsigned __int8 *)(v15 + v67);
          }
          v176 = 0;
          v177 = v68;
          v69 = v13 + 2;
          v70 = (v19 + (v13 + 2) * v58);
          if (v12 <= v70)
            goto LABEL_227;
          v168 = v63;
          if (v18 == 32)
            v71 = *(_DWORD *)(v15 + 4 * v70);
          else
            v71 = v18 == 16 ? *(unsigned __int16 *)(v15 + 2 * v70) : *(unsigned __int8 *)(v15 + v70);
          v176 = v71;
          v19 = re::HashTable<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::tryGet((uint64_t)v180, &v178);
          v72 = (int *)re::HashTable<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::tryGet((uint64_t)v180, &v177);
          v73 = (int *)re::HashTable<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::tryGet((uint64_t)v180, (unsigned int *)&v176);
          if (!v19)
            break;
          if (!v72)
            break;
          v74 = v73;
          if (!v73)
            break;
          if ((_DWORD)v2 == 4)
          {
            v175 = 0;
            v80 = (v167 + (v13 + 3) * v172);
            if (v12 <= v80)
              goto LABEL_230;
            v45 = v164;
            if (v18 == 32)
            {
              v81 = *(_DWORD *)(v15 + 4 * v80);
            }
            else if (v18 == 16)
            {
              v81 = *(unsigned __int16 *)(v15 + 2 * v80);
            }
            else
            {
              v81 = *(unsigned __int8 *)(v15 + v80);
            }
            v175 = v81;
            v98 = (int *)re::HashTable<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::tryGet((uint64_t)v180, &v175);
            if (!v98)
            {
LABEL_207:
              re::DynamicArray<re::RigBasicConstraint>::clear(v166);
              goto LABEL_209;
            }
            v99 = v2;
            v2 = *v171;
            v75 = v168;
            if (*v171 <= v168)
              goto LABEL_232;
            v100 = (_DWORD *)(*v170 + 16 * v168);
            v101 = *v72;
            v102 = *v74;
            v103 = *v98;
            *v100 = *(_DWORD *)v19;
            v100[1] = v101;
            v100[2] = v102;
            v100[3] = v103;
            v76 = v99;
          }
          else
          {
            v75 = v168;
            if ((_DWORD)v2 == 3)
            {
              v76 = 3;
              v2 = *v171;
              if (*v171 <= v168)
                goto LABEL_229;
              v77 = (_DWORD *)(*v170 + 16 * v168);
              v78 = *v72;
              v79 = *v73;
              *v77 = *(_DWORD *)v19;
              v77[1] = v78;
              v77[2] = v79;
              v77[3] = -1;
              v45 = v164;
            }
            else
            {
              v163 = v13;
              v13 = *v171;
              if (*v171 <= v168)
                goto LABEL_231;
              v82 = (_DWORD *)(*v170 + 16 * v168);
              v83 = *v72;
              v84 = *v73;
              *v82 = *(_DWORD *)v19;
              v82[1] = v83;
              v82[2] = v84;
              v82[3] = -1;
              v160 = v2;
              v85 = (v2 + v13 - 3);
              re::DynamicArray<re::GeomCell4>::resize(v158, v85);
              if (v85 <= v13)
              {
LABEL_122:
                v76 = v160;
                if (v161 <= v160)
                  v97 = v160;
                else
                  v97 = v161;
                LODWORD(v13) = v163;
                v161 = v97;
                ++v162;
                v45 = v164;
                v61 = v159;
                v75 = v168;
              }
              else
              {
                v2 = 0;
                v13 = v13;
                v86 = 16 * v13;
                v169 = v172 * v69;
                v87 = v167;
                while (1)
                {
                  v175 = 0;
                  v88 = (v169 + v87);
                  if (v12 <= v88)
                    goto LABEL_221;
                  if (v18 == 32)
                  {
                    v89 = *(_DWORD *)(v15 + 4 * v88);
                  }
                  else if (v18 == 16)
                  {
                    v89 = *(unsigned __int16 *)(v15 + 2 * v88);
                  }
                  else
                  {
                    v89 = *(unsigned __int8 *)(v15 + v88);
                  }
                  v174 = 0;
                  v175 = v89;
                  v90 = (v172 * (v163 + 3) + v87);
                  if (v12 <= v90)
                    goto LABEL_222;
                  if (v18 == 32)
                    v91 = *(_DWORD *)(v15 + 4 * v90);
                  else
                    v91 = v18 == 16 ? *(unsigned __int16 *)(v15 + 2 * v90) : *(unsigned __int8 *)(v15 + v90);
                  v174 = v91;
                  v92 = (int *)re::HashTable<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::tryGet((uint64_t)v180, &v175);
                  v93 = (int *)re::HashTable<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::tryGet((uint64_t)v180, (unsigned int *)&v174);
                  if (!v92 || !v93)
                    break;
                  v2 = *v171;
                  if (*v171 <= v13)
                    goto LABEL_223;
                  v94 = (_DWORD *)(*v170 + v86);
                  v95 = *v92;
                  v96 = *v93;
                  *v94 = *(_DWORD *)v19;
                  v94[1] = v95;
                  ++v13;
                  v94[2] = v96;
                  v94[3] = -1;
                  v2 = v13 >= v85;
                  v86 += 16;
                  v87 += v172;
                  if (v85 == v13)
                    goto LABEL_122;
                }
                re::DynamicArray<re::RigBasicConstraint>::clear(v166);
                v104 = v161;
                if (v161 <= v160)
                  v104 = v160;
                v45 = v164;
                if ((v2 & 1) == 0)
                  goto LABEL_209;
                v161 = v104;
                LODWORD(v13) = v163;
                v162 += v2 & 1;
                v61 = v159;
                v75 = v168;
                v76 = v160;
              }
            }
          }
          v13 = (v13 + v76);
          v63 = v75 + 1;
          v58 = v172;
          v19 = v167;
          if (v63 == v157)
            goto LABEL_137;
        }
        re::DynamicArray<re::RigBasicConstraint>::clear(v166);
        v45 = v164;
LABEL_209:
        re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v180);
      }
LABEL_210:

      v4 = v156;
LABEL_211:

      return;
    }
    if (v10 != 4)
      goto LABEL_238;
  }
  if (!v166[2])
  {
LABEL_228:
    *(_QWORD *)v181 = 0;
    *(_OWORD *)(v19 + 96) = 0u;
    *(_OWORD *)(v19 + 112) = 0u;
    *(_OWORD *)(v19 + 64) = 0u;
    *(_OWORD *)(v19 + 80) = 0u;
    *(_OWORD *)(v19 + 48) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v180 = 136315906;
    *(_QWORD *)&v180[4] = "operator[]";
    *(_WORD *)&v180[12] = 1024;
    *(_DWORD *)&v180[14] = 789;
    *(_WORD *)&v180[18] = 2048;
    *(_QWORD *)&v180[20] = 0;
    *(_WORD *)&v180[28] = 2048;
    *(_QWORD *)&v180[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_229:
    v179 = 0;
    v190 = 0u;
    v191 = 0u;
    v189 = 0u;
    memset(buf, 0, sizeof(buf));
    v138 = v75;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v181 = 136315906;
    *(_QWORD *)&v181[4] = "operator[]";
    v182 = 1024;
    v183 = 789;
    v184 = 2048;
    v185 = v138;
    v186 = 2048;
    v187 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_230:
    re::internal::assertLog((re::internal *)4, v62, "assertion failure: '%s' (%s:line %i) ", "index < m_max_index", "operator[]", 79);
    _os_crash();
    __break(1u);
LABEL_231:
    v179 = 0;
    v190 = 0u;
    v191 = 0u;
    v189 = 0u;
    memset(buf, 0, sizeof(buf));
    v139 = v75;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v181 = 136315906;
    *(_QWORD *)&v181[4] = "operator[]";
    v182 = 1024;
    v183 = 789;
    v184 = 2048;
    v185 = v139;
    v186 = 2048;
    v187 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_232:
    v179 = 0;
    v190 = 0u;
    v191 = 0u;
    v189 = 0u;
    memset(buf, 0, sizeof(buf));
    v140 = v75;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v181 = 136315906;
    *(_QWORD *)&v181[4] = "operator[]";
    v182 = 1024;
    v183 = 789;
    v184 = 2048;
    v185 = v140;
    v186 = 2048;
    v187 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_233:
    *(_QWORD *)v181 = 0;
    v190 = 0u;
    v191 = 0u;
    v189 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v180 = 136315906;
    *(_QWORD *)&v180[4] = "operator[]";
    *(_WORD *)&v180[12] = 1024;
    *(_DWORD *)&v180[14] = 789;
    *(_WORD *)&v180[18] = 2048;
    *(_QWORD *)&v180[20] = v19;
    *(_WORD *)&v180[28] = 2048;
    *(_QWORD *)&v180[30] = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v2 = v166[4];
  memset(v180, 0, 36);
  *(_QWORD *)&v180[36] = 0x7FFFFFFFLL;
  v21 = objc_msgSend(v4, "indexCount");
  v22 = (_QWORD *)(v2 + 40);
  if (v10 != 2)
  {
    re::DynamicArray<re::GeomCell4>::resize(v22, (v21 >> 2));
    if ((v21 & 0x3FFFFFFFCLL) == 0)
      goto LABEL_206;
    v13 = 0;
    v110 = 0;
    v111 = *(_OWORD *)v180;
    while (1)
    {
      if (v12 <= v110)
        goto LABEL_216;
      switch(v18)
      {
        case 32:
          v112 = *(unsigned int *)(v15 + 4 * v110);
          if (!(_QWORD)v111)
            goto LABEL_159;
          break;
        case 16:
          v112 = *(unsigned __int16 *)(v15 + 2 * v110);
          if (!(_QWORD)v111)
            goto LABEL_159;
          break;
        case 8:
          v112 = *(unsigned __int8 *)(v15 + v110);
          if (!(_QWORD)v111)
          {
LABEL_159:
            v115 = *(_QWORD *)&v180[16];
LABEL_160:
            LODWORD(v114) = 0x7FFFFFFF;
            goto LABEL_161;
          }
          break;
        default:
          goto LABEL_235;
      }
      v113 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v112 ^ (v112 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v112 ^ (v112 >> 30))) >> 27));
      v114 = *(unsigned int *)(*((_QWORD *)&v111 + 1) + 4 * ((v113 ^ (v113 >> 31)) % *(unsigned int *)&v180[24]));
      v115 = *(_QWORD *)&v180[16];
      if ((_DWORD)v114 == 0x7FFFFFFF)
        goto LABEL_160;
      while (*(_DWORD *)(*(_QWORD *)&v180[16] + 24 * v114 + 12) != v112)
      {
        v114 = *(_DWORD *)(*(_QWORD *)&v180[16] + 24 * v114 + 8) & 0x7FFFFFFF;
        if (v114 == 0x7FFFFFFF)
          goto LABEL_160;
      }
LABEL_161:
      v116 = v110 | 1;
      if (v12 <= v116)
        goto LABEL_217;
      v117 = *(_DWORD *)(v115 + 24 * v114 + 16);
      if (v18 == 32)
      {
        v118 = *(unsigned int *)(v15 + 4 * v116);
        if (!(_QWORD)v111)
          goto LABEL_170;
      }
      else if (v18 == 16)
      {
        v118 = *(unsigned __int16 *)(v15 + 2 * v116);
        if (!(_QWORD)v111)
          goto LABEL_170;
      }
      else
      {
        v118 = *(unsigned __int8 *)(v15 + v116);
        if (!(_QWORD)v111)
          goto LABEL_170;
      }
      v119 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v118 ^ (v118 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v118 ^ (v118 >> 30))) >> 27));
      v120 = *(unsigned int *)(*((_QWORD *)&v111 + 1) + 4 * ((v119 ^ (v119 >> 31)) % *(unsigned int *)&v180[24]));
      if ((_DWORD)v120 == 0x7FFFFFFF)
      {
LABEL_170:
        LODWORD(v120) = 0x7FFFFFFF;
        goto LABEL_171;
      }
      v132 = *(unsigned int *)(v115 + 24 * v120 + 12);
      for (j = v120; v132 != v118; LODWORD(v120) = j)
      {
        j = *(_DWORD *)(v115 + 24 * j + 8) & 0x7FFFFFFF;
        LODWORD(v120) = 0x7FFFFFFF;
        if (j == 0x7FFFFFFF)
          break;
        v132 = *(unsigned int *)(v115 + 24 * j + 12);
      }
LABEL_171:
      v121 = v110 | 2;
      if (v12 <= v121)
        goto LABEL_218;
      v122 = *(_DWORD *)(v115 + 24 * v120 + 16);
      if (v18 == 32)
      {
        v123 = *(unsigned int *)(v15 + 4 * v121);
        if (!(_QWORD)v111)
          goto LABEL_180;
      }
      else if (v18 == 16)
      {
        v123 = *(unsigned __int16 *)(v15 + 2 * v121);
        if (!(_QWORD)v111)
          goto LABEL_180;
      }
      else
      {
        v123 = *(unsigned __int8 *)(v15 + v121);
        if (!(_QWORD)v111)
          goto LABEL_180;
      }
      v124 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v123 ^ (v123 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v123 ^ (v123 >> 30))) >> 27));
      v125 = *(unsigned int *)(*((_QWORD *)&v111 + 1) + 4 * ((v124 ^ (v124 >> 31)) % *(unsigned int *)&v180[24]));
      if ((_DWORD)v125 == 0x7FFFFFFF)
      {
LABEL_180:
        v125 = 0x7FFFFFFFLL;
        goto LABEL_181;
      }
      v134 = *(unsigned int *)(v115 + 24 * v125 + 12);
      for (k = v125; v134 != v123; v125 = k)
      {
        k = *(_DWORD *)(v115 + 24 * k + 8) & 0x7FFFFFFF;
        v125 = 0x7FFFFFFFLL;
        if (k == 0x7FFFFFFF)
          break;
        v134 = *(unsigned int *)(v115 + 24 * k + 12);
      }
LABEL_181:
      v126 = v110 | 3;
      if (v12 <= v126)
        goto LABEL_219;
      v127 = *(_DWORD *)(v115 + 24 * v125 + 16);
      if (v18 == 32)
      {
        v128 = *(unsigned int *)(v15 + 4 * v126);
        if (!(_QWORD)v111)
          goto LABEL_190;
      }
      else if (v18 == 16)
      {
        v128 = *(unsigned __int16 *)(v15 + 2 * v126);
        if (!(_QWORD)v111)
          goto LABEL_190;
      }
      else
      {
        v128 = *(unsigned __int8 *)(v15 + v126);
        if (!(_QWORD)v111)
          goto LABEL_190;
      }
      v129 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v128 ^ (v128 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v128 ^ (v128 >> 30))) >> 27));
      v130 = *(unsigned int *)(*((_QWORD *)&v111 + 1) + 4 * ((v129 ^ (v129 >> 31)) % *(unsigned int *)&v180[24]));
      if ((_DWORD)v130 != 0x7FFFFFFF)
      {
        v136 = *(unsigned int *)(v115 + 24 * v130 + 12);
        for (m = v130; v136 != v128; LODWORD(v130) = m)
        {
          m = *(_DWORD *)(v115 + 24 * m + 8) & 0x7FFFFFFF;
          LODWORD(v130) = 0x7FFFFFFF;
          if (m == 0x7FFFFFFF)
            break;
          v136 = *(unsigned int *)(v115 + 24 * m + 12);
        }
        goto LABEL_191;
      }
LABEL_190:
      LODWORD(v130) = 0x7FFFFFFF;
LABEL_191:
      v14 = *(void **)(v2 + 56);
      if ((unint64_t)v14 <= v13)
        goto LABEL_220;
      v131 = *(_DWORD *)(v115 + 24 * v130 + 16);
      v109 = (_DWORD *)(*(_QWORD *)(v2 + 72) + 16 * v13);
      *v109 = v117;
      v109[1] = v122;
      v109[2] = v127;
      v109[3] = v131;
      ++v13;
      v110 += 4;
      if (v13 == (v21 >> 2))
        goto LABEL_206;
    }
  }
  re::DynamicArray<re::GeomCell4>::resize(v22, (v21 / 3));
  if (!(v21 / 3))
  {
LABEL_206:
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v180);
    goto LABEL_211;
  }
  v13 = 0;
  v24 = 0;
  v25 = *(_OWORD *)v180;
  while (1)
  {
    if (v12 <= v24)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)v23, "assertion failure: '%s' (%s:line %i) ", "index < m_max_index", "operator[]", 79);
      _os_crash();
      __break(1u);
LABEL_213:
      re::internal::assertLog((re::internal *)4, v30, "assertion failure: '%s' (%s:line %i) ", "index < m_max_index", "operator[]", 79);
      _os_crash();
      __break(1u);
LABEL_214:
      re::internal::assertLog((re::internal *)4, v34, "assertion failure: '%s' (%s:line %i) ", "index < m_max_index", "operator[]", 79);
      _os_crash();
      __break(1u);
LABEL_215:
      v179 = 0;
      v190 = 0u;
      v191 = 0u;
      v189 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v181 = 136315906;
      *(_QWORD *)&v181[4] = "operator[]";
      v182 = 1024;
      v183 = 789;
      v184 = 2048;
      v185 = v13;
      v186 = 2048;
      v187 = (unint64_t)v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_216:
      re::internal::assertLog((re::internal *)4, (uint64_t)v109, "assertion failure: '%s' (%s:line %i) ", "index < m_max_index", "operator[]", 79);
      _os_crash();
      __break(1u);
LABEL_217:
      re::internal::assertLog((re::internal *)4, (uint64_t)v109, "assertion failure: '%s' (%s:line %i) ", "index < m_max_index", "operator[]", 79);
      _os_crash();
      __break(1u);
LABEL_218:
      re::internal::assertLog((re::internal *)4, v121, "assertion failure: '%s' (%s:line %i) ", "index < m_max_index", "operator[]", 79);
      _os_crash();
      __break(1u);
LABEL_219:
      re::internal::assertLog((re::internal *)4, v125, "assertion failure: '%s' (%s:line %i) ", "index < m_max_index", "operator[]", 79);
      _os_crash();
      __break(1u);
LABEL_220:
      v179 = 0;
      v190 = 0u;
      v191 = 0u;
      v189 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v181 = 136315906;
      *(_QWORD *)&v181[4] = "operator[]";
      v182 = 1024;
      v183 = 789;
      v184 = 2048;
      v185 = v13;
      v186 = 2048;
      v187 = (unint64_t)v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_221:
      re::internal::assertLog((re::internal *)4, v62, "assertion failure: '%s' (%s:line %i) ", "index < m_max_index", "operator[]", 79);
      _os_crash();
      __break(1u);
LABEL_222:
      re::internal::assertLog((re::internal *)4, v62, "assertion failure: '%s' (%s:line %i) ", "index < m_max_index", "operator[]", 79);
      _os_crash();
      __break(1u);
LABEL_223:
      v179 = 0;
      v190 = 0u;
      v191 = 0u;
      v189 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v181 = 136315906;
      *(_QWORD *)&v181[4] = "operator[]";
      v182 = 1024;
      v183 = 789;
      v184 = 2048;
      v185 = v13;
      v186 = 2048;
      v187 = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_224:
      re::internal::assertLog((re::internal *)4, v62, "assertion failure: '%s' (%s:line %i) ", "index < m_max_index", "operator[]", 79);
      _os_crash();
      __break(1u);
LABEL_225:
      re::internal::assertLog((re::internal *)4, v62, "assertion failure: '%s' (%s:line %i) ", "index < m_max_index", "operator[]", 79);
      _os_crash();
      __break(1u);
LABEL_226:
      re::internal::assertLog((re::internal *)4, v62, "assertion failure: '%s' (%s:line %i) ", "index < m_max_index", "operator[]", 79);
      _os_crash();
      __break(1u);
LABEL_227:
      re::internal::assertLog((re::internal *)4, v62, "assertion failure: '%s' (%s:line %i) ", "index < m_max_index", "operator[]", 79);
      _os_crash();
      __break(1u);
      goto LABEL_228;
    }
    if (v18 == 32)
    {
      v26 = *(unsigned int *)(v15 + 4 * v24);
      if (!(_QWORD)v25)
        goto LABEL_28;
      goto LABEL_23;
    }
    if (v18 != 16)
      break;
    v26 = *(unsigned __int16 *)(v15 + 2 * v24);
    if (!(_QWORD)v25)
    {
LABEL_28:
      v29 = *(_QWORD *)&v180[16];
LABEL_29:
      LODWORD(v28) = 0x7FFFFFFF;
      goto LABEL_30;
    }
LABEL_23:
    v27 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v26 ^ (v26 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v26 ^ (v26 >> 30))) >> 27));
    v28 = *(unsigned int *)(*((_QWORD *)&v25 + 1) + 4 * ((v27 ^ (v27 >> 31)) % *(unsigned int *)&v180[24]));
    v29 = *(_QWORD *)&v180[16];
    if ((_DWORD)v28 == 0x7FFFFFFF)
      goto LABEL_29;
    while (*(_DWORD *)(*(_QWORD *)&v180[16] + 24 * v28 + 12) != v26)
    {
      v28 = *(_DWORD *)(*(_QWORD *)&v180[16] + 24 * v28 + 8) & 0x7FFFFFFF;
      if (v28 == 0x7FFFFFFF)
        goto LABEL_29;
    }
LABEL_30:
    v30 = v24 + 1;
    if (v12 <= v30)
      goto LABEL_213;
    v31 = *(_DWORD *)(v29 + 24 * v28 + 16);
    if (v18 == 32)
    {
      v32 = *(unsigned int *)(v15 + 4 * v30);
      if (!(_QWORD)v25)
        goto LABEL_39;
    }
    else if (v18 == 16)
    {
      v32 = *(unsigned __int16 *)(v15 + 2 * v30);
      if (!(_QWORD)v25)
        goto LABEL_39;
    }
    else
    {
      v32 = *(unsigned __int8 *)(v15 + v30);
      if (!(_QWORD)v25)
        goto LABEL_39;
    }
    v33 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v32 ^ (v32 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v32 ^ (v32 >> 30))) >> 27));
    v34 = *(unsigned int *)(*((_QWORD *)&v25 + 1) + 4 * ((v33 ^ (v33 >> 31)) % *(unsigned int *)&v180[24]));
    if ((_DWORD)v34 == 0x7FFFFFFF)
    {
LABEL_39:
      v34 = 0x7FFFFFFFLL;
      goto LABEL_40;
    }
    v41 = *(unsigned int *)(v29 + 24 * v34 + 12);
    for (n = v34; v41 != v32; v34 = n)
    {
      n = *(_DWORD *)(v29 + 24 * n + 8) & 0x7FFFFFFF;
      v34 = 0x7FFFFFFFLL;
      if (n == 0x7FFFFFFF)
        break;
      v41 = *(unsigned int *)(v29 + 24 * n + 12);
    }
LABEL_40:
    v35 = v24 + 2;
    if (v12 <= v35)
      goto LABEL_214;
    v36 = *(_DWORD *)(v29 + 24 * v34 + 16);
    if (v18 == 32)
    {
      v37 = *(unsigned int *)(v15 + 4 * v35);
      if (!(_QWORD)v25)
        goto LABEL_49;
    }
    else if (v18 == 16)
    {
      v37 = *(unsigned __int16 *)(v15 + 2 * v35);
      if (!(_QWORD)v25)
        goto LABEL_49;
    }
    else
    {
      v37 = *(unsigned __int8 *)(v15 + v35);
      if (!(_QWORD)v25)
        goto LABEL_49;
    }
    v38 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v37 ^ (v37 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v37 ^ (v37 >> 30))) >> 27));
    v39 = *(unsigned int *)(*((_QWORD *)&v25 + 1) + 4 * ((v38 ^ (v38 >> 31)) % *(unsigned int *)&v180[24]));
    if ((_DWORD)v39 != 0x7FFFFFFF)
    {
      v43 = *(unsigned int *)(v29 + 24 * v39 + 12);
      for (ii = v39; v43 != v37; LODWORD(v39) = ii)
      {
        ii = *(_DWORD *)(v29 + 24 * ii + 8) & 0x7FFFFFFF;
        LODWORD(v39) = 0x7FFFFFFF;
        if (ii == 0x7FFFFFFF)
          break;
        v43 = *(unsigned int *)(v29 + 24 * ii + 12);
      }
      goto LABEL_50;
    }
LABEL_49:
    LODWORD(v39) = 0x7FFFFFFF;
LABEL_50:
    v14 = *(void **)(v2 + 56);
    if ((unint64_t)v14 <= v13)
      goto LABEL_215;
    v40 = *(_DWORD *)(v29 + 24 * v39 + 16);
    v23 = (_DWORD *)(*(_QWORD *)(v2 + 72) + 16 * v13);
    *v23 = v31;
    v23[1] = v36;
    v23[2] = v40;
    v23[3] = -1;
    ++v13;
    v24 += 3;
    if (v13 == (v21 / 3))
      goto LABEL_206;
  }
  if (v18 == 8)
  {
    v26 = *(unsigned __int8 *)(v15 + v24);
    if (!(_QWORD)v25)
      goto LABEL_28;
    goto LABEL_23;
  }
  re::internal::assertLog((re::internal *)4, (uint64_t)v23, "assertion failure: '%s' (%s:line %i) Unsupported or invalid MDLIndexBitDepth detected.", "!\"Unreachable code\"", "operator[]", 93);
  _os_crash();
  __break(1u);
  re::internal::assertLog((re::internal *)4, v141, "assertion failure: '%s' (%s:line %i) Unsupported or invalid MDLIndexBitDepth detected.", "!\"Unreachable code\"", "operator[]", 93);
  _os_crash();
  __break(1u);
  re::internal::assertLog((re::internal *)4, v142, "assertion failure: '%s' (%s:line %i) Unsupported or invalid MDLIndexBitDepth detected.", "!\"Unreachable code\"", "operator[]", 93);
  _os_crash();
  __break(1u);
LABEL_235:
  re::internal::assertLog((re::internal *)4, (uint64_t)v109, "assertion failure: '%s' (%s:line %i) Unsupported or invalid MDLIndexBitDepth detected.", "!\"Unreachable code\"", "operator[]", 93);
  _os_crash();
  __break(1u);
  re::internal::assertLog((re::internal *)4, v143, "assertion failure: '%s' (%s:line %i) Unsupported or invalid MDLIndexBitDepth detected.", "!\"Unreachable code\"", "operator[]", 93);
  _os_crash();
  __break(1u);
  re::internal::assertLog((re::internal *)4, v144, "assertion failure: '%s' (%s:line %i) Unsupported or invalid MDLIndexBitDepth detected.", "!\"Unreachable code\"", "operator[]", 93);
  _os_crash();
  __break(1u);
  re::internal::assertLog((re::internal *)4, v145, "assertion failure: '%s' (%s:line %i) Unsupported or invalid MDLIndexBitDepth detected.", "!\"Unreachable code\"", "operator[]", 93);
  _os_crash();
  __break(1u);
  re::internal::assertLog((re::internal *)4, v146, "assertion failure: '%s' (%s:line %i) Unsupported or invalid MDLIndexBitDepth detected.", "!\"Unreachable code\"", "operator[]", 93);
  _os_crash();
  __break(1u);
  re::internal::assertLog((re::internal *)4, v147, "assertion failure: '%s' (%s:line %i) Unsupported or invalid MDLIndexBitDepth detected.", "!\"Unreachable code\"", "operator[]", 93);
  _os_crash();
  __break(1u);
LABEL_236:
  re::internal::assertLog((re::internal *)4, v62, "assertion failure: '%s' (%s:line %i) Unsupported or invalid MDLIndexBitDepth detected.", "!\"Unreachable code\"", "operator[]", 93);
  _os_crash();
  __break(1u);
  re::internal::assertLog((re::internal *)4, v148, "assertion failure: '%s' (%s:line %i) Unsupported or invalid MDLIndexBitDepth detected.", "!\"Unreachable code\"", "operator[]", 93);
  _os_crash();
  __break(1u);
  re::internal::assertLog((re::internal *)4, v149, "assertion failure: '%s' (%s:line %i) Unsupported or invalid MDLIndexBitDepth detected.", "!\"Unreachable code\"", "operator[]", 93);
  _os_crash();
  __break(1u);
LABEL_237:
  re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) Unsupported or invalid MDLIndexBitDepth detected.", "!\"Unreachable code\"", "MDLIndexBuffer", 65);
  _os_crash();
  __break(1u);
LABEL_238:
  re::internal::assertLog((re::internal *)4, v20, "assertion failure: '%s' (%s:line %i) Unsupported Geometry type", "!\"Unreachable code\"", "extractMDLAttributeTopologies", 475);
  _os_crash();
  __break(1u);
  re::internal::assertLog((re::internal *)4, v150, "assertion failure: '%s' (%s:line %i) Unsupported or invalid MDLIndexBitDepth detected.", "!\"Unreachable code\"", "operator[]", 93);
  _os_crash();
  __break(1u);
}

uint64_t re::internal::`anonymous namespace'::modelGetVertexAttributeBuffer(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  void *v18;
  void *v19;
  void *v20;

  v7 = a1;
  v8 = a2;
  objc_msgSend(v7, "vertexDescriptor");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "attributeNamed:", v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    *(_DWORD *)(a4 + 32) = objc_msgSend(v10, "bufferIndex");
    objc_msgSend(v7, "vertexAttributeDataForAttributeNamed:", v8);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
    {
      if (objc_msgSend(v10, "format") == a3)
      {
        v12 = objc_msgSend(v10, "offset");
        v13 = objc_msgSend(v10, "bufferIndex");
        v14 = objc_msgSend(v11, "stride");
        if ((v12 & 3) != 0)
        {
          NSLog(CFSTR("ModelConverter: FATAL ERROR - Vertex offsets must be 4 byte aligned."));
        }
        else
        {
          v17 = v14;
          if ((v14 & 3) == 0)
          {
            objc_msgSend(v7, "vertexBuffers");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v18, "objectAtIndexedSubscript:", v13);
            v19 = (void *)objc_claimAutoreleasedReturnValue();

            *(_QWORD *)(a4 + 8) = objc_msgSend(v19, "length");
            objc_msgSend(v19, "map");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            *(_QWORD *)a4 = objc_msgSend(v20, "bytes");

            *(_QWORD *)(a4 + 16) = v12 >> 2;
            *(_QWORD *)(a4 + 24) = v17 >> 2;

            v15 = 1;
            goto LABEL_9;
          }
          NSLog(CFSTR("ModelConverter: FATAL ERROR - Vertex strides must be 4 byte aligned."));
        }
      }
      else
      {
        NSLog(CFSTR("ModelConverter: FATAL ERROR - Vertex attribute was not of the expected type."));
      }
    }
    v15 = 0;
LABEL_9:

    goto LABEL_10;
  }
  v15 = 0;
LABEL_10:

  return v15;
}

_QWORD *re::internal::`anonymous namespace'::copyVertex3FValues(_QWORD *result, uint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = *result + (result[1] & 0xFFFFFFFFFFFFFFFCLL) - 12;
    do
    {
      if (*(_QWORD *)(a2 + 16) <= v5)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_10:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v7 = *result + 4 * result[2] + 4 * result[3] * *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4 * v5);
      if (v7 <= v6)
      {
        if (v5 >= *(unsigned int *)(a3 + 8))
          goto LABEL_10;
        a4.n128_u64[0] = *(_QWORD *)v7;
        a4.n128_u32[2] = *(_DWORD *)(v7 + 8);
        *(__n128 *)(*(_QWORD *)a3 + 16 * v5) = a4;
      }
      ++v5;
    }
    while (v4 != v5);
  }
  return result;
}

void re::internal::`anonymous namespace'::addAttributeIfItExistsToGeomMesh(void *a1, void *a2, void *a3, char *a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void *v22;
  void *v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void *v55;
  id v56;
  int v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  _BYTE v66[28];
  __int16 v67;
  _BYTE v68[10];
  _BYTE v69[18];
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v13 = a1;
  v14 = a2;
  v15 = a3;
  objc_msgSend(v13, "vertexDescriptor");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "attributeNamed:", v15);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  v18 = objc_msgSend(v17, "format");
  if (v18 > 786434)
  {
    if (v18 == 786436)
    {
      v20 = 0;
      v21 = 8;
      v59 = 1;
    }
    else
    {
      if (v18 != 786435)
        goto LABEL_62;
      v59 = 0;
      v21 = 7;
      v20 = 1;
    }
LABEL_9:
    {
      v57 = v20;
      v56 = v14;
      objc_msgSend(v14, "faceIndexing");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v55 = v22;
      if (v22)
      {
        objc_msgSend(v22, "objectAtIndexedSubscript:", v64);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = objc_msgSend(v23, "unsignedIntValue");

        v25 = v24;
      }
      else
      {
        v25 = 0;
      }
      v26 = *(_QWORD *)(a6 + 16);
      if (v26 <= v25)
        goto LABEL_59;
      v27 = *(_QWORD *)(a6 + 32);
      v58 = v25;
      v26 = v27 + 80 * v25;
      if (v26 == a5
        || (v28 = *(_QWORD *)(v26 + 16), v28 == *(_QWORD *)(a5 + 16))
        && !memcmp(*(const void **)(v26 + 32), *(const void **)(a5 + 32), 4 * v28)
        && re::DynamicArray<re::GeomCell4>::operator==(v27 + 80 * v58 + 40, a5 + 40))
      {
        v29 = (uint64_t)re::GeomMesh::addAttribute(a7, a4, 1, v21);
      }
      else
      {
        *(_QWORD *)&v68[2] = 0;
        memset(v66, 0, sizeof(v66));
        re::DynamicArray<float>::resize((uint64_t)v66, *(unsigned int *)(a7 + 40));
        v30 = *(unsigned int *)(a7 + 40);
        if (*(_DWORD *)(a7 + 40))
        {
          v31 = 0;
          v32 = *(_QWORD *)&v66[16];
          v33 = *(_QWORD *)&v68[2];
          while (v32 != v31)
          {
            *(_DWORD *)(v33 + 4 * v31) = v31;
            if (v30 == ++v31)
              goto LABEL_23;
          }
          v65 = 0;
          v77 = 0u;
          v78 = 0u;
          v75 = 0u;
          v76 = 0u;
          v74 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v69 = 136315906;
          *(_QWORD *)&v69[4] = "operator[]";
          *(_WORD *)&v69[12] = 1024;
          *(_DWORD *)&v69[14] = 789;
          v70 = 2048;
          v71 = v32;
          v72 = 2048;
          v73 = v32;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_57;
        }
LABEL_23:
        v29 = re::GeomMesh::addFaceVaryingAttribute(a7, a4, v21, *(_DWORD *)(v26 + 16), (uint64_t *)(v27 + 80 * v58 + 40), (uint64_t *)v66);
        if (*(_QWORD *)v66 && *(_QWORD *)&v68[2])
          (*(void (**)(void))(**(_QWORD **)v66 + 40))();
      }
      if (v59)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29))
        {
          v34 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v29, 0);
          v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
          v36 = *(_QWORD *)(a6 + 16);
          if (v36 > v58)
          {
            if (v35)
            {
              v26 = 0;
              v37 = v60 + (v61 & 0xFFFFFFFFFFFFFFFCLL) - 16;
              v38 = *(_QWORD *)(a6 + 32) + 80 * v58;
              v39 = v63;
              v40 = v60 + 4 * v62;
              while (1)
              {
                a6 = *(_QWORD *)(v38 + 16);
                if (a6 <= v26)
                  break;
                v41 = (_OWORD *)(v40 + 4 * v39 * *(unsigned int *)(*(_QWORD *)(v38 + 32) + 4 * v26));
                if ((unint64_t)v41 <= v37)
                  *(_OWORD *)(v34 + 16 * v26) = *v41;
                if (v35 == ++v26)
                  goto LABEL_54;
              }
LABEL_57:
              *(_QWORD *)v69 = 0;
              v77 = 0u;
              v78 = 0u;
              v75 = 0u;
              v76 = 0u;
              v74 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v66 = 136315906;
              *(_QWORD *)&v66[4] = "operator[]";
              *(_WORD *)&v66[12] = 1024;
              *(_DWORD *)&v66[14] = 797;
              *(_WORD *)&v66[18] = 2048;
              *(_QWORD *)&v66[20] = v26;
              v67 = 2048;
              *(_QWORD *)v68 = a6;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_58:
              *(_QWORD *)v69 = 0;
              v77 = 0u;
              v78 = 0u;
              v75 = 0u;
              v76 = 0u;
              v74 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v66 = 136315906;
              *(_QWORD *)&v66[4] = "operator[]";
              *(_WORD *)&v66[12] = 1024;
              *(_DWORD *)&v66[14] = 797;
              *(_WORD *)&v66[18] = 2048;
              *(_QWORD *)&v66[20] = v26;
              v67 = 2048;
              *(_QWORD *)v68 = a6;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_59:
              *(_QWORD *)v69 = 0;
              v77 = 0u;
              v78 = 0u;
              v75 = 0u;
              v76 = 0u;
              v74 = 0u;
              v53 = v25;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v66 = 136315906;
              *(_QWORD *)&v66[4] = "operator[]";
              *(_WORD *)&v66[12] = 1024;
              *(_DWORD *)&v66[14] = 789;
              *(_WORD *)&v66[18] = 2048;
              *(_QWORD *)&v66[20] = v53;
              v67 = 2048;
              *(_QWORD *)v68 = v26;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_60;
            }
            goto LABEL_54;
          }
        }
        else
        {
          v36 = *(_QWORD *)(a6 + 16);
          if (v36 > v58)
          {
LABEL_54:

            v14 = v56;
            goto LABEL_55;
          }
        }
        *(_QWORD *)v69 = 0;
        v77 = 0u;
        v78 = 0u;
        v75 = 0u;
        v76 = 0u;
        v74 = 0u;
        v13 = (id)MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v66 = 136315906;
        *(_QWORD *)&v66[4] = "operator[]";
        *(_WORD *)&v66[12] = 1024;
        *(_DWORD *)&v66[14] = 789;
        *(_WORD *)&v66[18] = 2048;
        *(_QWORD *)&v66[20] = v58;
        v67 = 2048;
        *(_QWORD *)v68 = v36;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      else
      {
        if (!v57)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29))
          {
            v45 = re::internal::GeomTypedAttribute<double>::operator[](v29, 0);
            v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
            v26 = *(_QWORD *)(a6 + 16);
            if (v26 <= v58)
              goto LABEL_61;
            if (v46)
            {
              v26 = 0;
              v47 = v60 + (v61 & 0xFFFFFFFFFFFFFFFCLL) - 8;
              v48 = *(_QWORD *)(a6 + 32) + 80 * v58;
              v49 = v63;
              v50 = v60 + 4 * v62;
              while (1)
              {
                a6 = *(_QWORD *)(v48 + 16);
                if (a6 <= v26)
                  goto LABEL_58;
                v51 = (_QWORD *)(v50 + 4 * v49 * *(unsigned int *)(*(_QWORD *)(v48 + 32) + 4 * v26));
                if ((unint64_t)v51 <= v47)
                  *(_QWORD *)(v45 + 8 * v26) = *v51;
                if (v46 == ++v26)
                  goto LABEL_54;
              }
            }
          }
          else
          {
            v26 = *(_QWORD *)(a6 + 16);
            if (v26 <= v58)
              goto LABEL_61;
          }
          goto LABEL_54;
        }
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29))
        {
          v43 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v29, 0);
          v44 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
LABEL_51:
          *(_QWORD *)v69 = v43;
          *(_QWORD *)&v69[8] = v44;
          v26 = *(_QWORD *)(a6 + 16);
          v52 = v58;
          if (v26 <= v58)
          {
LABEL_60:
            v65 = 0;
            v77 = 0u;
            v78 = 0u;
            v75 = 0u;
            v76 = 0u;
            v74 = 0u;
            v54 = v52;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v66 = 136315906;
            *(_QWORD *)&v66[4] = "operator[]";
            *(_WORD *)&v66[12] = 1024;
            *(_DWORD *)&v66[14] = 789;
            *(_WORD *)&v66[18] = 2048;
            *(_QWORD *)&v66[20] = v54;
            v67 = 2048;
            *(_QWORD *)v68 = v26;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_61:
            *(_QWORD *)v69 = 0;
            v77 = 0u;
            v78 = 0u;
            v75 = 0u;
            v76 = 0u;
            v74 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v66 = 136315906;
            *(_QWORD *)&v66[4] = "operator[]";
            *(_WORD *)&v66[12] = 1024;
            *(_DWORD *)&v66[14] = 789;
            *(_WORD *)&v66[18] = 2048;
            *(_QWORD *)&v66[20] = v58;
            v67 = 2048;
            *(_QWORD *)v68 = v26;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          goto LABEL_54;
        }
      }
      v44 = 0;
      v43 = 0;
      goto LABEL_51;
    }
LABEL_55:

    return;
  }
  if (!v18)
    goto LABEL_55;
  if (v18 == 786434)
  {
    v59 = 0;
    v20 = 0;
    v21 = 6;
    goto LABEL_9;
  }
LABEL_62:
  re::internal::assertLog((re::internal *)4, v19, v18, "assertion failure: '%s' (%s:line %i) unsupported MDLVertexFormat", "!\"Unreachable code\"", "addAttributeIfItExistsToGeomMesh", 580);
  _os_crash();
  __break(1u);
}

uint64_t *re::DynamicArray<re::internal::`anonymous namespace'::MDLAttrTopologyMap>::~DynamicArray(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *a1;
  if (v2)
  {
    v3 = a1[4];
    if (v3)
    {
      v4 = a1[2];
      if (v4)
      {
        v5 = 80 * v4;
        v6 = (_QWORD *)(v3 + 40);
        do
        {
          v7 = v6 - 5;
          if (*v6)
          {
            if (v6[4])
              (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 40))(*v6);
            v6[4] = 0;
            v6[1] = 0;
            v6[2] = 0;
            *v6 = 0;
            ++*((_DWORD *)v6 + 6);
          }
          if (*v7)
          {
            if (*(v6 - 1))
              (*(void (**)(_QWORD))(*(_QWORD *)*v7 + 40))(*v7);
            *(v6 - 1) = 0;
            *(v6 - 4) = 0;
            *(v6 - 3) = 0;
            *v7 = 0;
            ++*((_DWORD *)v6 - 4);
          }
          v6 += 10;
          v5 -= 80;
        }
        while (v5);
        v2 = *a1;
        v3 = a1[4];
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, v3);
    }
    a1[4] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    ++*((_DWORD *)a1 + 6);
  }
  return a1;
}

void re::internal::attachBlendShapeDataIfItExistsToGeomMesh(re::internal *this, const MDLMesh *a2, re::GeomMesh *a3)
{
  re::internal *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  unsigned int v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  const char *v27;
  char *v28;
  re::GeomAttribute *v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  void *v35;
  unint64_t v36;
  _QWORD v37[2];
  uint64_t v38;
  char v39;
  _BYTE v40[23];
  _QWORD v41[5];
  uint64_t v42[2];
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  unint64_t v52;
  __int16 v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v4 = this;
  -[re::internal submeshes](v4, "submeshes");
  v5 = objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = (void *)v5;
    -[re::internal submeshes](v4, "submeshes");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "count");

    if (v8 == 1)
    {
      -[re::internal componentConformingToProtocol:](v4, "componentConformingToProtocol:", &unk_25584D670);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (v9)
      {
        -[re::internal submeshes](v4, "submeshes");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "objectAtIndexedSubscript:", 0);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        v45 = 0;
        v42[1] = 0;
        v43 = 0;
        v42[0] = 0;
        v44 = 0;
        v36 = v43;
        if (v43)
        {
          -[re::internal vertexDescriptor](v4, "vertexDescriptor");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "attributeNamed:", CFSTR("position"));
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v13, "bufferIndex");
          objc_msgSend(v11, "faceIndexing");
          v15 = (void *)objc_claimAutoreleasedReturnValue();

          v35 = v12;
          if (v15)
          {
            objc_msgSend(v11, "faceIndexing");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v16, "objectAtIndexedSubscript:", v14);
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            v18 = objc_msgSend(v17, "unsignedIntValue");

            v19 = v18;
          }
          else
          {
            v19 = 0;
          }
          objc_msgSend(v9, "targetShapes");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v21 = objc_msgSend(v20, "count");

          if (v21)
          {
            v22 = 0;
            do
            {
              objc_msgSend(v9, "targetShapes");
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v23, "objectAtIndexedSubscript:", v22);
              v24 = (void *)objc_claimAutoreleasedReturnValue();

              {
                objc_msgSend(v24, "name");
                v25 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                v26 = objc_msgSend(v25, "UTF8String");

                v27 = "";
                if (v26)
                  v27 = (const char *)v26;
                re::DynamicString::format((re::DynamicString *)"%s|blendTargetPosDeltas", (re::DynamicString *)&v38, v27);
                if ((v39 & 1) != 0)
                  v28 = *(char **)&v40[7];
                else
                  v28 = v40;
                v29 = re::GeomMesh::addAttribute((uint64_t)a2, v28, 1, 7);
                if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v29 + 16))(v29))
                {
                  v31 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v29, 0);
                  v32 = (*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v29 + 16))(v29);
                }
                else
                {
                  v32 = 0;
                  v31 = 0;
                }
                v37[0] = v31;
                v37[1] = v32;
                if (v36 <= v19)
                {
                  v46 = 0;
                  v58 = 0u;
                  v59 = 0u;
                  v56 = 0u;
                  v57 = 0u;
                  v55 = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  v47 = 136315906;
                  v48 = "operator[]";
                  v49 = 1024;
                  v50 = 789;
                  v51 = 2048;
                  v52 = v19;
                  v53 = 2048;
                  v54 = v36;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
                }
                if (v38 && (v39 & 1) != 0)
                  (*(void (**)(void))(*(_QWORD *)v38 + 40))();
              }

              ++v22;
              objc_msgSend(v9, "targetShapes");
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              v34 = objc_msgSend(v33, "count");

            }
            while (v34 > v22);
          }

        }

      }
    }
  }

}

void re::internal::attachNewBlendShapeDataIfItExistsToGeomMesh(re::internal *this, MDLMesh *a2, const MDLObject *a3, uint64_t a4, re::GeomMesh *a5)
{
  re::internal *v7;
  MDLMesh *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  re::internal *v13;
  id v14;
  unint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  _anonymous_namespace_ *v38;
  char *v39;
  void *v40;
  re::internal *v41;
  const MDLObject *v43;
  MDLMesh *v44;
  _QWORD v45[3];
  int v46;
  __int128 v47;
  __int128 v48;
  int v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[38];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v7 = this;
  v8 = a2;
  -[re::internal submeshes](v7, "submeshes");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = a3;
  objc_msgSend(v9, "objectAtIndexedSubscript:", a3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v44 = v8;
  -[MDLMesh children](v8, "children");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "count");

  memset(v45, 0, sizeof(v45));
  v46 = 0;
  v50 = 0;
  v47 = 0u;
  v48 = 0u;
  v49 = 0;
  v13 = v7;
  v14 = v10;
  v53 = 0;
  *(_QWORD *)&v52 = 0;
  v51 = 0uLL;
  DWORD2(v52) = 0;
  v15 = v52;
  if ((_QWORD)v52)
  {
    -[re::internal vertexDescriptor](v13, "vertexDescriptor");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "attributeNamed:", CFSTR("position"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "bufferIndex");
    objc_msgSend(v14, "faceIndexing");
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if (v19)
    {
      v20 = v14;
      objc_msgSend(v14, "faceIndexing");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "objectAtIndexedSubscript:", v18);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = objc_msgSend(v22, "unsignedIntValue");

      v24 = v23;
      if (v15 <= v23)
      {
        v54 = 0;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v56 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v55 = 136315906;
        *(_QWORD *)&v55[4] = "operator[]";
        *(_WORD *)&v55[12] = 1024;
        *(_DWORD *)&v55[14] = 789;
        *(_WORD *)&v55[18] = 2048;
        *(_QWORD *)&v55[20] = v23;
        *(_WORD *)&v55[28] = 2048;
        *(_QWORD *)&v55[30] = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v14 = v20;
    }
    else
    {
      v24 = 0;
    }
    v25 = v53 + 80 * v24;
    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)v45, v25);
    re::DynamicArray<re::GeomConnectivityManifold::HalfEdge>::operator=((uint64_t)&v47 + 8, v25 + 40);

  }
  v40 = v14;

  v41 = v13;
  if (v12)
  {
    v26 = 0;
    v27 = (void *)*MEMORY[0x24BDDE6B8];
    do
    {
      -[MDLMesh children](v44, "children");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "objectAtIndexedSubscript:", v26);
      v29 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v29, "submeshes");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "objectAtIndexedSubscript:", v43);
      v31 = (void *)objc_claimAutoreleasedReturnValue();

      *(_QWORD *)&v58 = 0;
      *(_QWORD *)&v57 = 0;
      v56 = 0uLL;
      DWORD2(v57) = 0;
      if ((_QWORD)v57)
      {
        objc_msgSend(v29, "vertexDescriptor");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "attributeNamed:", CFSTR("offsets"));
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "bufferIndex");
        objc_msgSend(v31, "faceIndexing");
        v34 = (void *)objc_claimAutoreleasedReturnValue();

        if (v34)
        {
          objc_msgSend(v31, "faceIndexing");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v35, "objectAtIndexedSubscript:", 0);
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v36, "unsignedIntValue");

        }
        objc_msgSend(v29, "name");
        v37 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v38 = (_anonymous_namespace_ *)objc_msgSend(v37, "UTF8String");
        re::DynamicString::operator+((re::DynamicString *)v55, "|blendTargetPosDeltas", (re::DynamicString *)&v51);
        if ((BYTE8(v51) & 1) != 0)
          v39 = (char *)v52;
        else
          v39 = (char *)&v51 + 9;
        if ((_QWORD)v51)
        {
          if ((BYTE8(v51) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v51 + 40))();
          v51 = 0u;
          v52 = 0u;
        }
        if (*(_QWORD *)v55)
        {
          if ((v55[8] & 1) != 0)
            (*(void (**)(void))(**(_QWORD **)v55 + 40))();
          memset(v55, 0, 32);
        }

      }

      ++v26;
    }
    while (v12 != v26);
  }
  if (*((_QWORD *)&v47 + 1))
  {
    if (v50)
      (*(void (**)(void))(**((_QWORD **)&v47 + 1) + 40))();
    v50 = 0;
    v48 = 0uLL;
    *((_QWORD *)&v47 + 1) = 0;
    ++v49;
  }
  if (v45[0] && (_QWORD)v47)
    (*(void (**)(void))(*(_QWORD *)v45[0] + 40))();

}

void re::internal::attachSkinningDataToMesh(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 *v9;
  id v10;
  unint64_t v11;
  re::GeomAttribute *v12;
  re::GeomAttribute *v13;
  _OWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  re::GeomAttribute *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  void *v45;
  void *v46;
  re::GeomAttribute *v47;
  _BYTE v48[28];
  __int16 v49;
  _BYTE v50[10];
  _BYTE v51[12];
  __int16 v52;
  int v53;
  __int16 v54;
  unint64_t v55;
  __int16 v56;
  unint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;

  v9 = &v58;
  v63 = *MEMORY[0x24BDAC8D0];
  v10 = a1;
  v11 = a2;
  v12 = re::GeomMesh::addAttribute(a6, "skeletonPath", 0, 1);
  *(_WORD *)re::internal::GeomTypedAttribute<short>::operator[]((uint64_t)v12, 0) = 0;
  v13 = re::GeomMesh::addAttribute(a6, "skinnedAnimationGeometryBindTransform", 4, 8);
  (*(void (**)(re::GeomAttribute *, uint64_t))(*(_QWORD *)v13 + 24))(v13, 4);
  if (!(*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v13 + 16))(v13)
    || (v14 = (_OWORD *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v13, 0),
        (v15 = (*(uint64_t (**)(re::GeomAttribute *))(*(_QWORD *)v13 + 16))(v13)) == 0))
  {
LABEL_64:
    *(_QWORD *)v51 = 0;
    v9[3] = 0u;
    v9[4] = 0u;
    v9[2] = 0u;
    v58 = 0u;
    v59 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v48 = 136315906;
    *(_QWORD *)&v48[4] = "operator[]";
    *(_WORD *)&v48[12] = 1024;
    *(_DWORD *)&v48[14] = 609;
    *(_WORD *)&v48[18] = 2048;
    *(_QWORD *)&v48[20] = 0;
    v49 = 2048;
    *(_QWORD *)v50 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *v14 = *(_OWORD *)a5;
  if (v15 == 1)
    goto LABEL_60;
  v14[1] = *(_OWORD *)(a5 + 16);
  if (v15 <= 2)
  {
LABEL_61:
    *(_QWORD *)v51 = 0;
    v9[3] = 0u;
    v9[4] = 0u;
    v9[2] = 0u;
    v58 = 0u;
    v59 = 0u;
    v9 = (__int128 *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v48 = 136315906;
    *(_QWORD *)&v48[4] = "operator[]";
    *(_WORD *)&v48[12] = 1024;
    *(_DWORD *)&v48[14] = 609;
    *(_WORD *)&v48[18] = 2048;
    *(_QWORD *)&v48[20] = 2;
    v49 = 2048;
    *(_QWORD *)v50 = 2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_62;
  }
  v14[2] = *(_OWORD *)(a5 + 32);
  if (v15 == 3)
  {
LABEL_62:
    *(_QWORD *)v51 = 0;
    v9[3] = 0u;
    v9[4] = 0u;
    v9[2] = 0u;
    v58 = 0u;
    v59 = 0u;
    v9 = (__int128 *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v48 = 136315906;
    *(_QWORD *)&v48[4] = "operator[]";
    *(_WORD *)&v48[12] = 1024;
    *(_DWORD *)&v48[14] = 609;
    *(_WORD *)&v48[18] = 2048;
    *(_QWORD *)&v48[20] = 3;
    v49 = 2048;
    *(_QWORD *)v50 = 3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_63;
  }
  v14[3] = *(_OWORD *)(a5 + 48);
  v16 = *(unsigned int *)(a6 + 16);
  *(_QWORD *)&v50[2] = 0;
  memset(v48, 0, sizeof(v48));
  if (!*(_QWORD *)&v48[16])
  {
LABEL_63:
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) ", "topologies.size() > 0", "attachSkinningDataToMesh", 971, v45, v46);
    _os_crash();
    __break(1u);
    goto LABEL_64;
  }
  v45 = (void *)v11;
  v46 = v10;
  v18 = (unint64_t)re::GeomMesh::addAttribute(a6, "skinnedAnimationWeights", 4, 4);
  v47 = re::GeomMesh::addAttribute(a6, "skinnedAnimationJointIndices", 4, 2);
  v19 = re::GeomMesh::addAttribute(a6, "skinnedAnimationInfluenceEndIndices", 4, 2);
  (*(void (**)(re::GeomAttribute *, uint64_t))(*(_QWORD *)v19 + 24))(v19, v16);
  v20 = *(_QWORD *)&v50[2];
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v19 + 16))(v19))
  {
    v21 = re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v19, 0);
    v22 = (*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v19 + 16))(v19);
    if ((_DWORD)v16)
      goto LABEL_9;
  }
  else
  {
    v22 = 0;
    v21 = 0;
    if ((_DWORD)v16)
    {
LABEL_9:
      v23 = 0;
      LODWORD(v24) = 0;
      v25 = *(_QWORD *)(v20 + 16);
      while (v25 != v23)
      {
        v11 = *(unsigned int *)(*(_QWORD *)(v20 + 32) + 4 * v23);
        if ((_DWORD)v11)
        {
          v10 = *(id *)(a5 + 160);
          if ((unint64_t)v10 <= v11)
            goto LABEL_56;
          v26 = *(_DWORD *)(*(_QWORD *)(a5 + 168) + 4 * v11)
              - *(_DWORD *)(*(_QWORD *)(a5 + 168) + 4 * (v11 - 1));
        }
        else
        {
          if (!*(_QWORD *)(a5 + 160))
            goto LABEL_59;
          v26 = **(_DWORD **)(a5 + 168);
        }
        if (v22 == v23)
          goto LABEL_55;
        v24 = (v26 + v24);
        *(_DWORD *)(v21 + 4 * v23++) = v24;
        if (v16 == v23)
          goto LABEL_21;
      }
      goto LABEL_54;
    }
  }
  v24 = 0;
LABEL_21:
  v11 = (unint64_t)v47;
  (*(void (**)(re::GeomAttribute *, uint64_t))(*(_QWORD *)v47 + 24))(v47, v24);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v18 + 24))(v18, v24);
  if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v18 + 16))(v18))
  {
    v21 = re::internal::GeomTypedAttribute<float>::operator[](v18, 0);
    v27 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v18 + 16))(v18);
  }
  else
  {
    v27 = 0;
    v21 = 0;
  }
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v47 + 16))(v47))
  {
    v18 = re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v47, 0);
    v28 = (*(uint64_t (**)(re::GeomAttribute *))(*(_QWORD *)v47 + 16))(v47);
    v29 = v18;
    v10 = (id)v28;
  }
  else
  {
    v10 = 0;
    v29 = 0;
  }
  v30 = v21;
  if ((_DWORD)v16)
  {
    v31 = v27;
    v32 = 0;
    v33 = 0;
    v22 = *(_QWORD *)(v20 + 16);
    while (1)
    {
      if (v32 == v22)
        goto LABEL_57;
      v11 = *(unsigned int *)(*(_QWORD *)(v20 + 32) + 4 * v32);
      v21 = *(_QWORD *)(a5 + 160);
      if (v21 <= v11)
        goto LABEL_58;
      v34 = *(_QWORD *)(a5 + 168);
      v35 = (_DWORD)v11 ? *(_DWORD *)(v34 + 4 * (v11 - 1)) : 0;
      v36 = *(_DWORD *)(v34 + 4 * v11);
      v37 = v36 - v35;
      if (v36 != v35)
        break;
LABEL_48:
      if (++v32 == v16)
        goto LABEL_49;
    }
    v38 = 0;
    v39 = *(_QWORD *)(a5 + 112);
    v40 = v33;
    if (v33 <= v31)
      v21 = v31;
    else
      v21 = v33;
    v41 = v29 + 4 * v33;
    if (v33 <= v10)
      v42 = v10;
    else
      v42 = v33;
    v43 = v30 + 4 * v33;
    while (1)
    {
      v11 = (v35 + v38);
      if (v39 <= v11)
        break;
      if (!(v40 - v21 + v38))
        goto LABEL_51;
      *(_DWORD *)(v43 + 4 * v38) = *(_DWORD *)(*(_QWORD *)(a5 + 120) + 4 * v11);
      v18 = *(_QWORD *)(a5 + 136);
      if (v18 <= v11)
        goto LABEL_52;
      if (!(v40 - v42 + v38))
        goto LABEL_53;
      *(_DWORD *)(v41 + 4 * v38++) = *(_DWORD *)(*(_QWORD *)(a5 + 144) + 4 * v11);
      if (v37 == (_DWORD)v38)
      {
        v33 = v40 + v38;
        goto LABEL_48;
      }
    }
    v61 = 0u;
    v62 = 0u;
    v60 = 0u;
    v58 = 0u;
    v59 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v51 = 136315906;
    *(_QWORD *)&v51[4] = "operator[]";
    v52 = 1024;
    v53 = 476;
    v54 = 2048;
    v55 = v11;
    v56 = 2048;
    v57 = v39;
    _os_log_send_and_compose_impl();
    v31 = _os_crash_msg();
    __break(1u);
LABEL_51:
    v61 = 0u;
    v62 = 0u;
    v60 = 0u;
    v58 = 0u;
    v59 = 0u;
    v44 = v31;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v51 = 136315906;
    *(_QWORD *)&v51[4] = "operator[]";
    v52 = 1024;
    v53 = 609;
    v54 = 2048;
    v55 = v21;
    v56 = 2048;
    v57 = v44;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_52:
    v61 = 0u;
    v62 = 0u;
    v60 = 0u;
    v58 = 0u;
    v59 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v51 = 136315906;
    *(_QWORD *)&v51[4] = "operator[]";
    v52 = 1024;
    v53 = 476;
    v54 = 2048;
    v55 = v11;
    v56 = 2048;
    v57 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_53:
    v61 = 0u;
    v62 = 0u;
    v60 = 0u;
    v58 = 0u;
    v59 = 0u;
    v25 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v51 = 136315906;
    *(_QWORD *)&v51[4] = "operator[]";
    v52 = 1024;
    v53 = 609;
    v54 = 2048;
    v55 = v42;
    v56 = 2048;
    v57 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_54:
    v61 = 0u;
    v62 = 0u;
    v60 = 0u;
    v58 = 0u;
    v59 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v51 = 136315906;
    *(_QWORD *)&v51[4] = "operator[]";
    v52 = 1024;
    v53 = 789;
    v54 = 2048;
    v55 = v25;
    v56 = 2048;
    v57 = v25;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_55:
    v61 = 0u;
    v62 = 0u;
    v60 = 0u;
    v58 = 0u;
    v59 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v51 = 136315906;
    *(_QWORD *)&v51[4] = "operator[]";
    v52 = 1024;
    v53 = 609;
    v54 = 2048;
    v55 = v22;
    v56 = 2048;
    v57 = v22;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_56:
    v61 = 0u;
    v62 = 0u;
    v60 = 0u;
    v58 = 0u;
    v59 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v51 = 136315906;
    *(_QWORD *)&v51[4] = "operator[]";
    v52 = 1024;
    v53 = 476;
    v54 = 2048;
    v55 = v11;
    v56 = 2048;
    v57 = (unint64_t)v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_57:
    v61 = 0u;
    v62 = 0u;
    v60 = 0u;
    v58 = 0u;
    v59 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v51 = 136315906;
    *(_QWORD *)&v51[4] = "operator[]";
    v52 = 1024;
    v53 = 789;
    v54 = 2048;
    v55 = v22;
    v56 = 2048;
    v57 = v22;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_58:
    v61 = 0u;
    v62 = 0u;
    v60 = 0u;
    v58 = 0u;
    v59 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v51 = 136315906;
    *(_QWORD *)&v51[4] = "operator[]";
    v52 = 1024;
    v53 = 476;
    v54 = 2048;
    v55 = v11;
    v56 = 2048;
    v57 = v21;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_59:
    v61 = 0u;
    v62 = 0u;
    v60 = 0u;
    v58 = 0u;
    v59 = 0u;
    v9 = (__int128 *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v51 = 136315906;
    *(_QWORD *)&v51[4] = "operator[]";
    v52 = 1024;
    v53 = 476;
    v54 = 2048;
    v55 = 0;
    v56 = 2048;
    v57 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_60:
    *(_QWORD *)v51 = 0;
    v9[3] = 0u;
    v9[4] = 0u;
    v9[2] = 0u;
    v58 = 0u;
    v59 = 0u;
    v9 = (__int128 *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v48 = 136315906;
    *(_QWORD *)&v48[4] = "operator[]";
    *(_WORD *)&v48[12] = 1024;
    *(_DWORD *)&v48[14] = 609;
    *(_WORD *)&v48[18] = 2048;
    *(_QWORD *)&v48[20] = 1;
    v49 = 2048;
    *(_QWORD *)v50 = 1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_61;
  }
LABEL_49:

}

void re::internal::attachOpenSubdivDataToMesh(re::internal *this, unint64_t a2, MDLSubmesh *a3, re::GeomMesh *a4)
{
  re::internal *v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  re::GeomAttribute *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t isa_low;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  MDLSubmesh *v27;
  uint64_t v28;
  re::GeomAttribute *v29;
  re::GeomAttribute *v30;
  re::internal *v31;
  uint64_t v32;
  re::internal *v33;
  unsigned int v34;
  unint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  MDLSubmesh *v41;
  uint64_t v42;
  re::GeomAttribute *v43;
  re::GeomAttribute *v44;
  MDLMesh *v45;
  re::internal *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  MDLSubmesh *v52;
  void *v53;
  MDLMesh *v54;
  re::internal *v55;
  void *v56;
  void *v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61[2];
  unint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[28];
  __int16 v67;
  _BYTE v68[10];
  _BYTE v69[12];
  __int16 v70;
  int v71;
  __int16 v72;
  unint64_t v73;
  __int16 v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v6 = this;
  v7 = (unint64_t)(id)a2;
  if (-[re::internal subdivisionScheme](v6, "subdivisionScheme") == 1)
  {
    v64 = 0;
    v61[1] = 0;
    v62 = 0;
    v61[0] = 0;
    v63 = 0;
    v8 = v62;
    if (v62)
    {
      -[re::internal vertexDescriptor](v6, "vertexDescriptor");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "attributeNamed:", CFSTR("position"));
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend((id)v10, "bufferIndex");
      if (v8 <= v11)
        goto LABEL_57;
      v12 = v64;
      objc_msgSend((id)v7, "topology");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = re::GeomMesh::addAttribute((uint64_t)a3, "osdSubdivisionScheme", 0, 1);
      if (v14)
        *(_WORD *)re::internal::GeomTypedAttribute<short>::operator[]((uint64_t)v14, 0) = 1;
      if (v13)
      {
        v15 = objc_msgSend(v13, "edgeCreaseCount");
        v16 = objc_msgSend(v13, "vertexCreaseCount");
        *(_QWORD *)&v68[2] = 0;
        memset(v66, 0, sizeof(v66));
        if (v16 | v15)
        {
          v60 = v16;
          re::DynamicArray<unsigned int>::resize(v66, -[re::internal vertexCount](v6, "vertexCount"), &re::kInvalidMeshIndex);
          isa_low = LODWORD(a3[2].super.isa);
          if ((_DWORD)isa_low)
          {
            v18 = 0;
            v19 = v12 + 80 * v11;
            v11 = *(_QWORD *)(v19 + 16);
            v8 = *(_QWORD *)&v66[16];
            v20 = *(_QWORD *)&v68[2];
            while (v11 != v18)
            {
              a2 = *(unsigned int *)(*(_QWORD *)(v19 + 32) + 4 * v18);
              if (v8 <= a2)
                goto LABEL_48;
              *(_DWORD *)(v20 + 4 * a2) = v18++;
              if (isa_low == v18)
                goto LABEL_13;
            }
            v65 = 0;
            v79 = 0u;
            v80 = 0u;
            v77 = 0u;
            v78 = 0u;
            v76 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v69 = 136315906;
            *(_QWORD *)&v69[4] = "operator[]";
            v70 = 1024;
            v71 = 797;
            v72 = 2048;
            v73 = v11;
            v74 = 2048;
            v75 = v11;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_48:
            v65 = 0;
            v79 = 0u;
            v80 = 0u;
            v77 = 0u;
            v78 = 0u;
            v76 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v69 = 136315906;
            *(_QWORD *)&v69[4] = "operator[]";
            v70 = 1024;
            v71 = 789;
            v72 = 2048;
            v73 = a2;
            v74 = 2048;
            v75 = v8;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_49:
            v65 = 0;
            v79 = 0u;
            v80 = 0u;
            v77 = 0u;
            v78 = 0u;
            v76 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v69 = 136315906;
            *(_QWORD *)&v69[4] = "operator[]";
            v70 = 1024;
            v71 = 789;
            v72 = 2048;
            v73 = a2;
            v74 = 2048;
            v75 = v10;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_50:
            v65 = 0;
            v79 = 0u;
            v80 = 0u;
            v77 = 0u;
            v78 = 0u;
            v76 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v69 = 136315906;
            *(_QWORD *)&v69[4] = "operator[]";
            v70 = 1024;
            v71 = 609;
            v72 = 2048;
            v73 = v7;
            v74 = 2048;
            v75 = v9;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_51:
            v65 = 0;
            v79 = 0u;
            v80 = 0u;
            v77 = 0u;
            v78 = 0u;
            v76 = 0u;
            v35 = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v69 = 136315906;
            *(_QWORD *)&v69[4] = "operator[]";
            v70 = 1024;
            v71 = 789;
            v72 = 2048;
            v73 = a2;
            v74 = 2048;
            v75 = v10;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_52:
            v65 = 0;
            v79 = 0u;
            v80 = 0u;
            v77 = 0u;
            v78 = 0u;
            v76 = 0u;
            a2 = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v69 = 136315906;
            *(_QWORD *)&v69[4] = "operator[]";
            v70 = 1024;
            v71 = 609;
            v72 = 2048;
            v73 = v35;
            v74 = 2048;
            v75 = v9;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_53:
            v65 = 0;
            v79 = 0u;
            v80 = 0u;
            v77 = 0u;
            v78 = 0u;
            v76 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v69 = 136315906;
            *(_QWORD *)&v69[4] = "operator[]";
            v70 = 1024;
            v71 = 609;
            v72 = 2048;
            v73 = (unint64_t)v6;
            v74 = 2048;
            v75 = (unint64_t)v6;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_54:
            v65 = 0;
            v79 = 0u;
            v80 = 0u;
            v77 = 0u;
            v78 = 0u;
            v76 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v69 = 136315906;
            *(_QWORD *)&v69[4] = "operator[]";
            v70 = 1024;
            v71 = 789;
            v72 = 2048;
            v73 = a2;
            v74 = 2048;
            v75 = (unint64_t)v6;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_55:
            v65 = 0;
            v79 = 0u;
            v80 = 0u;
            v77 = 0u;
            v78 = 0u;
            v76 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v69 = 136315906;
            *(_QWORD *)&v69[4] = "operator[]";
            v70 = 1024;
            v71 = 609;
            v72 = 2048;
            v73 = v10;
            v74 = 2048;
            v75 = v10;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_56:
            v65 = 0;
            v79 = 0u;
            v80 = 0u;
            v77 = 0u;
            v78 = 0u;
            v76 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v69 = 136315906;
            *(_QWORD *)&v69[4] = "operator[]";
            v70 = 1024;
            v71 = 609;
            v72 = 2048;
            v73 = v8;
            v74 = 2048;
            v75 = v8;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_57:
            *(_QWORD *)v69 = 0;
            v79 = 0u;
            v80 = 0u;
            v77 = 0u;
            v78 = 0u;
            v76 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v66 = 136315906;
            *(_QWORD *)&v66[4] = "operator[]";
            *(_WORD *)&v66[12] = 1024;
            *(_DWORD *)&v66[14] = 789;
            *(_WORD *)&v66[18] = 2048;
            *(_QWORD *)&v66[20] = v11;
            v67 = 2048;
            *(_QWORD *)v68 = v8;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
LABEL_13:
          v58 = v10;
          v59 = v9;
          v57 = v13;
          if ((_DWORD)v15)
          {
            objc_msgSend(v13, "edgeCreases");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "edgeCreaseIndices");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            v51 = v21;
            objc_msgSend(v21, "map");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            v24 = objc_msgSend(v23, "bytes");

            v50 = v22;
            objc_msgSend(v22, "map");
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            v26 = v15;
            v27 = a3;
            v28 = objc_msgSend(v25, "bytes");

            v29 = re::GeomMesh::addAttribute((uint64_t)v27, "osdEdgeCreaseIndices", 4, 3);
            v52 = v27;
            v30 = re::GeomMesh::addAttribute((uint64_t)v27, "osdEdgeCreaseWeights", 4, 4);
            (*(void (**)(re::GeomAttribute *, _QWORD))(*(_QWORD *)v29 + 24))(v29, (2 * v26));
            (*(void (**)(re::GeomAttribute *, uint64_t))(*(_QWORD *)v30 + 24))(v30, v26);
            if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v29 + 16))(v29))
            {
              v11 = re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v29, 0);
              LODWORD(v9) = (*(uint64_t (**)(re::GeomAttribute *))(*(_QWORD *)v29 + 16))(v29);
            }
            else
            {
              LODWORD(v9) = 0;
              v11 = 0;
            }
            v55 = v6;
            v54 = (MDLMesh *)v7;
            if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v30 + 16))(v30))
            {
              v8 = re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v30, 0);
              v6 = (re::internal *)(*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v30 + 16))(v30);
            }
            else
            {
              v6 = 0;
              v8 = 0;
            }
            v31 = 0;
            v10 = *(_QWORD *)&v66[16];
            v32 = *(_QWORD *)&v68[2];
            v33 = (re::internal *)v26;
            v34 = 1;
            do
            {
              v7 = v34 - 1;
              a2 = *(unsigned int *)(v28 + 4 * v7);
              if (v10 <= a2)
                goto LABEL_49;
              if (v9 <= v7)
                goto LABEL_50;
              *(_DWORD *)(v11 + 4 * v7) = *(_DWORD *)(v32 + 4 * a2);
              a2 = *(unsigned int *)(v28 + 4 * v34);
              if (v10 <= a2)
                goto LABEL_51;
              v35 = v34;
              if (v9 <= v34)
                goto LABEL_52;
              *(_DWORD *)(v11 + 4 * v34) = *(_DWORD *)(v32 + 4 * a2);
              if (v6 == v31)
                goto LABEL_53;
              v34 += 2;
              *(_DWORD *)(v8 + 4 * (_QWORD)v31) = *(_DWORD *)(v24 + 4 * (_QWORD)v31);
              v31 = (re::internal *)((char *)v31 + 1);
            }
            while (v33 != v31);

            v7 = (unint64_t)v54;
            v6 = v55;
            v10 = v58;
            v9 = v59;
            v13 = v57;
            a3 = v52;
          }
          if ((_DWORD)v60)
          {
            objc_msgSend(v13, "vertexCreases");
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "vertexCreaseIndices");
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            v56 = v36;
            objc_msgSend(v36, "map");
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            v39 = objc_msgSend(v38, "bytes");

            v53 = v37;
            objc_msgSend(v37, "map");
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            v41 = a3;
            v42 = objc_msgSend(v40, "bytes");

            v43 = re::GeomMesh::addAttribute((uint64_t)v41, "osdVertexCreaseIndices", 4, 3);
            v44 = re::GeomMesh::addAttribute((uint64_t)v41, "osdVertexCreaseWeights", 4, 4);
            (*(void (**)(re::GeomAttribute *, uint64_t))(*(_QWORD *)v43 + 24))(v43, v60);
            (*(void (**)(re::GeomAttribute *, uint64_t))(*(_QWORD *)v44 + 24))(v44, v60);
            if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v43 + 16))(v43))
            {
              v11 = re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v43, 0);
              v10 = (*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v43 + 16))(v43);
            }
            else
            {
              v10 = 0;
              v11 = 0;
            }
            v45 = (MDLMesh *)v7;
            v46 = v6;
            if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v44 + 16))(v44))
            {
              v47 = re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v44, 0);
              v8 = (*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v44 + 16))(v44);
            }
            else
            {
              v8 = 0;
              v47 = 0;
            }
            v48 = 0;
            v6 = *(re::internal **)&v66[16];
            v49 = *(_QWORD *)&v68[2];
            do
            {
              a2 = *(unsigned int *)(v42 + 4 * v48);
              if ((unint64_t)v6 <= a2)
                goto LABEL_54;
              if (v10 == v48)
                goto LABEL_55;
              *(_DWORD *)(v11 + 4 * v48) = *(_DWORD *)(v49 + 4 * a2);
              if (v8 == v48)
                goto LABEL_56;
              *(_DWORD *)(v47 + 4 * v48) = *(_DWORD *)(v39 + 4 * v48);
              ++v48;
            }
            while (v60 != v48);

            v6 = v46;
            v7 = (unint64_t)v45;
            v10 = v58;
            v9 = v59;
            v13 = v57;
          }
          if (*(_QWORD *)v66 && *(_QWORD *)&v68[2])
            (*(void (**)(void))(**(_QWORD **)v66 + 40))();
        }
      }

    }
  }

}

_QWORD *re::DynamicArray<re::internal::`anonymous namespace'::MDLAttrTopologyMap>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = 80 * a2;
    v9 = a2;
    do
    {
      v10 = v3[4];
      v11 = v10 + v8;
      v12 = *(_QWORD *)(v10 + v8 + 40);
      if (v12)
      {
        if (*(_QWORD *)(v11 + 72))
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
        *(_QWORD *)(v11 + 72) = 0;
        *(_QWORD *)(v10 + v8 + 48) = 0;
        *(_QWORD *)(v10 + v8 + 56) = 0;
        *(_QWORD *)(v10 + v8 + 40) = 0;
        ++*(_DWORD *)(v10 + v8 + 64);
      }
      result = *(_QWORD **)v11;
      if (*(_QWORD *)v11)
      {
        v13 = v10 + v8;
        if (*(_QWORD *)(v13 + 32))
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
        *(_QWORD *)(v13 + 32) = 0;
        *(_QWORD *)(v11 + 8) = 0;
        *(_QWORD *)(v11 + 16) = 0;
        *(_QWORD *)v11 = 0;
        ++*(_DWORD *)(v13 + 24);
      }
      ++v9;
      v8 += 80;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 80 * v4;
      do
      {
        v7 = v3[4] + v6;
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)(v7 + 72) = 0;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_DWORD *)(v7 + 64) = 0;
        v6 += 80;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

unint64_t *re::internal::`anonymous namespace'::buildMappingsForMDLSubmeshToGeomVertexHelper(unint64_t *result, uint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD v41[2];
  unint64_t *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  const char *v47;
  __int16 v48;
  int v49;
  __int16 v50;
  unint64_t v51;
  __int16 v52;
  unint64_t *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    v7 = a3;
    v8 = a2;
    v9 = result;
    v10 = 0;
    v12 = result[1];
    v11 = result[2];
    v13 = a4;
    v14 = -1;
    v15 = a3;
    v16 = a4;
    do
    {
      if (*result <= v15)
      {
        re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "index < m_max_index", "operator[]", 79);
        _os_crash();
        __break(1u);
LABEL_50:
        re::internal::assertLog((re::internal *)4, v19, "assertion failure: '%s' (%s:line %i) ", "index < m_max_index", "operator[]", 79);
        _os_crash();
        __break(1u);
LABEL_51:
        v45 = 0;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v54 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v46 = 136315906;
        v47 = "operator[]";
        v48 = 1024;
        v49 = 789;
        v50 = 2048;
        v51 = v7;
        v52 = 2048;
        v53 = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_52;
      }
      switch(v11)
      {
        case 0x20uLL:
          v17 = *(_DWORD *)(v12 + 4 * v15);
          break;
        case 0x10uLL:
          v17 = *(unsigned __int16 *)(v12 + 2 * v15);
          break;
        case 8uLL:
          v17 = *(unsigned __int8 *)(v12 + v15);
          break;
        default:
          goto LABEL_54;
      }
      if (v17 < v14)
        v14 = v17;
      if (v17 > v10)
        v10 = v17;
      v15 += a2;
      --v16;
    }
    while (v16);
    v44 = 0;
    v18 = v10 - v14 + 1;
    v41[1] = 0;
    v42 = 0;
    v41[0] = 0;
    v43 = 0;
    LOBYTE(v54) = 0;
    re::DynamicArray<BOOL>::resize(v41, v18, &v54);
    v20 = 0;
    v22 = v9[1];
    v21 = v9[2];
    v23 = *v9;
    v9 = v42;
    v24 = v44;
    do
    {
      if (v23 <= v7)
        goto LABEL_50;
      v25 = v7;
      switch(v21)
      {
        case 0x20uLL:
          v26 = *(_DWORD *)(v22 + 4 * v7);
          break;
        case 0x10uLL:
          v26 = *(unsigned __int16 *)(v22 + 2 * v7);
          break;
        case 8uLL:
          v26 = *(unsigned __int8 *)(v22 + v7);
          break;
        default:
          goto LABEL_55;
      }
      v7 = v26 - v14;
      if ((unint64_t)v9 <= v7)
        goto LABEL_51;
      if (!*(_BYTE *)(v24 + v7))
      {
        *(_BYTE *)(v24 + v7) = 1;
        ++v20;
      }
      v7 = (v25 + v8);
      --v13;
    }
    while (v13);
    re::DynamicArray<float>::resize(a6, v20);
    if ((_DWORD)v18)
    {
      v27 = 0;
      v8 = 0;
      while (1)
      {
        v9 = v42;
        if ((unint64_t)v42 <= v8)
          break;
        if (*(_BYTE *)(v44 + v8))
        {
          v28 = v14 + v8;
          v29 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v28 ^ (v28 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v28 ^ (v28 >> 30))) >> 27));
          v30 = v29 ^ (v29 >> 31);
          v31 = *(_QWORD *)a5;
          if (!*(_QWORD *)a5
            || (v31 = v30 % *(unsigned int *)(a5 + 24),
                v32 = *(unsigned int *)(*(_QWORD *)(a5 + 8) + 4 * v31),
                (_DWORD)v32 == 0x7FFFFFFF))
          {
LABEL_36:
            v34 = *(unsigned int *)(a5 + 36);
            if ((_DWORD)v34 == 0x7FFFFFFF)
            {
              v34 = *(unsigned int *)(a5 + 32);
              v35 = v34;
              if ((_DWORD)v34 == *(_DWORD *)(a5 + 24))
              {
                re::HashTable<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(a5, 2 * *(_DWORD *)(a5 + 28));
                v31 = v30 % *(unsigned int *)(a5 + 24);
                v35 = *(_DWORD *)(a5 + 32);
              }
              *(_DWORD *)(a5 + 32) = v35 + 1;
              v36 = *(_QWORD *)(a5 + 16);
              v37 = *(_DWORD *)(v36 + 24 * v34 + 8);
            }
            else
            {
              v36 = *(_QWORD *)(a5 + 16);
              v37 = *(_DWORD *)(v36 + 24 * v34 + 8);
              *(_DWORD *)(a5 + 36) = v37 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v36 + 24 * v34 + 8) = v37 | 0x80000000;
            v38 = *(_QWORD *)(a5 + 8);
            *(_DWORD *)(*(_QWORD *)(a5 + 16) + 24 * v34 + 8) = *(_DWORD *)(*(_QWORD *)(a5 + 16) + 24 * v34 + 8) & 0x80000000 | *(_DWORD *)(v38 + 4 * v31);
            *(_QWORD *)(*(_QWORD *)(a5 + 16) + 24 * v34) = v30;
            *(_DWORD *)(*(_QWORD *)(a5 + 16) + 24 * v34 + 12) = v28;
            *(_DWORD *)(*(_QWORD *)(a5 + 16) + 24 * v34 + 16) = v27;
            *(_DWORD *)(v38 + 4 * v31) = v34;
            ++*(_DWORD *)(a5 + 28);
            ++*(_DWORD *)(a5 + 40);
          }
          else
          {
            v33 = *(_QWORD *)(a5 + 16);
            while (*(_DWORD *)(v33 + 24 * v32 + 12) != (_DWORD)v28)
            {
              LODWORD(v32) = *(_DWORD *)(v33 + 24 * v32 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v32 == 0x7FFFFFFF)
                goto LABEL_36;
            }
          }
          v13 = v27;
          v39 = *(_QWORD *)(a6 + 16);
          if (v39 <= v27)
            goto LABEL_53;
          *(_DWORD *)(*(_QWORD *)(a6 + 32) + 4 * v27++) = v28;
        }
        if (++v8 == v18)
          goto LABEL_45;
      }
LABEL_52:
      v45 = 0;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v54 = 0u;
      v39 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v46 = 136315906;
      v47 = "operator[]";
      v48 = 1024;
      v49 = 789;
      v50 = 2048;
      v51 = v8;
      v52 = 2048;
      v53 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_53:
      v45 = 0;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v54 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v46 = 136315906;
      v47 = "operator[]";
      v48 = 1024;
      v49 = 789;
      v50 = 2048;
      v51 = v13;
      v52 = 2048;
      v53 = (unint64_t *)v39;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_54:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unsupported or invalid MDLIndexBitDepth detected.", "!\"Unreachable code\"", "operator[]", 93);
      _os_crash();
      __break(1u);
LABEL_55:
      re::internal::assertLog((re::internal *)4, v19, "assertion failure: '%s' (%s:line %i) Unsupported or invalid MDLIndexBitDepth detected.", "!\"Unreachable code\"", "operator[]", 93);
      _os_crash();
      __break(1u);
    }
LABEL_45:
    result = (unint64_t *)v41[0];
    if (v41[0])
    {
      if (v44)
        return (unint64_t *)(*(uint64_t (**)(void))(*(_QWORD *)v41[0] + 40))();
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::internal::`anonymous namespace'::MDLAttrTopologyMap>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = result[1];
  if (v2 != a2)
  {
    v4 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v4)
      {
        ++*((_DWORD *)v4 + 6);
        return result;
      }
      if (a2)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 80 * a2, 8);
        if (!result)
        {
          re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, 80 * a2, *(_QWORD *)(*v4 + 8));
          result = (_QWORD *)_os_crash();
          __break(1u);
          return result;
        }
        v6 = result;
        if (!v4[1])
          goto LABEL_23;
      }
      else
      {
        v6 = 0;
        if (!v2)
        {
LABEL_23:
          v4[4] = v6;
          v4[1] = a2;
          return result;
        }
      }
      v7 = v4[4];
      v8 = v4[2];
      if (v8)
      {
        v9 = 0;
        v10 = 80 * v8;
        do
        {
          v11 = &v6[v9 / 8];
          v12 = (_QWORD *)(v7 + v9);
          v11[4] = 0;
          v11[1] = 0;
          v11[2] = 0;
          *v11 = 0;
          *((_DWORD *)v11 + 6) = 0;
          v13 = *(_QWORD *)(v7 + v9 + 8);
          *v11 = *(_QWORD *)(v7 + v9);
          v11[1] = v13;
          *v12 = 0;
          v12[1] = 0;
          v14 = v6[v9 / 8 + 2];
          v11[2] = *(_QWORD *)(v7 + v9 + 16);
          v12[2] = v14;
          v15 = v6[v9 / 8 + 4];
          v11[4] = *(_QWORD *)(v7 + v9 + 32);
          v12[4] = v15;
          *((_DWORD *)v12 + 6) = *(_DWORD *)(v7 + v9 + 24) + 1;
          *((_DWORD *)v11 + 6) = LODWORD(v6[v9 / 8 + 3]) + 1;
          v11[9] = 0;
          v11[6] = 0;
          v11[7] = 0;
          v11[5] = 0;
          *((_DWORD *)v11 + 16) = 0;
          v16 = (_QWORD *)(v7 + v9 + 40);
          v17 = *(_QWORD *)(v7 + v9 + 48);
          v11[5] = *v16;
          *v16 = 0;
          v11[6] = v17;
          v12[6] = 0;
          v18 = v6[v9 / 8 + 7];
          v11[7] = *(_QWORD *)(v7 + v9 + 56);
          v12[7] = v18;
          v19 = v6[v9 / 8 + 9];
          v11[9] = *(_QWORD *)(v7 + v9 + 72);
          v12[9] = v19;
          *((_DWORD *)v12 + 16) = *(_DWORD *)(v7 + v9 + 64) + 1;
          *((_DWORD *)v11 + 16) = LODWORD(v6[v9 / 8 + 8]) + 1;
          if (*v16)
          {
            if (v19)
              (*(void (**)(_QWORD))(*(_QWORD *)*v16 + 40))(*v16);
            v12[9] = 0;
            *(_QWORD *)(v7 + v9 + 48) = 0;
            *(_QWORD *)(v7 + v9 + 56) = 0;
            *v16 = 0;
            ++*((_DWORD *)v12 + 16);
          }
          if (*v12)
          {
            if (v12[4])
              (*(void (**)(_QWORD))(*(_QWORD *)*v12 + 40))(*v12);
            v12[4] = 0;
            v12[1] = 0;
            v12[2] = 0;
            *v12 = 0;
            ++*((_DWORD *)v12 + 6);
          }
          v9 += 80;
        }
        while (v10 != v9);
        v7 = v4[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 40))(*v4, v7);
      goto LABEL_23;
    }
  }
  return result;
}

void re::makeGeomMeshFromModelDescriptor(re *this@<X0>, unint64_t a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  id v8;
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _anonymous_namespace_ *v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unsigned int *v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _anonymous_namespace_ *v28;
  uint64_t v29;
  const char *v30;
  int v31;
  _anonymous_namespace_ *v32;
  uint64_t v33;
  unint64_t v34;
  _BOOL8 v35;
  unint64_t v36;
  uint64_t v37;
  char **v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  _anonymous_namespace_ *v50;
  uint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unsigned int *v56;
  uint64_t v57;
  unint64_t *v58;
  _QWORD *v59;
  __int128 v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  _DWORD *v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  _DWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  _anonymous_namespace_ *v76;
  unsigned __int8 *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int *v87;
  uint64_t v88;
  _DWORD *v89;
  __int128 v90;
  unsigned int v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  _QWORD *v96;
  unsigned int *v97;
  uint64_t v98;
  unint64_t *v99;
  _QWORD *v100;
  int32x2_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  int32x2_t v106;
  int v107;
  uint64_t v108;
  unint64_t v109;
  unsigned int v110;
  unsigned int *v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  int v115;
  uint64_t v116;
  __int128 v117;
  const char *v118;
  int v119;
  const char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  void *v145;
  id v146;
  id v147;
  id v148;
  char *v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  BOOL v166;
  unsigned int v167;
  unint64_t v168;
  _WORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _WORD *v173;
  unsigned int v174;
  uint64_t v175;
  id v176;
  uint64_t v177;
  unsigned int v178;
  unsigned int v179;
  unint64_t v180;
  unsigned int *v181;
  uint64_t v182;
  __int128 v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v190;
  unint64_t v191;
  _WORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _WORD *v196;
  unsigned int v197;
  uint64_t v198;
  id v199;
  uint64_t v200;
  unsigned int v201;
  unsigned int v202;
  unint64_t v203;
  unsigned int *v204;
  uint64_t v205;
  __int128 v206;
  uint64_t v207;
  unsigned int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int v213;
  unint64_t v214;
  _DWORD *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _DWORD *v219;
  unsigned int v220;
  uint64_t v221;
  id v222;
  uint64_t v223;
  unsigned int v224;
  unsigned int v225;
  unint64_t v226;
  unsigned int *v227;
  uint64_t v228;
  __int128 v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unsigned int v236;
  unint64_t v237;
  _DWORD *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _DWORD *v242;
  unsigned int v243;
  uint64_t v244;
  id v245;
  uint64_t v246;
  unsigned int v247;
  unsigned int v248;
  unint64_t v249;
  unsigned int *v250;
  uint64_t v251;
  __int128 v252;
  uint64_t v253;
  unsigned int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int v259;
  unint64_t v260;
  _DWORD *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  _DWORD *v265;
  unsigned int v266;
  uint64_t v267;
  id v268;
  uint64_t v269;
  unsigned int v270;
  unsigned int v271;
  unint64_t v272;
  unsigned int *v273;
  uint64_t v274;
  __int128 v275;
  uint64_t v276;
  unsigned int v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int v282;
  unint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _QWORD *v288;
  unsigned int v289;
  uint64_t v290;
  id v291;
  uint64_t v292;
  unsigned int v293;
  unsigned int v294;
  unint64_t v295;
  unsigned int *v296;
  uint64_t v297;
  __int128 v298;
  uint64_t v299;
  unsigned int v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unsigned int v305;
  unint64_t v306;
  uint64_t v307;
  unsigned int v308;
  uint64_t v309;
  id v310;
  uint64_t v311;
  unsigned int v312;
  unsigned int v313;
  unint64_t v314;
  uint64_t v315;
  unsigned int v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unsigned int v321;
  unint64_t v322;
  uint64_t v323;
  unsigned int v324;
  uint64_t v325;
  id v326;
  uint64_t v327;
  unsigned int v328;
  unsigned int v329;
  unint64_t v330;
  uint64_t v331;
  unsigned int v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unsigned int v337;
  unint64_t v338;
  uint64_t v339;
  unsigned int v340;
  uint64_t v341;
  id v342;
  uint64_t v343;
  unsigned int v344;
  unsigned int v345;
  unint64_t v346;
  uint64_t v347;
  unsigned int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unsigned int v353;
  unint64_t v354;
  uint64_t v355;
  unsigned int v356;
  uint64_t v357;
  id v358;
  uint64_t v359;
  unsigned int v360;
  unsigned int v361;
  unint64_t v362;
  uint64_t v363;
  unsigned int v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  __int128 v369;
  uint64_t v370;
  uint64_t v372;
  _DWORD *v373;
  uint64_t v374;
  _OWORD *v375;
  unsigned int v376;
  uint64_t v377;
  unint64_t v378;
  id v379;
  uint64_t v380;
  __int128 v381;
  unsigned int v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  unsigned int v386;
  uint64_t v387;
  uint64_t v388;
  unint64_t v389;
  re::GeomAttribute *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  _DWORD *v394;
  int v395;
  _DWORD *v396;
  int v397;
  int v398;
  int v399;
  unsigned int i;
  char **v401;
  const re::GeomAttribute *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  _DWORD *v407;
  _DWORD *v408;
  uint64_t v409;
  int v410;
  _DWORD *v411;
  int v412;
  int v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  _OWORD *v417;
  re *v418;
  char *v419;
  uint64_t *v420;
  __int128 v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  __int128 v425;
  __int128 v426;
  uint64_t v427;
  unsigned __int16 v428;
  void *v429;
  id v430;
  id v431;
  id v432;
  uint64_t v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  re::GeomAttribute *v437;
  __n128 v438;
  re::GeomAttribute *v439;
  __n128 v440;
  _QWORD *v441;
  unint64_t v442;
  uint64_t *v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  unint64_t v448;
  unint64_t v449;
  unint64_t v450;
  uint64_t *v451;
  _DWORD *v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v455;
  uint64_t *v456;
  uint64_t v457;
  int v458;
  unsigned int v459;
  re::internal *v460;
  const re::GeomAttribute *v461;
  _anonymous_namespace_ *v462;
  uint64_t *v463;
  uint64_t v464;
  uint64_t v465;
  unint64_t v466;
  __int128 v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  _anonymous_namespace_ *v471;
  _anonymous_namespace_ *v472;
  uint64_t v473;
  unint64_t v474;
  unint64_t v475;
  uint64_t v476;
  unsigned int v477;
  unsigned int v478;
  _anonymous_namespace_ *v479;
  uint64_t v480;
  __int128 v481;
  uint64_t v482;
  uint64_t v483;
  _DWORD *v484;
  int v485;
  int v486;
  unint64_t v487;
  unsigned int v488;
  int v489;
  _DWORD *v490;
  unint64_t v491;
  unsigned int v492;
  unint64_t v493;
  int v494;
  uint64_t v495;
  char v496;
  uint64_t v497;
  unsigned int v498;
  unsigned int v499;
  unsigned int v500;
  unsigned int v503;
  int v504;
  uint64_t v505;
  uint64_t v506;
  re *v507;
  char *v508;
  uint64_t *v509;
  _OWORD *v510;
  unsigned int v511;
  __int128 v512;
  uint64_t v513;
  _DWORD *v514;
  uint64_t v515;
  unint64_t v516;
  unint64_t v517;
  const char *v518;
  unint64_t v519;
  unint64_t v520;
  unint64_t v521;
  unint64_t v522;
  uint64_t v523;
  uint64_t v524;
  unint64_t v525;
  uint64_t v526;
  uint64_t v527;
  unsigned int v528;
  char **v529;
  unint64_t v530;
  char **v531;
  _QWORD *v532;
  uint64_t v533;
  unint64_t v534;
  unsigned int *v535;
  unint64_t v536;
  uint64_t v537;
  char *v538;
  _QWORD *v539;
  uint64_t v540;
  unint64_t v541;
  unint64_t v542;
  unint64_t v543;
  unint64_t v544;
  uint64_t v545;
  int v546;
  unint64_t v547;
  __int128 v548;
  uint64_t v549;
  uint64_t v550;
  unsigned int v551;
  __int128 v552;
  int v553;
  char v554;
  re::GeomAttribute *v555;
  uint64_t v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  _OWORD v561[3];
  unsigned int *v562;
  uint64_t v563;
  unint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  unsigned int v569;
  uint64_t v570;
  unint64_t v571;
  uint64_t v572;
  uint64_t v573;
  __int128 *v574;
  unint64_t v575;
  unint64_t v576;
  char *__s[2];
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  unsigned int v582;
  uint64_t v583;
  uint64_t *v584;
  unsigned int v585;
  uint64_t v586;
  uint64_t *v587;
  _BYTE v588[24];
  int v589;
  uint64_t v590;
  _BYTE v591[12];
  char v592;
  re::GeomAttribute *v593;
  uint64_t v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  _BYTE v602[28];
  __int16 v603;
  uint64_t v604;
  _OWORD v605[3];
  _OWORD v606[2];
  _DWORD *v607;
  uint64_t v608;
  _OWORD v609[4];
  uint64_t v610;
  _OWORD v611[4];
  __int128 v612;
  _BYTE v613[40];
  _DWORD *v614;
  uint64_t v615;

  v5 = (unint64_t)this;
  v615 = *MEMORY[0x24BDAC8D0];
  v7 = *((_QWORD *)this + 4);
  *(_QWORD *)&v548 = v7;
  if (v7)
    v8 = (id)(v7 + 8);
  re::GeomModelDescriptor::makeConvertedValues<unsigned int>((_anonymous_namespace_ **)&v548, &v562);
  if ((_QWORD)v548)

  if (*(_QWORD *)(v5 + 24) != v564)
  {
    v24 = v548;
    v25 = v549;
    v26 = v550;
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 100;
    *(_QWORD *)(a2 + 16) = &re::AssetErrorCategory(void)::instance;
    *(_OWORD *)(a2 + 24) = v24;
    *(_QWORD *)(a2 + 40) = v25;
    *(_QWORD *)(a2 + 48) = v26;
    goto LABEL_986;
  }
  v10 = (unint64_t)&v548;
  re::GeomMesh::GeomMesh((re::GeomMesh *)&v548, 0);
  v552 = xmmword_2261326D0;
  v553 = -1;
  v554 = 0;
  LODWORD(v555) = 0;
  v560 = 0u;
  memset(v561, 0, sizeof(v561));
  v12 = *(_QWORD *)(v5 + 16);
  v11 = *(_QWORD *)(v5 + 24);
  v13 = *(char **)(v5 + 40);
  __s[0] = v13;
  if (v13)
    v14 = v13 + 8;
  re::GeomModelDescriptor::makeConvertedValues<unsigned int>((_anonymous_namespace_ **)__s, v609);
  if (__s[0])

  v17 = v564;
  if (v564 != v11)
    goto LABEL_1193;
  v542 = a2;
  if (v564)
  {
    LODWORD(v4) = 0;
    v18 = 0;
    LODWORD(v19) = 0;
    v20 = v562;
    v21 = v564;
    while (1)
    {
      v22 = *v20;
      if (*v20 < 5)
      {
        if (v22 <= 2)
        {
          v30 = "Model contains degenerate face (face < 2 vertices).";
          goto LABEL_33;
        }
        v23 = 1;
      }
      else
      {
        v23 = v22 - 2;
      }
      v20 = (unsigned int *)((char *)v20 + v563);
      v4 = (v23 + v4);
      if (v22 > v19)
        LODWORD(v19) = v22;
      v18 += v22;
      if (!--v21)
        goto LABEL_23;
    }
  }
  LODWORD(v19) = 0;
  v18 = 0;
  v4 = 0;
LABEL_23:
  if (*(_QWORD *)&v609[1] != v18)
  {
    v30 = "Model contains a corrupt index list.";
    goto LABEL_33;
  }
  v27 = re::GeomModelDescriptor::attributeByName((re::GeomModelDescriptor *)v5, (const re::DynamicString *)__s);
  v28 = (_anonymous_namespace_ *)__s[0];
  if (__s[0] && ((uint64_t)__s[1] & 1) != 0)
    v28 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)__s[0] + 40))();
  v29 = *(_QWORD *)(v27 + 40);
  if (v29)
  {
    if (*(_QWORD *)(v27 + 48))
    {
      v30 = "Positions cannot be indexed.";
      goto LABEL_33;
    }
    v429 = (void *)(v29 + 8);
    v430 = (id)(v29 + 8);
    if (*(_BYTE *)(v29 + 32) && (*(unsigned __int8 *)(v29 + 33) | 2) == 0xB)
    {
      v431 = v429;
      v532 = (_QWORD *)(*(_QWORD *)(v29 + 24) + *(_QWORD *)(v29 + 56));
      v533 = *(_QWORD *)(v29 + 48);
      v432 = v429;

      v539 = 0;
      v540 = 0;
      v535 = 0;
    }
    else
    {
      v547 = v12;
      re::internal::DataPayload::computeConvertedValues<re::PackedFloat3>(v29, (uint64_t)__s);
      if (LOBYTE(__s[0]))
      {
        v540 = (uint64_t)__s[1];
        __s[1] = 0;
        v441 = (_QWORD *)*((_QWORD *)&v578 + 1);
        v533 = 12;
        v535 = (unsigned int *)v578;
        v578 = 0uLL;
      }
      else
      {
        v441 = 0;
        v533 = 0;
        v535 = 0;
        v540 = 0;
      }
      re::Result<re::FixedArray<unsigned int>,re::DetailedError>::~Result((uint64_t)__s);
      v29 = 0;
      v539 = v441;
      v532 = v441;
      v12 = v547;
    }

    bzero(__s, 0x2D0uLL);
    v531 = &__s[1];
    re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&__s[1]);
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)((char *)&v580 + 8), "vertexPosition", 1, 7);
    if (LODWORD(__s[1]) > v12 && (_DWORD)v579 && (v579 - 1) > (unint64_t)v579)
    {
      while (1)
        ;
    }
    v537 = v29;
    LODWORD(__s[1]) = v12;
    v582 = v12;
    if (v583)
    {
      v456 = v584;
      a2 = 8 * v583;
      do
      {
        v457 = *v456++;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v457 + 72))(v457, v582);
        a2 -= 8;
      }
      while (a2);
    }
    v10 = (unint64_t)&v548;
    if (v4 < v579)
    {
      v458 = v589;
      if (v589)
      {
        v459 = 0;
        a2 = (unint64_t)v588;
        do
        {
          v460 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)v588, v459);
          re::internal::accessFaceVaryingAttributeSubmesh(v460, v461);
          ++v459;
        }
        while (v458 != v459);
      }
    }
    v3 = v4;
    v462 = (_anonymous_namespace_ *)re::DynamicArray<re::GeomCell4>::resize(&v578, v4);
    v585 = v4;
    if (v586)
    {
      v463 = v587;
      a2 = 8 * v586;
      do
      {
        v464 = *v463++;
        v462 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v464 + 72))(v464, v585);
        a2 -= 8;
      }
      while (a2);
    }
    *((_QWORD *)&v561[0] + 1) = 0;
    *(_OWORD *)((char *)&v561[1] + 8) = 0uLL;
    v465 = *(_QWORD *)&v561[0];
    *(_QWORD *)&v561[1] = *(_QWORD *)&v561[0];
    if (*(_QWORD *)&v561[0] >= 0x10uLL)
    {
      v466 = 0;
      *(_QWORD *)&v467 = -1;
      *((_QWORD *)&v467 + 1) = -1;
      do
      {
        *(_OWORD *)(v560 + 16 * v466++) = v467;
        v465 = *(_QWORD *)&v561[0];
      }
      while (v466 < *(_QWORD *)&v561[0] >> 4);
    }
    LODWORD(v545) = v11;
    if (v465)
    {
      v468 = 96 * v465;
      a2 = *((_QWORD *)&v560 + 1) + 48;
      do
      {
        v11 = a2 + 8;
        v469 = *(_QWORD *)(a2 + 8);
        if (v469)
        {
          if (*(_QWORD *)(a2 + 40))
            (*(void (**)(uint64_t))(*(_QWORD *)v469 + 40))(v469);
          *(_QWORD *)(a2 + 40) = 0;
          *(_QWORD *)(a2 + 16) = 0;
          *(_QWORD *)(a2 + 24) = 0;
          *(_QWORD *)v11 = 0;
          ++*(_DWORD *)(a2 + 32);
        }
        v470 = *(_QWORD *)(a2 - 16);
        if (v470)
        {
          v11 = a2 - 8;
          if (*(_QWORD *)(a2 - 8))
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v470 + 40))(v470, *(_QWORD *)a2);
            *(_QWORD *)v11 = 0;
            *(_QWORD *)a2 = 0;
          }
          *(_QWORD *)(a2 - 16) = 0;
        }
        v462 = *(_anonymous_namespace_ **)(a2 - 40);
        if (v462)
        {
          v11 = a2 - 32;
          if (*(_QWORD *)(a2 - 32))
          {
            v462 = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, _QWORD))(*(_QWORD *)v462 + 40))(v462, *(_QWORD *)(a2 - 24));
            *(_QWORD *)v11 = 0;
            *(_QWORD *)(a2 - 24) = 0;
          }
          *(_QWORD *)(a2 - 40) = 0;
        }
        a2 += 96;
        v468 -= 96;
      }
      while (v468);
    }
    if (v19 <= 4)
    {
      if (!(_DWORD)v545)
      {
LABEL_1131:
        v504 = 0;
        *(_QWORD *)&v605[0] = 0xFFFFFFFF00000000;
        DWORD2(v605[0]) = -1;
        BYTE12(v605[0]) = 0;
        if ((v4 - 1) <= 0xFFFFFFFD)
        {
          DWORD2(v605[0]) = v4 - 1;
          v504 = v4;
          *(_QWORD *)&v605[0] = v4;
        }
        LODWORD(v605[1]) = v504;
        re::GeomIndexMap::operator=((uint64_t)&v552 + 8, (uint64_t)v605);
        if (!BYTE12(v605[0]))
          goto LABEL_1165;
        if (BYTE12(v605[0]) == 2)
          goto LABEL_1160;
        if (BYTE12(v605[0]) != 1)
          goto LABEL_1270;
        v506 = *(_QWORD *)&v605[1];
        if (!*(_QWORD *)&v605[1] || !*(_QWORD *)&v606[0])
          goto LABEL_1165;
        goto LABEL_1164;
      }
      v497 = 0;
      LODWORD(a2) = 0;
      while (1)
      {
        v498 = *(_DWORD *)(*(_QWORD *)&v609[0] + *((_QWORD *)&v609[0] + 1) * a2);
        if (v498 >= v12)
          break;
        v499 = *(_DWORD *)(*(_QWORD *)&v609[0] + *((_QWORD *)&v609[0] + 1) * (a2 + 1));
        if (v499 >= v12)
          break;
        v3 = *(unsigned int *)((char *)v562 + v563 * v497);
        v500 = *(_DWORD *)(*(_QWORD *)&v609[0] + *((_QWORD *)&v609[0] + 1) * (a2 + 2));
        if ((_DWORD)v3 != 4 || v500 >= v12)
        {
          if ((_DWORD)v3 == 4 || v500 >= v12)
            break;
          if ((_DWORD)v3 == 3)
            v462 = (_anonymous_namespace_ *)re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v497, v498, v499, v500);
        }
        else
        {
          v503 = *(_DWORD *)(*(_QWORD *)&v609[0] + *((_QWORD *)&v609[0] + 1) * (a2 + 3));
          if (v503 >= v12)
            break;
          v462 = (_anonymous_namespace_ *)re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v497, v498, v499, v500, v503);
        }
        a2 = (v3 + a2);
        if (v17 == ++v497)
          goto LABEL_1131;
      }
      v31 = 0;
      v3 = *((_QWORD *)&v605[1] + 1);
      a2 = *(_QWORD *)&v605[1];
      v17 = *((_QWORD *)&v605[0] + 1);
      v4 = *(_QWORD *)&v605[0];
      goto LABEL_1179;
    }
    v575 = 0;
    v574 = 0;
    v576 = 0;
    v571 = 0;
    v570 = 0;
    v572 = 0;
    *(_QWORD *)&v613[32] = 0;
    memset(v613, 0, 28);
    v472 = (_anonymous_namespace_ *)re::DynamicArray<unsigned int>::resize(v613, v4, &re::kInvalidMeshIndex);
    v473 = 0;
    a2 = v575;
    v474 = v576;
    while (a2 != v473)
    {
      *(_DWORD *)(v474 + 4 * v473) = v473;
      if (v19 == ++v473)
      {
        v569 = 0;
        if (!(_DWORD)v545)
          goto LABEL_1112;
        v17 = 0;
        v4 = 0;
        v528 = v545;
        while (1)
        {
          v3 = v17;
          v475 = *(unsigned int *)((char *)v562 + v563 * v17);
          if ((_DWORD)v475)
          {
            v476 = *(unsigned int *)((char *)v562 + v563 * v17);
            v477 = v4;
            do
            {
              if (*(_DWORD *)(*(_QWORD *)&v609[0] + *((_QWORD *)&v609[0] + 1) * v477) >= v12)
              {
                v3 = *((_QWORD *)&v605[1] + 1);
                a2 = *(_QWORD *)&v605[1];
                v496 = 1;
                v17 = *((_QWORD *)&v605[0] + 1);
                v4 = *(_QWORD *)&v605[0];
LABEL_1140:
                if (*(_QWORD *)v613 && *(_QWORD *)&v613[32])
                  (*(void (**)(_QWORD))(**(_QWORD **)v613 + 40))(*(_QWORD *)v613);
                if (v570 && v571)
                  (*(void (**)(void))(*(_QWORD *)v570 + 40))();
                if (v574 && v575)
                  (*(void (**)(void))(*(_QWORD *)v574 + 40))();
                if ((v496 & 1) == 0)
                  goto LABEL_1165;
                v31 = 0;
                goto LABEL_1179;
              }
              ++v477;
              --v476;
            }
            while (v476);
          }
          v11 = *(_QWORD *)&v613[16];
          if (*(_QWORD *)&v613[16] <= (unint64_t)v17)
            goto LABEL_1237;
          *(_DWORD *)(*(_QWORD *)&v613[32] + 4 * v17) = v17;
          v478 = v545;
          v530 = v475;
          if ((_DWORD)v475 == 4)
          {
            v472 = (_anonymous_namespace_ *)re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v17, *(_DWORD *)(*(_QWORD *)&v609[0]+ *((_QWORD *)&v609[0] + 1) * v4), *(_DWORD *)(*(_QWORD *)&v609[0]+ *((_QWORD *)&v609[0] + 1) * (v4 + 1)), *(_DWORD *)(*(_QWORD *)&v609[0]+ *((_QWORD *)&v609[0] + 1) * (v4 + 2)), *(_DWORD *)(*(_QWORD *)&v609[0]+ *((_QWORD *)&v609[0] + 1) * (v4 + 3)));
            goto LABEL_1111;
          }
          if ((_DWORD)v475 == 3)
          {
            v472 = (_anonymous_namespace_ *)re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v17, *(_DWORD *)(*(_QWORD *)&v609[0]+ *((_QWORD *)&v609[0] + 1) * v4), *(_DWORD *)(*(_QWORD *)&v609[0]+ *((_QWORD *)&v609[0] + 1) * (v4 + 1)), *(_DWORD *)(*(_QWORD *)&v609[0]+ *((_QWORD *)&v609[0] + 1) * (v4 + 2)));
            goto LABEL_1111;
          }
          a2 = (v475 - 2);
          v607 = 0;
          memset(v605, 0, sizeof(v605));
          memset(v606, 0, 28);
          v544 = a2;
          if ((_DWORD)v530)
            break;
LABEL_1081:
          v487 = v5;
          *(_QWORD *)&v611[0] = v572;
          *((_QWORD *)&v611[0] + 1) = v530;
          *(_QWORD *)v602 = v576;
          *(_QWORD *)&v602[8] = v530;
          re::triangulatePolygon((uint64_t)v611, (uint64_t)v602, (uint64_t)v606);
LABEL_1087:
          if (!*(_QWORD *)&v605[2])
            goto LABEL_1238;
          **((_DWORD **)&v605[2] + 1) = v17;
          if (!*(_QWORD *)&v606[1])
            goto LABEL_1239;
          v5 = v487;
          v10 = (unint64_t)&v548;
          v478 = v545;
          if (*(_QWORD *)&v606[1] == 1)
            goto LABEL_1240;
          if (*(_QWORD *)&v606[1] <= 2uLL)
            goto LABEL_1241;
          re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v17, *(_DWORD *)(*(_QWORD *)&v609[0] + *((_QWORD *)&v609[0] + 1) * (*v607 + v4)), *(_DWORD *)(*(_QWORD *)&v609[0] + *((_QWORD *)&v609[0] + 1) * (v607[1] + v4)), *(_DWORD *)(*(_QWORD *)&v609[0] + *((_QWORD *)&v609[0] + 1) * (v607[2] + v4)));
          if (a2 < 2)
            goto LABEL_1100;
          v522 = v5;
          v3 = v528;
          v5 = 5;
          v491 = 1;
          do
          {
            v11 = *(_QWORD *)&v605[2];
            if (*(_QWORD *)&v605[2] <= v491)
              goto LABEL_1215;
            v492 = v528 + v491 - 1;
            *(_DWORD *)(*((_QWORD *)&v605[2] + 1) + 4 * v491) = v492;
            v11 = v492;
            v10 = *(_QWORD *)&v613[16];
            if (*(_QWORD *)&v613[16] <= (unint64_t)v492)
            {
LABEL_1216:
              v573 = 0;
              v612 = 0u;
              memset(v611, 0, sizeof(v611));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v602 = 136315906;
              *(_QWORD *)&v602[4] = "operator[]";
              *(_WORD *)&v602[12] = 1024;
              *(_DWORD *)&v602[14] = 789;
              *(_WORD *)&v602[18] = 2048;
              *(_QWORD *)&v602[20] = v11;
              v603 = 2048;
              v604 = v10;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_1217:
              v573 = 0;
              v612 = 0u;
              memset(v611, 0, sizeof(v611));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v602 = 136315906;
              *(_QWORD *)&v602[4] = "operator[]";
              *(_WORD *)&v602[12] = 1024;
              *(_DWORD *)&v602[14] = 789;
              *(_WORD *)&v602[18] = 2048;
              *(_QWORD *)&v602[20] = v4;
              v603 = 2048;
              v604 = v11;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_1218:
              v573 = 0;
              v612 = 0u;
              memset(v611, 0, sizeof(v611));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v602 = 136315906;
              *(_QWORD *)&v602[4] = "operator[]";
              *(_WORD *)&v602[12] = 1024;
              *(_DWORD *)&v602[14] = 789;
              *(_WORD *)&v602[18] = 2048;
              *(_QWORD *)&v602[20] = v10;
              v603 = 2048;
              v604 = v11;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_1219:
              v573 = 0;
              v612 = 0u;
              memset(v611, 0, sizeof(v611));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v602 = 136315906;
              *(_QWORD *)&v602[4] = "operator[]";
              *(_WORD *)&v602[12] = 1024;
              *(_DWORD *)&v602[14] = 789;
              *(_WORD *)&v602[18] = 2048;
              *(_QWORD *)&v602[20] = a2;
              v603 = 2048;
              v604 = v11;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_1220:
              *(_QWORD *)v613 = 0;
              v581 = 0u;
              v580 = 0u;
              v579 = 0u;
              v578 = 0u;
              *(_OWORD *)__s = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v609[0]) = 136315906;
              *(_QWORD *)((char *)v609 + 4) = "operator[]";
              WORD6(v609[0]) = 1024;
              *(_DWORD *)((char *)v609 + 14) = 609;
              WORD1(v609[1]) = 2048;
              *(_QWORD *)((char *)&v609[1] + 4) = v11;
              WORD6(v609[1]) = 2048;
              *(_QWORD *)((char *)&v609[1] + 14) = v12;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_1221:
              *(_QWORD *)v613 = 0;
              v581 = 0u;
              v580 = 0u;
              v579 = 0u;
              v578 = 0u;
              *(_OWORD *)__s = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v609[0]) = 136315906;
              *(_QWORD *)((char *)v609 + 4) = "operator[]";
              WORD6(v609[0]) = 1024;
              *(_DWORD *)((char *)v609 + 14) = 609;
              WORD1(v609[1]) = 2048;
              *(_QWORD *)((char *)&v609[1] + 4) = v11;
              WORD6(v609[1]) = 2048;
              *(_QWORD *)((char *)&v609[1] + 14) = v12;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_1222:
              *(_QWORD *)v613 = 0;
              v581 = 0u;
              v580 = 0u;
              v579 = 0u;
              v578 = 0u;
              *(_OWORD *)__s = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v609[0]) = 136315906;
              *(_QWORD *)((char *)v609 + 4) = "operator[]";
              WORD6(v609[0]) = 1024;
              *(_DWORD *)((char *)v609 + 14) = 609;
              WORD1(v609[1]) = 2048;
              *(_QWORD *)((char *)&v609[1] + 4) = v11;
              WORD6(v609[1]) = 2048;
              *(_QWORD *)((char *)&v609[1] + 14) = v12;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_1223:
              *(_QWORD *)v613 = 0;
              v581 = 0u;
              v580 = 0u;
              v579 = 0u;
              v578 = 0u;
              *(_OWORD *)__s = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v609[0]) = 136315906;
              *(_QWORD *)((char *)v609 + 4) = "operator[]";
              WORD6(v609[0]) = 1024;
              *(_DWORD *)((char *)v609 + 14) = 609;
              WORD1(v609[1]) = 2048;
              *(_QWORD *)((char *)&v609[1] + 4) = v11;
              WORD6(v609[1]) = 2048;
              *(_QWORD *)((char *)&v609[1] + 14) = v12;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_1224:
              *(_QWORD *)v613 = 0;
              v581 = 0u;
              v580 = 0u;
              v579 = 0u;
              v578 = 0u;
              *(_OWORD *)__s = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v609[0]) = 136315906;
              *(_QWORD *)((char *)v609 + 4) = "operator[]";
              WORD6(v609[0]) = 1024;
              *(_DWORD *)((char *)v609 + 14) = 609;
              WORD1(v609[1]) = 2048;
              *(_QWORD *)((char *)&v609[1] + 4) = v11;
              WORD6(v609[1]) = 2048;
              *(_QWORD *)((char *)&v609[1] + 14) = v10;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_1225:
              *(_QWORD *)v613 = 0;
              v581 = 0u;
              v580 = 0u;
              v579 = 0u;
              v578 = 0u;
              *(_OWORD *)__s = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v609[0]) = 136315906;
              *(_QWORD *)((char *)v609 + 4) = "operator[]";
              WORD6(v609[0]) = 1024;
              *(_DWORD *)((char *)v609 + 14) = 609;
              WORD1(v609[1]) = 2048;
              *(_QWORD *)((char *)&v609[1] + 4) = v11;
              WORD6(v609[1]) = 2048;
              *(_QWORD *)((char *)&v609[1] + 14) = v10;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_1226:
              *(_QWORD *)v613 = 0;
              v581 = 0u;
              v580 = 0u;
              v579 = 0u;
              v578 = 0u;
              *(_OWORD *)__s = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v609[0]) = 136315906;
              *(_QWORD *)((char *)v609 + 4) = "operator[]";
              WORD6(v609[0]) = 1024;
              *(_DWORD *)((char *)v609 + 14) = 609;
              WORD1(v609[1]) = 2048;
              *(_QWORD *)((char *)&v609[1] + 4) = v12;
              WORD6(v609[1]) = 2048;
              *(_QWORD *)((char *)&v609[1] + 14) = v11;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_1227:
              *(_QWORD *)v613 = 0;
              v581 = 0u;
              v580 = 0u;
              v579 = 0u;
              v578 = 0u;
              *(_OWORD *)__s = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v609[0]) = 136315906;
              *(_QWORD *)((char *)v609 + 4) = "operator[]";
              WORD6(v609[0]) = 1024;
              *(_DWORD *)((char *)v609 + 14) = 609;
              WORD1(v609[1]) = 2048;
              *(_QWORD *)((char *)&v609[1] + 4) = v12;
              WORD6(v609[1]) = 2048;
              *(_QWORD *)((char *)&v609[1] + 14) = v10;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_1228:
              *(_QWORD *)v613 = 0;
              v581 = 0u;
              v580 = 0u;
              v579 = 0u;
              v578 = 0u;
              *(_OWORD *)__s = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v609[0]) = 136315906;
              *(_QWORD *)((char *)v609 + 4) = "operator[]";
              WORD6(v609[0]) = 1024;
              *(_DWORD *)((char *)v609 + 14) = 609;
              WORD1(v609[1]) = 2048;
              *(_QWORD *)((char *)&v609[1] + 4) = v12;
              WORD6(v609[1]) = 2048;
              *(_QWORD *)((char *)&v609[1] + 14) = v10;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_1229:
              *(_QWORD *)v613 = 0;
              v581 = 0u;
              v580 = 0u;
              v579 = 0u;
              v578 = 0u;
              *(_OWORD *)__s = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v609[0]) = 136315906;
              *(_QWORD *)((char *)v609 + 4) = "operator[]";
              WORD6(v609[0]) = 1024;
              *(_DWORD *)((char *)v609 + 14) = 609;
              WORD1(v609[1]) = 2048;
              *(_QWORD *)((char *)&v609[1] + 4) = v12;
              WORD6(v609[1]) = 2048;
              *(_QWORD *)((char *)&v609[1] + 14) = v11;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_1230:
              *(_QWORD *)&v609[0] = 0;
              v581 = 0u;
              v580 = 0u;
              v579 = 0u;
              v578 = 0u;
              *(_OWORD *)__s = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v611[0]) = 136315906;
              *(_QWORD *)((char *)v611 + 4) = "operator[]";
              WORD6(v611[0]) = 1024;
              *(_DWORD *)((char *)v611 + 14) = 609;
              WORD1(v611[1]) = 2048;
              *(_QWORD *)((char *)&v611[1] + 4) = v12;
              WORD6(v611[1]) = 2048;
              *(_QWORD *)((char *)&v611[1] + 14) = v11;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_1231;
            }
            v493 = v4;
            v4 = (v5 - 2);
            *(_DWORD *)(*(_QWORD *)&v613[32] + 4 * v492) = v17;
            v11 = *(_QWORD *)&v606[1];
            if (*(_QWORD *)&v606[1] <= (unint64_t)v4)
              goto LABEL_1217;
            v10 = (v5 - 1);
            if (*(_QWORD *)&v606[1] <= v10)
              goto LABEL_1218;
            a2 = v5;
            if (*(_QWORD *)&v606[1] <= (unint64_t)v5)
              goto LABEL_1219;
            v494 = v607[v4];
            v4 = v493;
            re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v492, *(_DWORD *)(*(_QWORD *)&v609[0] + *((_QWORD *)&v609[0] + 1) * (v494 + v493)), *(_DWORD *)(*(_QWORD *)&v609[0] + *((_QWORD *)&v609[0] + 1) * (v607[v10] + v493)), *(_DWORD *)(*(_QWORD *)&v609[0] + *((_QWORD *)&v609[0] + 1)* (v607[v5] + v493)));
            ++v491;
            v5 = (v5 + 3);
          }
          while (v544 != v491);
          v528 = v528 + v491 - 1;
          v5 = v522;
          v10 = (unint64_t)&v548;
          v478 = v545;
LABEL_1100:
          re::HashBrown<unsigned int,re::GeomMeshWithNGons::NGonToTriangleInfo,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::addNew((_anonymous_namespace_ *)&v560, &v569, (uint64_t)v605);
          if (*(_QWORD *)&v606[0])
          {
            if (v607)
              (*(void (**)(void))(**(_QWORD **)&v606[0] + 40))();
            v607 = 0;
            memset(v606, 0, 24);
            ++DWORD2(v606[1]);
          }
          if (*((_QWORD *)&v605[1] + 1))
          {
            if (*(_QWORD *)&v605[2])
            {
              (*(void (**)(void))(**((_QWORD **)&v605[1] + 1) + 40))();
              v605[2] = 0uLL;
            }
            *((_QWORD *)&v605[1] + 1) = 0;
          }
          v472 = *(_anonymous_namespace_ **)&v605[0];
          if (*(_QWORD *)&v605[0] && *((_QWORD *)&v605[0] + 1))
            v472 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)&v605[0] + 40))();
LABEL_1111:
          v4 = (v530 + v4);
          v17 = (v17 + 1);
          v569 = v17;
          if (v17 >= v478)
          {
LABEL_1112:
            re::GeomIndexMap::GeomIndexMap((uint64_t)v605, (uint64_t)v613);
            re::GeomIndexMap::operator=((uint64_t)&v552 + 8, (uint64_t)v605);
            re::GeomIndexMap::~GeomIndexMap((re::GeomIndexMap *)v605, v495);
            v496 = 0;
            goto LABEL_1140;
          }
        }
        v480 = 0;
        v481 = v609[0];
        v3 = *((_QWORD *)&v605[0] + 1);
        v482 = *(_QWORD *)&v605[1];
        do
        {
          if (v3 == v480)
            goto LABEL_1210;
          *(_DWORD *)(v482 + 4 * v480) = *(_DWORD *)(v481 + *((_QWORD *)&v481 + 1) * (v4 + v480));
          ++v480;
        }
        while (v530 != v480);
        if (v530 > 0xFF)
        {
          v487 = v5;
          re::DynamicArray<unsigned int>::resize(v606, (3 * a2), &re::kInvalidMeshIndex);
          v488 = 0;
          v489 = 2;
          v11 = *(_QWORD *)&v606[1];
          v490 = v607;
          while (1)
          {
            v3 = v488;
            if (v11 <= v488)
              break;
            v490[v488] = 0;
            v5 = v488 + 1;
            if (v11 <= v5)
              goto LABEL_1234;
            v490[v5] = v489 - 1;
            v5 = v488 + 2;
            if (v11 <= v5)
              goto LABEL_1236;
            v490[v5] = v489;
            v488 += 3;
            ++v489;
            if ((int)v3 + 3 >= (3 * a2))
              goto LABEL_1087;
          }
        }
        else
        {
          v11 = 0;
          v483 = 4;
          while (1)
          {
            v3 = v571;
            if (v571 <= v11)
              break;
            v484 = (_DWORD *)((char *)v532
                            + v533
                            * *(unsigned int *)(*(_QWORD *)&v609[0]
                                              + *((_QWORD *)&v609[0] + 1) * (v4 + v11)));
            v486 = v484[1];
            v485 = v484[2];
            *(_DWORD *)(v572 + v483 - 4) = *v484;
            v3 = v571;
            if (v571 <= v11)
              goto LABEL_1233;
            *(_DWORD *)(v572 + v483) = v486;
            v3 = v571;
            if (v571 <= v11)
              goto LABEL_1235;
            *(_DWORD *)(v572 + v483 + 4) = v485;
            ++v11;
            v483 += 16;
            if (v530 == v11)
              goto LABEL_1081;
          }
LABEL_1231:
          v573 = 0;
          v612 = 0u;
          memset(v611, 0, sizeof(v611));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v602 = 136315906;
          *(_QWORD *)&v602[4] = "operator[]";
          *(_WORD *)&v602[12] = 1024;
          *(_DWORD *)&v602[14] = 468;
          *(_WORD *)&v602[18] = 2048;
          *(_QWORD *)&v602[20] = v11;
          v603 = 2048;
          v604 = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v573 = 0;
        v612 = 0u;
        memset(v611, 0, sizeof(v611));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v602 = 136315906;
        *(_QWORD *)&v602[4] = "operator[]";
        *(_WORD *)&v602[12] = 1024;
        *(_DWORD *)&v602[14] = 789;
        *(_WORD *)&v602[18] = 2048;
        *(_QWORD *)&v602[20] = v3;
        v603 = 2048;
        v604 = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_1233:
        v573 = 0;
        v612 = 0u;
        memset(v611, 0, sizeof(v611));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v602 = 136315906;
        *(_QWORD *)&v602[4] = "operator[]";
        *(_WORD *)&v602[12] = 1024;
        *(_DWORD *)&v602[14] = 468;
        *(_WORD *)&v602[18] = 2048;
        *(_QWORD *)&v602[20] = v11;
        v603 = 2048;
        v604 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_1234:
        v573 = 0;
        v612 = 0u;
        memset(v611, 0, sizeof(v611));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v602 = 136315906;
        *(_QWORD *)&v602[4] = "operator[]";
        *(_WORD *)&v602[12] = 1024;
        *(_DWORD *)&v602[14] = 789;
        *(_WORD *)&v602[18] = 2048;
        *(_QWORD *)&v602[20] = v5;
        v603 = 2048;
        v604 = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_1235:
        v573 = 0;
        v612 = 0u;
        memset(v611, 0, sizeof(v611));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v602 = 136315906;
        *(_QWORD *)&v602[4] = "operator[]";
        *(_WORD *)&v602[12] = 1024;
        *(_DWORD *)&v602[14] = 468;
        *(_WORD *)&v602[18] = 2048;
        *(_QWORD *)&v602[20] = v11;
        v603 = 2048;
        v604 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_1236:
        v573 = 0;
        v612 = 0u;
        memset(v611, 0, sizeof(v611));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v602 = 136315906;
        *(_QWORD *)&v602[4] = "operator[]";
        *(_WORD *)&v602[12] = 1024;
        *(_DWORD *)&v602[14] = 789;
        *(_WORD *)&v602[18] = 2048;
        *(_QWORD *)&v602[20] = v5;
        v603 = 2048;
        v604 = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_1237:
        *(_QWORD *)v602 = 0;
        memset(v606, 0, sizeof(v606));
        memset(v605, 0, sizeof(v605));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v611[0]) = 136315906;
        *(_QWORD *)((char *)v611 + 4) = "operator[]";
        WORD6(v611[0]) = 1024;
        *(_DWORD *)((char *)v611 + 14) = 789;
        WORD1(v611[1]) = 2048;
        *(_QWORD *)((char *)&v611[1] + 4) = v3;
        WORD6(v611[1]) = 2048;
        *(_QWORD *)((char *)&v611[1] + 14) = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_1238:
        v573 = 0;
        v612 = 0u;
        memset(v611, 0, sizeof(v611));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v602 = 136315906;
        *(_QWORD *)&v602[4] = "operator[]";
        *(_WORD *)&v602[12] = 1024;
        *(_DWORD *)&v602[14] = 468;
        *(_WORD *)&v602[18] = 2048;
        *(_QWORD *)&v602[20] = 0;
        v603 = 2048;
        v604 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_1239:
        v573 = 0;
        v612 = 0u;
        memset(v611, 0, sizeof(v611));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v602 = 136315906;
        *(_QWORD *)&v602[4] = "operator[]";
        *(_WORD *)&v602[12] = 1024;
        *(_DWORD *)&v602[14] = 789;
        *(_WORD *)&v602[18] = 2048;
        *(_QWORD *)&v602[20] = 0;
        v603 = 2048;
        v604 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_1240:
        v573 = 0;
        v612 = 0u;
        memset(v611, 0, sizeof(v611));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v602 = 136315906;
        *(_QWORD *)&v602[4] = "operator[]";
        *(_WORD *)&v602[12] = 1024;
        *(_DWORD *)&v602[14] = 789;
        *(_WORD *)&v602[18] = 2048;
        *(_QWORD *)&v602[20] = 1;
        v603 = 2048;
        v604 = 1;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_1241:
        v573 = 0;
        v612 = 0u;
        memset(v611, 0, sizeof(v611));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v602 = 136315906;
        *(_QWORD *)&v602[4] = "operator[]";
        *(_WORD *)&v602[12] = 1024;
        *(_DWORD *)&v602[14] = 789;
        *(_WORD *)&v602[18] = 2048;
        *(_QWORD *)&v602[20] = 2;
        v603 = 2048;
        v604 = 2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
    goto LABEL_1192;
  }
  v30 = "No positions specified for model.";
LABEL_33:
  v31 = 0;
  v3 = *((_QWORD *)&v578 + 1);
  a2 = v578;
  v4 = (unint64_t)__s[0];
  v17 = (unint64_t)__s[1];
  while (2)
  {
    v32 = *(_anonymous_namespace_ **)&v609[2];
    if (*(_QWORD *)&v609[2])
    {
      if (*((_QWORD *)&v609[2] + 1))
      {
        v11 = (unint64_t)&v609[2] + 8;
        v32 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)&v609[2] + 40))(*(_QWORD *)&v609[2], *(_QWORD *)&v609[3]);
        *((_QWORD *)&v609[2] + 1) = 0;
        *(_QWORD *)&v609[3] = 0;
      }
      *(_QWORD *)&v609[2] = 0;
    }
    if (*((_QWORD *)&v609[1] + 1))

    v12 = v10 + 760;
    if (!v31)
    {
      *(_BYTE *)v542 = 0;
      *(_QWORD *)(v542 + 8) = 100;
      *(_QWORD *)(v542 + 16) = &re::AssetErrorCategory(void)::instance;
      *(_QWORD *)(v542 + 40) = a2;
      *(_QWORD *)(v542 + 48) = v3;
      *(_QWORD *)(v542 + 24) = v4;
      *(_QWORD *)(v542 + 32) = v17;
      goto LABEL_971;
    }
    v33 = *(_QWORD *)(v5 + 40);
    if (v33)
      v532 = *(_QWORD **)(v33 + 40);
    else
      v532 = 0;
    v17 = *(_QWORD *)(v5 + 112);
    v539 = (_QWORD *)(v10 + 760);
    if (!v17)
      goto LABEL_881;
    v19 = 0;
    v543 = *(_QWORD *)(v5 + 112);
LABEL_47:
    v34 = *(_QWORD *)(v5 + 112);
    if (v34 <= v19)
    {
      *(_QWORD *)&v611[0] = 0;
      v581 = 0u;
      v580 = 0u;
      v579 = 0u;
      v578 = 0u;
      *(_OWORD *)__s = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v605[0]) = 136315906;
      *(_QWORD *)((char *)v605 + 4) = "operator[]";
      WORD6(v605[0]) = 1024;
      *(_DWORD *)((char *)v605 + 14) = 797;
      WORD1(v605[1]) = 2048;
      *(_QWORD *)((char *)&v605[1] + 4) = v19;
      WORD6(v605[1]) = 2048;
      *(_QWORD *)((char *)&v605[1] + 14) = v34;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_1185;
    }
    a2 = *(_QWORD *)(v5 + 128);
    v10 = a2 + 56 * v19;
    v35 = re::DynamicString::operator!=(v10, (uint64_t)v602);
    if (!v35)
      goto LABEL_102;
    v36 = a2 + 56 * v19;
    v39 = *(_QWORD *)(v36 + 40);
    v38 = (char **)(v36 + 40);
    v37 = v39;
    if (!v39)
    {
      v41 = "Null attribute.";
LABEL_98:
      v73 = v578;
      v74 = __s[0];
      v3 = (unint64_t)__s[1];
      goto LABEL_99;
    }
    switch(*(_BYTE *)(a2 + 56 * v19 + 32))
    {
      case 0:
        v40 = *(_QWORD *)(a2 + 56 * v19 + 48);
        if (!v40)
          v40 = v37;
        if (*(_QWORD *)(v40 + 40) != 1)
          goto LABEL_97;
        goto LABEL_61;
      case 1:
        v42 = v549;
        goto LABEL_58;
      case 2:
        v42 = v564;
LABEL_58:
        v43 = *(_QWORD *)(a2 + 56 * v19 + 48);
        if (!v43)
          v43 = v37;
        if (*(_QWORD *)(v43 + 40) == v42)
          goto LABEL_61;
        goto LABEL_97;
      case 3:
        v72 = *(_QWORD *)(a2 + 56 * v19 + 48);
        if (!v72)
          v72 = v37;
        if (*(_QWORD **)(v72 + 40) != v532)
        {
LABEL_97:
          v41 = "Incorrect number of attribute values specified.";
          goto LABEL_98;
        }
        v44 = 1;
LABEL_62:
        v45 = *(char *)(v37 + 33);
        if (v45 >= 0xC)
        {
          v41 = "Unexpected attribute type.";
          goto LABEL_98;
        }
        v540 = byte_2261917A4[v45];
        if (!v44)
        {
          if ((*(_QWORD *)(v10 + 8) & 1) != 0)
            v75 = *(char **)(v10 + 16);
          else
            v75 = (char *)(v10 + 9);
          v76 = re::GeomMesh::addAttribute((uint64_t)&v548, v75, *(unsigned __int8 *)(a2 + 56 * v19 + 32), byte_2261917A4[v45]);
          v77 = (unsigned __int8 *)v76;
          if (!v76)
            goto LABEL_191;
LABEL_108:
          switch((int)v540)
          {
            case 0:
              v10 = v77[16];
              if ((_DWORD)v10 == 4)
              {
                v78 = *(char **)(a2 + 56 * v19 + 48);
                if (v78 || (v78 = *v38) != 0)
                  v79 = *((_QWORD *)v78 + 5);
                else
                  v79 = 0;
                (*(void (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v77 + 24))(v77, v79);
              }
              v80 = *v38;
              __s[0] = v80;
              if (v80)
                v81 = v80 + 8;
              re::GeomModelDescriptor::makeConvertedValues<short>((_anonymous_namespace_ **)__s, v605);
              if (__s[0])

              v4 = v5;
              if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v77 + 16))(v77))
              {
                v3 = re::internal::GeomTypedAttribute<short>::operator[]((uint64_t)v77, 0);
                v5 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v77 + 16))(v77);
              }
              else
              {
                v5 = 0;
                v3 = 0;
              }
              v17 = v543;
              v165 = *(_QWORD *)(a2 + 56 * v19 + 48);
              v166 = (_DWORD)v10 == 3 || v165 == 0;
              if (!v166)
              {
                __s[0] = *(char **)(a2 + 56 * v19 + 48);
                v176 = (id)(v165 + 8);
                re::GeomModelDescriptor::makeConvertedValues<unsigned int>((_anonymous_namespace_ **)__s, v611);
                if (__s[0])

                v178 = v605[1];
                v179 = v611[1];
                v180 = LODWORD(v611[1]);
                if (LODWORD(v611[1]))
                {
                  v11 = 0;
                  v182 = *((_QWORD *)&v611[0] + 1);
                  v181 = *(unsigned int **)&v611[0];
                  v12 = v5;
                  v183 = v605[0];
                  do
                  {
                    v184 = *v181;
                    if (v184 < v178)
                    {
                      if (v11 >= v5)
                        goto LABEL_1220;
                      *(_WORD *)(v3 + 2 * v11) = *(_WORD *)(v183 + *((_QWORD *)&v183 + 1) * v184);
                    }
                    v181 = (unsigned int *)((char *)v181 + v182);
                    ++v11;
                  }
                  while (v180 != v11);
                }
                v12 = (unint64_t)v539;
                if ((_DWORD)v10 == 2 && v5 > v179)
                {
                  while (2)
                  {
                    LODWORD(__s[0]) = v180;
                    if (v554 == 2)
                    {
                      v186 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(v539, (unsigned int *)__s);
                      if (v186 != -1)
                      {
                        v185 = *(_DWORD *)(v556 + 8 * v186 + 4);
                        goto LABEL_332;
                      }
                    }
                    else
                    {
                      if (v554 != 1)
                      {
                        if (v554)
                          goto LABEL_1249;
                        if (v180 >= v555)
                          v185 = -1;
                        else
                          v185 = v180;
LABEL_332:
                        v187 = *(unsigned int *)(*(_QWORD *)&v611[0] + *((_QWORD *)&v611[0] + 1) * v185);
                        if (v187 < v178)
                          *(_WORD *)(v3 + 2 * v180) = *(_WORD *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v187);
                        if ((_DWORD)v5 == (_DWORD)++v180)
                          goto LABEL_790;
                        continue;
                      }
                      if ((unint64_t)v557 > v180)
                      {
                        v185 = *(_DWORD *)(v558 + 4 * v180);
                        goto LABEL_332;
                      }
                    }
                    break;
                  }
                  v185 = -1;
                  goto LABEL_332;
                }
LABEL_790:
                if (*(_QWORD *)&v611[2])
                {
                  if (*((_QWORD *)&v611[2] + 1))
                  {
                    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v611[2] + 40))(*(_QWORD *)&v611[2], *(_QWORD *)&v611[3]);
                    *((_QWORD *)&v611[2] + 1) = 0;
                    *(_QWORD *)&v611[3] = 0;
                  }
                  *(_QWORD *)&v611[2] = 0;
                }
                if (*((_QWORD *)&v611[1] + 1))

LABEL_796:
                v5 = v4;
                if (*(_QWORD *)&v605[2])
                {
                  if (*((_QWORD *)&v605[2] + 1))
                  {
                    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v605[2] + 40))(*(_QWORD *)&v605[2], *(_QWORD *)&v606[0]);
                    *((_QWORD *)&v605[2] + 1) = 0;
                    *(_QWORD *)&v606[0] = 0;
                  }
                  *(_QWORD *)&v605[2] = 0;
                }
                v367 = *((_QWORD *)&v605[1] + 1);
                if (!*((_QWORD *)&v605[1] + 1))
                  goto LABEL_102;
LABEL_801:

                goto LABEL_102;
              }
              v167 = v605[1];
              v168 = LODWORD(v605[1]);
              if (LODWORD(v605[1]))
              {
                v170 = *((_QWORD *)&v605[0] + 1);
                v169 = *(_WORD **)&v605[0];
                a2 = v5;
                v171 = v5;
                v172 = LODWORD(v605[1]);
                v173 = (_WORD *)v3;
                while (v171)
                {
                  *v173++ = *v169;
                  v169 = (_WORD *)((char *)v169 + v170);
                  --v171;
                  if (!--v172)
                    goto LABEL_296;
                }
                goto LABEL_1199;
              }
LABEL_296:
              if ((_DWORD)v10 != 2 || v5 <= v167)
                goto LABEL_796;
              while (2)
              {
                LODWORD(__s[0]) = v168;
                if (v554 == 2)
                {
                  v175 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)v12, (unsigned int *)__s);
                  if (v175 != -1)
                  {
                    v174 = *(_DWORD *)(v556 + 8 * v175 + 4);
                    goto LABEL_309;
                  }
                }
                else
                {
                  if (v554 != 1)
                  {
                    if (v554)
                      goto LABEL_1248;
                    if (v168 >= v555)
                      v174 = -1;
                    else
                      v174 = v168;
LABEL_309:
                    *(_WORD *)(v3 + 2 * v168++) = *(_WORD *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v174);
                    if ((_DWORD)v5 == (_DWORD)v168)
                      goto LABEL_796;
                    continue;
                  }
                  if ((unint64_t)v557 > v168)
                  {
                    v174 = *(_DWORD *)(v558 + 4 * v168);
                    goto LABEL_309;
                  }
                }
                break;
              }
              v174 = -1;
              goto LABEL_309;
            case 1:
              v10 = v77[16];
              if ((_DWORD)v10 == 4)
              {
                v121 = *(char **)(a2 + 56 * v19 + 48);
                if (v121 || (v121 = *v38) != 0)
                  v122 = *((_QWORD *)v121 + 5);
                else
                  v122 = 0;
                (*(void (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v77 + 24))(v77, v122);
              }
              v123 = *v38;
              __s[0] = v123;
              if (v123)
                v124 = v123 + 8;
              re::GeomModelDescriptor::makeConvertedValues<unsigned short>((_anonymous_namespace_ **)__s, v605);
              if (__s[0])

              v4 = v5;
              if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v77 + 16))(v77))
              {
                v3 = re::internal::GeomTypedAttribute<short>::operator[]((uint64_t)v77, 0);
                v5 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v77 + 16))(v77);
              }
              else
              {
                v5 = 0;
                v3 = 0;
              }
              v17 = v543;
              v188 = *(_QWORD *)(a2 + 56 * v19 + 48);
              if ((_DWORD)v10 != 3 && v188 != 0)
              {
                __s[0] = *(char **)(a2 + 56 * v19 + 48);
                v199 = (id)(v188 + 8);
                re::GeomModelDescriptor::makeConvertedValues<unsigned int>((_anonymous_namespace_ **)__s, v611);
                if (__s[0])

                v201 = v605[1];
                v202 = v611[1];
                v203 = LODWORD(v611[1]);
                if (LODWORD(v611[1]))
                {
                  v11 = 0;
                  v205 = *((_QWORD *)&v611[0] + 1);
                  v204 = *(unsigned int **)&v611[0];
                  v12 = v5;
                  v206 = v605[0];
                  do
                  {
                    v207 = *v204;
                    if (v207 < v201)
                    {
                      if (v11 >= v5)
                        goto LABEL_1221;
                      *(_WORD *)(v3 + 2 * v11) = *(_WORD *)(v206 + *((_QWORD *)&v206 + 1) * v207);
                    }
                    v204 = (unsigned int *)((char *)v204 + v205);
                    ++v11;
                  }
                  while (v203 != v11);
                }
                v12 = (unint64_t)v539;
                if ((_DWORD)v10 != 2 || v5 <= v202)
                  goto LABEL_790;
                while (1)
                {
                  LODWORD(__s[0]) = v203;
                  if (v554 == 2)
                  {
                    v209 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(v539, (unsigned int *)__s);
                    if (v209 == -1)
                      goto LABEL_381;
                    v208 = *(_DWORD *)(v556 + 8 * v209 + 4);
                  }
                  else
                  {
                    if (v554 != 1)
                    {
                      if (v554)
                        goto LABEL_1251;
                      if (v203 >= v555)
                        v208 = -1;
                      else
                        v208 = v203;
                      goto LABEL_382;
                    }
                    if ((unint64_t)v557 <= v203)
                    {
LABEL_381:
                      v208 = -1;
                      goto LABEL_382;
                    }
                    v208 = *(_DWORD *)(v558 + 4 * v203);
                  }
LABEL_382:
                  v210 = *(unsigned int *)(*(_QWORD *)&v611[0] + *((_QWORD *)&v611[0] + 1) * v208);
                  if (v210 < v201)
                    *(_WORD *)(v3 + 2 * v203) = *(_WORD *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v210);
                  if ((_DWORD)v5 == (_DWORD)++v203)
                    goto LABEL_790;
                }
              }
              v190 = v605[1];
              v191 = LODWORD(v605[1]);
              if (LODWORD(v605[1]))
              {
                v193 = *((_QWORD *)&v605[0] + 1);
                v192 = *(_WORD **)&v605[0];
                a2 = v5;
                v194 = v5;
                v195 = LODWORD(v605[1]);
                v196 = (_WORD *)v3;
                while (v194)
                {
                  *v196++ = *v192;
                  v192 = (_WORD *)((char *)v192 + v193);
                  --v194;
                  if (!--v195)
                    goto LABEL_346;
                }
                goto LABEL_1200;
              }
LABEL_346:
              if ((_DWORD)v10 != 2 || v5 <= v190)
                goto LABEL_796;
              while (1)
              {
                LODWORD(__s[0]) = v191;
                if (v554 == 2)
                {
                  v198 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)v12, (unsigned int *)__s);
                  if (v198 == -1)
                    goto LABEL_358;
                  v197 = *(_DWORD *)(v556 + 8 * v198 + 4);
                }
                else
                {
                  if (v554 != 1)
                  {
                    if (v554)
                      goto LABEL_1250;
                    if (v191 >= v555)
                      v197 = -1;
                    else
                      v197 = v191;
                    goto LABEL_359;
                  }
                  if ((unint64_t)v557 <= v191)
                  {
LABEL_358:
                    v197 = -1;
                    goto LABEL_359;
                  }
                  v197 = *(_DWORD *)(v558 + 4 * v191);
                }
LABEL_359:
                *(_WORD *)(v3 + 2 * v191++) = *(_WORD *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v197);
                if ((_DWORD)v5 == (_DWORD)v191)
                  goto LABEL_796;
              }
            case 2:
              v10 = v77[16];
              if ((_DWORD)v10 == 4)
              {
                v126 = *(char **)(a2 + 56 * v19 + 48);
                if (v126 || (v126 = *v38) != 0)
                  v127 = *((_QWORD *)v126 + 5);
                else
                  v127 = 0;
                (*(void (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v77 + 24))(v77, v127);
              }
              v128 = *v38;
              __s[0] = v128;
              if (v128)
                v129 = v128 + 8;
              re::GeomModelDescriptor::makeConvertedValues<int>((_anonymous_namespace_ **)__s, v605);
              if (__s[0])

              v4 = v5;
              if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v77 + 16))(v77))
              {
                v3 = re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v77, 0);
                v5 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v77 + 16))(v77);
              }
              else
              {
                v5 = 0;
                v3 = 0;
              }
              v17 = v543;
              v211 = *(_QWORD *)(a2 + 56 * v19 + 48);
              if ((_DWORD)v10 != 3 && v211 != 0)
              {
                __s[0] = *(char **)(a2 + 56 * v19 + 48);
                v222 = (id)(v211 + 8);
                re::GeomModelDescriptor::makeConvertedValues<unsigned int>((_anonymous_namespace_ **)__s, v611);
                if (__s[0])

                v224 = v605[1];
                v225 = v611[1];
                v226 = LODWORD(v611[1]);
                if (LODWORD(v611[1]))
                {
                  v11 = 0;
                  v228 = *((_QWORD *)&v611[0] + 1);
                  v227 = *(unsigned int **)&v611[0];
                  v12 = v5;
                  v229 = v605[0];
                  do
                  {
                    v230 = *v227;
                    if (v230 < v224)
                    {
                      if (v11 >= v5)
                        goto LABEL_1222;
                      *(_DWORD *)(v3 + 4 * v11) = *(_DWORD *)(v229 + *((_QWORD *)&v229 + 1) * v230);
                    }
                    v227 = (unsigned int *)((char *)v227 + v228);
                    ++v11;
                  }
                  while (v226 != v11);
                }
                v12 = (unint64_t)v539;
                if ((_DWORD)v10 != 2 || v5 <= v225)
                  goto LABEL_790;
                while (1)
                {
                  LODWORD(__s[0]) = v226;
                  if (v554 == 2)
                  {
                    v232 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(v539, (unsigned int *)__s);
                    if (v232 == -1)
                      goto LABEL_431;
                    v231 = *(_DWORD *)(v556 + 8 * v232 + 4);
                  }
                  else
                  {
                    if (v554 != 1)
                    {
                      if (v554)
                        goto LABEL_1253;
                      if (v226 >= v555)
                        v231 = -1;
                      else
                        v231 = v226;
                      goto LABEL_432;
                    }
                    if ((unint64_t)v557 <= v226)
                    {
LABEL_431:
                      v231 = -1;
                      goto LABEL_432;
                    }
                    v231 = *(_DWORD *)(v558 + 4 * v226);
                  }
LABEL_432:
                  v233 = *(unsigned int *)(*(_QWORD *)&v611[0] + *((_QWORD *)&v611[0] + 1) * v231);
                  if (v233 < v224)
                    *(_DWORD *)(v3 + 4 * v226) = *(_DWORD *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v233);
                  if ((_DWORD)v5 == (_DWORD)++v226)
                    goto LABEL_790;
                }
              }
              v213 = v605[1];
              v214 = LODWORD(v605[1]);
              if (LODWORD(v605[1]))
              {
                v216 = *((_QWORD *)&v605[0] + 1);
                v215 = *(_DWORD **)&v605[0];
                a2 = v5;
                v217 = v5;
                v218 = LODWORD(v605[1]);
                v219 = (_DWORD *)v3;
                while (v217)
                {
                  *v219++ = *v215;
                  v215 = (_DWORD *)((char *)v215 + v216);
                  --v217;
                  if (!--v218)
                    goto LABEL_396;
                }
                goto LABEL_1201;
              }
LABEL_396:
              if ((_DWORD)v10 != 2 || v5 <= v213)
                goto LABEL_796;
              while (1)
              {
                LODWORD(__s[0]) = v214;
                if (v554 == 2)
                {
                  v221 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)v12, (unsigned int *)__s);
                  if (v221 == -1)
                    goto LABEL_408;
                  v220 = *(_DWORD *)(v556 + 8 * v221 + 4);
                }
                else
                {
                  if (v554 != 1)
                  {
                    if (v554)
                      goto LABEL_1252;
                    if (v214 >= v555)
                      v220 = -1;
                    else
                      v220 = v214;
                    goto LABEL_409;
                  }
                  if ((unint64_t)v557 <= v214)
                  {
LABEL_408:
                    v220 = -1;
                    goto LABEL_409;
                  }
                  v220 = *(_DWORD *)(v558 + 4 * v214);
                }
LABEL_409:
                *(_DWORD *)(v3 + 4 * v214++) = *(_DWORD *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v220);
                if ((_DWORD)v5 == (_DWORD)v214)
                  goto LABEL_796;
              }
            case 3:
              v10 = v77[16];
              if ((_DWORD)v10 == 4)
              {
                v131 = *(char **)(a2 + 56 * v19 + 48);
                if (v131 || (v131 = *v38) != 0)
                  v132 = *((_QWORD *)v131 + 5);
                else
                  v132 = 0;
                (*(void (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v77 + 24))(v77, v132);
              }
              v133 = *v38;
              __s[0] = v133;
              if (v133)
                v134 = v133 + 8;
              re::GeomModelDescriptor::makeConvertedValues<unsigned int>((_anonymous_namespace_ **)__s, v605);
              if (__s[0])

              v4 = v5;
              if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v77 + 16))(v77))
              {
                v3 = re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v77, 0);
                v5 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v77 + 16))(v77);
              }
              else
              {
                v5 = 0;
                v3 = 0;
              }
              v17 = v543;
              v234 = *(_QWORD *)(a2 + 56 * v19 + 48);
              if ((_DWORD)v10 != 3 && v234 != 0)
              {
                __s[0] = *(char **)(a2 + 56 * v19 + 48);
                v245 = (id)(v234 + 8);
                re::GeomModelDescriptor::makeConvertedValues<unsigned int>((_anonymous_namespace_ **)__s, v611);
                if (__s[0])

                v247 = v605[1];
                v248 = v611[1];
                v249 = LODWORD(v611[1]);
                if (LODWORD(v611[1]))
                {
                  v11 = 0;
                  v251 = *((_QWORD *)&v611[0] + 1);
                  v250 = *(unsigned int **)&v611[0];
                  v12 = v5;
                  v252 = v605[0];
                  do
                  {
                    v253 = *v250;
                    if (v253 < v247)
                    {
                      if (v11 >= v5)
                        goto LABEL_1223;
                      *(_DWORD *)(v3 + 4 * v11) = *(_DWORD *)(v252 + *((_QWORD *)&v252 + 1) * v253);
                    }
                    v250 = (unsigned int *)((char *)v250 + v251);
                    ++v11;
                  }
                  while (v249 != v11);
                }
                v12 = (unint64_t)v539;
                if ((_DWORD)v10 != 2 || v5 <= v248)
                  goto LABEL_790;
                while (1)
                {
                  LODWORD(__s[0]) = v249;
                  if (v554 == 2)
                  {
                    v255 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(v539, (unsigned int *)__s);
                    if (v255 == -1)
                      goto LABEL_481;
                    v254 = *(_DWORD *)(v556 + 8 * v255 + 4);
                  }
                  else
                  {
                    if (v554 != 1)
                    {
                      if (v554)
                        goto LABEL_1255;
                      if (v249 >= v555)
                        v254 = -1;
                      else
                        v254 = v249;
                      goto LABEL_482;
                    }
                    if ((unint64_t)v557 <= v249)
                    {
LABEL_481:
                      v254 = -1;
                      goto LABEL_482;
                    }
                    v254 = *(_DWORD *)(v558 + 4 * v249);
                  }
LABEL_482:
                  v256 = *(unsigned int *)(*(_QWORD *)&v611[0] + *((_QWORD *)&v611[0] + 1) * v254);
                  if (v256 < v247)
                    *(_DWORD *)(v3 + 4 * v249) = *(_DWORD *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v256);
                  if ((_DWORD)v5 == (_DWORD)++v249)
                    goto LABEL_790;
                }
              }
              v236 = v605[1];
              v237 = LODWORD(v605[1]);
              if (LODWORD(v605[1]))
              {
                v239 = *((_QWORD *)&v605[0] + 1);
                v238 = *(_DWORD **)&v605[0];
                a2 = v5;
                v240 = v5;
                v241 = LODWORD(v605[1]);
                v242 = (_DWORD *)v3;
                while (v240)
                {
                  *v242++ = *v238;
                  v238 = (_DWORD *)((char *)v238 + v239);
                  --v240;
                  if (!--v241)
                    goto LABEL_446;
                }
                goto LABEL_1202;
              }
LABEL_446:
              if ((_DWORD)v10 != 2 || v5 <= v236)
                goto LABEL_796;
              while (1)
              {
                LODWORD(__s[0]) = v237;
                if (v554 == 2)
                {
                  v244 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)v12, (unsigned int *)__s);
                  if (v244 == -1)
                    goto LABEL_458;
                  v243 = *(_DWORD *)(v556 + 8 * v244 + 4);
                }
                else
                {
                  if (v554 != 1)
                  {
                    if (v554)
                      goto LABEL_1254;
                    if (v237 >= v555)
                      v243 = -1;
                    else
                      v243 = v237;
                    goto LABEL_459;
                  }
                  if ((unint64_t)v557 <= v237)
                  {
LABEL_458:
                    v243 = -1;
                    goto LABEL_459;
                  }
                  v243 = *(_DWORD *)(v558 + 4 * v237);
                }
LABEL_459:
                *(_DWORD *)(v3 + 4 * v237++) = *(_DWORD *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v243);
                if ((_DWORD)v5 == (_DWORD)v237)
                  goto LABEL_796;
              }
            case 4:
              v12 = v77[16];
              if ((_DWORD)v12 == 4)
              {
                v136 = *(char **)(a2 + 56 * v19 + 48);
                if (v136 || (v136 = *v38) != 0)
                  v137 = *((_QWORD *)v136 + 5);
                else
                  v137 = 0;
                (*(void (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v77 + 24))(v77, v137);
              }
              v4 = v5;
              re::GeomModelDescriptor::AttributeData::makeConvertedValues<float>(v10, (uint64_t)v605);
              if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v77 + 16))(v77))
              {
                v3 = re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v77, 0);
                v5 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v77 + 16))(v77);
              }
              else
              {
                v5 = 0;
                v3 = 0;
              }
              v17 = v543;
              v257 = *(_QWORD *)(a2 + 56 * v19 + 48);
              if ((_DWORD)v12 != 3 && v257 != 0)
              {
                __s[0] = *(char **)(a2 + 56 * v19 + 48);
                v268 = (id)(v257 + 8);
                re::GeomModelDescriptor::makeConvertedValues<unsigned int>((_anonymous_namespace_ **)__s, v611);
                if (__s[0])

                v270 = v605[1];
                v271 = v611[1];
                v272 = LODWORD(v611[1]);
                if (LODWORD(v611[1]))
                {
                  v11 = 0;
                  v274 = *((_QWORD *)&v611[0] + 1);
                  v273 = *(unsigned int **)&v611[0];
                  v10 = v5;
                  v275 = v605[0];
                  do
                  {
                    v276 = *v273;
                    if (v276 < v270)
                    {
                      if (v11 >= v5)
                        goto LABEL_1224;
                      *(_DWORD *)(v3 + 4 * v11) = *(_DWORD *)(v275 + *((_QWORD *)&v275 + 1) * v276);
                    }
                    v273 = (unsigned int *)((char *)v273 + v274);
                    ++v11;
                  }
                  while (v272 != v11);
                }
                v166 = (_DWORD)v12 == 2;
                v12 = (unint64_t)v539;
                if (!v166 || v5 <= v271)
                  goto LABEL_790;
                while (1)
                {
                  LODWORD(__s[0]) = v272;
                  if (v554 == 2)
                  {
                    v278 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(v539, (unsigned int *)__s);
                    if (v278 == -1)
                      goto LABEL_533;
                    v277 = *(_DWORD *)(v556 + 8 * v278 + 4);
                  }
                  else
                  {
                    if (v554 != 1)
                    {
                      if (v554)
                        goto LABEL_1257;
                      if (v272 >= v555)
                        v277 = -1;
                      else
                        v277 = v272;
                      goto LABEL_534;
                    }
                    if ((unint64_t)v557 <= v272)
                    {
LABEL_533:
                      v277 = -1;
                      goto LABEL_534;
                    }
                    v277 = *(_DWORD *)(v558 + 4 * v272);
                  }
LABEL_534:
                  v279 = *(unsigned int *)(*(_QWORD *)&v611[0] + *((_QWORD *)&v611[0] + 1) * v277);
                  if (v279 < v270)
                    *(_DWORD *)(v3 + 4 * v272) = *(_DWORD *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v279);
                  if ((_DWORD)v5 == (_DWORD)++v272)
                    goto LABEL_790;
                }
              }
              v259 = v605[1];
              v260 = LODWORD(v605[1]);
              if (LODWORD(v605[1]))
              {
                v262 = *((_QWORD *)&v605[0] + 1);
                v261 = *(_DWORD **)&v605[0];
                a2 = v5;
                v263 = v5;
                v264 = LODWORD(v605[1]);
                v265 = (_DWORD *)v3;
                while (v263)
                {
                  *v265++ = *v261;
                  v261 = (_DWORD *)((char *)v261 + v262);
                  --v263;
                  if (!--v264)
                    goto LABEL_496;
                }
                goto LABEL_1203;
              }
LABEL_496:
              v166 = (_DWORD)v12 == 2;
              v12 = (unint64_t)v539;
              if (!v166 || v5 <= v259)
                goto LABEL_796;
              while (1)
              {
                LODWORD(__s[0]) = v260;
                if (v554 == 2)
                {
                  v267 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(v539, (unsigned int *)__s);
                  if (v267 == -1)
                    goto LABEL_509;
                  v266 = *(_DWORD *)(v556 + 8 * v267 + 4);
                }
                else
                {
                  if (v554 != 1)
                  {
                    if (v554)
                      goto LABEL_1256;
                    if (v260 >= v555)
                      v266 = -1;
                    else
                      v266 = v260;
                    goto LABEL_510;
                  }
                  if ((unint64_t)v557 <= v260)
                  {
LABEL_509:
                    v266 = -1;
                    goto LABEL_510;
                  }
                  v266 = *(_DWORD *)(v558 + 4 * v260);
                }
LABEL_510:
                *(_DWORD *)(v3 + 4 * v260++) = *(_DWORD *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v266);
                if ((_DWORD)v5 == (_DWORD)v260)
                  goto LABEL_796;
              }
            case 5:
              v12 = v77[16];
              if ((_DWORD)v12 == 4)
              {
                v139 = *(char **)(a2 + 56 * v19 + 48);
                if (v139 || (v139 = *v38) != 0)
                  v140 = *((_QWORD *)v139 + 5);
                else
                  v140 = 0;
                (*(void (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v77 + 24))(v77, v140);
              }
              v4 = v5;
              re::GeomModelDescriptor::AttributeData::makeConvertedValues<double>(v10, (uint64_t)v605);
              if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v77 + 16))(v77))
              {
                v3 = re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)v77, 0);
                v5 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v77 + 16))(v77);
              }
              else
              {
                v5 = 0;
                v3 = 0;
              }
              v17 = v543;
              v280 = *(_QWORD *)(a2 + 56 * v19 + 48);
              if ((_DWORD)v12 != 3 && v280 != 0)
              {
                __s[0] = *(char **)(a2 + 56 * v19 + 48);
                v291 = (id)(v280 + 8);
                re::GeomModelDescriptor::makeConvertedValues<unsigned int>((_anonymous_namespace_ **)__s, v611);
                if (__s[0])

                v293 = v605[1];
                v294 = v611[1];
                v295 = LODWORD(v611[1]);
                if (LODWORD(v611[1]))
                {
                  v11 = 0;
                  v297 = *((_QWORD *)&v611[0] + 1);
                  v296 = *(unsigned int **)&v611[0];
                  v10 = v5;
                  v298 = v605[0];
                  do
                  {
                    v299 = *v296;
                    if (v299 < v293)
                    {
                      if (v11 >= v5)
                        goto LABEL_1225;
                      *(_QWORD *)(v3 + 8 * v11) = *(_QWORD *)(v298 + *((_QWORD *)&v298 + 1) * v299);
                    }
                    v296 = (unsigned int *)((char *)v296 + v297);
                    ++v11;
                  }
                  while (v295 != v11);
                }
                v166 = (_DWORD)v12 == 2;
                v12 = (unint64_t)v539;
                if (!v166 || v5 <= v294)
                  goto LABEL_790;
                while (1)
                {
                  LODWORD(__s[0]) = v295;
                  if (v554 == 2)
                  {
                    v301 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(v539, (unsigned int *)__s);
                    if (v301 == -1)
                      goto LABEL_585;
                    v300 = *(_DWORD *)(v556 + 8 * v301 + 4);
                  }
                  else
                  {
                    if (v554 != 1)
                    {
                      if (v554)
                        goto LABEL_1259;
                      if (v295 >= v555)
                        v300 = -1;
                      else
                        v300 = v295;
                      goto LABEL_586;
                    }
                    if ((unint64_t)v557 <= v295)
                    {
LABEL_585:
                      v300 = -1;
                      goto LABEL_586;
                    }
                    v300 = *(_DWORD *)(v558 + 4 * v295);
                  }
LABEL_586:
                  v302 = *(unsigned int *)(*(_QWORD *)&v611[0] + *((_QWORD *)&v611[0] + 1) * v300);
                  if (v302 < v293)
                    *(_QWORD *)(v3 + 8 * v295) = *(_QWORD *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v302);
                  if ((_DWORD)v5 == (_DWORD)++v295)
                    goto LABEL_790;
                }
              }
              v282 = v605[1];
              v283 = LODWORD(v605[1]);
              if (LODWORD(v605[1]))
              {
                v285 = *((_QWORD *)&v605[0] + 1);
                v284 = *(_QWORD **)&v605[0];
                a2 = v5;
                v286 = v5;
                v287 = LODWORD(v605[1]);
                v288 = (_QWORD *)v3;
                while (v286)
                {
                  *v288++ = *v284;
                  v284 = (_QWORD *)((char *)v284 + v285);
                  --v286;
                  if (!--v287)
                    goto LABEL_548;
                }
                goto LABEL_1204;
              }
LABEL_548:
              v166 = (_DWORD)v12 == 2;
              v12 = (unint64_t)v539;
              if (!v166 || v5 <= v282)
                goto LABEL_796;
              while (1)
              {
                LODWORD(__s[0]) = v283;
                if (v554 == 2)
                {
                  v290 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(v539, (unsigned int *)__s);
                  if (v290 == -1)
                    goto LABEL_561;
                  v289 = *(_DWORD *)(v556 + 8 * v290 + 4);
                }
                else
                {
                  if (v554 != 1)
                  {
                    if (v554)
                      goto LABEL_1258;
                    if (v283 >= v555)
                      v289 = -1;
                    else
                      v289 = v283;
                    goto LABEL_562;
                  }
                  if ((unint64_t)v557 <= v283)
                  {
LABEL_561:
                    v289 = -1;
                    goto LABEL_562;
                  }
                  v289 = *(_DWORD *)(v558 + 4 * v283);
                }
LABEL_562:
                *(_QWORD *)(v3 + 8 * v283++) = *(_QWORD *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v289);
                if ((_DWORD)v5 == (_DWORD)v283)
                  goto LABEL_796;
              }
            case 6:
              v11 = v77[16];
              if ((_DWORD)v11 == 4)
              {
                v154 = *(char **)(a2 + 56 * v19 + 48);
                if (v154 || (v154 = *v38) != 0)
                  v155 = *((_QWORD *)v154 + 5);
                else
                  v155 = 0;
                (*(void (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v77 + 24))(v77, v155);
              }
              v4 = v5;
              _ZNK2re19GeomModelDescriptor13AttributeData19makeConvertedValuesIDv2_fEENS0_15ConvertedValuesIT_EEv(v10, (uint64_t)v605);
              if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v77 + 16))(v77))
              {
                v3 = re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)v77, 0);
                v5 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v77 + 16))(v77);
              }
              else
              {
                v5 = 0;
                v3 = 0;
              }
              v17 = v543;
              v319 = *(_QWORD *)(a2 + 56 * v19 + 48);
              if ((_DWORD)v11 != 3 && v319 != 0)
              {
                __s[0] = *(char **)(a2 + 56 * v19 + 48);
                v326 = (id)(v319 + 8);
                re::GeomModelDescriptor::makeConvertedValues<unsigned int>((_anonymous_namespace_ **)__s, v611);
                if (__s[0])

                v328 = v605[1];
                v329 = v611[1];
                v330 = LODWORD(v611[1]);
                if (LODWORD(v611[1]))
                {
                  v12 = 0;
                  v10 = v5;
                  do
                  {
                    v331 = *(unsigned int *)(*(_QWORD *)&v611[0] + *((_QWORD *)&v611[0] + 1) * v12);
                    if (v331 < v328)
                    {
                      if (v12 >= v5)
                        goto LABEL_1227;
                      *(_QWORD *)(v3 + 8 * v12) = *(_QWORD *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v331);
                    }
                    ++v12;
                  }
                  while (v330 != v12);
                }
                v12 = (unint64_t)v539;
                if ((_DWORD)v11 != 2 || v5 <= v329)
                  goto LABEL_790;
                while (1)
                {
                  LODWORD(__s[0]) = v330;
                  if (v554 == 2)
                  {
                    v333 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(v539, (unsigned int *)__s);
                    if (v333 == -1)
                      goto LABEL_686;
                    v332 = *(_DWORD *)(v556 + 8 * v333 + 4);
                  }
                  else
                  {
                    if (v554 != 1)
                    {
                      if (v554)
                        goto LABEL_1263;
                      if (v330 >= v555)
                        v332 = -1;
                      else
                        v332 = v330;
                      goto LABEL_687;
                    }
                    if ((unint64_t)v557 <= v330)
                    {
LABEL_686:
                      v332 = -1;
                      goto LABEL_687;
                    }
                    v332 = *(_DWORD *)(v558 + 4 * v330);
                  }
LABEL_687:
                  v334 = *(unsigned int *)(*(_QWORD *)&v611[0] + *((_QWORD *)&v611[0] + 1) * v332);
                  if (v334 < v328)
                    *(_QWORD *)(v3 + 8 * v330) = *(_QWORD *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v334);
                  if ((_DWORD)v5 == (_DWORD)++v330)
                    goto LABEL_790;
                }
              }
              v321 = v605[1];
              v322 = LODWORD(v605[1]);
              if (LODWORD(v605[1]))
              {
                v323 = 0;
                a2 = v5;
                while (v5 != v323)
                {
                  *(_QWORD *)(v3 + 8 * v323) = *(_QWORD *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v323);
                  if (v322 == ++v323)
                    goto LABEL_651;
                }
                goto LABEL_1206;
              }
LABEL_651:
              if ((_DWORD)v11 != 2 || v5 <= v321)
                goto LABEL_796;
              while (1)
              {
                LODWORD(__s[0]) = v322;
                if (v554 == 2)
                {
                  v325 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)v12, (unsigned int *)__s);
                  if (v325 == -1)
                    goto LABEL_663;
                  v324 = *(_DWORD *)(v556 + 8 * v325 + 4);
                }
                else
                {
                  if (v554 != 1)
                  {
                    if (v554)
                      goto LABEL_1262;
                    if (v322 >= v555)
                      v324 = -1;
                    else
                      v324 = v322;
                    goto LABEL_664;
                  }
                  if ((unint64_t)v557 <= v322)
                  {
LABEL_663:
                    v324 = -1;
                    goto LABEL_664;
                  }
                  v324 = *(_DWORD *)(v558 + 4 * v322);
                }
LABEL_664:
                *(_QWORD *)(v3 + 8 * v322++) = *(_QWORD *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v324);
                if ((_DWORD)v5 == (_DWORD)v322)
                  goto LABEL_796;
              }
            case 7:
              v546 = v77[16];
              if (v546 == 4)
              {
                v142 = *(char **)(a2 + 56 * v19 + 48);
                if (v142 || (v142 = *v38) != 0)
                  v143 = *((_QWORD *)v142 + 5);
                else
                  v143 = 0;
                (*(void (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v77 + 24))(v77, v143);
              }
              v11 = a2;
              v144 = (unint64_t)*v38;
              if (*v38)
              {
                v145 = (void *)(v144 + 8);
                v146 = (id)(v144 + 8);
                if (*(_BYTE *)(v144 + 32) && (*(unsigned __int8 *)(v144 + 33) | 2) == 0xB)
                {
                  v147 = v145;
                  v4 = *(_QWORD *)(v144 + 48);
                  v10 = *(_QWORD *)(v144 + 24) + *(_QWORD *)(v144 + 56);
                  v541 = v144;
                  LODWORD(v144) = *(_DWORD *)(v144 + 40);
                  v148 = v145;

                  v534 = 0;
                  v536 = 0;
                  v538 = 0;
                }
                else
                {
                  _ZNK2re8internal11DataPayload22computeConvertedValuesIDv3_fEENS_6ResultINS_10FixedArrayIT_EENS_13DetailedErrorEEEv(v144, (uint64_t)__s);
                  if (LOBYTE(__s[0]))
                  {
                    v538 = __s[1];
                    v144 = v578;
                    __s[1] = 0;
                    v10 = *((_QWORD *)&v578 + 1);
                    v4 = 16;
                    v578 = 0uLL;
                  }
                  else
                  {
                    v10 = 0;
                    v144 = 0;
                    v538 = 0;
                    v4 = 0;
                  }
                  re::Result<re::FixedArray<unsigned int>,re::DetailedError>::~Result((uint64_t)__s);
                  v541 = 0;
                  v534 = v10;
                  v536 = v144;
                }

              }
              else
              {
                v10 = 0;
                v4 = 0;
                v541 = 0;
                v536 = 0;
                v538 = 0;
                v534 = 0;
              }
              v521 = v5;
              if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v77 + 16))(v77))
              {
                v3 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v77, 0);
                v5 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v77 + 16))(v77);
              }
              else
              {
                v5 = 0;
                v3 = 0;
              }
              v17 = v543;
              v370 = *(_QWORD *)(a2 + 56 * v19 + 48);
              if (v546 != 3 && v370 != 0)
              {
                __s[0] = *(char **)(a2 + 56 * v19 + 48);
                v379 = (id)(v370 + 8);
                re::GeomModelDescriptor::makeConvertedValues<unsigned int>((_anonymous_namespace_ **)__s, v605);
                if (__s[0])

                v382 = v605[1];
                v383 = LODWORD(v605[1]);
                if (LODWORD(v605[1]))
                {
                  v12 = 0;
                  v11 = v5;
                  do
                  {
                    v384 = *(unsigned int *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v12);
                    if (v384 < v144)
                    {
                      if (v12 >= v5)
                        goto LABEL_1230;
                      v385 = v10 + v4 * v384;
                      *(_QWORD *)&v381 = *(_QWORD *)v385;
                      DWORD2(v381) = *(_DWORD *)(v385 + 8);
                      *(_OWORD *)(v3 + 16 * v12) = v381;
                    }
                    ++v12;
                  }
                  while (v383 != v12);
                }
                v12 = (unint64_t)v539;
                if (v546 == 2 && v5 > v382)
                {
                  do
                  {
                    LODWORD(__s[0]) = v383;
                    if (v554 == 2)
                    {
                      v387 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(v539, (unsigned int *)__s);
                      if (v387 == -1)
                        goto LABEL_855;
                      v386 = *(_DWORD *)(v556 + 8 * v387 + 4);
                    }
                    else
                    {
                      if (v554 != 1)
                      {
                        if (v554)
                          goto LABEL_1269;
                        if (v383 >= v555)
                          v386 = -1;
                        else
                          v386 = v383;
                        goto LABEL_856;
                      }
                      if ((unint64_t)v557 <= v383)
                      {
LABEL_855:
                        v386 = -1;
                        goto LABEL_856;
                      }
                      v386 = *(_DWORD *)(v558 + 4 * v383);
                    }
LABEL_856:
                    v388 = *(unsigned int *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v386);
                    if (v388 < v144)
                    {
                      v389 = v10 + v4 * v388;
                      *(_QWORD *)&v381 = *(_QWORD *)v389;
                      DWORD2(v381) = *(_DWORD *)(v389 + 8);
                      *(_OWORD *)(v3 + 16 * v383) = v381;
                    }
                    ++v383;
                  }
                  while ((_DWORD)v5 != (_DWORD)v383);
                }
                if (*(_QWORD *)&v605[2])
                {
                  if (*((_QWORD *)&v605[2] + 1))
                  {
                    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v605[2] + 40))(*(_QWORD *)&v605[2], *(_QWORD *)&v606[0]);
                    *((_QWORD *)&v605[2] + 1) = 0;
                    *(_QWORD *)&v606[0] = 0;
                  }
                  *(_QWORD *)&v605[2] = 0;
                }
                if (*((_QWORD *)&v605[1] + 1))

LABEL_865:
                if (v538 && v536)
                  (*(void (**)(char *, unint64_t))(*(_QWORD *)v538 + 40))(v538, v534);
                v5 = v521;
                v367 = v541;
                if (!v541)
                  goto LABEL_102;
                goto LABEL_801;
              }
              if ((_DWORD)v144)
              {
                a2 = v5;
                v372 = v144;
                v373 = (_DWORD *)(v10 + 8);
                v374 = v5;
                v375 = (_OWORD *)v3;
                while (v374)
                {
                  *(_QWORD *)&v369 = *((_QWORD *)v373 - 1);
                  DWORD2(v369) = *v373;
                  v373 = (_DWORD *)((char *)v373 + v4);
                  *v375++ = v369;
                  --v374;
                  if (!--v372)
                    goto LABEL_819;
                }
                goto LABEL_1209;
              }
LABEL_819:
              if (v546 != 2 || v5 <= v144)
                goto LABEL_865;
              v144 = v144;
              while (1)
              {
                LODWORD(__s[0]) = v144;
                if (v554 == 2)
                {
                  v377 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)v12, (unsigned int *)__s);
                  if (v377 == -1)
                    goto LABEL_832;
                  v376 = *(_DWORD *)(v556 + 8 * v377 + 4);
                }
                else
                {
                  if (v554 != 1)
                  {
                    if (v554)
                      goto LABEL_1268;
                    if (v144 >= v555)
                      v376 = -1;
                    else
                      v376 = v144;
                    goto LABEL_833;
                  }
                  if ((unint64_t)v557 <= v144)
                  {
LABEL_832:
                    v376 = -1;
                    goto LABEL_833;
                  }
                  v376 = *(_DWORD *)(v558 + 4 * v144);
                }
LABEL_833:
                v378 = v10 + v4 * v376;
                *(_QWORD *)&v369 = *(_QWORD *)v378;
                DWORD2(v369) = *(_DWORD *)(v378 + 8);
                *(_OWORD *)(v3 + 16 * v144++) = v369;
                if ((_DWORD)v5 == (_DWORD)v144)
                  goto LABEL_865;
              }
            case 8:
              v11 = v77[16];
              if ((_DWORD)v11 == 4)
              {
                v157 = *(char **)(a2 + 56 * v19 + 48);
                if (v157 || (v157 = *v38) != 0)
                  v158 = *((_QWORD *)v157 + 5);
                else
                  v158 = 0;
                (*(void (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v77 + 24))(v77, v158);
              }
              v4 = v5;
              _ZNK2re19GeomModelDescriptor13AttributeData19makeConvertedValuesIDv4_fEENS0_15ConvertedValuesIT_EEv(v10, (uint64_t)v605);
              if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v77 + 16))(v77))
              {
                v3 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v77, 0);
                v5 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v77 + 16))(v77);
              }
              else
              {
                v5 = 0;
                v3 = 0;
              }
              v17 = v543;
              v335 = *(_QWORD *)(a2 + 56 * v19 + 48);
              if ((_DWORD)v11 != 3 && v335 != 0)
              {
                __s[0] = *(char **)(a2 + 56 * v19 + 48);
                v342 = (id)(v335 + 8);
                re::GeomModelDescriptor::makeConvertedValues<unsigned int>((_anonymous_namespace_ **)__s, v611);
                if (__s[0])

                v344 = v605[1];
                v345 = v611[1];
                v346 = LODWORD(v611[1]);
                if (LODWORD(v611[1]))
                {
                  v12 = 0;
                  v10 = v5;
                  do
                  {
                    v347 = *(unsigned int *)(*(_QWORD *)&v611[0] + *((_QWORD *)&v611[0] + 1) * v12);
                    if (v347 < v344)
                    {
                      if (v12 >= v5)
                        goto LABEL_1228;
                      *(_OWORD *)(v3 + 16 * v12) = *(_OWORD *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v347);
                    }
                    ++v12;
                  }
                  while (v346 != v12);
                }
                v12 = (unint64_t)v539;
                if ((_DWORD)v11 != 2 || v5 <= v345)
                  goto LABEL_790;
                while (1)
                {
                  LODWORD(__s[0]) = v346;
                  if (v554 == 2)
                  {
                    v349 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(v539, (unsigned int *)__s);
                    if (v349 == -1)
                      goto LABEL_736;
                    v348 = *(_DWORD *)(v556 + 8 * v349 + 4);
                  }
                  else
                  {
                    if (v554 != 1)
                    {
                      if (v554)
                        goto LABEL_1265;
                      if (v346 >= v555)
                        v348 = -1;
                      else
                        v348 = v346;
                      goto LABEL_737;
                    }
                    if ((unint64_t)v557 <= v346)
                    {
LABEL_736:
                      v348 = -1;
                      goto LABEL_737;
                    }
                    v348 = *(_DWORD *)(v558 + 4 * v346);
                  }
LABEL_737:
                  v350 = *(unsigned int *)(*(_QWORD *)&v611[0] + *((_QWORD *)&v611[0] + 1) * v348);
                  if (v350 < v344)
                    *(_OWORD *)(v3 + 16 * v346) = *(_OWORD *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v350);
                  if ((_DWORD)v5 == (_DWORD)++v346)
                    goto LABEL_790;
                }
              }
              v337 = v605[1];
              v338 = LODWORD(v605[1]);
              if (LODWORD(v605[1]))
              {
                v339 = 0;
                a2 = v5;
                while (v5 != v339)
                {
                  *(_OWORD *)(v3 + 16 * v339) = *(_OWORD *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v339);
                  if (v338 == ++v339)
                    goto LABEL_701;
                }
                goto LABEL_1207;
              }
LABEL_701:
              if ((_DWORD)v11 != 2 || v5 <= v337)
                goto LABEL_796;
              while (1)
              {
                LODWORD(__s[0]) = v338;
                if (v554 == 2)
                {
                  v341 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)v12, (unsigned int *)__s);
                  if (v341 == -1)
                    goto LABEL_713;
                  v340 = *(_DWORD *)(v556 + 8 * v341 + 4);
                }
                else
                {
                  if (v554 != 1)
                  {
                    if (v554)
                      goto LABEL_1264;
                    if (v338 >= v555)
                      v340 = -1;
                    else
                      v340 = v338;
                    goto LABEL_714;
                  }
                  if ((unint64_t)v557 <= v338)
                  {
LABEL_713:
                    v340 = -1;
                    goto LABEL_714;
                  }
                  v340 = *(_DWORD *)(v558 + 4 * v338);
                }
LABEL_714:
                *(_OWORD *)(v3 + 16 * v338++) = *(_OWORD *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v340);
                if ((_DWORD)v5 == (_DWORD)v338)
                  goto LABEL_796;
              }
            case 9:
              v10 = v77[16];
              if ((_DWORD)v10 == 4)
              {
                v149 = *(char **)(a2 + 56 * v19 + 48);
                if (v149 || (v149 = *v38) != 0)
                  v150 = *((_QWORD *)v149 + 5);
                else
                  v150 = 0;
                (*(void (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v77 + 24))(v77, v150);
              }
              v151 = *v38;
              __s[0] = v151;
              if (v151)
                v152 = v151 + 8;
              re::GeomModelDescriptor::makeConvertedValues<unsigned char>((_anonymous_namespace_ **)__s, v605);
              if (__s[0])

              v4 = v5;
              if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v77 + 16))(v77))
              {
                v3 = re::internal::GeomTypedAttribute<signed char>::operator[]((uint64_t)v77, 0);
                v5 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v77 + 16))(v77);
              }
              else
              {
                v5 = 0;
                v3 = 0;
              }
              v17 = v543;
              v303 = *(_QWORD *)(a2 + 56 * v19 + 48);
              if ((_DWORD)v10 != 3 && v303 != 0)
              {
                __s[0] = *(char **)(a2 + 56 * v19 + 48);
                v310 = (id)(v303 + 8);
                re::GeomModelDescriptor::makeConvertedValues<unsigned int>((_anonymous_namespace_ **)__s, v611);
                if (__s[0])

                v312 = v605[1];
                v313 = v611[1];
                v314 = LODWORD(v611[1]);
                if (LODWORD(v611[1]))
                {
                  v12 = 0;
                  v11 = v5;
                  do
                  {
                    v315 = *(unsigned int *)(*(_QWORD *)&v611[0] + *((_QWORD *)&v611[0] + 1) * v12);
                    if (v315 < v312)
                    {
                      if (v12 >= v5)
                        goto LABEL_1226;
                      *(_BYTE *)(v3 + v12) = *(_BYTE *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v315);
                    }
                    ++v12;
                  }
                  while (v314 != v12);
                }
                v12 = (unint64_t)v539;
                if ((_DWORD)v10 != 2 || v5 <= v313)
                  goto LABEL_790;
                while (1)
                {
                  LODWORD(__s[0]) = v314;
                  if (v554 == 2)
                  {
                    v317 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(v539, (unsigned int *)__s);
                    if (v317 == -1)
                      goto LABEL_636;
                    v316 = *(_DWORD *)(v556 + 8 * v317 + 4);
                  }
                  else
                  {
                    if (v554 != 1)
                    {
                      if (v554)
                        goto LABEL_1261;
                      if (v314 >= v555)
                        v316 = -1;
                      else
                        v316 = v314;
                      goto LABEL_637;
                    }
                    if ((unint64_t)v557 <= v314)
                    {
LABEL_636:
                      v316 = -1;
                      goto LABEL_637;
                    }
                    v316 = *(_DWORD *)(v558 + 4 * v314);
                  }
LABEL_637:
                  v318 = *(unsigned int *)(*(_QWORD *)&v611[0] + *((_QWORD *)&v611[0] + 1) * v316);
                  if (v318 < v312)
                    *(_BYTE *)(v3 + v314) = *(_BYTE *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v318);
                  if ((_DWORD)v5 == (_DWORD)++v314)
                    goto LABEL_790;
                }
              }
              v305 = v605[1];
              v306 = LODWORD(v605[1]);
              if (LODWORD(v605[1]))
              {
                v307 = 0;
                a2 = v5;
                while (v5 != v307)
                {
                  *(_BYTE *)(v3 + v307) = *(_BYTE *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v307);
                  if (v306 == ++v307)
                    goto LABEL_601;
                }
                goto LABEL_1205;
              }
LABEL_601:
              if ((_DWORD)v10 != 2 || v5 <= v305)
                goto LABEL_796;
              while (1)
              {
                LODWORD(__s[0]) = v306;
                if (v554 == 2)
                {
                  v309 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)v12, (unsigned int *)__s);
                  if (v309 == -1)
                    goto LABEL_613;
                  v308 = *(_DWORD *)(v556 + 8 * v309 + 4);
                }
                else
                {
                  if (v554 != 1)
                  {
                    if (v554)
                      goto LABEL_1260;
                    if (v306 >= v555)
                      v308 = -1;
                    else
                      v308 = v306;
                    goto LABEL_614;
                  }
                  if ((unint64_t)v557 <= v306)
                  {
LABEL_613:
                    v308 = -1;
                    goto LABEL_614;
                  }
                  v308 = *(_DWORD *)(v558 + 4 * v306);
                }
LABEL_614:
                *(_BYTE *)(v3 + v306++) = *(_BYTE *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v308);
                if ((_DWORD)v5 == (_DWORD)v306)
                  goto LABEL_796;
              }
            case 10:
              v10 = v77[16];
              if ((_DWORD)v10 == 4)
              {
                v160 = *(char **)(a2 + 56 * v19 + 48);
                if (v160 || (v160 = *v38) != 0)
                  v161 = *((_QWORD *)v160 + 5);
                else
                  v161 = 0;
                (*(void (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v77 + 24))(v77, v161);
              }
              v162 = *v38;
              __s[0] = v162;
              if (v162)
                v163 = v162 + 8;
              re::GeomModelDescriptor::makeConvertedValues<signed char>((_anonymous_namespace_ **)__s, v605);
              if (__s[0])

              v4 = v5;
              if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v77 + 16))(v77))
              {
                v3 = re::internal::GeomTypedAttribute<signed char>::operator[]((uint64_t)v77, 0);
                v5 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v77 + 16))(v77);
              }
              else
              {
                v5 = 0;
                v3 = 0;
              }
              v17 = v543;
              v351 = *(_QWORD *)(a2 + 56 * v19 + 48);
              if ((_DWORD)v10 != 3 && v351 != 0)
              {
                __s[0] = *(char **)(a2 + 56 * v19 + 48);
                v358 = (id)(v351 + 8);
                re::GeomModelDescriptor::makeConvertedValues<unsigned int>((_anonymous_namespace_ **)__s, v611);
                if (__s[0])

                v360 = v605[1];
                v361 = v611[1];
                v362 = LODWORD(v611[1]);
                if (LODWORD(v611[1]))
                {
                  v12 = 0;
                  v11 = v5;
                  do
                  {
                    v363 = *(unsigned int *)(*(_QWORD *)&v611[0] + *((_QWORD *)&v611[0] + 1) * v12);
                    if (v363 < v360)
                    {
                      if (v12 >= v5)
                        goto LABEL_1229;
                      *(_BYTE *)(v3 + v12) = *(_BYTE *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v363);
                    }
                    ++v12;
                  }
                  while (v362 != v12);
                }
                v12 = (unint64_t)v539;
                if ((_DWORD)v10 != 2 || v5 <= v361)
                  goto LABEL_790;
                while (1)
                {
                  LODWORD(__s[0]) = v362;
                  if (v554 == 2)
                  {
                    v365 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(v539, (unsigned int *)__s);
                    if (v365 == -1)
                      goto LABEL_786;
                    v364 = *(_DWORD *)(v556 + 8 * v365 + 4);
                  }
                  else
                  {
                    if (v554 != 1)
                    {
                      if (v554)
                        goto LABEL_1267;
                      if (v362 >= v555)
                        v364 = -1;
                      else
                        v364 = v362;
                      goto LABEL_787;
                    }
                    if ((unint64_t)v557 <= v362)
                    {
LABEL_786:
                      v364 = -1;
                      goto LABEL_787;
                    }
                    v364 = *(_DWORD *)(v558 + 4 * v362);
                  }
LABEL_787:
                  v366 = *(unsigned int *)(*(_QWORD *)&v611[0] + *((_QWORD *)&v611[0] + 1) * v364);
                  if (v366 < v360)
                    *(_BYTE *)(v3 + v362) = *(_BYTE *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v366);
                  if ((_DWORD)v5 == (_DWORD)++v362)
                    goto LABEL_790;
                }
              }
              v353 = v605[1];
              v354 = LODWORD(v605[1]);
              if (LODWORD(v605[1]))
              {
                v355 = 0;
                a2 = v5;
                while (v5 != v355)
                {
                  *(_BYTE *)(v3 + v355) = *(_BYTE *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v355);
                  if (v354 == ++v355)
                    goto LABEL_751;
                }
                goto LABEL_1208;
              }
LABEL_751:
              if ((_DWORD)v10 != 2 || v5 <= v353)
                goto LABEL_796;
              break;
            default:
              v120 = "Unexpected attribute type.";
              goto LABEL_192;
          }
          while (1)
          {
            LODWORD(__s[0]) = v354;
            if (v554 == 2)
            {
              v357 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)v12, (unsigned int *)__s);
              if (v357 == -1)
                goto LABEL_763;
              v356 = *(_DWORD *)(v556 + 8 * v357 + 4);
            }
            else
            {
              if (v554 != 1)
              {
                if (v554)
                  goto LABEL_1266;
                if (v354 >= v555)
                  v356 = -1;
                else
                  v356 = v354;
                goto LABEL_764;
              }
              if ((unint64_t)v557 <= v354)
              {
LABEL_763:
                v356 = -1;
                goto LABEL_764;
              }
              v356 = *(_DWORD *)(v558 + 4 * v354);
            }
LABEL_764:
            *(_BYTE *)(v3 + v354++) = *(_BYTE *)(*(_QWORD *)&v605[0] + *((_QWORD *)&v605[0] + 1) * v356);
            if ((_DWORD)v5 == (_DWORD)v354)
              goto LABEL_796;
          }
        }
        v529 = v38;
        v11 = *(_QWORD *)(v37 + 40);
        v46 = v564;
        v545 = v564;
        *(_QWORD *)&v609[2] = 0;
        memset(v609, 0, 28);
        v47 = (uint64_t)re::DynamicArray<re::GeomCell4>::resize(v609, v551);
        v531 = (char **)a2;
        v48 = *(_QWORD *)(a2 + 56 * v19 + 48);
        if (!*((_QWORD *)&v561[0] + 1))
        {
          if (!v48)
          {
            if (!v46)
              goto LABEL_177;
            v109 = v11;
            v11 = 0;
            v110 = 0;
            v111 = v562;
            v112 = v563;
            v3 = *(_QWORD *)&v609[1];
            v113 = *(_QWORD *)&v609[2];
            while (1)
            {
              v114 = *v111;
              if (*v111 == 3)
              {
                if (v3 <= v11)
                  goto LABEL_1197;
                v115 = -1;
              }
              else
              {
                if (v3 <= v11)
                  goto LABEL_1198;
                v115 = v110 + 3;
              }
              v111 = (unsigned int *)((char *)v111 + v112);
              *(_DWORD *)v113 = v110;
              *(int32x2_t *)(v113 + 4) = vadd_s32(vdup_n_s32(v110), (int32x2_t)0x200000001);
              *(_DWORD *)(v113 + 12) = v115;
              v110 += v114;
              ++v11;
              v113 += 16;
              if (v545 == v11)
              {
                if (v109 >= v110)
                  goto LABEL_177;
                goto LABEL_176;
              }
            }
          }
          __s[0] = *(char **)(a2 + 56 * v19 + 48);
          v83 = (id)(v48 + 8);
          re::GeomModelDescriptor::makeConvertedValues<unsigned int>((_anonymous_namespace_ **)__s, v605);
          if (__s[0])

          v84 = *(_QWORD *)&v605[1];
          if (*(_QWORD *)&v605[1])
          {
            v85 = *(unsigned int **)&v605[0];
            while (v11 > *v85)
            {
              v85 = (unsigned int *)((char *)v85 + *((_QWORD *)&v605[0] + 1));
              if (!--v84)
                goto LABEL_127;
            }
LABEL_161:
            LOBYTE(v611[0]) = 0;
            *((_QWORD *)&v611[0] + 1) = 100;
            *(_QWORD *)&v611[1] = &re::AssetErrorCategory(void)::instance;
            *(_OWORD *)((char *)&v611[1] + 8) = *(_OWORD *)__s;
            *(_OWORD *)((char *)&v611[2] + 8) = v578;
            v38 = v529;
            if (*(_QWORD *)&v605[2])
            {
              if (*((_QWORD *)&v605[2] + 1))
              {
                (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v605[2] + 40))(*(_QWORD *)&v605[2], *(_QWORD *)&v606[0]);
                *((_QWORD *)&v605[2] + 1) = 0;
                *(_QWORD *)&v606[0] = 0;
              }
              *(_QWORD *)&v605[2] = 0;
            }
            if (*((_QWORD *)&v605[1] + 1))

            goto LABEL_179;
          }
LABEL_127:
          if (v46)
          {
            v11 = 0;
            v86 = 0;
            v87 = v562;
            v88 = v563;
            v3 = *(_QWORD *)&v609[1];
            v89 = *(_DWORD **)&v609[2];
            v90 = v605[0];
            do
            {
              v91 = *v87;
              if (*v87 == 3)
              {
                if (v3 <= v11)
                  goto LABEL_1195;
                v92 = *(_DWORD *)(v90 + *((_QWORD *)&v90 + 1) * (v86 + 1));
                v93 = *(_DWORD *)(v90 + *((_QWORD *)&v90 + 1) * (v86 + 2));
                *v89 = *(_DWORD *)(v90 + *((_QWORD *)&v90 + 1) * v86);
                v94 = -1;
              }
              else
              {
                if (v3 <= v11)
                  goto LABEL_1196;
                v92 = *(_DWORD *)(v90 + *((_QWORD *)&v90 + 1) * (v86 + 1));
                v93 = *(_DWORD *)(v90 + *((_QWORD *)&v90 + 1) * (v86 + 2));
                v94 = *(_DWORD *)(v90 + *((_QWORD *)&v90 + 1) * (v86 + 3));
                *v89 = *(_DWORD *)(v90 + *((_QWORD *)&v90 + 1) * v86);
              }
              v87 = (unsigned int *)((char *)v87 + v88);
              v89[1] = v92;
              v89[2] = v93;
              v89[3] = v94;
              v86 += v91;
              ++v11;
              v89 += 4;
            }
            while (v545 != v11);
          }
          v71 = *(_QWORD *)&v605[2];
          if (!*(_QWORD *)&v605[2])
          {
LABEL_139:
            if (*((_QWORD *)&v605[1] + 1))

LABEL_177:
            v116 = *(_QWORD *)&v609[2];
            *(_QWORD *)&v609[2] = 0;
            ++DWORD2(v609[1]);
            LOBYTE(v611[0]) = 1;
            *((_QWORD *)&v611[0] + 1) = *(_QWORD *)&v609[0];
            v117 = *(_OWORD *)((char *)v609 + 8);
            memset(v609, 0, 24);
            v611[1] = v117;
            *((_QWORD *)&v611[2] + 1) = v116;
            LODWORD(v611[2]) = 1;
            goto LABEL_178;
          }
LABEL_136:
          if (*((_QWORD *)&v605[2] + 1))
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 40))(v71, *(_QWORD *)&v606[0]);
            *((_QWORD *)&v605[2] + 1) = 0;
            *(_QWORD *)&v606[0] = 0;
          }
          *(_QWORD *)&v605[2] = 0;
          goto LABEL_139;
        }
        if (v48)
        {
          __s[0] = *(char **)(a2 + 56 * v19 + 48);
          v49 = (id)(v48 + 8);
          re::GeomModelDescriptor::makeConvertedValues<unsigned int>((_anonymous_namespace_ **)__s, v605);
          if (__s[0])

          v51 = *(_QWORD *)&v605[1];
          if (*(_QWORD *)&v605[1])
          {
            v52 = *(unsigned int **)&v605[0];
            while (v11 > *v52)
            {
              v52 = (unsigned int *)((char *)v52 + *((_QWORD *)&v605[0] + 1));
              if (!--v51)
                goto LABEL_72;
            }
            goto LABEL_161;
          }
LABEL_72:
          v519 = v5;
          if (v46)
          {
            v3 = 0;
            v12 = 0;
            v533 = v563;
            v535 = v562;
            v537 = *((_QWORD *)&v560 + 1);
            v17 = *(_QWORD *)&v609[1];
            v524 = *(_QWORD *)&v605[0];
            v526 = *(_QWORD *)&v609[2];
            v523 = *((_QWORD *)&v605[0] + 1);
            do
            {
              v5 = *(unsigned int *)((char *)v535 + v533 * v3);
              v53 = re::HashBrown<unsigned int,re::GeomMeshWithNGons::NGonToTriangleInfo,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(&v560, v3);
              if (v53 == -1)
              {
                if ((_DWORD)v5 == 3)
                {
                  if (v17 <= v3)
                    goto LABEL_1211;
                  v66 = *(_DWORD *)(v524 + v523 * (v12 + 1));
                  v67 = *(_DWORD *)(v524 + v523 * (v12 + 2));
                  *(_DWORD *)(v526 + 16 * v3) = *(_DWORD *)(v524 + v523 * v12);
                  v68 = v526;
                  v69 = -1;
                }
                else
                {
                  if (v17 <= v3)
                    goto LABEL_1212;
                  v66 = *(_DWORD *)(v524 + v523 * (v12 + 1));
                  v67 = *(_DWORD *)(v524 + v523 * (v12 + 2));
                  v69 = *(_DWORD *)(v524 + v523 * (v12 + 3));
                  *(_DWORD *)(v526 + 16 * v3) = *(_DWORD *)(v524 + v523 * v12);
                  v68 = v526;
                }
                v70 = (_DWORD *)(v68 + 16 * v3);
                v70[1] = v66;
                v70[2] = v67;
                v70[3] = v69;
              }
              else
              {
                v54 = *(_QWORD *)(v537 + 96 * v53 + 40);
                if (v54)
                {
                  v4 = 0;
                  v55 = (_QWORD *)(v537 + 96 * v53);
                  v56 = (unsigned int *)v55[6];
                  v57 = *(_QWORD *)&v609[2];
                  v58 = v55 + 9;
                  v59 = v55 + 11;
                  v60 = v605[0];
                  while (1)
                  {
                    v62 = *v56++;
                    v61 = v62;
                    if (v17 <= v62)
                      break;
                    v11 = *v58;
                    if (*v58 <= v4)
                      goto LABEL_1153;
                    a2 = v4 + 1;
                    if (v11 <= v4 + 1)
                      goto LABEL_1154;
                    a2 = v4 + 2;
                    if (v11 <= v4 + 2)
                      goto LABEL_1155;
                    v63 = *v59 + 4 * v4;
                    v64 = *(_DWORD *)(v60 + *((_QWORD *)&v60 + 1) * (*(_DWORD *)(v63 + 4) + v12));
                    LODWORD(v63) = *(_DWORD *)(v60 + *((_QWORD *)&v60 + 1) * (*(_DWORD *)(v63 + 8) + v12));
                    v65 = (_DWORD *)(v57 + 16 * v61);
                    *v65 = *(_DWORD *)(v60 + *((_QWORD *)&v60 + 1) * (*(_DWORD *)(*v59 + 4 * v4) + v12));
                    v65[1] = v64;
                    v65[2] = v63;
                    v65[3] = -1;
                    v4 += 3;
                    if (!--v54)
                      goto LABEL_89;
                  }
                  v574 = 0;
                  v581 = 0u;
                  v580 = 0u;
                  v579 = 0u;
                  v578 = 0u;
                  *(_OWORD *)__s = 0u;
                  a2 = MEMORY[0x24BDACB70];
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v613 = 136315906;
                  *(_QWORD *)&v613[4] = "operator[]";
                  *(_WORD *)&v613[12] = 1024;
                  *(_DWORD *)&v613[14] = 789;
                  *(_WORD *)&v613[18] = 2048;
                  *(_QWORD *)&v613[20] = v61;
                  *(_WORD *)&v613[28] = 2048;
                  *(_QWORD *)&v613[30] = v17;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_1153:
                  v574 = 0;
                  v581 = 0u;
                  v580 = 0u;
                  v579 = 0u;
                  v578 = 0u;
                  *(_OWORD *)__s = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v613 = 136315906;
                  *(_QWORD *)&v613[4] = "operator[]";
                  *(_WORD *)&v613[12] = 1024;
                  *(_DWORD *)&v613[14] = 797;
                  *(_WORD *)&v613[18] = 2048;
                  *(_QWORD *)&v613[20] = v4;
                  *(_WORD *)&v613[28] = 2048;
                  *(_QWORD *)&v613[30] = v11;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_1154:
                  v574 = 0;
                  v581 = 0u;
                  v580 = 0u;
                  v579 = 0u;
                  v578 = 0u;
                  *(_OWORD *)__s = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v613 = 136315906;
                  *(_QWORD *)&v613[4] = "operator[]";
                  *(_WORD *)&v613[12] = 1024;
                  *(_DWORD *)&v613[14] = 797;
                  *(_WORD *)&v613[18] = 2048;
                  *(_QWORD *)&v613[20] = a2;
                  *(_WORD *)&v613[28] = 2048;
                  *(_QWORD *)&v613[30] = v11;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_1155:
                  v574 = 0;
                  v581 = 0u;
                  v580 = 0u;
                  v579 = 0u;
                  v578 = 0u;
                  *(_OWORD *)__s = 0u;
                  v103 = MEMORY[0x24BDACB70];
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v613 = 136315906;
                  *(_QWORD *)&v613[4] = "operator[]";
                  *(_WORD *)&v613[12] = 1024;
                  *(_DWORD *)&v613[14] = 797;
                  *(_WORD *)&v613[18] = 2048;
                  *(_QWORD *)&v613[20] = a2;
                  *(_WORD *)&v613[28] = 2048;
                  *(_QWORD *)&v613[30] = v11;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_1156:
                  *(_QWORD *)v613 = 0;
                  v581 = 0u;
                  v580 = 0u;
                  v579 = 0u;
                  v578 = 0u;
                  *(_OWORD *)__s = 0u;
                  a2 = MEMORY[0x24BDACB70];
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  LODWORD(v605[0]) = 136315906;
                  *(_QWORD *)((char *)v605 + 4) = "operator[]";
                  WORD6(v605[0]) = 1024;
                  *(_DWORD *)((char *)v605 + 14) = 789;
                  WORD1(v605[1]) = 2048;
                  *(_QWORD *)((char *)&v605[1] + 4) = v103;
                  WORD6(v605[1]) = 2048;
                  *(_QWORD *)((char *)&v605[1] + 14) = v12;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
                  goto LABEL_1157;
                }
              }
LABEL_89:
              v12 = (v5 + v12);
              ++v3;
            }
            while (v3 != v545);
          }
          v71 = *(_QWORD *)&v605[2];
          v5 = v519;
          v12 = (unint64_t)v539;
          v17 = v543;
          if (!*(_QWORD *)&v605[2])
            goto LABEL_139;
          goto LABEL_136;
        }
        if (!v46)
          goto LABEL_177;
        v525 = v11;
        v520 = v5;
        v3 = 0;
        v11 = 0;
        v533 = v563;
        v535 = v562;
        v537 = *((_QWORD *)&v560 + 1);
        v12 = *(_QWORD *)&v609[1];
        v527 = *(_QWORD *)&v609[2];
LABEL_143:
        v5 = *(unsigned int *)((char *)v535 + v533 * v3);
        v47 = re::HashBrown<unsigned int,re::GeomMeshWithNGons::NGonToTriangleInfo,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(&v560, v3);
        if (v47 != -1)
        {
          v95 = *(_QWORD *)(v537 + 96 * v47 + 40);
          if (!v95)
            goto LABEL_158;
          v17 = 0;
          v96 = (_QWORD *)(v537 + 96 * v47);
          v97 = (unsigned int *)v96[6];
          v98 = *(_QWORD *)&v609[2];
          v99 = v96 + 9;
          v100 = v96 + 11;
          v101 = vdup_n_s32(v11);
          v102 = 4;
          while (1)
          {
            v104 = *v97++;
            v103 = v104;
            if (v12 <= v104)
              goto LABEL_1156;
            v4 = *v99;
            if (*v99 <= v17)
              break;
            a2 = v17 + 1;
            if (v4 <= v17 + 1)
              goto LABEL_1158;
            a2 = v17 + 2;
            if (v4 <= v17 + 2)
              goto LABEL_1159;
            v105 = v98 + 16 * v103;
            v106 = *(int32x2_t *)(*v100 + v102);
            *(_DWORD *)v105 = *(_DWORD *)(*v100 + 4 * v17) + v11;
            *(int32x2_t *)(v105 + 4) = vadd_s32(v106, v101);
            *(_DWORD *)(v105 + 12) = -1;
            v17 += 3;
            v102 += 12;
            if (!--v95)
              goto LABEL_158;
          }
LABEL_1157:
          *(_QWORD *)v613 = 0;
          v581 = 0u;
          v580 = 0u;
          v579 = 0u;
          v578 = 0u;
          *(_OWORD *)__s = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v605[0]) = 136315906;
          *(_QWORD *)((char *)v605 + 4) = "operator[]";
          WORD6(v605[0]) = 1024;
          *(_DWORD *)((char *)v605 + 14) = 797;
          WORD1(v605[1]) = 2048;
          *(_QWORD *)((char *)&v605[1] + 4) = v17;
          WORD6(v605[1]) = 2048;
          *(_QWORD *)((char *)&v605[1] + 14) = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_1158:
          *(_QWORD *)v613 = 0;
          v581 = 0u;
          v580 = 0u;
          v579 = 0u;
          v578 = 0u;
          *(_OWORD *)__s = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v605[0]) = 136315906;
          *(_QWORD *)((char *)v605 + 4) = "operator[]";
          WORD6(v605[0]) = 1024;
          *(_DWORD *)((char *)v605 + 14) = 797;
          WORD1(v605[1]) = 2048;
          *(_QWORD *)((char *)&v605[1] + 4) = a2;
          WORD6(v605[1]) = 2048;
          *(_QWORD *)((char *)&v605[1] + 14) = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_1159:
          *(_QWORD *)v613 = 0;
          v581 = 0u;
          v580 = 0u;
          v579 = 0u;
          v578 = 0u;
          *(_OWORD *)__s = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v605[0]) = 136315906;
          *(_QWORD *)((char *)v605 + 4) = "operator[]";
          WORD6(v605[0]) = 1024;
          *(_DWORD *)((char *)v605 + 14) = 797;
          WORD1(v605[1]) = 2048;
          *(_QWORD *)((char *)&v605[1] + 4) = a2;
          WORD6(v605[1]) = 2048;
          *(_QWORD *)((char *)&v605[1] + 14) = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_1160:
          v506 = *((_QWORD *)&v606[1] + 1);
          if (*((_QWORD *)&v606[1] + 1))
          {
            if (*((_QWORD *)&v605[1] + 1))
              *((_QWORD *)&v605[1] + 1) = 0;
            if (*(_QWORD *)&v605[1])
LABEL_1164:
              (*(void (**)(uint64_t))(*(_QWORD *)v506 + 40))(v506);
          }
LABEL_1165:
          re::GeomMesh::operator=((uint64_t)&v548, v531);
          v507 = re::GeomMesh::setName((re *)&v548, __s[0]);
          v508 = __s[0];
          if (__s[0])
          {
            v509 = re::globalAllocators(v507);
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v509[2] + 40))(v509[2], v508);
            __s[0] = 0;
          }
          v510 = (_OWORD *)re::GeomMesh::modifyVertexPositions((re::GeomMesh *)&v548);
          if ((_DWORD)v12)
          {
            v513 = v12;
            v11 = v511;
            v514 = v532 + 1;
            v515 = v511;
            while (v515)
            {
              *(_QWORD *)&v512 = *((_QWORD *)v514 - 1);
              DWORD2(v512) = *v514;
              v514 = (_DWORD *)((char *)v514 + v533);
              *v510++ = v512;
              --v515;
              if (!--v513)
                goto LABEL_1171;
            }
LABEL_1194:
            *(_QWORD *)v613 = 0;
            memset(v606, 0, sizeof(v606));
            memset(v605, 0, sizeof(v605));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v611[0]) = 136315906;
            *(_QWORD *)((char *)v611 + 4) = "operator[]";
            WORD6(v611[0]) = 1024;
            *(_DWORD *)((char *)v611 + 14) = 609;
            WORD1(v611[1]) = 2048;
            *(_QWORD *)((char *)&v611[1] + 4) = v11;
            WORD6(v611[1]) = 2048;
            *(_QWORD *)((char *)&v611[1] + 14) = v11;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1195:
            v574 = 0;
            v581 = 0u;
            v580 = 0u;
            v579 = 0u;
            v578 = 0u;
            *(_OWORD *)__s = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v613 = 136315906;
            *(_QWORD *)&v613[4] = "operator[]";
            *(_WORD *)&v613[12] = 1024;
            *(_DWORD *)&v613[14] = 789;
            *(_WORD *)&v613[18] = 2048;
            *(_QWORD *)&v613[20] = v11;
            *(_WORD *)&v613[28] = 2048;
            *(_QWORD *)&v613[30] = v3;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1196:
            v574 = 0;
            v581 = 0u;
            v580 = 0u;
            v579 = 0u;
            v578 = 0u;
            *(_OWORD *)__s = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v613 = 136315906;
            *(_QWORD *)&v613[4] = "operator[]";
            *(_WORD *)&v613[12] = 1024;
            *(_DWORD *)&v613[14] = 789;
            *(_WORD *)&v613[18] = 2048;
            *(_QWORD *)&v613[20] = v11;
            *(_WORD *)&v613[28] = 2048;
            *(_QWORD *)&v613[30] = v3;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1197:
            *(_QWORD *)v613 = 0;
            v581 = 0u;
            v580 = 0u;
            v579 = 0u;
            v578 = 0u;
            *(_OWORD *)__s = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v605[0]) = 136315906;
            *(_QWORD *)((char *)v605 + 4) = "operator[]";
            WORD6(v605[0]) = 1024;
            *(_DWORD *)((char *)v605 + 14) = 789;
            WORD1(v605[1]) = 2048;
            *(_QWORD *)((char *)&v605[1] + 4) = v11;
            WORD6(v605[1]) = 2048;
            *(_QWORD *)((char *)&v605[1] + 14) = v3;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1198:
            *(_QWORD *)v613 = 0;
            v581 = 0u;
            v580 = 0u;
            v579 = 0u;
            v578 = 0u;
            *(_OWORD *)__s = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v605[0]) = 136315906;
            *(_QWORD *)((char *)v605 + 4) = "operator[]";
            WORD6(v605[0]) = 1024;
            *(_DWORD *)((char *)v605 + 14) = 789;
            WORD1(v605[1]) = 2048;
            *(_QWORD *)((char *)&v605[1] + 4) = v11;
            WORD6(v605[1]) = 2048;
            *(_QWORD *)((char *)&v605[1] + 14) = v3;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1199:
            *(_QWORD *)&v609[0] = 0;
            v581 = 0u;
            v580 = 0u;
            v579 = 0u;
            v578 = 0u;
            *(_OWORD *)__s = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v611[0]) = 136315906;
            *(_QWORD *)((char *)v611 + 4) = "operator[]";
            WORD6(v611[0]) = 1024;
            *(_DWORD *)((char *)v611 + 14) = 609;
            WORD1(v611[1]) = 2048;
            *(_QWORD *)((char *)&v611[1] + 4) = a2;
            WORD6(v611[1]) = 2048;
            *(_QWORD *)((char *)&v611[1] + 14) = a2;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1200:
            *(_QWORD *)&v609[0] = 0;
            v581 = 0u;
            v580 = 0u;
            v579 = 0u;
            v578 = 0u;
            *(_OWORD *)__s = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v611[0]) = 136315906;
            *(_QWORD *)((char *)v611 + 4) = "operator[]";
            WORD6(v611[0]) = 1024;
            *(_DWORD *)((char *)v611 + 14) = 609;
            WORD1(v611[1]) = 2048;
            *(_QWORD *)((char *)&v611[1] + 4) = a2;
            WORD6(v611[1]) = 2048;
            *(_QWORD *)((char *)&v611[1] + 14) = a2;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1201:
            *(_QWORD *)&v609[0] = 0;
            v581 = 0u;
            v580 = 0u;
            v579 = 0u;
            v578 = 0u;
            *(_OWORD *)__s = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v611[0]) = 136315906;
            *(_QWORD *)((char *)v611 + 4) = "operator[]";
            WORD6(v611[0]) = 1024;
            *(_DWORD *)((char *)v611 + 14) = 609;
            WORD1(v611[1]) = 2048;
            *(_QWORD *)((char *)&v611[1] + 4) = a2;
            WORD6(v611[1]) = 2048;
            *(_QWORD *)((char *)&v611[1] + 14) = a2;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1202:
            *(_QWORD *)&v609[0] = 0;
            v581 = 0u;
            v580 = 0u;
            v579 = 0u;
            v578 = 0u;
            *(_OWORD *)__s = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v611[0]) = 136315906;
            *(_QWORD *)((char *)v611 + 4) = "operator[]";
            WORD6(v611[0]) = 1024;
            *(_DWORD *)((char *)v611 + 14) = 609;
            WORD1(v611[1]) = 2048;
            *(_QWORD *)((char *)&v611[1] + 4) = a2;
            WORD6(v611[1]) = 2048;
            *(_QWORD *)((char *)&v611[1] + 14) = a2;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1203:
            *(_QWORD *)&v609[0] = 0;
            v581 = 0u;
            v580 = 0u;
            v579 = 0u;
            v578 = 0u;
            *(_OWORD *)__s = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v611[0]) = 136315906;
            *(_QWORD *)((char *)v611 + 4) = "operator[]";
            WORD6(v611[0]) = 1024;
            *(_DWORD *)((char *)v611 + 14) = 609;
            WORD1(v611[1]) = 2048;
            *(_QWORD *)((char *)&v611[1] + 4) = a2;
            WORD6(v611[1]) = 2048;
            *(_QWORD *)((char *)&v611[1] + 14) = a2;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1204:
            *(_QWORD *)&v609[0] = 0;
            v581 = 0u;
            v580 = 0u;
            v579 = 0u;
            v578 = 0u;
            *(_OWORD *)__s = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v611[0]) = 136315906;
            *(_QWORD *)((char *)v611 + 4) = "operator[]";
            WORD6(v611[0]) = 1024;
            *(_DWORD *)((char *)v611 + 14) = 609;
            WORD1(v611[1]) = 2048;
            *(_QWORD *)((char *)&v611[1] + 4) = a2;
            WORD6(v611[1]) = 2048;
            *(_QWORD *)((char *)&v611[1] + 14) = a2;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1205:
            *(_QWORD *)&v609[0] = 0;
            v581 = 0u;
            v580 = 0u;
            v579 = 0u;
            v578 = 0u;
            *(_OWORD *)__s = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v611[0]) = 136315906;
            *(_QWORD *)((char *)v611 + 4) = "operator[]";
            WORD6(v611[0]) = 1024;
            *(_DWORD *)((char *)v611 + 14) = 609;
            WORD1(v611[1]) = 2048;
            *(_QWORD *)((char *)&v611[1] + 4) = a2;
            WORD6(v611[1]) = 2048;
            *(_QWORD *)((char *)&v611[1] + 14) = a2;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1206:
            *(_QWORD *)&v609[0] = 0;
            v581 = 0u;
            v580 = 0u;
            v579 = 0u;
            v578 = 0u;
            *(_OWORD *)__s = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v611[0]) = 136315906;
            *(_QWORD *)((char *)v611 + 4) = "operator[]";
            WORD6(v611[0]) = 1024;
            *(_DWORD *)((char *)v611 + 14) = 609;
            WORD1(v611[1]) = 2048;
            *(_QWORD *)((char *)&v611[1] + 4) = a2;
            WORD6(v611[1]) = 2048;
            *(_QWORD *)((char *)&v611[1] + 14) = a2;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1207:
            *(_QWORD *)&v609[0] = 0;
            v581 = 0u;
            v580 = 0u;
            v579 = 0u;
            v578 = 0u;
            *(_OWORD *)__s = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v611[0]) = 136315906;
            *(_QWORD *)((char *)v611 + 4) = "operator[]";
            WORD6(v611[0]) = 1024;
            *(_DWORD *)((char *)v611 + 14) = 609;
            WORD1(v611[1]) = 2048;
            *(_QWORD *)((char *)&v611[1] + 4) = a2;
            WORD6(v611[1]) = 2048;
            *(_QWORD *)((char *)&v611[1] + 14) = a2;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1208:
            *(_QWORD *)&v609[0] = 0;
            v581 = 0u;
            v580 = 0u;
            v579 = 0u;
            v578 = 0u;
            *(_OWORD *)__s = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v611[0]) = 136315906;
            *(_QWORD *)((char *)v611 + 4) = "operator[]";
            WORD6(v611[0]) = 1024;
            *(_DWORD *)((char *)v611 + 14) = 609;
            WORD1(v611[1]) = 2048;
            *(_QWORD *)((char *)&v611[1] + 4) = a2;
            WORD6(v611[1]) = 2048;
            *(_QWORD *)((char *)&v611[1] + 14) = a2;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1209:
            *(_QWORD *)&v611[0] = 0;
            v581 = 0u;
            v580 = 0u;
            v579 = 0u;
            v578 = 0u;
            *(_OWORD *)__s = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v605[0]) = 136315906;
            *(_QWORD *)((char *)v605 + 4) = "operator[]";
            WORD6(v605[0]) = 1024;
            *(_DWORD *)((char *)v605 + 14) = 609;
            WORD1(v605[1]) = 2048;
            *(_QWORD *)((char *)&v605[1] + 4) = a2;
            WORD6(v605[1]) = 2048;
            *(_QWORD *)((char *)&v605[1] + 14) = a2;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1210:
            v573 = 0;
            v612 = 0u;
            memset(v611, 0, sizeof(v611));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v602 = 136315906;
            *(_QWORD *)&v602[4] = "operator[]";
            *(_WORD *)&v602[12] = 1024;
            *(_DWORD *)&v602[14] = 468;
            *(_WORD *)&v602[18] = 2048;
            *(_QWORD *)&v602[20] = v3;
            v603 = 2048;
            v604 = v3;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1211:
            v574 = 0;
            v581 = 0u;
            v580 = 0u;
            v579 = 0u;
            v578 = 0u;
            *(_OWORD *)__s = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v613 = 136315906;
            *(_QWORD *)&v613[4] = "operator[]";
            *(_WORD *)&v613[12] = 1024;
            *(_DWORD *)&v613[14] = 789;
            *(_WORD *)&v613[18] = 2048;
            *(_QWORD *)&v613[20] = v3;
            *(_WORD *)&v613[28] = 2048;
            *(_QWORD *)&v613[30] = v17;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1212:
            v574 = 0;
            v581 = 0u;
            v580 = 0u;
            v579 = 0u;
            v578 = 0u;
            *(_OWORD *)__s = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v613 = 136315906;
            *(_QWORD *)&v613[4] = "operator[]";
            *(_WORD *)&v613[12] = 1024;
            *(_DWORD *)&v613[14] = 789;
            *(_WORD *)&v613[18] = 2048;
            *(_QWORD *)&v613[20] = v3;
            *(_WORD *)&v613[28] = 2048;
            *(_QWORD *)&v613[30] = v17;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1213:
            *(_QWORD *)v613 = 0;
            v581 = 0u;
            v580 = 0u;
            v579 = 0u;
            v578 = 0u;
            *(_OWORD *)__s = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v605[0]) = 136315906;
            *(_QWORD *)((char *)v605 + 4) = "operator[]";
            WORD6(v605[0]) = 1024;
            *(_DWORD *)((char *)v605 + 14) = 789;
            WORD1(v605[1]) = 2048;
            *(_QWORD *)((char *)&v605[1] + 4) = v3;
            WORD6(v605[1]) = 2048;
            *(_QWORD *)((char *)&v605[1] + 14) = v12;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1214:
            *(_QWORD *)v613 = 0;
            v581 = 0u;
            v580 = 0u;
            v579 = 0u;
            v578 = 0u;
            *(_OWORD *)__s = 0u;
            v491 = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v605[0]) = 136315906;
            *(_QWORD *)((char *)v605 + 4) = "operator[]";
            WORD6(v605[0]) = 1024;
            *(_DWORD *)((char *)v605 + 14) = 789;
            WORD1(v605[1]) = 2048;
            *(_QWORD *)((char *)&v605[1] + 4) = v3;
            WORD6(v605[1]) = 2048;
            *(_QWORD *)((char *)&v605[1] + 14) = v12;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1215:
            v573 = 0;
            v612 = 0u;
            memset(v611, 0, sizeof(v611));
            a2 = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v602 = 136315906;
            *(_QWORD *)&v602[4] = "operator[]";
            *(_WORD *)&v602[12] = 1024;
            *(_DWORD *)&v602[14] = 468;
            *(_WORD *)&v602[18] = 2048;
            *(_QWORD *)&v602[20] = v491;
            v603 = 2048;
            v604 = v11;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_1216;
          }
LABEL_1171:
          *(_QWORD *)&v552 = __PAIR64__(v19, v545);
          v516 = *(_QWORD *)(v5 + 192);
          v517 = v516 >> 1;
          if ((v516 & 1) == 0)
            v517 = v516 >> 1;
          if (v517)
          {
            if ((v516 & 1) != 0)
              v518 = *(const char **)(v5 + 200);
            else
              v518 = (const char *)(v5 + 193);
            re::GeomMesh::setName((re *)&v548, v518);
          }
          v31 = 1;
LABEL_1179:
          v11 = v540;
          re::GeomMeshBuilder::~GeomMeshBuilder((re::GeomMeshBuilder *)__s);
          if (v540 && v535)
            (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v540 + 40))(v540, v539);
          if (v537)

          continue;
        }
        if ((_DWORD)v5 == 3)
        {
          if (v12 <= v3)
            goto LABEL_1213;
          v107 = -1;
        }
        else
        {
          if (v12 <= v3)
            goto LABEL_1214;
          v107 = v11 + 3;
        }
        v108 = v527 + 16 * v3;
        *(_DWORD *)v108 = v11;
        *(int32x2_t *)(v108 + 4) = vadd_s32(vdup_n_s32(v11), (int32x2_t)0x200000001);
        *(_DWORD *)(v108 + 12) = v107;
LABEL_158:
        v11 = (v5 + v11);
        ++v3;
        v17 = v543;
        if (v3 != v545)
          goto LABEL_143;
        v5 = v520;
        v12 = (unint64_t)v539;
        if (v525 >= v11)
          goto LABEL_177;
LABEL_176:
        LOBYTE(v611[0]) = 0;
        *((_QWORD *)&v611[0] + 1) = 100;
        *(_QWORD *)&v611[1] = &re::AssetErrorCategory(void)::instance;
        *(_OWORD *)((char *)&v611[1] + 8) = *(_OWORD *)__s;
        *(_OWORD *)((char *)&v611[2] + 8) = v578;
LABEL_178:
        v38 = v529;
        a2 = (unint64_t)v531;
LABEL_179:
        if (*(_QWORD *)&v609[0] && *(_QWORD *)&v609[2])
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v609[0] + 40))(*(_QWORD *)&v609[0], *(_QWORD *)&v609[2]);
        if (!LOBYTE(v611[0]))
        {
          v74 = (char *)*((_QWORD *)&v611[1] + 1);
          v3 = *(_QWORD *)&v611[2];
          memset((char *)&v611[1] + 8, 0, 32);
          v73 = *((_QWORD *)&v611[2] + 1);
          re::Result<re::DynamicArray<re::GeomCell4>,re::DetailedError>::~Result((uint64_t)v611);
          goto LABEL_99;
        }
        if ((*(_BYTE *)(v10 + 8) & 1) != 0)
          v118 = *(const char **)(v10 + 16);
        else
          v118 = (const char *)(v10 + 9);
        if (*v38)
          v119 = *((_DWORD *)*v38 + 10);
        else
          v119 = 0;
        v77 = (unsigned __int8 *)re::GeomMesh::addFaceVaryingAttribute((uint64_t)&v548, v118, v540, v119, (uint64_t *)v611 + 1);
        v76 = (_anonymous_namespace_ *)re::Result<re::DynamicArray<re::GeomCell4>,re::DetailedError>::~Result((uint64_t)v611);
        if (v77)
          goto LABEL_108;
LABEL_191:
        v120 = "Error adding attribute.";
LABEL_192:
        v73 = v578;
        v74 = __s[0];
        v3 = (unint64_t)__s[1];
        v17 = v543;
LABEL_99:
        if (v74 && (v3 & 1) != 0)
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v74 + 40))(v74, v73);
LABEL_102:
        if (++v19 != v17)
          goto LABEL_47;
LABEL_881:
        if (*(_BYTE *)v5 == 1)
        {
          v390 = re::GeomMesh::addAttribute((uint64_t)&v548, "osdSubdivisionScheme", 0, 1);
          if (v390)
            *(_WORD *)re::internal::GeomTypedAttribute<short>::operator[]((uint64_t)v390, 0) = 1;
        }
        if (*(_BYTE *)(v5 + 1) != 1)
          goto LABEL_954;
        re::GeomMeshBuilder::GeomMeshBuilder((re *)__s, (uint64_t)&v548);
        v391 = v579;
        if ((_QWORD)v579)
        {
          v392 = 0;
          v393 = v580;
          v394 = (_DWORD *)v580;
          do
          {
            v395 = v394[3];
            if (v395 == -1)
            {
              v397 = *v394;
              v398 = -1;
              v396 = v394;
            }
            else
            {
              v396 = (_DWORD *)(v393 + 16 * v392 + 4);
              v398 = *v394;
              v397 = v394[1];
              *v394 = v395;
            }
            *v396 = v394[2];
            v394[2] = v397;
            v394[3] = v398;
            ++v392;
            v394 += 4;
            --v391;
          }
          while (v391);
        }
        v399 = v589;
        if (v589)
        {
          for (i = 0; i != v399; ++i)
          {
            v401 = (char **)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)v588, i);
            v403 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v401, v402);
            *(_DWORD *)v613 = *(_DWORD *)v403;
            re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)&v613[8], (uint64_t *)(v403 + 8));
            if (!*(_QWORD *)&v613[16])
              re::DynamicArray<re::BlendNode>::setCapacity(&v613[8], 1uLL);
            *(_QWORD *)&v611[0] = *(_QWORD *)(v403 + 128);
            DWORD2(v611[0]) = *(_DWORD *)(v403 + 136);
            BYTE12(v611[0]) = *(_BYTE *)(v403 + 140);
            if (BYTE12(v611[0]) == 2)
            {
              re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrown((uint64_t)&v611[1], (uint64_t *)(v403 + 144));
            }
            else if (BYTE12(v611[0]) == 1)
            {
              re::DynamicArray<float>::DynamicArray((uint64_t)&v611[1], (uint64_t *)(v403 + 144));
            }
            else
            {
              if (BYTE12(v611[0]))
              {
                re::internal::assertLog((re::internal *)4, v404, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "GeomIndexMap", 433);
                _os_crash();
                __break(1u);
LABEL_1243:
                re::internal::assertLog((re::internal *)4, v404, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "GeomIndexMap", 433);
                _os_crash();
                __break(1u);
LABEL_1244:
                re::internal::assertLog((re::internal *)4, v415, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
                _os_crash();
                __break(1u);
LABEL_1245:
                re::internal::assertLog((re::internal *)4, v415, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
                _os_crash();
                __break(1u);
                goto LABEL_1246;
              }
              LODWORD(v611[1]) = *(_DWORD *)(v403 + 144);
            }
            *(_QWORD *)&v609[0] = *(_QWORD *)(v403 + 48);
            DWORD2(v609[0]) = *(_DWORD *)(v403 + 56);
            BYTE12(v609[0]) = *(_BYTE *)(v403 + 60);
            if (BYTE12(v609[0]) == 2)
            {
              re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrown((uint64_t)&v609[1], (uint64_t *)(v403 + 64));
            }
            else if (BYTE12(v609[0]) == 1)
            {
              re::DynamicArray<float>::DynamicArray((uint64_t)&v609[1], (uint64_t *)(v403 + 64));
            }
            else
            {
              if (BYTE12(v609[0]))
                goto LABEL_1243;
              LODWORD(v609[1]) = *(_DWORD *)(v403 + 64);
            }
            v405 = *(_QWORD *)&v613[24];
            if (*(_QWORD *)&v613[24])
            {
              v406 = 0;
              v407 = v614;
              v408 = v614;
              v409 = *(_QWORD *)&v613[24];
              do
              {
                v410 = v408[3];
                if (v410 == -1)
                {
                  v412 = *v408;
                  v413 = -1;
                  v411 = v408;
                }
                else
                {
                  v411 = &v407[4 * v406 + 1];
                  v413 = *v408;
                  v412 = v408[1];
                  *v408 = v410;
                }
                *v411 = v408[2];
                v408[2] = v412;
                v408[3] = v413;
                ++v406;
                v408 += 4;
                --v409;
              }
              while (v409);
            }
            LODWORD(v605[0]) = *(_DWORD *)v613;
            *((_QWORD *)&v605[0] + 1) = *(_QWORD *)&v613[8];
            *(_QWORD *)&v605[1] = *(_QWORD *)&v613[16];
            *((_QWORD *)&v605[1] + 1) = v405;
            *((_QWORD *)&v605[2] + 1) = v614;
            v614 = 0;
            LODWORD(v605[2]) = 1;
            *(_DWORD *)v613 = 0;
            memset(&v613[8], 0, 24);
            *(_DWORD *)&v613[32] += 2;
            re::GeomIndexMap::GeomIndexMap((uint64_t)v606, (uint64_t)v611);
            re::GeomIndexMap::GeomIndexMap((uint64_t)&v608, (uint64_t)v609);
            re::internal::GeomAttributeManager::updateFaceVaryingAttributeSubmesh((_QWORD *)&v580 + 1, v401[1], (uint64_t)v605);
            re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)v605, v414);
            if (BYTE12(v609[0]))
            {
              if (BYTE12(v609[0]) == 2)
              {
                v416 = v610;
                if (v610)
                {
                  if (*((_QWORD *)&v609[1] + 1))
                    *((_QWORD *)&v609[1] + 1) = 0;
                  v415 = *(_QWORD *)&v609[1];
                  if (*(_QWORD *)&v609[1])
                    goto LABEL_923;
                }
              }
              else
              {
                if (BYTE12(v609[0]) != 1)
                  goto LABEL_1244;
                v416 = *(_QWORD *)&v609[1];
                if (*(_QWORD *)&v609[1])
                {
                  v415 = *(_QWORD *)&v609[3];
                  if (*(_QWORD *)&v609[3])
LABEL_923:
                    (*(void (**)(uint64_t))(*(_QWORD *)v416 + 40))(v416);
                }
              }
            }
            if (BYTE12(v611[0]))
            {
              if (BYTE12(v611[0]) == 2)
              {
                if (!*((_QWORD *)&v612 + 1))
                  goto LABEL_936;
                if (*((_QWORD *)&v611[1] + 1))
                  *((_QWORD *)&v611[1] + 1) = 0;
                if (!*(_QWORD *)&v611[1])
                  goto LABEL_936;
                (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)&v612 + 1) + 40))(*((_QWORD *)&v612 + 1), *(_QWORD *)&v611[1]);
                v417 = &v611[1];
              }
              else
              {
                if (BYTE12(v611[0]) != 1)
                  goto LABEL_1245;
                if (!*(_QWORD *)&v611[1])
                  goto LABEL_936;
                v417 = &v611[3];
                if (*(_QWORD *)&v611[3])
                {
                  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v611[1] + 40))(*(_QWORD *)&v611[1], *(_QWORD *)&v611[3]);
                  v417 = &v611[3];
                }
              }
              *(_QWORD *)v417 = 0;
            }
LABEL_936:
            if (*(_QWORD *)&v613[8] && v614)
              (*(void (**)(_QWORD, _DWORD *))(**(_QWORD **)&v613[8] + 40))(*(_QWORD *)&v613[8], v614);
          }
        }
        re::GeomMesh::operator=((uint64_t)&v548, &__s[1]);
        v418 = re::GeomMesh::setName((re *)&v548, __s[0]);
        v419 = __s[0];
        if (__s[0])
        {
          v420 = re::globalAllocators(v418);
          (*(void (**)(uint64_t, char *))(*(_QWORD *)v420[2] + 40))(v420[2], v419);
          __s[0] = 0;
        }
        v421 = 0uLL;
        memset(v609, 0, sizeof(v609));
        v574 = &v560;
        v575 = 0;
        v422 = *(_QWORD *)&v561[0];
        v12 = (unint64_t)v539;
        v423 = 0;
        if (*(_QWORD *)&v561[0] < 0x10uLL)
        {
          v424 = 0;
          v425 = 0uLL;
          v426 = 0uLL;
          goto LABEL_953;
        }
        v427 = *(_QWORD *)&v561[0] >> 4;
        while (1)
        {
          v428 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v560 + v423)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
          v575 = (unsigned __int16)~v428;
          if (v428 != 0xFFFF)
            break;
          v423 += 16;
          if (!--v427)
            goto LABEL_952;
        }
        v19 = __clz(__rbit64((unsigned __int16)~v428)) + v423;
        v576 = v19;
        if (v19 == -1)
        {
LABEL_952:
          v423 = 0;
          v424 = 0;
          v425 = 0uLL;
          v426 = 0uLL;
          v421 = 0uLL;
          goto LABEL_953;
        }
        v3 = (unint64_t)&v605[1] + 8;
        v11 = (unint64_t)v606;
        v10 = 96;
        while (2)
        {
          v12 = *((_QWORD *)v574 + 1);
          v442 = v12 + 96 * v19;
          LODWORD(v573) = *(_DWORD *)v442;
          v607 = 0;
          memset(v605, 0, sizeof(v605));
          memset(v606, 0, 28);
          v443 = re::FixedArray<unsigned int>::operator=((uint64_t *)&v605[1] + 1, v442 + 32);
          v444 = *(_QWORD *)(v442 + 16);
          v17 = v444 - 1;
          if (v444)
          {
            v445 = 0;
            v4 = *(_QWORD *)(v442 + 16);
            v446 = *((_QWORD *)&v605[0] + 1);
            v447 = *(_QWORD *)&v605[1];
            v5 = v17;
            while (v4 > v5)
            {
              if (v446 == v445)
                goto LABEL_1186;
              *(_DWORD *)(v447 + 4 * v445++) = *(_DWORD *)(*(_QWORD *)(v442 + 24) + 4 * v5--);
              if (v5 == -1)
                goto LABEL_1001;
            }
LABEL_1185:
            v570 = 0;
            v612 = 0u;
            memset(v611, 0, sizeof(v611));
            v446 = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v613 = 136315906;
            *(_QWORD *)&v613[4] = "operator[]";
            *(_WORD *)&v613[12] = 1024;
            *(_DWORD *)&v613[14] = 476;
            *(_WORD *)&v613[18] = 2048;
            *(_QWORD *)&v613[20] = v5;
            *(_WORD *)&v613[28] = 2048;
            *(_QWORD *)&v613[30] = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1186:
            v570 = 0;
            v612 = 0u;
            memset(v611, 0, sizeof(v611));
            a2 = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v613 = 136315906;
            *(_QWORD *)&v613[4] = "operator[]";
            *(_WORD *)&v613[12] = 1024;
            *(_DWORD *)&v613[14] = 468;
            *(_WORD *)&v613[18] = 2048;
            *(_QWORD *)&v613[20] = v446;
            *(_WORD *)&v613[28] = 2048;
            *(_QWORD *)&v613[30] = v446;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1187:
            v570 = 0;
            v612 = 0u;
            memset(v611, 0, sizeof(v611));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v613 = 136315906;
            *(_QWORD *)&v613[4] = "operator[]";
            *(_WORD *)&v613[12] = 1024;
            *(_DWORD *)&v613[14] = 797;
            *(_WORD *)&v613[18] = 2048;
            *(_QWORD *)&v613[20] = v5;
            *(_WORD *)&v613[28] = 2048;
            *(_QWORD *)&v613[30] = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1188:
            v570 = 0;
            v612 = 0u;
            memset(v611, 0, sizeof(v611));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v613 = 136315906;
            *(_QWORD *)&v613[4] = "operator[]";
            *(_WORD *)&v613[12] = 1024;
            *(_DWORD *)&v613[14] = 789;
            *(_WORD *)&v613[18] = 2048;
            *(_QWORD *)&v613[20] = a2;
            *(_WORD *)&v613[28] = 2048;
            *(_QWORD *)&v613[30] = v19;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1189:
            v570 = 0;
            v612 = 0u;
            memset(v611, 0, sizeof(v611));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v613 = 136315906;
            *(_QWORD *)&v613[4] = "operator[]";
            *(_WORD *)&v613[12] = 1024;
            *(_DWORD *)&v613[14] = 797;
            *(_WORD *)&v613[18] = 2048;
            *(_QWORD *)&v613[20] = v12;
            *(_WORD *)&v613[28] = 2048;
            *(_QWORD *)&v613[30] = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1190:
            v570 = 0;
            v612 = 0u;
            memset(v611, 0, sizeof(v611));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v613 = 136315906;
            *(_QWORD *)&v613[4] = "operator[]";
            *(_WORD *)&v613[12] = 1024;
            *(_DWORD *)&v613[14] = 789;
            *(_WORD *)&v613[18] = 2048;
            *(_QWORD *)&v613[20] = v12;
            *(_WORD *)&v613[28] = 2048;
            *(_QWORD *)&v613[30] = v19;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1191:
            v570 = 0;
            v612 = 0u;
            memset(v611, 0, sizeof(v611));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v613 = 136315906;
            *(_QWORD *)&v613[4] = "operator[]";
            *(_WORD *)&v613[12] = 1024;
            *(_DWORD *)&v613[14] = 789;
            *(_WORD *)&v613[18] = 2048;
            *(_QWORD *)&v613[20] = v12 + 1;
            *(_WORD *)&v613[28] = 2048;
            *(_QWORD *)&v613[30] = v19;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1192:
            *(_QWORD *)v602 = 0;
            memset(v606, 0, sizeof(v606));
            memset(v605, 0, sizeof(v605));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v611[0]) = 136315906;
            *(_QWORD *)((char *)v611 + 4) = "operator[]";
            WORD6(v611[0]) = 1024;
            *(_DWORD *)((char *)v611 + 14) = 468;
            WORD1(v611[1]) = 2048;
            *(_QWORD *)((char *)&v611[1] + 4) = a2;
            WORD6(v611[1]) = 2048;
            *(_QWORD *)((char *)&v611[1] + 14) = a2;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_1193:
            re::internal::assertLog((re::internal *)4, v16, "assertion failure: '%s' (%s:line %i) ", "vertexCountPerPolygon.size() == originalPolygonCount", "buildPositionsOnlyMeshHelper", 64);
            _os_crash();
            __break(1u);
            goto LABEL_1194;
          }
LABEL_1001:
          v448 = v12 + 96 * v19;
          v450 = *(_QWORD *)(v448 + 72);
          a2 = v448 + 72;
          v449 = v450;
          re::DynamicArray<float>::operator=((uint64_t)v606, (uint64_t *)(a2 - 16));
          if (v450)
          {
            v4 = *(_QWORD *)a2;
            v451 = (uint64_t *)(v12 + 96 * v19 + 88);
            v19 = *(_QWORD *)&v606[1];
            v452 = v607;
            v453 = 2;
            v12 = 1;
            do
            {
              v5 = v12 + 1;
              if (v4 <= v12 + 1)
                goto LABEL_1187;
              a2 = v12 - 1;
              if (v19 <= v12 - 1)
                goto LABEL_1188;
              v454 = *v451;
              v452[v453 - 2] = v17 - *(_DWORD *)(*v451 + v453 * 4);
              if (v4 <= v12)
                goto LABEL_1189;
              if (v19 <= v12)
                goto LABEL_1190;
              v452[v453 - 1] = v17 - *(_DWORD *)(v454 + 4 * v12);
              if (v19 <= v5)
                goto LABEL_1191;
              v452[v453] = v17 - *(_DWORD *)(v454 + v453 * 4 - 8);
              v455 = v12 + 2;
              v12 += 3;
              v453 += 3;
            }
            while (v455 < v449);
          }
          re::HashBrown<unsigned int,re::GeomMeshWithNGons::NGonToTriangleInfo,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::addNew((_anonymous_namespace_ *)v609, (unsigned int *)&v573, (uint64_t)v605);
          v12 = (unint64_t)v539;
          if (*(_QWORD *)&v606[0])
          {
            if (v607)
              (*(void (**)(_QWORD, _DWORD *))(**(_QWORD **)&v606[0] + 40))(*(_QWORD *)&v606[0], v607);
            v607 = 0;
            memset(v606, 0, 24);
            ++DWORD2(v606[1]);
          }
          if (*((_QWORD *)&v605[1] + 1))
          {
            if (*(_QWORD *)&v605[2])
            {
              (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)&v605[1] + 1) + 40))(*((_QWORD *)&v605[1] + 1), *((_QWORD *)&v605[2] + 1));
              v605[2] = 0uLL;
            }
            *((_QWORD *)&v605[1] + 1) = 0;
          }
          if (*(_QWORD *)&v605[0] && *((_QWORD *)&v605[0] + 1))
            (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v605[0] + 40))(*(_QWORD *)&v605[0], *(_QWORD *)&v605[1]);
          re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v574);
          v19 = v576;
          if (v576 != -1)
            continue;
          break;
        }
        v422 = *(_QWORD *)&v561[0];
        v424 = *((_QWORD *)&v609[3] + 1);
        v423 = *(_QWORD *)&v609[3];
        v421 = v609[0];
        v425 = v609[1];
        v426 = v609[2];
LABEL_953:
        v433 = *((_QWORD *)&v561[2] + 1);
        *((_QWORD *)&v561[2] + 1) = v424;
        v609[0] = v560;
        *((_QWORD *)&v609[3] + 1) = v433;
        *(_QWORD *)&v609[1] = v422;
        v434 = *(_OWORD *)((char *)&v561[1] + 8);
        v435 = *(_OWORD *)((char *)v561 + 8);
        *(_QWORD *)&v561[2] = v423;
        *(_OWORD *)((char *)&v609[2] + 8) = v434;
        v560 = v421;
        v561[0] = v425;
        v561[1] = v426;
        *(_OWORD *)((char *)&v609[1] + 8) = v435;
        re::HashBrown<unsigned int,re::GeomMeshWithNGons::NGonToTriangleInfo,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::deinit((uint64_t)v609);
        re::GeomMeshBuilder::~GeomMeshBuilder((re::GeomMeshBuilder *)__s);
LABEL_954:
        re::GeomMesh::GeomMesh((uint64_t)__s, (uint64_t)&v548);
        v590 = v552;
        re::GeomIndexMap::GeomIndexMap((uint64_t)v591, (uint64_t)&v552 + 8);
        v601 = v561[2];
        v598 = v560;
        v599 = v561[0];
        v560 = 0u;
        memset(v561, 0, sizeof(v561));
        v600 = v561[1];
        *(_BYTE *)v542 = 1;
        re::GeomMesh::GeomMesh(v542 + 8, (uint64_t)__s);
        *(_QWORD *)(v542 + 744) = v590;
        re::GeomIndexMap::GeomIndexMap(v542 + 752, (uint64_t)v591);
        *(_OWORD *)(v542 + 880) = v601;
        v601 = 0u;
        v436 = v599;
        *(_OWORD *)(v542 + 832) = v598;
        *(_OWORD *)(v542 + 848) = v436;
        v598 = 0u;
        v599 = 0u;
        *(_OWORD *)(v542 + 864) = v600;
        v600 = 0u;
        v438.n128_f64[0] = re::HashBrown<unsigned int,re::GeomMeshWithNGons::NGonToTriangleInfo,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::deinit((uint64_t)&v598);
        switch(v592)
        {
          case 2:
            if (*((_QWORD *)&v597 + 1))
            {
              if (v594)
                v594 = 0;
              v437 = v593;
              if (v593)
              {
                (*(void (**)(__n128))(**((_QWORD **)&v597 + 1) + 40))(v438);
                v593 = 0;
              }
              v596 = 0u;
              v597 = 0u;
              v595 = 0u;
            }
            break;
          case 1:
            if (v593)
            {
              v437 = (re::GeomAttribute *)v596;
              if ((_QWORD)v596)
                (*(void (**)(double))(*(_QWORD *)v593 + 40))(v438.n128_f64[0]);
              *(_QWORD *)&v596 = 0;
              v594 = 0;
              *(_QWORD *)&v595 = 0;
              v593 = 0;
              ++DWORD2(v595);
            }
            break;
          case 0:
            LODWORD(v593) = 0;
            break;
          default:
LABEL_1247:
            re::internal::assertLog((re::internal *)4, (uint64_t)v437, v438.n128_f64[0], "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
            _os_crash();
            __break(1u);
LABEL_1248:
            re::internal::assertLog((re::internal *)4, v82, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
            _os_crash();
            __break(1u);
LABEL_1249:
            re::internal::assertLog((re::internal *)4, v177, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
            _os_crash();
            __break(1u);
LABEL_1250:
            re::internal::assertLog((re::internal *)4, v125, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
            _os_crash();
            __break(1u);
LABEL_1251:
            re::internal::assertLog((re::internal *)4, v200, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
            _os_crash();
            __break(1u);
LABEL_1252:
            re::internal::assertLog((re::internal *)4, v130, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
            _os_crash();
            __break(1u);
LABEL_1253:
            re::internal::assertLog((re::internal *)4, v223, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
            _os_crash();
            __break(1u);
LABEL_1254:
            re::internal::assertLog((re::internal *)4, v135, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
            _os_crash();
            __break(1u);
LABEL_1255:
            re::internal::assertLog((re::internal *)4, v246, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
            _os_crash();
            __break(1u);
LABEL_1256:
            re::internal::assertLog((re::internal *)4, v138, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
            _os_crash();
            __break(1u);
LABEL_1257:
            re::internal::assertLog((re::internal *)4, v269, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
            _os_crash();
            __break(1u);
LABEL_1258:
            re::internal::assertLog((re::internal *)4, v141, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
            _os_crash();
            __break(1u);
LABEL_1259:
            re::internal::assertLog((re::internal *)4, v292, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
            _os_crash();
            __break(1u);
LABEL_1260:
            re::internal::assertLog((re::internal *)4, v153, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
            _os_crash();
            __break(1u);
LABEL_1261:
            re::internal::assertLog((re::internal *)4, v311, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
            _os_crash();
            __break(1u);
LABEL_1262:
            re::internal::assertLog((re::internal *)4, v156, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
            _os_crash();
            __break(1u);
LABEL_1263:
            re::internal::assertLog((re::internal *)4, v327, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
            _os_crash();
            __break(1u);
LABEL_1264:
            re::internal::assertLog((re::internal *)4, v159, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
            _os_crash();
            __break(1u);
LABEL_1265:
            re::internal::assertLog((re::internal *)4, v343, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
            _os_crash();
            __break(1u);
LABEL_1266:
            re::internal::assertLog((re::internal *)4, v164, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
            _os_crash();
            __break(1u);
LABEL_1267:
            re::internal::assertLog((re::internal *)4, v359, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
            _os_crash();
            __break(1u);
LABEL_1268:
            re::internal::assertLog((re::internal *)4, v368, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
            _os_crash();
            __break(1u);
LABEL_1269:
            re::internal::assertLog((re::internal *)4, v380, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
            _os_crash();
            __break(1u);
LABEL_1270:
            re::internal::assertLog((re::internal *)4, v505, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
            _os_crash();
            __break(1u);
            JUMPOUT(0x225B44E38);
        }
        re::GeomMesh::~GeomMesh((re::GeomMesh *)__s, v437);
        if (*(_QWORD *)v602 && (v602[8] & 1) != 0)
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v602 + 40))(*(_QWORD *)v602, *(_QWORD *)&v602[16]);
LABEL_971:
        v440.n128_f64[0] = re::HashBrown<unsigned int,re::GeomMeshWithNGons::NGonToTriangleInfo,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::deinit((uint64_t)&v560);
        switch(v554)
        {
          case 2:
            if (*((_QWORD *)&v559 + 1))
            {
              if (v556)
                v556 = 0;
              v439 = v555;
              if (v555)
              {
                (*(void (**)(__n128))(**((_QWORD **)&v559 + 1) + 40))(v440);
                v555 = 0;
              }
              v558 = 0u;
              v559 = 0u;
              v557 = 0u;
            }
            break;
          case 1:
            if (v555)
            {
              v439 = (re::GeomAttribute *)v558;
              if ((_QWORD)v558)
                (*(void (**)(double))(*(_QWORD *)v555 + 40))(v440.n128_f64[0]);
              *(_QWORD *)&v558 = 0;
              *(_QWORD *)(v12 + 8) = 0;
              *(_QWORD *)(v12 + 16) = 0;
              *(_QWORD *)v12 = 0;
              ++DWORD2(v557);
            }
            break;
          case 0:
            LODWORD(v555) = 0;
            break;
          default:
LABEL_1246:
            re::internal::assertLog((re::internal *)4, (uint64_t)v439, v440.n128_f64[0], "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
            _os_crash();
            __break(1u);
            goto LABEL_1247;
        }
        re::GeomMesh::~GeomMesh((re::GeomMesh *)&v548, v439);
LABEL_986:
        if (v566)
        {
          if (v567)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v566 + 40))(v566, v568);
            v567 = 0;
            v568 = 0;
          }
          v566 = 0;
        }
        if (v565)

        return;
      default:
LABEL_61:
        v44 = 0;
        goto LABEL_62;
    }
  }
}

uint64_t re::makeGeomModelFromModelDescriptor@<X0>(re *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  id v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  signed int v14;
  unsigned int v15;
  _anonymous_namespace_ *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t i;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  _OWORD *v37;
  uint64_t v38;
  _OWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int *v44;
  int v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  re::GeomAttribute *v53;
  uint64_t v54;
  const re::GeomIndexMap *v55;
  uint64_t v56;
  const re::GeomIndexMap *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _OWORD *v61;
  re::GeomAttribute *v62;
  uint64_t v63;
  uint64_t v64;
  re::GeomAttribute *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  re::GeomAttribute *v70;
  re::GeomAttribute *v71;
  uint64_t result;
  re *v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76[6];
  char v77[8];
  __int128 v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  int v82;
  char v83;
  uint64_t v84[8];
  uint64_t v85;
  uint64_t v86;
  uint64_t v87[2];
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  int v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  unsigned int v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int16 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _OWORD v126[3];
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  re::GeomAttribute *v132;
  char v133;
  _BYTE v134[48];
  uint64_t v135;
  uint64_t v136;
  _OWORD v137[3];
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  re::GeomAttribute *v143;
  unsigned __int8 v144[8];
  uint64_t v145;
  unsigned __int8 v146[8];
  uint64_t v147;
  uint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  int v151;
  uint64_t v152;
  __int128 v153;
  _OWORD v154[2];
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  unint64_t v158;
  int v159;
  re::GeomAttribute *v160;
  unsigned __int8 v161[8];
  _BYTE v162[40];
  unsigned __int8 v163[8];
  _BYTE v164[40];
  _BYTE v165[48];
  _BYTE v166[12];
  __int16 v167;
  int v168;
  __int16 v169;
  unint64_t v170;
  __int16 v171;
  unint64_t v172;
  uint64_t v173;

  v173 = *MEMORY[0x24BDAC8D0];
  re::makeGeomMeshFromModelDescriptor(this, (unint64_t)v77);
  if (!v77[0])
  {
    v137[0] = v78;
    re::DynamicString::DynamicString((re::DynamicString *)&v137[1], (const re::DynamicString *)&v79);
    *(_BYTE *)a2 = 0;
    *(_OWORD *)(a2 + 8) = v137[0];
    *(_QWORD *)(a2 + 24) = *(_QWORD *)&v137[1];
    *(_QWORD *)(a2 + 48) = *((_QWORD *)&v137[2] + 1);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)((char *)&v137[1] + 8);
    return re::Result<re::GeomMeshWithNGons,re::DetailedError>::~Result((uint64_t)v77);
  }
  v5 = (unint64_t)&v110;
  v6 = *((_QWORD *)this + 1);
  if (!v6)
  {
    re::GeomModel::GeomModel((re::GeomModel *)v137);
    if (!*((_QWORD *)&v137[2] + 1))
      re::DynamicArray<re::GeomMesh>::setCapacity(&v137[2], 1uLL);
    re::DynamicArray<re::GeomMesh>::add((uint64_t)&v137[2], (uint64_t)&v78);
    if (!v140)
      re::DynamicArray<int>::setCapacity((_QWORD *)&v139 + 1, 1uLL);
    LODWORD(v153) = *((_DWORD *)this + 1);
    re::DynamicArray<int>::add((_QWORD *)&v139 + 1, &v153);
    v16 = (_anonymous_namespace_ *)re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)&v153, (uint64_t)this + 136);
    v17 = v150;
    if (v150 >= v149)
    {
      v18 = v150 + 1;
      if (v149 < v150 + 1)
      {
        if (v148)
        {
          v19 = 8;
          if (v149)
            v19 = 2 * v149;
          if (v19 <= v18)
            v20 = v150 + 1;
          else
            v20 = v19;
          re::DynamicArray<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::setCapacity(&v148, v20);
        }
        else
        {
          re::DynamicArray<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::setCapacity(&v148, v18);
          ++v151;
        }
      }
      v17 = v150;
    }
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(v152 + 48 * v17, (uint64_t)&v153);
    ++v150;
    ++v151;
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v153);
    v99 = 0;
    v96 = 0;
    v97 = 0uLL;
    LODWORD(v98) = 0;
    v93 = 0;
    v90 = 0;
    v91 = 0uLL;
    LODWORD(v92) = 0;
    re::DynamicArray<re::GeomIndexMap>::resize((uint64_t)&v96, 1uLL);
    re::DynamicArray<re::GeomIndexMap>::resize((uint64_t)&v90, 1uLL);
    v66 = 0;
    v67 = *((_DWORD *)this + 4);
    *(_QWORD *)&v126[0] = 0xFFFFFFFF00000000;
    DWORD2(v126[0]) = -1;
    BYTE12(v126[0]) = 0;
    if (v67 - 1 <= 0xFFFFFFFD)
    {
      DWORD2(v126[0]) = v67 - 1;
      v66 = v67;
      *(_QWORD *)&v126[0] = v67;
    }
    LODWORD(v126[1]) = v66;
    if (!*((_QWORD *)&v97 + 1))
      goto LABEL_213;
    re::GeomIndexMap::operator=(v99, (uint64_t)v126);
    if (!BYTE12(v126[0]))
      goto LABEL_176;
    if (BYTE12(v126[0]) == 2)
    {
      v69 = *((_QWORD *)&v128 + 1);
      if (!*((_QWORD *)&v128 + 1))
        goto LABEL_176;
      if (*((_QWORD *)&v126[1] + 1))
        *((_QWORD *)&v126[1] + 1) = 0;
      if (!*(_QWORD *)&v126[1])
        goto LABEL_176;
    }
    else
    {
      if (BYTE12(v126[0]) != 1)
        goto LABEL_217;
      v69 = *(_QWORD *)&v126[1];
      if (!*(_QWORD *)&v126[1] || !(_QWORD)v127)
        goto LABEL_176;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 40))(v69);
LABEL_176:
    if (!*((_QWORD *)&v91 + 1))
      goto LABEL_214;
    re::GeomIndexMap::operator=(v93, (uint64_t)&v81);
    LOBYTE(v153) = 1;
    *((_QWORD *)&v153 + 1) = v96;
    v154[0] = v97;
    v96 = 0;
    v97 = 0uLL;
    *((_QWORD *)&v154[1] + 1) = v99;
    v99 = 0;
    LODWORD(v98) = v98 + 1;
    LODWORD(v154[1]) = 1;
    re::Optional<re::DynamicArray<re::GeomIndexMap>>::operator=(v144, (unsigned __int8 *)&v153);
    if ((_BYTE)v153)
      re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)&v153 + 8);
    LOBYTE(v153) = 1;
    *((_QWORD *)&v153 + 1) = v90;
    v154[0] = v91;
    v90 = 0;
    v91 = 0uLL;
    *((_QWORD *)&v154[1] + 1) = v93;
    v93 = 0;
    LODWORD(v92) = v92 + 1;
    LODWORD(v154[1]) = 1;
    re::Optional<re::DynamicArray<re::GeomIndexMap>>::operator=(v146, (unsigned __int8 *)&v153);
    if ((_BYTE)v153)
      re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)&v153 + 8);
    re::DynamicString::operator=((re::DynamicString *)v137, (re *)((char *)this + 184));
    re::types::Ok<re::GeomModel>::Ok((uint64_t)&v153, (uint64_t)v137);
    re::Result<re::GeomModel,re::DetailedError>::Result(a2, (uint64_t)&v153);
    re::DynamicArray<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::deinit((uint64_t)v165);
    if (v163[0])
      re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)v164);
    if (v161[0])
      re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)v162);
    if (*((_QWORD *)&v156 + 1))
    {
      v70 = v160;
      if (v160)
        (*(void (**)(void))(**((_QWORD **)&v156 + 1) + 40))();
      v160 = 0;
      v157 = 0;
      v158 = 0;
      *((_QWORD *)&v156 + 1) = 0;
      ++v159;
    }
    re::DynamicArray<re::GeomMesh>::deinit((uint64_t)&v154[1], v70);
    if ((_QWORD)v153 && (BYTE8(v153) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v153 + 40))();
    re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)&v90);
    re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)&v96);
    re::DynamicArray<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::deinit((uint64_t)&v148);
    if (v146[0])
      re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)&v147);
    if (v144[0])
      re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)&v145);
    if (*((_QWORD *)&v139 + 1))
    {
      v71 = v143;
      if (v143)
        (*(void (**)(void))(**((_QWORD **)&v139 + 1) + 40))();
      v143 = 0;
      v140 = 0;
      v141 = 0;
      *((_QWORD *)&v139 + 1) = 0;
      ++v142;
    }
    re::DynamicArray<re::GeomMesh>::deinit((uint64_t)&v137[2], v71);
    if (*(_QWORD *)&v137[0] && (BYTE8(v137[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v137[0] + 40))();
    return re::Result<re::GeomMeshWithNGons,re::DetailedError>::~Result((uint64_t)v77);
  }
  *(_QWORD *)&v137[0] = *((_QWORD *)this + 1);
  v7 = (id)(v6 + 8);
  re::GeomModelDescriptor::makeConvertedValues<unsigned int>((_anonymous_namespace_ **)v137, &v119);
  if (*(_QWORD *)&v137[0])

  if (*((_QWORD *)this + 3) != v80)
  {
    v21 = v137[0];
    v22 = v137[1];
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 100;
    *(_QWORD *)(a2 + 16) = &re::AssetErrorCategory(void)::instance;
    *(_OWORD *)(a2 + 24) = v21;
    *(_OWORD *)(a2 + 40) = v22;
LABEL_154:
    if (v123)
    {
      if (v124)
      {
        (*(void (**)(void))(*(_QWORD *)v123 + 40))();
        v124 = 0;
        v125 = 0;
      }
      v123 = 0;
    }
    if (v122)

    return re::Result<re::GeomMeshWithNGons,re::DetailedError>::~Result((uint64_t)v77);
  }
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v76, (uint64_t)this + 136);
  v9 = (uint64_t)re::GeomModel::GeomModel((re::GeomModel *)&v153);
  v116 = 0;
  v115 = 0u;
  v114 = 0u;
  v117 = 0x7FFFFFFFLL;
  v10 = v80;
  if (v80)
  {
    v11 = 0;
    do
    {
      LODWORD(v126[0]) = *(_DWORD *)(v119 + v120 * v11);
      v12 = (_QWORD *)re::HashTable<unsigned int,unsigned long,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::tryGet((uint64_t)&v114, v126[0]);
      v9 = re::HashBrown<unsigned int,re::GeomMeshWithNGons::NGonToTriangleInfo,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(&v85, v11);
      if (v9 == -1)
        v13 = 1;
      else
        v13 = *(_QWORD *)(v86 + 96 * v9 + 40);
      *(_QWORD *)&v137[0] = v13;
      if (v12)
        *v12 += v13;
      else
        re::HashTable<unsigned int,unsigned long,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::add((uint64_t)&v114, v126, v137);
      ++v11;
    }
    while (v10 != v11);
    v14 = HIDWORD(v115);
    v15 = v116;
  }
  else
  {
    v15 = 0;
    v14 = 0;
  }
  v112 = 0;
  v111 = 0u;
  v110 = 0u;
  v113 = 0x7FFFFFFFLL;
  v75 = v14;
  v23 = 0;
  if (v15)
  {
    v24 = (int *)(v115 + 8);
    while (1)
    {
      v25 = *v24;
      v24 += 6;
      if (v25 < 0)
        break;
      if (v15 == ++v23)
      {
        LODWORD(v23) = v15;
        break;
      }
    }
  }
  if (v15 != (_DWORD)v23)
  {
    v26 = v23;
    v27 = v115;
    do
    {
      v28 = v27 + 24 * v26;
      LODWORD(v126[0]) = *(_DWORD *)(v28 + 12);
      v29 = *(_QWORD *)(v28 + 16);
      *(_QWORD *)&v137[2] = 0;
      memset(v137, 0, 28);
      if (v29)
        re::DynamicArray<int>::setCapacity(v137, v29);
      re::HashTable<unsigned int,re::DynamicArray<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addNew((uint64_t)&v110, v126, (uint64_t)v137);
      if (*(_QWORD *)&v137[0] && *(_QWORD *)&v137[2])
        (*(void (**)(void))(**(_QWORD **)&v137[0] + 40))();
      if (v15 <= (int)v23 + 1)
        v30 = v23 + 1;
      else
        v30 = v15;
      while (1)
      {
        v26 = (v23 + 1);
        if (v30 - 1 == (_DWORD)v23)
          break;
        LODWORD(v23) = v23 + 1;
        v31 = v26;
        if ((*(_DWORD *)(v27 + 24 * v26 + 8) & 0x80000000) != 0)
          goto LABEL_51;
      }
      v31 = v30;
LABEL_51:
      LODWORD(v23) = v31;
    }
    while (v15 != v31);
  }
  v73 = this;
  v74 = a2;
  if ((_DWORD)v10)
  {
    for (i = 0; i != v10; ++i)
    {
      v33 = (_QWORD *)re::HashTable<unsigned int,re::DynamicArray<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::tryGet((uint64_t)&v110, *(_DWORD *)(v119 + v120 * i));
      v34 = re::HashBrown<unsigned int,re::GeomMeshWithNGons::NGonToTriangleInfo,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(&v85, i);
      if (v34 == -1)
      {
        LODWORD(v137[0]) = i;
        re::DynamicArray<int>::add(v33, v137);
      }
      else
      {
        v35 = v86 + 96 * v34;
        v37 = *(_OWORD **)(v35 + 40);
        v36 = (uint64_t *)(v35 + 40);
        v5 = (unint64_t)v37;
        if (v37)
        {
          v38 = 0;
          v39 = 0;
          v40 = (_QWORD *)(v86 + 96 * v34 + 48);
          while (1)
          {
            v41 = *v36;
            if (*v36 <= (unint64_t)v39)
              break;
            re::DynamicArray<int>::add(v33, (_DWORD *)(*v40 + v38));
            v39 = (_OWORD *)((char *)v39 + 1);
            v38 += 4;
            if ((_OWORD *)v5 == v39)
              goto LABEL_61;
          }
          v96 = 0;
          v139 = 0u;
          v138 = 0u;
          memset(v137, 0, sizeof(v137));
          v49 = MEMORY[0x24BDACB70];
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v126[0]) = 136315906;
          *(_QWORD *)((char *)v126 + 4) = "operator[]";
          WORD6(v126[0]) = 1024;
          *(_DWORD *)((char *)v126 + 14) = 476;
          WORD1(v126[1]) = 2048;
          *(_QWORD *)((char *)&v126[1] + 4) = v39;
          WORD6(v126[1]) = 2048;
          *(_QWORD *)((char *)&v126[1] + 14) = v41;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_205:
          *(_QWORD *)v166 = 0;
          v139 = 0u;
          v138 = 0u;
          memset(v137, 0, sizeof(v137));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v126[0]) = 136315906;
          *(_QWORD *)((char *)v126 + 4) = "operator[]";
          WORD6(v126[0]) = 1024;
          *(_DWORD *)((char *)v126 + 14) = 789;
          WORD1(v126[1]) = 2048;
          *(_QWORD *)((char *)&v126[1] + 4) = v10;
          WORD6(v126[1]) = 2048;
          *(_QWORD *)((char *)&v126[1] + 14) = v49;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_206:
          *(_QWORD *)v166 = 0;
          v139 = 0u;
          v138 = 0u;
          memset(v137, 0, sizeof(v137));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v126[0]) = 136315906;
          *(_QWORD *)((char *)v126 + 4) = "operator[]";
          WORD6(v126[0]) = 1024;
          *(_DWORD *)((char *)v126 + 14) = 789;
          WORD1(v126[1]) = 2048;
          *(_QWORD *)((char *)&v126[1] + 4) = v10;
          WORD6(v126[1]) = 2048;
          *(_QWORD *)((char *)&v126[1] + 14) = v49;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_207:
          v118 = 0;
          v128 = 0u;
          v127 = 0u;
          memset(v126, 0, sizeof(v126));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v166 = 136315906;
          *(_QWORD *)&v166[4] = "operator[]";
          v167 = 1024;
          v168 = 789;
          v169 = 2048;
          v170 = v10;
          v171 = 2048;
          v172 = v49;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_208:
          v88 = 0;
          v139 = 0u;
          v138 = 0u;
          memset(v137, 0, sizeof(v137));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v166 = 136315906;
          *(_QWORD *)&v166[4] = "operator[]";
          v167 = 1024;
          v168 = 789;
          v169 = 2048;
          v170 = v10;
          v171 = 2048;
          v172 = v49;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_209:
          *(_QWORD *)v166 = 0;
          v139 = 0u;
          v138 = 0u;
          memset(v137, 0, sizeof(v137));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v126[0]) = 136315906;
          *(_QWORD *)((char *)v126 + 4) = "operator[]";
          WORD6(v126[0]) = 1024;
          *(_DWORD *)((char *)v126 + 14) = 789;
          WORD1(v126[1]) = 2048;
          *(_QWORD *)((char *)&v126[1] + 4) = v10;
          WORD6(v126[1]) = 2048;
          *(_QWORD *)((char *)&v126[1] + 14) = v49;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_210:
          *(_QWORD *)v166 = 0;
          v139 = 0u;
          v138 = 0u;
          memset(v137, 0, sizeof(v137));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v126[0]) = 136315906;
          *(_QWORD *)((char *)v126 + 4) = "operator[]";
          WORD6(v126[0]) = 1024;
          *(_DWORD *)((char *)v126 + 14) = 789;
          WORD1(v126[1]) = 2048;
          *(_QWORD *)((char *)&v126[1] + 4) = v10;
          WORD6(v126[1]) = 2048;
          *(_QWORD *)((char *)&v126[1] + 14) = v49;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_211:
          *(_QWORD *)v166 = 0;
          v139 = 0u;
          v138 = 0u;
          memset(v137, 0, sizeof(v137));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v126[0]) = 136315906;
          *(_QWORD *)((char *)v126 + 4) = "operator[]";
          WORD6(v126[0]) = 1024;
          *(_DWORD *)((char *)v126 + 14) = 789;
          WORD1(v126[1]) = 2048;
          *(_QWORD *)((char *)&v126[1] + 4) = v10;
          WORD6(v126[1]) = 2048;
          *(_QWORD *)((char *)&v126[1] + 14) = v49;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_212:
          *(_QWORD *)v166 = 0;
          v139 = 0u;
          v138 = 0u;
          memset(v137, 0, sizeof(v137));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v126[0]) = 136315906;
          *(_QWORD *)((char *)v126 + 4) = "operator[]";
          WORD6(v126[0]) = 1024;
          *(_DWORD *)((char *)v126 + 14) = 789;
          WORD1(v126[1]) = 2048;
          *(_QWORD *)((char *)&v126[1] + 4) = v10;
          WORD6(v126[1]) = 2048;
          *(_QWORD *)((char *)&v126[1] + 14) = v49;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_213:
          *(_QWORD *)&v114 = 0;
          v156 = 0u;
          v155 = 0u;
          memset(v154, 0, sizeof(v154));
          v153 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v119) = 136315906;
          *(_QWORD *)(v5 + 116) = "operator[]";
          WORD2(v120) = 1024;
          *(_DWORD *)(v5 + 126) = 789;
          v121 = 2048;
          *(_QWORD *)(v5 + 132) = 0;
          WORD2(v122) = 2048;
          *(_QWORD *)(v5 + 142) = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_214:
          v119 = 0;
          v156 = 0u;
          v155 = 0u;
          memset(v154, 0, sizeof(v154));
          v153 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v126[0]) = 136315906;
          *(_QWORD *)(v5 + 180) = "operator[]";
          WORD6(v126[0]) = 1024;
          *(_DWORD *)(v5 + 190) = 789;
          WORD1(v126[1]) = 2048;
          *(_QWORD *)(v5 + 196) = 0;
          WORD6(v126[1]) = 2048;
          *(_QWORD *)(v5 + 206) = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
      }
LABEL_61:
      ;
    }
  }
  re::DynamicArray<re::GeomMesh>::resize((uint64_t)&v154[1], v75);
  LODWORD(v137[0]) = 0;
  re::DynamicArray<unsigned int>::resize((_QWORD *)&v156 + 1, v75, v137);
  re::DynamicArray<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::resize((uint64_t)v165, v75, (uint64_t)v76);
  v109 = 0;
  v106 = 0;
  v107 = 0uLL;
  v108 = 0;
  v105 = 0;
  v102 = 0;
  v103 = 0uLL;
  v104 = 0;
  re::DynamicArray<re::GeomIndexMap>::resize((uint64_t)&v106, v75);
  re::DynamicArray<re::GeomIndexMap>::resize((uint64_t)&v102, v75);
  v96 = v81;
  LODWORD(v97) = v82;
  BYTE4(v97) = v83;
  if (v83 == 2)
  {
    re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrown((uint64_t)&v97 + 8, v84);
  }
  else if (v83 == 1)
  {
    re::DynamicArray<float>::DynamicArray((uint64_t)&v97 + 8, v84);
  }
  else
  {
    if (v83)
      goto LABEL_218;
    DWORD2(v97) = v84[0];
  }
  v43 = v112;
  v5 = 0;
  if (v112)
  {
    v44 = (int *)(v111 + 8);
    while (1)
    {
      v45 = *v44;
      v44 += 14;
      if (v45 < 0)
        break;
      if (v112 == ++v5)
      {
        v5 = v112;
        break;
      }
    }
  }
  if (v112 == (_DWORD)v5)
  {
LABEL_113:
    LOBYTE(v137[0]) = 1;
    *((_QWORD *)&v137[0] + 1) = v106;
    v137[1] = v107;
    v106 = 0;
    v107 = 0uLL;
    *((_QWORD *)&v137[2] + 1) = v109;
    v109 = 0;
    ++v108;
    LODWORD(v137[2]) = 1;
    re::Optional<re::DynamicArray<re::GeomIndexMap>>::operator=(v161, (unsigned __int8 *)v137);
    if (LOBYTE(v137[0]))
      re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)v137 + 8);
    LOBYTE(v137[0]) = 1;
    *((_QWORD *)&v137[0] + 1) = v102;
    v137[1] = v103;
    v102 = 0;
    v103 = 0uLL;
    *((_QWORD *)&v137[2] + 1) = v105;
    v105 = 0;
    ++v104;
    LODWORD(v137[2]) = 1;
    re::Optional<re::DynamicArray<re::GeomIndexMap>>::operator=(v163, (unsigned __int8 *)v137);
    if (LOBYTE(v137[0]))
      re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)v137 + 8);
    re::types::Ok<re::GeomModel>::Ok((uint64_t)v126, (uint64_t)&v153);
    re::Result<re::GeomModel,re::DetailedError>::Result((uint64_t)v137, (uint64_t)v126);
    re::DynamicArray<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::deinit((uint64_t)&v136);
    if (v134[40])
      re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)&v135);
    if (v133)
      re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)v134);
    if (*((_QWORD *)&v128 + 1))
    {
      v62 = v132;
      if (v132)
        (*(void (**)(void))(**((_QWORD **)&v128 + 1) + 40))();
      v132 = 0;
      v129 = 0;
      v130 = 0;
      *((_QWORD *)&v128 + 1) = 0;
      ++v131;
    }
    re::DynamicArray<re::GeomMesh>::deinit((uint64_t)&v126[2], v62);
    if (*(_QWORD *)&v126[0] && (BYTE8(v126[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v126[0] + 40))();
    if (!BYTE4(v97))
      goto LABEL_139;
    if (BYTE4(v97) == 2)
    {
      v64 = v101;
      if (!v101)
        goto LABEL_139;
      if (v98)
        v98 = 0;
      if (!*((_QWORD *)&v97 + 1))
        goto LABEL_139;
    }
    else
    {
      if (BYTE4(v97) != 1)
        goto LABEL_219;
      v64 = *((_QWORD *)&v97 + 1);
      if (!*((_QWORD *)&v97 + 1) || !v100)
        goto LABEL_139;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
LABEL_139:
    re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)&v102);
    re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)&v106);
    re::HashTable<unsigned int,re::DynamicArray<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)&v110);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v114);
    re::DynamicArray<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::deinit((uint64_t)v165);
    if (v163[0])
      re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)v164);
    if (v161[0])
      re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)v162);
    if (*((_QWORD *)&v156 + 1))
    {
      v65 = v160;
      if (v160)
        (*(void (**)(void))(**((_QWORD **)&v156 + 1) + 40))();
      v160 = 0;
      v157 = 0;
      v158 = 0;
      *((_QWORD *)&v156 + 1) = 0;
      ++v159;
    }
    re::DynamicArray<re::GeomMesh>::deinit((uint64_t)&v154[1], v65);
    if ((_QWORD)v153 && (BYTE8(v153) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v153 + 40))();
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v76);
    if (LOBYTE(v137[0]))
    {
      re::DynamicString::operator=((re::DynamicString *)((char *)v137 + 8), (re *)((char *)v73 + 184));
      re::Result<re::GeomModel,re::DetailedError>::Result(v74, (unsigned __int8 *)v137);
    }
    else
    {
      v153 = *(_OWORD *)((char *)v137 + 8);
      re::DynamicString::DynamicString((re::DynamicString *)v154, (const re::DynamicString *)((char *)&v137[1] + 8));
      *(_BYTE *)v74 = 0;
      *(_OWORD *)(v74 + 8) = v153;
      *(_QWORD *)(v74 + 24) = *(_QWORD *)&v154[0];
      *(_QWORD *)(v74 + 48) = *((_QWORD *)&v154[1] + 1);
      *(_OWORD *)(v74 + 32) = *(_OWORD *)((char *)v154 + 8);
    }
    re::Result<re::GeomModel,re::DetailedError>::~Result((uint64_t)v137);
    goto LABEL_154;
  }
  v46 = 0;
  v47 = v5;
  v48 = v111;
  while (1)
  {
    v90 = 0xFFFFFFFF00000000;
    LODWORD(v91) = -1;
    BYTE4(v91) = 0;
    DWORD2(v91) = 0;
    v10 = v46;
    v49 = v158;
    if (v158 <= v46)
      goto LABEL_205;
    v50 = v48 + 56 * v47;
    *((_DWORD *)v160 + v46) = *(_DWORD *)(v50 + 12);
    v89 = 0;
    v88 = 0;
    v51 = *(_QWORD *)(v50 + 48);
    v52 = *(_QWORD *)(v50 + 32);
    v88 = v51;
    v89 = v52;
    v87[1] = 0;
    v87[0] = 0;
    v49 = *((_QWORD *)&v107 + 1);
    if (*((_QWORD *)&v107 + 1) <= v10)
      goto LABEL_206;
    re::makeMeshFromFaces((unint64_t)&v78, &v88, v87, v109 + 80 * v10, (uint64_t)&v90, (unint64_t)v137);
    v49 = v155;
    if ((unint64_t)v155 <= v10)
      goto LABEL_207;
    re::GeomMesh::operator=((uint64_t *)(v156 + 736 * v10), (uint64_t *)v137);
    re::GeomMesh::~GeomMesh((re::GeomMesh *)v137, v53);
    re::remapIndexMap((unsigned int *)&v90, (const re::GeomIndexMap *)&v96, (uint64_t)v126);
    v49 = *((_QWORD *)&v103 + 1);
    if (*((_QWORD *)&v103 + 1) <= v10)
      goto LABEL_208;
    re::GeomIndexMap::operator=(v105 + 80 * v10, (uint64_t)v126);
    if (!BYTE12(v126[0]))
      goto LABEL_90;
    if (BYTE12(v126[0]) != 2)
      break;
    v56 = *((_QWORD *)&v128 + 1);
    if (*((_QWORD *)&v128 + 1))
    {
      if (*((_QWORD *)&v126[1] + 1))
        *((_QWORD *)&v126[1] + 1) = 0;
      if (*(_QWORD *)&v126[1])
LABEL_89:
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 40))(v56);
    }
LABEL_90:
    v49 = v155;
    if ((unint64_t)v155 <= v10)
      goto LABEL_209;
    v49 = *((_QWORD *)&v107 + 1);
    if (*((_QWORD *)&v107 + 1) <= v10)
      goto LABEL_210;
    re::remapSkinningAttributes((re *)(v156 + 736 * v10), (re::GeomMesh *)&v78, (const re::GeomMesh *)(v109 + 80 * v10), v55);
    v49 = v155;
    if ((unint64_t)v155 <= v10)
      goto LABEL_211;
    v49 = *((_QWORD *)&v107 + 1);
    if (*((_QWORD *)&v107 + 1) <= v10)
      goto LABEL_212;
    re::remapSubdivisionSurfaceAttributes((re *)(v156 + 736 * v10), (re::GeomMesh *)&v78, v109 + 80 * v10, v57);
    if (BYTE4(v91))
    {
      if (BYTE4(v91) != 2)
      {
        if (BYTE4(v91) != 1)
          goto LABEL_216;
        v59 = *((_QWORD *)&v91 + 1);
        if (!*((_QWORD *)&v91 + 1) || !v94)
          goto LABEL_105;
LABEL_104:
        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 40))(v59);
        goto LABEL_105;
      }
      v59 = v95;
      if (v95)
      {
        if (v92)
          v92 = 0;
        if (*((_QWORD *)&v91 + 1))
          goto LABEL_104;
      }
    }
LABEL_105:
    if (v43 <= (int)v5 + 1)
      v60 = (v5 + 1);
    else
      v60 = v43;
    while (1)
    {
      v47 = (v5 + 1);
      if ((_DWORD)v60 - 1 == (_DWORD)v5)
        break;
      LODWORD(v5) = v5 + 1;
      v61 = (_OWORD *)v47;
      if ((*(_DWORD *)(v48 + 56 * v47 + 8) & 0x80000000) != 0)
        goto LABEL_112;
    }
    v61 = (_OWORD *)v60;
LABEL_112:
    v46 = v10 + 1;
    v5 = (unint64_t)v61;
    if (v43 == (_DWORD)v61)
      goto LABEL_113;
  }
  if (BYTE12(v126[0]) == 1)
  {
    v56 = *(_QWORD *)&v126[1];
    if (*(_QWORD *)&v126[1] && (_QWORD)v127)
      goto LABEL_89;
    goto LABEL_90;
  }
  re::internal::assertLog((re::internal *)4, v54, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
  _os_crash();
  __break(1u);
LABEL_216:
  re::internal::assertLog((re::internal *)4, v58, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
  _os_crash();
  __break(1u);
LABEL_217:
  re::internal::assertLog((re::internal *)4, v68, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
  _os_crash();
  __break(1u);
LABEL_218:
  re::internal::assertLog((re::internal *)4, v42, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "GeomIndexMap", 433);
  _os_crash();
  __break(1u);
LABEL_219:
  re::internal::assertLog((re::internal *)4, v63, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::DynamicArray<re::GeomIndexMap>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 > a2)
    {
      v8 = 80 * a2;
      v9 = a2;
      while (1)
      {
        v10 = *(_QWORD *)(a1 + 32);
        v11 = *(unsigned __int8 *)(v10 + v8 + 12);
        if (v11 == 2)
        {
          re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(v10 + v8 + 16);
        }
        else if (v11 == 1)
        {
          v12 = v10 + v8;
          v13 = *(_QWORD *)(v10 + v8 + 16);
          if (v13)
          {
            a2 = *(_QWORD *)(v12 + 48);
            if (a2)
              (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
            *(_QWORD *)(v12 + 48) = 0;
            *(_QWORD *)(v10 + v8 + 24) = 0;
            *(_QWORD *)(v10 + v8 + 32) = 0;
            *(_QWORD *)(v10 + v8 + 16) = 0;
            ++*(_DWORD *)(v10 + v8 + 40);
          }
        }
        else
        {
          if (*(_BYTE *)(v10 + v8 + 12))
          {
            re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
            _os_crash();
            __break(1u);
            return;
          }
          *(_DWORD *)(v10 + v8 + 16) = 0;
        }
        ++v9;
        v8 += 80;
        if (v9 >= *(_QWORD *)(a1 + 16))
          goto LABEL_20;
      }
    }
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::GeomIndexMap>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = v2 - v4;
    if (v2 > v4)
    {
      v6 = 80 * v4;
      do
      {
        v7 = *(_QWORD *)(a1 + 32) + v6;
        *(_QWORD *)v7 = 0xFFFFFFFF00000000;
        *(_DWORD *)(v7 + 8) = -1;
        *(_BYTE *)(v7 + 12) = 0;
        *(_DWORD *)(v7 + 16) = 0;
        v6 += 80;
        --v5;
      }
      while (v5);
    }
LABEL_20:
    *(_QWORD *)(a1 + 16) = v2;
    ++*(_DWORD *)(a1 + 24);
  }
}

void re::GeomIndexMap::~GeomIndexMap(re::GeomIndexMap *this, uint64_t a2)
{
  int v3;
  uint64_t v4;

  v3 = *((unsigned __int8 *)this + 12);
  if (v3 == 2)
  {
    re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 16);
  }
  else if (v3 == 1)
  {
    v4 = *((_QWORD *)this + 2);
    if (v4)
    {
      if (*((_QWORD *)this + 6))
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
      *((_QWORD *)this + 6) = 0;
      *((_QWORD *)this + 3) = 0;
      *((_QWORD *)this + 4) = 0;
      *((_QWORD *)this + 2) = 0;
      ++*((_DWORD *)this + 10);
    }
  }
  else if (*((_BYTE *)this + 12))
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    _os_crash();
    __break(1u);
  }
  else
  {
    *((_DWORD *)this + 4) = 0;
  }
}

void re::GeomModelDescriptor::makeConvertedValues<unsigned int>(_anonymous_namespace_ **a1@<X0>, _QWORD *a2@<X8>)
{
  _anonymous_namespace_ *v3;
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *a1;
  if (*a1)
  {
    v4 = *((unsigned __int8 *)v3 + 33);
    if ((((0x30u >> v4) & 1) == 0 || v4 > 5) && v4 != 5 || *((_BYTE *)v3 + 32) == 0)
    {
      re::internal::DataPayload::computePoDConversionHelper<unsigned int>(*a1, (uint64_t)v12);
      if (v12[0])
      {
        v8 = v14;
        a2[4] = v13;
        a2[5] = v8;
        v9 = v15;
        v14 = 0;
        v15 = 0;
        v13 = 0;
        a2[6] = v9;
        *a2 = v9;
        a2[1] = 4;
        a2[2] = v8;
        a2[3] = 0;
      }
      else
      {
        a2[6] = 0;
        *((_OWORD *)a2 + 1) = 0u;
        *((_OWORD *)a2 + 2) = 0u;
        *(_OWORD *)a2 = 0u;
      }
      re::Result<re::FixedArray<unsigned int>,re::DetailedError>::~Result((uint64_t)v12);
    }
    else
    {
      v10 = (char *)v3 + 8;
      *a2 = *((_QWORD *)v3 + 3) + *((_QWORD *)v3 + 7);
      *(int8x16_t *)(a2 + 1) = vextq_s8(*(int8x16_t *)((char *)v3 + 40), *(int8x16_t *)((char *)v3 + 40), 8uLL);
      a2[3] = v3;
      v11 = (char *)v3 + 8;
      a2[5] = 0;
      a2[6] = 0;
      a2[4] = 0;

    }
  }
  else
  {
    a2[6] = 0;
    *((_OWORD *)a2 + 1) = 0u;
    *((_OWORD *)a2 + 2) = 0u;
    *(_OWORD *)a2 = 0u;
  }
}

__n128 re::internal::DataPayload::computePoDConversionHelper<unsigned int>@<Q0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X8>)
{
  const char *v3;
  __n128 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;

  switch(*((_BYTE *)a1 + 33))
  {
    case 0:
      re::internal::DataPayload::computeConvertedValuesInternal<unsigned int,signed char>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_11;
    case 1:
      re::internal::DataPayload::computeConvertedValuesInternal<unsigned int,unsigned char>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_11;
    case 2:
      re::internal::DataPayload::computeConvertedValuesInternal<unsigned int,short>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_11;
    case 3:
      re::internal::DataPayload::computeConvertedValuesInternal<unsigned int,unsigned short>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_11;
    case 4:
    case 5:
      re::internal::DataPayload::computeConvertedValuesInternal<unsigned int,int>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_11;
    case 6:
      re::internal::DataPayload::computeConvertedValuesInternal<unsigned int,float>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_11;
    case 7:
      re::internal::DataPayload::computeConvertedValuesInternal<unsigned int,double>((uint64_t)a1, (uint64_t *)&v8);
LABEL_11:
      result = v8;
      v7 = v9;
      *(_BYTE *)a2 = 1;
      *(__n128 *)(a2 + 8) = result;
      *(_QWORD *)(a2 + 24) = v7;
      return result;
    case 8:
    case 9:
    case 0xA:
    case 0xB:
      v3 = "Could not convert values to specified output type.";
      goto LABEL_3;
    default:
      v3 = "Unrecognized/Unsupported type.";
LABEL_3:
      result = v8;
      v5 = v9;
      v6 = v10;
      *(_BYTE *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 100;
      *(_QWORD *)(a2 + 16) = &re::AssetErrorCategory(void)::instance;
      *(__n128 *)(a2 + 24) = result;
      *(_QWORD *)(a2 + 40) = v5;
      *(_QWORD *)(a2 + 48) = v6;
      return result;
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<unsigned int,signed char>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v7 = v5 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v11 = a2[1];
      v10 = a2[2];
      while (v11 != v8)
      {
        *(_DWORD *)(v10 + 4 * v8) = *(char *)(v6 + v9);
        v9 += v5;
        ++v8;
        if (v9 >= v7)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (a2[1] > v13)
    {
      *(_BYTE *)(a2[2] + v12) = *(_BYTE *)(v6 + v14);
      v14 += *(_QWORD *)(a1 + 48);
      ++v13;
      v12 += 4;
      if (v14 >= v7)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<unsigned int,short>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v7 = v5 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v11 = a2[1];
      v10 = a2[2];
      while (v11 != v8)
      {
        *(_DWORD *)(v10 + 4 * v8) = *(__int16 *)(v6 + v9);
        v9 += v5;
        ++v8;
        if (v9 >= v7)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (a2[1] > v13)
    {
      *(_WORD *)(a2[2] + v12) = *(_WORD *)(v6 + v14);
      v14 += *(_QWORD *)(a1 + 48);
      ++v13;
      v12 += 4;
      if (v14 >= v7)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<unsigned int,int>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v7 = v5 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v11 = a2[1];
      v10 = a2[2];
      while (v11 != v8)
      {
        *(_DWORD *)(v10 + 4 * v8) = *(_DWORD *)(v6 + v9);
        v9 += v5;
        ++v8;
        if (v9 >= v7)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    v12 = 0;
    v13 = 0;
    while (a2[1] > v12)
    {
      *(_DWORD *)(a2[2] + 4 * v12) = *(_DWORD *)(v6 + v13);
      v13 += *(_QWORD *)(a1 + 48);
      ++v12;
      if (v13 >= v7)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<unsigned int,unsigned char>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v7 = v5 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v11 = a2[1];
      v10 = a2[2];
      while (v11 != v8)
      {
        *(_DWORD *)(v10 + 4 * v8) = *(unsigned __int8 *)(v6 + v9);
        v9 += v5;
        ++v8;
        if (v9 >= v7)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (a2[1] > v13)
    {
      *(_BYTE *)(a2[2] + v12) = *(_BYTE *)(v6 + v14);
      v14 += *(_QWORD *)(a1 + 48);
      ++v13;
      v12 += 4;
      if (v14 >= v7)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<unsigned int,unsigned short>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v7 = v5 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v11 = a2[1];
      v10 = a2[2];
      while (v11 != v8)
      {
        *(_DWORD *)(v10 + 4 * v8) = *(unsigned __int16 *)(v6 + v9);
        v9 += v5;
        ++v8;
        if (v9 >= v7)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (a2[1] > v13)
    {
      *(_WORD *)(a2[2] + v12) = *(_WORD *)(v6 + v14);
      v14 += *(_QWORD *)(a1 + 48);
      ++v13;
      v12 += 4;
      if (v14 >= v7)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<unsigned int,float>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v7 = v5 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v11 = a2[1];
      v10 = a2[2];
      while (v11 != v8)
      {
        *(_DWORD *)(v10 + 4 * v8) = *(float *)(v6 + v9);
        v9 += v5;
        ++v8;
        if (v9 >= v7)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    v12 = 0;
    v13 = 0;
    while (a2[1] > v12)
    {
      *(_DWORD *)(a2[2] + 4 * v12) = *(_DWORD *)(v6 + v13);
      v13 += *(_QWORD *)(a1 + 48);
      ++v12;
      if (v13 >= v7)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<unsigned int,double>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v7 = v5 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v11 = a2[1];
      v10 = a2[2];
      while (v11 != v8)
      {
        *(_DWORD *)(v10 + 4 * v8) = *(double *)(v6 + v9);
        v9 += v5;
        ++v8;
        if (v9 >= v7)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (a2[1] > v13)
    {
      *(_QWORD *)(a2[2] + v12) = *(_QWORD *)(v6 + v14);
      v14 += *(_QWORD *)(a1 + 48);
      ++v13;
      v12 += 4;
      if (v14 >= v7)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

uint64_t re::Result<re::FixedArray<unsigned int>,re::DetailedError>::~Result(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;

  if (*(_BYTE *)a1)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      if (*(_QWORD *)(a1 + 16))
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 24));
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
      }
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
  else
  {
    v4 = (_OWORD *)(a1 + 24);
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      if ((*(_BYTE *)(a1 + 32) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 40));
      *v4 = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
    }
  }
  return a1;
}

uint64_t re::GeomModelDescriptor::attributeByName(re::GeomModelDescriptor *this, const re::DynamicString *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)this + 48, (uint64_t)a2);
  if (!v3)
    return re::GeomModelDescriptor::emptyAttribute(0);
  if (*((_QWORD *)this + 14) <= *v3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((_QWORD *)this + 16) + 56 * *v3;
}

_DWORD *re::HashBrown<unsigned int,re::GeomMeshWithNGons::NGonToTriangleInfo,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::addNew(_anonymous_namespace_ *a1, unsigned int *a2, uint64_t a3)
{
  _DWORD *result;

  result = (_DWORD *)re::HashBrown<unsigned int,re::GeomMeshWithNGons::NGonToTriangleInfo,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(a1, *a2);
  if (result == (_DWORD *)-1)
    return re::HashBrown<unsigned int,re::GeomMeshWithNGons::NGonToTriangleInfo,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::internalAdd(a1, a2, a3);
  return result;
}

__n128 re::internal::DataPayload::computeConvertedValues<re::PackedFloat3>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  __n128 result;
  __int128 v13;
  unint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  unint64_t v29;
  __n128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned __int8 *)(a1 + 33) | 2) == 0xB)
  {
    v4 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 48) * v5;
    v19 = 0uLL;
    v20 = 0;
    if (*(_BYTE *)(a1 + 32))
    {
      if (v6)
      {
        v7 = 0;
        v8 = v19.n128_u64[1];
        v9 = (_DWORD *)(v20 + 8);
        v10 = -1;
        while (v8 != ++v10)
        {
          v11 = *(_DWORD *)(v4 + v7 + 8);
          *((_QWORD *)v9 - 1) = *(_QWORD *)(v4 + v7);
          *v9 = v11;
          v9 += 3;
          v7 += *(_QWORD *)(a1 + 48);
          if (v7 >= v6)
            goto LABEL_13;
        }
        v21 = 0;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v30 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v22 = 136315906;
        v23 = "operator[]";
        v24 = 1024;
        v25 = 468;
        v26 = 2048;
        v27 = v8;
        v28 = 2048;
        v29 = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_16;
      }
    }
    else if (v6)
    {
      v14 = 0;
      v8 = v19.n128_u64[1];
      v15 = (_DWORD *)(v20 + 8);
      v16 = -1;
      while (v8 != ++v16)
      {
        v17 = *(_DWORD *)(v4 + v14 + 8);
        *((_QWORD *)v15 - 1) = *(_QWORD *)(v4 + v14);
        *v15 = v17;
        v15 += 3;
        v14 += *(_QWORD *)(a1 + 48);
        if (v14 >= v6)
          goto LABEL_13;
      }
LABEL_16:
      v21 = 0;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v30 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v22 = 136315906;
      v23 = "operator[]";
      v24 = 1024;
      v25 = 468;
      v26 = 2048;
      v27 = v8;
      v28 = 2048;
      v29 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_13:
    result = v19;
    v18 = v20;
    *(_BYTE *)a2 = 1;
    *(__n128 *)(a2 + 8) = result;
    *(_QWORD *)(a2 + 24) = v18;
  }
  else
  {
    result = v30;
    v13 = v31;
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 100;
    *(_QWORD *)(a2 + 16) = &re::AssetErrorCategory(void)::instance;
    *(__n128 *)(a2 + 24) = result;
    *(_OWORD *)(a2 + 40) = v13;
  }
  return result;
}

uint64_t re::HashBrown<unsigned int,re::GeomMeshWithNGons::NGonToTriangleInfo,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x16_t v7;
  int8x16_t v8;
  unint64_t v9;
  int8x16_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a1[7])
    return -1;
  v2 = a1[2];
  if (v2 < 0x10 || !a1[3])
    return -1;
  v3 = v2 >> 4;
  v4 = 0xBF58476D1CE4E5B9 * (a2 ^ ((unint64_t)a2 >> 30));
  v5 = (0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31);
  v6 = v5 % v3;
  v7 = vdupq_n_s8(v5 & 0x7F);
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  v9 = v5 % v3;
  while (1)
  {
    v10 = *(int8x16_t *)(*a1 + 16 * v9);
    v11 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v7, v10), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    v12 = __clz(__rbit64(v11));
    if (v12 <= 0x3F)
      break;
LABEL_10:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v10, v8), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v9 + 1 == v3)
      v9 = 0;
    else
      ++v9;
    v14 = -1;
    if (v9 == v6)
      return v14;
  }
  v13 = 16 * v9;
  while (1)
  {
    v14 = v12 + v13;
    if (*(_DWORD *)(a1[1] + 96 * (v12 + v13)) == a2)
      return v14;
    if (v12 <= 0x3E)
    {
      v12 = __clz(__rbit64((-2 << v12) & v11));
      if (v12 < 0x40)
        continue;
    }
    goto LABEL_10;
  }
}

_DWORD *re::HashBrown<unsigned int,re::GeomMeshWithNGons::NGonToTriangleInfo,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::internalAdd(_anonymous_namespace_ *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  _DWORD *result;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  int v33;
  uint64_t v34;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned int,re::GeomMeshWithNGons::NGonToTriangleInfo,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::resize((uint64_t *)a1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13);
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v11;
  v17 = *a2;
  v18 = *(_QWORD *)(a3 + 8);
  v27 = *(_QWORD *)a3;
  v28 = v18;
  v29 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v30 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 32) = 0;
  v19 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(a3 + 40) = 0u;
  v20 = *(_OWORD *)(a3 + 56);
  v31 = v19;
  v32 = v20;
  *(_OWORD *)(a3 + 56) = 0u;
  v34 = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 80) = 0;
  ++*(_DWORD *)(a3 + 72);
  v33 = 1;
  v21 = *((_QWORD *)a1 + 1) + 96 * v16;
  *(_DWORD *)v21 = v17;
  re::FixedArray<float>::operator=((uint64_t *)(v21 + 8), &v27);
  re::FixedArray<float>::operator=((uint64_t *)(v21 + 32), (uint64_t *)&v29 + 1);
  re::DynamicArray<re::RigComponentConstraint>::operator=(v21 + 56, (uint64_t)&v31 + 8);
  if (*((_QWORD *)&v31 + 1))
  {
    if (v34)
      (*(void (**)(void))(**((_QWORD **)&v31 + 1) + 40))();
    v34 = 0;
    v32 = 0uLL;
    *((_QWORD *)&v31 + 1) = 0;
    ++v33;
  }
  if (*((_QWORD *)&v29 + 1))
  {
    if (v30)
    {
      (*(void (**)(void))(**((_QWORD **)&v29 + 1) + 40))();
      v30 = 0;
      *(_QWORD *)&v31 = 0;
    }
    *((_QWORD *)&v29 + 1) = 0;
  }
  if (v27 && v28)
    (*(void (**)(void))(*(_QWORD *)v27 + 40))();
  v22 = *((_QWORD *)a1 + 4);
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v22 - (v15 == 255);
  v23 = (unsigned int *)(*((_QWORD *)a1 + 1) + 96 * v16);
  v25 = *v23;
  result = v23 + 2;
  v26 = 0xBF58476D1CE4E5B9 * (v25 ^ ((unint64_t)v25 >> 30));
  *((_QWORD *)a1 + 5) ^= ((0x94D049BB133111EBLL * (v26 ^ (v26 >> 27))) >> 31) ^ (0x94D049BB133111EBLL
                                                                               * (v26 ^ (v26 >> 27)));
  return result;
}

double re::HashBrown<unsigned int,re::GeomMeshWithNGons::NGonToTriangleInfo,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::resize(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n128 v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _QWORD v24[2];
  uint64_t v25;
  __int128 v26;
  _BYTE v27[48];

  v3 = a1[2];
  v2 = a1[3];
  v4 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v5 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v4 > (192 * v3) >> 7)
    v5 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v6 = (v5 << 7) / 0x97;
  v7 = a1[7];
  v26 = 0u;
  *(_OWORD *)v27 = 0u;
  if (v4 <= v3)
    v8 = v2 + 1;
  else
    v8 = v6;
  memset(&v27[16], 0, 32);
  re::HashBrown<unsigned int,re::GeomMeshWithNGons::NGonToTriangleInfo,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::init(&v26, v7, v8);
  v24[0] = a1;
  v10 = a1[2];
  if (v10 >= 0x10)
  {
    v11 = 0;
    v12 = *a1;
    v13 = v10 >> 4;
    v14 = (__n128)xmmword_2260EE390;
    v9.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      v15 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v24[1] = (unsigned __int16)~v15;
      if (v15 != 0xFFFF)
        break;
      v11 += 16;
      if (!--v13)
        goto LABEL_14;
    }
    v16 = __clz(__rbit64((unsigned __int16)~v15)) + v11;
    v25 = v16;
    if (v16 != -1)
    {
      do
      {
        re::HashBrown<unsigned int,re::GeomMeshWithNGons::NGonToTriangleInfo,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::internalAdd(&v26, *(_QWORD *)(v24[0] + 8) + 96 * v16, *(_QWORD *)(v24[0] + 8) + 96 * v16 + 8, v14, v9);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v24);
        v16 = v25;
      }
      while (v25 != -1);
      v10 = a1[2];
    }
  }
LABEL_14:
  v17 = *(_QWORD *)&v27[40];
  *(_QWORD *)&v27[40] = a1[7];
  v18 = v26;
  v19 = *(_OWORD *)v27;
  v26 = *(_OWORD *)a1;
  *(_QWORD *)v27 = v10;
  v20 = *(_OWORD *)&v27[16];
  v21 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v27[32];
  a1[7] = v17;
  *(_OWORD *)&v27[24] = v21;
  v22 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v18;
  *((_OWORD *)a1 + 1) = v19;
  *((_OWORD *)a1 + 2) = v20;
  *(_OWORD *)&v27[8] = v22;
  return re::HashBrown<unsigned int,re::GeomMeshWithNGons::NGonToTriangleInfo,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::deinit((uint64_t)&v26);
}

_QWORD *re::HashBrown<unsigned int,re::GeomMeshWithNGons::NGonToTriangleInfo,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::init(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = result;
  result[7] = a2;
  v4 = 151 * a3;
  v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    v6 = v5 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 97 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *v3 = result;
    if (v4 >= 0x80)
    {
      v7 = 0;
      *(_QWORD *)&v8 = -1;
      *((_QWORD *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      result = (_QWORD *)*v3;
    }
    v3[1] = &result[2 * v6];
    if (v3[2])
    {
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = v3[1] + v9;
        *(_DWORD *)v11 = 0;
        *(_OWORD *)(v11 + 8) = 0uLL;
        *(_OWORD *)(v11 + 24) = 0uLL;
        *(_OWORD *)(v11 + 40) = 0uLL;
        *(_OWORD *)(v11 + 56) = 0uLL;
        *(_OWORD *)(v11 + 72) = 0uLL;
        *(_QWORD *)(v11 + 88) = 0;
        ++v10;
        v12 = v3[2];
        v9 += 96;
      }
      while (v10 < v12);
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v12;
  return result;
}

uint64_t re::Result<re::DynamicArray<re::GeomCell4>,re::DetailedError>::~Result(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;

  if (*(_BYTE *)a1)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      if (*(_QWORD *)(a1 + 40))
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      ++*(_DWORD *)(a1 + 32);
    }
  }
  else
  {
    v4 = (_OWORD *)(a1 + 24);
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      if ((*(_BYTE *)(a1 + 32) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 40));
      *v4 = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
    }
  }
  return a1;
}

void re::GeomModelDescriptor::makeConvertedValues<signed char>(_anonymous_namespace_ **a1@<X0>, _QWORD *a2@<X8>)
{
  _anonymous_namespace_ *v3;
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *a1;
  if (*a1)
  {
    v4 = *((unsigned __int8 *)v3 + 33);
    if ((((3u >> v4) & 1) == 0 || v4 > 5) && v4 != 0 || *((_BYTE *)v3 + 32) == 0)
    {
      re::internal::DataPayload::computePoDConversionHelper<signed char>(*a1, (uint64_t)v12);
      if (v12[0])
      {
        v8 = v14;
        a2[4] = v13;
        a2[5] = v8;
        v9 = v15;
        v14 = 0;
        v15 = 0;
        v13 = 0;
        a2[6] = v9;
        *a2 = v9;
        a2[1] = 1;
        a2[2] = v8;
        a2[3] = 0;
      }
      else
      {
        a2[6] = 0;
        *((_OWORD *)a2 + 1) = 0u;
        *((_OWORD *)a2 + 2) = 0u;
        *(_OWORD *)a2 = 0u;
      }
      re::Result<re::FixedArray<unsigned int>,re::DetailedError>::~Result((uint64_t)v12);
    }
    else
    {
      v10 = (char *)v3 + 8;
      *a2 = *((_QWORD *)v3 + 3) + *((_QWORD *)v3 + 7);
      *(int8x16_t *)(a2 + 1) = vextq_s8(*(int8x16_t *)((char *)v3 + 40), *(int8x16_t *)((char *)v3 + 40), 8uLL);
      a2[3] = v3;
      v11 = (char *)v3 + 8;
      a2[5] = 0;
      a2[6] = 0;
      a2[4] = 0;

    }
  }
  else
  {
    a2[6] = 0;
    *((_OWORD *)a2 + 1) = 0u;
    *((_OWORD *)a2 + 2) = 0u;
    *(_OWORD *)a2 = 0u;
  }
}

__n128 re::internal::DataPayload::computePoDConversionHelper<signed char>@<Q0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X8>)
{
  const char *v3;
  __n128 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;

  switch(*((_BYTE *)a1 + 33))
  {
    case 0:
    case 1:
      re::internal::DataPayload::computeConvertedValuesInternal<signed char,signed char>((uint64_t)a1, &v8);
      goto LABEL_9;
    case 2:
    case 3:
      re::internal::DataPayload::computeConvertedValuesInternal<signed char,short>((uint64_t)a1, &v8);
      goto LABEL_9;
    case 4:
    case 5:
      re::internal::DataPayload::computeConvertedValuesInternal<signed char,int>((uint64_t)a1, &v8);
      goto LABEL_9;
    case 6:
      re::internal::DataPayload::computeConvertedValuesInternal<signed char,float>((uint64_t)a1, &v8);
      goto LABEL_9;
    case 7:
      re::internal::DataPayload::computeConvertedValuesInternal<signed char,double>((uint64_t)a1, &v8);
LABEL_9:
      result = v8;
      v7 = v9;
      *(_BYTE *)a2 = 1;
      *(__n128 *)(a2 + 8) = result;
      *(_QWORD *)(a2 + 24) = v7;
      return result;
    case 8:
    case 9:
    case 0xA:
    case 0xB:
      v3 = "Could not convert values to specified output type.";
      goto LABEL_3;
    default:
      v3 = "Unrecognized/Unsupported type.";
LABEL_3:
      result = v8;
      v5 = v9;
      v6 = v10;
      *(_BYTE *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 100;
      *(_QWORD *)(a2 + 16) = &re::AssetErrorCategory(void)::instance;
      *(__n128 *)(a2 + 24) = result;
      *(_QWORD *)(a2 + 40) = v5;
      *(_QWORD *)(a2 + 48) = v6;
      return result;
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<signed char,signed char>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 48) * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v6)
    {
      v7 = 0;
      v8 = 0;
      while (a2[1] > v7)
      {
        *(_BYTE *)(a2[2] + v7) = *(_BYTE *)(v5 + v8);
        v8 += *(_QWORD *)(a1 + 48);
        ++v7;
        if (v8 >= v6)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v6)
  {
    v9 = 0;
    v10 = 0;
    while (a2[1] > v9)
    {
      *(_BYTE *)(a2[2] + v9) = *(_BYTE *)(v5 + v10);
      v10 += *(_QWORD *)(a1 + 48);
      ++v9;
      if (v10 >= v6)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<signed char,short>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 48) * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v6)
    {
      v7 = 0;
      v8 = 0;
      while (a2[1] > v7)
      {
        *(_BYTE *)(a2[2] + v7) = *(_BYTE *)(v5 + v8);
        v8 += *(_QWORD *)(a1 + 48);
        ++v7;
        if (v8 >= v6)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v6)
  {
    v9 = 0;
    v10 = 0;
    while (a2[1] > v9)
    {
      *(_WORD *)(a2[2] + v9) = *(_WORD *)(v5 + v10);
      v10 += *(_QWORD *)(a1 + 48);
      ++v9;
      if (v10 >= v6)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<signed char,int>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 48) * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v6)
    {
      v7 = 0;
      v8 = 0;
      while (a2[1] > v7)
      {
        *(_BYTE *)(a2[2] + v7) = *(_DWORD *)(v5 + v8);
        v8 += *(_QWORD *)(a1 + 48);
        ++v7;
        if (v8 >= v6)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v6)
  {
    v9 = 0;
    v10 = 0;
    while (a2[1] > v9)
    {
      *(_DWORD *)(a2[2] + v9) = *(_DWORD *)(v5 + v10);
      v10 += *(_QWORD *)(a1 + 48);
      ++v9;
      if (v10 >= v6)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<signed char,float>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 48) * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v6)
    {
      v7 = 0;
      v8 = 0;
      while (a2[1] > v7)
      {
        *(_BYTE *)(a2[2] + v7) = (int)*(float *)(v5 + v8);
        v8 += *(_QWORD *)(a1 + 48);
        ++v7;
        if (v8 >= v6)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v6)
  {
    v9 = 0;
    v10 = 0;
    while (a2[1] > v9)
    {
      *(_DWORD *)(a2[2] + v9) = *(_DWORD *)(v5 + v10);
      v10 += *(_QWORD *)(a1 + 48);
      ++v9;
      if (v10 >= v6)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<signed char,double>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 48) * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v6)
    {
      v7 = 0;
      v8 = 0;
      while (a2[1] > v7)
      {
        *(_BYTE *)(a2[2] + v7) = (int)*(double *)(v5 + v8);
        v8 += *(_QWORD *)(a1 + 48);
        ++v7;
        if (v8 >= v6)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v6)
  {
    v9 = 0;
    v10 = 0;
    while (a2[1] > v9)
    {
      *(_QWORD *)(a2[2] + v9) = *(_QWORD *)(v5 + v10);
      v10 += *(_QWORD *)(a1 + 48);
      ++v9;
      if (v10 >= v6)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::GeomModelDescriptor::makeConvertedValues<unsigned char>(_anonymous_namespace_ **a1@<X0>, _QWORD *a2@<X8>)
{
  _anonymous_namespace_ *v3;
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *a1;
  if (*a1)
  {
    v4 = *((unsigned __int8 *)v3 + 33);
    if ((((3u >> v4) & 1) == 0 || v4 > 5) && v4 != 1 || *((_BYTE *)v3 + 32) == 0)
    {
      re::internal::DataPayload::computePoDConversionHelper<unsigned char>(*a1, (uint64_t)v12);
      if (v12[0])
      {
        v8 = v14;
        a2[4] = v13;
        a2[5] = v8;
        v9 = v15;
        v14 = 0;
        v15 = 0;
        v13 = 0;
        a2[6] = v9;
        *a2 = v9;
        a2[1] = 1;
        a2[2] = v8;
        a2[3] = 0;
      }
      else
      {
        a2[6] = 0;
        *((_OWORD *)a2 + 1) = 0u;
        *((_OWORD *)a2 + 2) = 0u;
        *(_OWORD *)a2 = 0u;
      }
      re::Result<re::FixedArray<unsigned int>,re::DetailedError>::~Result((uint64_t)v12);
    }
    else
    {
      v10 = (char *)v3 + 8;
      *a2 = *((_QWORD *)v3 + 3) + *((_QWORD *)v3 + 7);
      *(int8x16_t *)(a2 + 1) = vextq_s8(*(int8x16_t *)((char *)v3 + 40), *(int8x16_t *)((char *)v3 + 40), 8uLL);
      a2[3] = v3;
      v11 = (char *)v3 + 8;
      a2[5] = 0;
      a2[6] = 0;
      a2[4] = 0;

    }
  }
  else
  {
    a2[6] = 0;
    *((_OWORD *)a2 + 1) = 0u;
    *((_OWORD *)a2 + 2) = 0u;
    *(_OWORD *)a2 = 0u;
  }
}

__n128 re::internal::DataPayload::computePoDConversionHelper<unsigned char>@<Q0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X8>)
{
  const char *v3;
  __n128 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;

  switch(*((_BYTE *)a1 + 33))
  {
    case 0:
    case 1:
      re::internal::DataPayload::computeConvertedValuesInternal<signed char,signed char>((uint64_t)a1, &v8);
      goto LABEL_9;
    case 2:
    case 3:
      re::internal::DataPayload::computeConvertedValuesInternal<signed char,short>((uint64_t)a1, &v8);
      goto LABEL_9;
    case 4:
    case 5:
      re::internal::DataPayload::computeConvertedValuesInternal<signed char,int>((uint64_t)a1, &v8);
      goto LABEL_9;
    case 6:
      re::internal::DataPayload::computeConvertedValuesInternal<signed char,float>((uint64_t)a1, &v8);
      goto LABEL_9;
    case 7:
      re::internal::DataPayload::computeConvertedValuesInternal<signed char,double>((uint64_t)a1, &v8);
LABEL_9:
      result = v8;
      v7 = v9;
      *(_BYTE *)a2 = 1;
      *(__n128 *)(a2 + 8) = result;
      *(_QWORD *)(a2 + 24) = v7;
      return result;
    case 8:
    case 9:
    case 0xA:
    case 0xB:
      v3 = "Could not convert values to specified output type.";
      goto LABEL_3;
    default:
      v3 = "Unrecognized/Unsupported type.";
LABEL_3:
      result = v8;
      v5 = v9;
      v6 = v10;
      *(_BYTE *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 100;
      *(_QWORD *)(a2 + 16) = &re::AssetErrorCategory(void)::instance;
      *(__n128 *)(a2 + 24) = result;
      *(_QWORD *)(a2 + 40) = v5;
      *(_QWORD *)(a2 + 48) = v6;
      return result;
  }
}

void re::GeomModelDescriptor::makeConvertedValues<short>(_anonymous_namespace_ **a1@<X0>, _QWORD *a2@<X8>)
{
  _anonymous_namespace_ *v3;
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *a1;
  if (*a1)
  {
    v4 = *((unsigned __int8 *)v3 + 33);
    if ((((0xCu >> v4) & 1) == 0 || v4 > 5) && v4 != 2 || *((_BYTE *)v3 + 32) == 0)
    {
      re::internal::DataPayload::computePoDConversionHelper<short>(*a1, (uint64_t)v12);
      if (v12[0])
      {
        v8 = v14;
        a2[4] = v13;
        a2[5] = v8;
        v9 = v15;
        v14 = 0;
        v15 = 0;
        v13 = 0;
        a2[6] = v9;
        *a2 = v9;
        a2[1] = 2;
        a2[2] = v8;
        a2[3] = 0;
      }
      else
      {
        a2[6] = 0;
        *((_OWORD *)a2 + 1) = 0u;
        *((_OWORD *)a2 + 2) = 0u;
        *(_OWORD *)a2 = 0u;
      }
      re::Result<re::FixedArray<unsigned int>,re::DetailedError>::~Result((uint64_t)v12);
    }
    else
    {
      v10 = (char *)v3 + 8;
      *a2 = *((_QWORD *)v3 + 3) + *((_QWORD *)v3 + 7);
      *(int8x16_t *)(a2 + 1) = vextq_s8(*(int8x16_t *)((char *)v3 + 40), *(int8x16_t *)((char *)v3 + 40), 8uLL);
      a2[3] = v3;
      v11 = (char *)v3 + 8;
      a2[5] = 0;
      a2[6] = 0;
      a2[4] = 0;

    }
  }
  else
  {
    a2[6] = 0;
    *((_OWORD *)a2 + 1) = 0u;
    *((_OWORD *)a2 + 2) = 0u;
    *(_OWORD *)a2 = 0u;
  }
}

__n128 re::internal::DataPayload::computePoDConversionHelper<short>@<Q0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X8>)
{
  const char *v3;
  __n128 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;

  switch(*((_BYTE *)a1 + 33))
  {
    case 0:
      re::internal::DataPayload::computeConvertedValuesInternal<short,signed char>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_10;
    case 1:
      re::internal::DataPayload::computeConvertedValuesInternal<short,unsigned char>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_10;
    case 2:
    case 3:
      re::internal::DataPayload::computeConvertedValuesInternal<short,short>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_10;
    case 4:
    case 5:
      re::internal::DataPayload::computeConvertedValuesInternal<short,int>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_10;
    case 6:
      re::internal::DataPayload::computeConvertedValuesInternal<short,float>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_10;
    case 7:
      re::internal::DataPayload::computeConvertedValuesInternal<short,double>((uint64_t)a1, (uint64_t *)&v8);
LABEL_10:
      result = v8;
      v7 = v9;
      *(_BYTE *)a2 = 1;
      *(__n128 *)(a2 + 8) = result;
      *(_QWORD *)(a2 + 24) = v7;
      return result;
    case 8:
    case 9:
    case 0xA:
    case 0xB:
      v3 = "Could not convert values to specified output type.";
      goto LABEL_3;
    default:
      v3 = "Unrecognized/Unsupported type.";
LABEL_3:
      result = v8;
      v5 = v9;
      v6 = v10;
      *(_BYTE *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 100;
      *(_QWORD *)(a2 + 16) = &re::AssetErrorCategory(void)::instance;
      *(__n128 *)(a2 + 24) = result;
      *(_QWORD *)(a2 + 40) = v5;
      *(_QWORD *)(a2 + 48) = v6;
      return result;
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<short,signed char>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v7 = v5 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v11 = a2[1];
      v10 = a2[2];
      while (v11 != v8)
      {
        *(_WORD *)(v10 + 2 * v8) = *(char *)(v6 + v9);
        v9 += v5;
        ++v8;
        if (v9 >= v7)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (a2[1] > v13)
    {
      *(_BYTE *)(a2[2] + v12) = *(_BYTE *)(v6 + v14);
      v14 += *(_QWORD *)(a1 + 48);
      ++v13;
      v12 += 2;
      if (v14 >= v7)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<short,short>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v7 = v5 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v11 = a2[1];
      v10 = a2[2];
      while (v11 != v8)
      {
        *(_WORD *)(v10 + 2 * v8) = *(_WORD *)(v6 + v9);
        v9 += v5;
        ++v8;
        if (v9 >= v7)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    v12 = 0;
    v13 = 0;
    while (a2[1] > v12)
    {
      *(_WORD *)(a2[2] + 2 * v12) = *(_WORD *)(v6 + v13);
      v13 += *(_QWORD *)(a1 + 48);
      ++v12;
      if (v13 >= v7)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<short,int>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v7 = v5 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v11 = a2[1];
      v10 = a2[2];
      while (v11 != v8)
      {
        *(_WORD *)(v10 + 2 * v8) = *(_DWORD *)(v6 + v9);
        v9 += v5;
        ++v8;
        if (v9 >= v7)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (a2[1] > v13)
    {
      *(_DWORD *)(a2[2] + v12) = *(_DWORD *)(v6 + v14);
      v14 += *(_QWORD *)(a1 + 48);
      ++v13;
      v12 += 2;
      if (v14 >= v7)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<short,unsigned char>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v7 = v5 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v11 = a2[1];
      v10 = a2[2];
      while (v11 != v8)
      {
        *(_WORD *)(v10 + 2 * v8) = *(unsigned __int8 *)(v6 + v9);
        v9 += v5;
        ++v8;
        if (v9 >= v7)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (a2[1] > v13)
    {
      *(_BYTE *)(a2[2] + v12) = *(_BYTE *)(v6 + v14);
      v14 += *(_QWORD *)(a1 + 48);
      ++v13;
      v12 += 2;
      if (v14 >= v7)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<short,float>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v7 = v5 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v11 = a2[1];
      v10 = a2[2];
      while (v11 != v8)
      {
        *(_WORD *)(v10 + 2 * v8) = (int)*(float *)(v6 + v9);
        v9 += v5;
        ++v8;
        if (v9 >= v7)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (a2[1] > v13)
    {
      *(_DWORD *)(a2[2] + v12) = *(_DWORD *)(v6 + v14);
      v14 += *(_QWORD *)(a1 + 48);
      ++v13;
      v12 += 2;
      if (v14 >= v7)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<short,double>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v7 = v5 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v11 = a2[1];
      v10 = a2[2];
      while (v11 != v8)
      {
        *(_WORD *)(v10 + 2 * v8) = (int)*(double *)(v6 + v9);
        v9 += v5;
        ++v8;
        if (v9 >= v7)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (a2[1] > v13)
    {
      *(_QWORD *)(a2[2] + v12) = *(_QWORD *)(v6 + v14);
      v14 += *(_QWORD *)(a1 + 48);
      ++v13;
      v12 += 2;
      if (v14 >= v7)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::GeomModelDescriptor::makeConvertedValues<unsigned short>(_anonymous_namespace_ **a1@<X0>, _QWORD *a2@<X8>)
{
  _anonymous_namespace_ *v3;
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *a1;
  if (*a1)
  {
    v4 = *((unsigned __int8 *)v3 + 33);
    if ((((0xCu >> v4) & 1) == 0 || v4 > 5) && v4 != 3 || *((_BYTE *)v3 + 32) == 0)
    {
      re::internal::DataPayload::computePoDConversionHelper<unsigned short>(*a1, (uint64_t)v12);
      if (v12[0])
      {
        v8 = v14;
        a2[4] = v13;
        a2[5] = v8;
        v9 = v15;
        v14 = 0;
        v15 = 0;
        v13 = 0;
        a2[6] = v9;
        *a2 = v9;
        a2[1] = 2;
        a2[2] = v8;
        a2[3] = 0;
      }
      else
      {
        a2[6] = 0;
        *((_OWORD *)a2 + 1) = 0u;
        *((_OWORD *)a2 + 2) = 0u;
        *(_OWORD *)a2 = 0u;
      }
      re::Result<re::FixedArray<unsigned int>,re::DetailedError>::~Result((uint64_t)v12);
    }
    else
    {
      v10 = (char *)v3 + 8;
      *a2 = *((_QWORD *)v3 + 3) + *((_QWORD *)v3 + 7);
      *(int8x16_t *)(a2 + 1) = vextq_s8(*(int8x16_t *)((char *)v3 + 40), *(int8x16_t *)((char *)v3 + 40), 8uLL);
      a2[3] = v3;
      v11 = (char *)v3 + 8;
      a2[5] = 0;
      a2[6] = 0;
      a2[4] = 0;

    }
  }
  else
  {
    a2[6] = 0;
    *((_OWORD *)a2 + 1) = 0u;
    *((_OWORD *)a2 + 2) = 0u;
    *(_OWORD *)a2 = 0u;
  }
}

__n128 re::internal::DataPayload::computePoDConversionHelper<unsigned short>@<Q0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X8>)
{
  const char *v3;
  __n128 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;

  switch(*((_BYTE *)a1 + 33))
  {
    case 0:
      re::internal::DataPayload::computeConvertedValuesInternal<short,signed char>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_10;
    case 1:
      re::internal::DataPayload::computeConvertedValuesInternal<short,unsigned char>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_10;
    case 2:
    case 3:
      re::internal::DataPayload::computeConvertedValuesInternal<short,short>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_10;
    case 4:
    case 5:
      re::internal::DataPayload::computeConvertedValuesInternal<short,int>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_10;
    case 6:
      re::internal::DataPayload::computeConvertedValuesInternal<short,float>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_10;
    case 7:
      re::internal::DataPayload::computeConvertedValuesInternal<short,double>((uint64_t)a1, (uint64_t *)&v8);
LABEL_10:
      result = v8;
      v7 = v9;
      *(_BYTE *)a2 = 1;
      *(__n128 *)(a2 + 8) = result;
      *(_QWORD *)(a2 + 24) = v7;
      return result;
    case 8:
    case 9:
    case 0xA:
    case 0xB:
      v3 = "Could not convert values to specified output type.";
      goto LABEL_3;
    default:
      v3 = "Unrecognized/Unsupported type.";
LABEL_3:
      result = v8;
      v5 = v9;
      v6 = v10;
      *(_BYTE *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 100;
      *(_QWORD *)(a2 + 16) = &re::AssetErrorCategory(void)::instance;
      *(__n128 *)(a2 + 24) = result;
      *(_QWORD *)(a2 + 40) = v5;
      *(_QWORD *)(a2 + 48) = v6;
      return result;
  }
}

void re::GeomModelDescriptor::makeConvertedValues<int>(_anonymous_namespace_ **a1@<X0>, _QWORD *a2@<X8>)
{
  _anonymous_namespace_ *v3;
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *a1;
  if (*a1)
  {
    v4 = *((unsigned __int8 *)v3 + 33);
    if ((((0x30u >> v4) & 1) == 0 || v4 > 5) && v4 != 4 || *((_BYTE *)v3 + 32) == 0)
    {
      re::internal::DataPayload::computePoDConversionHelper<int>(*a1, (uint64_t)v12);
      if (v12[0])
      {
        v8 = v14;
        a2[4] = v13;
        a2[5] = v8;
        v9 = v15;
        v14 = 0;
        v15 = 0;
        v13 = 0;
        a2[6] = v9;
        *a2 = v9;
        a2[1] = 4;
        a2[2] = v8;
        a2[3] = 0;
      }
      else
      {
        a2[6] = 0;
        *((_OWORD *)a2 + 1) = 0u;
        *((_OWORD *)a2 + 2) = 0u;
        *(_OWORD *)a2 = 0u;
      }
      re::Result<re::FixedArray<unsigned int>,re::DetailedError>::~Result((uint64_t)v12);
    }
    else
    {
      v10 = (char *)v3 + 8;
      *a2 = *((_QWORD *)v3 + 3) + *((_QWORD *)v3 + 7);
      *(int8x16_t *)(a2 + 1) = vextq_s8(*(int8x16_t *)((char *)v3 + 40), *(int8x16_t *)((char *)v3 + 40), 8uLL);
      a2[3] = v3;
      v11 = (char *)v3 + 8;
      a2[5] = 0;
      a2[6] = 0;
      a2[4] = 0;

    }
  }
  else
  {
    a2[6] = 0;
    *((_OWORD *)a2 + 1) = 0u;
    *((_OWORD *)a2 + 2) = 0u;
    *(_OWORD *)a2 = 0u;
  }
}

__n128 re::internal::DataPayload::computePoDConversionHelper<int>@<Q0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X8>)
{
  const char *v3;
  __n128 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;

  switch(*((_BYTE *)a1 + 33))
  {
    case 0:
      re::internal::DataPayload::computeConvertedValuesInternal<unsigned int,signed char>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_11;
    case 1:
      re::internal::DataPayload::computeConvertedValuesInternal<unsigned int,unsigned char>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_11;
    case 2:
      re::internal::DataPayload::computeConvertedValuesInternal<unsigned int,short>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_11;
    case 3:
      re::internal::DataPayload::computeConvertedValuesInternal<unsigned int,unsigned short>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_11;
    case 4:
    case 5:
      re::internal::DataPayload::computeConvertedValuesInternal<unsigned int,int>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_11;
    case 6:
      re::internal::DataPayload::computeConvertedValuesInternal<int,float>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_11;
    case 7:
      re::internal::DataPayload::computeConvertedValuesInternal<int,double>((uint64_t)a1, (uint64_t *)&v8);
LABEL_11:
      result = v8;
      v7 = v9;
      *(_BYTE *)a2 = 1;
      *(__n128 *)(a2 + 8) = result;
      *(_QWORD *)(a2 + 24) = v7;
      return result;
    case 8:
    case 9:
    case 0xA:
    case 0xB:
      v3 = "Could not convert values to specified output type.";
      goto LABEL_3;
    default:
      v3 = "Unrecognized/Unsupported type.";
LABEL_3:
      result = v8;
      v5 = v9;
      v6 = v10;
      *(_BYTE *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 100;
      *(_QWORD *)(a2 + 16) = &re::AssetErrorCategory(void)::instance;
      *(__n128 *)(a2 + 24) = result;
      *(_QWORD *)(a2 + 40) = v5;
      *(_QWORD *)(a2 + 48) = v6;
      return result;
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<int,float>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v7 = v5 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v11 = a2[1];
      v10 = a2[2];
      while (v11 != v8)
      {
        *(_DWORD *)(v10 + 4 * v8) = (int)*(float *)(v6 + v9);
        v9 += v5;
        ++v8;
        if (v9 >= v7)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    v12 = 0;
    v13 = 0;
    while (a2[1] > v12)
    {
      *(_DWORD *)(a2[2] + 4 * v12) = *(_DWORD *)(v6 + v13);
      v13 += *(_QWORD *)(a1 + 48);
      ++v12;
      if (v13 >= v7)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<int,double>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v7 = v5 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v11 = a2[1];
      v10 = a2[2];
      while (v11 != v8)
      {
        *(_DWORD *)(v10 + 4 * v8) = (int)*(double *)(v6 + v9);
        v9 += v5;
        ++v8;
        if (v9 >= v7)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (a2[1] > v13)
    {
      *(_QWORD *)(a2[2] + v12) = *(_QWORD *)(v6 + v14);
      v14 += *(_QWORD *)(a1 + 48);
      ++v13;
      v12 += 4;
      if (v14 >= v7)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::GeomModelDescriptor::AttributeData::makeConvertedValues<float>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *v4;
  id v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v4 = (void *)(v3 + 8);
    v5 = (id)(v3 + 8);
    if (*(_BYTE *)(v3 + 32))
      v6 = *(_BYTE *)(v3 + 33) == 6;
    else
      v6 = 0;
    if (v6)
    {
      v9 = v4;
      *(_QWORD *)a2 = *(_QWORD *)(v3 + 24) + *(_QWORD *)(v3 + 56);
      *(int8x16_t *)(a2 + 8) = vextq_s8(*(int8x16_t *)(v3 + 40), *(int8x16_t *)(v3 + 40), 8uLL);
      *(_QWORD *)(a2 + 24) = v3;
      v10 = v4;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 32) = 0;

    }
    else
    {
      re::internal::DataPayload::computePoDConversionHelper<float>((_anonymous_namespace_ *)v3, (uint64_t)v11);
      if (v11[0])
      {
        v7 = v13;
        *(_QWORD *)(a2 + 32) = v12;
        *(_QWORD *)(a2 + 40) = v7;
        v8 = v14;
        v13 = 0;
        v14 = 0;
        v12 = 0;
        *(_QWORD *)(a2 + 48) = v8;
        *(_QWORD *)a2 = v8;
        *(_QWORD *)(a2 + 8) = 4;
        *(_QWORD *)(a2 + 16) = v7;
        *(_QWORD *)(a2 + 24) = 0;
      }
      else
      {
        *(_QWORD *)(a2 + 48) = 0;
        *(_OWORD *)(a2 + 16) = 0u;
        *(_OWORD *)(a2 + 32) = 0u;
        *(_OWORD *)a2 = 0u;
      }
      re::Result<re::FixedArray<unsigned int>,re::DetailedError>::~Result((uint64_t)v11);
    }

  }
  else
  {
    *(_QWORD *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
}

__n128 re::internal::DataPayload::computePoDConversionHelper<float>@<Q0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X8>)
{
  const char *v3;
  __n128 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;

  switch(*((_BYTE *)a1 + 33))
  {
    case 0:
      re::internal::DataPayload::computeConvertedValuesInternal<float,signed char>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_12;
    case 1:
      re::internal::DataPayload::computeConvertedValuesInternal<float,unsigned char>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_12;
    case 2:
      re::internal::DataPayload::computeConvertedValuesInternal<float,short>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_12;
    case 3:
      re::internal::DataPayload::computeConvertedValuesInternal<float,unsigned short>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_12;
    case 4:
      re::internal::DataPayload::computeConvertedValuesInternal<float,int>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_12;
    case 5:
      re::internal::DataPayload::computeConvertedValuesInternal<float,unsigned int>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_12;
    case 6:
      re::internal::DataPayload::computeConvertedValuesInternal<float,float>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_12;
    case 7:
      re::internal::DataPayload::computeConvertedValuesInternal<float,double>((uint64_t)a1, (uint64_t *)&v8);
LABEL_12:
      result = v8;
      v7 = v9;
      *(_BYTE *)a2 = 1;
      *(__n128 *)(a2 + 8) = result;
      *(_QWORD *)(a2 + 24) = v7;
      return result;
    case 8:
    case 9:
    case 0xA:
    case 0xB:
      v3 = "Could not convert values to specified output type.";
      goto LABEL_3;
    default:
      v3 = "Unrecognized/Unsupported type.";
LABEL_3:
      result = v8;
      v5 = v9;
      v6 = v10;
      *(_BYTE *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 100;
      *(_QWORD *)(a2 + 16) = &re::AssetErrorCategory(void)::instance;
      *(__n128 *)(a2 + 24) = result;
      *(_QWORD *)(a2 + 40) = v5;
      *(_QWORD *)(a2 + 48) = v6;
      return result;
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<float,signed char>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v7 = v5 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v11 = a2[1];
      v10 = a2[2];
      while (v11 != v8)
      {
        *(float *)(v10 + 4 * v8) = (float)*(char *)(v6 + v9);
        v9 += v5;
        ++v8;
        if (v9 >= v7)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (a2[1] > v13)
    {
      *(_BYTE *)(a2[2] + v12) = *(_BYTE *)(v6 + v14);
      v14 += *(_QWORD *)(a1 + 48);
      ++v13;
      v12 += 4;
      if (v14 >= v7)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<float,short>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v7 = v5 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v11 = a2[1];
      v10 = a2[2];
      while (v11 != v8)
      {
        *(float *)(v10 + 4 * v8) = (float)*(__int16 *)(v6 + v9);
        v9 += v5;
        ++v8;
        if (v9 >= v7)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (a2[1] > v13)
    {
      *(_WORD *)(a2[2] + v12) = *(_WORD *)(v6 + v14);
      v14 += *(_QWORD *)(a1 + 48);
      ++v13;
      v12 += 4;
      if (v14 >= v7)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<float,int>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v7 = v5 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v11 = a2[1];
      v10 = a2[2];
      while (v11 != v8)
      {
        *(float *)(v10 + 4 * v8) = (float)*(int *)(v6 + v9);
        v9 += v5;
        ++v8;
        if (v9 >= v7)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    v12 = 0;
    v13 = 0;
    while (a2[1] > v12)
    {
      *(_DWORD *)(a2[2] + 4 * v12) = *(_DWORD *)(v6 + v13);
      v13 += *(_QWORD *)(a1 + 48);
      ++v12;
      if (v13 >= v7)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<float,unsigned char>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v8 = v6 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v8)
    {
      v9 = 0;
      v10 = 0;
      v12 = a2[1];
      v11 = a2[2];
      while (v12 != v9)
      {
        LOBYTE(v5) = *(_BYTE *)(v7 + v10);
        v5 = (float)LODWORD(v5);
        *(float *)(v11 + 4 * v9) = v5;
        v10 += v6;
        ++v9;
        if (v10 >= v8)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v8)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    while (a2[1] > v14)
    {
      *(_BYTE *)(a2[2] + v13) = *(_BYTE *)(v7 + v15);
      v15 += *(_QWORD *)(a1 + 48);
      ++v14;
      v13 += 4;
      if (v15 >= v8)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<float,unsigned short>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v8 = v6 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v8)
    {
      v9 = 0;
      v10 = 0;
      v12 = a2[1];
      v11 = a2[2];
      while (v12 != v9)
      {
        LOWORD(v5) = *(_WORD *)(v7 + v10);
        v5 = (float)LODWORD(v5);
        *(float *)(v11 + 4 * v9) = v5;
        v10 += v6;
        ++v9;
        if (v10 >= v8)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v8)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    while (a2[1] > v14)
    {
      *(_WORD *)(a2[2] + v13) = *(_WORD *)(v7 + v15);
      v15 += *(_QWORD *)(a1 + 48);
      ++v14;
      v13 += 4;
      if (v15 >= v8)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<float,unsigned int>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v7 = v5 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v11 = a2[1];
      v10 = a2[2];
      while (v11 != v8)
      {
        *(float *)(v10 + 4 * v8) = (float)*(unsigned int *)(v6 + v9);
        v9 += v5;
        ++v8;
        if (v9 >= v7)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    v12 = 0;
    v13 = 0;
    while (a2[1] > v12)
    {
      *(_DWORD *)(a2[2] + 4 * v12) = *(_DWORD *)(v6 + v13);
      v13 += *(_QWORD *)(a1 + 48);
      ++v12;
      if (v13 >= v7)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<float,float>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v7 = v5 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v11 = a2[1];
      v10 = a2[2];
      while (v11 != v8)
      {
        *(_DWORD *)(v10 + 4 * v8) = *(_DWORD *)(v6 + v9);
        v9 += v5;
        ++v8;
        if (v9 >= v7)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    v12 = 0;
    v13 = 0;
    while (a2[1] > v12)
    {
      *(_DWORD *)(a2[2] + 4 * v12) = *(_DWORD *)(v6 + v13);
      v13 += *(_QWORD *)(a1 + 48);
      ++v12;
      if (v13 >= v7)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<float,double>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v7 = v5 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v11 = a2[1];
      v10 = a2[2];
      while (v11 != v8)
      {
        v12 = *(double *)(v6 + v9);
        *(float *)(v10 + 4 * v8) = v12;
        v9 += v5;
        ++v8;
        if (v9 >= v7)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    while (a2[1] > v14)
    {
      *(_QWORD *)(a2[2] + v13) = *(_QWORD *)(v6 + v15);
      v15 += *(_QWORD *)(a1 + 48);
      ++v14;
      v13 += 4;
      if (v15 >= v7)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::GeomModelDescriptor::AttributeData::makeConvertedValues<double>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *v4;
  id v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v4 = (void *)(v3 + 8);
    v5 = (id)(v3 + 8);
    if (*(_BYTE *)(v3 + 32))
      v6 = *(_BYTE *)(v3 + 33) == 7;
    else
      v6 = 0;
    if (v6)
    {
      v9 = v4;
      *(_QWORD *)a2 = *(_QWORD *)(v3 + 24) + *(_QWORD *)(v3 + 56);
      *(int8x16_t *)(a2 + 8) = vextq_s8(*(int8x16_t *)(v3 + 40), *(int8x16_t *)(v3 + 40), 8uLL);
      *(_QWORD *)(a2 + 24) = v3;
      v10 = v4;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 32) = 0;

    }
    else
    {
      re::internal::DataPayload::computePoDConversionHelper<double>((_anonymous_namespace_ *)v3, (uint64_t)v11);
      if (v11[0])
      {
        v7 = v13;
        *(_QWORD *)(a2 + 32) = v12;
        *(_QWORD *)(a2 + 40) = v7;
        v8 = v14;
        v13 = 0;
        v14 = 0;
        v12 = 0;
        *(_QWORD *)(a2 + 48) = v8;
        *(_QWORD *)a2 = v8;
        *(_QWORD *)(a2 + 8) = 8;
        *(_QWORD *)(a2 + 16) = v7;
        *(_QWORD *)(a2 + 24) = 0;
      }
      else
      {
        *(_QWORD *)(a2 + 48) = 0;
        *(_OWORD *)(a2 + 16) = 0u;
        *(_OWORD *)(a2 + 32) = 0u;
        *(_OWORD *)a2 = 0u;
      }
      re::Result<re::FixedArray<unsigned int>,re::DetailedError>::~Result((uint64_t)v11);
    }

  }
  else
  {
    *(_QWORD *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
}

__n128 re::internal::DataPayload::computePoDConversionHelper<double>@<Q0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X8>)
{
  const char *v3;
  __n128 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;

  switch(*((_BYTE *)a1 + 33))
  {
    case 0:
      re::internal::DataPayload::computeConvertedValuesInternal<double,signed char>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_12;
    case 1:
      re::internal::DataPayload::computeConvertedValuesInternal<double,unsigned char>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_12;
    case 2:
      re::internal::DataPayload::computeConvertedValuesInternal<double,short>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_12;
    case 3:
      re::internal::DataPayload::computeConvertedValuesInternal<double,unsigned short>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_12;
    case 4:
      re::internal::DataPayload::computeConvertedValuesInternal<double,int>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_12;
    case 5:
      re::internal::DataPayload::computeConvertedValuesInternal<double,unsigned int>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_12;
    case 6:
      re::internal::DataPayload::computeConvertedValuesInternal<double,float>((uint64_t)a1, (uint64_t *)&v8);
      goto LABEL_12;
    case 7:
      re::internal::DataPayload::computeConvertedValuesInternal<double,double>((uint64_t)a1, (uint64_t *)&v8);
LABEL_12:
      result = v8;
      v7 = v9;
      *(_BYTE *)a2 = 1;
      *(__n128 *)(a2 + 8) = result;
      *(_QWORD *)(a2 + 24) = v7;
      return result;
    case 8:
    case 9:
    case 0xA:
    case 0xB:
      v3 = "Could not convert values to specified output type.";
      goto LABEL_3;
    default:
      v3 = "Unrecognized/Unsupported type.";
LABEL_3:
      result = v8;
      v5 = v9;
      v6 = v10;
      *(_BYTE *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 100;
      *(_QWORD *)(a2 + 16) = &re::AssetErrorCategory(void)::instance;
      *(__n128 *)(a2 + 24) = result;
      *(_QWORD *)(a2 + 40) = v5;
      *(_QWORD *)(a2 + 48) = v6;
      return result;
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<double,signed char>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v7 = v5 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v11 = a2[1];
      v10 = a2[2];
      while (v11 != v8)
      {
        *(double *)(v10 + 8 * v8) = (double)*(char *)(v6 + v9);
        v9 += v5;
        ++v8;
        if (v9 >= v7)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (a2[1] > v13)
    {
      *(_BYTE *)(a2[2] + v12) = *(_BYTE *)(v6 + v14);
      v14 += *(_QWORD *)(a1 + 48);
      ++v13;
      v12 += 8;
      if (v14 >= v7)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<double,short>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v7 = v5 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v11 = a2[1];
      v10 = a2[2];
      while (v11 != v8)
      {
        *(double *)(v10 + 8 * v8) = (double)*(__int16 *)(v6 + v9);
        v9 += v5;
        ++v8;
        if (v9 >= v7)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (a2[1] > v13)
    {
      *(_WORD *)(a2[2] + v12) = *(_WORD *)(v6 + v14);
      v14 += *(_QWORD *)(a1 + 48);
      ++v13;
      v12 += 8;
      if (v14 >= v7)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<double,int>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v7 = v5 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v11 = a2[1];
      v10 = a2[2];
      while (v11 != v8)
      {
        *(double *)(v10 + 8 * v8) = (double)*(int *)(v6 + v9);
        v9 += v5;
        ++v8;
        if (v9 >= v7)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (a2[1] > v13)
    {
      *(_DWORD *)(a2[2] + v12) = *(_DWORD *)(v6 + v14);
      v14 += *(_QWORD *)(a1 + 48);
      ++v13;
      v12 += 8;
      if (v14 >= v7)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<double,unsigned char>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v8 = v6 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v8)
    {
      v9 = 0;
      v10 = 0;
      v12 = a2[1];
      v11 = a2[2];
      while (v12 != v9)
      {
        LOBYTE(v5) = *(_BYTE *)(v7 + v10);
        v5 = (double)*(unint64_t *)&v5;
        *(double *)(v11 + 8 * v9) = v5;
        v10 += v6;
        ++v9;
        if (v10 >= v8)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v8)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    while (a2[1] > v14)
    {
      *(_BYTE *)(a2[2] + v13) = *(_BYTE *)(v7 + v15);
      v15 += *(_QWORD *)(a1 + 48);
      ++v14;
      v13 += 8;
      if (v15 >= v8)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<double,unsigned short>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v8 = v6 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v8)
    {
      v9 = 0;
      v10 = 0;
      v12 = a2[1];
      v11 = a2[2];
      while (v12 != v9)
      {
        LOWORD(v5) = *(_WORD *)(v7 + v10);
        v5 = (double)*(unint64_t *)&v5;
        *(double *)(v11 + 8 * v9) = v5;
        v10 += v6;
        ++v9;
        if (v10 >= v8)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v8)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    while (a2[1] > v14)
    {
      *(_WORD *)(a2[2] + v13) = *(_WORD *)(v7 + v15);
      v15 += *(_QWORD *)(a1 + 48);
      ++v14;
      v13 += 8;
      if (v15 >= v8)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<double,unsigned int>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v8 = v6 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v8)
    {
      v9 = 0;
      v10 = 0;
      v12 = a2[1];
      v11 = a2[2];
      while (v12 != v9)
      {
        LODWORD(v5) = *(_DWORD *)(v7 + v10);
        v5 = (double)*(unint64_t *)&v5;
        *(double *)(v11 + 8 * v9) = v5;
        v10 += v6;
        ++v9;
        if (v10 >= v8)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v8)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    while (a2[1] > v14)
    {
      *(_DWORD *)(a2[2] + v13) = *(_DWORD *)(v7 + v15);
      v15 += *(_QWORD *)(a1 + 48);
      ++v14;
      v13 += 8;
      if (v15 >= v8)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<double,float>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v7 = v5 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v11 = a2[1];
      v10 = a2[2];
      while (v11 != v8)
      {
        *(double *)(v10 + 8 * v8) = *(float *)(v6 + v9);
        v9 += v5;
        ++v8;
        if (v9 >= v7)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (a2[1] > v13)
    {
      *(_DWORD *)(a2[2] + v12) = *(_DWORD *)(v6 + v14);
      v14 += *(_QWORD *)(a1 + 48);
      ++v13;
      v12 += 8;
      if (v14 >= v7)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::internal::DataPayload::computeConvertedValuesInternal<double,double>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
  v7 = v5 * *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v11 = a2[1];
      v10 = a2[2];
      while (v11 != v8)
      {
        *(_QWORD *)(v10 + 8 * v8) = *(_QWORD *)(v6 + v9);
        v9 += v5;
        ++v8;
        if (v9 >= v7)
          return;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    v12 = 0;
    v13 = 0;
    while (a2[1] > v12)
    {
      *(_QWORD *)(a2[2] + 8 * v12) = *(_QWORD *)(v6 + v13);
      v13 += *(_QWORD *)(a1 + 48);
      ++v12;
      if (v13 >= v7)
        return;
    }
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void _ZNK2re19GeomModelDescriptor13AttributeData19makeConvertedValuesIDv2_fEENS0_15ConvertedValuesIT_EEv(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *v4;
  id v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v4 = (void *)(v3 + 8);
    v5 = (id)(v3 + 8);
    if (*(_BYTE *)(v3 + 32))
      v6 = *(_BYTE *)(v3 + 33) == 8;
    else
      v6 = 0;
    if (v6)
    {
      v9 = v4;
      *(_QWORD *)a2 = *(_QWORD *)(v3 + 24) + *(_QWORD *)(v3 + 56);
      *(int8x16_t *)(a2 + 8) = vextq_s8(*(int8x16_t *)(v3 + 40), *(int8x16_t *)(v3 + 40), 8uLL);
      *(_QWORD *)(a2 + 24) = v3;
      v10 = v4;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 32) = 0;

    }
    else
    {
      _ZNK2re8internal11DataPayload22computeConvertedValuesIDv2_fEENS_6ResultINS_10FixedArrayIT_EENS_13DetailedErrorEEEv(v3, (uint64_t)v11);
      if (v11[0])
      {
        v7 = v13;
        *(_QWORD *)(a2 + 32) = v12;
        *(_QWORD *)(a2 + 40) = v7;
        v8 = v14;
        v13 = 0;
        v14 = 0;
        v12 = 0;
        *(_QWORD *)(a2 + 48) = v8;
        *(_QWORD *)a2 = v8;
        *(_QWORD *)(a2 + 8) = 8;
        *(_QWORD *)(a2 + 16) = v7;
        *(_QWORD *)(a2 + 24) = 0;
      }
      else
      {
        *(_QWORD *)(a2 + 48) = 0;
        *(_OWORD *)(a2 + 16) = 0u;
        *(_OWORD *)(a2 + 32) = 0u;
        *(_OWORD *)a2 = 0u;
      }
      re::Result<re::FixedArray<unsigned int>,re::DetailedError>::~Result((uint64_t)v11);
    }

  }
  else
  {
    *(_QWORD *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
}

__n128 _ZNK2re8internal11DataPayload22computeConvertedValuesIDv2_fEENS_6ResultINS_10FixedArrayIT_EENS_13DetailedErrorEEEv@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __n128 result;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  __int16 v23;
  unint64_t v24;
  __n128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 33) == 8)
  {
    v4 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 48) * v5;
    v14 = 0uLL;
    v15 = 0;
    if (*(_BYTE *)(a1 + 32))
    {
      if (v6)
      {
        v7 = 0;
        v8 = 0;
        while (1)
        {
          v9 = v14.n128_u64[1];
          if (v14.n128_u64[1] <= v8)
            break;
          *(_QWORD *)(v15 + 8 * v8) = *(_QWORD *)(v4 + v7);
          v7 += *(_QWORD *)(a1 + 48);
          ++v8;
          if (v7 >= v6)
            goto LABEL_13;
        }
        v16 = 0;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v17 = 136315906;
        v18 = "operator[]";
        v19 = 1024;
        v20 = 468;
        v21 = 2048;
        v22 = v8;
        v23 = 2048;
        v24 = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_16;
      }
    }
    else if (v6)
    {
      v8 = 0;
      v12 = 0;
      while (1)
      {
        v9 = v14.n128_u64[1];
        if (v14.n128_u64[1] <= v8)
          break;
        *(_QWORD *)(v15 + 8 * v8) = *(_QWORD *)(v4 + v12);
        v12 += *(_QWORD *)(a1 + 48);
        ++v8;
        if (v12 >= v6)
          goto LABEL_13;
      }
LABEL_16:
      v16 = 0;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v25 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v17 = 136315906;
      v18 = "operator[]";
      v19 = 1024;
      v20 = 468;
      v21 = 2048;
      v22 = v8;
      v23 = 2048;
      v24 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_13:
    result = v14;
    v13 = v15;
    *(_BYTE *)a2 = 1;
    *(__n128 *)(a2 + 8) = result;
    *(_QWORD *)(a2 + 24) = v13;
  }
  else
  {
    result = v25;
    v11 = v26;
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 100;
    *(_QWORD *)(a2 + 16) = &re::AssetErrorCategory(void)::instance;
    *(__n128 *)(a2 + 24) = result;
    *(_OWORD *)(a2 + 40) = v11;
  }
  return result;
}

__n128 _ZNK2re8internal11DataPayload22computeConvertedValuesIDv3_fEENS_6ResultINS_10FixedArrayIT_EENS_13DetailedErrorEEEv@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __n128 result;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  __int16 v24;
  unint64_t v25;
  __n128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned __int8 *)(a1 + 33) | 2) == 0xB)
  {
    v4 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 48) * v5;
    v15 = 0uLL;
    v16 = 0;
    if (*(_BYTE *)(a1 + 32))
    {
      if (v6)
      {
        v8 = 0;
        v9 = 0;
        while (1)
        {
          v10 = v15.n128_u64[1];
          if (v15.n128_u64[1] <= v9)
            break;
          *(_QWORD *)&v7 = *(_QWORD *)(v4 + v8);
          DWORD2(v7) = *(_DWORD *)(v4 + v8 + 8);
          *(_OWORD *)(v16 + 16 * v9) = v7;
          v8 += *(_QWORD *)(a1 + 48);
          ++v9;
          if (v8 >= v6)
            goto LABEL_13;
        }
        v17 = 0;
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v26 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v18 = 136315906;
        v19 = "operator[]";
        v20 = 1024;
        v21 = 468;
        v22 = 2048;
        v23 = v9;
        v24 = 2048;
        v25 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_16;
      }
    }
    else if (v6)
    {
      v9 = 0;
      v13 = 0;
      while (1)
      {
        v10 = v15.n128_u64[1];
        if (v15.n128_u64[1] <= v9)
          break;
        *(_QWORD *)&v7 = *(_QWORD *)(v4 + v13);
        DWORD2(v7) = *(_DWORD *)(v4 + v13 + 8);
        *(_OWORD *)(v16 + 16 * v9) = v7;
        v13 += *(_QWORD *)(a1 + 48);
        ++v9;
        if (v13 >= v6)
          goto LABEL_13;
      }
LABEL_16:
      v17 = 0;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v26 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v18 = 136315906;
      v19 = "operator[]";
      v20 = 1024;
      v21 = 468;
      v22 = 2048;
      v23 = v9;
      v24 = 2048;
      v25 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_13:
    result = v15;
    v14 = v16;
    *(_BYTE *)a2 = 1;
    *(__n128 *)(a2 + 8) = result;
    *(_QWORD *)(a2 + 24) = v14;
  }
  else
  {
    result = v26;
    v12 = v27;
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 100;
    *(_QWORD *)(a2 + 16) = &re::AssetErrorCategory(void)::instance;
    *(__n128 *)(a2 + 24) = result;
    *(_OWORD *)(a2 + 40) = v12;
  }
  return result;
}

void _ZNK2re19GeomModelDescriptor13AttributeData19makeConvertedValuesIDv4_fEENS0_15ConvertedValuesIT_EEv(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *v4;
  id v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v4 = (void *)(v3 + 8);
    v5 = (id)(v3 + 8);
    if (*(_BYTE *)(v3 + 32))
      v6 = *(_BYTE *)(v3 + 33) == 10;
    else
      v6 = 0;
    if (v6)
    {
      v9 = v4;
      *(_QWORD *)a2 = *(_QWORD *)(v3 + 24) + *(_QWORD *)(v3 + 56);
      *(int8x16_t *)(a2 + 8) = vextq_s8(*(int8x16_t *)(v3 + 40), *(int8x16_t *)(v3 + 40), 8uLL);
      *(_QWORD *)(a2 + 24) = v3;
      v10 = v4;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 32) = 0;

    }
    else
    {
      _ZNK2re8internal11DataPayload22computeConvertedValuesIDv4_fEENS_6ResultINS_10FixedArrayIT_EENS_13DetailedErrorEEEv(v3, (uint64_t)v11);
      if (v11[0])
      {
        v7 = v13;
        *(_QWORD *)(a2 + 32) = v12;
        *(_QWORD *)(a2 + 40) = v7;
        v8 = v14;
        v13 = 0;
        v14 = 0;
        v12 = 0;
        *(_QWORD *)(a2 + 48) = v8;
        *(_QWORD *)a2 = v8;
        *(_QWORD *)(a2 + 8) = 16;
        *(_QWORD *)(a2 + 16) = v7;
        *(_QWORD *)(a2 + 24) = 0;
      }
      else
      {
        *(_QWORD *)(a2 + 48) = 0;
        *(_OWORD *)(a2 + 16) = 0u;
        *(_OWORD *)(a2 + 32) = 0u;
        *(_OWORD *)a2 = 0u;
      }
      re::Result<re::FixedArray<unsigned int>,re::DetailedError>::~Result((uint64_t)v11);
    }

  }
  else
  {
    *(_QWORD *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
}

__n128 _ZNK2re8internal11DataPayload22computeConvertedValuesIDv4_fEENS_6ResultINS_10FixedArrayIT_EENS_13DetailedErrorEEEv@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __n128 result;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  __int16 v23;
  unint64_t v24;
  __n128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 33) == 10)
  {
    v4 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 56);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 48) * v5;
    v14 = 0uLL;
    v15 = 0;
    if (*(_BYTE *)(a1 + 32))
    {
      if (v6)
      {
        v7 = 0;
        v8 = 0;
        while (1)
        {
          v9 = v14.n128_u64[1];
          if (v14.n128_u64[1] <= v8)
            break;
          *(_OWORD *)(v15 + 16 * v8) = *(_OWORD *)(v4 + v7);
          v7 += *(_QWORD *)(a1 + 48);
          ++v8;
          if (v7 >= v6)
            goto LABEL_13;
        }
        v16 = 0;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v17 = 136315906;
        v18 = "operator[]";
        v19 = 1024;
        v20 = 468;
        v21 = 2048;
        v22 = v8;
        v23 = 2048;
        v24 = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_16;
      }
    }
    else if (v6)
    {
      v8 = 0;
      v12 = 0;
      while (1)
      {
        v9 = v14.n128_u64[1];
        if (v14.n128_u64[1] <= v8)
          break;
        *(_OWORD *)(v15 + 16 * v8) = *(_OWORD *)(v4 + v12);
        v12 += *(_QWORD *)(a1 + 48);
        ++v8;
        if (v12 >= v6)
          goto LABEL_13;
      }
LABEL_16:
      v16 = 0;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v25 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v17 = 136315906;
      v18 = "operator[]";
      v19 = 1024;
      v20 = 468;
      v21 = 2048;
      v22 = v8;
      v23 = 2048;
      v24 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_13:
    result = v14;
    v13 = v15;
    *(_BYTE *)a2 = 1;
    *(__n128 *)(a2 + 8) = result;
    *(_QWORD *)(a2 + 24) = v13;
  }
  else
  {
    result = v25;
    v11 = v26;
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 100;
    *(_QWORD *)(a2 + 16) = &re::AssetErrorCategory(void)::instance;
    *(__n128 *)(a2 + 24) = result;
    *(_OWORD *)(a2 + 40) = v11;
  }
  return result;
}

uint64_t re::HashTable<unsigned int,unsigned long,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::tryGet(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0xBF58476D1CE4E5B9 * (a2 ^ ((unint64_t)a2 >> 30));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v5 + 24 * v3 + 12) != a2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 24 * v3 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v3 == 0x7FFFFFFF)
        break;
      if (*(_DWORD *)(v5 + 24 * v3 + 12) == a2)
        return v5 + 24 * v3 + 16;
    }
    return 0;
  }
  return v5 + 24 * v3 + 16;
}

void re::HashTable<unsigned int,unsigned long,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::add(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *a2;
  v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
  v8 = v7 ^ (v7 >> 31);
  v9 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v9 = v8 % *(unsigned int *)(a1 + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v16 = *(_QWORD *)(a1 + 16);
      if (*(_DWORD *)(v16 + 24 * v10 + 12) == (_DWORD)v6)
        return;
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v16 + 24 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_DWORD *)(v16 + 24 * v10 + 12) == (_DWORD)v6)
          return;
      }
    }
  }
  v11 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v11 == 0x7FFFFFFF)
  {
    v11 = *(unsigned int *)(a1 + 32);
    v12 = v11;
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned int,unsigned long,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      v12 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v12 + 1;
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v13 + 24 * v11 + 8);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v13 + 24 * v11 + 8);
    *(_DWORD *)(a1 + 36) = v14 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v13 + 24 * v11 + 8) = v14 | 0x80000000;
  v15 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v11 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v11 + 8) & 0x80000000 | *(_DWORD *)(v15 + 4 * v9);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v11) = v8;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v11 + 12) = *a2;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v11 + 16) = *a3;
  *(_DWORD *)(v15 + 4 * v9) = v11;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
}

uint64_t re::HashTable<unsigned int,re::DynamicArray<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addNew(uint64_t result, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  v6 = *a2;
  v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
  v8 = v7 ^ (v7 >> 31);
  if (*(_QWORD *)result)
  {
    v9 = v8 % *(unsigned int *)(result + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(result + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = *(_QWORD *)(result + 16);
      if (*(_DWORD *)(v11 + 56 * v10 + 12) == (_DWORD)v6)
        return result;
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v11 + 56 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_DWORD *)(v11 + 56 * v10 + 12) == (_DWORD)v6)
          return result;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  result = re::HashTable<unsigned int,re::DynamicArray<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(result, v9, v8, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

uint64_t re::HashTable<unsigned int,re::DynamicArray<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::tryGet(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0xBF58476D1CE4E5B9 * (a2 ^ ((unint64_t)a2 >> 30));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v5 + 56 * v3 + 12) != a2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 56 * v3 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v3 == 0x7FFFFFFF)
        break;
      if (*(_DWORD *)(v5 + 56 * v3 + 12) == a2)
        return v5 + 56 * v3 + 16;
    }
    return 0;
  }
  return v5 + 56 * v3 + 16;
}

void re::DynamicArray<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::resize(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= a2)
  {
    if (v5 <= a2)
      return;
    v9 = 48 * a2;
    v10 = a2;
    do
    {
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(*(_QWORD *)(a1 + 32) + v9));
      ++v10;
      v9 += 48;
    }
    while (v10 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::setCapacity((_QWORD *)a1, a2);
      v5 = *(_QWORD *)(a1 + 16);
    }
    v7 = a2 - v5;
    if (a2 > v5)
    {
      v8 = 48 * v5;
      do
      {
        re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(*(_QWORD *)(a1 + 32) + v8, a3);
        v8 += 48;
        --v7;
      }
      while (v7);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void re::HashTable<unsigned int,unsigned long,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  signed int v21;
  _BYTE v22[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(_QWORD *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v22, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v22;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)v22 = v5;
      *(_QWORD *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = (_QWORD *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v13 - 1) & 0x80000000) != 0)
          {
            v14 = *(v13 - 2);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<unsigned int,unsigned long,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 24 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 24 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 24 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17) = v14;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 12) = *((_DWORD *)v13 - 1);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 16) = *v13;
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 3;
          --v10;
        }
        while (v10);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2)
      v21 = a2;
    else
      v21 = 3;
  }
}

uint64_t re::HashTable<unsigned int,re::DynamicArray<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v29[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v29, 0, 36);
          *(_QWORD *)&v29[36] = 0x7FFFFFFFLL;
          re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v29, v13, v12);
          v15 = *(_OWORD *)v29;
          *(_OWORD *)v29 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v29[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v29[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v29[24];
          *(_OWORD *)&v29[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v29[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned int,re::DynamicArray<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21 - 4, v21);
              v21 += 56;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned int,re::DynamicArray<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)v29);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 56 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 56 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 56 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9) = a3;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9 + 12) = *a4;
  v25 = *(_QWORD *)(a1 + 16) + 56 * v9;
  *(_QWORD *)(v25 + 48) = 0;
  *(_DWORD *)(v25 + 40) = 0;
  *(_QWORD *)(v25 + 24) = 0;
  *(_QWORD *)(v25 + 32) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  *(_QWORD *)(v25 + 16) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(v25 + 24) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = 0;
  v26 = *(_QWORD *)(v25 + 32);
  *(_QWORD *)(v25 + 32) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v26;
  v27 = *(_QWORD *)(v25 + 48);
  *(_QWORD *)(v25 + 48) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v27;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v25 + 40);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

double re::HashTable<unsigned int,re::DynamicArray<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2];
        v7 = v6 + v4;
        v8 = *(_DWORD *)(v6 + v4 + 8);
        if (v8 < 0)
        {
          *(_DWORD *)(v7 + 8) = v8 & 0x7FFFFFFF;
          v11 = *(_QWORD *)(v7 + 16);
          v10 = (_QWORD *)(v7 + 16);
          v9 = v11;
          if (v11)
          {
            v12 = v6 + v4;
            if (*(_QWORD *)(v6 + v4 + 48))
              (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
            *(_QWORD *)(v12 + 48) = 0;
            v10[1] = 0;
            v10[2] = 0;
            *v10 = 0;
            ++*(_DWORD *)(v12 + 40);
            v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 56;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::Result<re::GeomModel,re::DetailedError>::Result(uint64_t a1, unsigned __int8 *a2)
{
  int v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *a2;
  *(_BYTE *)a1 = v4;
  v5 = (_OWORD *)(a1 + 8);
  if (v4)
  {
    *v5 = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    v6 = *((_QWORD *)a2 + 2);
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    v7 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 4) = 0;
    v9 = *(_QWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    *((_QWORD *)a2 + 2) = v9;
    *((_QWORD *)a2 + 3) = v8;
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v10 = *((_QWORD *)a2 + 6);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_QWORD *)(a1 + 48) = v10;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 6) = 0;
    v11 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
    *((_QWORD *)a2 + 7) = v11;
    v12 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    *((_QWORD *)a2 + 9) = v12;
    ++*((_DWORD *)a2 + 16);
    ++*(_DWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    v13 = *((_QWORD *)a2 + 11);
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
    *(_QWORD *)(a1 + 88) = v13;
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 11) = 0;
    v14 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
    *((_QWORD *)a2 + 12) = v14;
    v15 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    *((_QWORD *)a2 + 14) = v15;
    ++*((_DWORD *)a2 + 26);
    ++*(_DWORD *)(a1 + 104);
    re::Optional<re::DynamicArray<re::GeomIndexMap>>::Optional(a1 + 120, a2 + 120);
    re::Optional<re::DynamicArray<re::GeomIndexMap>>::Optional(a1 + 168, a2 + 168);
    *(_QWORD *)(a1 + 248) = 0;
    *(_DWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    v16 = *((_QWORD *)a2 + 28);
    *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
    *(_QWORD *)(a1 + 224) = v16;
    *((_QWORD *)a2 + 27) = 0;
    *((_QWORD *)a2 + 28) = 0;
    v17 = *(_QWORD *)(a1 + 232);
    *(_QWORD *)(a1 + 232) = *((_QWORD *)a2 + 29);
    *((_QWORD *)a2 + 29) = v17;
    v18 = *(_QWORD *)(a1 + 248);
    *(_QWORD *)(a1 + 248) = *((_QWORD *)a2 + 31);
    *((_QWORD *)a2 + 31) = v18;
    ++*((_DWORD *)a2 + 60);
    ++*(_DWORD *)(a1 + 240);
  }
  else
  {
    *v5 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    v19 = *((_QWORD *)a2 + 4);
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = 0;
    v20 = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 6) = 0;
    v22 = *(_QWORD *)(a1 + 32);
    v21 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = v19;
    *(_QWORD *)(a1 + 40) = v20;
    *((_QWORD *)a2 + 4) = v22;
    *((_QWORD *)a2 + 5) = v21;
  }
  return a1;
}

BOOL re::hasTransformAnimation(re *this, const MDLObject *a2)
{
  void *v2;
  void *v3;
  void *v4;
  _BOOL8 v5;

  if (!this)
    return 0;
  -[re transform](this, "transform");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "keyTimes");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (unint64_t)objc_msgSend(v4, "count") > 1;

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void re::importSRTSampledAnimation(re *this@<X0>, MDLObject *a2@<X1>, float a3@<S0>, uint64_t a4@<X8>)
{
  re *v8;
  const MDLObject *v9;
  float v10;
  void *v11;
  id v12;
  void *v13;
  unint64_t v14;
  id v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  float v32;
  _anonymous_namespace_ *v33;
  double v34;
  float v35;
  int v36;
  int v37;
  unint64_t v38;
  float v39;
  double v40;
  BOOL v41;
  float v42;
  BOOL v43;
  double v44;
  int v45;
  double v46;
  unint64_t v47;
  id v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[2];
  unint64_t v59;
  int v60;
  uint64_t v61;

  v8 = this;
  if (!re::hasTransformAnimation(v8, v9))
  {
    -[re name](v8, "name");
    v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    re::DynamicString::format((re::DynamicString *)"Processing node \"%s\"", (re::DynamicString *)&v55, objc_msgSend(v12, "UTF8String"));
    v20 = v55;
    v21 = v56;
    v22 = v57;
    *(_BYTE *)a4 = 0;
    v23 = 2000;
LABEL_9:
    *(_QWORD *)(a4 + 8) = v23;
    *(_QWORD *)(a4 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a4 + 24) = v20;
    *(_QWORD *)(a4 + 40) = v21;
    *(_QWORD *)(a4 + 48) = v22;
    goto LABEL_10;
  }
  if (a3 <= 0.0 || (v10 = fabsf(a3), v10 < (float)((float)(v10 + 1.0) * 0.00001)))
  {
    -[re name](v8, "name");
    v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    re::DynamicString::format((re::DynamicString *)"Sample Rate = %f. Processing node \"%s\"", (re::DynamicString *)&v55, a3, objc_msgSend(v12, "UTF8String"));
    v20 = v55;
    v21 = v56;
    v22 = v57;
    *(_BYTE *)a4 = 0;
    v23 = 2001;
    goto LABEL_9;
  }
  -[re transform](v8, "transform");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (!v11)
  {
    -[re name](v8, "name");
    v15 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    re::DynamicString::format((re::DynamicString *)"Processing node \"%s\"", (re::DynamicString *)&v55, objc_msgSend(v15, "UTF8String"));
    v16 = v55;
    v17 = v56;
    v18 = v57;
    *(_BYTE *)a4 = 0;
    v19 = 2002;
    goto LABEL_14;
  }
  objc_msgSend(v11, "keyTimes");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "count");

  if (v14 <= 1)
  {
    -[re name](v8, "name");
    v15 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    re::DynamicString::format((re::DynamicString *)"Processing node \"%s\"", (re::DynamicString *)&v55, objc_msgSend(v15, "UTF8String"));
    v16 = v55;
    v17 = v56;
    v18 = v57;
    *(_BYTE *)a4 = 0;
    v19 = 2003;
LABEL_14:
    *(_QWORD *)(a4 + 8) = v19;
    *(_QWORD *)(a4 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a4 + 24) = v16;
    *(_QWORD *)(a4 + 40) = v17;
    *(_QWORD *)(a4 + 48) = v18;

    goto LABEL_10;
  }
  objc_msgSend(v12, "minimumTime");
  v25 = v24;
  objc_msgSend(v12, "maximumTime");
  if (v25 > v26)
  {
    objc_msgSend(v12, "minimumTime");
    v28 = v27;
    objc_msgSend(v12, "maximumTime");
    v30 = v29;
    -[re name](v8, "name");
    v15 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    re::DynamicString::format((re::DynamicString *)"MinTime = %lf, MaxTime = %lf, Processing node \"%s\"", (re::DynamicString *)&v55, v28, v30, objc_msgSend(v15, "UTF8String"));
    v16 = v55;
    v17 = v56;
    v18 = v57;
    *(_BYTE *)a4 = 0;
    v19 = 2004;
    goto LABEL_14;
  }
  objc_msgSend(v12, "minimumTime");
  v32 = v31;
  v33 = (_anonymous_namespace_ *)objc_msgSend(v12, "maximumTime");
  v35 = v34;
  v61 = 0;
  v58[1] = 0;
  v59 = 0;
  v60 = 0;
  v36 = vcvtps_s32_f32(v32 / a3);
  v37 = vcvtms_s32_f32(v35 / a3);
  v38 = v37 - v36 + 3;
  re::DynamicArray<re::Matrix3x3<float>>::setCapacity(v58, v38);
  ++v60;
  v39 = (float)(int)ceilf(v32 / a3) * a3;
  *(float *)&v40 = vabds_f32(v32, v39);
  v41 = v39 >= v32 || v39 == v32;
  if (v41 || *(float *)&v40 <= 0.00001)
  {
    v42 = (float)v37 * a3;
    v43 = v42 <= v35 || v42 == v35;
    if (v43 || vabds_f32(v42, v35) <= 0.00001)
    {
      if (v39 != v32 && *(float *)&v40 >= (float)((float)((float)(fabsf(v32) + fabsf(v39)) + 1.0) * 0.00001))
      {
        re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)v58, (uint64_t)&v55);
      }
      v44 = 0.0;
      if (v37 >= v36)
      {
        v45 = v37 + 1;
        do
        {
          v44 = (float)((float)v36 * a3);
          re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)v58, (uint64_t)&v55);
          ++v36;
        }
        while (v45 != v36);
      }
      v46 = v35;
      if (v44 != v35 && vabdd_f64(v46, v44) >= (fabs(v46) + fabs(v44) + 1.0) * 1.0e-12)
      {
        *(_QWORD *)&v46 = re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)v58, (uint64_t)&v55).n128_u64[0];
      }
      v47 = v59;
      if (v59 <= v38)
      {
        re::DynamicArray<re::AssetHandle>::operator=((uint64_t)&a2[11], (uint64_t)v58);
        *(float *)&a2[10].super.isa = v32;
        *((float *)&a2[10].super.isa + 1) = v35;
        *((float *)&a2[9].super.isa + 1) = a3;
        *(_BYTE *)a4 = 1;
        goto LABEL_42;
      }
      -[re name](v8, "name", v46);
      v48 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      re::DynamicString::format((re::DynamicString *)"Frame count = %ld. Max sample count = %ld, Processing node \"%s\"", (re::DynamicString *)&v55, v47, v38, objc_msgSend(v48, "UTF8String"));
      v49 = v55;
      v50 = v56;
      v51 = v57;
      *(_BYTE *)a4 = 0;
      v52 = 2008;
    }
    else
    {
      v54 = v42;
      -[re name](v8, "name", v40);
      v48 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      re::DynamicString::format((re::DynamicString *)"End time = %f. Calculated end time = %f, Processing node \"%s\"", (re::DynamicString *)&v55, v35, *(_QWORD *)&v54, objc_msgSend(v48, "UTF8String"));
      v49 = v55;
      v50 = v56;
      v51 = v57;
      *(_BYTE *)a4 = 0;
      v52 = 2006;
    }
  }
  else
  {
    v53 = v39;
    -[re name](v8, "name");
    v48 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    re::DynamicString::format((re::DynamicString *)"Start time = %f. Calculated start time = %f, Processing node \"%s\"", (re::DynamicString *)&v55, v32, *(_QWORD *)&v53, objc_msgSend(v48, "UTF8String"));
    v49 = v55;
    v50 = v56;
    v51 = v57;
    *(_BYTE *)a4 = 0;
    v52 = 2005;
  }
  *(_QWORD *)(a4 + 8) = v52;
  *(_QWORD *)(a4 + 16) = &re::AnimationErrorCategory(void)::instance;
  *(_OWORD *)(a4 + 24) = v49;
  *(_QWORD *)(a4 + 40) = v50;
  *(_QWORD *)(a4 + 48) = v51;

LABEL_42:
  if (v58[0] && v61)
    (*(void (**)(void))(*(_QWORD *)v58[0] + 40))();
LABEL_10:

}

uint64_t `anonymous namespace'::sampleTransform(uint64_t a1, void *a2, double a3)
{
  id v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[4];

  v5 = a2;
  objc_msgSend(v5, "localTransformAtTime:", a3);
  v13 = v7;
  v14 = v6;
  v11 = v9;
  v12 = v8;

  v15[0] = v14;
  v15[1] = v13;
  v15[2] = v12;
  v15[3] = v11;
  *(_QWORD *)a1 = 0x3F8000003F800000;
  *(_QWORD *)(a1 + 8) = 1065353216;
  *(_QWORD *)(a1 + 24) = 0x3F80000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  return re::decomposeScaleRotationTranslation<float>((uint64_t)v15, (int32x4_t *)a1, (_QWORD *)(a1 + 16), (_OWORD *)(a1 + 32));
}

void re::importSRTSampledAnimationFromUSKNode(void *a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  double *v16;
  _anonymous_namespace_ *v17;
  float v18;
  float v19;
  id v20;
  __int128 v21;
  __int128 v22;
  double v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  float v29;
  int32x4_t v30;
  _QWORD v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _QWORD v37[3];
  int v38;
  uint64_t v39;

  v5 = a1;
  objc_msgSend(MEMORY[0x24BEBED10], "transformKeyTimesWithNode:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (!v6)
  {
    objc_msgSend(v5, "path");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "stringValue");
    v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    re::DynamicString::format((re::DynamicString *)"Processing node \"%s\"", (re::DynamicString *)&v33, objc_msgSend(v9, "UTF8String"));
    v10 = v33;
    v12 = *((_QWORD *)&v34 + 1);
    v11 = v34;
    *(_BYTE *)a3 = 0;
    v13 = 2000;
    goto LABEL_10;
  }
  if ((unint64_t)objc_msgSend(v6, "arraySize") <= 1)
  {
    objc_msgSend(v5, "path");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "stringValue");
    v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    re::DynamicString::format((re::DynamicString *)"Processing node \"%s\"", (re::DynamicString *)&v33, objc_msgSend(v9, "UTF8String"));
    v10 = v33;
    v12 = *((_QWORD *)&v34 + 1);
    v11 = v34;
    *(_BYTE *)a3 = 0;
    v13 = 2003;
LABEL_10:
    *(_QWORD *)(a3 + 8) = v13;
    *(_QWORD *)(a3 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a3 + 24) = v10;
    *(_QWORD *)(a3 + 40) = v11;
    *(_QWORD *)(a3 + 48) = v12;
    goto LABEL_11;
  }
  v14 = a2[19];
  if (v14 <= 0.0 || (v15 = fabsf(v14), v15 < (float)((float)(v15 + 1.0) * 0.00001)))
  {
    v23 = v14;
    objc_msgSend(v5, "path");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "stringValue");
    v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    re::DynamicString::format((re::DynamicString *)"Sample Rate = %f. Processing node \"%s\"", (re::DynamicString *)&v33, *(_QWORD *)&v23, objc_msgSend(v9, "UTF8String"));
    v10 = v33;
    v12 = *((_QWORD *)&v34 + 1);
    v11 = v34;
    *(_BYTE *)a3 = 0;
    v13 = 2001;
    goto LABEL_10;
  }
  objc_msgSend(v7, "dataNoCopy");
  v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v16 = (double *)objc_msgSend(v8, "bytes");
  v17 = (_anonymous_namespace_ *)objc_msgSend(v7, "arraySize");
  v18 = *v16;
  v19 = v16[(_QWORD)v17 - 1];
  if (v18 > v19)
  {
    objc_msgSend(v5, "name");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "stringValue");
    v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    re::DynamicString::format((re::DynamicString *)"MinTime = %lf, MaxTime = %lf, Processing node \"%s\"", (re::DynamicString *)&v33, v18, v19, objc_msgSend(v20, "UTF8String"));
    v21 = v33;
    v22 = v34;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 2004;
    *(_QWORD *)(a3 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a3 + 24) = v21;
    *(_OWORD *)(a3 + 40) = v22;

LABEL_11:
    goto LABEL_12;
  }
  v39 = 0;
  v37[1] = 0;
  v37[2] = 0;
  v38 = 0;
  re::DynamicArray<re::Matrix3x3<float>>::setCapacity(v37, (unint64_t)(float)((float)(v19 - v18) + 1.0));
  ++v38;
  if ((float)(int)v18 <= v19)
  {
    v24 = (int)v18;
    do
    {
      objc_msgSend(MEMORY[0x24BEBED10], "localTransformWithNode:time:", v5, (double)v24);
      v33 = v25;
      v34 = v26;
      v35 = v27;
      v36 = v28;
      v30.i64[0] = 0x3F8000003F800000;
      v30.i64[1] = 1065353216;
      v31[0] = 0;
      v31[1] = 0x3F80000000000000;
      v32 = 0uLL;
      re::decomposeScaleRotationTranslation<float>((uint64_t)&v33, &v30, v31, &v32);
      re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)v37, (uint64_t)&v30);
      ++v24;
    }
    while ((float)v24 <= v19);
  }
  re::DynamicArray<re::AssetHandle>::operator=((uint64_t)(a2 + 22), (uint64_t)v37);
  v29 = a2[19];
  a2[20] = v29 * v18;
  a2[21] = v29 * v19;
  *(_BYTE *)a3 = 1;
  if (v37[0] && v39)
    (*(void (**)(void))(*(_QWORD *)v37[0] + 40))();
LABEL_12:

}

id re::findMaterialPropertyString(re *this, MDLMaterial *a2, MDLMaterialSemantic a3)
{
  re *v4;
  MDLMaterialPropertyType v5;
  void *v6;
  uint64_t v7;
  MDLMaterialPropertyType v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;

  v4 = this;
  re::findMaterialPropertyType(v4, a2, MDLMaterialSemanticSubsurface, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "stringValue");
  v7 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)v7;
  if (v6)
  {
    if (v7)
      goto LABEL_3;
LABEL_7:
    v10 = 0;
    goto LABEL_8;
  }
  re::findMaterialPropertyType(v4, a2, MDLMaterialSemanticMetallic, v8);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "URLValue");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "absoluteString");
  v12 = objc_claimAutoreleasedReturnValue();

  v9 = (void *)v12;
  if (!v12)
    goto LABEL_7;
LABEL_3:
  if (objc_msgSend(v9, "length"))
    v10 = v6;
  else
    v10 = 0;
LABEL_8:
  v13 = v10;

  return v13;
}

void re::gatherMaterialConstants(uint64_t a1, void *a2)
{
  re *v3;
  MDLMaterialPropertyType v4;
  void *v5;
  MDLMaterialPropertyType v6;
  uint64_t v7;
  MDLMaterialPropertyType v8;
  void *v9;
  MDLMaterialSemantic v15;
  MDLMaterialPropertyType v16;
  float MaterialPropertyFloat;
  _anonymous_namespace_ *v18;
  _anonymous_namespace_ *v19;
  void *v20;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v21;
  uint64_t i;
  _anonymous_namespace_ *v23;
  double v24;
  double v25;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v26;
  _anonymous_namespace_ *v27;
  MDLMaterialPropertyType v28;
  void *v29;
  MDLMaterialSemantic v30;
  MDLMaterialPropertyType v31;
  _anonymous_namespace_ *v32;
  _anonymous_namespace_ *v33;
  _anonymous_namespace_ *v34;
  _anonymous_namespace_ *v35;
  _anonymous_namespace_ *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  _anonymous_namespace_ *v46;
  re::DynamicString *v47;
  void *v48;
  MDLMaterialPropertyType v49;
  MDLMaterialSemantic v50;
  MDLMaterialPropertyType v51;
  void *v52;
  float v53;
  float v54;
  MDLMaterialPropertyType v55;
  void *v56;
  _anonymous_namespace_ *v57;
  MDLMaterialPropertyType v58;
  _anonymous_namespace_ *v59;
  void *v60;
  MDLMaterialSemantic v61;
  MDLMaterialPropertyType v62;
  float v63;
  _anonymous_namespace_ *v64;
  _anonymous_namespace_ *v65;
  void *v66;
  MDLMaterialSemantic v67;
  MDLMaterialPropertyType v68;
  float v69;
  _anonymous_namespace_ *v70;
  _anonymous_namespace_ *v71;
  void *v72;
  MDLMaterialPropertyType v73;
  MDLMaterialSemantic v74;
  MDLMaterialPropertyType v75;
  void *v76;
  float v77;
  float v78;
  MDLMaterialPropertyType v79;
  void *v80;
  _anonymous_namespace_ *v81;
  MDLMaterialPropertyType v82;
  _anonymous_namespace_ *v83;
  void *v84;
  MDLMaterialSemantic v85;
  MDLMaterialPropertyType v86;
  float v87;
  void *v88;
  _anonymous_namespace_ *v89;
  MDLMaterialSemantic v90;
  MDLMaterialPropertyType v91;
  float v92;
  float v93;
  float v94;
  float v95;
  _anonymous_namespace_ *v96;
  __n128 MaterialPropertyFloat3;
  __n128 v98;
  _anonymous_namespace_ *v99;
  char v100;
  _anonymous_namespace_ *v101;
  char v102;
  uint64_t v103;
  char v104;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char v109;

  v3 = a2;
  re::findMaterialPropertyType(v3, 0, MDLMaterialSemanticAnisotropic, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {

  }
  else
  {
    re::findMaterialPropertyType(v3, (MDLMaterial *)0xF, MDLMaterialSemanticSpecularTint, v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v9)
      goto LABEL_10;
  }
  __asm { FMOV            V0.4S, #1.0 }
  MaterialPropertyFloat3 = re::getMaterialPropertyFloat3(v3, 0, _Q0, v7, v8);
  MaterialPropertyFloat = re::getMaterialPropertyFloat(v3, (MDLMaterial *)0xF, v15, 1.0, v16);
  v19 = (_anonymous_namespace_ *)re::DynamicString::appendf((re::DynamicString *)&v105, "[%f, %f, %f, %f]", MaterialPropertyFloat3.n128_f32[0], MaterialPropertyFloat3.n128_f32[1], MaterialPropertyFloat3.n128_f32[2], MaterialPropertyFloat);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString&>(a1, (re::DynamicString *)&v106, (const re::DynamicString *)&v105);
  if (v106 && (v107 & 1) != 0)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v106 + 40))(v106, v108);
  if (*(_QWORD *)v105.__x_ && (v105.__x_[2] & 1) != 0)
    (*(void (**)(void))(**(_QWORD **)v105.__x_ + 40))();
LABEL_10:
  -[re name](v3, "name");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v20, "hash");
  v105.__x_[0] = v21;
  for (i = 1; i != 624; ++i)
  {
    v21 = i + 1812433253 * (v21 ^ (v21 >> 30));
    v105.__x_[i] = v21;
  }
  v105.__i_ = 0;

  v24 = (float)((float)((float)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v105)
                      * 2.3283e-10)
              + 0.0);
  v25 = (float)((float)((float)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v105)
                      * 2.3283e-10)
              + 0.0);
  v26 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v105);
  v27 = (_anonymous_namespace_ *)re::DynamicString::appendf((re::DynamicString *)&v106, "[%f, %f, %f]", v24, v25, (float)((float)((float)v26 * 2.3283e-10) + 0.0));
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString&>(a1, (re::DynamicString *)&v103, (const re::DynamicString *)&v106);
  if (v103 && (v104 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v103 + 40))();
  re::findMaterialPropertyType(v3, (MDLMaterial *)0xD, MDLMaterialSemanticAnisotropic, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  if (v29)
  {
    v98 = re::getMaterialPropertyFloat3(v3, (MDLMaterial *)0xD, (__n128)0, v30, v31);
    v33 = (_anonymous_namespace_ *)re::DynamicString::appendf((re::DynamicString *)&v103, "[%f, %f, %f]", v98.n128_f32[0], v98.n128_f32[1], v98.n128_f32[2]);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString&>(a1, (re::DynamicString *)&v101, (const re::DynamicString *)&v103);
    v34 = v101;
    if (v101 && (v102 & 1) != 0)
      v34 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v101 + 40))();
    v35 = (_anonymous_namespace_ *)re::DynamicString::appendf((re::DynamicString *)&v101, "%f", 1.0);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString&>(a1, (re::DynamicString *)&v99, (const re::DynamicString *)&v101);
    v36 = v99;
    if (v99 && (v100 & 1) != 0)
      v36 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v99 + 40))();
    v37 = re::Hash<re::DynamicString>::operator()((uint64_t)&v109, (uint64_t)&v99);
    v38 = v37;
    if (*(_QWORD *)a1)
    {
      v39 = v37 % *(unsigned int *)(a1 + 24);
      v40 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v39);
      if ((_DWORD)v40 != 0x7FFFFFFF)
      {
        v41 = *(_QWORD *)(a1 + 16);
        while (!re::DynamicString::operator==(v41 + 80 * v40 + 16, (uint64_t)&v99))
        {
          v40 = *(_DWORD *)(v41 + 80 * v40 + 8) & 0x7FFFFFFF;
          if (v40 == 0x7FFFFFFF)
            goto LABEL_29;
        }
        goto LABEL_35;
      }
    }
    else
    {
      LODWORD(v39) = 0;
    }
LABEL_29:
    v42 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v42 == 0x7FFFFFFF)
    {
      v42 = *(unsigned int *)(a1 + 32);
      v43 = v42;
      if ((_DWORD)v42 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(v39) = v38 % *(unsigned int *)(a1 + 24);
        v43 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 32) = v43 + 1;
      v44 = *(_QWORD *)(a1 + 16);
      v45 = *(_DWORD *)(v44 + 80 * v42 + 8);
    }
    else
    {
      v44 = *(_QWORD *)(a1 + 16);
      v45 = *(_DWORD *)(v44 + 80 * v42 + 8);
      *(_DWORD *)(a1 + 36) = v45 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v44 + 80 * v42 + 8) = v45 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v42 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v42 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v39);
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * v42) = v38;
    v46 = re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 80 * v42 + 16), (const re::DynamicString *)&v99);
    v47 = (re::DynamicString *)(*(_QWORD *)(a1 + 16) + 80 * v42 + 48);
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v39) = v42;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
LABEL_35:
    if (v99 && (v100 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v99 + 40))();
    if (v101 && (v102 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v101 + 40))();
    if (v103 && (v104 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v103 + 40))();
  }
  re::findMaterialPropertyString(v3, (MDLMaterial *)2, v30);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  if (v48)
  {

  }
  else
  {
    re::findMaterialPropertyType(v3, (MDLMaterial *)2, MDLMaterialSemanticSpecular, v49);
    v52 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v52)
    {
      v53 = 0.0;
      goto LABEL_48;
    }
  }
  v53 = 1.0;
LABEL_48:
  v54 = re::getMaterialPropertyFloat(v3, (MDLMaterial *)2, v50, v53, v51);
  re::findMaterialPropertyType(v3, (MDLMaterial *)2, MDLMaterialSemanticSpecularTint, v55);
  v56 = (void *)objc_claimAutoreleasedReturnValue();

  if (v56 || v54 != 0.0)
  {
    v59 = (_anonymous_namespace_ *)re::DynamicString::appendf((re::DynamicString *)&v103, "%f", v54);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString&>(a1, (re::DynamicString *)&v101, (const re::DynamicString *)&v103);
    if (v101 && (v102 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v101 + 40))();
    if (v103 && (v104 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v103 + 40))();
  }
  re::findMaterialPropertyType(v3, (MDLMaterial *)6, MDLMaterialSemanticSpecularTint, v58);
  v60 = (void *)objc_claimAutoreleasedReturnValue();

  if (v60)
  {
    v63 = re::getMaterialPropertyFloat(v3, (MDLMaterial *)6, v61, 1.0, v62);
    v65 = (_anonymous_namespace_ *)re::DynamicString::appendf((re::DynamicString *)&v103, "%f", v63);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString&>(a1, (re::DynamicString *)&v101, (const re::DynamicString *)&v103);
    if (v101 && (v102 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v101 + 40))();
    if (v103 && (v104 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v103 + 40))();
  }
  re::findMaterialPropertyType(v3, (MDLMaterial *)0xB, MDLMaterialSemanticSpecularTint, v62);
  v66 = (void *)objc_claimAutoreleasedReturnValue();

  if (v66)
  {
    v69 = re::getMaterialPropertyFloat(v3, (MDLMaterial *)0xB, v67, 0.0, v68);
    v71 = (_anonymous_namespace_ *)re::DynamicString::appendf((re::DynamicString *)&v103, "%f", v69);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString&>(a1, (re::DynamicString *)&v101, (const re::DynamicString *)&v103);
    if (v101 && (v102 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v101 + 40))();
    if (v103 && (v104 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v103 + 40))();
  }
  re::findMaterialPropertyString(v3, (MDLMaterial *)0x8000, v67);
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  if (v72)
  {

  }
  else
  {
    re::findMaterialPropertyType(v3, (MDLMaterial *)0x8000, MDLMaterialSemanticSpecular, v73);
    v76 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v76)
    {
      v77 = 0.01;
      goto LABEL_74;
    }
  }
  v77 = 1.0;
LABEL_74:
  v78 = re::getMaterialPropertyFloat(v3, (MDLMaterial *)0x8000, v74, v77, v75);
  re::findMaterialPropertyType(v3, (MDLMaterial *)0x8000, MDLMaterialSemanticSpecularTint, v79);
  v80 = (void *)objc_claimAutoreleasedReturnValue();

  if (v80 || v78 != 0.01)
  {
    v83 = (_anonymous_namespace_ *)re::DynamicString::appendf((re::DynamicString *)&v103, "%f", v78);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString&>(a1, (re::DynamicString *)&v101, (const re::DynamicString *)&v103);
    if (v101 && (v102 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v101 + 40))();
    if (v103 && (v104 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v103 + 40))();
  }
  re::findMaterialPropertyType(v3, (MDLMaterial *)0x10, MDLMaterialSemanticSpecularTint, v82);
  v84 = (void *)objc_claimAutoreleasedReturnValue();

  if (v84)
    v87 = re::getMaterialPropertyFloat(v3, (MDLMaterial *)0x10, v85, 1.0, v86);
  else
    v87 = 1.0;
  re::findMaterialPropertyType(v3, (MDLMaterial *)0x11, MDLMaterialSemanticSpecularTint, v86);
  v88 = (void *)objc_claimAutoreleasedReturnValue();

  v92 = 1.5;
  if (v88)
    v92 = re::getMaterialPropertyFloat(v3, (MDLMaterial *)0x11, v90, 1.5, v91);
  if (v87 <= 2.4)
    v93 = v87;
  else
    v93 = 2.4;
  if (v93 < 1.0)
    v93 = 1.0;
  if (v92 > 2.4)
    v92 = 2.4;
  if (v92 < 1.0)
    v92 = 1.0;
  v94 = (float)((float)((float)(v93 - v92) / (float)(v93 + v92)) * (float)((float)(v93 - v92) / (float)(v93 + v92)))
      / 0.08;
  if (v94 <= 1.0)
    v95 = v94;
  else
    v95 = 1.0;
  v96 = (_anonymous_namespace_ *)re::DynamicString::appendf((re::DynamicString *)&v103, "%f", v95);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString&>(a1, (re::DynamicString *)&v101, (const re::DynamicString *)&v103);
  if (v101 && (v102 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v101 + 40))();
  if (v103 && (v104 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v103 + 40))();
  if (v106 && (v107 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v106 + 40))();

}

__n128 re::getMaterialPropertyFloat3(re *a1, MDLMaterial *a2, __n128 a3, uint64_t a4, MDLMaterialPropertyType a5)
{
  void *v5;
  void *v6;
  __n128 v7;

  re::findMaterialPropertyType(a1, a2, MDLMaterialSemanticAnisotropic, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5 && !objc_msgSend(v5, "isDefaultValue"))
  {
    objc_msgSend(v6, "float3Value");
    a3 = v7;
  }

  return a3;
}

float re::getMaterialPropertyFloat(re *this, MDLMaterial *a2, MDLMaterialSemantic a3, float a4, MDLMaterialPropertyType a5)
{
  void *v6;
  void *v7;
  float v8;

  re::findMaterialPropertyType(this, a2, MDLMaterialSemanticSpecularTint, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6 && (objc_msgSend(v6, "isDefaultValue") & 1) == 0)
  {
    objc_msgSend(v7, "floatValue");
    a4 = v8;
  }

  return a4;
}

uint64_t re::isMaterialTransparent(re *this, MDLMaterial *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  -[re propertiesWithSemantic:](this, "propertiesWithSemantic:", 15, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
LABEL_3:
    v6 = 0;
    while (1)
    {
      if (*(_QWORD *)v11 != v5)
        objc_enumerationMutation(v2);
      v7 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v6);
      if (objc_msgSend((id)v7, "type") == 3 || objc_msgSend((id)v7, "type") == 1)
      {
        v7 = 1;
        goto LABEL_16;
      }
      if (objc_msgSend((id)v7, "type") == 5)
        break;
      if (v4 == ++v6)
      {
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
        v7 = 0;
        if (v4)
          goto LABEL_3;
        goto LABEL_16;
      }
    }
    if (!v7)
      goto LABEL_16;
    if ((objc_msgSend((id)v7, "isDefaultValue") & 1) == 0)
    {
      objc_msgSend((id)v7, "floatValue");
      v7 = v9 < 0.99;
      goto LABEL_16;
    }
  }
  v7 = 0;
LABEL_16:

  return v7;
}

id re::findMaterialPropertyType(re *this, MDLMaterial *a2, MDLMaterialSemantic a3, MDLMaterialPropertyType a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  id v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  -[re propertiesWithSemantic:](this, "propertiesWithSemantic:", a2, a4, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v14;
    while (2)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v14 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        if (objc_msgSend(v10, "type") == a3)
        {
          v11 = v10;
          goto LABEL_11;
        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v7)
        continue;
      break;
    }
  }
  v11 = 0;
LABEL_11:

  return v11;
}

id re::createMDLMeshFromGeomMesh(re *this, const re::GeomMesh *a2, const char *a3)
{
  uint64_t v3;
  unsigned int *v6;
  void *v7;
  unsigned int *v8;
  void *v9;
  void *v10;
  re *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  void *v26;
  void *v27;
  re *v28;
  _BYTE *v29;
  uint64_t v30;
  _anonymous_namespace_ *v31;
  uint64_t v32;
  unsigned int *v33;
  int v34;
  unint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  id v42;
  unint64_t v43;
  unsigned int *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  re *v59;
  char v60;
  re *v61;
  uint64_t v62;
  id v63;
  __CFString *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  int v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unsigned int *v78;
  unsigned int *v79;
  unsigned int *v80;
  __int128 v81;
  unsigned int *v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  id v96;
  unint64_t v97;
  void *v98;
  unsigned int *v99;
  id v100;
  void *v101;
  void *v102;
  unint64_t v103;
  void *v104;
  void *v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  unsigned int *v114;
  uint64_t v115;
  _BYTE v116[40];
  uint64_t v117;
  _BYTE v118[28];
  __int16 v119;
  re *v120;
  void *v121;
  _BYTE v122[12];
  __int16 v123;
  int v124;
  __int16 v125;
  unint64_t v126;
  __int16 v127;
  uint64_t v128;
  __int128 __src;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;

  v6 = (unsigned int *)v118;
  v134 = *MEMORY[0x24BDAC8D0];
  v96 = objc_alloc_init(MEMORY[0x24BDDE6E8]);
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE6E0]), "initWithBufferAllocator:", v96);
  v8 = (unsigned int *)((char *)this + 16);
  objc_msgSend(v7, "setVertexCount:", *((unsigned int *)this + 4));
  v100 = v7;
  objc_msgSend(v100, "allocator");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend(v9, "newBuffer:type:", 12 * *((unsigned int *)this + 4), 1);

  v11 = this;
  v12 = (uint64_t *)re::GeomMesh::accessVertexPositions(this);
  v14 = v13;
  v98 = v10;
  objc_msgSend(v10, "map");
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend((id)v15, "bytes");
  v108 = (uint64_t)v8;
  v17 = *v8;
  if ((_DWORD)v17)
  {
    v18 = v14;
    v19 = (_DWORD *)(v16 + 8);
    v20 = v14;
    while (v20)
    {
      v21 = v12[1];
      v22 = *v12;
      v12 += 2;
      *((_QWORD *)v19 - 1) = v22;
      *v19 = v21;
      v19 += 3;
      --v20;
      if (!--v17)
        goto LABEL_5;
    }
    goto LABEL_101;
  }
LABEL_5:

  v23 = objc_alloc(MEMORY[0x24BDDE708]);
  v24 = objc_msgSend(v23, "initWithName:format:offset:bufferIndex:", *MEMORY[0x24BDDE6B8], 786435, 0, 0);
  v25 = objc_alloc_init(MEMORY[0x24BDDE718]);
  objc_msgSend(v25, "layouts");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v92 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE710]), "initWithStride:", 12);
  v93 = v26;
  objc_msgSend(v26, "replaceObjectAtIndex:withObject:", 0, v92);
  v95 = (void *)v24;
  objc_msgSend(v25, "addOrReplaceAttribute:", v24);
  v94 = v25;
  objc_msgSend(v100, "setVertexDescriptor:", v25);
  v121 = v10;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v121, 1);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v100, "setVertexBuffers:", v27);

  v114 = 0;
  v111 = 0;
  v112 = 0;
  v110 = 0;
  v28 = v11;
  v113 = 0;
  v29 = (_BYTE *)re::internal::GeomAttributeManager::attributeByName((re *)((char *)v11 + 64), (const char *)a2);
  if (v29
    && (v30 = (uint64_t)v29, v29[16] == 2)
    && (*(unsigned int (**)(_BYTE *))(*(_QWORD *)v29 + 16))(v29) == *((_DWORD *)v11 + 10))
  {
    v31 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
    if (!(_DWORD)v31)
      goto LABEL_65;
    v32 = re::internal::GeomTypedAttribute<int>::operator[](v30, 0);
    v31 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
    LODWORD(v3) = (_DWORD)v31;
LABEL_66:
    v109 = 0;
    if (*((_DWORD *)v28 + 10))
    {
      v39 = 0;
      LODWORD(v15) = 0;
      while (!v39)
      {
        v76 = 0;
        v14 = 0;
LABEL_78:
        LODWORD(__src) = v15;
        *((_QWORD *)v6 + 4) = 0;
        memset(v118, 0, sizeof(v118));
        re::DynamicArray<int>::setCapacity(v118, 1uLL);
        ++*(_DWORD *)&v118[24];
        re::DynamicArray<float>::copy(v118, 0, (char *)&__src, 1);
        v15 = v109;
        if (v3 <= v109)
          goto LABEL_102;
        *(_DWORD *)v116 = *(_DWORD *)(v32 + 4 * v109);
        re::DynamicArray<float>::DynamicArray((uint64_t)&v116[8], (uint64_t *)v118);
        v15 = v76 + 1;
        if (v76 + 1 <= v14)
          goto LABEL_103;
        v77 = v76;
        if (v76 >= v111)
        {
          re::DynamicArray<re::KeyValuePair<int,re::DynamicArray<unsigned int>>>::growCapacity(&v110, v76 + 1);
          v77 = v112;
        }
        v78 = v114;
        v79 = &v114[12 * v77];
        if (v77 <= v14)
        {
          *v79 = *(_DWORD *)v116;
          v85 = &v78[12 * v77];
          *((_QWORD *)v85 + 5) = 0;
          *((_QWORD *)v85 + 2) = 0;
          *((_QWORD *)v85 + 3) = 0;
          *((_QWORD *)v85 + 1) = 0;
          v85[8] = 0;
          *((_QWORD *)v85 + 1) = *(_QWORD *)&v116[8];
          *(_QWORD *)&v116[8] = 0;
          *((_QWORD *)v85 + 2) = *(_QWORD *)&v116[16];
          *(_QWORD *)&v116[16] = 0;
          v86 = *((_QWORD *)v85 + 3);
          *((_QWORD *)v85 + 3) = *(_QWORD *)&v116[24];
          *(_QWORD *)&v116[24] = v86;
          v87 = *((_QWORD *)v85 + 5);
          *((_QWORD *)v85 + 5) = v117;
          v117 = v87;
          ++*(_DWORD *)&v116[32];
          ++v85[8];
        }
        else
        {
          v80 = &v114[12 * v77];
          *v79 = *(v80 - 12);
          *((_QWORD *)v80 + 2) = 0;
          *((_QWORD *)v80 + 3) = 0;
          *((_QWORD *)v80 + 1) = *((_QWORD *)v80 - 5);
          v81 = *((_OWORD *)v80 - 2);
          *((_QWORD *)v80 - 4) = 0;
          *((_QWORD *)v80 - 3) = 0;
          *((_QWORD *)v80 - 5) = 0;
          *((_OWORD *)v80 + 1) = v81;
          *((_QWORD *)v80 + 5) = *((_QWORD *)v80 - 1);
          *((_QWORD *)v80 - 1) = 0;
          ++*(v80 - 4);
          v80[8] = 1;
          if (v79 - 12 != &v78[12 * v14])
          {
            v82 = &v78[12 * v77 - 24];
            v83 = 48 * v14 - 48 * v77 + 48;
            do
            {
              v82[12] = *v82;
              re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)(v82 + 14), (uint64_t)(v82 + 2));
              v82 -= 12;
              v83 += 48;
            }
            while (v83);
            v78 = v114;
            v28 = v11;
          }
          v84 = &v78[12 * v14];
          *v84 = *(_DWORD *)v116;
          re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)(v84 + 2), (uint64_t)&v116[8]);
          v77 = v112;
        }
        v39 = v77 + 1;
        v112 = v39;
        ++v113;
        if (*(_QWORD *)&v116[8] && v117)
        {
          v88 = v39;
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)&v116[8] + 40))(*(_QWORD *)&v116[8], v117);
          v39 = v88;
        }
        v31 = *(_anonymous_namespace_ **)v118;
        if (*(_QWORD *)v118)
        {
          v89 = *((_QWORD *)v6 + 4);
          if (v89)
          {
            v75 = v39;
            v31 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)v118 + 40))(*(_QWORD *)v118, v89);
LABEL_95:
            v39 = v75;
          }
        }
        LODWORD(v15) = v109 + 1;
        v109 = v15;
        if (v15 >= *((_DWORD *)v28 + 10))
          goto LABEL_21;
      }
      if (v3 <= v15)
        goto LABEL_104;
      v14 = 0;
      v73 = *(_DWORD *)(v32 + 4 * v15);
      v31 = (_anonymous_namespace_ *)(v114 + 2);
      while (1)
      {
        v74 = *((_DWORD *)v31 - 2);
        if (v74 == v73)
          break;
        if (v74 > v73)
        {
          v76 = v39;
          goto LABEL_78;
        }
        ++v14;
        v31 = (_anonymous_namespace_ *)((char *)v31 + 48);
        if (v39 == v14)
        {
          v76 = v39;
          v14 = v39;
          goto LABEL_78;
        }
      }
      v75 = v39;
      v31 = (_anonymous_namespace_ *)re::DynamicArray<int>::add(v31, &v109);
      goto LABEL_95;
    }
    v39 = 0;
  }
  else
  {
    *(_QWORD *)&v116[32] = 0;
    memset(v116, 0, 28);
    LODWORD(__src) = 1;
    re::DynamicArray<float>::DynamicArray((uint64_t)&__src + 8, (uint64_t *)v116);
    re::DynamicArray<re::KeyValuePair<int,re::DynamicArray<unsigned int>>>::growCapacity(&v110, 1uLL);
    v33 = v114;
    v34 = v113;
    v35 = v112;
    v36 = &v114[12 * v112];
    *v36 = __src;
    *((_QWORD *)v36 + 5) = 0;
    v36[8] = 0;
    *((_QWORD *)v36 + 2) = 0;
    *((_QWORD *)v36 + 3) = 0;
    *((_QWORD *)v36 + 1) = 0;
    *((_QWORD *)v36 + 1) = *((_QWORD *)&__src + 1);
    *((_QWORD *)&__src + 1) = 0;
    *((_QWORD *)v36 + 2) = v130;
    *(_QWORD *)&v130 = 0;
    v37 = *((_QWORD *)v36 + 3);
    *((_QWORD *)v36 + 3) = *((_QWORD *)&v130 + 1);
    *((_QWORD *)&v130 + 1) = v37;
    v38 = *((_QWORD *)v36 + 5);
    *((_QWORD *)v36 + 5) = *((_QWORD *)&v131 + 1);
    *((_QWORD *)&v131 + 1) = v38;
    LODWORD(v131) = v131 + 1;
    ++v36[8];
    v39 = v35 + 1;
    v112 = v35 + 1;
    v113 = v34 + 1;
    if (*((_QWORD *)&__src + 1))
    {
      if (v38)
      {
        v40 = v35 + 1;
        (*(void (**)(void))(**((_QWORD **)&__src + 1) + 40))();
        v39 = v40;
      }
      *((_QWORD *)&v131 + 1) = 0;
      v130 = 0uLL;
      *((_QWORD *)&__src + 1) = 0;
      LODWORD(v131) = v131 + 1;
    }
    if (*(_QWORD *)v116 && *(_QWORD *)&v116[32])
    {
      v41 = v39;
      (*(void (**)(void))(**(_QWORD **)v116 + 40))();
      v39 = v41;
    }
    *(_DWORD *)v122 = 0;
    if (*((_DWORD *)v11 + 10))
    {
      if (!v39)
        goto LABEL_105;
      do
      {
        re::DynamicArray<int>::add((_QWORD *)v33 + 1, v122);
        ++*(_DWORD *)v122;
      }
      while (*(_DWORD *)v122 < *((_DWORD *)v11 + 10));
      v39 = v112;
    }
  }
LABEL_21:
  v97 = v39;
  if (v39)
  {
    v18 = (unint64_t)v114;
    v99 = &v114[12 * v39];
    while (1)
    {
      v42 = v100;
      v14 = (unint64_t)v42;
      v43 = *(_QWORD *)(v18 + 24);
      if (v43)
        break;
      v3 = 0;
LABEL_32:
      objc_msgSend(v42, "allocator", v90, v91);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      v50 = (void *)objc_msgSend(v49, "newBuffer:type:", 4 * v3, 2);

      v105 = (void *)v14;
      objc_msgSend((id)v14, "allocator");
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      v103 = v43;
      v52 = (void *)objc_msgSend(v51, "newBuffer:type:", v43, 2);

      v101 = v50;
      objc_msgSend(v50, "map");
      v104 = (void *)objc_claimAutoreleasedReturnValue();
      v53 = objc_msgSend(v104, "bytes");
      v107 = v52;
      objc_msgSend(v52, "map");
      v102 = (void *)objc_claimAutoreleasedReturnValue();
      v54 = objc_msgSend(v102, "bytes");
      v106 = v18;
      v55 = *(_QWORD *)(v18 + 24);
      if (v55)
      {
        v56 = v54;
        v14 = 0;
        v57 = 0;
        v18 = *(_QWORD *)(v18 + 40);
        v6 = (unsigned int *)(v18 + 4 * v55);
        while (1)
        {
          v43 = *(unsigned int *)v18;
          *(_QWORD *)&v116[32] = 0;
          memset(v116, 0, 28);
          v58 = re::internal::GeomBaseTopology::faceVertices(v108, v43, (uint64_t)v116);
          v59 = v28;
          v28 = (re *)*((_QWORD *)v28 + 5);
          if ((unint64_t)v28 <= v43)
            goto LABEL_100;
          v60 = *(_DWORD *)(*((_QWORD *)v59 + 7) + 16 * v43 + 12) == -1 ? 3 : 4;
          *(_BYTE *)(v56 + v57) = v60;
          v28 = v59;
          if (v58)
            break;
LABEL_43:
          if (*(_QWORD *)v116 && *(_QWORD *)&v116[32])
            (*(void (**)(void))(**(_QWORD **)v116 + 40))();
          ++v57;
          v18 += 4;
          if ((unsigned int *)v18 == v6)
            goto LABEL_47;
        }
        v61 = 0;
        v11 = *(re **)&v116[16];
        v62 = *(_QWORD *)&v116[32];
        while (v11 != v61)
        {
          *(_DWORD *)(v53 + 4 * (v14 + (_DWORD)v61)) = *(_DWORD *)(v62 + 4 * (_QWORD)v61);
          v61 = (re *)((char *)v61 + 1);
          if ((re *)v58 == v61)
          {
            v14 = (v14 + (_DWORD)v61);
            goto LABEL_43;
          }
        }
        *(_QWORD *)v122 = 0;
        v132 = 0u;
        v133 = 0u;
        v130 = 0u;
        v131 = 0u;
        __src = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v118 = 136315906;
        *(_QWORD *)&v118[4] = "operator[]";
        *(_WORD *)&v118[12] = 1024;
        *(_DWORD *)&v118[14] = 789;
        *(_WORD *)&v118[18] = 2048;
        *(_QWORD *)&v118[20] = v11;
        v119 = 2048;
        v120 = v11;
        LODWORD(v91) = 38;
        v90 = v118;
        _os_log_send_and_compose_impl();
        v31 = (_anonymous_namespace_ *)_os_crash_msg();
        __break(1u);
LABEL_65:
        LODWORD(v3) = 0;
        v32 = 0;
        goto LABEL_66;
      }
LABEL_47:
      v63 = objc_alloc_init(MEMORY[0x24BDDE700]);
      objc_msgSend(v63, "setFaceCount:", v103);
      objc_msgSend(v63, "setFaceTopology:", v107);
      if (*(_QWORD *)v28)
      {
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:");
        v64 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v64 = &stru_24EDA2070;
      }
      v65 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE6F8]), "initWithName:indexBuffer:indexCount:indexType:geometryType:material:topology:", v64, v101, v3, 32, 5, 0, v63);
      if (v65)
      {
        objc_msgSend(v105, "submeshes");
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v66, "addObject:", v65);
        objc_msgSend(v105, "setSubmeshes:", v66);

      }
      v18 = v106 + 48;
      if ((unsigned int *)(v106 + 48) == v99)
        goto LABEL_53;
    }
    v3 = 0;
    v44 = *(unsigned int **)(v18 + 40);
    v45 = *((_QWORD *)v28 + 5);
    v46 = 4 * v43;
    while (1)
    {
      v47 = *v44;
      if (v45 <= v47)
        break;
      if (*(_DWORD *)(*((_QWORD *)v28 + 7) + 16 * v47 + 12) == -1)
        v48 = 3;
      else
        v48 = 4;
      v3 += v48;
      ++v44;
      v46 -= 4;
      if (!v46)
        goto LABEL_32;
    }
    *(_QWORD *)v118 = 0;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    __src = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v116 = 136315906;
    *(_QWORD *)&v116[4] = "operator[]";
    *(_WORD *)&v116[12] = 1024;
    *(_DWORD *)&v116[14] = 797;
    *(_WORD *)&v116[18] = 2048;
    *(_QWORD *)&v116[20] = v47;
    *(_WORD *)&v116[28] = 2048;
    *(_QWORD *)&v116[30] = v45;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_100:
    v15 = (uint64_t)v118;
    *(_QWORD *)v122 = 0;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    __src = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v118 = 136315906;
    *(_QWORD *)&v118[4] = "operator[]";
    *(_WORD *)&v118[12] = 1024;
    *(_DWORD *)&v118[14] = 797;
    *(_WORD *)&v118[18] = 2048;
    *(_QWORD *)&v118[20] = v43;
    v119 = 2048;
    v120 = v28;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_101:
    v110 = 0;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    __src = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v116 = 136315906;
    *(_QWORD *)&v116[4] = "operator[]";
    *(_WORD *)&v116[12] = 1024;
    *(_DWORD *)&v116[14] = 601;
    *(_WORD *)&v116[18] = 2048;
    *(_QWORD *)&v116[20] = v18;
    *(_WORD *)&v116[28] = 2048;
    *(_QWORD *)&v116[30] = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_102:
    v115 = 0;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    __src = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v122 = 136315906;
    *(_QWORD *)&v122[4] = "operator[]";
    v123 = 1024;
    v124 = 601;
    v125 = 2048;
    v126 = v15;
    v127 = 2048;
    v128 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_103:
    v115 = 0;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    __src = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v122 = 136315906;
    *(_QWORD *)&v122[4] = "insert";
    v123 = 1024;
    v124 = 887;
    v125 = 2048;
    v126 = v14;
    v127 = 2048;
    v128 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_104:
    *(_QWORD *)v118 = 0;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    __src = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v116 = 136315906;
    *(_QWORD *)&v116[4] = "operator[]";
    *(_WORD *)&v116[12] = 1024;
    *(_DWORD *)&v116[14] = 601;
    *(_WORD *)&v116[18] = 2048;
    *(_QWORD *)&v116[20] = v15;
    *(_WORD *)&v116[28] = 2048;
    *(_QWORD *)&v116[30] = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_105:
    *(_QWORD *)v118 = 0;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    __src = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v116 = 136315906;
    *(_QWORD *)&v116[4] = "operator[]";
    *(_WORD *)&v116[12] = 1024;
    *(_DWORD *)&v116[14] = 789;
    *(_WORD *)&v116[18] = 2048;
    *(_QWORD *)&v116[20] = 0;
    *(_WORD *)&v116[28] = 2048;
    *(_QWORD *)&v116[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_53:
  v67 = v110;
  if (v110)
  {
    v68 = v114;
    if (v114)
    {
      if (v97)
      {
        v69 = 48 * v97;
        v70 = v114 + 10;
        do
        {
          v71 = *(v70 - 4);
          if (v71)
          {
            if (*v70)
              (*(void (**)(uint64_t))(*(_QWORD *)v71 + 40))(v71);
            *v70 = 0;
            *(v70 - 3) = 0;
            *(v70 - 2) = 0;
            *(v70 - 4) = 0;
            ++*((_DWORD *)v70 - 2);
          }
          v70 += 6;
          v69 -= 48;
        }
        while (v69);
      }
      (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)v67 + 40))(v67, v68);
    }
  }

  return v100;
}

_QWORD *re::DynamicArray<re::KeyValuePair<int,re::DynamicArray<unsigned int>>>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::KeyValuePair<int,re::DynamicArray<unsigned int>>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::KeyValuePair<int,re::DynamicArray<unsigned int>>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::KeyValuePair<int,re::DynamicArray<unsigned int>>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::KeyValuePair<int,re::DynamicArray<unsigned int>>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          v2 = 48 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 48 * v9;
        v11 = (_QWORD *)(v8 + 40);
        v12 = v7;
        do
        {
          *(_DWORD *)v12 = *((_DWORD *)v11 - 10);
          v12[5] = 0;
          v12[2] = 0;
          v12[3] = 0;
          v12[1] = 0;
          *((_DWORD *)v12 + 8) = 0;
          v13 = *(v11 - 3);
          v12[1] = *(v11 - 4);
          *(v11 - 4) = 0;
          v12[2] = v13;
          *(v11 - 3) = 0;
          v14 = v12[3];
          v12[3] = *(v11 - 2);
          *(v11 - 2) = v14;
          v15 = v12[5];
          v12[5] = *v11;
          *v11 = v15;
          ++*((_DWORD *)v11 - 2);
          ++*((_DWORD *)v12 + 8);
          v16 = *(v11 - 4);
          if (v16)
          {
            if (v15)
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
            *v11 = 0;
            *(v11 - 3) = 0;
            *(v11 - 2) = 0;
            *(v11 - 4) = 0;
            ++*((_DWORD *)v11 - 2);
          }
          v11 += 6;
          v12 += 6;
          v10 -= 48;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

void re::createCGImagePtrFromCGImageSource(id *a1@<X0>, CGImageSource *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const __CFDictionary *v11;
  CGImage *ImageAtIndex;
  CFDictionaryRef v13;
  CFDictionaryRef v14;
  const __CFDictionary *v15;
  void *v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  void *v29;
  re *v30;
  NSObject *v31;
  NSObject *v32;
  CGColorSpace *ColorSpace;
  CGColorSpaceModel Model;
  CGColorSpace *v35;
  CGColorSpaceModel v36;
  void *v37;
  const re::ImportGraphicsContext *v38;
  CGImage *CGImageRefWithColorSpace;
  re *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  CFStringRef Type;
  NSObject *v46;
  NSObject *v47;
  uint64_t v48;
  CGImage *v49;
  CGImageRef v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  CGColorSpaceRef v54;
  uint64_t v55;
  int v56;
  CGColorSpace *v57;
  uint64_t v58;
  CGColorSpace *v59;
  int v60;
  NSObject *v61;
  NSObject *v62;
  void *v63;
  unint64_t v64;
  void *v65;
  __int128 v66;
  id v67;
  id v68;
  const re::ImportGraphicsContext *v69;
  void *v70;
  CGImagePtr *v71;
  unint64_t v72;
  void *v73;
  void *v74;
  re *v75;
  CFDictionaryRef v76;
  CGImageRef image;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  CGColorSpaceRef v81;
  uint64_t v82;
  int v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  uint8_t v87[4];
  unint64_t v88;
  __int16 v89;
  unint64_t v90;
  __int16 v91;
  unint64_t v92;
  __int16 v93;
  unint64_t v94;
  __int16 v95;
  unint64_t v96;
  __int16 v97;
  unint64_t v98;
  _BYTE buf[64];
  id v100;
  __int128 v101;
  _QWORD v102[3];
  _QWORD v103[6];

  v103[3] = *MEMORY[0x24BDAC8D0];
  v85 = 0;
  v86 = 0;
  v8 = *MEMORY[0x24BDD97D0];
  v103[0] = MEMORY[0x24BDBD1C0];
  v9 = *MEMORY[0x24BDD97C8];
  v102[0] = v8;
  v102[1] = v9;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", *(unsigned __int8 *)(a3 + 44));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v102[2] = CFSTR("kCGImageSourceCreateUnpremultipliedPNG");
  v103[1] = v10;
  v103[2] = MEMORY[0x24BDBD1C8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v103, v102, 3);
  v11 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

  ImageAtIndex = CGImageSourceCreateImageAtIndex(a2, 0, v11);
  if (ImageAtIndex || (ImageAtIndex = CGImageSourceCreateImageAtIndex(a2, 0, 0)) != 0)
  {
    v13 = CGImageSourceCopyPropertiesAtIndex(a2, 0, 0);
    v14 = v13;
    if (!v13)
    {
      v32 = *re::pipelineLogObjects(0);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_224FE9000, v32, OS_LOG_TYPE_ERROR, "Failed to retrieve image properties from a CGImageSource during texture creation", buf, 2u);
      }
      *(_QWORD *)(a4 + 48) = 0;
      *(_OWORD *)(a4 + 16) = 0u;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_QWORD *)(a4 + 56) = CGColorSpaceGetNumberOfComponents(0);
      *(_DWORD *)(a4 + 64) = CGColorSpaceGetModel(0);
      *(_DWORD *)(a4 + 72) = 0;
      goto LABEL_50;
    }
    v71 = (CGImagePtr *)a4;
    v15 = v11;
    -[__CFDictionary objectForKeyedSubscript:](v13, "objectForKeyedSubscript:", *MEMORY[0x24BDD96C8]);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v76 = v14;
    -[__CFDictionary objectForKeyedSubscript:](v14, "objectForKeyedSubscript:", *MEMORY[0x24BDD96C0]);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v74 = v16;
    v18 = objc_msgSend(v16, "unsignedIntegerValue");
    v73 = v17;
    v19 = objc_msgSend(v17, "unsignedIntegerValue");
    v20 = *(_DWORD *)(a3 + 16);
    if (v20 <= 1)
      v20 = 1;
    if (*(_DWORD *)(a3 + 8) == 1)
      LODWORD(v21) = v20;
    else
      LODWORD(v21) = 1;
    v22 = (int)v21;
    v75 = (re *)a1;
    v23 = re::internal::downsampleFactorToFitDeviceLimits(a1, 2, v18, v19, 0);
    if (v23 <= (int)v21)
      v21 = (int)v21;
    else
      v21 = v23;
    v72 = v21;
    if (v21 < 2)
    {
      v11 = v15;
    }
    else
    {
      v25 = v23;
      v26 = -[__CFDictionary mutableCopy](v15, "mutableCopy");
      v27 = v21;
      v28 = (void *)v26;
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", v27);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "setObject:forKey:", v29, *MEMORY[0x24BDD97F8]);

      if (v25 > v22 && (v31 = *re::pipelineLogObjects(v30), os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)))
      {
        *(_DWORD *)buf = 134218752;
        *(_QWORD *)&buf[4] = v18;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v19;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v86;
        *(_WORD *)&buf[32] = 2048;
        *(_QWORD *)&buf[34] = v85;
        _os_log_impl(&dword_224FE9000, v31, OS_LOG_TYPE_DEFAULT, "Downsampling imported image to match device limits, from %zux%zu image to %zux%zu", buf, 0x2Au);
        v11 = (const __CFDictionary *)v28;
      }
      else
      {
        v11 = (const __CFDictionary *)v28;
      }
    }
    if ((*(_DWORD *)(a3 + 56) - 3) <= 1 && !*(_QWORD *)(a3 + 64))
    {
      ColorSpace = CGImageGetColorSpace(ImageAtIndex);
      Model = CGColorSpaceGetModel(ColorSpace);
      if (Model <= kCGColorSpaceModelRGB)
      {
        v36 = Model;
        if (!re::internal::colorSpaceIsExtendedOrHDR(ColorSpace, v35))
        {
          -[__CFDictionary objectForKeyedSubscript:](v76, "objectForKeyedSubscript:", *MEMORY[0x24BDD96D0]);
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          if (v37)
          {

          }
          else
          {
            -[__CFDictionary objectForKeyedSubscript:](v76, "objectForKeyedSubscript:", *MEMORY[0x24BDD9660]);
            v63 = (void *)objc_claimAutoreleasedReturnValue();
            v70 = v63;
            if (v36)
              v64 = 4;
            else
              v64 = 1;
            v65 = (void *)re::computeWorkingColorSpaceName(v75, v64, objc_msgSend(v63, "BOOLValue") ^ 1, objc_msgSend(v63, "BOOLValue"));
            v66 = *(_OWORD *)(a3 + 16);
            *(_OWORD *)buf = *(_OWORD *)a3;
            *(_OWORD *)&buf[16] = v66;
            *(_OWORD *)&buf[32] = *(_OWORD *)(a3 + 32);
            *(_OWORD *)&buf[44] = *(_OWORD *)(a3 + 44);
            v67 = *(id *)(a3 + 64);
            v101 = *(_OWORD *)(a3 + 72);
            v68 = v65;
            v100 = v68;

            v69 = CGImageRetain(ImageAtIndex);
            CGImageRefWithColorSpace = re::createCGImageRefWithColorSpace(v75, v69, (id *)buf, 0);

            if (CGImageRefWithColorSpace)
            {
LABEL_28:
              CGImageRelease(ImageAtIndex);
              CGImagePtr::CGImagePtr((CGImagePtr *)buf, CGImageRefWithColorSpace);
              v41 = *(_QWORD *)&buf[8];
              v42 = *(_QWORD *)&buf[16];
              if (v72 < 2)
              {
                v85 = *(_QWORD *)&buf[16];
                v86 = *(_QWORD *)&buf[8];
                v43 = *(_QWORD *)&buf[16];
                v44 = *(_QWORD *)&buf[8];
              }
              else
              {
                v43 = v85;
                v44 = v86;
              }
              if ((v44 > 0x1000 || v43 > 0x1000)
                && (Type = CGImageSourceGetType(a2), v40 = (re *)CFEqual(Type, CFSTR("public.jpeg")), (_DWORD)v40))
              {
                v46 = *re::pipelineLogObjects(v40);
                v40 = (re *)os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG);
                if ((_DWORD)v40)
                {
                  *(_DWORD *)v87 = 134218240;
                  v88 = v44;
                  v89 = 2048;
                  v90 = v43;
                  _os_log_debug_impl(&dword_224FE9000, v46, OS_LOG_TYPE_DEBUG, "Loading JPEG > 4K on iOS (%zux%zu): forced load to memory workaround", v87, 0x16u);
                }
              }
              else if (v72 < 2 || v41 <= v44 && v42 <= v43)
              {
                goto LABEL_48;
              }
              v47 = *re::pipelineLogObjects(v40);
              if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)v87 = 134219264;
                v88 = v18;
                v89 = 2048;
                v90 = v19;
                v91 = 2048;
                v92 = v44;
                v93 = 2048;
                v94 = v43;
                v95 = 2048;
                v96 = v41;
                v97 = 2048;
                v98 = v42;
                _os_log_debug_impl(&dword_224FE9000, v47, OS_LOG_TYPE_DEBUG, "Performing requested downsampling of %zux%zu image to %zux%zu (since Image I/O only downsampled to %zux%zu)", v87, 0x3Eu);
              }
              v48 = CGImageCreateByScaling();
              if (v48)
              {
                v49 = (CGImage *)v48;
                CGImagePtr::CGImagePtr((CGImagePtr *)&image, 0);
                v50 = image;
                v51 = *(_QWORD *)&buf[40];
                image = *(CGImageRef *)buf;
                v52 = v78;
                v78 = *(_OWORD *)&buf[8];
                *(_OWORD *)&buf[8] = v52;
                v53 = v79;
                v79 = *(_OWORD *)&buf[24];
                *(_OWORD *)&buf[24] = v53;
                v54 = v81;
                *(_QWORD *)buf = v50;
                *(_QWORD *)&buf[40] = v80;
                v55 = v82;
                v56 = v83;
                LODWORD(v50) = (_DWORD)v100;
                LODWORD(v100) = -1;
                v57 = *(CGColorSpace **)&buf[48];
                v58 = *(_QWORD *)&buf[56];
                *(_QWORD *)&buf[48] = 0;
                *(_QWORD *)&buf[56] = 0;
                v80 = v51;
                v81 = v57;
                v82 = v58;
                v83 = (int)v50;
                CGColorSpaceRelease(0);
                v59 = *(CGColorSpace **)&buf[48];
                *(_QWORD *)&buf[48] = v54;
                *(_QWORD *)&buf[56] = v55;
                LODWORD(v100) = v56;
                CGColorSpaceRelease(v59);
                CGColorSpaceRelease(0);
                v60 = v84;
                v84 = v101;
                LODWORD(v101) = v60;
                CGImageRelease(image);
                image = 0;
                CGColorSpaceRelease(v81);
                v81 = 0;
                CGImagePtr::CGImagePtr(v71, v49);
LABEL_49:
                CGImageRelease(*(CGImageRef *)buf);
                *(_QWORD *)buf = 0;
                CGColorSpaceRelease(*(CGColorSpaceRef *)&buf[48]);

                v14 = v76;
LABEL_50:

                goto LABEL_51;
              }
              v62 = *re::pipelineLogObjects(0);
              if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v87 = 134218240;
                v88 = v44;
                v89 = 2048;
                v90 = v43;
                _os_log_error_impl(&dword_224FE9000, v62, OS_LOG_TYPE_ERROR, "Failed to scale source image to %zux%zu during texture creation, ignoring downsampling", v87, 0x16u);
              }
LABEL_48:
              CGImagePtr::CGImagePtr((uint64_t)v71, (uint64_t *)buf);
              goto LABEL_49;
            }
          }
        }
      }
    }
    v38 = CGImageRetain(ImageAtIndex);
    CGImageRefWithColorSpace = re::createCGImageRefWithColorSpace(v75, v38, (id *)a3, 0);
    goto LABEL_28;
  }
  v61 = *re::pipelineLogObjects(0);
  if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_224FE9000, v61, OS_LOG_TYPE_ERROR, "Failed to create an image from a CGImageSource during texture creation", buf, 2u);
  }
  *(_QWORD *)(a4 + 48) = 0;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_QWORD *)(a4 + 56) = CGColorSpaceGetNumberOfComponents(0);
  *(_DWORD *)(a4 + 64) = CGColorSpaceGetModel(0);
  *(_DWORD *)(a4 + 72) = 0;
LABEL_51:

}

unint64_t re::`anonymous namespace'::getCGDownsampledImageSize(unint64_t this, unint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint8x8_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v6 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] != 1)
  {
    v7 = (a3 - 1) | ((a3 - 1) >> 1) | (((a3 - 1) | ((a3 - 1) >> 1)) >> 2);
    v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    a3 = (v8 | (v8 >> 16) | ((v8 | (v8 >> 16)) >> 32)) + 1;
  }
  v9 = this / a3;
  if (this / a3 <= 1)
    v9 = 1;
  *a4 = v9;
  v10 = a2 / a3;
  if (a2 / a3 <= 1)
    v10 = 1;
  *a5 = v10;
  return this;
}

BOOL re::internal::colorSpaceIsExtendedOrHDR(re::internal *this, CGColorSpace *a2)
{
  return CGColorSpaceUsesExtendedRange(this) || CGColorSpaceIsPQBased(this) || CGColorSpaceIsHLGBased(this);
}

uint64_t re::computeWorkingColorSpaceName(_BYTE *a1, unint64_t a2, int a3, int a4)
{
  unsigned __int8 v4;
  uint64_t v6;

  if (a1[16])
  {
    if (a1[19])
      v4 = a1[20];
    else
      v4 = 0;
    return re::ColorHelpers::getCGColorSpaceNameForGamut(a2, a3, a4, v4);
  }
  else
  {
    v6 = MEMORY[0x24BDBF318];
    if (a2 <= 2)
      v6 = MEMORY[0x24BDBF290];
    return *(_QWORD *)v6;
  }
}

const re::ImportGraphicsContext *re::createCGImageRefWithColorSpace(re *this, const re::ImportGraphicsContext *a2, id *a3, const re::TextureFromImageOptions *a4)
{
  int v4;
  const __CFString *v8;
  const __CFString *v9;
  CGColorSpaceRef v10;
  CGColorSpace *v11;
  CGColorSpace *ColorSpace;
  CGImageRef CopyWithColorSpace;
  const re::ImportGraphicsContext *v14;
  NSObject *v15;
  NSObject *v16;
  size_t Width;
  size_t Height;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  re *CGDownsampledImageSize;
  unint64_t v26;
  unint64_t v27;
  NSObject *v28;
  uint64_t v29;
  NSObject *v30;
  const __CFString *Name;
  const char *v33;
  re *v34;
  NSObject *v35;
  size_t v36;
  size_t v37;
  uint8_t buf[4];
  const char *CStringPtr;
  __int16 v40;
  size_t v41;
  __int16 v42;
  unint64_t v43;
  __int16 v44;
  unint64_t v45;
  uint64_t v46;

  v4 = (int)a4;
  v46 = *MEMORY[0x24BDAC8D0];
  v8 = (const __CFString *)a3[8];
  if (!v8)
  {
LABEL_10:
    v11 = 0;
    goto LABEL_11;
  }
  v9 = v8;
  v10 = CGColorSpaceCreateWithName(v8);
  if (!v10)
  {
    v15 = *re::pipelineLogObjects(0);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v16 = v15;
      *(_DWORD *)buf = 136315138;
      CStringPtr = CFStringGetCStringPtr(v9, 0x8000100u);
      _os_log_impl(&dword_224FE9000, v16, OS_LOG_TYPE_DEFAULT, "Invalid colorSpaceNameOverride: %s", buf, 0xCu);

    }
    goto LABEL_10;
  }
  v11 = v10;
  if (*((_BYTE *)this + 16))
  {
    if ((*((_DWORD *)a3 + 14) - 3) <= 1)
    {
      ColorSpace = CGImageGetColorSpace(a2);
      if ((CGColorSpaceEqualToColorSpace() & 1) == 0)
      {
        CopyWithColorSpace = CGImageCreateCopyWithColorSpace(a2, v11);
        if (CopyWithColorSpace)
        {
          v14 = CopyWithColorSpace;
          CGImageRelease(a2);
          a2 = v14;
        }
        else
        {
          Name = CGColorSpaceGetName(ColorSpace);
          v33 = CFStringGetCStringPtr(Name, 0x8000100u);
          v34 = (re *)CFStringGetCStringPtr(v9, 0x8000100u);
          v35 = *re::pipelineLogObjects(v34);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            CStringPtr = v33;
            v40 = 2080;
            v41 = (size_t)v34;
            _os_log_impl(&dword_224FE9000, v35, OS_LOG_TYPE_DEFAULT, "Failed to create CGImage from Source ColorSpace: %s to Override ColorSpace: %s", buf, 0x16u);
          }
        }
      }
    }
  }
LABEL_11:
  CGColorSpaceRelease(v11);
  if (v4)
  {
    Width = CGImageGetWidth(a2);
    Height = CGImageGetHeight(a2);
    v36 = 0;
    v37 = 0;
    v19 = *((_DWORD *)a3 + 2) == 1 ? *((_DWORD *)a3 + 4) : 1;
    v20 = v19;
    v21 = re::internal::downsampleFactorToFitDeviceLimits((id *)this, 2, 0, 0, 0);
    v23 = v21 <= v19 ? v19 : v21;
    if (v23 >= 2)
    {
      v24 = v21;
      v26 = v36;
      v27 = v37;
      if (Width > v37 || Height > v36)
      {
        v28 = *re::pipelineLogObjects(CGDownsampledImageSize);
        if (v24 <= v20)
        {
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134218752;
            CStringPtr = (const char *)Width;
            v40 = 2048;
            v41 = Height;
            v42 = 2048;
            v43 = v27;
            v44 = 2048;
            v45 = v26;
            _os_log_debug_impl(&dword_224FE9000, v28, OS_LOG_TYPE_DEBUG, "Performing requested downsampling of %zux%zu image to %zux%zu", buf, 0x2Au);
          }
        }
        else if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218752;
          CStringPtr = (const char *)Width;
          v40 = 2048;
          v41 = Height;
          v42 = 2048;
          v43 = v27;
          v44 = 2048;
          v45 = v26;
          _os_log_impl(&dword_224FE9000, v28, OS_LOG_TYPE_DEFAULT, "Downsampling imported image to match device limits, from %zux%zu image to %zux%zu", buf, 0x2Au);
        }
        v29 = CGImageCreateByScaling();
        if (!v29)
        {
          v30 = *re::pipelineLogObjects(0);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            CStringPtr = (const char *)v27;
            v40 = 2048;
            v41 = v26;
            _os_log_error_impl(&dword_224FE9000, v30, OS_LOG_TYPE_ERROR, "Failed to scale source image to %zux%zu during texture creation, ignoring downsampling", buf, 0x16u);
          }
        }
        CGImageRelease(a2);
        return (const re::ImportGraphicsContext *)v29;
      }
    }
  }
  return a2;
}

uint64_t re::createTextureFromCGImagePtr(uint64_t a1, uint64_t a2, id *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v20;

  v14 = a5;
  if (*(_DWORD *)(a5 + 28))
  {
    v20 = a1;
    re::logTextureCompressionInfo((re *)"createTextureFromCGImagePtr", *a3, (int *)(a5 + 28));
    v14 = a5;
    a1 = v20;
  }
}

void re::createTextureFromCGImagePtrs(uint64_t a1, uint64_t a2, uint64_t a3, id *a4, uint64_t a5, uint64_t a6)
{
  if (*(_DWORD *)(a6 + 28))
    re::logTextureCompressionInfo((re *)"createTextureFromCGImagePtrs", *a4, (int *)(a6 + 28));
  JUMPOUT(0x225B53144);
}

CGColorSpaceRef re::getDestinationColorSpace@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, id *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  CGColorSpace *v10;
  int isHDR;
  const __CFString *v12;
  CGColorSpace *v13;
  CGColorSpace *BaseColorSpace;
  CGColorSpace *v15;
  CGColorSpaceModel Model;
  CGColorSpace *v17;
  CGColorSpaceModel v18;
  CGColorSpaceModel v19;
  unsigned __int8 ColorSpaceTransferFunction;
  CFStringRef *v21;
  CFStringRef *v22;
  CGColorSpaceModel v23;
  CGColorSpaceRef result;
  uint64_t v25;

  objc_msgSend(*a3, sel_pixelFormat);
  MTLPixelFormatGetInfoForDevice();
  objc_msgSend(*a3, sel_pixelFormat, 0);
  MTLPixelFormatGetInfoForDevice();
  if (*(_QWORD *)(a1 + 24) > 8uLL || re::internal::colorSpaceIsExtendedOrHDR(*(re::internal **)(a1 + 48), v10))
    isHDR = 1;
  else
    isHDR = re::isHDR((int)objc_msgSend(*a3, sel_pixelFormat, 0, 0, 0, 0));
  if ((*(_DWORD *)(a4 + 56) - 3) > 1)
  {
    v15 = *(CGColorSpace **)(a1 + 48);
    Model = CGColorSpaceGetModel(v15);
    v18 = Model;
    if (Model == kCGColorSpaceModelIndexed)
    {
      BaseColorSpace = CGColorSpaceGetBaseColorSpace(*(CGColorSpaceRef *)(a1 + 48));
      v19 = CGColorSpaceGetModel(BaseColorSpace);
      CFRetain(BaseColorSpace);
      v15 = BaseColorSpace;
    }
    else
    {
      BaseColorSpace = 0;
      v19 = Model;
    }
    if (v19)
    {
      ColorSpaceTransferFunction = re::getColorSpaceTransferFunction(v15, v17);
      v21 = (CFStringRef *)MEMORY[0x24BDBF260];
      if ((ColorSpaceTransferFunction & 1) == 0)
        v21 = (CFStringRef *)MEMORY[0x24BDBF248];
      v22 = (CFStringRef *)MEMORY[0x24BDBF2F8];
      if ((ColorSpaceTransferFunction & 1) == 0)
        v22 = (CFStringRef *)MEMORY[0x24BDBF290];
      if (!isHDR)
        v21 = v22;
      BaseColorSpace = CGColorSpaceCreateWithName(*v21);
      goto LABEL_24;
    }
    if (v18 != kCGColorSpaceModelIndexed)
      goto LABEL_23;
  }
  else
  {
    v12 = (const __CFString *)re::computeWorkingColorSpaceName(a2, 0, 0, isHDR);
    v13 = CGColorSpaceCreateWithName(v12);
    BaseColorSpace = v13;
    if (a2[16])
    {
      if ((CGColorSpaceEqualToColorSpace() & 1) == 0)
        goto LABEL_24;
LABEL_23:
      CGColorSpaceRelease(BaseColorSpace);
      result = CGColorSpaceRetain(*(CGColorSpaceRef *)(a1 + 48));
      v25 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)a5 = result;
      *(_QWORD *)(a5 + 8) = v25;
      *(_DWORD *)(a5 + 16) = *(_DWORD *)(a1 + 64);
      return result;
    }
    v23 = CGColorSpaceGetModel(v13);
    if (CGColorSpaceGetModel(*(CGColorSpaceRef *)(a1 + 48)) == v23)
      goto LABEL_23;
  }
LABEL_24:
  *(_QWORD *)a5 = BaseColorSpace;
  *(_QWORD *)(a5 + 8) = CGColorSpaceGetNumberOfComponents(BaseColorSpace);
  result = (CGColorSpaceRef)(int)CGColorSpaceGetModel(BaseColorSpace);
  *(_DWORD *)(a5 + 16) = (_DWORD)result;
  return result;
}

const __CFString *re::getColorSpaceTransferFunction(re *this, CGColorSpace *a2)
{
  CGColorSpace *BaseColorSpace;
  const __CFString *result;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;

  BaseColorSpace = this;
  if (CGColorSpaceGetModel(this) == kCGColorSpaceModelIndexed)
    BaseColorSpace = CGColorSpaceGetBaseColorSpace(BaseColorSpace);
  result = CGColorSpaceGetName(BaseColorSpace);
  if (result)
  {
    v5 = result;
    if (re::colorSpaceNameHasSRGBTransfer(result, v4))
      return (const __CFString *)2;
    else
      return (const __CFString *)re::colorSpaceNameHasLinearTransfer(v5, v6);
  }
  return result;
}

void re::createTextureDescriptorForCGImagePtr(uint64_t a1@<X0>, id *a2@<X1>, id *a3@<X2>, re::internal *a4@<X3>, int a5@<W4>, unint64_t *a6@<X5>, _QWORD *a7@<X6>, unsigned int *a8@<X7>, id *a9@<X8>)
{
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t BitsPerComponent;
  int DestinationTransferFunctionFromOptions;
  _BOOL4 v21;
  CGColorSpace *v22;
  CGColorSpace *BaseColorSpace;
  size_t NumberOfComponents;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  CGColorSpace *v30;
  _BOOL4 IsExtendedOrHDR;
  int v32;
  int v33;
  CGImageAlphaInfo AlphaInfo;
  int v35;
  re *v36;
  int v37;
  NSObject *v38;
  id *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned int *v53;
  int v54;
  int v55;
  id *v56;
  unint64_t v58;
  unint64_t v59;
  uint8_t buf[16];
  __int128 v61;
  __int128 v62;
  uint64_t v63;

  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(_QWORD *)(a1 + 16);
  v59 = v16;
  v58 = v17;
  if (a5)
  {
    if (*((_DWORD *)a4 + 2) == 1)
    {
      v18 = *((int *)a4 + 4);
      if (v18 >= 2)
    }
  }
  objc_msgSend(*a3, sel_pixelFormat);
  BitsPerComponent = CGImageGetBitsPerComponent(*(CGImageRef *)a1);
  DestinationTransferFunctionFromOptions = re::internal::getDestinationTransferFunctionFromOptions(a4, *(const re::TextureFromImageOptions **)(a1 + 48), (CGColorSpace *)(BitsPerComponent > 8));
  if (DestinationTransferFunctionFromOptions)
    v21 = DestinationTransferFunctionFromOptions == 2;
  else
    v21 = (*((_DWORD *)a4 + 14) - 3) < 2;
  v53 = a8;
  if (*a2)
    v54 = objc_msgSend(*a2, "supportsTextureSwizzle");
  else
    v54 = 1;
  v22 = *(CGColorSpace **)(a1 + 48);
  BaseColorSpace = CGColorSpaceGetBaseColorSpace(v22);
  if (!BaseColorSpace)
    BaseColorSpace = v22;
  NumberOfComponents = CGColorSpaceGetNumberOfComponents(BaseColorSpace);
  v26 = *((_DWORD *)a4 + 1);
  if (v26 == 1)
  {
    v55 = 0;
    v27 = 1;
  }
  else
  {
    v27 = NumberOfComponents;
    if (v26 == 2)
    {
      v28 = v54;
      if (NumberOfComponents != 1)
        v28 = 1;
      if (!v28)
        v27 = 3;
      v55 = (NumberOfComponents != 1) ^ v28;
    }
    else
    {
      if (v26 == 3)
      {
        re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Semantics should have been applied at this point", "!\"Unreachable code\"", "createTextureDescriptorForCGImagePtr", 3523);
        _os_crash();
        __break(1u);
        return;
      }
      v55 = 0;
    }
  }
  if (*(_DWORD *)a4 != 1)
  {
    v56 = a3;
    if (*(_DWORD *)a4)
    {
      v35 = 0;
    }
    else
    {
      v29 = *((_DWORD *)a4 + 14);
      if (CGImageGetBitsPerComponent(*(CGImageRef *)a1) > 8
        || ((IsExtendedOrHDR = re::internal::colorSpaceIsExtendedOrHDR(*(re::internal **)(a1 + 48), v30), !v21)
          ? (v32 = 10)
          : (v32 = 71),
            !v21 ? (v33 = 70) : (v33 = 71),
            IsExtendedOrHDR))
      {
        v32 = 25;
        v33 = 115;
      }
      AlphaInfo = CGImageGetAlphaInfo(*(CGImageRef *)a1);
      v35 = 1;
      if (AlphaInfo - 1 < 4)
        goto LABEL_35;
      if (AlphaInfo != kCGImageAlphaOnly)
      {
        LOBYTE(v35) = 0;
LABEL_35:
        if (((v29 != 2) & v35) != 0)
          v35 = v33;
        else
          v35 = v32;
        if (v27 != 1)
          v35 = v33;
      }
    }
LABEL_55:
    v39 = a2;
    v40 = v35;
    objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", v35, v59, v58, *((_DWORD *)a4 + 5) != 2);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = objc_msgSend(v41, "width");
    v43 = objc_msgSend(v41, "height");
    v44 = objc_msgSend(v41, "depth");
    v45 = v44;
    if (a6)
    {
      *a6 = v42;
      a6[1] = v43;
      a6[2] = v44;
    }
    if (a7)
      *a7 = objc_msgSend(v41, "mipmapLevelCount");
    v46 = objc_msgSend(*v56, sel_copy);
    *a9 = v46;
    objc_msgSend(v46, sel_setTextureType_, 2);
    objc_msgSend(v46, sel_setWidth_, v42);
    objc_msgSend(v46, sel_setHeight_, v43);
    objc_msgSend(v46, sel_setDepth_, v45);
    objc_msgSend(v46, sel_setPixelFormat_, v40);
    objc_msgSend(v46, sel_setMipmapLevelCount_, objc_msgSend(v41, "mipmapLevelCount"));
    objc_msgSend(v46, sel_setSampleCount_, objc_msgSend(v41, "sampleCount"));
    if (*((_DWORD *)a4 + 19))
      objc_msgSend(v46, sel_setHeight_);
    if (*((_DWORD *)a4 + 18))
      objc_msgSend(v46, sel_setWidth_);
    if (*((_DWORD *)a4 + 20))
      objc_msgSend(v46, sel_setDepth_);
    if (*((_DWORD *)a4 + 21))
      objc_msgSend(v46, sel_setMipmapLevelCount_);
    if (((objc_msgSend(*v56, sel_swizzle) == 84148994) & ~v55) == 0)
    {
      v47 = objc_msgSend(v46, sel_swizzle);
      if (v55)
      {
        v48 = v47;
        if (HIBYTE(v47) - 2 >= 3u)
          v49 = v47 & 0xFF000000;
        else
          v49 = 0x2000000;
        if (BYTE2(v47) - 2 >= 3)
          v50 = v47 & 0xFF0000;
        else
          v50 = 0x20000;
        if (BYTE1(v47) - 2 >= 3)
          v51 = v47 & 0xFF00;
        else
          v51 = 512;
        if (v47 - 2 < 3)
          v48 = 2;
        v47 = v50 | v48 | v49 | v51;
      }
      if (v53)
        *v53 = v47;
      if (v54)
        v52 = v47;
      else
        v52 = 84148994;
      objc_msgSend(v46, sel_setSwizzle_, v52);
    }
    objc_msgSend(v46, sel_pixelFormat);
    if (re::internal::textureMightNeedPixelFormatViewUsage())
      objc_msgSend(v46, sel_setUsage_, (unint64_t)objc_msgSend(v46, sel_usage) | 0x10);
    re::internal::applyCompressionOptionsToTextureDescriptor(v39, a4, 1, 0, a9);

    return;
  }
  v36 = (re *)objc_msgSend(*a3, sel_pixelFormat);
  if ((_DWORD)v36)
  {
    v35 = (int)v36;
    v37 = *((_DWORD *)a4 + 14);
    v56 = a3;
    if (v37 == 3)
    {
      if ((_DWORD)v36 != 10)
        goto LABEL_55;
    }
    else if ((_DWORD)v36 != 10 || v37 != 4)
    {
      goto LABEL_55;
    }
    v63 = 0;
    v61 = 0u;
    v62 = 0u;
    *(_OWORD *)buf = 0u;
    MTLPixelFormatGetInfoForDevice();
    if ((buf[8] & 1) != 0)
      v35 = 11;
    else
      v35 = 25;
    goto LABEL_55;
  }
  v38 = *re::pipelineLogObjects(v36);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_224FE9000, v38, OS_LOG_TYPE_ERROR, "Invalid pixel format in texture descriptor", buf, 2u);
  }
  *a9 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
}

void re::createTextureDescriptorForCGImageSource(CGImageSource *a1@<X0>, id *a2@<X1>, id *a3@<X2>, unsigned __int8 *a4@<X3>, unint64_t *a5@<X4>, _QWORD *a6@<X5>, int a7@<W6>, id *a8@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const __CFDictionary *v19;
  CGImage *ImageAtIndex;
  NSObject *v21;
  CGImageRef image[11];
  _QWORD v23[3];
  _QWORD v24[4];

  v24[3] = *MEMORY[0x24BDAC8D0];
  v16 = *MEMORY[0x24BDD97D0];
  v24[0] = MEMORY[0x24BDBD1C0];
  v17 = *MEMORY[0x24BDD97C8];
  v23[0] = v16;
  v23[1] = v17;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", a4[44]);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v23[2] = CFSTR("kCGImageSourceCreateUnpremultipliedPNG");
  v24[1] = v18;
  v24[2] = MEMORY[0x24BDBD1C8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v24, v23, 3);
  v19 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

  ImageAtIndex = CGImageSourceCreateImageAtIndex(a1, 0, v19);
  if (ImageAtIndex || (ImageAtIndex = CGImageSourceCreateImageAtIndex(a1, 0, 0)) != 0)
  {
    CGImagePtr::CGImagePtr((CGImagePtr *)image, ImageAtIndex);
    re::createTextureDescriptorForCGImagePtr((uint64_t)image, a2, a3, (re::internal *)a4, a7, a5, a6, 0, a8);
    CGImageRelease(image[0]);
    image[0] = 0;
    CGColorSpaceRelease(image[6]);
  }
  else
  {
    v21 = *re::pipelineLogObjects(0);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      LOWORD(image[0]) = 0;
      _os_log_error_impl(&dword_224FE9000, v21, OS_LOG_TYPE_ERROR, "Failed to create an image from a CGImageSource", (uint8_t *)image, 2u);
    }
    *a8 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  }

}

void re::copyTextureBytesToASTCCompression(id *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, re::ASTCCompressor *a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t (**v32)(re::_anonymous_namespace_::MetalCompression *__hidden, unint64_t, unint64_t, at_size_t);
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (**v38)(re::_anonymous_namespace_::DeviceOutputAllocator *__hidden, unint64_t, unint64_t, at_size_t);
  id v39;
  id v40;
  int v41;
  __int128 v42;
  _BYTE v43[72];
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 88))
  {
    v34 = a2;
    v35 = a5;
    v36 = a6;
    v37 = a7;
    v32 = &off_24ED7D5F8;
    v33 = &unk_24ED7D648;
    v39 = 0;
    v40 = 0;
    v38 = 0;
    v41 = 0;
    v42 = 0u;
    memset(v43, 0, 48);
    std::__function::__value_func<void ()(void)>::__value_func[abi:nn180100]((uint64_t)v44, a10);
    re::copyTextureBytesToASTCCompression(a9, &v32, a3, a4, a8, (uint64_t)v44);
    v19 = v45;
    if (v45 == v44)
    {
      v20 = 4;
      v19 = v44;
    }
    else
    {
      if (!v45)
        goto LABEL_10;
      v20 = 5;
    }
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v19 + 8 * v20))(v19, v14, v15, v16, v17, v18);
LABEL_10:
    v32 = &off_24ED7D5F8;
    v33 = &unk_24ED7D648;
    if (v38)
    {
      if ((_QWORD)v42)
        (*((void (**)(uint64_t (**)(re::_anonymous_namespace_::DeviceOutputAllocator *__hidden, unint64_t, unint64_t, at_size_t), _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))*v38
         + 5))(v38, v42, v15, v16, v17, v18);
    }
    return;
  }
  v34 = a2;
  v35 = a5;
  v36 = a6;
  v37 = a7;
  v32 = &off_24ED7D518;
  v33 = &unk_24ED7D568;
  v22 = *a1;
  v38 = &off_24ED7D4C0;
  v39 = v22;
  v40 = 0;

  *(_QWORD *)v43 = a1;
  memset(&v43[8], 0, 64);
  std::__function::__value_func<void ()(void)>::__value_func[abi:nn180100]((uint64_t)v46, a10);
  re::copyTextureBytesToASTCCompression(a9, &v32, a3, a4, a8, (uint64_t)v46);
  v30 = v47;
  if (v47 == v46)
  {
    v31 = 4;
    v30 = v46;
    goto LABEL_14;
  }
  if (v47)
  {
    v31 = 5;
LABEL_14:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v30 + 8 * v31))(v30, v23, v24, v25, v26, v27, v28, v29);
  }
  v32 = &off_24ED7D518;
  v33 = &unk_24ED7D568;
  if (*(_QWORD *)&v43[40])
  {

    *(_QWORD *)&v43[40] = 0;
  }
  v38 = &off_24ED7D4C0;
  if (v40)
  {

    v40 = 0;
  }

}

uint64_t re::copyTextureBytesToASTCCompression(uint64_t a1, _QWORD *a2, __int128 *a3, int a4, re::ASTCCompressor *a5, uint64_t a6)
{
  uint64_t v6;
  id v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  const vImage_Buffer *v21;
  uint64_t v22;
  uint64_t result;
  __int128 v24;
  __int128 v25;
  re *v26;
  const __CFString *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  int v36;
  _QWORD v37[3];
  _QWORD v38[3];
  uint64_t v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v6 = a2[2];
  if (*(_DWORD *)(v6 + 88) >= 2u)
    goto LABEL_24;
  v13 = objc_msgSend(*(id *)(v6 + 8), sel_pixelFormat);
  v14 = re::MTLToASTCPixelFormat((int)v13);
  if (!v14)
  {
    result = re::DynamicString::format((re::DynamicString *)"Unsupported metal format for ASTC compression: %d", (re::DynamicString *)&v42, v13);
    v24 = v42;
    v25 = v43;
    *(_BYTE *)a1 = 0;
    *(_OWORD *)(a1 + 8) = v24;
    *(_OWORD *)(a1 + 24) = v25;
    return result;
  }
  v15 = v14;
  v45 = 0;
  v43 = 0u;
  v44 = 0u;
  v42 = 0u;
  MTLPixelFormatGetInfoForDevice();
  v16 = a2[2];
  if (*(_DWORD *)(v16 + 88) >= 2u
    || (v17 = (unint64_t)objc_msgSend(*(id *)(v16 + 8), sel_width), v18 = a2[2], *(_DWORD *)(v18 + 88) >= 2u))
  {
LABEL_24:
    std::__throw_bad_variant_access[abi:nn180100]();
    goto LABEL_25;
  }
  if (v17 >> a2[3] <= 1)
    v19 = 1;
  else
    v19 = v17 >> a2[3];
  v20 = (unint64_t)objc_msgSend(*(id *)(v18 + 8), sel_height) >> a2[3];
  if (v20 <= 1)
    v20 = 1;
  v38[0] = v19;
  v38[1] = v20;
  v38[2] = 1;
  v37[0] = 0;
  v37[1] = v19 * DWORD2(v43);
  v37[2] = 0;
  (*(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD *, _QWORD *))(*a2 + 16))(&v39, a2, v38, v37);
  if (!(_BYTE)v39)
  {
    result = (uint64_t)re::DynamicString::DynamicString((re::DynamicString *)&v31, (const re::DynamicString *)&v40);
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v31;
    *(_QWORD *)(a1 + 32) = v33;
    *(_OWORD *)(a1 + 16) = v32;
    goto LABEL_16;
  }
  v34 = *a3;
  v35 = v15;
  v36 = a4;
  v21 = (const vImage_Buffer *)(*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
  if (!(_BYTE)v31)
  {
    re::DynamicString::DynamicString((re::DynamicString *)&v28, (const re::DynamicString *)&v32);
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v28;
    *(_QWORD *)(a1 + 32) = v30;
    *(_OWORD *)(a1 + 16) = v29;
    result = v32;
    if ((_QWORD)v32 && (BYTE8(v32) & 1) != 0)
      result = (*(uint64_t (**)(void))(*(_QWORD *)v32 + 40))();
    goto LABEL_16;
  }
  v22 = *(_QWORD *)(a6 + 24);
  if (!v22)
  {
LABEL_25:
    v26 = (re *)std::__throw_bad_function_call[abi:nn180100]();
    return re::colorSpaceNameHasSRGBTransfer(v26, v27);
  }
  result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v22 + 48))(v22, a2 + 1);
LABEL_16:
  if (!(_BYTE)v39)
  {
    result = v40;
    if (v40)
    {
      if ((v41 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v40 + 40))();
    }
  }
  return result;
}

BOOL re::colorSpaceNameHasSRGBTransfer(const __CFString *this, const __CFString *a2)
{
  return CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF228], 0) == kCFCompareEqualTo
      || CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF240], 0) == kCFCompareEqualTo
      || CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF318], 0) == kCFCompareEqualTo
      || CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF278], 0) == kCFCompareEqualTo
      || CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF288], 0) == kCFCompareEqualTo
      || CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF290], 0) == kCFCompareEqualTo
      || CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF248], 0) == kCFCompareEqualTo
      || CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF2B8], 0) == kCFCompareEqualTo
      || CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF2C0], 0) == kCFCompareEqualTo
      || CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF250], 0) == kCFCompareEqualTo;
}

BOOL re::colorSpaceNameHasLinearTransfer(const __CFString *this, const __CFString *a2)
{
  return CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF2A8], 0) == kCFCompareEqualTo
      || CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF210], 0) == kCFCompareEqualTo
      || CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF300], 0) == kCFCompareEqualTo
      || CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF268], 0) == kCFCompareEqualTo
      || CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF2F0], 0) == kCFCompareEqualTo
      || CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF258], 0) == kCFCompareEqualTo
      || CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF308], 0) == kCFCompareEqualTo
      || CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF270], 0) == kCFCompareEqualTo
      || CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF2F8], 0) == kCFCompareEqualTo
      || CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF260], 0) == kCFCompareEqualTo;
}

uint64_t re::getLinearColorSpaceNameFromSRGB(const __CFString *this, const __CFString *a2)
{
  uint64_t v4;

  if (CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF228], 0) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x24BDBF2F0];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF240], 0) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x24BDBF258];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF318], 0) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x24BDBF308];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF278], 0) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x24BDBF270];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF288], 0) == kCFCompareEqualTo
    || CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF290], 0) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x24BDBF2F8];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF248], 0) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x24BDBF260];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF2B8], 0) == kCFCompareEqualTo
    || CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF2C0], 0) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x24BDBF300];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF250], 0))
    return 0;
  else
    return *MEMORY[0x24BDBF268];
}

uint64_t re::getSRGBColorSpaceNameFromLinear(const __CFString *this, const __CFString *a2)
{
  uint64_t v4;

  if (CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF2F0], 0) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x24BDBF228];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF258], 0) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x24BDBF240];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF308], 0) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x24BDBF318];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF270], 0) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x24BDBF278];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF2F8], 0) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x24BDBF290];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF260], 0) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x24BDBF248];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF300], 0) == kCFCompareEqualTo)
  {
    v4 = MEMORY[0x24BDBF2B8];
    return *(_QWORD *)v4;
  }
  if (CFStringCompare(this, (CFStringRef)*MEMORY[0x24BDBF268], 0))
    return 0;
  else
    return *MEMORY[0x24BDBF250];
}

void re::decompressCPUTexture(re *this@<X0>, uint64_t a2@<X8>)
{
  re *v5;
  at_block_format_t v6;
  NSObject *v7;
  id v8;
  int isHDR;
  uint64_t v10;
  BOOL v11;
  at_texel_format_t v12;
  const re::TextureData *v13;
  unsigned int FaceOrArrayLength;
  unint64_t v15;
  char **v16;
  char **v17;
  char **v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  re *v25;
  id v26;
  re *v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *encoder;
  _QWORD v33[2];
  unint64_t v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint8_t v41[16];
  uint8_t buf[16];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  _BYTE src[28];
  __int16 v50;
  unint64_t v51;
  _BYTE dest[48];
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)this + 22) >= 2u)
    goto LABEL_79;
  v40 = 0;
  v38 = 0u;
  v39 = 0u;
  v37 = 0u;
  objc_msgSend(*((id *)this + 1), sel_pixelFormat);
  MTLPixelFormatGetInfoForDevice();
  if (*((_DWORD *)this + 22) >= 2u)
    goto LABEL_79;
  v5 = (re *)objc_msgSend(*((id *)this + 1), sel_pixelFormat);
  v6 = at_block_format_bc1;
  switch((int)v5)
  {
    case 0:
    case 1:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 40:
    case 41:
    case 42:
    case 43:
    case 53:
    case 54:
    case 55:
    case 60:
    case 62:
    case 63:
    case 64:
    case 65:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 80:
    case 81:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 103:
    case 104:
    case 105:
    case 110:
    case 112:
    case 113:
    case 114:
    case 115:
    case 123:
    case 124:
    case 125:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 170:
    case 172:
    case 174:
    case 176:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 240:
    case 241:
    case 250:
    case 252:
    case 253:
    case 255:
    case 260:
    case 261:
    case 262:
LABEL_6:
      v7 = *re::pipelineLogObjects(v5);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v37;
        _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "Failed to decompress unsupported format %{public}s", buf, 0xCu);
      }
      *(_BYTE *)a2 &= 0x80u;
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      return;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 26:
    case 27:
    case 28:
    case 29:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 56:
    case 57:
    case 58:
    case 59:
    case 61:
    case 66:
    case 67:
    case 68:
    case 69:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 106:
    case 107:
    case 108:
    case 109:
    case 111:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 136:
    case 137:
    case 138:
    case 139:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 168:
    case 169:
    case 171:
    case 173:
    case 175:
    case 177:
    case 184:
    case 185:
    case 191:
    case 201:
    case 202:
    case 203:
    case 209:
    case 219:
    case 220:
    case 221:
    case 227:
    case 237:
    case 238:
    case 239:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 251:
    case 254:
    case 256:
    case 257:
    case 258:
    case 259:
      goto LABEL_40;
    case 132:
    case 133:
      v6 = at_block_format_bc2;
      goto LABEL_40;
    case 134:
    case 135:
      v6 = at_block_format_bc3;
      goto LABEL_40;
    case 140:
    case 141:
    case 142:
    case 143:
      v6 = at_block_format_bc5;
      goto LABEL_40;
    case 150:
    case 151:
    case 152:
    case 153:
      v6 = at_block_format_bc6;
      goto LABEL_40;
    case 186:
    case 204:
      v6 = at_block_format_astc_4x4_ldr;
      goto LABEL_40;
    case 187:
    case 205:
      v6 = at_block_format_astc_5x4_ldr;
      goto LABEL_40;
    case 188:
    case 206:
      v6 = at_block_format_astc_5x5_ldr;
      goto LABEL_40;
    case 189:
    case 207:
      v6 = at_block_format_astc_6x5_ldr;
      goto LABEL_40;
    case 190:
    case 208:
      v6 = at_block_format_astc_6x6_ldr;
      goto LABEL_40;
    case 192:
    case 210:
      v6 = at_block_format_astc_8x5_ldr;
      goto LABEL_40;
    case 193:
    case 211:
      v6 = at_block_format_astc_8x6_ldr;
      goto LABEL_40;
    case 194:
    case 212:
      v6 = at_block_format_astc_8x8_ldr;
      goto LABEL_40;
    case 195:
    case 213:
      v6 = at_block_format_astc_10x5_ldr;
      goto LABEL_40;
    case 196:
    case 214:
      v6 = at_block_format_astc_10x6_ldr;
      goto LABEL_40;
    case 197:
    case 215:
      v6 = at_block_format_astc_10x8_ldr;
      goto LABEL_40;
    case 198:
    case 216:
      v6 = at_block_format_astc_10x10_ldr;
      goto LABEL_40;
    case 199:
    case 217:
      v6 = at_block_format_astc_12x10_ldr;
      goto LABEL_40;
    case 200:
    case 218:
      v6 = at_block_format_astc_12x12_ldr;
      goto LABEL_40;
    case 222:
      v6 = at_block_format_astc_4x4_hdr;
      goto LABEL_40;
    case 223:
      v6 = at_block_format_astc_5x4_hdr;
      goto LABEL_40;
    case 224:
      v6 = at_block_format_astc_5x5_hdr;
      goto LABEL_40;
    case 225:
      v6 = at_block_format_astc_6x5_hdr;
      goto LABEL_40;
    case 226:
      v6 = at_block_format_astc_6x6_hdr;
      goto LABEL_40;
    case 228:
      v6 = at_block_format_astc_8x5_hdr;
      goto LABEL_40;
    case 229:
      v6 = at_block_format_astc_8x6_hdr;
      goto LABEL_40;
    case 230:
      v6 = at_block_format_astc_8x8_hdr;
      goto LABEL_40;
    case 231:
      v6 = at_block_format_astc_10x5_hdr;
      goto LABEL_40;
    case 232:
      v6 = at_block_format_astc_10x6_hdr;
      goto LABEL_40;
    case 233:
      v6 = at_block_format_astc_10x8_hdr;
      goto LABEL_40;
    case 234:
      v6 = at_block_format_astc_10x10_hdr;
      goto LABEL_40;
    case 235:
      v6 = at_block_format_astc_12x10_hdr;
      goto LABEL_40;
    case 236:
      v6 = at_block_format_astc_12x12_hdr;
LABEL_40:
      v29 = a2;
      if (*((_DWORD *)this + 22) != 1)
        goto LABEL_79;
      v36 = 0;
      v33[1] = 0;
      v34 = 0;
      v33[0] = 0;
      v35 = 0;
      v8 = re::TextureData::mipmapLevelCount(this);
      re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::resize(v33, (unint64_t)v8);
      if (*((_DWORD *)this + 22) >= 2u)
        goto LABEL_79;
      isHDR = re::isHDR((int)objc_msgSend(*((id *)this + 1), sel_pixelFormat));
      v10 = 70;
      if ((WORD4(v37) & 0x800) != 0)
        v10 = 71;
      v11 = isHDR == 0;
      if (isHDR)
        v12 = at_texel_format_rgba16_float;
      else
        v12 = at_texel_format_rgba8_unorm;
      if (!v11)
        v10 = 115;
      v31 = v10;
      encoder = at_encoder_create(v12, at_alpha_not_premultiplied, v6, at_alpha_not_premultiplied, 0);
      FaceOrArrayLength = re::internal::getFaceOrArrayLength((id *)this, v13);
      if (!v8)
        goto LABEL_71;
      v15 = 0;
      v16 = &selRef_newBufferWithBytes_length_options_;
      v17 = &selRef_setRate_;
      v30 = FaceOrArrayLength;
      break;
    default:
      switch((int)v5)
      {
        case 500:
        case 501:
        case 502:
        case 503:
        case 504:
        case 505:
        case 506:
        case 507:
        case 508:
        case 509:
        case 510:
        case 520:
        case 521:
        case 522:
        case 523:
        case 524:
        case 525:
        case 526:
        case 527:
        case 528:
        case 529:
        case 530:
        case 540:
        case 541:
        case 542:
        case 543:
        case 544:
        case 545:
        case 546:
        case 547:
        case 548:
        case 550:
        case 551:
        case 552:
        case 553:
        case 554:
        case 555:
        case 562:
        case 563:
        case 564:
        case 565:
        case 566:
        case 567:
        case 568:
        case 569:
        case 607:
        case 608:
        case 609:
        case 610:
        case 611:
        case 612:
        case 613:
        case 628:
        case 629:
          goto LABEL_6;
        default:
          goto LABEL_40;
      }
  }
  while (1)
  {
    v48 = 0;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    *(_OWORD *)buf = 0u;
    v43 = 0u;
    if (*((_DWORD *)this + 22) >= 2u)
      goto LABEL_79;
    objc_msgSend(*((id *)this + 1), sel_pixelFormat);
    if (*((_DWORD *)this + 22) >= 2u)
      goto LABEL_79;
    objc_msgSend(*((id *)this + 1), v16[240]);
    if (*((_DWORD *)this + 22) >= 2u)
      goto LABEL_79;
    objc_msgSend(*((id *)this + 1), v17[482]);
    if (*((_DWORD *)this + 22) >= 2u)
      goto LABEL_79;
    objc_msgSend(*((id *)this + 1), sel_depth);
    MTLGetTextureLevelInfoForDeviceWithOptions();
    if (*((_DWORD *)this + 22) >= 2u)
      goto LABEL_79;
    objc_msgSend(*((id *)this + 1), v16[240]);
    if (*((_DWORD *)this + 22) >= 2u)
      goto LABEL_79;
    v18 = v17;
    objc_msgSend(*((id *)this + 1), v17[482]);
    if (*((_DWORD *)this + 22) >= 2u)
      goto LABEL_79;
    v19 = v8;
    objc_msgSend(*((id *)this + 1), sel_depth);
    MTLGetTextureLevelInfoForDeviceWithOptions();
    if (*((_DWORD *)this + 22) >= 2u)
      goto LABEL_79;
    if (objc_msgSend(*((id *)this + 1), sel_textureType) == 7)
      v20 = v43;
    else
      v20 = v30;
    v21 = *((_QWORD *)this + 4);
    if (v21 <= v15)
    {
      *(_QWORD *)v41 = 0;
      v53 = 0u;
      v54 = 0u;
      memset(dest, 0, sizeof(dest));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)src = 136315906;
      *(_QWORD *)&src[4] = "operator[]";
      *(_WORD *)&src[12] = 1024;
      *(_DWORD *)&src[14] = 797;
      *(_WORD *)&src[18] = 2048;
      *(_QWORD *)&src[20] = v15;
      v50 = 2048;
      v51 = v21;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_78:
      *(_QWORD *)v41 = 0;
      v53 = 0u;
      v54 = 0u;
      memset(dest, 0, sizeof(dest));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)src = 136315906;
      *(_QWORD *)&src[4] = "operator[]";
      *(_WORD *)&src[12] = 1024;
      *(_DWORD *)&src[14] = 789;
      *(_WORD *)&src[18] = 2048;
      *(_QWORD *)&src[20] = v15;
      v50 = 2048;
      v51 = v21;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_79:
      std::__throw_bad_variant_access[abi:nn180100]();
    }
    v22 = *((_QWORD *)this + 6);
    if (*(_QWORD *)(v22 + 40 * v15 + 16))
    {
      v21 = v34;
      if (v34 <= v15)
        goto LABEL_78;
      v23 = v36;
      re::DynamicArray<BOOL>::resize(v36 + 40 * v15, 0);
      if (v20)
        break;
    }
LABEL_69:
    ++v15;
    v8 = v19;
    v11 = v15 == (_QWORD)v19;
    v16 = &selRef_newBufferWithBytes_length_options_;
    v17 = v18;
    if (v11)
    {
LABEL_71:
      v26 = objc_msgSend(*((id *)this + 1), sel_copy);
      objc_msgSend(v26, sel_setPixelFormat_, v31);
      re::CPUTexture::CPUTexture((uint64_t)buf, v26, (uint64_t)v33);
      *(_BYTE *)re::TextureData::TextureData(v29, (uint64_t)buf, (__CFString *)*((id *)this + 12)) = *(_BYTE *)this | 4;
      re::CPUTexture::~CPUTexture((re::CPUTexture *)buf);
      if (v26)

      goto LABEL_76;
    }
  }
  v24 = 0;
  while (1)
  {
    memset(dest, 0, 40);
    *(_QWORD *)dest = *(_QWORD *)(v23 + 40 * v15 + 32);
    *(int32x2_t *)&dest[8] = vmovn_s64(*(int64x2_t *)buf);
    *(_DWORD *)&dest[16] = 1;
    *(_QWORD *)&dest[24] = 0;
    *(_QWORD *)&src[8] = 0;
    *(_QWORD *)&src[16] = 0;
    *(_QWORD *)src = 0;
    *(_QWORD *)src = *(_QWORD *)(v22 + 40 * v15 + 32) + *((_QWORD *)&v47 + 1) * v24;
    *(_QWORD *)&src[8] = v47;
    v25 = (re *)at_encoder_decompress_texels(encoder, (const at_block_buffer_t *)src, (const at_texel_region_t *)dest, at_flags_default);
    if (v25)
      break;
    if (v20 == ++v24)
      goto LABEL_69;
  }
  v27 = v25;
  v28 = *re::pipelineLogObjects(v25);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v41 = 134217984;
    *(_QWORD *)&v41[4] = v27;
    _os_log_error_impl(&dword_224FE9000, v28, OS_LOG_TYPE_ERROR, "Encoder failed (error: %ld) during texture creation", v41, 0xCu);
  }
  *(_BYTE *)v29 &= 0x80u;
  *(_QWORD *)(v29 + 8) = 0;
  *(_DWORD *)(v29 + 88) = 0;
  *(_QWORD *)(v29 + 96) = 0;
LABEL_76:

  re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)v33);
}

void re::convertCPUTextureColorSpace(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v3;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *CGColorSpaceNameForPixelFormat;
  CGColorSpaceRef v9;
  CGColorSpace *v10;
  double v11;
  double v12;
  CGColorSpace *v13;
  char v14;
  int v15;
  size_t NumberOfComponents;
  CGColorSpaceModel Model;
  CGColorSpace *v18;
  unint64_t v19;
  unsigned int FaceOrArrayLength;
  _anonymous_namespace_ *v21;
  char v22;
  const vImage_CGImageFormat *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  size_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  CGColorSpace *v36;
  char v37;
  char *v38;
  char *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  int v43;
  uint64_t *v44;
  char v45;
  int v46;
  uint64_t v47;
  int v48;
  CGColorSpace *v49;
  __CFString *v50;
  char *v51;
  unint64_t v52;
  id *v53;
  unint64_t v54;
  size_t __n;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  _QWORD v63[2];
  unint64_t v64;
  int v65;
  uint64_t v66;
  vImage_CGImageFormat v67;
  CGColorSpaceRef space;
  size_t v69;
  CGColorSpaceModel v70;
  vImage_CGImageFormat v71;
  CGColorSpaceRef v72;
  char v73;
  id v74[10];
  unsigned int v75;
  double v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  unsigned __int8 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  double v89;
  double v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  id v94;
  CGColorSpaceRef v95;
  size_t v96;
  CGColorSpaceModel v97;
  int v98;
  const char *v99;
  __int16 v100;
  int v101;
  __int16 v102;
  unint64_t v103;
  __int16 v104;
  unint64_t v105;
  uint64_t v106;

  v3 = (char *)a2;
  v106 = *MEMORY[0x24BDAC8D0];
  v6 = (const __CFString *)*(id *)(a2 + 96);
  if (!v6)
    goto LABEL_52;
  v7 = v6;
  v81 = 0;
  if ((re::ColorHelpers::getColorGamutFromCGColorSpaceName(v6, (char *)&v81) & 1) == 0 || v81 == a1)
    goto LABEL_52;
  if (*((_DWORD *)v3 + 22) >= 2u)
    goto LABEL_60;
  CGColorSpaceNameForPixelFormat = (const __CFString *)re::ColorHelpers::getCGColorSpaceNameForPixelFormat((int)objc_msgSend(*((id *)v3 + 1), sel_pixelFormat), a1);
  v9 = CGColorSpaceCreateWithName(CGColorSpaceNameForPixelFormat);
  if (!v9)
  {
LABEL_52:
    *(_BYTE *)a3 &= 0x80u;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 96) = 0;
    return;
  }
  v50 = (__CFString *)CGColorSpaceNameForPixelFormat;
  v80 = 0;
  v79 = 0u;
  v78 = 0u;
  v77 = 0u;
  if (*((_DWORD *)v3 + 22) >= 2u)
    goto LABEL_60;
  v10 = v9;
  objc_msgSend(*((id *)v3 + 1), sel_pixelFormat);
  MTLPixelFormatGetInfoForDevice();
  v73 = 0;
  v74[0] = 0;
  v75 = 0;
  v76 = 0.0;
  if ((BYTE9(v77) & 4) == 0)
  {
LABEL_15:
    if (*((_DWORD *)v3 + 22) == 1)
    {
      v13 = CGColorSpaceCreateWithName(v7);
      if (v79 == 4)
        v14 = 3;
      else
        v14 = 0;
      v15 = objc_msgSend(*((id *)v3 + 1), sel_pixelFormat);
      *(_QWORD *)&v83 = v13;
      *((_QWORD *)&v83 + 1) = CGColorSpaceGetNumberOfComponents(v13);
      LODWORD(v84) = CGColorSpaceGetModel(v13);
      v49 = v13;
      CGColorSpaceRelease(v13);
      *(_QWORD *)&v67.bitsPerComponent = *(_QWORD *)&v71.bitsPerComponent;
      *(_OWORD *)&v67.bitmapInfo = *(_OWORD *)&v71.bitmapInfo;
      *(_QWORD *)&v67.renderingIntent = *(_QWORD *)&v71.renderingIntent;
      space = CGColorSpaceRetain(v72);
      NumberOfComponents = CGColorSpaceGetNumberOfComponents(v10);
      Model = CGColorSpaceGetModel(v10);
      v18 = space;
      space = v10;
      v69 = NumberOfComponents;
      v70 = Model;
      CGColorSpaceRelease(v18);
      v67.colorSpace = v10;
      v19 = *((_QWORD *)v3 + 4);
      v53 = (id *)(v3 + 8);
      FaceOrArrayLength = re::internal::getFaceOrArrayLength((id *)v3 + 1);
      v66 = 0;
      v63[1] = 0;
      v64 = 0;
      v63[0] = 0;
      v65 = 0;
      v21 = (_anonymous_namespace_ *)re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::resize(v63, v19);
      v22 = *v3;
      v62 = *v3;
      v52 = v19;
      if (v19)
      {
        v24 = 0;
        v54 = FaceOrArrayLength;
        v51 = v3;
        do
        {
          v25 = *((_QWORD *)v3 + 4);
          if (v25 <= v24)
            goto LABEL_58;
          v26 = *((_QWORD *)v3 + 6);
          v27 = (unint64_t)objc_msgSend(*((id *)v3 + 1), sel_width) >> v24;
          if (v27 <= 1)
            v27 = 1;
          v59 = v27;
          v28 = (unint64_t)objc_msgSend(*((id *)v3 + 1), sel_height) >> v24;
          if (v28 <= 1)
            v28 = 1;
          v61 = v28;
          v60 = v54;
          if (objc_msgSend(*((id *)v3 + 1), sel_textureType) == 7)
          {
            v29 = (unint64_t)objc_msgSend(*v53, sel_depth) >> v24;
            if (v29 <= 1)
              v29 = 1;
            v60 = v29;
          }
          v25 = v64;
          if (v64 <= v24)
            goto LABEL_59;
          v30 = v24;
          v31 = *(_QWORD *)(v26 + 40 * v24 + 16);
          v32 = (*((_QWORD *)&v78 + 1) * v59 + 3) & 0xFFFFFFFFFFFFFFFCLL;
          __n = v32 * v61;
          v58 = v30;
          re::DynamicArray<BOOL>::resize(v66 + 40 * v30, v32 * v61 * v60);
          if (v60)
          {
            v25 = 0;
            v56 = v31 / v60;
            v57 = (uint64_t *)(v26 + 40 * v58 + 32);
            while (1)
            {
              v33 = v64;
              v24 = v58;
              if (v64 <= v58)
                break;
              v34 = *v57;
              v35 = *(_QWORD *)(v66 + 40 * v58 + 32);
              LOBYTE(v98) = 0;
              *(_QWORD *)&v83 = v34 + v25 * v56;
              *((_QWORD *)&v83 + 1) = v61;
              *(_QWORD *)&v84 = v59;
              *((_QWORD *)&v84 + 1) = v32;
              v85 = *(_OWORD *)&v71.bitsPerComponent;
              v86 = *(_OWORD *)&v71.bitmapInfo;
              v87 = *(unint64_t *)&v71.renderingIntent;
              v88 = 0;
              v89 = (double)v59;
              v90 = (double)v61;
              v91 = 0u;
              v92 = 0u;
              v93 = 0u;
              v94 = 0;
              v36 = CGColorSpaceRetain(v71.colorSpace);
              v95 = v36;
              v96 = CGColorSpaceGetNumberOfComponents(v36);
              v97 = CGColorSpaceGetModel(v36);
              if ((v37 & 1) != 0)
              {
                v38 = (char *)(v35 + v25 * __n);
                v39 = (char *)v83;
                if (*((_QWORD *)&v84 + 1) == v32)
                {
                  memcpy(v38, (const void *)v83, __n);
                }
                else
                {
                  v40 = v61;
                  do
                  {
                    memcpy(v38, v39, v32);
                    v39 += *((_QWORD *)&v84 + 1);
                    v38 += v32;
                    --v40;
                  }
                  while (v40);
                }
              }
              else
              {
                *(_BYTE *)a3 &= 0x80u;
                *(_QWORD *)(a3 + 8) = 0;
                *(_DWORD *)(a3 + 88) = 0;
                *(_QWORD *)(a3 + 96) = 0;
              }
              CGColorSpaceRelease(v95);
              v95 = 0;
              if (v94)
              {

                v94 = 0;
              }
              v41 = (void *)*((_QWORD *)&v93 + 1);
              *((_QWORD *)&v93 + 1) = 0;
              if (v41)
                free(v41);

              if ((_QWORD)v91)
                CGImageBlockSetRelease();
              if ((v37 & 1) == 0)
                goto LABEL_51;
              if (++v25 == v60)
                goto LABEL_48;
            }
            v82 = 0;
            v86 = 0u;
            v87 = 0u;
            v84 = 0u;
            v85 = 0u;
            v83 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v98 = 136315906;
            v99 = "operator[]";
            v100 = 1024;
            v101 = 789;
            v102 = 2048;
            v103 = v58;
            v104 = 2048;
            v105 = v33;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_58:
            v82 = 0;
            v86 = 0u;
            v87 = 0u;
            v84 = 0u;
            v85 = 0u;
            v83 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v98 = 136315906;
            v99 = "operator[]";
            v100 = 1024;
            v101 = 797;
            v102 = 2048;
            v103 = v24;
            v104 = 2048;
            v105 = v25;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_59:
            v82 = 0;
            v86 = 0u;
            v87 = 0u;
            v84 = 0u;
            v85 = 0u;
            v83 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v98 = 136315906;
            v99 = "operator[]";
            v100 = 1024;
            v101 = 789;
            v102 = 2048;
            v103 = v24;
            v104 = 2048;
            v105 = v25;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
LABEL_48:
          v24 = v58 + 1;
          v3 = v51;
        }
        while (v58 + 1 != v52);
        v22 = v62;
      }
      re::CPUTexture::CPUTexture((uint64_t)&v83, *v53, (uint64_t)v63);
      re::TextureData::TextureData(a3, (uint64_t)&v83, v50);
      *(_BYTE *)a3 = v22 | 0x10;
      CGColorSpaceRelease(v10);
      CGColorSpaceRelease(v49);
      re::CPUTexture::~CPUTexture((re::CPUTexture *)&v83);
LABEL_51:
      re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)v63);
      CGColorSpaceRelease(space);
      CGColorSpaceRelease(v72);
      goto LABEL_55;
    }
LABEL_60:
    v42 = std::__throw_bad_variant_access[abi:nn180100]();
    return;
  }
  re::decompressCPUTexture((re *)v3, (uint64_t)&v83);
  v73 = v83;
  std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>((uint64_t)v74, (uint64_t)&v83 + 8);
  v11 = v90;
  v90 = 0.0;
  v12 = v76;
  v76 = v11;

  if (LODWORD(v89) != -1)
    ((void (*)(vImage_CGImageFormat *, char *))*(&off_24ED7D4F8 + LODWORD(v89)))(&v71, (char *)&v83 + 8);
  if (!v75)
    goto LABEL_13;
  if (v75 != 1)
    goto LABEL_60;
  if (v74[3])
  {
LABEL_13:
    if (v74[0])
    {
      objc_msgSend(v74[0], sel_pixelFormat);
      MTLPixelFormatGetInfoForDevice();
      v77 = v83;
      v78 = v84;
      v79 = v85;
      v80 = v86;
      v3 = &v73;
      goto LABEL_15;
    }
  }
  CGColorSpaceRelease(v10);
  *(_BYTE *)a3 &= 0x80u;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
LABEL_55:

  if (v75 != -1)
    ((void (*)(__int128 *, id *))*(&off_24ED7D4F8 + v75))(&v83, v74);
}

void re::`anonymous namespace'::cgFormatForTextureDestination(uint64_t a1, int a2, uint64_t *a3, char a4, int a5, uint64_t a6, int a7)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  int v19;
  NSObject *v20;
  int v21;
  uint64_t v22;
  CGColorSpace *v23;
  BOOL v25;
  unsigned int v26;
  CGColorSpaceRef v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v10 = 8 * *((_DWORD *)a3 + 6);
  v11 = *((unsigned __int8 *)a3 + 32);
  v12 = v10 / v11;
  v13 = a4 & 0x1F;
  if (a7 == 2)
  {
    v16 = v13 - 1;
    if (v16 < 6)
    {
      v14 = dword_226191B14[v16];
      v15 = dword_226191B2C[(int)v16];
      goto LABEL_11;
    }
  }
  else
  {
    if (a7 == 1)
    {
      v15 = 1;
      v14 = 2;
      goto LABEL_11;
    }
    if (a7)
    {
      v14 = 0;
      v15 = 0;
      goto LABEL_11;
    }
    if (v13 < 7)
    {
      v14 = dword_226191ADC[a4 & 0x1F];
      v15 = dword_226191AF8[a4 & 0x1F];
      goto LABEL_11;
    }
  }
  v15 = 3;
  v14 = 4;
LABEL_11:
  if (v12 <= 7)
  {
    v17 = v10 == 16;
    goto LABEL_16;
  }
  if (v12 != 8)
  {
    v17 = v12 == 16;
LABEL_16:
    if (v17)
      v18 = 4096;
    else
      v18 = 0x2000;
    goto LABEL_19;
  }
  v18 = 0;
LABEL_19:
  v19 = 0;
  switch(a2)
  {
    case 0:
    case 92:
    case 93:
    case 94:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 140:
    case 141:
    case 142:
    case 143:
    case 150:
    case 151:
    case 152:
    case 153:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 170:
    case 172:
    case 174:
    case 176:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 240:
    case 241:
    case 250:
    case 252:
    case 253:
    case 255:
    case 260:
    case 261:
    case 262:
LABEL_22:
      v20 = *re::pipelineLogObjects((re *)a1);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v22 = *a3;
        v29 = 136446210;
        v30 = v22;
        _os_log_error_impl(&dword_224FE9000, v20, OS_LOG_TYPE_ERROR, "No CG image format corresponds to pixel format %{public}s", (uint8_t *)&v29, 0xCu);
      }
      *(_OWORD *)(a1 + 16) = unk_226191960;
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      v21 = -1;
      goto LABEL_43;
    case 1:
      v19 = 7;
      goto LABEL_34;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 26:
    case 27:
    case 28:
    case 29:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 56:
    case 57:
    case 58:
    case 59:
    case 61:
    case 66:
    case 67:
    case 68:
    case 69:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 106:
    case 107:
    case 108:
    case 109:
    case 111:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 126:
    case 127:
    case 128:
    case 129:
    case 136:
    case 137:
    case 138:
    case 139:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 168:
    case 169:
    case 171:
    case 173:
    case 175:
    case 177:
    case 184:
    case 185:
    case 191:
    case 201:
    case 202:
    case 203:
    case 209:
    case 219:
    case 220:
    case 221:
    case 227:
    case 237:
    case 238:
    case 239:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 251:
    case 254:
    case 256:
    case 257:
    case 258:
    case 259:
      goto LABEL_34;
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 20:
    case 22:
    case 23:
    case 24:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 53:
    case 54:
    case 60:
    case 62:
    case 63:
    case 64:
    case 103:
    case 104:
      v19 = v18;
      goto LABEL_34;
    case 25:
    case 55:
    case 65:
    case 105:
      v19 = v18 | 0x100;
      goto LABEL_34;
    case 40:
      v19 = 4096;
      goto LABEL_34;
    case 41:
    case 42:
      v19 = 4099;
      goto LABEL_34;
    case 43:
      v19 = v14 | 0x1000;
      goto LABEL_34;
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 90:
    case 91:
    case 110:
    case 112:
    case 113:
    case 114:
    case 123:
    case 124:
      v19 = v18 | v15;
      goto LABEL_34;
    case 80:
    case 81:
LABEL_27:
      v19 = v14 | 0x2000;
      goto LABEL_34;
    case 115:
    case 125:
      v19 = v15 | v18 | 0x100;
LABEL_34:
      v23 = *(CGColorSpace **)a6;
      v25 = (v19 & 0x1F) == 0 && *(_QWORD *)(a6 + 8) == 1 && v11 == 2;
      v26 = v19 & 0xFFFFFFE0 | 3;
      if (!v25)
        v26 = v19;
      *(_DWORD *)a1 = v12;
      *(_DWORD *)(a1 + 4) = v10;
      *(_QWORD *)(a1 + 8) = v23;
      *(_DWORD *)(a1 + 16) = v26;
      *(_DWORD *)(a1 + 20) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = a5;
      *(_DWORD *)(a1 + 36) = 0;
      v27 = CGColorSpaceRetain(v23);
      v28 = *(_QWORD *)(a6 + 8);
      *(_QWORD *)(a1 + 40) = v27;
      *(_QWORD *)(a1 + 48) = v28;
      v21 = *(_DWORD *)(a6 + 16);
LABEL_43:
      *(_DWORD *)(a1 + 56) = v21;
      return;
    default:
      switch(a2)
      {
        case 500:
        case 501:
        case 502:
        case 503:
        case 504:
        case 505:
        case 506:
        case 507:
        case 508:
        case 509:
        case 510:
        case 520:
        case 521:
        case 522:
        case 523:
        case 524:
        case 525:
        case 526:
        case 527:
        case 528:
        case 529:
        case 530:
        case 540:
        case 541:
        case 542:
        case 543:
        case 544:
        case 545:
        case 546:
        case 547:
        case 548:
        case 550:
        case 551:
        case 562:
        case 563:
        case 564:
        case 565:
        case 566:
        case 567:
        case 568:
        case 569:
        case 607:
        case 608:
        case 609:
        case 610:
        case 611:
        case 612:
        case 613:
        case 628:
        case 629:
          goto LABEL_22;
        case 552:
        case 553:
          goto LABEL_27;
        case 554:
        case 555:
          v19 = 0x2000;
          goto LABEL_34;
        default:
          goto LABEL_34;
      }
  }
}

